uint64_t Phase::Zeppelin::AcousticsUtils::GetDefaultThirdOctaveBandCenterFrequencies(Phase::Zeppelin::AcousticsUtils *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(v3, &Phase::sThirdOctaveBandFrequencies, (uint64_t)"St16invalid_argument", 0x1FuLL);
    Phase::Zeppelin::AcousticsUtils::GetDefaultThirdOctaveBandCenterFrequencies(void)::centerFreqs = (uint64_t)v3;
  }
  return Phase::Zeppelin::AcousticsUtils::GetDefaultThirdOctaveBandCenterFrequencies(void)::centerFreqs;
}

void sub_2164CD988(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

float Phase::Zeppelin::AcousticsUtils::ComputeWavenumber(Phase::Zeppelin::AcousticsUtils *this, float a2, float a3)
{
  NSObject *v4;
  std::logic_error *exception;
  NSObject *v6;
  std::logic_error *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a2 <= 0.0)
  {
    v4 = **(NSObject ***)(Phase::Logger::GetInstancePtr(this) + 928);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v8 = 136315394;
      v9 = "AcousticsUtils.cpp";
      v10 = 1024;
      v11 = 44;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(0.0 >= inFrequency) is true]: ErrorDescriptions::kErrDescr_nonPositiveFrequency", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nonPositiveFrequency);
  }
  if (a3 <= 0.0)
  {
    v6 = **(NSObject ***)(Phase::Logger::GetInstancePtr(this) + 928);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v8 = 136315394;
      v9 = "AcousticsUtils.cpp";
      v10 = 1024;
      v11 = 49;
      _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(0.0f >= inSpeedOfSound) is true]: ErrorDescriptions::kErrDescr_nonPositiveSpeedOfSound", (uint8_t *)&v8, 0x12u);
    }
    v7 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v7, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nonPositiveSpeedOfSound);
  }
  return a2 * 6.28318531 / a3;
}

void sub_2164CDB70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  return result;
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2164CDC10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<float>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_2164CDCF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void Phase::ActionTreeServerCallbackInterface::SubmitGeneratorPreparedResult(uint64_t a1, os_signpost_id_t a2, uint64_t a3)
{
  Phase::Logger *v5;
  Phase::Logger *InstancePtr;
  NSObject *v7;
  NSObject *v8;
  _QWORD __src[3];
  uint8_t buf[4];
  os_signpost_id_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  __src[0] = a2;
  __src[1] = a3;
  __src[2] = mach_absolute_time();
  Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)(a1 + 32), 1u, __src, 0x18uLL);
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(v5);
  if (*((_BYTE *)InstancePtr + 696))
  {
    v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                       + 688)));
    v8 = v7;
    if (a2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      *(_DWORD *)buf = 134217984;
      v11 = a2;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v8, OS_SIGNPOST_INTERVAL_END, a2, "Phase_Generator_Prepare", "Generator ID %llu", buf, 0xCu);
    }

  }
}

uint64_t Phase::ActionTreeServerCallbackInterface::SubmitGeneratorCompletedResult(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD __src[3];

  __src[0] = a2;
  __src[1] = a3;
  __src[2] = *a4;
  Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)(a1 + 32), 2u, __src, 0x18uLL);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 96) + 16))(*(_QWORD *)(a1 + 96), a2, a3, 0);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), a2, a3);
}

void Phase::ActionTreeServerCallbackInterface::SubmitGeneratorSeekCompletedResult(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD __src[2];
  int v5;

  __src[0] = a2;
  __src[1] = a3;
  v5 = a4;
  Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)(a1 + 32), 3u, __src, 0x18uLL);
}

void Phase::ActionTreeServerCallbackInterface::SubmitGeneratorPlayStateChanged(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD __src[2];
  int v5;

  __src[0] = a2;
  __src[1] = a3;
  v5 = a4;
  Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)(a1 + 32), 5u, __src, 0x18uLL);
}

uint64_t Phase::ActionTreeServerCallbackInterface::GetResidentBufferForGenerator(Phase::ActionTreeServerCallbackInterface *this, UniqueObjectId a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 12);
  if (!v2)
    std::terminate();
  return (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v2 + 48))(v2, a2.mStorage[0], a2.mStorage[1]);
}

uint64_t Phase::ActionTreeServerCallbackInterface::GeneratorStreamSeek(Phase::ActionTreeServerCallbackInterface *this, UniqueObjectId a2, double a3, PHASEPlaybackMode a4)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 12);
  if (!v4)
    std::terminate();
  return (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, PHASEPlaybackMode, double))(*(_QWORD *)v4 + 56))(v4, a2.mStorage[0], a2.mStorage[1], a4, a3);
}

uint64_t Phase::ActionTreeServerCallbackInterface::IORenderOutput(Phase::ActionTreeServerCallbackInterface *this, UniqueObjectId a2, const AudioTimeStamp *a3, uint64_t a4, AudioBufferList *a5)
{
  uint64_t v6;
  unint64_t v10;
  unint64_t v11;

  v6 = *((_QWORD *)this + 12);
  if (v6
    && (v10 = a2.mStorage[1], v11 = a2.mStorage[0], (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6)))
  {
    return (*(uint64_t (**)(_QWORD, unint64_t, unint64_t, const AudioTimeStamp *, uint64_t, AudioBufferList *))(**((_QWORD **)this + 12) + 80))(*((_QWORD *)this + 12), v11, v10, a3, a4, a5);
  }
  else
  {
    return 0;
  }
}

uint64_t Phase::ActionTreeServerCommandProcessor::ActionTreeServerCommandProcessor(uint64_t a1, Phase::Controller::TaskManager *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  Phase::ActionTreeDirectIOManager *v18;
  uint64_t v19;
  uint64_t (**v21)();
  void (*v22)(uint64_t, _QWORD *, uint64_t);
  uint64_t v23;
  uint64_t (***v24)();
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24D576BE8;
  *(_OWORD *)(a1 + 8) = 0u;
  v11 = (float *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v12 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v13 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;

  *(_QWORD *)a1 = &off_24D576B98;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = a3;
  *(_QWORD *)(a1 + 96) = a4;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_QWORD *)(a1 + 144) = a6;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = &off_24D576B40;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<char>::__append((std::vector<char> *)(a1 + 168), 0x20000uLL);
  v14 = *(_QWORD *)(a1 + 168);
  v15 = *(_QWORD *)(a1 + 184) - v14;
  *(_QWORD *)(a1 + 192) = v14;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = v15;
  *(_QWORD *)(a1 + 216) = a1 + 168;
  v21 = &off_24D576C98;
  v22 = Phase::Dispatch::sMessageWriterCallback;
  v24 = &v21;
  std::function<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::operator=((_QWORD *)(a1 + 224), (uint64_t)&v21);
  v16 = v24;
  if (v24 == &v21)
  {
    v17 = 4;
    v16 = &v21;
  }
  else
  {
    if (!v24)
      goto LABEL_6;
    v17 = 5;
  }
  (*v16)[v17]();
LABEL_6:
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  if (!*(_QWORD *)(a1 + 144))
  {
    v18 = (Phase::ActionTreeDirectIOManager *)operator new();
    Phase::ActionTreeDirectIOManager::ActionTreeDirectIOManager(v18, a2, (Phase::ActionTreeServerCallbackInterface *)(a1 + 160));
    v19 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v18;
    if (!v19)
      goto LABEL_10;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v18 = *(Phase::ActionTreeDirectIOManager **)(a1 + 152);
  if (!v18)
    std::terminate();
LABEL_10:
  *(_QWORD *)(a1 + 256) = v18;
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::SleepGeneratorHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 1, 1, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::WakeGeneratorHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 2, 2, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::StopGeneratorHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 3, 3, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::PauseGeneratorHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 4, 4, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::ResumeGeneratorHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 5, 5, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::SeekGeneratorHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 6, 6, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::PrepareSamplerHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 7, 7, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::PrepareProcedureHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 8, 8, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::SetGeneratorParameterHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 9, 9, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::SetGeneratorUpdateParametersHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 10, 10, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::PlayGeneratorHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 11, 11, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::EnqueueGeneratorBufferHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 12, 12, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::SetSpatialCategorySendLevelHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 13, 13, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::SetSpatialCategoryParameterHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 14, 14, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::CreateSpatialSubmixHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 15, 15, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::CreateAmbientSubmixHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 16, 16, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::CreateChannelSubmixHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 17, 17, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::SetSubmixParameterHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 18, 18, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::SetAmbientSubmixOrientationHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 19, 19, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::DestroySubmixHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 20, 20, (uint64_t)&v21);
  v21 = (uint64_t (**)())Phase::ActionTreeServerCommandProcessor::GeoQueryHandler;
  v22 = 0;
  v23 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 21, 21, (uint64_t)&v21);
  return a1;
}

void sub_2164CE4E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  Phase::ActionTreeServerCallbackInterface *v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  MEMORY[0x2199F9D70](v4, 0x10A1C405A4BACE5);
  v6 = *(_QWORD **)(v1 + 264);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  *(_QWORD *)(v1 + 264) = 0;
  Phase::ActionTreeServerCallbackInterface::~ActionTreeServerCallbackInterface(v3);
  v8 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v1 + 152) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v2);
  Phase::Dispatch::TransactionExecutor<Phase::ActionTreeServerCommand>::~TransactionExecutor(v1);
  _Unwind_Resume(a1);
}

void sub_2164CE5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  _QWORD *v13;
  void **v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;

  v16 = a13;
  if (a13 == v15)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  v18 = (_QWORD *)v13[31];
  if (v18 == v13 + 28)
  {
    v19 = 4;
    v18 = v13 + 28;
  }
  else
  {
    if (!v18)
      goto LABEL_11;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_11:
  v20 = *v14;
  if (*v14)
  {
    v13[22] = v20;
    operator delete(v20);
  }
  JUMPOUT(0x2164CE57CLL);
}

void sub_2164CE628()
{
  uint64_t v0;
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v1);
  JUMPOUT(0x2164CE5A4);
}

void Phase::ActionTreeServerCommandProcessor::SleepGeneratorHandler(Phase::ActionTreeServerCommandProcessor *this, uint64_t *a2)
{
  unint64_t v4;
  BOOL v5;
  __int128 v6;

  v4 = Phase::Controller::VoiceManager::Implementation::SleepGenerator(**((_QWORD **)this + 11), *a2, a2[1]);
  if (HIDWORD(v4))
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)this + 24, 7u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::WakeGeneratorHandler(Phase::ActionTreeServerCommandProcessor *this, uint64_t *a2)
{
  unint64_t v4;
  BOOL v5;
  __int128 v6;

  v4 = Phase::Controller::VoiceManager::Implementation::WakeGenerator(**((_QWORD **)this + 11), *a2, a2[1]);
  if (HIDWORD(v4))
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)this + 24, 7u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::StopGeneratorHandler(Phase::ActionTreeServerCommandProcessor *this, uint64_t *a2)
{
  unint64_t v4;
  BOOL v5;
  __int128 v6;

  v4 = Phase::Controller::VoiceManager::Implementation::StopGenerator(**((_QWORD **)this + 11), *a2, a2[1], 0.0);
  if (HIDWORD(v4))
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)this + 24, 7u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::PauseGeneratorHandler(Phase::ActionTreeServerCommandProcessor *this, uint64_t *a2)
{
  unint64_t v4;
  BOOL v5;
  __int128 v6;

  v4 = Phase::Controller::VoiceManager::Implementation::PauseGenerator(**((_QWORD **)this + 11), *a2, a2[1]);
  if (HIDWORD(v4))
    v5 = 1;
  else
    v5 = v4 == 0;
  if (v5)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 19) + 16))(*((_QWORD *)this + 19), *a2, a2[1], 2);
  }
  else
  {
    v6 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)this + 24, 7u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::ResumeGeneratorHandler(Phase::ActionTreeServerCommandProcessor *this, uint64_t *a2)
{
  unint64_t v4;
  BOOL v5;
  __int128 v6;

  v4 = Phase::Controller::VoiceManager::Implementation::ResumeGenerator(**((_QWORD **)this + 11), *a2, a2[1]);
  if (HIDWORD(v4))
    v5 = 1;
  else
    v5 = v4 == 0;
  if (v5)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 19) + 16))(*((_QWORD *)this + 19), *a2, a2[1], 1);
  }
  else
  {
    v6 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)this + 24, 7u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::SeekGeneratorHandler(Phase::ActionTreeServerCommandProcessor *this, __int128 *a2)
{
  unint64_t v4;
  BOOL v5;
  __int128 v6;

  v4 = Phase::Controller::VoiceManager::Implementation::SeekGeneratorTime(**((_QWORD **)this + 11), *(_QWORD *)a2, *((_QWORD *)a2 + 1), *((double *)a2 + 2));
  if (HIDWORD(v4))
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = *a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)this + 24, 7u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::PrepareSamplerHandler(Phase::ActionTreeServerCommandProcessor *this, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  Phase::Logger *v11;
  Phase::Logger *v12;
  NSObject *v13;
  uint64_t v14;
  Phase::Logger *v15;
  NSObject *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  Phase::Logger *v23;
  unint64_t v24;
  NSObject *v25;
  Phase::ActionTreeServerCommandProcessor *v26;
  void *v27;
  id v28;
  id v29;
  void (**v30)(Phase::Controller::SamplerPrepareParameters *__hidden);
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  _BYTE buf[18];
  __int16 v47;
  Phase::ActionTreeServerCommandProcessor *v48;
  __int16 v49;
  void *v50;
  __int16 v51;
  Phase::Logger *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v30 = &off_24D576C10;
  v36 = *((_DWORD *)a2 + 8);
  v37 = -1;
  v4 = *((_QWORD *)a2 + 14);
  v43 = *((_QWORD *)a2 + 13);
  v44 = 0uLL;
  v5 = a2[48];
  v31 = 0;
  v38 = v5;
  v39 = 0;
  v6 = *(_OWORD *)(a2 + 72);
  v40 = *(_OWORD *)(a2 + 56);
  v41 = v6;
  v42 = *(_OWORD *)(a2 + 88);
  v32 = v4;
  v7 = *((_QWORD *)a2 + 15);
  v35 = *((_QWORD *)a2 + 16);
  *(_QWORD *)&v6 = *((_QWORD *)a2 + 5);
  v33 = v7;
  v34 = v6;
  v45 = *(_OWORD *)(a2 + 152);
  if (v5 == 3)
  {
    v44 = *(_OWORD *)(a2 + 136);
    Phase::Controller::TaskManager::GetObjCService<ExternalStreamManager>(*((Phase::Logger **)this + 10), 15);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", a2 + 136);
    v29 = 0;
    objc_msgSend(v8, "formatForStream:error:", v9, &v29);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (Phase::Logger *)v29;
    v12 = v11;
    if (v11)
    {
      v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11) + 384));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "ActionTreeInterface.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 518;
        v47 = 2048;
        v48 = this;
        v49 = 2112;
        v50 = v9;
        v51 = 2112;
        v52 = v12;
        _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: failed to query pull stream %@ format: %@", buf, 0x30u);
      }
      *(_OWORD *)buf = *(_OWORD *)a2;
      Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)this + 24, 7u, buf, 0x10uLL);
LABEL_10:

      return;
    }
    v28 = 0;
    v14 = objc_msgSend(v8, "typeForStream:error:", v9, &v28);
    v15 = (Phase::Logger *)v28;
    if (v15)
    {
      v12 = v15;
      v16 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15) + 384));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "ActionTreeInterface.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 528;
        v47 = 2048;
        v48 = this;
        v49 = 2112;
        v50 = v9;
        v51 = 2112;
        v52 = v12;
        _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: failed to query pull stream %@ type: %@", buf, 0x30u);
      }
      *(_OWORD *)buf = *(_OWORD *)a2;
      Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)this + 24, 7u, buf, 0x10uLL);
      goto LABEL_10;
    }
    v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDB17E8]), "initWithLayoutTag:", *((unsigned int *)a2 + 8));
    v18 = objc_alloc(MEMORY[0x24BDB1818]);
    objc_msgSend(v10, "sampleRate");
    v19 = (void *)objc_msgSend(v18, "initStandardFormatWithSampleRate:channelLayout:", v17);
    v20 = objc_msgSend(v19, "streamDescription");
    v21 = *(_OWORD *)v20;
    v22 = *(_OWORD *)(v20 + 16);
    v43 = *(_QWORD *)(v20 + 32);
    v41 = v21;
    v42 = v22;
    v39 = v14;

  }
  v23 = (Phase::Logger *)(*(uint64_t (**)(_QWORD, unsigned __int8 *))(**((_QWORD **)this + 19) + 32))(*((_QWORD *)this + 19), a2);
  if ((v23 & 1) == 0)
  {
    v25 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v23) + 688));
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = *(Phase::ActionTreeServerCommandProcessor **)a2;
      v27 = (void *)*((_QWORD *)a2 + 2);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ActionTreeInterface.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 549;
      v47 = 2048;
      v48 = v26;
      v49 = 2048;
      v50 = v27;
      _os_log_impl(&dword_2164CC000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: could not prepare IO manager for generatorId %llu, submixId %llu!", buf, 0x26u);
    }
    goto LABEL_18;
  }
  v24 = Phase::Controller::VoiceManager::Implementation::PrepareGenerator(**((double ***)this + 11), *(_QWORD *)a2, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3), (uint64_t)&v30, (uint64_t)this + 160);
  if (!HIDWORD(v24) && (_BYTE)v24)
  {
LABEL_18:
    *(_OWORD *)buf = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)this + 24, 7u, buf, 0x10uLL);
  }
}

void sub_2164CED74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void Phase::ActionTreeServerCommandProcessor::PrepareProcedureHandler(double ***this, __int128 *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void (**v8)(Phase::Controller::ProcedurePrepareParameters *__hidden);
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  __int128 __src;

  v4 = *((_BYTE *)a2 + 48);
  v9 = 1;
  v8 = &off_24D576C40;
  v16 = v4;
  v14 = *((_DWORD *)a2 + 8);
  v15 = -1;
  v10 = *((_QWORD *)a2 + 7);
  v5 = *((_QWORD *)a2 + 8);
  v13 = *((_QWORD *)a2 + 9);
  v6 = *((_QWORD *)a2 + 5);
  v11 = v5;
  v12 = v6;
  v17 = a2[5];
  v18 = *((_DWORD *)a2 + 24);
  v19 = *((_QWORD *)a2 + 13);
  v7 = Phase::Controller::VoiceManager::Implementation::PrepareGenerator(*this[11], *(_QWORD *)a2, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3), (uint64_t)&v8, (uint64_t)(this + 20));
  if (!HIDWORD(v7))
  {
    if ((_BYTE)v7)
    {
      __src = *a2;
      Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage(this + 24, 7u, &__src, 0x10uLL);
    }
  }
}

void Phase::ActionTreeServerCommandProcessor::SetGeneratorParameterHandler(Phase::ActionTreeServerCommandProcessor *this, __int128 *a2)
{
  unint64_t v4;
  BOOL v5;
  __int128 v6;

  v4 = Phase::Controller::VoiceManager::Implementation::SetGeneratorParameter(**((_QWORD **)this + 11), *(_QWORD *)a2, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), *((double *)a2 + 3));
  if (HIDWORD(v4))
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = *a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)this + 24, 7u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::SetGeneratorUpdateParametersHandler(Phase::ActionTreeServerCommandProcessor *this, __int128 *a2)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  BOOL v11;
  __int128 v12;

  v4 = Phase::Controller::VoiceManager::Implementation::SetGeneratorParameter(**((_QWORD **)this + 11), *(_QWORD *)a2, *((_QWORD *)a2 + 1), 0xB5767F7E05AD941ELL, *((double *)a2 + 2));
  if (HIDWORD(v4))
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5
    || ((v6 = Phase::Controller::VoiceManager::Implementation::SetGeneratorParameter(**((_QWORD **)this + 11), *(_QWORD *)a2, *((_QWORD *)a2 + 1), 0x8119B92FBF50030uLL, *((double *)a2 + 3)), !HIDWORD(v6))? (v7 = v6 == 0): (v7 = 1), !v7|| ((v8 = Phase::Controller::VoiceManager::Implementation::SetGeneratorParameter(**((_QWORD **)this + 11), *(_QWORD *)a2, *((_QWORD *)a2 + 1), 0x81FBB92FC0173ECuLL, *((double *)a2 + 4)), !HIDWORD(v8))? (v9 = v8 == 0): (v9 = 1), !v9
      || ((v10 = Phase::Controller::VoiceManager::Implementation::SetGeneratorParameter(**((_QWORD **)this + 11), *(_QWORD *)a2, *((_QWORD *)a2 + 1), 0x981F232BD33EC927, *((double *)a2 + 5)), !HIDWORD(v10))? (v11 = v10 == 0): (v11 = 1), !v11))))
  {
    v12 = *a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)this + 24, 7u, &v12, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::PlayGeneratorHandler(uint64_t **this, uint64_t *a2)
{
  uint64_t InstancePtr;
  Phase::Logger *v5;
  Phase::Logger *v6;
  NSObject *v7;
  NSObject *v8;
  unint64_t v9;
  BOOL v10;
  Phase::Logger *v11;
  Phase::Logger *v12;
  NSObject *v13;
  NSObject *v14;
  __int128 v15;

  InstancePtr = Phase::Logger::GetInstancePtr((Phase::Logger *)this);
  v5 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 688));
  v6 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v5);
  if (*((_BYTE *)v6 + 696))
  {
    v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v6)
                                                                                       + 688)));
    v8 = v7;
    if ((unint64_t)v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      LOWORD(v15) = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v8, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v5, "Phase_PlayGenerator", "PlayGenerator", (uint8_t *)&v15, 2u);
    }

  }
  v9 = Phase::Controller::VoiceManager::Implementation::PlayGenerator(*this[11], *a2, a2[1]);
  if (HIDWORD(v9))
    v10 = 1;
  else
    v10 = v9 == 0;
  if (v10)
  {
    v11 = (Phase::Logger *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*this[19] + 16))(this[19], *a2, a2[1], 1);
  }
  else
  {
    v15 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage(this + 24, 7u, &v15, 0x10uLL);
  }
  v12 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v11);
  if (*((_BYTE *)v12 + 696))
  {
    v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v12)
                                                                                        + 688)));
    v14 = v13;
    if ((unint64_t)v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
    {
      LOWORD(v15) = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v14, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v5, "Phase_PlayGenerator", "PlayGenerator Finish", (uint8_t *)&v15, 2u);
    }

  }
}

void Phase::ActionTreeServerCommandProcessor::EnqueueGeneratorBufferHandler(Phase::ActionTreeServerCommandProcessor *this, char *a2)
{
  Phase::Logger *v3;
  NSObject *v4;
  void **v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  void **v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = (Phase::Logger *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char *))(**((_QWORD **)this + 19) + 64))(*((_QWORD *)this + 19), *(_QWORD *)a2, *((_QWORD *)a2 + 1), a2 + 16);
  if ((v3 & 1) == 0)
  {
    v4 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v3)
                                                                                       + 688)));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "<error>: empty GeneratorBufferParams");
      if (v8 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      v6 = *(_QWORD *)a2;
      *(_DWORD *)buf = 136315906;
      v10 = "ActionTreeInterface.mm";
      v11 = 1024;
      v12 = 670;
      v13 = 2080;
      v14 = v5;
      v15 = 2048;
      v16 = v6;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: could not enqueue buffer %s for generatorId %llu!", buf, 0x26u);
      if (v8 < 0)
        operator delete(__p[0]);
    }

  }
}

void sub_2164CF318(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::ActionTreeServerCommandProcessor::SetSpatialCategorySendLevelHandler(Phase::ActionTreeServerCommandProcessor *this, unsigned int *a2)
{
  unint64_t v4;
  BOOL v5;
  __int128 v6;

  v4 = Phase::Controller::VoiceManager::Implementation::SetSpatialCategorySendLevel(**((_QWORD **)this + 11), *(_QWORD *)a2, *((_QWORD *)a2 + 1), a2[4], *((double *)a2 + 3));
  if (HIDWORD(v4))
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)this + 24, 8u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::SetSpatialCategoryParameterHandler(Phase::ActionTreeServerCommandProcessor *this, unsigned int *a2)
{
  unint64_t v4;
  BOOL v5;
  __int128 v6;

  v4 = Phase::Controller::VoiceManager::Implementation::SetSpatialCategoryParameter(**((_QWORD **)this + 11), *(_QWORD *)a2, *((_QWORD *)a2 + 1), a2[4], *((_QWORD *)a2 + 3), *((double *)a2 + 4));
  if (HIDWORD(v4))
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)this + 24, 8u, &v6, 0x10uLL);
  }
}

uint64_t Phase::ActionTreeServerCommandProcessor::CreateSpatialSubmixHandler(Phase::ActionTreeServerCommandProcessor *this, _OWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *i;
  unint64_t v14;
  Phase::ActionTreeServerCommandProcessor *v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  Phase::ActionTreeServerCommandProcessor **v22;
  unint64_t v23;
  unint64_t SpatialSubmix;
  uint64_t v25;
  char *v26;
  NSObject *v28;
  id v30;
  uint64_t v31;
  std::runtime_error *exception;
  Phase::ActionTreeServerCommandProcessor *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  float v40;
  uint64_t v41;
  __int128 v42;
  _QWORD v43[54];
  __int128 v44;
  __int128 v45;
  int v46;
  _BYTE buf[18];
  __int16 v48;
  uint64_t v49;
  uint64_t v50;

  v33 = this;
  v50 = *MEMORY[0x24BDAC8D0];
  v39 = 0u;
  v38 = 0u;
  v40 = 1.0;
  v41 = 0;
  v42 = 0u;
  LOBYTE(v43[0]) = 0;
  v44 = 0u;
  *(_OWORD *)&v43[51] = xmmword_2166F7270;
  v43[53] = 0x3FF0000000000000;
  v45 = a2[55];
  v46 = *((_DWORD *)a2 + 224);
  v34 = *((_QWORD *)a2 + 2);
  v35 = *a2;
  v36 = *(_OWORD *)((char *)a2 + 24);
  v37 = *(_OWORD *)((char *)a2 + 40);
  if (*((_DWORD *)a2 + 14))
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = (char *)a2 + 24 * v6 + 64;
      v8 = *((_QWORD *)v7 + 1);
      v9 = v7[16];
      v10 = *(_DWORD *)v7;
      if (v5)
      {
        v11 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          v2 = v10;
          if (v5 <= v10)
            v2 = v10 % v5;
        }
        else
        {
          v2 = (v5 - 1) & v10;
        }
        v12 = *(uint64_t ***)(v38 + 8 * v2);
        if (v12)
        {
          for (i = *v12; i; i = (uint64_t *)*i)
          {
            v14 = i[1];
            if (v14 == v10)
            {
              if (*((_DWORD *)i + 4) == v10)
              {
                v28 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 784));
                if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
                {
                  GetSpatialCategoryString(*(_DWORD *)v7);
                  v30 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                  v31 = objc_msgSend(v30, "UTF8String");
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "ActionTreeInterface.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 721;
                  v48 = 2080;
                  v49 = v31;
                  _os_log_impl(&dword_2164CC000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Entry with category %s already exists\"", buf, 0x1Cu);

                }
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Entry with category %s already exists");
              }
            }
            else
            {
              if (v11.u32[0] > 1uLL)
              {
                if (v14 >= v5)
                  v14 %= v5;
              }
              else
              {
                v14 &= v5 - 1;
              }
              if (v14 != v2)
                break;
            }
          }
        }
      }
      this = (Phase::ActionTreeServerCommandProcessor *)operator new(0x28uLL);
      v15 = this;
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = v10;
      *((_DWORD *)this + 4) = v10;
      *((_QWORD *)this + 3) = v8;
      *((_BYTE *)this + 32) = v9;
      v16 = (float)(unint64_t)(v4 + 1);
      if (!v5 || (float)(v40 * (float)v5) < v16)
      {
        v17 = (v5 & (v5 - 1)) != 0;
        if (v5 < 3)
          v17 = 1;
        v18 = v17 | (2 * v5);
        v19 = vcvtps_u32_f32(v16 / v40);
        if (v18 <= v19)
          v20 = v19;
        else
          v20 = v18;
        std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>((uint64_t)&v38, v20);
        v5 = *((_QWORD *)&v38 + 1);
        if ((*((_QWORD *)&v38 + 1) & (*((_QWORD *)&v38 + 1) - 1)) != 0)
        {
          if (*((_QWORD *)&v38 + 1) <= (unint64_t)v10)
            v2 = (unint64_t)v10 % *((_QWORD *)&v38 + 1);
          else
            v2 = v10;
        }
        else
        {
          v2 = (*((_QWORD *)&v38 + 1) - 1) & v10;
        }
      }
      v21 = v38;
      v22 = *(Phase::ActionTreeServerCommandProcessor ***)(v38 + 8 * v2);
      if (v22)
        break;
      *(_QWORD *)v15 = v39;
      *(_QWORD *)&v39 = v15;
      *(_QWORD *)(v21 + 8 * v2) = &v39;
      if (*(_QWORD *)v15)
      {
        v23 = *(_QWORD *)(*(_QWORD *)v15 + 8);
        if ((v5 & (v5 - 1)) != 0)
        {
          if (v23 >= v5)
            v23 %= v5;
        }
        else
        {
          v23 &= v5 - 1;
        }
        v22 = (Phase::ActionTreeServerCommandProcessor **)(v38 + 8 * v23);
        goto LABEL_39;
      }
LABEL_40:
      v4 = ++*((_QWORD *)&v39 + 1);
      if (++v6 >= (unint64_t)*((unsigned int *)a2 + 14))
        goto LABEL_41;
    }
    *(_QWORD *)v15 = *v22;
LABEL_39:
    *v22 = v15;
    goto LABEL_40;
  }
LABEL_41:
  memcpy(v43, a2 + 28, sizeof(v43));
  v44 = 0uLL;
  SpatialSubmix = Phase::Controller::VoiceManager::Implementation::CreateSpatialSubmix(**((Phase::Controller::VoiceManager::Implementation ***)v33 + 11), (const Phase::Controller::CreateSpatialSubmixParameters *)&v34);
  if (HIDWORD(SpatialSubmix) || !(_BYTE)SpatialSubmix)
  {
    v25 = *((_QWORD *)v33 + 33);
    v26 = (char *)operator new(0x18uLL);
    *(_QWORD *)v26 = v25;
    *(_OWORD *)(v26 + 8) = *a2;
    *((_QWORD *)v33 + 33) = v26;
  }
  else
  {
    *(_OWORD *)buf = *a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)v33 + 24, 8u, buf, 0x10uLL);
  }
  *(_QWORD *)buf = &v41;
  std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v38);
}

void sub_2164CF890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a5);

  Phase::Controller::CreateSpatialSubmixParameters::~CreateSpatialSubmixParameters((Phase::Controller::CreateSpatialSubmixParameters *)va);
  _Unwind_Resume(a1);
}

void Phase::ActionTreeServerCommandProcessor::CreateAmbientSubmixHandler(Phase::Logger ***this, _OWORD *a2)
{
  std::vector<char>::pointer begin;
  int v5;
  std::vector<char>::pointer v6;
  unint64_t AmbientSubmix;
  Phase::Logger **v8;
  char *v9;
  std::vector<char> v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  std::vector<char> __p;
  __int128 v15;
  int v16;
  std::vector<char>::value_type __x;

  v11 = 0;
  v13 = xmmword_2166F7280;
  LOBYTE(v10.__begin_) = 0;
  std::vector<char>::vector(&__p, 0x20uLL, (const std::vector<char>::value_type *)&v10);
  begin = __p.__begin_;
  *(_QWORD *)__p.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  v15 = a2[3];
  v16 = *((_DWORD *)a2 + 16);
  v11 = *((_QWORD *)a2 + 2);
  v12 = *a2;
  v13 = *(_OWORD *)((char *)a2 + 24);
  v5 = *((_DWORD *)a2 + 10);
  __x = 0;
  std::vector<char>::vector(&v10, 0x20uLL, &__x);
  v6 = v10.__begin_;
  *((_DWORD *)v10.__begin_ + 1) = 0;
  *((_DWORD *)v6 + 2) = 0;
  *(_DWORD *)v6 = v5;
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
    v6 = v10.__begin_;
  }
  __p.__begin_ = v6;
  *(_OWORD *)&__p.__end_ = *(_OWORD *)&v10.__end_;
  AmbientSubmix = Phase::Controller::VoiceManager::Implementation::CreateAmbientSubmix(*this[11], (uint64_t)&v11);
  if (HIDWORD(AmbientSubmix) || !(_BYTE)AmbientSubmix)
  {
    v8 = this[33];
    v9 = (char *)operator new(0x18uLL);
    *(_QWORD *)v9 = v8;
    *(_OWORD *)(v9 + 8) = *a2;
    this[33] = (Phase::Logger **)v9;
  }
  else
  {
    *(_OWORD *)&v10.__begin_ = *a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage(this + 24, 8u, &v10, 0x10uLL);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_2164CFA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::ActionTreeServerCommandProcessor::CreateChannelSubmixHandler(Phase::ActionTreeServerCommandProcessor *this, char *a2)
{
  std::vector<char>::pointer begin;
  int v5;
  std::vector<char>::pointer v6;
  unint64_t ChannelSubmix;
  uint64_t v8;
  char *v9;
  std::vector<char> v10;
  __int128 v11;
  std::vector<char> __p;
  __int128 v13;
  int v14;
  std::vector<char>::value_type __x;

  LOBYTE(v10.__begin_) = 0;
  std::vector<char>::vector(&__p, 0x20uLL, (const std::vector<char>::value_type *)&v10);
  begin = __p.__begin_;
  *(_QWORD *)__p.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  v13 = *(_OWORD *)(a2 + 24);
  v14 = *((_DWORD *)a2 + 10);
  v11 = *(_OWORD *)a2;
  v5 = *((_DWORD *)a2 + 4);
  __x = 0;
  std::vector<char>::vector(&v10, 0x20uLL, &__x);
  v6 = v10.__begin_;
  *((_DWORD *)v10.__begin_ + 1) = 0;
  *((_DWORD *)v6 + 2) = 0;
  *(_DWORD *)v6 = v5;
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
    v6 = v10.__begin_;
  }
  __p.__begin_ = v6;
  *(_OWORD *)&__p.__end_ = *(_OWORD *)&v10.__end_;
  ChannelSubmix = Phase::Controller::VoiceManager::Implementation::CreateChannelSubmix(**((_QWORD **)this + 11), (uint64_t)&v11);
  if (HIDWORD(ChannelSubmix) || !(_BYTE)ChannelSubmix)
  {
    v8 = *((_QWORD *)this + 33);
    v9 = (char *)operator new(0x18uLL);
    *(_QWORD *)v9 = v8;
    *(_OWORD *)(v9 + 8) = *(_OWORD *)a2;
    *((_QWORD *)this + 33) = v9;
  }
  else
  {
    *(_OWORD *)&v10.__begin_ = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)this + 24, 8u, &v10, 0x10uLL);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_2164CFB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::ActionTreeServerCommandProcessor::SetSubmixParameterHandler(Phase::ActionTreeServerCommandProcessor *this, __int128 *a2)
{
  unint64_t v4;
  BOOL v5;
  __int128 v6;

  v4 = Phase::Controller::VoiceManager::Implementation::SetSubmixParameter(**((_QWORD **)this + 11), *(_QWORD *)a2, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), *((double *)a2 + 3));
  if (HIDWORD(v4))
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = *a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)this + 24, 8u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::SetAmbientSubmixOrientationHandler(Phase::ActionTreeServerCommandProcessor *this, uint64_t *a2)
{
  unint64_t v4;
  BOOL v5;
  __int128 v6;

  v4 = Phase::Controller::VoiceManager::Implementation::SetSubmixParameterData(**((_QWORD **)this + 11), *a2, a2[1], 0xB11F8D5B5762E28DLL, (uint64_t)(a2 + 2), 16);
  if (HIDWORD(v4))
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)this + 24, 8u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::DestroySubmixHandler(Phase::ActionTreeServerCommandProcessor *this, uint64_t *a2)
{
  unint64_t v4;
  BOOL v5;
  _QWORD *i;
  _QWORD *v7;
  _QWORD **v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  __int128 v14;

  v4 = Phase::Controller::VoiceManager::Implementation::DestroySubmix(**((_QWORD ***)this + 11), *a2, a2[1]);
  if (HIDWORD(v4))
    v5 = 1;
  else
    v5 = v4 == 0;
  if (v5)
  {
    i = (_QWORD *)*((_QWORD *)this + 33);
    if (i)
    {
      v7 = 0;
      v8 = (_QWORD **)((char *)this + 264);
      v9 = *a2;
      v10 = a2[1];
      do
      {
        if (i[1] == v9 && i[2] == v10)
        {
          for (i = (_QWORD *)*i; i; i = (_QWORD *)*i)
          {
            if (i[1] != v9)
              break;
            if (i[2] != a2[1])
              break;
          }
          if (v8 != i)
          {
            v11 = v8;
            do
            {
              v12 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11 != i);
            if (v12 != v8)
            {
              *v12 = v7;
              v7 = *v8;
              *v8 = i;
            }
          }
          if (!i)
            break;
        }
        v8 = (_QWORD **)i;
        i = (_QWORD *)*i;
      }
      while (i);
      if (v7)
      {
        do
        {
          v13 = (_QWORD *)*v7;
          operator delete(v7);
          v7 = v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    v14 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((_QWORD *)this + 24, 8u, &v14, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::GeoQueryHandler(Phase::Geometry::System **this, _QWORD *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  double v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 __src;
  int v18;
  char v19;
  double v20;

  Phase::Geometry::System::GetCurrentState(this[12], &v15);
  v4 = v15;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = Phase::DistanceBetweenListenerAndSource<double>(v4, a2[4], a2[3]);
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v11 = *((_DWORD *)a2 + 4);
  __src = *(_OWORD *)a2;
  v18 = v11;
  v19 = 0;
  v20 = v8;
  Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage(this + 24, 6u, &__src, 0x20uLL);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2164CFEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::Dispatch::TransactionExecutor<Phase::ActionTreeServerCommand>::~TransactionExecutor(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D576BE8;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  return a1;
}

{
  *(_QWORD *)a1 = &off_24D576BE8;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  return a1;
}

void Phase::ActionTreeServerCommandProcessor::~ActionTreeServerCommandProcessor(Phase::ActionTreeServerCommandProcessor *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)*((_QWORD *)this + 33);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  *((_QWORD *)this + 33) = 0;
  Phase::ActionTreeServerCallbackInterface::~ActionTreeServerCallbackInterface((Phase::ActionTreeServerCommandProcessor *)((char *)this + 160));
  v4 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table((uint64_t)this + 104);
  *(_QWORD *)this = &off_24D576BE8;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table((uint64_t)this + 8);
}

{
  Phase::ActionTreeServerCommandProcessor::~ActionTreeServerCommandProcessor(this);
  JUMPOUT(0x2199F9D70);
}

id Phase::Controller::TaskManager::GetObjCService<ExternalStreamManager>(Phase::Logger *a1, int a2)
{
  uint64_t v3;
  Phase::Logger *v4;
  id *v5;
  NSObject *v7;
  std::logic_error *exception;
  NSObject *v9;
  std::string *v10;
  std::logic_error *v11;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 7) - v3) >> 5))
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 140;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(_QWORD *)v4)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 149;
      v17 = 1024;
      v18 = a2;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  v5 = (id *)std::any_cast[abi:ne180100]<ExternalStreamManager * const {__strong}>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v4);
  if (!v5)
    std::__throw_bad_any_cast[abi:ne180100]();
  return *v5;
}

void sub_2164D01C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2164D02B8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2164D02D8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void Phase::Controller::CreateSpatialSubmixParameters::~CreateSpatialSubmixParameters(Phase::Controller::CreateSpatialSubmixParameters *this)
{
  void **v2;

  v2 = (void **)((char *)this + 96);
  std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 56);
}

uint64_t Phase::ActionTreeClientCommandProcessor::ActionTreeClientCommandProcessor(uint64_t a1, uint64_t a2)
{
  float *v4;
  id v5;
  void *v6;
  uint64_t (*v8)(Phase::ActionTreeClientCommandProcessor *, const void *);
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_24D576C70;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (float *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v5 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v6 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v5;

  *(_QWORD *)a1 = &off_24D576BC0;
  *(_QWORD *)(a1 + 80) = a2;
  v8 = (uint64_t (*)(Phase::ActionTreeClientCommandProcessor *, const void *))Phase::ActionTreeClientCommandProcessor::SubmitGeneratorPreparedResultHandler;
  v9 = 0;
  v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 1, 1, (uint64_t)&v8);
  v8 = (uint64_t (*)(Phase::ActionTreeClientCommandProcessor *, const void *))Phase::ActionTreeClientCommandProcessor::SubmitGeneratorCompletedResultHandler;
  v9 = 0;
  v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 2, 2, (uint64_t)&v8);
  v8 = (uint64_t (*)(Phase::ActionTreeClientCommandProcessor *, const void *))Phase::ActionTreeClientCommandProcessor::SubmitGeneratorSeekCompletedResultHandler;
  v9 = 0;
  v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 3, 3, (uint64_t)&v8);
  v8 = (uint64_t (*)(Phase::ActionTreeClientCommandProcessor *, const void *))Phase::ActionTreeClientCommandProcessor::SubmitGeneratorBufferCompletedResultHandler;
  v9 = 0;
  v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 4, 4, (uint64_t)&v8);
  v8 = Phase::ActionTreeClientCommandProcessor::SubmitGeneratorPlayStateChangedHandler;
  v9 = 0;
  v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 5, 5, (uint64_t)&v8);
  v8 = (uint64_t (*)(Phase::ActionTreeClientCommandProcessor *, const void *))Phase::ActionTreeClientCommandProcessor::GeoQueryResponseHandler;
  v9 = 0;
  v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 6, 6, (uint64_t)&v8);
  v8 = (uint64_t (*)(Phase::ActionTreeClientCommandProcessor *, const void *))Phase::ActionTreeClientCommandProcessor::GeneratorResponseHandler;
  v9 = 0;
  v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 7, 7, (uint64_t)&v8);
  v8 = (uint64_t (*)(Phase::ActionTreeClientCommandProcessor *, const void *))Phase::ActionTreeClientCommandProcessor::SubmixResponseHandler;
  v9 = 0;
  v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 8, 8, (uint64_t)&v8);
  return a1;
}

void sub_2164D04E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  Phase::Dispatch::TransactionExecutor<Phase::ActionTreeClientCommand>::~TransactionExecutor(v1);
  _Unwind_Resume(a1);
}

void sub_2164D0510()
{
  uint64_t v0;
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v1);
  JUMPOUT(0x2164D0508);
}

void Phase::ActionTreeClientCommandProcessor::SubmitGeneratorPreparedResultHandler(Phase::ActionTreeClientCommandProcessor *this, uint64_t *a2)
{
  Phase::ActionTreeManager::LeafNodePrepared(*((_QWORD *)this + 10), *a2, a2[1], a2[2]);
}

void Phase::ActionTreeClientCommandProcessor::SubmitGeneratorCompletedResultHandler(Phase::ActionTreeManager **this, uint64_t *a2)
{
  Phase::ActionTreeManager::LeafNodeCompleted(this[10], *a2, a2[1], a2 + 2);
}

void Phase::ActionTreeClientCommandProcessor::SubmitGeneratorSeekCompletedResultHandler(Phase::ActionTreeClientCommandProcessor *this, const void *a2)
{
  Phase::ActionTreeManager::SubmitGeneratorSeekCompletedResult(*((_QWORD *)this + 10), *(_QWORD *)a2, *((_QWORD *)a2 + 1), *((_DWORD *)a2 + 4));
}

void Phase::ActionTreeClientCommandProcessor::SubmitGeneratorBufferCompletedResultHandler(Phase::ActionTreeClientCommandProcessor *this, uint64_t *a2)
{
  Phase::ActionTreeManager::SubmitGeneratorBufferCompletedResult(*((_QWORD *)this + 10), *a2, a2[1]);
}

uint64_t Phase::ActionTreeClientCommandProcessor::SubmitGeneratorPlayStateChangedHandler(Phase::ActionTreeClientCommandProcessor *this, const void *a2)
{
  return Phase::ActionTreeManager::SubmitGeneratorPlayStateChanged(*((_QWORD *)this + 10), *(_QWORD *)a2, *((_QWORD *)a2 + 1), *((_DWORD *)a2 + 4));
}

_QWORD *Phase::ActionTreeClientCommandProcessor::GeoQueryResponseHandler(Phase::ActionTreeManager **this, unsigned __int8 *a2)
{
  return Phase::ActionTreeManager::ReceiveGeoQueryResult(this[10], *(UniqueObjectId *)a2, *((double *)a2 + 3), *((_DWORD *)a2 + 4), a2[20]);
}

Phase::Logger *Phase::ActionTreeClientCommandProcessor::GeneratorResponseHandler(Phase::Logger **this, uint64_t *a2)
{
  return Phase::ActionTreeManager::HandleGeneratorError(this[10], *a2, a2[1]);
}

Phase::Logger *Phase::ActionTreeClientCommandProcessor::SubmixResponseHandler(Phase::Logger **this, uint64_t *a2)
{
  return Phase::ActionTreeManager::HandleSubmixError(this[10], *a2, a2[1]);
}

uint64_t Phase::Dispatch::TransactionExecutor<Phase::ActionTreeClientCommand>::~TransactionExecutor(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D576C70;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  return a1;
}

{
  *(_QWORD *)a1 = &off_24D576C70;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  return a1;
}

void Phase::ActionTreeServerCallbackInterface::~ActionTreeServerCallbackInterface(Phase::ActionTreeServerCallbackInterface *this)
{
  Phase::ActionTreeServerCallbackInterface::~ActionTreeServerCallbackInterface(this);
  JUMPOUT(0x2199F9D70);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;

  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 11);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
}

void Phase::Dispatch::TransactionExecutor<Phase::ActionTreeServerCommand>::ExecuteTransactions(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *(id *)(a1 + 72);
  objc_sync_enter(v2);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = *(id *)(a1 + 72);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v3);
        v7 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v6));
        v8 = objc_msgSend(v7, "bytes", (_QWORD)v10);
        v9 = objc_msgSend(v7, "length");
        *(_QWORD *)(a1 + 48) = v8;
        *(_QWORD *)(a1 + 56) = v9;
        *(_QWORD *)(a1 + 64) = 0;
        Phase::MessagePipeReader<Phase::ActionTreeServerCommand>::Execute((uint64_t *)(a1 + 48), (_QWORD *)(a1 + 8));

        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

  objc_msgSend(*(id *)(a1 + 72), "removeAllObjects");
  objc_sync_exit(v2);

}

void sub_2164D0780(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void Phase::ActionTreeClientCommandProcessor::~ActionTreeClientCommandProcessor(id *this)
{
  *this = &off_24D576C70;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table((uint64_t)(this + 1));
}

{
  *this = &off_24D576C70;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table((uint64_t)(this + 1));
  JUMPOUT(0x2199F9D70);
}

void Phase::Dispatch::TransactionExecutor<Phase::ActionTreeClientCommand>::ExecuteTransactions(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *(id *)(a1 + 72);
  objc_sync_enter(v2);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = *(id *)(a1 + 72);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v3);
        v7 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v6));
        v8 = objc_msgSend(v7, "bytes", (_QWORD)v10);
        v9 = objc_msgSend(v7, "length");
        *(_QWORD *)(a1 + 48) = v8;
        *(_QWORD *)(a1 + 56) = v9;
        *(_QWORD *)(a1 + 64) = 0;
        Phase::MessagePipeReader<Phase::ActionTreeClientCommand>::Execute((uint64_t *)(a1 + 48), (_QWORD *)(a1 + 8));

        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

  objc_msgSend(*(id *)(a1 + 72), "removeAllObjects");
  objc_sync_exit(v2);

}

void sub_2164D09A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void Phase::Dispatch::TransactionExecutor<Phase::ActionTreeServerCommand>::~TransactionExecutor(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D576BE8;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::SamplerPrepareParameters::~SamplerPrepareParameters(Phase::Controller::SamplerPrepareParameters *this)
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::GeneratorPrepareParameters::AsProcedurePrepareParameters(Phase::Controller::GeneratorPrepareParameters *this)
{
  return 0;
}

uint64_t Phase::Controller::GeneratorPrepareParameters::AsSamplerPrepareParameters(Phase::Controller::GeneratorPrepareParameters *this)
{
  return 0;
}

void Phase::Controller::ProcedurePrepareParameters::~ProcedurePrepareParameters(Phase::Controller::ProcedurePrepareParameters *this)
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<Phase::VoiceDescriptor>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<Phase::VoiceDescriptor>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n, const std::vector<char>::value_type *__x)
{
  std::vector<char>::size_type v5;
  std::vector<char>::pointer end;
  char *v7;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    v5 = __n;
    std::vector<char>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[v5];
    do
    {
      *end++ = *__x;
      --v5;
    }
    while (v5);
    this->__end_ = v7;
  }
  return this;
}

void sub_2164D0D10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<char>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<char>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void Phase::Dispatch::TransactionExecutor<Phase::ActionTreeClientCommand>::~TransactionExecutor(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D576C70;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  JUMPOUT(0x2199F9D70);
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  if (__p)
  {
    v2 = __p;
    while (1)
    {
      v3 = (_QWORD *)*v2;
      v4 = (_QWORD *)v2[6];
      if (v4 == v2 + 3)
        break;
      if (v4)
      {
        v5 = 5;
LABEL_7:
        (*(void (**)(void))(*v4 + 8 * v5))();
      }
      operator delete(v2);
      v2 = v3;
      if (!v3)
        return;
    }
    v4 = v2 + 3;
    v5 = 4;
    goto LABEL_7;
  }
}

uint64_t std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void Phase::Dispatch::sMessageWriterCallback(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD **)(a1 + 24);
  if (!v3)
    __assert_rtn("sMessageWriterCallback", "DispatcherTransactionWriter.h", 24, "inOldBuffer.mUserData != nullptr");
  v6 = *v3;
  v7 = 2 * (v3[2] - *v3);
  v8 = v3[1] - *v3;
  if (v7 <= v8 + a3)
    v7 = v8 + a3;
  if (v7 <= v8)
  {
    if (v7 < v8)
      v3[1] = v6 + v7;
    v9 = v3;
  }
  else
  {
    std::vector<char>::__append(*(std::vector<char> **)(a1 + 24), v7 - v8);
    v6 = *v3;
    v9 = *(_QWORD **)(a1 + 24);
  }
  v10 = *(_QWORD *)(a1 + 8);
  *a2 = v6;
  v11 = v3[2] - v6;
  a2[1] = v10;
  a2[2] = v11;
  a2[3] = v9;
}

{
  _QWORD *v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD **)(a1 + 24);
  if (!v3)
    __assert_rtn("sMessageWriterCallback", "DispatcherTransactionWriter.h", 24, "inOldBuffer.mUserData != nullptr");
  v6 = *v3;
  v7 = 2 * (v3[2] - *v3);
  v8 = v3[1] - *v3;
  if (v7 <= v8 + a3)
    v7 = v8 + a3;
  if (v7 <= v8)
  {
    if (v7 < v8)
      v3[1] = v6 + v7;
    v9 = v3;
  }
  else
  {
    std::vector<char>::__append(*(std::vector<char> **)(a1 + 24), v7 - v8);
    v6 = *v3;
    v9 = *(_QWORD **)(a1 + 24);
  }
  v10 = *(_QWORD *)(a1 + 8);
  *a2 = v6;
  v11 = v3[2] - v6;
  a2[1] = v10;
  a2[2] = v11;
  a2[3] = v9;
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  char *value;
  char *end;
  std::vector<char>::pointer begin;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v9 = value - begin;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)operator new(v10);
    else
      v11 = 0;
    v12 = &v11[v7];
    v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      v11 = v12;
    }
    else
    {
      v14 = &end[~(unint64_t)begin];
      do
      {
        v15 = *--end;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
      operator delete(end);
  }
}

_QWORD *std::function<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

_QWORD *std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2164D133C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<void (*)(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long),std::allocator<void (*)(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>,void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<void (*)(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long),std::allocator<void (*)(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>,void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D576C98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long),std::allocator<void (*)(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>,void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D576C98;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long),std::allocator<void (*)(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>,void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 8))(a2, a3, *a4);
}

void Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage(_QWORD *a1, unsigned int a2, void *__src, size_t __n)
{
  unsigned int v4;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Phase::Logger *v14;
  __int128 v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  _BYTE buf[38];
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v4 = __n;
  v33 = *MEMORY[0x24BDAC8D0];
  v8 = __n;
  v9 = __n + 8;
  v11 = *a1;
  v10 = a1[1];
  v12 = v10 + v9;
  if (*a1 && v12 <= a1[2])
    goto LABEL_8;
  v13 = a1[7];
  if (v13)
  {
    memset(buf, 0, 32);
    v27 = v10 + v9;
    v14 = (Phase::Logger *)(*(uint64_t (**)(uint64_t, _QWORD *, _BYTE *, uint64_t *))(*(_QWORD *)v13 + 48))(v13, a1, buf, &v27);
    v15 = *(_OWORD *)&buf[16];
    *(_OWORD *)a1 = *(_OWORD *)buf;
    *((_OWORD *)a1 + 1) = v15;
    v11 = *a1;
    v10 = a1[1];
    v16 = v10 + v9;
    if (!*a1 || v16 > a1[2])
    {
      v17 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v14) + 848));
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        return;
      v18 = *a1;
      v19 = a1[2];
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "MessagePipe.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 284;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v18;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v19;
      v29 = 2048;
      v30 = v16;
      v31 = 2048;
      v32 = a2;
      v20 = "%25s:%-5d write buffer left in invalid state with pointer %p and %lu max bytes compared to required %lu byte"
            "s for message type %llu";
      v21 = v17;
      v22 = 58;
      goto LABEL_11;
    }
LABEL_8:
    v23 = (unsigned int *)(v11 + v10);
    *v23 = a2;
    v23[1] = v4;
    v24 = *a1;
    v25 = a1[1] + 8;
    a1[1] = v25;
    memcpy((void *)(v24 + v25), __src, v8);
    a1[1] += v8;
    return;
  }
  v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 848));
  if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    return;
  *(_DWORD *)buf = 136315906;
  *(_QWORD *)&buf[4] = "MessagePipe.hpp";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = 270;
  *(_WORD *)&buf[18] = 2048;
  *(_QWORD *)&buf[20] = a2;
  *(_WORD *)&buf[28] = 2048;
  *(_QWORD *)&buf[30] = v12;
  v20 = "%25s:%-5d failed to acquire write buffer for message type %llu of size %lu";
  v21 = v26;
  v22 = 38;
LABEL_11:
  _os_log_impl(&dword_2164CC000, v21, OS_LOG_TYPE_ERROR, v20, buf, v22);
}

double Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::Clear(uint64_t a1)
{
  uint64_t v2;
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 56);
    if (v2)
    {
      v5 = 0u;
      v6 = 0u;
      v7 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v2 + 48))(v2, a1, &v5, &v7);
      result = *(double *)&v5;
      v4 = v6;
      *(_OWORD *)a1 = v5;
      *(_OWORD *)(a1 + 16) = v4;
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[4];
      v2[4] = 0;
      if (v4)
        std::default_delete<Phase::ActionTreeIOManager::BufferInfo>::operator()[abi:ne180100]((uint64_t)(v2 + 4), v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::default_delete<Phase::ActionTreeIOManager::BufferInfo>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)(a2 + 48);
    if (v2)
    {
      *(_QWORD *)(a2 + 56) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x2199F9D70);
  }
}

void std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(float *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;

  v8 = a2;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t *)*i)
      {
        v13 = i[1];
        if (v13 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = operator new(0x38uLL);
  *v14 = 0;
  v14[1] = v8;
  *((_DWORD *)v14 + 4) = a3;
  v14[6] = 0;
  v15 = (char *)operator new(0x20uLL);
  *(_QWORD *)v15 = &off_24D576CE0;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)a4;
  *((_QWORD *)v15 + 3) = *(_QWORD *)(a4 + 16);
  v14[6] = v15;
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v25)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = a1 + 4;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_55:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v36 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v33 = *(_QWORD **)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v34)
  {
    *v14 = *v34;
LABEL_72:
    *v34 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v33[v4] = a1 + 4;
  if (*v14)
  {
    v35 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9)
        v35 %= v9;
    }
    else
    {
      v35 &= v9 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_2164D1B34(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D576CE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D576CE0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  _QWORD *v3;
  uint64_t v4;

  if (a1)
  {
    v3 = (_QWORD *)__p[6];
    if (v3 == __p + 3)
    {
      v4 = 4;
      v3 = __p + 3;
      goto LABEL_8;
    }
    if (v3)
    {
      v4 = 5;
LABEL_8:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
LABEL_9:
    operator delete(__p);
    return;
  }
  if (__p)
    goto LABEL_9;
}

std::logic_error *std::domain_error::domain_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B0] + 16);
  return result;
}

void Phase::GetBacktraceFrame<1ul>(std::string *a1@<X8>)
{
  int v2;
  std::locale::id *v3;
  const std::locale::facet *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  unint64_t v14;
  std::string __p;
  _QWORD v16[13];
  char v17;
  uint64_t v18;
  void **v19;
  void **v20;
  std::locale v21;
  void **v22;

  std::vector<void *>::vector(&v19, 3uLL);
  v2 = backtrace(v19, (unint64_t)((char *)v20 - (char *)v19) >> 3);
  std::vector<void *>::resize((uint64_t)&v19, v2);
  applesauce::backtrace::detail::symbolicate_snapshot((uint64_t)&v19, 3, &__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v16, &__p, 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v3 = (std::locale::id *)MEMORY[0x24BEDB350];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(v16[0] - 24)));
    v4 = std::locale::use_facet(&v21, v3);
    v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
    std::locale::~locale(&v21);
    v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, (uint64_t)&__p, v5);
    if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
      break;
    v7 = v13;
    if ((unint64_t)v13 >= v14)
    {
      v9 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v12, (__int128 *)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v13->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      v9 = v7 + 1;
    }
    v13 = v9;
  }
  if (*(char *)(v12 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)(v12 + 48), *(_QWORD *)(v12 + 56));
  }
  else
  {
    v10 = *(_OWORD *)(v12 + 48);
    a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 64);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v10;
  }
  v22 = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16[0] = *MEMORY[0x24BEDB7F0];
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v16[2] = v11;
  v16[3] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199F9CD4](&v18);
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
}

void sub_2164D1EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;
  void *v20;

  *(_QWORD *)(v18 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 56));
  if (a17 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  v20 = *(void **)(v18 - 88);
  if (v20)
  {
    *(_QWORD *)(v18 - 80) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  a1[16] = MEMORY[0x24BEDB858] + 104;
  a1[2] = v5 + 64;
  v7 = a1 + 2;
  v8 = (uint64_t)(a1 + 3);
  v9 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *a1 = v10;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v10 - 24)) = v11;
  a1[1] = 0;
  v12 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v12, a1 + 3);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  a1[2] = v13;
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *a1 = v15;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *a1 = v5 + 24;
  a1[16] = v6;
  a1[2] = v5 + 64;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3);
  return a1;
}

void sub_2164D201C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x2199F9CD4](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199F9CD4](a1 + 128);
  return a1;
}

void std::vector<void *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<void *>::__append((void **)a1, a2 - v2);
  }
}

_QWORD *std::vector<void *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2164D2154(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<void *>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void std::vector<void *>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void applesauce::backtrace::detail::symbolicate_snapshot(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  void *const *v5;
  unint64_t v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  BOOL v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  void *v18;
  std::string *v19;
  char *v20;
  char *v21;
  char *dli_sname;
  _BYTE *dli_saddr;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type size;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  const std::string::value_type *p_dst;
  std::string::size_type v33;
  unint64_t v34;
  std::string v36;
  std::string status;
  std::string outlen;
  std::string v39;
  void *__p[2];
  int64_t v41;
  char v42;
  Dl_info v43;
  __int128 __dst;
  int64_t v45;
  char __str[64];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v5 = *(void *const **)a1;
  v7 = *(_QWORD *)(a1 + 8) - (_QWORD)v5;
  v8 = backtrace_symbols(v5, v7 >> 3);
  v34 = v7 >> 3;
  if ((int)(v7 >> 3) >= 1)
  {
    v9 = 0;
    v10 = (v7 >> 3);
    while (1)
    {
      v11 = *(const void **)(*(_QWORD *)a1 + 8 * v9);
      snprintf(__str, 0x40uLL, "%-3d\t%*p\t", v9, 18, v11);
      std::string::append(a3, __str);
      memset(&v43, 0, sizeof(v43));
      if (dladdr(v11, &v43))
        v12 = v43.dli_sname == 0;
      else
        v12 = 1;
      if (v12)
      {
        v13 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&__dst, v8[v9]);
        v14 = std::string::append(v13, "\n");
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v41 = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        if (v41 >= 0)
          v16 = __p;
        else
          v16 = (void **)__p[0];
        if (v41 >= 0)
          v17 = HIBYTE(v41);
        else
          v17 = (std::string::size_type)__p[1];
        std::string::append(a3, (const std::string::value_type *)v16, v17);
        if (SHIBYTE(v41) < 0)
          operator delete(__p[0]);
        if ((SHIBYTE(v45) & 0x80000000) == 0)
          goto LABEL_60;
        v18 = (void *)__dst;
        goto LABEL_59;
      }
      std::string::basic_string[abi:ne180100]<0>(&v39, (char *)v43.dli_sname);
      LODWORD(status.__r_.__value_.__l.__data_) = 0;
      outlen.__r_.__value_.__r.__words[0] = 0;
      v19 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v39
          : (std::string *)v39.__r_.__value_.__r.__words[0];
      v20 = __cxa_demangle((const char *)v19, 0, (size_t *)&outlen, (int *)&status);
      v21 = v20;
      if (!LODWORD(status.__r_.__value_.__l.__data_))
        break;
      LOBYTE(__p[0]) = 0;
      v42 = 0;
      if (v20)
        goto LABEL_23;
LABEL_24:
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (v42)
      {
        if (v41 >= 0)
          dli_sname = (char *)__p;
        else
          dli_sname = (char *)__p[0];
      }
      else
      {
        dli_sname = (char *)v43.dli_sname;
        if (!v43.dli_sname)
          dli_sname = v8[v9];
      }
      dli_saddr = v43.dli_saddr;
      std::string::basic_string[abi:ne180100]<0>(&status, dli_sname);
      v24 = std::string::append(&status, " + ");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      outlen.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&outlen.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v36, (_BYTE *)v11 - dli_saddr);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v36;
      else
        v26 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        size = v36.__r_.__value_.__l.__size_;
      v28 = std::string::append(&outlen, (const std::string::value_type *)v26, size);
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      v30 = std::string::append(&v39, "\n");
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v45 = v30->__r_.__value_.__r.__words[2];
      __dst = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if (v45 >= 0)
        p_dst = (const std::string::value_type *)&__dst;
      else
        p_dst = (const std::string::value_type *)__dst;
      if (v45 >= 0)
        v33 = HIBYTE(v45);
      else
        v33 = *((_QWORD *)&__dst + 1);
      std::string::append(a3, p_dst, v33);
      if (SHIBYTE(v45) < 0)
        operator delete((void *)__dst);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(outlen.__r_.__value_.__r.__words[2]) < 0)
        operator delete(outlen.__r_.__value_.__l.__data_);
      if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0)
        operator delete(status.__r_.__value_.__l.__data_);
      if (!v42 || (SHIBYTE(v41) & 0x80000000) == 0)
        goto LABEL_60;
      v18 = __p[0];
LABEL_59:
      operator delete(v18);
LABEL_60:
      if (v10 == ++v9)
        goto LABEL_61;
    }
    std::string::basic_string[abi:ne180100](&__dst, v20, outlen.__r_.__value_.__r.__words[0] - 1);
    *(_OWORD *)__p = __dst;
    v41 = v45;
    v42 = 1;
    if (!v21)
      goto LABEL_24;
LABEL_23:
    free(v21);
    goto LABEL_24;
  }
LABEL_61:
  if ((_DWORD)v34 == a2)
    std::string::append(a3, "[truncated?]\n");
  if (v8)
    free(v8);
}

void sub_2164D2690(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_2164D27D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x2199F9A58](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_2164D2A38(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x2164D2A04);
  }
  __cxa_rethrow();
}

void sub_2164D2A7C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_2164D2B9C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::__throw_bad_any_cast[abi:ne180100]()
{
  std::bad_any_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_any_cast *)__cxa_allocate_exception(8uLL);
  exception->__vftable = 0;
  v1 = std::bad_any_cast::bad_any_cast(exception);
}

uint64_t (**std::any_cast[abi:ne180100]<ExternalStreamManager * const {__strong}>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<ExternalStreamManager * {__strong}>::__id);
    else
      return 0;
  }
  return result;
}

std::bad_cast *std::bad_any_cast::bad_any_cast(std::bad_any_cast *this)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(this);
  result->__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB8A8] + 16);
  return result;
}

void std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(float *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;

  v8 = a2;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t *)*i)
      {
        v13 = i[1];
        if (v13 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = operator new(0x38uLL);
  *v14 = 0;
  v14[1] = v8;
  *((_DWORD *)v14 + 4) = a3;
  v14[6] = 0;
  v15 = (char *)operator new(0x20uLL);
  *(_QWORD *)v15 = &off_24D576D28;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)a4;
  *((_QWORD *)v15 + 3) = *(_QWORD *)(a4 + 16);
  v14[6] = v15;
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v25)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = a1 + 4;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_55:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v36 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v33 = *(_QWORD **)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v34)
  {
    *v14 = *v34;
LABEL_72:
    *v34 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v33[v4] = a1 + 4;
  if (*v14)
  {
    v35 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9)
        v35 %= v9;
    }
    else
    {
      v35 &= v9 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_2164D35EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D576D28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D576D28;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

void Phase::MessagePipeReader<Phase::ActionTreeServerCommand>::Execute(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _BYTE buf[12];
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v2 = a1[2];
  v4 = v2 + 8;
  if (v2 + 8 <= v3)
  {
    v6 = *a1;
    v7 = *a1 + v2;
    v8 = v4 + *(unsigned int *)(v7 + 4);
    if (v8 <= v3)
    {
      a1[2] = v8;
      v19 = *(_DWORD *)v7;
      if (v19)
      {
        v10 = v6 + v4;
        do
        {
          v11 = std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::find<Phase::ActionTreeServerCommand>(a2, &v19);
          if (v11)
          {
            if (!v10 || (v12 = v11[6]) == 0)
              std::terminate();
            *(_QWORD *)buf = v10;
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 48))(v12, buf);
          }
          else
          {
            v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 848));
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "MessagePipe.hpp";
              v21 = 1024;
              v22 = 102;
              v23 = 1024;
              v24 = v19;
              _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d skipping unrecognized transaction message %d", buf, 0x18u);
            }
          }
          v15 = a1[1];
          v14 = a1[2];
          v16 = v14 + 8;
          if (v14 + 8 > v15)
            break;
          v17 = *a1 + v14;
          v18 = v16 + *(unsigned int *)(v17 + 4);
          if (v18 > v15)
            break;
          v10 = *a1 + v16;
          a1[2] = v18;
          v19 = *(_DWORD *)v17;
        }
        while (v19);
      }
    }
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::find<Phase::ActionTreeServerCommand>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

void Phase::MessagePipeReader<Phase::ActionTreeClientCommand>::Execute(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _BYTE buf[12];
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v2 = a1[2];
  v4 = v2 + 8;
  if (v2 + 8 <= v3)
  {
    v6 = *a1;
    v7 = *a1 + v2;
    v8 = v4 + *(unsigned int *)(v7 + 4);
    if (v8 <= v3)
    {
      a1[2] = v8;
      v19 = *(_DWORD *)v7;
      if (v19)
      {
        v10 = v6 + v4;
        do
        {
          v11 = std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::find<Phase::ActionTreeServerCommand>(a2, &v19);
          if (v11)
          {
            if (!v10 || (v12 = v11[6]) == 0)
              std::terminate();
            *(_QWORD *)buf = v10;
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 48))(v12, buf);
          }
          else
          {
            v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 848));
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "MessagePipe.hpp";
              v21 = 1024;
              v22 = 102;
              v23 = 1024;
              v24 = v19;
              _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d skipping unrecognized transaction message %d", buf, 0x18u);
            }
          }
          v15 = a1[1];
          v14 = a1[2];
          v16 = v14 + 8;
          if (v14 + 8 > v15)
            break;
          v17 = *a1 + v14;
          v18 = v16 + *(unsigned int *)(v17 + 4);
          if (v18 > v15)
            break;
          v10 = *a1 + v16;
          a1[2] = v18;
          v19 = *(_DWORD *)v17;
        }
        while (v19);
      }
    }
  }
}

uint64_t Phase::ActionTreeIOManager::PrepareGenerator(Phase::Logger *a1, uint64_t *a2)
{
  uint64_t (*v3)(void);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  switch(*((_BYTE *)a2 + 48))
  {
    case 0:
      v3 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 88);
      goto LABEL_9;
    case 1:
    case 2:
      v3 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 96);
      goto LABEL_9;
    case 3:
      v3 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 112);
      goto LABEL_9;
    case 4:
      v3 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 104);
LABEL_9:
      result = v3();
      break;
    default:
      v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 688));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5 = *((char *)a2 + 48);
        v6 = *a2;
        v8 = 136315906;
        v9 = "ActionTreeIOManager.mm";
        v10 = 1024;
        v11 = 62;
        v12 = 1024;
        v13 = v5;
        v14 = 2048;
        v15 = v6;
        _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: invalid generator type %d for generatorId %llu!", (uint8_t *)&v8, 0x22u);
      }
      result = 0;
      break;
  }
  return result;
}

std::vector<char> *Phase::ActionTreeIOManager::GetResidentBufferForGenerator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  Phase::Logger *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  std::vector<char> *result;
  NSObject *v11;
  _BYTE v12[18];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v12 = a2;
  *(_QWORD *)&v12[8] = a3;
  v6 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 24), v12);
  if (v6 && (v7 = *((_QWORD *)v6 + 4)) != 0)
  {
    v8 = *(_OWORD *)(v7 + 8);
    v9 = *(_OWORD *)(v7 + 24);
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v7 + 40);
    *(_OWORD *)a4 = v8;
    *(_OWORD *)(a4 + 16) = v9;
    *(_QWORD *)(a4 + 48) = 0;
    *(_QWORD *)(a4 + 56) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    result = (std::vector<char> *)std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((_QWORD *)(a4 + 40), *(const void **)(v7 + 48), *(_QWORD *)(v7 + 56), *(_QWORD *)(v7 + 56) - *(_QWORD *)(v7 + 48));
    *(_DWORD *)(a4 + 64) = *(_DWORD *)(v7 + 72);
  }
  else
  {
    v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v6) + 688));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v12 = 136315650;
      *(_QWORD *)&v12[4] = "ActionTreeIOManager.mm";
      *(_WORD *)&v12[12] = 1024;
      *(_DWORD *)&v12[14] = 75;
      v13 = 2048;
      v14 = a2;
      _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: did not find resident buffer for generatorId %llu!", v12, 0x1Cu);
    }
    *(_QWORD *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    v12[0] = 0;
    result = std::vector<char>::vector((std::vector<char> *)(a4 + 40), 8uLL, v12);
    *(_DWORD *)result->__begin_ = 0;
    *(_DWORD *)(a4 + 64) = 0;
  }
  return result;
}

void Phase::ActionTreeIOManager::DestroyGenerator(int8x8_t *this, UniqueObjectId a2)
{
  unint64_t v2;
  unint64_t v3;
  int8x8_t *v5;
  uint64_t v6;
  unint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  int8x8_t v11;
  char **v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v17;
  char *v18;
  int8x8_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  UniqueObjectId v23;
  UniqueObjectId v24;

  v2 = a2.mStorage[1];
  v3 = a2.mStorage[0];
  v23 = a2;
  v24 = a2;
  v5 = this + 3;
  if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(&this[3], &v24))return;
  v6 = 0;
  v7 = 0xCBF29CE484222325;
  do
    v7 = 0x100000001B3 * (v7 ^ *((char *)v23.mStorage + v6++));
  while (v6 != 16);
  v8 = this[4];
  if (!*(_QWORD *)&v8)
    return;
  v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v7;
    if (v7 >= *(_QWORD *)&v8)
      v10 = v7 % *(_QWORD *)&v8;
  }
  else
  {
    v10 = (*(_QWORD *)&v8 - 1) & v7;
  }
  v11 = *v5;
  v12 = *(char ***)(*(_QWORD *)v5 + 8 * v10);
  if (!v12)
    return;
  v13 = *v12;
  if (!*v12)
    return;
  v14 = *(_QWORD *)&v8 - 1;
  while (1)
  {
    v15 = *((_QWORD *)v13 + 1);
    if (v15 == v7)
      break;
    if (v9.u32[0] > 1uLL)
    {
      if (v15 >= *(_QWORD *)&v8)
        v15 %= *(_QWORD *)&v8;
    }
    else
    {
      v15 &= v14;
    }
    if (v15 != v10)
      return;
LABEL_24:
    v13 = *(char **)v13;
    if (!v13)
      return;
  }
  if (*((_QWORD *)v13 + 2) != v3 || *((_QWORD *)v13 + 3) != v2)
    goto LABEL_24;
  v17 = *(char **)v13;
  if (v9.u32[0] > 1uLL)
  {
    if (v7 >= *(_QWORD *)&v8)
      v7 %= *(_QWORD *)&v8;
  }
  else
  {
    v7 &= v14;
  }
  v18 = *(char **)(*(_QWORD *)&v11 + 8 * v7);
  do
  {
    v19 = (int8x8_t *)v18;
    v18 = *(char **)v18;
  }
  while (v18 != v13);
  if (v19 == &this[5])
    goto LABEL_43;
  v20 = (unint64_t)v19[1];
  if (v9.u32[0] > 1uLL)
  {
    if (v20 >= *(_QWORD *)&v8)
      v20 %= *(_QWORD *)&v8;
  }
  else
  {
    v20 &= v14;
  }
  if (v20 == v7)
  {
LABEL_45:
    if (v17)
    {
      v21 = *((_QWORD *)v17 + 1);
      goto LABEL_47;
    }
  }
  else
  {
LABEL_43:
    if (!v17)
      goto LABEL_44;
    v21 = *((_QWORD *)v17 + 1);
    if (v9.u32[0] > 1uLL)
    {
      v22 = *((_QWORD *)v17 + 1);
      if (v21 >= *(_QWORD *)&v8)
        v22 = v21 % *(_QWORD *)&v8;
    }
    else
    {
      v22 = v21 & v14;
    }
    if (v22 != v7)
    {
LABEL_44:
      *(_QWORD *)(*(_QWORD *)&v11 + 8 * v7) = 0;
      v17 = *(char **)v13;
      goto LABEL_45;
    }
LABEL_47:
    if (v9.u32[0] > 1uLL)
    {
      if (v21 >= *(_QWORD *)&v8)
        v21 %= *(_QWORD *)&v8;
    }
    else
    {
      v21 &= v14;
    }
    if (v21 != v7)
    {
      *(_QWORD *)(*(_QWORD *)v5 + 8 * v21) = v19;
      v17 = *(char **)v13;
    }
  }
  *v19 = (int8x8_t)v17;
  *(_QWORD *)v13 = 0;
  --*(_QWORD *)&this[6];
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,void *>>>::operator()[abi:ne180100](1, v13);
}

Phase::ActionTreeDirectIOManager *Phase::ActionTreeDirectIOManager::ActionTreeDirectIOManager(Phase::ActionTreeDirectIOManager *this, Phase::Controller::TaskManager *a2, Phase::ActionTreeServerCallbackInterface *a3)
{
  uint64_t v4;

  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a3;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 1065353216;
  *((_QWORD *)a3 + 12) = this;
  *(_QWORD *)this = &off_24D576DD0;
  *((_QWORD *)this + 8) = 0;
  v4 = Phase::Controller::TaskManager::GetService<Phase::ActionTreeManager>(a2, 7);
  *((_QWORD *)this + 8) = v4;
  if (!v4)
    std::terminate();
  return this;
}

void sub_2164D4020(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = off_24D576E58;
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::ActionTreeManager>(Phase::Logger *a1, int a2)
{
  uint64_t v3;
  Phase::Logger *v4;
  uint64_t (**v5)(uint64_t, _QWORD, _QWORD, _QWORD, void *);
  NSObject *v7;
  std::logic_error *exception;
  NSObject *v9;
  std::string *v10;
  std::logic_error *v11;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 7) - v3) >> 5))
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 112;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(_QWORD *)v4)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 121;
      v17 = 1024;
      v18 = a2;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  v5 = std::any_cast[abi:ne180100]<Phase::ActionTreeManager * const>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v4);
  if (!v5)
    std::__throw_bad_any_cast[abi:ne180100]();
  return (uint64_t)*v5;
}

void sub_2164D4258(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2164D4348(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2164D4368(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t Phase::ActionTreeDirectIOManager::PrepareResidentBufferGenerator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  Phase::Logger *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  NSObject *v17;
  _QWORD **v18;
  _QWORD *i;
  unint64_t v20;
  _QWORD *v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t prime;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  void *v50;
  char v52;
  _QWORD *v53;
  unsigned int v54;
  id v55;
  void *v56;
  uint64_t v57;
  std::vector<char>::value_type __x;
  _BYTE buf[32];
  uint64_t v60;
  std::vector<char> v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 48))
    goto LABEL_106;
  v5 = *a2;
  v4 = a2[1];
  *(_QWORD *)buf = *a2;
  *(_QWORD *)&buf[8] = v4;
  v6 = (_QWORD *)(a1 + 24);
  v7 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 24), buf);
  if (!v7)
  {
    Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(*(Phase::Logger **)(a1 + 8), 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "getSoundAssetInfo:", a2[8]);
    v9 = v11 != 0;
    if (!v11)
    {
      v17 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 688));
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "ActionTreeIOManager.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 134;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v5;
        _os_log_impl(&dword_2164CC000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: did not find asset info for resident buffer generatorId %llu!", buf, 0x1Cu);
      }
      goto LABEL_95;
    }
    v55 = *(id *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) + 48);
    v56 = v10;
    v12 = operator new();
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_QWORD *)v12 = -1;
    *(_OWORD *)(v12 + 8) = 0u;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_QWORD *)(v12 + 40) = 0;
    __x = 0;
    std::vector<char>::vector((std::vector<char> *)(v12 + 48), 8uLL, &__x);
    v13 = 0;
    **(_DWORD **)(v12 + 48) = 0;
    *(_DWORD *)(v12 + 72) = 0;
    *(_QWORD *)buf = v5;
    *(_QWORD *)&buf[8] = v4;
    v57 = 0;
    *(_QWORD *)&buf[16] = v12;
    v14 = 0xCBF29CE484222325;
    do
      v14 = 0x100000001B3 * (v14 ^ (char)buf[v13++]);
    while (v13 != 16);
    v15 = *(_QWORD *)(a1 + 32);
    v54 = v9;
    if (v15)
    {
      v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        v9 = v14;
        if (v14 >= v15)
          v9 = v14 % v15;
      }
      else
      {
        v9 = (v15 - 1) & v14;
      }
      v18 = *(_QWORD ***)(*v6 + 8 * v9);
      if (v18)
      {
        for (i = *v18; i; i = (_QWORD *)*i)
        {
          v20 = i[1];
          if (v20 == v14)
          {
            if (i[2] == v5 && i[3] == v4)
            {
              v52 = 0;
              *(_QWORD *)&buf[16] = 0;
              v10 = v56;
              goto LABEL_88;
            }
          }
          else
          {
            if (v16.u32[0] > 1uLL)
            {
              if (v20 >= v15)
                v20 %= v15;
            }
            else
            {
              v20 &= v15 - 1;
            }
            if (v20 != v9)
              break;
          }
        }
      }
    }
    i = operator new(0x28uLL);
    v22 = (_QWORD *)(a1 + 40);
    *i = 0;
    i[1] = v14;
    *((_OWORD *)i + 1) = *(_OWORD *)buf;
    *(_QWORD *)&buf[16] = 0;
    i[4] = v12;
    v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 48) + 1);
    v24 = *(float *)(a1 + 56);
    if (v15 && (float)(v24 * (float)v15) >= v23)
    {
LABEL_78:
      v40 = (_QWORD *)*v6;
      v41 = *(_QWORD **)(*v6 + 8 * v9);
      v10 = v56;
      if (v41)
      {
        *i = *v41;
      }
      else
      {
        *i = *v22;
        *v22 = i;
        v40[v9] = v22;
        if (!*i)
          goto LABEL_87;
        v42 = *(_QWORD *)(*i + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v42 >= v15)
            v42 %= v15;
        }
        else
        {
          v42 &= v15 - 1;
        }
        v41 = (_QWORD *)(*v6 + 8 * v42);
      }
      *v41 = i;
LABEL_87:
      ++*(_QWORD *)(a1 + 48);
      v12 = *(_QWORD *)&buf[16];
      *(_QWORD *)&buf[16] = 0;
      v52 = 1;
      if (v12)
LABEL_88:
        std::default_delete<Phase::ActionTreeIOManager::BufferInfo>::operator()[abi:ne180100]((uint64_t)&buf[16], v12);
      v43 = v57;
      v57 = 0;
      if (v43)
        std::default_delete<Phase::ActionTreeIOManager::BufferInfo>::operator()[abi:ne180100]((uint64_t)&v57, v43);
      if ((v52 & 1) != 0)
      {
        v44 = i[4];
        v45 = (unsigned int *)objc_msgSend(v55, "audioBufferList");
        v46 = objc_msgSend(v55, "frameLength");
        v47 = *(_OWORD *)(a2 + 11);
        *(_OWORD *)buf = *(_OWORD *)(a2 + 9);
        *(_OWORD *)&buf[16] = v47;
        v60 = a2[13];
        std::vector<char>::vector(&v61, (16 * *v45) | 8);
        memcpy(v61.__begin_, v45, v61.__end_ - v61.__begin_);
        v62 = v46;
        v48 = v60;
        v49 = *(_OWORD *)buf;
        v50 = *(void **)(v44 + 48);
        *(_OWORD *)(v44 + 24) = *(_OWORD *)&buf[16];
        *(_OWORD *)(v44 + 8) = v49;
        *(_QWORD *)(v44 + 40) = v48;
        if (v50)
        {
          *(_QWORD *)(v44 + 56) = v50;
          operator delete(v50);
          *(_QWORD *)(v44 + 48) = 0;
          *(_QWORD *)(v44 + 56) = 0;
          *(_QWORD *)(v44 + 64) = 0;
          v46 = v62;
        }
        *(std::vector<char> *)(v44 + 48) = v61;
        *(_DWORD *)(v44 + 72) = v46;

        v9 = v54;
LABEL_95:

        return v9;
      }
LABEL_106:
      std::terminate();
    }
    v25 = 1;
    if (v15 >= 3)
      v25 = (v15 & (v15 - 1)) != 0;
    v26 = v25 | (2 * v15);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = (int8x8_t)v27;
    else
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v15 = *(_QWORD *)(a1 + 32);
    }
    if (*(_QWORD *)&prime > v15)
      goto LABEL_44;
    if (*(_QWORD *)&prime < v15)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 48) / *(float *)(a1 + 56));
      if (v15 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (*(_QWORD *)&prime <= v35)
        prime = (int8x8_t)v35;
      if (*(_QWORD *)&prime >= v15)
      {
        v15 = *(_QWORD *)(a1 + 32);
      }
      else
      {
        if (prime)
        {
LABEL_44:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v29 = operator new(8 * *(_QWORD *)&prime);
          v30 = (_QWORD *)*v6;
          *v6 = v29;
          if (v30)
            operator delete(v30);
          v31 = 0;
          *(int8x8_t *)(a1 + 32) = prime;
          do
            *(_QWORD *)(*v6 + 8 * v31++) = 0;
          while (*(_QWORD *)&prime != v31);
          v32 = (_QWORD *)*v22;
          if (*v22)
          {
            v33 = v32[1];
            v34 = (uint8x8_t)vcnt_s8(prime);
            v34.i16[0] = vaddlv_u8(v34);
            if (v34.u32[0] > 1uLL)
            {
              if (v33 >= *(_QWORD *)&prime)
                v33 %= *(_QWORD *)&prime;
            }
            else
            {
              v33 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*v6 + 8 * v33) = v22;
            v38 = (_QWORD *)*v32;
            if (*v32)
            {
              do
              {
                v39 = v38[1];
                if (v34.u32[0] > 1uLL)
                {
                  if (v39 >= *(_QWORD *)&prime)
                    v39 %= *(_QWORD *)&prime;
                }
                else
                {
                  v39 &= *(_QWORD *)&prime - 1;
                }
                if (v39 != v33)
                {
                  if (!*(_QWORD *)(*v6 + 8 * v39))
                  {
                    *(_QWORD *)(*v6 + 8 * v39) = v32;
                    goto LABEL_69;
                  }
                  *v32 = *v38;
                  *v38 = **(_QWORD **)(*v6 + 8 * v39);
                  **(_QWORD **)(*v6 + 8 * v39) = v38;
                  v38 = v32;
                }
                v39 = v33;
LABEL_69:
                v32 = v38;
                v38 = (_QWORD *)*v38;
                v33 = v39;
              }
              while (v38);
            }
          }
          v15 = (unint64_t)prime;
          goto LABEL_73;
        }
        v53 = (_QWORD *)*v6;
        *v6 = 0;
        if (v53)
          operator delete(v53);
        v15 = 0;
        *(_QWORD *)(a1 + 32) = 0;
      }
    }
LABEL_73:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v9 = v14 % v15;
      else
        v9 = v14;
    }
    else
    {
      v9 = (v15 - 1) & v14;
    }
    goto LABEL_78;
  }
  v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7) + 688));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "ActionTreeIOManager.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 111;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v5;
    _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: resident buffer for generatorId %llu already exists, no-op!", buf, 0x1Cu);
  }
  return 0;
}

void sub_2164D4AA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(Phase::Logger *a1, int a2)
{
  uint64_t v3;
  Phase::Logger *v4;
  id *v5;
  NSObject *v7;
  std::logic_error *exception;
  NSObject *v9;
  std::string *v10;
  std::logic_error *v11;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 7) - v3) >> 5))
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 140;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(_QWORD *)v4)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 149;
      v17 = 1024;
      v18 = a2;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  v5 = (id *)std::any_cast[abi:ne180100]<PHASEAssetRegistry * const {__strong}>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v4);
  if (!v5)
    std::__throw_bad_any_cast[abi:ne180100]();
  return *v5;
}

void sub_2164D4D68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2164D4E58(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2164D4E78(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t Phase::ActionTreeDirectIOManager::GeneratorStreamSeek(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return Phase::ActionTreeManager::GeneratorStreamSeek(*(_QWORD *)(a1 + 64), a2, a3, a4);
}

void Phase::ActionTreeDirectIOManager::EnqueueGeneratorBuffer()
{
  std::terminate();
}

BOOL Phase::ActionTreeDirectIOManager::IORenderOutput(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, vDSP_Length a5, unsigned int *a6)
{
  return Phase::ActionTreeManager::IORenderOutput(*(_QWORD *)(a1 + 64), a2, a3, a4, a5, a6);
}

BOOL Phase::ActionTreeIOManager::HasActiveGenerators(Phase::ActionTreeIOManager *this)
{
  return *((_QWORD *)this + 6) != 0;
}

void Phase::ActionTreeDirectIOManager::~ActionTreeDirectIOManager(Phase::ActionTreeDirectIOManager *this)
{
  *(_QWORD *)this = off_24D576E58;
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = off_24D576E58;
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x2199F9D70);
}

BOOL Phase::ActionTreeDirectIOManager::IOCanRenderGenerator(Phase::ActionTreeDirectIOManager *this, UniqueObjectId a2)
{
  UniqueObjectId v3;

  v3 = a2;
  return std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)this + 3, &v3) == 0;
}

uint64_t Phase::ActionTreeDirectIOManager::PrepareStreamingBufferGenerator()
{
  return 1;
}

uint64_t Phase::ActionTreeDirectIOManager::PreparePullStreamBufferGenerator()
{
  return 1;
}

uint64_t Phase::ActionTreeDirectIOManager::PrepareExternalOutputPullStreamBufferGenerator()
{
  return 1;
}

_QWORD *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;

  v2 = 0;
  v3 = 0xCBF29CE484222325;
  do
    v3 = 0x100000001B3 * (v3 ^ *((char *)a2 + v2++));
  while (v2 != 16);
  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    return 0;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v3;
    if (v3 >= *(_QWORD *)&v4)
      v6 = v3 % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & v3;
  }
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = (_QWORD *)*v7;
  if (*v7)
  {
    do
    {
      v9 = result[1];
      if (v3 == v9)
      {
        if (result[2] == *a2 && result[3] == a2[1])
          return result;
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v4)
            v9 %= *(_QWORD *)&v4;
        }
        else
        {
          v9 &= *(_QWORD *)&v4 - 1;
        }
        if (v9 != v6)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2164D50CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end;
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<char>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_2164D513C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,void *>>>::operator()[abi:ne180100](char a1, char *__p)
{
  char *v3;
  uint64_t v4;

  if (a1)
  {
    v3 = __p + 32;
    v4 = *((_QWORD *)__p + 4);
    *((_QWORD *)__p + 4) = 0;
    if (v4)
      std::default_delete<Phase::ActionTreeIOManager::BufferInfo>::operator()[abi:ne180100]((uint64_t)v3, v4);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::ActionTreeManager * const>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::ActionTreeManager *>::__id);
    else
      return 0;
  }
  return result;
}

uint64_t (**std::any_cast[abi:ne180100]<PHASEAssetRegistry * const {__strong}>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<PHASEAssetRegistry * {__strong}>::__id);
    else
      return 0;
  }
  return result;
}

Phase::ActionTreeObject *Phase::ActionTreeObject::ActionTreeObject(Phase::ActionTreeObject *this, PHASESoundEventNodeAsset *a2, PHASESoundEvent *a3)
{
  PHASESoundEventNodeAsset *v5;
  PHASESoundEventNodeAsset *v6;
  uint64_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;
  char *v24;
  Phase::Logger *inited;
  uint64_t v26;
  unint64_t v27;
  _OWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  int64x2_t v45;
  _OWORD *i;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  Phase::Controller::StreamRenderer **v50;
  Phase::Controller::StreamRenderer **v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  Phase::Controller::StreamRenderer **v67;
  Phase::Controller::StreamRenderer **v68;
  Phase::Controller::StreamRenderer **j;
  Phase::Controller::StreamRenderer **v70;
  unint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  Phase::Logger *InstancePtr;
  NSObject *v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  unint64_t v99;
  const char *v100;
  const char *v101;
  int v102;
  _DWORD *v103;
  int v104;
  BOOL v105;
  int v106;
  int v107;
  PHASESoundEventNodeAsset *v109;
  PHASESoundEvent *val;
  _BYTE buf[40];
  const char *v112;
  __int16 v113;
  const char *v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  val = a3;
  MEMORY[0x2199FA6B8](buf);
  *(_OWORD *)this = *(_OWORD *)buf;
  v6 = v5;
  *((_QWORD *)this + 2) = v6;
  v109 = v6;
  v7 = -[PHASESoundEventNodeAsset getActionTree](v6, "getActionTree");
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 16) = 0;
  *((_OWORD *)this + 2) = 0u;
  v8 = (int64x2_t *)((char *)this + 32);
  v9 = *(unsigned int *)(v7 + 8);
  v10 = *(unsigned int *)(v7 + 96);
  *((_OWORD *)this + 14) = 0u;
  *((_QWORD *)this + 3) = v7;
  *((_DWORD *)this + 34) = 1065353216;
  *((_DWORD *)this + 54) = v9;
  *((_DWORD *)this + 55) = v10;
  *((_OWORD *)this + 17) = 0u;
  *((_QWORD *)this + 36) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  std::vector<Phase::MetaParamValue>::resize((char **)this + 28, v9);
  v11 = (char *)*((_QWORD *)this + 31);
  v12 = (_BYTE *)*((_QWORD *)this + 32);
  v13 = (v12 - v11) >> 2;
  if (v9 <= v13)
  {
    if (v9 >= v13)
      goto LABEL_18;
    v24 = &v11[4 * v9];
    goto LABEL_15;
  }
  v14 = v9 - v13;
  v15 = *((_QWORD *)this + 33);
  if (v9 - v13 <= (v15 - (uint64_t)v12) >> 2)
  {
    bzero(*((void **)this + 32), 4 * v14);
    v24 = &v12[4 * v14];
LABEL_15:
    *((_QWORD *)this + 32) = v24;
    goto LABEL_18;
  }
  v16 = v15 - (_QWORD)v11;
  v17 = v16 >> 1;
  if (v16 >> 1 <= v9)
    v17 = v9;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
    v18 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v18 = v17;
  if (v18 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v19 = (char *)operator new(4 * v18);
  v20 = &v19[4 * v13];
  v21 = &v19[4 * v18];
  bzero(v20, 4 * v14);
  v22 = &v20[4 * v14];
  while (v12 != v11)
  {
    v23 = *((_DWORD *)v12 - 1);
    v12 -= 4;
    *((_DWORD *)v20 - 1) = v23;
    v20 -= 4;
  }
  *((_QWORD *)this + 31) = v20;
  *((_QWORD *)this + 32) = v22;
  *((_QWORD *)this + 33) = v21;
  if (v11)
    operator delete(v11);
LABEL_18:
  std::vector<Phase::MetaParamValue>::resize((char **)this + 34, v10);
  inited = (Phase::Logger *)objc_initWeak((id *)this + 37, val);
  *((_BYTE *)this + 304) = 0;
  *((_BYTE *)this + 312) = 0;
  *((_BYTE *)this + 320) = 0;
  *((_DWORD *)this + 81) = 0;
  v26 = *((_QWORD *)this + 4);
  v27 = *(unsigned int *)(*((_QWORD *)this + 3) + 64);
  v28 = (_OWORD *)*((_QWORD *)this + 5);
  v29 = ((uint64_t)v28 - v26) >> 6;
  if (v27 <= v29)
  {
    if (v27 >= v29)
      goto LABEL_41;
    for (i = (_OWORD *)(v26 + (v27 << 6)); v28 != i; v28 -= 4)
    {
      *(_QWORD *)buf = (char *)v28 - 56;
      std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    goto LABEL_38;
  }
  v30 = *((_QWORD *)this + 6);
  if (v27 - v29 <= (v30 - (uint64_t)v28) >> 6)
  {
    i = &v28[4 * (v27 - v29)];
    v47 = (v27 << 6) - (v29 << 6);
    do
    {
      v28[2] = 0u;
      v28[3] = 0u;
      *v28 = 0u;
      v28[1] = 0u;
      inited = Phase::Fader<double>::Fader((Phase::Logger *)((char *)v28 + 8), 0.0);
      v28 += 4;
      v47 -= 64;
    }
    while (v47);
LABEL_38:
    *((_QWORD *)this + 5) = i;
    goto LABEL_41;
  }
  v31 = v30 - v26;
  v32 = v31 >> 5;
  if (v31 >> 5 <= v27)
    v32 = *(unsigned int *)(*((_QWORD *)this + 3) + 64);
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFC0)
    v33 = 0x3FFFFFFFFFFFFFFLL;
  else
    v33 = v32;
  *(_QWORD *)&buf[32] = (char *)this + 48;
  if (v33 >> 58)
    goto LABEL_105;
  v34 = (char *)operator new(v33 << 6);
  v35 = &v34[64 * v29];
  *(_QWORD *)buf = v34;
  *(_QWORD *)&buf[8] = v35;
  *(_QWORD *)&buf[16] = v35;
  *(_QWORD *)&buf[24] = &v34[64 * v33];
  v36 = &v34[64 * v27];
  v37 = (v27 << 6) - (v29 << 6);
  do
  {
    *((_OWORD *)v35 + 2) = 0u;
    *((_OWORD *)v35 + 3) = 0u;
    *(_OWORD *)v35 = 0u;
    *((_OWORD *)v35 + 1) = 0u;
    Phase::Fader<double>::Fader((Phase::Logger *)(v35 + 8), 0.0);
    v35 += 64;
    v37 -= 64;
  }
  while (v37);
  *(_QWORD *)&buf[16] = v36;
  v39 = *((_QWORD *)this + 4);
  v38 = *((_QWORD *)this + 5);
  v40 = *(_QWORD *)&buf[8];
  if (v38 == v39)
  {
    v45 = vdupq_n_s64(v38);
  }
  else
  {
    v41 = 0;
    do
    {
      v42 = v40 + v41;
      v43 = v38 + v41;
      *(_QWORD *)(v42 - 64) = *(_QWORD *)(v38 + v41 - 64);
      *(_QWORD *)(v42 - 56) = 0;
      *(_QWORD *)(v42 - 48) = 0;
      *(_QWORD *)(v42 - 40) = 0;
      *(_OWORD *)(v42 - 56) = *(_OWORD *)(v38 + v41 - 56);
      *(_QWORD *)(v42 - 40) = *(_QWORD *)(v38 + v41 - 40);
      *(_QWORD *)(v43 - 56) = 0;
      *(_QWORD *)(v43 - 48) = 0;
      *(_QWORD *)(v43 - 40) = 0;
      v44 = *(_OWORD *)(v38 + v41 - 32);
      *(_QWORD *)(v42 - 16) = *(_QWORD *)(v38 + v41 - 16);
      *(_OWORD *)(v42 - 32) = v44;
      *(_QWORD *)(v42 - 8) = *(_QWORD *)(v38 + v41 - 8);
      v41 -= 64;
    }
    while (v38 + v41 != v39);
    v45 = *v8;
    v36 = *(char **)&buf[16];
    v40 += v41;
  }
  *((_QWORD *)this + 4) = v40;
  *((_QWORD *)this + 5) = v36;
  *(int64x2_t *)&buf[8] = v45;
  v48 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *(_QWORD *)&buf[24];
  *(_QWORD *)&buf[24] = v48;
  *(_QWORD *)buf = v45.i64[0];
  inited = (Phase::Logger *)std::__split_buffer<Phase::MetaParamState>::~__split_buffer((uint64_t)buf);
LABEL_41:
  v49 = *(unsigned int *)(*((_QWORD *)this + 3) + 40);
  v50 = (Phase::Controller::StreamRenderer **)*((_QWORD *)this + 7);
  v51 = (Phase::Controller::StreamRenderer **)*((_QWORD *)this + 8);
  v52 = 0xF0F0F0F0F0F0F0F1 * (v51 - v50);
  v53 = v49 - v52;
  if (v49 > v52)
  {
    v54 = *((_QWORD *)this + 9);
    if (0xF0F0F0F0F0F0F0F1 * ((v54 - (uint64_t)v51) >> 3) >= v53)
    {
      v70 = &v51[17 * v53];
      do
      {
        *((_OWORD *)v51 + 3) = 0uLL;
        *((_OWORD *)v51 + 4) = 0uLL;
        v51[10] = 0;
        *((_OWORD *)v51 + 1) = 0uLL;
        *((_OWORD *)v51 + 2) = 0uLL;
        *(_OWORD *)v51 = 0uLL;
        *((_BYTE *)v51 + 24) = 1;
        v51[6] = 0;
        v51[7] = 0;
        *((_BYTE *)v51 + 64) = 0;
        *(_OWORD *)(v51 + 11) = 0uLL;
        *(_OWORD *)(v51 + 13) = 0uLL;
        *(_OWORD *)(v51 + 15) = 0uLL;
        v51 += 17;
      }
      while (v51 != v70);
      *((_QWORD *)this + 8) = v70;
      goto LABEL_66;
    }
    v55 = 0xE1E1E1E1E1E1E1E2 * ((v54 - (uint64_t)v50) >> 3);
    if (v55 <= v49)
      v55 = *(unsigned int *)(*((_QWORD *)this + 3) + 40);
    if (0xF0F0F0F0F0F0F0F1 * ((v54 - (uint64_t)v50) >> 3) >= 0xF0F0F0F0F0F0F0)
      v56 = 0x1E1E1E1E1E1E1E1;
    else
      v56 = v55;
    if (v56 <= 0x1E1E1E1E1E1E1E1)
    {
      inited = (Phase::Logger *)operator new(136 * v56);
      v57 = (char *)inited + 8 * (v51 - v50);
      v58 = (char *)inited + 136 * v49;
      v59 = v57;
      do
      {
        *((_OWORD *)v59 + 3) = 0uLL;
        *((_OWORD *)v59 + 4) = 0uLL;
        *((_QWORD *)v59 + 10) = 0;
        *((_OWORD *)v59 + 1) = 0uLL;
        *((_OWORD *)v59 + 2) = 0uLL;
        *(_OWORD *)v59 = 0uLL;
        v59[24] = 1;
        *((_QWORD *)v59 + 6) = 0;
        *((_QWORD *)v59 + 7) = 0;
        v59[64] = 0;
        *(_OWORD *)(v59 + 88) = 0uLL;
        *(_OWORD *)(v59 + 104) = 0uLL;
        *(_OWORD *)(v59 + 120) = 0uLL;
        v59 += 136;
      }
      while (v59 != v58);
      v60 = (char *)inited + 136 * v56;
      if (v51 == v50)
      {
        *((_QWORD *)this + 7) = v57;
        *((_QWORD *)this + 8) = v58;
        *((_QWORD *)this + 9) = v60;
        if (!v51)
          goto LABEL_66;
      }
      else
      {
        do
        {
          v61 = *(_OWORD *)(v51 - 17);
          *(_OWORD *)(v57 - 126) = *(_OWORD *)((char *)v51 - 126);
          *(_OWORD *)(v57 - 136) = v61;
          v62 = (uint64_t)*(v51 - 13);
          *(v51 - 13) = 0;
          *((_QWORD *)v57 - 13) = v62;
          v63 = *((_OWORD *)v51 - 5);
          *((_OWORD *)v57 - 6) = *((_OWORD *)v51 - 6);
          *((_OWORD *)v57 - 5) = v63;
          v64 = *((_OWORD *)v51 - 4);
          v65 = *((_OWORD *)v51 - 3);
          v66 = *((_OWORD *)v51 - 1);
          *((_OWORD *)v57 - 2) = *((_OWORD *)v51 - 2);
          *((_OWORD *)v57 - 1) = v66;
          *((_OWORD *)v57 - 4) = v64;
          *((_OWORD *)v57 - 3) = v65;
          v57 -= 136;
          v51 -= 17;
        }
        while (v51 != v50);
        v51 = (Phase::Controller::StreamRenderer **)*((_QWORD *)this + 7);
        v67 = (Phase::Controller::StreamRenderer **)*((_QWORD *)this + 8);
        *((_QWORD *)this + 7) = v57;
        *((_QWORD *)this + 8) = v58;
        *((_QWORD *)this + 9) = v60;
        if (v67 != v51)
        {
          do
          {
            v68 = v67 - 17;
            inited = std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100](v67 - 13, 0);
            v67 = v68;
          }
          while (v68 != v51);
        }
        if (!v51)
          goto LABEL_66;
      }
      operator delete(v51);
      goto LABEL_66;
    }
LABEL_105:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  if (v49 < v52)
  {
    for (j = &v50[17 * v49]; v51 != j; v51 -= 17)
      inited = std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100](v51 - 13, 0);
    *((_QWORD *)this + 8) = j;
  }
LABEL_66:
  v71 = *(unsigned int *)(*((_QWORD *)this + 3) + 96);
  v72 = (char *)*((_QWORD *)this + 10);
  v73 = (char *)*((_QWORD *)this + 11);
  v74 = 0xAAAAAAAAAAAAAAABLL * ((v73 - v72) >> 5);
  v75 = v71 - v74;
  if (v71 <= v74)
  {
    if (v71 >= v74)
      goto LABEL_86;
    v85 = &v72[96 * v71];
    goto LABEL_85;
  }
  v76 = *((_QWORD *)this + 12);
  if (0xAAAAAAAAAAAAAAABLL * ((v76 - (uint64_t)v73) >> 5) >= v75)
  {
    v85 = &v73[96 * v75];
    do
    {
      *((_OWORD *)v73 + 3) = 0uLL;
      *((_OWORD *)v73 + 4) = 0uLL;
      *((_QWORD *)v73 + 10) = 0;
      *((_QWORD *)v73 + 11) = 0;
      *((_OWORD *)v73 + 1) = 0uLL;
      *((_OWORD *)v73 + 2) = 0uLL;
      *(_OWORD *)v73 = 0uLL;
      *((_DWORD *)v73 + 19) = 1065353216;
      v73 += 96;
    }
    while (v73 != v85);
LABEL_85:
    *((_QWORD *)this + 11) = v85;
    goto LABEL_86;
  }
  v77 = 0x5555555555555556 * ((v76 - (uint64_t)v72) >> 5);
  if (v77 <= v71)
    v77 = *(unsigned int *)(*((_QWORD *)this + 3) + 96);
  if (0xAAAAAAAAAAAAAAABLL * ((v76 - (uint64_t)v72) >> 5) >= 0x155555555555555)
    v78 = 0x2AAAAAAAAAAAAAALL;
  else
    v78 = v77;
  if (v78 > 0x2AAAAAAAAAAAAAALL)
    goto LABEL_105;
  inited = (Phase::Logger *)operator new(96 * v78);
  v79 = (char *)inited + 32 * ((v73 - v72) >> 5);
  v80 = (char *)inited + 96 * v71;
  v81 = v79;
  do
  {
    *((_OWORD *)v81 + 3) = 0uLL;
    *((_OWORD *)v81 + 4) = 0uLL;
    *((_QWORD *)v81 + 10) = 0;
    *((_QWORD *)v81 + 11) = 0;
    *((_OWORD *)v81 + 1) = 0uLL;
    *((_OWORD *)v81 + 2) = 0uLL;
    *(_OWORD *)v81 = 0uLL;
    *((_DWORD *)v81 + 19) = 1065353216;
    v81 += 96;
  }
  while (v81 != v80);
  if (v73 != v72)
  {
    do
    {
      v82 = *((_OWORD *)v73 - 6);
      v83 = *((_OWORD *)v73 - 5);
      v84 = *((_OWORD *)v73 - 3);
      *((_OWORD *)v79 - 4) = *((_OWORD *)v73 - 4);
      *((_OWORD *)v79 - 3) = v84;
      *((_OWORD *)v79 - 6) = v82;
      *((_OWORD *)v79 - 5) = v83;
      *((_DWORD *)v79 - 8) = *((_DWORD *)v73 - 8);
      *((_DWORD *)v79 - 7) = *((_DWORD *)v73 - 7);
      *((_DWORD *)v79 - 6) = *((_DWORD *)v73 - 6);
      *((_DWORD *)v79 - 5) = *((_DWORD *)v73 - 5);
      *((_OWORD *)v79 - 1) = *((_OWORD *)v73 - 1);
      v79 -= 96;
      v73 -= 96;
    }
    while (v73 != v72);
    v73 = v72;
  }
  *((_QWORD *)this + 10) = v79;
  *((_QWORD *)this + 11) = v80;
  *((_QWORD *)this + 12) = (char *)inited + 96 * v78;
  if (v73)
    operator delete(v73);
LABEL_86:
  if (*((_BYTE *)this + 312))
    *((_BYTE *)this + 312) = 0;
  *((_BYTE *)this + 200) = 0;
  *((_BYTE *)this + 144) = 1;
  *((_QWORD *)this + 26) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  v86 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v86 + 64))
  {
    v87 = 0;
    v88 = 0;
    v89 = 0;
    do
    {
      v90 = (_QWORD *)(v8->i64[0] + v88);
      v91 = *(_QWORD *)(v86 + 72) + v87;
      inited = (Phase::Logger *)Phase::Fader<double>::SetDefaultValue((uint64_t)(v90 + 1), *(double *)(v91 + 48));
      v90[7] = *(_QWORD *)(v91 + 48);
      *v90 = v91;
      ++v89;
      v86 = *((_QWORD *)this + 3);
      v88 += 64;
      v87 += 464;
    }
    while (v89 < *(unsigned int *)(v86 + 64));
  }
  if (*(_DWORD *)(v86 + 96))
  {
    v92 = 0;
    v93 = 8;
    do
    {
      inited = (Phase::Logger *)MEMORY[0x2199FA6B8](buf);
      *(_OWORD *)(*((_QWORD *)this + 10) + v93) = *(_OWORD *)buf;
      ++v92;
      v93 += 96;
    }
    while (v92 < *(unsigned int *)(*((_QWORD *)this + 3) + 96));
  }
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(inited);
  if (*((_BYTE *)InstancePtr + 1553))
  {
    v95 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                        + 688)));
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
    {
      v96 = *(_QWORD *)this;
      -[PHASEAsset identifier](v109, "identifier");
      v97 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v98 = objc_msgSend(v97, "UTF8String");
      v99 = *((char *)this + 144);
      v100 = "<not found>";
      v101 = "<not found>";
      if (v99 <= 0xA)
        v101 = off_24D577180[v99];
      v102 = *((unsigned __int8 *)this + 145);
      v103 = (_DWORD *)*((_QWORD *)this + 3);
      if (v102 == 1)
        v100 = "seeking";
      v104 = v103[16];
      v105 = v102 == 0;
      v106 = v103[24];
      if (v105)
        v100 = "not seeking";
      v107 = v103[10];
      *(_DWORD *)buf = 136317186;
      *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 541;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v96;
      *(_WORD *)&buf[28] = 2080;
      *(_QWORD *)&buf[30] = v98;
      *(_WORD *)&buf[38] = 2080;
      v112 = v101;
      v113 = 2080;
      v114 = v100;
      v115 = 1024;
      v116 = v104;
      v117 = 1024;
      v118 = v106;
      v119 = 1024;
      v120 = v107;
      _os_log_impl(&dword_2164CC000, v95, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu) - created (identifier: %s, run state: %s, seek state: %s, metaparameter count: %d, submix count: %d, generator count: %d)", buf, 0x4Cu);

    }
  }

  return this;
}

void sub_2164D5B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, Phase::ActionTreeGatheredParams *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  id *v18;
  void *v19;
  void *v20;
  void *v22;

  objc_destroyWeak(v18);
  Phase::ActionTreeGatheredParams::~ActionTreeGatheredParams(a10);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(a11 - 120);
  v22 = *(void **)(v17 + 80);
  if (v22)
  {
    *(_QWORD *)(v17 + 88) = v22;
    operator delete(v22);
  }
  a14 = a11 - 168;
  std::vector<Phase::ActionTreeObject::LeafNodeInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::vector<Phase::MetaParamState>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);

  _Unwind_Resume(a1);
}

_QWORD *Phase::Fader<double>::SetDefaultValue(uint64_t a1, double a2)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(double *)(a1 + 32) = a2;
  v4[0] = &unk_24D5770F0;
  v4[1] = Phase::CurveFunction::Linear<double>;
  v5 = v4;
  Phase::Fader<double>::SetInternal(a1, (uint64_t)v4, a2, 0.0);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_2164D5D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void Phase::ActionTreeGatheredParams::~ActionTreeGatheredParams(Phase::ActionTreeGatheredParams *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

Phase::Controller::StreamRenderer *std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100](Phase::Controller::StreamRenderer **a1, Phase::Controller::StreamRenderer *a2)
{
  Phase::Controller::StreamRenderer *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::StreamRenderer::~StreamRenderer(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void Phase::ActionTreeObject::SetRunState(char *a1, unsigned int a2)
{
  Phase::Logger *InstancePtr;
  NSObject *v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)a1);
  if (*((_BYTE *)InstancePtr + 1553))
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 688));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = a1[144];
      if (v6 > 0xA)
        v7 = "<not found>";
      else
        v7 = off_24D577180[v6];
      v8 = *(_QWORD *)a1;
      if (a2 > 0xA)
        v9 = "<not found>";
      else
        v9 = off_24D577180[a2];
      v10 = 136316162;
      v11 = "ActionTreeManager.mm";
      v12 = 1024;
      v13 = 565;
      v14 = 2048;
      v15 = v8;
      v16 = 2080;
      v17 = v7;
      v18 = 2080;
      v19 = v9;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu) - run state changed from '%s' to '%s'", (uint8_t *)&v10, 0x30u);
    }
  }
  a1[144] = a2;
}

void Phase::ActionTreeObject::SetSeekState(unsigned __int8 *a1, int a2)
{
  Phase::Logger *InstancePtr;
  NSObject *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  const char *v9;
  const char *v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)a1);
  if (*((_BYTE *)InstancePtr + 1553))
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 688));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)a1;
      v7 = a1[145];
      v8 = "<not found>";
      if (v7 == 1)
        v9 = "seeking";
      else
        v9 = "<not found>";
      v12 = "ActionTreeManager.mm";
      v11 = 136316162;
      if (v7)
        v10 = v9;
      else
        v10 = "not seeking";
      v13 = 1024;
      v14 = 576;
      if (a2 == 1)
        v8 = "seeking";
      v15 = 2048;
      v16 = v6;
      v17 = 2080;
      if (!a2)
        v8 = "not seeking";
      v18 = v10;
      v19 = 2080;
      v20 = v8;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu) - seek state changed from '%s' to '%s'", (uint8_t *)&v11, 0x30u);
    }
  }
  a1[145] = a2;
}

BOOL Phase::ActionTreeObject::LeafNodeInfo::Configure(uint64_t a1, _QWORD *a2, _BYTE *a3, _QWORD *a4, _QWORD *a5, _OWORD *a6)
{
  NSObject *v7;
  _BOOL8 result;
  uint64_t v9;
  BOOL v10;
  Phase::Logger *InstancePtr;
  NSObject *v12;
  unint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  const char *v23;
  int v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (*a2)
  {
    if (*a3)
      goto LABEL_3;
LABEL_11:
    std::terminate();
  }
  if (a2[1])
    v10 = *a3 == 0;
  else
    v10 = 1;
  if (v10)
    goto LABEL_11;
LABEL_3:
  if (*(_BYTE *)a1)
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 688));
    result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v9 = *(_QWORD *)(a1 + 8);
      v24 = 136315650;
      v25 = "ActionTreeManager.mm";
      v26 = 1024;
      v27 = 597;
      v28 = 2048;
      v29 = v9;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: attempting to reconfigure a node without resetting, generatorId %llu!", (uint8_t *)&v24, 0x1Cu);
      return 0;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 64) = *a3;
    *(_QWORD *)(a1 + 88) = *a4;
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 112) = *a5;
    *(_OWORD *)(a1 + 120) = *a6;
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)a1);
    if (*((_BYTE *)InstancePtr + 1553))
    {
      v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 688));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(char *)(a1 + 64);
        v14 = "<not found>";
        v15 = "<not found>";
        if (v13 <= 6)
          v15 = off_24D5771D8[v13];
        v16 = *(_QWORD *)(a1 + 88);
        v17 = "looping";
        if (v16 != 1)
          v17 = "<not found>";
        if (v16)
          v18 = v17;
        else
          v18 = "one shot";
        v19 = *(char *)(a1 + 24);
        if (v19 <= 8)
          v14 = off_24D577210[v19];
        v20 = *(_QWORD *)(a1 + 120);
        v21 = *(_QWORD *)(a1 + 8);
        v22 = *(char *)(a1 + 25);
        if (v22 > 3)
          v23 = "<not found>";
        else
          v23 = off_24D577258[v22];
        v24 = 136316930;
        v25 = "ActionTreeManager.mm";
        v26 = 1024;
        v27 = 614;
        v28 = 2048;
        v29 = v20;
        v30 = 2048;
        v31 = v21;
        v32 = 2080;
        v33 = v15;
        v34 = 2080;
        v35 = v18;
        v36 = 2080;
        v37 = v14;
        v38 = 2080;
        v39 = v23;
        _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, generator: %llu) - configured (type: %s, playback mode: %s, state: %s, seek state: %s)", (uint8_t *)&v24, 0x4Eu);
      }
    }
    return *(_BYTE *)a1 != 0;
  }
  return result;
}

void Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(uint64_t a1, unsigned int a2)
{
  Phase::Logger *InstancePtr;
  NSObject *v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)a1);
  if (*((_BYTE *)InstancePtr + 1553))
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 688));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(char *)(a1 + 24);
      if (v6 > 8)
        v7 = "<not found>";
      else
        v7 = off_24D577210[v6];
      v8 = *(_QWORD *)(a1 + 120);
      v9 = *(_QWORD *)(a1 + 8);
      if (a2 > 8)
        v10 = "<not found>";
      else
        v10 = off_24D577210[a2];
      v11 = 136316418;
      v12 = "ActionTreeManager.mm";
      v13 = 1024;
      v14 = 1140;
      v15 = 2048;
      v16 = v8;
      v17 = 2048;
      v18 = v9;
      v19 = 2080;
      v20 = v7;
      v21 = 2080;
      v22 = v10;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, generator: %llu) - state changed from '%s' to '%s'", (uint8_t *)&v11, 0x3Au);
    }
  }
  *(_BYTE *)(a1 + 24) = a2;
}

void Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeSeekState(uint64_t a1, unsigned int a2)
{
  Phase::Logger *InstancePtr;
  NSObject *v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)a1);
  if (*((_BYTE *)InstancePtr + 1553))
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 688));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(char *)(a1 + 25);
      if (v6 > 3)
        v7 = "<not found>";
      else
        v7 = off_24D577258[v6];
      v8 = *(_QWORD *)(a1 + 120);
      v9 = *(_QWORD *)(a1 + 8);
      if (a2 > 3)
        v10 = "<not found>";
      else
        v10 = off_24D577258[a2];
      v11 = 136316418;
      v12 = "ActionTreeManager.mm";
      v13 = 1024;
      v14 = 1152;
      v15 = 2048;
      v16 = v8;
      v17 = 2048;
      v18 = v9;
      v19 = 2080;
      v20 = v7;
      v21 = 2080;
      v22 = v10;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, generator: %llu) - seek state changed from '%s' to '%s'", (uint8_t *)&v11, 0x3Au);
    }
  }
  *(_BYTE *)(a1 + 25) = a2;
}

uint64_t Phase::ActionTreeObject::LeafNodeInfo::GeneratorStreamSeek(Phase::ActionTreeObject::LeafNodeInfo *this, Phase::Controller::TaskManager *a2)
{
  void *v3;
  uint64_t v4;
  long double v5;
  id *v6;
  id *v7;
  Phase::Logger *v8;
  long double FileLengthInSeconds;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _BOOL8 v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  double v22;
  const char *v23;
  NSObject *v24;
  uint32_t v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v33;
  uint64_t v34;
  _QWORD v35[5];
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  long double v43;
  __int16 v44;
  long double v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 4))
  {
    if (!*((_BYTE *)this + 40))
      goto LABEL_29;
    Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(a2, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "getSoundAssetInfo:", *((_QWORD *)this + 7));
    if (!v4)
    {
      v20 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 688));
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = *((_QWORD *)this + 1);
        v22 = *((double *)this + 7);
        *(_DWORD *)buf = 136315906;
        v37 = "ActionTreeManager.mm";
        v38 = 1024;
        v39 = 1021;
        v40 = 2048;
        v41 = v21;
        v42 = 2048;
        v43 = v22;
        v23 = "%25s:%-5d generatorId %llu: Error: did not find asset info with assetId %llu";
        v24 = v20;
        v25 = 38;
LABEL_22:
        _os_log_impl(&dword_2164CC000, v24, OS_LOG_TYPE_ERROR, v23, buf, v25);
      }
LABEL_23:
      v19 = 1;
LABEL_24:

      return v19;
    }
    v5 = *((double *)this + 6);
    *((_BYTE *)this + 40) = 0;
    *((_QWORD *)this + 6) = 0;
    v6 = (id *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v7 = v6;
    if (!v6)
LABEL_29:
      std::terminate();
    FileLengthInSeconds = Phase::Controller::StreamedSoundAssetInfo::GetFileLengthInSeconds(v6);
    if (v5 >= FileLengthInSeconds)
    {
      if (!*((_QWORD *)this + 11))
      {
        v33 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v8) + 688));
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          v34 = *((_QWORD *)this + 1);
          *(_DWORD *)buf = 136316162;
          v37 = "ActionTreeManager.mm";
          v38 = 1024;
          v39 = 1042;
          v40 = 2048;
          v41 = v34;
          v42 = 2048;
          v43 = v5;
          v44 = 2048;
          v45 = FileLengthInSeconds;
          _os_log_impl(&dword_2164CC000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d generatorId %llu: seek to time %.2fs, past end of stream (%.2fs) of one-shot", buf, 0x30u);
        }
        v19 = 2;
        goto LABEL_24;
      }
      v5 = fmod(v5, FileLengthInSeconds);
    }
    v10 = Phase::Controller::StreamedSoundAssetInfo::GetFileLengthInSeconds(v7);
    v11 = objc_msgSend(v7[6], "length");
    Phase::Controller::StreamRenderer::Reset(*((_QWORD *)this + 4));
    v12 = (uint64_t)(v5 / v10 * (double)v11);
    v13 = *((_QWORD *)this + 4);
    v14 = v7[6];
    if (*((_QWORD *)this + 11) == 1)
    {
      v15 = Phase::Controller::StreamedSoundAssetInfo::ScheduleSegment((uint64_t)v7, v13, 0, v12, objc_msgSend(v14, "length") - v12, 0, 0);
      if (!v15)
        goto LABEL_20;
      v15 = Phase::Controller::StreamedSoundAssetInfo::ScheduleFile((uint64_t)v7, *((_QWORD *)this + 4), 0, 1, 0, 0);
    }
    else
    {
      v26 = objc_msgSend(v14, "length");
      v35[0] = MEMORY[0x24BDAC760];
      v35[1] = 3321888768;
      v35[2] = ___ZN5Phase16ActionTreeObject12LeafNodeInfo19GeneratorStreamSeekERNS_10Controller11TaskManagerE_block_invoke;
      v35[3] = &__block_descriptor_40_ea8_32c102_ZTSKZN5Phase16ActionTreeObject12LeafNodeInfo19GeneratorStreamSeekERNS_10Controller11TaskManagerEE3__0_e8_v16__0q8l;
      v35[4] = this;
      v15 = Phase::Controller::StreamedSoundAssetInfo::ScheduleSegment((uint64_t)v7, v13, 0, v12, (v26 - v12), 0, v35);
    }
    if (v15)
    {
      v27 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v15) + 688));
      v19 = 0;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        v28 = *((_QWORD *)this + 1);
        v29 = *((char *)this + 24);
        *(_DWORD *)buf = 136316162;
        v37 = "ActionTreeManager.mm";
        v38 = 1024;
        v39 = 1089;
        v40 = 2048;
        v41 = v28;
        v42 = 2048;
        v43 = v5;
        v44 = 1024;
        LODWORD(v45) = v29;
        _os_log_impl(&dword_2164CC000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d generatorId %llu: completed seek to time %.2fs, node state %hhd", buf, 0x2Cu);
        v19 = 0;
      }
      goto LABEL_24;
    }
LABEL_20:
    v30 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v15) + 688));
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = *((_QWORD *)this + 7);
      *(_DWORD *)buf = 136315650;
      v37 = "ActionTreeManager.mm";
      v38 = 1024;
      v39 = 1084;
      v40 = 2048;
      v41 = v31;
      v23 = "%25s:%-5d Failed to schedule segment/file for assetId %llu";
      v24 = v30;
      v25 = 28;
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  v16 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 688));
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    v17 = *((_QWORD *)this + 1);
    v18 = *((char *)this + 64);
    *(_DWORD *)buf = 136315906;
    v37 = "ActionTreeManager.mm";
    v38 = 1024;
    v39 = 1008;
    v40 = 2048;
    v41 = v17;
    v42 = 1024;
    LODWORD(v43) = v18;
    _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d generatorId %llu: Error: cannot seek a non-streaming node type %hhd", buf, 0x22u);
  }
  return 1;
}

void sub_2164D6A0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN5Phase16ActionTreeObject12LeafNodeInfo19GeneratorStreamSeekERNS_10Controller11TaskManagerE_block_invoke(uint64_t a1)
{
  Phase::ActionTreeObject::LeafNodeInfo::HandleStreamRendererFinishedCallback(*(Phase::ActionTreeObject::LeafNodeInfo **)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c102_ZTSKZN5Phase16ActionTreeObject12LeafNodeInfo19GeneratorStreamSeekERNS_10Controller11TaskManagerEE3__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void Phase::ActionTreeObject::LeafNodeInfo::HandleStreamRendererFinishedCallback(Phase::ActionTreeObject::LeafNodeInfo *this)
{
  int v1;
  BOOL v2;

  if (*((_QWORD *)this + 4) && *((_BYTE *)this + 25) != 1)
  {
    v1 = *((unsigned __int8 *)this + 24);
    if (*((_BYTE *)this + 24))
      v2 = v1 == 6;
    else
      v2 = 1;
    if (!v2)
    {
      if (v1 == 2)
        *((_BYTE *)this + 41) = 1;
      else
        Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)this, 5u);
    }
  }
}

uint64_t Phase::ActionTreeManager::ActionTreeManager(uint64_t a1, Phase::Logger *a2, uint64_t a3)
{
  uint64_t InstancePtr;

  InstancePtr = Phase::Logger::GetInstancePtr((Phase::Logger *)a1);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::Commandable(a1, *(_QWORD *)(InstancePtr + 688), 1, 0x20000);
  *(_QWORD *)a1 = off_24D576F10;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_QWORD *)(a1 + 80) = &off_24D576FB8;
  *(_QWORD *)(a1 + 104) = a1 + 80;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 850045863;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a2;
  *(_OWORD *)(a1 + 240) = xmmword_2166F7320;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = a3;
  *(_QWORD *)(a1 + 232) = Phase::Controller::TaskManager::GetService<Phase::Controller::GroupManager>(a2, 10);
  return a1;
}

void sub_2164D6B78(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::~guarded_lookup_hash_table(v3);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::~__hash_table(v2);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Commandable<128,Phase::LockFreeQueueMPSC>::Commandable(uint64_t a1, uint64_t a2, int a3, int a4)
{
  size_t v4;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  void *v16;

  LODWORD(v4) = a4;
  *(_QWORD *)a1 = off_24D577038;
  v8 = a3;
  v9 = (_QWORD *)operator new[]();
  *v9 = 8;
  v9[1] = v8;
  v10 = v9 + 2;
  if (a3)
  {
    bzero(v9 + 2, 8 * a3);
    *(_QWORD *)(a1 + 8) = v10;
    *(_DWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = a2;
    *(_BYTE *)(a1 + 32) = 0;
    if (a3 >= 1)
    {
      v11 = 0;
      v12 = 0;
      if ((int)v4 <= 32)
        v4 = 32;
      else
        v4 = v4;
      do
      {
        v13 = *(_QWORD *)(a1 + 8);
        v14 = (int *)operator new();
        v15 = *(_QWORD *)(a1 + 24);
        *v14 = v4;
        v14[1] = 0;
        v14[2] = v4;
        v14[3] = 0;
        v16 = malloc_type_malloc(v4, 0xED83EC4BuLL);
        *((_QWORD *)v14 + 2) = v16;
        *((_QWORD *)v14 + 3) = v16;
        *((_BYTE *)v14 + 32) = 0;
        bzero(v16, *v14);
        *((_BYTE *)v14 + 40) = 0;
        *((_QWORD *)v14 + 6) = v15;
        std::unique_ptr<Phase::CommandQueue<Phase::LockFreeQueueMPSC>>::reset[abi:ne180100]((uint64_t *)(v13 + v11), (uint64_t)v14);
        ++v12;
        v11 += 8;
      }
      while (v12 < *(int *)(a1 + 16));
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v10;
    *(_DWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = a2;
    *(_BYTE *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_2164D6CF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x1070C405653F1FALL);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::GroupManager>(Phase::Logger *a1, int a2)
{
  uint64_t v3;
  Phase::Logger *v4;
  uint64_t (**v5)(uint64_t, _QWORD, _QWORD, _QWORD, void *);
  NSObject *v7;
  std::logic_error *exception;
  NSObject *v9;
  std::string *v10;
  std::logic_error *v11;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 7) - v3) >> 5))
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 112;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(_QWORD *)v4)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 121;
      v17 = 1024;
      v18 = a2;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  v5 = std::any_cast[abi:ne180100]<Phase::Controller::GroupManager * const>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v4);
  if (!v5)
    std::__throw_bad_any_cast[abi:ne180100]();
  return (uint64_t)*v5;
}

void sub_2164D6F2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2164D701C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2164D703C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = off_24D577038;
  v2 = a1[1];
  if (v2)
  {
    v5 = *(_QWORD *)(v2 - 8);
    v4 = v2 - 8;
    v3 = v5;
    if (v5)
    {
      v6 = 8 * v3;
      do
      {
        std::unique_ptr<Phase::CommandQueue<Phase::LockFreeQueueMPSC>>::reset[abi:ne180100]((uint64_t *)(v4 + v6), 0);
        v6 -= 8;
      }
      while (v6);
    }
    MEMORY[0x2199F9D4C](v4 - 8, 0x20C8093837F09);
  }
  return a1;
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::GlobalMetaParameterManager>(Phase::Logger *a1, int a2)
{
  uint64_t v3;
  Phase::Logger *v4;
  uint64_t (**v5)(uint64_t, _QWORD, _QWORD, _QWORD, void *);
  NSObject *v7;
  std::logic_error *exception;
  NSObject *v9;
  std::string *v10;
  std::logic_error *v11;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 7) - v3) >> 5))
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 112;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(_QWORD *)v4)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 121;
      v17 = 1024;
      v18 = a2;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  v5 = std::any_cast[abi:ne180100]<Phase::GlobalMetaParameterManager * const>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v4);
  if (!v5)
    std::__throw_bad_any_cast[abi:ne180100]();
  return (uint64_t)*v5;
}

void sub_2164D72E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2164D73D8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2164D73F8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t Phase::ActionTreeManager::GetParamValue(uint64_t a1, unint64_t a2, MetaParamValue *a3, _DWORD *a4, _QWORD *a5)
{
  Phase::Logger *GlobalMetaParameterState;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  Phase::GlobalMetaParameterManager *v15;
  void *v16;
  Phase::Logger *v17;
  const char *v18;
  NSObject *v19;
  uint64_t v20;
  __int128 v22;
  MetaParameter *param;
  uint64_t v24;
  Phase::Logger *ParamValue;
  int v26;
  uint64_t v27;
  int v28;
  char *v29;
  unint64_t v30;
  NSObject *v31;
  int v32;
  char v33[4];
  double v34;
  MetaParamState v35;
  _BYTE buf[12];
  __int16 v37;
  int v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  GlobalMetaParameterState = Phase::Fader<double>::Fader((Phase::Logger *)&v35.mFader, 0.0);
  if (!a5)
    goto LABEL_7;
  v11 = a5[3];
  v12 = a5[4];
  v13 = *(unsigned int *)(v11 + 64);
  if (v13 != (a5[5] - v12) >> 6)
    goto LABEL_8;
  if (!(_DWORD)v13)
  {
LABEL_7:
    v15 = (Phase::GlobalMetaParameterManager *)Phase::Controller::TaskManager::GetService<Phase::GlobalMetaParameterManager>(*(Phase::Logger **)(a1 + 224), 6);
    GlobalMetaParameterState = (Phase::Logger *)Phase::GlobalMetaParameterManager::GetGlobalMetaParameterState(v15, a2, &v35);
    if ((GlobalMetaParameterState & 1) != 0)
      goto LABEL_19;
LABEL_8:
    Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(*(Phase::Logger **)(a1 + 224), 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = (Phase::Logger *)objc_msgSend(v16, "getString:", a2);
    if (v17)
      v18 = (const char *)v17;
    else
      v18 = "<unknown>";
    v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v17) + 688));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
      v37 = 1024;
      v38 = 1206;
      v39 = 2080;
      v40 = v18;
      _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Error gathering param %s\n", buf, 0x1Cu);
    }

    goto LABEL_14;
  }
  v14 = *(_QWORD **)(v11 + 72);
  while (*v14 != a2)
  {
    v14 += 58;
    v12 += 64;
    if (!--v13)
      goto LABEL_7;
  }
  v35.param = *(MetaParameter **)v12;
  if ((MetaParamState *)v12 != &v35)
    GlobalMetaParameterState = (Phase::Logger *)std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__assign_with_size[abi:ne180100]<Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>((uint64_t)&v35.mFader, *(_QWORD **)(v12 + 8), *(_QWORD **)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 6);
  v22 = *(_OWORD *)(v12 + 32);
  v35.mFader.mValue = *(double *)(v12 + 48);
  *(_OWORD *)&v35.mFader.mOffset = v22;
  v35.currentInputValue.stringVal = *(_QWORD *)(v12 + 56);
LABEL_19:
  param = v35.param;
  if (!v35.param)
  {
    v31 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(GlobalMetaParameterState) + 688));
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
      v37 = 1024;
      v38 = 1276;
      v39 = 2080;
      v40 = "todo";
LABEL_35:
      _os_log_impl(&dword_2164CC000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d Error gathering param %s\n", buf, 0x1Cu);
    }
LABEL_14:
    v20 = 0;
    goto LABEL_15;
  }
  v24 = *((_QWORD *)v35.param + 3);
  if (!v24)
  {
    *(MetaParamValue *)&a3->fltVal = v35.currentInputValue;
    v32 = *((_DWORD *)param + 3);
    if ((v32 - 1) <= 1)
      goto LABEL_44;
    goto LABEL_14;
  }
  ParamValue = (Phase::Logger *)Phase::ActionTreeManager::GetParamValue(a1, v24, &v34, v33, a5);
  if ((ParamValue & 1) == 0)
    goto LABEL_14;
  v26 = *((_DWORD *)param + 2);
  if (v26 == 2)
  {
    a3->fltVal = Phase::EvaluateEnvelopeDef((uint64_t)param + 56, v34);
    goto LABEL_43;
  }
  if (v26 != 3)
  {
    v31 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(ParamValue) + 688));
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      goto LABEL_14;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
    v37 = 1024;
    v38 = 1246;
    v39 = 2080;
    v40 = "todo";
    goto LABEL_35;
  }
  v27 = *((unsigned int *)param + 14);
  if (!(_DWORD)v27)
  {
LABEL_32:
    v30 = *((_QWORD *)param + 6);
    goto LABEL_42;
  }
  v28 = *((_DWORD *)param + 3);
  v29 = (char *)param + 64;
  while (v28 == 1)
  {
    if (*(double *)v29 == v34)
      goto LABEL_41;
LABEL_31:
    v29 += 16;
    if (!--v27)
      goto LABEL_32;
  }
  if (v28 != 2 || *(_QWORD *)v29 != *(_QWORD *)&v34)
    goto LABEL_31;
LABEL_41:
  v30 = *((_QWORD *)v29 + 1);
LABEL_42:
  a3->stringVal = v30;
LABEL_43:
  v32 = *((_DWORD *)param + 4);
LABEL_44:
  *a4 = v32;
  v20 = 1;
LABEL_15:
  *(_QWORD *)buf = &v35.mFader;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v20;
}

void sub_2164D77C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

double Phase::EvaluateEnvelopeDef(uint64_t a1, double a2)
{
  float64x2_t v3;
  unint64_t v4;
  double *v6;
  double *v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  double **v14;
  uint64_t v15;
  __int128 *v16;
  double v18;
  float64x2_t v20;
  float64x2_t v21;
  double *v22;
  __int128 *v23;
  double *v24;
  double **v25;
  char v26;
  double **v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = *(float64x2_t *)a1;
  v4 = *(unsigned int *)(a1 + 16);
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v25 = &v22;
  v26 = 0;
  if (!(_DWORD)v4)
  {
    v16 = 0;
    v7 = 0;
    goto LABEL_13;
  }
  v20 = v3;
  v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::Segment>>((uint64_t)&v24, v4);
  v7 = v6;
  v22 = v6;
  v24 = &v6[6 * v8];
  v9 = v6;
  do
  {
    *((_OWORD *)v9 + 1) = 0uLL;
    *(_OWORD *)v9 = 0uLL;
    v9[4] = 0.0;
    *((_QWORD *)v9 + 5) = v9 + 2;
    *((_QWORD *)v9 + 2) = &off_24D576F70;
    v9 += 6;
  }
  while (v9 != &v6[6 * v4]);
  v10 = 0;
  v11 = a1 + 24;
  v23 = (__int128 *)&v6[6 * v4];
  v12 = 1;
  do
  {
    v13 = v11 + 24 * v10;
    *(float64x2_t *)&v7[6 * v10] = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)v13));
    Phase::Controller::GetCurveFunctionFromCurveType<double>(*(Phase::Logger **)(v13 + 16), &v25);
    std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](&v7[6 * v10 + 2], (uint64_t)&v25);
    v14 = v27;
    if (v27 == (double **)&v25)
    {
      v14 = (double **)&v25;
      v15 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_10;
      v15 = 5;
    }
    (*(void (**)(void))&(*v14)[v15])();
LABEL_10:
    v10 = v12;
    v7 = v22;
    v16 = v23;
  }
  while (0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 4) > v12++);
  v3 = v20;
LABEL_13:
  v21 = vcvtq_f64_f32(vcvt_f32_f64(v3));
  Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>((Phase::Logger *)&v25, (uint64_t)&v21, v7, v16);
  v18 = Phase::Envelope<double>::operator()((double **)&v25, a2);
  *(_QWORD *)&v21.f64[0] = &v25;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  v25 = &v22;
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  return v18;
}

void sub_2164D79F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

Phase::Logger **Phase::ActionTreeManager::UpdateGeoQueries(Phase::Logger **result, UniqueObjectId *a2)
{
  unint64_t v2;
  Phase::Logger **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Phase::Geometry::System *v9;
  double v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v2 = a2[1].mStorage[1];
  if (*(_DWORD *)(v2 + 24))
  {
    v4 = result;
    v5 = 0;
    do
    {
      if (*(_DWORD *)(v2 + 96))
      {
        v6 = 0;
        v7 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * v5);
        do
        {
          v8 = a2[5].mStorage[0];
          if (*(_QWORD *)(*(_QWORD *)(v2 + 104) + 5944 * v6) == v7 && !*(_BYTE *)(v8 + 96 * v6 + 80))
          {
            v9 = (Phase::Geometry::System *)Phase::Controller::TaskManager::GetService<Phase::Geometry::System>(v4[28], 2);
            if (!v9)
              std::terminate();
            Phase::Geometry::System::GetCurrentState(v9, &v14);
            v10 = Phase::DistanceBetweenListenerAndSource<double>(v14, *(_QWORD *)(a2[5].mStorage[0] + 96 * v6 + 32), *(_QWORD *)(a2[5].mStorage[0] + 96 * v6 + 24));
            v11 = v15;
            if (v15)
            {
              p_shared_owners = (unint64_t *)&v15->__shared_owners_;
              do
                v13 = __ldaxr(p_shared_owners);
              while (__stlxr(v13 - 1, p_shared_owners));
              if (!v13)
              {
                ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                std::__shared_weak_count::__release_weak(v11);
              }
            }
            result = (Phase::Logger **)Phase::ActionTreeManager::ReceiveGeoQueryResult((Phase::ActionTreeManager *)v4, *a2, v10, v6, 0);
            v2 = a2[1].mStorage[1];
          }
          else
          {
            *(_BYTE *)(v8 + 96 * v6 + 80) = 0;
          }
          ++v6;
        }
        while (v6 < *(unsigned int *)(v2 + 96));
      }
      ++v5;
    }
    while (v5 < *(unsigned int *)(v2 + 24));
  }
  return result;
}

void sub_2164D7B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Geometry::System>(Phase::Logger *a1, int a2)
{
  uint64_t v3;
  Phase::Logger *v4;
  uint64_t (**v5)(uint64_t, _QWORD, _QWORD, _QWORD, void *);
  NSObject *v7;
  std::logic_error *exception;
  NSObject *v9;
  std::string *v10;
  std::logic_error *v11;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 7) - v3) >> 5))
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 112;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(_QWORD *)v4)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 121;
      v17 = 1024;
      v18 = a2;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  v5 = std::any_cast[abi:ne180100]<Phase::Geometry::System * const>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v4);
  if (!v5)
    std::__throw_bad_any_cast[abi:ne180100]();
  return (uint64_t)*v5;
}

void sub_2164D7DC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2164D7EB0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2164D7ED0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *Phase::ActionTreeManager::ReceiveGeoQueryResult(Phase::ActionTreeManager *this, UniqueObjectId a2, double a3, unsigned int a4, int a5)
{
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  double *v14;
  UniqueObjectId v15;

  v15 = a2;
  result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)this + 5, &v15);
  if (result)
  {
    v9 = result[4];
    if (v9)
    {
      v11 = v9 + 80;
      v10 = *(_QWORD *)(v9 + 80);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v11 + 8) - v10) >> 5) > a4)
      {
        v12 = v10 + 96 * a4;
        v13 = (_BYTE *)(v12 + 80);
        v14 = (double *)(v12 + 88);
        if (a3 < 0.0 || a5)
        {
          *v13 = 3;
          *v14 = 0.0;
        }
        else
        {
          *v13 = 2;
          *v14 = a3;
        }
      }
    }
  }
  return result;
}

double Phase::DistanceBetweenListenerAndSource<double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  float32x2_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  NSObject *v18;
  BOOL v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  float64x2_t v28;
  double v29;
  _BYTE buf[32];
  float64x2_t v31;
  float64x2_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v3 = *(_DWORD *)(a1 + 136);
    v4 = -1.0;
    if (v3 <= a2)
      return v4;
    v5 = *(_QWORD *)(a1 + 120);
    if (*(_DWORD *)(v5 + 24 * a2 + 20) != HIDWORD(a2))
      return v4;
    v6 = *(_QWORD *)(v5 + 24 * a2);
    if (!v6)
      return v4;
    if (*(_DWORD *)v6 != 2 || v3 <= a3)
      return v4;
    if (*(_DWORD *)(v5 + 24 * a3 + 20) != HIDWORD(a3))
      return v4;
    v9 = *(float32x2_t **)(v5 + 24 * a3);
    if (!v9 || v9->i32[0] != 3)
      return v4;
    v10 = (_QWORD *)v9[15];
    v11 = (_QWORD *)v9[16];
    if (v10 == v11)
    {
      v13 = 0;
    }
    else if (*(_DWORD *)(a1 + 112) <= *v10
           || (v12 = *(_QWORD *)(a1 + 96), *(_DWORD *)(v12 + 24 * *v10 + 20) != HIDWORD(*v10))
           || (v13 = *(_QWORD *)(v12 + 24 * *v10)) == 0)
    {
      v14 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 384));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "GeometryUtility.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 75;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = a3;
        v15 = "%25s:%-5d DistanceBetweenListenerAndSource(): inSourceEntityHandle 0x%llx is volumetric but doesn't have a"
              "ny valid shapes!\n";
        v16 = v14;
        v17 = 28;
LABEL_21:
        _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
        return v4;
      }
      return v4;
    }
    v20 = v10 == v11;
    v21 = vcvtq_f64_f32(v9[7]);
    *(float64x2_t *)buf = vcvtq_f64_f32(v9[6]);
    *(float64x2_t *)&buf[16] = v21;
    v22 = vcvtq_f64_f32(v9[9]);
    v31 = vcvtq_f64_f32(v9[8]);
    v32 = v22;
    v26 = vcvtq_f64_f32(*(float32x2_t *)(v6 + 64));
    v27 = *(float *)(v6 + 72);
    Phase::TransformPositionByInverse<double>((uint64_t)buf, &v26, v28.f64);
    v23 = v28;
    v24 = v29;
    if (!v20)
    {
      v24 = fmin(fmax(v29, *(float *)(v13 + 32)), *(float *)(v13 + 44)) - v29;
      v23 = vsubq_f64(vminnmq_f64(vmaxnmq_f64(v28, vcvtq_f64_f32(*(float32x2_t *)(v13 + 24))), vcvtq_f64_f32(*(float32x2_t *)(v13 + 36))), v28);
    }
    v25 = vmulq_f64(v23, v23);
    return fmax(sqrt(vaddq_f64(v25, (float64x2_t)vdupq_laneq_s64((int64x2_t)v25, 1)).f64[0] + v24 * v24)- *(double *)(v6 + 152) / v32.f64[1], 0.0);
  }
  v18 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
  v4 = -1.0;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "GeometryUtility.hpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 41;
    v15 = "%25s:%-5d DistanceBetweenListenerAndSource(): pInSystemState is null!\n";
    v16 = v18;
    v17 = 18;
    goto LABEL_21;
  }
  return v4;
}

uint64_t Phase::ActionTreeManager::WriteLeafNodeUpdateParameters(Phase::Logger **a1, Phase::ActionTreeObject *a2, int a3, uint64_t a4, Phase::ActionTreeGatheredParams *a5, _QWORD *a6, double a7)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  Phase::Logger *v17;
  double *v18;
  double v19;
  double v20;
  Phase::Logger *v21;
  double *v22;
  Phase::Logger *v23;
  double *v24;
  double v25;
  uint64_t result;
  double v27;
  double v28;
  __int128 __src;
  double v30;
  double v31;
  double v32;
  double v33;

  v13 = *((_QWORD *)a2 + 7);
  v14 = v13 + 136 * a3;
  v16 = *(_QWORD *)(v14 + 72);
  v15 = (_QWORD *)(v14 + 72);
  v28 = Phase::Controller::GroupManager::GetGain(a1[29], v16) * a7;
  v17 = a1[29];
  *(_QWORD *)&__src = *v15;
  v18 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((_QWORD *)v17 + 5, (unint64_t *)&__src);
  v19 = 1.0;
  v20 = 1.0;
  if (v18)
    v20 = v18[28] * v18[55];
  v27 = v20 * *(double *)(a4 + 24);
  v21 = a1[29];
  *(_QWORD *)&__src = *v15;
  v22 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((_QWORD *)v21 + 5, (unint64_t *)&__src);
  if (v22)
    v19 = v22[16] * v22[49] * v22[31];
  v23 = a1[29];
  *(_QWORD *)&__src = *v15;
  v24 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((_QWORD *)v23 + 5, (unint64_t *)&__src);
  if (v24)
    v25 = v24[22] * v24[43] * v24[30];
  else
    v25 = 1.0;
  result = Phase::ActionTreeManager::ScaleFloatParam(a1, *(char *)(a4 + 41), &v27, a5, a2);
  if ((_DWORD)result)
  {
    result = Phase::ActionTreeManager::ScaleFloatParam(a1, *(char *)(a4 + 40), &v28, a5, a2);
    if ((_DWORD)result)
    {
      __src = *(_OWORD *)(v13 + 136 * a3 + 8);
      v30 = v28;
      v31 = v25;
      v32 = v19;
      v33 = v27;
      Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a6, 0xAu, &__src, 0x30uLL);
      return 1;
    }
  }
  return result;
}

uint64_t Phase::ActionTreeManager::ScaleFloatParam(Phase::Logger **this, int a2, double *a3, Phase::ActionTreeGatheredParams *a4, Phase::ActionTreeObject *a5)
{
  uint64_t v6;
  int v8;

  if (a2 == -1)
    return 1;
  if (a2 < 0 || (v6 = *((_QWORD *)a4 + 1), a2 >= (unint64_t)((*((_QWORD *)a4 + 2) - v6) >> 3)))
  {
    v8 = 0;
  }
  else
  {
    if (*(_DWORD *)(*((_QWORD *)a4 + 4) + 4 * a2) == 1)
    {
      *a3 = *(double *)(v6 + 8 * a2) * *a3;
      return 1;
    }
    v8 = 1;
  }
  Phase::ActionTreeManager::HandleParamError(this[28], v8, (uint64_t)a5, a2);
  return 0;
}

BOOL Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(_QWORD *a1, unsigned int a2, void *__src, size_t __n)
{
  unsigned int v4;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Phase::Logger *v14;
  __int128 v15;
  unint64_t v16;
  NSObject *v17;
  _BOOL8 result;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  NSObject *v22;
  uint32_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  _BYTE buf[38];
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v4 = __n;
  v34 = *MEMORY[0x24BDAC8D0];
  v8 = __n;
  v9 = __n + 8;
  v11 = *a1;
  v10 = a1[1];
  v12 = v10 + v9;
  if (*a1 && v12 <= a1[2])
    goto LABEL_8;
  v13 = a1[7];
  if (v13)
  {
    memset(buf, 0, 32);
    v28 = v10 + v9;
    v14 = (Phase::Logger *)(*(uint64_t (**)(uint64_t, _QWORD *, _BYTE *, uint64_t *))(*(_QWORD *)v13 + 48))(v13, a1, buf, &v28);
    v15 = *(_OWORD *)&buf[16];
    *(_OWORD *)a1 = *(_OWORD *)buf;
    *((_OWORD *)a1 + 1) = v15;
    v11 = *a1;
    v10 = a1[1];
    v16 = v10 + v9;
    if (!*a1 || v16 > a1[2])
    {
      v17 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v14) + 848));
      result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      v19 = *a1;
      v20 = a1[2];
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "MessagePipe.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 284;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v19;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v20;
      v30 = 2048;
      v31 = v16;
      v32 = 2048;
      v33 = a2;
      v21 = "%25s:%-5d write buffer left in invalid state with pointer %p and %lu max bytes compared to required %lu byte"
            "s for message type %llu";
      v22 = v17;
      v23 = 58;
      goto LABEL_11;
    }
LABEL_8:
    v24 = (unsigned int *)(v11 + v10);
    *v24 = a2;
    v24[1] = v4;
    v25 = *a1;
    v26 = a1[1] + 8;
    a1[1] = v26;
    memcpy((void *)(v25 + v26), __src, v8);
    a1[1] += v8;
    return 1;
  }
  v27 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 848));
  result = os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
  if (!result)
    return result;
  *(_DWORD *)buf = 136315906;
  *(_QWORD *)&buf[4] = "MessagePipe.hpp";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = 270;
  *(_WORD *)&buf[18] = 2048;
  *(_QWORD *)&buf[20] = a2;
  *(_WORD *)&buf[28] = 2048;
  *(_QWORD *)&buf[30] = v12;
  v21 = "%25s:%-5d failed to acquire write buffer for message type %llu of size %lu";
  v22 = v27;
  v23 = 38;
LABEL_11:
  _os_log_impl(&dword_2164CC000, v22, OS_LOG_TYPE_ERROR, v21, buf, v23);
  return 0;
}

uint64_t Phase::ActionTreeObject::FindSubmixIdFromHashName(Phase::ActionTreeObject *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 3);
  v3 = *(unsigned int *)(v2 + 96);
  if (!(_DWORD)v3)
    return 0;
  v4 = 0;
  v5 = *(_QWORD **)(v2 + 104);
  v6 = 96 * v3;
  while (*v5 != a2)
  {
    v5 += 743;
    v4 += 96;
    if (v6 == v4)
      return 0;
  }
  return *(_QWORD *)(*((_QWORD *)this + 10) + v4 + 8);
}

void Phase::ActionTreeManager::SubmitGeneratorSeekCompletedResult(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v4;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;

  v4 = *(_QWORD **)(a1 + 56);
  if (v4)
  {
    v8 = (char)(0x20302u >> (8 * a4));
    do
    {
      v9 = v4[4];
      if (*(_BYTE *)(v9 + 144))
      {
        v11 = *(_QWORD *)(v9 + 56);
        v10 = *(_QWORD *)(v9 + 64);
        if (v10 != v11)
        {
          v12 = 0;
          v13 = 1;
          do
          {
            v14 = v11 + 136 * v12;
            if (*(_QWORD *)(v14 + 8) == a2)
            {
              v15 = *(_QWORD *)(v14 + 16) != a3 || a4 > 2;
              if (!v15)
              {
                Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeSeekState(v14, v8);
                v11 = *(_QWORD *)(v9 + 56);
                v10 = *(_QWORD *)(v9 + 64);
              }
            }
            v12 = v13;
            v15 = 0xF0F0F0F0F0F0F0F1 * ((v10 - v11) >> 3) > v13++;
          }
          while (v15);
        }
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
}

void ___ZN5Phase17ActionTreeManager18ProcessSamplerNodeEPKNS_10SamplerMsgEPNS_10ParamStackEiPNS_16ActionTreeObjectERNS_24ActionTreeGatheredParamsERNS_17MessagePipeWriterINS_23ActionTreeServerCommandEEE_block_invoke(uint64_t a1)
{
  Phase::ActionTreeObject::LeafNodeInfo::HandleStreamRendererFinishedCallback(*(Phase::ActionTreeObject::LeafNodeInfo **)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c203_ZTSKZN5Phase17ActionTreeManager18ProcessSamplerNodeEPKNS_10SamplerMsgEPNS_10ParamStackEiPNS_16ActionTreeObjectERNS_24ActionTreeGatheredParamsERNS_17MessagePipeWriterINS_23ActionTreeServerCommandEEEE3__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t Phase::ActionTreeManager::StartPreparedVoice(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  Phase::Controller::StreamRenderer *v5;
  Phase::Logger *v6;
  NSObject *v8;
  id v9;
  uint64_t v10;
  __int128 v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v11 = *(_OWORD *)(a2 + 8);
  Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 0xBu, &v11, 0x10uLL);
  Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(a2, 4u);
  v5 = *(Phase::Controller::StreamRenderer **)(a2 + 32);
  if (!v5)
    return 1;
  v6 = (Phase::Logger *)Phase::Controller::StreamRenderer::Start(v5);
  if ((v6 & 1) != 0)
    return 1;
  v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v6)
                                                                                     + 688)));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(*(id *)(a1 + 16), "identifier");
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v10 = objc_msgSend(v9, "UTF8String");
    *(_DWORD *)buf = 136315650;
    v13 = "ActionTreeManager.mm";
    v14 = 1024;
    v15 = 4017;
    v16 = 2080;
    v17 = v10;
    _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to start stream renderer for sound event node %s", buf, 0x1Cu);

  }
  return 0;
}

void sub_2164D8978(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id Phase::UniqueObjectId::CreateNSUUID(Phase::UniqueObjectId *this)
{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", this);
}

uint64_t Phase::ActionTreeManager::ConfigureStreamNode(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v7;
  void *v8;
  void *v9;
  Phase::ChannelLayout *v10;
  const AudioChannelLayout *v11;
  unsigned __int8 v12;
  Phase::Logger *v13;
  void *v14;
  id v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  NSObject *v20;
  void *v21;
  id v22;
  double v23;
  Phase::Logger *v24;
  uint64_t v25;
  Phase::Logger *v26;
  double v27;
  unsigned int v28;
  uint64_t v29;
  Phase::Controller::StreamRenderer *v30;
  Phase::Logger *v31;
  NSObject *v32;
  id v33;
  Phase::Logger *v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  id v39;
  void *v40;
  _BOOL4 v41;
  void *v42;
  Phase::Controller::StreamRenderer *v43;
  Phase::Logger *v44;
  uint64_t v45;
  void *v46;
  double v47;
  Phase::Logger *v48;
  NSObject *v49;
  NSObject *v50;
  id v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  __int128 v61;
  char v62;
  _BYTE buf[18];
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  v62 = a4;
  objc_msgSend(v7, "format");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "channelLayout");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (Phase::ChannelLayout *)objc_msgSend(v9, "layout");
  v12 = Phase::ChannelLayout::IsLayoutSupported(v10, v11);

  if ((v12 & 1) == 0)
  {
    v20 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v13)
                                                                                        + 688)));
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v8, "channelLayout");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4108;
      v64 = 1024;
      LODWORD(v65) = objc_msgSend(v21, "layoutTag");
      _os_log_impl(&dword_2164CC000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal Action tree data error: push stream data has invalid audio format, layoutTag = 0x%x", buf, 0x18u);

    }
    goto LABEL_24;
  }
  objc_msgSend(v8, "channelLayout");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    v15 = objc_alloc(MEMORY[0x24BDB1818]);
    objc_msgSend(v7, "engine");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "sampleRate");
    v18 = v17;
    objc_msgSend(v8, "channelLayout");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v15, "initWithCommonFormat:sampleRate:interleaved:channelLayout:", 1, 0, v19, v18);

  }
  else
  {
    v22 = objc_alloc(MEMORY[0x24BDB1818]);
    objc_msgSend(v7, "engine");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "sampleRate");
    v20 = objc_msgSend(v22, "initWithCommonFormat:sampleRate:channels:interleaved:", 1, objc_msgSend(v8, "channelCount"), 0, v23);
  }

  if (!v20)
  {
    v32 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v24)
                                                                                        + 688)));
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v7, "description");
      v33 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4133;
      v64 = 2080;
      v65 = objc_msgSend(v33, "UTF8String");
      _os_log_impl(&dword_2164CC000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d [AVAudioFormat initWithCommonFormat] failed on node '%s'", buf, 0x1Cu);

    }
    v20 = 0;
    goto LABEL_24;
  }
  MEMORY[0x2199FA6B8](buf);
  v61 = *(_OWORD *)buf;
  *(_QWORD *)buf = 1;
  if (!Phase::ActionTreeObject::LeafNodeInfo::Configure(a2, &v61, &v62, buf, (_QWORD *)(a1 + 264), (_OWORD *)(a2 + 120)))
  {
    Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(*(Phase::Logger **)(a1 + 224), 1);
    v34 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    v35 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v34)
                                                                                        + 688)));
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v36 = -[Phase::Logger getString:](v34, "getString:", objc_msgSend(v7, "nodeUID"));
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4144;
      v64 = 2080;
      v65 = v36;
      _os_log_impl(&dword_2164CC000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal Action tree data error: could not configure push stream leaf node %s", buf, 0x1Cu);
    }

    goto LABEL_24;
  }
  if (!*(_BYTE *)a2)
    std::terminate();
  if (objc_msgSend(v7, "normalize"))
    v25 = 0;
  else
    v25 = 2;
  v26 = (Phase::Logger *)-[NSObject sampleRate](v20, "sampleRate");
  *(float *)&v27 = v27;
  v28 = vcvtps_u32_f32((float)(*(float *)&v27 * 80.0) / 1000.0);
  if (v28 <= 0x4000)
    v28 = 0x4000;
  v29 = (v28 + 1) & 0xFFFFFFFE;
  if (a4 == 4)
  {
    v39 = v7;
    objc_msgSend(v39, "renderBlock");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = v40 == 0;

    if (v41)
    {
      Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(*(Phase::Logger **)(a1 + 224), 1);
      v44 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
      v55 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v44)
                                                                                          + 688)));
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        v56 = -[Phase::Logger getString:](v44, "getString:", objc_msgSend(v39, "nodeUID"));
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4174;
        v64 = 2080;
        v65 = v56;
        _os_log_impl(&dword_2164CC000, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing renderblock on pullstream node %s.  Set it before preparing or starting the sound event", buf, 0x1Cu);
      }
      goto LABEL_40;
    }
    v62 = 4;
    objc_msgSend(v39, "renderBlock");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = (Phase::Controller::StreamRenderer *)operator new();
    buf[0] = 0;
    BYTE4(v65) = 0;
    Phase::Controller::StreamRenderer::StreamRenderer(v43, v8, v20, 0, v29, v25, v42, buf);
    std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100]((Phase::Controller::StreamRenderer **)(a2 + 32), v43);

  }
  else
  {
    if (a4 != 3)
    {
      v49 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v26) + 688));
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4190;
        v64 = 1024;
        LODWORD(v65) = a4;
        _os_log_impl(&dword_2164CC000, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid stream node type: %d", buf, 0x18u);
      }
      goto LABEL_24;
    }
    v30 = (Phase::Controller::StreamRenderer *)operator new();
    Phase::Controller::StreamRenderer::StreamRenderer((uint64_t)v30, v8, v20, v29, v25);
    v31 = std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100]((Phase::Controller::StreamRenderer **)(a2 + 32), v30);
  }
  if (!*(_QWORD *)(*(_QWORD *)(a2 + 32) + 48))
  {
    v50 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v31)
                                                                                        + 688)));
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v8, "description");
      v51 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v52 = objc_msgSend(v51, "UTF8String");
      -[NSObject description](v20, "description");
      v53 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v54 = objc_msgSend(v53, "UTF8String");
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4200;
      v64 = 2080;
      v65 = v52;
      v66 = 2080;
      v67 = v54;
      v68 = 1024;
      v69 = v29;
      _os_log_impl(&dword_2164CC000, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to create Stream Renderer with input format '%s', output format '%s' and maximum frame count '%d' for push stream", buf, 0x2Cu);

    }
    goto LABEL_24;
  }
  if (!objc_msgSend(v7, "normalize"))
  {
LABEL_32:
    v37 = 1;
    goto LABEL_25;
  }
  objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.audio.PHASE"));
  v39 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "URLForResource:withExtension:subdirectory:", CFSTR("MPEGDefault12LKFSStandardV2"), CFSTR("aupreset"), CFSTR("AUPresets/AULoudnessNormalizer"));
  v44 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
  v45 = *(_QWORD *)(a2 + 32);
  objc_msgSend(v7, "targetLKFS");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "doubleValue");
  LOBYTE(v45) = Phase::Controller::StreamRenderer::SetPreset(v45, 0, v44, v47);

  if ((v45 & 1) != 0)
  {

    goto LABEL_32;
  }
  v55 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v48)
                                                                                      + 688)));
  if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
  {
    -[Phase::Logger description](v44, "description");
    v57 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v58 = objc_msgSend(v57, "UTF8String");
    objc_msgSend(v7, "description");
    v59 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v60 = objc_msgSend(v59, "UTF8String");
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4217;
    v64 = 2080;
    v65 = v58;
    v66 = 2080;
    v67 = v60;
    _os_log_impl(&dword_2164CC000, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to load preset '%s' for node '%s'!", buf, 0x26u);

  }
LABEL_40:

LABEL_24:
  v37 = 0;
LABEL_25:

  return v37;
}

void sub_2164D9234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

uint64_t Phase::ActionTreeManager::SetFloatParam(Phase::Logger **this, int a2, double *a3, Phase::ActionTreeGatheredParams *a4, Phase::ActionTreeObject *a5)
{
  uint64_t v6;
  int v8;

  if (a2 < 0 || (v6 = *((_QWORD *)a4 + 1), a2 >= (unint64_t)((*((_QWORD *)a4 + 2) - v6) >> 3)))
  {
    v8 = 0;
  }
  else
  {
    if (*(_DWORD *)(*((_QWORD *)a4 + 4) + 4 * a2) == 1)
    {
      *a3 = *(double *)(v6 + 8 * a2);
      return 1;
    }
    v8 = 1;
  }
  Phase::ActionTreeManager::HandleParamError(this[28], v8, (uint64_t)a5, a2);
  return 0;
}

uint64_t Phase::ActionTreeManager::ProcessNodes(_QWORD *a1, uint64_t a2, Phase::ActionTreeGatheredParams *a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v7;
  Phase::ActionTreeObject *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  float *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  id WeakRetained;
  void *v38;
  void *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  NSObject *v58;
  const char *v59;
  int v60;
  uint64_t v61;
  unsigned __int8 *v62;
  int v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  int v74;
  _OWORD *v75;
  BOOL v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  int v81;
  _DWORD *v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  NSObject *v96;
  NSObject *v97;
  NSObject *v98;
  uint32_t v99;
  int8x8_t v100;
  unint64_t v101;
  uint8x8_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double *v108;
  _BOOL8 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  Phase::Logger *v114;
  Phase::Logger *v115;
  Phase::Logger *v116;
  os_signpost_id_t *v117;
  NSObject *v118;
  NSObject *v119;
  os_signpost_id_t v120;
  int v121;
  uint64_t v122;
  uint64_t *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  Phase::Logger *v127;
  uint64_t *v128;
  uint64_t *v129;
  Phase::Logger *InstancePtr;
  NSObject *v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  _BOOL8 v135;
  uint64_t v136;
  uint64_t SubmixIdFromHashName;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  void *v143;
  uint64_t v144;
  void *v145;
  void *v146;
  int v147;
  float v148;
  double v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t *v154;
  unint64_t v155;
  int v156;
  int v157;
  int v158;
  double v159;
  _DWORD *v160;
  unint64_t v161;
  double v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _DWORD *v167;
  _DWORD *v168;
  uint64_t v169;
  _DWORD *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  Phase::ActionTreeObject *v174;
  unint64_t v175;
  unint64_t v176;
  uint8x8_t v177;
  int v178;
  int v179;
  Phase::Logger *v180;
  NSObject *v181;
  uint64_t v182;
  id v183;
  double v184;
  unsigned int v185;
  Phase::Controller::StreamRenderer *v186;
  Phase::Logger *v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  unsigned int v191;
  Phase::Logger *v192;
  NSObject *v193;
  uint64_t v194;
  int v195;
  int v196;
  int v197;
  unint64_t v198;
  unint64_t v199;
  int v200;
  int v201;
  int v202;
  double *v203;
  uint64_t v204;
  int v205;
  Phase::Logger *v206;
  NSObject *v207;
  NSObject *v208;
  os_signpost_id_t v209;
  NSObject *v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t i;
  unint64_t v214;
  float v215;
  float v216;
  _BOOL8 v217;
  unint64_t v218;
  unint64_t v219;
  size_t v220;
  NSObject *v221;
  Phase::Controller::StreamRenderer *v222;
  _BOOL8 v223;
  uint64_t v224;
  void *v225;
  void *v226;
  void *v227;
  uint64_t v228;
  Phase::Logger *v229;
  Phase::Logger *v230;
  uint64_t *v231;
  NSObject *v232;
  NSObject *v233;
  os_signpost_id_t v234;
  int v235;
  Phase::Logger *v236;
  Phase::Logger *v237;
  NSObject *v238;
  NSObject *v239;
  os_signpost_id_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  NSObject *v246;
  NSObject *v247;
  os_signpost_id_t v248;
  uint64_t v249;
  uint64_t *v250;
  unint64_t v251;
  id v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  Phase::Logger *v256;
  NSObject *v257;
  NSObject *v258;
  os_signpost_id_t v259;
  int v260;
  Phase::Logger *v261;
  Phase::Logger *v262;
  NSObject *v263;
  NSObject *v264;
  os_signpost_id_t v265;
  uint64_t *v266;
  void **v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  BOOL v273;
  unint64_t v274;
  uint64_t *v275;
  void *v276;
  uint64_t *v277;
  uint64_t v278;
  void *v279;
  Phase::Logger *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  Phase::Logger *v285;
  NSObject *v286;
  NSObject *v287;
  os_signpost_id_t v288;
  int v289;
  Phase::Logger *started;
  Phase::Logger *v291;
  NSObject *v292;
  NSObject *v293;
  os_signpost_id_t v294;
  uint64_t v295;
  unint64_t v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  void *v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char *v305;
  uint64_t j;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  unint64_t v311;
  char *v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  BOOL v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t *v326;
  int64_t v327;
  uint64_t *v328;
  uint64_t v329;
  uint64_t v330;
  Phase::Logger *v331;
  id v332;
  uint64_t v333;
  uint64_t v334;
  Phase::Controller::StreamRenderer **v335;
  uint64_t v336;
  NSObject *v337;
  void *v338;
  int v339;
  double v340;
  Phase::Logger *v341;
  Phase::Controller::StreamRenderer *v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  _QWORD *v351;
  unint64_t v352;
  NSObject *v353;
  int v354;
  void *v355;
  uint64_t v356;
  unint64_t v357;
  char *v358;
  uint64_t v359;
  void *v360;
  Phase::Controller::StreamRenderer *v361;
  Phase::Logger *v362;
  NSObject *v363;
  NSObject *v364;
  const char *v365;
  uint32_t v366;
  NSObject *v367;
  void *v368;
  unint64_t v369;
  uint64_t v370;
  void **v371;
  void **v372;
  uint64_t v373;
  uint64_t v374;
  void **v375;
  void *v376;
  _QWORD *v377;
  char *v378;
  char *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  int64_t v386;
  unint64_t v387;
  uint64_t v388;
  char *v389;
  uint64_t *v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  _QWORD *v395;
  NSObject *v396;
  void *v397;
  const char *v398;
  Phase::Logger *v399;
  NSObject *v400;
  uint64_t v401;
  int v402;
  NSObject *v403;
  NSObject *v404;
  NSObject *v405;
  NSObject *v406;
  uint64_t v407;
  uint32_t v408;
  NSObject *v409;
  uint64_t v410;
  NSObject *v411;
  uint64_t v412;
  const char *v413;
  uint64_t v414;
  NSObject *v415;
  uint64_t v416;
  const char *v417;
  NSObject *v418;
  uint32_t v419;
  NSObject *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  void *v428;
  uint64_t *v429;
  void *v430;
  Phase::Controller::StreamRenderer **v431;
  void *v432;
  void *v433;
  void *v434;
  uint64_t *v435;
  void *v436;
  id *location;
  uint64_t v438;
  uint64_t *v439;
  _QWORD *v440;
  void *v441;
  _QWORD *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t *v445;
  uint64_t v446;
  void *v447;
  int v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  Phase::Logger *v452;
  Phase::ActionTreeManager *v454;
  int v457;
  float *v458;
  unint64_t v459;
  uint64_t v460;
  __int128 v461;
  void (*v462)(uint64_t);
  void *v463;
  unsigned __int8 *v464;
  __int128 v465;
  double v466;
  double v467;
  double v468;
  double v469;
  double v470;
  double v471;
  double v472;
  Phase::Logger *v473;
  _BYTE v474[4];
  int v475;
  uint64_t v476;
  _BYTE __src[38];
  __int16 v478;
  unsigned int v479;
  _BYTE buf[38];
  unint64_t v481;
  char v482;
  uint64_t v483;
  uint64_t v484;
  _OWORD v485[2];
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  _QWORD v489[8];

  v489[5] = *MEMORY[0x24BDAC8D0];
  result = 1;
  v474[0] = 1;
  v476 = 0;
  v475 = 1065353216;
  v7 = *(_QWORD *)(a2 + 24);
  v459 = *(unsigned int *)(v7 + 80);
  if (!(_DWORD)v459)
    return result;
  v8 = (Phase::ActionTreeObject *)a2;
  v454 = (Phase::ActionTreeManager *)a1;
  v9 = 0;
  v457 = 0;
  v10 = 0;
  v460 = *(_QWORD *)(v7 + 88);
  v445 = (uint64_t *)(a2 + 104);
  v438 = (uint64_t)(a1 + 10);
  location = (id *)(a2 + 296);
  v439 = (uint64_t *)(a2 + 120);
  v440 = a1 + 33;
  v458 = (float *)v474;
  while (2)
  {
    v11 = v460 + v10;
    v12 = *(_DWORD *)(v460 + v10);
    v10 += 8;
    switch(v12)
    {
      case 0:
        if (*(_DWORD *)(*((_QWORD *)v8 + 3) + 40) <= v9)
        {
          v403 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result)
                                                            + 688));
          if (os_log_type_enabled(v403, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1477;
            v398 = "%25s:%-5d Fatal Sound Event data error: Encountered more leafnodes than is allowed";
            goto LABEL_614;
          }
          return 0;
        }
        v442 = (_QWORD *)(v460 + v10);
        v4 = (int)v9;
        v60 = v9;
        v61 = *((_QWORD *)v8 + 7);
        v448 = v60;
        v62 = (unsigned __int8 *)(v61 + 136 * v60);
        v63 = v62[24];
        if (*(_BYTE *)v458)
        {
          switch(v62[24])
          {
            case 1u:
              goto LABEL_160;
            case 4u:
              result = Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v454, v8, v448, (uint64_t)(v442 + 2), a3, a4, v458[1]);
              v8 = (Phase::ActionTreeObject *)a2;
              if ((result & 1) == 0)
                return 0;
              goto LABEL_443;
            case 5u:
              goto LABEL_310;
            case 6u:
              *(_OWORD *)buf = *(_OWORD *)(v61 + 136 * (int)v4 + 8);
              result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 3u, buf, 0x18uLL);
              goto LABEL_442;
            case 7u:
            case 8u:
              if ((unint64_t)(v442[8] - 1) <= 2)
              {
                if (!Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v454, v8, v448, (uint64_t)(v442 + 2), a3, a4, v458[1]))return 0;
LABEL_46:
                *(_OWORD *)buf = *(_OWORD *)(v61 + 136 * (int)v4 + 8);
                Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 2u, buf, 0x10uLL);
                Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v62, 4u);
LABEL_442:
                v8 = (Phase::ActionTreeObject *)a2;
                goto LABEL_443;
              }
LABEL_160:
              Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(*((Phase::Logger **)v454 + 28), 1);
              v433 = (void *)objc_claimAutoreleasedReturnValue();
              v124 = (_QWORD *)objc_msgSend(v433, "getSoundAssetInfo:", v442[1]);
              if (!v124)
              {
                v409 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 688));
                if (os_log_type_enabled(v409, OS_LOG_TYPE_ERROR))
                {
                  v410 = v442[1];
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1521;
                  *(_WORD *)&buf[18] = 2048;
                  *(_QWORD *)&buf[20] = v410;
                  _os_log_impl(&dword_2164CC000, v409, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal Sound Event data error: did not find asset info for assetId %llu", buf, 0x1Cu);
                }
                goto LABEL_603;
              }
              v125 = v61 + 136 * (int)v4;
              *(_QWORD *)(v125 + 8) = 0;
              v435 = (uint64_t *)(v125 + 8);
              *(_QWORD *)(v125 + 16) = 0;
              Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v62, 1u);
              Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeSeekState((uint64_t)v62, 0);
              v126 = v61 + 136 * (int)v4;
              v431 = (Phase::Controller::StreamRenderer **)(v126 + 32);
              v127 = std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100]((Phase::Controller::StreamRenderer **)(v126 + 32), 0);
              *(_QWORD *)(v126 + 48) = 0;
              v128 = (uint64_t *)(v126 + 48);
              *((_BYTE *)v128 - 8) = 0;
              v129 = v128 - 1;
              v128[5] = 0;
              v429 = v128 + 5;
              v128[3] = 0;
              *((_DWORD *)v128 + 8) = 0;
              *v62 = 0;
              v128[1] = 0;
              *((_BYTE *)v128 + 16) = 0;
              InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(v127);
              if (*((_BYTE *)InstancePtr + 1553))
              {
                v131 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 688));
                if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
                {
                  v132 = *(_QWORD *)(v61 + 136 * (int)v4 + 120);
                  v133 = *v435;
                  *(_DWORD *)buf = 136315906;
                  *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 644;
                  *(_WORD *)&buf[18] = 2048;
                  *(_QWORD *)&buf[20] = v132;
                  *(_WORD *)&buf[28] = 2048;
                  *(_QWORD *)&buf[30] = v133;
                  _os_log_impl(&dword_2164CC000, v131, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, generator: %llu) - reset", buf, 0x26u);
                }
              }
              MEMORY[0x2199FA6B8](buf);
              v465 = *(_OWORD *)buf;
              if (v124[1])
                v134 = 2;
              else
                v134 = 1;
              LOBYTE(v473) = v134;
              v135 = Phase::ActionTreeObject::LeafNodeInfo::Configure((uint64_t)v62, &v465, &v473, v442 + 9, v440, (_OWORD *)a2);
              if (v135)
              {
                if (!*v62)
                  goto LABEL_629;
                v136 = v442[2];
                *(_QWORD *)(v61 + 136 * (int)v4 + 56) = v442[1];
                v427 = v442 + 2;
                v128[3] = v442[6];
                SubmixIdFromHashName = Phase::ActionTreeObject::FindSubmixIdFromHashName((Phase::ActionTreeObject *)a2, v136);
                if (SubmixIdFromHashName | v138)
                {
                  *(_DWORD *)&buf[32] = 6553601;
                  v481 = 0xC028000000000000;
                  v482 = 0;
                  v483 = 0;
                  v484 = 0;
                  v487 = 0;
                  v488 = 0x3FF0000000000000;
                  memset(v489, 0, 40);
                  v139 = v124[1];
                  v425 = v138;
                  v426 = SubmixIdFromHashName;
                  if (v139 != 1)
                  {
                    if (!v139)
                    {
                      *(_BYTE *)(v61 + 136 * (int)v4 + 64) = 1;
                      v140 = (*(uint64_t (**)(_QWORD *))(*v124 + 16))(v124);
                      v141 = v140;
                      if (!v140)
                        goto LABEL_629;
                      v142 = *(id *)(v140 + 48);
                      v482 = 0;
                      objc_msgSend(v142, "format");
                      v143 = (void *)objc_claimAutoreleasedReturnValue();
                      v144 = objc_msgSend(v143, "streamDescription");
                      v485[0] = *(_OWORD *)v144;
                      v485[1] = *(_OWORD *)(v144 + 16);
                      v486 = *(_QWORD *)(v144 + 32);

                      objc_msgSend(v142, "format");
                      v145 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v145, "channelLayout");
                      v146 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)&buf[32] = objc_msgSend(v146, "layoutTag");

                      goto LABEL_422;
                    }
                    v415 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)SubmixIdFromHashName)
                                                                      + 688));
                    if (os_log_type_enabled(v415, OS_LOG_TYPE_ERROR))
                    {
                      v416 = v124[1];
                      *(_DWORD *)__src = 136315650;
                      *(_QWORD *)&__src[4] = "ActionTreeManager.mm";
                      *(_WORD *)&__src[12] = 1024;
                      *(_DWORD *)&__src[14] = 1823;
                      *(_WORD *)&__src[18] = 1024;
                      *(_DWORD *)&__src[20] = v416;
                      v417 = "%25s:%-5d Unhandled AssetType %d for Sampler!";
                      v418 = v415;
                      v419 = 24;
LABEL_627:
                      _os_log_impl(&dword_2164CC000, v418, OS_LOG_TYPE_ERROR, v417, __src, v419);
                    }
LABEL_603:

                    return 0;
                  }
                  *(_BYTE *)(v61 + 136 * (int)v4 + 64) = 2;
                  v180 = (Phase::Logger *)(*(uint64_t (**)(_QWORD *))(*v124 + 24))(v124);
                  v141 = (uint64_t)v180;
                  if (!v180)
                    goto LABEL_629;
                  if (*v431)
                  {
                    v181 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v180) + 688));
                    if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
                    {
                      v182 = v442[1];
                      *(_DWORD *)__src = 136315650;
                      *(_QWORD *)&__src[4] = "ActionTreeManager.mm";
                      *(_WORD *)&__src[12] = 1024;
                      *(_DWORD *)&__src[14] = 1684;
                      *(_WORD *)&__src[18] = 2048;
                      *(_QWORD *)&__src[20] = v182;
                      _os_log_impl(&dword_2164CC000, v181, OS_LOG_TYPE_ERROR, "%25s:%-5d Warning: overriding the stream renderer for streaming assetId %llu", __src, 0x1Cu);
                    }
                  }
                  v183 = *(id *)(v141 + 64);
                  objc_msgSend(v183, "sampleRate");
                  *(float *)&v184 = v184;
                  v185 = vcvtps_u32_f32((float)(*(float *)&v184 * 80.0) / 1000.0);
                  if (v185 <= 0x4000)
                    v185 = 0x4000;
                  Phase::Controller::StreamedSoundAssetInfo::CreateStreamRenderer((Phase::Controller::StreamedSoundAssetInfo *)v141, CFSTR("MPEGDefault12LKFSStandardV2"), (v185 + 1) & 0xFFFFFFFE, 0, (uint64_t *)__src);
                  v186 = *(Phase::Controller::StreamRenderer **)__src;
                  *(_QWORD *)__src = 0;
                  std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100](v431, v186);
                  std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100]((Phase::Controller::StreamRenderer **)__src, 0);

                  if (*v431)
                  {
                    v188 = v61 + 136 * (int)v4;
                    v190 = *(_QWORD *)(v188 + 16);
                    v189 = (uint64_t *)(v188 + 16);
                    caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::_addOrReplace(v438, *v435, v190, (uint64_t)*v431);
                    if (*(_BYTE *)v129)
                    {
                      v424 = *v128;
                      v191 = Phase::ActionTreeObject::LeafNodeInfo::GeneratorStreamSeek((Phase::ActionTreeObject::LeafNodeInfo *)v62, *((Phase::Controller::TaskManager **)v454 + 28));
                      Phase::ActionTreeManager::SubmitGeneratorSeekCompletedResult((uint64_t)v454, *v435, *v189, v191);
                      if (*(_BYTE *)v129)
                        goto LABEL_629;
                      if (v191)
                      {
                        v193 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v192) + 688));
                        if (os_log_type_enabled(v193, OS_LOG_TYPE_DEFAULT))
                        {
                          v194 = *v435;
                          *(_DWORD *)__src = 136316162;
                          *(_QWORD *)&__src[4] = "ActionTreeManager.mm";
                          *(_WORD *)&__src[12] = 1024;
                          *(_DWORD *)&__src[14] = 1722;
                          *(_WORD *)&__src[18] = 2048;
                          *(_QWORD *)&__src[20] = v194;
                          *(_WORD *)&__src[28] = 2048;
                          *(_QWORD *)&__src[30] = v424;
                          v478 = 1024;
                          v479 = v191;
                          _os_log_impl(&dword_2164CC000, v193, OS_LOG_TYPE_DEFAULT, "%25s:%-5d generatorId %llu: seeking to time %.2fs before preparing, result %d, aborting prepare, stopping", __src, 0x2Cu);
                        }
                        Phase::ActionTreeManager::LeafNodeCompleted(v454, *v435, *v189, (_QWORD *)(v61 + 136 * (int)v4 + 104));

                        goto LABEL_442;
                      }
                    }
                    else
                    {
                      v222 = *v431;
                      if (v442[9] == 1)
                      {
                        v223 = Phase::Controller::StreamedSoundAssetInfo::ScheduleFile(v141, (uint64_t)v222, 0, 1, 0, 0);
                      }
                      else
                      {
                        *(_QWORD *)&v461 = MEMORY[0x24BDAC760];
                        *((_QWORD *)&v461 + 1) = 3321888768;
                        v462 = ___ZN5Phase17ActionTreeManager18ProcessSamplerNodeEPKNS_10SamplerMsgEPNS_10ParamStackEiPNS_16ActionTreeObjectERNS_24ActionTreeGatheredParamsERNS_17MessagePipeWriterINS_23ActionTreeServerCommandEEE_block_invoke;
                        v463 = &__block_descriptor_40_ea8_32c203_ZTSKZN5Phase17ActionTreeManager18ProcessSamplerNodeEPKNS_10SamplerMsgEPNS_10ParamStackEiPNS_16ActionTreeObjectERNS_24ActionTreeGatheredParamsERNS_17MessagePipeWriterINS_23ActionTreeServerCommandEEEE3__0_e8_v16__0q8l;
                        v464 = v62;
                        v223 = Phase::Controller::StreamedSoundAssetInfo::ScheduleFile(v141, (uint64_t)v222, 0, 0, 0, &v461);
                      }
                      if (!v223)
                      {
                        v420 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v223)
                                                                          + 688));
                        if (!os_log_type_enabled(v420, OS_LOG_TYPE_ERROR))
                          goto LABEL_603;
                        v423 = v442[1];
                        *(_DWORD *)__src = 136315650;
                        *(_QWORD *)&__src[4] = "ActionTreeManager.mm";
                        *(_WORD *)&__src[12] = 1024;
                        *(_DWORD *)&__src[14] = 1764;
                        *(_WORD *)&__src[18] = 2048;
                        *(_QWORD *)&__src[20] = v423;
                        v417 = "%25s:%-5d Failed to schedule streaming assetId %llu on stream renderer";
                        goto LABEL_626;
                      }
                    }
                    v280 = (Phase::Logger *)Phase::Controller::StreamRenderer::Start(*v431);
                    if ((v280 & 1) != 0)
                    {
                      v482 = 2;
                      v142 = *(id *)(v141 + 64);
                      v281 = objc_msgSend(v142, "streamDescription");
                      v485[0] = *(_OWORD *)v281;
                      v485[1] = *(_OWORD *)(v281 + 16);
                      v486 = *(_QWORD *)(v281 + 32);
                      objc_msgSend(v142, "channelLayout");
                      v145 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)&buf[32] = objc_msgSend(v145, "layoutTag");
LABEL_422:

                      v487 = v442[3];
                      v488 = v442[4];
                      v489[0] = *(_QWORD *)(v141 + 24);
                      v481 = *(_QWORD *)(v141 + 40);

                      v282 = *v429;
                      if (*v429 != v442[9])
                        goto LABEL_629;
                      *(_OWORD *)buf = *(_OWORD *)v435;
                      *(_QWORD *)&buf[16] = v426;
                      *(_QWORD *)&buf[24] = v425;
                      v483 = 0;
                      v484 = v442[1];
                      v489[3] = v442[8];
                      v489[4] = v282;
                      v283 = a2;
                      if (!Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 7u, buf, 0xA8uLL))
                        goto LABEL_603;
                      v284 = Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v454, (Phase::ActionTreeObject *)a2, v448, (uint64_t)v427, a3, a4, v458[1]);
                      if ((v284 & 1) == 0)
                        goto LABEL_603;
                      v285 = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)v284);
                      if (*((_BYTE *)v285 + 696))
                      {
                        v286 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v285) + 688));
                        v287 = v286;
                        v288 = *v435;
                        if ((unint64_t)(*v435 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v286))
                        {
                          *(_DWORD *)__src = 134217984;
                          *(_QWORD *)&__src[4] = v288;
                          _os_signpost_emit_with_name_impl(&dword_2164CC000, v287, OS_SIGNPOST_INTERVAL_BEGIN, v288, "Phase_Generator_Prepare", "Generator ID %llu Prepare Begin", __src, 0xCu);
                        }

                        v283 = a2;
                      }
                      Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v62, 2u);
                      v289 = *(unsigned __int8 *)(v283 + 144);
                      if ((v289 - 2) < 2)
                        goto LABEL_632;
                      if (v289 == 4)
                      {
LABEL_435:
                        started = (Phase::Logger *)Phase::ActionTreeManager::StartPreparedVoice(v283, (uint64_t)v62, a4);
                        if (!(_DWORD)started)
                          goto LABEL_603;
                        v291 = (Phase::Logger *)Phase::Logger::GetInstancePtr(started);
                        if (*((_BYTE *)v291 + 696))
                        {
                          v292 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v291) + 688));
                          v293 = v292;
                          v294 = *v435;
                          if ((unint64_t)(*v435 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v292))
                          {
                            *(_DWORD *)__src = 134217984;
                            *(_QWORD *)&__src[4] = v294;
                            _os_signpost_emit_with_name_impl(&dword_2164CC000, v293, OS_SIGNPOST_INTERVAL_BEGIN, v294, "Phase_Generator_Start", "Generator ID %llu Start", __src, 0xCu);
                          }

                        }
                        goto LABEL_441;
                      }
                      if (v289 == 8)
                      {
LABEL_632:
                        if (v289 == 4 || *(_BYTE *)(v283 + 200))
                          goto LABEL_435;
                      }
LABEL_441:

                      goto LABEL_442;
                    }
                    v420 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v280) + 688));
                    if (!os_log_type_enabled(v420, OS_LOG_TYPE_ERROR))
                      goto LABEL_603;
                    v422 = v442[1];
                    *(_DWORD *)__src = 136315650;
                    *(_QWORD *)&__src[4] = "ActionTreeManager.mm";
                    *(_WORD *)&__src[12] = 1024;
                    *(_DWORD *)&__src[14] = 1773;
                    *(_WORD *)&__src[18] = 2048;
                    *(_QWORD *)&__src[20] = v422;
                    v417 = "%25s:%-5d Failed to start stream renderer for streaming assetId %llu";
                  }
                  else
                  {
                    v420 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v187) + 688));
                    if (!os_log_type_enabled(v420, OS_LOG_TYPE_ERROR))
                      goto LABEL_603;
                    v421 = v442[1];
                    *(_DWORD *)__src = 136315650;
                    *(_QWORD *)&__src[4] = "ActionTreeManager.mm";
                    *(_WORD *)&__src[12] = 1024;
                    *(_DWORD *)&__src[14] = 1698;
                    *(_WORD *)&__src[18] = 2048;
                    *(_QWORD *)&__src[20] = v421;
                    v417 = "%25s:%-5d Failed to create stream renderer for streaming assetId %llu";
                  }
LABEL_626:
                  v418 = v420;
                  v419 = 28;
                  goto LABEL_627;
                }
                v411 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)SubmixIdFromHashName)
                                                                  + 688));
                if (!os_log_type_enabled(v411, OS_LOG_TYPE_ERROR))
                  goto LABEL_603;
                v414 = *v427;
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1622;
                *(_WORD *)&buf[18] = 2048;
                *(_QWORD *)&buf[20] = v414;
                v413 = "%25s:%-5d Fatal Sound Event data error: Submix %llx not registered.";
              }
              else
              {
                v411 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v135)
                                                                  + 688));
                if (!os_log_type_enabled(v411, OS_LOG_TYPE_ERROR))
                  goto LABEL_603;
                v412 = v442[1];
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1537;
                *(_WORD *)&buf[18] = 2048;
                *(_QWORD *)&buf[20] = v412;
                v413 = "%25s:%-5d Fatal Sound Event data error: could not configure leaf node for assetId %llu";
              }
              _os_log_impl(&dword_2164CC000, v411, OS_LOG_TYPE_ERROR, v413, buf, 0x1Cu);
              goto LABEL_603;
            default:
              goto LABEL_443;
          }
        }
        if (v63 == 5)
          goto LABEL_310;
        if (v63 != 4)
          goto LABEL_443;
        v103 = v442[8];
        if ((unint64_t)(v103 - 1) < 3)
          goto LABEL_123;
        if (!v103)
          goto LABEL_310;
        goto LABEL_443;
      case 1:
        if (v457 >= 15)
        {
          v403 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result)
                                                            + 688));
          result = os_log_type_enabled(v403, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3426;
            v398 = "%25s:%-5d Fatal Sound Event data error: Failed to push blend stack";
            goto LABEL_614;
          }
          return result;
        }
        v64 = v457 + 1;
        v65 = (float *)&v474[16 * v64];
        *(_OWORD *)v65 = *(_OWORD *)&v474[16 * v457];
        v458 = v65;
        if (!*(_BYTE *)v65)
          goto LABEL_308;
        v66 = v460 + v10;
        v67 = *(char *)(v460 + v10 + 8);
        if (v67 == -2)
        {
          v68 = *((_QWORD *)v8 + 3);
          v69 = *(unsigned int *)(v68 + 96);
          if (!(_DWORD)v69)
          {
LABEL_568:
            Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(*((Phase::Logger **)v454 + 28), 1);
            v399 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
            v400 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v399)
                                                                                                 + 688)));
            if (os_log_type_enabled(v400, OS_LOG_TYPE_ERROR))
            {
              v401 = -[Phase::Logger getString:](v399, "getString:", *(_QWORD *)(v66 + 424));
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3457;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v401;
              _os_log_impl(&dword_2164CC000, v400, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal Sound Event data error: Submix %s not found for distance tracking", buf, 0x1Cu);
            }

            return 0;
          }
          v70 = 0;
          v71 = *(_QWORD **)(v68 + 104);
          v72 = 8 * v69;
          while (*v71 != *(_QWORD *)(v66 + 424))
          {
            v71 += 743;
            v70 += 8;
            if (v72 == v70)
              goto LABEL_568;
          }
          v108 = (double *)(*((_QWORD *)a3 + 7) + v70);
        }
        else
        {
          v105 = *(unsigned __int8 *)(v460 + v10 + 8);
          if ((v67 & 0x80) != 0 || *(_DWORD *)(*((_QWORD *)v8 + 3) + 8) <= v67)
          {
            v403 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result)
                                                              + 688));
            result = os_log_type_enabled(v403, OS_LOG_TYPE_ERROR);
            if ((_DWORD)result)
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3465;
              v398 = "%25s:%-5d Fatal Sound Event data error: blend parameter invalid";
              goto LABEL_614;
            }
            return result;
          }
          v106 = *((_QWORD *)a3 + 1);
          if (v105 >= (*((_QWORD *)a3 + 2) - v106) >> 3)
          {
            Phase::ActionTreeManager::HandleParamError(*((Phase::Logger **)v454 + 28), 0, (uint64_t)v8, (char)v67);
            return 0;
          }
          v107 = *((_QWORD *)a3 + 4);
          if (v105 >= (*((_QWORD *)a3 + 5) - v107) >> 2)
          {
            Phase::ActionTreeManager::HandleParamError(*((Phase::Logger **)v454 + 28), 0, (uint64_t)v8, v67);
            return 0;
          }
          if (*(_DWORD *)(v107 + 4 * v105) != 1)
          {
            v151 = 0;
            v148 = 0.0;
            goto LABEL_307;
          }
          v108 = (double *)(v106 + 8 * v105);
        }
        v147 = *(_DWORD *)(v66 + 32);
        v148 = 0.0;
        if ((v147 - 17) < 0xFFFFFFF0
          || (v149 = *v108, v150 = v66 + 16 + 24 * (v147 - 1), *(double *)(v66 + 16) > v149)
          && *(double *)(v66 + 24) == 0.0
          || *(double *)(v150 + 24) < v149 && *(double *)(v150 + 32) == 0.0)
        {
          v151 = 0;
        }
        else
        {
          v148 = Phase::EvaluateEnvelopeDef(v66 + 16, v149);
          v151 = 1;
          v8 = (Phase::ActionTreeObject *)a2;
        }
LABEL_307:
        *(float *)&v474[16 * v64 + 4] = v148 * *(float *)&v474[16 * v64 + 4];
        *(_BYTE *)v458 = v151;
LABEL_308:
        v10 += *(unsigned int *)(v11 + 4);
        ++v457;
        goto LABEL_446;
      case 2:
      case 4:
        v13 = v457;
        v14 = v457 > 0;
        v457 -= v14;
        v458 = (float *)&v474[16 * (v13 - v14)];
        goto LABEL_445;
      case 3:
        if (v457 >= 15)
        {
          v403 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result)
                                                            + 688));
          result = os_log_type_enabled(v403, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3501;
            v398 = "%25s:%-5d Fatal Sound Event data error: Failed to push switch stack";
            goto LABEL_614;
          }
          return result;
        }
        v27 = v457 + 1;
        v28 = (float *)&v474[16 * v27];
        *(_OWORD *)v28 = *(_OWORD *)&v474[16 * v457];
        v458 = v28;
        if (!*(_BYTE *)v28)
          goto LABEL_63;
        v29 = *(unsigned __int8 *)(v460 + v10 + 8);
        if (*(char *)(v460 + v10 + 8) < 0 || (v30 = *((_QWORD *)a3 + 1), v29 >= (*((_QWORD *)a3 + 2) - v30) >> 3))
        {
          v402 = 0;
LABEL_591:
          Phase::ActionTreeManager::HandleParamError(*((Phase::Logger **)v454 + 28), v402, (uint64_t)v8, (char)v29);
          return 0;
        }
        if (*(_DWORD *)(*((_QWORD *)a3 + 4) + 4 * v29) != 2)
        {
          v402 = 1;
          goto LABEL_591;
        }
        *(_BYTE *)v458 = *(_QWORD *)(v30 + 8 * v29) == *(_QWORD *)(v460 + v10 + 16);
LABEL_63:
        v10 += *(unsigned int *)(v11 + 4);
        v457 = v27;
        goto LABEL_446;
      case 5:
        v78 = v9;
        v79 = *(unsigned int *)(v11 + 4);
        v80 = *(_BYTE *)v458 == 0;
        v449 = v460 + v10;
        result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(v445, (unint64_t *)(v460 + v10));
        v10 += v79;
        if (v80)
        {
          v8 = (Phase::ActionTreeObject *)a2;
          if (result)
          {
            v100 = *(int8x8_t *)(a2 + 112);
            v101 = *(_QWORD *)(result + 8);
            v102 = (uint8x8_t)vcnt_s8(v100);
            v102.i16[0] = vaddlv_u8(v102);
            if (v102.u32[0] > 1uLL)
            {
              if (v101 >= *(_QWORD *)&v100)
                v101 %= *(_QWORD *)&v100;
            }
            else
            {
              v101 &= *(_QWORD *)&v100 - 1;
            }
            v152 = *(_QWORD *)result;
            v153 = *(uint64_t **)(*v445 + 8 * v101);
            do
            {
              v154 = v153;
              v153 = (uint64_t *)*v153;
            }
            while (v153 != (uint64_t *)result);
            if (v154 == v439)
              goto LABEL_294;
            v155 = v154[1];
            if (v102.u32[0] > 1uLL)
            {
              if (v155 >= *(_QWORD *)&v100)
                v155 %= *(_QWORD *)&v100;
            }
            else
            {
              v155 &= *(_QWORD *)&v100 - 1;
            }
            if (v155 == v101)
            {
LABEL_296:
              if (v152)
              {
                v198 = *(_QWORD *)(v152 + 8);
                goto LABEL_298;
              }
            }
            else
            {
LABEL_294:
              if (!v152)
                goto LABEL_295;
              v198 = *(_QWORD *)(v152 + 8);
              if (v102.u32[0] > 1uLL)
              {
                v199 = *(_QWORD *)(v152 + 8);
                if (v198 >= *(_QWORD *)&v100)
                  v199 = v198 % *(_QWORD *)&v100;
              }
              else
              {
                v199 = v198 & (*(_QWORD *)&v100 - 1);
              }
              if (v199 != v101)
              {
LABEL_295:
                *(_QWORD *)(*v445 + 8 * v101) = 0;
                v152 = *(_QWORD *)result;
                goto LABEL_296;
              }
LABEL_298:
              if (v102.u32[0] > 1uLL)
              {
                if (v198 >= *(_QWORD *)&v100)
                  v198 %= *(_QWORD *)&v100;
              }
              else
              {
                v198 &= *(_QWORD *)&v100 - 1;
              }
              if (v198 != v101)
              {
                *(_QWORD *)(*v445 + 8 * v198) = v154;
                v152 = *(_QWORD *)result;
              }
            }
            *v154 = v152;
            *(_QWORD *)result = 0;
            --*(_QWORD *)(a2 + 128);
            operator delete((void *)result);
          }
          *((_QWORD *)v458 + 1) = 0xFFFFFFFFLL;
          goto LABEL_446;
        }
        v8 = (Phase::ActionTreeObject *)a2;
        if (result)
        {
          v458[2] = *(float *)(result + 24);
          v458[3] = 0.0;
          v81 = *(unsigned __int8 *)(v449 + 12);
          if (*(_BYTE *)(v449 + 12))
          {
            while (1)
            {
              v82 = (_DWORD *)(v460 + v10);
              v83 = v10 + 8;
              v10 += 8 + *(unsigned int *)(v460 + v10 + 4);
              if (v10 >= v459 || v83 > v459 || *v82 != 6)
                break;
              if (!--v81)
                goto LABEL_446;
            }
            v403 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result)
                                                              + 688));
            result = os_log_type_enabled(v403, OS_LOG_TYPE_ERROR);
            if ((_DWORD)result)
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3547;
              v398 = "%25s:%-5d Fatal Sound Event data error: Failed to process random weights";
              goto LABEL_614;
            }
            return result;
          }
          goto LABEL_446;
        }
        v122 = v449;
        if (*(int *)(v449 + 8) < 1)
        {
          v123 = 0;
        }
        else
        {
          result = objc_msgSend(*(id *)(a2 + 16), "getRandomHistory:", *(_QWORD *)v449);
          v123 = (uint64_t *)result;
          v8 = (Phase::ActionTreeObject *)a2;
          v122 = v449;
        }
        v156 = *(unsigned __int8 *)(v122 + 12);
        if (*(_BYTE *)(v122 + 12))
        {
          v157 = 0;
          v158 = 0;
          v159 = 0.0;
          while (1)
          {
            v160 = (_DWORD *)(v460 + v10);
            v161 = v10 + 8;
            v10 += 8 + *(unsigned int *)(v460 + v10 + 4);
            if (v10 >= v459 || v161 > v459 || *v160 != 6)
              break;
            v162 = *(double *)(v460 + v161);
            if (v123)
            {
              v163 = v123[4];
              v164 = v123[1];
              v165 = v123[2];
              v166 = (_QWORD *)(v164 + 8 * (v163 >> 10));
              if (v165 == v164)
                v167 = 0;
              else
                v167 = (_DWORD *)(*v166 + 4 * (v123[4] & 0x3FF));
LABEL_200:
              v168 = v167 - 1024;
              while (1)
              {
                v169 = v165 == v164
                     ? 0
                     : *(_QWORD *)(v164 + (((v123[5] + v163) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v123[5] + v163) & 0x3FF);
                if (v167 == (_DWORD *)v169)
                  break;
                if (*v167 == v157)
                  goto LABEL_210;
                ++v167;
                if ((_DWORD *)*v166 == ++v168)
                {
                  v170 = (_DWORD *)v166[1];
                  ++v166;
                  v167 = v170;
                  goto LABEL_200;
                }
              }
            }
            v159 = v159 + v162;
            v171 = *((_QWORD *)v454 + 31);
            v172 = *((_QWORD *)v454 + 30) ^ (*((_QWORD *)v454 + 30) << 23);
            v173 = (v171 >> 26) ^ (v172 >> 17) ^ v171 ^ v172;
            *((_QWORD *)v454 + 30) = v171;
            *((_QWORD *)v454 + 31) = v173;
            if (v159 * ((double)(v173 + v171) * 5.42101086e-20 * 8.98846567e307 + 0.0) < v162 * 8.98846567e307)
              v158 = v157;
LABEL_210:
            if (++v157 == v156)
              goto LABEL_213;
          }
          v403 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result)
                                                            + 688));
          result = os_log_type_enabled(v403, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3570;
            v398 = "%25s:%-5d Fatal Sound Event data error: Failed to process random weights";
            goto LABEL_614;
          }
          return result;
        }
        v158 = 0;
LABEL_213:
        *((_DWORD *)v458 + 2) = v158;
        v458[3] = 0.0;
        v174 = v8;
        v175 = *(_QWORD *)v122;
        v176 = *((_QWORD *)v174 + 14);
        if (v176)
        {
          v177 = (uint8x8_t)vcnt_s8((int8x8_t)v176);
          v177.i16[0] = vaddlv_u8(v177);
          if (v177.u32[0] > 1uLL)
          {
            v4 = *(_QWORD *)v122;
            if (v176 <= v175)
              v4 = v175 % v176;
          }
          else
          {
            v4 = (v176 - 1) & v175;
          }
          v212 = *(uint64_t **)(*v445 + 8 * v4);
          if (v212)
          {
            for (i = *v212; i; i = *(_QWORD *)i)
            {
              v214 = *(_QWORD *)(i + 8);
              if (v214 == v175)
              {
                if (*(_QWORD *)(i + 16) == v175)
                {
                  v8 = (Phase::ActionTreeObject *)a2;
                  goto LABEL_405;
                }
              }
              else
              {
                if (v177.u32[0] > 1uLL)
                {
                  if (v214 >= v176)
                    v214 %= v176;
                }
                else
                {
                  v214 &= v176 - 1;
                }
                if (v214 != v4)
                  break;
              }
            }
          }
        }
        result = (uint64_t)operator new(0x20uLL);
        i = result;
        *(_QWORD *)result = 0;
        *(_QWORD *)(result + 8) = v175;
        *(_QWORD *)(result + 16) = v175;
        v215 = (float)(unint64_t)(*(_QWORD *)(a2 + 128) + 1);
        *(_DWORD *)(result + 24) = 0;
        v216 = *(float *)(a2 + 136);
        if ((((float)(v216 * (float)v176) >= v215) & ~(v176 == 0)) == 0)
        {
          v217 = (v176 & (v176 - 1)) != 0;
          if (v176 < 3)
            v217 = 1;
          v218 = v217 | (2 * v176);
          v219 = vcvtps_u32_f32(v215 / v216);
          if (v218 <= v219)
            v220 = v219;
          else
            v220 = v218;
          std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>((uint64_t)v445, v220);
          v176 = *(_QWORD *)(a2 + 112);
          if ((v176 & (v176 - 1)) != 0)
          {
            if (v176 <= v175)
              v4 = v175 % v176;
            else
              v4 = v175;
          }
          else
          {
            v4 = (v176 - 1) & v175;
          }
        }
        v249 = *v445;
        v250 = *(uint64_t **)(*v445 + 8 * v4);
        if (v250)
        {
          *(_QWORD *)i = *v250;
          v8 = (Phase::ActionTreeObject *)a2;
        }
        else
        {
          *(_QWORD *)i = *v439;
          *v439 = i;
          *(_QWORD *)(v249 + 8 * v4) = v439;
          v8 = (Phase::ActionTreeObject *)a2;
          if (!*(_QWORD *)i)
            goto LABEL_404;
          v251 = *(_QWORD *)(*(_QWORD *)i + 8);
          if ((v176 & (v176 - 1)) != 0)
          {
            if (v251 >= v176)
              v251 %= v176;
          }
          else
          {
            v251 &= v176 - 1;
          }
          v250 = (uint64_t *)(*v445 + 8 * v251);
        }
        *v250 = i;
LABEL_404:
        ++*((_QWORD *)v8 + 16);
LABEL_405:
        *(_DWORD *)(i + 24) = v158;
        if (!v123)
          goto LABEL_509;
        v266 = (uint64_t *)v123[2];
        v267 = (void **)v123[1];
        v268 = (char *)v266 - (char *)v267;
        if (v266 == (uint64_t *)v267)
          v269 = 0;
        else
          v269 = (((char *)v266 - (char *)v267) << 7) - 1;
        v270 = v123[4];
        v271 = v123[5];
        v272 = v271 + v270;
        if (v269 != v271 + v270)
        {
          v9 = v78;
          goto LABEL_506;
        }
        v273 = v270 >= 0x400;
        v274 = v270 - 1024;
        if (v273)
        {
          v123[4] = v274;
          v276 = *v267;
          v275 = (uint64_t *)(v267 + 1);
          v4 = (unint64_t)v276;
          v123[1] = (uint64_t)v275;
          if (v266 == (uint64_t *)v123[3])
          {
            v321 = (uint64_t)v275 - *v123;
            if ((unint64_t)v275 <= *v123)
            {
              if (v266 == (uint64_t *)*v123)
                v343 = 1;
              else
                v343 = ((uint64_t)v266 - *v123) >> 2;
              result = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v343);
              v345 = (uint64_t *)(result + 8 * (v343 >> 2));
              v346 = (uint64_t *)v123[1];
              v266 = v345;
              v347 = v123[2] - (_QWORD)v346;
              v8 = (Phase::ActionTreeObject *)a2;
              v9 = v78;
              if (v347)
              {
                v266 = (uint64_t *)((char *)v345 + (v347 & 0xFFFFFFFFFFFFFFF8));
                v348 = 8 * (v347 >> 3);
                v349 = (_QWORD *)(result + 8 * (v343 >> 2));
                do
                {
                  v350 = *v346++;
                  *v349++ = v350;
                  v348 -= 8;
                }
                while (v348);
              }
              v351 = (_QWORD *)*v123;
              *v123 = result;
              v123[1] = (uint64_t)v345;
              v123[2] = (uint64_t)v266;
              v123[3] = result + 8 * v344;
              if (v351)
              {
                operator delete(v351);
                v266 = (uint64_t *)v123[2];
              }
            }
            else
            {
              v322 = v321 >> 3;
              v323 = v321 >> 3 < -1;
              v324 = (v321 >> 3) + 2;
              if (v323)
                v325 = v324;
              else
                v325 = v322 + 1;
              v326 = &v275[-(v325 >> 1)];
              v327 = (char *)v266 - (char *)v275;
              v9 = v78;
              if (v266 != v275)
              {
                result = (uint64_t)memmove(&v275[-(v325 >> 1)], v275, (char *)v266 - (char *)v275);
                v266 = (uint64_t *)v123[1];
              }
              v328 = &v266[-(v325 >> 1)];
              v266 = (uint64_t *)((char *)v326 + v327);
              v123[1] = (uint64_t)v328;
              v123[2] = (uint64_t)v326 + v327;
              v8 = (Phase::ActionTreeObject *)a2;
            }
          }
          else
          {
            v9 = v78;
          }
          *v266 = v4;
LABEL_504:
          v123[2] += 8;
          goto LABEL_505;
        }
        v277 = (uint64_t *)v123[3];
        v4 = *v123;
        v278 = (uint64_t)v277 - *v123;
        if (v268 >> 3 < (unint64_t)(v278 >> 3))
        {
          result = (uint64_t)operator new(0x1000uLL);
          v279 = (void *)result;
          if (v277 != v266)
          {
            *v266 = result;
            v123[2] += 8;
            v8 = (Phase::ActionTreeObject *)a2;
            v9 = v78;
            goto LABEL_505;
          }
          if (v267 == (void **)v4)
          {
            if (v266 == (uint64_t *)v267)
              v369 = 1;
            else
              v369 = ((char *)v277 - (char *)v267) >> 2;
            result = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v369);
            v267 = (void **)(result + 8 * ((v369 + 3) >> 2));
            v371 = (void **)v123[1];
            v372 = v267;
            v373 = v123[2] - (_QWORD)v371;
            v8 = (Phase::ActionTreeObject *)a2;
            v9 = v78;
            if (v373)
            {
              v372 = (void **)((char *)v267 + (v373 & 0xFFFFFFFFFFFFFFF8));
              v374 = 8 * (v373 >> 3);
              v375 = v267;
              do
              {
                v376 = *v371++;
                *v375++ = v376;
                v374 -= 8;
              }
              while (v374);
            }
            v377 = (_QWORD *)*v123;
            *v123 = result;
            v123[1] = (uint64_t)v267;
            v123[2] = (uint64_t)v372;
            v123[3] = result + 8 * v370;
            if (v377)
            {
              operator delete(v377);
              v267 = (void **)v123[1];
            }
          }
          else
          {
            v9 = v78;
            v8 = (Phase::ActionTreeObject *)a2;
          }
          *(v267 - 1) = v279;
          v378 = (char *)v123[1];
          v379 = (char *)v123[2];
          v123[1] = (uint64_t)(v378 - 8);
          v380 = *((_QWORD *)v378 - 1);
          v123[1] = (uint64_t)v378;
          if (v379 == (char *)v123[3])
          {
            v381 = (uint64_t)&v378[-*v123];
            if ((unint64_t)v378 <= *v123)
            {
              if (v379 == (char *)*v123)
                v387 = 1;
              else
                v387 = (uint64_t)&v379[-*v123] >> 2;
              result = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v387);
              v389 = (char *)(result + 8 * (v387 >> 2));
              v390 = (uint64_t *)v123[1];
              v379 = v389;
              v391 = v123[2] - (_QWORD)v390;
              v8 = (Phase::ActionTreeObject *)a2;
              v9 = v78;
              if (v391)
              {
                v379 = &v389[v391 & 0xFFFFFFFFFFFFFFF8];
                v392 = 8 * (v391 >> 3);
                v393 = (_QWORD *)(result + 8 * (v387 >> 2));
                do
                {
                  v394 = *v390++;
                  *v393++ = v394;
                  v392 -= 8;
                }
                while (v392);
              }
              v395 = (_QWORD *)*v123;
              *v123 = result;
              v123[1] = (uint64_t)v389;
              v123[2] = (uint64_t)v379;
              v123[3] = result + 8 * v388;
              if (v395)
              {
                operator delete(v395);
                v379 = (char *)v123[2];
              }
            }
            else
            {
              v382 = v381 >> 3;
              v323 = v381 >> 3 < -1;
              v383 = (v381 >> 3) + 2;
              if (v323)
                v384 = v383;
              else
                v384 = v382 + 1;
              v385 = &v378[-8 * (v384 >> 1)];
              v386 = v379 - v378;
              if (v379 != v378)
              {
                result = (uint64_t)memmove(&v378[-8 * (v384 >> 1)], v378, v379 - v378);
                v378 = (char *)v123[1];
              }
              v379 = &v385[v386];
              v123[1] = (uint64_t)&v378[-8 * (v384 >> 1)];
              v123[2] = (uint64_t)&v385[v386];
              v8 = (Phase::ActionTreeObject *)a2;
            }
          }
          *(_QWORD *)v379 = v380;
          goto LABEL_504;
        }
        v444 = v268 >> 3;
        v295 = v278 >> 2;
        if (v277 == (uint64_t *)v4)
          v296 = 1;
        else
          v296 = v295;
        v297 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v296);
        v299 = v298;
        v300 = operator new(0x1000uLL);
        v301 = &v297[8 * v444];
        v4 = (unint64_t)&v297[8 * v299];
        if (v444 != v299)
          goto LABEL_457;
        v302 = 8 * v444;
        if (v268 < 1)
        {
          v355 = v300;
          v356 = v302 >> 2;
          if (v266 == (uint64_t *)v267)
            v357 = 1;
          else
            v357 = v356;
          v358 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v357);
          v301 = &v358[8 * (v357 >> 2)];
          v4 = (unint64_t)&v358[8 * v359];
          v9 = v78;
          if (v297)
            operator delete(v297);
          v297 = v358;
          v300 = v355;
        }
        else
        {
          v303 = v302 >> 3;
          if (v303 >= -1)
            v304 = v303 + 1;
          else
            v304 = v303 + 2;
          v301 -= 8 * (v304 >> 1);
LABEL_457:
          v9 = v78;
        }
        *(_QWORD *)v301 = v300;
        v305 = v301 + 8;
        for (j = v123[2]; j != v123[1]; j -= 8)
        {
          if (v301 == v297)
          {
            if ((unint64_t)v305 >= v4)
            {
              if ((char *)v4 == v297)
                v311 = 1;
              else
                v311 = (uint64_t)(v4 - (_QWORD)v297) >> 2;
              v312 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v311);
              v314 = v312;
              v301 = &v312[(2 * v311 + 6) & 0xFFFFFFFFFFFFFFF8];
              v315 = v305 - v297;
              v76 = v305 == v297;
              v305 = v301;
              if (!v76)
              {
                v305 = &v301[v315 & 0xFFFFFFFFFFFFFFF8];
                v316 = 8 * (v315 >> 3);
                v317 = v301;
                v318 = v297;
                do
                {
                  v319 = *(_QWORD *)v318;
                  v318 += 8;
                  *(_QWORD *)v317 = v319;
                  v317 += 8;
                  v316 -= 8;
                }
                while (v316);
              }
              v4 = (unint64_t)&v312[8 * v313];
              if (v297)
                operator delete(v297);
              v297 = v314;
            }
            else
            {
              v307 = (uint64_t)(v4 - (_QWORD)v305) >> 3;
              if (v307 >= -1)
                v308 = v307 + 1;
              else
                v308 = v307 + 2;
              v309 = v308 >> 1;
              v301 = &v297[8 * (v308 >> 1)];
              v310 = v297;
              if (v305 != v297)
              {
                memmove(v301, v297, v305 - v297);
                v310 = v305;
              }
              v305 = &v310[8 * v309];
            }
          }
          v320 = *(_QWORD *)(j - 8);
          *((_QWORD *)v301 - 1) = v320;
          v301 -= 8;
        }
        result = *v123;
        *v123 = (uint64_t)v297;
        v123[1] = (uint64_t)v301;
        v123[2] = (uint64_t)v305;
        v123[3] = v4;
        v8 = (Phase::ActionTreeObject *)a2;
        if (result)
          operator delete((void *)result);
LABEL_505:
        v267 = (void **)v123[1];
        v270 = v123[4];
        v271 = v123[5];
        v272 = v270 + v271;
LABEL_506:
        (*(float **)((char *)v267 + ((v272 >> 7) & 0x1FFFFFFFFFFFFF8)))[v272 & 0x3FF] = v458[2];
        v123[5] = v271 + 1;
        if (v271 + 1 > (unint64_t)*(int *)(v449 + 8))
        {
          v352 = v270 + 1;
          v123[4] = v352;
          v123[5] = v271;
          if (v352 >= 0x800)
          {
            operator delete(*v267);
            v123[1] += 8;
            v123[4] -= 1024;
          }
        }
LABEL_509:
        if (v10 >= v459)
        {
          v403 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result)
                                                            + 688));
          result = os_log_type_enabled(v403, OS_LOG_TYPE_ERROR);
          if (!(_DWORD)result)
            return result;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3618;
          v398 = "%25s:%-5d Fatal Sound Event data error: Unexpected end of node message stream";
          goto LABEL_614;
        }
        if (*(_DWORD *)(v460 + v10) != 7)
        {
          v403 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result)
                                                            + 688));
          result = os_log_type_enabled(v403, OS_LOG_TYPE_ERROR);
          if (!(_DWORD)result)
            return result;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3626;
          v398 = "%25s:%-5d Fatal Sound Event data error: Unexpected message processing subtree";
LABEL_614:
          v405 = v403;
          v408 = 18;
LABEL_615:
          _os_log_impl(&dword_2164CC000, v405, OS_LOG_TYPE_ERROR, v398, buf, v408);
          return 0;
        }
        goto LABEL_446;
      case 6:
        if (!*(_BYTE *)v458)
          goto LABEL_445;
        v403 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result) + 688));
        result = os_log_type_enabled(v403, OS_LOG_TYPE_ERROR);
        if (!(_DWORD)result)
          return result;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3646;
        v398 = "%25s:%-5d Fatal Sound Event data error: Bad randomweight message encountered";
        goto LABEL_614;
      case 7:
        if (v457 >= 15)
        {
          v403 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result)
                                                            + 688));
          result = os_log_type_enabled(v403, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3661;
            v398 = "%25s:%-5d Fatal Sound Event data error: Failed to push random stack";
            goto LABEL_614;
          }
          return result;
        }
        v27 = v457 + 1;
        v73 = *((_DWORD *)v458 + 2);
        v74 = *((_DWORD *)v458 + 3);
        v75 = &v474[16 * v27];
        *v75 = *(_OWORD *)&v474[16 * v457];
        if (*(_BYTE *)v75)
          v76 = v74 == v73;
        else
          v76 = 0;
        v77 = v76;
        v458 = (float *)&v474[16 * v27];
        *(_BYTE *)v75 = v77;
        goto LABEL_63;
      case 8:
        v457 -= v457 > 0;
        v458 = (float *)&v474[16 * v457];
        ++*((_DWORD *)v458 + 3);
        goto LABEL_445;
      case 9:
        if (*(_DWORD *)(*((_QWORD *)v8 + 3) + 40) > v9)
        {
          v45 = v9;
          v4 = (int)v9;
          v46 = *((_QWORD *)v8 + 7);
          v33 = v45;
          v47 = (_BYTE *)(v46 + 136 * (int)v45);
          v48 = v47[24];
          if (!*(_BYTE *)v458)
          {
            if (v48 != 5)
              goto LABEL_362;
LABEL_159:
            *(_OWORD *)buf = *(_OWORD *)(v46 + 136 * (int)v4 + 8);
            Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 3u, buf, 0x18uLL);
            Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v47, 6u);
            goto LABEL_362;
          }
          if (v48 == 5)
            goto LABEL_159;
          v36 = (uint64_t *)(v460 + v10);
          if (v48 == 4)
          {
LABEL_231:
            result = Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v454, (Phase::ActionTreeObject *)a2, v33, (uint64_t)(v36 + 1), a3, a4, v458[1]);
            if ((result & 1) != 0)
              goto LABEL_362;
            goto LABEL_481;
          }
          if (v48 != 1)
            goto LABEL_362;
          if (!*v47 || (v49 = v46 + 136 * (int)v4, v51 = *(_QWORD *)(v49 + 32), v50 = (uint64_t *)(v49 + 32), !v51))
          {
            v210 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result)
                                                              + 688));
            result = os_log_type_enabled(v210, OS_LOG_TYPE_ERROR);
            if ((_DWORD)result)
            {
              v211 = *v36;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2032;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v211;
              v58 = v210;
              v59 = "%25s:%-5d Fatal Sound Event data error: push stream leaf node is expected to be already configured %llu";
LABEL_313:
              _os_log_impl(&dword_2164CC000, v58, OS_LOG_TYPE_ERROR, v59, buf, 0x1Cu);
            }
LABEL_481:
            v8 = (Phase::ActionTreeObject *)a2;
            v9 = v33;
            goto LABEL_446;
          }
          v52 = v46 + 136 * (int)v4;
          *(_QWORD *)(v52 + 72) = v36[5];
          if (*(_BYTE *)(v52 + 64) != 3)
            goto LABEL_629;
          v53 = v36 + 1;
          v54 = Phase::ActionTreeObject::FindSubmixIdFromHashName((Phase::ActionTreeObject *)a2, v36[1]);
          if (!(v54 | v55))
          {
            v56 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v54) + 688));
            result = os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
            if ((_DWORD)result)
            {
              v57 = *v53;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2075;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v57;
              v58 = v56;
              v59 = "%25s:%-5d Fatal Sound Event data error: Submix %llx not registered.";
              goto LABEL_313;
            }
            goto LABEL_481;
          }
          *(_DWORD *)&buf[32] = 6553601;
          v489[1] = 0;
          v489[2] = 0;
          v450 = v46 + 136 * (int)v4;
          *(_OWORD *)buf = *(_OWORD *)(v450 + 8);
          *(_QWORD *)&buf[16] = v54;
          *(_QWORD *)&buf[24] = v55;
          v482 = 1;
          v483 = 0;
          v484 = 0;
          v487 = v36[2];
          v488 = v36[3];
          v489[0] = *((unsigned __int8 *)v36 + 56);
          v481 = v36[8];
          *(_OWORD *)&v489[3] = xmmword_2166F7330;
          v252 = *(id *)(*v50 + 104);
          objc_msgSend(v252, "channelLayout");
          v253 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)&buf[32] = objc_msgSend(v253, "layoutTag");

          v254 = objc_msgSend(v252, "streamDescription");
          v485[0] = *(_OWORD *)v254;
          v485[1] = *(_OWORD *)(v254 + 16);
          v486 = *(_QWORD *)(v254 + 32);
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 7u, buf, 0xA8uLL);
          v255 = Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v454, (Phase::ActionTreeObject *)a2, v33, (uint64_t)v53, a3, a4, v458[1]);
          if ((v255 & 1) != 0)
          {
            v256 = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)v255);
            v451 = (uint64_t *)(v450 + 8);
            if (*((_BYTE *)v256 + 696))
            {
              v257 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v256) + 688));
              v258 = v257;
              v259 = *v451;
              if ((unint64_t)(*v451 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v257))
              {
                *(_DWORD *)__src = 134217984;
                *(_QWORD *)&__src[4] = v259;
                _os_signpost_emit_with_name_impl(&dword_2164CC000, v258, OS_SIGNPOST_INTERVAL_BEGIN, v259, "Phase_Generator_Prepare", "Generator ID %llu Prepare", __src, 0xCu);
              }

            }
            caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::_addOrReplace(v438, *v451, *(_QWORD *)(v46 + 136 * (int)v4 + 16), *v50);
            Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v47, 2u);
            v260 = *(unsigned __int8 *)(a2 + 144);
            if ((v260 - 2) < 2)
            {
LABEL_391:
              if (v260 != 4 && !*(_BYTE *)(a2 + 200))
                goto LABEL_399;
            }
            else if (v260 != 4)
            {
              if (v260 != 8)
                goto LABEL_399;
              goto LABEL_391;
            }
            if (Phase::ActionTreeManager::StartPreparedVoice(a2, (uint64_t)v47, a4))
            {
              Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v47, 4u);
              v262 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v261);
              if (*((_BYTE *)v262 + 696))
              {
                v263 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v262) + 688));
                v264 = v263;
                v265 = *v451;
                if ((unint64_t)(*v451 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v263))
                {
                  *(_DWORD *)__src = 134217984;
                  *(_QWORD *)&__src[4] = v265;
                  _os_signpost_emit_with_name_impl(&dword_2164CC000, v264, OS_SIGNPOST_INTERVAL_BEGIN, v265, "Phase_Generator_Start", "Generator ID %llu Start", __src, 0xCu);
                }

              }
LABEL_399:

              goto LABEL_362;
            }
          }

          goto LABEL_481;
        }
        v98 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result) + 688));
        result = os_log_type_enabled(v98, OS_LOG_TYPE_ERROR);
        if (!(_DWORD)result)
          goto LABEL_363;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2005;
        v25 = v98;
        v26 = "%25s:%-5d Fatal Sound Event data error: Encountered more leafnodes than is allowed";
LABEL_115:
        v99 = 18;
LABEL_116:
        _os_log_impl(&dword_2164CC000, v25, OS_LOG_TYPE_ERROR, v26, buf, v99);
LABEL_363:
        v8 = (Phase::ActionTreeObject *)a2;
LABEL_446:
        if (v10 >= v459)
          return 1;
        continue;
      case 10:
        if (*(_DWORD *)(*((_QWORD *)v8 + 3) + 40) <= v9)
        {
          v403 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result)
                                                            + 688));
          result = os_log_type_enabled(v403, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2789;
            v398 = "%25s:%-5d Fatal Sound Event data error: Encountered more leafnodes than is allowed";
            goto LABEL_614;
          }
          return result;
        }
        v84 = v460 + v10;
        v85 = v9;
        v4 = (int)v9;
        v61 = *((_QWORD *)v8 + 7);
        v448 = v85;
        v62 = (unsigned __int8 *)(v61 + 136 * v85);
        v86 = v62[24];
        if (!*(_BYTE *)v458)
        {
          if (v86 == 4)
          {
            v104 = *(_QWORD *)(v84 + 56);
            if ((unint64_t)(v104 - 1) < 3)
            {
LABEL_123:
              Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v62, 7u);
              *(_OWORD *)buf = *(_OWORD *)(v61 + 136 * (int)v4 + 8);
              result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 1u, buf, 0x10uLL);
              goto LABEL_442;
            }
            if (!v104)
            {
LABEL_310:
              Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v62, 6u);
              *(_OWORD *)buf = *(_OWORD *)(v61 + 136 * (int)v4 + 8);
              result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 3u, buf, 0x18uLL);
              goto LABEL_442;
            }
          }
LABEL_443:
          LODWORD(v9) = v448;
LABEL_444:
          v9 = (v9 + 1);
LABEL_445:
          v10 += *(unsigned int *)(v11 + 4);
          goto LABEL_446;
        }
        if ((v86 - 7) < 2)
        {
          if ((unint64_t)(*(_QWORD *)(v84 + 56) - 1) <= 2)
          {
            result = Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v454, v8, v448, v84 + 8, a3, a4, v458[1]);
            if (!(_DWORD)result)
              return result;
            goto LABEL_46;
          }
        }
        else if (v86 != 1)
        {
          if (v86 != 4)
            goto LABEL_443;
          result = Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v454, v8, v448, v84 + 8, a3, a4, v458[1]);
          if (!(_DWORD)result)
            return result;
          v8 = (Phase::ActionTreeObject *)a2;
          if (*(_BYTE *)(v84 + 88) != 1)
            goto LABEL_443;
          v87 = *(unsigned __int8 *)(v84 + 168);
          if (v87 != 255)
          {
            *(_QWORD *)__src = *(_QWORD *)(v84 + 96);
            result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v87, (double *)__src, a3, (Phase::ActionTreeObject *)a2);
            if (!(_DWORD)result)
              return result;
            *(_OWORD *)buf = *(_OWORD *)(v61 + 136 * (int)v4 + 8);
            *(_QWORD *)&buf[16] = 0xD5446B03D63B0AC2;
            *(_QWORD *)&buf[24] = *(_QWORD *)__src;
            result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
            v8 = (Phase::ActionTreeObject *)a2;
          }
          v88 = *(unsigned __int8 *)(v84 + 169);
          if (v88 != 255)
          {
            *(_QWORD *)__src = *(_QWORD *)(v84 + 104);
            result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v88, (double *)__src, a3, v8);
            if (!(_DWORD)result)
              return result;
            *(_OWORD *)buf = *(_OWORD *)(v61 + 136 * (int)v4 + 8);
            *(_QWORD *)&buf[16] = 0x689B3C6AD0C10930;
            *(_QWORD *)&buf[24] = *(_QWORD *)__src;
            result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
            v8 = (Phase::ActionTreeObject *)a2;
          }
          v89 = *(unsigned __int8 *)(v84 + 170);
          if (v89 != 255)
          {
            *(_QWORD *)__src = *(_QWORD *)(v84 + 112);
            result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v89, (double *)__src, a3, v8);
            if (!(_DWORD)result)
              return result;
            *(_OWORD *)buf = *(_OWORD *)(v61 + 136 * (int)v4 + 8);
            *(_QWORD *)&buf[16] = 0x6256579BE092E3DDLL;
            *(_QWORD *)&buf[24] = *(_QWORD *)__src;
            result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
            v8 = (Phase::ActionTreeObject *)a2;
          }
          v90 = *(unsigned __int8 *)(v84 + 171);
          if (v90 != 255)
          {
            *(_QWORD *)__src = *(_QWORD *)(v84 + 120);
            result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v90, (double *)__src, a3, v8);
            if (!(_DWORD)result)
              return result;
            *(_OWORD *)buf = *(_OWORD *)(v61 + 136 * (int)v4 + 8);
            *(_QWORD *)&buf[16] = 0x1EF815B19E7DFB31;
            *(_QWORD *)&buf[24] = *(_QWORD *)__src;
            result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
            v8 = (Phase::ActionTreeObject *)a2;
          }
          v91 = *(unsigned __int8 *)(v84 + 172);
          if (v91 != 255)
          {
            *(_QWORD *)__src = *(_QWORD *)(v84 + 128);
            result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v91, (double *)__src, a3, v8);
            if (!(_DWORD)result)
              return result;
            *(_OWORD *)buf = *(_OWORD *)(v61 + 136 * (int)v4 + 8);
            *(_QWORD *)&buf[16] = 0xF12C986EFB9BD1AELL;
            *(_QWORD *)&buf[24] = *(_QWORD *)__src;
            result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
            v8 = (Phase::ActionTreeObject *)a2;
          }
          v92 = *(unsigned __int8 *)(v84 + 173);
          if (v92 != 255)
          {
            *(_QWORD *)__src = *(_QWORD *)(v84 + 136);
            result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v92, (double *)__src, a3, v8);
            if (!(_DWORD)result)
              return result;
            *(_OWORD *)buf = *(_OWORD *)(v61 + 136 * (int)v4 + 8);
            *(_QWORD *)&buf[16] = 0x1F3CFA678783F49FLL;
            *(_QWORD *)&buf[24] = *(_QWORD *)__src;
            result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
            v8 = (Phase::ActionTreeObject *)a2;
          }
          v93 = *(unsigned __int8 *)(v84 + 174);
          if (v93 != 255)
          {
            *(_QWORD *)__src = *(_QWORD *)(v84 + 144);
            result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v93, (double *)__src, a3, v8);
            if (!(_DWORD)result)
              return result;
            *(_OWORD *)buf = *(_OWORD *)(v61 + 136 * (int)v4 + 8);
            *(_QWORD *)&buf[16] = 0x321AF1D82F39218ALL;
            *(_QWORD *)&buf[24] = *(_QWORD *)__src;
            result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
            v8 = (Phase::ActionTreeObject *)a2;
          }
          v94 = *(unsigned __int8 *)(v84 + 175);
          if (v94 != 255)
          {
            *(_QWORD *)__src = *(_QWORD *)(v84 + 152);
            result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v94, (double *)__src, a3, v8);
            if (!(_DWORD)result)
              return result;
            *(_OWORD *)buf = *(_OWORD *)(v61 + 136 * (int)v4 + 8);
            *(_QWORD *)&buf[16] = 0x10483E0F24E3A555;
            *(_QWORD *)&buf[24] = *(_QWORD *)__src;
            result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
            v8 = (Phase::ActionTreeObject *)a2;
          }
          v95 = *(unsigned __int8 *)(v84 + 176);
          if (v95 == 255)
            goto LABEL_443;
          *(_QWORD *)__src = *(_QWORD *)(v84 + 160);
          result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v95, (double *)__src, a3, v8);
          if (!(_DWORD)result)
            return result;
          *(_OWORD *)buf = *(_OWORD *)(v61 + 136 * (int)v4 + 8);
          *(_QWORD *)&buf[16] = 0xA19D398D00200576;
          *(_QWORD *)&buf[24] = *(_QWORD *)__src;
          result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
          goto LABEL_442;
        }
        MEMORY[0x2199FA6B8](buf);
        v443 = *(_QWORD *)buf;
        v461 = *(_OWORD *)buf;
        buf[0] = 6;
        v109 = Phase::ActionTreeObject::LeafNodeInfo::Configure((uint64_t)v62, &v461, buf, (_QWORD *)(v84 + 64), v440, (_OWORD *)a2);
        if (!v109)
        {
          v404 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v109) + 688));
          if (!os_log_type_enabled(v404, OS_LOG_TYPE_ERROR))
            return 0;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2835;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v443;
          v398 = "%25s:%-5d Fatal Sound Event data error: could not configure procedure leaf node %llu";
          v405 = v404;
LABEL_598:
          v408 = 28;
          goto LABEL_615;
        }
        if (!*v62)
          goto LABEL_629;
        v110 = Phase::ActionTreeObject::FindSubmixIdFromHashName((Phase::ActionTreeObject *)a2, *(_QWORD *)(v84 + 8));
        v111 = v110;
        v113 = v112;
        if (!(v110 | v112))
        {
          v406 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v110) + 688));
          if (!os_log_type_enabled(v406, OS_LOG_TYPE_ERROR))
            return 0;
          v407 = *(_QWORD *)(v84 + 8);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2844;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v407;
          v398 = "%25s:%-5d Fatal Sound Event data error: Submix %llx not registered.";
          v405 = v406;
          goto LABEL_598;
        }
        if (!*v62
          || *(_BYTE *)(v61 + 136 * (int)v4 + 64) != 6
          || *(_QWORD *)(v61 + 136 * (int)v4 + 88) != *(_QWORD *)(v84 + 64))
        {
          goto LABEL_629;
        }
        Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v62, 2u);
        *(_QWORD *)(v61 + 136 * (int)v4 + 72) = *(_QWORD *)(v84 + 40);
        if (*(_BYTE *)(v84 + 88) == 1)
        {
          *(_QWORD *)&v485[0] = 0;
          v4 = v61 + 136 * (int)v4;
          *(_OWORD *)buf = *(_OWORD *)(v4 + 8);
          *(_QWORD *)&buf[16] = v111;
          *(_QWORD *)&buf[24] = v113;
          *(_DWORD *)&buf[32] = 6553601;
          v482 = 1;
          v483 = *(_QWORD *)(v84 + 16);
          v484 = *(_QWORD *)(v84 + 24);
          v481 = 0xC028000000000000;
          *(_OWORD *)((char *)v485 + 8) = *(_OWORD *)(v84 + 56);
          DWORD2(v485[1]) = *(_DWORD *)(v84 + 72);
          v486 = *(_QWORD *)(v84 + 80);
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 8u, buf, 0x70uLL);
          v115 = (Phase::Logger *)Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v454, (Phase::ActionTreeObject *)a2, v448, v84 + 8, a3, a4, v458[1]);
          if (!(_DWORD)v115)
            return 0;
          v116 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v115);
          v117 = (os_signpost_id_t *)(v4 + 8);
          if (*((_BYTE *)v116 + 696))
          {
            v118 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v116)
                                                                                                 + 688)));
            v119 = v118;
            v120 = *v117;
            if (*v117 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v118))
            {
              *(_DWORD *)__src = 134217984;
              *(_QWORD *)&__src[4] = v120;
              _os_signpost_emit_with_name_impl(&dword_2164CC000, v119, OS_SIGNPOST_INTERVAL_BEGIN, v120, "Phase_Generator_Prepare", "Generator ID %llu Prepare", __src, 0xCu);
            }

          }
          *(_QWORD *)&v465 = 0;
          v121 = *(unsigned __int8 *)(v84 + 168);
          if (v121 == 255)
          {
            *(_QWORD *)&v465 = *(_QWORD *)(v84 + 96);
          }
          else if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v121, (double *)&v465, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)
          {
            return 0;
          }
          v473 = 0;
          v178 = *(unsigned __int8 *)(v84 + 169);
          if (v178 == 255)
          {
            v473 = *(Phase::Logger **)(v84 + 104);
          }
          else if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v178, (double *)&v473, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)
          {
            return 0;
          }
          v472 = 0.0;
          v179 = *(unsigned __int8 *)(v84 + 170);
          if (v179 == 255)
          {
            v472 = *(double *)(v84 + 112);
          }
          else if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v179, &v472, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)
          {
            return 0;
          }
          v471 = 0.0;
          v195 = *(unsigned __int8 *)(v84 + 171);
          if (v195 == 255)
          {
            v471 = *(double *)(v84 + 120);
          }
          else if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v195, &v471, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)
          {
            return 0;
          }
          v470 = 0.0;
          v196 = *(unsigned __int8 *)(v84 + 172);
          if (v196 == 255)
          {
            v470 = *(double *)(v84 + 128);
          }
          else if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v196, &v470, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)
          {
            return 0;
          }
          v469 = 0.0;
          v197 = *(unsigned __int8 *)(v84 + 173);
          if (v197 == 255)
          {
            v469 = *(double *)(v84 + 136);
          }
          else if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v197, &v469, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)
          {
            return 0;
          }
          v468 = 0.0;
          v200 = *(unsigned __int8 *)(v84 + 174);
          if (v200 == 255)
          {
            v468 = *(double *)(v84 + 144);
          }
          else if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v200, &v468, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)
          {
            return 0;
          }
          v467 = 0.0;
          v201 = *(unsigned __int8 *)(v84 + 175);
          if (v201 == 255)
          {
            v467 = *(double *)(v84 + 152);
          }
          else if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v201, &v467, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)
          {
            return 0;
          }
          v466 = 0.0;
          v202 = *(unsigned __int8 *)(v84 + 176);
          if (v202 == 255)
          {
            v203 = (double *)(v84 + 160);
          }
          else
          {
            if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v454, (char)v202, &v466, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)return 0;
            v203 = &v466;
          }
          v204 = *(_QWORD *)v203;
          *(_OWORD *)__src = *(_OWORD *)v117;
          *(_QWORD *)&__src[16] = 0xD5446B03D63B0AC2;
          *(_QWORD *)&__src[24] = v465;
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          *(_QWORD *)&__src[16] = 0x689B3C6AD0C10930;
          *(_QWORD *)&__src[24] = v473;
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          *(_QWORD *)&__src[16] = 0x6256579BE092E3DDLL;
          *(double *)&__src[24] = v472;
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          *(_QWORD *)&__src[16] = 0x1EF815B19E7DFB31;
          *(double *)&__src[24] = v471;
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          *(_QWORD *)&__src[16] = 0xF12C986EFB9BD1AELL;
          *(double *)&__src[24] = v470;
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          *(_QWORD *)&__src[16] = 0x1F3CFA678783F49FLL;
          *(double *)&__src[24] = v469;
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          *(_QWORD *)&__src[16] = 0x321AF1D82F39218ALL;
          *(double *)&__src[24] = v468;
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          *(_QWORD *)&__src[16] = 0x10483E0F24E3A555;
          *(double *)&__src[24] = v467;
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          *(_QWORD *)&__src[16] = 0xA19D398D00200576;
          *(_QWORD *)&__src[24] = v204;
          result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          v205 = *(unsigned __int8 *)(a2 + 144);
          if ((v205 - 2) >= 2)
          {
            if (v205 == 4)
              goto LABEL_286;
            if (v205 != 8)
              goto LABEL_442;
          }
          if (v205 != 4 && !*(_BYTE *)(a2 + 200))
            goto LABEL_442;
LABEL_286:
          if (!Phase::ActionTreeManager::StartPreparedVoice(a2, (uint64_t)v62, a4))
            return 0;
          Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v62, 4u);
          result = Phase::Logger::GetInstancePtr(v206);
          if (*(_BYTE *)(result + 696))
          {
            v207 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result)
                                                                                                 + 688)));
            v208 = v207;
            v209 = *v117;
            if (*v117 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v207))
            {
              *(_DWORD *)__src = 134217984;
              *(_QWORD *)&__src[4] = v209;
              _os_signpost_emit_with_name_impl(&dword_2164CC000, v208, OS_SIGNPOST_INTERVAL_BEGIN, v209, "Phase_Generator_Start", "Generator ID %llu Start", __src, 0xCu);
            }

          }
          goto LABEL_442;
        }
        v403 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v114) + 688));
        if (os_log_type_enabled(v403, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2860;
          v398 = "%25s:%-5d Fatal Sound Event data error: Procedure Type is set to None.";
          goto LABEL_614;
        }
        return 0;
      case 11:
        if (*(_DWORD *)(*((_QWORD *)v8 + 3) + 40) <= v9)
        {
          v96 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result) + 688));
          result = os_log_type_enabled(v96, OS_LOG_TYPE_ERROR);
          v8 = (Phase::ActionTreeObject *)a2;
          if ((_DWORD)result)
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2271;
            _os_log_impl(&dword_2164CC000, v96, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal Sound Event data error: Encountered more leafnodes than is allowed", buf, 0x12u);
          }
          goto LABEL_446;
        }
        v15 = *((_QWORD *)v8 + 7);
        v16 = (_BYTE *)(v15 + 136 * (int)v9);
        v17 = v16[24];
        if (!*(_BYTE *)v458)
        {
          if (v17 != 5)
            goto LABEL_444;
LABEL_227:
          *(_OWORD *)buf = *(_OWORD *)(v15 + 136 * (int)v9 + 8);
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 3u, buf, 0x18uLL);
          Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v15 + 136 * (int)v9, 6u);
LABEL_228:
          v8 = (Phase::ActionTreeObject *)a2;
          goto LABEL_444;
        }
        if (v17 == 5)
          goto LABEL_227;
        v4 = v460 + v10;
        if (v17 == 4)
        {
          result = Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v454, v8, v9, v4 + 24, a3, a4, v458[1]);
          v8 = (Phase::ActionTreeObject *)a2;
          if ((result & 1) != 0)
            goto LABEL_444;
          goto LABEL_446;
        }
        if (v17 != 1)
          goto LABEL_444;
        MEMORY[0x2199FA6B8](buf);
        v446 = *(_QWORD *)buf;
        v461 = *(_OWORD *)buf;
        __src[0] = 5;
        *(_QWORD *)buf = 1;
        v18 = Phase::ActionTreeObject::LeafNodeInfo::Configure(v15 + 136 * (int)v9, &v461, __src, buf, v440, (_OWORD *)a2);
        if (!v18)
        {
          v221 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v18) + 688));
          result = os_log_type_enabled(v221, OS_LOG_TYPE_ERROR);
          if (!(_DWORD)result)
            goto LABEL_363;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2302;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v446;
          v25 = v221;
          v26 = "%25s:%-5d Fatal Sound Event data error: could not configure pull stream leaf node %llu";
          goto LABEL_337;
        }
        if (!*v16)
          goto LABEL_629;
        v19 = Phase::ActionTreeObject::FindSubmixIdFromHashName((Phase::ActionTreeObject *)a2, *(_QWORD *)(v4 + 24));
        v20 = v19;
        v22 = v21;
        if (!(v19 | v21))
        {
          v23 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v19) + 688));
          result = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
          if (!(_DWORD)result)
            goto LABEL_363;
          v24 = *(_QWORD *)(v4 + 24);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2311;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v24;
          v25 = v23;
          v26 = "%25s:%-5d Fatal Sound Event data error: Submix %llx not registered.";
LABEL_337:
          v99 = 28;
          goto LABEL_116;
        }
        if (!*v16 || *(_BYTE *)(v15 + 136 * (int)v9 + 64) != 5 || *(_QWORD *)(v15 + 136 * (int)v9 + 88) != 1)
LABEL_629:
          std::terminate();
        Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v15 + 136 * (int)v9, 2u);
        v242 = v15 + 136 * (int)v9;
        *(_QWORD *)(v242 + 72) = *(_QWORD *)(v4 + 56);
        *(_OWORD *)buf = *(_OWORD *)(v242 + 8);
        *(_QWORD *)&buf[16] = v20;
        *(_QWORD *)&buf[24] = v22;
        v482 = 3;
        v483 = 0;
        v484 = 0;
        v487 = *(_QWORD *)(v4 + 32);
        v488 = *(_QWORD *)(v4 + 40);
        v489[0] = *(unsigned __int8 *)(v4 + 72);
        v481 = *(_QWORD *)(v4 + 80);
        *(_OWORD *)&v489[1] = *(_OWORD *)(v4 + 8);
        *(_OWORD *)&v489[3] = xmmword_2166F7330;
        v243 = *(unsigned int *)(v4 + 88);
        *(_DWORD *)&buf[32] = *(_DWORD *)(v4 + 88);
        memset(v485, 0, sizeof(v485));
        v486 = 0;
        if (*v440)
          goto LABEL_368;
        Phase::Controller::TaskManager::GetObjCService<ExternalStreamManager>(*((Phase::Logger **)v454 + 28), 15);
        v436 = (void *)objc_claimAutoreleasedReturnValue();
        Phase::UniqueObjectId::CreateNSUUID((Phase::UniqueObjectId *)(v4 + 8));
        v329 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v465 = 0;
        v432 = (void *)v329;
        objc_msgSend(v436, "formatForStream:error:", v329, &v465);
        v330 = objc_claimAutoreleasedReturnValue();
        v331 = (Phase::Logger *)(id)v465;
        v452 = v331;
        v434 = (void *)v330;
        if (v330)
        {
          v430 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDB17E8]), "initWithLayoutTag:", v243);
          v332 = objc_alloc(MEMORY[0x24BDB1818]);
          objc_msgSend(v434, "sampleRate");
          v428 = (void *)objc_msgSend(v332, "initStandardFormatWithSampleRate:channelLayout:", v430);
          v333 = objc_msgSend(v428, "streamDescription");
          v485[0] = *(_OWORD *)v333;
          v485[1] = *(_OWORD *)(v333 + 16);
          v486 = *(_QWORD *)(v333 + 32);
          v334 = v15 + 136 * (int)v9;
          v336 = *(_QWORD *)(v334 + 32);
          v335 = (Phase::Controller::StreamRenderer **)(v334 + 32);
          if (v336)
          {
            v337 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v333)
                                                              + 688));
            if (os_log_type_enabled(v337, OS_LOG_TYPE_ERROR))
            {
              v338 = *(void **)v4;
              *(_DWORD *)__src = 136315650;
              *(_QWORD *)&__src[4] = "ActionTreeManager.mm";
              *(_WORD *)&__src[12] = 1024;
              *(_DWORD *)&__src[14] = 2380;
              *(_WORD *)&__src[18] = 2048;
              *(_QWORD *)&__src[20] = v338;
              _os_log_impl(&dword_2164CC000, v337, OS_LOG_TYPE_ERROR, "%25s:%-5d Warning: overriding the stream renderer for pull stream %llu", __src, 0x1Cu);
            }
          }
          v339 = *(unsigned __int8 *)(v4 + 72);
          v340 = *(double *)(v4 + 80);
          v473 = v452;
          if (v436)
          {
            objc_msgSend(v436, "createRendererForStream:outputChannelLayout:normalize:targetLKFS:error:", v432, v243, v339 != 0, &v473, v340);
            v341 = v473;

            v342 = *(Phase::Controller::StreamRenderer **)__src;
            v452 = v341;
          }
          else
          {
            v342 = 0;
          }
          *(_QWORD *)__src = 0;
          std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100](v335, v342);
          std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100]((Phase::Controller::StreamRenderer **)__src, 0);
          if (*v335)
          {
            v360 = v428;
            v361 = (Phase::Controller::StreamRenderer *)Phase::Controller::StreamRenderer::Prepare(*v335);
            if ((_DWORD)v361 && (v361 = *v335, *((_QWORD *)*v335 + 6)) && *((_BYTE *)v361 + 136))
            {
              v362 = (Phase::Logger *)Phase::Controller::StreamRenderer::Start(v361);
              if ((v362 & 1) != 0)
              {
                v354 = 0;
LABEL_536:

                goto LABEL_537;
              }
              v396 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v362) + 688));
              v360 = v428;
              if (os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
              {
                v397 = *(void **)v4;
                *(_DWORD *)__src = 136315650;
                *(_QWORD *)&__src[4] = "ActionTreeManager.mm";
                *(_WORD *)&__src[12] = 1024;
                *(_DWORD *)&__src[14] = 2408;
                *(_WORD *)&__src[18] = 2048;
                *(_QWORD *)&__src[20] = v397;
                v364 = v396;
                v365 = "%25s:%-5d Failed to start stream renderer for pull stream %llu";
                v366 = 28;
LABEL_534:
                _os_log_impl(&dword_2164CC000, v364, OS_LOG_TYPE_ERROR, v365, __src, v366);
              }
            }
            else
            {
              v363 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v361) + 688));
              v360 = v428;
              if (os_log_type_enabled(v363, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__src = 136315394;
                *(_QWORD *)&__src[4] = "ActionTreeManager.mm";
                *(_WORD *)&__src[12] = 1024;
                *(_DWORD *)&__src[14] = 2400;
                v364 = v363;
                v365 = "%25s:%-5d Failed to prepare stream renderer!";
                v366 = 18;
                goto LABEL_534;
              }
            }
          }
          else
          {
            v367 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 688));
            v360 = v428;
            if (os_log_type_enabled(v367, OS_LOG_TYPE_ERROR))
            {
              v368 = *(void **)v4;
              *(_DWORD *)__src = 136315906;
              *(_QWORD *)&__src[4] = "ActionTreeManager.mm";
              *(_WORD *)&__src[12] = 1024;
              *(_DWORD *)&__src[14] = 2392;
              *(_WORD *)&__src[18] = 2048;
              *(_QWORD *)&__src[20] = v368;
              *(_WORD *)&__src[28] = 2112;
              *(_QWORD *)&__src[30] = v452;
              v364 = v367;
              v365 = "%25s:%-5d Failed to create stream renderer for pull stream %llu (%@)";
              v366 = 38;
              goto LABEL_534;
            }
          }
          v354 = 1;
          goto LABEL_536;
        }
        v353 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v331) + 688));
        if (os_log_type_enabled(v353, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__src = 136315906;
          *(_QWORD *)&__src[4] = "ActionTreeManager.mm";
          *(_WORD *)&__src[12] = 1024;
          *(_DWORD *)&__src[14] = 2360;
          *(_WORD *)&__src[18] = 2112;
          *(_QWORD *)&__src[20] = v432;
          *(_WORD *)&__src[28] = 2112;
          *(_QWORD *)&__src[30] = v452;
          _os_log_impl(&dword_2164CC000, v353, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal Sound Event data error: could not get stream format for stream uuid %@ (%@)", __src, 0x26u);
        }
        v354 = 1;
LABEL_537:

        if (v354)
          goto LABEL_363;
LABEL_368:
        Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 7u, buf, 0xA8uLL);
        result = Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v454, (Phase::ActionTreeObject *)a2, v9, v4 + 24, a3, a4, v458[1]);
        if ((_DWORD)result)
        {
          v244 = (uint64_t *)(v15 + 136 * (int)v9 + 8);
          v245 = *(_QWORD *)(v15 + 136 * (int)v9 + 32);
          if (v245)
            caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::_addOrReplace(v438, *v244, *(_QWORD *)(v15 + 136 * (int)v9 + 16), v245);
          result = Phase::Logger::GetInstancePtr((Phase::Logger *)result);
          if (*(_BYTE *)(result + 696))
          {
            v246 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result)
                                                                                                 + 688)));
            v247 = v246;
            v248 = *v244;
            if (v248 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v246))
            {
              *(_DWORD *)__src = 134217984;
              *(_QWORD *)&__src[4] = v248;
              _os_signpost_emit_with_name_impl(&dword_2164CC000, v247, OS_SIGNPOST_INTERVAL_BEGIN, v248, "Phase_Generator_Prepare", "Generator ID %llu Prepare", __src, 0xCu);
            }

          }
          goto LABEL_228;
        }
        goto LABEL_363;
      case 12:
        if (*(_DWORD *)(*((_QWORD *)v8 + 3) + 40) <= v9)
        {
          v97 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result) + 688));
          result = os_log_type_enabled(v97, OS_LOG_TYPE_ERROR);
          if (!(_DWORD)result)
            goto LABEL_363;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2542;
          v25 = v97;
          v26 = "%25s:%-5d Fatal Sound Event data error: Encountered more leafnodes than is allowed";
          goto LABEL_115;
        }
        v31 = v9;
        v4 = (int)v9;
        v32 = *((_QWORD *)v8 + 7);
        v33 = v31;
        v34 = v32 + 136 * (int)v31;
        v35 = *(unsigned __int8 *)(v34 + 24);
        if (!*(_BYTE *)v458)
        {
          if (v35 != 5)
            goto LABEL_362;
LABEL_157:
          *(_OWORD *)buf = *(_OWORD *)(v32 + 136 * (int)v4 + 8);
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 3u, buf, 0x18uLL);
          Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v34, 6u);
          goto LABEL_362;
        }
        if (v35 == 5)
          goto LABEL_157;
        v36 = (uint64_t *)(v460 + v10);
        if (v35 == 4)
          goto LABEL_231;
        if (v35 != 1)
          goto LABEL_362;
        Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(*((Phase::Logger **)v454 + 28), 1);
        v447 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", objc_msgSend(v447, "getString:", *v36), 4);
        v441 = (void *)objc_claimAutoreleasedReturnValue();
        WeakRetained = objc_loadWeakRetained(location);
        objc_msgSend(WeakRetained, "pullStreamNodes");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "objectForKeyedSubscript:", v441);
        v39 = (void *)objc_claimAutoreleasedReturnValue();

        if ((Phase::ActionTreeManager::ConfigureStreamNode((uint64_t)v454, v34, v39, 4) & 1) == 0)
          goto LABEL_360;
        v40 = v36 + 1;
        v41 = Phase::ActionTreeObject::FindSubmixIdFromHashName((Phase::ActionTreeObject *)a2, v36[1]);
        if (!(v41 | v42))
        {
          v43 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v41) + 688));
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            v44 = *v40;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2611;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v44;
            _os_log_impl(&dword_2164CC000, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal Sound Event data error: Submix %llx not registered.", buf, 0x1Cu);
          }
          goto LABEL_360;
        }
        v224 = v32 + 136 * (int)v4;
        *(_QWORD *)(v224 + 72) = v36[5];
        *(_DWORD *)&buf[32] = 6553601;
        v489[1] = 0;
        v489[2] = 0;
        *(_OWORD *)buf = *(_OWORD *)(v224 + 8);
        *(_QWORD *)&buf[16] = v41;
        *(_QWORD *)&buf[24] = v42;
        v482 = 4;
        v483 = 0;
        v484 = 0;
        v487 = v36[2];
        v488 = v36[3];
        v489[0] = *((unsigned __int8 *)v36 + 56);
        v481 = v36[8];
        *(_OWORD *)&v489[3] = xmmword_2166F7330;
        objc_msgSend(v39, "format");
        v225 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v225, "channelLayout");
        v226 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)&buf[32] = objc_msgSend(v226, "layoutTag");

        objc_msgSend(v39, "format");
        v227 = (void *)objc_claimAutoreleasedReturnValue();
        v228 = objc_msgSend(v227, "streamDescription");
        v485[0] = *(_OWORD *)v228;
        v485[1] = *(_OWORD *)(v228 + 16);
        v486 = *(_QWORD *)(v228 + 32);

        Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 7u, buf, 0xA8uLL);
        if ((Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v454, (Phase::ActionTreeObject *)a2, v33, (uint64_t)v40, a3, a4, v458[1]) & 1) == 0)goto LABEL_360;
        Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v34, 2u);
        v230 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v229);
        v231 = (uint64_t *)(v32 + 136 * (int)v4 + 8);
        if (*((_BYTE *)v230 + 696))
        {
          v232 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v230)
                                                                                               + 688)));
          v233 = v232;
          v234 = *v231;
          if ((unint64_t)(*v231 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v232))
          {
            *(_DWORD *)__src = 134217984;
            *(_QWORD *)&__src[4] = v234;
            _os_signpost_emit_with_name_impl(&dword_2164CC000, v233, OS_SIGNPOST_INTERVAL_BEGIN, v234, "Phase_Generator_Prepare", "Generator ID %llu Prepare", __src, 0xCu);
          }

        }
        caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::_addOrReplace(v438, *v231, *(_QWORD *)(v32 + 136 * (int)v4 + 16), *(_QWORD *)(v32 + 136 * (int)v4 + 32));
        v235 = *(unsigned __int8 *)(a2 + 144);
        if ((v235 - 2) < 2)
          goto LABEL_351;
        if (v235 != 4)
        {
          if (v235 != 8)
            goto LABEL_359;
LABEL_351:
          if (v235 != 4 && !*(_BYTE *)(a2 + 200))
            goto LABEL_359;
        }
        if (Phase::ActionTreeManager::StartPreparedVoice(a2, v34, a4))
        {
          Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v34, 4u);
          v237 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v236);
          if (*((_BYTE *)v237 + 696))
          {
            v238 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v237)
                                                                                                 + 688)));
            v239 = v238;
            v240 = *v231;
            if ((unint64_t)(*v231 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v238))
            {
              *(_DWORD *)__src = 134217984;
              *(_QWORD *)&__src[4] = v240;
              _os_signpost_emit_with_name_impl(&dword_2164CC000, v239, OS_SIGNPOST_INTERVAL_BEGIN, v240, "Phase_Generator_Start", "Generator ID %llu Start", __src, 0xCu);
            }

          }
LABEL_359:
          v241 = 2;
          goto LABEL_361;
        }
LABEL_360:
        v241 = 1;
LABEL_361:

        if (v241 != 2)
          goto LABEL_481;
LABEL_362:
        v9 = (v33 + 1);
        v10 += *(unsigned int *)(v11 + 4);
        goto LABEL_363;
      default:
        v403 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result) + 688));
        result = os_log_type_enabled(v403, OS_LOG_TYPE_ERROR);
        if (!(_DWORD)result)
          return result;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3698;
        v398 = "%25s:%-5d Fatal Sound Event data error: bad message encountered in message stream";
        goto LABEL_614;
    }
  }
}

void sub_2164DD770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{

  _Unwind_Resume(a1);
}

void Phase::ActionTreeManager::HandleParamError(Phase::Logger *a1, int a2, uint64_t a3, int a4)
{
  Phase::Logger *v7;
  Phase::Logger *v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(a1, 1);
  v7 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (a2 == 1)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7)
                                                                                       + 688)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = -[Phase::Logger getString:](v8, "getString:", **(_QWORD **)(a3 + 24));
      v13 = 136315906;
      v14 = "ActionTreeManager.mm";
      v15 = 1024;
      v16 = 5560;
      v17 = 2080;
      v18 = v12;
      v19 = 1024;
      v20 = a4;
      v11 = "%25s:%-5d Action tree: %s tried to use a metaparameter with the wrong type, index %d";
      goto LABEL_7;
    }
LABEL_8:

    goto LABEL_9;
  }
  if (!a2)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7)
                                                                                       + 688)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = -[Phase::Logger getString:](v8, "getString:", **(_QWORD **)(a3 + 24));
      v13 = 136315906;
      v14 = "ActionTreeManager.mm";
      v15 = 1024;
      v16 = 5554;
      v17 = 2080;
      v18 = v10;
      v19 = 1024;
      v20 = a4;
      v11 = "%25s:%-5d Action tree: %s tried to use an invalid metaparameter index %d";
LABEL_7:
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v13, 0x22u);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
LABEL_9:

}

void sub_2164DDB80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL Phase::ActionTreeManager::UpdateSpatialPipeline(_BOOL8 this, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, Phase::ActionTreeObject *a6, Phase::ActionTreeGatheredParams *a7)
{
  Phase::Logger **v13;
  unint64_t v14;
  double *v15;
  _QWORD __src[2];
  int v17;
  double v18;
  double v19;

  if (*(_DWORD *)(a2 + 2548))
  {
    v13 = (Phase::Logger **)this;
    v14 = 0;
    v15 = (double *)(a2 + 2584);
    do
    {
      v19 = *(v15 - 3);
      Phase::ActionTreeManager::ScaleFloatParam(v13, *(char *)v15, &v19, a7, a6);
      __src[0] = a3;
      __src[1] = a4;
      v17 = *((_DWORD *)v15 - 8);
      v18 = v19;
      this = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a5, 0xDu, __src, 0x20uLL);
      ++v14;
      v15 += 53;
    }
    while (v14 < *(unsigned int *)(a2 + 2548));
  }
  return this;
}

uint64_t Phase::ActionTreeManager::DestroySubmixes(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;

  v2 = *(_QWORD *)(result + 24);
  if (*(_DWORD *)(v2 + 96))
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v4 + 80);
      if (*(_BYTE *)(v7 + v5))
      {
        *(_BYTE *)(v7 + v5) = 0;
        v8 = *(_OWORD *)(v7 + v5 + 8);
        result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a2, 0x14u, &v8, 0x10uLL);
        v2 = *(_QWORD *)(v4 + 24);
      }
      ++v6;
      v5 += 96;
    }
    while (v6 < *(unsigned int *)(v2 + 96));
  }
  return result;
}

uint64_t Phase::ActionTreeManager::StartPreparedVoices(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v2 + 40))
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(a1 + 56) + v5;
      if ((*(_BYTE *)(v7 + 24) & 0xFE) == 2)
      {
        result = Phase::ActionTreeManager::StartPreparedVoice(a1, v7, a2);
        if (!(_DWORD)result)
          return result;
        v2 = *(_QWORD *)(a1 + 24);
      }
      ++v6;
      v5 += 136;
    }
    while (v6 < *(unsigned int *)(v2 + 40));
  }
  return 1;
}

BOOL Phase::ActionTreeManager::ExecuteTree(uint64_t this, Phase::ActionTreeObject *a2, _QWORD *a3, double a4)
{
  Phase::ActionTreeManager *v5;
  _QWORD *i;
  _QWORD *v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  char *v26;
  int v27;
  uint64_t j;
  int v29;
  char *v30;
  int v31;
  uint64_t k;
  int v33;
  char *v34;
  uint64_t m;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  Phase::Logger *v63;
  unsigned int v64;
  unint64_t v65;
  unsigned int *v66;
  char *v67;
  uint64_t *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BOOL8 result;
  NSObject *v76;
  const char *v77;
  NSObject *v78;
  Phase::ActionTreeGatheredParams *v80;
  double v81;
  __int128 __src;
  __int128 v83;
  __int128 v84;
  _BYTE buf[48];
  __int128 v86;
  int v87;
  uint64_t v88;
  _BYTE v89[416];
  __int128 v90;
  __int128 v91;
  int v92;
  uint64_t v93;

  v5 = (Phase::ActionTreeManager *)this;
  v93 = *MEMORY[0x24BDAC8D0];
  if (a4 > 0.0)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 4);
    for (i = (_QWORD *)*((_QWORD *)a2 + 5); v7 != i; v7 += 8)
    {
      if (*(_DWORD *)(*v7 + 12) == 1)
      {
        Phase::Fader<double>::Update((uint64_t)(v7 + 1), a4);
        v7[7] = v7[6];
        i = (_QWORD *)*((_QWORD *)a2 + 5);
      }
    }
  }
  v9 = *((_QWORD *)a2 + 3);
  if (*(_DWORD *)(v9 + 8))
  {
    v10 = 0;
    do
    {
      this = Phase::ActionTreeManager::GetParamValue((uint64_t)v5, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 16) + 8 * v10), (MetaParamValue *)(*((_QWORD *)a2 + 28) + 8 * v10), (_DWORD *)(*((_QWORD *)a2 + 31) + 4 * v10), a2);
      if ((this & 1) == 0)
        return 0;
      ++v10;
    }
    while (v10 < *(unsigned int *)(v9 + 8));
  }
  v11 = *(unsigned int *)(v9 + 24);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = *((_QWORD *)a2 + 3);
    do
    {
      if (*(_DWORD *)(v13 + 96))
      {
        v14 = 0;
        v15 = 0;
        v16 = 0;
        v17 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v12);
        do
        {
          if (*(_QWORD *)(*(_QWORD *)(v13 + 104) + v14) == v17)
          {
            v18 = *((_QWORD *)a2 + 10) + v15;
            v19 = *(unsigned __int8 *)(v18 + 80);
            if (v19 == 2)
            {
              v20 = *(_QWORD *)(v18 + 88);
              *(_BYTE *)(v18 + 80) = 0;
              *(_QWORD *)(*((_QWORD *)a2 + 34) + 8 * v16) = v20;
              v13 = *((_QWORD *)a2 + 3);
            }
            else if (v19 == 3)
            {
              return 0;
            }
          }
          ++v16;
          v15 += 96;
          v14 += 5944;
        }
        while (v16 < *(unsigned int *)(v13 + 96));
        v11 = *(unsigned int *)(v9 + 24);
      }
      ++v12;
    }
    while (v12 < v11);
  }
  v21 = *((_QWORD *)a2 + 7);
  v22 = *((_QWORD *)a2 + 8);
  while (v21 != v22)
  {
    v23 = *((_QWORD *)v5 + 29);
    *(_QWORD *)buf = *(_QWORD *)(v21 + 72);
    this = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((_QWORD *)(v23 + 40), (unint64_t *)buf);
    if (this)
      v24 = *(_DWORD *)(this + 456);
    else
      v24 = 0;
    if (*(_DWORD *)(v21 + 80) != v24)
      *(_DWORD *)(v21 + 80) = v24;
    v21 += 136;
  }
  v25 = -2128831035;
  v26 = (char *)*((_QWORD *)a2 + 28);
  v27 = -2128831035;
  for (j = *((_QWORD *)a2 + 29) - (_QWORD)v26; j; --j)
  {
    v29 = *v26++;
    v27 = 16777619 * (v27 ^ v29);
  }
  v30 = (char *)*((_QWORD *)a2 + 31);
  v31 = -2128831035;
  for (k = *((_QWORD *)a2 + 32) - (_QWORD)v30; k; --k)
  {
    v33 = *v30++;
    v31 = 16777619 * (v31 ^ v33);
  }
  v80 = (Phase::ActionTreeObject *)((char *)a2 + 216);
  v34 = (char *)*((_QWORD *)a2 + 34);
  for (m = *((_QWORD *)a2 + 35) - (_QWORD)v34; m; --m)
  {
    v36 = *v34++;
    v25 = 16777619 * (v25 ^ v36);
  }
  *((_QWORD *)a2 + 26) = (v31 + v27 + v25);
  v37 = *((_QWORD *)a2 + 3);
  if (!*(_DWORD *)(v37 + 96))
  {
LABEL_58:
    v74 = Phase::ActionTreeManager::ProcessNodes(v5, (uint64_t)a2, v80, a3);
    if ((v74 & 1) != 0)
      return 1;
    v76 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v74) + 688));
    result = os_log_type_enabled(v76, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4084;
      v77 = "%25s:%-5d Fatal Sound Event data error: Error executing action tree nodes";
      goto LABEL_66;
    }
    return result;
  }
  v38 = 0;
  v39 = 2584;
  while (1)
  {
    v40 = *(_QWORD *)(v37 + 104);
    v41 = *(_QWORD *)(v40 + 5944 * v38 + 8);
    if (v41 == 3)
    {
      v52 = *((_QWORD *)a2 + 10);
      v53 = (_BYTE *)(v52 + 96 * v38);
      if (*v53)
      {
        *(_OWORD *)buf = *(_OWORD *)(v52 + 96 * v38 + 8);
        v54 = v40 + 5944 * v38;
        *(_QWORD *)&__src = *(_QWORD *)(v54 + 16);
        Phase::ActionTreeManager::ScaleFloatParam((Phase::Logger **)v5, *(char *)(v54 + 26), (double *)&__src, v80, a2);
        *(_QWORD *)&buf[16] = 0xB5767F7E05AD941ELL;
        *(_QWORD *)&buf[24] = __src;
        this = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 0x12u, buf, 0x20uLL);
      }
      else
      {
        *v53 = 1;
        *(_OWORD *)buf = *(_OWORD *)(v52 + 96 * v38 + 8);
        *(_OWORD *)&buf[24] = *(_OWORD *)a2;
        *(_DWORD *)&buf[40] = *((_DWORD *)a2 + 81);
        *(_DWORD *)&buf[16] = *(_DWORD *)(v40 + 5944 * v38 + 32);
        Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 0x11u, buf, 0x30uLL);
        v71 = v40 + 5944 * v38;
        *(_QWORD *)&v84 = *(_QWORD *)(v71 + 16);
        Phase::ActionTreeManager::ScaleFloatParam((Phase::Logger **)v5, *(char *)(v71 + 26), (double *)&v84, v80, a2);
        *(_QWORD *)&v83 = 0xB5767F7E05AD941ELL;
        __src = *(_OWORD *)buf;
        *((_QWORD *)&v83 + 1) = v84;
        this = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 0x12u, &__src, 0x20uLL);
      }
      goto LABEL_57;
    }
    if (v41 == 2)
    {
      v55 = *((_QWORD *)a2 + 10);
      v56 = (_BYTE *)(v55 + 96 * v38);
      if (*v56)
      {
        v84 = *(_OWORD *)(v55 + 96 * v38 + 8);
        v57 = v40 + 5944 * v38;
        v81 = *(double *)(v57 + 16);
        Phase::ActionTreeManager::ScaleFloatParam((Phase::Logger **)v5, *(char *)(v57 + 26), &v81, v80, a2);
        *(_QWORD *)&buf[16] = 0xB5767F7E05AD941ELL;
        *(_OWORD *)buf = v84;
        *(double *)&buf[24] = v81;
        Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 0x12u, buf, 0x20uLL);
        v58 = *(_OWORD *)(*((_QWORD *)a2 + 10) + 96 * v38 + 64);
        __src = v84;
        v83 = v58;
        this = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 0x13u, &__src, 0x20uLL);
      }
      else
      {
        *v56 = 1;
        v72 = v55 + 96 * v38;
        *(_OWORD *)buf = *(_OWORD *)(v72 + 8);
        v86 = *(_OWORD *)a2;
        v87 = *((_DWORD *)a2 + 81);
        *(_QWORD *)&buf[16] = *(_QWORD *)(v72 + 32);
        *(_OWORD *)&buf[24] = *(_OWORD *)(v72 + 64);
        *(_DWORD *)&buf[40] = *(_DWORD *)(v40 + 5944 * v38 + 32);
        Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 0x10u, buf, 0x48uLL);
        v73 = v40 + 5944 * v38;
        *(_QWORD *)&v84 = *(_QWORD *)(v73 + 16);
        Phase::ActionTreeManager::ScaleFloatParam((Phase::Logger **)v5, *(char *)(v73 + 26), (double *)&v84, v80, a2);
        *(_QWORD *)&v83 = 0xB5767F7E05AD941ELL;
        __src = *(_OWORD *)buf;
        *((_QWORD *)&v83 + 1) = v84;
        this = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 0x12u, &__src, 0x20uLL);
      }
      goto LABEL_57;
    }
    if (v41 != 1)
      break;
    v42 = *((_QWORD *)a2 + 10);
    v43 = (_BYTE *)(v42 + 96 * v38);
    if (*v43)
    {
      v44 = v42 + 96 * v38;
      v45 = *(_QWORD *)(v44 + 8);
      v46 = *(_QWORD *)(v44 + 16);
      v47 = v40 + 5944 * v38;
      *(_QWORD *)&__src = *(_QWORD *)(v47 + 16);
      Phase::ActionTreeManager::ScaleFloatParam((Phase::Logger **)v5, *(char *)(v47 + 26), (double *)&__src, v80, a2);
      *(_QWORD *)&buf[8] = v46;
      *(_QWORD *)&buf[16] = 0xB5767F7E05AD941ELL;
      *(_QWORD *)buf = v45;
      *(_QWORD *)&buf[24] = __src;
      Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 0x12u, buf, 0x20uLL);
      v48 = (_BOOL8)v5;
      v49 = v40 + 5944 * v38;
      v50 = v45;
      v51 = v46;
    }
    else
    {
      v59 = 0;
      *v43 = 1;
      do
      {
        v60 = &buf[v59];
        *((_DWORD *)v60 + 16) = 0;
        *((_QWORD *)v60 + 9) = 0x3FF0000000000000;
        v60[80] = 0;
        v59 += 24;
      }
      while (v59 != 384);
      v61 = v42 + 96 * v38;
      *(_OWORD *)buf = *(_OWORD *)(v61 + 8);
      v91 = *(_OWORD *)a2;
      v92 = *((_DWORD *)a2 + 81);
      *(int8x16_t *)&buf[16] = vextq_s8(*(int8x16_t *)(v61 + 24), *(int8x16_t *)(v61 + 24), 8uLL);
      *(int8x16_t *)&buf[32] = vextq_s8(*(int8x16_t *)(v61 + 40), *(int8x16_t *)(v61 + 40), 8uLL);
      *(_QWORD *)&v86 = *(_QWORD *)(v61 + 56);
      v62 = v40 + 5944 * v38;
      v63 = (Phase::Logger *)memcpy(v89, (const void *)(v62 + 32), sizeof(v89));
      v90 = *(_OWORD *)(v62 + 2464);
      v64 = *(_DWORD *)(v62 + 2548);
      if (v64 > 0x10)
        goto LABEL_64;
      DWORD2(v86) = *(_DWORD *)(v62 + 2548);
      if (v64)
      {
        v65 = 0;
        v66 = (unsigned int *)(v62 + 2548);
        v67 = (char *)(v40 + v39);
        v68 = &v88;
        do
        {
          v69 = *((_DWORD *)v67 - 8);
          *(v68 - 1) = *((_QWORD *)v67 - 3);
          *((_DWORD *)v68 - 4) = v69;
          Phase::ActionTreeManager::ScaleFloatParam((Phase::Logger **)v5, *v67, (double *)v68 - 1, v80, a2);
          *(_BYTE *)v68 = 1;
          v68 += 3;
          ++v65;
          v67 += 424;
        }
        while (v65 < *v66);
      }
      Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 0xFu, buf, 0x388uLL);
      v70 = v40 + 5944 * v38;
      *(_QWORD *)&v84 = *(_QWORD *)(v70 + 16);
      Phase::ActionTreeManager::ScaleFloatParam((Phase::Logger **)v5, *(char *)(v70 + 26), (double *)&v84, v80, a2);
      *(_QWORD *)&v83 = 0xB5767F7E05AD941ELL;
      __src = *(_OWORD *)buf;
      *((_QWORD *)&v83 + 1) = v84;
      Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 0x12u, &__src, 0x20uLL);
      v50 = *(_QWORD *)buf;
      v51 = *(_QWORD *)&buf[8];
      v48 = (_BOOL8)v5;
      v49 = v40 + 5944 * v38;
    }
    this = Phase::ActionTreeManager::UpdateSpatialPipeline(v48, v49, v50, v51, a3, a2, v80);
LABEL_57:
    ++v38;
    v37 = *((_QWORD *)a2 + 3);
    v39 += 5944;
    if (v38 >= *(unsigned int *)(v37 + 96))
      goto LABEL_58;
  }
  v78 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)this) + 688));
  v63 = (Phase::Logger *)os_log_type_enabled(v78, OS_LOG_TYPE_ERROR);
  if ((_DWORD)v63)
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3975;
    _os_log_impl(&dword_2164CC000, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal Sound Event data error: Bad submix type in action tree", buf, 0x12u);
  }
LABEL_64:
  v76 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v63) + 688));
  result = os_log_type_enabled(v76, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4078;
    v77 = "%25s:%-5d Fatal Sound Event data error: Error updating submixes";
LABEL_66:
    _os_log_impl(&dword_2164CC000, v76, OS_LOG_TYPE_ERROR, v77, buf, 0x12u);
    return 0;
  }
  return result;
}

void Phase::ActionTreeManager::AllocateActionTreeObject(PHASESoundEventNodeAsset *a1@<X1>, PHASESoundEvent *a2@<X2>, _QWORD *a3@<X8>)
{
  PHASESoundEvent *v6;
  PHASESoundEventNodeAsset *v7;

  v7 = a1;
  v6 = a2;
  std::allocate_shared[abi:ne180100]<Phase::ActionTreeObject,std::allocator<Phase::ActionTreeObject>,PHASESoundEventNodeAsset * {__strong}&,PHASESoundEvent * {__strong}&,void>(&v7, &v6, a3);

}

void sub_2164DE6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{

  _Unwind_Resume(a1);
}

uint64_t Phase::ActionTreeManager::RegisterActionTreeInstance(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  id WeakRetained;
  void *v43;
  void *v44;
  NSString *v45;
  uint64_t v46;
  uint64_t v47;
  Phase *v48;
  uint64_t StringHashId;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  id v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v60;
  id obj;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _QWORD v68[2];
  char v69;
  _BYTE v70[128];
  uint64_t v71;

  v5 = 0;
  v71 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)*a2;
  v7 = 0xCBF29CE484222325;
  do
    v7 = 0x100000001B3 * (v7 ^ *((char *)v6 + v5++));
  while (v5 != 16);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v8)
        v2 = v7 % v8;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)(a1 + 40) + 8 * v2);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *v6 && i[3] == v6[1])
            goto LABEL_80;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v2)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 56);
  v15 = operator new(0x30uLL);
  v68[0] = v15;
  v68[1] = a1 + 56;
  *v15 = 0;
  v15[1] = v7;
  *((_OWORD *)v15 + 1) = *(_OWORD *)v6;
  v15[4] = 0;
  v15[5] = 0;
  v69 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 64) + 1);
  v17 = *(float *)(a1 + 72);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *(_QWORD *)(a1 + 48);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_36;
    if (*(_QWORD *)&prime < v8)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 64) / *(float *)(a1 + 72));
      if (v8 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *(_QWORD *)(a1 + 48);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *(int8x8_t *)(a1 + 48) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*v14;
          if (*v14)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v26) = v14;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  v33 = *(_QWORD *)(a1 + 40);
                  if (!*(_QWORD *)(v33 + 8 * v32))
                  {
                    *(_QWORD *)(v33 + 8 * v32) = v25;
                    goto LABEL_61;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_61:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_65;
        }
        v60 = *(void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = 0;
        if (v60)
          operator delete(v60);
        v8 = 0;
        *(_QWORD *)(a1 + 48) = 0;
      }
    }
LABEL_65:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v34 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * v2);
  i = (_QWORD *)v68[0];
  if (v34)
  {
    *(_QWORD *)v68[0] = *v34;
  }
  else
  {
    *(_QWORD *)v68[0] = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = i;
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v2) = v14;
    if (!*i)
      goto LABEL_79;
    v35 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v35 >= v8)
        v35 %= v8;
    }
    else
    {
      v35 &= v8 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v35);
  }
  *v34 = i;
LABEL_79:
  v68[0] = 0;
  ++*(_QWORD *)(a1 + 64);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,void *>>>>::reset[abi:ne180100]((uint64_t)v68);
  v6 = (_QWORD *)*a2;
LABEL_80:
  v36 = a2[1];
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v39 = (std::__shared_weak_count *)i[5];
  i[4] = v6;
  i[5] = v36;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  WeakRetained = objc_loadWeakRetained((id *)(*a2 + 296));
  objc_msgSend(WeakRetained, "pushStreamNodes");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "allKeys");
  v44 = (void *)objc_claimAutoreleasedReturnValue();

  v46 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v64, v70, 16);
  if (!v46)
  {
    v58 = 1;
    goto LABEL_104;
  }
  v63 = *(_QWORD *)v65;
  obj = v44;
LABEL_90:
  v47 = 0;
  v62 = v46;
  while (1)
  {
    if (*(_QWORD *)v65 != v63)
      objc_enumerationMutation(obj);
    v48 = *(Phase **)(*((_QWORD *)&v64 + 1) + 8 * v47);
    StringHashId = Phase::GetStringHashId(v48, v45);
    v50 = *a2;
    v51 = *(_QWORD *)(*a2 + 24);
    if (*(_DWORD *)(v51 + 40))
      break;
LABEL_99:
    if (++v47 == v62)
    {
      v44 = obj;
      v46 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v70, 16);
      v58 = 1;
      if (!v46)
        goto LABEL_104;
      goto LABEL_90;
    }
  }
  v52 = StringHashId;
  v53 = 0;
  v54 = 0;
  while (v52 != *(_QWORD *)(*(_QWORD *)(v51 + 48) + 8 * v54))
  {
LABEL_98:
    ++v54;
    v51 = *(_QWORD *)(v50 + 24);
    v53 += 136;
    if (v54 >= *(unsigned int *)(v51 + 40))
      goto LABEL_99;
  }
  v55 = objc_loadWeakRetained((id *)(v50 + 296));
  objc_msgSend(v55, "pushStreamNodes");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v56, "objectForKeyedSubscript:", v48);
  v57 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v55) = Phase::ActionTreeManager::ConfigureStreamNode(a1, *(_QWORD *)(*a2 + 56) + v53, v57, 3);
  if ((_DWORD)v55)
  {
    v50 = *a2;
    goto LABEL_98;
  }
  v58 = 0;
  v44 = obj;
LABEL_104:

  return v58;
}

void sub_2164DED40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::ActionTreeManager::GetAllValidSubmixIds(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *(_QWORD *)&v21 = a2;
  *((_QWORD *)&v21 + 1) = a3;
  v5 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 40), &v21);
  if (v5)
  {
    v6 = v5[4];
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 24);
      if (*(_DWORD *)(v7 + 96))
      {
        v8 = 0;
        v9 = 0;
        v10 = a4 + 2;
        do
        {
          v11 = *(_QWORD *)(v6 + 80) + 96 * v9;
          v21 = *(_OWORD *)(v11 + 8);
          if (*(_BYTE *)v11)
          {
            if ((unint64_t)v8 >= *v10)
            {
              v12 = (v8 - *a4) >> 4;
              if ((unint64_t)(v12 + 1) >> 60)
                std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
              v13 = *v10 - (_QWORD)*a4;
              v14 = v13 >> 3;
              if (v13 >> 3 <= (unint64_t)(v12 + 1))
                v14 = v12 + 1;
              if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
                v15 = 0xFFFFFFFFFFFFFFFLL;
              else
                v15 = v14;
              if (v15)
                v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)(a4 + 2), v15);
              else
                v16 = 0;
              v17 = &v16[16 * v12];
              *(_OWORD *)v17 = v21;
              v19 = *a4;
              v18 = a4[1];
              v20 = v17;
              if (v18 != *a4)
              {
                do
                {
                  *((_OWORD *)v20 - 1) = *((_OWORD *)v18 - 1);
                  v20 -= 16;
                  v18 -= 16;
                }
                while (v18 != v19);
                v18 = *a4;
              }
              v8 = v17 + 16;
              *a4 = v20;
              a4[1] = v17 + 16;
              a4[2] = &v16[16 * v15];
              if (v18)
                operator delete(v18);
            }
            else
            {
              *(_OWORD *)v8 = *(_OWORD *)(v11 + 8);
              v8 += 16;
            }
            a4[1] = v8;
            v7 = *(_QWORD *)(v6 + 24);
          }
          ++v9;
        }
        while (v9 < *(unsigned int *)(v7 + 96));
      }
    }
  }
}

void sub_2164DEF5C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t Phase::ActionTreeManager::PrepareActionTree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  int v8;
  NSObject *v10;
  _BYTE v11[18];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v11 = a2;
  *(_QWORD *)&v11[8] = a3;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 40), v11);
  if (result)
  {
    result = *(_QWORD *)(result + 32);
    if (result)
    {
      *(_QWORD *)(result + 152) = a4;
      *(_QWORD *)(result + 176) = a5;
      v8 = *(unsigned __int8 *)(result + 144);
      if ((v8 - 2) < 9 || v8 == 0)
      {
        v10 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result) + 688));
        result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
        if ((_DWORD)result)
        {
          *(_DWORD *)v11 = 136315394;
          *(_QWORD *)&v11[4] = "ActionTreeManager.mm";
          *(_WORD *)&v11[12] = 1024;
          *(_DWORD *)&v11[14] = 4337;
          _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Prepare called on action tree at the wrong time\n", v11, 0x12u);
          return 0;
        }
      }
      else
      {
        if (v8 == 1)
          Phase::ActionTreeObject::SetRunState((char *)result, 2u);
        return 1;
      }
    }
  }
  return result;
}

uint64_t Phase::ActionTreeManager::StartActionTree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  NSObject *v12;
  _BYTE v13[18];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v13 = a2;
  *(_QWORD *)&v13[8] = a3;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 40), v13);
  if (result)
  {
    v11 = *(_QWORD *)(result + 32);
    if (v11)
    {
      result = 0;
      switch(*(_BYTE *)(v11 + 144))
      {
        case 0:
          v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 688));
          result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            *(_DWORD *)v13 = 136315394;
            *(_QWORD *)&v13[4] = "ActionTreeManager.mm";
            *(_WORD *)&v13[12] = 1024;
            *(_DWORD *)&v13[14] = 4363;
            _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Start called on action tree before initialization\n", v13, 0x12u);
            return 0;
          }
          return result;
        case 1:
          Phase::ActionTreeManager::PrepareActionTree(a1, a2, a3, 0, 0);
          goto LABEL_9;
        case 2:
        case 3:
        case 8:
          *(_QWORD *)(v11 + 160) = a4;
          *(_QWORD *)(v11 + 184) = a5;
          *(_BYTE *)(v11 + 200) = 1;
          *(_BYTE *)(v11 + 320) = 1;
          goto LABEL_9;
        case 4:
        case 5:
        case 6:
        case 7:
        case 9:
        case 0xA:
          return result;
        default:
LABEL_9:
          result = 1;
          break;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t Phase::ActionTreeManager::PauseActionTree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v3 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 40), v8);
  if (v3)
  {
    v4 = (unsigned __int8 *)v3[4];
    if (v4)
    {
      v5 = v4[144];
      if (v5 <= 8)
      {
        v6 = 1 << v5;
        if ((v6 & 0x98) != 0)
        {
          Phase::ActionTreeObject::SetRunState((char *)v3[4], 5u);
LABEL_8:
          v4[320] = 0;
          return 0;
        }
        if ((v6 & 0x104) != 0)
        {
          v4[200] = 0;
          goto LABEL_8;
        }
      }
    }
  }
  return 0;
}

uint64_t Phase::ActionTreeManager::UnPauseActionTree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  char *v4;
  unsigned int v5;
  int v6;
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v3 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 40), v8);
  if (v3)
  {
    v4 = (char *)v3[4];
    if (v4)
    {
      v5 = v4[144];
      if (v5 <= 8)
      {
        v6 = 1 << v5;
        if ((v6 & 0x70) != 0)
        {
          if (v4[312])
            v4[320] = 1;
          else
            Phase::ActionTreeObject::SetRunState(v4, 7u);
        }
        else if ((v6 & 0x10C) != 0)
        {
          if (v4[312] || v4[145] == 1)
            v4[320] = 1;
          v4[200] = 1;
        }
      }
    }
  }
  return 0;
}

uint64_t Phase::ActionTreeManager::StopActionTree(uint64_t a1, uint64_t a2, uint64_t a3, PHASESoundEventPrepareHandlerReason a4, PHASESoundEventStartHandlerReason a5)
{
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 40), v10);
  if (result)
  {
    v8 = *(_QWORD *)(result + 32);
    if (v8)
    {
      v9 = 0;
      result = 0;
      switch(*(_BYTE *)(v8 + 144))
      {
        case 0:
        case 1:
          goto LABEL_5;
        case 2:
          Phase::ActionTreeObject::CallPrepareCallback((_QWORD *)v8, 1, a4);
          Phase::ActionTreeObject::CallCompleteCallback((_QWORD *)v8, a5);
          v9 = 0;
          goto LABEL_5;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_4;
        case 8:
          Phase::ActionTreeObject::CallPrepareCallback((_QWORD *)v8, 1, a4);
LABEL_4:
          v9 = 9;
LABEL_5:
          Phase::ActionTreeObject::SetRunState((char *)v8, v9);
          goto LABEL_6;
        case 9:
        case 0xA:
          return result;
        default:
LABEL_6:
          result = 1;
          break;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *Phase::ActionTreeObject::CallPrepareCallback(_QWORD *this, uint64_t a2, PHASESoundEventPrepareHandlerReason a3)
{
  uint64_t (*v3)(_QWORD, _QWORD, unint64_t, uint64_t, PHASESoundEventPrepareHandlerReason, _QWORD);
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = (uint64_t (*)(_QWORD, _QWORD, unint64_t, uint64_t, PHASESoundEventPrepareHandlerReason, _QWORD))this[19];
  if (v3)
  {
    v5 = this;
    v6 = this[7];
    v7 = this[8];
    if (v6 == v7)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)(v6 + 96) > v8)
          v8 = *(_QWORD *)(v6 + 96);
        v6 += 136;
      }
      while (v6 != v7);
    }
    this = (_QWORD *)v3(*this, this[1], v8, a2, a3, this[22]);
    v5[19] = 0;
    v5[22] = 0;
  }
  return this;
}

_QWORD *Phase::ActionTreeObject::CallCompleteCallback(_QWORD *this, PHASESoundEventStartHandlerReason a2)
{
  uint64_t (*v2)(_QWORD, _QWORD, unint64_t *, PHASESoundEventStartHandlerReason, _QWORD);
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = (uint64_t (*)(_QWORD, _QWORD, unint64_t *, PHASESoundEventStartHandlerReason, _QWORD))this[20];
  if (v2)
  {
    v3 = this;
    v4 = this[7];
    v5 = -1;
    while (v4 != this[8])
    {
      v6 = *(_QWORD *)(v4 + 104);
      if (v6 < v5 && v6 != 0)
        v5 = *(_QWORD *)(v4 + 104);
      v4 += 136;
    }
    v8 = v5;
    this = (_QWORD *)v2(*this, this[1], &v8, a2, this[23]);
    v3[20] = 0;
    v3[23] = 0;
  }
  return this;
}

uint64_t Phase::ActionTreeManager::SeekActionTree(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD, uint64_t, uint64_t), uint64_t a5, double a6)
{
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  _QWORD v13[2];

  v13[0] = a2;
  v13[1] = a3;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 40), v13);
  if (result)
  {
    v10 = *(_QWORD *)(result + 32);
    if (v10)
    {
      v11 = *(unsigned __int8 *)(v10 + 144);
      if (v11 - 1 >= 8)
      {
        if (v11 <= 0xA && ((1 << v11) & 0x601) != 0)
          return 0;
      }
      else
      {
        if (*(_BYTE *)(v10 + 312) || *(_QWORD *)(v10 + 168))
        {
          if (a4)
            a4(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), 1, a5);
          return 0;
        }
        *(_QWORD *)(v10 + 168) = a4;
        *(_QWORD *)(v10 + 192) = a5;
        *(double *)(v10 + 304) = a6;
        *(_BYTE *)(v10 + 312) = 1;
      }
      return 1;
    }
    return 0;
  }
  return result;
}

_QWORD *Phase::ActionTreeManager::SetAmbientOrientation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  _QWORD *result;
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 40), v8);
  if (result)
  {
    result = (_QWORD *)result[4];
    if (result)
    {
      if (result[3])
        return (_QWORD *)Phase::ActionTreeObject::SetAmbientOrientation((uint64_t)result, a4, a5);
      else
        return 0;
    }
  }
  return result;
}

BOOL Phase::ActionTreeObject::SetAmbientOrientation(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _DWORD *v9;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(v3 + 96);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (_QWORD *)(*(_QWORD *)(v3 + 104) + 8);
    v7 = 1;
    v8 = 1;
    while (*(v6 - 1) != a2 || *v6 != 2)
    {
      v8 = v7 < v4;
      v5 += 96;
      ++v7;
      v6 += 743;
      if (96 * v4 == v5)
        return 0;
    }
    v9 = (_DWORD *)(*(_QWORD *)(a1 + 80) + v5);
    v9[16] = *a3;
    v9[17] = a3[1];
    v9[18] = a3[2];
    v9[19] = a3[3];
  }
  else
  {
    return 0;
  }
  return v8;
}

uint64_t Phase::ActionTreeManager::UpdateActionTree(Phase::Logger **a1, _QWORD *a2, _QWORD *a3, double a4)
{
  unsigned int v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  int v44;
  void (*v46)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned __int8 *v50;
  char v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  _BOOL8 v69;
  NSObject *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  __int128 __src;
  uint64_t v81;
  _BYTE buf[18];
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 312))
  {
    v8 = *((unsigned __int8 *)a2 + 144);
    v9 = v8 > 0xA;
    v10 = (1 << v8) & 0x6A4;
    if (v9 || v10 == 0)
    {
      Phase::ActionTreeObject::SetRunState((char *)a2, 8u);
      v62 = *(unsigned int *)(a2[3] + 40);
      if ((_DWORD)v62)
      {
        v63 = 0;
        v64 = 0;
        while (2)
        {
          v65 = a2[7] + 136 * v63;
          while (1)
          {
            v66 = *(unsigned __int8 *)(v65 + 24);
            v9 = v66 > 6;
            v67 = (1 << v66) & 0x63;
            if (v9 || v67 == 0)
              break;
            ++v63;
            v65 += 136;
            if (v63 >= v62)
            {
              if ((v64 & 1) == 0)
                goto LABEL_6;
              goto LABEL_96;
            }
          }
          Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeSeekState(v65, 1u);
          __src = *(_OWORD *)(v65 + 8);
          if (!*((_BYTE *)a2 + 312))
            std::__throw_bad_optional_access[abi:ne180100]();
          v81 = a2[38];
          v69 = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 6u, &__src, 0x18uLL);
          *(_BYTE *)(v65 + 40) = 1;
          if (!*((_BYTE *)a2 + 312))
            std::__throw_bad_optional_access[abi:ne180100]();
          *(_QWORD *)(v65 + 48) = a2[38];
          v70 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v69) + 688));
          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
          {
            v71 = *(_QWORD *)(v65 + 8);
            v72 = *(_QWORD *)(v65 + 48);
            v73 = *(char *)(v65 + 64);
            v74 = *(char *)(v65 + 24);
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4916;
            v83 = 2048;
            v84 = v71;
            v85 = 2048;
            v86 = v72;
            v87 = 1024;
            v88 = v73;
            v89 = 1024;
            v90 = v74;
            _os_log_impl(&dword_2164CC000, v70, OS_LOG_TYPE_DEFAULT, "%25s:%-5d generatorId %llu: request seek to time %.2fs, node type %hhd, state %hhd", buf, 0x32u);
          }
          ++v63;
          v62 = *(unsigned int *)(a2[3] + 40);
          v64 = 1;
          if (v63 < v62)
            continue;
          break;
        }
LABEL_96:
        Phase::ActionTreeObject::SetSeekState((unsigned __int8 *)a2, 1);
        if (*((_BYTE *)a2 + 312))
          *((_BYTE *)a2 + 312) = 0;
      }
    }
  }
LABEL_6:
  switch(*((_BYTE *)a2 + 144))
  {
    case 2:
      if (a2[11] != a2[10])
      {
        v12 = 0;
        v13 = 80;
        do
        {
          Phase::ActionTreeManager::UpdateGeoQueries(a1, (UniqueObjectId *)a2);
          v14 = a2[10];
          v15 = *(unsigned __int8 *)(v14 + v13);
          if (v15 == 1)
            return 1;
          if (v15 == 3)
            return 0;
          ++v12;
          v13 += 96;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((a2[11] - v14) >> 5) > v12);
      }
      result = Phase::ActionTreeManager::ExecuteTree((uint64_t)a1, (Phase::ActionTreeObject *)a2, a3, 0.0);
      if ((_DWORD)result)
      {
        Phase::ActionTreeObject::SetRunState((char *)a2, 8u);
        return !*((_BYTE *)a2 + 200) || (Phase::ActionTreeManager::UpdateActionTree(a1, a2, a3, 0.0) & 1) != 0;
      }
      return result;
    case 3:
      if (!*((_BYTE *)a2 + 200))
        return 1;
      result = Phase::ActionTreeManager::StartPreparedVoices((uint64_t)a2, a3);
      if ((_DWORD)result)
      {
        Phase::ActionTreeObject::SetRunState((char *)a2, 4u);
        result = Phase::ActionTreeManager::ExecuteTree((uint64_t)a1, (Phase::ActionTreeObject *)a2, a3, 0.0);
        if ((_DWORD)result)
          goto LABEL_79;
      }
      return result;
    case 4:
      v47 = a2[3];
      v48 = *(unsigned int *)(v47 + 40);
      if (!(_DWORD)v48)
        goto LABEL_66;
      v49 = *(unsigned __int8 *)(v47 + 112);
      v50 = (unsigned __int8 *)(a2[7] + 24);
      v51 = 1;
      do
      {
        v53 = *v50;
        v50 += 136;
        v52 = v53;
        if (v49)
        {
          if (v52)
            v51 &= v52 == 1;
        }
        else
        {
          v51 &= v52 == 0;
        }
        --v48;
      }
      while (v48);
      if ((v51 & 1) != 0)
        goto LABEL_66;
      result = Phase::ActionTreeManager::ExecuteTree((uint64_t)a1, (Phase::ActionTreeObject *)a2, a3, a4);
      if ((_DWORD)result)
      {
        Phase::ActionTreeManager::UpdateGeoQueries(a1, (UniqueObjectId *)a2);
        return 1;
      }
      return result;
    case 5:
      v54 = a2[3];
      if (*(_DWORD *)(v54 + 40))
      {
        v55 = 0;
        v56 = 0;
        do
        {
          v57 = a2[7];
          if (*(_BYTE *)(v57 + v55))
          {
            *(_OWORD *)buf = *(_OWORD *)(v57 + v55 + 8);
            Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 4u, buf, 0x10uLL);
            v54 = a2[3];
          }
          ++v56;
          v55 += 136;
        }
        while (v56 < *(unsigned int *)(v54 + 40));
      }
      Phase::ActionTreeObject::SetRunState((char *)a2, 6u);
      *((_BYTE *)a2 + 320) = 0;
      return 1;
    case 7:
      v58 = a2[3];
      if (*(_DWORD *)(v58 + 40))
      {
        v59 = 0;
        v60 = 0;
        do
        {
          v61 = a2[7];
          if (*(_BYTE *)(v61 + v59))
          {
            *(_OWORD *)buf = *(_OWORD *)(v61 + v59 + 8);
            Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 5u, buf, 0x10uLL);
            v58 = a2[3];
          }
          ++v60;
          v59 += 136;
        }
        while (v60 < *(unsigned int *)(v58 + 40));
      }
      Phase::ActionTreeObject::SetRunState((char *)a2, 4u);
LABEL_79:
      *((_BYTE *)a2 + 320) = 1;
      return 1;
    case 8:
      v17 = *(unsigned int *)(a2[3] + 40);
      if ((_DWORD)v17)
      {
        v18 = (_BYTE *)(a2[7] + 25);
        do
        {
          if (*(v18 - 1) == 2 || *v18 == 1)
            return 1;
          v18 += 136;
          --v17;
        }
        while (v17);
        if (*((_BYTE *)a2 + 145))
        {
          v19 = 0;
          v20 = 0;
          v21 = 25;
          do
          {
            v22 = (unsigned __int8 *)(a2[7] + v21);
            v25 = *v22;
            v23 = (uint64_t)(v22 - 25);
            v24 = v25;
            if (v25 == 1)
              v26 = 1;
            else
              v26 = v20;
            if (v24 == 3)
              v20 = 1;
            else
              v20 = v26;
            Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeSeekState(v23, 0);
            ++v19;
            v21 += 136;
          }
          while (v19 < *(unsigned int *)(a2[3] + 40));
          if ((v20 & 1) != 0)
          {
            v28 = a2 + 21;
            v27 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))a2[21];
            if (v27)
            {
              v29 = *a2;
              v30 = a2[1];
              v32 = a2 + 24;
              v31 = a2[24];
              v33 = 0;
LABEL_101:
              v27(v29, v30, v33, v31);
              *v28 = 0;
              *v32 = 0;
              goto LABEL_102;
            }
            goto LABEL_102;
          }
LABEL_99:
          v28 = a2 + 21;
          v27 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))a2[21];
          if (v27)
          {
            v29 = *a2;
            v30 = a2[1];
            v32 = a2 + 24;
            v31 = a2[24];
            v33 = 2;
            goto LABEL_101;
          }
LABEL_102:
          Phase::ActionTreeObject::SetSeekState((unsigned __int8 *)a2, 0);
          v75 = 0;
          goto LABEL_106;
        }
      }
      else if (*((_BYTE *)a2 + 145))
      {
        goto LABEL_99;
      }
      v75 = 1;
LABEL_106:
      if (!*((_BYTE *)a2 + 200))
      {
        Phase::ActionTreeObject::SetRunState((char *)a2, 3u);
LABEL_120:
        Phase::ActionTreeObject::CallPrepareCallback(a2, 0, PHASESoundEventPrepareHandlerReasonPrepared);
        return 1;
      }
      result = Phase::ActionTreeManager::StartPreparedVoices((uint64_t)a2, a3);
      if (!(_DWORD)result)
        return result;
      if ((v75 & 1) != 0)
      {
        Phase::ActionTreeObject::SetRunState((char *)a2, 4u);
        *((_BYTE *)a2 + 320) = 1;
      }
      else if (*((_BYTE *)a2 + 320))
      {
        v76 = a2[3];
        if (*(_DWORD *)(v76 + 40))
        {
          v77 = 0;
          v78 = 0;
          do
          {
            v79 = a2[7] + v77;
            if (*(_BYTE *)(v79 + 24) == 4)
            {
              *(_OWORD *)buf = *(_OWORD *)(v79 + 8);
              Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 5u, buf, 0x10uLL);
              v76 = a2[3];
            }
            ++v78;
            v77 += 136;
          }
          while (v78 < *(unsigned int *)(v76 + 40));
        }
        Phase::ActionTreeObject::SetRunState((char *)a2, 4u);
      }
      else
      {
        Phase::ActionTreeObject::SetRunState((char *)a2, 6u);
      }
      if (Phase::ActionTreeManager::ExecuteTree((uint64_t)a1, (Phase::ActionTreeObject *)a2, a3, 0.0))
        goto LABEL_120;
      return 0;
    case 9:
      v34 = a2[3];
      if (*(_DWORD *)(v34 + 40))
      {
        v35 = 0;
        v36 = 0;
        do
        {
          v37 = a2[7] + v35;
          v38 = *(unsigned __int8 *)(v37 + 24);
          v9 = v38 > 6;
          v39 = (1 << v38) & 0x43;
          if (v9 || v39 == 0)
          {
            *(_OWORD *)buf = *(_OWORD *)(v37 + 8);
            Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 3u, buf, 0x18uLL);
            Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(a2[7] + v35, 6u);
            v34 = a2[3];
          }
          ++v36;
          v35 += 136;
        }
        while (v36 < *(unsigned int *)(v34 + 40));
      }
      Phase::ActionTreeObject::SetRunState((char *)a2, 0xAu);
      return 1;
    case 0xA:
      v41 = *(unsigned int *)(a2[3] + 40);
      if (!(_DWORD)v41)
        goto LABEL_54;
      v42 = (unsigned __int8 *)(a2[7] + 24);
      while (1)
      {
        v43 = *v42;
        v42 += 136;
        v44 = (1 << v43) & 0x103;
        if (v43 > 8 || v44 == 0)
          break;
        if (!--v41)
        {
LABEL_54:
          if (*((_BYTE *)a2 + 145) || *((_BYTE *)a2 + 312))
          {
            v46 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))a2[21];
            if (v46)
            {
              v46(*a2, a2[1], 0, a2[24]);
              a2[21] = 0;
              a2[24] = 0;
            }
          }
LABEL_66:
          Phase::ActionTreeObject::CallCompleteCallback(a2, PHASESoundEventStartHandlerReasonFinishedPlaying);
          Phase::ActionTreeManager::DestroySubmixes((uint64_t)a2, a3);
          Phase::ActionTreeObject::SetRunState((char *)a2, 0);
          return 1;
        }
      }
      return 1;
    default:
      return 1;
  }
}

void Phase::ActionTreeManager::UpdateActionTrees(Phase::Logger *a1, _QWORD *a2, double a3)
{
  uint64_t InstancePtr;
  Phase::Logger *v7;
  Phase::Logger *v8;
  NSObject *v9;
  NSObject *v10;
  Phase::Logger *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *i;
  _QWORD *v16;
  int v17;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  void (*v22)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t *v23;
  Phase::Logger *v24;
  NSObject *v25;
  NSObject *v26;
  uint8_t v27[32];

  InstancePtr = Phase::Logger::GetInstancePtr(a1);
  v7 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 896));
  v8 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v7);
  if (*((_BYTE *)v8 + 904))
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v8)
                                                                                       + 896)));
    v10 = v9;
    if ((unint64_t)v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
    {
      *(_WORD *)v27 = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v10, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v7, "Phase_ActionTree_Update", "Action Tree Update", v27, 2u);
    }

  }
  v11 = (Phase::Logger *)Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)a1);
  v12 = (uint64_t *)*((_QWORD *)a1 + 7);
  if (v12)
  {
    do
    {
      while (1)
      {
        v13 = v12[4];
        if (*(_BYTE *)(v13 + 144)
          && (Phase::ActionTreeManager::UpdateActionTree((Phase::Logger **)a1, (_QWORD *)v13, a2, a3) & 1) == 0)
        {
          Phase::ActionTreeManager::StopActionTree((uint64_t)a1, v12[2], v12[3], PHASESoundEventPrepareHandlerReasonFailure, PHASESoundEventStartHandlerReasonFailure);
        }
        v11 = (Phase::Logger *)v12[4];
        if (!*((_BYTE *)v11 + 144))
          break;
        v12 = (uint64_t *)*v12;
        if (!v12)
          goto LABEL_14;
      }
      Phase::ActionTreeManager::DestroySubmixes((uint64_t)v11, a2);
      Phase::ActionTreeManager::ReleaseActionTreeObject(a1, (Phase::ActionTreeObject *)v12[4]);
      v14 = (uint64_t *)*v12;
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::remove((uint64_t)v27, (_QWORD *)a1 + 5, v12);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27);
      v12 = v14;
    }
    while (v14);
LABEL_14:
    for (i = (uint64_t *)*((_QWORD *)a1 + 7); ; i = v23)
    {
      while (1)
      {
        if (!i)
          goto LABEL_31;
        v16 = (_QWORD *)i[4];
        v17 = *((unsigned __int8 *)v16 + 144);
        if (v17 == 4 || v17 == 9)
          break;
LABEL_30:
        i = (uint64_t *)*i;
      }
      v19 = *(unsigned int *)(v16[3] + 40);
      if ((_DWORD)v19)
      {
        v20 = (unsigned __int8 *)(v16[7] + 24);
        do
        {
          v21 = *v20;
          v20 += 136;
          if (v21)
            goto LABEL_30;
        }
        while (--v19);
      }
      if (*((_BYTE *)v16 + 145) || *((_BYTE *)v16 + 312))
      {
        v22 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v16[21];
        if (v22)
        {
          v22(*v16, v16[1], 0, v16[24]);
          v16[21] = 0;
          v16[24] = 0;
        }
      }
      Phase::ActionTreeObject::CallCompleteCallback(v16, PHASESoundEventStartHandlerReasonFinishedPlaying);
      Phase::ActionTreeManager::DestroySubmixes((uint64_t)v16, a2);
      Phase::ActionTreeManager::ReleaseActionTreeObject(a1, (Phase::ActionTreeObject *)i[4]);
      v23 = (uint64_t *)*i;
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::remove((uint64_t)v27, (_QWORD *)a1 + 5, i);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27);
    }
  }
LABEL_31:
  v24 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v11);
  if (*((_BYTE *)v24 + 904))
  {
    v25 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v24)
                                                                                        + 896)));
    v26 = v25;
    if ((unint64_t)v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v25))
    {
      *(_WORD *)v27 = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v26, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v7, "Phase_ActionTree_Update", (const char *)&unk_21676613F, v27, 2u);
    }

  }
}

uint64_t Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(int *)(a1 + 16) < 1)
  {
    v3 = 0;
  }
  else
  {
    v2 = 0;
    LODWORD(v3) = 0;
    do
      v3 = Phase::CommandQueue<Phase::LockFreeQueueMPSC>::ExecuteCommands(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                                  + 8 * v2++))
         + v3;
    while (v2 < *(int *)(a1 + 16));
  }
  v4 = __ldaxr((unsigned __int8 *)(a1 + 32));
  if (v4 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)(a1 + 32)))
    {
      v5 = objc_retainAutorelease(**(id **)(a1 + 24));
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v7 = 136315394;
        v8 = "Commandable.hpp";
        v9 = 1024;
        v10 = 285;
        _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_INFO, "%25s:%-5d Commandable: Executing pending commands in overflow queue.", (uint8_t *)&v7, 0x12u);
      }
    }
  }
  else
  {
    __clrex();
  }
  return v3;
}

void Phase::ActionTreeManager::ReleaseActionTreeObject(Phase::ActionTreeManager *this, Phase::ActionTreeObject *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  id WeakRetained;

  v4 = *((_QWORD *)a2 + 7);
  v3 = *((_QWORD *)a2 + 8);
  if (v3 != v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = (char *)this + 80;
    do
    {
      if (*(_QWORD *)(v4 + v5 + 32))
      {
        caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::remove((uint64_t)v7, *(_QWORD *)(v4 + v5 + 8), *(_QWORD *)(v4 + v5 + 16));
        std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100]((Phase::Controller::StreamRenderer **)(*((_QWORD *)a2 + 7) + v5 + 32), 0);
        v4 = *((_QWORD *)a2 + 7);
        v3 = *((_QWORD *)a2 + 8);
      }
      ++v6;
      v5 += 136;
    }
    while (0xF0F0F0F0F0F0F0F1 * ((v3 - v4) >> 3) > v6);
  }
  WeakRetained = objc_loadWeakRetained((id *)a2 + 37);
  objc_msgSend(WeakRetained, "internalCleanup");

}

void sub_2164E02D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *Phase::ActionTreeManager::SetMetaParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, double a7)
{
  _QWORD *result;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD v15[2];

  v15[0] = a2;
  v15[1] = a3;
  result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 40), v15);
  if (result)
  {
    v12 = result[4];
    if (v12)
    {
      v13 = *(_QWORD **)(v12 + 32);
      v14 = *(_QWORD **)(v12 + 40);
      while (v13 != v14)
      {
        if (*(_QWORD *)*v13 == a4)
          return (_QWORD *)Phase::SetMetaParameterValue(v13, a5, a6, a7);
        v13 += 8;
      }
    }
    return 0;
  }
  return result;
}

void Phase::ActionTreeManager::LeafNodePrepared(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  for (i = *(_QWORD **)(a1 + 56); i; i = (_QWORD *)*i)
  {
    v6 = i[4];
    if (*(_BYTE *)(v6 + 144))
    {
      v8 = *(_QWORD *)(v6 + 56);
      v7 = *(_QWORD *)(v6 + 64);
      while (v8 != v7)
      {
        if (*(_QWORD *)(v8 + 8) == a2 && *(_QWORD *)(v8 + 16) == a3 && *(_BYTE *)(v8 + 24) == 2)
        {
          Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v8, 3u);
          *(_QWORD *)(v8 + 96) = a4;
          return;
        }
        v8 += 136;
      }
    }
  }
}

void Phase::ActionTreeManager::LeafNodeCompleted(Phase::ActionTreeManager *this, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;

  v4 = (_QWORD *)*((_QWORD *)this + 7);
  if (v4)
  {
    while (1)
    {
      v7 = v4[4];
      if (*(_BYTE *)(v7 + 144))
      {
        v8 = *(_QWORD *)(v7 + 56);
        v9 = *(_QWORD *)(v7 + 64) - v8;
        if (v9)
          break;
      }
LABEL_8:
      v4 = (_QWORD *)*v4;
      if (!v4)
        return;
    }
    v10 = 0;
    v11 = 0xF0F0F0F0F0F0F0F1 * (v9 >> 3);
    v12 = 1;
    while (1)
    {
      v13 = v8 + 136 * v10;
      v15 = *(_QWORD *)(v13 + 8);
      v14 = v13 + 8;
      if (v15 == a2 && *(_QWORD *)(v14 + 8) == a3)
        break;
      v10 = v12;
      if (v11 <= v12++)
        goto LABEL_8;
    }
    v17 = v8 + 136 * v10;
    v20 = *(unsigned __int8 *)(v17 + 24);
    v19 = (unsigned __int8 *)(v17 + 24);
    v18 = v20;
    v21 = 8;
    switch(v20)
    {
      case 1u:
      case 8u:
        std::terminate();
        return;
      case 2u:
      case 3u:
      case 4u:
        v21 = 0;
        goto LABEL_13;
      case 5u:
      case 6u:
        v21 = 1;
        goto LABEL_13;
      case 7u:
LABEL_13:
        Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v8 + 136 * v10, v21);
        v18 = *v19;
        break;
      default:
        break;
    }
    if (v18 <= 1)
      Phase::ActionTreeManager::StopStreamRenderer(this, (Phase::ActionTreeObject *)v7, v10);
    *(_QWORD *)(v8 + 136 * v10 + 104) = *a4;
  }
}

Phase::Controller::StreamRenderer *Phase::ActionTreeManager::StopStreamRenderer(Phase::ActionTreeManager *this, Phase::ActionTreeObject *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (!a2 || (v4 = *((_QWORD *)a2 + 7), 0xF0F0F0F0F0F0F0F1 * ((*((_QWORD *)a2 + 8) - v4) >> 3) <= a3))
    __assert_rtn("StopStreamRenderer", "ActionTreeManager.mm", 5660, "inObject != nullptr && inLeafNodeIdIndex < inObject->mLeafNodes.size()");
  v5 = 17 * a3;
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::remove((uint64_t)this + 80, *(_QWORD *)(v4 + 136 * a3 + 8), *(_QWORD *)(v4 + 136 * a3 + 16));
  return std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100]((Phase::Controller::StreamRenderer **)(*((_QWORD *)a2 + 7) + 8 * v5 + 32), 0);
}

void Phase::ActionTreeManager::Reset(Phase::ActionTreeManager *this)
{
  uint64_t v2;
  _QWORD *i;
  uint64_t *v4;
  void (*v5)(_QWORD, uint64_t, _QWORD, uint64_t);
  Phase::Logger *v6;
  Phase::Logger *InstancePtr;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*((int *)this + 4) >= 1)
  {
    v2 = 0;
    do
      Phase::CommandQueue<Phase::LockFreeQueueMPSC>::Reset(*(_QWORD *)(*((_QWORD *)this + 1) + 8 * v2++));
    while (v2 < *((int *)this + 4));
  }
  for (i = (_QWORD *)*((_QWORD *)this + 7); i; i = (_QWORD *)*i)
  {
    v4 = (uint64_t *)i[4];
    if (*((_BYTE *)v4 + 144))
    {
      if (*((_BYTE *)v4 + 145) || *((_BYTE *)v4 + 312))
      {
        v5 = (void (*)(_QWORD, uint64_t, _QWORD, uint64_t))v4[21];
        if (v5)
        {
          v5(*v4, v4[1], 0, v4[24]);
          v4[21] = 0;
          v4[24] = 0;
        }
      }
      Phase::ActionTreeObject::CallPrepareCallback(v4, 1, PHASESoundEventPrepareHandlerReasonPrepared);
      v6 = (Phase::Logger *)Phase::ActionTreeObject::CallCompleteCallback(v4, PHASESoundEventStartHandlerReasonFinishedPlaying);
      InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(v6);
      if (*((_BYTE *)InstancePtr + 1554))
      {
        v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 432));
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v9 = *v4;
          *(_DWORD *)buf = 136315650;
          v13 = "ActionTreeManager.mm";
          v14 = 1024;
          v15 = 5516;
          v16 = 2048;
          v17 = v9;
          _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu) - sound event was stopped by engine teardown", buf, 0x1Cu);
        }
      }
      Phase::ActionTreeObject::SetRunState((char *)v4, 0);
    }
    Phase::ActionTreeManager::ReleaseActionTreeObject(this, (Phase::ActionTreeObject *)v4);
  }
  if (*((_QWORD *)this + 8))
  {
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::__deallocate_node((uint64_t)this + 40, *((_QWORD **)this + 7));
    *((_QWORD *)this + 7) = 0;
    v10 = *((_QWORD *)this + 6);
    if (v10)
    {
      for (j = 0; j != v10; ++j)
        *(_QWORD *)(*((_QWORD *)this + 5) + 8 * j) = 0;
    }
    *((_QWORD *)this + 8) = 0;
  }
}

uint64_t Phase::Commandable<128,Phase::LockFreeQueueMPSC>::FlushCommands(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(int *)(result + 16) >= 1)
  {
    v1 = result;
    v2 = 0;
    do
      result = Phase::CommandQueue<Phase::LockFreeQueueMPSC>::Reset(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2++));
    while (v2 < *(int *)(v1 + 16));
  }
  return result;
}

uint64_t Phase::ActionTreeManager::ScheduleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, unint64_t a7, uint64_t a8, void *a9)
{
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  _QWORD v29[2];

  v16 = a5;
  v17 = a6;
  v18 = a9;
  v29[0] = a2;
  v29[1] = a3;
  v19 = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 40), v29);
  if (v19 && (v20 = *(_QWORD *)(v19 + 32)) != 0)
  {
    v21 = *(_QWORD *)(v20 + 24);
    v22 = *(unsigned int *)(v21 + 40);
    if ((_DWORD)v22)
    {
      v23 = 0;
      v24 = *(_QWORD *)(v21 + 48);
      v25 = 1;
      v26 = 32;
      while (1)
      {
        if (*(_QWORD *)(v24 + 8 * v23) == a4)
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + v26);
          if (v19)
            break;
        }
        v25 = ++v23 < v22;
        v26 += 136;
        if (v22 == v23)
          goto LABEL_8;
      }
      LOBYTE(v19) = Phase::Controller::StreamRenderer::ScheduleBuffer(v19, v16, v17, a7, a8, v18);
    }
    else
    {
LABEL_8:
      v25 = 0;
    }
    v27 = v25 & v19;
  }
  else
  {
    v27 = 0;
  }

  return v27 & 1;
}

void sub_2164E0904(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::remove(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t SlotForKey;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  int v16;
  unsigned int v17;
  std::unique_lock<std::mutex> v18;
  std::chrono::nanoseconds __ns;

  v18.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 80);
  v18.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 80));
  v6 = atomic_load((unint64_t *)(a1 + 40));
  if (v6
    && (SlotForKey = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey((uint64_t *)v6, a2, a3), (SlotForKey & 1) != 0))
  {
    v9 = v8;
    atomic_store(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)(v6 + 8 * HIDWORD(SlotForKey) + 16));
    if (v8)
    {
      v11 = atomic_load((unsigned int *)(a1 + 48));
      if (v11 >= 1)
      {
        do
        {
          __ns.__rep_ = 50000;
          std::this_thread::sleep_for (&__ns);
          v12 = atomic_load((unsigned int *)(a1 + 48));
        }
        while (v12 > 0);
      }
      if ((unsigned __int16)atomic_load((unsigned int *)v9))
      {
        std::unique_lock<std::mutex>::unlock(&v18);
        while ((unsigned __int16)atomic_load((unsigned int *)v9))
        {
          __ns.__rep_ = 500000;
          std::this_thread::sleep_for (&__ns);
        }
        std::unique_lock<std::mutex>::lock(&v18);
        v6 = atomic_load((unint64_t *)(a1 + 40));
      }
      caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::element_t::release((unsigned int *)v9);
      v16 = *(_DWORD *)(a1 + 32) - 1;
      *(_DWORD *)(a1 + 32) = v16;
      if (v6)
      {
        v17 = *(_DWORD *)(v6 + 8);
        v9 = 1;
        if (v17 >= 9 && 16 * v16 / v17 <= 2)
          caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::rehash((unint64_t *)a1, v17 >> 1);
      }
      else
      {
        v9 = 1;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::emptyReleasePool(a1);
  if (v18.__owns_)
    std::mutex::unlock(v18.__m_);
  return v9;
}

void sub_2164E0A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11)
{
  if (a11)
    std::mutex::unlock(a10);
  _Unwind_Resume(exception_object);
}

void Phase::ActionTreeManager::SubmitGeneratorBufferCompletedResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  Phase::ActionTreeObject::LeafNodeInfo *v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  Phase::Logger *v15;
  int v16;
  NSObject *v18;
  uint64_t v19;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD **)(a1 + 56);
  if (!v3)
    return;
  while (1)
  {
    v6 = v3[4];
    if (*(_BYTE *)(v6 + 144))
    {
      v7 = *(_QWORD *)(v6 + 56);
      v8 = *(_QWORD *)(v6 + 64);
      if (v8 != v7)
        break;
    }
LABEL_13:
    v3 = (_QWORD *)*v3;
    if (!v3)
      return;
  }
  v9 = 0;
  v10 = 1;
  while (1)
  {
    v11 = (Phase::ActionTreeObject::LeafNodeInfo *)(v7 + 136 * v9);
    if (*((_QWORD *)v11 + 1) != a2)
      goto LABEL_12;
    if (*((_QWORD *)v11 + 2) != a3)
      goto LABEL_12;
    if (*(unsigned __int8 *)(v7 + 136 * v9 + 24) - 2 > 2)
      goto LABEL_12;
    v12 = v7 + 136 * v9;
    v14 = *(unsigned __int8 *)(v12 + 40);
    v13 = (_BYTE *)(v12 + 40);
    if (!v14)
      goto LABEL_12;
    v19 = *(_QWORD *)(v7 + 136 * v9 + 48);
    v15 = (Phase::Logger *)Phase::ActionTreeObject::LeafNodeInfo::GeneratorStreamSeek(v11, *(Phase::Controller::TaskManager **)(a1 + 224));
    if (*v13)
      std::terminate();
    v16 = (int)v15;
    if ((_DWORD)v15)
      break;
    v7 = *(_QWORD *)(v6 + 56);
    v8 = *(_QWORD *)(v6 + 64);
LABEL_12:
    v9 = v10;
    if (0xF0F0F0F0F0F0F0F1 * ((v8 - v7) >> 3) <= v10++)
      goto LABEL_13;
  }
  v18 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15) + 688));
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    v22 = "ActionTreeManager.mm";
    v23 = 1024;
    v24 = 5799;
    v25 = 2048;
    v26 = a2;
    v27 = 2048;
    v28 = v19;
    v29 = 1024;
    v30 = v16;
    _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d generatorId %llu: buffer completion handler, seeking to time %.2fs, result %d, requesting deactivation", buf, 0x2Cu);
  }
  Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v11, 6u);
}

uint64_t Phase::ActionTreeManager::GeneratorStreamSeek(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v18;
  _BYTE *v19;
  int v20;

  v4 = *(_QWORD **)(a1 + 56);
  if (!v4)
    return 1;
  while (1)
  {
    v5 = v4[4];
    if (*(_BYTE *)(v5 + 144))
    {
      v8 = v5 + 56;
      v6 = *(_QWORD *)(v5 + 56);
      v7 = *(_QWORD *)(v8 + 8);
      v9 = v7 - v6;
      if (v7 != v6)
        break;
    }
LABEL_9:
    v4 = (_QWORD *)*v4;
    if (!v4)
      return 1;
  }
  v10 = 0;
  v11 = 0xF0F0F0F0F0F0F0F1 * (v9 >> 3);
  v12 = 1;
  while (1)
  {
    v13 = v6 + 136 * v10;
    v15 = *(_QWORD *)(v13 + 8);
    v14 = v13 + 8;
    if (v15 == a2 && *(_QWORD *)(v14 + 8) == a3 && *(_QWORD *)(v6 + 136 * v10 + 32))
      break;
    v10 = v12;
    if (v11 <= v12++)
      goto LABEL_9;
  }
  v18 = v6 + 136 * v10;
  v20 = *(unsigned __int8 *)(v18 + 40);
  v19 = (_BYTE *)(v18 + 40);
  if (!v20
    || (*(double *)(v6 + 136 * v10 + 48) = a4,
        result = Phase::ActionTreeObject::LeafNodeInfo::GeneratorStreamSeek((Phase::ActionTreeObject::LeafNodeInfo *)(v6 + 136 * v10), *(Phase::Controller::TaskManager **)(a1 + 224)), *v19))
  {
    std::terminate();
  }
  return result;
}

uint64_t Phase::ActionTreeManager::SubmitGeneratorPlayStateChanged(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((unint64_t)(*(_QWORD *)(result + 264) - 1) <= 1)
  {
    v4 = *(_QWORD **)(result + 56);
    if (v4)
    {
      v7 = a4 & 0xFFFFFFFD;
      do
      {
        v8 = v4[4];
        if (*(_BYTE *)(v8 + 144))
        {
          v9 = *(_QWORD *)(v8 + 56);
          if (*(_QWORD *)(v8 + 64) != v9)
          {
            v10 = 0;
            v11 = 1;
            do
            {
              v12 = v9 + 136 * v10;
              v14 = *(_QWORD *)(v12 + 8);
              v13 = v12 + 8;
              if (v14 == a2 && *(_QWORD *)(v13 + 8) == a3 && *(_BYTE *)(v9 + 136 * v10 + 64) == 4)
              {
                if (v7 == 1)
                {
                  result = Phase::Controller::StreamRenderer::Start(*(Phase::Controller::StreamRenderer **)(v9 + 136 * v10 + 32));
                }
                else if (!v7)
                {
                  result = Phase::Controller::StreamRenderer::Pause(*(_QWORD *)(v9 + 136 * v10 + 32));
                }
              }
              v10 = v11;
              v9 = *(_QWORD *)(v8 + 56);
            }
            while (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v8 + 64) - v9) >> 3) > v11++);
          }
        }
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
  }
  return result;
}

BOOL Phase::ActionTreeManager::IORenderOutput(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, vDSP_Length a5, unsigned int *a6)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  AudioBufferList *v13;
  unsigned int *v14;
  unsigned int v15;
  Phase::Controller::StreamRenderer *v16;
  unsigned int v17;
  _BOOL8 v18;
  unsigned int v19;
  unint64_t v20;
  void **v21;
  unsigned int v22;

  v9 = (unsigned int *)(a1 + 128);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = (uint64_t *)atomic_load((unint64_t *)(a1 + 120));
  if (!v11)
  {
    v14 = 0;
    do
LABEL_11:
      v19 = __ldaxr(v9);
    while (__stlxr(v19 - 1, v9));
    goto LABEL_12;
  }
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey(v11, a2, a3);
  v14 = (unsigned int *)v12;
  if (!v12)
    goto LABEL_11;
  do
    v15 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v15 + 1, (unsigned int *)v12));
  v16 = *(Phase::Controller::StreamRenderer **)(v12 + 24);
  do
    v17 = __ldaxr(v9);
  while (__stlxr(v17 - 1, v9));
  if (v16)
  {
    v18 = Phase::Controller::StreamRenderer::IORender(v16, a4, a5, a6, v13);
    do
LABEL_20:
      v22 = __ldaxr(v14);
    while (__stlxr(v22 - 1, v14));
    return v18;
  }
LABEL_12:
  if (a6 && *a6)
  {
    v20 = 0;
    v21 = (void **)(a6 + 4);
    do
    {
      v18 = *v21 != 0;
      if (!*v21)
        break;
      bzero(*v21, *((unsigned int *)v21 - 1));
      ++v20;
      v21 += 2;
    }
    while (v20 < *a6);
  }
  else
  {
    v18 = 0;
  }
  if (v14)
    goto LABEL_20;
  return v18;
}

void sub_2164E0F78(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

uint64_t Phase::ActionTreeManager::StopActionTreesWithActionTreeAsset(Phase::ActionTreeManager *this, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Phase::ActionTreeObject *v6;

  v2 = (_QWORD *)*((_QWORD *)this + 7);
  if (!v2)
    return 0;
  v5 = 0;
  do
  {
    v6 = (Phase::ActionTreeObject *)v2[4];
    if (**((_QWORD **)v6 + 3) == a2)
    {
      if (Phase::ActionTreeManager::StopByAssetUpdate(this, v6))
        v5 = 1;
      else
        v5 = v5;
    }
    v2 = (_QWORD *)*v2;
  }
  while (v2);
  return v5;
}

BOOL Phase::ActionTreeManager::StopByAssetUpdate(Phase::ActionTreeManager *this, Phase::ActionTreeObject *a2)
{
  int v2;
  NSObject *v5;
  uint64_t v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = *((unsigned __int8 *)a2 + 144);
  if ((v2 - 1) >= 8)
    return (v2 - 9) < 2;
  v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 688));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)a2;
    v8 = 136315650;
    v9 = "ActionTreeManager.mm";
    v10 = 1024;
    v11 = 6028;
    v12 = 2048;
    v13 = v6;
    _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Warning: Stopping Action tree %llu due to asset update.", (uint8_t *)&v8, 0x1Cu);
  }
  Phase::ActionTreeManager::StopActionTree((uint64_t)this, *(_QWORD *)a2, *((_QWORD *)a2 + 1), PHASESoundEventPrepareHandlerReasonPrepared, PHASESoundEventStartHandlerReasonFinishedPlaying);
  return 1;
}

BOOL Phase::ActionTreeManager::StopActionTreesWithSoundAsset(Phase::ActionTreeManager *this, uint64_t a2)
{
  _QWORD *v2;
  Phase::ActionTreeObject *v5;
  uint64_t i;
  _BOOL8 result;
  BOOL v8;

  v2 = (_QWORD *)*((_QWORD *)this + 7);
  if (!v2)
    return 0;
  do
  {
    v5 = (Phase::ActionTreeObject *)v2[4];
    for (i = *((_QWORD *)v5 + 7); ; i += 136)
    {
      if (i == *((_QWORD *)v5 + 8))
      {
        result = 0;
        goto LABEL_8;
      }
      if (*(_QWORD *)(i + 56) == a2)
        break;
    }
    result = Phase::ActionTreeManager::StopByAssetUpdate(this, v5);
LABEL_8:
    v2 = (_QWORD *)*v2;
    if (v2)
      v8 = !result;
    else
      v8 = 0;
  }
  while (v8);
  return result;
}

uint64_t Phase::ActionTreeManager::StopActionTreesWithGlobalMetaParameterAsset(Phase::ActionTreeManager *this, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Phase::ActionTreeObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v2 = (_QWORD *)*((_QWORD *)this + 7);
  if (!v2)
    return 0;
  v5 = 0;
  do
  {
    v6 = (Phase::ActionTreeObject *)v2[4];
    v7 = *((_QWORD *)v6 + 3);
    v8 = *(unsigned int *)(v7 + 8);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(v7 + 16);
      while (1)
      {
        v10 = *v9++;
        if (v10 == a2)
          break;
        if (!--v8)
          goto LABEL_11;
      }
      if (Phase::ActionTreeManager::StopByAssetUpdate(this, v6))
        v5 = 1;
      else
        v5 = v5;
    }
LABEL_11:
    v2 = (_QWORD *)*v2;
  }
  while (v2);
  return v5;
}

uint64_t Phase::ActionTreeManager::StopActionTreesWithListenerSourceId(Phase::ActionTreeManager *this, Handle64 a2)
{
  _QWORD *v2;
  uint64_t v5;
  Phase::ActionTreeObject *v6;
  uint64_t i;

  v2 = (_QWORD *)*((_QWORD *)this + 7);
  if (!v2)
    return 0;
  v5 = 0;
  do
  {
    v6 = (Phase::ActionTreeObject *)v2[4];
    for (i = *((_QWORD *)v6 + 10); i != *((_QWORD *)v6 + 11); i += 96)
    {
      if (*(_QWORD *)(i + 32) == a2.mData || *(_QWORD *)(i + 24) == a2.mData)
      {
        if (Phase::ActionTreeManager::StopByAssetUpdate(this, v6))
          v5 = 1;
        else
          v5 = v5;
        break;
      }
    }
    v2 = (_QWORD *)*v2;
  }
  while (v2);
  return v5;
}

_QWORD *Phase::ActionTreeManager::GetActiveGroups(_QWORD *result, uint64_t a2)
{
  _QWORD *i;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  for (i = (_QWORD *)result[7]; i; i = (_QWORD *)*i)
  {
    v4 = i[4];
    v5 = *(unsigned __int8 *)(v4 + 144);
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x230;
    if (!v6 && v7 != 0)
    {
      v9 = *(_QWORD *)(v4 + 56);
      v10 = *(_QWORD *)(v4 + 64);
      while (v9 != v10)
      {
        if ((*(_BYTE *)(v9 + 24) & 0xFC) == 4)
          result = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(a2, (unint64_t *)(v9 + 72), (_QWORD *)(v9 + 72));
        v9 += 136;
      }
    }
  }
  return result;
}

Phase::Logger *Phase::ActionTreeManager::HandleGeneratorError(Phase::Logger *result, uint64_t a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t **)*((_QWORD *)result + 7);
  if (v3)
  {
    v4 = (uint64_t)result;
    while (2)
    {
      v5 = v3[4];
      v6 = v5[7];
      v7 = v5[8];
      while (v6 != v7)
      {
        if (*(_QWORD *)(v6 + 8) == a2 && *(_QWORD *)(v6 + 16) == a3)
        {
          v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result)
                                                                                             + 688)));
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend((id)v3[4][2], "identifier");
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v10 = 136315650;
            v11 = "ActionTreeManager.mm";
            v12 = 1024;
            v13 = 6201;
            v14 = 2112;
            v15 = v9;
            _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Received Generator error.  Stopping action tree instance with action tree UID: %@", (uint8_t *)&v10, 0x1Cu);

          }
          return (Phase::Logger *)Phase::ActionTreeManager::StopActionTree(v4, *v3[4], v3[4][1], PHASESoundEventPrepareHandlerReasonFailure, PHASESoundEventStartHandlerReasonFailure);
        }
        v6 += 136;
      }
      v3 = (uint64_t **)*v3;
      if (v3)
        continue;
      break;
    }
  }
  return result;
}

void sub_2164E147C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

Phase::Logger *Phase::ActionTreeManager::HandleSubmixError(Phase::Logger *result, uint64_t a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t **)*((_QWORD *)result + 7);
  if (v3)
  {
    v4 = (uint64_t)result;
    while (2)
    {
      v5 = v3[4];
      v6 = v5[10];
      v7 = v5[11];
      while (v6 != v7)
      {
        if (*(_QWORD *)(v6 + 8) == a2 && *(_QWORD *)(v6 + 16) == a3)
        {
          v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result)
                                                                                             + 688)));
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend((id)v3[4][2], "identifier");
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v10 = 136315650;
            v11 = "ActionTreeManager.mm";
            v12 = 1024;
            v13 = 6220;
            v14 = 2112;
            v15 = v9;
            _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Received Submix error.  Stopping action tree instance with action tree UID: %@", (uint8_t *)&v10, 0x1Cu);

          }
          return (Phase::Logger *)Phase::ActionTreeManager::StopActionTree(v4, *v3[4], v3[4][1], PHASESoundEventPrepareHandlerReasonFailure, PHASESoundEventStartHandlerReasonFailure);
        }
        v6 += 96;
      }
      v3 = (uint64_t **)*v3;
      if (v3)
        continue;
      break;
    }
  }
  return result;
}

void sub_2164E15E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::ActionTreeManager::~ActionTreeManager(Phase::ActionTreeManager *this)
{
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::~guarded_lookup_hash_table((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::~__hash_table((uint64_t)this + 40);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::~guarded_lookup_hash_table((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::~__hash_table((uint64_t)this + 40);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
  JUMPOUT(0x2199F9D70);
}

void std::vector<Phase::MetaParamValue>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v16 = &v4[8 * a2];
    goto LABEL_18;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v16 = &v3[8 * v6];
LABEL_18:
    a1[1] = v16;
    return;
  }
  if (a2 >> 61)
    std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v4;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v11 = (char *)operator new(8 * v10);
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  bzero(v12, 8 * v6);
  v14 = &v12[8 * v6];
  if (v3 != v4)
  {
    do
    {
      v15 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v12 - 1) = v15;
      v12 -= 8;
    }
    while (v3 != v4);
    v3 = v4;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
    operator delete(v3);
}

void std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

_QWORD *std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__assign_with_size[abi:ne180100]<Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(uint64_t a1, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *result;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(_QWORD **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6)
  {
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vdeallocate((void **)a1);
    if (a4 >> 58)
      std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 5;
    if (v10 >> 5 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(v8, (uint64_t)a2, (uint64_t)a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 6;
  if (v14 < a4)
  {
    v15 = &a2[8 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::SegmentInternal *>((uint64_t)&v20, a2, v15, v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(v8, (uint64_t)v15, (uint64_t)a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::SegmentInternal *>((uint64_t)&v21, a2, a3, v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    while (1)
    {
      result = *(_QWORD **)(v18 - 8);
      if ((_QWORD *)(v18 - 32) == result)
        break;
      if (result)
      {
        v19 = 5;
LABEL_17:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v19))();
      }
      v18 -= 64;
      if (v18 == v17)
        goto LABEL_19;
    }
    result = (_QWORD *)(v18 - 32);
    v19 = 4;
    goto LABEL_17;
  }
LABEL_19:
  *(_QWORD *)(a1 + 8) = v17;
  return result;
}

void sub_2164E18F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2164E1900(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;

  v1 = (char *)*a1;
  if (!*a1)
    return;
  v3 = (char *)a1[1];
  v4 = *a1;
  if (v3 == v1)
    goto LABEL_10;
  do
  {
    v5 = (char *)*((_QWORD *)v3 - 1);
    if (v3 - 32 == v5)
    {
      v5 = v3 - 32;
      v6 = 4;
    }
    else
    {
      if (!v5)
        goto LABEL_8;
      v6 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_8:
    v3 -= 64;
  }
  while (v3 != v1);
  v4 = *a1;
LABEL_10:
  a1[1] = v1;
  operator delete(v4);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

char *std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  char v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2 + 32;
    do
    {
      v7 = v6 - 32;
      *v4 = *(_QWORD *)(v6 - 32);
      v4[1] = *(_QWORD *)(v6 - 24);
      v4[2] = *(_QWORD *)(v6 - 16);
      v4[3] = *(_QWORD *)(v6 - 8);
      std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(v4 + 4), v6);
      v4 = v12 + 8;
      v12 += 8;
      v6 += 64;
    }
    while (v7 + 64 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::SegmentInternal*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2164E1A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::SegmentInternal*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::SegmentInternal*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::SegmentInternal*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::SegmentInternal*>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_QWORD **)(result + 16);
  v2 = **(_QWORD **)(result + 8);
  while (v1 != v2)
  {
    result = *(_QWORD *)(v1 - 8);
    if (v1 - 32 == result)
    {
      result = v1 - 32;
      v3 = 4;
    }
    else
    {
      if (!result)
        goto LABEL_8;
      v3 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v3))();
LABEL_8:
    v1 -= 64;
  }
  return result;
}

_QWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::SegmentInternal *>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *a4 = *v5;
    a4[1] = v5[1];
    a4[2] = v5[2];
    a4[3] = v5[3];
    std::function<double ()(double)>::operator=(a4 + 4, (uint64_t)(v5 + 4));
    a4 += 8;
    v5 += 8;
  }
  while (v5 != v6);
  return v6;
}

_QWORD *std::function<double ()(double)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<double ()(double)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2164E1DB4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 6);
}

Phase::Logger *Phase::Fader<double>::Fader(Phase::Logger *a1, double a2)
{
  Phase::Logger *v4;

  v4 = Phase::Envelope<double>::Envelope(a1);
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 5) = 0;
  Phase::Fader<double>::SetDefaultValue((uint64_t)v4, a2);
  return a1;
}

void sub_2164E1E3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Envelope<double>::Envelope(Phase::Logger *a1)
{
  _QWORD *v2;
  __n128 v3;
  uint64_t v4;
  double v6[2];
  double v7[2];
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v6[0] = 0.0;
  v6[1] = 0.0;
  v2 = v8;
  v7[0] = 0.0;
  v7[1] = 0.0;
  v8[0] = &off_24D577068;
  v9 = v8;
  v3.n128_f64[0] = Phase::Envelope<double>::InitializeFromSingleSegment(a1, v6, v7);
  if (v9 == v8)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (v9)
  {
    v4 = 5;
    v2 = v9;
LABEL_5:
    (*(void (**)(_QWORD *, __n128))(*v2 + 8 * v4))(v2, v3);
  }
  return a1;
}

void sub_2164E1F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

double Phase::Envelope<double>::InitializeFromSingleSegment(Phase::Logger *a1, double *a2, double *a3)
{
  double v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  double *v9;
  double result;
  NSObject *v12;
  double v13;
  double v14;
  std::logic_error *exception;
  _BYTE v16[38];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = *a3;
  if (*a2 > *a3)
  {
    v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 96));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = *a2;
      v14 = *a3;
      *(_DWORD *)v16 = 136315906;
      *(_QWORD *)&v16[4] = "Envelope.hpp";
      *(_WORD *)&v16[12] = 1024;
      *(_DWORD *)&v16[14] = 243;
      *(_WORD *)&v16[18] = 2048;
      *(double *)&v16[20] = v13;
      *(_WORD *)&v16[28] = 2048;
      *(double *)&v16[30] = v14;
      _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (EnvelopeException::InvalidStartPoint) [!(inStartPoint.x <= inSegment.mEndPoint.x) is true]: \"Invalid start point x value: %f. Must be <= end point x value: %f\"", v16, 0x26u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase17EnvelopeException17InvalidStartPointCI1St11logic_errorEPKc(exception, "Invalid start point x value: %f. Must be <= end point x value: %f");
  }
  *(_QWORD *)v16 = 0;
  *(_QWORD *)&v16[8] = 0;
  v6 = *((_QWORD *)a3 + 1);
  *(double *)&v16[16] = v4;
  *(_QWORD *)&v16[24] = v6;
  v7 = &v16[32];
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)&v16[32], (uint64_t)(a3 + 2));
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::assign((uint64_t)a1, 1uLL, v16);
  if (v17 == &v16[32])
  {
    v8 = 4;
    goto LABEL_6;
  }
  if (v17)
  {
    v8 = 5;
    v7 = v17;
LABEL_6:
    (*(void (**)(_QWORD *))(*v7 + 8 * v8))(v7);
  }
  v9 = *(double **)a1;
  *v9 = *a2;
  result = a2[1];
  v9[1] = result;
  return result;
}

void sub_2164E20FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

std::logic_error *_ZN5Phase17EnvelopeException17InvalidStartPointCI1St11logic_errorEPKc(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)&off_24D5770C8;
  return result;
}

uint64_t std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::assign(uint64_t result, unint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = *(_QWORD **)result;
  if (a2 <= (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 6)
  {
    v13 = *(_QWORD *)(result + 8) - (_QWORD)v6;
    v14 = v13 >> 6;
    if (v13 >> 6 >= a2)
      v15 = a2;
    else
      v15 = v13 >> 6;
    for (; v15; --v15)
    {
      *v6 = *a3;
      v6[1] = a3[1];
      v6[2] = a3[2];
      v6[3] = a3[3];
      result = (uint64_t)std::function<double ()(double)>::operator=(v6 + 4, (uint64_t)(a3 + 4));
      v6 += 8;
    }
    if (a2 > v14)
    {
      v16 = (_QWORD *)v5[1];
      v17 = &v16[8 * (a2 - v14)];
      v18 = (a2 << 6) - (v14 << 6);
      do
      {
        *v16 = *a3;
        v16[1] = a3[1];
        v16[2] = a3[2];
        v16[3] = a3[3];
        result = std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(v16 + 4), (uint64_t)(a3 + 4));
        v16 += 8;
        v18 -= 64;
      }
      while (v18);
      v5[1] = v17;
      return result;
    }
    v19 = v5[1];
    v20 = *v5 + (a2 << 6);
    while (1)
    {
      if (v19 == v20)
      {
        v5[1] = v20;
        return result;
      }
      result = *(_QWORD *)(v19 - 8);
      if (v19 - 32 == result)
      {
        result = v19 - 32;
        v21 = 4;
      }
      else
      {
        if (!result)
          goto LABEL_27;
        v21 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v21))();
LABEL_27:
      v19 -= 64;
    }
  }
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vdeallocate((void **)result);
  if (a2 >> 58)
    std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
  v7 = v5[2] - *v5;
  v8 = v7 >> 5;
  if (v7 >> 5 <= a2)
    v8 = a2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v8;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vallocate[abi:ne180100](v5, v9);
  v10 = (_QWORD *)v5[1];
  v11 = &v10[8 * a2];
  v12 = a2 << 6;
  do
  {
    *v10 = *a3;
    v10[1] = a3[1];
    v10[2] = a3[2];
    v10[3] = a3[3];
    result = std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(v10 + 4), (uint64_t)(a3 + 4));
    v10 += 8;
    v12 -= 64;
  }
  while (v12);
  v5[1] = v11;
  return result;
}

void sub_2164E2358(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2164E2360(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void Phase::EnvelopeException::InvalidStartPoint::~InvalidStartPoint(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

void std::__function::__func<Phase::Envelope<double>::Envelope(void)::{lambda(double)#1},std::allocator<Phase::Envelope<double>::Envelope(void)::{lambda(double)#1}>,double ()(double)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Envelope<double>::Envelope(void)::{lambda(double)#1},std::allocator<Phase::Envelope<double>::Envelope(void)::{lambda(double)#1}>,double ()(double)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D577068;
  return result;
}

void std::__function::__func<Phase::Envelope<double>::Envelope(void)::{lambda(double)#1},std::allocator<Phase::Envelope<double>::Envelope(void)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D577068;
}

double std::__function::__func<Phase::Envelope<double>::Envelope(void)::{lambda(double)#1},std::allocator<Phase::Envelope<double>::Envelope(void)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

void std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = (char *)*((_QWORD *)v4 - 1);
    if (v4 - 32 == v6)
    {
      v6 = v4 - 32;
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_8;
      v7 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_8:
    v4 -= 64;
  }
  while (v4 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

void Phase::Controller::GetCurveFunctionFromCurveType<double>(Phase::Logger *a1@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  uint64_t (*v4)();
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v2 = (int)a1;
  v12 = *MEMORY[0x24BDAC8D0];
  v4 = Phase::CurveFunction::Linear<double>;
  if ((uint64_t)a1 <= 1668434002)
  {
    switch((unint64_t)a1)
    {
      case 0uLL:
        goto LABEL_31;
      case 1uLL:
        goto LABEL_13;
      case 2uLL:
        goto LABEL_21;
      case 3uLL:
        goto LABEL_25;
      case 4uLL:
        goto LABEL_16;
      case 5uLL:
        goto LABEL_8;
      case 6uLL:
        goto LABEL_23;
      case 7uLL:
        goto LABEL_22;
      case 8uLL:
        goto LABEL_20;
      default:
        if (a1 != (Phase::Logger *)1668432757)
          goto LABEL_28;
LABEL_25:
        v4 = (uint64_t (*)())Phase::CurveFunction::Cubed<double>;
        break;
    }
    goto LABEL_31;
  }
  if ((uint64_t)a1 <= 1668434500)
  {
    if ((uint64_t)a1 <= 1668434246)
    {
      if (a1 == (Phase::Logger *)1668434003)
      {
        v4 = (uint64_t (*)())Phase::CurveFunction::HoldStartValue<double>;
        goto LABEL_31;
      }
      if (a1 == (Phase::Logger *)1668434243)
      {
LABEL_16:
        v4 = (uint64_t (*)())Phase::CurveFunction::InverseCubed<double>;
        goto LABEL_31;
      }
    }
    else
    {
      if (a1 == (Phase::Logger *)1668434247)
      {
LABEL_20:
        v4 = (uint64_t (*)())Phase::CurveFunction::InverseSigmoid<double>;
        goto LABEL_31;
      }
      if (a1 == (Phase::Logger *)1668434257)
      {
LABEL_21:
        v4 = (uint64_t (*)())Phase::CurveFunction::InverseSquared<double>;
        goto LABEL_31;
      }
      if (a1 == (Phase::Logger *)1668434259)
      {
LABEL_8:
        v4 = (uint64_t (*)())Phase::CurveFunction::InverseSine<double>;
        goto LABEL_31;
      }
    }
    goto LABEL_28;
  }
  if ((uint64_t)a1 > 1668436838)
  {
    if (a1 == (Phase::Logger *)1668436839)
    {
LABEL_22:
      v4 = (uint64_t (*)())Phase::CurveFunction::Sigmoid<double>;
      goto LABEL_31;
    }
    if (a1 == (Phase::Logger *)1668436846)
    {
LABEL_23:
      v4 = (uint64_t (*)())Phase::CurveFunction::Sine<double>;
      goto LABEL_31;
    }
    if (a1 == (Phase::Logger *)1668436849)
    {
LABEL_13:
      v4 = (uint64_t (*)())Phase::CurveFunction::Squared<double>;
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  if (a1 == (Phase::Logger *)1668434501)
  {
    v4 = (uint64_t (*)())Phase::CurveFunction::JumpToEndValue<double>;
    goto LABEL_31;
  }
  if (a1 != (Phase::Logger *)1668435054)
  {
LABEL_28:
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 640));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "CurveUtility.hpp";
      v8 = 1024;
      v9 = 90;
      v10 = 1024;
      v11 = v2;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported PHASECurveType %d. Setting the curve to linear.", (uint8_t *)&v6, 0x18u);
    }
    v4 = Phase::CurveFunction::Linear<double>;
  }
LABEL_31:
  *a2 = &unk_24D5770F0;
  a2[1] = v4;
  a2[3] = a2;
}

double Phase::Envelope<double>::operator()(double **a1, double a2)
{
  double *v3;
  double *v4;
  double v5;
  double v6;
  BOOL v7;
  double v8;

  v3 = *a1;
  v4 = a1[1];
  v5 = *v3;
  v6 = *(v4 - 6);
  v7 = v6 >= a2 && v5 <= a2;
  v8 = fmin(fmax(a2, v5), v6);
  if (!v7)
    a2 = v8;
  if (v4 != v3)
  {
    while (a2 < *v3 || a2 >= v3[2])
    {
      v3 += 8;
      if (v3 == v4)
        goto LABEL_14;
    }
  }
  if (v3 == v4)
  {
LABEL_14:
    if (a2 != *(v4 - 6))
      std::terminate();
    v3 = v4 - 8;
  }
  return Phase::Envelope<double>::SegmentInternal::operator()((uint64_t)v3, a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::Segment>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

void std::__function::__func<Phase::Envelope<double>::Segment::{lambda(double)#1},std::allocator<Phase::Envelope<double>::Segment::{lambda(double)#1}>,double ()(double)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Envelope<double>::Segment::{lambda(double)#1},std::allocator<Phase::Envelope<double>::Segment::{lambda(double)#1}>,double ()(double)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D576F70;
  return result;
}

void std::__function::__func<Phase::Envelope<double>::Segment::{lambda(double)#1},std::allocator<Phase::Envelope<double>::Segment::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D576F70;
}

double std::__function::__func<Phase::Envelope<double>::Segment::{lambda(double)#1},std::allocator<Phase::Envelope<double>::Segment::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

void std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = (char *)*((_QWORD *)v4 - 1);
    if (v4 - 32 == v6)
    {
      v6 = v4 - 32;
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_8;
      v7 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_8:
    v4 -= 48;
  }
  while (v4 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

double Phase::CurveFunction::Squared<double>(double a1)
{
  return a1 * a1;
}

double Phase::CurveFunction::InverseSquared<double>(double a1)
{
  return 1.0 - (1.0 - a1) * (1.0 - a1);
}

double Phase::CurveFunction::Cubed<double>(double a1)
{
  return a1 * a1 * a1;
}

double Phase::CurveFunction::InverseCubed<double>(double a1)
{
  return 1.0 - (1.0 - a1) * ((1.0 - a1) * (1.0 - a1));
}

long double Phase::CurveFunction::Sine<double>(double a1)
{
  return sin((a1 + -1.0 + 1.0) * 3.14159265 * 0.5) + -1.0 + 1.0;
}

long double Phase::CurveFunction::InverseSine<double>(double a1)
{
  return sin((1.0 - a1) * -3.14159265 * 0.5) + 1.0;
}

void Phase::CurveFunction::Sigmoid<double>(double a1)
{
  if (a1 >= 0.5)
    sin((1.0 - ((a1 + -0.5) * -2.0 + 1.0)) * 3.14159265 * 0.5);
  else
    sin((1.0 - (a1 + a1)) * -3.14159265 * 0.5);
}

void Phase::CurveFunction::InverseSigmoid<double>(double a1)
{
  if (a1 >= 0.5)
    sin((1.0 - (a1 + -0.5 + a1 + -0.5)) * -3.14159265 * 0.5);
  else
    sin((1.0 - (a1 * -2.0 + 1.0)) * 3.14159265 * 0.5);
}

double Phase::CurveFunction::HoldStartValue<double>()
{
  return 0.0;
}

double Phase::CurveFunction::JumpToEndValue<double>()
{
  return 1.0;
}

void std::__function::__func<double (*)(double),std::allocator<double (*)(double)>,double ()(double)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<double (*)(double),std::allocator<double (*)(double)>,double ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24D5770F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<double (*)(double),std::allocator<double (*)(double)>,double ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24D5770F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<double (*)(double),std::allocator<double (*)(double)>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return (*(uint64_t (**)(double))(a1 + 8))(*a2);
}

_QWORD *std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

Phase::Logger *Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Logger *a1, uint64_t a2, double *a3, __int128 *a4)
{
  unint64_t v6;
  _QWORD *v7;
  __n128 v8;
  uint64_t v9;
  double *v10;
  unint64_t v11;
  uint64_t v12;
  Phase::Logger *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  NSObject *v19;
  double v20;
  uint64_t v21;
  std::logic_error *exception;
  char v23;
  _BYTE buf[28];
  __int16 v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)a4 - (char *)a3) >> 4);
  if (v6 == 1)
  {
    Phase::Envelope<double>::InitializeFromSingleSegment(a1, (double *)a2, a3);
  }
  else if (v6)
  {
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>>((uint64_t)a1, (__int128 *)a3, a4, v6);
    v10 = (double *)*((_QWORD *)a1 + 1);
    v11 = 126 - 2 * __clz(((uint64_t)v10 - *(_QWORD *)a1) >> 6);
    if (v10 == *(double **)a1)
      v12 = 0;
    else
      v12 = v11;
    v13 = (Phase::Logger *)std::__introsort<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*,false>(*(_QWORD *)a1, v10, (uint64_t)&v23, v12, 1);
    v14 = *(_QWORD **)a1;
    if (*(double *)a2 > *(double *)(*(_QWORD *)a1 + 16))
    {
      v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v13) + 640));
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v20 = *(double *)a2;
        v21 = *(_QWORD *)(*(_QWORD *)a1 + 16);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "Envelope.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 117;
        *(_WORD *)&buf[18] = 2048;
        *(double *)&buf[20] = v20;
        v25 = 2048;
        v26 = v21;
        _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (EnvelopeException::InvalidStartPoint) [!(inStartPoint.x <= mSegments[0].mEndPoint.x) is true]: \"Invalid start point x value: %f. Must be <= first end point x value: %f\"", buf, 0x26u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Invalid start point x value: %f. Must be <= first end point x value: %f");
      exception->__vftable = (std::logic_error_vtbl *)&off_24D5770C8;
    }
    *v14 = *(_QWORD *)a2;
    v14[1] = *(_QWORD *)(a2 + 8);
    v15 = (uint64_t)(*((_QWORD *)a1 + 1) - (_QWORD)v14) >> 6;
    v16 = v15 - 1;
    if (v15 != 1)
    {
      v17 = &v14[8 * v15 - 14];
      do
      {
        v17[3] = *v17;
        v17 -= 4;
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    v7 = &buf[16];
    *(_QWORD *)&buf[16] = &off_24D576F70;
    v27 = &buf[16];
    *(_OWORD *)buf = *(_OWORD *)a2;
    v8.n128_f64[0] = Phase::Envelope<double>::InitializeFromSingleSegment(a1, (double *)a2, (double *)buf);
    if (v27 == &buf[16])
    {
      v9 = 4;
      goto LABEL_16;
    }
    if (v27)
    {
      v9 = 5;
      v7 = v27;
LABEL_16:
      (*(void (**)(_QWORD *, __n128))(*v7 + 8 * v9))(v7, v8);
    }
  }
  return a1;
}

void sub_2164E2E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  __cxa_free_exception(v16);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>>(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *result;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6)
  {
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vdeallocate((void **)a1);
    if (a4 >> 58)
      std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 5;
    if (v10 >> 5 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::SegmentInternal*>(v8, (uint64_t)a2, (uint64_t)a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 6;
  if (v14 < a4)
  {
    v15 = &a2[3 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::Envelope<double>::Segment *,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::SegmentInternal *>((uint64_t)&v20, a2, v15, (uint64_t)v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::SegmentInternal*>(v8, (uint64_t)v15, (uint64_t)a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::Envelope<double>::Segment *,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::SegmentInternal *>((uint64_t)&v21, a2, a3, (uint64_t)v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    while (1)
    {
      result = *(_QWORD **)(v18 - 8);
      if ((_QWORD *)(v18 - 32) == result)
        break;
      if (result)
      {
        v19 = 5;
LABEL_17:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v19))();
      }
      v18 -= 64;
      if (v18 == v17)
        goto LABEL_19;
    }
    result = (_QWORD *)(v18 - 32);
    v19 = 4;
    goto LABEL_17;
  }
LABEL_19:
  *(_QWORD *)(a1 + 8) = v17;
  return result;
}

void sub_2164E2FE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2164E2FE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::SegmentInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  char v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2 + 16;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v7 = v6 - 16;
      v4[2] = *(_QWORD *)(v6 - 16);
      v4[3] = *(_QWORD *)(v6 - 8);
      std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(v4 + 4), v6);
      v4 = v12 + 8;
      v12 += 8;
      v6 += 48;
    }
    while (v7 + 48 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::SegmentInternal*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2164E3098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::SegmentInternal*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::Envelope<double>::Segment *,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::SegmentInternal *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v4 = a2;
  v13 = *MEMORY[0x24BDAC8D0];
  if (a2 != a3)
  {
    v5 = a3;
    while (1)
    {
      v6 = a4;
      v10 = *v4;
      std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)(v4 + 1));
      *(_OWORD *)v6 = 0uLL;
      *(_OWORD *)(v6 + 16) = v10;
      std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v6 + 32), (uint64_t)v11);
      v7 = v12;
      if (v12 == v11)
        break;
      if (v12)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      v4 += 3;
      a4 = v6 + 64;
      if (v4 == v5)
        return v5;
    }
    v7 = v11;
    v8 = 4;
    goto LABEL_7;
  }
  return a2;
}

void sub_2164E31AC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*,false>(uint64_t result, double *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  BOOL v18;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = ((uint64_t)a2 - v9) >> 6;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 6) < *(double *)(v9 + 16))
          return (uint64_t)std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>((__int128 *)v9, (_QWORD *)a2 - 8);
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v9, v9 + 64, (uint64_t)(a2 - 8));
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v9, v9 + 64, v9 + 128, (uint64_t)(a2 - 8));
      case 5uLL:
        return (uint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v9, v9 + 64, v9 + 128, v9 + 192, (uint64_t)(a2 - 8));
      default:
        if (v12 <= 1535)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>((_QWORD *)v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>((_OWORD *)v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (_QWORD *)(v9 + (v13 >> 1 << 6));
          if ((unint64_t)v12 <= 0x2000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v9 + (v13 >> 1 << 6), v9, (uint64_t)(a2 - 8));
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v9, v9 + (v13 >> 1 << 6), (uint64_t)(a2 - 8));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v9 + 64, (uint64_t)(v15 - 8), (uint64_t)(a2 - 16));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v9 + 128, v9 + 64 + (v14 << 6), (uint64_t)(a2 - 24));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>((uint64_t)(v15 - 8), (uint64_t)v15, v9 + 64 + (v14 << 6));
            std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>((__int128 *)v9, v15);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(double *)(v9 - 48) >= *(double *)(v9 + 16))
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &>((__int128 *)v9, a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v16 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &>((__int128 *)v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_15;
          v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v9, v16);
          v9 = v16 + 64;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v16 + 64, (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*,false>(v8, v16, a3, -v11, a5 & 1);
            v9 = v16 + 64;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (double *)v16;
          if (v18)
            return result;
          goto LABEL_2;
        }
        if ((double *)v9 != a2)
          return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return result;
    }
  }
}

_QWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(_QWORD *result, _QWORD *a2)
{
  char *v3;
  _OWORD *v4;
  uint64_t v5;
  double *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (result != a2)
  {
    v3 = (char *)result;
    v4 = result + 8;
    if (result + 8 != a2)
    {
      v5 = 0;
      v6 = (double *)result;
      do
      {
        v7 = v4;
        if (v6[10] < v6[2])
        {
          *(_OWORD *)v13 = *v4;
          *(double *)&v13[16] = v6[10];
          v14 = *((_QWORD *)v6 + 11);
          std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)(v6 + 12));
          v8 = v5;
          while (1)
          {
            v9 = v8;
            v10 = &v3[v8];
            *((_QWORD *)v10 + 8) = *(_QWORD *)v10;
            *(_OWORD *)(v10 + 72) = *(_OWORD *)(v10 + 8);
            *((_QWORD *)v10 + 11) = *((_QWORD *)v10 + 3);
            std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)v10 + 12, (uint64_t)(v10 + 32));
            if (!v9)
              break;
            v8 = v9 - 64;
            if (*(double *)&v13[16] >= *(double *)&v3[v9 - 48])
            {
              v11 = &v3[v9];
              goto LABEL_10;
            }
          }
          v11 = v3;
LABEL_10:
          *(_QWORD *)v11 = *(_QWORD *)v13;
          *(_OWORD *)(v11 + 8) = *(_OWORD *)&v13[8];
          *((_QWORD *)v11 + 3) = v14;
          std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](&v3[v9 + 32], (uint64_t)v15);
          result = v16;
          if (v16 == v15)
          {
            result = v15;
            v12 = 4;
            goto LABEL_14;
          }
          if (v16)
          {
            v12 = 5;
LABEL_14:
            result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
          }
        }
        v4 = v7 + 4;
        v5 += 64;
        v6 = (double *)v7;
      }
      while (v7 + 4 != (_OWORD *)a2);
    }
  }
  return result;
}

void sub_2164E3680(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_OWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(_OWORD *result, _OWORD *a2)
{
  _OWORD *v3;
  double *v4;
  _OWORD *v5;
  double *v6;
  double *v7;
  double v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  double v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (result != a2)
  {
    v3 = result + 4;
    if (result + 4 != a2)
    {
      v4 = (double *)(result + 6);
      do
      {
        v5 = v3;
        if (*((double *)result + 10) < *((double *)result + 2))
        {
          v11 = *v3;
          v12 = *((double *)result + 10);
          v13 = *((_QWORD *)result + 11);
          std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)(result + 6));
          v6 = v4;
          do
          {
            *(v6 - 4) = *(v6 - 12);
            *(_OWORD *)(v6 - 3) = *(_OWORD *)(v6 - 11);
            *(v6 - 1) = *(v6 - 9);
            v7 = v6 - 8;
            std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v6, (uint64_t)(v6 - 8));
            v8 = *(v6 - 18);
            v6 -= 8;
          }
          while (v12 < v8);
          *((_OWORD *)v7 - 2) = v11;
          *(v7 - 2) = v12;
          *((_QWORD *)v7 - 1) = v13;
          std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v7, (uint64_t)v14);
          v9 = v15;
          if (v15 == v14)
          {
            v9 = v14;
            v10 = 4;
            goto LABEL_11;
          }
          if (v15)
          {
            v10 = 5;
LABEL_11:
            (*(void (**)(void))(*v9 + 8 * v10))();
          }
        }
        v3 = v5 + 4;
        v4 += 8;
        result = v5;
      }
      while (v5 + 4 != a2);
    }
  }
  return result;
}

void sub_2164E37DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  double v7;
  __int128 *v8;
  _QWORD *v9;

  v6 = *(double *)(a2 + 16);
  v7 = *(double *)(a3 + 16);
  if (v6 < *(double *)(a1 + 16))
  {
    if (v7 < v6)
    {
      std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>((__int128 *)a1, (_QWORD *)a3);
      return 1;
    }
    std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>((__int128 *)a1, (_QWORD *)a2);
    if (*(double *)(a3 + 16) >= *(double *)(a2 + 16))
      return 1;
    v8 = (__int128 *)a2;
    v9 = (_QWORD *)a3;
LABEL_9:
    std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>(v8, v9);
    return 2;
  }
  if (v7 < v6)
  {
    std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>((__int128 *)a2, (_QWORD *)a3);
    if (*(double *)(a2 + 16) >= *(double *)(a1 + 16))
      return 1;
    v8 = (__int128 *)a1;
    v9 = (_QWORD *)a2;
    goto LABEL_9;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &>(__int128 *a1, double *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  double *v6;
  unint64_t v7;
  double v8;
  unint64_t v9;
  double v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v17 = *a1;
  v18 = a1[1];
  v4 = v19;
  v5 = a1 + 2;
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)(a1 + 2));
  if (*(double *)&v18 >= *(a2 - 6))
  {
    v9 = (unint64_t)(a1 + 4);
    do
    {
      v7 = v9;
      if (v9 >= (unint64_t)a2)
        break;
      v10 = *(double *)(v9 + 16);
      v9 += 64;
    }
    while (*(double *)&v18 >= v10);
  }
  else
  {
    v6 = (double *)a1;
    do
    {
      v7 = (unint64_t)(v6 + 8);
      v8 = v6[10];
      v6 += 8;
    }
    while (*(double *)&v18 >= v8);
  }
  if (v7 >= (unint64_t)a2)
  {
    v11 = a2;
  }
  else
  {
    do
    {
      v11 = a2 - 8;
      v12 = *(a2 - 6);
      a2 -= 8;
    }
    while (*(double *)&v18 < v12);
  }
  while (v7 < (unint64_t)v11)
  {
    std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>((__int128 *)v7, v11);
    do
    {
      v13 = *(double *)(v7 + 80);
      v7 += 64;
    }
    while (*(double *)&v18 >= v13);
    do
    {
      v14 = *(v11 - 6);
      v11 -= 8;
    }
    while (*(double *)&v18 < v14);
  }
  if ((__int128 *)(v7 - 64) != a1)
  {
    *(_QWORD *)a1 = *(_QWORD *)(v7 - 64);
    *((_QWORD *)a1 + 1) = *(_QWORD *)(v7 - 56);
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v7 - 48);
    *((_QWORD *)a1 + 3) = *(_QWORD *)(v7 - 40);
    std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v5, v7 - 32);
  }
  *(_OWORD *)(v7 - 64) = v17;
  *(_OWORD *)(v7 - 48) = v18;
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v7 - 32), (uint64_t)v19);
  if (v20 == v19)
  {
    v15 = 4;
    goto LABEL_22;
  }
  if (v20)
  {
    v15 = 5;
    v4 = v20;
LABEL_22:
    (*(void (**)(_QWORD *))(*v4 + 8 * v15))(v4);
  }
  return v7;
}

void sub_2164E3A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &>(__int128 *a1, double *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  double v7;
  unint64_t v8;
  double *v9;
  double v10;
  double v11;
  unint64_t v12;
  double *v13;
  double v14;
  double v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v18 = *a1;
  v19 = a1[1];
  v4 = v20;
  v5 = a1 + 2;
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)(a1 + 2));
  v6 = 0;
  do
  {
    v7 = *(double *)&a1[v6 + 5];
    v6 += 4;
  }
  while (v7 < *(double *)&v19);
  v8 = (unint64_t)&a1[v6];
  if (v6 == 4)
  {
    while (v8 < (unint64_t)a2)
    {
      v9 = a2 - 8;
      v11 = *(a2 - 6);
      a2 -= 8;
      if (v11 < *(double *)&v19)
        goto LABEL_9;
    }
    v9 = a2;
  }
  else
  {
    do
    {
      v9 = a2 - 8;
      v10 = *(a2 - 6);
      a2 -= 8;
    }
    while (v10 >= *(double *)&v19);
  }
LABEL_9:
  v12 = (unint64_t)&a1[v6];
  if (v8 < (unint64_t)v9)
  {
    v13 = v9;
    do
    {
      std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>((__int128 *)v12, v13);
      do
      {
        v14 = *(double *)(v12 + 80);
        v12 += 64;
      }
      while (v14 < *(double *)&v19);
      do
      {
        v15 = *(v13 - 6);
        v13 -= 8;
      }
      while (v15 >= *(double *)&v19);
    }
    while (v12 < (unint64_t)v13);
  }
  if ((__int128 *)(v12 - 64) != a1)
  {
    *(_QWORD *)a1 = *(_QWORD *)(v12 - 64);
    *((_QWORD *)a1 + 1) = *(_QWORD *)(v12 - 56);
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v12 - 48);
    *((_QWORD *)a1 + 3) = *(_QWORD *)(v12 - 40);
    std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v5, v12 - 32);
  }
  *(_OWORD *)(v12 - 64) = v18;
  *(_OWORD *)(v12 - 48) = v19;
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v12 - 32), (uint64_t)v20);
  if (v21 == v20)
  {
    v16 = 4;
    goto LABEL_21;
  }
  if (v21)
  {
    v16 = 5;
    v4 = v21;
LABEL_21:
    (*(void (**)(_QWORD *))(*v4 + 8 * v16))(v4);
  }
  return v12 - 64;
}

void sub_2164E3C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v16[24];
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = (a2 - a1) >> 6;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 48) < *(double *)(a1 + 16))
      {
        std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>((__int128 *)a1, (_QWORD *)(a2 - 64));
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(a1, a1 + 64, a2 - 64);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(a1, a1 + 64, a1 + 128, a2 - 64);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(a1, a1 + 64, a1 + 128, a1 + 192, a2 - 64);
      return 1;
    default:
      v6 = a1 + 128;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(a1, a1 + 64, a1 + 128);
      v7 = a1 + 192;
      if (a1 + 192 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (*(double *)(v7 + 16) >= *(double *)(v6 + 16))
  {
LABEL_18:
    v6 = v7;
    v8 += 64;
    v7 += 64;
    if (v7 == a2)
      return 1;
  }
  *(_OWORD *)v16 = *(_OWORD *)v7;
  *(_QWORD *)&v16[16] = *(_QWORD *)(v7 + 16);
  v17 = *(_QWORD *)(v7 + 24);
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v18, v7 + 32);
  v10 = v8;
  while (1)
  {
    v11 = v10;
    v12 = a1 + v10;
    *(_QWORD *)(v12 + 192) = *(_QWORD *)(v12 + 128);
    *(_OWORD *)(v12 + 200) = *(_OWORD *)(v12 + 136);
    *(_QWORD *)(v12 + 216) = *(_QWORD *)(v12 + 152);
    std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v12 + 224), v12 + 160);
    if (v11 == -128)
      break;
    v10 = v11 - 64;
    if (*(double *)&v16[16] >= *(double *)(a1 + v11 + 80))
    {
      v13 = a1 + v10 + 192;
      goto LABEL_12;
    }
  }
  v13 = a1;
LABEL_12:
  *(_QWORD *)v13 = *(_QWORD *)v16;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&v16[8];
  *(_QWORD *)(v13 + 24) = v17;
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(a1 + v11 + 160), (uint64_t)v18);
  v14 = v19;
  if (v19 == v18)
  {
    v14 = v18;
    v15 = 4;
  }
  else
  {
    if (!v19)
      goto LABEL_17;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_17:
  if (++v9 != 8)
    goto LABEL_18;
  return v7 + 64 == a2;
}

void sub_2164E3F40(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>(__int128 *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  v9 = a1[1];
  v4 = v10;
  v5 = a1 + 2;
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)(a1 + 2));
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = a2[1];
  *((_QWORD *)a1 + 2) = a2[2];
  *((_QWORD *)a1 + 3) = a2[3];
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v5, (uint64_t)(a2 + 4));
  *(_OWORD *)a2 = v8;
  *((_OWORD *)a2 + 1) = v9;
  result = std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](a2 + 4, (uint64_t)v10);
  if (v11 == v10)
  {
    v7 = 4;
  }
  else
  {
    if (!v11)
      return result;
    v7 = 5;
    v4 = v11;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8 * v7))(v4);
}

void sub_2164E4040(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(a1, a2, a3);
  if (*(double *)(a4 + 16) < *(double *)(a3 + 16))
  {
    result = std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>((__int128 *)a3, (_QWORD *)a4);
    if (*(double *)(a3 + 16) < *(double *)(a2 + 16))
    {
      result = std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>((__int128 *)a2, (_QWORD *)a3);
      if (*(double *)(a2 + 16) < *(double *)(a1 + 16))
        return std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>((__int128 *)a1, (_QWORD *)a2);
    }
  }
  return result;
}

_QWORD *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(a1, a2, a3, a4);
  if (*(double *)(a5 + 16) < *(double *)(a4 + 16))
  {
    result = std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>((__int128 *)a4, (_QWORD *)a5);
    if (*(double *)(a4 + 16) < *(double *)(a3 + 16))
    {
      result = std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>((__int128 *)a3, (_QWORD *)a4);
      if (*(double *)(a3 + 16) < *(double *)(a2 + 16))
      {
        result = std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>((__int128 *)a2, (_QWORD *)a3);
        if (*(double *)(a2 + 16) < *(double *)(a1 + 16))
          return std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>((__int128 *)a1, (_QWORD *)a2);
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 6;
    if (a2 - a1 >= 65)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__int128 *)(a1 + (v10 << 6));
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>((_QWORD *)a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*(double *)(v14 + 16) < *(double *)(a1 + 16))
        {
          std::swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal>((__int128 *)v14, (_QWORD *)a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>((_QWORD *)a1, a4, v9, (__int128 *)a1);
        }
        v14 += 64;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 65)
    {
      v15 = (unint64_t)v8 >> 6;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1},Phase::Envelope<double>::SegmentInternal*>((double *)a1, v6, a4, v15);
        v6 -= 64;
      }
      while (v15-- > 2);
    }
    return v13;
  }
  return a3;
}

_QWORD *std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(_QWORD *result, uint64_t a2, uint64_t a3, __int128 *a4)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  double v20;
  uint64_t v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((char *)a4 - (char *)result) >> 6)
    {
      v9 = ((char *)a4 - (char *)result) >> 5;
      v10 = v9 + 1;
      v11 = &result[8 * v9 + 8];
      v12 = v9 + 2;
      if (v12 < a3 && *((double *)v11 + 2) < *((double *)v11 + 10))
      {
        v11 += 8;
        v10 = v12;
      }
      if (*((double *)v11 + 2) >= *((double *)a4 + 2))
      {
        v19 = *a4;
        v20 = *((double *)a4 + 2);
        v21 = *((_QWORD *)a4 + 3);
        v13 = v22;
        std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v22, (uint64_t)(a4 + 2));
        do
        {
          v14 = v11;
          *v5 = *v11;
          v5[1] = v11[1];
          v5[2] = v11[2];
          v5[3] = v11[3];
          v15 = v11 + 4;
          std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v5 + 4, (uint64_t)(v11 + 4));
          if (v7 < v10)
            break;
          v16 = 2 * v10;
          v10 = (2 * v10) | 1;
          v11 = &v6[8 * v10];
          v17 = v16 + 2;
          if (v17 < a3 && *((double *)v11 + 2) < *((double *)v11 + 10))
          {
            v11 += 8;
            v10 = v17;
          }
          v5 = v14;
        }
        while (*((double *)v11 + 2) >= v20);
        *(_OWORD *)v14 = v19;
        *((double *)v14 + 2) = v20;
        v14[3] = v21;
        result = std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v15, (uint64_t)v22);
        if (v23 == v22)
        {
          v18 = 4;
        }
        else
        {
          if (!v23)
            return result;
          v18 = 5;
          v13 = v23;
        }
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8 * v18))(v13);
      }
    }
  }
  return result;
}

void sub_2164E44FC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

double *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1},Phase::Envelope<double>::SegmentInternal*>(double *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double *v7;
  _QWORD *v8;
  double *v9;
  double *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a4 >= 2)
  {
    v7 = result;
    v12 = *(_OWORD *)result;
    v13 = *((_OWORD *)result + 1);
    v8 = v14;
    std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)(result + 4));
    v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v7, a3, a4);
    v10 = v9;
    if (v9 == (double *)(a2 - 64))
    {
      *(_OWORD *)v9 = v12;
      *((_OWORD *)v9 + 1) = v13;
      result = (double *)std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)v9 + 4, (uint64_t)v14);
    }
    else
    {
      *v9 = *(double *)(a2 - 64);
      v9[1] = *(double *)(a2 - 56);
      v9[2] = *(double *)(a2 - 48);
      v9[3] = *(double *)(a2 - 40);
      std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)v9 + 4, a2 - 32);
      *(_OWORD *)(a2 - 64) = v12;
      *(_OWORD *)(a2 - 48) = v13;
      std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(a2 - 32), (uint64_t)v14);
      result = (double *)std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v7, (uint64_t)(v10 + 8), a3, ((char *)(v10 + 8) - (char *)v7) >> 6);
    }
    if (v15 == v14)
    {
      v11 = 4;
    }
    else
    {
      if (!v15)
        return result;
      v11 = 5;
      v8 = v15;
    }
    return (double *)(*(uint64_t (**)(_QWORD *))(*v8 + 8 * v11))(v8);
  }
  return result;
}

void sub_2164E4678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

double *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = 0;
  v5 = a3 - 2;
  if (a3 < 2)
    v5 = a3 - 1;
  v6 = v5 >> 1;
  do
  {
    v7 = &a1[8 * v4 + 8];
    v8 = 2 * v4;
    v4 = (2 * v4) | 1;
    v9 = v8 + 2;
    if (v9 < a3 && v7[2] < v7[10])
    {
      v7 += 8;
      v4 = v9;
    }
    *a1 = *v7;
    a1[1] = v7[1];
    a1[2] = v7[2];
    a1[3] = v7[3];
    std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)a1 + 4, (uint64_t)(v7 + 4));
    a1 = v7;
  }
  while (v4 <= v6);
  return v7;
}

_QWORD *std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  double v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = result;
    v6 = v4 >> 1;
    if (*(double *)&result[8 * (v4 >> 1) + 2] < *(double *)(a2 - 48))
    {
      v7 = (_QWORD *)(a2 - 64);
      v11 = *(_OWORD *)(a2 - 64);
      v12 = *(double *)(a2 - 48);
      v13 = *(_QWORD *)(a2 - 40);
      v8 = v14;
      std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v14, a2 - 32);
      do
      {
        v9 = v7;
        v7 = &v5[8 * v6];
        *v9 = *v7;
        v9[1] = v7[1];
        v9[2] = v7[2];
        v9[3] = v7[3];
        std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v9 + 4, (uint64_t)(v7 + 4));
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
      }
      while (*(double *)&v5[8 * v6 + 2] < v12);
      *(_OWORD *)v7 = v11;
      *((double *)v7 + 2) = v12;
      v7[3] = v13;
      result = std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v7 + 4, (uint64_t)v14);
      if (v15 == v14)
      {
        v10 = 4;
      }
      else
      {
        if (!v15)
          return result;
        v10 = 5;
        v8 = v15;
      }
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 8 * v10))(v8);
    }
  }
  return result;
}

void sub_2164E48E0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

double Phase::Envelope<double>::SegmentInternal::operator()(uint64_t a1, double a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v9;

  v3 = *(double *)a1;
  v4 = *(double *)(a1 + 16);
  v5 = *(double *)a1 - v4;
  if (v5 < 0.0)
    v5 = -v5;
  if (v5 <= 0.001)
  {
    v6 = 0.0;
    if (v3 <= a2)
    {
      if (v3 >= a2)
        v6 = 0.5;
      else
        v6 = 1.0;
    }
  }
  else
  {
    v6 = fmin(fmax((a2 - v3) / (v4 - v3), 0.0), 1.0);
  }
  v9 = v6;
  v7 = *(_QWORD *)(a1 + 56);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return *(double *)(a1 + 8)
       + fmin(fmax((*(double (**)(uint64_t, double *))(*(_QWORD *)v7 + 48))(v7, &v9), 0.0), 1.0)
       * (*(double *)(a1 + 24) - *(double *)(a1 + 8));
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x2199F9D70);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
}

uint64_t std::unique_ptr<Phase::CommandQueue<Phase::LockFreeQueueMPSC>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::CommandQueue<Phase::LockFreeQueueMPSC>::~CommandQueue(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(_QWORD *a1)
{
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(a1);
  JUMPOUT(0x2199F9D70);
}

void Phase::CommandQueue<Phase::LockFreeQueueMPSC>::~CommandQueue(uint64_t a1)
{
  uint64_t v2;

  for (;
        Phase::LockFreeQueueSPSC::HasData((Phase::LockFreeQueueSPSC *)a1);
        *(_DWORD *)(a1 + 4) += ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 4)) + 15) & 0xFFFFFFF0) + 16)
  {
    v2 = *(_QWORD *)(a1 + 16) + *(int *)(a1 + 4);
    (**(void (***)(uint64_t))(v2 + 16))(v2 + 16);
  }
  atomic_store(0, (unsigned __int8 *)(a1 + 40));
  Phase::LockFreeQueueSPSC::~LockFreeQueueSPSC((void **)a1);
}

void std::vector<Phase::MetaParamState>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 64;
        v7 = (void **)(v4 - 56);
        std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<Phase::ActionTreeObject::LeafNodeInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  Phase::Controller::StreamRenderer **v2;
  Phase::Controller::StreamRenderer **v4;
  void *v5;
  Phase::Controller::StreamRenderer **v6;

  v1 = *a1;
  v2 = (Phase::Controller::StreamRenderer **)**a1;
  if (v2)
  {
    v4 = (Phase::Controller::StreamRenderer **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 17;
        std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100](v4 - 13, 0);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<Phase::MetaParamState>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    v5 = (void **)(i - 56);
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void Phase::Fader<double>::SetInternal(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double v5;
  _QWORD *v6;
  uint64_t v7;
  double v8[2];
  __int128 v9;
  uint64_t v10;
  void **v11;
  double v12[2];
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a4 < 0.0)
    a4 = 0.0;
  if (a4 == 0.0)
  {
    *(double *)(a1 + 40) = a3;
    v5 = a3;
  }
  else
  {
    v5 = *(double *)(a1 + 40);
  }
  v8[0] = 0.0;
  v8[1] = v5;
  v12[0] = a4;
  v12[1] = a3;
  v6 = v13;
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v13, a2);
  Phase::Envelope<double>::Envelope((Phase::Logger *)&v9, v8, v12);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vdeallocate((void **)a1);
  *(_OWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v10;
  v10 = 0;
  v9 = 0uLL;
  v11 = (void **)&v9;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (v14 == v13)
  {
    v7 = 4;
    goto LABEL_10;
  }
  if (v14)
  {
    v7 = 5;
    v6 = v14;
LABEL_10:
    (*(void (**)(_QWORD *))(*v6 + 8 * v7))(v6);
  }
  *(_QWORD *)(a1 + 24) = 0;
}

void sub_2164E4D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  _QWORD *v21;
  uint64_t v24;

  if (a21 == v21)
  {
    v24 = 4;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
    v21 = a21;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v24))(v21);
LABEL_6:
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    std::terminate();
  }
  _Unwind_Resume(exception_object);
}

Phase::Logger *Phase::Envelope<double>::Envelope(Phase::Logger *a1, double *a2, double *a3)
{
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  Phase::Envelope<double>::InitializeFromSingleSegment(a1, a2, a3);
  return a1;
}

void sub_2164E4E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::hash<Phase::UniqueObjectId>,std::allocator<std::hash<Phase::UniqueObjectId>>,unsigned int ()(Phase::UniqueObjectId)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::hash<Phase::UniqueObjectId>,std::allocator<std::hash<Phase::UniqueObjectId>>,unsigned int ()(Phase::UniqueObjectId)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D576FB8;
  return result;
}

void std::__function::__func<std::hash<Phase::UniqueObjectId>,std::allocator<std::hash<Phase::UniqueObjectId>>,unsigned int ()(Phase::UniqueObjectId)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D576FB8;
}

uint64_t std::__function::__func<std::hash<Phase::UniqueObjectId>,std::allocator<std::hash<Phase::UniqueObjectId>>,unsigned int ()(Phase::UniqueObjectId)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = 0;
  LODWORD(result) = -2078137563;
  do
    result = 435 * (result ^ *(char *)(a2 + v2++));
  while (v2 != 16);
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 4));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::~guarded_lookup_hash_table(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  void **v8;

  if (!atomic_load((unsigned int *)(a1 + 48)))
  {
    v3 = atomic_load((unint64_t *)(a1 + 40));
    if (v3)
    {
      v4 = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::~table_impl(v3);
      MEMORY[0x2199F9D70](v4, 0x1060C402CF69088);
    }
    std::mutex::~mutex((std::mutex *)(a1 + 80));
    v8 = (void **)(a1 + 56);
    std::vector<std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>>::__destroy_vector::operator()[abi:ne180100](&v8);
    v5 = *(_QWORD **)(a1 + 24);
    if (v5 == (_QWORD *)a1)
    {
      v6 = 4;
      v5 = (_QWORD *)a1;
    }
    else
    {
      if (!v5)
        return a1;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
    return a1;
  }
  _os_assert_log();
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::~table_impl(uint64_t a1)
{
  uint64_t v2;
  unsigned int **v3;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v3 = (unsigned int **)(a1 + 16);
    do
    {
      if ((unint64_t)*v3 + 1 >= 2)
        caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::element_t::release(*v3);
      ++v3;
      --v2;
    }
    while (v2);
  }
  return a1;
}

unsigned int *caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::element_t::release(unsigned int *result)
{
  unsigned int v1;

  do
    v1 = __ldaxr(result);
  while (__stlxr(v1 - 0x10000, result));
  if ((v1 & 0xFFFF0000) == 0x10000)
  {
    if (atomic_load(result))
    {
      _os_assert_log();
      _os_crash();
      __break(1u);
    }
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void std::vector<std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::~table_impl(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Controller::GroupManager * const>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::GroupManager *>::__id);
    else
      return 0;
  }
  return result;
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::GlobalMetaParameterManager * const>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::GlobalMetaParameterManager *>::__id);
    else
      return 0;
  }
  return result;
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Geometry::System * const>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Geometry::System *>::__id);
    else
      return 0;
  }
  return result;
}

double Phase::TransformPositionByInverse<double>@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, double *a3@<X8>)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float64x2_t v8;
  double v9;
  float64x2_t v10;
  double v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = -*(double *)(a1 + 16);
  v10 = vnegq_f64(*(float64x2_t *)a1);
  v11 = v4;
  v12 = v3;
  v5 = *(uint64_t *)(a1 + 56);
  v6 = (a2[1].f64[0] - *(double *)(a1 + 48)) / *(double *)&v5;
  v8 = vdivq_f64(vsubq_f64(*a2, *(float64x2_t *)(a1 + 32)), (float64x2_t)vdupq_lane_s64(v5, 0));
  v9 = v6;
  return Phase::operator*<double>(v10.f64, v8.f64, a3);
}

double Phase::operator*<double>@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double result;

  v3 = a1[1];
  v4 = *a1 + *a1;
  v5 = v3 + v3;
  v6 = a1[2];
  v7 = a1[3];
  v8 = v6 + v6;
  v10 = a2[1];
  v9 = a2[2];
  v11 = *a1 * v10 - v3 * *a2;
  v12 = v3 * v9 - v6 * v10 + *a2 * v7;
  v13 = v6 * *a2 - *a1 * v9 + v10 * v7;
  v14 = v11 + v9 * v7;
  v15 = v5 * v14 - v8 * v13;
  result = v10 + v8 * v12 - v4 * v14;
  *a3 = *a2 + v15;
  a3[1] = result;
  a3[2] = v9 + v4 * v13 - v5 * v12;
  return result;
}

void caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::_addOrReplace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::mutex *v8;
  uint64_t *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t SlotForKey;
  unint64_t v16;

  v8 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  v9 = (uint64_t *)atomic_load((unint64_t *)(a1 + 40));
  v10 = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v10;
  if (v9)
  {
    v11 = 16 * v10;
    v12 = *((_DWORD *)v9 + 2);
    if (v11 / v12 < 0xB)
      goto LABEL_6;
    v13 = 2 * v12;
  }
  else
  {
    v13 = 8;
  }
  v9 = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::rehash((unint64_t *)a1, v13);
LABEL_6:
  SlotForKey = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey(v9, a2, a3);
  if ((SlotForKey & 1) != 0)
  {
    *(_QWORD *)(v14 + 24) = a4;
    --*(_DWORD *)(a1 + 32);
  }
  else
  {
    v16 = operator new();
    *(_DWORD *)v16 = 0x10000;
    *(_QWORD *)(v16 + 8) = a2;
    *(_QWORD *)(v16 + 16) = a3;
    *(_QWORD *)(v16 + 24) = a4;
    atomic_store(v16, (unint64_t *)&v9[HIDWORD(SlotForKey) + 2]);
    caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::emptyReleasePool(a1);
  }
  std::mutex::unlock(v8);
}

void sub_2164E53D8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::rehash(unint64_t *a1, unsigned int a2)
{
  unint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  unint64_t SlotForKey;
  unsigned int v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  char *v22;
  unint64_t v23;
  uint64_t *v24;

  v4 = a1 + 5;
  v5 = atomic_load(a1 + 5);
  v6 = (uint64_t *)operator new(8 * (a2 - 1) + 24);
  *v6 = (uint64_t)a1;
  *((_DWORD *)v6 + 2) = a2;
  bzero(v6 + 2, 8 * a2);
  if (v5)
  {
    v7 = *(unsigned int *)(v5 + 8);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(_QWORD *)(v5 + 8 * i + 16);
        if (v9 + 1 >= 2)
        {
          SlotForKey = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey(v6, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16));
          if ((SlotForKey & 1) == 0)
          {
            do
              v11 = __ldaxr((unsigned int *)v9);
            while (__stlxr(v11 + 0x10000, (unsigned int *)v9));
            atomic_store(v9, (unint64_t *)&v6[HIDWORD(SlotForKey) + 2]);
          }
        }
      }
    }
    atomic_store((unint64_t)v6, a1 + 5);
    v13 = (uint64_t *)a1[8];
    v12 = a1[9];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (_QWORD *)a1[7];
      v16 = v13 - v15;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v20 = (char *)operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = (unint64_t *)&v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        a1[7] = (unint64_t)v21;
        a1[8] = (unint64_t)v14;
        a1[9] = (unint64_t)v22;
      }
      else
      {
        do
        {
          v23 = *--v13;
          *v13 = 0;
          *--v21 = v23;
        }
        while (v13 != v15);
        v13 = (uint64_t *)a1[7];
        v24 = (uint64_t *)a1[8];
        a1[7] = (unint64_t)v21;
        a1[8] = (unint64_t)v14;
        a1[9] = (unint64_t)v22;
        while (v24 != v13)
          std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](--v24, 0);
      }
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v13 = v5;
      v14 = v13 + 1;
    }
    a1[8] = (unint64_t)v14;
  }
  else
  {
    atomic_store((unint64_t)v6, v4);
  }
  return v6;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::emptyReleasePool(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t *v4;

  v1 = atomic_load((unsigned int *)(result + 48));
  if (v1 <= 0)
  {
    v2 = result;
    v4 = *(uint64_t **)(result + 56);
    for (i = *(uint64_t **)(result + 64);
          i != v4;
          result = std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](i, 0))
    {
      --i;
    }
    *(_QWORD *)(v2 + 64) = v4;
  }
  return result;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  _QWORD v19[2];

  v4 = *((_DWORD *)a1 + 2);
  v5 = *a1;
  v19[0] = a2;
  v19[1] = a3;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    goto LABEL_25;
  v9 = (*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(v6, v19) % *((_DWORD *)a1 + 2);
  if ((int)v9 >= 3)
    v10 = 0;
  else
    v10 = v4;
  v11 = (v9 + v10 - 3);
  v12 = 0xFFFFFFFFLL;
  v13 = 1;
  v14 = v9;
  while (1)
  {
    v15 = v14;
    v14 = v11;
    v16 = atomic_load((unint64_t *)&a1[v15 + 2]);
    if (v16 != -1)
      break;
    if ((int)v12 >= 0)
      v12 = v12;
    else
      v12 = v15;
LABEL_14:
    if ((int)v11 >= 3)
      v17 = 0;
    else
      v17 = v4;
    v11 = (v11 + v17 - 3);
    if ((_DWORD)v14 == (_DWORD)v9)
    {
      if ((v12 & 0x80000000) == 0)
      {
        v13 = 0;
        v15 = v12;
        return v13 | (v15 << 32);
      }
      __break(1u);
LABEL_25:
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
  if (v16)
  {
    if (*(_QWORD *)(v16 + 8) == a2 && *(_QWORD *)(v16 + 16) == a3)
      return v13 | (v15 << 32);
    goto LABEL_14;
  }
  v13 = 0;
  if ((int)v12 >= 0)
    v15 = v12;
  else
    v15 = v15;
  return v13 | (v15 << 32);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<Phase::ActionTreeObject,std::allocator<Phase::ActionTreeObject>,PHASESoundEventNodeAsset * {__strong}&,PHASESoundEvent * {__strong}&,void>@<X0>(PHASESoundEventNodeAsset **a1@<X1>, PHASESoundEvent **a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x160uLL);
  result = std::__shared_ptr_emplace<Phase::ActionTreeObject>::__shared_ptr_emplace[abi:ne180100]<PHASESoundEventNodeAsset * {__strong}&,PHASESoundEvent * {__strong}&,std::allocator<Phase::ActionTreeObject>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_2164E5844(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<Phase::ActionTreeObject>::__shared_ptr_emplace[abi:ne180100]<PHASESoundEventNodeAsset * {__strong}&,PHASESoundEvent * {__strong}&,std::allocator<Phase::ActionTreeObject>,0>(_QWORD *a1, PHASESoundEventNodeAsset **a2, PHASESoundEvent **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24D577000;
  Phase::ActionTreeObject::ActionTreeObject((Phase::ActionTreeObject *)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_2164E5894(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phase::ActionTreeObject>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D577000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::ActionTreeObject>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D577000;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

void std::__shared_ptr_emplace<Phase::ActionTreeObject>::__on_zero_shared(Phase::Controller::StreamRenderer *a1)
{
  Phase::Controller::StreamRenderer *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Phase::Logger *InstancePtr;
  NSObject *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _BYTE v13[12];
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v1 = a1;
  v20 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a1 + 10);
  v3 = *((_QWORD *)a1 + 11);
  v4 = (char *)a1 + 80;
  while (v2 != v3)
  {
    a1 = std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100]((Phase::Controller::StreamRenderer **)(v2 + 32), 0);
    v2 += 136;
  }
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(a1);
  if (*((_BYTE *)InstancePtr + 1553))
  {
    v6 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                       + 688)));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *((_QWORD *)v1 + 3);
      objc_msgSend(*((id *)v1 + 5), "identifier");
      v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *(_DWORD *)v13 = 136315906;
      *(_QWORD *)&v13[4] = "ActionTreeManager.mm";
      v14 = 1024;
      v15 = 556;
      v16 = 2048;
      v17 = v7;
      v18 = 2080;
      v19 = objc_msgSend(v8, "UTF8String");
      _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu) - destroyed (identifier: %s)", v13, 0x26u);

    }
  }
  objc_destroyWeak((id *)v1 + 40);
  v9 = (void *)*((_QWORD *)v1 + 37);
  if (v9)
  {
    *((_QWORD *)v1 + 38) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)v1 + 34);
  if (v10)
  {
    *((_QWORD *)v1 + 35) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)v1 + 31);
  if (v11)
  {
    *((_QWORD *)v1 + 32) = v11;
    operator delete(v11);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v1 + 128);
  v12 = (void *)*((_QWORD *)v1 + 13);
  if (v12)
  {
    *((_QWORD *)v1 + 14) = v12;
    operator delete(v12);
  }
  *(_QWORD *)v13 = v4;
  std::vector<Phase::ActionTreeObject::LeafNodeInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v13);
  *(_QWORD *)v13 = (char *)v1 + 56;
  std::vector<Phase::MetaParamState>::__destroy_vector::operator()[abi:ne180100]((void ***)v13);

}

void sub_2164E5A9C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;

  v2 = 0;
  v3 = 0xCBF29CE484222325;
  do
    v3 = 0x100000001B3 * (v3 ^ *((char *)a2 + v2++));
  while (v2 != 16);
  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    return 0;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v3;
    if (v3 >= *(_QWORD *)&v4)
      v6 = v3 % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & v3;
  }
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = (_QWORD *)*v7;
  if (*v7)
  {
    do
    {
      v9 = result[1];
      if (v9 == v3)
      {
        if (result[2] == *a2 && result[3] == a2[1])
          return result;
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v4)
            v9 %= *(_QWORD *)&v4;
        }
        else
        {
          v9 &= *(_QWORD *)&v4 - 1;
        }
        if (v9 != v6)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t Phase::CommandQueue<Phase::LockFreeQueueMPSC>::ExecuteCommands(uint64_t a1)
{
  uint64_t i;
  int *v3;
  _DWORD *v4;
  int v5;
  NSObject *v7;
  std::logic_error *exception;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  for (i = 0; Phase::LockFreeQueueSPSC::HasData((Phase::LockFreeQueueSPSC *)a1); i = (i + 1))
  {
    v3 = (int *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 4));
    v5 = *v3;
    v4 = v3 + 4;
    if (!v5)
    {
      v7 = objc_retainAutorelease(**(id **)(a1 + 48));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v9 = 136315394;
        v10 = "CommandQueue.hpp";
        v11 = 1024;
        v12 = 115;
        _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: numBytes > 0 is false.", (uint8_t *)&v9, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "POSTCONDITION: numBytes > 0 is false.");
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    (**(void (***)(_DWORD *))v4)(v4);
    *(_DWORD *)(a1 + 4) += ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 4)) + 15) & 0xFFFFFFF0) + 16;
  }
  return i;
}

void sub_2164E5D78(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_2164E5D80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2164E5D90(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  void (***v3)(_QWORD);

  if (a2)
  {
    __cxa_begin_catch(a1);
    (**v3)(v3);
    *(_DWORD *)(v2 + 4) += ((*(_DWORD *)(*(_QWORD *)(v2 + 16) + *(int *)(v2 + 4)) + 15) & 0xFFFFFFF0) + 16;
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_2164E5DD8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2164E5DE4(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x2164E5DECLL);
  __clang_call_terminate(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::remove(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)a2[1];
  v4 = a3[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*a2 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a2 + 8 * v4) = 0;
  }
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a2 + 8 * v11) = v7;
      v10 = *a3;
    }
  }
  *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2 + 2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

BOOL Phase::CommandQueue<Phase::LockFreeQueueMPSC>::Reset(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  NSObject *v4;
  std::logic_error *exception;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  for (result = Phase::LockFreeQueueSPSC::HasData((Phase::LockFreeQueueSPSC *)a1);
        result;
        result = Phase::LockFreeQueueSPSC::HasData((Phase::LockFreeQueueSPSC *)a1))
  {
    v3 = *(_QWORD *)(a1 + 16) + *(int *)(a1 + 4);
    if (!*(_DWORD *)v3)
    {
      v4 = objc_retainAutorelease(**(id **)(a1 + 48));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v6 = 136315394;
        v7 = "CommandQueue.hpp";
        v8 = 1024;
        v9 = 146;
        _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: numBytes > 0 is false.", (uint8_t *)&v6, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "POSTCONDITION: numBytes > 0 is false.");
    }
    (**(void (***)(uint64_t))(v3 + 16))(v3 + 16);
    *(_DWORD *)(a1 + 4) += ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 4)) + 15) & 0xFFFFFFF0) + 16;
  }
  return result;
}

void sub_2164E6070(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  std::unique_lock<std::mutex> *v2;

  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    std::unique_lock<std::mutex>::lock(v2);
  }
}

void std::unique_lock<std::mutex>::lock(std::unique_lock<std::mutex> *this)
{
  std::unique_lock<std::mutex>::mutex_type *m;

  m = this->__m_;
  if (m)
  {
    if (!this->__owns_)
    {
      std::mutex::lock(m);
      this->__owns_ = 1;
      return;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::lock: already locked");
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>();
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_2164E6328(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2164E63AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *Phase::DspLayer::Add8::GetNewRegistryEntry(Phase::DspLayer::Add8 *this)
{
  char *v1;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v1 = (char *)malloc_type_malloc(0x230uLL, 0x1050040B063AAFAuLL);
  *(_QWORD *)v1 = "Frequency";
  *((_QWORD *)v1 + 1) = 0x500000000;
  *(_QWORD *)(v1 + 20) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2166F7460;
  *((_QWORD *)v1 + 6) = 0x407B800000000000;
  *((_QWORD *)v1 + 7) = "Fundamental Harmonic Gain";
  *((_QWORD *)v1 + 8) = 0x500000001;
  *(_QWORD *)(v1 + 76) = 0x100000000;
  *((_DWORD *)v1 + 21) = 3;
  *(_OWORD *)(v1 + 88) = xmmword_2166F7470;
  *((_QWORD *)v1 + 13) = 0x3FF0000000000000;
  *((_QWORD *)v1 + 14) = "1. Harmonic Gain";
  *((_QWORD *)v1 + 15) = 0x500000002;
  *(_QWORD *)(v1 + 132) = 0x100000000;
  *((_DWORD *)v1 + 35) = 3;
  *((_OWORD *)v1 + 9) = xmmword_2166F7470;
  *((_QWORD *)v1 + 20) = 0;
  *((_QWORD *)v1 + 21) = "2. Harmonic Gain";
  *((_QWORD *)v1 + 22) = 0x500000003;
  *(_QWORD *)(v1 + 188) = 0x100000000;
  *((_DWORD *)v1 + 49) = 3;
  *(_OWORD *)(v1 + 200) = xmmword_2166F7470;
  *((_QWORD *)v1 + 27) = 0;
  *((_QWORD *)v1 + 28) = "3. Harmonic Gain";
  *((_QWORD *)v1 + 29) = 0x500000004;
  *(_QWORD *)(v1 + 244) = 0x100000000;
  *((_DWORD *)v1 + 63) = 3;
  *((_OWORD *)v1 + 16) = xmmword_2166F7470;
  *((_QWORD *)v1 + 34) = 0;
  *((_QWORD *)v1 + 35) = "4. Harmonic Gain";
  *((_QWORD *)v1 + 36) = 0x500000005;
  *((_DWORD *)v1 + 75) = 0;
  *((_QWORD *)v1 + 38) = 0x300000001;
  *((_QWORD *)v1 + 39) = 0;
  *((_OWORD *)v1 + 20) = xmmword_2166F7480;
  *((_QWORD *)v1 + 42) = "5. Harmonic Gain";
  *((_QWORD *)v1 + 43) = 0x500000006;
  *((_DWORD *)v1 + 89) = 0;
  *((_QWORD *)v1 + 45) = 0x300000001;
  *((_OWORD *)v1 + 23) = xmmword_2166F7470;
  *((_QWORD *)v1 + 48) = 0;
  *((_QWORD *)v1 + 49) = "6. Harmonic Gain";
  *((_QWORD *)v1 + 50) = 0x500000007;
  *((_DWORD *)v1 + 103) = 0;
  *((_QWORD *)v1 + 52) = 0x300000001;
  *((_QWORD *)v1 + 53) = 0;
  *((_OWORD *)v1 + 27) = xmmword_2166F7480;
  *((_QWORD *)v1 + 56) = "7. Harmonic Gain";
  *((_QWORD *)v1 + 57) = 0x500000008;
  *((_DWORD *)v1 + 117) = 0;
  *((_QWORD *)v1 + 59) = 0x300000001;
  *((_OWORD *)v1 + 30) = xmmword_2166F7470;
  *((_QWORD *)v1 + 62) = 0;
  *((_QWORD *)v1 + 63) = "Group Gain";
  *((_QWORD *)v1 + 64) = 0x500000009;
  *((_DWORD *)v1 + 131) = 0;
  *((_QWORD *)v1 + 66) = 0x300000001;
  *((_QWORD *)v1 + 67) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)v1 + 34) = _Q0;
  v7 = (uint64_t *)operator new();
  v13[0] = &off_24D577380;
  v14 = v13;
  Phase::Controller::VoicePoolEntry::VoicePoolEntry((uint64_t)v7, "Add8", 10, (uint64_t)v1, (uint64_t)v13);
  v8 = v14;
  if (v14 == v13)
  {
    v9 = 4;
    v8 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(__p, "Output");
  Phase::Controller::VoicePoolEntry::AddOutput(v7, (__int128 *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_2164E6690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::Add8::~Add8(Phase::DspLayer::Add8 *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);
  JUMPOUT(0x2199F9D70);
}

void `anonymous namespace'::Add8Slice::~Add8Slice(_anonymous_namespace_::Add8Slice *this)
{
  JUMPOUT(0x2199F9D70);
}

double `anonymous namespace'::Add8Slice::Reset(int32x4_t *this, Phase::DspLayer::VoiceEngine *a2)
{
  uint64_t v3;
  uint64_t v9;
  double result;
  int32x4_t v11;
  __int128 v12;
  uint64_t v13;

  v3 = 0;
  v13 = *MEMORY[0x24BDAC8D0];
  __asm { FMOV            V1.4S, #1.0 }
  this[1] = vdupq_n_s32(0x43DC0000u);
  this[2] = _Q1;
  this[3] = 0u;
  this[4] = 0u;
  this[5] = 0u;
  this[6] = 0u;
  this[7] = 0u;
  this[8] = 0u;
  this[9] = 0u;
  this[10] = _Q1;
  this[11].i64[0] = 0;
  this[11].i64[1] = 0;
  this[24] = 0u;
  this[25] = 0u;
  v11 = _Q1;
  v12 = xmmword_2166F7490;
  do
  {
    this[24].i32[*(int *)((char *)&v11 + v3 * 4 + 16)] = v11.i32[v3];
    ++v3;
  }
  while (v3 != 4);
  v9 = 0;
  v12 = xmmword_2166F7490;
  v11 = 0uLL;
  do
  {
    this[25].i32[*(int *)((char *)&v11 + v9 * 4 + 16)] = v11.i32[v9];
    ++v9;
  }
  while (v9 != 4);
  (*(void (**)(int32x4_t *, Phase::DspLayer::VoiceEngine *))(this->i64[0] + 48))(this, a2);
  result = 0.0;
  this[26] = 0u;
  this[27] = 0u;
  return result;
}

uint64_t `anonymous namespace'::Add8Slice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _DWORD *v7;
  uint64_t result;

  v7 = (_DWORD *)(a1 + 4 * a3);
  v7[4] = 1138491392;
  v7[8] = 1065353216;
  v7[12] = 0;
  v7[16] = 0;
  v7[20] = 0;
  v7[24] = 0;
  v7[28] = 0;
  v7[32] = 0;
  v7[36] = 0;
  v7[40] = 1065353216;
  v7[44] = 0;
  v7[96] = 1065353216;
  v7[100] = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  *(_QWORD *)(a1 + 8 * a3 + 416) = a4;
  return result;
}

double `anonymous namespace'::Add8Slice::GetParameter(_anonymous_namespace_::Add8Slice *this, int a2, int a3)
{
  float *v3;
  double result;

  switch(a2)
  {
    case 0:
      v3 = (float *)((char *)this + 4 * a3 + 16);
      goto LABEL_12;
    case 1:
      v3 = (float *)((char *)this + 4 * a3 + 32);
      goto LABEL_12;
    case 2:
      v3 = (float *)((char *)this + 4 * a3 + 48);
      goto LABEL_12;
    case 3:
      v3 = (float *)((char *)this + 4 * a3 + 64);
      goto LABEL_12;
    case 4:
      v3 = (float *)((char *)this + 4 * a3 + 80);
      goto LABEL_12;
    case 5:
      v3 = (float *)((char *)this + 4 * a3 + 96);
      goto LABEL_12;
    case 6:
      v3 = (float *)((char *)this + 4 * a3 + 112);
      goto LABEL_12;
    case 7:
      v3 = (float *)((char *)this + 4 * a3 + 128);
      goto LABEL_12;
    case 8:
      v3 = (float *)((char *)this + 4 * a3 + 144);
      goto LABEL_12;
    case 9:
      v3 = (float *)((char *)this + 4 * a3 + 160);
LABEL_12:
      result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

float `anonymous namespace'::Add8Slice::SetParameter(_anonymous_namespace_::Add8Slice *this, int a2, int a3, double a4)
{
  switch(a2)
  {
    case 0:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 4) = LODWORD(a4);
      break;
    case 1:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 8) = LODWORD(a4);
      break;
    case 2:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 12) = LODWORD(a4);
      break;
    case 3:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 16) = LODWORD(a4);
      break;
    case 4:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 20) = LODWORD(a4);
      break;
    case 5:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 24) = LODWORD(a4);
      break;
    case 6:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 28) = LODWORD(a4);
      break;
    case 7:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 32) = LODWORD(a4);
      break;
    case 8:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 36) = LODWORD(a4);
      break;
    case 9:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 40) = LODWORD(a4);
      break;
    default:
      return *(float *)&a4;
  }
  return *(float *)&a4;
}

void `anonymous namespace'::Add8Slice::UpdateParameters(uint64_t a1, uint64_t a2)
{
  float32x4_t v3;
  __int128 v9;
  __int128 v10;
  float32x4_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = (float32x4_t)_simd_tan_f4((simd_float4)vmulq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 16), *(float *)(a2 + 8)), (float32x4_t)vdupq_n_s32(0x40490FDBu)));
  __asm { FMOV            V2.4S, #1.0 }
  v10 = *(_OWORD *)(a1 + 160);
  v9 = *(_OWORD *)(a1 + 176);
  v11 = vdivq_f32(vaddq_f32(v3, v3), vmlaq_f32(_Q2, v3, v3));
  v12 = *(_OWORD *)(a1 + 32);
  v13 = *(_OWORD *)(a1 + 48);
  v14 = *(_OWORD *)(a1 + 64);
  v15 = *(_OWORD *)(a1 + 80);
  v16 = *(_OWORD *)(a1 + 96);
  v17 = *(_OWORD *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 128);
  v19 = *(_OWORD *)(a1 + 144);
  *(float32x4_t *)(a1 + 192) = v3;
  *(float32x4_t *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 224) = v9;
  *(_OWORD *)(a1 + 240) = v10;
  *(_OWORD *)(a1 + 256) = v12;
  *(_OWORD *)(a1 + 272) = v13;
  *(_OWORD *)(a1 + 288) = v14;
  *(_OWORD *)(a1 + 304) = v15;
  *(_OWORD *)(a1 + 320) = v16;
  *(_OWORD *)(a1 + 336) = v17;
  *(_OWORD *)(a1 + 352) = v18;
  *(_OWORD *)(a1 + 368) = v19;
}

float `anonymous namespace'::Add8Slice::UpdateParameters(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  float result;

  v3 = a1 + 4 * a3;
  v4 = tanf((float)(*(float *)(v3 + 16) * *(float *)(a2 + 8)) * 3.1416);
  v5 = v4 + v4;
  v6 = (float)(v4 * v4) + 1.0;
  v7 = *(_DWORD *)(v3 + 176);
  v8 = *(_DWORD *)(v3 + 160);
  v9 = *(_DWORD *)(v3 + 32);
  v10 = *(_DWORD *)(v3 + 48);
  v11 = *(_DWORD *)(v3 + 64);
  v12 = *(_DWORD *)(v3 + 80);
  v13 = *(_DWORD *)(v3 + 96);
  v14 = *(_DWORD *)(v3 + 112);
  v15 = *(_DWORD *)(v3 + 128);
  *(float *)(v3 + 192) = v4;
  result = *(float *)(v3 + 144);
  *(float *)(v3 + 208) = v5 / v6;
  *(_DWORD *)(v3 + 224) = v7;
  *(_DWORD *)(v3 + 240) = v8;
  *(_DWORD *)(v3 + 256) = v9;
  *(_DWORD *)(v3 + 272) = v10;
  *(_DWORD *)(v3 + 288) = v11;
  *(_DWORD *)(v3 + 304) = v12;
  *(_DWORD *)(v3 + 320) = v13;
  *(_DWORD *)(v3 + 336) = v14;
  *(_DWORD *)(v3 + 352) = v15;
  *(float *)(v3 + 368) = result;
  return result;
}

float32x4_t *`anonymous namespace'::Add8Slice::Run(float32x4_t *result, uint64_t a2, uint64_t a3, int a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  unint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;

  v4 = result[12];
  v5 = result[25];
  v6 = vmlsq_f32(result[24], v5, v4);
  v7 = vmlaq_f32(v5, v6, result[13]);
  v8 = vmlsq_f32(v6, v7, v4);
  HIDWORD(v9) = a4 - 1;
  LODWORD(v9) = a4 - 1;
  v10 = vaddq_f32(v8, v8);
  v11.i64[0] = 0x4000000040000000;
  v11.i64[1] = 0x4000000040000000;
  __asm { FMOV            V22.4S, #-1.0 }
  v17 = vmlaq_f32(_Q22, v11, vmulq_f32(v8, v10));
  v18 = vmlaq_f32(vnegq_f32(v10), v17, v10);
  v19 = vmlaq_f32(vnegq_f32(v17), v18, v10);
  v20 = vmlaq_f32(vnegq_f32(v18), v19, v10);
  v21 = vmlaq_f32(vnegq_f32(v19), v20, v10);
  v22 = vmulq_f32(result[15], vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(result[17], vmulq_f32(v7, v10)), v7, result[16]), vmulq_f32(v7, v17), result[18]), vmulq_f32(v7, v18), result[19]), vmulq_f32(v7, v19), result[20]), vmulq_f32(v7, v20), result[21]), vmulq_f32(v7, v21), result[22]), vmulq_f32(v7, vmlaq_f32(vnegq_f32(v20), v21, v10)),
            result[23]));
  v23 = vandq_s8((int8x16_t)v22, vorrq_s8((int8x16_t)vcltzq_f32(v22), (int8x16_t)vcgezq_f32(v22)));
  switch((v9 >> 1))
  {
    case 0u:
      goto LABEL_5;
    case 1u:
      goto LABEL_4;
    case 3u:
      goto LABEL_3;
    case 7u:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * result[14].i32[3]) = v23.i32[3];
LABEL_3:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * result[14].i32[2]) = v23.i32[2];
LABEL_4:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * result[14].i32[1]) = v23.i32[1];
LABEL_5:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * result[14].i32[0]) = v23.i32[0];
      break;
    default:
      break;
  }
  result[24] = v8;
  result[25] = v7;
  return result;
}

float `anonymous namespace'::Add8Slice::CopyVoiceState(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  float result;

  v4 = (_DWORD *)(a2 + 4 * (int)a3);
  v5 = (_DWORD *)(a1 + 4 * (int)a4);
  v5[4] = v4[4];
  v5[8] = v4[8];
  v5[12] = v4[12];
  v5[16] = v4[16];
  v5[20] = v4[20];
  v5[24] = v4[24];
  v5[28] = v4[28];
  v5[32] = v4[32];
  v5[36] = v4[36];
  v5[40] = v4[40];
  v5[44] = v4[44];
  v5[48] = v4[48];
  v5[52] = v4[52];
  v5[56] = v4[56];
  v5[60] = v4[60];
  v5[64] = v4[64];
  v5[68] = v4[68];
  v5[72] = v4[72];
  v5[76] = v4[76];
  v5[80] = v4[80];
  v5[84] = v4[84];
  v5[88] = v4[88];
  v5[92] = v4[92];
  if (a3 >= 4)
    __assert_rtn("Copy", "DelaylineLinear.hpp", 507, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  if (a4 >= 4)
    __assert_rtn("Copy", "DelaylineLinear.hpp", 508, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  v6 = a2 + 4 * a3;
  v7 = a1 + 4 * a4;
  *(_DWORD *)(v7 + 384) = *(_DWORD *)(v6 + 384);
  result = *(float *)(v6 + 400);
  *(float *)(v7 + 400) = result;
  *(_QWORD *)(a1 + 8 * (int)a4 + 416) = *(_QWORD *)(a2 + 8 * (int)a3 + 416);
  return result;
}

uint64_t Phase::DspLayer::VoicePoolSlice::GetInput(Phase::DspLayer::VoicePoolSlice *this)
{
  return 0xFFFFFFFF00000008;
}

uint64_t Phase::DspLayer::VoicePoolSlice::AddInput(Phase::DspLayer::VoicePoolSlice *this, float a2)
{
  return 8;
}

uint64_t Phase::DspLayer::VoicePoolSlice::RemoveInput(Phase::DspLayer::VoicePoolSlice *this)
{
  return 8;
}

uint64_t Phase::DspLayer::VoicePoolSlice::SetInputGain(Phase::DspLayer::VoicePoolSlice *this, float a2)
{
  return 8;
}

void Phase::DspLayer::VoicePoolSlice::GetInputs(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t Phase::DspLayer::VoicePoolSlice::ClearInputs(Phase::DspLayer::VoicePoolSlice *this)
{
  return 0;
}

uint64_t Phase::DspLayer::VoicePoolSlice::GetMaximumInputConnectionCount(Phase::DspLayer::VoicePoolSlice *this)
{
  return 0;
}

unint64_t `anonymous namespace'::Add8Slice::GetOutput(_anonymous_namespace_::Add8Slice *this, int a2, int a3)
{
  if (a2)
    return 0xFFFFFFFF00000008;
  else
    return (unint64_t)*((unsigned int *)this + a3 + 44) << 32;
}

uint64_t `anonymous namespace'::Add8Slice::SetOutput(_anonymous_namespace_::Add8Slice *this, int a2, int a3, int a4)
{
  uint64_t result;

  if (a2)
    return 8;
  result = 0;
  *((_DWORD *)this + a3 + 44) = a4;
  return result;
}

void Phase::DspLayer::VoicePoolSlice::GetBuffer(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 10;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
}

uint64_t Phase::DspLayer::VoicePoolSlice::SetBuffer(Phase::DspLayer::VoicePoolSlice *this, int a2, int a3, void *a4)
{
  return 10;
}

void std::__function::__func<Phase::DspLayer::Add8::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::Add8::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::DspLayer::Add8::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::Add8::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D577380;
  return result;
}

void std::__function::__func<Phase::DspLayer::Add8::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::Add8::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D577380;
}

uint64_t std::__function::__func<Phase::DspLayer::Add8::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::Add8::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()(uint64_t a1, Phase::DspLayer::VoiceEngine **a2, int *a3)
{
  Phase::DspLayer::VoiceEngine *v3;
  int v4;
  uint64_t v5;
  int v6;
  Phase::DspLayer::VoiceEngine *v7;
  int32x4_t *v8;

  v3 = *a2;
  v4 = *a3;
  v5 = operator new();
  Phase::DspLayer::VoicePool::VoicePool((Phase::DspLayer::VoicePool *)v5, "Add8", v3, v4, 448);
  *(_QWORD *)v5 = &off_24D577288;
  if (*(int *)(v5 + 40) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(Phase::DspLayer::VoiceEngine **)(v5 + 32);
      v8 = (int32x4_t *)(*(_QWORD *)(v5 + 24) + *(int *)(v5 + 16) * (uint64_t)v6);
      v8->i64[0] = (uint64_t)&off_24D5772A8;
      v8->i64[1] = 0;
      ++v6;
    }
    while (v6 < *(_DWORD *)(v5 + 40));
  }
  return v5;
}

void sub_2164E6F9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199F9D70](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

const char *Phase::SpatialModeler::AmbientErrorCategory::name(Phase::SpatialModeler::AmbientErrorCategory *this)
{
  return "Ambient";
}

void Phase::SpatialModeler::AmbientErrorCategory::message(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v5;
  void *__p[2];
  char v7;

  if (a1 > 7)
  {
    switch(a1)
    {
      case 130:
        v5 = "Ambient Modeler Error: QueryInput has an unsupported Subband Count.";
        break;
      case 129:
        v5 = "Ambient Modeler Error: Query has an invalid Source at the World Origin. Please translate the Source away fr"
             "om the World Origin and try again.";
        break;
      case 128:
        v5 = "Ambient Modeler Error: Query has an invalid Volumetric Source. Please replace with a Point Source and try again.";
        break;
      default:
        v5 = "Ambient Modeler Error: <unrecognized error>";
        break;
    }
    std::string::basic_string[abi:ne180100]<0>(a2, v5);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Ambient ");
    Phase::SpatialModeler::ModelerErrorMessage(a1, (const void **)__p, (uint64_t)a2);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_2164E7094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::AmbientErrorCategory::~AmbientErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::SpatialModeler::Ambient::GetSupportedQueryDescs(int64x2_t *a1@<X8>)
{
  std::string *v3;
  unint64_t v4;
  std::string *v5;
  uint64_t p_size;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *__p[2];
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19[2];
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  __int128 v27;

  v21 = 0uLL;
  v22 = 0;
  v23 = -1;
  v24 = 0;
  v25 = 0;
  v26 = 0u;
  v27 = 0u;
  MEMORY[0x2199F99B0](&v21, "CULL");
  v23 = 0;
  v24 = 0x100000001;
  v25 = 1;
  v14 = 0uLL;
  v15 = 0;
  v16 = -1;
  v17 = 0;
  v18 = 0;
  *(_OWORD *)v19 = 0u;
  v20 = 0u;
  MEMORY[0x2199F99B0](&v14, "CLUSTER");
  v16 = 1;
  v17 = 0x200000003;
  v18 = 1;
  v7 = 0uLL;
  v8 = 0;
  v9 = -1;
  v10 = 0;
  v11 = 0;
  *(_OWORD *)__p = 0u;
  v13 = 0u;
  MEMORY[0x2199F99B0](&v7, "SPATIAL");
  v9 = 2;
  v10 = 0x300000002;
  v11 = 1;
  a1->i64[0] = 0;
  a1->i64[1] = 0;
  a1[1].i64[0] = 0;
  v3 = (std::string *)std::vector<Phase::SpatialModeler::QueryDesc>::__push_back_slow_path<Phase::SpatialModeler::QueryDesc const&>(a1, &v21);
  v4 = a1[1].u64[0];
  a1->i64[1] = (uint64_t)v3;
  if ((unint64_t)v3 >= v4)
  {
    v5 = (std::string *)std::vector<Phase::SpatialModeler::QueryDesc>::__push_back_slow_path<Phase::SpatialModeler::QueryDesc const&>(a1, &v14);
  }
  else
  {
    std::allocator<Phase::SpatialModeler::QueryDesc>::construct[abi:ne180100]<Phase::SpatialModeler::QueryDesc,Phase::SpatialModeler::QueryDesc const&>((_DWORD)a1 + 16, v3, &v14);
    v5 = (std::string *)((char *)v3 + 80);
    a1->i64[1] = (uint64_t)v5;
  }
  a1->i64[1] = (uint64_t)v5;
  if ((unint64_t)v5 >= a1[1].i64[0])
  {
    p_size = std::vector<Phase::SpatialModeler::QueryDesc>::__push_back_slow_path<Phase::SpatialModeler::QueryDesc const&>(a1, &v7);
  }
  else
  {
    std::allocator<Phase::SpatialModeler::QueryDesc>::construct[abi:ne180100]<Phase::SpatialModeler::QueryDesc,Phase::SpatialModeler::QueryDesc const&>((_DWORD)a1 + 16, v5, &v7);
    p_size = (uint64_t)&v5[3].__r_.__value_.__l.__size_;
    a1->i64[1] = (uint64_t)&v5[3].__r_.__value_.__l.__size_;
  }
  a1->i64[1] = p_size;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8) < 0)
    operator delete((void *)v7);
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
  if (SHIBYTE(v15) < 0)
    operator delete((void *)v14);
  if ((_QWORD)v26)
  {
    *((_QWORD *)&v26 + 1) = v26;
    operator delete((void *)v26);
  }
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
}

void sub_2164E72C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(v4 - 40) = v2;
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 40));
  Phase::SpatialModeler::QueryDesc::~QueryDesc((Phase::SpatialModeler::QueryDesc *)va);
  Phase::SpatialModeler::QueryDesc::~QueryDesc((Phase::SpatialModeler::QueryDesc *)va1);
  Phase::SpatialModeler::QueryDesc::~QueryDesc((Phase::SpatialModeler::QueryDesc *)(v4 - 120));
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::QueryDesc::~QueryDesc(Phase::SpatialModeler::QueryDesc *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void Phase::SpatialModeler::Ambient::Init(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *__p[5];

  v2 = a1 + 6;
  v1 = a1[6];
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[8] - v1) >> 4) <= 0x7F)
  {
    v3 = a1[7] - v1;
    __p[4] = a1 + 8;
    __p[0] = operator new(0xA800uLL);
    __p[1] = (char *)__p[0] + v3;
    __p[2] = (char *)__p[0] + v3;
    __p[3] = (char *)__p[0] + 43008;
    std::vector<Phase::SpatialModeler::RenderGroup>::__swap_out_circular_buffer(v2, __p);
    if (__p[0])
      operator delete(__p[0]);
  }
}

void Phase::SpatialModeler::Ambient::RunQuery(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x2_t *v12;
  float32x2_t *v13;
  uint64_t *v14;
  float32x2_t v15;
  __int32 v16;
  float v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  float *v70;
  uint64_t v71;
  unint64_t v72;
  Phase::Logger *v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  __int128 v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  __int128 v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  _BYTE *v102;
  float v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  float v109;
  float v110;
  float v111;
  __int128 v112;
  __int128 v113[2];
  unint64_t v114;
  float v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v6 = a2[10];
  if (v6 == 2)
  {
    v9 = a2[11];
    if (!v9 || *(_DWORD *)v9 != 2)
      goto LABEL_29;
    v10 = a2[12];
    if (!v10 || *(_DWORD *)v10 != 3)
      goto LABEL_31;
    v11 = a2[8];
    if (!v11)
    {
LABEL_37:
      if (a1)
      {
        v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
        v45 = 5;
        goto LABEL_33;
      }
      goto LABEL_112;
    }
    v12 = (float32x2_t *)Phase::Geometry::SystemState::GetEntityChecked<Phase::Geometry::Listener>(a2[8], *(_QWORD *)(v9 + 552));
    if (v12)
    {
      if (*(_QWORD *)(v9 + 8) != 1)
      {
        v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
        v45 = 130;
        goto LABEL_33;
      }
      v13 = v12;
      v14 = Phase::SpatialModeler::AllocMetadata<float,Phase::SystemAllocator>((uint64_t *)v10, (uint64_t)(a1 + 4), (Phase::Logger *)1, 1);
      v15 = v13[6];
      v17 = v13[7].f32[0];
      v16 = v13[7].i32[1];
      *(_QWORD *)((char *)&v112 + 4) = 0;
      if (!*(_BYTE *)(Phase::Logger::GetInstancePtr((Phase::Logger *)v14) + 1555))
      {
        *(_QWORD *)&v112 = *(_QWORD *)(v9 + 232);
        v88 = *(float *)(v9 + 240);
LABEL_98:
        *((float *)&v112 + 2) = v88;
        *(float32x2_t *)&v113[0] = vneg_f32(v15);
        *((float *)v113 + 2) = -v17;
        HIDWORD(v113[0]) = v16;
        Phase::operator*<float>((float *)v113, (float *)&v112, &v109);
        v94 = v109;
        if (v109 < 0.0)
          v94 = -v109;
        if (v94 > 0.00000011921)
          goto LABEL_107;
        v95 = v110;
        if (v110 < 0.0)
          v95 = -v110;
        if (v95 > 0.00000011921)
          goto LABEL_107;
        v96 = v111;
        if (v111 < 0.0)
          v96 = -v111;
        if (v96 <= 0.00000011921)
        {
          v97 = 0.0;
          v98 = 180.0;
        }
        else
        {
LABEL_107:
          Phase::CartesianToSphericalXZ<float>(&v109, (float *)v113);
          v97 = *((float *)v113 + 1) * 57.296;
          v98 = 180.0 - (float)(*((float *)v113 + 2) * 57.296);
        }
        v99 = *(_QWORD *)(v10 + 8);
        v100 = *(_DWORD **)(v10 + 56);
        v101 = *(_QWORD *)(v10 + 104);
        v102 = *(_BYTE **)(v10 + 144);
        *(_DWORD *)v99 = 1065353216;
        *(float *)(v99 + 4) = v97;
        v103 = (float)(v98 - (float)(floorf(v98 / 360.0) * 360.0)) + 0.0;
        if (v103 >= 360.0)
          v103 = nextafterf(360.0, 0.0);
        *(float *)(v99 + 8) = v103;
        *v100 = 0;
        if (*(_QWORD *)(a2[11] + 8) != 1)
          goto LABEL_112;
        *(_DWORD *)(v101 + 16) = 1065353216;
        *v102 = 0;
        v8 = 1;
        *(_BYTE *)(v10 + 201) = 1;
        *(_DWORD *)(v10 + 204) = 0;
        *(_BYTE *)(v10 + 4) = 1;
        goto LABEL_34;
      }
      v18 = Phase::Geometry::SystemState::GetEntityChecked<Phase::Geometry::Source>(v11, *(_QWORD *)(v9 + 208));
      if (v18)
      {
        if (*((_QWORD *)v18 + 15) != *((_QWORD *)v18 + 16))
        {
          v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
          goto LABEL_114;
        }
        v89 = *((float *)v18 + 16);
        v90 = *((float *)v18 + 17);
        v88 = *((float *)v18 + 18);
        v91 = -v89;
        if (v89 >= 0.0)
          v91 = *((float *)v18 + 16);
        if (v91 <= 0.00000011921)
        {
          v92 = -v90;
          if (v90 >= 0.0)
            v92 = *((float *)v18 + 17);
          if (v92 <= 0.00000011921)
          {
            v93 = -v88;
            if (v88 >= 0.0)
              v93 = *((float *)v18 + 18);
            if (v93 <= 0.00000011921)
            {
              v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
LABEL_118:
              v45 = 129;
              goto LABEL_33;
            }
          }
        }
        LODWORD(v112) = v18[16];
        *((float *)&v112 + 1) = v90;
        goto LABEL_98;
      }
    }
    if (a1)
    {
      v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
      v45 = 7;
      goto LABEL_33;
    }
    goto LABEL_112;
  }
  if (v6 != 1)
  {
    if (v6)
    {
      if (!a1)
        goto LABEL_112;
      v46 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
      *(_QWORD *)a3 = 2;
      *(_QWORD *)(a3 + 8) = v46;
      *(_DWORD *)(a3 + 24) = 2;
      return;
    }
    v7 = (_DWORD *)a2[12];
    if (v7 && *v7 == 1)
    {
      v7[2] = 0;
LABEL_7:
      v8 = 1;
      goto LABEL_34;
    }
LABEL_31:
    if (a1)
    {
      v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
      v45 = 4;
      goto LABEL_33;
    }
    goto LABEL_112;
  }
  v20 = a2[11];
  if (!v20 || *(_DWORD *)v20 != 3)
  {
LABEL_29:
    if (a1)
    {
      v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
      v45 = 3;
      goto LABEL_33;
    }
    goto LABEL_112;
  }
  v21 = a2[12];
  if (!v21 || *(_DWORD *)v21 != 2)
    goto LABEL_31;
  v22 = a2[8];
  if (!v22)
    goto LABEL_37;
  if (*(_BYTE *)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 1555))
  {
    v23 = (uint64_t)(a1 + 4);
    Phase::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>((uint64_t *)v113, v23, *(Phase::Logger **)(v20 + 144));
    std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v21 + 8), (uint64_t *)v113);
    *(_QWORD *)(v21 + 48) = v114;
    std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)v113);
    Phase::AllocArray<BOOL,Phase::SystemAllocator>((uint64_t *)v113, v23, *(Phase::Logger **)(v20 + 144));
    std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v21 + 56), (uint64_t *)v113);
    *(_QWORD *)(v21 + 96) = v114;
    std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)v113);
    Phase::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>((uint64_t *)v113, v23, *(Phase::Logger **)(v20 + 144));
    std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v21 + 104), (uint64_t *)v113);
    *(_QWORD *)(v21 + 144) = v114;
    std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)v113);
    if (*(_QWORD *)(v21 + 144))
    {
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      do
      {
        v28 = (unint64_t *)(*(_QWORD *)(v21 + 104) + v24);
        *v28 = v27;
        v28[1] = 0;
        *(_OWORD *)(*(_QWORD *)(v21 + 8) + v26) = *(_OWORD *)(*(_QWORD *)(v20 + 104) + v25);
        v29 = *(_QWORD *)(v20 + 104) + v25;
        v30 = *(_QWORD *)(v21 + 8) + v26;
        *(_QWORD *)(v30 + 16) = *(_QWORD *)(v29 + 144);
        v31 = *(_OWORD *)(v29 + 16);
        v32 = *(_OWORD *)(v29 + 32);
        v33 = *(_OWORD *)(v29 + 64);
        *(_OWORD *)(v30 + 224) = *(_OWORD *)(v29 + 48);
        *(_OWORD *)(v30 + 240) = v33;
        *(_OWORD *)(v30 + 192) = v31;
        *(_OWORD *)(v30 + 208) = v32;
        v34 = *(_OWORD *)(v29 + 80);
        v35 = *(_OWORD *)(v29 + 96);
        v36 = *(_OWORD *)(v29 + 128);
        *(_OWORD *)(v30 + 288) = *(_OWORD *)(v29 + 112);
        *(_OWORD *)(v30 + 304) = v36;
        *(_OWORD *)(v30 + 256) = v34;
        *(_OWORD *)(v30 + 272) = v35;
        v37 = (_OWORD *)(*(_QWORD *)(v20 + 104) + v25);
        v38 = *(_QWORD *)(v21 + 8) + v26;
        v39 = v37[16];
        v40 = v37[17];
        v41 = v37[15];
        *(_OWORD *)(v38 + 120) = v37[14];
        *(_OWORD *)(v38 + 168) = v40;
        *(_OWORD *)(v38 + 152) = v39;
        *(_OWORD *)(v38 + 136) = v41;
        v42 = v37[10];
        v43 = v37[11];
        v44 = v37[12];
        *(_OWORD *)(v38 + 104) = v37[13];
        *(_OWORD *)(v38 + 88) = v44;
        *(_OWORD *)(v38 + 72) = v43;
        *(_OWORD *)(v38 + 56) = v42;
        *(_BYTE *)(*(_QWORD *)(v21 + 56) + v27++) = 1;
        v26 += 336;
        v25 += 304;
        v24 += 16;
      }
      while (v27 < *(_QWORD *)(v21 + 144));
    }
    goto LABEL_7;
  }
  a1[7] = a1[6];
  v47 = (uint64_t)(a1 + 4);
  Phase::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>((uint64_t *)v113, (uint64_t)(a1 + 4), *(Phase::Logger **)(v20 + 144));
  v48 = (uint64_t *)(v21 + 104);
  std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v21 + 104), (uint64_t *)v113);
  *(_QWORD *)(v21 + 144) = v114;
  std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)v113);
  v49 = *(_QWORD *)(v20 + 144);
  if (!v49)
  {
LABEL_77:
    v73 = (Phase::Logger *)(*(_QWORD *)(v20 + 96) - 0x30C30C30C30C30C3 * ((a1[7] - a1[6]) >> 4));
    Phase::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>((uint64_t *)v113, v47, v73);
    v74 = (_QWORD *)(v21 + 8);
    std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v21 + 8), (uint64_t *)v113);
    *(_QWORD *)(v21 + 48) = v114;
    std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)v113);
    Phase::AllocArray<BOOL,Phase::SystemAllocator>((uint64_t *)v113, v47, v73);
    v75 = (_QWORD *)(v21 + 56);
    std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v21 + 56), (uint64_t *)v113);
    *(_QWORD *)(v21 + 96) = v114;
    std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)v113);
    if (*(_QWORD *)(v20 + 96))
    {
      v76 = 0;
      v77 = 56;
      do
      {
        v78 = (_QWORD *)(*(_QWORD *)(v20 + 56) + v77);
        v79 = (_QWORD *)(*v74 + v77);
        v80 = *(_OWORD *)(v78 - 7);
        *(v79 - 5) = *(v78 - 5);
        *(_OWORD *)(v79 - 7) = v80;
        *((_DWORD *)v79 - 8) = *((_DWORD *)v78 - 8);
        *((_DWORD *)v79 - 7) = *((_DWORD *)v78 - 7);
        *((_DWORD *)v79 - 6) = *((_DWORD *)v78 - 6);
        *((_DWORD *)v79 - 5) = *((_DWORD *)v78 - 5);
        *((_DWORD *)v79 - 4) = *((_DWORD *)v78 - 4);
        *((_DWORD *)v79 - 3) = *((_DWORD *)v78 - 3);
        *((_DWORD *)v79 - 2) = *((_DWORD *)v78 - 2);
        *((_DWORD *)v79 - 1) = *((_DWORD *)v78 - 1);
        memcpy(v79, v78, 0x109uLL);
        *(_BYTE *)(*v75 + v76++) = 1;
        v77 += 336;
      }
      while (v76 < *(_QWORD *)(v20 + 96));
    }
    v81 = a1[6];
    if (a1[7] != v81)
    {
      v82 = 0;
      v83 = 56;
      do
      {
        v84 = *(_QWORD *)(v20 + 96);
        v85 = (_QWORD *)(v81 + v83);
        v86 = *v74 + 336 * (v82 + v84);
        v87 = *(_OWORD *)(v85 - 7);
        *(_QWORD *)(v86 + 16) = *(v85 - 5);
        *(_OWORD *)v86 = v87;
        *(_DWORD *)(v86 + 24) = *((_DWORD *)v85 - 8);
        *(_DWORD *)(v86 + 28) = *((_DWORD *)v85 - 7);
        *(_DWORD *)(v86 + 32) = *((_DWORD *)v85 - 6);
        *(_DWORD *)(v86 + 36) = *((_DWORD *)v85 - 5);
        *(_DWORD *)(v86 + 40) = *((_DWORD *)v85 - 4);
        *(_DWORD *)(v86 + 44) = *((_DWORD *)v85 - 3);
        *(_DWORD *)(v86 + 48) = *((_DWORD *)v85 - 2);
        *(_DWORD *)(v86 + 52) = *((_DWORD *)v85 - 1);
        memcpy((void *)(v86 + 56), v85, 0x109uLL);
        *(_BYTE *)(*v75 + v84 + v82++) = 1;
        v81 = a1[6];
        v83 += 336;
      }
      while (v82 < 0xCF3CF3CF3CF3CF3DLL * ((a1[7] - v81) >> 4));
    }
    goto LABEL_7;
  }
  v50 = 0;
  v105 = v22;
  while (1)
  {
    v51 = *(_QWORD *)(v20 + 104);
    v52 = (_QWORD *)(*v48 + 16 * v50);
    v53 = *(_QWORD *)(v51 + 304 * v50 + 288);
    if (v53 != -1)
    {
      *v52 = v53;
      v52[1] = *(_QWORD *)(v51 + 304 * v50 + 296);
      goto LABEL_76;
    }
    v54 = *(_QWORD *)(v51 + 304 * v50 + 144);
    if (*(_DWORD *)(v22 + 136) <= v54
      || (v55 = *(_QWORD *)(v22 + 120), *(_DWORD *)(v55 + 24 * v54 + 20) != HIDWORD(v54))
      || (v56 = *(_QWORD *)(v55 + 24 * *(_QWORD *)(v51 + 304 * v50 + 144))) == 0
      || *(_DWORD *)v56 != 3)
    {
      if (a1)
      {
        v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
        v45 = 6;
        goto LABEL_33;
      }
LABEL_112:
      std::terminate();
    }
    if (*(_QWORD *)(v56 + 120) != *(_QWORD *)(v56 + 128))
      break;
    v107 = (_QWORD *)(*v48 + 16 * v50);
    v108 = *v48;
    v106 = v49;
    v57 = *(float *)(v56 + 64);
    v58 = *(float *)(v56 + 68);
    v109 = v57;
    v110 = v58;
    v59 = *(float *)(v56 + 72);
    v111 = v59;
    v60 = -v57;
    if (v57 >= 0.0)
      v60 = v57;
    if (v60 <= 0.00000011921)
    {
      v61 = -v58;
      if (v58 >= 0.0)
        v61 = v58;
      if (v61 <= 0.00000011921)
      {
        v62 = -v59;
        if (v59 >= 0.0)
          v62 = v59;
        if (v62 <= 0.00000011921)
        {
          v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
          goto LABEL_118;
        }
      }
    }
    v63 = *(_QWORD *)(v20 + 96);
    if (v63)
    {
      v64 = 0;
      v65 = (float *)(*(_QWORD *)(v20 + 56) + 40);
      while (!Phase::IsNearlyEqual<float>(v65, &v109))
      {
        ++v64;
        v65 += 84;
        if (v63 == v64)
          goto LABEL_63;
      }
      *v107 = v64;
      *(_QWORD *)(v108 + 16 * v50 + 8) = *(_QWORD *)(v51 + 304 * v50 + 296);
    }
    else
    {
LABEL_63:
      v66 = a1[6];
      v67 = a1[7] - v66;
      if (!v67)
      {
        v72 = 0;
LABEL_73:
        *v107 = v72 + v63;
        *(_QWORD *)(v108 + 16 * v50 + 8) = *(_QWORD *)(v51 + 304 * v50 + 296);
        Phase::SpatialModeler::RenderGroup::RenderGroup((Phase::SpatialModeler::RenderGroup *)v113);
        v48 = (uint64_t *)(v21 + 104);
        v22 = v105;
        MEMORY[0x2199FA6B8](&v112);
        v113[0] = v112;
        v114 = __PAIR64__(LODWORD(v58), LODWORD(v57));
        v115 = v59;
        std::vector<Phase::SpatialModeler::RenderGroup>::push_back[abi:ne180100](a1 + 6, v113);
        v49 = *(_QWORD *)(v20 + 144);
        goto LABEL_76;
      }
      v68 = v67 / 336;
      v104 = v68;
      if (v68 <= 1)
        v69 = 1;
      else
        v69 = v68;
      v70 = (float *)(v66 + 40);
      v71 = v63;
      while (!Phase::IsNearlyEqual<float>(v70, &v109))
      {
        ++v71;
        v70 += 84;
        if (!--v69)
        {
          v72 = v104;
          v47 = (uint64_t)(a1 + 4);
          goto LABEL_73;
        }
      }
      *v107 = v71;
      *(_QWORD *)(v108 + 16 * v50 + 8) = *(_QWORD *)(v51 + 304 * v50 + 296);
      v47 = (uint64_t)(a1 + 4);
    }
    v48 = (uint64_t *)(v21 + 104);
    v22 = v105;
    v49 = v106;
LABEL_76:
    if (++v50 >= v49)
      goto LABEL_77;
  }
  v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
LABEL_114:
  v45 = 128;
LABEL_33:
  *(_QWORD *)a3 = v45;
  *(_QWORD *)(a3 + 8) = v19;
  v8 = 2;
LABEL_34:
  *(_DWORD *)(a3 + 24) = v8;
}

uint64_t *Phase::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(uint64_t *a1, uint64_t a2, Phase::Logger *a3)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  Phase::Logger *v10;
  uint64_t v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v9 = 16;
  v10 = a3;
  v8[0] = a2;
  v8[1] = &v10;
  v8[2] = &v9;
  v7 = a2;
  Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(a3, (uint64_t)v8, &v7, (size_t *)&v11);
  v5 = v11;
  v11 = 0;
  *a1 = v5;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)v12);
  a1[5] = (uint64_t)a3;
  return std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v11);
}

uint64_t *Phase::AllocArray<BOOL,Phase::SystemAllocator>(uint64_t *a1, uint64_t a2, Phase::Logger *a3)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  Phase::Logger *v10;
  uint64_t v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v9 = 1;
  v10 = a3;
  v8[0] = a2;
  v8[1] = &v10;
  v8[2] = &v9;
  v7 = a2;
  Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(a3, (uint64_t)v8, &v7, &v11);
  v5 = v11;
  v11 = 0;
  *a1 = v5;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)v12);
  a1[5] = (uint64_t)a3;
  return std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v11);
}

uint64_t *Phase::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(uint64_t *a1, uint64_t a2, Phase::Logger *a3)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  Phase::Logger *v10;
  uint64_t v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v9 = 8;
  v10 = a3;
  v8[0] = a2;
  v8[1] = &v10;
  v8[2] = &v9;
  v7 = a2;
  Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(a3, (uint64_t)v8, &v7, &v11);
  v5 = v11;
  v11 = 0;
  *a1 = v5;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)v12);
  a1[5] = (uint64_t)a3;
  return std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v11);
}

_DWORD *Phase::Geometry::SystemState::GetEntityChecked<Phase::Geometry::Source>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *result;

  if (*(_DWORD *)(a1 + 136) <= a2)
    return 0;
  v2 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v2 + 24 * a2 + 20) != HIDWORD(a2))
    return 0;
  result = *(_DWORD **)(v2 + 24 * a2);
  if (!result || *result != 3)
    return 0;
  return result;
}

BOOL Phase::IsNearlyEqual<float>(float *a1, float *a2)
{
  float v2;
  float v3;
  float v5;

  v2 = *a1 - *a2;
  if (v2 < 0.0)
    v2 = -v2;
  if (v2 > 0.00000011921)
    return 0;
  v3 = a1[1] - a2[1];
  if (v3 < 0.0)
    v3 = -v3;
  if (v3 > 0.00000011921)
    return 0;
  v5 = a1[2] - a2[2];
  if (v5 < 0.0)
    v5 = -v5;
  return v5 <= 0.00000011921;
}

Phase::SpatialModeler::RenderGroup *Phase::SpatialModeler::RenderGroup::RenderGroup(Phase::SpatialModeler::RenderGroup *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = 0;
  v7 = *MEMORY[0x24BDAC8D0];
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_QWORD *)((char *)this + 36) = 1065353216;
  *(_QWORD *)((char *)this + 44) = 0;
  *((_DWORD *)this + 13) = 1065353216;
  do
  {
    v3 = (char *)this + v2;
    *((_DWORD *)v3 + 14) = 0;
    *((_QWORD *)v3 + 8) = 0;
    v2 += 16;
  }
  while (v2 != 128);
  *((_QWORD *)this + 23) = 0;
  v5 = 0;
  v6 = 0;
  Phase::Subbands<float>::Subbands((uint64_t)this + 192, &v5, 3);
  *((_BYTE *)this + 320) = 0;
  return this;
}

void std::vector<Phase::SpatialModeler::RenderGroup>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  void *__p[5];

  v4 = a1[2];
  v5 = a1[1];
  if (v5 >= v4)
  {
    v8 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - *a1) >> 4);
    if (v8 + 1 > 0xC30C30C30C30C3)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v9 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v4 - *a1) >> 4);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x61861861861861)
      v11 = 0xC30C30C30C30C3;
    else
      v11 = v10;
    __p[4] = a1 + 2;
    if (v11)
    {
      if (v11 > 0xC30C30C30C30C3)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(336 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[336 * v8];
    __p[0] = v12;
    __p[1] = v13;
    __p[3] = &v12[336 * v11];
    *(_OWORD *)v13 = *a2;
    *((_QWORD *)v13 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(v13 + 24) = *(__int128 *)((char *)a2 + 24);
    *(_OWORD *)(v13 + 40) = *(__int128 *)((char *)a2 + 40);
    memcpy(v13 + 56, (char *)a2 + 56, 0x109uLL);
    __p[2] = v13 + 336;
    std::vector<Phase::SpatialModeler::RenderGroup>::__swap_out_circular_buffer(a1, __p);
    v7 = a1[1];
    if (__p[0])
      operator delete(__p[0]);
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
    *(_DWORD *)(v5 + 24) = *((_DWORD *)a2 + 6);
    *(_DWORD *)(v5 + 28) = *((_DWORD *)a2 + 7);
    *(_DWORD *)(v5 + 32) = *((_DWORD *)a2 + 8);
    *(_DWORD *)(v5 + 36) = *((_DWORD *)a2 + 9);
    *(_DWORD *)(v5 + 40) = *((_DWORD *)a2 + 10);
    *(_DWORD *)(v5 + 44) = *((_DWORD *)a2 + 11);
    *(_DWORD *)(v5 + 48) = *((_DWORD *)a2 + 12);
    *(_DWORD *)(v5 + 52) = *((_DWORD *)a2 + 13);
    memcpy((void *)(v5 + 56), (char *)a2 + 56, 0x109uLL);
    v7 = v5 + 336;
  }
  a1[1] = v7;
}

_DWORD *Phase::Geometry::SystemState::GetEntityChecked<Phase::Geometry::Listener>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *result;

  if (*(_DWORD *)(a1 + 136) <= a2)
    return 0;
  v2 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v2 + 24 * a2 + 20) != HIDWORD(a2))
    return 0;
  result = *(_DWORD **)(v2 + 24 * a2);
  if (!result || *result != 2)
    return 0;
  return result;
}

uint64_t *Phase::SpatialModeler::AllocMetadata<float,Phase::SystemAllocator>(uint64_t *a1, uint64_t a2, Phase::Logger *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  Phase::Logger *v14;
  uint64_t v15;
  Phase::Logger **v16;
  uint64_t *v17;
  Phase::Logger *v18;
  uint64_t v19;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x24BDAC8D0];
  v13 = 4;
  v14 = a3;
  v15 = a2;
  v16 = &v14;
  v17 = &v13;
  v12 = a2;
  Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(a3, (uint64_t)&v15, &v12, (size_t *)&v19);
  v8 = v19;
  v19 = 0;
  v15 = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v16, (uint64_t)v20);
  v18 = a3;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v19);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 1, &v15);
  a1[6] = (uint64_t)v18;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v15);
  v13 = 4;
  v14 = a3;
  v15 = a2;
  v16 = &v14;
  v17 = &v13;
  v12 = a2;
  Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(a3, (uint64_t)&v15, &v12, &v19);
  v9 = v19;
  v19 = 0;
  v15 = v9;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v16, (uint64_t)v20);
  v18 = a3;
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v19);
  std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 7, &v15);
  a1[12] = (uint64_t)v18;
  std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v15);
  Phase::AllocPackedSubbandArray<float,Phase::SystemAllocator>(a2, (uint64_t)a3, a4, &v15);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 13, &v15);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v15);
  v13 = 1;
  v14 = a3;
  v15 = a2;
  v16 = &v14;
  v17 = &v13;
  v12 = a2;
  Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(a3, (uint64_t)&v15, &v12, &v19);
  v10 = v19;
  v19 = 0;
  v15 = v10;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v16, (uint64_t)v20);
  v18 = a3;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v19);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 18, &v15);
  a1[23] = (uint64_t)v18;
  return std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](&v15);
}

float Phase::operator*<float>@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float result;

  v3 = a1[1];
  v4 = *a1 + *a1;
  v5 = v3 + v3;
  v6 = a1[2];
  v7 = a1[3];
  v8 = v6 + v6;
  v10 = a2[1];
  v9 = a2[2];
  v11 = (float)(*a1 * v10) - (float)(v3 * *a2);
  v12 = (float)((float)(v3 * v9) - (float)(v6 * v10)) + (float)(*a2 * v7);
  v13 = (float)((float)(v6 * *a2) - (float)(*a1 * v9)) + (float)(v10 * v7);
  v14 = v11 + (float)(v9 * v7);
  v15 = (float)(v5 * v14) - (float)(v8 * v13);
  result = v10 + (float)((float)(v8 * v12) - (float)(v4 * v14));
  *a3 = *a2 + v15;
  a3[1] = result;
  a3[2] = v9 + (float)((float)(v4 * v13) - (float)(v5 * v12));
  return result;
}

{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float result;

  v3 = a1[1];
  v5 = a2[2];
  v4 = a2[3];
  v7 = a1[2];
  v6 = a1[3];
  v8 = a2[1];
  v9 = (float)((float)((float)(v4 * v3) + (float)(v6 * v8)) + (float)(v7 * *a2)) - (float)(*a1 * v5);
  v10 = (float)((float)((float)(v4 * v7) + (float)(v6 * v5)) + (float)(*a1 * v8)) - (float)(v3 * *a2);
  v11 = (float)((float)(v6 * v4) - (float)(*a1 * *a2)) - (float)(v3 * v8);
  *a3 = (float)((float)((float)(*a1 * v4) + (float)(v6 * *a2)) + (float)(v3 * v5)) - (float)(v7 * v8);
  a3[1] = v9;
  result = v11 - (float)(v7 * v5);
  a3[2] = v10;
  a3[3] = result;
  return result;
}

void Phase::CartesianToSphericalXZ<float>(float *a1@<X0>, float *a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = sqrtf((float)((float)(v4 * v4) + (float)(v3 * v3)) + (float)(v5 * v5));
  v7 = acosf(v3 / v6);
  v8 = atan2f(v4, v5);
  *a2 = v6;
  a2[1] = v7;
  a2[2] = v8;
}

uint64_t Phase::SpatialModeler::Ambient::GetGraphDescription@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  switch(a1)
  {
    case 2:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x2199F99B0](a2, "AmbientSpatialQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      v4 = *(_QWORD *)(a2 + 24);
      result = MEMORY[0x2199F99B0](v4, "FullAmbientSpatialGraph");
      goto LABEL_7;
    case 1:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x2199F99B0](a2, "AmbientClusterQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      v4 = *(_QWORD *)(a2 + 24);
      result = MEMORY[0x2199F99B0](v4, "FullAmbientClusterGraph");
      goto LABEL_7;
    case 0:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x2199F99B0](a2, "AmbientCullQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      v4 = *(_QWORD *)(a2 + 24);
      result = MEMORY[0x2199F99B0](v4, "FullAmbientCullGraph");
LABEL_7:
      *(_QWORD *)(v4 + 24) = 0xFFFFFFFFLL;
      return result;
  }
  *(_OWORD *)(a2 + 16) = 0uLL;
  *(_OWORD *)(a2 + 32) = 0uLL;
  *(_OWORD *)a2 = 0uLL;
  return result;
}

void sub_2164E87CC(_Unwind_Exception *a1)
{
  void **v1;

  Phase::SpatialModeler::GraphDescription::~GraphDescription(v1);
  _Unwind_Resume(a1);
}

void std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      while (v3 != v5)
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      a1[1] = v5;
    }
  }
  else
  {
    std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__append(a1, a2 - v4);
  }
}

void Phase::SpatialModeler::GraphDescription::~GraphDescription(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t Phase::SpatialModeler::Ambient::GetErrorCategory(Phase::SpatialModeler::Ambient *this)
{
  return (uint64_t)this + 40;
}

BOOL Phase::SpatialModeler::Ambient::IsQueryIndexValid(Phase::SpatialModeler::Ambient *this, unint64_t a2)
{
  return a2 < 3;
}

void Phase::SpatialModeler::Ambient::~Ambient(std::error_category *this)
{
  std::error_category_vtbl *v2;

  this->__vftable = (std::error_category_vtbl *)&off_24D577410;
  v2 = this[6].__vftable;
  if (v2)
  {
    this[7].__vftable = v2;
    operator delete(v2);
  }
  std::error_category::~error_category(this + 5);
  this->__vftable = (std::error_category_vtbl *)&off_24D577480;
  std::error_category::~error_category(this + 1);
}

{
  std::error_category_vtbl *v2;

  this->__vftable = (std::error_category_vtbl *)&off_24D577410;
  v2 = this[6].__vftable;
  if (v2)
  {
    this[7].__vftable = v2;
    operator delete(v2);
  }
  std::error_category::~error_category(this + 5);
  this->__vftable = (std::error_category_vtbl *)&off_24D577480;
  std::error_category::~error_category(this + 1);
  JUMPOUT(0x2199F9D70);
}

void Phase::SpatialModeler::BaseModeler::AllocateQueryState(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[4] = 0;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100](a1);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v3 = v1;
    v2 = result[4];
    if (!v2)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v3);
  }
  return result;
}

uint64_t *std::unique_ptr<BOOL [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](a1);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v3 = v1;
    v2 = result[4];
    if (!v2)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v3);
  }
  return result;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100](a1);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v3 = v1;
    v2 = result[4];
    if (!v2)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v3);
  }
  return result;
}

uint64_t Phase::Subbands<float>::Subbands(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 124) = a3;
  if (a3)
  {
    v4 = 0;
    v5 = 0;
    v6 = 4 * a3;
    do
    {
      if (v5 < a3)
      {
        v4 = v5 + 1;
        *(_DWORD *)(a1 + 4 * v5++) = *a2;
      }
      ++a2;
      v6 -= 4;
    }
    while (v6);
    if (a3 > v4)
      bzero((void *)(a1 + 4 * v4), 4 * (a3 - v4));
  }
  return a1;
}

void std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

uint64_t Phase::SpatialModeler::BaseModeler::GetErrorCategory(Phase::SpatialModeler::BaseModeler *this)
{
  return (uint64_t)this + 8;
}

uint64_t Phase::SpatialModeler::BaseModeler::IsQueryIndexValid(Phase::SpatialModeler::BaseModeler *this)
{
  return 0;
}

double Phase::SpatialModeler::BaseModeler::GetGraphDescription@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<Phase::SpatialModeler::QueryDesc>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<Phase::SpatialModeler::QueryDesc>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 48);
  if (v3)
  {
    *(_QWORD *)(a2 + 56) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::vector<Phase::SpatialModeler::QueryDesc>::__push_back_slow_path<Phase::SpatialModeler::QueryDesc const&>(int64x2_t *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  int64x2_t v18;
  char *v19;
  char *v21;
  int64x2_t v22;
  char *v23;
  int64x2_t *v24;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  v6 = (_DWORD)a1 + 16;
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v3)
    v3 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x199999999999999)
    v7 = 0x333333333333333;
  else
    v7 = v3;
  v24 = a1 + 1;
  if (v7)
  {
    if (v7 > 0x333333333333333)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v8 = (char *)operator new(80 * v7);
  }
  else
  {
    v8 = 0;
  }
  v21 = v8;
  v22.i64[0] = (uint64_t)&v8[80 * v2];
  v23 = &v8[80 * v7];
  std::allocator<Phase::SpatialModeler::QueryDesc>::construct[abi:ne180100]<Phase::SpatialModeler::QueryDesc,Phase::SpatialModeler::QueryDesc const&>(v6, (std::string *)v22.i64[0], a2);
  v9 = v22.i64[0];
  v10 = v22.i64[0] + 80;
  v22.i64[1] = v22.i64[0] + 80;
  v12 = a1->i64[0];
  v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    v18 = vdupq_n_s64(v11);
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = v9 + v13;
      v15 = v11 + v13;
      v16 = *(_OWORD *)(v11 + v13 - 80);
      *(_QWORD *)(v14 - 64) = *(_QWORD *)(v11 + v13 - 64);
      *(_OWORD *)(v14 - 80) = v16;
      *(_QWORD *)(v15 - 72) = 0;
      *(_QWORD *)(v15 - 64) = 0;
      *(_QWORD *)(v15 - 80) = 0;
      v17 = *(_OWORD *)(v11 + v13 - 56);
      *(_DWORD *)(v14 - 40) = *(_DWORD *)(v11 + v13 - 40);
      *(_OWORD *)(v14 - 56) = v17;
      *(_QWORD *)(v14 - 24) = 0;
      *(_QWORD *)(v14 - 16) = 0;
      *(_QWORD *)(v14 - 32) = 0;
      *(_OWORD *)(v14 - 32) = *(_OWORD *)(v11 + v13 - 32);
      *(_QWORD *)(v14 - 16) = *(_QWORD *)(v11 + v13 - 16);
      *(_QWORD *)(v15 - 32) = 0;
      *(_QWORD *)(v15 - 24) = 0;
      *(_QWORD *)(v15 - 16) = 0;
      *(_QWORD *)(v14 - 8) = *(_QWORD *)(v11 + v13 - 8);
      v13 -= 80;
    }
    while (v11 + v13 != v12);
    v18 = *a1;
    v10 = v22.i64[1];
    v9 += v13;
  }
  a1->i64[0] = v9;
  a1->i64[1] = v10;
  v22 = v18;
  v19 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v23;
  v23 = v19;
  v21 = (char *)v18.i64[0];
  std::__split_buffer<Phase::SpatialModeler::QueryDesc>::~__split_buffer((uint64_t)&v21);
  return v10;
}

void sub_2164E8F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Phase::SpatialModeler::QueryDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

double std::allocator<Phase::SpatialModeler::QueryDesc>::construct[abi:ne180100]<Phase::SpatialModeler::QueryDesc,Phase::SpatialModeler::QueryDesc const&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  int v7;
  double result;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(__int128 *)((char *)a3 + 24);
  v7 = *((_DWORD *)a3 + 10);
  this[2].__r_.__value_.__r.__words[0] = 0;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = v7;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(this[2].__r_.__value_.__r.__words, *((const void **)a3 + 6), *((_QWORD *)a3 + 7), (uint64_t)(*((_QWORD *)a3 + 7) - *((_QWORD *)a3 + 6)) >> 2);
  result = *((double *)a3 + 9);
  *(double *)&this[3].__r_.__value_.__l.__data_ = result;
  return result;
}

void sub_2164E8FD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2164E9048(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<unsigned int>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t std::__split_buffer<Phase::SpatialModeler::QueryDesc>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = i - 80;
    std::allocator<Phase::SpatialModeler::QueryDesc>::destroy[abi:ne180100](v4, i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::vector<Phase::SpatialModeler::RenderGroup>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7 - 336;
      v9 = *(_OWORD *)(v4 + v7 - 336);
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v4 + v7 - 320);
      *(_OWORD *)v8 = v9;
      *(_DWORD *)(v6 + v7 - 312) = *(_DWORD *)(v4 + v7 - 312);
      *(_DWORD *)(v6 + v7 - 308) = *(_DWORD *)(v4 + v7 - 308);
      *(_DWORD *)(v6 + v7 - 304) = *(_DWORD *)(v4 + v7 - 304);
      *(_DWORD *)(v6 + v7 - 300) = *(_DWORD *)(v4 + v7 - 300);
      *(_DWORD *)(v6 + v7 - 296) = *(_DWORD *)(v4 + v7 - 296);
      *(_DWORD *)(v6 + v7 - 292) = *(_DWORD *)(v4 + v7 - 292);
      *(_DWORD *)(v6 + v7 - 288) = *(_DWORD *)(v4 + v7 - 288);
      *(_DWORD *)(v6 + v7 - 284) = *(_DWORD *)(v4 + v7 - 284);
      result = (uint64_t *)memcpy((void *)(v6 + v7 - 280), (const void *)(v4 + v7 - 280), 0x109uLL);
      v7 -= 336;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v10 = *v3;
  *v3 = v6;
  a2[1] = v10;
  v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

_QWORD *Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>@<X0>(Phase::Logger *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, size_t *a4@<X8>)
{
  size_t v7;
  std::align_val_t v8;
  void *v9;
  NSObject *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  NSObject *v18;
  std::logic_error *exception;
  _BYTE v20[18];
  __int16 v21;
  _DWORD v22[7];

  *(_QWORD *)&v22[5] = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v18 = **(NSObject ***)(Phase::Logger::GetInstancePtr(0) + 112);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v20 = 136315394;
      *(_QWORD *)&v20[4] = "ManagedPtr.hpp";
      *(_WORD *)&v20[12] = 1024;
      *(_DWORD *)&v20[14] = 229;
      _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v20, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  v7 = 336 * **(_QWORD **)(a2 + 8);
  if (v7)
  {
    v8 = **(_QWORD **)(a2 + 16);
    if (!v8)
    {
      v9 = operator new(v7);
      goto LABEL_7;
    }
    if ((v8 & (v8 - 1)) == 0)
    {
      v9 = operator new(v7, v8);
LABEL_7:
      v7 = (size_t)v9;
      goto LABEL_11;
    }
    v10 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 176);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v20 = 136315650;
      *(_QWORD *)&v20[4] = "SystemAllocator.hpp";
      *(_WORD *)&v20[12] = 1024;
      *(_DWORD *)&v20[14] = 47;
      v21 = 2048;
      *(_QWORD *)v22 = v7;
      _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error allocating memory - alignment must be power of two. Alignment requested %zu", v20, 0x1Cu);
    }
    v7 = 0;
  }
LABEL_11:
  v11 = v7 + 336 * (_QWORD)a1;
  v12 = v7;
  do
  {
    v13 = 0;
    *(_DWORD *)(v12 + 32) = 0;
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_QWORD *)(v12 + 36) = 1065353216;
    *(_QWORD *)(v12 + 44) = 0;
    *(_DWORD *)(v12 + 52) = 1065353216;
    do
    {
      v14 = v12 + v13;
      *(_DWORD *)(v14 + 56) = 0;
      *(_QWORD *)(v14 + 64) = 0;
      v13 += 16;
    }
    while (v13 != 128);
    *(_QWORD *)(v12 + 184) = 0;
    *(_QWORD *)v20 = 0;
    *(_DWORD *)&v20[8] = 0;
    Phase::Subbands<float>::Subbands(v12 + 192, v20, 3);
    *(_BYTE *)(v12 + 320) = 0;
    v12 += 336;
  }
  while (v12 != v11);
  v15 = *a3;
  *(_QWORD *)v20 = &off_24D5774F0;
  *(_QWORD *)&v20[8] = v15;
  *(_QWORD *)&v22[1] = v20;
  *a4 = v7;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v20);
  result = *(_QWORD **)&v22[1];
  if (*(_BYTE **)&v22[1] == v20)
  {
    v17 = 4;
    result = v20;
  }
  else
  {
    if (!*(_QWORD *)&v22[1])
      return result;
    v17 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v17))();
}

void sub_2164E94E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5774F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5774F0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  operator delete(*a2);
}

uint64_t std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::SpatialModeler::RenderGroup*,0>(a1, v4);
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::SpatialModeler::RenderGroup*,0>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

_QWORD *Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>@<X0>(Phase::Logger *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  size_t v6;
  std::align_val_t v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  NSObject *v13;
  std::logic_error *exception;
  _BYTE v15[18];
  __int16 v16;
  _DWORD v17[7];

  *(_QWORD *)&v17[5] = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v13 = **(NSObject ***)(Phase::Logger::GetInstancePtr(0) + 112);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v15 = 136315394;
      *(_QWORD *)&v15[4] = "ManagedPtr.hpp";
      *(_WORD *)&v15[12] = 1024;
      *(_DWORD *)&v15[14] = 229;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v15, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  v6 = **(_QWORD **)(a2 + 8);
  if (v6)
  {
    v7 = **(_QWORD **)(a2 + 16);
    if (!v7)
    {
      v8 = operator new(v6);
      goto LABEL_10;
    }
    if ((v7 & (v7 - 1)) == 0)
    {
      v8 = operator new(v6, v7);
      goto LABEL_10;
    }
    v9 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 176);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v15 = 136315650;
      *(_QWORD *)&v15[4] = "SystemAllocator.hpp";
      *(_WORD *)&v15[12] = 1024;
      *(_DWORD *)&v15[14] = 47;
      v16 = 2048;
      *(_QWORD *)v17 = v6;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Error allocating memory - alignment must be power of two. Alignment requested %zu", v15, 0x1Cu);
    }
  }
  v8 = 0;
LABEL_10:
  v10 = *a3;
  *(_QWORD *)v15 = &off_24D577538;
  *(_QWORD *)&v15[8] = v10;
  *(_QWORD *)&v17[1] = v15;
  *a4 = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v15);
  result = *(_QWORD **)&v17[1];
  if (*(_BYTE **)&v17[1] == v15)
  {
    v12 = 4;
    result = v15;
  }
  else
  {
    if (!*(_QWORD *)&v17[1])
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_2164E9864(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D577538;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D577538;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  operator delete(*a2);
}

uint64_t *std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]<BOOL *,0>(a1, v4);
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t *std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]<BOOL *,0>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

_QWORD *Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>@<X0>(Phase::Logger *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  size_t v7;
  std::align_val_t v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  NSObject *v15;
  std::logic_error *exception;
  _BYTE v17[18];
  __int16 v18;
  _DWORD v19[7];

  *(_QWORD *)&v19[5] = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v15 = **(NSObject ***)(Phase::Logger::GetInstancePtr(0) + 112);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v17 = 136315394;
      *(_QWORD *)&v17[4] = "ManagedPtr.hpp";
      *(_WORD *)&v17[12] = 1024;
      *(_DWORD *)&v17[14] = 229;
      _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v17, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  v7 = 16 * **(_QWORD **)(a2 + 8);
  if (!v7)
    goto LABEL_9;
  v8 = **(_QWORD **)(a2 + 16);
  if (!v8)
  {
    v9 = operator new(v7);
    goto LABEL_10;
  }
  if ((v8 & (v8 - 1)) != 0)
  {
    v10 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 176);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v17 = 136315650;
      *(_QWORD *)&v17[4] = "SystemAllocator.hpp";
      *(_WORD *)&v17[12] = 1024;
      *(_DWORD *)&v17[14] = 47;
      v18 = 2048;
      *(_QWORD *)v19 = v7;
      _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error allocating memory - alignment must be power of two. Alignment requested %zu", v17, 0x1Cu);
    }
LABEL_9:
    v9 = 0;
    goto LABEL_10;
  }
  v9 = operator new(v7, v8);
LABEL_10:
  v11 = v9;
  do
  {
    *v11 = -1;
    v11[1] = 0;
    v11 += 2;
  }
  while (v11 != &v9[2 * (_QWORD)a1]);
  v12 = *a3;
  *(_QWORD *)v17 = &off_24D577580;
  *(_QWORD *)&v17[8] = v12;
  *(_QWORD *)&v19[1] = v17;
  *a4 = v9;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v17);
  result = *(_QWORD **)&v19[1];
  if (*(_BYTE **)&v19[1] == v17)
  {
    v14 = 4;
    result = v17;
  }
  else
  {
    if (!*(_QWORD *)&v19[1])
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void sub_2164E9BA8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D577580;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D577580;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  operator delete(*a2);
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::SpatialModeler::SubmixRoutingOutput*,0>(a1, v4);
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::SpatialModeler::SubmixRoutingOutput*,0>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

_QWORD *Phase::AllocPackedSubbandArray<float,Phase::SystemAllocator>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  void *v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v8 = 4 * a2 * a3;
  v9 = (void *)(v8 + 16);
  if (v8 != -16)
    v9 = operator new((size_t)v9, (std::align_val_t)8uLL);
  v13[0] = &off_24D577658;
  v13[1] = a1;
  v14 = v13;
  *a4 = v9;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v11 = 4;
    result = v13;
    goto LABEL_7;
  }
  if (v14)
  {
    v11 = 5;
LABEL_7:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
  }
  v12 = (_QWORD *)*a4;
  *v12 = a2;
  v12[1] = a3;
  return result;
}

uint64_t *std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](a1, v4);
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

_QWORD *Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>@<X0>(Phase::Logger *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, size_t *a4@<X8>)
{
  size_t v7;
  std::align_val_t v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  NSObject *v14;
  std::logic_error *exception;
  _BYTE v16[18];
  __int16 v17;
  _DWORD v18[7];

  *(_QWORD *)&v18[5] = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v14 = **(NSObject ***)(Phase::Logger::GetInstancePtr(0) + 112);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v16 = 136315394;
      *(_QWORD *)&v16[4] = "ManagedPtr.hpp";
      *(_WORD *)&v16[12] = 1024;
      *(_DWORD *)&v16[14] = 229;
      _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v16, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  v7 = 12 * **(_QWORD **)(a2 + 8);
  if (v7)
  {
    v8 = **(_QWORD **)(a2 + 16);
    if (!v8)
    {
      v9 = operator new(v7);
      goto LABEL_7;
    }
    if ((v8 & (v8 - 1)) == 0)
    {
      v9 = operator new(v7, v8);
LABEL_7:
      v7 = (size_t)v9;
      goto LABEL_11;
    }
    v10 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 176);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v16 = 136315650;
      *(_QWORD *)&v16[4] = "SystemAllocator.hpp";
      *(_WORD *)&v16[12] = 1024;
      *(_DWORD *)&v16[14] = 47;
      v17 = 2048;
      *(_QWORD *)v18 = v7;
      _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error allocating memory - alignment must be power of two. Alignment requested %zu", v16, 0x1Cu);
    }
    v7 = 0;
  }
LABEL_11:
  bzero((void *)v7, 12 * ((12 * (uint64_t)a1 - 12) / 0xCuLL) + 12);
  v11 = *a3;
  *(_QWORD *)v16 = &off_24D5775C8;
  *(_QWORD *)&v16[8] = v11;
  *(_QWORD *)&v18[1] = v16;
  *a4 = v7;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v16);
  result = *(_QWORD **)&v18[1];
  if (*(_BYTE **)&v18[1] == v16)
  {
    v13 = 4;
    result = v16;
  }
  else
  {
    if (!*(_QWORD *)&v18[1])
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_2164EA020(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5775C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5775C8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  operator delete(*a2);
}

uint64_t *std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](a1);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v3 = v1;
    v2 = result[4];
    if (!v2)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v3);
  }
  return result;
}

uint64_t *std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::Vector<float,3ul>*,0>(a1, v4);
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t *std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::Vector<float,3ul>*,0>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

_QWORD *Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>@<X0>(Phase::Logger *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  size_t v6;
  std::align_val_t v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  NSObject *v13;
  std::logic_error *exception;
  _BYTE v15[18];
  __int16 v16;
  _DWORD v17[7];

  *(_QWORD *)&v17[5] = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v13 = **(NSObject ***)(Phase::Logger::GetInstancePtr(0) + 112);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v15 = 136315394;
      *(_QWORD *)&v15[4] = "ManagedPtr.hpp";
      *(_WORD *)&v15[12] = 1024;
      *(_DWORD *)&v15[14] = 229;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v15, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  v6 = 4 * **(_QWORD **)(a2 + 8);
  if (v6)
  {
    v7 = **(_QWORD **)(a2 + 16);
    if (!v7)
    {
      v8 = operator new(v6);
      goto LABEL_10;
    }
    if ((v7 & (v7 - 1)) == 0)
    {
      v8 = operator new(v6, v7);
      goto LABEL_10;
    }
    v9 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 176);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v15 = 136315650;
      *(_QWORD *)&v15[4] = "SystemAllocator.hpp";
      *(_WORD *)&v15[12] = 1024;
      *(_DWORD *)&v15[14] = 47;
      v16 = 2048;
      *(_QWORD *)v17 = v6;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Error allocating memory - alignment must be power of two. Alignment requested %zu", v15, 0x1Cu);
    }
  }
  v8 = 0;
LABEL_10:
  v10 = *a3;
  *(_QWORD *)v15 = &off_24D577610;
  *(_QWORD *)&v15[8] = v10;
  *(_QWORD *)&v17[1] = v15;
  *a4 = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v15);
  result = *(_QWORD **)&v17[1];
  if (*(_BYTE **)&v17[1] == v15)
  {
    v12 = 4;
    result = v15;
  }
  else
  {
    if (!*(_QWORD *)&v17[1])
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_2164EA3E4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D577610;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D577610;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  operator delete(*a2);
}

uint64_t *std::unique_ptr<float [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](a1);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v3 = v1;
    v2 = result[4];
    if (!v2)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v3);
  }
  return result;
}

uint64_t *std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]<float *,0>(a1, v4);
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t *std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]<float *,0>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D577658;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D577658;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  operator delete(*a2);
}

uint64_t *std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

uint64_t *std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[32 * v10];
    v17 = &v13[32 * v12];
    bzero(v15, 32 * a2);
    v16 = &v15[32 * a2];
    std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<Phase::SpatialModeler::GraphDescriptionNode>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_2164EA7A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Phase::SpatialModeler::GraphDescriptionNode>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 32;
  }
}

uint64_t std::__split_buffer<Phase::SpatialModeler::GraphDescriptionNode>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<Phase::SpatialModeler::GraphDescriptionNode>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<Phase::SpatialModeler::GraphDescriptionNode>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void Phase::ArrayFunction::Interleave(const void **this, DSPComplex *__C, vDSP_Length __N, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  uint64_t i;
  uint64_t v8;
  DSPSplitComplex v9;

  if (a4 == 1)
  {
    memcpy(__C, *this, 4 * __N);
  }
  else if (a4 == 2)
  {
    v9 = *(DSPSplitComplex *)this;
    vDSP_ztoc(&v9, 1, __C, 2, __N);
  }
  else if (__N)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = this;
      for (i = a4; i; --i)
      {
        v8 = (uint64_t)*v6++;
        *((_DWORD *)&__C->real + v5++) = *(_DWORD *)(v8 + 4 * v4);
      }
      ++v4;
    }
    while (v4 != __N);
  }
}

void Phase::ArrayFunction::Deinterleave(DSPComplex *__C, void **a2, vDSP_Length __N, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t i;
  int v8;
  uint64_t v9;
  DSPSplitComplex v10;

  if (a4 == 1)
  {
    memcpy(*a2, __C, 4 * __N);
  }
  else if (a4 == 2)
  {
    v10 = *(DSPSplitComplex *)a2;
    vDSP_ctoz(__C, 2, &v10, 1, __N);
  }
  else if (__N)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = a2;
      for (i = a4; i; --i)
      {
        v8 = *((_DWORD *)&__C->real + v5++);
        v9 = (uint64_t)*v6++;
        *(_DWORD *)(v9 + 4 * v4) = v8;
      }
      ++v4;
    }
    while (v4 != __N);
  }
}

id *Phase::Controller::AssetUnloader::AssetUnloader(id *this, PHASEEngineImpl *a2)
{
  uint64_t *InstancePtr;
  void *v5;

  InstancePtr = (uint64_t *)Phase::Logger::GetInstancePtr((Phase::Logger *)this);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::Commandable((uint64_t)this, *InstancePtr, 1, 0x20000);
  *this = off_24D5776A0;
  this[5] = this + 5;
  this[6] = this + 5;
  this[7] = 0;
  this[8] = this + 8;
  this[9] = this + 8;
  this[10] = 0;
  this[11] = a2;
  this[12] = 0;
  this[13] = 0;
  this[12] = (id)Phase::Controller::TaskManager::GetService<Phase::ActionTreeManager>((Phase::Logger *)((char *)a2 + 48), 7);
  Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>((Phase::Logger *)((char *)this[11] + 48), 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeWeak(this + 13, v5);

  return this;
}

void sub_2164EABF8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  id *v4;

  objc_destroyWeak(v4);
  std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear(v3);
  std::__list_imp<Phase::Controller::AssetUnloader::UnloadRequest>::clear(v2);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::AssetUnloader::UnregisterAsset(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  id aBlock;

  v5 = a2;
  aBlock = a3;
  v6 = operator new(0x20uLL);
  v6[2] = v5;
  v7 = v5;
  v6[3] = _Block_copy(aBlock);
  v8 = a1[5];
  a1 += 5;
  *(_QWORD *)(v8 + 8) = v6;

  *a1 = v6;
  *v6 = v8;
  v6[1] = a1;
  ++a1[2];

}

void sub_2164EACAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void Phase::Controller::AssetUnloader::Update(Phase::Controller::AssetUnloader *this)
{
  Phase::Controller::AssetUnloader *v2;
  int v3;
  id *v4;
  unint64_t v5;
  id v6;
  Phase::ActionTreeManager *v7;
  Phase *v8;
  NSString *v9;
  uint64_t v10;
  int v11;
  Phase::ActionTreeManager *v12;
  NSString *v13;
  uint64_t StringHashId;
  Phase::ActionTreeManager *v15;
  NSString *v16;
  uint64_t v17;
  Phase::Controller::AssetUnloader *v18;
  id WeakRetained;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  Handle64 v31;
  uint64_t v32;
  uint64_t *v33;

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  v2 = (Phase::Controller::AssetUnloader *)*((_QWORD *)this + 6);
  if (v2 != (Phase::Controller::AssetUnloader *)((char *)this + 40))
  {
    v3 = 0;
    v4 = (id *)((char *)this + 104);
    v5 = 0x24D575000uLL;
    while (1)
    {
      v6 = *((id *)v2 + 2);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        break;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v12 = (Phase::ActionTreeManager *)*((_QWORD *)this + 12);
        objc_msgSend(v6, "identifier");
        v8 = (Phase *)objc_claimAutoreleasedReturnValue();
        StringHashId = Phase::GetStringHashId(v8, v13);
        v11 = Phase::ActionTreeManager::StopActionTreesWithActionTreeAsset(v12, StringHashId);
        goto LABEL_9;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v15 = (Phase::ActionTreeManager *)*((_QWORD *)this + 12);
        objc_msgSend(v6, "identifier");
        v8 = (Phase *)objc_claimAutoreleasedReturnValue();
        v17 = Phase::GetStringHashId(v8, v16);
        v11 = Phase::ActionTreeManager::StopActionTreesWithGlobalMetaParameterAsset(v15, v17);
        goto LABEL_9;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        goto LABEL_11;
      v22 = v5;
      v8 = (Phase *)v6;
      v23 = (_QWORD *)-[Phase getDataBundle](v8, "getDataBundle");
      if (v23[1])
      {
        v24 = 0;
        v25 = 0;
        v3 = 0;
        do
        {
          if (Phase::ActionTreeManager::StopActionTreesWithActionTreeAsset(*((Phase::ActionTreeManager **)this + 12), *(_QWORD *)(v23[2] + v24)))v3 = 1;
          ++v25;
          v24 += 120;
        }
        while (v25 < v23[1]);
      }
      else
      {
        v3 = 0;
      }
      if (v23[3])
      {
        v26 = 0;
        v27 = 0;
        do
        {
          if (Phase::ActionTreeManager::StopActionTreesWithSoundAsset(*((Phase::ActionTreeManager **)this + 12), *(_QWORD *)(v23[4] + v26)))
          {
            v3 = 1;
          }
          ++v27;
          v26 += 1064;
        }
        while (v27 < v23[3]);
      }
      if (v23[7])
      {
        v28 = 0;
        v29 = 0;
        do
        {
          if (Phase::ActionTreeManager::StopActionTreesWithGlobalMetaParameterAsset(*((Phase::ActionTreeManager **)this + 12), *(_QWORD *)(v23[8] + v28)))v3 = 1;
          ++v29;
          v28 += 464;
        }
        while (v29 < v23[7]);
      }
      v4 = (id *)((char *)this + 104);
      v5 = v22;
LABEL_10:

LABEL_11:
      if (v3)
      {
        v18 = (Phase::Controller::AssetUnloader *)*((_QWORD *)v2 + 1);
      }
      else
      {
        WeakRetained = objc_loadWeakRetained(v4);
        objc_msgSend(WeakRetained, "removeAssetInternal:", v6);

        v20 = *((_QWORD *)v2 + 3);
        if (v20)
          (*(void (**)(uint64_t, uint64_t))(v20 + 16))(v20, 1);
        v21 = *(_QWORD **)v2;
        v18 = (Phase::Controller::AssetUnloader *)*((_QWORD *)v2 + 1);
        v21[1] = v18;
        **((_QWORD **)v2 + 1) = v21;
        --*((_QWORD *)this + 7);
        std::__list_imp<Phase::Controller::AssetUnloader::UnloadRequest>::__delete_node[abi:ne180100]<>((uint64_t)this + 40, (id *)v2);
      }

      v2 = v18;
      if (v18 == (Phase::Controller::AssetUnloader *)((char *)this + 40))
        goto LABEL_37;
    }
    v7 = (Phase::ActionTreeManager *)*((_QWORD *)this + 12);
    objc_msgSend(v6, "identifier");
    v8 = (Phase *)objc_claimAutoreleasedReturnValue();
    v10 = Phase::GetStringHashId(v8, v9);
    v11 = Phase::ActionTreeManager::StopActionTreesWithSoundAsset(v7, v10);
LABEL_9:
    v3 = v11;
    goto LABEL_10;
  }
LABEL_37:
  v30 = (uint64_t *)*((_QWORD *)this + 9);
  while (v30 != (uint64_t *)((char *)this + 64))
  {
    v31.mData = v30[3];
    if (Phase::ActionTreeManager::StopActionTreesWithListenerSourceId(*((Phase::ActionTreeManager **)this + 12), v31))
    {
      v30 = (uint64_t *)v30[1];
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 11) + 368) + 248))(*(_QWORD *)(*((_QWORD *)this + 11) + 368), v30[2], v30[3]);
      v32 = *v30;
      v33 = (uint64_t *)v30[1];
      *(_QWORD *)(v32 + 8) = v33;
      *(_QWORD *)v30[1] = v32;
      --*((_QWORD *)this + 10);
      operator delete(v30);
      v30 = v33;
    }
  }
}

void sub_2164EAFE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void Phase::Controller::AssetUnloader::~AssetUnloader(id *this)
{
  objc_destroyWeak(this + 13);
  std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear(this + 8);
  std::__list_imp<Phase::Controller::AssetUnloader::UnloadRequest>::clear(this + 5);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  objc_destroyWeak(this + 13);
  std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear(this + 8);
  std::__list_imp<Phase::Controller::AssetUnloader::UnloadRequest>::clear(this + 5);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void std::__list_imp<Phase::Controller::AssetUnloader::UnloadRequest>::clear(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = a1[1];
    v4 = *(_QWORD **)v2;
    v4[1] = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((_QWORD *)v2 != a1)
    {
      v5 = *(_QWORD *)(v2 + 8);
      std::__list_imp<Phase::Controller::AssetUnloader::UnloadRequest>::__delete_node[abi:ne180100]<>((uint64_t)a1, (id *)v2);
      v2 = v5;
    }
  }
}

void std::__list_imp<Phase::Controller::AssetUnloader::UnloadRequest>::__delete_node[abi:ne180100]<>(uint64_t a1, id *a2)
{

  operator delete(a2);
}

float Phase::SpatialModeler::AudibleEarlyReflection::sAerPlaneHashingToleranceFactorOrientationInternal(Phase::SpatialModeler::AudibleEarlyReflection *this)
{
  unsigned __int8 v1;
  float *v2;
  int v4;

  v2 = (float *)&unk_254E44000;
  if ((v1 & 1) == 0)
  {
    v2 = (float *)&unk_254E44000;
    if (v4)
    {
      Phase::SpatialModeler::AudibleEarlyReflection::sAerPlaneHashingToleranceFactorOrientationInternal(void)::sToleranceFactor = 1085635364;
      v2 = (float *)&unk_254E44000;
    }
  }
  return v2[344];
}

int *Phase::SpatialModeler::AudibleEarlyReflection::AudibleEarlyReflection(int *a1, uint64_t a2, float *a3, uint64_t a4, int *a5, int *a6, int *a7, float a8)
{
  _OWORD *v8;
  float *v13;
  int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  float v22;
  unint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  Phase::SpatialModeler::AudibleEarlyReflection *v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[32];

  *((_OWORD *)a1 + 1) = 0u;
  v8 = a1 + 4;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  a1[67] = 0;
  *((_QWORD *)a1 + 34) = 0;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 45) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  *(_OWORD *)(a1 + 53) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  if (!a2)
    std::terminate();
  v13 = a3;
  v15 = *(_DWORD *)(a2 + 68);
  *a1 = v15;
  *(_QWORD *)(a1 + 1) = *(_QWORD *)(a2 + 60);
  *((float *)a1 + 3) = a8;
  v16 = *((unsigned int *)a3 + 31);
  v30 = 0uLL;
  v31 = 0uLL;
  v32 = 0uLL;
  v33 = 0uLL;
  v34 = 0uLL;
  v35 = 0uLL;
  memset(v36, 0, 28);
  *(_DWORD *)&v36[28] = v16;
  if ((_DWORD)v16)
    bzero(&v30, 4 * v16);
  v17 = v35;
  v8[4] = v34;
  v8[5] = v17;
  v18 = *(_OWORD *)&v36[16];
  v8[6] = *(_OWORD *)v36;
  v8[7] = v18;
  v19 = v31;
  *v8 = v30;
  v8[1] = v19;
  v20 = v33;
  v8[2] = v32;
  v8[3] = v20;
  a1[61] = *a6;
  a1[62] = a6[1];
  a1[63] = a6[2];
  a1[55] = *a5;
  a1[56] = a5[1];
  a1[57] = a5[2];
  a1[58] = *a7;
  a1[59] = a7[1];
  a1[60] = a7[2];
  v21 = *((unsigned int *)v13 + 31);
  if ((_DWORD)v21)
  {
    do
    {
      v22 = *v13++;
      *(float *)v8 = sqrtf(v22);
      v8 = (_OWORD *)((char *)v8 + 4);
      --v21;
    }
    while (v21);
  }
  v23 = 0;
  a1[36] = 1065353216;
  v24 = a4 + 12;
  do
  {
    v25 = &a1[v23 / 4];
    v25[37] = *(_DWORD *)(a4 + v23);
    v25[38] = *(_DWORD *)(v24 + v23 - 8);
    v25[39] = *(_DWORD *)(v24 + v23 - 4);
    v25[40] = *(_DWORD *)(v24 + v23);
    v25[41] = *(_DWORD *)(v24 + v23 + 4);
    v25[42] = *(_DWORD *)(v24 + v23 + 8);
    v23 += 24;
  }
  while (v23 != 72);
  if (v15 < 1)
  {
    v27 = 0;
  }
  else
  {
    v26 = 0;
    v27 = 0;
    v28 = (Phase::SpatialModeler::AudibleEarlyReflection *)(a1 + 40);
    do
    {
      ++v26;
      v27 += Phase::SpatialModeler::AudibleEarlyReflection::sPlaneHashWithBucketNormal(v28, (float *)v28 - 3) * v26;
      v28 = (Phase::SpatialModeler::AudibleEarlyReflection *)((char *)v28 + 24);
    }
    while (v26 < *a1);
  }
  *((_QWORD *)a1 + 32) = v27;
  return a1;
}

float Phase::SpatialModeler::AudibleEarlyReflection::updateISPositionEstimate(Phase::SpatialModeler::AudibleEarlyReflection *this, float a2)
{
  float v3;
  float v4;
  __float2 v5;
  __float2 v6;
  float v7;
  float v8;
  float result;

  v3 = *((float *)this + 3) * a2;
  v4 = *((float *)this + 1) * 0.017453;
  v5 = __sincosf_stret((float)(90.0 - *((float *)this + 2)) * 0.017453);
  v6 = __sincosf_stret(v4);
  v7 = *((float *)this + 59) + (float)(v3 * v5.__cosval);
  v8 = *((float *)this + 60);
  *((float *)this + 67) = *((float *)this + 58) + (float)(v6.__sinval * (float)(v3 * v5.__sinval));
  result = v8 + (float)(v6.__cosval * (float)(v3 * v5.__sinval));
  *((float *)this + 68) = v7;
  *((float *)this + 69) = result;
  return result;
}

float Phase::SpatialModeler::AudibleEarlyReflection::operator+=(unsigned int *a1, unsigned int *a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  float v8;
  float v9;
  float v10;
  unsigned int *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float32x2_t v19;
  float v20;
  float32x2_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  _OWORD *v27;
  float *v28;
  float *v29;
  uint64_t v30;
  float v31;
  float *v32;
  float *v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float *v37;
  float *v38;
  uint64_t v39;
  float v40;
  float *v41;
  float *v42;
  float v43;
  float *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float *v51;
  float *v52;
  float v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  float *v58;
  float *v59;
  float v60;
  int32x2_t v61;
  float v62;
  float32x2_t v63;
  unsigned int *v64;
  uint64_t v65;
  float v66;
  float v67;
  float result;
  _OWORD v69[8];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _OWORD v76[2];
  _OWORD v77[8];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _OWORD v84[2];
  _OWORD v85[8];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _OWORD v92[2];

  v8 = *((float *)a1 + 36);
  v9 = v8 / (float)(v8 + *((float *)a2 + 36));
  v10 = 1.0 - v9;
  if (v9 >= (float)(1.0 - v9))
    v11 = a1;
  else
    v11 = a2;
  v12 = *v11;
  *a1 = v12;
  v13 = *((float *)a1 + 1);
  v14 = *((float *)a2 + 1);
  v15 = vabds_f32(v13, v14);
  v16 = v14 + 360.0;
  v17 = v13 + 360.0;
  if (v13 >= v14)
    v17 = *((float *)a1 + 1);
  else
    v16 = *((float *)a2 + 1);
  if (v15 > 180.0)
  {
    v14 = v16;
    v13 = v17;
  }
  v18 = (float)(v10 * v14) + (float)(v13 * v9);
  if (v18 > 360.0)
    v18 = v18 + -360.0;
  *((float *)a1 + 1) = v18;
  v19 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)(a2 + 2), v10), *(float32x2_t *)(a1 + 2), v9);
  *((float32x2_t *)a1 + 1) = v19;
  v20 = (float)(v9 * *((float *)a1 + 63)) + (float)(v10 * *((float *)a2 + 63));
  v21 = vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 61), v9), vmul_n_f32(*(float32x2_t *)(a2 + 61), v10));
  *(float *)&a8 = sqrtf(vaddv_f32(vmul_f32(v21, v21)) + (float)(v20 * v20));
  *(float32x2_t *)(a1 + 61) = vdiv_f32(v21, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0));
  *((float *)a1 + 63) = v20 / *(float *)&a8;
  v22 = v8 + *((float *)a2 + 36);
  *((float *)a1 + 36) = v22;
  v23 = (float)(v9 * *((float *)a1 + 60)) + (float)(v10 * *((float *)a2 + 60));
  *((float32x2_t *)a1 + 29) = vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 58), v9), vmul_n_f32(*(float32x2_t *)(a2 + 58), v10));
  *((float *)a1 + 60) = v23;
  v24 = v9 * *((float *)a1 + 57);
  v25 = *((float *)a2 + 57);
  *(float32x2_t *)(a1 + 55) = vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 55), v9), vmul_n_f32(*(float32x2_t *)(a2 + 55), v10));
  *((float *)a1 + 57) = v24 + (float)(v10 * v25);
  v26 = a1[35];
  memset(v77, 0, 124);
  v27 = a1 + 4;
  if ((_DWORD)v26)
  {
    v28 = (float *)v77;
    v29 = (float *)(a1 + 4);
    v30 = v26;
    do
    {
      v31 = *v29++;
      *v28++ = v31 * v31;
      --v30;
    }
    while (v30);
    v83 = 0u;
    memset(v84, 0, 28);
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v32 = (float *)&v78;
    v33 = (float *)v77;
    v34 = v26;
    v78 = 0u;
    do
    {
      v35 = *v33++;
      *v32++ = v9 * v35;
      --v34;
    }
    while (v34);
  }
  else
  {
    memset(v84, 0, sizeof(v84));
    v82 = 0uLL;
    v83 = 0uLL;
    v80 = 0uLL;
    v81 = 0uLL;
    v78 = 0uLL;
    v79 = 0uLL;
  }
  v36 = a2[35];
  memset(v69, 0, 124);
  if ((_DWORD)v36)
  {
    v37 = (float *)(a2 + 4);
    v38 = (float *)v69;
    v39 = v36;
    do
    {
      v40 = *v37++;
      *v38++ = v40 * v40;
      --v39;
    }
    while (v39);
    v75 = 0u;
    memset(v76, 0, 28);
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v41 = (float *)&v70;
    v42 = (float *)v69;
    v70 = 0u;
    do
    {
      v43 = *v42++;
      *v41++ = v10 * v43;
      --v36;
    }
    while (v36);
  }
  else
  {
    memset(v76, 0, sizeof(v76));
    v74 = 0uLL;
    v75 = 0uLL;
    v72 = 0uLL;
    v73 = 0uLL;
    v70 = 0uLL;
    v71 = 0uLL;
  }
  memset(v85, 0, 124);
  if ((_DWORD)v26)
  {
    v44 = (float *)v85;
    v45 = (float *)&v70;
    v46 = (float *)&v78;
    v47 = v26;
    do
    {
      v48 = *v46++;
      v49 = v48;
      v50 = *v45++;
      *v44++ = v49 + v50;
      --v47;
    }
    while (v47);
    v91 = 0u;
    memset(v92, 0, 28);
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v86 = 0u;
    v51 = (float *)&v86;
    v52 = (float *)v85;
    HIDWORD(v92[1]) = v26;
    do
    {
      v53 = *v52++;
      *v51++ = sqrtf(v53);
      --v26;
    }
    while (v26);
  }
  else
  {
    memset(v92, 0, sizeof(v92));
    v90 = 0uLL;
    v91 = 0uLL;
    v88 = 0uLL;
    v89 = 0uLL;
    v86 = 0uLL;
    v87 = 0uLL;
  }
  v54 = v91;
  *((_OWORD *)a1 + 5) = v90;
  *((_OWORD *)a1 + 6) = v54;
  v55 = v92[1];
  *((_OWORD *)a1 + 7) = v92[0];
  *((_OWORD *)a1 + 8) = v55;
  v56 = v87;
  *v27 = v86;
  *((_OWORD *)a1 + 2) = v56;
  v57 = v89;
  *((_OWORD *)a1 + 3) = v88;
  *((_OWORD *)a1 + 4) = v57;
  if ((int)v12 >= 1)
  {
    v58 = (float *)(a1 + 42);
    v59 = (float *)(a2 + 42);
    do
    {
      v60 = (float)(v9 * *(v58 - 3)) + (float)(v10 * *(v59 - 3));
      v61 = (int32x2_t)vadd_f32(vmul_n_f32(*(float32x2_t *)(v58 - 5), v9), vmul_n_f32(*(float32x2_t *)(v59 - 5), v10));
      *(int32x2_t *)(v58 - 5) = v61;
      *(v58 - 3) = v60;
      v62 = (float)(v9 * *v58) + (float)(v10 * *v59);
      v63 = vadd_f32(vmul_n_f32(*(float32x2_t *)(v58 - 2), v9), vmul_n_f32(*(float32x2_t *)(v59 - 2), v10));
      *(float *)v61.i32 = sqrtf(vaddv_f32(vmul_f32(v63, v63)) + (float)(v62 * v62));
      *((float32x2_t *)v58 - 1) = vdiv_f32(v63, (float32x2_t)vdup_lane_s32(v61, 0));
      *v58 = v62 / *(float *)v61.i32;
      v58 += 6;
      v59 += 6;
      --v12;
    }
    while (v12);
  }
  if (v9 <= v10)
    v64 = a2;
  else
    v64 = a1;
  *((_QWORD *)a1 + 32) = *((_QWORD *)v64 + 32);
  v65 = a1[35];
  if ((_DWORD)v65)
  {
    v66 = 0.0;
    do
    {
      v67 = *(float *)v27;
      v27 = (_OWORD *)((char *)v27 + 4);
      v66 = v66 + (float)(v67 * v67);
      --v65;
    }
    while (v65);
  }
  else
  {
    v66 = 0.0;
  }
  result = v22 * (float)(v66 / COERCE_FLOAT(vmul_f32(v19, v19).i32[1]));
  *((float *)a1 + 70) = result;
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_2164EB9AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x2199F9CD4](v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::AudibleEarlyReflection::sPlaneHashWithBucketNormal(Phase::SpatialModeler::AudibleEarlyReflection *a1, float *a2)
{
  float *v3;
  unsigned __int8 v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  signed int v13;
  signed int v14;
  uint64_t v15;
  float v16;
  float v17;

  v3 = (float *)a1;
  if ((v4 & 1) == 0)
  {
    if ((_DWORD)a1)
    {
      *(float *)&Phase::SpatialModeler::AudibleEarlyReflection::sPlaneHashWithBucketNormal(Phase::Vector<float,3ul> const&,Phase::Vector<float,3ul> const&)::invOrientationTolerance = 1.0 / Phase::SpatialModeler::AudibleEarlyReflection::sAerPlaneHashingToleranceFactorOrientationInternal(a1);
    }
  }
  v5 = Phase::SpatialModeler::AudibleEarlyReflection::sAerPlaneHashingToleranceFactorOrientationInternal(a1);
  v6 = v5 * *v3;
  v7 = v5 * v3[1];
  v8 = v5 * v3[2];
  v9 = roundf(v6)
     * *(float *)&Phase::SpatialModeler::AudibleEarlyReflection::sPlaneHashWithBucketNormal(Phase::Vector<float,3ul> const&,Phase::Vector<float,3ul> const&)::invOrientationTolerance;
  v10 = roundf(v7)
      * *(float *)&Phase::SpatialModeler::AudibleEarlyReflection::sPlaneHashWithBucketNormal(Phase::Vector<float,3ul> const&,Phase::Vector<float,3ul> const&)::invOrientationTolerance;
  v11 = *(float *)&Phase::SpatialModeler::AudibleEarlyReflection::sPlaneHashWithBucketNormal(Phase::Vector<float,3ul> const&,Phase::Vector<float,3ul> const&)::invOrientationTolerance
      * roundf(v8);
  v12 = sqrtf((float)((float)(v9 * v9) + (float)(v10 * v10)) + (float)(v11 * v11));
  v13 = llroundf(v7);
  v14 = llroundf(v8);
  v15 = 269431639 * (int)llroundf(v6);
  v16 = (float)((float)(a2[2] * (float)(v11 / v12))
              + (float)((float)(*a2 * (float)(v9 / v12)) + (float)(a2[1] * (float)(v10 / v12))))
      * 1.9117;
  v17 = 0.5;
  if (v16 < 0.0)
    v17 = -0.5;
  return v15 + 93309929 * v13 + 775157 * v14 + 74831 * (int)(float)(v16 + v17);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x2199F9A94](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x2199F9AA0](v13);
  return a1;
}

void sub_2164EBC1C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x2199F9AA0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x2164EBBFCLL);
}

void sub_2164EBC64(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_2164EBD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

BOOL Phase::Controller::SystemAudioIO::IsValidFormat(Phase::Controller::SystemAudioIO *this, AVAudioFormat *a2)
{
  Phase::Controller::SystemAudioIO *v2;
  Phase::Controller::SystemAudioIO *v3;
  double v4;
  _BOOL8 v5;

  v2 = this;
  v3 = v2;
  v5 = v2
    && (-[Phase::Controller::SystemAudioIO sampleRate](v2, "sampleRate"), v4 > 0.0)
    && -[Phase::Controller::SystemAudioIO channelCount](v3, "channelCount") != 0;

  return v5;
}

void sub_2164EBEB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id Phase::Controller::SystemAudioIO::GetOutputChannelLayout(Phase::Controller::SystemAudioIO *this, AVAudioFormat *a2)
{
  Phase::Controller::SystemAudioIO *v2;
  Phase::Controller::SystemAudioIO *v3;
  void *v4;
  void *v5;
  _DWORD *v6;
  unsigned int v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  int v12;
  NSObject *v13;
  const char *v14;
  Phase::Logger *v15;
  uint64_t v16;
  NSObject *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  const void *v26;
  unsigned int v27;
  std::vector<char>::pointer begin;
  std::vector<char> __dst;
  std::vector<char>::value_type __x;
  uint8_t buf[24];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = this;
  v3 = v2;
  if (!v2)
  {
    v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 528));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioIOBase.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 28;
      v14 = "%25s:%-5d Undefined audio output format (AVAudioFormat* is nil).";
LABEL_26:
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x12u);
    }
LABEL_27:
    v5 = 0;
    goto LABEL_43;
  }
  -[Phase::Controller::SystemAudioIO channelLayout](v2, "channelLayout");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    v6 = (_DWORD *)objc_msgSend(v4, "layout");
    v7 = v6[2];
    if (v7 <= 1)
      v7 = 1;
    std::vector<char>::vector(&__dst, 20 * v7 + 12);
    memcpy(__dst.__begin_, v6, 20 * v6[2] + 12);
    Phase::ChannelLayout::GetChannelLayoutChannelDescriptions(&__dst.__begin_, (uint64_t *)buf);
    if (__dst.__begin_)
    {
      __dst.__end_ = __dst.__begin_;
      operator delete(__dst.__begin_);
    }
    v8 = *(void **)buf;
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2);
    if (v9 > 0x40)
      std::terminate();
    if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
    {
      if (v9 <= 1)
        v10 = 1;
      else
        v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2);
      v11 = *(int **)buf;
      while (1)
      {
        v12 = *v11;
        v11 += 5;
        if (v12 != -1)
          goto LABEL_42;
        if (!--v10)
          goto LABEL_19;
      }
    }
    if (*(_QWORD *)&buf[8])
    {
LABEL_19:
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }

  v15 = (Phase::Logger *)-[Phase::Controller::SystemAudioIO channelCount](v3, "channelCount");
  switch((_DWORD)v15)
  {
    case 0:
      v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15) + 528));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioIOBase.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 56;
        v14 = "%25s:%-5d 0 output channels.";
        goto LABEL_26;
      }
      goto LABEL_27;
    case 1:
      v16 = 6553601;
      goto LABEL_29;
    case 2:
      v16 = 6619138;
LABEL_29:
      objc_msgSend(MEMORY[0x24BDB17E8], "layoutWithLayoutTag:", v16);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_43;
  }
  v17 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15) + 528));
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioIOBase.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 61;
    _os_log_impl(&dword_2164CC000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Undefined output channel layout for channel count > 2. Using stereo as a fallback.", buf, 0x12u);
  }
  v18 = -[Phase::Controller::SystemAudioIO channelCount](v3, "channelCount");
  memset(buf, 0, sizeof(buf));
  v19 = std::__allocate_at_least[abi:ne180100]<std::allocator<AudioChannelDescription>>((uint64_t)&buf[16], v18);
  *(_QWORD *)buf = v19;
  *(_QWORD *)&buf[16] = (char *)v19 + 20 * v20;
  v21 = (char *)v19 + 20 * v18;
  v22 = 20 * v18;
  do
  {
    *v19 = 0;
    v19[1] = 0;
    *((_DWORD *)v19 + 4) = 0;
    v19 = (_QWORD *)((char *)v19 + 20);
    v22 -= 20;
  }
  while (v22);
  *(_QWORD *)&buf[8] = v21;
  v23 = *(_QWORD *)buf;
  **(_DWORD **)buf = 1;
  *(_DWORD *)(v23 + 20) = 2;
  v24 = -[Phase::Controller::SystemAudioIO channelCount](v3, "channelCount");
  v25 = v24;
  v26 = *(const void **)buf;
  if (v24 <= 1)
    v27 = 1;
  else
    v27 = v24;
  __x = 0;
  std::vector<char>::vector(&__dst, 20 * v27 + 12, &__x);
  begin = __dst.__begin_;
  *(_QWORD *)__dst.__begin_ = 0;
  *((_DWORD *)begin + 2) = v25;
  if (v25)
    memmove(begin + 12, v26, 20 * v25);
  objc_msgSend(MEMORY[0x24BDB17E8], "layoutWithLayout:", begin);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (__dst.__begin_)
  {
    __dst.__end_ = __dst.__begin_;
    operator delete(__dst.__begin_);
  }
  v8 = *(void **)buf;
  if (*(_QWORD *)buf)
  {
LABEL_42:
    *(_QWORD *)&buf[8] = v8;
    operator delete(v8);
  }
LABEL_43:

  return v5;
}

void sub_2164EC280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::GetRenderedChannels(Phase::Controller::SystemAudioIO *this, AVAudioChannelLayout *a2)
{
  Phase::Controller::SystemAudioIO *v2;
  Phase::Controller::SystemAudioIO *v3;
  _DWORD *v4;
  unsigned int v5;
  int *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t NumActiveChannels;
  unint64_t v14;
  NSObject *v15;
  Phase::ChannelLayout *v16;
  const AudioChannelLayout *v17;
  void *begin;
  std::vector<char> v20;
  _BYTE __p[18];
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = this;
  v3 = v2;
  if (!v2)
    goto LABEL_25;
  v2 = (Phase::Controller::SystemAudioIO *)-[Phase::Controller::SystemAudioIO layout](v2, "layout");
  if (!v2)
    goto LABEL_25;
  v4 = (_DWORD *)-[Phase::Controller::SystemAudioIO layout](v3, "layout");
  v5 = v4[2];
  if (v5 <= 1)
    v5 = 1;
  std::vector<char>::vector(&v20, 20 * v5 + 12);
  memcpy(v20.__begin_, v4, 20 * v4[2] + 12);
  Phase::ChannelLayout::GetChannelLayoutChannelDescriptions(&v20.__begin_, (uint64_t *)__p);
  if (v20.__begin_)
  {
    v20.__end_ = v20.__begin_;
    operator delete(v20.__begin_);
  }
  v6 = *(int **)__p;
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 2);
  if (v7 > 0x40)
    std::terminate();
  if (*(_QWORD *)&__p[8] == *(_QWORD *)__p)
  {
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    if (v7 <= 1)
      v7 = 1;
    do
    {
      v10 = *v6;
      v6 += 5;
      if ((v10 + 1) >= 2)
        v9 |= 1 << v8;
      ++v8;
    }
    while (v7 != v8);
  }
  v11 = (_DWORD *)-[Phase::Controller::SystemAudioIO layout](v3, "layout");
  v12 = v11[2];
  if (v12 <= 1)
    v12 = 1;
  std::vector<char>::vector(&v20, 20 * v12 + 12);
  memcpy(v20.__begin_, v11, 20 * v11[2] + 12);
  NumActiveChannels = (int)Phase::ChannelLayout::GetNumActiveChannels((int **)&v20, v9);
  v2 = *(Phase::Controller::SystemAudioIO **)__p;
  v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 2);
  if (v20.__begin_)
  {
    v20.__end_ = v20.__begin_;
    operator delete(v20.__begin_);
    v2 = *(Phase::Controller::SystemAudioIO **)__p;
  }
  if (v14 == NumActiveChannels)
    v9 = -1;
  if (v2)
  {
    *(_QWORD *)&__p[8] = v2;
    operator delete(v2);
  }
  if (!v9)
  {
LABEL_25:
    v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v2)
                                                                                        + 528)));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = (Phase::ChannelLayout *)-[Phase::Controller::SystemAudioIO layout](v3, "layout");
      Phase::ChannelLayout::GetStringDescription(v16, v17);
      if (SHIBYTE(v20.__end_cap_.__value_) >= 0)
        begin = &v20;
      else
        begin = v20.__begin_;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = "AudioIOBase.mm";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 104;
      v22 = 2080;
      v23 = begin;
      _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d System output layout does not contain any valid channel description.\n%s", __p, 0x1Cu);
      if (SHIBYTE(v20.__end_cap_.__value_) < 0)
        operator delete(v20.__begin_);
    }

    v9 = 0;
  }

  return v9;
}

void sub_2164EC5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t std::array<Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration,2ul>::array(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = 0;
  v3 = 0;
  do
  {
    v4 = a1 + 88 * v3;
    *(_BYTE *)v4 = 0;
    *(_OWORD *)(v4 + 4) = 0u;
    v5 = v2;
    *(_OWORD *)(v4 + 20) = 0u;
    *(_OWORD *)(v4 + 36) = 0u;
    *(_OWORD *)(v4 + 52) = 0u;
    *(_DWORD *)(v4 + 68) = 0;
    caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(v4 + 72));
    *(_QWORD *)(a1 + 88 * v3 + 80) = 0;
    v2 = 1;
    v3 = 1;
  }
  while ((v5 & 1) == 0);
  return a1;
}

void sub_2164EC684(_Unwind_Exception *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v2;
  v6 = v1 + 88 * v3;
  std::unique_ptr<Phase::Controller::SpeechDetector>::reset[abi:ne180100]((Phase::Controller::SpeechDetector::SpeechDetectorImpl ***)(v6 + 64), 0);

  if ((v4 & 1) == 0)
  {
    v7 = 88 * v3;
    do
    {
      v8 = v1 + v7;
      v9 = *(_QWORD *)(v1 + v7 - 8);
      *(_QWORD *)(v1 + v7 - 8) = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      std::unique_ptr<Phase::Controller::SpeechDetector>::reset[abi:ne180100]((Phase::Controller::SpeechDetector::SpeechDetectorImpl ***)(v8 - 24), 0);

      v7 -= 88;
    }
    while (v7);
  }
  _Unwind_Resume(a1);
}

Phase::Controller::SpeechDetector::SpeechDetectorImpl ***std::unique_ptr<Phase::Controller::SpeechDetector>::reset[abi:ne180100](Phase::Controller::SpeechDetector::SpeechDetectorImpl ***result, Phase::Controller::SpeechDetector::SpeechDetectorImpl **a2)
{
  Phase::Controller::SpeechDetector::SpeechDetectorImpl **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<Phase::Controller::SpeechDetector::SpeechDetectorImpl>::reset[abi:ne180100](v2, 0);
    std::unique_ptr<Phase::Controller::SpeechDetector::SpeechDetectorImpl>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void Phase::Controller::SystemAudioIO::AudioIOBase::GetRenderedChannelLayout(Phase::Controller::SystemAudioIO::AudioIOBase *this@<X0>, std::vector<char> *a2@<X8>)
{
  void *v4;
  std::vector<char> *v5;
  std::vector<char>::pointer begin;
  Phase::ChannelLayout *v7;
  const AudioChannelLayout *v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  AVAudioChannelLayout *v12;
  unint64_t RenderedChannels;
  char *v14;
  NSObject *v15;
  NSObject *v16;
  Phase::ChannelLayout *v17;
  const AudioChannelLayout *v18;
  void **v19;
  Phase::Logger *v20;
  NSObject *v21;
  _DWORD *v22;
  int v23;
  NSObject *v24;
  NSObject *v25;
  void *__p;
  char v27;
  std::vector<char> v28;
  _BYTE __x[18];
  __int16 v30;
  Phase::Controller::SystemAudioIO::AudioIOBase *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOBase *))(*(_QWORD *)this + 88))(this);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  __x[0] = 0;
  v5 = std::vector<char>::vector(&v28, 0x20uLL, __x);
  begin = v28.__begin_;
  *(_QWORD *)v28.__begin_ = 6619138;
  *((_DWORD *)begin + 2) = 0;
  if (!v4 || (v5 = (std::vector<char> *)objc_msgSend(v4, "layout")) == 0)
  {
    v15 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v5) + 528));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__x = 136315394;
      *(_QWORD *)&__x[4] = "AudioIOBase.mm";
      *(_WORD *)&__x[12] = 1024;
      *(_DWORD *)&__x[14] = 163;
      _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Undefined hardware output channel layout, falling back to stereo.", __x, 0x12u);
    }
    goto LABEL_20;
  }
  v7 = (Phase::ChannelLayout *)objc_msgSend(v4, "layout");
  v9 = Phase::ChannelLayout::IsLayoutSupported(v7, v8);
  if ((v9 & 1) == 0)
  {
    v16 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v9)
                                                                                        + 528)));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = (Phase::ChannelLayout *)objc_msgSend(v4, "layout");
      Phase::ChannelLayout::GetStringDescription(v17, v18);
      v19 = v27 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)__x = 136315650;
      *(_QWORD *)&__x[4] = "AudioIOBase.mm";
      *(_WORD *)&__x[12] = 1024;
      *(_DWORD *)&__x[14] = 168;
      v30 = 2080;
      v31 = (Phase::Controller::SystemAudioIO::AudioIOBase *)v19;
      _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported hardware output channel layout, falling back to stereo.\n%s", __x, 0x1Cu);
      if (v27 < 0)
        operator delete(__p);
    }

    goto LABEL_20;
  }
  v10 = (_DWORD *)objc_msgSend(v4, "layout");
  v11 = v10[2];
  if (v11 <= 1)
    v11 = 1;
  std::vector<char>::vector((std::vector<char> *)__x, 20 * v11 + 12);
  memcpy(*(void **)__x, v10, 20 * v10[2] + 12);
  RenderedChannels = Phase::Controller::SystemAudioIO::GetRenderedChannels((Phase::Controller::SystemAudioIO *)v4, v12);
  Phase::ChannelLayout::ReduceLayout((uint64_t)__x, RenderedChannels, a2);
  if (*(_QWORD *)__x)
  {
    *(_QWORD *)&__x[8] = *(_QWORD *)__x;
    operator delete(*(void **)__x);
  }
  if (!Phase::ChannelLayout::IsLayoutSupported((unsigned int **)a2))
  {
    v14 = a2->__begin_;
    if (a2->__begin_)
    {
      a2->__end_ = v14;
      operator delete(v14);
    }
LABEL_20:
    v20 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOBase *))(*(_QWORD *)this + 80))(this);
    if ((_DWORD)v20 == 1)
    {
      v24 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v20) + 384));
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__x = 136315650;
        *(_QWORD *)&__x[4] = "AudioIOBase.mm";
        *(_WORD *)&__x[12] = 1024;
        *(_DWORD *)&__x[14] = 201;
        v30 = 2048;
        v31 = this;
        _os_log_impl(&dword_2164CC000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: Output layout not supported.\n                                    Falling back to mono.\n                                    Make sure that a valid speaker layout is set for the device in Audio and MIDI settings.", __x, 0x1Cu);
      }
      __x[0] = 0;
      std::vector<char>::vector(a2, 0x20uLL, __x);
      v22 = a2->__begin_;
      v23 = 6553601;
    }
    else if ((_DWORD)v20)
    {
      v25 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v20) + 384));
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__x = 136315650;
        *(_QWORD *)&__x[4] = "AudioIOBase.mm";
        *(_WORD *)&__x[12] = 1024;
        *(_DWORD *)&__x[14] = 212;
        v30 = 2048;
        v31 = this;
        _os_log_impl(&dword_2164CC000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: Output layout not supported.\n                                    Falling back to stereo over the first 2 output channels.\n                                    Make sure that a valid speaker layout is set for the device in Audio and MIDI settings.", __x, 0x1Cu);
      }
      __x[0] = 0;
      std::vector<char>::vector(a2, 0x20uLL, __x);
      v22 = a2->__begin_;
      v23 = 6619138;
    }
    else
    {
      v21 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v20) + 384));
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__x = 136315650;
        *(_QWORD *)&__x[4] = "AudioIOBase.mm";
        *(_WORD *)&__x[12] = 1024;
        *(_DWORD *)&__x[14] = 190;
        v30 = 2048;
        v31 = this;
        _os_log_impl(&dword_2164CC000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: Output layout not supported, with 0 output channels.", __x, 0x1Cu);
      }
      __x[0] = 0;
      std::vector<char>::vector(a2, 0x20uLL, __x);
      v22 = a2->__begin_;
      v23 = -65536;
    }
    *v22 = v23;
    v22[1] = 0;
    v22[2] = 0;
  }
  if (v28.__begin_)
  {
    v28.__end_ = v28.__begin_;
    operator delete(v28.__begin_);
  }

}

void sub_2164ECBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  void *v16;
  void *v17;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOBase::BeginRouteChange(Phase::Controller::SystemAudioIO::AudioIOBase *this)
{
  uint64_t InstancePtr;
  Phase::Logger *v3;
  Phase::Logger *v4;
  NSObject *v5;
  NSObject *v6;
  Phase::Logger *v7;
  int v8;
  Phase::Logger *v9;
  Phase::Logger *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  std::logic_error *exception;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  InstancePtr = Phase::Logger::GetInstancePtr(this);
  v3 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 528));
  v4 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v3);
  if (*((_BYTE *)v4 + 536))
  {
    v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                       + 528)));
    v6 = v5;
    if ((unint64_t)v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      LOWORD(v15) = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v6, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v3, "Phase_BeginRouteChange", "Begin route change", (uint8_t *)&v15, 2u);
    }

  }
  v7 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOBase *))(*(_QWORD *)this + 64))(this);
  v8 = *((_DWORD *)this + 82);
  if ((_DWORD)v7)
  {
    if (v8)
    {
      v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7) + 528));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = 136315394;
        v16 = "AudioIOBase.mm";
        v17 = 1024;
        v18 = 232;
        _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: mRouteChangeResumeSemaphore == 0U is false.", (uint8_t *)&v15, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "PRECONDITION: mRouteChangeResumeSemaphore == 0U is false.");
    }
    *((_DWORD *)this + 82) = 1;
    *((_QWORD *)this + 16) = *((_QWORD *)this + 14);
    *((_BYTE *)this + 136) = *((_BYTE *)this + 120);
    (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOBase *))(*(_QWORD *)this + 56))(this);
  }
  else if (v8)
  {
    *((_DWORD *)this + 82) = v8 + 1;
  }
  (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOBase *))(*(_QWORD *)this + 32))(this);
  v9 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOBase *))(*(_QWORD *)this + 24))(this);
  v10 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v9);
  if (*((_BYTE *)v10 + 536))
  {
    v11 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10)
                                                                                        + 528)));
    v12 = v11;
    if ((unint64_t)v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
    {
      LOWORD(v15) = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v12, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v3, "Phase_BeginRouteChange", "Begin route change done", (uint8_t *)&v15, 2u);
    }

  }
}

void sub_2164ECEB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOBase::EndRouteChange(Phase::Controller::SystemAudioIO::AudioIOBase *this)
{
  uint64_t InstancePtr;
  Phase::Logger *v3;
  Phase::Logger *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  Phase::Logger *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  Phase::Logger *v18;
  Phase::Logger *v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  Phase::Logger *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  unsigned int *v27;
  unsigned int v29;
  Phase::Logger *v30;
  NSObject *v31;
  NSObject *v32;
  int v33;
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  InstancePtr = Phase::Logger::GetInstancePtr(this);
  v3 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 528));
  v4 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v3);
  if (*((_BYTE *)v4 + 536))
  {
    v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                       + 528)));
    v6 = v5;
    if ((unint64_t)v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      LOWORD(v33) = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v6, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v3, "Phase_EndRouteChange", "End route change", (uint8_t *)&v33, 2u);
    }

  }
  v7 = *((_DWORD *)this + 82);
  if (v7 == 1)
  {
    if (*((_BYTE *)this + 136))
    {
      v8 = mach_absolute_time();
      v9 = *((_QWORD *)this + 16);
      v10 = (*(double (**)(Phase::Controller::SystemAudioIO::AudioIOBase *))(*(_QWORD *)this + 104))(this);
      v11 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOBase *))(*(_QWORD *)this + 120))(this);
      v12 = ((double)(uint64_t)(v8 - v9) * 0.0000000416666667 * v10);
      v13 = vcvtpd_u64_f64(256.0 / (double)v11);
      v14 = vcvtad_u64_f64((double)v12 / (double)v11);
      if (v12 <= 0x100)
        v12 = 256;
      if (v13 <= v14)
        v13 = v14;
      v15 = v13 * (_DWORD)v11;
      if ((_DWORD)v11)
        v16 = v15;
      else
        v16 = v12;
      v17 = Phase::Logger::GetInstancePtr(v11);
      v18 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(v17 + 528));
      v19 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v18);
      if (*((_BYTE *)v19 + 536))
      {
        v20 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v19)
                                                                                            + 528)));
        v21 = v20;
        if ((unint64_t)v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
        {
          v33 = 67109120;
          LODWORD(v34) = v16;
          _os_signpost_emit_with_name_impl(&dword_2164CC000, v21, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v18, "Phase_FlushFrames", "End route change: start flush %i frames", (uint8_t *)&v33, 8u);
        }

      }
      if ((_DWORD)v16)
      {
        v22 = v16;
        do
        {
          Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(**(_QWORD **)(**((_QWORD **)this + 1)
                                                                                          + 696)
                                                                            + 75096));
          --v22;
        }
        while (v22);
      }
      v23 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v19);
      if (*((_BYTE *)v23 + 536))
      {
        v24 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v23)
                                                                                            + 528)));
        v25 = v24;
        if ((unint64_t)v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v24))
        {
          LOWORD(v33) = 0;
          _os_signpost_emit_with_name_impl(&dword_2164CC000, v25, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v18, "Phase_EndRouteChange", "End route change: end flush frames", (uint8_t *)&v33, 2u);
        }

      }
      v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v23) + 528));
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v33 = 136315650;
        v34 = "AudioIOBase.mm";
        v35 = 1024;
        v36 = 336;
        v37 = 1024;
        v38 = v16;
        _os_log_impl(&dword_2164CC000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Flushed %i audio frames.", (uint8_t *)&v33, 0x18u);
      }
      *((_QWORD *)this + 16) = v8;
      *((_BYTE *)this + 136) = 1;
    }
    v4 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOBase *))(*(_QWORD *)this + 40))(this);
    v7 = *((_DWORD *)this + 82);
  }
  if (v7)
    *((_DWORD *)this + 82) = v7 - 1;
  v27 = (unsigned int *)((char *)this + 144);
  if (atomic_load((unsigned int *)this + 36))
  {
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
  }
  v30 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v4);
  if (*((_BYTE *)v30 + 536))
  {
    v31 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v30)
                                                                                        + 528)));
    v32 = v31;
    if ((unint64_t)v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v31))
    {
      LOWORD(v33) = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v32, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v3, "Phase_EndRouteChange", "End route change done", (uint8_t *)&v33, 2u);
    }

  }
}

void Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures(Phase::Controller::SystemAudioIO::AudioIOBase *this, char a2)
{
  uint64_t InstancePtr;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  char v8;
  char v9;
  char *v10;
  char v11;
  char v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  Phase::Logger *v16;
  char *v17;
  char *v18;
  double v19;
  double v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Phase::Logger *v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  NSObject *v33;
  int v34;
  _BYTE buf[12];
  __int16 v36;
  int v37;
  __int16 v38;
  _BYTE v39[14];
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  InstancePtr = Phase::Logger::GetInstancePtr(this);
  v5 = 0;
  v6 = *(_DWORD *)(InstancePtr + 1528);
  v7 = (char *)this + 152;
  v8 = a2 ^ 1;
  v9 = 1;
  v10 = "audioio-out";
  do
  {
    v11 = v9;
    if (((v6 >> v5) & 1) != 0)
      v12 = v8;
    else
      v12 = 1;
    if ((v12 & 1) != 0 || !v7[88 * v5])
      goto LABEL_22;
    v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)InstancePtr)
                                                                                        + 528)));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(*(id *)&v7[88 * v5 + 16], "description");
      v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v15 = objc_msgSend(v14, "cStringUsingEncoding:", 4);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "AudioIOBase.mm";
      v36 = 1024;
      v37 = 351;
      v38 = 2048;
      *(_QWORD *)v39 = this;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)&v39[10] = v5;
      v40 = 2080;
      v41 = v15;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: element[%d] format = %s", buf, 0x2Cu);

    }
    v17 = &v7[88 * v5];
    v19 = *((double *)v17 + 3);
    v18 = v17 + 24;
    v20 = v19;
    if (!*((_DWORD *)v18 + 7) || v20 <= 0.0)
    {
      v31 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v16) + 528));
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        v32 = *(_DWORD *)&v7[88 * v5 + 4];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AudioIOBase.mm";
        v36 = 1024;
        v37 = 369;
        v38 = 1024;
        *(_DWORD *)v39 = v32;
        _os_log_impl(&dword_2164CC000, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio[%d]: ERROR: invalid capture format!", buf, 0x18u);
      }
LABEL_22:
      InstancePtr = (uint64_t)Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration::StopCaptures(&v7[88 * v5]);
      goto LABEL_23;
    }
    Phase::Logger::CreateAudioCapturer((Phase::Logger *)v10, v18, buf);
    v21 = &v7[88 * v5];
    v24 = *((_QWORD *)v21 + 10);
    v23 = v21 + 80;
    v22 = v24;
    v25 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    *v23 = v25;
    if (v24)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      v26 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      v25 = *v23;
    }
    if (v25)
    {
      v27 = (Phase::Logger *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 64))(v25, 10000);
      v28 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v27)
                                                                                          + 528)));
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        v29 = *(_DWORD *)&v7[88 * v5 + 4];
        v30 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v23 + 56))(*v23);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "AudioIOBase.mm";
        v36 = 1024;
        v37 = 377;
        v38 = 1024;
        *(_DWORD *)v39 = v29;
        *(_WORD *)&v39[4] = 2080;
        *(_QWORD *)&v39[6] = v30;
        _os_log_impl(&dword_2164CC000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio[%d]: writing capture to %s", buf, 0x22u);
      }

    }
    else
    {
      v33 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 528));
      InstancePtr = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)InstancePtr)
      {
        v34 = *(_DWORD *)&v7[88 * v5 + 4];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AudioIOBase.mm";
        v36 = 1024;
        v37 = 381;
        v38 = 1024;
        *(_DWORD *)v39 = v34;
        _os_log_impl(&dword_2164CC000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio[%d]: Error: could not create capture file!", buf, 0x18u);
      }
    }
LABEL_23:
    v9 = 0;
    v10 = "audioio-in";
    v5 = 1;
  }
  while ((v11 & 1) != 0);
}

void sub_2164ED6C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration::StopCaptures(_QWORD *this)
{
  _QWORD *v1;
  NSObject *v2;
  int v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (this[10])
  {
    v1 = this;
    v2 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)this) + 528));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *((_DWORD *)v1 + 1);
      v4 = 136315650;
      v5 = "AudioIOBase.mm";
      v6 = 1024;
      v7 = 389;
      v8 = 1024;
      v9 = v3;
      _os_log_impl(&dword_2164CC000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio[%d]: stopping capture", (uint8_t *)&v4, 0x18u);
    }
    this = (_QWORD *)v1[10];
    v1[10] = 0;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration::WriteCaptureBufferList(uint64_t this, const AudioTimeStamp *a2, uint64_t a3, const AudioBufferList *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(this + 80);
  if (v4)
  {
    (*(void (**)(_QWORD, uint64_t, const AudioBufferList *, _QWORD))(*(_QWORD *)v4 + 24))(*(_QWORD *)(this + 80), a3, a4, 0);
    return (*(uint64_t (**)(uint64_t, UInt64, uint64_t, uint64_t))(*(_QWORD *)v4 + 72))(v4, a2->mHostTime, (uint64_t)a2->mSampleTime, a3);
  }
  return this;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AudioChannelDescription>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(20 * a2);
}

uint64_t std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    caulk::pooled_semaphore_mutex::_unlock(*(caulk::pooled_semaphore_mutex **)a1);
  return a1;
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::AudioIOPlatformAdapter(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  Phase::Logger *v13;
  NSObject *v14;
  _BYTE __p[28];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  *(_QWORD *)a1 = off_24D5776D0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = xmmword_2166F7500;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  std::array<Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration,2ul>::array(a1 + 152);
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)a1 = &off_24D577778;
  *(double *)(a1 + 336) = a4;
  v8 = v7;
  *(_QWORD *)(a1 + 344) = v8;
  *(_WORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  if (_MergedGlobals_13 != -1)
    dispatch_once(&_MergedGlobals_13, &__block_literal_global);
  if (off_254E44640)
  {
    v9 = off_254E44640();
    v10 = _MergedGlobals_13;
    *(_QWORD *)(a1 + 440) = v9;
    if (v10 != -1)
      dispatch_once(&_MergedGlobals_13, &__block_literal_global);
  }
  else
  {
    v9 = 0;
    *(_QWORD *)(a1 + 440) = 0;
  }
  if (off_254E44668)
    off_254E44668(v9, 0);
  v11 = *(_QWORD *)(a1 + 440);
  v12 = operator new(8uLL);
  *v12 = v11;
  *(_QWORD *)&__p[8] = v12 + 1;
  *(_QWORD *)&__p[16] = v12 + 1;
  *(_QWORD *)__p = v12;
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_42);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    v13 = (Phase::Logger *)AudioIssueDetectorLibraryLoader(void)::libSym(8, __p);
    v12 = *(_QWORD **)__p;
    *(_QWORD *)(a1 + 424) = v13;
    if (!v12)
    {
      if (v13)
        goto LABEL_19;
      goto LABEL_17;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 424) = 0;
  }
  *(_QWORD *)&__p[8] = v12;
  operator delete(v12);
  v13 = *(Phase::Logger **)(a1 + 424);
  if (v13)
    goto LABEL_19;
LABEL_17:
  v14 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v13) + 528));
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = "AudioIOPlatformAdapter.mm";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = 41;
    *(_WORD *)&__p[18] = 2048;
    *(_QWORD *)&__p[20] = a1;
    _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: failed to create AID", __p, 0x1Cu);
  }
LABEL_19:

  return a1;
}

void sub_2164EDB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void *v11;
  void *v13;

  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100](v10 + 400);
  v13 = *(void **)(v10 + 376);
  if (v13)
  {
    *(_QWORD *)(v10 + 384) = v13;
    operator delete(v13);
  }

  Phase::Controller::SystemAudioIO::AudioIOBase::~AudioIOBase((Phase::Controller::SystemAudioIO::AudioIOBase *)v10);
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOBase::~AudioIOBase(Phase::Controller::SystemAudioIO::AudioIOBase *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v2 = 0;
  *(_QWORD *)this = off_24D5776D0;
  do
  {
    v3 = (char *)this + v2;
    v4 = *(_QWORD *)((char *)this + v2 + 320);
    *(_QWORD *)((char *)this + v2 + 320) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    std::unique_ptr<Phase::Controller::SpeechDetector>::reset[abi:ne180100]((Phase::Controller::SpeechDetector::SpeechDetectorImpl ***)v3 + 38, 0);

    v2 -= 88;
  }
  while (v2 != -176);
}

void Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::~AudioIOPlatformAdapter(id *this)
{
  id v2;
  id v3;
  id v4;

  *this = &off_24D577778;
  Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::Uninitialize((Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *)this);
  v2 = this[53];
  if (v2)
  {
    if (AudioIssueDetectorLibraryLoader(void)::once != -1)
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_42);
    if (off_254E41A20)
      off_254E41A20(v2);
    this[53] = 0;
  }
  v3 = this[55];
  if (v3)
  {
    if (_MergedGlobals_13 != -1)
      dispatch_once(&_MergedGlobals_13, &__block_literal_global);
    if (off_254E44698)
      off_254E44698(v3);
    this[55] = 0;
  }
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 50));
  v4 = this[47];
  if (v4)
  {
    this[48] = v4;
    operator delete(v4);
  }

  Phase::Controller::SystemAudioIO::AudioIOBase::~AudioIOBase((Phase::Controller::SystemAudioIO::AudioIOBase *)this);
}

{
  Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::~AudioIOPlatformAdapter(this);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::EnableBus(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *this, unsigned int a2, char a3)
{
  uint64_t result;
  char *v6;
  char *v7;
  char v8;
  char v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Phase::Logger *v13;
  NSObject *v14;
  int v15;
  const char *v16;
  NSObject *v17;
  _BOOL4 v18;
  int v19;
  const char *v20;
  char v21;
  BOOL v22;
  char v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  unsigned int v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v23 = a3;
  if (*((_BYTE *)this + 352))
    return 4294956447;
  v6 = (char *)this + 88 * a2;
  v9 = v6[152];
  v7 = v6 + 152;
  v8 = v9;
  *v7 = a3;
  v10 = objc_opt_respondsToSelector();
  if ((v10 & 1) != 0)
  {
    v22 = a2 == 1;
    objc_msgSend((id)objc_opt_class(), "instanceMethodSignatureForSelector:", sel_enableIO_direction_);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCE98], "invocationWithMethodSignature:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setTarget:", *((_QWORD *)this + 43));
    objc_msgSend(v12, "setSelector:", sel_enableIO_direction_);
    objc_msgSend(v12, "setArgument:atIndex:", &v23, 2);
    objc_msgSend(v12, "setArgument:atIndex:", &v22, 3);
    objc_msgSend(v12, "invoke");
    v21 = 0;
    v13 = (Phase::Logger *)objc_msgSend(v12, "getReturnValue:", &v21);
    if (!v21)
    {
      *v7 = v8;
      v14 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v13) + 528));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = *v7;
        if (v23)
          v16 = "enable";
        else
          v16 = "disable";
        *(_DWORD *)buf = 136316418;
        v25 = "AudioIOPlatformAdapter.mm";
        v26 = 1024;
        v27 = 101;
        v28 = 2048;
        v29 = this;
        v30 = 2080;
        v31 = v16;
        v32 = 1024;
        v33 = a2;
        v34 = 1024;
        v35 = v15;
        _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: error: could not %s bus %d, final state %d", buf, 0x32u);
      }
    }

  }
  v17 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v10) + 528));
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v18)
  {
    v19 = *v7;
    v20 = "enabled";
    v25 = "AudioIOPlatformAdapter.mm";
    *(_DWORD *)buf = 136316162;
    v26 = 1024;
    if (!v19)
      v20 = "disabled";
    v27 = 106;
    v28 = 2048;
    v29 = this;
    v30 = 2080;
    v31 = v20;
    v32 = 1024;
    v33 = a2;
    _os_log_impl(&dword_2164CC000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: %s bus %d for Audio IO", buf, 0x2Cu);
    return 0;
  }
  return result;
}

void sub_2164EE010(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::Initialize(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *this)
{
  void *v1;
  uint64_t v2;
  Phase::Logger *v5;
  NSObject *v6;
  uint64_t v7;
  Phase::Controller::SystemAudioIO *v8;
  AVAudioFormat *v9;
  uint64_t v10;
  Phase::Logger *v11;
  NSObject *v12;
  uint64_t v13;
  __int128 v14;
  int16x8_t v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  Phase::ChannelLayout *v19;
  const AudioChannelLayout *v20;
  const char *p_p;
  Phase::Logger *v22;
  uint64_t v23;
  Phase::Controller::SystemAudioIO *v24;
  AVAudioChannelLayout *v25;
  _DWORD *v26;
  unsigned int v27;
  unint64_t v28;
  void **v29;
  Phase::Logger *v30;
  unint64_t v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  Phase::Controller::SystemAudioIO *v42;
  AVAudioFormat *v43;
  _BOOL8 IsValidFormat;
  uint64_t v45;
  Phase::Logger *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Phase::Logger *v50;
  int v51;
  NSObject *v52;
  id v53;
  uint64_t v54;
  NSObject *v55;
  int v56;
  uint64_t v57;
  NSObject *v58;
  int v59;
  id v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  __int128 v64;
  int16x8_t v65;
  void **v66;
  Phase::ChannelLayout *v67;
  const AudioChannelLayout *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  Phase::Logger *v72;
  int v73;
  NSObject *v74;
  uint64_t v75;
  void *v76;
  _QWORD v77[5];
  _QWORD aBlock[5];
  void *v79;
  char v80;
  void *v81[2];
  char v82;
  void *__p;
  char v84;
  __int128 v85;
  int16x8_t v86;
  uint64_t v87;
  void *v88[2];
  char v89;
  _BYTE buf[18];
  __int16 v91;
  Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *v92;
  __int16 v93;
  _BYTE v94[18];
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 352))
    return 0;
  if (*((_BYTE *)this + 240))
  {
    v5 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *, uint64_t))(*(_QWORD *)this + 144))(this, 1);
    if ((_DWORD)v5)
    {
      v2 = (uint64_t)v5;
      v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v5) + 528));
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        return v2;
      v7 = *((_QWORD *)this + 43);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "AudioIOPlatformAdapter.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 129;
      v91 = 2048;
      v92 = this;
      v93 = 2080;
      *(_QWORD *)v94 = "input";
      *(_WORD *)&v94[8] = 2048;
      *(_QWORD *)&v94[10] = v7;
LABEL_32:
      _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: error: could not get %s HW format from platform@%p, initialize failed!", buf, 0x30u);
      return v2;
    }
    v8 = (Phase::Controller::SystemAudioIO *)*((id *)this + 32);
    if (!Phase::Controller::SystemAudioIO::IsValidFormat(v8, v9))
      std::terminate();
    objc_msgSend(*((id *)this + 43), "bufferFrameSize");
    -[Phase::Controller::SystemAudioIO channelCount](v8, "channelCount");
    std::__optional_destruct_base<CA::AudioBuffers,false>::reset[abi:ne180100]((uint64_t)this + 400);
    v10 = ExtendedAudioBufferList_Create();
    v11 = CA::AudioBuffers::AudioBuffers((Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *)((char *)this + 400), v10);
    *((_BYTE *)this + 408) = 1;
    v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11)
                                                                                        + 528)));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (v8)
      {
        v13 = -[Phase::Controller::SystemAudioIO streamDescription](v8, "streamDescription");
        v14 = *(_OWORD *)v13;
        v15 = *(int16x8_t *)(v13 + 16);
        v87 = *(_QWORD *)(v13 + 32);
        v85 = v14;
        v86 = v15;
        CA::StreamDescription::AsString((CA::StreamDescription *)&v85, (uint64_t)v88, v15);
        if (v89 >= 0)
          v16 = (const char *)v88;
        else
          v16 = (const char *)v88[0];
      }
      else
      {
        v16 = "invalid";
      }
      -[Phase::Controller::SystemAudioIO channelLayout](v8, "channelLayout");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v17, "layout");
      if (v18)
      {
        -[Phase::Controller::SystemAudioIO channelLayout](v8, "channelLayout");
        v1 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = (Phase::ChannelLayout *)objc_msgSend(v1, "layout");
        Phase::ChannelLayout::GetStringDescription(v19, v20);
        if (v84 >= 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
      }
      else
      {
        p_p = "None";
      }
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "AudioIOPlatformAdapter.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 146;
      v91 = 2048;
      v92 = this;
      v93 = 2080;
      *(_QWORD *)v94 = v16;
      *(_WORD *)&v94[8] = 2080;
      *(_QWORD *)&v94[10] = p_p;
      _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: initialize: input asbd <%s>, channel layout: \n%s", buf, 0x30u);
      if (v18)
      {
        if (v84 < 0)
          operator delete(__p);

      }
      if (v8 && v89 < 0)
        operator delete(v88[0]);
    }

  }
  if (*((_BYTE *)this + 152))
  {
    v22 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *, _QWORD))(*(_QWORD *)this + 144))(this, 0);
    v2 = (uint64_t)v22;
    if ((_DWORD)v22)
    {
      v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v22) + 528));
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        return v2;
      v23 = *((_QWORD *)this + 43);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "AudioIOPlatformAdapter.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 158;
      v91 = 2048;
      v92 = this;
      v93 = 2080;
      *(_QWORD *)v94 = "output";
      *(_WORD *)&v94[8] = 2048;
      *(_QWORD *)&v94[10] = v23;
      goto LABEL_32;
    }
    (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *))(*(_QWORD *)this + 88))(this);
    v24 = (Phase::Controller::SystemAudioIO *)objc_claimAutoreleasedReturnValue();
    *((_QWORD *)this + 45) = Phase::Controller::SystemAudioIO::GetRenderedChannels(v24, v25);
    if (v24)
    {
      v26 = (_DWORD *)-[Phase::Controller::SystemAudioIO layout](v24, "layout");
      v27 = v26[2];
      if (v27 <= 1)
        v27 = 1;
      std::vector<char>::vector((std::vector<char> *)buf, 20 * v27 + 12);
      memcpy(*(void **)buf, v26, 20 * v26[2] + 12);
      *((_DWORD *)this + 92) = Phase::ChannelLayout::GetNumActiveChannels((int **)buf, *((_QWORD *)this + 45));
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
    }
    else
    {
      *((_DWORD *)this + 92) = 0;
    }
    v28 = 0;
    v29 = (void **)((char *)this + 376);
    *((_QWORD *)this + 48) = *((_QWORD *)this + 47);
    while (1)
    {
      v30 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *))(*(_QWORD *)this + 80))(this);
      if (v28 >= v30)
        break;
      if (((*((_QWORD *)this + 45) >> v28) & 1) != 0)
      {
        v32 = (char *)*((_QWORD *)this + 48);
        v31 = *((_QWORD *)this + 49);
        if ((unint64_t)v32 >= v31)
        {
          v34 = (char *)*v29;
          v35 = (v32 - (_BYTE *)*v29) >> 2;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v37 = v31 - (_QWORD)v34;
          if (v37 >> 1 > v36)
            v36 = v37 >> 1;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
            v38 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 392, v38);
            v34 = (char *)*((_QWORD *)this + 47);
            v32 = (char *)*((_QWORD *)this + 48);
          }
          else
          {
            v39 = 0;
          }
          v40 = &v39[4 * v35];
          *(_DWORD *)v40 = v28;
          v33 = v40 + 4;
          while (v32 != v34)
          {
            v41 = *((_DWORD *)v32 - 1);
            v32 -= 4;
            *((_DWORD *)v40 - 1) = v41;
            v40 -= 4;
          }
          *((_QWORD *)this + 47) = v40;
          *((_QWORD *)this + 48) = v33;
          *((_QWORD *)this + 49) = &v39[4 * v38];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_DWORD *)v32 = v28;
          v33 = v32 + 4;
        }
        *((_QWORD *)this + 48) = v33;
      }
      ++v28;
    }
    if (*((_DWORD *)this + 92) == (uint64_t)(*((_QWORD *)this + 48) - *((_QWORD *)this + 47)) >> 2)
    {
      v42 = (Phase::Controller::SystemAudioIO *)*((id *)this + 21);
      IsValidFormat = Phase::Controller::SystemAudioIO::IsValidFormat(v42, v43);
      if (IsValidFormat)
      {
        v45 = *((_QWORD *)this + 55);
        if (v45)
          AudioStatisticsStartReporter(v45);
        v46 = (Phase::Logger *)*((_QWORD *)this + 53);
        if (!v46)
          goto LABEL_83;
        AudioIssueDetectorClientReset((uint64_t)v46);
        v47 = *((_QWORD *)this + 53);
        std::string::basic_string[abi:ne180100]<0>(buf, "phase-spatialout");
        v48 = -[Phase::Controller::SystemAudioIO streamDescription](v42, "streamDescription");
        v49 = (*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *))(*(_QWORD *)this + 112))(this);
        v50 = (Phase::Logger *)AudioIssueDetectorClientSetNodeFormatWithDirection(v47, (uint64_t)buf, v48, v49);
        v51 = (int)v50;
        if (SBYTE3(v92) < 0)
          operator delete(*(void **)buf);
        if (v51)
        {
          v52 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v50)
                                                                                              + 528)));
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            -[Phase::Controller::SystemAudioIO description](v42, "description");
            v53 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v54 = objc_msgSend(v53, "UTF8String");
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "AudioIOPlatformAdapter.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 216;
            v91 = 2048;
            v92 = this;
            v93 = 2080;
            *(_QWORD *)v94 = v54;
            *(_WORD *)&v94[8] = 1024;
            *(_DWORD *)&v94[10] = v51;
            _os_log_impl(&dword_2164CC000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: failed to set format for AID node with format %s, err = %d", buf, 0x2Cu);

          }
        }
        else
        {
          v46 = (Phase::Logger *)AudioIssueDetectorClientInitialize(*((_QWORD *)this + 53));
          v59 = (int)v46;
          if (!(_DWORD)v46)
          {
            *((_BYTE *)this + 432) = 1;
            goto LABEL_83;
          }
          v52 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v46)
                                                                                              + 528)));
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            -[Phase::Controller::SystemAudioIO description](v42, "description");
            v60 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v61 = objc_msgSend(v60, "UTF8String");
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "AudioIOPlatformAdapter.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 225;
            v91 = 2048;
            v92 = this;
            v93 = 2080;
            *(_QWORD *)v94 = v61;
            *(_WORD *)&v94[8] = 1024;
            *(_DWORD *)&v94[10] = v59;
            _os_log_impl(&dword_2164CC000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: failed to initialize AID node with format %s, err = %d", buf, 0x2Cu);

          }
        }

LABEL_83:
        v62 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v46)
                                                                                            + 528)));
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          if (v42)
          {
            v63 = -[Phase::Controller::SystemAudioIO streamDescription](v42, "streamDescription");
            v64 = *(_OWORD *)v63;
            v65 = *(int16x8_t *)(v63 + 16);
            v87 = *(_QWORD *)(v63 + 32);
            v85 = v64;
            v86 = v65;
            v66 = v81;
            CA::StreamDescription::AsString((CA::StreamDescription *)&v85, (uint64_t)v81, v65);
            if (v82 < 0)
              v66 = (void **)v81[0];
          }
          else
          {
            v66 = (void **)"invalid";
          }
          if (v24)
          {
            v67 = (Phase::ChannelLayout *)-[Phase::Controller::SystemAudioIO layout](v24, "layout");
            Phase::ChannelLayout::GetStringDescription(v67, v68);
            if (v80 >= 0)
              v69 = &v79;
            else
              v69 = v79;
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "AudioIOPlatformAdapter.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 237;
            v91 = 2048;
            v92 = this;
            v93 = 2080;
            *(_QWORD *)v94 = v66;
            *(_WORD *)&v94[8] = 2080;
            *(_QWORD *)&v94[10] = v69;
            _os_log_impl(&dword_2164CC000, v62, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: initialize: output asbd <%s>, channel layout: \n%s", buf, 0x30u);
            if (v80 < 0)
              operator delete(v79);
          }
          else
          {
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "AudioIOPlatformAdapter.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 237;
            v91 = 2048;
            v92 = this;
            v93 = 2080;
            *(_QWORD *)v94 = v66;
            *(_WORD *)&v94[8] = 2080;
            *(_QWORD *)&v94[10] = "None";
            _os_log_impl(&dword_2164CC000, v62, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: initialize: output asbd <%s>, channel layout: \n%s", buf, 0x30u);
          }
          if (v42 && v82 < 0)
            operator delete(v81[0]);
        }

        goto LABEL_100;
      }
      v58 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)IsValidFormat)
                                                       + 528));
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AudioIOPlatformAdapter.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 189;
        v91 = 2048;
        v92 = this;
        _os_log_impl(&dword_2164CC000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: error: output channel format not valid, initialize failed!", buf, 0x1Cu);
      }

    }
    else
    {
      v55 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v30) + 528));
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        v56 = *((_DWORD *)this + 92);
        v57 = (uint64_t)(*((_QWORD *)this + 48) - *((_QWORD *)this + 47)) >> 2;
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "AudioIOPlatformAdapter.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 181;
        v91 = 2048;
        v92 = this;
        v93 = 1024;
        *(_DWORD *)v94 = v56;
        *(_WORD *)&v94[4] = 2048;
        *(_QWORD *)&v94[6] = v57;
        _os_log_impl(&dword_2164CC000, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: error: output channel count %d does not match the active channel count %zu, initialize failed!", buf, 0x2Cu);
      }

    }
    return 4294956428;
  }
LABEL_100:
  v70 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZN5Phase10Controller13SystemAudioIO22AudioIOPlatformAdapter10InitializeEv_block_invoke;
  aBlock[3] = &__block_descriptor_40_e333_v48__0r__PHASEIOCycleInfo__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_Q_8Q16__PHASEIOStream__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_IB__AudioBufferList__24Q32__PHASEIOStream__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_IB__AudioBufferList__40l;
  aBlock[4] = this;
  v71 = _Block_copy(aBlock);
  v72 = (Phase::Logger *)objc_msgSend(*((id *)this + 43), "registerIOBlock:", v71);
  v73 = (int)v72;
  if ((v72 & 1) == 0)
  {
    v74 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v72) + 528));
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
    {
      v75 = *((_QWORD *)this + 43);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AudioIOPlatformAdapter.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 256;
      v91 = 2048;
      v92 = this;
      v93 = 2048;
      *(_QWORD *)v94 = v75;
      _os_log_impl(&dword_2164CC000, v74, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: error: could not set IO block on platform@%p, initialize failed!", buf, 0x26u);
    }
  }
  *((_BYTE *)this + 352) = v73;
  v76 = (void *)*((_QWORD *)this + 43);
  v77[0] = v70;
  v77[1] = 3221225472;
  v77[2] = ___ZN5Phase10Controller13SystemAudioIO22AudioIOPlatformAdapter10InitializeEv_block_invoke_11;
  v77[3] = &__block_descriptor_40_e32_v16__0___PHASERouteChangeInfo__8l;
  v77[4] = this;
  objc_msgSend(v76, "registerRouteChangeNotification:", v77);
  if (v73)
    v2 = 0;
  else
    v2 = 4294956433;

  return v2;
}

void sub_2164EEBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  _Unwind_Resume(a1);
}

void CA::StreamDescription::AsString(CA::StreamDescription *this@<X0>, uint64_t a2@<X8>, int16x8_t a3@<Q1>)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  BOOL v14;
  int32x4_t v15;
  uint32x4_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  const char *v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  void *v33;
  int v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  unsigned int v40;
  unsigned int v41;
  const char *v42;
  unsigned int v43;
  int v44;
  const char *v45;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  const char *v51;
  std::string v52;
  std::string v53;
  char __str[20];
  std::string v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = *((_DWORD *)this + 2);
  if (v5 == 1718773105)
  {
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz, 'freq'", a2, *((unsigned int *)this + 7), *(_QWORD *)this);
    return;
  }
  if (v5 == 1819304813 && *((_DWORD *)this + 5) == 1)
  {
    v6 = *((_DWORD *)this + 6);
    if (v6 == *((_DWORD *)this + 4))
    {
      v7 = *((_DWORD *)this + 8);
      if (v6 >= v7 >> 3)
      {
        v8 = *((unsigned int *)this + 7);
        if ((_DWORD)v8)
        {
          v9 = *((_DWORD *)this + 3);
          if ((v9 & 0x20) == 0)
          {
            if (v6 % v8)
              goto LABEL_19;
            v6 /= v8;
          }
          if ((v9 & 2) == 0 && 8 * v6 == v7)
          {
            if ((v9 & 1) != 0)
            {
              if ((v9 & 0x1F84) == 0)
              {
                if (v6 == 4)
                {
                  v11 = 1;
                  goto LABEL_162;
                }
                if (v6 == 8)
                {
                  v11 = 4;
                  goto LABEL_162;
                }
              }
            }
            else if ((v9 & 4) != 0)
            {
              v10 = (v9 >> 7) & 0x3F;
              if (v10 == 24 && v6 == 4)
              {
                v11 = 3;
LABEL_162:
                if ((v9 & 0x20) != 0)
                  v51 = ", deinterleaved";
                else
                  v51 = ", interleaved";
                if (v8 <= 1)
                  v51 = "";
                caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s%s", a2, v8, *(_QWORD *)this, *((_QWORD *)&off_24D577890 + v11), v51);
                return;
              }
              if (!v10 && v6 == 4)
              {
                v11 = 5;
                goto LABEL_162;
              }
              if (!v10 && v6 == 2)
              {
                v11 = 2;
                goto LABEL_162;
              }
            }
          }
        }
      }
    }
  }
LABEL_19:
  v12 = *((unsigned int *)this + 7);
  v13 = *(double *)this;
  if ((_DWORD)v12)
    v14 = 0;
  else
    v14 = v5 == 0;
  if (v14 && v13 == 0.0)
  {
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz", a2, 0, *(_QWORD *)this);
    return;
  }
  a3.i32[0] = bswap32(v5);
  *(int8x8_t *)a3.i8 = vzip1_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)&v13);
  v15.i64[0] = 0x1F0000001FLL;
  v15.i64[1] = 0x1F0000001FLL;
  v16.i64[0] = 0x5F0000005FLL;
  v16.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)a3.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v16, (uint32x4_t)vsraq_n_s32(v15, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a3.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a3.i8, (int8x8_t)0x2E002E002E002ELL);
  *((_BYTE *)&v55.__r_.__value_.__s + 23) = 4;
  LODWORD(v55.__r_.__value_.__l.__data_) = vmovn_s16(a3).u32[0];
  v55.__r_.__value_.__s.__data_[4] = 0;
  caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s (0x%08X) ", (uint64_t)&v53, v12, *(_QWORD *)&v13, &v55, *((unsigned int *)this + 3));
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  v17 = *((_DWORD *)this + 2);
  if (v17 <= 1819304812)
  {
    if (v17 != 1634492771 && v17 != 1634497332 && v17 != 1718378851)
    {
LABEL_70:
      caulk::make_string((caulk *)"%u bits/channel, %u bytes/packet, %u frames/packet, %u bytes/frame", (uint64_t)&v55, *((unsigned int *)this + 8), *((unsigned int *)this + 4), *((unsigned int *)this + 5), *((unsigned int *)this + 6));
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v53;
      else
        v29 = (std::string *)v53.__r_.__value_.__r.__words[0];
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      else
        size = v53.__r_.__value_.__l.__size_;
LABEL_62:
      v31 = std::string::insert(&v55, 0, (const std::string::value_type *)v29, size);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)&v31->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_65;
      v33 = (void *)v55.__r_.__value_.__r.__words[0];
      goto LABEL_64;
    }
LABEL_45:
    v26 = *((unsigned int *)this + 3);
    if ((v26 - 1) < 4 || !(_DWORD)v26 && (v17 == 1634497332 || v17 == 1936487278 || v17 == 1936487267))
    {
      caulk::make_string((caulk *)"from %u-bit source, ", (uint64_t)&v55, CA::StreamDescription::AsString(void)const::kSourceBits[v26]);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v55;
      else
        v27 = (std::string *)v55.__r_.__value_.__r.__words[0];
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      else
        v28 = v55.__r_.__value_.__l.__size_;
      std::string::append(&v53, (const std::string::value_type *)v27, v28);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
    }
    else
    {
      std::string::append(&v53, "from UNKNOWN source bit depth, ");
    }
    caulk::make_string((caulk *)"%u frames/packet", (uint64_t)&v55, *((unsigned int *)this + 5));
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v53;
    else
      v29 = (std::string *)v53.__r_.__value_.__r.__words[0];
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    else
      size = v53.__r_.__value_.__l.__size_;
    goto LABEL_62;
  }
  if (v17 == 1936487278 || v17 == 1936487267)
    goto LABEL_45;
  if (v17 != 1819304813)
    goto LABEL_70;
  v18 = *((_DWORD *)this + 3);
  v19 = *((_DWORD *)this + 6);
  v20 = v18 & 0x20;
  v21 = "";
  if (!v19)
    goto LABEL_37;
  if ((v18 & 0x20) != 0)
  {
    v22 = 1;
  }
  else
  {
    v22 = *((_DWORD *)this + 7);
    if (!v22)
    {
      v20 = 0;
LABEL_37:
      v23 = " signed";
      if ((v18 & 4) == 0)
        v23 = " unsigned";
      if ((v18 & 1) != 0)
        v24 = "float";
      else
        v24 = "integer";
      if ((v18 & 1) != 0)
        v25 = "";
      else
        v25 = v23;
LABEL_102:
      v55.__r_.__value_.__s.__data_[0] = 0;
      if (v20)
        v38 = ", deinterleaved";
      else
        v38 = "";
      v35 = "";
      v39 = "";
      goto LABEL_106;
    }
  }
  v34 = v19 / v22;
  if (v19 / v22 < 2)
  {
    v37 = " signed";
    if ((v18 & 4) == 0)
      v37 = " unsigned";
    if ((v18 & 1) != 0)
      v24 = "float";
    else
      v24 = "integer";
    if ((v18 & 1) != 0)
      v25 = "";
    else
      v25 = v37;
    if (v22 > v19)
      goto LABEL_102;
    v34 = 1;
    v35 = "";
  }
  else
  {
    if ((v18 & 2) != 0)
      v35 = " big-endian";
    else
      v35 = " little-endian";
    v36 = " unsigned";
    if ((v18 & 4) != 0)
      v36 = " signed";
    if ((v18 & 1) != 0)
      v24 = "float";
    else
      v24 = "integer";
    if ((v18 & 1) != 0)
      v25 = "";
    else
      v25 = v36;
  }
  v40 = *((_DWORD *)this + 7);
  if ((v18 & 0x20) != 0)
    v41 = 1;
  else
    v41 = *((_DWORD *)this + 7);
  if (v41)
    v41 = 8 * (v19 / v41);
  if (v41 == *((_DWORD *)this + 8))
  {
    v55.__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if ((v18 & 8) != 0)
      v42 = "";
    else
      v42 = "un";
    snprintf((char *)&v55, 0x20uLL, "%spacked in %u bytes", v42, v34);
    v19 = *((_DWORD *)this + 6);
    v18 = *((_DWORD *)this + 3);
    if (!v19)
    {
      v43 = 0;
      v20 = *((_DWORD *)this + 3) & 0x20;
      goto LABEL_128;
    }
    v40 = *((_DWORD *)this + 7);
    v20 = *((_DWORD *)this + 3) & 0x20;
  }
  if (v20)
    v43 = 1;
  else
    v43 = v40;
  if (v43)
    v43 = 8 * (v19 / v43);
LABEL_128:
  v44 = *((_DWORD *)this + 8);
  v45 = " high-aligned";
  if ((v18 & 0x10) == 0)
    v45 = " low-aligned";
  if ((v44 & 7) == 0 && v43 == v44)
    v39 = "";
  else
    v39 = v45;
  if (v20)
    v38 = ", deinterleaved";
  else
    v38 = "";
  if (v55.__r_.__value_.__s.__data_[0])
  {
    v21 = ", ";
    goto LABEL_141;
  }
LABEL_106:
  if (*v39)
    v21 = ", ";
LABEL_141:
  if (((v18 >> 7) & 0x3F) != 0)
    snprintf(__str, 0x14uLL, "%u.%u");
  else
    snprintf(__str, 0x14uLL, "%u");
  caulk::make_string((caulk *)"%s-bit%s%s %s%s%s%s%s", (uint64_t)&v52, __str, v35, v25, v24, v21, &v55, v39, v38);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = &v53;
  else
    v47 = (std::string *)v53.__r_.__value_.__r.__words[0];
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  else
    v48 = v53.__r_.__value_.__l.__size_;
  v49 = std::string::insert(&v52, 0, (const std::string::value_type *)v47, v48);
  v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)&v49->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
  {
    v33 = (void *)v52.__r_.__value_.__r.__words[0];
LABEL_64:
    operator delete(v33);
  }
LABEL_65:
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
}

void sub_2164EF3DC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AudioStatisticsStartReporter(uint64_t a1)
{
  if (_MergedGlobals_13 != -1)
    dispatch_once(&_MergedGlobals_13, &__block_literal_global);
  if (off_254E44658)
    off_254E44658(a1);
}

void AudioIssueDetectorClientReset(uint64_t a1)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_42);
  if (off_254E41A38)
    off_254E41A38(a1);
}

uint64_t AudioIssueDetectorClientSetNodeFormatWithDirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_42);
  if (off_254E41A30)
    return off_254E41A30(a1, a2, 2, 1, a3, a4);
  else
    return 0xFFFFFFFFLL;
}

uint64_t AudioIssueDetectorClientInitialize(uint64_t a1)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_42);
  if (off_254E41A18)
    return off_254E41A18(a1);
  else
    return 0xFFFFFFFFLL;
}

void ___ZN5Phase10Controller13SystemAudioIO22AudioIOPlatformAdapter10InitializeEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  int v13;
  Phase::Logger *v14;
  uint64_t v15;
  uint64_t InstancePtr;
  uint64_t v17;
  uint64_t v18;
  const AudioTimeStamp *v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  float **v23;
  int v24;
  char *v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  int *v31;
  _DWORD *v32;
  uint64_t v33;
  int v34;
  int v35;
  float **v36;
  char *v37;
  Phase::Logger *v38;
  float v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  const AudioTimeStamp *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  int v49;
  uint64_t ShouldFire;
  Phase::Logger *v51;
  NSObject *v52;
  uint64_t v53;
  Phase::Logger *v54;
  void **v55;
  Phase::Logger *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  Phase::Logger *v63;
  uint64_t v64;
  uint64_t v65;
  Phase::Logger *v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unsigned int v76;
  signed int v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  unsigned int v88;
  int v89;
  void **v90;
  unsigned int v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  _DWORD *v95;
  unsigned int v96;
  char *v97;
  size_t v98;
  uint64_t v99;
  BOOL v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  int *v114;
  uint64_t *v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  const float **v120;
  unint64_t v121;
  float v122;
  void **v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  Phase::Logger *v128;
  NSObject *v129;
  vDSP_Length v130;
  const float *v131;
  uint64_t i;
  float v133;
  uint64_t v134;
  uint64_t v135;
  int Latest;
  AudioTimeStamp *v137;
  uint8_t buf[4];
  const char *v139;
  __int16 v140;
  int v141;
  __int16 v142;
  char *v143;
  char __str[4];
  char __s[256];
  uint64_t v146;

  v146 = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(a1 + 32);
  if (atomic_load((unsigned int *)(v11 + 144)))
  {
    v13 = 0;
    if (a3 && a4)
      v13 = *(_DWORD *)(a4 + 64);
    kdebug_trace();
    v14 = (Phase::Logger *)_os_log_pack_size();
    v15 = (uint64_t)v14 + 88;
    InstancePtr = Phase::Logger::GetInstancePtr(v14);
    if (caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(InstancePtr + 1168), v15, 0))
    {
      v17 = _os_log_pack_fill();
      v18 = *(_QWORD *)(a2 + 72);
      *(_DWORD *)v17 = 134218240;
      *(_QWORD *)(v17 + 4) = v18;
      *(_WORD *)(v17 + 12) = 1024;
      *(_DWORD *)(v17 + 14) = v13;
      Phase::Logger::GetInstancePtr((Phase::Logger *)v17);
      caulk::concurrent::messenger::enqueue();
    }
    goto LABEL_43;
  }
  if (!*(_BYTE *)(v11 + 240) || !a4 || !a3 || !*(_BYTE *)(v11 + 408))
    goto LABEL_43;
  if ((*(_BYTE *)(a2 + 120) & 3) == 0)
  {
    *(_QWORD *)__s = *(_QWORD *)(a1 + 32);
    Phase::Controller::SystemAudioIO::AudioIOBase::IOProcError<Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *,unsigned int const&>(v11, "audioio@%p: error: invalid input timestamp, flags 0x%x", __s, (unsigned int *)(a2 + 120));
    goto LABEL_43;
  }
  v19 = (const AudioTimeStamp *)(a2 + 64);
  kdebug_trace();
  v20 = *(unsigned int **)(a4 + 72);
  v21 = *v20;
  if ((_DWORD)v21 != 1)
  {
    v26 = *(_QWORD *)(v11 + 400);
    v27 = (_DWORD *)(v26 + 48);
    if ((_DWORD)v21)
    {
      v28 = 0;
      v29 = *(_DWORD **)(v26 + 64);
      v30 = *(unsigned int *)(a4 + 64);
      do
      {
        if ((_DWORD)v30)
        {
          v31 = *(int **)&v20[4 * v28 + 4];
          v32 = v29;
          v33 = v30;
          do
          {
            v34 = *v31++;
            *v32 = v34;
            v32 += v21;
            --v33;
          }
          while (v33);
        }
        ++v28;
        ++v29;
      }
      while (v28 != v21);
    }
    *(_DWORD *)__str = 0;
    if (*(_QWORD *)(v11 + 304))
    {
      *(_QWORD *)__s = v11 + 312;
      v35 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v11 + 312));
      __s[8] = v35;
      if (v35)
      {
        v36 = *(float ***)(v11 + 304);
        if (v36)
        {
          if (*v36)
          {
            Latest = Phase::Controller::SpeechDetector::SpeechDetectorImpl::ProcessAndGetLatest(*v36, v27, (float *)__str);
            std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)__s);
            if (Latest)
              v37 = __str;
            else
              v37 = 0;
            goto LABEL_39;
          }
        }
      }
      std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)__s);
    }
    v37 = 0;
LABEL_39:
    Phase::Controller::VoiceManager::IOExecuteRealtimeInputActions(*(uint64_t **)(v11 + 8), (uint64_t)v19, *(_DWORD *)(a4 + 64), (uint64_t)v27, (uint64_t)v37);
    goto LABEL_40;
  }
  *(_DWORD *)__str = 0;
  if (*(_QWORD *)(v11 + 304))
  {
    *(_QWORD *)__s = v11 + 312;
    v22 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v11 + 312));
    __s[8] = v22;
    if (v22)
    {
      v23 = *(float ***)(v11 + 304);
      if (v23)
      {
        if (*v23)
        {
          v24 = Phase::Controller::SpeechDetector::SpeechDetectorImpl::ProcessAndGetLatest(*v23, *(_DWORD **)(a4 + 72), (float *)__str);
          std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)__s);
          if (v24)
            v25 = __str;
          else
            v25 = 0;
          goto LABEL_36;
        }
      }
    }
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)__s);
  }
  v25 = 0;
LABEL_36:
  Phase::Controller::VoiceManager::IOExecuteRealtimeInputActions(*(uint64_t **)(v11 + 8), (uint64_t)v19, *(_DWORD *)(a4 + 64), *(_QWORD *)(a4 + 72), (uint64_t)v25);
LABEL_40:
  v38 = (Phase::Logger *)Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration::WriteCaptureBufferList(v11 + 240, v19, *(unsigned int *)(a4 + 64), *(const AudioBufferList **)(a4 + 72));
  if (*(_BYTE *)(Phase::Logger::GetInstancePtr(v38) + 1548))
  {
    v39 = *(double *)(v11 + 336);
    Phase::Trace::PostSignalStatsTraceIfSignificant((Phase::Trace *)0x161F, *(const float **)(*(_QWORD *)(a4 + 72) + 16), *(unsigned int *)(a4 + 64), v39);
  }
  kdebug_trace();
LABEL_43:
  if (!a6)
    return;
  if (!a5)
    return;
  v40 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v40 + 152))
    return;
  v41 = *(unsigned int **)(a6 + 72);
  if (!v41)
  {
    v42 = 0xFFFFFFFFLL;
    goto LABEL_56;
  }
  v42 = *v41;
  if (!(_DWORD)v42 || !*((_QWORD *)v41 + 2))
  {
LABEL_56:
    strcpy(__s, "(%d): ");
    strcat(__s, "audioio@%p: invalid output ABL: %p / %d / %p");
    ShouldFire = Phase::Throttle::ShouldFire((Phase::Throttle *)(v40 + 16), 0);
    if (!(_DWORD)ShouldFire)
      return;
    v51 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s, ShouldFire, v40, v41, v42, 0);
    v52 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v51) + 528));
    if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      return;
LABEL_58:
    *(_DWORD *)buf = 136315650;
    v139 = "AudioIOBase.hpp";
    v140 = 1024;
    v141 = 133;
    v142 = 2080;
    v143 = __str;
    _os_log_impl(&dword_2164CC000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
    return;
  }
  if ((*(_BYTE *)(a2 + 184) & 3) == 0)
  {
    *(_QWORD *)__s = v40;
    Phase::Controller::SystemAudioIO::AudioIOBase::IOProcError<Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *,unsigned int const&>(v40, "audioio@%p: error: invalid output timestamp, flags 0x%x", __s, (unsigned int *)(a2 + 184));
    return;
  }
  v43 = (const AudioTimeStamp *)(a2 + 128);
  if (!*(_BYTE *)(v40 + 104))
  {
    v44 = *(_OWORD *)&v43->mSampleTime;
    v45 = *(_OWORD *)(a2 + 144);
    v46 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(v40 + 72) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(v40 + 88) = v46;
    *(_OWORD *)(v40 + 40) = v44;
    *(_OWORD *)(v40 + 56) = v45;
    *(_BYTE *)(v40 + 104) = 1;
    LODWORD(v42) = *v41;
  }
  v47 = v41[2 * ((_DWORD)v42 == 1)];
  if (atomic_load((unsigned int *)(v40 + 144)))
  {
    v49 = *(_DWORD *)(a6 + 64);
    *(_BYTE *)(a6 + 68) = 1;
    if ((_DWORD)v42 == 1)
    {
      bzero(*((void **)v41 + 2), v41[3]);
    }
    else if ((_DWORD)v47)
    {
      v55 = (void **)(v41 + 4);
      do
      {
        bzero(*v55, *((unsigned int *)v55 - 1));
        v55 += 2;
        --v47;
      }
      while (v47);
    }
    kdebug_trace();
    v56 = (Phase::Logger *)_os_log_pack_size();
    v57 = (uint64_t)v56 + 88;
    v58 = Phase::Logger::GetInstancePtr(v56);
    if (caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(v58 + 1168), v57, 0))
    {
      v59 = _os_log_pack_fill();
      v60 = *(_QWORD *)(a2 + 136);
      *(_DWORD *)v59 = 134218240;
      *(_QWORD *)(v59 + 4) = v60;
      *(_WORD *)(v59 + 12) = 1024;
      *(_DWORD *)(v59 + 14) = v49;
      Phase::Logger::GetInstancePtr((Phase::Logger *)v59);
      caulk::concurrent::messenger::enqueue();
    }
    return;
  }
  if (v47 < *(_DWORD *)(v40 + 368))
  {
    strcpy(__s, "(%d): ");
    strcat(__s, "audioio@%p: error: mismatch in channel count, actual %u, expected %u");
    v53 = Phase::Throttle::ShouldFire((Phase::Throttle *)(v40 + 16), 0);
    if (!(_DWORD)v53)
      return;
    v54 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s, v53, v40, v47, *(unsigned int *)(v40 + 368));
    v52 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v54) + 528));
    if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_58;
  }
  *(_QWORD *)(v40 + 416) = *(unsigned int *)(a6 + 64);
  v137 = (AudioTimeStamp *)(a2 + 128);
  if (*(_BYTE *)(v40 + 136))
  {
    v61 = mach_absolute_time();
    v134 = *(_QWORD *)(v40 + 128);
    v135 = v61;
    v62 = (*(double (**)(uint64_t))(*(_QWORD *)v40 + 104))(v40);
    v63 = (Phase::Logger *)_os_log_pack_size();
    v64 = (uint64_t)v63 + 88;
    v65 = Phase::Logger::GetInstancePtr(v63);
    if (caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(v65 + 1168), v64, 0))
    {
      v66 = (Phase::Logger *)_os_log_pack_fill();
      *(_DWORD *)v66 = 67109120;
      *((_DWORD *)v66 + 1) = ((double)(uint64_t)(v135 - v134) * 0.0000000416666667 * v62);
      Phase::Logger::GetInstancePtr(v66);
      caulk::concurrent::messenger::enqueue();
    }
    v43 = (const AudioTimeStamp *)(a2 + 128);
    if (*(_BYTE *)(v40 + 136))
      *(_BYTE *)(v40 + 136) = 0;
  }
  kdebug_trace();
  v67 = *(_DWORD *)(a6 + 64);
  v68 = **(_QWORD **)(**(_QWORD **)(v40 + 8) + 696);
  v70 = *(_OWORD *)&v43->mSMPTETime.mSubframes;
  v69 = *(_OWORD *)&v43->mSMPTETime.mHours;
  v71 = *(_OWORD *)&v43->mRateScalar;
  *(_OWORD *)(v68 + 75224) = *(_OWORD *)&v43->mSampleTime;
  *(_OWORD *)(v68 + 75240) = v71;
  *(_OWORD *)(v68 + 75256) = v70;
  *(_OWORD *)(v68 + 75272) = v69;
  *(_DWORD *)(v68 + 104) = v67;
  *(_DWORD *)(v68 + 108) = 0;
  v72 = *(_QWORD *)(v68 + 75096);
  v74 = *(_OWORD *)&v43->mSMPTETime.mSubframes;
  v73 = *(_OWORD *)&v43->mSMPTETime.mHours;
  v75 = *(_OWORD *)&v43->mRateScalar;
  *(_OWORD *)(v72 + 48) = *(_OWORD *)&v43->mSampleTime;
  *(_OWORD *)(v72 + 64) = v75;
  *(_OWORD *)(v72 + 80) = v74;
  *(_OWORD *)(v72 + 96) = v73;
  *(_QWORD *)(v72 + 40) = *(_QWORD *)(*(_QWORD *)(v72 + 16) + 16);
  Phase::Controller::VoiceManager::IOExecuteRealtimeActions(*(Phase::Controller::VoiceManager **)(v40 + 8), v43, *(_DWORD *)(a6 + 64));
  v76 = *(_DWORD *)(**(_QWORD **)(**(_QWORD **)(v40 + 8) + 696) + 192);
  if ((_DWORD)v42 != 1)
  {
    v89 = v47;
    if (v47 > v76)
    {
      v90 = (void **)&v41[4 * v76 + 4];
      v91 = *(_DWORD *)(**(_QWORD **)(**(_QWORD **)(v40 + 8) + 696) + 192);
      do
      {
        bzero(*v90, *((unsigned int *)v90 - 1));
        ++v91;
        v90 += 2;
      }
      while (v47 > v91);
      v89 = v76;
    }
    if (v89 == 1)
    {
      if (!*(_DWORD *)(a6 + 64))
        goto LABEL_128;
      v101 = 0;
      do
      {
        v102 = *(uint64_t **)(**(_QWORD **)(v40 + 8) + 696);
        v103 = *v102;
        Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(*v102 + 75096));
        *(_DWORD *)(*((_QWORD *)v41 + 2) + 4 * v101++) = **(_DWORD **)(v103 + 144);
      }
      while (v101 < *(unsigned int *)(a6 + 64));
    }
    else if (v89 == 2)
    {
      if (!*(_DWORD *)(a6 + 64))
        goto LABEL_128;
      v92 = 0;
      do
      {
        v93 = *(uint64_t **)(**(_QWORD **)(v40 + 8) + 696);
        v94 = *v93;
        Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(*v93 + 75096));
        v95 = *(_DWORD **)(v94 + 144);
        *(_DWORD *)(*((_QWORD *)v41 + 2) + 4 * v92) = *v95;
        *(_DWORD *)(*((_QWORD *)v41 + 4) + 4 * v92++) = v95[1];
      }
      while (v92 < *(unsigned int *)(a6 + 64));
    }
    else
    {
      v104 = *(_DWORD *)(a6 + 64);
      if (*(_QWORD *)(v40 + 360) == -1)
      {
        if (v104)
        {
          v112 = 0;
          do
          {
            v113 = **(_QWORD **)(**(_QWORD **)(v40 + 8) + 696);
            Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(v113 + 75096));
            if (v89 >= 1)
            {
              v114 = *(int **)(v113 + 144);
              v115 = (uint64_t *)(v41 + 4);
              v116 = v89;
              do
              {
                v117 = *v114++;
                v118 = v117;
                v119 = *v115;
                v115 += 2;
                *(_DWORD *)(v119 + 4 * v112) = v118;
                --v116;
              }
              while (v116);
            }
            ++v112;
          }
          while (v112 < *(unsigned int *)(a6 + 64));
        }
      }
      else if (v104)
      {
        v105 = 0;
        do
        {
          v106 = **(_QWORD **)(**(_QWORD **)(v40 + 8) + 696);
          Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(v106 + 75096));
          if (v89 >= 1)
          {
            v107 = 0;
            v108 = 0;
            v109 = *(_QWORD *)(v106 + 144);
            v110 = *(_QWORD *)(v40 + 376);
            v111 = v41 + 4;
            do
            {
              if (v107 == *(_DWORD *)(v110 + 4 * v108))
                *(_DWORD *)(*v111 + 4 * v105) = *(_DWORD *)(v109 + 4 * v108++);
              else
                *(_DWORD *)(*v111 + 4 * v105) = 0;
              ++v107;
              v111 += 2;
            }
            while (v89 != v107);
          }
          ++v105;
        }
        while (v105 < *(unsigned int *)(a6 + 64));
      }
    }
    if (v89 < 1)
    {
      *(_BYTE *)(a6 + 68) = 1;
      if (!(_DWORD)v47)
        goto LABEL_137;
      goto LABEL_135;
    }
LABEL_128:
    v120 = (const float **)(v41 + 4);
    v121 = 1;
    do
    {
      *(_DWORD *)__s = 0;
      vDSP_rmsqv(*v120, 1, (float *)__s, *(unsigned int *)(a6 + 64));
      v122 = *(float *)__s;
      if (v121 >= v89)
        break;
      ++v121;
      v120 += 2;
    }
    while (*(float *)__s < 0.000015849);
    *(_BYTE *)(a6 + 68) = *(float *)__s < 0.000015849;
    if (!(_DWORD)v47 || v122 >= 0.000015849)
      goto LABEL_137;
LABEL_135:
    v123 = (void **)(v41 + 4);
    do
    {
      bzero(*v123, *((unsigned int *)v123 - 1));
      v123 += 2;
      --v47;
    }
    while (v47);
    goto LABEL_137;
  }
  v77 = v47;
  if (v47 > v76)
  {
    bzero(*((void **)v41 + 2), v41[3]);
    v77 = v76;
  }
  v78 = *(_DWORD *)(a6 + 64);
  if (*(_QWORD *)(v40 + 360) != -1)
  {
    if (v78)
    {
      v79 = 0;
      v80 = *((_QWORD *)v41 + 2);
      do
      {
        v81 = *(uint64_t **)(**(_QWORD **)(v40 + 8) + 696);
        v82 = *v81;
        Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(*v81 + 75096));
        if ((_DWORD)v47)
        {
          v83 = 0;
          v84 = 0;
          v85 = *(_QWORD *)(v82 + 144);
          v86 = *(_QWORD *)(v40 + 360);
          do
          {
            if (((v86 >> v83) & 1) != 0)
              v87 = *(_DWORD *)(v85 + 4 * v84++);
            else
              v87 = 0;
            *(_DWORD *)(v80 + 4 * v83++) = v87;
          }
          while (v47 != v83);
        }
        ++v79;
        v88 = *(_DWORD *)(a6 + 64);
        v80 += 4 * v47;
      }
      while (v79 < v88);
      goto LABEL_103;
    }
    goto LABEL_102;
  }
  if (!v78)
  {
LABEL_102:
    v88 = 0;
    goto LABEL_103;
  }
  v96 = 0;
  v97 = (char *)*((_QWORD *)v41 + 2);
  v98 = 4 * v77;
  do
  {
    v99 = **(_QWORD **)(**(_QWORD **)(v40 + 8) + 696);
    Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(v99 + 75096));
    memcpy(v97, *(const void **)(v99 + 144), v98);
    ++v96;
    v88 = *(_DWORD *)(a6 + 64);
    v97 += 4 * v47;
  }
  while (v96 < v88);
LABEL_103:
  *(_DWORD *)__s = 0;
  vDSP_rmsqv(*((const float **)v41 + 2), 1, (float *)__s, v88 * v47);
  v100 = *(float *)__s < 0.000001;
  *(_BYTE *)(a6 + 68) = *(float *)__s < 0.000001;
  if (v100)
    bzero(*((void **)v41 + 2), v41[3]);
LABEL_137:
  *(_QWORD *)(v40 + 112) = mach_absolute_time();
  *(_BYTE *)(v40 + 120) = 1;
  v124 = Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration::WriteCaptureBufferList(v40 + 152, v137, *(unsigned int *)(a6 + 64), (const AudioBufferList *)v41);
  v125 = *(_QWORD *)(v40 + 424);
  if (!v125 || !*(_BYTE *)(v40 + 432))
    goto LABEL_148;
  v126 = *(unsigned int *)(a6 + 64);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_42);
  if (!off_254E41A40)
  {
    v127 = 0xFFFFFFFFLL;
    goto LABEL_145;
  }
  v124 = off_254E41A40(v125, 2, 0, v41, v126, v137);
  v127 = v124;
  if ((_DWORD)v124)
  {
LABEL_145:
    strcpy(__s, "(%d): ");
    strcat(__s, "audioio@%p: failed to analyze buffer %d");
    v124 = Phase::Throttle::ShouldFire((Phase::Throttle *)(v40 + 16), 0);
    if ((_DWORD)v124)
    {
      v128 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s, v124, v40, v127);
      v129 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v128) + 528));
      v124 = os_log_type_enabled(v129, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v124)
      {
        *(_DWORD *)buf = 136315650;
        v139 = "AudioIOBase.hpp";
        v140 = 1024;
        v141 = 133;
        v142 = 2080;
        v143 = __str;
        _os_log_impl(&dword_2164CC000, v129, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
      }
    }
  }
LABEL_148:
  if (*(_BYTE *)(Phase::Logger::GetInstancePtr((Phase::Logger *)v124) + 1548))
  {
    v130 = *(unsigned int *)(a6 + 64);
    v131 = (const float *)*((_QWORD *)v41 + 2);
    if ((_DWORD)v130)
    {
      for (i = 0; i != v130; ++i)
      {
        if (fabsf(v131[i]) > 0.01)
          break;
      }
    }
    else
    {
      v130 = 0;
    }
    v133 = *(double *)(v40 + 336);
    Phase::Trace::PostSignalStatsTraceIfSignificant((Phase::Trace *)0x1620, v131, v130, v133);
  }
  mach_absolute_time();
  __udivti3();
  kdebug_trace();
}

void sub_2164F04B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void ___ZN5Phase10Controller13SystemAudioIO22AudioIOPlatformAdapter10InitializeEv_block_invoke_11(uint64_t a1, void *a2)
{
  uint64_t v2;
  Phase::Logger *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  int v13;
  Phase::Logger *v14;
  Phase::Logger *v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint32_t v22;
  _BOOL8 v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v4 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v3)
                                                                                     + 528)));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    -[Phase::Logger description](v3, "description");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "description");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = 136315906;
    v28 = "AudioIOPlatformAdapter.mm";
    v29 = 1024;
    v30 = 895;
    v31 = 2048;
    v32 = v2;
    v33 = 2112;
    v34 = v6;
    _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d audioio@%p: route change notification received with description \n%@", (uint8_t *)&v27, 0x26u);

  }
  -[Phase::Logger description](v3, "description");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("beginning"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  -[Phase::Logger description](v3, "description");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("end"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  -[Phase::Logger description](v3, "description");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v11, "count") != 2 || !v8 || !v10)
  {

LABEL_11:
    v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v14) + 528));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v27 = 136315394;
      v28 = "AudioIOPlatformAdapter.mm";
      v29 = 1024;
      v30 = 903;
      v18 = "%25s:%-5d Invalid route change information received from PHASEPlatform";
      v20 = v19;
      v21 = OS_LOG_TYPE_ERROR;
      v22 = 18;
LABEL_19:
      _os_log_impl(&dword_2164CC000, v20, v21, v18, (uint8_t *)&v27, v22);
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  v12 = objc_msgSend(v8, "BOOLValue");
  v13 = objc_msgSend(v10, "BOOLValue");

  if (((v12 ^ v13) & 1) == 0)
    goto LABEL_11;
  v15 = (Phase::Logger *)objc_msgSend(v8, "BOOLValue");
  if ((_DWORD)v15)
  {
    v16 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15) + 528));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(_QWORD *)(v2 + 40);
      v27 = 136315650;
      v28 = "AudioIOPlatformAdapter.mm";
      v29 = 1024;
      v30 = 910;
      v31 = 2048;
      v32 = v17;
      v18 = "%25s:%-5d [AudioIOPlatformAdapter] Route change begin at timestamp %f";
LABEL_18:
      v20 = v16;
      v21 = OS_LOG_TYPE_DEFAULT;
      v22 = 28;
      goto LABEL_19;
    }
  }
  else
  {
    v23 = Phase::Controller::VoiceManager::Implementation::AudioIOConfigChanged(**(Phase::Controller::VoiceManager::Implementation ***)(v2 + 8));
    if (v23)
    {
      v24 = (unsigned int *)(v2 + 144);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
    }
    v16 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v23) + 528));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v26 = *(_QWORD *)(v2 + 40);
      v27 = 136315650;
      v28 = "AudioIOPlatformAdapter.mm";
      v29 = 1024;
      v30 = 922;
      v31 = 2048;
      v32 = v26;
      v18 = "%25s:%-5d [AudioIOPlatformAdapter] Route change end at timestamp %f";
      goto LABEL_18;
    }
  }
LABEL_20:

}

void sub_2164F0828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::Uninitialize(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 352))
    return;
  objc_msgSend(*((id *)this + 43), "registerRouteChangeNotification:", 0);
  (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *))(*(_QWORD *)this + 56))(this);
  objc_msgSend(*((id *)this + 43), "registerIOBlock:", 0);
  v2 = std::__optional_destruct_base<CA::AudioBuffers,false>::reset[abi:ne180100]((uint64_t)this + 400);
  *((_BYTE *)this + 352) = 0;
  v3 = *((_QWORD *)this + 53);
  if (v3)
  {
    if (AudioIssueDetectorLibraryLoader(void)::once != -1)
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_42);
    if (off_254E41A38)
    {
      v2 = off_254E41A38(v3);
      v4 = v2;
      if (!(_DWORD)v2)
      {
LABEL_11:
        *((_BYTE *)this + 432) = 0;
        goto LABEL_12;
      }
    }
    else
    {
      v4 = -1;
    }
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v2) + 528));
    v2 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v2)
    {
      v8 = 136315906;
      v9 = "AudioIOPlatformAdapter.mm";
      v10 = 1024;
      v11 = 289;
      v12 = 2048;
      v13 = this;
      v14 = 1024;
      v15 = v4;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: failed to reset AID, err = %d", (uint8_t *)&v8, 0x22u);
    }
    goto LABEL_11;
  }
LABEL_12:
  v6 = *((_QWORD *)this + 55);
  if (v6)
  {
    if (_MergedGlobals_13 != -1)
      dispatch_once(&_MergedGlobals_13, &__block_literal_global);
    if (off_254E44660)
      v2 = off_254E44660(v6);
  }
  v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v2) + 528));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136315650;
    v9 = "AudioIOPlatformAdapter.mm";
    v10 = 1024;
    v11 = 301;
    v12 = 2048;
    v13 = this;
    _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: uninitialized", (uint8_t *)&v8, 0x1Cu);
  }
}

uint64_t std::__optional_destruct_base<CA::AudioBuffers,false>::reset[abi:ne180100](uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 8))
  {
    v1 = result;
    result = ExtendedAudioBufferList_Destroy();
    *(_BYTE *)(v1 + 8) = 0;
  }
  return result;
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::Start(id *this)
{
  Phase::Logger *InstancePtr;
  Phase::Logger *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  os_signpost_id_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  Phase::Logger *v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  int v25;
  int v27;
  const char *v28;
  __int16 v29;
  _BYTE v30[20];
  _BYTE v31[6];
  uint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if ((*((unsigned __int8 *)this + 353) | 2) != 2)
    return 0;
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)this);
  if (*((_BYTE *)InstancePtr + 536))
  {
    v3 = (Phase::Logger *)objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                            + 528)));
    v4 = Phase::Logger::GetInstancePtr(v3);
    v5 = os_signpost_id_generate(**(os_log_t **)(v4 + 528));
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v6 = v5;
      if (os_signpost_enabled((os_log_t)v3))
      {
        if (*((_BYTE *)this + 240))
          v7 = "in";
        else
          v7 = "-";
        if (*((_BYTE *)this + 152))
          v8 = "out";
        else
          v8 = "-";
        objc_msgSend(this[31], "sampleRate");
        v10 = v9;
        v11 = objc_msgSend(this[31], "channelCount");
        objc_msgSend(this[20], "sampleRate");
        v13 = v12;
        v14 = objc_msgSend(this[20], "channelCount");
        objc_msgSend(this[32], "sampleRate");
        v16 = v15;
        v17 = objc_msgSend(this[32], "channelCount");
        objc_msgSend(this[21], "sampleRate");
        v19 = v18;
        v20 = objc_msgSend(this[21], "channelCount");
        v27 = 136317442;
        v28 = v7;
        v29 = 2080;
        *(_QWORD *)v30 = v8;
        *(_WORD *)&v30[8] = 2048;
        *(_QWORD *)&v30[10] = v10;
        *(_WORD *)&v30[18] = 1024;
        *(_DWORD *)v31 = v11;
        *(_WORD *)&v31[4] = 2048;
        v32 = v13;
        v33 = 1024;
        v34 = v14;
        v35 = 2048;
        v36 = v16;
        v37 = 1024;
        v38 = v17;
        v39 = 2048;
        v40 = v19;
        v41 = 1024;
        v42 = v20;
        _os_signpost_emit_with_name_impl(&dword_2164CC000, (os_log_t)v3, OS_SIGNPOST_EVENT, v6, "Phase_AudioIO_Start", "enable [%s, %s], hardware format [%.f/%d, %.f/%d], client format [%.f/%d, %.f/%d]", (uint8_t *)&v27, 0x56u);
      }
    }

  }
  Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures((Phase::Controller::SystemAudioIO::AudioIOBase *)this, 1);
  v21 = (Phase::Logger *)objc_msgSend(this[43], "start");
  if ((_DWORD)v21)
  {
    v22 = 0;
    *((_BYTE *)this + 353) = 1;
  }
  else
  {
    Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures((Phase::Controller::SystemAudioIO::AudioIOBase *)this, 0);
    v22 = 4294956433;
  }
  v23 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v21) + 528));
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v24 = *((unsigned __int8 *)this + 240);
    v25 = *((unsigned __int8 *)this + 152);
    v27 = 136316418;
    v28 = "AudioIOPlatformAdapter.mm";
    v29 = 1024;
    *(_DWORD *)v30 = 333;
    *(_WORD *)&v30[4] = 2048;
    *(_QWORD *)&v30[6] = this;
    *(_WORD *)&v30[14] = 1024;
    *(_DWORD *)&v30[16] = v24;
    *(_WORD *)v31 = 1024;
    *(_DWORD *)&v31[2] = v25;
    LOWORD(v32) = 1024;
    *(_DWORD *)((char *)&v32 + 2) = v22;
    _os_log_impl(&dword_2164CC000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: start IO (input %d, output %d), err %d", (uint8_t *)&v27, 0x2Eu);
  }
  return v22;
}

void sub_2164F0DF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::Pause(id *this)
{
  Phase::Logger *InstancePtr;
  Phase::Logger *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  os_signpost_id_t v6;
  Phase::Logger *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  id *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 353) == 1)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)this);
    if (*((_BYTE *)InstancePtr + 536))
    {
      v3 = (Phase::Logger *)objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                              + 528)));
      v4 = Phase::Logger::GetInstancePtr(v3);
      v5 = os_signpost_id_generate(**(os_log_t **)(v4 + 528));
      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v6 = v5;
        if (os_signpost_enabled((os_log_t)v3))
        {
          LOWORD(v9) = 0;
          _os_signpost_emit_with_name_impl(&dword_2164CC000, (os_log_t)v3, OS_SIGNPOST_EVENT, v6, "Phase_AudioIO_Pause", (const char *)&unk_21676613F, (uint8_t *)&v9, 2u);
        }
      }

    }
    objc_msgSend(this[43], "stop");
    if (*((_BYTE *)this + 104))
      *((_BYTE *)this + 104) = 0;
    *((_BYTE *)this + 353) = 2;
    Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures((Phase::Controller::SystemAudioIO::AudioIOBase *)this, 0);
    v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7) + 528));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 136315650;
      v10 = "AudioIOPlatformAdapter.mm";
      v11 = 1024;
      v12 = 349;
      v13 = 2048;
      v14 = this;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: paused IO", (uint8_t *)&v9, 0x1Cu);
    }
  }
}

void sub_2164F0F9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::Stop(id *this)
{
  Phase::Logger *InstancePtr;
  Phase::Logger *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  os_signpost_id_t v6;
  Phase::Logger *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  id *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 353) == 1)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)this);
    if (*((_BYTE *)InstancePtr + 536))
    {
      v3 = (Phase::Logger *)objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                              + 528)));
      v4 = Phase::Logger::GetInstancePtr(v3);
      v5 = os_signpost_id_generate(**(os_log_t **)(v4 + 528));
      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v6 = v5;
        if (os_signpost_enabled((os_log_t)v3))
        {
          LOWORD(v9) = 0;
          _os_signpost_emit_with_name_impl(&dword_2164CC000, (os_log_t)v3, OS_SIGNPOST_EVENT, v6, "Phase_AudioIO_Stop", (const char *)&unk_21676613F, (uint8_t *)&v9, 2u);
        }
      }

    }
    objc_msgSend(this[43], "stop");
    if (*((_BYTE *)this + 104))
      *((_BYTE *)this + 104) = 0;
    if (*((_BYTE *)this + 120))
      *((_BYTE *)this + 120) = 0;
    Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures((Phase::Controller::SystemAudioIO::AudioIOBase *)this, 0);
    v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7) + 528));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 136315650;
      v10 = "AudioIOPlatformAdapter.mm";
      v11 = 1024;
      v12 = 364;
      v13 = 2048;
      v14 = this;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: stopped IO", (uint8_t *)&v9, 0x1Cu);
    }
  }
  *((_BYTE *)this + 353) = 0;
}

void sub_2164F114C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::GetHWFormat(id *this, int a2)
{
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(this[43], "streamInfoForIndex:direction:", 0, a2 == 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "format");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_2164F11BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::UpdateFormats(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *this, unsigned int a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id *v7;
  id v8;
  id *v9;
  AVAudioFormat *v10;
  Phase::Logger *IsValidFormat;
  uint64_t v12;
  uint64_t result;
  char *v14;
  uint64_t v15;
  __int128 v16;
  NSObject *v17;
  const char *v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = (char *)this + 152;
  v4 = *(_QWORD *)this;
  *((_DWORD *)this + 22 * a2 + 39) = a2;
  (*(void (**)(void))(v4 + 136))();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (id *)&v5[88 * a2];
  v8 = v7[1];
  *++v7 = (id)v6;

  v9 = v7 + 1;
  objc_storeStrong(v7 + 1, *v7);
  IsValidFormat = (Phase::Logger *)*v7;
  if (*v7
    && (IsValidFormat = (Phase::Logger *)Phase::Controller::SystemAudioIO::IsValidFormat(IsValidFormat, v10),
        (IsValidFormat & 1) != 0))
  {
    if (!*v9)
      std::terminate();
    v12 = objc_msgSend(*v9, "streamDescription");
    result = 0;
    v14 = &v5[88 * a2];
    v15 = *(_QWORD *)(v12 + 32);
    v16 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)(v14 + 24) = *(_OWORD *)v12;
    *(_OWORD *)(v14 + 40) = v16;
    *((_QWORD *)v14 + 7) = v15;
  }
  else
  {
    v17 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(IsValidFormat) + 528));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = "output";
      v20 = "AudioIOPlatformAdapter.mm";
      v21 = 1024;
      v22 = 388;
      v19 = 136315906;
      if (a2 == 1)
        v18 = "input";
      v23 = 2048;
      v24 = this;
      v25 = 2080;
      v26 = v18;
      _os_log_impl(&dword_2164CC000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: error: invalid %s HW format!", (uint8_t *)&v19, 0x26u);
    }
    return 4294956433;
  }
  return result;
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::IsRunning(id *this)
{
  if (*((_BYTE *)this + 353) == 1)
    return objc_msgSend(this[43], "running");
  else
    return 0;
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::GetInputChannelCount(id *this)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(this[43], "streamInfoForIndex:direction:", 0, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "format");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "channelCount");

  return v3;
}

void sub_2164F13D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::GetOutputChannelCount(id *this)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(this[43], "streamInfoForIndex:direction:", 0, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "format");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "channelCount");

  return v3;
}

void sub_2164F144C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::GetOutputChannelLayout(id *this)
{
  void *v1;
  Phase::Controller::SystemAudioIO *v2;
  AVAudioFormat *v3;
  void *v4;

  objc_msgSend(this[43], "streamInfoForIndex:direction:", 0, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "format");
  v2 = (Phase::Controller::SystemAudioIO *)objc_claimAutoreleasedReturnValue();
  Phase::Controller::SystemAudioIO::GetOutputChannelLayout(v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_2164F14C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::GetCurrentOutputRoute(id *this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  std::vector<char> __p;

  objc_msgSend(this[43], "streamInfoForIndex:direction:", 0, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  Phase::Controller::SystemAudioIO::AudioIOBase::GetRenderedChannelLayout((Phase::Controller::SystemAudioIO::AudioIOBase *)this, &__p);
  Phase::Controller::AudioRouteDescription::AudioRouteDescription(a2, v4, (uint64_t)&__p);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }

}

void sub_2164F1558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::GetSampleRate(id *this)
{
  return objc_msgSend(this[43], "sampleRate");
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::GetMaximumFramesToRender(id *this)
{
  return objc_msgSend(this[43], "bufferFrameSize");
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::GetLastFrameCount(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *this)
{
  if (*((_QWORD *)this + 52) <= 1uLL)
    return 1;
  else
    return *((_QWORD *)this + 52);
}

id Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::CopyWorkGroup(id *this)
{
  void *v2;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(this[43], "workgroup");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void Phase::Controller::SystemAudioIO::AudioIOBase::IOProcError<Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *,unsigned int const&>(uint64_t a1, const char *a2, _QWORD *a3, unsigned int *a4)
{
  uint64_t ShouldFire;
  Phase::Logger *v8;
  NSObject *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  char *v15;
  char __str[4];
  char __s1[256];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  strcpy(__s1, "(%d): ");
  strcat(__s1, a2);
  ShouldFire = Phase::Throttle::ShouldFire((Phase::Throttle *)(a1 + 16), 0);
  if ((_DWORD)ShouldFire)
  {
    v8 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s1, ShouldFire, *a3, *a4);
    v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v8) + 528));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v11 = "AudioIOBase.hpp";
      v12 = 1024;
      v13 = 133;
      v14 = 2080;
      v15 = __str;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
    }
  }
}

uint64_t std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    ExtendedAudioBufferList_Destroy();
  return a1;
}

void caulk::make_string(caulk *this@<X0>, uint64_t a2@<X8>, ...)
{
  int v5;
  int v6;
  char *v7;
  size_t v8;
  int v9;
  va_list va;

  va_start(va, a2);
  v5 = vsnprintf(0, 0, (const char *)this, va);
  if (v5 <= 0)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    std::string::resize((std::string *)a2, (v5 + 1), 0);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = (char *)a2;
    else
      v7 = *(char **)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = vsnprintf(v7, v8, (const char *)this, va);
    std::string::resize((std::string *)a2, v9, 0);
  }
}

uint64_t Phase::Controller::AudioRouteDescription::AudioRouteDescription(uint64_t a1, void *a2, uint64_t a3)
{
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((_QWORD *)(a1 + 16), *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  return a1;
}

void sub_2164F1B28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,objc_object * {__strong}>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,objc_object * {__strong}>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24D5778C0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 8) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEjU8__strongP11objc_objectEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS8_jSB_EEEEEEDcSF_DpT0_(uint64_t a1, id *a2)
{

}

CA::AudioBuffers *CA::AudioBuffers::AudioBuffers(CA::AudioBuffers *a1, uint64_t a2)
{
  std::logic_error *exception;

  *(_QWORD *)a1 = a2;
  if (!a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_CreateWithFormat failed");
  }
  CA::AudioBuffers::Prepare(a1);
  return a1;
}

void sub_2164F1C0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::AudioBuffers::Prepare(CA::AudioBuffers *this)
{
  uint64_t result;
  std::logic_error *exception;

  result = ExtendedAudioBufferList_Prepare();
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_Prepare failed");
  }
  return result;
}

void sub_2164F1C74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t Phase::Throttle::ShouldFire(Phase::Throttle *this, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = mach_absolute_time();
  v5 = *((_QWORD *)this + 1);
  if (!v5)
  {
    *((_QWORD *)this + 1) = v4;
    v5 = v4;
  }
  v6 = v4 - v5;
  if (a2)
    *a2 = (double)v6 * 0.0000000416666667;
  if ((unint64_t)v6 >= *(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    result = (*((_DWORD *)this + 4) + 1);
    *((_DWORD *)this + 4) = 0;
  }
  else
  {
    result = 0;
    ++*((_DWORD *)this + 4);
  }
  return result;
}

Phase::Controller::SystemAudioIO::AudioIOUnit *Phase::Controller::SystemAudioIO::AudioIOUnit::AudioIOUnit(Phase::Controller::SystemAudioIO::AudioIOUnit *this, Phase::Controller::VoiceManager *a2, double a3)
{
  Phase::Controller::SystemAudioIO::Implementation *v5;
  id *v6;
  Phase::Controller::SystemAudioIO::Implementation *v8;

  *(_QWORD *)this = off_24D5776D0;
  *((_QWORD *)this + 1) = a2;
  *((_OWORD *)this + 1) = xmmword_2166F7500;
  *((_DWORD *)this + 8) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 112) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_BYTE *)this + 136) = 0;
  *((_DWORD *)this + 36) = 0;
  std::array<Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration,2ul>::array((uint64_t)this + 152);
  *((_DWORD *)this + 82) = 0;
  *(_QWORD *)this = &off_24D577908;
  *((double *)this + 42) = a3;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_BYTE *)this + 360) = 0;
  v5 = (Phase::Controller::SystemAudioIO::Implementation *)operator new();
  Phase::Controller::SystemAudioIO::Implementation::Implementation(v5, this);
  v8 = v5;
  std::shared_ptr<Phase::Controller::SystemAudioIO::Implementation>::shared_ptr[abi:ne180100]<Phase::Controller::SystemAudioIO::Implementation,std::default_delete<Phase::Controller::SystemAudioIO::Implementation>,void>((uint64_t *)this + 46, (uint64_t *)&v8);
  v6 = (id *)v8;
  v8 = 0;
  if (v6)
  {
    Phase::Controller::SystemAudioIO::Implementation::~Implementation(v6);
    MEMORY[0x2199F9D70]();
  }
  *((_QWORD *)this + 48) = 0;
  return this;
}

void sub_2164F1E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  id *v2;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<Phase::Controller::SystemAudioIO::Implementation>::reset[abi:ne180100]((id **)va, 0);

  Phase::Controller::SystemAudioIO::AudioIOBase::~AudioIOBase((Phase::Controller::SystemAudioIO::AudioIOBase *)v2);
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOUnit::~AudioIOUnit(id *this)
{
  *this = &off_24D577908;
  Phase::Controller::SystemAudioIO::AudioIOUnit::Cleanup((Phase::Controller::SystemAudioIO::AudioIOUnit *)this);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(this + 46));

  Phase::Controller::SystemAudioIO::AudioIOBase::~AudioIOBase((Phase::Controller::SystemAudioIO::AudioIOBase *)this);
}

{
  Phase::Controller::SystemAudioIO::AudioIOUnit::~AudioIOUnit(this);
  JUMPOUT(0x2199F9D70);
}

OpaqueAudioComponentInstance *Phase::Controller::SystemAudioIO::AudioIOUnit::Cleanup(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  void *v2;
  void *v3;
  OpaqueAudioComponentInstance *result;

  v2 = (void *)*((_QWORD *)this + 44);
  if (v2)
  {
    objc_msgSend(v2, "stopHardware");
    objc_msgSend(*((id *)this + 44), "deallocateRenderResources");
    objc_msgSend(*((id *)this + 44), "invalidateAudioUnit");
    v3 = (void *)*((_QWORD *)this + 44);
    *((_QWORD *)this + 44) = 0;

  }
  result = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 43);
  if (result)
  {
    result = (OpaqueAudioComponentInstance *)AudioComponentInstanceDispose(result);
    *((_QWORD *)this + 43) = 0;
  }
  return result;
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::EnableBus(Phase::Controller::SystemAudioIO::AudioIOUnit *this, unsigned int a2, int a3)
{
  uint64_t v6;
  uint64_t result;
  NSObject *v8;
  _BOOL4 v9;
  const char *v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 2)
    std::terminate();
  v6 = *((_QWORD *)this + 44);
  if (v6)
  {
    v6 = objc_msgSend((id)v6, "renderResourcesAllocated");
    if ((v6 & 1) != 0)
      return 4294956447;
  }
  *((_BYTE *)this + 88 * a2 + 152) = a3;
  v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v6) + 528));
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v9)
  {
    v10 = "Disabled";
    v12 = "AudioIOUnit.mm";
    v14 = 328;
    v15 = 2080;
    v11 = 136315906;
    v13 = 1024;
    if (a3)
      v10 = "Enabled";
    v16 = v10;
    v17 = 1024;
    v18 = a2;
    _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s bus %d for Audio IO.", (uint8_t *)&v11, 0x22u);
    return 0;
  }
  return result;
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::Initialize(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  OpaqueAudioComponent *Next;
  uint64_t v9;
  void *v10;
  Phase::Logger *v11;
  Phase::Logger *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int16x8_t v17;
  void **v18;
  NSObject *v19;
  const char *v20;
  Phase::ChannelLayout *v21;
  const AudioChannelLayout *v22;
  void *p_p;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  Phase::Logger *v49;
  void *v50;
  void *__p;
  char v52;
  void *v53[2];
  char v54;
  id v55;
  _BYTE v56[40];
  std::__shared_weak_count *v57;
  _BYTE buf[32];
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)*((_QWORD *)this + 44);
  if (!v2 || (objc_msgSend(v2, "renderResourcesAllocated") & 1) == 0)
  {
    if (*((_QWORD *)this + 43))
    {
      v4 = (void *)*((_QWORD *)this + 44);
      if (v4)
      {
LABEL_6:
        objc_msgSend(v4, "setOutputEnabled:", *((unsigned __int8 *)this + 152));
        objc_msgSend(*((id *)this + 44), "setInputEnabled:", *((unsigned __int8 *)this + 240));
        v5 = (void *)*((_QWORD *)this + 44);
        v55 = 0;
        objc_msgSend(v5, "allocateRenderResourcesAndReturnError:", &v55);
        v6 = v55;
        v7 = v6;
        if (v6)
        {
          v3 = objc_msgSend(v6, "code");
LABEL_60:

          return v3;
        }
        if (*((_BYTE *)this + 152))
        {
          v11 = (Phase::Logger *)objc_msgSend(*((id *)this + 44), "isOutputEnabled");
          if ((v11 & 1) == 0)
          {
            v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11) + 528));
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "AudioIOUnit.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 370;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = this;
              v20 = "%25s:%-5d audioio@%p: output is not enabled on the IOUnit!";
LABEL_30:
              _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x1Cu);
            }
LABEL_31:
            v3 = 4294956420;
            goto LABEL_60;
          }
          v3 = (*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *, _QWORD))(*(_QWORD *)this
                                                                                                  + 144))(this, 0);
          if ((_DWORD)v3)
            goto LABEL_60;
          Phase::Controller::SystemAudioIO::AudioIOUnit::SetOutputProvider(this);
        }
        if (!*((_BYTE *)this + 240))
          goto LABEL_21;
        v12 = (Phase::Logger *)objc_msgSend(*((id *)this + 44), "isInputEnabled");
        if ((v12 & 1) != 0)
        {
          v3 = (*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *, uint64_t))(*(_QWORD *)this + 144))(this, 1);
          if ((_DWORD)v3)
            goto LABEL_60;
          Phase::Controller::SystemAudioIO::AudioIOUnit::SetInputHandler(this);
LABEL_21:
          (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *, _QWORD))(*(_QWORD *)this + 136))(this, 0);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *))(*(_QWORD *)this + 88))(this);
          v49 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
          v14 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v49)
                                                                                              + 528)));
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            if (v13)
            {
              v15 = objc_msgSend(v13, "streamDescription");
              v16 = *(_OWORD *)v15;
              v17 = *(int16x8_t *)(v15 + 16);
              v59 = *(_QWORD *)(v15 + 32);
              *(_OWORD *)buf = v16;
              *(int16x8_t *)&buf[16] = v17;
              v18 = v53;
              CA::StreamDescription::AsString((CA::StreamDescription *)buf, (uint64_t)v53, v17);
              if (v54 < 0)
                v18 = (void **)v53[0];
            }
            else
            {
              v18 = (void **)"invalid";
            }
            if (v49)
            {
              v21 = (Phase::ChannelLayout *)-[Phase::Logger layout](v49, "layout");
              Phase::ChannelLayout::GetStringDescription(v21, v22);
              if (v52 >= 0)
                p_p = &__p;
              else
                p_p = __p;
              *(_DWORD *)v56 = 136315906;
              *(_QWORD *)&v56[4] = "AudioIOUnit.mm";
              *(_WORD *)&v56[12] = 1024;
              *(_DWORD *)&v56[14] = 403;
              *(_WORD *)&v56[18] = 2080;
              *(_QWORD *)&v56[20] = v18;
              *(_WORD *)&v56[28] = 2080;
              *(_QWORD *)&v56[30] = p_p;
              _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d initialized: output asbd <%s>, channel layout: \n%s", v56, 0x26u);
              if (v52 < 0)
                operator delete(__p);
            }
            else
            {
              *(_DWORD *)v56 = 136315906;
              *(_QWORD *)&v56[4] = "AudioIOUnit.mm";
              *(_WORD *)&v56[12] = 1024;
              *(_DWORD *)&v56[14] = 403;
              *(_WORD *)&v56[18] = 2080;
              *(_QWORD *)&v56[20] = v18;
              *(_WORD *)&v56[28] = 2080;
              *(_QWORD *)&v56[30] = "None";
              _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d initialized: output asbd <%s>, channel layout: \n%s", v56, 0x26u);
            }
            if (v13 && v54 < 0)
              operator delete(v53[0]);
          }

          v24 = (uint64_t *)*((_QWORD *)this + 46);
          v25 = (std::__shared_weak_count *)v24[1];
          if (!v25 || (v26 = *v24, (v27 = std::__shared_weak_count::lock(v25)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v28 = v27;
          p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
          do
            v30 = __ldxr(p_shared_weak_owners);
          while (__stxr(v30 + 1, p_shared_weak_owners));
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v28);
          }
          objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter", v49);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = v33;
          v35 = *MEMORY[0x24BDB1728];
          v36 = v24[3];
          v37 = MEMORY[0x24BDAC760];
          *(_QWORD *)buf = MEMORY[0x24BDAC760];
          *(_QWORD *)&buf[8] = 3321888768;
          *(_QWORD *)&buf[16] = ___ZN5Phase10Controller13SystemAudioIO14Implementation10InitializeEv_block_invoke;
          *(_QWORD *)&buf[24] = &__block_descriptor_48_ea8_32c74_ZTSNSt3__18weak_ptrIN5Phase10Controller13SystemAudioIO14ImplementationEEE_e24_v16__0__NSNotification_8l;
          v59 = v26;
          v60 = v28;
          do
            v38 = __ldxr(p_shared_weak_owners);
          while (__stxr(v38 + 1, p_shared_weak_owners));
          objc_msgSend(v33, "addObserverForName:object:queue:usingBlock:", v35, v36, 0, buf);
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = (void *)v24[4];
          v24[4] = v39;

          objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = v41;
          v43 = *MEMORY[0x24BDB15D8];
          v44 = v24[3];
          *(_QWORD *)v56 = v37;
          *(_QWORD *)&v56[8] = 3321888768;
          *(_QWORD *)&v56[16] = ___ZN5Phase10Controller13SystemAudioIO14Implementation10InitializeEv_block_invoke_50;
          *(_QWORD *)&v56[24] = &__block_descriptor_48_ea8_32c74_ZTSNSt3__18weak_ptrIN5Phase10Controller13SystemAudioIO14ImplementationEEE_e24_v16__0__NSNotification_8l;
          *(_QWORD *)&v56[32] = v26;
          v57 = v28;
          do
            v45 = __ldxr(p_shared_weak_owners);
          while (__stxr(v45 + 1, p_shared_weak_owners));
          objc_msgSend(v41, "addObserverForName:object:queue:usingBlock:", v43, v44, 0, v56);
          v46 = objc_claimAutoreleasedReturnValue();
          v47 = (void *)v24[5];
          v24[5] = v46;

          if (v57)
            std::__shared_weak_count::__release_weak(v57);
          if (v60)
            std::__shared_weak_count::__release_weak(v60);
          std::__shared_weak_count::__release_weak(v28);

          v3 = 0;
          goto LABEL_60;
        }
        v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v12) + 528));
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AudioIOUnit.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 388;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = this;
          v20 = "%25s:%-5d audioio@%p: input is not enabled on the IOUnit!";
          goto LABEL_30;
        }
        goto LABEL_31;
      }
    }
    Next = AudioComponentFindNext(0, (const AudioComponentDescription *)"uouacoirlppa");
    if (Next)
    {
      v3 = AudioComponentInstanceNew(Next, (AudioComponentInstance *)this + 43);
      if ((_DWORD)v3)
      {
LABEL_12:
        Phase::Controller::SystemAudioIO::AudioIOUnit::Cleanup(this);
        return v3;
      }
      objc_msgSend(MEMORY[0x24BDB6BD8], "auAudioUnitForAudioUnit:", *((_QWORD *)this + 43));
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = (void *)*((_QWORD *)this + 44);
      *((_QWORD *)this + 44) = v9;

      v4 = (void *)*((_QWORD *)this + 44);
      if (v4)
        goto LABEL_6;
    }
    v3 = 4294956421;
    goto LABEL_12;
  }
  return 0;
}

void sub_2164F2640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  void *v31;
  void *v32;

  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOUnit::SetOutputProvider(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  void *v2;
  uint64_t v3;
  Phase::Controller::SystemAudioIO *v4;
  AVAudioChannelLayout *v5;
  unint64_t RenderedChannels;
  _DWORD *v7;
  unsigned int v8;
  int NumActiveChannels;
  unint64_t v10;
  std::vector<char>::pointer end;
  char *v12;
  std::vector<char>::pointer begin;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  _QWORD v21[9];
  int v22;
  std::vector<char> v23;
  _QWORD v24[4];
  _QWORD v25[4];
  _QWORD v26[4];

  v2 = (void *)*((_QWORD *)this + 44);
  if (!v2 || (objc_msgSend(v2, "isOutputEnabled") & 1) == 0)
    goto LABEL_34;
  v26[0] = 0;
  v26[1] = v26;
  v26[3] = (char *)this + 40;
  v25[0] = 0;
  v25[1] = v25;
  v3 = *(_QWORD *)this;
  v25[3] = *((_QWORD *)this + 1);
  v24[0] = 0;
  v24[1] = v24;
  v24[3] = (char *)this + 152;
  v26[2] = 0x2020000000;
  v25[2] = 0x2020000000;
  v24[2] = 0x2020000000;
  (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *))(v3 + 88))(this);
  v4 = (Phase::Controller::SystemAudioIO *)objc_claimAutoreleasedReturnValue();
  RenderedChannels = Phase::Controller::SystemAudioIO::GetRenderedChannels(v4, v5);
  if (v4)
  {
    v7 = (_DWORD *)-[Phase::Controller::SystemAudioIO layout](v4, "layout");
    v8 = v7[2];
    if (v8 <= 1)
      v8 = 1;
    std::vector<char>::vector(&v23, 20 * v8 + 12);
    memcpy(v23.__begin_, v7, 20 * v7[2] + 12);
    NumActiveChannels = Phase::ChannelLayout::GetNumActiveChannels((int **)&v23, RenderedChannels);
    if (v23.__begin_)
    {
      v23.__end_ = v23.__begin_;
      operator delete(v23.__begin_);
    }
  }
  else
  {
    NumActiveChannels = 0;
  }
  v10 = 0;
  memset(&v23, 0, sizeof(v23));
  while (v10 < (*(unsigned int (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *))(*(_QWORD *)this + 80))(this))
  {
    if (((RenderedChannels >> v10) & 1) != 0)
    {
      end = v23.__end_;
      if (v23.__end_ >= v23.__end_cap_.__value_)
      {
        begin = v23.__begin_;
        v14 = (v23.__end_ - v23.__begin_) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = v23.__end_cap_.__value_ - v23.__begin_;
        if ((v23.__end_cap_.__value_ - v23.__begin_) >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v23.__end_cap_, v17);
          begin = v23.__begin_;
          end = v23.__end_;
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[4 * v14];
        *(_DWORD *)v19 = v10;
        v12 = v19 + 4;
        while (end != begin)
        {
          v20 = *((_DWORD *)end - 1);
          end -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        v23.__begin_ = v19;
        v23.__end_ = v12;
        v23.__end_cap_.__value_ = &v18[4 * v17];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *(_DWORD *)v23.__end_ = v10;
        v12 = end + 4;
      }
      v23.__end_ = v12;
    }
    ++v10;
  }
  if (NumActiveChannels != (v23.__end_ - v23.__begin_) >> 2)
LABEL_34:
    std::terminate();
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 3221225472;
  v21[2] = ___ZN5Phase10Controller13SystemAudioIO11AudioIOUnit17SetOutputProviderEv_block_invoke;
  v21[3] = &unk_24D5779A8;
  v22 = NumActiveChannels;
  v21[4] = v26;
  v21[5] = v25;
  v21[7] = this;
  v21[8] = RenderedChannels;
  v21[6] = v24;
  objc_msgSend(*((id *)this + 44), "setOutputProvider:", v21);
  if (v23.__begin_)
  {
    v23.__end_ = v23.__begin_;
    operator delete(v23.__begin_);
  }

  _Block_object_dispose(v24, 8);
  _Block_object_dispose(v25, 8);
  _Block_object_dispose(v26, 8);
}

void sub_2164F29AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  uint64_t v28;

  if (__p)
    operator delete(__p);

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v28 - 112), 8);
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOUnit::SetInputHandler(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  void *v2;
  int v3;
  int v4;
  _QWORD v5[7];
  int v6;
  int v7;
  _QWORD v8[4];
  _QWORD v9[4];

  v2 = (void *)*((_QWORD *)this + 44);
  if (!v2)
    goto LABEL_6;
  if ((objc_msgSend(v2, "isInputEnabled") & 1) == 0)
    goto LABEL_6;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2020000000;
  v9[3] = (char *)this + 240;
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2020000000;
  v8[3] = *((_QWORD *)this + 1);
  v3 = *((_DWORD *)this + 73);
  if (!v3 || (v4 = *((_DWORD *)this + 72)) == 0)
LABEL_6:
    std::terminate();
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 3221225472;
  v5[2] = ___ZN5Phase10Controller13SystemAudioIO11AudioIOUnit15SetInputHandlerEv_block_invoke;
  v5[3] = &unk_24D5779D0;
  v6 = v3;
  v7 = v4;
  v5[4] = v9;
  v5[5] = v8;
  v5[6] = this;
  objc_msgSend(*((id *)this + 44), "setInputHandler:", v5);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v9, 8);
}

void sub_2164F2AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOUnit::Uninitialize(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)*((_QWORD *)this + 44);
  if (v2)
  {
    v2 = (void *)objc_msgSend(v2, "renderResourcesAllocated");
    if ((_DWORD)v2)
    {
      v3 = *((_QWORD *)this + 46);
      objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "removeObserver:", *(_QWORD *)(v3 + 32));

      v5 = *(void **)(v3 + 32);
      *(_QWORD *)(v3 + 32) = 0;

      objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "removeObserver:", *(_QWORD *)(v3 + 40));

      v7 = *(void **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;

      objc_msgSend(*((id *)this + 44), "stopHardware");
      v2 = (void *)objc_msgSend(*((id *)this + 44), "deallocateRenderResources");
    }
  }
  v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v2) + 528));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 136315394;
    v10 = "AudioIOUnit.mm";
    v11 = 1024;
    v12 = 420;
    _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Uninitialized audio IO", (uint8_t *)&v9, 0x12u);
  }
}

void sub_2164F2C48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::Start(id *this)
{
  Phase::Logger *InstancePtr;
  Phase::Logger *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  os_signpost_id_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  Phase::Logger *v25;
  Phase::Logger *v26;
  NSObject *v27;
  id v28;
  uint64_t v29;
  Phase::Controller::SystemAudioIO::AudioIOBase **v30;
  void *v31;
  void *v32;
  void *v33;
  Phase::Logger *v34;
  int v35;
  NSObject *v36;
  _QWORD *v37;
  void *v38;
  id v39;
  const char *v40;
  size_t v41;
  _QWORD *v42;
  void *v43;
  id v44;
  const char *v45;
  size_t v46;
  void *v47;
  void *v48;
  _QWORD *v49;
  _QWORD *v50;
  const std::locale::facet *v51;
  void *locale;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  void **v56;
  void *v58[2];
  char v59;
  id v60;
  std::vector<char> __p;
  std::locale v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint8_t v65[4];
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  void **v70;
  uint8_t buf[12];
  __int16 v72;
  _BYTE v73[18];
  __int16 v74;
  int v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  int v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  int v87;
  void *v88;
  char v89;
  _QWORD v90[22];

  v90[19] = *MEMORY[0x24BDAC8D0];
  if ((*((unsigned __int8 *)this + 360) | 2) != 2)
    return 0;
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)this);
  if (*((_BYTE *)InstancePtr + 536))
  {
    v3 = (Phase::Logger *)objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                            + 528)));
    v4 = Phase::Logger::GetInstancePtr(v3);
    v5 = os_signpost_id_generate(**(os_log_t **)(v4 + 528));
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v6 = v5;
      if (os_signpost_enabled((os_log_t)v3))
      {
        if (*((_BYTE *)this + 240))
          v7 = "in";
        else
          v7 = "-";
        if (*((_BYTE *)this + 152))
          v8 = "out";
        else
          v8 = "-";
        objc_msgSend(this[31], "sampleRate");
        v10 = v9;
        v11 = objc_msgSend(this[31], "channelCount");
        objc_msgSend(this[20], "sampleRate");
        v13 = v12;
        v14 = objc_msgSend(this[20], "channelCount");
        objc_msgSend(this[32], "sampleRate");
        v16 = v15;
        v17 = objc_msgSend(this[32], "channelCount");
        objc_msgSend(this[21], "sampleRate");
        v19 = v18;
        v20 = objc_msgSend(this[21], "channelCount");
        *(_DWORD *)buf = 136317442;
        *(_QWORD *)&buf[4] = v7;
        v72 = 2080;
        *(_QWORD *)v73 = v8;
        *(_WORD *)&v73[8] = 2048;
        *(_QWORD *)&v73[10] = v10;
        v74 = 1024;
        v75 = v11;
        v76 = 2048;
        v77 = v13;
        v78 = 1024;
        v79 = v14;
        v80 = 2048;
        v81 = v16;
        v82 = 1024;
        v83 = v17;
        v84 = 2048;
        v85 = v19;
        v86 = 1024;
        v87 = v20;
        _os_signpost_emit_with_name_impl(&dword_2164CC000, (os_log_t)v3, OS_SIGNPOST_EVENT, v6, "Phase_AudioIO_Start", "enable [%s, %s], hardware format [%.f/%d, %.f/%d], client format [%.f/%d, %.f/%d]", buf, 0x56u);
      }
    }

  }
  v21 = this[44];
  if (v21 && (objc_msgSend(v21, "renderResourcesAllocated") & 1) != 0
    || (v22 = (*((uint64_t (**)(id *))*this + 3))(this), !(_DWORD)v22))
  {
    Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures((Phase::Controller::SystemAudioIO::AudioIOBase *)this, 1);
    v23 = this[44];
    v60 = 0;
    objc_msgSend(v23, "startHardwareAndReturnError:", &v60);
    v24 = v60;
    v25 = (Phase::Logger *)objc_msgSend(v24, "code");
    v22 = (uint64_t)v25;
    if ((_DWORD)v25)
    {
      Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures((Phase::Controller::SystemAudioIO::AudioIOBase *)this, 0);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD1100], (int)v22, 0);
      v26 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
      v27 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v26)
                                                                                          + 528)));
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        -[Phase::Logger description](v26, "description");
        v28 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v29 = objc_msgSend(v28, "UTF8String");
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AudioIOUnit.mm";
        v72 = 1024;
        *(_DWORD *)v73 = 456;
        *(_WORD *)&v73[4] = 2080;
        *(_QWORD *)&v73[6] = v29;
        _os_log_impl(&dword_2164CC000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Error starting Audio IO. Err = %s", buf, 0x1Cu);

      }
    }
    else
    {
      *((_BYTE *)this + 360) = 1;
      v26 = (Phase::Logger *)objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v25)
                                                                                               + 528)));
      if (os_log_type_enabled((os_log_t)v26, OS_LOG_TYPE_DEFAULT))
      {
        v30 = (Phase::Controller::SystemAudioIO::AudioIOBase **)this[46];
        objc_msgSend(MEMORY[0x24BDB1858], "sharedInstance");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "currentRoute");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "outputs");
        v33 = (void *)objc_claimAutoreleasedReturnValue();

        v34 = (Phase::Logger *)objc_msgSend(v33, "count");
        v35 = (int)v34;
        if ((_DWORD)v34)
        {
          if ((_DWORD)v34 != 1)
          {
            v36 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v34) + 528));
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "AudioIOUnit.mm";
              v72 = 1024;
              *(_DWORD *)v73 = 174;
              *(_WORD *)&v73[4] = 1024;
              *(_DWORD *)&v73[6] = v35;
              _os_log_impl(&dword_2164CC000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d AVAudioSession route has more than 1 output; using the first of %i outputs.",
                buf,
                0x18u);
            }
          }
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
          v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73[2], (uint64_t)"AVAudioSession ", 15);
          objc_msgSend(v33, "objectAtIndexedSubscript:", 0);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "portName");
          v39 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v40 = (const char *)objc_msgSend(v39, "UTF8String");
          v41 = strlen(v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v40, v41);

          v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73[2], (uint64_t)" of type ", 9);
          objc_msgSend(v33, "objectAtIndexedSubscript:", 0);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v43, "portType");
          v44 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v45 = (const char *)objc_msgSend(v44, "UTF8String");
          v46 = strlen(v45);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v45, v46);

          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73[2], (uint64_t)", with ", 7);
          objc_msgSend(v33, "objectAtIndexedSubscript:", 0);
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v47, "channels");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v48, "count");
          v49 = (_QWORD *)std::ostream::operator<<();
          v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" channels", 9);
          std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(_QWORD *)(*v50 - 24)));
          v51 = std::locale::use_facet(&v62, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
          std::locale::~locale(&v62);
          std::ostream::put();
          std::ostream::flush();

          Phase::Controller::SystemAudioIO::AudioIOBase::GetRenderedChannelLayout(v30[2], &__p);
          Phase::ChannelLayout::GetStringDescription((unsigned int **)&__p);
          if ((v64 & 0x80u) == 0)
            locale = &v62;
          else
            locale = v62.__locale_;
          if ((v64 & 0x80u) == 0)
            v53 = v64;
          else
            v53 = v63;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73[2], (uint64_t)locale, v53);
          if ((char)v64 < 0)
            operator delete(v62.__locale_);
          if (__p.__begin_)
          {
            __p.__end_ = __p.__begin_;
            operator delete(__p.__begin_);
          }
          std::stringbuf::str();
          *(_QWORD *)buf = *MEMORY[0x24BEDB7F0];
          v54 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
          *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
          *(_QWORD *)&v73[2] = v54;
          *(_QWORD *)&v73[10] = MEMORY[0x24BEDB848] + 16;
          if (v89 < 0)
            operator delete(v88);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x2199F9CD4](v90);
        }
        else
        {
          v55 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v34) + 528));
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AudioIOUnit.mm";
            v72 = 1024;
            *(_DWORD *)v73 = 165;
            _os_log_impl(&dword_2164CC000, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d New Audio session route has no outputs.", buf, 0x12u);
          }
          std::string::basic_string[abi:ne180100]<0>(v58, "Invalid AVAudioSession");
        }

        v56 = v58;
        if (v59 < 0)
          v56 = (void **)v58[0];
        *(_DWORD *)v65 = 136315650;
        v66 = "AudioIOUnit.mm";
        v67 = 1024;
        v68 = 462;
        v69 = 2080;
        v70 = v56;
        _os_log_impl(&dword_2164CC000, (os_log_t)v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Started Audio IO on output: %s", v65, 0x1Cu);
        if (v59 < 0)
          operator delete(v58[0]);
      }
    }

  }
  return v22;
}

void sub_2164F3404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOUnit::Pause(id *this)
{
  Phase::Logger *InstancePtr;
  Phase::Logger *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  os_signpost_id_t v6;
  Phase::Logger *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 360) == 1)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)this);
    if (*((_BYTE *)InstancePtr + 536))
    {
      v3 = (Phase::Logger *)objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                              + 528)));
      v4 = Phase::Logger::GetInstancePtr(v3);
      v5 = os_signpost_id_generate(**(os_log_t **)(v4 + 528));
      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v6 = v5;
        if (os_signpost_enabled((os_log_t)v3))
        {
          LOWORD(v9) = 0;
          _os_signpost_emit_with_name_impl(&dword_2164CC000, (os_log_t)v3, OS_SIGNPOST_EVENT, v6, "Phase_AudioIO_Pause", (const char *)&unk_21676613F, (uint8_t *)&v9, 2u);
        }
      }

    }
    objc_msgSend(this[44], "stopHardware");
    if (*((_BYTE *)this + 104))
      *((_BYTE *)this + 104) = 0;
    *((_BYTE *)this + 360) = 2;
    Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures((Phase::Controller::SystemAudioIO::AudioIOBase *)this, 0);
    v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7) + 528));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 136315394;
      v10 = "AudioIOUnit.mm";
      v11 = 1024;
      v12 = 485;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Paused Audio IO.", (uint8_t *)&v9, 0x12u);
    }
  }
}

void sub_2164F36B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOUnit::Stop(id *this)
{
  Phase::Logger *InstancePtr;
  Phase::Logger *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  os_signpost_id_t v6;
  Phase::Logger *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 360) == 1)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)this);
    if (*((_BYTE *)InstancePtr + 536))
    {
      v3 = (Phase::Logger *)objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                              + 528)));
      v4 = Phase::Logger::GetInstancePtr(v3);
      v5 = os_signpost_id_generate(**(os_log_t **)(v4 + 528));
      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v6 = v5;
        if (os_signpost_enabled((os_log_t)v3))
        {
          LOWORD(v9) = 0;
          _os_signpost_emit_with_name_impl(&dword_2164CC000, (os_log_t)v3, OS_SIGNPOST_EVENT, v6, "Phase_AudioIO_Stop", (const char *)&unk_21676613F, (uint8_t *)&v9, 2u);
        }
      }

    }
    objc_msgSend(this[44], "stopHardware");
    if (*((_BYTE *)this + 104))
      *((_BYTE *)this + 104) = 0;
    if (*((_BYTE *)this + 120))
      *((_BYTE *)this + 120) = 0;
  }
  *((_BYTE *)this + 360) = 0;
  Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures((Phase::Controller::SystemAudioIO::AudioIOBase *)this, 0);
  v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7) + 528));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 136315394;
    v10 = "AudioIOUnit.mm";
    v11 = 1024;
    v12 = 504;
    _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Stopped Audio IO.", (uint8_t *)&v9, 0x12u);
  }
}

void sub_2164F3858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::IsRunning(id *this)
{
  return objc_msgSend(this[44], "isRunning");
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::GetInputChannelCount(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = (void *)*((_QWORD *)this + 44);
  if (!v2 || (objc_msgSend(v2, "renderResourcesAllocated") & 1) == 0)
    std::terminate();
  (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *, uint64_t))(*(_QWORD *)this + 136))(this, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
    v5 = objc_msgSend(v3, "channelCount");
  else
    v5 = 0;

  return v5;
}

void sub_2164F38E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::GetOutputChannelCount(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = (void *)*((_QWORD *)this + 44);
  if (!v2 || (objc_msgSend(v2, "renderResourcesAllocated") & 1) == 0)
    std::terminate();
  (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *, _QWORD))(*(_QWORD *)this + 136))(this, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
    v5 = objc_msgSend(v3, "channelCount");
  else
    v5 = 0;

  return v5;
}

void sub_2164F3960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id Phase::Controller::SystemAudioIO::AudioIOUnit::GetOutputChannelLayout(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  void *v2;
  Phase::Controller::SystemAudioIO *v3;
  AVAudioFormat *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 44);
  if (!v2 || (objc_msgSend(v2, "renderResourcesAllocated") & 1) == 0)
    std::terminate();
  (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *, _QWORD))(*(_QWORD *)this + 136))(this, 0);
  v3 = (Phase::Controller::SystemAudioIO *)objc_claimAutoreleasedReturnValue();
  Phase::Controller::SystemAudioIO::GetOutputChannelLayout(v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_2164F39D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOUnit::GetCurrentOutputRoute(Phase::Controller::SystemAudioIO::AudioIOUnit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  std::vector<char> __p;

  v3 = *((_QWORD *)this + 46);
  objc_msgSend(MEMORY[0x24BDB1858], "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "currentRoute");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "outputs");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v6, "count"))
  {
    objc_msgSend(v6, "objectAtIndexedSubscript:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    Phase::Controller::SystemAudioIO::AudioIOBase::GetRenderedChannelLayout(*(Phase::Controller::SystemAudioIO::AudioIOBase **)(v3 + 16), &__p);
    Phase::Controller::AudioRouteDescription::AudioRouteDescription(a2, v7, (uint64_t)&__p);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }

  }
  else
  {
    Phase::Controller::SystemAudioIO::AudioIOBase::GetRenderedChannelLayout(*(Phase::Controller::SystemAudioIO::AudioIOBase **)(v3 + 16), &__p);
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((_QWORD *)(a2 + 16), __p.__begin_, (uint64_t)__p.__end_, __p.__end_ - __p.__begin_);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
  }

}

void sub_2164F3ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  uint64_t v12;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,objc_object * {__strong}>,(std::__variant_detail::_Trait)1>::~__dtor(v12);
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

double Phase::Controller::SystemAudioIO::AudioIOUnit::GetSampleRate(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  Phase::Logger *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  NSObject *v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (Phase::Logger *)*((_QWORD *)this + 44);
  if (v2
    && (v2 = (Phase::Logger *)-[Phase::Logger renderResourcesAllocated](v2, "renderResourcesAllocated"),
        (v2 & 1) != 0))
  {
    objc_msgSend(*((id *)this + 44), "outputBusses");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "format");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "sampleRate");
    v7 = v6;

  }
  else
  {
    v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v2) + 528));
    v7 = 48000.0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v10 = 136315394;
      v11 = "AudioIOUnit.mm";
      v12 = 1024;
      v13 = 543;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Getting sample rate from uninitialized AudioIOUnit - returning default value of 48000", (uint8_t *)&v10, 0x12u);
    }
  }
  return v7;
}

void sub_2164F3C7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::GetMaximumFramesToRender(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  uint64_t v2;
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 44);
  if (v2)
  {
    v2 = objc_msgSend((id)v2, "renderResourcesAllocated");
    if ((v2 & 1) != 0)
      return objc_msgSend(*((id *)this + 44), "maximumFramesToRender");
  }
  v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v2) + 528));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = 136315394;
    v6 = "AudioIOUnit.mm";
    v7 = 1024;
    v8 = 554;
    _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Getting maximum frames to rernder from uninitialized AudioIOUnit - returning default value of 4096", (uint8_t *)&v5, 0x12u);
  }
  return 4096;
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::GetLastFrameCount(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  uint64_t v2;
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 44);
  if (v2)
  {
    v2 = objc_msgSend((id)v2, "renderResourcesAllocated");
    if ((v2 & 1) != 0)
      return *((_QWORD *)this + 48);
  }
  v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v2) + 528));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = 136315394;
    v6 = "AudioIOUnit.mm";
    v7 = 1024;
    v8 = 565;
    _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Getting maximum frames to rernder from uninitialized AudioIOUnit - returning default value of 4096", (uint8_t *)&v5, 0x12u);
  }
  return 4096;
}

id Phase::Controller::SystemAudioIO::AudioIOUnit::GetHWFormat(Phase::Controller::SystemAudioIO::AudioIOUnit *this, unsigned int a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = (void *)*((_QWORD *)this + 44);
  if (a2 == 1)
    objc_msgSend(v3, "inputBusses");
  else
    objc_msgSend(v3, "outputBusses");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "count") <= (unint64_t)a2)
  {
    v6 = 0;
  }
  else
  {
    objc_msgSend(v4, "objectAtIndexedSubscript:");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "format");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

void sub_2164F3EF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::UpdateFormats(Phase::Controller::SystemAudioIO::AudioIOUnit *this, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  id *v10;
  void *v11;
  char *v12;
  id *v13;
  void *v14;
  void *v15;
  id v16;
  double v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  Phase::Logger *v22;
  NSObject *v23;
  int v24;
  void *v25;
  void **v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  void *__p[2];
  char v39;
  _BYTE buf[12];
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  void **v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)*((_QWORD *)this + 44);
  if ((_DWORD)a2)
    objc_msgSend(v4, "setInputEnabled:", 1);
  else
    objc_msgSend(v4, "setOutputEnabled:", 1);
  v6 = (char *)this + 152;
  v5 = *(_QWORD *)this;
  *((_DWORD *)this + 22 * a2 + 39) = a2;
  (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *, uint64_t))(v5 + 136))(this, a2);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = a2;
  v9 = (char *)this + 88 * a2 + 152;
  v11 = (void *)*((_QWORD *)v9 + 1);
  v10 = (id *)(v9 + 8);
  *v10 = (id)v7;

  if (!*v10)
    goto LABEL_26;
  v12 = &v6[88 * a2];
  v14 = (void *)*((_QWORD *)v12 + 2);
  v13 = (id *)(v12 + 16);
  *v13 = 0;

  objc_msgSend(*v10, "channelLayout");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    v16 = objc_alloc(MEMORY[0x24BDB1818]);
    v17 = *((double *)this + 42);
    objc_msgSend(*v10, "channelLayout");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v16, "initWithCommonFormat:sampleRate:interleaved:channelLayout:", 1, 1, v18, v17);
    v20 = *v13;
    *v13 = (id)v19;

  }
  else
  {
    if (objc_msgSend(*v10, "channelCount") >= 3)
      goto LABEL_26;
    v21 = objc_msgSend(objc_alloc(MEMORY[0x24BDB1818]), "initWithCommonFormat:sampleRate:channels:interleaved:", 1, objc_msgSend(*v10, "channelCount"), 1, *((double *)this + 42));
    v18 = *v13;
    *v13 = (id)v21;
  }

  if (!*v13)
LABEL_26:
    std::terminate();
  v23 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v22)
                                                                                      + 528)));
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v24 = objc_msgSend(*v13, "channelCount");
    objc_msgSend(*v13, "channelLayout");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    Phase::ChannelLayout::GetStringFromLayoutTag((Phase::ChannelLayout *)objc_msgSend(v25, "layoutTag"), __p);
    if (v39 >= 0)
      v26 = __p;
    else
      v26 = (void **)__p[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "AudioIOUnit.mm";
    v41 = 1024;
    v42 = 720;
    v43 = 1024;
    v44 = v24;
    v45 = 2080;
    v46 = v26;
    _os_log_impl(&dword_2164CC000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Hardware output: %i channels with layout %s", buf, 0x22u);
    if (v39 < 0)
      operator delete(__p[0]);

  }
  v27 = *v13;
  v28 = (void *)*((_QWORD *)this + 44);
  if ((_DWORD)a2 == 1)
    objc_msgSend(v28, "outputBusses");
  else
    objc_msgSend(v28, "inputBusses");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v29, "count") <= v8)
  {

    return 4294956417;
  }
  else
  {
    objc_msgSend(v29, "objectAtIndexedSubscript:", v8);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = 0;
    objc_msgSend(v30, "setFormat:error:", v27, buf);
    v31 = *(id *)buf;

    v32 = objc_msgSend(v31, "code");
    if (!(_DWORD)v32)
    {
      v33 = objc_msgSend(*v13, "streamDescription");
      v32 = 0;
      v34 = &v6[88 * v8];
      v35 = *(_OWORD *)v33;
      v36 = *(_OWORD *)(v33 + 16);
      *((_QWORD *)v34 + 7) = *(_QWORD *)(v33 + 32);
      *(_OWORD *)(v34 + 40) = v36;
      *(_OWORD *)(v34 + 24) = v35;
    }
  }
  return v32;
}

void sub_2164F427C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZN5Phase10Controller13SystemAudioIO11AudioIOUnit17SetOutputProviderEv_block_invoke(uint64_t a1, _DWORD *a2, __int128 *a3, unsigned int a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double v16;
  Phase::Logger *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t ShouldFire;
  Phase::Logger *v25;
  NSObject *v26;
  uint64_t v27;
  Phase::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  Phase::Logger *v33;
  uint64_t v34;
  uint64_t InstancePtr;
  Phase::Logger *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  int i;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  unsigned int v54;
  signed int v55;
  int v56;
  unsigned int v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  _DWORD *v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  _DWORD *v67;
  int v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  unsigned int v77;
  uint8_t buf[4];
  const char *v79;
  __int16 v80;
  int v81;
  __int16 v82;
  char *v83;
  char __str[4];
  char __s[256];
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 56);
  if (!a6)
  {
    v8 = 0xFFFFFFFFLL;
    goto LABEL_12;
  }
  v8 = *a6;
  if (!(_DWORD)v8 || !*((_QWORD *)a6 + 2))
  {
LABEL_12:
    strcpy(__s, "(%d): ");
    strcat(__s, "invalid IO buffer: %p / %d / %p");
    ShouldFire = Phase::Throttle::ShouldFire((Phase::Throttle *)(v7 + 16), 0);
    if (!(_DWORD)ShouldFire)
      return 4294956433;
    v25 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s, ShouldFire, a6, v8, 0);
    v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v25) + 528));
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      return 4294956433;
LABEL_14:
    *(_DWORD *)buf = 136315650;
    v79 = "AudioIOBase.hpp";
    v80 = 1024;
    v81 = 133;
    v82 = 2080;
    v83 = __str;
    _os_log_impl(&dword_2164CC000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
    return 4294956433;
  }
  if ((_DWORD)v8 != 1)
  {
    strcpy(__s, "(%d): ");
    strcat(__s, "expected interleaved IO buffer, got deinterleaved %d buffers");
    v27 = Phase::Throttle::ShouldFire((Phase::Throttle *)(v7 + 16), 0);
    if (!(_DWORD)v27)
      return 4294956433;
    v28 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s, v27, v8);
    goto LABEL_21;
  }
  if ((*((_BYTE *)a3 + 56) & 3) == 0)
  {
    strcpy(__s, "(%d): ");
    strcat(__s, "did not receive a valid IO sample/host time");
    v29 = Phase::Throttle::ShouldFire((Phase::Throttle *)(v7 + 16), 0);
    if (!(_DWORD)v29)
      return 4294956433;
    v28 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s, v29);
LABEL_21:
    v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v28) + 528));
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      return 4294956433;
    goto LABEL_14;
  }
  v10 = a4;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (!*(_BYTE *)(v12 + 64))
  {
    v13 = *a3;
    v14 = a3[1];
    v15 = a3[3];
    *(_OWORD *)(v12 + 32) = a3[2];
    *(_OWORD *)(v12 + 48) = v15;
    *(_OWORD *)v12 = v13;
    *(_OWORD *)(v12 + 16) = v14;
    *(_BYTE *)(v12 + 64) = 1;
  }
  *(_QWORD *)(v7 + 384) = a4;
  v16 = *(double *)a3;
  *(_DWORD *)__s = a6[2];
  if (!atomic_load((unsigned int *)(v7 + 144)))
  {
    v30 = *(unsigned int *)__s;
    if (*(_DWORD *)__s >= *(_DWORD *)(a1 + 72))
    {
      if (*(_BYTE *)(v7 + 136))
      {
        v76 = mach_absolute_time();
        v31 = *(_QWORD *)(v7 + 128);
        v32 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 104))(v7);
        v33 = (Phase::Logger *)_os_log_pack_size();
        v34 = (uint64_t)v33 + 88;
        InstancePtr = Phase::Logger::GetInstancePtr(v33);
        if (caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(InstancePtr + 1168), v34, 0))
        {
          v36 = (Phase::Logger *)_os_log_pack_fill();
          *(_DWORD *)v36 = 67109120;
          *((_DWORD *)v36 + 1) = ((double)(uint64_t)(v76 - v31) * 0.0000000416666667 * v32);
          Phase::Logger::GetInstancePtr(v36);
          caulk::concurrent::messenger::enqueue();
        }
        if (*(_BYTE *)(v7 + 136))
          *(_BYTE *)(v7 + 136) = 0;
      }
      kdebug_trace();
      v37 = **(_QWORD **)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 696);
      v38 = *a3;
      v39 = a3[1];
      v40 = a3[3];
      *(_OWORD *)(v37 + 75256) = a3[2];
      *(_OWORD *)(v37 + 75272) = v40;
      *(_OWORD *)(v37 + 75224) = v38;
      *(_OWORD *)(v37 + 75240) = v39;
      *(_DWORD *)(v37 + 104) = v10;
      *(_DWORD *)(v37 + 108) = 0;
      v41 = *(_QWORD *)(v37 + 75096);
      v42 = *a3;
      v43 = a3[1];
      v44 = a3[3];
      *(_OWORD *)(v41 + 80) = a3[2];
      *(_OWORD *)(v41 + 96) = v44;
      *(_OWORD *)(v41 + 48) = v42;
      *(_OWORD *)(v41 + 64) = v43;
      *(_QWORD *)(v41 + 40) = *(_QWORD *)(*(_QWORD *)(v41 + 16) + 16);
      Phase::Controller::VoiceManager::IOExecuteRealtimeActions(*(Phase::Controller::VoiceManager **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), (const AudioTimeStamp *)a3, v10);
      v45 = (char *)*((_QWORD *)a6 + 2);
      v77 = v10;
      v74 = v10;
      if (*(_QWORD *)(a1 + 64) == -1)
      {
        v54 = *(_DWORD *)(**(_QWORD **)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 696) + 192);
        v55 = v30;
        if (v30 > v54)
        {
          bzero(v45, a6[3]);
          v55 = v54;
        }
        switch(v55)
        {
          case 1:
            if (v10)
            {
              v56 = 0;
              v57 = v10;
              do
              {
                v58 = *(uint64_t **)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 696);
                v59 = *v58;
                Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(*v58 + 75096));
                *(_DWORD *)&v45[4 * v56] = **(_DWORD **)(v59 + 144);
                v56 += v30;
                --v57;
              }
              while (v57);
            }
            break;
          case 2:
            if (v10)
            {
              v68 = 1;
              do
              {
                v69 = **(_QWORD **)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 696);
                Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(v69 + 75096));
                v70 = *(_DWORD **)(v69 + 144);
                *(_DWORD *)&v45[4 * v68 - 4] = *v70;
                *(_DWORD *)&v45[4 * v68] = v70[1];
                v68 += v30;
                --v10;
              }
              while (v10);
            }
            break;
          case 3:
            if (v10)
            {
              v60 = 2;
              v61 = v10;
              do
              {
                v62 = **(_QWORD **)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 696);
                Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(v62 + 75096));
                v63 = *(_DWORD **)(v62 + 144);
                *(_DWORD *)&v45[4 * v60 - 8] = *v63;
                *(_DWORD *)&v45[4 * v60 - 4] = v63[1];
                *(_DWORD *)&v45[4 * v60] = v63[2];
                v60 += v30;
                --v61;
              }
              while (v61);
            }
            break;
          case 4:
            if (v10)
            {
              v64 = 3;
              v65 = v10;
              do
              {
                v66 = **(_QWORD **)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 696);
                Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(v66 + 75096));
                v67 = *(_DWORD **)(v66 + 144);
                *(_DWORD *)&v45[4 * v64 - 12] = *v67;
                *(_DWORD *)&v45[4 * v64 - 8] = v67[1];
                *(_DWORD *)&v45[4 * v64 - 4] = v67[2];
                *(_DWORD *)&v45[4 * v64] = v67[3];
                v64 += v30;
                --v65;
              }
              while (v65);
            }
            break;
          default:
            if (v10)
            {
              v71 = 0;
              v72 = 4 * v55;
              do
              {
                v73 = **(_QWORD **)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 696);
                Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(v73 + 75096));
                memcpy(&v45[4 * v71], *(const void **)(v73 + 144), v72);
                v71 += v30;
                --v10;
              }
              while (v10);
            }
            break;
        }
      }
      else if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          v47 = *(uint64_t **)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 696);
          v48 = *v47;
          Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(*v47 + 75096));
          if ((_DWORD)v30)
          {
            v49 = 0;
            v50 = 0;
            v51 = *(_QWORD *)(v48 + 144);
            v52 = *(_QWORD *)(a1 + 64);
            do
            {
              if (((v52 >> v49) & 1) != 0)
                v53 = *(_DWORD *)(v51 + 4 * v50++);
              else
                v53 = 0;
              *(_DWORD *)&v45[4 * v49++] = v53;
            }
            while (v30 != v49);
          }
          v45 += 4 * v30;
        }
      }
      *(float *)__str = 0.0;
      vDSP_rmsqv(*((const float **)a6 + 2), 1, (float *)__str, v30 * v77);
      if (*(float *)__str < 0.000001)
      {
        *a2 |= 0x10u;
        bzero(*((void **)a6 + 2), a6[3]);
      }
      **(double **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (double)((unint64_t)v16 + v74);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8) = (unint64_t)((double)*((unint64_t *)a3 + 1) + *((double *)a3 + 2) * (double)(uint64_t)((double)v77 / *(double *)(v7 + 336) * 24000000.0));
      *(_QWORD *)(v7 + 112) = mach_absolute_time();
      *(_BYTE *)(v7 + 120) = 1;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 64))
        std::__throw_bad_optional_access[abi:ne180100]();
      mach_absolute_time();
      __udivti3();
      kdebug_trace();
      Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration::WriteCaptureBufferList(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), (const AudioTimeStamp *)a3, v77, (const AudioBufferList *)a6);
      return 0;
    }
    Phase::Controller::SystemAudioIO::AudioIOBase::IOProcError<int const&,unsigned int const&>(v7, (unsigned int *)(a1 + 72), (unsigned int *)__s);
    return 4294956433;
  }
  *a2 |= 0x10u;
  bzero(*((void **)a6 + 2), a6[3]);
  kdebug_trace();
  v18 = (Phase::Logger *)_os_log_pack_size();
  v19 = (uint64_t)v18 + 88;
  v20 = Phase::Logger::GetInstancePtr(v18);
  result = caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(v20 + 1168), v19, 0);
  if (result)
  {
    v22 = _os_log_pack_fill();
    v23 = *((_QWORD *)a3 + 1);
    *(_DWORD *)v22 = 134218240;
    *(_QWORD *)(v22 + 4) = v23;
    *(_WORD *)(v22 + 12) = 1024;
    *(_DWORD *)(v22 + 14) = v10;
    Phase::Logger::GetInstancePtr((Phase::Logger *)v22);
    caulk::concurrent::messenger::enqueue();
    return 0;
  }
  return result;
}

void Phase::Controller::SystemAudioIO::AudioIOBase::IOProcError<int const&,unsigned int const&>(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t ShouldFire;
  Phase::Logger *v6;
  NSObject *v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  char *v13;
  char __str[4];
  char __s[256];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  strcpy(__s, "(%d): ");
  strcat(__s, "expected at least %i channels, got %i channels");
  ShouldFire = Phase::Throttle::ShouldFire((Phase::Throttle *)(a1 + 16), 0);
  if ((_DWORD)ShouldFire)
  {
    v6 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s, ShouldFire, *a2, *a3);
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v6) + 528));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v9 = "AudioIOBase.hpp";
      v10 = 1024;
      v11 = 133;
      v12 = 2080;
      v13 = __str;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
    }
  }
}

void ___ZN5Phase10Controller13SystemAudioIO11AudioIOUnit15SetInputHandlerEv_block_invoke(uint64_t a1, AudioUnitRenderActionFlags *a2, AudioTimeStamp *inTimeStamp, uint64_t inNumberFrames, uint64_t inOutputBusNumber)
{
  uint64_t v7;
  Phase::Logger *v9;
  uint64_t v10;
  uint64_t InstancePtr;
  uint64_t v12;
  UInt64 mHostTime;
  UInt32 v16;
  int v17;
  uint64_t v18;
  uint64_t ShouldFire;
  Phase::Logger *v20;
  NSObject *v21;
  int v22;
  float **v23;
  int Latest;
  char *v25;
  AudioBufferList ioData;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  char *v32;
  char __str[4];
  char __s[256];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 48);
  if (atomic_load((unsigned int *)(v7 + 144)))
  {
    kdebug_trace();
    v9 = (Phase::Logger *)_os_log_pack_size();
    v10 = (uint64_t)v9 + 88;
    InstancePtr = Phase::Logger::GetInstancePtr(v9);
    if (caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(InstancePtr + 1168), v10, 0))
    {
      v12 = _os_log_pack_fill();
      mHostTime = inTimeStamp->mHostTime;
      *(_DWORD *)v12 = 134218240;
      *(_QWORD *)(v12 + 4) = mHostTime;
      *(_WORD *)(v12 + 12) = 1024;
      *(_DWORD *)(v12 + 14) = inNumberFrames;
      Phase::Logger::GetInstancePtr((Phase::Logger *)v12);
      caulk::concurrent::messenger::enqueue();
    }
    return;
  }
  ioData.mBuffers[0].mData = 0;
  v16 = *(_DWORD *)(a1 + 56);
  v17 = *(_DWORD *)(a1 + 60);
  ioData.mNumberBuffers = 1;
  ioData.mBuffers[0].mNumberChannels = v16;
  *(_QWORD *)&ioData.mBuffers[0].mDataByteSize = (v17 * inNumberFrames);
  v18 = AudioUnitRender(*(AudioUnit *)(v7 + 344), a2, inTimeStamp, inOutputBusNumber, inNumberFrames, &ioData);
  if (!(_DWORD)v18)
  {
    Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration::WriteCaptureBufferList(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), inTimeStamp, inNumberFrames, &ioData);
    *(_DWORD *)__str = 0;
    if (*(_QWORD *)(v7 + 304))
    {
      *(_QWORD *)__s = v7 + 312;
      v22 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v7 + 312));
      __s[8] = v22;
      if (v22)
      {
        v23 = *(float ***)(v7 + 304);
        if (v23)
        {
          if (*v23)
          {
            Latest = Phase::Controller::SpeechDetector::SpeechDetectorImpl::ProcessAndGetLatest(*v23, &ioData, (float *)__str);
            std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)__s);
            if (Latest)
              v25 = __str;
            else
              v25 = 0;
            goto LABEL_17;
          }
        }
      }
      std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)__s);
    }
    v25 = 0;
LABEL_17:
    Phase::Controller::VoiceManager::IOExecuteRealtimeInputActions(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), (uint64_t)inTimeStamp, inNumberFrames, (uint64_t)&ioData, (uint64_t)v25);
    return;
  }
  strcpy(__s, "(%d): ");
  strcat(__s, "error %d on input bus %ld timestamp %0.2f frameCount %u");
  ShouldFire = Phase::Throttle::ShouldFire((Phase::Throttle *)(v7 + 16), 0);
  if ((_DWORD)ShouldFire)
  {
    v20 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s, ShouldFire, v18, inOutputBusNumber, *(_QWORD *)&inTimeStamp->mSampleTime, inNumberFrames);
    v21 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v20) + 528));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v28 = "AudioIOBase.hpp";
      v29 = 1024;
      v30 = 133;
      v31 = 2080;
      v32 = __str;
      _os_log_impl(&dword_2164CC000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
    }
  }
}

void sub_2164F50F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a54);
  _Unwind_Resume(a1);
}

BOOL Phase::Controller::SystemAudioIO::AudioIOUnit::OnOutputRouteChanged(Phase::Controller::VoiceManager::Implementation ***this)
{
  NSObject *v2;
  _BOOL8 result;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)this) + 528));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v6 = 136315394;
    v7 = "AudioIOUnit.mm";
    v8 = 1024;
    v9 = 1222;
    _os_log_impl(&dword_2164CC000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Audio route change notification sent to voice manager.", (uint8_t *)&v6, 0x12u);
  }
  result = Phase::Controller::VoiceManager::Implementation::AudioIOConfigChanged(*this[1]);
  if (result)
  {
    v4 = (unsigned int *)(this + 18);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  return result;
}

id Phase::Controller::SystemAudioIO::AudioIOUnit::CopyWorkGroup(AudioUnit *this)
{
  Phase::Logger *Property;
  int v2;
  NSObject *v3;
  id v4;
  UInt32 ioDataSize;
  id outData;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  outData = 0;
  ioDataSize = 8;
  Property = (Phase::Logger *)AudioUnitGetProperty(this[43], 0x7DFu, 0, 0, &outData, &ioDataSize);
  v2 = (int)Property;
  if ((_DWORD)Property)
  {
    v3 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(Property) + 528));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v9 = "AudioIOUnit.mm";
      v10 = 1024;
      v11 = 1240;
      v12 = 1024;
      v13 = v2;
      _os_log_impl(&dword_2164CC000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get workgroup from output audio unit: %d", buf, 0x18u);
    }
    v4 = 0;
  }
  else
  {
    v4 = outData;
  }

  return v4;
}

void sub_2164F5304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5Phase10Controller13SystemAudioIO14Implementation10InitializeEv_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  std::__shared_weak_count *v4;
  Phase::Logger *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  Phase::Logger *v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    v5 = (Phase::Logger *)std::__shared_weak_count::lock(v4);
    v16 = v5;
    if (v5)
    {
      v6 = (std::__shared_weak_count *)v5;
      v7 = *(_QWORD *)(a1 + 32);
      if (v7)
      {
        v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v5)
                                                                                           + 528)));
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend(v3, "userInfo", v7, v16);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x24BDB1738]);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v10, "unsignedIntValue");
          objc_msgSend(v3, "userInfo");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x24BDB1730]);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136315906;
          v18 = "AudioIOUnit.mm";
          v19 = 1024;
          v20 = 85;
          v21 = 1024;
          v22 = v11;
          v23 = 2112;
          v24 = v13;
          _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Received AVAudioSession route change notification with reason %u and previous route:\n%@", buf, 0x22u);

        }
        if (*(_BYTE *)(v7 + 48))
          *(_BYTE *)(v7 + 49) = 1;
        else
          Phase::Controller::SystemAudioIO::AudioIOUnit::OnOutputRouteChanged(*(Phase::Controller::VoiceManager::Implementation ****)(v7 + 16));
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }

}

void sub_2164F5504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c74_ZTSNSt3__18weak_ptrIN5Phase10Controller13SystemAudioIO14ImplementationEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_32c74_ZTSNSt3__18weak_ptrIN5Phase10Controller13SystemAudioIO14ImplementationEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN5Phase10Controller13SystemAudioIO14Implementation10InitializeEv_block_invoke_50(uint64_t a1, void *a2)
{
  id v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  _BOOL8 v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4)
    goto LABEL_22;
  v5 = std::__shared_weak_count::lock(v4);
  if (!v5)
    goto LABEL_22;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    objc_msgSend(v3, "userInfo", v7, v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "valueForKey:", *MEMORY[0x24BDB15F0]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "intValue");

    if (v10)
    {
      if (v10 != 1
        || (*(_BYTE *)(v7 + 48) = 1,
            v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v11) + 528)),
            !(v11 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO))))
      {
LABEL_15:
        if (*(_BYTE *)(v7 + 49))
        {
          v14 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v11) + 528));
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v18 = "AudioIOUnit.mm";
            v19 = 1024;
            v20 = 136;
            v21 = 1024;
            v22 = v10;
            _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Dangling route change flag at interruption (%u) reception.", buf, 0x18u);
          }
        }
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136315394;
      v18 = "AudioIOUnit.mm";
      v19 = 1024;
      v20 = 114;
      v13 = "%25s:%-5d Received AVAudioSessionInterruptionTypeBegan interruption";
    }
    else
    {
      if (*(_BYTE *)(v7 + 48))
      {
        if (*(_BYTE *)(v7 + 49))
        {
          v11 = Phase::Controller::SystemAudioIO::AudioIOUnit::OnOutputRouteChanged(*(Phase::Controller::VoiceManager::Implementation ****)(v7 + 16));
          *(_BYTE *)(v7 + 49) = 0;
        }
        *(_BYTE *)(v7 + 48) = 0;
      }
      v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v11) + 528));
      v11 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
      if (!v11)
        goto LABEL_15;
      *(_DWORD *)buf = 136315394;
      v18 = "AudioIOUnit.mm";
      v19 = 1024;
      v20 = 130;
      v13 = "%25s:%-5d Received AVAudioSessionInterruptionTypeEnded interruption";
    }
    _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_INFO, v13, buf, 0x12u);
    goto LABEL_15;
  }
LABEL_18:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_22:

}

void sub_2164F5800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB808] + 16;
}

Phase::Controller::SystemAudioIO::Implementation *Phase::Controller::SystemAudioIO::Implementation::Implementation(Phase::Controller::SystemAudioIO::Implementation *this, Phase::Controller::SystemAudioIO::AudioIOUnit *a2)
{
  uint64_t v3;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a2;
  objc_msgSend(MEMORY[0x24BDB1858], "sharedInstance");
  v3 = objc_claimAutoreleasedReturnValue();
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = v3;
  *((_WORD *)this + 24) = 0;
  return this;
}

void sub_2164F58BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

id *std::unique_ptr<Phase::Controller::SystemAudioIO::Implementation>::reset[abi:ne180100](id **a1, id *a2)
{
  id *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::SystemAudioIO::Implementation::~Implementation(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void Phase::Controller::SystemAudioIO::Implementation::~Implementation(id *this)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)this[1];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t *std::shared_ptr<Phase::Controller::SystemAudioIO::Implementation>::shared_ptr[abi:ne180100]<Phase::Controller::SystemAudioIO::Implementation,std::default_delete<Phase::Controller::SystemAudioIO::Implementation>,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  *a1 = *a2;
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_24D577A48;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
    a1[1] = (uint64_t)v5;
    std::shared_ptr<Phase::Controller::SystemAudioIO::Implementation>::__enable_weak_this[abi:ne180100]<Phase::Controller::SystemAudioIO::Implementation,Phase::Controller::SystemAudioIO::Implementation,void>((uint64_t)a1, (_QWORD *)*a2, *a2);
  }
  else
  {
    a1[1] = 0;
  }
  *a2 = 0;
  return a1;
}

void std::shared_ptr<Phase::Controller::SystemAudioIO::Implementation>::__enable_weak_this[abi:ne180100]<Phase::Controller::SystemAudioIO::Implementation,Phase::Controller::SystemAudioIO::Implementation,void>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void std::__shared_ptr_pointer<Phase::Controller::SystemAudioIO::Implementation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

id *std::__shared_ptr_pointer<Phase::Controller::SystemAudioIO::Implementation  *>::__on_zero_shared(uint64_t a1)
{
  id *result;

  result = *(id **)(a1 + 24);
  if (result)
  {
    Phase::Controller::SystemAudioIO::Implementation::~Implementation(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

const char *Phase::SpatialModeler::BaseModelerErrorCategory::name(Phase::SpatialModeler::BaseModelerErrorCategory *this)
{
  return "Base Modeler Error";
}

void Phase::SpatialModeler::BaseModelerErrorCategory::message(int __val@<W1>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string v5;

  std::to_string(&v5, __val);
  v4 = std::string::insert(&v5, 0, "Base Modeler Error code: ");
  *a2 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_2164F5B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::BaseModelerErrorCategory::~BaseModelerErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::BinauralSpatializer::BinauralSpatializer(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  std::vector<char>::pointer begin;
  void *__p[2];
  char v11;
  std::vector<char> v12;

  LOBYTE(__p[0]) = 0;
  std::vector<char>::vector(&v12, 0x20uLL, (const std::vector<char>::value_type *)__p);
  begin = v12.__begin_;
  *(_QWORD *)v12.__begin_ = 6684674;
  *((_DWORD *)begin + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "Binaural");
  Phase::Controller::Spatializer::Spatializer(a1, a2, (uint64_t)&v12, (__int128 *)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v12.__begin_)
  {
    v12.__end_ = v12.__begin_;
    operator delete(v12.__begin_);
  }
  *(_QWORD *)a1 = &off_24D577AC8;
  IR::IRDataAttributes::IRDataAttributes(a1 + 96, a3);
  *(_BYTE *)(a1 + 248) = a4;
  return a1;
}

void sub_2164F5C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void Phase::Controller::BinauralSpatializer::~BinauralSpatializer(void **this)
{
  *this = &off_24D577AC8;
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)(this + 12));
  Phase::Controller::Spatializer::~Spatializer(this);
}

{
  *this = &off_24D577AC8;
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)(this + 12));
  Phase::Controller::Spatializer::~Spatializer(this);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::BinauralSpatializer::Initialize(Phase::Controller::BinauralSpatializer *this)
{
  char *v2;
  int v3;
  BOOL v4;
  char *v5;
  Phase::Logger *v6;
  std::string *v7;
  std::string::size_type v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v16;
  std::logic_error *exception;
  NSObject *v18;
  std::string v19;
  _QWORD v20[2];
  uint8_t buf[12];
  __int16 v22;
  _BYTE v23[10];
  uint64_t v24;
  void *__p;
  char v26;
  _QWORD v27[20];

  v27[19] = *MEMORY[0x24BDAC8D0];
  v2 = (char *)this + 96;
  v3 = *((unsigned __int8 *)this + 248);
  v4 = *((_BYTE *)this + 248) != 0;
  v5 = (char *)operator new(0x180uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24D577B00;
  *((_QWORD *)v5 + 3) = &off_24D577B38;
  *((_WORD *)v5 + 16) = 1;
  *((_QWORD *)v5 + 5) = this;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  v6 = (Phase::Logger *)IR::IRDataAttributes::IRDataAttributes((uint64_t)(v5 + 160), (uint64_t)v2);
  *((_QWORD *)v5 + 39) = 0;
  *((_QWORD *)v5 + 40) = 0;
  v5[328] = v4;
  *((_QWORD *)v5 + 46) = 0;
  *((_QWORD *)v5 + 47) = 0;
  *((_QWORD *)v5 + 45) = 0;
  *((_QWORD *)v5 + 42) = 0;
  *((_QWORD *)v5 + 43) = 0;
  *((_WORD *)v5 + 176) = 0;
  if (!*((_QWORD *)this + 12))
  {
    v16 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v6) + 576));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "BinauralSpatializer.mm";
      v22 = 1024;
      *(_DWORD *)v23 = 50;
      _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inIrDataAttributes.fileURL.is_valid() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: inIrDataAttributes.fileURL.is_valid() is false.");
LABEL_23:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B0] + 16);
  }
  if (*((float *)this + 26) <= 0.0)
  {
    v18 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v6) + 576));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "BinauralSpatializer.mm";
      v22 = 1024;
      *(_DWORD *)v23 = 51;
      _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inIrDataAttributes.sampleRate > 0 is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: inIrDataAttributes.sampleRate > 0 is false.");
    goto LABEL_23;
  }
  if (v3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    std::ostream::operator<<();
    std::stringbuf::str();
    v7 = std::string::insert(&v19, 0, "PHASE-");
    v8 = v7->__r_.__value_.__r.__words[0];
    v20[0] = v7->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
    v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (v5[383] < 0)
      operator delete(*((void **)v5 + 45));
    v10 = v20[0];
    *((_QWORD *)v5 + 45) = v8;
    *((_QWORD *)v5 + 46) = v10;
    *(_QWORD *)(v5 + 375) = *(_QWORD *)((char *)v20 + 7);
    v5[383] = v9;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    *(_QWORD *)buf = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    *(_QWORD *)&v23[2] = v11;
    v24 = MEMORY[0x24BEDB848] + 16;
    if (v26 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2199F9CD4](v27);
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 6) = v5 + 24;
  *((_QWORD *)this + 7) = v5;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
}

void sub_2164F6084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  IR::IRDataAttributes *v35;
  void *v36;
  void **v37;
  uint64_t i;
  void *v40;

  __cxa_free_exception(v36);
  if (*(char *)(v34 + 383) < 0)
    operator delete(*v37);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v34 + 336);
  std::unique_ptr<Phase::Controller::HrirAsset>::reset[abi:ne180100]((uint64_t **)(v34 + 320), 0);
  IR::IRDataAttributes::~IRDataAttributes(v35);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v34 + 144);
  for (i = 0; i != -96; i -= 48)
  {
    std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v34 + i + 128);
    std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v34 + i + 112);
    std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v34 + i + 96);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v34);
  operator delete(v40);
  _Unwind_Resume(a1);
}

void sub_2164F61B0()
{
  JUMPOUT(0x2164F61A8);
}

uint64_t IR::IRDataAttributes::IRDataAttributes(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  *(_QWORD *)a1 = v4;
  v5 = *(_OWORD *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 24);
  v7 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  v8 = *(_QWORD *)(a2 + 64);
  if (v8)
    CFRetain(*(CFTypeRef *)(a2 + 64));
  *(_QWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 88);
  if (v9)
    CFRetain(*(CFTypeRef *)(a2 + 88));
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
  *(_OWORD *)(a1 + 96) = v10;
  v11 = *(_QWORD *)(a2 + 128);
  if (v11)
    CFRetain(*(CFTypeRef *)(a2 + 128));
  *(_QWORD *)(a1 + 128) = v11;
  v12 = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v12;
  return a1;
}

void IR::IRDataAttributes::~IRDataAttributes(IR::IRDataAttributes *this)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)*((_QWORD *)this + 16);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 11);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 8);
  if (v4)
    CFRelease(v4);
  if (*(_QWORD *)this)
    CFRelease(*(CFTypeRef *)this);
}

void std::__shared_ptr_emplace<Phase::Controller::BinauralEncoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D577B00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Controller::BinauralEncoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D577B00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

uint64_t std::__shared_ptr_emplace<Phase::Controller::BinauralEncoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Phase::Controller::BinauralEncoder::~BinauralEncoder(Phase::Controller::BinauralEncoder *this)
{
  Phase::Controller::BinauralEncoder::~BinauralEncoder(this);
  JUMPOUT(0x2199F9D70);
}

{
  uint64_t i;
  std::string __p;

  *(_QWORD *)this = &off_24D577B38;
  if (*((_BYTE *)this + 304))
  {
    IR::IRDataLoader::instance(this);
    if (*((char *)this + 359) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 42), *((_QWORD *)this + 43));
    else
      __p = *(std::string *)((_BYTE *)this + 14);
    IR::IRDataLoader::removePersonalizedHRTFListenerCallback();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((char *)this + 359) < 0)
    operator delete(*((void **)this + 42));
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + 312);
  std::unique_ptr<Phase::Controller::HrirAsset>::reset[abi:ne180100]((uint64_t **)this + 37, 0);
  IR::IRDataAttributes::~IRDataAttributes((Phase::Controller::BinauralEncoder *)((char *)this + 136));
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  for (i = 0; i != -96; i -= 48)
  {
    std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + i + 104);
    std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + i + 88);
    std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + i + 72);
  }
}

void Phase::Controller::BinauralEncoder::Initialize(Phase::Controller::BinauralEncoder *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::string __p;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *((_DWORD *)this + 46) = 0;
  if (!*((_BYTE *)this + 304))
    goto LABEL_12;
  IR::IRDataLoader::instance(this);
  if (*((char *)this + 359) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 42), *((_QWORD *)this + 43));
  else
    __p = *(std::string *)((_BYTE *)this + 14);
  v9 = 0;
  v2 = operator new(0x20uLL);
  *v2 = &off_24D577BF0;
  v2[1] = Phase::Controller::BinauralEncoder::SwapSpatializationFilters;
  v2[2] = 0;
  v2[3] = this;
  v9 = v2;
  IR::IRDataLoader::addPersonalizedHRTFListenerCallback();
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v5 + 8 * v6))(v5, v3, v4);
LABEL_10:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_12:
  if ((Phase::Controller::BinauralEncoder::BuildFilterDatabase((uint64_t)this, 0) & 1) == 0)
    std::terminate();
  Phase::Controller::BinauralEncoder::SetFilterTypeInUse((unint64_t *)this, 0);
}

void sub_2164F6494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::BinauralEncoder::GetFiltersAndDelays(Phase::Controller::BinauralEncoder *this, float a2, float a3, float a4, unsigned int a5, float **a6, float *a7)
{
  IR::IRData *v8;
  Phase::Logger *FilterLength;
  Phase::Logger *NumFiltersPerSpatialPoint;
  unsigned int v17;
  uint64_t v18;
  unint64_t i;
  const void *v20;
  float *v21;
  unsigned int v22;
  NSObject *v24;
  std::logic_error *exception;
  NSObject *v26;
  std::logic_error *v27;
  NSObject *v28;
  std::logic_error *v29;
  void *__p;
  void *v31;
  _BYTE v32[18];
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = (IR::IRData *)*((_QWORD *)this + 15);
  if (!v8)
  {
    v24 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 576));
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v34 = "BinauralSpatializer.mm";
      v35 = 1024;
      v36 = 150;
      _os_log_impl(&dword_2164CC000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != mIRData.get() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: nullptr != mIRData.get() is false.");
  }
  FilterLength = (Phase::Logger *)IR::IRData::getFilterLength(v8);
  if (FilterLength > a5)
  {
    v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(FilterLength) + 576));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v34 = "BinauralSpatializer.mm";
      v35 = 1024;
      v36 = 152;
      _os_log_impl(&dword_2164CC000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inFilterLengthInsamples >= mIRData->getFilterLength() is false.", buf, 0x12u);
    }
    v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v27, "PRECONDITION: inFilterLengthInsamples >= mIRData->getFilterLength() is false.");
  }
  Phase::Controller::SpatializerEncoder::VerifyCoordinateRanges(this, a2, a3, a4);
  IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)buf);
  NumFiltersPerSpatialPoint = (Phase::Logger *)IR::IRData::getNumFiltersPerSpatialPoint(*((IR::IRData **)this + 15));
  if ((_DWORD)NumFiltersPerSpatialPoint != 2)
  {
    v28 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(NumFiltersPerSpatialPoint) + 576));
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v32 = 136315394;
      *(_QWORD *)&v32[4] = "BinauralSpatializer.mm";
      *(_WORD *)&v32[12] = 1024;
      *(_DWORD *)&v32[14] = 159;
      _os_log_impl(&dword_2164CC000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: numOutputChannels == 2 is false.", v32, 0x12u);
    }
    v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v29, "PRECONDITION: numOutputChannels == 2 is false.");
  }
  IR::IRCoordinates::set();
  IR::IRCoordinates::set();
  v17 = IR::IRData::getFilterLength(*((IR::IRData **)this + 15));
  std::vector<float>::vector(&__p, v17);
  std::vector<std::vector<float>>::vector(v32, 2uLL, (uint64_t)&__p);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  std::vector<float>::vector(&__p, 2uLL);
  IR::IRData::getInterpolatedTimeDomainCoeffs();
  v18 = 0;
  for (i = 0;
        (uint64_t)i < (*(int (**)(Phase::Controller::BinauralEncoder *))(*(_QWORD *)this + 48))(this);
        ++i)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v32[8] - *(_QWORD *)v32) >> 3) <= i)
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    v20 = *(const void **)(*(_QWORD *)v32 + v18);
    v21 = a6[i];
    v22 = IR::IRData::getFilterLength(*((IR::IRData **)this + 15));
    memcpy(v21, v20, 4 * v22);
    a7[i] = *((float *)__p + i);
    v18 += 24;
  }
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  __p = v32;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return 1;
}

void sub_2164F68C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void Phase::Controller::BinauralEncoder::AcquireFilters(Phase::Controller::BinauralEncoder *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  Phase::Logger *v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  void **v15;
  __int16 v16;
  unint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unint64_t *)this + 36);
  if (v3 >= 2)
    std::__throw_out_of_range[abi:ne180100]("array::at");
  v5 = (Phase::Logger *)Phase::Controller::SpatializerFilterHandle::SpatializerFilterHandle(a2, (Phase::Controller::BinauralEncoder *)((char *)this + 48 * v3 + 24));
  if (!*a2)
  {
    v6 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v5)
                                                                                       + 576)));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::BinauralEncoder::GetDescription((Phase::Controller::BinauralEncoder *)__p, this, a2);
      if (v9 >= 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      v11 = "BinauralSpatializer.mm";
      v12 = 1024;
      v13 = 108;
      v14 = 2080;
      v15 = v7;
      v16 = 2048;
      v17 = v3;
      _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d [BinauralSpatializer] %s Acquiring invalid filter handle for filter type %lu", buf, 0x26u);
      if (v9 < 0)
        operator delete(__p[0]);
    }

  }
}

void sub_2164F6A98(_Unwind_Exception *a1)
{
  Phase::Controller::SpatializerFilterHandle *v1;
  void *v2;

  Phase::Controller::SpatializerFilterHandle::~SpatializerFilterHandle(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::BinauralEncoder::GetDescription(Phase::Controller::BinauralEncoder *this@<X0>, Phase::Controller::BinauralEncoder *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 32))(&v13);
  Phase::Controller::BinauralEncoder::GetDescription(a2, this, &v13);
  v4 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v15;
  if (v15)
  {
    v8 = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_2164F6BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Phase::Controller::SpatializerFilterHandle::~SpatializerFilterHandle((Phase::Controller::SpatializerFilterHandle *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::BinauralEncoder::GetOutputChannelCount(Phase::Controller::BinauralEncoder *this)
{
  return 2;
}

uint64_t Phase::Controller::BinauralEncoder::GetFilterLengthInSamples(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)a2 + 8);
}

uint64_t Phase::Controller::SpatializerEncoder::GetTotalFilterLengthInSamples(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

unint64_t Phase::Controller::BinauralEncoder::GetNearestFilter(Phase::Controller::BinauralEncoder *this, Phase::Controller::SpatializerFilterDatabase **a2, float a3, float a4, void *a5)
{
  NSObject *v9;
  std::logic_error *exception;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a5)
  {
    v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 576));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "BinauralSpatializer.mm";
      v13 = 1024;
      v14 = 181;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr == pInWorkBuffer is false.", (uint8_t *)&v11, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: nullptr == pInWorkBuffer is false.");
  }
  Phase::Controller::SpatializerEncoder::VerifyCoordinateRanges(this, a3, a4, 0.0);
  return Phase::Controller::SpatializerFilterDatabase::GetNearestFilter(*a2, a3, a4);
}

void sub_2164F6CFC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void Phase::Controller::BinauralEncoder::Update(Phase::Controller::BinauralEncoder *this, __n128 a2)
{
  Phase::Controller::BinauralEncoder *v2;
  IR::IRDataLoader *v3;
  IR::IRDataLoader *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  IR::IRDataLoader *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  unint64_t v11;
  unint64_t v12;
  Phase::Logger *v13;
  NSObject *v14;
  int v15;
  void **v16;
  void **v17;
  void **v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  unint64_t *v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  void **v32;
  __int16 v33;
  void **v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 304))
    return;
  v2 = this;
  if (!*((_BYTE *)this + 329))
  {
    *((_BYTE *)this + 329) = 1;
    v3 = (IR::IRDataLoader *)IR::IRDataLoader::instance(this);
    this = (Phase::Controller::BinauralEncoder *)IR::IRDataLoader::getPersonalizedHRTFStatus(v3);
    if (((unsigned __int16)this & 0x100) != 0)
    {
      Phase::Controller::BinauralEncoder::SwapSpatializationFilters(v2, 1, 1);
    }
    else if ((this & 1) == 0)
    {
      v4 = (IR::IRDataLoader *)IR::IRDataLoader::instance(this);
      this = (Phase::Controller::BinauralEncoder *)IR::IRDataLoader::rebuildPersonalizedHRTFCache(v4);
    }
  }
  v6 = *((_QWORD *)v2 + 39);
  v5 = (std::__shared_weak_count *)*((_QWORD *)v2 + 40);
  *((_QWORD *)v2 + 39) = 0;
  *((_QWORD *)v2 + 40) = 0;
  v25 = (unint64_t *)v6;
  v26 = v5;
  if (v6)
  {
    if (*(_QWORD *)v6 != 1)
    {
LABEL_20:
      v11 = *(_QWORD *)v6;
      v12 = atomic_load((unint64_t *)v2 + 36);
      if (v11 != v12)
      {
        (*(void (**)(void **__return_ptr, Phase::Controller::BinauralEncoder *))(*(_QWORD *)v2 + 40))(v23, v2);
        Phase::Controller::BinauralEncoder::SetFilterTypeInUse((unint64_t *)v2, *v25);
        v14 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v13)
                                                                                            + 576)));
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          v15 = v24;
          v16 = (void **)v23[0];
          (*(void (**)(void **__return_ptr, Phase::Controller::BinauralEncoder *))(*(_QWORD *)v2 + 40))(__p, v2);
          v17 = v23;
          if (v15 < 0)
            v17 = v16;
          if (v22 >= 0)
            v18 = __p;
          else
            v18 = (void **)__p[0];
          *(_DWORD *)buf = 136315906;
          v28 = "BinauralSpatializer.mm";
          v29 = 1024;
          v30 = 372;
          v31 = 2080;
          v32 = v17;
          v33 = 2080;
          v34 = v18;
          _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Swapped spatialization filters from %s to %s", buf, 0x26u);
          if (v22 < 0)
            operator delete(__p[0]);
        }

        atomic_store(1u, (unsigned __int8 *)v2 + 328);
        if (v24 < 0)
          operator delete(v23[0]);
      }
      v5 = v26;
      goto LABEL_32;
    }
    *(_QWORD *)v6 = 0;
    if (*(_BYTE *)(v6 + 8))
    {
      if (!Phase::Controller::BinauralEncoder::BuildFilterDatabase((uint64_t)v2, 1))
        goto LABEL_20;
      goto LABEL_14;
    }
    if (*((_QWORD *)v2 + 9))
    {
      v7 = (IR::IRDataLoader *)IR::IRDataLoader::instance(this);
      v8 = IR::IRDataLoader::checkIfPersonalizedHRTFIsAllowed(v7);
      if ((v8 & 1) != 0)
      {
LABEL_14:
        *(_QWORD *)v6 = 1;
        goto LABEL_20;
      }
      v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v8) + 576));
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        goto LABEL_20;
      *(_DWORD *)buf = 136315394;
      v28 = "BinauralSpatializer.mm";
      v29 = 1024;
      v30 = 352;
      v10 = "%25s:%-5d Use Personalized HRIR data not allowed - using Default.";
    }
    else
    {
      v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 576));
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        goto LABEL_20;
      *(_DWORD *)buf = 136315394;
      v28 = "BinauralSpatializer.mm";
      v29 = 1024;
      v30 = 348;
      v10 = "%25s:%-5d No valid Personalized HRIR data database found - using Default.";
    }
    _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 0x12u);
    goto LABEL_20;
  }
LABEL_32:
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, a2);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2164F7044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::BinauralEncoder::HaveFiltersChanged(Phase::Controller::BinauralEncoder *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 328);
  if ((v1 & 1) != 0)
    atomic_store(0, (unsigned __int8 *)this + 328);
  return v1 & 1;
}

void Phase::Controller::SpatializerFilterHandle::~SpatializerFilterHandle(Phase::Controller::SpatializerFilterHandle *this)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t **std::unique_ptr<Phase::Controller::HrirAsset>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      std::default_delete<Phase::Controller::HrirAsset::Implementation>::operator()[abi:ne180100]((uint64_t)v2, v3);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void Phase::Controller::BinauralEncoder::SwapSpatializationFilters(Phase::Controller::BinauralEncoder *this, char a2, char a3)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  __int128 v11;

  if ((a3 & 1) != 0)
  {
    v5 = operator new(0x28uLL);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_24D577BB8;
    *((_BYTE *)v5 + 32) = a2;
    *((_QWORD *)&v11 + 1) = v5;
    v5[3] = 1;
    *(_QWORD *)&v11 = v5 + 3;
    std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)this + 312, &v11);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    if (!*((_QWORD *)&v11 + 1))
      return;
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
  }
  else
  {
    v9 = operator new(0x28uLL);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = &off_24D577BB8;
    *((_BYTE *)v9 + 32) = 0;
    *((_QWORD *)&v11 + 1) = v9;
    v9[3] = 0;
    *(_QWORD *)&v11 = v9 + 3;
    std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)this + 312, &v11);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    if (!*((_QWORD *)&v11 + 1))
      return;
    v10 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v10);
    while (__stlxr(v8 - 1, v10));
  }
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

uint64_t Phase::Controller::BinauralEncoder::BuildFilterDatabase(uint64_t a1, uint64_t a2)
{
  IR::IRData **v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  Phase::Logger *IRDataAttributes;
  int FilterLength;
  float v10;
  __int32 v11;
  int8x8_t v12;
  uint8x8_t v13;
  unsigned __int32 v14;
  unsigned int v15;
  BOOL v16;
  _QWORD *v17;
  Phase::Logger *v18;
  NSObject *v19;
  const char *v20;
  int v21;
  int v22;
  float v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  CFTypeRef cf;
  __int32 v54;
  const Phase::Controller::SpatializerEncoder *v55;
  void *__p[8];

  __p[7] = *(void **)MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 184) = 2 * (a2 == 1);
  IR::IRDataLoader::instance((IR::IRDataLoader *)a1);
  cf = 0;
  memset(__p, 0, 24);
  IR::IRDataLoader::load();
  v4 = (IR::IRData **)(a1 + 120);
  std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100](a1 + 120, &v50);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (cf)
    CFRelease(cf);
  if (a2 == 1
    && (IRDataAttributes = (Phase::Logger *)IR::IRData::getIRDataAttributes(*v4), !*((_DWORD *)IRDataAttributes + 12)))
  {
    v37 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(IRDataAttributes) + 576));
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "BinauralSpatializer.mm";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 254;
      _os_log_impl(&dword_2164CC000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d IRDataLoader failed to load personalized HRIR. Skipping database initialization.", (uint8_t *)__p, 0x12u);
    }
    memset(__p, 0, 48);
    std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100]((_QWORD *)(a1 + 72), (uint64_t *)__p);
    std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100]((_QWORD *)(a1 + 88), (uint64_t *)&__p[2]);
    std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100]((_QWORD *)(a1 + 104), (uint64_t *)&__p[4]);
    v38 = (std::__shared_weak_count *)__p[5];
    if (__p[5])
    {
      v39 = (unint64_t *)((char *)__p[5] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)__p[3];
    if (__p[3])
    {
      v42 = (unint64_t *)((char *)__p[3] + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v45 = (unint64_t *)((char *)__p[1] + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)v4, (__int128 *)__p);
    v47 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v48 = (unint64_t *)((char *)__p[1] + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    return 0;
  }
  else
  {
    FilterLength = IR::IRData::getFilterLength(*v4);
    IR::IRData::getMaxDelay(*v4);
    v11 = FilterLength + (int)v10;
    v12.i32[0] = v11;
    v13 = (uint8x8_t)vcnt_s8(v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.i32[0] != 1)
    {
      v14 = v11 - 1;
      v15 = 1;
      do
      {
        v14 |= v14 >> v15;
        v16 = v15 >= 0x10;
        v15 *= 2;
      }
      while (!v16);
      v11 = v14 + 1;
    }
    __p[0] = *(void **)(a1 + 16);
    v55 = 0;
    v54 = v11;
    std::allocate_shared[abi:ne180100]<Phase::Controller::SpatializerFilterDatabase,std::allocator<Phase::Controller::SpatializerFilterDatabase>,Phase::Controller::Spatializer const*&,Phase::Controller::SpatializerEncoder const*&,unsigned int &,void>((const Phase::Controller::Spatializer **)__p, &v55, (unsigned int *)&v54, &v50);
    v51 = 0u;
    v52 = 0u;
    v17 = (_QWORD *)(a1 + 48 * a2);
    std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100](v17 + 3, (uint64_t *)&v50);
    std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100](v17 + 5, (uint64_t *)&v51);
    v18 = (Phase::Logger *)std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100](v17 + 7, (uint64_t *)&v52);
    v19 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v18)
                                                                                        + 576)));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (a2)
        v20 = "Personalized";
      else
        v20 = "Default";
      v21 = IR::IRData::getFilterLength(*v4);
      IR::IRData::getMaxDelay(*v4);
      v22 = *(_DWORD *)(v50 + 8);
      LODWORD(__p[0]) = 136316418;
      *(void **)((char *)__p + 4) = "BinauralSpatializer.mm";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 277;
      WORD1(__p[2]) = 2080;
      *(void **)((char *)&__p[2] + 4) = (void *)v20;
      WORD2(__p[3]) = 1024;
      *(_DWORD *)((char *)&__p[3] + 6) = v21;
      WORD1(__p[4]) = 2048;
      *(double *)((char *)&__p[4] + 4) = v23;
      WORD2(__p[5]) = 1024;
      *(_DWORD *)((char *)&__p[5] + 6) = v22;
      _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Built %s HRIR filter database. Filter Length: %d, Max Delay: %f, Total Filter Length: %d", (uint8_t *)__p, 0x32u);
    }

    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)v4, (__int128 *)__p);
    v24 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v25 = (unint64_t *)((char *)__p[1] + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
    if (*((_QWORD *)&v52 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    return 1;
  }
}

void sub_2164F7864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void Phase::Controller::BinauralEncoder::SetFilterTypeInUse(unint64_t *a1, unint64_t a2)
{
  NSObject *v3;
  unint64_t v4;
  const char *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  void **v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  atomic_store(a2, a1 + 36);
  v3 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1)
                                                                                     + 576)));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = atomic_load(a1 + 36);
    (*(void (**)(void **__return_ptr, unint64_t *))(*a1 + 40))(__p, a1);
    v5 = "Personalized";
    if (!v4)
      v5 = "Default";
    v10 = "BinauralSpatializer.mm";
    *(_DWORD *)buf = 136315906;
    v11 = 1024;
    if (v8 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    v12 = 384;
    v13 = 2080;
    v14 = v5;
    v15 = 2080;
    v16 = v6;
    _os_log_impl(&dword_2164CC000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Using %s HRIR filter database - %s.", buf, 0x26u);
    if (v8 < 0)
      operator delete(__p[0]);
  }

}

void sub_2164F7A00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<Phase::Controller::BinauralEncoder::FilterSwapInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D577BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Controller::BinauralEncoder::FilterSwapInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D577BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

void std::__function::__func<std::__bind<void (Phase::Controller::BinauralEncoder::*)(BOOL,BOOL),Phase::Controller::BinauralEncoder*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::BinauralEncoder::*)(BOOL,BOOL),Phase::Controller::BinauralEncoder*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(BOOL,BOOL)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<std::__bind<void (Phase::Controller::BinauralEncoder::*)(BOOL,BOOL),Phase::Controller::BinauralEncoder*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::BinauralEncoder::*)(BOOL,BOOL),Phase::Controller::BinauralEncoder*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(BOOL,BOOL)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D577BF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (Phase::Controller::BinauralEncoder::*)(BOOL,BOOL),Phase::Controller::BinauralEncoder*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::BinauralEncoder::*)(BOOL,BOOL),Phase::Controller::BinauralEncoder*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(BOOL,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D577BF0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (Phase::Controller::BinauralEncoder::*)(BOOL,BOOL),Phase::Controller::BinauralEncoder*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::BinauralEncoder::*)(BOOL,BOOL),Phase::Controller::BinauralEncoder*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(BOOL,BOOL)>::operator()(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, _QWORD);
  _QWORD *v5;

  v3 = a1[2];
  v4 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD))a1[1];
  v5 = (_QWORD *)(a1[3] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v5 + v4);
  return v4(v5, *a2, *a3);
}

void applesauce::CF::DataRef::~DataRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_2164F7BD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

_QWORD *std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_2164F7CDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<float>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_2164F7D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<float>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2164F7E5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

_QWORD *Phase::Controller::BinauralEncoder::GetDescription(Phase::Controller::BinauralEncoder *this, const Phase::Controller::SpatializerFilterHandle *a2, _QWORD *a3)
{
  unint64_t v5;
  char __str[256];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  atomic_load((unint64_t *)a2 + 36);
  v5 = *(_QWORD *)a2;
  if (*a3)
  {
    (*(void (**)(const Phase::Controller::SpatializerFilterHandle *, _QWORD *))(v5 + 56))(a2, a3);
    (*(void (**)(const Phase::Controller::SpatializerFilterHandle *))(*(_QWORD *)a2 + 48))(a2);
    snprintf(__str, 0x100uLL, "<Encoder Type: Binaural, Filter Type: %s, Filter Length: %d, Output Channel Count: %d>");
  }
  else
  {
    (*(void (**)(const Phase::Controller::SpatializerFilterHandle *))(v5 + 48))(a2);
    snprintf(__str, 0x100uLL, "<Encoder Type: Binaural, Filter Type: %s, Filter Length: Unavailable, Output Channel Count: %d>");
  }
  return std::string::basic_string[abi:ne180100]<0>(this, __str);
}

std::logic_error *_ZN5Phase11OutOfMemoryCI1St11logic_errorEPKc(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)&off_24D577C68;
  return result;
}

double Phase::BitBlockAllocator<Phase::SystemAllocator>::Destroy(uint64_t a1)
{
  double result;

  Phase::BitBlockAllocator<Phase::SystemAllocator>::Reset((unsigned __int16 *)a1);
  if (*(_QWORD *)(a1 + 32))
    operator delete(*(void **)(a1 + 16));
  *(_QWORD *)a1 = 0xFFFF00000000;
  *(_DWORD *)(a1 + 8) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void Phase::BitBlockAllocator<Phase::SystemAllocator>::Initialize(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  signed int v5;
  int v10;
  size_t v11;
  Phase *v12;
  int v13;
  __int16 v14;
  __int16 v15;

  *(_QWORD *)a1 = 0xFFFF00000000;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v5 = (a2 + 63) & 0xFFFFFFC0;
  if (v5 > 0x8000)
    __assert_rtn("Initialize", "BitBlockAllocator.cpp", 28, "maximumBlockCount <= kBlockMax");
  v10 = ((0x8000 - v5) & ((0x8000 - v5) >> 31)) + v5;
  v11 = 8 * (((v10 >> 6) + 63) >> 6);
  v12 = (Phase *)(v11 + 16 * (v10 >> 6));
  if (v12)
    v12 = (Phase *)operator new((size_t)v12);
  *(_WORD *)a1 = v10;
  *(_WORD *)(a1 + 6) = a3;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = (char *)v12 + v11;
  v13 = 1;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  do
  {
    v14 = v13;
    v15 = v13 & a3;
    v13 *= 2;
  }
  while (!v15);
  *(_WORD *)(a1 + 8) = v14;
  Phase::Memset8(v12, 0, v11);
  Phase::Memset8(*(Phase **)(a1 + 24), 0, 16 * (v10 >> 6));
}

void Phase::BitBlockAllocator<Phase::SystemAllocator>::Reset(unsigned __int16 *a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int v5;
  void *v6;

  *(_DWORD *)(a1 + 1) = -65536;
  a1[5] = 0;
  v2 = *a1;
  v3 = v2 >> 6;
  Phase::Memset8(*((Phase **)a1 + 2), 0, (((v2 >> 6) + 63) >> 3) & 0xF8);
  if (v2 >= 0x40)
  {
    v4 = (_QWORD *)*((_QWORD *)a1 + 3);
    if (v3 <= 1)
      v5 = 1;
    else
      v5 = v3;
    do
    {
      v6 = (void *)v4[1];
      if (v6)
      {
        operator delete(v6);
      }
      else if (*v4)
      {
        __assert_rtn("Reset", "BitBlockAllocator.cpp", 86, "pBottomEntry->mBits == 0");
      }
      *v4 = 0;
      v4[1] = 0;
      v4 += 2;
      --v5;
    }
    while (v5);
  }
}

char *Phase::BitBlockAllocator<Phase::SystemAllocator>::Allocate(Phase::Logger *a1)
{
  uint64_t v1;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  std::logic_error *exception;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  size_t v15;
  std::align_val_t v16;
  NSObject *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  NSObject *v22;
  std::logic_error *v23;
  int v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  size_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v1 = *(unsigned __int16 *)a1;
  if (!*(_WORD *)a1)
  {
LABEL_5:
    v6 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 304);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v24 = 136315394;
      v25 = "BitBlockAllocator.cpp";
      v26 = 1024;
      v27 = 144;
      _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::OutOfMemory): \"BitBlockAllocator::Allocate(): failed!\"", (uint8_t *)&v24, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase11OutOfMemoryCI1St11logic_errorEPKc(exception, "BitBlockAllocator::Allocate(): failed!");
  }
  v3 = 0;
  v4 = (_QWORD *)*((_QWORD *)a1 + 2);
  v5 = *((_QWORD *)a1 + 3);
  while (*v4 == -1)
  {
    ++v4;
    v5 += 1024;
    v3 += 4096;
    if ((((_DWORD)v1 + 4095) & 0x1F000) == v3)
      goto LABEL_5;
  }
  v8 = __clz(~*v4);
  v9 = *(_QWORD *)(v5 + 16 * v8);
  v10 = __clz(~v9);
  v11 = v10 + ((_DWORD)v8 << 6) + v3;
  if (v11 >= v1)
  {
    v22 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 304);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v24 = 136315394;
      v25 = "BitBlockAllocator.cpp";
      v26 = 1024;
      v27 = 140;
      _os_log_impl(&dword_2164CC000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::OutOfMemory): \"BitBlockAllocator::Allocate(): failed!\"", (uint8_t *)&v24, 0x12u);
    }
    v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase11OutOfMemoryCI1St11logic_errorEPKc(v23, "BitBlockAllocator::Allocate(): failed!");
  }
  v12 = v5 + 16 * v8;
  v13 = *(char **)(v12 + 8);
  if (!v13)
  {
    v14 = *((unsigned __int16 *)a1 + 3);
    if (*((_WORD *)a1 + 3))
    {
      v15 = v14 << 6;
      v16 = (unint64_t)*((unsigned __int16 *)a1 + 4);
      if (!*((_WORD *)a1 + 4))
      {
        v13 = (char *)operator new(v14 << 6);
        goto LABEL_18;
      }
      if ((v16 & (v16 - 1)) == 0)
      {
        v13 = (char *)operator new(v15, v16);
LABEL_18:
        *(_QWORD *)(v12 + 8) = v13;
        v9 = *(_QWORD *)(v5 + 16 * v8);
        goto LABEL_19;
      }
      v17 = **(NSObject ***)(Phase::Logger::GetInstancePtr(0) + 176);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v24 = 136315650;
        v25 = "SystemAllocator.hpp";
        v26 = 1024;
        v27 = 47;
        v28 = 2048;
        v29 = v15;
        _os_log_impl(&dword_2164CC000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Error allocating memory - alignment must be power of two. Alignment requested %zu", (uint8_t *)&v24, 0x1Cu);
      }
    }
    v13 = 0;
    goto LABEL_18;
  }
LABEL_19:
  v18 = 0x8000000000000000 >> v10;
  if (v10 > 0x3F)
    v18 = 0;
  v19 = v9 | v18;
  *(_QWORD *)(v5 + 16 * v8) = v19;
  if (v19 == -1)
    *v4 |= 0x8000000000000000 >> v8;
  ++*((_WORD *)a1 + 1);
  ++*((_WORD *)a1 + 5);
  v20 = *((__int16 *)a1 + 2);
  if (v20 <= v11)
    LOWORD(v20) = v11;
  *((_WORD *)a1 + 2) = v20;
  return &v13[v10 * (unint64_t)*((unsigned __int16 *)a1 + 3)];
}

void sub_2164F8558(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::BitBlockAllocator<Phase::SystemAllocator>::Free(uint64_t a1, unsigned int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  std::logic_error *exception;
  NSObject *v13;
  std::logic_error *v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unsigned int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if ((a2 & 0x80000000) != 0 || (v4 = *(__int16 *)(a1 + 4), v4 < (int)a2))
  {
    v11 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 304);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v15 = 136315650;
      v16 = "BitBlockAllocator.cpp";
      v17 = 1024;
      v18 = 151;
      v19 = 1024;
      v20 = a2;
      _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::out_of_range) [(inIndex < 0) || (inIndex > mHighestInUse) is true]: \"BitBlockAllocator::Free(): Invalid index %d!\"", (uint8_t *)&v15, 0x18u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "BitBlockAllocator::Free(): Invalid index %d!");
  }
  v5 = *(_QWORD *)(a1 + 24);
  v6 = a2 >> 6;
  v7 = (unint64_t *)(v5 + 16 * v6);
  if ((*v7 & (0x8000000000000000 >> a2)) == 0)
  {
    v13 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 304);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v15 = 136315394;
      v16 = "BitBlockAllocator.cpp";
      v17 = 1024;
      v18 = 158;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [(pBottomEntry->mBits & maskBottom) == 0 is true]: \"BitBlockAllocator::Free(): Internal failure!\"", (uint8_t *)&v15, 0x12u);
    }
    v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v14, "BitBlockAllocator::Free(): Internal failure!");
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (a2 >> 12)) &= ~(0x8000000000000000 >> v6);
  v8 = *v7 & ~(0x8000000000000000 >> a2);
  *v7 = v8;
  if (!v8)
  {
    v9 = v5 + 16 * v6;
    operator delete(*(void **)(v9 + 8));
    *(_QWORD *)(v9 + 8) = 0;
    LOWORD(v4) = *(_WORD *)(a1 + 4);
  }
  --*(_WORD *)(a1 + 2);
  if (a2 == (__int16)v4)
  {
    v10 = (__int16)(v4 - 1);
    if (v10 >= -1)
      LOWORD(v10) = -1;
    while (1)
    {
      LOWORD(v4) = v4 - 1;
      if ((v4 & 0x8000) != 0)
        break;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * ((unsigned __int16)v4 >> 6)) << v4) & 0x8000000000000000) != 0)
        goto LABEL_13;
    }
    LOWORD(v4) = v10;
LABEL_13:
    *(_WORD *)(a1 + 4) = v4;
  }
}

void sub_2164F87DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::OutOfMemory::~OutOfMemory(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

double Phase::Controller::sClamp<double>(Phase::Logger *a1, double a2, double a3, double a4)
{
  double v4;
  NSObject *v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  double v15;
  __int16 v16;
  double v17;
  __int16 v18;
  double v19;
  uint64_t v20;

  v4 = a2;
  v20 = *MEMORY[0x24BDAC8D0];
  if (a2 < a3 || a2 > a4)
  {
    v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 704));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v10 = 136316162;
      v11 = "CvmParameter.hpp";
      v12 = 1024;
      v13 = 33;
      v14 = 2048;
      v15 = v4;
      v16 = 2048;
      v17 = a3;
      v18 = 2048;
      v19 = a4;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Value is out of bounds. Clamping %f to range [%f, %f]", (uint8_t *)&v10, 0x30u);
    }
    return fmin(fmax(v4, a3), a4);
  }
  return v4;
}

Phase::Controller::DVM::ChannelAllocator *Phase::Controller::DVM::ChannelAllocator::ChannelAllocator(Phase::Controller::DVM::ChannelAllocator *this, int a2)
{
  signed int v3;

  v3 = (a2 + 63) & 0xFFFFFFC0;
  *((_DWORD *)this + 4) = a2;
  *((_DWORD *)this + 5) = v3;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = malloc_type_malloc(8 * (v3 >> 6), 0x100004000313F17uLL);
  *((_QWORD *)this + 1) = malloc_type_malloc(4 * *((int *)this + 5), 0x100004052888210uLL);
  bzero(*(void **)this, 8 * (*((_DWORD *)this + 5) / 64));
  bzero(*((void **)this + 1), 4 * *((int *)this + 5));
  *((_QWORD *)this + 3) = 0;
  return this;
}

void Phase::Controller::DVM::ChannelAllocator::~ChannelAllocator(void **this)
{
  free(*this);
  free(this[1]);
}

uint64_t Phase::Controller::DVM::ChannelAllocator::ReserveChannel(Phase::Controller::DVM::ChannelAllocator *this, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  v2 = *((_DWORD *)this + 5);
  if (v2 < 64)
    return 0xFFFFFFFFLL;
  v3 = 0;
  v4 = *(uint64_t **)this;
  v5 = v2 & 0xFFFFFFC0;
  while (*v4 == -1)
  {
    ++v4;
    v3 -= 64;
    if (!(v5 + v3))
      return 0xFFFFFFFFLL;
  }
  v6 = *v4;
  v7 = __clz(__rbit64(~*v4));
  v8 = v7 - v3;
  if ((int)v8 >= *((_DWORD *)this + 4))
    return 0xFFFFFFFFLL;
  *(_DWORD *)(*((_QWORD *)this + 1) + 4 * v8) = a2;
  *v4 = (1 << v7) | v6;
  v9 = *((_DWORD *)this + 6);
  v10 = v9 + 1;
  if (v9 + 1 > *((_DWORD *)this + 7))
    v11 = v9 + 1;
  else
    v11 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 6) = v10;
  *((_DWORD *)this + 7) = v11;
  return v8;
}

uint64_t Phase::ChannelLayout::GetLayoutTagFromString(uint64_t a1)
{
  uint64_t v1;
  uint64_t i;
  char *v3;
  char **v4;
  char **v5;
  char *v6;
  _BOOL4 v7;
  char *v8;
  char *v9;
  uint64_t j;
  char **v11;
  int v12;
  int v13;
  char v14;
  std::string *v15;
  int64_t size;
  char *v17;
  int64_t v18;
  char *v19;
  int v20;
  int64_t v21;
  void *v22;
  int64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  char *v28;
  char **v29;
  BOOL v30;
  int v31;
  std::string *v32;
  int64_t v33;
  char *v34;
  int64_t v35;
  char *v36;
  int v37;
  int64_t v38;
  void *v39;
  int64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  std::string v58;
  std::string v59;
  int v60;
  char **v61;
  char *v62[2];
  int v63;
  char v64[8];
  char *v65[2];
  __int128 v66;
  uint64_t v67;
  int v68;
  _QWORD v69[3];
  int v70;
  uint64_t v71;
  void *v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76[3];
  int v77;
  uint64_t v78[3];
  int v79;
  uint64_t v80[3];
  int v81;
  uint64_t v82[3];
  int v83;
  uint64_t v84[3];
  int v85;
  uint64_t v86[3];
  int v87;
  uint64_t v88[3];
  int v89;
  uint64_t v90[3];
  int v91;
  uint64_t v92[3];
  int v93;
  uint64_t v94[3];
  int v95;
  uint64_t v96[3];
  int v97;
  uint64_t v98[3];
  int v99;
  uint64_t v100[3];
  int v101;
  uint64_t v102[3];
  int v103;
  uint64_t v104[3];
  int v105;
  uint64_t v106[3];
  int v107;
  uint64_t v108[3];
  int v109;
  uint64_t v110[3];
  int v111;
  uint64_t v112[3];
  int v113;
  uint64_t v114[3];
  int v115;
  uint64_t v116[3];
  int v117;
  uint64_t v118[3];
  int v119;
  uint64_t v120[3];
  int v121;
  uint64_t v122[3];
  int v123;
  uint64_t v124[3];
  int v125;
  uint64_t v126[3];
  int v127;
  uint64_t v128[3];
  int v129;
  uint64_t v130[3];
  int v131;
  uint64_t v132[3];
  int v133;
  uint64_t v134[3];
  int v135;
  uint64_t v136[3];
  int v137;
  uint64_t v138[3];
  int v139;
  uint64_t v140[3];
  int v141;
  uint64_t v142[3];
  int v143;
  uint64_t v144[3];
  int v145;
  uint64_t v146[3];
  int v147;
  uint64_t v148[3];
  int v149;
  uint64_t v150[3];
  int v151;
  uint64_t v152[3];
  int v153;
  uint64_t v154[3];
  int v155;
  uint64_t v156[3];
  int v157;
  uint64_t v158[3];
  int v159;
  uint64_t v160[3];
  int v161;
  uint64_t v162[3];
  int v163;
  uint64_t v164[3];
  int v165;
  uint64_t v166[3];
  int v167;
  uint64_t v168[3];
  int v169;
  uint64_t v170[3];
  int v171;
  uint64_t v172[3];
  int v173;
  uint64_t v174[3];
  int v175;
  uint64_t v176[3];
  int v177;
  uint64_t v178[3];
  int v179;
  uint64_t v180[3];
  int v181;
  uint64_t v182[3];
  int v183;
  uint64_t v184[3];
  int v185;
  uint64_t v186[3];
  int v187;
  uint64_t v188[3];
  int v189;
  uint64_t v190[3];
  int v191;
  uint64_t v192[3];
  int v193;
  uint64_t v194[3];
  int v195;
  uint64_t v196[3];
  int v197;
  uint64_t v198[3];
  int v199;
  uint64_t v200[3];
  int v201;
  uint64_t v202[3];
  int v203;
  uint64_t v204[3];
  int v205;
  uint64_t v206[3];
  int v207;
  uint64_t v208[3];
  int v209;
  uint64_t v210[3];
  int v211;
  uint64_t v212[3];
  int v213;
  uint64_t v214[3];
  int v215;
  uint64_t v216[3];
  int v217;
  uint64_t v218[3];
  int v219;
  uint64_t v220[3];
  int v221;
  uint64_t v222[3];
  int v223;
  uint64_t v224[3];
  int v225;
  uint64_t v226[3];
  int v227;
  uint64_t v228[3];
  int v229;
  uint64_t v230[3];
  int v231;
  uint64_t v232[3];
  int v233;
  uint64_t v234[3];
  int v235;
  uint64_t v236[3];
  int v237;
  uint64_t v238[3];
  int v239;
  uint64_t v240[3];
  int v241;
  uint64_t v242[3];
  int v243;
  uint64_t v244[3];
  int v245;
  uint64_t v246[3];
  int v247;
  uint64_t v248[3];
  int v249;
  uint64_t v250[3];
  int v251;
  uint64_t v252[3];
  int v253;
  uint64_t v254[3];
  int v255;
  uint64_t v256[3];
  int v257;
  uint64_t v258[3];
  int v259;
  uint64_t v260[3];
  int v261;
  uint64_t v262[3];
  int v263;
  uint64_t v264[3];
  int v265;
  uint64_t v266[3];
  int v267;
  uint64_t v268[3];
  int v269;
  uint64_t v270[3];
  int v271;
  uint64_t v272[3];
  int v273;
  uint64_t v274[3];
  int v275;
  uint64_t v276[3];
  int v277;
  uint64_t v278[3];
  int v279;
  uint64_t v280[3];
  int v281;
  uint64_t v282[3];
  int v283;
  uint64_t v284[3];
  int v285;
  uint64_t v286[3];
  int v287;
  uint64_t v288[3];
  int v289;
  uint64_t v290[3];
  int v291;
  uint64_t v292[3];
  int v293;
  uint64_t v294[3];
  int v295;
  uint64_t v296[3];
  int v297;
  uint64_t v298[3];
  int v299;
  uint64_t v300[3];
  int v301;
  uint64_t v302[3];
  int v303;
  uint64_t v304[3];
  int v305;
  uint64_t v306[3];
  int v307;
  uint64_t v308[3];
  int v309;
  uint64_t v310[3];
  int v311;
  uint64_t v312[3];
  int v313;
  uint64_t v314[3];
  int v315;
  uint64_t v316[3];
  int v317;
  uint64_t v318[3];
  int v319;
  uint64_t v320[3];
  int v321;
  uint64_t v322[3];
  int v323;
  uint64_t v324[3];
  int v325;
  uint64_t v326[3];
  int v327;
  uint64_t v328[3];
  int v329;
  uint64_t v330[3];
  int v331;
  uint64_t v332[3];
  int v333;
  uint64_t v334[3];
  int v335;
  uint64_t v336[3];
  int v337;
  uint64_t v338[3];
  int v339;
  uint64_t v340[3];
  int v341;
  uint64_t v342[3];
  int v343;
  uint64_t v344[3];
  int v345;
  uint64_t v346[3];
  int v347;
  _QWORD v348[3];
  int v349;
  uint64_t v350;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v350 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v66, "Mono");
  v68 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v69, "Stereo");
  v70 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(&v71, "StereoHeadphones");
  v73 = 6684674;
  std::string::basic_string[abi:ne180100]<0>(&v74, "MatrixStereo");
  v75 = 6750210;
  std::string::basic_string[abi:ne180100]<0>(v76, "MidSide");
  v77 = 6815746;
  std::string::basic_string[abi:ne180100]<0>(v78, "XY");
  v79 = 6881282;
  std::string::basic_string[abi:ne180100]<0>(v80, "Binaural");
  v81 = 6946818;
  std::string::basic_string[abi:ne180100]<0>(v82, "Ambisonic_B_Format");
  v83 = 7012356;
  std::string::basic_string[abi:ne180100]<0>(v84, "Quadraphonic");
  v85 = 7077892;
  std::string::basic_string[abi:ne180100]<0>(v86, "Pentagonal");
  v87 = 7143429;
  std::string::basic_string[abi:ne180100]<0>(v88, "Hexagonal");
  v89 = 7208966;
  std::string::basic_string[abi:ne180100]<0>(v90, "Octagonal");
  v91 = 7274504;
  std::string::basic_string[abi:ne180100]<0>(v92, "Cube");
  v93 = 7340040;
  std::string::basic_string[abi:ne180100]<0>(v94, "MPEG_1_0");
  v95 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v96, "MPEG_2_0");
  v97 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(v98, "MPEG_3_0_A");
  v99 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v100, "MPEG_3_0_B");
  v101 = 7471107;
  std::string::basic_string[abi:ne180100]<0>(v102, "MPEG_4_0_A");
  v103 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v104, "MPEG_4_0_B");
  v105 = 7602180;
  std::string::basic_string[abi:ne180100]<0>(v106, "MPEG_5_0_A");
  v107 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v108, "MPEG_5_0_B");
  v109 = 7733253;
  std::string::basic_string[abi:ne180100]<0>(v110, "MPEG_5_0_C");
  v111 = 7798789;
  std::string::basic_string[abi:ne180100]<0>(v112, "MPEG_5_0_D");
  v113 = 7864325;
  std::string::basic_string[abi:ne180100]<0>(v114, "MPEG_5_1_A");
  v115 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v116, "MPEG_5_1_B");
  v117 = 7995398;
  std::string::basic_string[abi:ne180100]<0>(v118, "MPEG_5_1_C");
  v119 = 8060934;
  std::string::basic_string[abi:ne180100]<0>(v120, "MPEG_5_1_D");
  v121 = 8126470;
  std::string::basic_string[abi:ne180100]<0>(v122, "MPEG_6_1_A");
  v123 = 8192007;
  std::string::basic_string[abi:ne180100]<0>(v124, "MPEG_7_1_A");
  v125 = 8257544;
  std::string::basic_string[abi:ne180100]<0>(v126, "MPEG_7_1_B");
  v127 = 8323080;
  std::string::basic_string[abi:ne180100]<0>(v128, "MPEG_7_1_C");
  v129 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v130, "Emagic_Default_7_1");
  v131 = 8454152;
  std::string::basic_string[abi:ne180100]<0>(v132, "SMPTE_DTV");
  v133 = 8519688;
  std::string::basic_string[abi:ne180100]<0>(v134, "ITU_1_0");
  v135 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v136, "ITU_2_0");
  v52 = v1;
  v137 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(v138, "ITU_2_1");
  v139 = 8585219;
  std::string::basic_string[abi:ne180100]<0>(v140, "ITU_2_2");
  v141 = 8650756;
  std::string::basic_string[abi:ne180100]<0>(v142, "ITU_3_0");
  v143 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v144, "ITU_3_1");
  v145 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v146, "ITU_3_2");
  v147 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v148, "ITU_3_2_1");
  v149 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v150, "ITU_3_4_1");
  v151 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v152, "DVD_0");
  v153 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v154, "DVD_1");
  v155 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(v156, "DVD_2");
  v157 = 8585219;
  std::string::basic_string[abi:ne180100]<0>(v158, "DVD_3");
  v159 = 8650756;
  std::string::basic_string[abi:ne180100]<0>(v160, "DVD_4");
  v161 = 8716291;
  std::string::basic_string[abi:ne180100]<0>(v162, "DVD_5");
  v163 = 8781828;
  std::string::basic_string[abi:ne180100]<0>(v164, "DVD_6");
  v165 = 8847365;
  std::string::basic_string[abi:ne180100]<0>(v166, "DVD_7");
  v167 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v168, "DVD_8");
  v169 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v170, "DVD_9");
  v171 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v172, "DVD_10");
  v173 = 8912900;
  std::string::basic_string[abi:ne180100]<0>(v174, "DVD_11");
  v175 = 8978437;
  std::string::basic_string[abi:ne180100]<0>(v176, "DVD_12");
  v177 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v178, "DVD_13");
  v179 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v180, "DVD_14");
  v181 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v182, "DVD_15");
  v183 = 8912900;
  std::string::basic_string[abi:ne180100]<0>(v184, "DVD_16");
  v185 = 8978437;
  std::string::basic_string[abi:ne180100]<0>(v186, "DVD_17");
  v187 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v188, "DVD_18");
  v189 = 9043973;
  std::string::basic_string[abi:ne180100]<0>(v190, "DVD_19");
  v191 = 7733253;
  std::string::basic_string[abi:ne180100]<0>(v192, "DVD_20");
  v193 = 7995398;
  std::string::basic_string[abi:ne180100]<0>(v194, "AudioUnit_4");
  v195 = 7077892;
  std::string::basic_string[abi:ne180100]<0>(v196, "AudioUnit_5");
  v197 = 7143429;
  std::string::basic_string[abi:ne180100]<0>(v198, "AudioUnit_6");
  v199 = 7208966;
  std::string::basic_string[abi:ne180100]<0>(v200, "AudioUnit_8");
  v201 = 7274504;
  std::string::basic_string[abi:ne180100]<0>(v202, "AudioUnit_5_0");
  v203 = 7733253;
  std::string::basic_string[abi:ne180100]<0>(v204, "AudioUnit_6_0");
  v205 = 9109510;
  std::string::basic_string[abi:ne180100]<0>(v206, "AudioUnit_7_0");
  v207 = 9175047;
  std::string::basic_string[abi:ne180100]<0>(v208, "AudioUnit_7_0_Front");
  v209 = 9699335;
  std::string::basic_string[abi:ne180100]<0>(v210, "AudioUnit_5_1");
  v211 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v212, "AudioUnit_6_1");
  v213 = 8192007;
  std::string::basic_string[abi:ne180100]<0>(v214, "AudioUnit_7_1");
  v215 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v216, "AudioUnit_7_1_Front");
  v217 = 8257544;
  std::string::basic_string[abi:ne180100]<0>(v218, "AAC_3_0");
  v219 = 7471107;
  std::string::basic_string[abi:ne180100]<0>(v220, "AAC_Quadraphonic");
  v221 = 7077892;
  std::string::basic_string[abi:ne180100]<0>(v222, "AAC_4_0");
  v223 = 7602180;
  std::string::basic_string[abi:ne180100]<0>(v224, "AAC_5_0");
  v225 = 7864325;
  std::string::basic_string[abi:ne180100]<0>(v226, "AAC_5_1");
  v227 = 8126470;
  std::string::basic_string[abi:ne180100]<0>(v228, "AAC_6_0");
  v229 = 9240582;
  std::string::basic_string[abi:ne180100]<0>(v230, "AAC_6_1");
  v231 = 9306119;
  std::string::basic_string[abi:ne180100]<0>(v232, "AAC_7_0");
  v233 = 9371655;
  std::string::basic_string[abi:ne180100]<0>(v234, "AAC_7_1");
  v235 = 8323080;
  std::string::basic_string[abi:ne180100]<0>(v236, "AAC_7_1_B");
  v237 = 11993096;
  std::string::basic_string[abi:ne180100]<0>(v238, "AAC_7_1_C");
  v239 = 12058632;
  std::string::basic_string[abi:ne180100]<0>(v240, "AAC_Octagonal");
  v241 = 9437192;
  std::string::basic_string[abi:ne180100]<0>(v242, "TMH_10_2_std");
  v243 = 9502736;
  std::string::basic_string[abi:ne180100]<0>(v244, "TMH_10_2_full");
  v245 = 9568277;
  std::string::basic_string[abi:ne180100]<0>(v246, "AC3_1_0_1");
  v247 = 9764866;
  std::string::basic_string[abi:ne180100]<0>(v248, "AC3_3_0");
  v249 = 9830403;
  std::string::basic_string[abi:ne180100]<0>(v250, "AC3_3_1");
  v251 = 9895940;
  std::string::basic_string[abi:ne180100]<0>(v252, "AC3_3_0_1");
  v253 = 9961476;
  std::string::basic_string[abi:ne180100]<0>(v254, "AC3_2_1_1");
  v255 = 10027012;
  std::string::basic_string[abi:ne180100]<0>(v256, "AC3_3_1_1");
  v257 = 10092549;
  std::string::basic_string[abi:ne180100]<0>(v258, "EAC_6_0_A");
  v259 = 10158086;
  std::string::basic_string[abi:ne180100]<0>(v260, "EAC_7_0_A");
  v261 = 10223623;
  std::string::basic_string[abi:ne180100]<0>(v262, "EAC3_6_1_A");
  v263 = 10289159;
  std::string::basic_string[abi:ne180100]<0>(v264, "EAC3_6_1_B");
  v265 = 10354695;
  std::string::basic_string[abi:ne180100]<0>(v266, "EAC3_6_1_C");
  v267 = 10420231;
  std::string::basic_string[abi:ne180100]<0>(v268, "EAC3_7_1_A");
  v269 = 10485768;
  std::string::basic_string[abi:ne180100]<0>(v270, "EAC3_7_1_B");
  v271 = 10551304;
  std::string::basic_string[abi:ne180100]<0>(v272, "EAC3_7_1_C");
  v273 = 10616840;
  std::string::basic_string[abi:ne180100]<0>(v274, "EAC3_7_1_D");
  v275 = 10682376;
  std::string::basic_string[abi:ne180100]<0>(v276, "EAC3_7_1_E");
  v277 = 10747912;
  std::string::basic_string[abi:ne180100]<0>(v278, "EAC3_7_1_F");
  v279 = 10813448;
  std::string::basic_string[abi:ne180100]<0>(v280, "EAC3_7_1_G");
  v281 = 10878984;
  std::string::basic_string[abi:ne180100]<0>(v282, "EAC3_7_1_H");
  v283 = 10944520;
  std::string::basic_string[abi:ne180100]<0>(v284, "DTS_3_1");
  v285 = 11010052;
  std::string::basic_string[abi:ne180100]<0>(v286, "DTS_4_1");
  v287 = 11075589;
  std::string::basic_string[abi:ne180100]<0>(v288, "DTS_6_0_A");
  v289 = 11141126;
  std::string::basic_string[abi:ne180100]<0>(v290, "DTS_6_0_B");
  v291 = 11206662;
  std::string::basic_string[abi:ne180100]<0>(v292, "DTS_6_0_C");
  v293 = 11272198;
  std::string::basic_string[abi:ne180100]<0>(v294, "DTS_6_1_A");
  v295 = 11337735;
  std::string::basic_string[abi:ne180100]<0>(v296, "DTS_6_1_B");
  v297 = 11403271;
  std::string::basic_string[abi:ne180100]<0>(v298, "DTS_6_1_C");
  v299 = 11468807;
  std::string::basic_string[abi:ne180100]<0>(v300, "DTS_7_0");
  v301 = 11534343;
  std::string::basic_string[abi:ne180100]<0>(v302, "DTS_7_1");
  v303 = 11599880;
  std::string::basic_string[abi:ne180100]<0>(v304, "DTS_8_0_A");
  v305 = 11665416;
  std::string::basic_string[abi:ne180100]<0>(v306, "DTS_8_0_B");
  v307 = 11730952;
  std::string::basic_string[abi:ne180100]<0>(v308, "DTS_8_1_A");
  v309 = 11796489;
  std::string::basic_string[abi:ne180100]<0>(v310, "DTS_8_1_B");
  v311 = 11862025;
  std::string::basic_string[abi:ne180100]<0>(v312, "DTS_6_1_D");
  v313 = 11927559;
  std::string::basic_string[abi:ne180100]<0>(v314, "WAVE_2_1");
  v315 = 8716291;
  std::string::basic_string[abi:ne180100]<0>(v316, "WAVE_3_0");
  v317 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v318, "WAVE_4_0_A");
  v319 = 8650756;
  std::string::basic_string[abi:ne180100]<0>(v320, "WAVE_4_0_B");
  v321 = 12124164;
  std::string::basic_string[abi:ne180100]<0>(v322, "WAVE_5_0_A");
  v323 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v324, "WAVE_5_0_B");
  v325 = 12189701;
  std::string::basic_string[abi:ne180100]<0>(v326, "WAVE_5_1_A");
  v327 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v328, "WAVE_5_1_B");
  v329 = 12255238;
  std::string::basic_string[abi:ne180100]<0>(v330, "WAVE_6_1");
  v331 = 12320775;
  std::string::basic_string[abi:ne180100]<0>(v332, "WAVE_7_1");
  v333 = 12386312;
  std::string::basic_string[abi:ne180100]<0>(v334, "Atmos_5_1_2");
  v335 = 12713992;
  std::string::basic_string[abi:ne180100]<0>(v336, "Atmos_5_1_4");
  v337 = 12779530;
  std::string::basic_string[abi:ne180100]<0>(v338, "Atmos_7_1_2");
  v339 = 12845066;
  std::string::basic_string[abi:ne180100]<0>(v340, "Atmos_7_1_4");
  v341 = 12582924;
  std::string::basic_string[abi:ne180100]<0>(v342, "Atmos_9_1_6");
  v343 = 12648464;
  std::string::basic_string[abi:ne180100]<0>(v344, "BeginReserved");
  v345 = -268435456;
  std::string::basic_string[abi:ne180100]<0>(v346, "EndReserved");
  v347 = -65537;
  std::string::basic_string[abi:ne180100]<0>(v348, "Unknown");
  v349 = -65536;
  std::map<std::string,unsigned int>::map[abi:ne180100]((uint64_t)v64, &v66, 141);
  for (i = 0; i != -564; i -= 4)
  {
    if (SHIBYTE(v348[i + 2]) < 0)
      operator delete((void *)v348[i]);
  }
  v63 = -65536;
  v3 = v65[0];
  if (!v65[0])
    goto LABEL_19;
  v4 = v65;
  do
  {
    v5 = v4;
    v6 = v3 + 32;
    v7 = std::less<std::string>::operator()[abi:ne180100]((_QWORD *)v3 + 4, (_QWORD *)v1);
    if (v7)
      v8 = v3 + 8;
    else
      v8 = v3;
    if (v7)
      v4 = v5;
    else
      v4 = (char **)v3;
    v3 = *(char **)v8;
  }
  while (*(_QWORD *)v8);
  if (v4 == v65
    || (!v7 ? (v9 = v6) : (v9 = (char *)(v5 + 4)), std::less<std::string>::operator()[abi:ne180100]((_QWORD *)v1, v9)))
  {
LABEL_19:
    std::string::basic_string[abi:ne180100]<0>(&v66, "HOA_ACN_SN3D");
    v68 = 12451840;
    std::string::basic_string[abi:ne180100]<0>(v69, "HOA_ACN_N3D");
    v70 = 12517376;
    std::map<std::string,unsigned int>::map[abi:ne180100]((uint64_t)&v61, &v66, 2);
    for (j = 0; j != -8; j -= 4)
    {
      if (SHIBYTE(v69[j + 2]) < 0)
        operator delete((void *)v69[j]);
    }
    v11 = v61;
    if (v61 != v62)
    {
      v55 = *MEMORY[0x24BEDB7F8];
      v53 = MEMORY[0x24BEDB848] + 16;
      v54 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
      v56 = -65536;
      while (1)
      {
        if (*((char *)v11 + 55) < 0)
          std::string::__init_copy_ctor_external(&v59, v11[4], (std::string::size_type)v11[5]);
        else
          v59 = *(std::string *)(v11 + 4);
        v12 = *((_DWORD *)v11 + 14);
        v60 = v12;
        v13 = *(char *)(v1 + 23);
        v14 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &v59;
        else
          v15 = (std::string *)v59.__r_.__value_.__r.__words[0];
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
        else
          size = v59.__r_.__value_.__l.__size_;
        if (v13 >= 0)
          v17 = (char *)v1;
        else
          v17 = *(char **)v1;
        if (v13 >= 0)
          v18 = *(unsigned __int8 *)(v1 + 23);
        else
          v18 = *(_QWORD *)(v1 + 8);
        if (size)
        {
          if (v18 < size)
            goto LABEL_58;
          v19 = &v17[v18];
          v20 = v15->__r_.__value_.__s.__data_[0];
          v21 = v18;
          v22 = v17;
          while (1)
          {
            v23 = v21 - size;
            if (v23 == -1 || (v24 = (char *)memchr(v22, v20, v23 + 1)) == 0)
            {
LABEL_47:
              v1 = v52;
              if ((v14 & 0x80) == 0)
                goto LABEL_60;
              goto LABEL_59;
            }
            v25 = v24;
            if (!memcmp(v24, v15, size))
              break;
            v22 = v25 + 1;
            v21 = v19 - (v25 + 1);
            if (v21 < size)
              goto LABEL_47;
          }
          if (v25 == v19)
          {
            v1 = v52;
            if ((v14 & 0x80) == 0)
              goto LABEL_60;
LABEL_59:
            operator delete(v59.__r_.__value_.__l.__data_);
            goto LABEL_60;
          }
          v1 = v52;
          if (v25 != v17)
            goto LABEL_58;
        }
        v63 = v12;
        std::string::basic_string(&v58, (const std::string *)v1, size, v18, (std::allocator<char> *)&v66);
        v57 = 0;
        std::istringstream::basic_istringstream[abi:ne180100](&v66, &v58);
        MEMORY[0x2199F9A70](&v66, &v57);
        v26 = *(_DWORD *)((char *)v69 + *(_QWORD *)(v66 - 24));
        *(_QWORD *)&v66 = v55;
        *(_QWORD *)((char *)&v66 + *(_QWORD *)(v55 - 24)) = v54;
        v67 = v53;
        if (SHIBYTE(v74) < 0)
          operator delete(v72);
        std::streambuf::~streambuf();
        std::istream::~istream();
        MEMORY[0x2199F9CD4](&v75);
        v27 = ((v57 + 1) * (v57 + 1)) | v12;
        if ((v26 & 5) != 0)
          v27 = -65536;
        v56 = v27;
        v63 = v27;
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v58.__r_.__value_.__l.__data_);
        v14 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
LABEL_58:
        if (v14 < 0)
          goto LABEL_59;
LABEL_60:
        v28 = v11[1];
        if (v28)
        {
          do
          {
            v29 = (char **)v28;
            v28 = *(char **)v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (char **)v11[2];
            v30 = *v29 == (char *)v11;
            v11 = v29;
          }
          while (!v30);
        }
        v11 = v29;
        if (v29 == v62)
          goto LABEL_70;
      }
    }
    v56 = -65536;
LABEL_70:
    std::string::basic_string[abi:ne180100]<0>(&v59, "DiscreteInOrder");
    v60 = 9633792;
    v31 = *(char *)(v1 + 23);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v59;
    else
      v32 = (std::string *)v59.__r_.__value_.__r.__words[0];
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    else
      v33 = v59.__r_.__value_.__l.__size_;
    if (v31 >= 0)
      v34 = (char *)v1;
    else
      v34 = *(char **)v1;
    if (v31 >= 0)
      v35 = *(unsigned __int8 *)(v1 + 23);
    else
      v35 = *(_QWORD *)(v1 + 8);
    if (v33)
    {
      if (v35 >= v33)
      {
        v36 = &v34[v35];
        v37 = v32->__r_.__value_.__s.__data_[0];
        v38 = v35;
        v39 = v34;
        do
        {
          v40 = v38 - v33;
          if (v40 == -1)
            break;
          v41 = (char *)memchr(v39, v37, v40 + 1);
          if (!v41)
            break;
          v42 = v41;
          if (!memcmp(v41, v32, v33))
          {
            if (v42 == v36 || v42 != v34)
              break;
            goto LABEL_94;
          }
          v39 = v42 + 1;
          v38 = v36 - (v42 + 1);
        }
        while (v38 >= v33);
      }
    }
    else
    {
LABEL_94:
      v63 = 9633792;
      std::string::basic_string(&v58, (const std::string *)v1, v33, v35, (std::allocator<char> *)&v66);
      v57 = 0;
      std::istringstream::basic_istringstream[abi:ne180100](&v66, &v58);
      v45 = (_QWORD *)MEMORY[0x24BEDB7F8];
      v46 = MEMORY[0x24BEDB848];
      MEMORY[0x2199F9A70](&v66, &v57);
      *(_QWORD *)&v66 = *v45;
      *(_QWORD *)((char *)&v66 + *(_QWORD *)(v66 - 24)) = v45[3];
      v67 = v46 + 16;
      if (SHIBYTE(v74) < 0)
        operator delete(v72);
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x2199F9CD4](&v75);
      v56 = v57 | 0x930000;
      v63 = v57 | 0x930000;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (v56 == -65536)
    {
      std::istringstream::basic_istringstream[abi:ne180100](&v66, (const std::string *)v1);
      v47 = (_QWORD *)MEMORY[0x24BEDB7F8];
      MEMORY[0x2199F9A70](&v66, &v63);
      v48 = MEMORY[0x24BEDB848];
      v49 = *(_DWORD *)((_BYTE *)v69 + *(_QWORD *)(v66 - 24)) & 5;
      *(_QWORD *)&v66 = *v47;
      *(_QWORD *)((char *)&v66 + *(_QWORD *)(v66 - 24)) = v47[3];
      v67 = v48 + 16;
      if (SHIBYTE(v74) < 0)
        operator delete(v72);
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x2199F9CD4](&v75);
      if (v49)
        v63 = -65536;
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v62[0]);
    v44 = &v63;
  }
  else
  {
    v43 = *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__find_equal<std::string>((uint64_t)v64, &v66, (_QWORD *)v1);
    if (!v43)
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    v44 = (int *)(v43 + 56);
  }
  v50 = *v44;
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v65[0]);
  return v50;
}

void sub_2164FA2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char *a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(a38);
  _Unwind_Resume(a1);
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;

  v4 = MEMORY[0x24BEDB868];
  v5 = MEMORY[0x24BEDB868] + 64;
  a1[15] = MEMORY[0x24BEDB868] + 64;
  v6 = (uint64_t)(a1 + 2);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *a1 = v7;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v7 - 24)) = v8;
  a1[1] = 0;
  v9 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  *a1 = v4 + 24;
  a1[15] = v5;
  std::stringbuf::basic_stringbuf[abi:ne180100](v6, a2, 8);
  return a1;
}

void sub_2164FA6CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x2199F9CD4](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x2199F9CD4](a1 + 120);
  return a1;
}

void Phase::ChannelLayout::GetStringFromLayoutTag(Phase::ChannelLayout *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int16 v2;
  unsigned int v4;
  int v5;
  BOOL v6;
  std::string *v7;
  __int128 v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  int v13;
  BOOL v14;
  char *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string __p;
  std::string v21;
  std::string v22;

  v2 = (unsigned __int16)this;
  v4 = this & 0xFFFF0000;
  if ((this & 0xFFFF0000) == 0x930000)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "DiscreteInOrder");
    v11 = std::string::append(&v21, " ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
  }
  else if (v4 == 12517376)
  {
    v13 = llroundf(sqrtf((float)(unsigned __int16)this));
    if (v13)
      v14 = v13 * v13 == (unsigned __int16)this;
    else
      v14 = 0;
    if (!v14)
      goto LABEL_25;
    std::string::basic_string[abi:ne180100]<0>(&v21, "HOA_ACN_N3D");
    v16 = std::string::append(&v21, " ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v13 - 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
  }
  else
  {
    if (v4 != 12451840)
    {
      if ((int)this > 9568276)
      {
        if ((int)this <= 11206661)
        {
          if ((int)this <= 10354694)
          {
            if ((int)this > 9961475)
            {
              if ((int)this > 10158085)
              {
                switch((_DWORD)this)
                {
                  case 0x9B0006:
                    v15 = "EAC_6_0_A";
                    goto LABEL_26;
                  case 0x9C0007:
                    v15 = "EAC_7_0_A";
                    goto LABEL_26;
                  case 0x9D0007:
                    v15 = "EAC3_6_1_A";
                    goto LABEL_26;
                }
              }
              else
              {
                switch((_DWORD)this)
                {
                  case 0x980004:
                    v15 = "AC3_3_0_1";
                    goto LABEL_26;
                  case 0x990004:
                    v15 = "AC3_2_1_1";
                    goto LABEL_26;
                  case 0x9A0005:
                    v15 = "AC3_3_1_1";
                    goto LABEL_26;
                }
              }
            }
            else if ((int)this > 9764865)
            {
              switch((_DWORD)this)
              {
                case 0x950002:
                  v15 = "AC3_1_0_1";
                  goto LABEL_26;
                case 0x960003:
                  v15 = "AC3_3_0";
                  goto LABEL_26;
                case 0x970004:
                  v15 = "AC3_3_1";
                  goto LABEL_26;
              }
            }
            else
            {
              switch((_DWORD)this)
              {
                case 0x920015:
                  v15 = "TMH_10_2_full";
                  goto LABEL_26;
                case 0x930000:
                  v15 = "DiscreteInOrder";
                  goto LABEL_26;
                case 0x940007:
                  v15 = "AudioUnit_7_0_Front";
                  goto LABEL_26;
              }
            }
          }
          else if ((int)this <= 10747911)
          {
            if ((int)this > 10551303)
            {
              switch((_DWORD)this)
              {
                case 0xA10008:
                  v15 = "EAC3_7_1_B";
                  goto LABEL_26;
                case 0xA20008:
                  v15 = "EAC3_7_1_C";
                  goto LABEL_26;
                case 0xA30008:
                  v15 = "EAC3_7_1_D";
                  goto LABEL_26;
              }
            }
            else
            {
              switch((_DWORD)this)
              {
                case 0x9E0007:
                  v15 = "EAC3_6_1_B";
                  goto LABEL_26;
                case 0x9F0007:
                  v15 = "EAC3_6_1_C";
                  goto LABEL_26;
                case 0xA00008:
                  v15 = "EAC3_7_1_A";
                  goto LABEL_26;
              }
            }
          }
          else if ((int)this <= 10944519)
          {
            switch((_DWORD)this)
            {
              case 0xA40008:
                v15 = "EAC3_7_1_E";
                goto LABEL_26;
              case 0xA50008:
                v15 = "EAC3_7_1_F";
                goto LABEL_26;
              case 0xA60008:
                v15 = "EAC3_7_1_G";
                goto LABEL_26;
            }
          }
          else if ((int)this > 11075588)
          {
            if ((_DWORD)this == 11075589)
            {
              v15 = "DTS_4_1";
              goto LABEL_26;
            }
            if ((_DWORD)this == 11141126)
            {
              v15 = "DTS_6_0_A";
              goto LABEL_26;
            }
          }
          else
          {
            if ((_DWORD)this == 10944520)
            {
              v15 = "EAC3_7_1_H";
              goto LABEL_26;
            }
            if ((_DWORD)this == 11010052)
            {
              v15 = "DTS_3_1";
              goto LABEL_26;
            }
          }
        }
        else if ((int)this > 12058631)
        {
          if ((int)this < 12451840)
          {
            if ((int)this > 12255237)
            {
              switch((_DWORD)this)
              {
                case 0xBB0006:
                  v15 = "WAVE_5_1_B";
                  goto LABEL_26;
                case 0xBC0007:
                  v15 = "WAVE_6_1";
                  goto LABEL_26;
                case 0xBD0008:
                  v15 = "WAVE_7_1";
                  goto LABEL_26;
              }
            }
            else
            {
              switch((_DWORD)this)
              {
                case 0xB80008:
                  v15 = "AAC_7_1_C";
                  goto LABEL_26;
                case 0xB90004:
                  v15 = "WAVE_4_0_B";
                  goto LABEL_26;
                case 0xBA0005:
                  v15 = "WAVE_5_0_B";
                  goto LABEL_26;
              }
            }
          }
          else if ((int)this <= 12648463)
          {
            switch((_DWORD)this)
            {
              case 0xBE0000:
                v15 = "HOA_ACN_SN3D";
                goto LABEL_26;
              case 0xBF0000:
                v15 = "HOA_ACN_N3D";
                goto LABEL_26;
              case 0xC0000C:
                v15 = "Atmos_7_1_4";
                goto LABEL_26;
            }
          }
          else if ((int)this > 12779529)
          {
            if ((_DWORD)this == 12779530)
            {
              v15 = "Atmos_5_1_4";
              goto LABEL_26;
            }
            if ((_DWORD)this == 12845066)
            {
              v15 = "Atmos_7_1_2";
              goto LABEL_26;
            }
          }
          else
          {
            if ((_DWORD)this == 12648464)
            {
              v15 = "Atmos_9_1_6";
              goto LABEL_26;
            }
            if ((_DWORD)this == 12713992)
            {
              v15 = "Atmos_5_1_2";
              goto LABEL_26;
            }
          }
        }
        else if ((int)this <= 11599879)
        {
          if ((int)this > 11403270)
          {
            switch((_DWORD)this)
            {
              case 0xAE0007:
                v15 = "DTS_6_1_B";
                goto LABEL_26;
              case 0xAF0007:
                v15 = "DTS_6_1_C";
                goto LABEL_26;
              case 0xB00007:
                v15 = "DTS_7_0";
                goto LABEL_26;
            }
          }
          else
          {
            switch((_DWORD)this)
            {
              case 0xAB0006:
                v15 = "DTS_6_0_B";
                goto LABEL_26;
              case 0xAC0006:
                v15 = "DTS_6_0_C";
                goto LABEL_26;
              case 0xAD0007:
                v15 = "DTS_6_1_A";
                goto LABEL_26;
            }
          }
        }
        else if ((int)this <= 11796488)
        {
          switch((_DWORD)this)
          {
            case 0xB10008:
              v15 = "DTS_7_1";
              goto LABEL_26;
            case 0xB20008:
              v15 = "DTS_8_0_A";
              goto LABEL_26;
            case 0xB30008:
              v15 = "DTS_8_0_B";
              goto LABEL_26;
          }
        }
        else if ((int)this > 11927558)
        {
          if ((_DWORD)this == 11927559)
          {
            v15 = "DTS_6_1_D";
            goto LABEL_26;
          }
          if ((_DWORD)this == 11993096)
          {
            v15 = "AAC_7_1_B";
            goto LABEL_26;
          }
        }
        else
        {
          if ((_DWORD)this == 11796489)
          {
            v15 = "DTS_8_1_A";
            goto LABEL_26;
          }
          if ((_DWORD)this == 11862025)
          {
            v15 = "DTS_8_1_B";
            goto LABEL_26;
          }
        }
      }
      else if ((int)this <= 7864324)
      {
        if ((int)this <= 7012355)
        {
          if ((int)this > 6619137)
          {
            if ((int)this > 6815745)
            {
              switch((_DWORD)this)
              {
                case 0x680002:
                  v15 = "MidSide";
                  goto LABEL_26;
                case 0x690002:
                  v15 = "XY";
                  goto LABEL_26;
                case 0x6A0002:
                  v15 = "Binaural";
                  goto LABEL_26;
              }
            }
            else
            {
              switch((_DWORD)this)
              {
                case 0x650002:
                  v15 = "Stereo";
                  goto LABEL_26;
                case 0x660002:
                  v15 = "StereoHeadphones";
                  goto LABEL_26;
                case 0x670002:
                  v15 = "MatrixStereo";
                  goto LABEL_26;
              }
            }
          }
          else if ((this & 0x80000000) != 0)
          {
            if ((_DWORD)this == -268435456)
            {
              v15 = "BeginReserved";
              goto LABEL_26;
            }
            if ((_DWORD)this == -65537)
            {
              v15 = "EndReserved";
              goto LABEL_26;
            }
          }
          else
          {
            switch((_DWORD)this)
            {
              case 0:
                v15 = "UseChannelDescriptions";
                goto LABEL_26;
              case 0x10000:
                v15 = "UseChannelBitmap";
                goto LABEL_26;
              case 0x640001:
                v15 = "Mono";
                goto LABEL_26;
            }
          }
        }
        else if ((int)this <= 7405570)
        {
          if ((int)this > 7208965)
          {
            switch((_DWORD)this)
            {
              case 0x6E0006:
                v15 = "Hexagonal";
                goto LABEL_26;
              case 0x6F0008:
                v15 = "Octagonal";
                goto LABEL_26;
              case 0x700008:
                v15 = "Cube";
                goto LABEL_26;
            }
          }
          else
          {
            switch((_DWORD)this)
            {
              case 0x6B0004:
                v15 = "Ambisonic_B_Format";
                goto LABEL_26;
              case 0x6C0004:
                v15 = "Quadraphonic";
                goto LABEL_26;
              case 0x6D0005:
                v15 = "Pentagonal";
                goto LABEL_26;
            }
          }
        }
        else if ((int)this <= 7602179)
        {
          switch((_DWORD)this)
          {
            case 0x710003:
              v15 = "MPEG_3_0_A";
              goto LABEL_26;
            case 0x720003:
              v15 = "MPEG_3_0_B";
              goto LABEL_26;
            case 0x730004:
              v15 = "MPEG_4_0_A";
              goto LABEL_26;
          }
        }
        else if ((int)this > 7733252)
        {
          if ((_DWORD)this == 7733253)
          {
            v15 = "MPEG_5_0_B";
            goto LABEL_26;
          }
          if ((_DWORD)this == 7798789)
          {
            v15 = "MPEG_5_0_C";
            goto LABEL_26;
          }
        }
        else
        {
          if ((_DWORD)this == 7602180)
          {
            v15 = "MPEG_4_0_B";
            goto LABEL_26;
          }
          if ((_DWORD)this == 7667717)
          {
            v15 = "MPEG_5_0_A";
            goto LABEL_26;
          }
        }
      }
      else if ((int)this > 8716290)
      {
        if ((int)this <= 9109509)
        {
          if ((int)this > 8912899)
          {
            switch((_DWORD)this)
            {
              case 0x880004:
                v15 = "DVD_10";
                goto LABEL_26;
              case 0x890005:
                v15 = "DVD_11";
                goto LABEL_26;
              case 0x8A0005:
                v15 = "DVD_18";
                goto LABEL_26;
            }
          }
          else
          {
            switch((_DWORD)this)
            {
              case 0x850003:
                v15 = "DVD_4";
                goto LABEL_26;
              case 0x860004:
                v15 = "DVD_5";
                goto LABEL_26;
              case 0x870005:
                v15 = "DVD_6";
                goto LABEL_26;
            }
          }
        }
        else if ((int)this <= 9306118)
        {
          switch((_DWORD)this)
          {
            case 0x8B0006:
              v15 = "AudioUnit_6_0";
              goto LABEL_26;
            case 0x8C0007:
              v15 = "AudioUnit_7_0";
              goto LABEL_26;
            case 0x8D0006:
              v15 = "AAC_6_0";
              goto LABEL_26;
          }
        }
        else if ((int)this > 9437191)
        {
          if ((_DWORD)this == 9437192)
          {
            v15 = "AAC_Octagonal";
            goto LABEL_26;
          }
          if ((_DWORD)this == 9502736)
          {
            v15 = "TMH_10_2_std";
            goto LABEL_26;
          }
        }
        else
        {
          if ((_DWORD)this == 9306119)
          {
            v15 = "AAC_6_1";
            goto LABEL_26;
          }
          if ((_DWORD)this == 9371655)
          {
            v15 = "AAC_7_0";
            goto LABEL_26;
          }
        }
      }
      else if ((int)this <= 8257543)
      {
        if ((int)this > 8060933)
        {
          switch((_DWORD)this)
          {
            case 0x7B0006:
              v15 = "MPEG_5_1_C";
              goto LABEL_26;
            case 0x7C0006:
              v15 = "MPEG_5_1_D";
              goto LABEL_26;
            case 0x7D0007:
              v15 = "MPEG_6_1_A";
              goto LABEL_26;
          }
        }
        else
        {
          switch((_DWORD)this)
          {
            case 0x780005:
              v15 = "MPEG_5_0_D";
              goto LABEL_26;
            case 0x790006:
              v15 = "MPEG_5_1_A";
              goto LABEL_26;
            case 0x7A0006:
              v15 = "MPEG_5_1_B";
              goto LABEL_26;
          }
        }
      }
      else if ((int)this <= 8454151)
      {
        switch((_DWORD)this)
        {
          case 0x7E0008:
            v15 = "MPEG_7_1_A";
            goto LABEL_26;
          case 0x7F0008:
            v15 = "MPEG_7_1_B";
            goto LABEL_26;
          case 0x800008:
            v15 = "MPEG_7_1_C";
            goto LABEL_26;
        }
      }
      else if ((int)this > 8585218)
      {
        if ((_DWORD)this == 8585219)
        {
          v15 = "ITU_2_1";
          goto LABEL_26;
        }
        if ((_DWORD)this == 8650756)
        {
          v15 = "ITU_2_2";
          goto LABEL_26;
        }
      }
      else
      {
        if ((_DWORD)this == 8454152)
        {
          v15 = "Emagic_Default_7_1";
          goto LABEL_26;
        }
        if ((_DWORD)this == 8519688)
        {
          v15 = "SMPTE_DTV";
          goto LABEL_26;
        }
      }
LABEL_25:
      v15 = "Unknown";
LABEL_26:
      std::string::basic_string[abi:ne180100]<0>(a2, v15);
      return;
    }
    v5 = llroundf(sqrtf((float)(unsigned __int16)this));
    if (v5)
      v6 = v5 * v5 == (unsigned __int16)this;
    else
      v6 = 0;
    if (!v6)
      goto LABEL_25;
    std::string::basic_string[abi:ne180100]<0>(&v21, "HOA_ACN_SN3D");
    v7 = std::string::append(&v21, " ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v5 - 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
  }
  v18 = std::string::append(&v22, (const std::string::value_type *)p_p, size);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  a2[2] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_2164FB6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void Phase::ChannelLayout::GetChannelLayoutChannelDescriptions(char **a1@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  int v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  float *v14;
  int v15;
  _DWORD *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v22;
  float32x2_t *v23;
  uint64_t v24;
  uint8x8_t v25;
  unsigned __int32 v26;
  unsigned int *v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int32x2_t v37;
  float64x2_t v38;
  float v39;
  int v40;
  int inSpecifier;
  UInt32 ioPropertyDataSize;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *a1;
  v5 = *(_DWORD *)*a1;
  if (v5 == 0x10000)
  {
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v4 + 1));
    v25.i16[0] = vaddlv_u8(v25);
    v26 = v25.i32[0];
LABEL_24:
    ioPropertyDataSize = 20 * v26 + 12;
    v27 = (unsigned int *)operator new[]();
    std::vector<AudioChannelDescription>::resize(a2, v26);
    if (*(_DWORD *)*a1 == 0x10000)
    {
      inSpecifier = *((_DWORD *)*a1 + 1);
      AudioFormatGetProperty(0x636D7062u, 4u, &inSpecifier, &ioPropertyDataSize, v27);
    }
    else
    {
      v40 = *(_DWORD *)*a1;
      AudioFormatGetProperty(0x636D706Cu, 4u, &v40, &ioPropertyDataSize, v27);
    }
    if (v27[2])
    {
      v28 = 0;
      v29 = 0;
      v30 = v27 + 3;
      do
      {
        v31 = *a2 + v28 * 4;
        v32 = *(_OWORD *)&v30[v28];
        *(_DWORD *)(v31 + 16) = v30[v28 + 4];
        *(_OWORD *)v31 = v32;
        ++v29;
        v28 += 5;
      }
      while (v29 < v27[2]);
    }
    MEMORY[0x2199F9D70](v27, 0x1000C40E0EAB150);
    goto LABEL_31;
  }
  if (v5)
  {
    v26 = (unsigned __int16)*(_DWORD *)*a1;
    goto LABEL_24;
  }
  v6 = *((unsigned int *)v4 + 2);
  if (v6 > (a1[1] - v4 - 12) / 0x14uLL)
    __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
  std::vector<AudioChannelDescription>::resize(a2, v6);
  v7 = *a1;
  v8 = *((unsigned int *)*a1 + 2);
  if (v8 > (a1[1] - *a1 - 12) / 0x14uLL)
LABEL_21:
    __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
  v9 = 0;
  v10 = -1;
  v38 = (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL);
  while (++v10 < v8)
  {
    v11 = *a2;
    v12 = *a2 + v9;
    v13 = *(_OWORD *)&v7[v9 + 12];
    *(_DWORD *)(v12 + 16) = *(_DWORD *)&v7[v9 + 28];
    *(_OWORD *)v12 = v13;
    v7 = *a1;
    v14 = (float *)&(*a1)[v9];
    v15 = *((_DWORD *)v14 + 4);
    if ((v15 & 1) != 0)
    {
      v17 = v14[5];
      v18 = v14[6];
      v19 = v14[7];
      v20 = fabsf(v18);
      if (fabsf(v17) < 0.00000011921 && v20 < 0.00000011921)
      {
        v24 = v11 + v9;
        *(float *)(v24 + 16) = fabsf(v19);
        *(_DWORD *)(v24 + 8) = 0;
        if (v19 <= 0.0)
        {
          if (v19 < 0.0)
            *(_DWORD *)(v24 + 12) = -1028390912;
          else
            *(_DWORD *)(v24 + 12) = 0;
        }
        else
        {
          *(_DWORD *)(v24 + 12) = 1119092736;
        }
      }
      else
      {
        v22 = sqrtf((float)((float)(v18 * v18) + (float)(v17 * v17)) + (float)(v19 * v19));
        v23 = (float32x2_t *)(v11 + v9);
        *(float *)(v11 + v9 + 16) = v22;
        v39 = atan2f(v17, v18);
        v23[1] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(asinf(v19 / v22)), LODWORD(v39))), v38));
      }
    }
    else if ((v15 & 2) != 0)
    {
      v16 = (_DWORD *)(v11 + v9);
      v16[2] = *(_DWORD *)&v7[v9 + 20];
      v16[3] = *(_DWORD *)&v7[v9 + 24];
      v16[4] = *(_DWORD *)&v7[v9 + 28];
    }
    v9 += 20;
    v8 = *((unsigned int *)v7 + 2);
    if (v8 > (a1[1] - v7 - 12) / 0x14uLL)
      goto LABEL_21;
  }
LABEL_31:
  v33 = *a2;
  v34 = a2[1];
  if (*a2 != v34)
  {
    do
    {
      if ((*(_BYTE *)(v33 + 4) & 3) == 0)
      {
        *(_DWORD *)(v33 + 4) = 2;
        *(_QWORD *)(v33 + 12) = 0x3F80000000000000;
        v35 = *(_DWORD *)v33;
        if (*(int *)v33 <= 207)
        {
          switch(v35)
          {
            case 1:
              goto LABEL_44;
            case 2:
              goto LABEL_45;
            case 3:
              *(_DWORD *)(v33 + 8) = 0;
              goto LABEL_33;
            case 5:
            case 10:
              v36 = -1025769472;
              goto LABEL_68;
            case 6:
            case 11:
              v36 = 1121714176;
              goto LABEL_68;
            case 7:
              v36 = -1049624576;
              goto LABEL_68;
            case 8:
              v36 = 1097859072;
              goto LABEL_68;
            case 9:
            case 44:
              v36 = 1127481344;
              goto LABEL_68;
            case 12:
              v37 = (int32x2_t)0x42B4000000000000;
              goto LABEL_66;
            case 13:
              v37 = (int32x2_t)0x42340000C2340000;
              goto LABEL_66;
            case 14:
              v37 = (int32x2_t)0x41F0000000000000;
              goto LABEL_66;
            case 15:
              v37 = vdup_n_s32(0x42340000u);
              goto LABEL_66;
            case 16:
              v37 = (int32x2_t)0x41F00000C3160000;
              goto LABEL_66;
            case 17:
              v37 = (int32x2_t)0x41F0000043340000;
              goto LABEL_66;
            case 18:
              v37 = (int32x2_t)0x41F0000043160000;
              goto LABEL_66;
            case 33:
              v36 = -1021968384;
              goto LABEL_68;
            case 34:
              v36 = 1125515264;
              goto LABEL_68;
            case 35:
              v36 = -1032847360;
              goto LABEL_68;
            case 36:
              v36 = 1114636288;
LABEL_68:
              *(_DWORD *)(v33 + 8) = v36;
              goto LABEL_33;
            case 49:
              v37 = (int32x2_t)0x42340000C2B40000;
              goto LABEL_66;
            case 51:
              v37 = (int32x2_t)0x4234000042B40000;
              goto LABEL_66;
            case 52:
              v37 = (int32x2_t)0x42340000C3070000;
              goto LABEL_66;
            case 53:
              v37 = (int32x2_t)0x4234000043340000;
              goto LABEL_66;
            case 54:
              v37 = (int32x2_t)0x4234000043070000;
LABEL_66:
              *(int32x2_t *)(v33 + 8) = v37;
              break;
            default:
              goto LABEL_69;
          }
          goto LABEL_33;
        }
        if (v35 > 300)
        {
          if (v35 == 302)
            goto LABEL_45;
          if (v35 != 301)
          {
LABEL_69:
            *(_QWORD *)(v33 + 4) = 0;
            *(_DWORD *)(v33 + 16) = 0;
            goto LABEL_33;
          }
        }
        else if (v35 != 208)
        {
          if (v35 != 209)
            goto LABEL_69;
LABEL_45:
          *(_DWORD *)(v33 + 8) = 1106247680;
          goto LABEL_33;
        }
LABEL_44:
        *(_DWORD *)(v33 + 8) = -1041235968;
      }
LABEL_33:
      v33 += 20;
    }
    while (v33 != v34);
  }
}

void sub_2164FBC14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<AudioChannelDescription>::resize(_QWORD *a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  size_t v22;

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v4[-*a1] >> 2);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v21 = &v3[20 * a2];
    goto LABEL_17;
  }
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)v4) >> 2) >= v6)
  {
    v22 = 20 * ((20 * v6 - 20) / 0x14) + 20;
    bzero(v4, v22);
    v21 = &v4[v22];
LABEL_17:
    a1[1] = v21;
    return;
  }
  if (a2 > 0xCCCCCCCCCCCCCCCLL)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)v3) >> 2);
  v10 = 2 * v9;
  if (2 * v9 <= a2)
    v10 = a2;
  if (v9 >= 0x666666666666666)
    v11 = 0xCCCCCCCCCCCCCCCLL;
  else
    v11 = v10;
  v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioChannelDescription>>(v7, v11);
  v13 = &v12[20 * v5];
  v15 = &v12[20 * v14];
  v16 = 20 * ((20 * v6 - 20) / 0x14) + 20;
  bzero(v13, v16);
  v17 = &v13[v16];
  v19 = (char *)*a1;
  v18 = (char *)a1[1];
  if (v18 != (char *)*a1)
  {
    do
    {
      v20 = *(_OWORD *)(v18 - 20);
      *((_DWORD *)v13 - 1) = *((_DWORD *)v18 - 1);
      *(_OWORD *)(v13 - 20) = v20;
      v13 -= 20;
      v18 -= 20;
    }
    while (v18 != v19);
    v18 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v17;
  a1[2] = v15;
  if (v18)
    operator delete(v18);
}

void Phase::ChannelLayout::GetStringDescription(Phase::ChannelLayout *this, const AudioChannelLayout *a2)
{
  unsigned int v3;
  std::vector<char> v4;

  v3 = *((_DWORD *)this + 2);
  if (v3 <= 1)
    v3 = 1;
  std::vector<char>::vector(&v4, 20 * v3 + 12);
  memcpy(v4.__begin_, this, 20 * *((unsigned int *)this + 2) + 12);
  Phase::ChannelLayout::GetStringDescription((unsigned int **)&v4);
  if (v4.__begin_)
  {
    v4.__end_ = v4.__begin_;
    operator delete(v4.__begin_);
  }
}

void sub_2164FBE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Phase::ChannelLayout::GetStringDescription(unsigned int **a1)
{
  Phase::ChannelLayout *v2;
  _QWORD *v3;
  const std::locale::facet *v4;
  _QWORD *v5;
  void *locale;
  uint64_t v7;
  const __CFString *v8;
  CFTypeID v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  std::locale::__imp *v16;
  uint64_t v17;
  unsigned int v18;
  std::locale::id *v19;
  const __CFString *v20;
  CFTypeID v21;
  _QWORD *v22;
  _QWORD *v23;
  void **v24;
  void *v25;
  _QWORD *v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  const std::locale::facet *v32;
  void *__p[2];
  unsigned __int8 v36;
  const __CFString *v37;
  std::locale v38;
  std::locale::__imp *v39;
  unsigned __int8 v40;
  const __CFString *outPropertyData;
  UInt32 ioPropertyDataSize;
  _QWORD v43[11];
  char v44;
  uint64_t v45;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
  v2 = (Phase::ChannelLayout *)**a1;
  ioPropertyDataSize = 8;
  outPropertyData = 0;
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Channel layout description:", 27);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet(&v38, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v38);
  std::ostream::put();
  std::ostream::flush();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"\tTag: ", 6);
  Phase::ChannelLayout::GetStringFromLayoutTag(v2, &v38);
  if ((v40 & 0x80u) == 0)
    locale = &v38;
  else
    locale = v38.__locale_;
  if ((v40 & 0x80u) == 0)
    v7 = v40;
  else
    v7 = (uint64_t)v39;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)locale, v7);
  if ((char)v40 < 0)
    operator delete(v38.__locale_);
  if (!AudioFormatGetProperty(0x6C6F6E6Du, *((_DWORD *)a1 + 2) - *a1, *a1, &ioPropertyDataSize, &outPropertyData))
  {
    v8 = outPropertyData;
    if (outPropertyData && (v9 = CFGetTypeID(outPropertyData), v9 != CFStringGetTypeID()))
    {
      __p[0] = 0;
      CFRelease(v8);
      v8 = 0;
    }
    else
    {
      __p[0] = (void *)v8;
    }
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" / Name: ", 9);
    if (v8)
      applesauce::CF::convert_to<std::string,0>(v8, (uint64_t)&v38);
    else
      std::string::basic_string[abi:ne180100]<0>(&v38, "?");
    if ((v40 & 0x80u) == 0)
      v11 = &v38;
    else
      v11 = v38.__locale_;
    if ((v40 & 0x80u) == 0)
      v12 = v40;
    else
      v12 = (uint64_t)v39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    if ((char)v40 < 0)
    {
      operator delete(v38.__locale_);
      if (!v8)
        goto LABEL_28;
    }
    else if (!v8)
    {
      goto LABEL_28;
    }
    CFRelease(v8);
  }
LABEL_28:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" / ", 3);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" channels", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v15 = std::locale::use_facet(&v38, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale(&v38);
  std::ostream::put();
  std::ostream::flush();
  Phase::ChannelLayout::GetChannelLayoutChannelDescriptions((char **)a1, (uint64_t *)&v38);
  v16 = v38.__locale_;
  if (v39 != v38.__locale_)
  {
    v17 = 0;
    v18 = 1;
    v19 = (std::locale::id *)MEMORY[0x24BEDB350];
    while (1)
    {
      if (AudioFormatGetProperty(0x636E616Du, 0x14u, (char *)v16 + 20 * v17, &ioPropertyDataSize, &outPropertyData))
        goto LABEL_49;
      v20 = outPropertyData;
      if (outPropertyData && (v21 = CFGetTypeID(outPropertyData), v21 != CFStringGetTypeID()))
      {
        v37 = 0;
        CFRelease(v20);
        v20 = 0;
      }
      else
      {
        v37 = v20;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"\t* ", 3);
      v22 = (_QWORD *)std::ostream::operator<<();
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
      if (v20)
        applesauce::CF::convert_to<std::string,0>(v20, (uint64_t)__p);
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "?");
      v24 = (v36 & 0x80u) == 0 ? __p : (void **)__p[0];
      v25 = (v36 & 0x80u) == 0 ? (void *)v36 : __p[1];
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, (uint64_t)v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\t*** ", 5);
      if ((char)v36 < 0)
        break;
      if (v20)
        goto LABEL_48;
LABEL_49:
      v27 = *((_DWORD *)v16 + 5 * v17 + 1);
      if ((v27 & 1) != 0)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"x = ", 4);
        v28 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"y = ", 4);
        v29 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"z = ", 4);
LABEL_54:
        std::ostream::operator<<();
        goto LABEL_55;
      }
      if ((v27 & 2) != 0)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"azimuth = ", 10);
        v30 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"elevation = ", 12);
        v31 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"radius = ", 9);
        goto LABEL_54;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"No coordinates specified", 24);
LABEL_55:
      std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(v43[0] - 24)));
      v32 = std::locale::use_facet((const std::locale *)__p, v19);
      ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      v17 = v18;
      v16 = v38.__locale_;
      if (0xCCCCCCCCCCCCCCCDLL * ((v39 - v38.__locale_) >> 2) <= v18++)
        goto LABEL_56;
    }
    operator delete(__p[0]);
    if (!v20)
      goto LABEL_49;
LABEL_48:
    CFRelease(v20);
    goto LABEL_49;
  }
LABEL_56:
  std::stringbuf::str();
  if (v38.__locale_)
  {
    v39 = v38.__locale_;
    operator delete(v38.__locale_);
  }
  v43[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v43[1] = MEMORY[0x24BEDB848] + 16;
  if (v44 < 0)
    operator delete((void *)v43[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2199F9CD4](&v45);
}

void sub_2164FC4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a22 < 0)
    operator delete(__p);
  applesauce::CF::StringRef::~StringRef((const void **)&a10.__locale_);
  std::ostringstream::~ostringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_2164FC648(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x2199F9CD4](v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199F9CD4](a1 + 112);
  return a1;
}

unsigned int *Phase::ChannelLayout::IsLayoutSupported(Phase::ChannelLayout *this, const AudioChannelLayout *a2)
{
  unsigned int *IsLayoutSupported;
  unsigned int v3;
  std::vector<char> v5;

  IsLayoutSupported = (unsigned int *)this;
  if (this)
  {
    v3 = *((_DWORD *)this + 2);
    if (v3 <= 1)
      v3 = 1;
    std::vector<char>::vector(&v5, 20 * v3 + 12);
    memcpy(v5.__begin_, IsLayoutSupported, 20 * IsLayoutSupported[2] + 12);
    IsLayoutSupported = (unsigned int *)Phase::ChannelLayout::IsLayoutSupported((unsigned int **)&v5);
    if (v5.__begin_)
    {
      v5.__end_ = v5.__begin_;
      operator delete(v5.__begin_);
    }
  }
  return IsLayoutSupported;
}

BOOL Phase::ChannelLayout::IsLayoutSupported(unsigned int **a1)
{
  unsigned int *v1;
  unsigned int v2;
  uint8x8_t v3;
  unsigned int v4;

  v1 = *a1;
  v2 = **a1;
  if (v2 == 0x10000)
  {
    v3 = (uint8x8_t)vcnt_s8((int8x8_t)v1[1]);
    v3.i16[0] = vaddlv_u8(v3);
    if (!v3.i32[0])
      return 0;
  }
  else if (v2)
  {
    if (!(unsigned __int16)**a1)
      return 0;
  }
  else if (!v1[2])
  {
    return 0;
  }
  if (v2 != 0x10000)
  {
    v4 = v2 ? (unsigned __int16)**a1 : v1[2];
    if (v4 > 0x40)
      return 0;
  }
  return v2 < 0xFFFF0000 && (v2 & 0xFFFF0000) != 9633792;
}

BOOL Phase::ChannelLayout::IsChannelLFE(Phase::Logger *a1, unsigned __int32 a2)
{
  int *v4;
  int v5;
  unsigned __int32 v6;
  uint8x8_t v7;
  int v8;
  _BOOL8 v10;
  NSObject *v11;
  int v12;
  _BYTE __p[18];
  __int16 v15;
  unsigned __int32 v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = *(int **)a1;
  v5 = **(_DWORD **)a1;
  if (v5 == 0x10000)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4[1]);
    v7.i16[0] = vaddlv_u8(v7);
    v6 = v7.i32[0];
  }
  else if (v5)
  {
    v6 = (unsigned __int16)**(_DWORD **)a1;
  }
  else
  {
    v6 = v4[2];
  }
  if (v6 <= a2)
  {
    v11 = **(NSObject ***)(Phase::Logger::GetInstancePtr(a1) + 384);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = **(_DWORD **)a1;
      *(_DWORD *)__p = 136315906;
      *(_QWORD *)&__p[4] = "ChannelLayout.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 797;
      v15 = 1024;
      v16 = a2;
      v17 = 1024;
      v18 = v12;
      _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d ChannelLayout: querying invalid channel (%i) info for layout %i", __p, 0x1Eu);
    }
    return 0;
  }
  else
  {
    Phase::ChannelLayout::GetChannelLayoutChannelDescriptions((char **)a1, (uint64_t *)__p);
    v8 = *(_DWORD *)(*(_QWORD *)__p + 20 * (int)a2);
    v10 = v8 == 4 || v8 == 37;
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  return v10;
}

uint64_t Phase::ChannelLayout::GetNumNonLFEChannels(Phase::Logger *a1)
{
  int *v2;
  int v3;
  uint64_t v4;
  uint8x8_t v5;
  unsigned __int32 i;
  unsigned int v7;
  uint8x8_t v8;

  v2 = *(int **)a1;
  v3 = **(_DWORD **)a1;
  if (v3 == 0x10000)
  {
    v5 = (uint8x8_t)vcnt_s8((int8x8_t)v2[1]);
    v5.i16[0] = vaddlv_u8(v5);
    v4 = v5.u32[0];
  }
  else if (v3)
  {
    v4 = (unsigned __int16)**(_DWORD **)a1;
  }
  else
  {
    v4 = v2[2];
  }
  for (i = 0; ; ++i)
  {
    if (v3 == 0x10000)
    {
      v8 = (uint8x8_t)vcnt_s8((int8x8_t)v2[1]);
      v8.i16[0] = vaddlv_u8(v8);
      v7 = v8.i32[0];
    }
    else
    {
      v7 = v3 ? (unsigned __int16)v3 : v2[2];
    }
    if (i >= v7)
      break;
    v4 = (v4 - Phase::ChannelLayout::IsChannelLFE(a1, i));
    v2 = *(int **)a1;
    v3 = **(_DWORD **)a1;
  }
  return v4;
}

BOOL Phase::ChannelLayout::AreLayoutsEqual(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  Phase::Logger *Property;
  int v4;
  NSObject *v5;
  _BOOL8 result;
  UInt32 ioPropertyDataSize;
  int outPropertyData;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  _QWORD inSpecifier[3];

  inSpecifier[2] = *MEMORY[0x24BDAC8D0];
  ioPropertyDataSize = 4;
  outPropertyData = 0;
  v2 = *a2;
  inSpecifier[0] = *a1;
  inSpecifier[1] = v2;
  Property = (Phase::Logger *)AudioFormatGetProperty(0x63686571u, 0x10u, inSpecifier, &ioPropertyDataSize, &outPropertyData);
  v4 = (int)Property;
  if (!(_DWORD)Property)
    return outPropertyData == 1;
  v5 = **(NSObject ***)(Phase::Logger::GetInstancePtr(Property) + 496);
  result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136315650;
    v10 = "ChannelLayout.cpp";
    v11 = 1024;
    v12 = 832;
    v13 = 1024;
    v14 = v4;
    _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ChannelLayout: could not compare channel layouts, failed with error %i", buf, 0x18u);
    return 0;
  }
  return result;
}

void Phase::ChannelLayout::ReduceLayout(uint64_t a1@<X0>, unint64_t a2@<X1>, std::vector<char> *a3@<X8>)
{
  _BYTE *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  _OWORD *v9;
  __int128 v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  void *v22;
  unsigned int v23;
  unsigned int v24;
  std::vector<char>::pointer begin;
  void *__p;
  _BYTE *v27;
  void *v28;
  _DWORD *v29;
  char *v30;
  std::vector<char>::value_type __x;

  if (a2 == -1)
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a3, *(const void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    Phase::ChannelLayout::GetChannelLayoutChannelDescriptions((char **)a1, (uint64_t *)&__p);
    v6 = (char *)__p;
    v5 = v27;
    if (v27 != __p)
    {
      v7 = 0;
      do
      {
        if (((a2 >> v7) & 1) != 0)
        {
          v8 = &v6[20 * v7];
          v9 = v29;
          if (v29 >= (_DWORD *)v30)
          {
            v12 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v29 - (_BYTE *)v28) >> 2);
            v13 = v12 + 1;
            if (v12 + 1 > 0xCCCCCCCCCCCCCCCLL)
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * ((v30 - (_BYTE *)v28) >> 2) > v13)
              v13 = 0x999999999999999ALL * ((v30 - (_BYTE *)v28) >> 2);
            if (0xCCCCCCCCCCCCCCCDLL * ((v30 - (_BYTE *)v28) >> 2) >= 0x666666666666666)
              v14 = 0xCCCCCCCCCCCCCCCLL;
            else
              v14 = v13;
            if (v14)
              v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioChannelDescription>>((uint64_t)&v30, v14);
            else
              v15 = 0;
            v16 = &v15[20 * v12];
            v17 = *(_OWORD *)v8;
            *((_DWORD *)v16 + 4) = *((_DWORD *)v8 + 4);
            *(_OWORD *)v16 = v17;
            v19 = (char *)v28;
            v18 = (char *)v29;
            v20 = v16;
            if (v29 != v28)
            {
              do
              {
                v21 = *(_OWORD *)(v18 - 20);
                *((_DWORD *)v20 - 1) = *((_DWORD *)v18 - 1);
                *(_OWORD *)(v20 - 20) = v21;
                v20 -= 20;
                v18 -= 20;
              }
              while (v18 != v19);
              v18 = (char *)v28;
            }
            v11 = v16 + 20;
            v28 = v20;
            v29 = v16 + 20;
            v30 = &v15[20 * v14];
            if (v18)
              operator delete(v18);
          }
          else
          {
            v10 = *(_OWORD *)v8;
            v29[4] = *((_DWORD *)v8 + 4);
            *v9 = v10;
            v11 = (_DWORD *)v9 + 5;
          }
          v29 = v11;
          v6 = (char *)__p;
          v5 = v27;
        }
        ++v7;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 2) > v7);
    }
    v22 = v28;
    v23 = -858993459 * (((char *)v29 - (_BYTE *)v28) >> 2);
    if (v23 <= 1)
      v24 = 1;
    else
      v24 = -858993459 * (((char *)v29 - (_BYTE *)v28) >> 2);
    __x = 0;
    std::vector<char>::vector(a3, 20 * v24 + 12, &__x);
    begin = a3->__begin_;
    *(_QWORD *)begin = 0;
    *((_DWORD *)begin + 2) = v23;
    if (v23)
      memmove(begin + 12, v22, 20 * v23);
    if (__p)
    {
      v27 = __p;
      operator delete(__p);
    }
    if (v28)
    {
      v29 = v28;
      operator delete(v28);
    }
  }
}

void sub_2164FCDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t Phase::ChannelLayout::GetNumActiveChannels(int **a1, uint64_t a2)
{
  int *v2;
  int v3;
  int *v5;
  int v6;
  uint64_t v7;
  uint8x8_t v8;

  if (!a2)
    return 0;
  if (a2 != -1)
  {
    v5 = *a1;
    v6 = **a1;
    if (v6 == 0x10000)
    {
      LOBYTE(v5) = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)v5[1]));
    }
    else if (v6)
    {
      LOBYTE(v5) = **a1;
    }
    else
    {
      LODWORD(v5) = v5[2];
    }
    v7 = a2 & ~(-1 << (char)v5);
    goto LABEL_15;
  }
  v2 = *a1;
  v3 = **a1;
  if (v3 == 0x10000)
  {
    v7 = v2[1];
LABEL_15:
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    return v8.u32[0];
  }
  if (v3)
    return (unsigned __int16)**a1;
  else
    return v2[2];
}

void Phase::ChannelLayout::GetCrossmixMatrix(int **a1@<X0>, int **a2@<X1>, uint64_t *a3@<X8>)
{
  int *v5;
  Phase::Logger *PropertyInfo;
  NSObject *v7;
  int v8;
  int v9;
  int *v10;
  Phase::Logger *Property;
  NSObject *v12;
  int v13;
  int v14;
  int *v15;
  int v16;
  unsigned __int32 v17;
  uint8x8_t v18;
  _DWORD *v19;
  unint64_t v20;
  int *v21;
  int v22;
  unsigned int v23;
  uint8x8_t v24;
  unsigned int i;
  int *v26;
  int v27;
  unsigned int v28;
  uint8x8_t v29;
  uint64_t v30;
  int v31;
  _DWORD *v32;
  _DWORD **v33;
  unint64_t v34;
  _QWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  uint64_t *v44;
  uint64_t *v45;
  std::locale::id *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  const std::locale::facet *v50;
  uint64_t v51;
  int *v52;
  UInt32 outPropertyDataSize;
  std::locale v55;
  uint8_t buf[12];
  __int16 v57;
  _BYTE v58[10];
  uint64_t v59;
  void *__p;
  char v61;
  uint64_t v62;
  _QWORD inSpecifier[5];

  inSpecifier[2] = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a2;
  inSpecifier[0] = *a1;
  inSpecifier[1] = v5;
  outPropertyDataSize = 0;
  PropertyInfo = (Phase::Logger *)AudioFormatGetPropertyInfo(0x6D6D6170u, 0x10u, inSpecifier, &outPropertyDataSize);
  if ((_DWORD)PropertyInfo)
  {
    v7 = **(NSObject ***)(Phase::Logger::GetInstancePtr(PropertyInfo) + 496);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = **a1;
      v9 = **a2;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ChannelLayout.cpp";
      v57 = 1024;
      *(_DWORD *)v58 = 932;
      *(_WORD *)&v58[4] = 1024;
      *(_DWORD *)&v58[6] = v8;
      LOWORD(v59) = 1024;
      *(_DWORD *)((char *)&v59 + 2) = v9;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d ChannelLayout: could not determine a crossmix matrix for layouts %i to %i", buf, 0x1Eu);
    }
  }
  else
  {
    v10 = (int *)operator new[]();
    Property = (Phase::Logger *)AudioFormatGetProperty(0x6D6D6170u, 0x10u, inSpecifier, &outPropertyDataSize, v10);
    if ((_DWORD)Property)
    {
      v12 = **(NSObject ***)(Phase::Logger::GetInstancePtr(Property) + 496);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = **a1;
        v14 = **a2;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ChannelLayout.cpp";
        v57 = 1024;
        *(_DWORD *)v58 = 925;
        *(_WORD *)&v58[4] = 1024;
        *(_DWORD *)&v58[6] = v13;
        LOWORD(v59) = 1024;
        *(_DWORD *)((char *)&v59 + 2) = v14;
        _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d ChannelLayout: could not determine a crossmix matrix for layouts %i to %i", buf, 0x1Eu);
      }
    }
    else
    {
      v15 = *a1;
      v16 = **a1;
      if (v16 == 0x10000)
      {
        v18 = (uint8x8_t)vcnt_s8((int8x8_t)v15[1]);
        v18.i16[0] = vaddlv_u8(v18);
        v17 = v18.i32[0];
      }
      else if (v16)
      {
        v17 = (unsigned __int16)**a1;
      }
      else
      {
        v17 = v15[2];
      }
      std::vector<std::vector<float>>::resize(a3, v17);
      v20 = 0;
      v52 = v10;
      while (1)
      {
        v21 = *a1;
        v22 = **a1;
        if (v22 == 0x10000)
        {
          v24 = (uint8x8_t)vcnt_s8((int8x8_t)v21[1]);
          v24.i16[0] = vaddlv_u8(v24);
          v23 = v24.i32[0];
        }
        else
        {
          v23 = v22 ? (unsigned __int16)**a1 : v21[2];
        }
        if (v20 >= v23)
          break;
        for (i = 0; ; ++i)
        {
          v26 = *a2;
          v27 = **a2;
          if (v27 == 0x10000)
          {
            v29 = (uint8x8_t)vcnt_s8((int8x8_t)v26[1]);
            v29.i16[0] = vaddlv_u8(v29);
            v28 = v29.i32[0];
          }
          else
          {
            v28 = v27 ? (unsigned __int16)**a2 : v26[2];
          }
          if (i >= v28)
            break;
          v30 = *a3 + 24 * v20;
          v31 = *v10;
          v33 = (_DWORD **)(v30 + 8);
          v32 = *(_DWORD **)(v30 + 8);
          v35 = (_QWORD *)(v30 + 16);
          v34 = *(_QWORD *)(v30 + 16);
          if ((unint64_t)v32 >= v34)
          {
            v19 = *(_DWORD **)v30;
            v37 = ((uint64_t)v32 - *(_QWORD *)v30) >> 2;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v39 = v34 - (_QWORD)v19;
            if (v39 >> 1 > v38)
              v38 = v39 >> 1;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
              v40 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v40 = v38;
            if (v40)
            {
              v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v35, v40);
              v32 = *v33;
              v19 = *(_DWORD **)v30;
            }
            else
            {
              v41 = 0;
            }
            v42 = &v41[4 * v37];
            *(_DWORD *)v42 = v31;
            v36 = v42 + 4;
            while (v32 != v19)
            {
              v43 = *--v32;
              *((_DWORD *)v42 - 1) = v43;
              v42 -= 4;
            }
            *(_QWORD *)v30 = v42;
            *v33 = v36;
            *v35 = &v41[4 * v40];
            if (v19)
              operator delete(v19);
          }
          else
          {
            *v32 = v31;
            v36 = v32 + 1;
          }
          *v33 = v36;
          ++v10;
        }
        ++v20;
      }
      v10 = v52;
      if ((*(_BYTE *)(*(_QWORD *)(Phase::Logger::GetInstancePtr((Phase::Logger *)v19) + 496) + 8) & 4) != 0)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
        v44 = (uint64_t *)*a3;
        v45 = (uint64_t *)a3[1];
        if ((uint64_t *)*a3 != v45)
        {
          v46 = (std::locale::id *)MEMORY[0x24BEDB350];
          do
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58[2], (uint64_t)"[", 1);
            v48 = *v44;
            v47 = v44[1];
            while (v48 != v47)
            {
              std::ostream::operator<<();
              v47 = v44[1];
              if (v48 != v47 - 4)
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58[2], (uint64_t)" ", 1);
                v47 = v44[1];
              }
              v48 += 4;
            }
            v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58[2], (uint64_t)"]", 1);
            std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(_QWORD *)(*v49 - 24)));
            v50 = std::locale::use_facet(&v55, v46);
            ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
            std::locale::~locale(&v55);
            std::ostream::put();
            std::ostream::flush();
            v44 += 3;
          }
          while (v44 != v45);
        }
        *(_QWORD *)buf = *MEMORY[0x24BEDB7F0];
        v51 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        *(_QWORD *)&v58[2] = v51;
        v59 = MEMORY[0x24BEDB848] + 16;
        if (v61 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x2199F9CD4](&v62);
        v10 = v52;
      }
    }
    MEMORY[0x2199F9D4C](v10, 0x1000C8052888210);
  }
}

void sub_2164FD3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

_QWORD *applesauce::CF::convert_to<std::string,0>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  std::runtime_error *exception;

  if (!a1 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  return applesauce::CF::details::CFString_get_value<true>(a1, a2);
}

void sub_2164FD554(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *applesauce::CF::convert_error@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not convert");
}

_QWORD *applesauce::CF::details::CFString_get_value<true>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  char *CStringPtr;
  CFIndex Length;
  UInt8 *v7;
  CFIndex maxBufLen;
  CFRange v9;
  CFRange v10;

  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, CStringPtr);
  Length = CFStringGetLength(a1);
  maxBufLen = 0;
  v9.location = 0;
  v9.length = Length;
  CFStringGetBytes(a1, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((_QWORD *)a2, maxBufLen, 0);
  if (*(char *)(a2 + 23) >= 0)
    v7 = (UInt8 *)a2;
  else
    v7 = *(UInt8 **)a2;
  v10.location = 0;
  v10.length = Length;
  return (_QWORD *)CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void sub_2164FD658(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,unsigned int>::map[abi:ne180100](uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v4;
  __int128 *v5;
  uint64_t *v6;
  __int128 *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  char **v13;
  char *v14;
  std::string *v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v20;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = &a2[2 * a3];
    v8 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v9 = v4;
      if (v8 == v4)
        goto LABEL_9;
      v10 = v6;
      v11 = v4;
      if (v6)
      {
        do
        {
          v9 = v10;
          v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      if (std::less<std::string>::operator()[abi:ne180100](v9 + 4, v5))
      {
LABEL_9:
        if (v6)
        {
          v20 = v9;
          v13 = (char **)(v9 + 1);
        }
        else
        {
          v20 = v4;
          v13 = (char **)v4;
        }
      }
      else
      {
        v13 = (char **)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__find_equal<std::string>(a1, &v20, v5);
      }
      if (!*v13)
      {
        v14 = (char *)operator new(0x40uLL);
        v15 = (std::string *)(v14 + 32);
        if (*((char *)v5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
        }
        else
        {
          v16 = *v5;
          *((_QWORD *)v14 + 6) = *((_QWORD *)v5 + 2);
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
        }
        *((_DWORD *)v14 + 14) = *((_DWORD *)v5 + 6);
        v17 = v20;
        *(_QWORD *)v14 = 0;
        *((_QWORD *)v14 + 1) = 0;
        *((_QWORD *)v14 + 2) = v17;
        *v13 = v14;
        v18 = **(_QWORD **)a1;
        if (v18)
        {
          *(_QWORD *)a1 = v18;
          v14 = *v13;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), (uint64_t *)v14);
        ++*(_QWORD *)(a1 + 16);
      }
      v5 += 2;
      if (v5 == v7)
        break;
      v8 = *(uint64_t **)a1;
      v6 = *(uint64_t **)(a1 + 8);
    }
  }
  return a1;
}

void sub_2164FD7E0(_Unwind_Exception *a1)
{
  void *v1;
  char **v2;

  operator delete(v1);
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!std::less<std::string>::operator()[abi:ne180100](a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL std::less<std::string>::operator()[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_2164FDC2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t Phase::Controller::ClientTapRegistryProxy::ClientTapRegistryProxy(uint64_t a1, void *a2, uint64_t a3)
{
  id inited;
  id v7;

  *(_QWORD *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_QWORD *)(a1 + 104) = &off_24D576FB8;
  *(_QWORD *)(a1 + 128) = a1 + 104;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 850045863;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  inited = objc_initWeak((id *)(a1 + 248), a2);
  *(_QWORD *)(a1 + 256) = a3;
  v7 = inited;
  if (!a2)
    std::terminate();

  return a1;
}

void Phase::Controller::ClientTapRegistryProxy::~ClientTapRegistryProxy(Phase::Controller::ClientTapRegistryProxy *this)
{
  Phase::Controller::ClientTapRegistryProxy::Reset((std::mutex *)this);
  objc_destroyWeak((id *)this + 31);
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::~guarded_lookup_hash_table((uint64_t)this + 104);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::~__hash_table((uint64_t)this + 64);
  std::mutex::~mutex((std::mutex *)this);
}

void Phase::Controller::ClientTapRegistryProxy::Reset(std::mutex *this)
{
  char *i;

  std::mutex::lock(this);
  for (i = &this[1].__m_.__opaque[8];
        ;
        caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::remove((uint64_t)&this[1].__m_.__opaque[32], *((_QWORD *)i + 2), *((_QWORD *)i + 3)))
  {
    i = *(char **)i;
    if (!i)
      break;
  }
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::clear((uint64_t)&this[1]);
  std::mutex::unlock(this);
}

void sub_2164FDF9C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::remove(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t SlotForKey;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  int v16;
  unsigned int v17;
  std::unique_lock<std::mutex> v18;
  std::chrono::nanoseconds __ns;

  v18.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 80);
  v18.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 80));
  v6 = atomic_load((unint64_t *)(a1 + 40));
  if (v6
    && (SlotForKey = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey((uint64_t *)v6, a2, a3), (SlotForKey & 1) != 0))
  {
    v9 = v8;
    atomic_store(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)(v6 + 8 * HIDWORD(SlotForKey) + 16));
    if (v8)
    {
      v11 = atomic_load((unsigned int *)(a1 + 48));
      if (v11 >= 1)
      {
        do
        {
          __ns.__rep_ = 50000;
          std::this_thread::sleep_for (&__ns);
          v12 = atomic_load((unsigned int *)(a1 + 48));
        }
        while (v12 > 0);
      }
      if ((unsigned __int16)atomic_load((unsigned int *)v9))
      {
        std::unique_lock<std::mutex>::unlock(&v18);
        while ((unsigned __int16)atomic_load((unsigned int *)v9))
        {
          __ns.__rep_ = 500000;
          std::this_thread::sleep_for (&__ns);
        }
        std::unique_lock<std::mutex>::lock(&v18);
        v6 = atomic_load((unint64_t *)(a1 + 40));
      }
      caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::element_t::release((unsigned int *)v9);
      v16 = *(_DWORD *)(a1 + 32) - 1;
      *(_DWORD *)(a1 + 32) = v16;
      if (v6)
      {
        v17 = *(_DWORD *)(v6 + 8);
        v9 = 1;
        if (v17 >= 9 && 16 * v16 / v17 <= 2)
          caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::rehash((unint64_t *)a1, v17 >> 1);
      }
      else
      {
        v9 = 1;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::emptyReleasePool(a1);
  if (v18.__owns_)
    std::mutex::unlock(v18.__m_);
  return v9;
}

void sub_2164FE124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11)
{
  if (a11)
    std::mutex::unlock(a10);
  _Unwind_Resume(exception_object);
}

void Phase::Controller::ClientTapRegistryProxy::RegisterTapReceiver(uint64_t a1, void *a2, void *a3)
{
  Phase *v5;
  NSString *v6;
  id WeakRetained;
  void **v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t SlotForKey;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  _QWORD *v26;
  _QWORD *i;
  unint64_t v28;
  _QWORD *v30;
  _QWORD *v31;
  float v32;
  float v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  int8x8_t prime;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint8x8_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  void *v52;
  id *v53;
  id aBlock;
  id *v55;
  __int128 StringHashId;

  v5 = a2;
  aBlock = a3;
  std::mutex::lock((std::mutex *)a1);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 248));
  if (!WeakRetained)
    goto LABEL_92;
  StringHashId = (unint64_t)Phase::GetStringHashId(v5, v6);
  v8 = (void **)(a1 + 64);
  if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 64), &StringHashId))
  {
    objc_msgSend(MEMORY[0x24BDBCE88], "raise:format:", CFSTR("API Misuse"), CFSTR("Already registered a receiver for tap id %@"), v5);
    goto LABEL_92;
  }
  v9 = operator new();
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_QWORD *)(v9 + 8) = -1;
  v55 = (id *)v9;
  v10 = _Block_copy(aBlock);
  v11 = *(id *)v9;
  *(_QWORD *)v9 = v10;

  v12 = objc_msgSend(WeakRetained, "implementation");
  (*(void (**)(_QWORD, _QWORD, _QWORD, id))(**(_QWORD **)(v12 + 424) + 64))(*(_QWORD *)(v12 + 424), StringHashId, *((_QWORD *)&StringHashId + 1), v55[1]);
  v14 = *((_QWORD *)&StringHashId + 1);
  v13 = StringHashId;
  v53 = v55;
  std::mutex::lock((std::mutex *)(a1 + 184));
  v15 = (uint64_t *)atomic_load((unint64_t *)(a1 + 144));
  v16 = *(_DWORD *)(a1 + 136) + 1;
  *(_DWORD *)(a1 + 136) = v16;
  if (!v15)
  {
    v19 = 8;
    goto LABEL_8;
  }
  v17 = 16 * v16;
  v18 = *((_DWORD *)v15 + 2);
  if (v17 / v18 >= 0xB)
  {
    v19 = 2 * v18;
LABEL_8:
    v15 = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::rehash((unint64_t *)(a1 + 104), v19);
  }
  SlotForKey = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey(v15, v13, v14);
  if ((SlotForKey & 1) != 0)
  {
    --*(_DWORD *)(a1 + 136);
  }
  else
  {
    v21 = operator new();
    *(_DWORD *)v21 = 0x10000;
    *(_QWORD *)(v21 + 8) = v13;
    *(_QWORD *)(v21 + 16) = v14;
    *(_QWORD *)(v21 + 24) = v53;
    atomic_store(v21, (unint64_t *)&v15[HIDWORD(SlotForKey) + 2]);
    caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::emptyReleasePool(a1 + 104);
  }
  std::mutex::unlock((std::mutex *)(a1 + 184));
  v22 = 0;
  v23 = 0xCBF29CE484222325;
  do
    v23 = 0x100000001B3 * (v23 ^ *((char *)&StringHashId + v22++));
  while (v22 != 16);
  v24 = *(_QWORD *)(a1 + 72);
  if (v24)
  {
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      v13 = v23;
      if (v23 >= v24)
        v13 = v23 % v24;
    }
    else
    {
      v13 = (v24 - 1) & v23;
    }
    v26 = (_QWORD *)*((_QWORD *)*v8 + v13);
    if (v26)
    {
      for (i = (_QWORD *)*v26; i; i = (_QWORD *)*i)
      {
        v28 = i[1];
        if (v28 == v23)
        {
          if (i[2] == (_QWORD)StringHashId && i[3] == *((_QWORD *)&StringHashId + 1))
            goto LABEL_91;
        }
        else
        {
          if (v25.u32[0] > 1uLL)
          {
            if (v28 >= v24)
              v28 %= v24;
          }
          else
          {
            v28 &= v24 - 1;
          }
          if (v28 != v13)
            break;
        }
      }
    }
  }
  v30 = operator new(0x28uLL);
  v31 = (_QWORD *)(a1 + 80);
  *v30 = 0;
  v30[1] = v23;
  *((_OWORD *)v30 + 1) = StringHashId;
  v30[4] = v55;
  v55 = 0;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 88) + 1);
  v33 = *(float *)(a1 + 96);
  if (!v24 || (float)(v33 * (float)v24) < v32)
  {
    v34 = 1;
    if (v24 >= 3)
      v34 = (v24 & (v24 - 1)) != 0;
    v35 = v34 | (2 * v24);
    v36 = vcvtps_u32_f32(v32 / v33);
    if (v35 <= v36)
      prime = (int8x8_t)v36;
    else
      prime = (int8x8_t)v35;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v24 = *(_QWORD *)(a1 + 72);
    }
    if (*(_QWORD *)&prime > v24)
      goto LABEL_47;
    if (*(_QWORD *)&prime < v24)
    {
      v44 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 88) / *(float *)(a1 + 96));
      if (v24 < 3 || (v45 = (uint8x8_t)vcnt_s8((int8x8_t)v24), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
      {
        v44 = std::__next_prime(v44);
      }
      else
      {
        v46 = 1 << -(char)__clz(v44 - 1);
        if (v44 >= 2)
          v44 = v46;
      }
      if (*(_QWORD *)&prime <= v44)
        prime = (int8x8_t)v44;
      if (*(_QWORD *)&prime >= v24)
      {
        v24 = *(_QWORD *)(a1 + 72);
      }
      else
      {
        if (prime)
        {
LABEL_47:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v38 = operator new(8 * *(_QWORD *)&prime);
          v39 = *v8;
          *v8 = v38;
          if (v39)
            operator delete(v39);
          v40 = 0;
          *(int8x8_t *)(a1 + 72) = prime;
          do
            *((_QWORD *)*v8 + v40++) = 0;
          while (*(_QWORD *)&prime != v40);
          v41 = (_QWORD *)*v31;
          if (*v31)
          {
            v42 = v41[1];
            v43 = (uint8x8_t)vcnt_s8(prime);
            v43.i16[0] = vaddlv_u8(v43);
            if (v43.u32[0] > 1uLL)
            {
              if (v42 >= *(_QWORD *)&prime)
                v42 %= *(_QWORD *)&prime;
            }
            else
            {
              v42 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)*v8 + v42) = v31;
            v47 = (_QWORD *)*v41;
            if (*v41)
            {
              do
              {
                v48 = v47[1];
                if (v43.u32[0] > 1uLL)
                {
                  if (v48 >= *(_QWORD *)&prime)
                    v48 %= *(_QWORD *)&prime;
                }
                else
                {
                  v48 &= *(_QWORD *)&prime - 1;
                }
                if (v48 != v42)
                {
                  if (!*((_QWORD *)*v8 + v48))
                  {
                    *((_QWORD *)*v8 + v48) = v41;
                    goto LABEL_72;
                  }
                  *v41 = *v47;
                  *v47 = **((_QWORD **)*v8 + v48);
                  **((_QWORD **)*v8 + v48) = v47;
                  v47 = v41;
                }
                v48 = v42;
LABEL_72:
                v41 = v47;
                v47 = (_QWORD *)*v47;
                v42 = v48;
              }
              while (v47);
            }
          }
          v24 = (unint64_t)prime;
          goto LABEL_76;
        }
        v52 = *v8;
        *v8 = 0;
        if (v52)
          operator delete(v52);
        v24 = 0;
        *(_QWORD *)(a1 + 72) = 0;
      }
    }
LABEL_76:
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v23 >= v24)
        v13 = v23 % v24;
      else
        v13 = v23;
    }
    else
    {
      v13 = (v24 - 1) & v23;
    }
  }
  v49 = *v8;
  v50 = (_QWORD *)*((_QWORD *)*v8 + v13);
  if (v50)
  {
    *v30 = *v50;
  }
  else
  {
    *v30 = *v31;
    *v31 = v30;
    v49[v13] = v31;
    if (!*v30)
      goto LABEL_90;
    v51 = *(_QWORD *)(*v30 + 8);
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v51 >= v24)
        v51 %= v24;
    }
    else
    {
      v51 &= v24 - 1;
    }
    v50 = (char *)*v8 + 8 * v51;
  }
  *v50 = v30;
LABEL_90:
  ++*(_QWORD *)(a1 + 88);
LABEL_91:
  std::unique_ptr<Phase::Controller::ClientTapReceiverObject>::reset[abi:ne180100](&v55, 0);
LABEL_92:

  std::mutex::unlock((std::mutex *)a1);
}

void sub_2164FE748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, ...)
{
  void *v4;
  std::mutex *v5;
  void *v6;
  void *v7;
  id **v8;
  va_list va;

  va_start(va, a4);
  std::unique_ptr<Phase::Controller::ClientTapReceiverObject>::reset[abi:ne180100](v8, 0);
  operator delete(v7);
  std::unique_ptr<Phase::Controller::ClientTapReceiverObject>::reset[abi:ne180100]((id **)va, 0);

  std::mutex::unlock(v5);
  _Unwind_Resume(a1);
}

void Phase::Controller::ClientTapRegistryProxy::UnregisterTapReceiver(Phase::Controller::ClientTapRegistryProxy *this, NSString *a2)
{
  NSString *v3;
  NSString *v4;
  uint64_t StringHashId;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a2;
  std::mutex::lock((std::mutex *)this);
  StringHashId = Phase::GetStringHashId((Phase *)v3, v4);
  v9 = StringHashId;
  v10 = 0;
  WeakRetained = objc_loadWeakRetained((id *)this + 31);
  v7 = WeakRetained;
  if (WeakRetained)
  {
    v8 = objc_msgSend(WeakRetained, "implementation", v9, v10);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v8 + 424) + 72))(*(_QWORD *)(v8 + 424), StringHashId, 0);
  }
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::remove((uint64_t)this + 104, StringHashId, 0);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::__erase_unique<Phase::UniqueObjectId>((_QWORD *)this + 8, &v9);

  std::mutex::unlock((std::mutex *)this);
}

void sub_2164FE86C(_Unwind_Exception *a1)
{
  void *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);

  _Unwind_Resume(a1);
}

id Phase::Controller::ClientTapRegistryProxy::GetTapReceiverFormat(std::mutex *this, NSString *a2)
{
  NSString *v3;
  NSString *v4;
  _QWORD *v5;
  void *v6;
  _QWORD v8[2];

  v3 = a2;
  std::mutex::lock(this);
  v8[0] = Phase::GetStringHashId((Phase *)v3, v4);
  v8[1] = 0;
  v5 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(&this[1].__m_.__sig, v8);
  v6 = v5;
  if (v5)
  {
    if (*(_BYTE *)(v5[4] + 56))
      v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1818]), "initWithStreamDescription:", v5[4] + 16);
    else
      v6 = 0;
  }
  std::mutex::unlock(this);

  return v6;
}

void sub_2164FE934(_Unwind_Exception *a1)
{
  void *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);

  _Unwind_Resume(a1);
}

uint64_t *Phase::Controller::ClientTapRegistryProxy::IORender(Phase::Controller::ClientTapRegistryProxy *this, UniqueObjectId a2, const AudioTimeStamp *a3, uint64_t a4, const AudioStreamBasicDescription *a5, float *a6)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t *result;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;
  unsigned int v17;

  v7 = (unsigned int *)((char *)this + 152);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  result = (uint64_t *)atomic_load((unint64_t *)this + 18);
  if (result)
  {
    result = (uint64_t *)caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey(result, a2.mStorage[0], a2.mStorage[1]);
    if (v10)
    {
      v11 = (unsigned int *)v10;
      do
        v12 = __ldaxr((unsigned int *)v10);
      while (__stlxr(v12 + 1, (unsigned int *)v10));
      v13 = *(_QWORD *)(v10 + 24);
      do
        v14 = __ldaxr(v7);
      while (__stlxr(v14 - 1, v7));
      v15 = *(_QWORD *)&a5->mBitsPerChannel;
      v16 = *(_OWORD *)&a5->mBytesPerPacket;
      *(_OWORD *)(v13 + 16) = *(_OWORD *)&a5->mSampleRate;
      *(_OWORD *)(v13 + 32) = v16;
      *(_QWORD *)(v13 + 48) = v15;
      result = (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v13 + 16))();
      v7 = v11;
    }
  }
  do
    v17 = __ldaxr(v7);
  while (__stlxr(v17 - 1, v7));
  return result;
}

void sub_2164FEA38(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::__deallocate_node(a1, *(id ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::__deallocate_node(uint64_t a1, id **a2)
{
  id **v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      std::unique_ptr<Phase::Controller::ClientTapReceiverObject>::reset[abi:ne180100](v2 + 4, 0);
      operator delete(v2);
      v2 = (id **)v3;
    }
    while (v3);
  }
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::~guarded_lookup_hash_table(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;

  if (!atomic_load((unsigned int *)(a1 + 48)))
  {
    v3 = atomic_load((unint64_t *)(a1 + 40));
    if (v3)
    {
      v4 = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::~table_impl(v3);
      MEMORY[0x2199F9D70](v4, 0x1060C402CF69088);
    }
    std::mutex::~mutex((std::mutex *)(a1 + 80));
    v5 = *(uint64_t **)(a1 + 56);
    if (v5)
    {
      v6 = *(uint64_t **)(a1 + 64);
      v7 = *(void **)(a1 + 56);
      if (v6 != v5)
      {
        do
          std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](--v6);
        while (v6 != v5);
        v7 = *(void **)(a1 + 56);
      }
      *(_QWORD *)(a1 + 64) = v5;
      operator delete(v7);
    }
    v8 = *(_QWORD **)(a1 + 24);
    if (v8 == (_QWORD *)a1)
    {
      v9 = 4;
      v8 = (_QWORD *)a1;
    }
    else
    {
      if (!v8)
        return a1;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    return a1;
  }
  _os_assert_log();
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::~table_impl(uint64_t a1)
{
  uint64_t v2;
  unsigned int **v3;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v3 = (unsigned int **)(a1 + 16);
    do
    {
      if ((unint64_t)*v3 + 1 >= 2)
        caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::element_t::release(*v3);
      ++v3;
      --v2;
    }
    while (v2);
  }
  return a1;
}

uint64_t std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::~table_impl(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t *caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::rehash(unint64_t *a1, unsigned int a2)
{
  unint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  unint64_t SlotForKey;
  unsigned int v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  char *v22;
  unint64_t v23;
  uint64_t *v24;

  v4 = a1 + 5;
  v5 = atomic_load(a1 + 5);
  v6 = (uint64_t *)operator new(8 * (a2 - 1) + 24);
  *v6 = (uint64_t)a1;
  *((_DWORD *)v6 + 2) = a2;
  bzero(v6 + 2, 8 * a2);
  if (v5)
  {
    v7 = *(unsigned int *)(v5 + 8);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(_QWORD *)(v5 + 8 * i + 16);
        if (v9 + 1 >= 2)
        {
          SlotForKey = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey(v6, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16));
          if ((SlotForKey & 1) == 0)
          {
            do
              v11 = __ldaxr((unsigned int *)v9);
            while (__stlxr(v11 + 0x10000, (unsigned int *)v9));
            atomic_store(v9, (unint64_t *)&v6[HIDWORD(SlotForKey) + 2]);
          }
        }
      }
    }
    atomic_store((unint64_t)v6, a1 + 5);
    v13 = (uint64_t *)a1[8];
    v12 = a1[9];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (_QWORD *)a1[7];
      v16 = v13 - v15;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v20 = (char *)operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = (unint64_t *)&v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        a1[7] = (unint64_t)v21;
        a1[8] = (unint64_t)v14;
        a1[9] = (unint64_t)v22;
      }
      else
      {
        do
        {
          v23 = *--v13;
          *v13 = 0;
          *--v21 = v23;
        }
        while (v13 != v15);
        v13 = (uint64_t *)a1[7];
        v24 = (uint64_t *)a1[8];
        a1[7] = (unint64_t)v21;
        a1[8] = (unint64_t)v14;
        a1[9] = (unint64_t)v22;
        while (v24 != v13)
          std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](--v24);
      }
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v13 = v5;
      v14 = v13 + 1;
    }
    a1[8] = (unint64_t)v14;
  }
  else
  {
    atomic_store((unint64_t)v6, v4);
  }
  return v6;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::emptyReleasePool(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t *v4;

  v1 = atomic_load((unsigned int *)(result + 48));
  if (v1 <= 0)
  {
    v2 = result;
    v4 = *(uint64_t **)(result + 56);
    for (i = *(uint64_t **)(result + 64);
          i != v4;
          result = std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](i))
    {
      --i;
    }
    *(_QWORD *)(v2 + 64) = v4;
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::__deallocate_node(a1, *(id ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

id **std::unique_ptr<Phase::Controller::ClientTapReceiverObject>::reset[abi:ne180100](id **result, id *a2)
{
  id *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::__erase_unique<Phase::UniqueObjectId>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  id **v3;
  void *__p;
  char v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (id **)__p;
  __p = 0;
  if (v3)
  {
    if (v6)
      std::unique_ptr<Phase::Controller::ClientTapReceiverObject>::reset[abi:ne180100](v3 + 4, 0);
    operator delete(v3);
  }
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t Phase::TapSourceRegistry::GetOrCreateTapSourceInfo(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, void *a7)
{
  Phase::Logger *v13;
  Phase::Logger *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  id v18;
  PHASEPreSpatialTapSource *v19;
  id WeakRetained;
  PHASEPreSpatialTapSource *v21;
  _QWORD *v22;
  id v23;
  PHASEPreSpatialTapSource *v24;
  id *v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  int64_t v29;
  int64_t v30;
  PHASEPreSpatialTapSource *v31;
  id v32;
  PHASEPreSpatialTapSource *v33;
  uint64_t *v34;
  PHASETapDescription *v35;
  PHASEPreSpatialTapSource *v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t *v39;
  int64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  id *v44;
  NSObject *v45;
  const char *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  int64_t v50;
  int64_t v51;
  PHASETapDescription *v52;
  PHASEPreSpatialTapSource *v53;
  id v54;
  PHASEPreSpatialTapSource *v55;
  _QWORD *v56;
  PHASETapDescription *v57;
  PHASEPreSpatialTapSource *v58;
  uint64_t *v59;
  uint64_t **v60;
  uint64_t **v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  id *v66;
  NSObject *v67;
  void *v68;
  uint64_t *v69;
  uint64_t **v70;
  int64_t v71;
  int64_t v72;
  PHASEPreSpatialTapSource *v73;
  id v74;
  PHASEPreSpatialTapSource *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t **v78;
  uint64_t *v79;
  int64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t *v83;
  id *v84;
  uint64_t *v85;
  id v86;
  PHASEPreSpatialTapSource *v87;
  id v88;
  PHASEPreSpatialTapSource *v89;
  _QWORD *v90;
  id *v91;
  uint64_t result;
  PHASETapDescription *v93;
  PHASETapDescription *v94;
  Phase::Logger *v95;
  Phase::Logger *v96;
  Phase::Logger *v97;
  _BYTE buf[12];
  __int16 v99;
  int v100;
  __int16 v101;
  int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  void *v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  v13 = a7;
  v14 = v13;
  v15 = 0;
  switch(a3)
  {
    case 0:
      v16 = (uint64_t *)(a1 + 8);
      v17 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(a1 + 8), a2);
      if (v17)
        goto LABEL_110;
      v18 = -[PHASETapDescription initSystemTapOfType:]([PHASETapDescription alloc], "initSystemTapOfType:", a2);
      v19 = [PHASEPreSpatialTapSource alloc];
      WeakRetained = objc_loadWeakRetained((id *)a1);
      v21 = -[PHASEPreSpatialTapSource initWithEngine:description:](v19, "initWithEngine:description:", WeakRetained, v18);

      v22 = (_QWORD *)operator new();
      v23 = v18;
      v24 = v21;
      *v22 = v23;
      v22[1] = v24;
      *(_QWORD *)buf = v22;
      v17 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::__emplace_unique_key_args<PHASETapType,PHASETapType&,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>(v16, a2, a2, (uint64_t *)buf);
      v25 = *(id **)buf;
      *(_QWORD *)buf = 0;
      if (v25)
        std::default_delete<Phase::TapSourceRegistry::TapSourceInfo>::operator()[abi:ne180100]((uint64_t)buf, v25);
      if (v17)
        goto LABEL_109;
      goto LABEL_124;
    case 1:
      if ((int)a4 <= 0)
      {
        v45 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v13) + 944));
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ClientTapSourceRegistry.mm";
          v99 = 1024;
          v100 = 86;
          v101 = 1024;
          v102 = a4;
          v46 = "%25s:%-5d Error: invalid process tap, client PID %d";
          goto LABEL_113;
        }
        goto LABEL_114;
      }
      v27 = (uint64_t **)(a1 + 96);
      v26 = *(uint64_t **)(a1 + 96);
      if (v26)
      {
        v28 = (uint64_t **)(a1 + 96);
        do
        {
          v29 = v26[4];
          if (v29 >= a2)
          {
            if (v29 <= a2)
            {
              if (*((_DWORD *)v26 + 10) < (int)a4)
                ++v26;
              else
                v28 = (uint64_t **)v26;
            }
            else
            {
              v28 = (uint64_t **)v26;
            }
          }
          else
          {
            ++v26;
          }
          v26 = (uint64_t *)*v26;
        }
        while (v26);
        if (v28 != v27)
        {
          v30 = (int64_t)v28[4];
          if (v30 <= a2 && (v30 < a2 || *((_DWORD *)v28 + 10) <= (int)a4))
            goto LABEL_104;
        }
      }
      v93 = -[PHASETapDescription initWithProcessIdentifier:tapType:]([PHASETapDescription alloc], "initWithProcessIdentifier:tapType:", a4, a2);
      v95 = v14;
      v31 = [PHASEPreSpatialTapSource alloc];
      v32 = objc_loadWeakRetained((id *)a1);
      v33 = -[PHASEPreSpatialTapSource initWithEngine:description:](v31, "initWithEngine:description:", v32, v93);

      v34 = (uint64_t *)operator new();
      v35 = v93;
      v36 = v33;
      *v34 = (uint64_t)v35;
      v34[1] = (uint64_t)v36;
      *(_QWORD *)buf = v34;
      v37 = *v27;
      v38 = (uint64_t **)(a1 + 96);
      v39 = (uint64_t *)(a1 + 96);
      if (*v27)
      {
        while (1)
        {
          while (1)
          {
            v39 = v37;
            v40 = v37[4];
            if (v40 <= a2)
              break;
LABEL_24:
            v37 = (uint64_t *)*v39;
            v38 = (uint64_t **)v39;
            if (!*v39)
              goto LABEL_32;
          }
          if (v40 >= a2)
          {
            v41 = *((_DWORD *)v39 + 10);
            if (v41 > (int)a4)
              goto LABEL_24;
            if (v41 >= (int)a4)
            {
              v28 = (uint64_t **)v39;
              goto LABEL_35;
            }
          }
          v37 = (uint64_t *)v39[1];
          if (!v37)
          {
            v38 = (uint64_t **)(v39 + 1);
            break;
          }
        }
      }
LABEL_32:
      v28 = (uint64_t **)operator new(0x38uLL);
      v28[4] = (uint64_t *)a2;
      v28[5] = (uint64_t *)a4;
      *(_QWORD *)buf = 0;
      v28[6] = v34;
      *v28 = 0;
      v28[1] = 0;
      v28[2] = v39;
      *v38 = (uint64_t *)v28;
      v42 = **(_QWORD **)(a1 + 88);
      v43 = (uint64_t *)v28;
      if (v42)
      {
        *(_QWORD *)(a1 + 88) = v42;
        v43 = *v38;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 96), v43);
      ++*(_QWORD *)(a1 + 104);
LABEL_35:
      v14 = v95;
      if (v27 == v28)
        goto LABEL_124;
      v44 = *(id **)buf;
      *(_QWORD *)buf = 0;
      if (v44)
        std::default_delete<Phase::TapSourceRegistry::TapSourceInfo>::operator()[abi:ne180100]((uint64_t)buf, v44);
LABEL_103:

LABEL_104:
      v15 = (uint64_t)v28[6];
LABEL_115:

      return v15;
    case 2:
      if ((a5 + 1) <= 1)
      {
        v45 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v13) + 944));
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ClientTapSourceRegistry.mm";
          v99 = 1024;
          v100 = 113;
          v101 = 1024;
          v102 = a5;
          v46 = "%25s:%-5d Error: invalid session tap, sessionID 0x%x";
LABEL_113:
          _os_log_impl(&dword_2164CC000, v45, OS_LOG_TYPE_ERROR, v46, buf, 0x18u);
        }
LABEL_114:
        v15 = 0;
        goto LABEL_115;
      }
      v70 = (uint64_t **)(a1 + 120);
      v69 = *(uint64_t **)(a1 + 120);
      if (v69)
      {
        v28 = (uint64_t **)(a1 + 120);
        do
        {
          v71 = v69[4];
          if (v71 >= a2)
          {
            if (v71 <= a2)
            {
              if (*((_DWORD *)v69 + 10) < a5)
                ++v69;
              else
                v28 = (uint64_t **)v69;
            }
            else
            {
              v28 = (uint64_t **)v69;
            }
          }
          else
          {
            ++v69;
          }
          v69 = (uint64_t *)*v69;
        }
        while (v69);
        if (v28 != v70)
        {
          v72 = (int64_t)v28[4];
          if (v72 <= a2 && (v72 < a2 || *((_DWORD *)v28 + 10) <= a5))
            goto LABEL_104;
        }
      }
      v94 = -[PHASETapDescription initWithAudioSessionToken:tapType:]([PHASETapDescription alloc], "initWithAudioSessionToken:tapType:", a5, a2);
      v97 = v14;
      v73 = [PHASEPreSpatialTapSource alloc];
      v74 = objc_loadWeakRetained((id *)a1);
      v75 = -[PHASEPreSpatialTapSource initWithEngine:description:](v73, "initWithEngine:description:", v74, v94);

      v76 = (uint64_t *)operator new();
      v35 = v94;
      v36 = v75;
      *v76 = (uint64_t)v35;
      v76[1] = (uint64_t)v36;
      *(_QWORD *)buf = v76;
      v77 = *v70;
      v78 = (uint64_t **)(a1 + 120);
      v79 = (uint64_t *)(a1 + 120);
      if (!*v70)
      {
LABEL_97:
        v28 = (uint64_t **)operator new(0x38uLL);
        v28[4] = (uint64_t *)a2;
        v28[5] = (uint64_t *)a5;
        *(_QWORD *)buf = 0;
        v28[6] = v76;
        *v28 = 0;
        v28[1] = 0;
        v28[2] = v79;
        *v78 = (uint64_t *)v28;
        v82 = **(_QWORD **)(a1 + 112);
        v83 = (uint64_t *)v28;
        if (v82)
        {
          *(_QWORD *)(a1 + 112) = v82;
          v83 = *v78;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 120), v83);
        ++*(_QWORD *)(a1 + 128);
LABEL_100:
        v14 = v97;
        if (v70 != v28)
        {
          v84 = *(id **)buf;
          *(_QWORD *)buf = 0;
          if (v84)
            std::default_delete<Phase::TapSourceRegistry::TapSourceInfo>::operator()[abi:ne180100]((uint64_t)buf, v84);
          goto LABEL_103;
        }
LABEL_124:
        std::terminate();
      }
      return result;
    case 3:
      goto LABEL_115;
    case 4:
      if (!a6)
        goto LABEL_114;
      v48 = (uint64_t *)(a1 + 168);
      v47 = *(uint64_t **)(a1 + 168);
      if (v47)
      {
        v49 = (uint64_t *)(a1 + 168);
        do
        {
          v50 = v47[4];
          if (v50 >= a2)
          {
            if (v50 <= a2)
            {
              if (v47[5] < 1)
                ++v47;
              else
                v49 = v47;
            }
            else
            {
              v49 = v47;
            }
          }
          else
          {
            ++v47;
          }
          v47 = (uint64_t *)*v47;
        }
        while (v47);
        if (v49 != v48)
        {
          v51 = v49[4];
          if (v51 <= a2 && (v51 < a2 || v49[5] < 2))
            goto LABEL_71;
        }
      }
      v52 = -[PHASETapDescription initWithStreamType:tapType:]([PHASETapDescription alloc], "initWithStreamType:tapType:", 1, a2);
      v96 = v14;
      v53 = [PHASEPreSpatialTapSource alloc];
      v54 = objc_loadWeakRetained((id *)a1);
      v55 = -[PHASEPreSpatialTapSource initWithEngine:description:](v53, "initWithEngine:description:", v54, v52);

      v56 = (_QWORD *)operator new();
      v57 = v52;
      v58 = v55;
      *v56 = v57;
      v56[1] = v58;
      *(_QWORD *)buf = v56;
      v59 = (uint64_t *)*v48;
      v60 = (uint64_t **)(a1 + 168);
      v61 = (uint64_t **)(a1 + 168);
      if (!*v48)
        goto LABEL_64;
      do
      {
        while (2)
        {
          v61 = (uint64_t **)v59;
          v62 = v59[4];
          if (v62 > a2)
          {
LABEL_57:
            v59 = *v61;
            v60 = v61;
            if (!*v61)
              goto LABEL_64;
            continue;
          }
          break;
        }
        if (v62 >= a2)
        {
          v63 = (uint64_t)v61[5];
          if (v63 >= 2)
            goto LABEL_57;
          if (v63 == 1)
          {
            v49 = (uint64_t *)v61;
            goto LABEL_67;
          }
        }
        v59 = v61[1];
      }
      while (v59);
      v60 = v61 + 1;
LABEL_64:
      v49 = (uint64_t *)operator new(0x38uLL);
      v49[4] = a2;
      v49[5] = 1;
      *(_QWORD *)buf = 0;
      v49[6] = (uint64_t)v56;
      *v49 = 0;
      v49[1] = 0;
      v49[2] = (uint64_t)v61;
      *v60 = v49;
      v64 = **(_QWORD **)(a1 + 160);
      v65 = v49;
      if (v64)
      {
        *(_QWORD *)(a1 + 160) = v64;
        v65 = *v60;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 168), v65);
      ++*(_QWORD *)(a1 + 176);
LABEL_67:
      v14 = v96;
      if (v48 == v49)
        goto LABEL_124;
      v66 = *(id **)buf;
      *(_QWORD *)buf = 0;
      if (v66)
        std::default_delete<Phase::TapSourceRegistry::TapSourceInfo>::operator()[abi:ne180100]((uint64_t)buf, v66);

LABEL_71:
      v15 = v49[6];
      goto LABEL_115;
    case 5:
      if (!a6)
      {
        v85 = (uint64_t *)(a1 + 48);
        v17 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(a1 + 48), a2);
        if (!v17)
        {
          v86 = -[PHASETapDescription initScreenSharingTapOfType:]([PHASETapDescription alloc], "initScreenSharingTapOfType:", a2);
          v87 = [PHASEPreSpatialTapSource alloc];
          v88 = objc_loadWeakRetained((id *)a1);
          v89 = -[PHASEPreSpatialTapSource initWithEngine:description:](v87, "initWithEngine:description:", v88, v86);

          v90 = (_QWORD *)operator new();
          v23 = v86;
          v24 = v89;
          *v90 = v23;
          v90[1] = v24;
          *(_QWORD *)buf = v90;
          v17 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::__emplace_unique_key_args<PHASETapType,PHASETapType&,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>(v85, a2, a2, (uint64_t *)buf);
          v91 = *(id **)buf;
          *(_QWORD *)buf = 0;
          if (v91)
            std::default_delete<Phase::TapSourceRegistry::TapSourceInfo>::operator()[abi:ne180100]((uint64_t)buf, v91);
          if (!v17)
            goto LABEL_124;
LABEL_109:

        }
LABEL_110:
        v15 = v17[3];
        goto LABEL_115;
      }
      v67 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v13)
                                                                                          + 944)));
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
      {
        GetTapTypeString(a2);
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "ClientTapSourceRegistry.mm";
        v99 = 1024;
        v100 = 63;
        v101 = 1024;
        v102 = 1;
        v103 = 1024;
        v104 = 5;
        v105 = 2112;
        v106 = v68;
        _os_log_impl(&dword_2164CC000, v67, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Excluding PHASETapStreamType %d from PHASETapBinding %d, with TapType %@", buf, 0x28u);

      }
      goto LABEL_114;
    default:
      goto LABEL_124;
  }
  while (1)
  {
    while (1)
    {
      v79 = v77;
      v80 = v77[4];
      if (v80 <= a2)
        break;
LABEL_90:
      v77 = (uint64_t *)*v79;
      v78 = (uint64_t **)v79;
      if (!*v79)
        goto LABEL_97;
    }
    if (v80 >= a2)
    {
      v81 = *((_DWORD *)v79 + 10);
      if (v81 > a5)
        goto LABEL_90;
      if (v81 >= a5)
      {
        v28 = (uint64_t **)v79;
        goto LABEL_100;
      }
    }
    v77 = (uint64_t *)v79[1];
    if (!v77)
    {
      v78 = (uint64_t **)(v79 + 1);
      goto LABEL_97;
    }
  }
}

void sub_2164FFA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *a13)
{
  void *v13;
  void *v14;
  void *v15;
  id *v17;

  v17 = a13;
  a13 = 0;
  if (v17)
    std::default_delete<Phase::TapSourceRegistry::TapSourceInfo>::operator()[abi:ne180100]((uint64_t)&a13, v17);

  _Unwind_Resume(a1);
}

void Phase::TapSourceRegistry::CacheTapInfo(Phase::TapSourceRegistry *this, int a2, AVAudioSession *a3, CachedTapInfo *a4)
{
  AVAudioSession *v6;
  Phase::Logger *v7;
  unsigned int v8;
  NSObject *v9;
  Phase::Logger *v10;
  BOOL v11;
  NSObject *v12;
  NSString *sceneIdentifier;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  unsigned int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = (Phase::Logger *)-[AVAudioSession opaqueSessionID](v6, "opaqueSessionID");
  v8 = v7;
  if (!v6)
  {
    v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7) + 944));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v14 = 136315394;
      v15 = "ClientTapSourceRegistry.mm";
      v16 = 1024;
      v17 = 225;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d unexpected nil audio session", (uint8_t *)&v14, 0x12u);
    }
  }
  v10 = (Phase::Logger *)-[AVAudioSession iAmTheAssistant](v6, "iAmTheAssistant");
  v11 = (char)v10;
  if ((_DWORD)v10)
  {
    v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10) + 944));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 136315906;
      v15 = "ClientTapSourceRegistry.mm";
      v16 = 1024;
      v17 = 235;
      v18 = 1024;
      v19 = v8;
      v20 = 1024;
      v21 = 1;
      _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d sessionID 0x%x matches PHASETapStreamType %d", (uint8_t *)&v14, 0x1Eu);
    }
  }
  a4->clientPID = a2;
  a4->audioSessionToken = v8;
  a4->isSiri = v11;
  sceneIdentifier = a4->sceneIdentifier;
  a4->sceneIdentifier = 0;

}

void sub_2164FFD80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::TapSourceRegistry::RegisterTapSource(Phase::Logger *a1, uint64_t a2, _QWORD *a3, void **a4)
{
  NSObject *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  int v12;
  void *v13;
  uint64_t *v14;
  uint64_t TapSourceInfo;
  id v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  Phase::Logger *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (*a3 != a3[1])
  {
    v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1)
                                                                                       + 944)));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (_QWORD *)*a3;
      v9 = a3[1];
      v12 = *(_DWORD *)a4;
      v11 = *((_DWORD *)a4 + 1);
      GetTapTypeString(a2);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 136316674;
      v21 = "ClientTapSourceRegistry.mm";
      v22 = 1024;
      v23 = 306;
      v24 = 2048;
      v25 = a1;
      v26 = 1024;
      v27 = (unint64_t)(v9 - (_QWORD)v10) >> 4;
      v28 = 1024;
      v29 = v12;
      v30 = 1024;
      v31 = v11;
      v32 = 2112;
      v33 = v13;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d TapSourceRegistry@%p: registering %d submixId(s) for client PID %d, sessionID 0x%x with TapType %@", (uint8_t *)&v20, 0x38u);

    }
    v14 = &Phase::sGetAllTapBindings(void)::sBindings;
    do
    {
      TapSourceInfo = Phase::TapSourceRegistry::GetOrCreateTapSourceInfo((uint64_t)a1, a2, *v14, *(unsigned int *)a4, *((unsigned int *)a4 + 1), *((unsigned __int8 *)a4 + 8), a4[2]);
      if (TapSourceInfo)
      {
        v16 = *(id *)(TapSourceInfo + 8);
        if (!v16)
          std::terminate();
        v17 = v16;
        v18 = (_QWORD *)*a3;
        v19 = (_QWORD *)a3[1];
        while (v18 != v19)
        {
          if (*v18 || v18[1])
            objc_msgSend(v17, "addSubmixId:");
          v18 += 2;
        }

      }
      ++v14;
    }
    while (v14 != (uint64_t *)&xmmword_2166F76B0);
  }
}

void sub_2164FFF7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::TapSourceRegistry::UnregisterTapSource(Phase::Logger *a1, uint64_t a2, _QWORD *a3, void **a4)
{
  NSObject *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  int v12;
  void *v13;
  uint64_t *v14;
  uint64_t TapSourceInfo;
  id v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  Phase::Logger *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (*a3 != a3[1])
  {
    v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1)
                                                                                       + 944)));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (_QWORD *)*a3;
      v9 = a3[1];
      v12 = *(_DWORD *)a4;
      v11 = *((_DWORD *)a4 + 1);
      GetTapTypeString(a2);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 136316674;
      v21 = "ClientTapSourceRegistry.mm";
      v22 = 1024;
      v23 = 343;
      v24 = 2048;
      v25 = a1;
      v26 = 1024;
      v27 = (unint64_t)(v9 - (_QWORD)v10) >> 4;
      v28 = 1024;
      v29 = v12;
      v30 = 1024;
      v31 = v11;
      v32 = 2112;
      v33 = v13;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d TapSourceRegistry@%p: unregistering %d submixId(s) for client PID %d, sessionID 0x%x, with TapType %@", (uint8_t *)&v20, 0x38u);

    }
    v14 = &Phase::sGetAllTapBindings(void)::sBindings;
    do
    {
      TapSourceInfo = Phase::TapSourceRegistry::GetOrCreateTapSourceInfo((uint64_t)a1, a2, *v14, *(unsigned int *)a4, *((unsigned int *)a4 + 1), *((unsigned __int8 *)a4 + 8), a4[2]);
      if (TapSourceInfo)
      {
        v16 = *(id *)(TapSourceInfo + 8);
        if (!v16)
          std::terminate();
        v17 = v16;
        v18 = (_QWORD *)*a3;
        v19 = (_QWORD *)a3[1];
        while (v18 != v19)
        {
          if (*v18 || v18[1])
            objc_msgSend(v17, "removeSubmixId:");
          v18 += 2;
        }

      }
      ++v14;
    }
    while (v14 != (uint64_t *)&xmmword_2166F76B0);
  }
}

void sub_21650017C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::default_delete<Phase::TapSourceRegistry::TapSourceInfo>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x2199F9D70);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::__emplace_unique_key_args<PHASETapType,PHASETapType&,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  void *v37;

  v7 = a2;
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(_QWORD ***)(*a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = a1 + 2;
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  v15 = *a4;
  *a4 = 0;
  i[2] = a3;
  i[3] = v15;
  v16 = (float)(unint64_t)(a1[3] + 1);
  v17 = *((float *)a1 + 8);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    v7 = v4;
    goto LABEL_64;
  }
  v18 = 1;
  if (v9 >= 3)
    v18 = (v9 & (v9 - 1)) != 0;
  v19 = v18 | (2 * v9);
  v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20)
    prime = (int8x8_t)v20;
  else
    prime = (int8x8_t)v19;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v9 = a1[1];
  }
  if (*(_QWORD *)&prime <= v9)
  {
    if (*(_QWORD *)&prime >= v9)
      goto LABEL_60;
    v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v9 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
    {
      v28 = std::__next_prime(v28);
    }
    else
    {
      v30 = 1 << -(char)__clz(v28 - 1);
      if (v28 >= 2)
        v28 = v30;
    }
    if (*(_QWORD *)&prime <= v28)
      prime = (int8x8_t)v28;
    if (*(_QWORD *)&prime >= v9)
    {
      v9 = a1[1];
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v37 = (void *)*a1;
      *a1 = 0;
      if (v37)
        operator delete(v37);
      v9 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v22 = operator new(8 * *(_QWORD *)&prime);
  v23 = (void *)*a1;
  *a1 = (uint64_t)v22;
  if (v23)
    operator delete(v23);
  v24 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(_QWORD *)(*a1 + 8 * v24++) = 0;
  while (*(_QWORD *)&prime != v24);
  v25 = (_QWORD *)*v14;
  if (*v14)
  {
    v26 = v25[1];
    v27 = (uint8x8_t)vcnt_s8(prime);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      if (v26 >= *(_QWORD *)&prime)
        v26 %= *(_QWORD *)&prime;
    }
    else
    {
      v26 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*a1 + 8 * v26) = v14;
    v31 = (_QWORD *)*v25;
    if (*v25)
    {
      do
      {
        v32 = v31[1];
        if (v27.u32[0] > 1uLL)
        {
          if (v32 >= *(_QWORD *)&prime)
            v32 %= *(_QWORD *)&prime;
        }
        else
        {
          v32 &= *(_QWORD *)&prime - 1;
        }
        if (v32 != v26)
        {
          if (!*(_QWORD *)(*a1 + 8 * v32))
          {
            *(_QWORD *)(*a1 + 8 * v32) = v25;
            goto LABEL_56;
          }
          *v25 = *v31;
          *v31 = **(_QWORD **)(*a1 + 8 * v32);
          **(_QWORD **)(*a1 + 8 * v32) = v31;
          v31 = v25;
        }
        v32 = v26;
LABEL_56:
        v25 = v31;
        v31 = (_QWORD *)*v31;
        v26 = v32;
      }
      while (v31);
    }
  }
  v9 = (unint64_t)prime;
LABEL_60:
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= v7)
      v7 %= v9;
  }
  else
  {
    v7 &= v9 - 1;
  }
LABEL_64:
  v33 = *a1;
  v34 = *(_QWORD **)(*a1 + 8 * v7);
  if (v34)
  {
    *i = *v34;
LABEL_72:
    *v34 = i;
    goto LABEL_73;
  }
  *i = *v14;
  *v14 = i;
  *(_QWORD *)(v33 + 8 * v7) = v14;
  if (*i)
  {
    v35 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9)
        v35 %= v9;
    }
    else
    {
      v35 &= v9 - 1;
    }
    v34 = (_QWORD *)(*a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_216500678(_Unwind_Exception *a1)
{
  char *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,void *>>>::operator()[abi:ne180100](char a1, char *__p)
{
  char *v3;
  id *v4;

  if (a1)
  {
    v3 = __p + 24;
    v4 = (id *)*((_QWORD *)__p + 3);
    *((_QWORD *)__p + 3) = 0;
    if (v4)
      std::default_delete<Phase::TapSourceRegistry::TapSourceInfo>::operator()[abi:ne180100]((uint64_t)v3, v4);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t Phase::Controller::GetSpatialCategoryFromStringId(Phase::Controller *this, const Phase::StringId *a2)
{
  uint64_t v3;
  NSObject *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)this;
  if (*(uint64_t *)this > 0x1FFAFEA98FCB6A46)
  {
    if (v3 == 0x1FFAFEA98FCB6A47)
      return 1;
    if (v3 == 0x6B49B1D64D1B41D9)
      return 3;
  }
  else
  {
    if (v3 == 0x94F19D1538263596)
      return 2;
    if (v3 == 0xAB79C315C5E5658BLL)
      return 4;
  }
  v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                     + 1072)));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = *((_QWORD *)this + 1);
    v7 = 136315906;
    v8 = "ControllerEnumConversions.mm";
    v9 = 1024;
    v10 = 89;
    v11 = 2080;
    v12 = v6;
    v13 = 2048;
    v14 = 0;
    _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d GetSpatialCategoryFromStringId(%s) not handled! Returning '%ld'.", (uint8_t *)&v7, 0x26u);
  }

  return 0;
}

uint64_t Phase::Controller::GetSpatialModelerGraphFromStringId(Phase::Controller *this, const Phase::StringId *a2)
{
  uint64_t v2;
  NSObject *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this == 0x94EB1EFFBBB6498BLL)
    return 3;
  if (v2 == 0x41431F2BBDC5FD3DLL)
    return 1;
  if (v2 == 0x303D316DF08A928ALL)
    return 2;
  v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                     + 1072)));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = *((_QWORD *)this + 1);
    v7 = 136315906;
    v8 = "ControllerEnumConversions.mm";
    v9 = 1024;
    v10 = 170;
    v11 = 2080;
    v12 = v6;
    v13 = 2048;
    v14 = 0;
    _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d GetSpatialModelerGraphFromStringId(%s) not handled! Returning '%ld'.", (uint8_t *)&v7, 0x26u);
  }

  return 0;
}

uint64_t Phase::Controller::GetSpatialModelerStageFromStringId(Phase::Controller *this, const Phase::StringId *a2)
{
  uint64_t v2;
  NSObject *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this == 0x7D179DD4BE0C7C0BLL)
    return 3;
  if (v2 == 0x76F46F9CAE2A8525)
    return 1;
  if (v2 == 0x9841528F05C205ADLL)
    return 2;
  v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                     + 1072)));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = *((_QWORD *)this + 1);
    v7 = 136315906;
    v8 = "ControllerEnumConversions.mm";
    v9 = 1024;
    v10 = 246;
    v11 = 2080;
    v12 = v6;
    v13 = 2048;
    v14 = 0;
    _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d GetSpatialModelerStageFromStringId(%s) not handled! Returning '%ld'.", (uint8_t *)&v7, 0x26u);
  }

  return 0;
}

uint64_t Phase::Controller::GetSpatialModelerParameterFromStringId(Phase::Controller *this, const Phase::StringId *a2)
{
  uint64_t v3;
  NSObject *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)this;
  if (*(uint64_t *)this <= 0x3B97657A3F7890D7)
  {
    if (v3 == 0xBB61740109BBA304)
      return 4;
    if (v3 == 0x1DC46F42C8E3BA06)
      return 1;
  }
  else
  {
    switch(v3)
    {
      case 0x3B97657A3F7890D8:
        return 5;
      case 0x4A994AC0B3A35B97:
        return 3;
      case 0x3E6FF80416884765:
        return 2;
    }
  }
  v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                     + 1072)));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = *((_QWORD *)this + 1);
    v7 = 136315906;
    v8 = "ControllerEnumConversions.mm";
    v9 = 1024;
    v10 = 334;
    v11 = 2080;
    v12 = v6;
    v13 = 2048;
    v14 = 0;
    _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d GetSpatialModelerParameterFromStringId(%s) not handled! Returning '%ld'.", (uint8_t *)&v7, 0x26u);
  }

  return 0;
}

uint64_t Phase::Controller::IsSteppedParameter(_QWORD *a1)
{
  const char *v1;
  const char *v2;

  if (*a1 == 0x3B97657A3F7890D8)
  {
    v1 = (const char *)a1[1];
    if (v1 != "MaximumClusterCount")
    {
      v2 = "MaximumClusterCount";
      return strcmp(v1, v2) == 0;
    }
  }
  else
  {
    if (*a1 != 0x3E6FF80416884765)
      return 0;
    v1 = (const char *)a1[1];
    if (v1 != "SubbandCount")
    {
      v2 = "SubbandCount";
      return strcmp(v1, v2) == 0;
    }
  }
  return 1;
}

void Phase::DspLayer::ConvolverVoicePool::~ConvolverVoicePool(Phase::DspLayer::ConvolverVoicePool *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);
  JUMPOUT(0x2199F9D70);
}

uint64_t *Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(Phase::DspLayer::ConvolverVoicePool *this)
{
  void *v2;
  uint64_t *v3;
  std::string *p_p;
  uint64_t (***v5)();
  uint64_t v6;
  int v7;
  std::string *v8;
  __int128 v9;
  void *v11[2];
  std::string::size_type v12;
  void *v13[2];
  char v14;
  std::string __p;
  uint64_t (**v16)();
  int v17;
  uint64_t (***v18)();
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = malloc_type_malloc(0, 0x1050040B063AAFAuLL);
  v3 = (uint64_t *)operator new();
  Phase::DspLayer::ConvolverVoicePool::GetStaticInstanceName(this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v16 = &off_24D577D88;
  v17 = (int)this;
  v18 = &v16;
  Phase::Controller::VoicePoolEntry::VoicePoolEntry((uint64_t)v3, (char *)p_p, 0, (uint64_t)v2, (uint64_t)&v16);
  v5 = v18;
  if (v18 == &v16)
  {
    v6 = 4;
    v5 = &v16;
  }
  else
  {
    if (!v18)
      goto LABEL_9;
    v6 = 5;
  }
  (*v5)[v6]();
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v13, "Input");
  Phase::Controller::VoicePoolEntry::AddInput(v3, (__int128 *)v13);
  if (v14 < 0)
    operator delete(v13[0]);
  if ((int)this >= 1)
  {
    v7 = 0;
    do
    {
      std::to_string(&__p, v7);
      v8 = std::string::insert(&__p, 0, "Output_");
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v12 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)v11 = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      Phase::Controller::VoicePoolEntry::AddOutput(v3, (__int128 *)v11);
      if (SHIBYTE(v12) < 0)
        operator delete(v11[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v7;
    }
    while ((_DWORD)this != v7);
  }
  return v3;
}

void sub_216500F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::ConvolverVoicePool::GetStaticInstanceName(Phase::DspLayer::ConvolverVoicePool *this@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  std::string v4;

  std::to_string(&v4, (int)this);
  v3 = std::string::insert(&v4, 0, "ConvolverVoicePool_1x");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_216501058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::NUPConvolverSlice::~NUPConvolverSlice(Phase::DspLayer::NUPConvolverSlice *this)
{
  Phase::DspLayer::NUPConvolverSlice::~NUPConvolverSlice(this);
  JUMPOUT(0x2199F9D70);
}

{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (char *)this + 65584;
  *(_QWORD *)this = &off_24D577CB0;
  if (*(int *)(*((_QWORD *)this + 8225) + 88) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *((_QWORD *)v1 + 6);
      v4 = *(_QWORD *)(v3 + 8 * v2);
      if (v4)
      {
        free(*(void **)(v4 + 16));
        MEMORY[0x2199F9D70](v4, 0x10C0C4053CBD40BLL);
        v3 = *((_QWORD *)v1 + 6);
      }
      *(_QWORD *)(v3 + 8 * v2) = 0;
      free(*(void **)(*(_QWORD *)v1 + 8 * v2));
      *(_QWORD *)(*(_QWORD *)v1 + 8 * v2) = 0;
      free(*(void **)(*((_QWORD *)v1 + 1) + 8 * v2));
      *(_QWORD *)(*((_QWORD *)v1 + 1) + 8 * v2++) = 0;
    }
    while (v2 < *(int *)(*((_QWORD *)v1 + 27) + 88));
  }
  free(*((void **)v1 + 6));
  *((_QWORD *)v1 + 6) = 0;
  free(*(void **)v1);
  *(_QWORD *)v1 = 0;
  free(*((void **)v1 + 1));
  *((_QWORD *)v1 + 1) = 0;
  free(*((void **)v1 + 4));
}

__n128 Phase::DspLayer::NUPConvolverSlice::Reset(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  v2 = a1 + 65616;
  *(_OWORD *)(a1 + 65600) = 0u;
  bzero(*(void **)(a1 + 65616), 16 * *(int *)(a1 + 65624));
  if (*(int *)(*(_QWORD *)(v2 + 184) + 88) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * v3);
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      bzero(*(void **)(v4 + 16), 16 * *(int *)(v4 + 24));
      ++v3;
    }
    while (v3 < *(int *)(*(_QWORD *)(v2 + 184) + 88));
  }
  *(_OWORD *)(a1 + 65672) = 0u;
  *(_OWORD *)(a1 + 65688) = 0u;
  *(_OWORD *)(a1 + 65640) = 0u;
  *(_OWORD *)(a1 + 65656) = 0u;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  *(__n128 *)(a1 + 65768) = result;
  *(__n128 *)(a1 + 65784) = result;
  return result;
}

void Phase::DspLayer::NUPConvolverSlice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v7 = a1 + 65616;
  v8 = a1 + 4 * a3;
  bzero((void *)(*(_QWORD *)(a1 + 65616) + 4 * *(_DWORD *)(a1 + 65624) * a3), 4 * *(int *)(a1 + 65624));
  *(_DWORD *)(v8 + 65600) = 0;
  if (*(int *)(*(_QWORD *)(v7 + 184) + 88) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v9);
      bzero((void *)(*(_QWORD *)(v10 + 16) + 4 * *(_DWORD *)(v10 + 24) * a3), 4 * *(int *)(v10 + 24));
      *(_DWORD *)(v10 + 4 * a3) = 0;
      ++v9;
    }
    while (v9 < *(int *)(*(_QWORD *)(v7 + 184) + 88));
  }
  v11 = (_QWORD *)(a1 + 8 * a3);
  v11[8205] = 0;
  v11[8209] = 0;
  v11[8221] = a4;
}

uint64_t Phase::DspLayer::NUPConvolverSlice::GetParameter(Phase::DspLayer::NUPConvolverSlice *this)
{
  return 9;
}

uint64_t Phase::DspLayer::NUPConvolverSlice::SetParameter(Phase::DspLayer::NUPConvolverSlice *this, double a2)
{
  return 9;
}

__n128 Phase::DspLayer::NUPConvolverSlice::UpdateParameters(_QWORD *a1)
{
  _QWORD *v1;
  __n128 result;
  uint64_t v3;
  __n128 *v4;

  v1 = a1 + 8198;
  memcpy(a1 + 4100, a1 + 2, 0x8010uLL);
  if (*(int *)(v1[27] + 88) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(__n128 **)(*v1 + 8 * v3);
      result = *v4;
      *(__n128 *)*(_QWORD *)(v1[1] + 8 * v3++) = *v4;
    }
    while (v3 < *(int *)(v1[27] + 88));
  }
  return result;
}

{
  _QWORD *v1;
  __n128 result;
  uint64_t v3;
  __n128 *v4;

  v1 = a1 + 8198;
  memcpy(a1 + 4100, a1 + 2, 0x8010uLL);
  if (*(int *)(v1[27] + 88) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(__n128 **)(*v1 + 8 * v3);
      result = *v4;
      *(__n128 *)*(_QWORD *)(v1[1] + 8 * v3++) = *v4;
    }
    while (v3 < *(int *)(v1[27] + 88));
  }
  return result;
}

void Phase::DspLayer::NUPConvolverSlice::Run(Phase::DspLayer::NUPConvolverSlice *this, Phase::DspLayer::VoiceEngine *a2, Phase::DspLayer::VoicePool *a3, __int32 a4)
{
  char *v7;
  int32x4_t v8;
  int64x2_t v9;
  uint64_t v10;
  float32x4_t *v11;
  float32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;
  uint64_t v16;
  int8x16_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int *v21;
  int8x16_t v22;
  uint64_t v23;
  uint64_t v24;
  vDSP_Length v25;
  unint64_t *v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  char ***v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  const char *v40;
  uint32_t v41;
  int v42;
  char *v43;
  int v44;
  unsigned int v45;
  char *v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  char *v66;
  uint64_t v67;
  const float *v68;
  size_t v69;
  unint64_t v70;
  char *v71;
  size_t v72;
  uint64_t v73;
  uint64_t *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  size_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  float v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  const float *v90;
  size_t v91;
  _DWORD *v92;
  BOOL v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  float *v98;
  float *v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  size_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  _DWORD *v109;
  int v110;
  _DWORD *v111;
  int v112;
  uint64_t v113;
  int v114;
  char *v115;
  uint64_t v116;
  uint64_t *v117;
  char *v118;
  char *v119;
  uint64_t *v120;
  uint64_t v121;
  int32x4_t v122;
  uint64_t *v123;
  int32x4_t v124;
  Phase::DspLayer::VoicePool *v125;
  char *v126;
  char ***v127;
  uint64_t v128;
  char *v129;
  float __Step;
  float __Start;
  _BYTE buf[38];
  __int16 v133;
  _BYTE v134[18];
  const float *v135;
  const float *v136;
  uint64_t v137;

  v125 = a3;
  v137 = *MEMORY[0x24BDAC8D0];
  v7 = (char *)this + 65592;
  v8 = (int32x4_t)vandq_s8(*((int8x16_t *)this + 2050), (int8x16_t)vcgtq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2166F76B0));
  v9 = (int64x2_t)vcgtzq_s32(v8);
  if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v9, 1), (int8x16_t)v9).u64[0])
  {
    v10 = *((_QWORD *)a2 + 7);
    v11 = (float32x4_t *)((char *)this + 32832);
    v12 = 0uLL;
    v13 = 0uLL;
    v14.i64[0] = 0x100000001;
    v14.i64[1] = 0x100000001;
    do
    {
      v15.i32[0] = *(_DWORD *)(v10 + 4 * v11[-1].i32[0]);
      v15.i32[1] = *(_DWORD *)(v10 + 4 * v11[-1].i32[1]);
      v15.i32[2] = *(_DWORD *)(v10 + 4 * v11[-1].i32[2]);
      v15.i32[3] = *(_DWORD *)(v10 + 4 * v11[-1].i32[3]);
      v12 = vmlaq_f32(v12, (float32x4_t)vandq_s8((int8x16_t)v9, v15), *v11);
      v13 = vaddq_s32(v13, v14);
      v9 = (int64x2_t)vcgtq_s32(v8, v13);
      v11 += 2;
    }
    while (vorrq_s8((int8x16_t)vdupq_laneq_s64(v9, 1), (int8x16_t)v9).u64[0]);
  }
  else
  {
    v12 = 0uLL;
  }
  v129 = (char *)this + 65600;
  v17 = (int8x16_t)Phase::DspLayer::ReblockerIn::AddFrame((int32x4_t *)this + 4100, a4, (int32x4_t)v12);
  if (*(int *)(*((_QWORD *)v7 + 26) + 88) >= 1)
  {
    v18 = 0;
    HIDWORD(v20) = a4 - 1;
    LODWORD(v20) = a4 - 1;
    v19 = v20 >> 1;
    do
    {
      v21 = *(int **)(*(_QWORD *)v7 + 8 * v18);
      *(float *)v22.i32 = Phase::DspLayer::ReblockerOut::GetNextFrame(*(int32x4_t **)(*((_QWORD *)v7 + 5) + 8 * v18), a4);
      v17 = vandq_s8(v22, vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)v22), (int8x16_t)vcgezq_f32((float32x4_t)v22)));
      switch(v19)
      {
        case 0:
          goto LABEL_12;
        case 1:
          goto LABEL_11;
        case 3:
          goto LABEL_10;
        case 7:
          *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * v21[3]) = v17.i32[3];
LABEL_10:
          *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * v21[2]) = v17.i32[2];
LABEL_11:
          *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * v21[1]) = v17.i32[1];
LABEL_12:
          *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * *v21) = v17.i32[0];
          break;
        default:
          break;
      }
      ++v18;
    }
    while (v18 < *(int *)(*((_QWORD *)v7 + 26) + 88));
  }
  if (a4)
  {
    v23 = 0;
    v17.i32[0] = a4;
    *(int8x8_t *)v17.i8 = vcnt_s8(*(int8x8_t *)v17.i8);
    v17.i16[0] = vaddlv_u8(*(uint8x8_t *)v17.i8);
    v119 = (char *)this + 65704;
    v118 = (char *)this + 65720;
    if (v17.i32[0] <= 1u)
      v24 = 1;
    else
      v24 = v17.u32[0];
    v128 = v24;
    v120 = (uint64_t *)((char *)this + 65768);
    v17.i64[0] = 136316162;
    v122 = (int32x4_t)v17;
    v17.i64[0] = 136316418;
    v124 = (int32x4_t)v17;
    while (1)
    {
      if (*(_DWORD *)&v129[4 * (int)v23])
        goto LABEL_109;
      v25 = *((int *)v7 + 8);
      v26 = (unint64_t *)*((_QWORD *)this + (int)v23 + 8226);
      v27 = (char *)this + (int)v23 + 65840;
      if (!v26)
      {
        if (*v27)
        {
          v36 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v16) + 144);
          v16 = os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v16)
          {
            v37 = *((_QWORD *)v125 + 6);
            v38 = *((_QWORD *)this + (int)v23 + 8221);
            *(_DWORD *)buf = v122.i32[0];
            *(_QWORD *)&buf[4] = "ConvolverVoicePool.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 340;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v37;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v125;
            v133 = 2048;
            *(_QWORD *)v134 = v38;
            v39 = v36;
            v40 = "%25s:%-5d %s(%p):%llu buffer exchanger is nullptr. Output will be silent.";
            v41 = 48;
            goto LABEL_58;
          }
          goto LABEL_59;
        }
        goto LABEL_60;
      }
      v28 = (char *)this + 8 * v23;
      v29 = v28 + 65672;
      v30 = (char ***)(v28 + 65640);
      *v27 = 1;
      do
        v31 = __ldaxr(v26);
      while (__stlxr(0, v26));
      if (v31)
        break;
LABEL_52:
      v27 = (char *)this + (int)v23 + 65848;
      if (!*((_QWORD *)this + (int)v23 + 8205))
      {
        if (*v27)
        {
          v56 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v16) + 144);
          v16 = os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v16)
          {
            v57 = *((_QWORD *)v7 + 26);
            v58 = *((_QWORD *)this + (int)v23 + 8221);
            *(_DWORD *)buf = v124.i32[0];
            *(_QWORD *)&buf[4] = "ConvolverVoicePool.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 381;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v57;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = this;
            v133 = 1024;
            *(_DWORD *)v134 = v23;
            *(_WORD *)&v134[4] = 2048;
            *(_QWORD *)&v134[6] = v58;
            v39 = v56;
            v40 = "%25s:%-5d ConvolverVoicePool%p: slice%p (lane %d, vid %llu) mConvolverBufferActive == nullptr. Output "
                  "will be silent. \n";
            v41 = 54;
            goto LABEL_58;
          }
          goto LABEL_59;
        }
        goto LABEL_60;
      }
      *v27 = 1;
      if (*(_QWORD *)v29)
        v55 = **(_QWORD **)v29;
      else
        v55 = 0;
      v61 = **v30;
      if (*(_DWORD *)(*((_QWORD *)v7 + 26) + 88) == 2)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v62 = (uint64_t *)*((_QWORD *)v7 + 5);
        v63 = *v62;
        v64 = *(_QWORD *)(v62[1] + 16) + 4 * *(_DWORD *)(v62[1] + 24) * (int)v23;
        *(_QWORD *)buf = *(_QWORD *)(v63 + 16) + 4 * *(_DWORD *)(v63 + 24) * (int)v23;
        *(_QWORD *)&buf[8] = v64;
        if (v55)
        {
          v126 = v29;
          v65 = (int *)((char *)this + 4 * v23 + 65752);
          if (*v65 < 1)
          {
            (*(void (**)(char *, uint64_t, _BYTE *))(*(_QWORD *)v61 + 24))(v61, *((_QWORD *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v23, buf);
            v85 = (char *)this + 4 * v23;
            v127 = (char ***)(v85 + 65704);
            v86 = 1.0 - *((float *)v85 + 16426);
            v87 = v85 + 65720;
            __Step = -*((float *)v85 + 16430);
            __Start = v86;
            vDSP_vrampmul2(*(const float **)buf, *(const float **)&buf[8], 1, &__Start, &__Step, *(float **)buf, *(float **)&buf[8], 1, v25);
            MEMORY[0x24BDAC7A8](v88);
            v90 = (const float *)((char *)&v116 - v89);
            bzero((char *)&v116 - v89, v91);
            v135 = v90;
            v136 = &v90[v25];
            (*(void (**)(uint64_t, uint64_t, const float **))(*(_QWORD *)v55 + 24))(v55, *((_QWORD *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v23, &v135);
            vDSP_vrampmuladd2(v135, v136, 1, (float *)&v119[4 * v23], (const float *)&v118[4 * v23], *(float **)buf, *(float **)&buf[8], 1, v25);
            v92 = (_DWORD *)((char *)this + 4 * v23 + 65736);
            v93 = *v92 <= (int)v25;
            *v92 -= v25;
            if (v93)
            {
              v94 = v126;
              if (*(_QWORD *)v126)
                atomic_store(0, (unsigned __int8 *)(*(_QWORD *)v126 + 12));
              *(_QWORD *)v94 = 0;
              *(_DWORD *)v127 = 0;
              *v87 = 0;
              *v92 = 0;
            }
          }
          else
          {
            MEMORY[0x24BDAC7A8](v16);
            v66 = v61;
            v68 = (const float *)((char *)&v116 - v67);
            bzero((char *)&v116 - v67, v69);
            v135 = v68;
            v136 = &v68[v25];
            (*(void (**)(char *, uint64_t, const float **))(*(_QWORD *)v66 + 24))(v66, *((_QWORD *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v23, &v135);
            (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v55 + 24))(v55, *((_QWORD *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v23, buf);
            *v65 -= v25;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, _BYTE *))(*(_QWORD *)v61 + 24))(v61, *((_QWORD *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v23, buf);
        }
      }
      else
      {
        v123 = &v116;
        MEMORY[0x24BDAC7A8](v16);
        v71 = (char *)&v116 - ((v70 + 15) & 0xFFFFFFFF0);
        if (v70 >= 0x200)
          v72 = 512;
        else
          v72 = v70;
        bzero((char *)&v116 - ((v70 + 15) & 0xFFFFFFFF0), v72);
        if (*(int *)(*((_QWORD *)v7 + 26) + 88) >= 1)
        {
          v74 = (uint64_t *)*((_QWORD *)v7 + 5);
          v75 = v71;
          v76 = *(unsigned int *)(*((_QWORD *)v7 + 26) + 88);
          do
          {
            v77 = *v74++;
            *(_QWORD *)v75 = *(_QWORD *)(v77 + 16) + 4 * *(_DWORD *)(v77 + 24) * (int)v23;
            v75 += 8;
            --v76;
          }
          while (v76);
        }
        if (v55)
        {
          v121 = v55;
          v127 = v30;
          if (*((int *)this + v23 + 16438) < 1)
          {
            v126 = v29;
            v95 = (*(uint64_t (**)(char *, uint64_t, char *))(*(_QWORD *)v61 + 24))(v61, *((_QWORD *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v23, v71);
            if (*(int *)(*((_QWORD *)v7 + 26) + 88) >= 1)
            {
              v96 = 0;
              v97 = (char *)this + 4 * v23;
              v98 = (float *)(v97 + 65704);
              v99 = (float *)(v97 + 65720);
              do
              {
                *(float *)buf = 1.0 - *v98;
                *(float *)&v135 = -*v99;
                vDSP_vrampmul(*(const float **)&v71[8 * v96], 1, (float *)buf, (const float *)&v135, *(float **)&v71[8 * v96], 1, v25);
                ++v96;
              }
              while (v96 < *(int *)(*((_QWORD *)v7 + 26) + 88));
            }
            v117 = &v116;
            MEMORY[0x24BDAC7A8](v95);
            v102 = (char *)&v116 - v101;
            if (v100 >= 0x200)
              v103 = 512;
            else
              v103 = v100;
            bzero((char *)&v116 - v101, v103);
            v105 = *((_QWORD *)v7 + 26);
            if (*(int *)(v105 + 88) >= 1)
            {
              v106 = 0;
              v107 = 4 * v25;
              do
              {
                MEMORY[0x24BDAC7A8](v104);
                bzero((char *)&v116 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0), 4 * v25);
                *(_QWORD *)&v102[8 * v106++] = (char *)&v116 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
              }
              while (v106 < *(int *)(v105 + 88));
            }
            (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v121 + 24))(v121, *((_QWORD *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v23, v102);
            v108 = (_DWORD *)((char *)this + 4 * v23);
            v109 = v108 + 16426;
            v110 = v108[16426];
            *(_DWORD *)buf = v110;
            v111 = v108 + 16430;
            v112 = v108[16430];
            LODWORD(v135) = v112;
            if (*(int *)(*((_QWORD *)v7 + 26) + 88) >= 1)
            {
              v113 = 0;
              do
              {
                *(_DWORD *)buf = *v109;
                LODWORD(v135) = *v111;
                vDSP_vrampmuladd(*(const float **)&v102[8 * v113], 1, (float *)buf, (const float *)&v135, *(float **)&v71[8 * v113], 1, v25);
                ++v113;
              }
              while (v113 < *(int *)(*((_QWORD *)v7 + 26) + 88));
              v110 = *(_DWORD *)buf;
              v112 = (int)v135;
            }
            *v109 = v110;
            *v111 = v112;
            v114 = v108[16434] - v25;
            v108[16434] = v114;
            v30 = v127;
            if (v114 < 1)
            {
              v115 = v126;
              if (*(_QWORD *)v126)
                atomic_store(0, (unsigned __int8 *)(*(_QWORD *)v126 + 12));
              *(_QWORD *)v115 = 0;
              *v109 = 0;
              *v111 = 0;
              v108[16434] = 0;
            }
          }
          else
          {
            v117 = (uint64_t *)((char *)this + 4 * v23 + 65752);
            v126 = v61;
            v116 = (uint64_t)&v116;
            MEMORY[0x24BDAC7A8](v73);
            v79 = (char *)&v116 - ((v78 + 15) & 0xFFFFFFFF0);
            if (v78 >= 0x200)
              v80 = 512;
            else
              v80 = v78;
            bzero((char *)&v116 - ((v78 + 15) & 0xFFFFFFFF0), v80);
            v82 = *((_QWORD *)v7 + 26);
            if (*(int *)(v82 + 88) >= 1)
            {
              v83 = 0;
              v84 = 4 * v25;
              do
              {
                MEMORY[0x24BDAC7A8](v81);
                bzero((char *)&v116 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0), 4 * v25);
                *(_QWORD *)&v79[8 * v83++] = (char *)&v116 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
              }
              while (v83 < *(int *)(v82 + 88));
            }
            (*(void (**)(char *, uint64_t, char *))(*(_QWORD *)v126 + 24))(v126, *((_QWORD *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v23, v79);
            (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v121 + 24))(v121, *((_QWORD *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v23, v71);
            *(_DWORD *)v117 -= v25;
            v30 = v127;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, char *))(*(_QWORD *)v61 + 24))(v61, *((_QWORD *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v23, v71);
        }
      }
      v16 = (*(uint64_t (**)(char *))(*(_QWORD *)**v30 + 40))(**v30);
LABEL_109:
      if (++v23 == v128)
        return;
    }
    v126 = v28 + 65672;
    v127 = (char ***)(v28 + 65640);
    v32 = *(_QWORD *)v31;
    if (!*(_QWORD *)v31)
      goto LABEL_44;
    v33 = (unint64_t *)((char *)this + 8 * (int)v23 + 65640);
    v34 = (uint64_t *)*v33;
    if (*v33)
    {
      v35 = *v34;
      if (v32 == *v34)
      {
LABEL_51:
        *((_BYTE *)this + (int)v23 + 65844) = 1;
        v29 = v126;
        v30 = v127;
        goto LABEL_52;
      }
    }
    else
    {
      v35 = 0;
    }
    atomic_store(1u, (unsigned __int8 *)(v31 + 12));
    v42 = *(_DWORD *)(v31 + 8);
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 56))(v32);
    if ((_DWORD)v16 != *((_DWORD *)v7 + 8)
      || (v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 64))(v32),
          (_DWORD)v16 != *(_DWORD *)(*((_QWORD *)v7 + 26) + 88)))
    {
LABEL_44:
      v27 = (char *)this + (int)v23 + 65844;
      if (*v27)
      {
        v51 = **(NSObject ***)(Phase::Logger::GetInstancePtr((Phase::Logger *)v16) + 144);
        v16 = os_log_type_enabled(v51, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v16)
        {
          v52 = *((_QWORD *)v125 + 6);
          v53 = *((_QWORD *)this + (int)v23 + 8221);
          *(_DWORD *)buf = v124.i32[0];
          v54 = "Invalid parameter value";
          if (!v32)
            v54 = "Buffer is nullptr";
          *(_QWORD *)&buf[4] = "ConvolverVoicePool.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 362;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v52;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v125;
          v133 = 2048;
          *(_QWORD *)v134 = v53;
          *(_WORD *)&v134[8] = 2080;
          *(_QWORD *)&v134[10] = v54;
          v39 = v51;
          v40 = "%25s:%-5d %s(%p):%llu failed to swap buffer with VoicePoolErr \"%s\". Output will be silent.";
          v41 = 58;
LABEL_58:
          _os_log_impl(&dword_2164CC000, v39, OS_LOG_TYPE_ERROR, v40, buf, v41);
        }
LABEL_59:
        *v27 = 0;
      }
LABEL_60:
      if (*(int *)(*((_QWORD *)v7 + 26) + 88) >= 1)
      {
        v59 = 0;
        do
        {
          v60 = *(_QWORD *)(*((_QWORD *)v7 + 5) + 8 * v59);
          vDSP_vclr((float *)(*(_QWORD *)(v60 + 16) + 4 * *(_DWORD *)(v60 + 24) * (int)v23), 1, v25);
          ++v59;
        }
        while (v59 < *(int *)(*((_QWORD *)v7 + 26) + 88));
      }
      goto LABEL_109;
    }
    v43 = (char *)this + 8 * (int)v23 + 65672;
    if (*(_QWORD *)v43)
      atomic_store(0, (unsigned __int8 *)(*(_QWORD *)v43 + 12));
    *(_QWORD *)v43 = *v33;
    *v33 = v31;
    memset(buf, 0, 32);
    *(_QWORD *)&buf[8 * (int)v23] = v32;
    LODWORD(v135) = 1;
    LODWORD(v136) = 3;
    v16 = Phase::DspLayer::VoicePool::ExternalCallbackWithMessage(*((_QWORD *)v7 + 26), 0, v120, 1 << v23, (unsigned int *)&v135, buf);
    if (v35)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 104))(v32, v35);
      v44 = v42 + 127;
      if (v42 >= 0)
        v44 = v42;
      v45 = (v44 & 0xFFFFFF80) + 128;
      if ((v42 & 0x7F) == 0)
        v45 = v42;
      if ((v45 & 0x7F) != 0)
        __assert_rtn("SwapBufferInternal", "ConvolverVoicePool.cpp", 314, "(numCrossfadeFrames % ConvolverVoicePool::kUsedBlockSize) == 0");
      v46 = (char *)this + 4 * (int)v23;
      *((_DWORD *)v46 + 16426) = 1065353216;
      *((float *)v46 + 16430) = -1.0 / (float)(int)(v45 - 1);
      *((_DWORD *)v46 + 16434) = v45;
      v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 72))(v32);
      v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
      if (v48 <= (*(int (**)(uint64_t))(*(_QWORD *)v32 + 56))(v32))
      {
        v50 = 0;
      }
      else
      {
        v49 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 80))(v32, (v47 - 1));
        v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 56))(v49);
      }
      *((_DWORD *)this + (int)v23 + 16438) = v50;
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
    }
    goto LABEL_51;
  }
}

uint64_t Phase::DspLayer::NUPConvolverSlice::OnStop(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(result + 8 * a4 + 65640);
  if (v4)
    atomic_store(0, (unsigned __int8 *)(v4 + 12));
  v5 = *(_QWORD *)(result + 8 * a4 + 65672);
  if (v5)
    atomic_store(0, (unsigned __int8 *)(v5 + 12));
  return result;
}

float Phase::DspLayer::NUPConvolverSlice::CopyVoiceState(Phase::DspLayer::NUPConvolverSlice *this, Phase::DspLayer::VoicePoolSlice *a2, int a3, int a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int *v13;
  int v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _DWORD *v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  float result;
  char *v32;

  v7 = (uint64_t *)((char *)a2 + 65584);
  v8 = (uint64_t *)((char *)this + 65584);
  v9 = a3;
  v10 = *((unsigned int *)a2 + a3 + 4);
  v11 = a4;
  *((_DWORD *)this + a4 + 4) = v10;
  if ((int)v10 >= 1)
  {
    v12 = (_DWORD *)((char *)this + 4 * a4 + 48);
    v13 = (int *)((char *)a2 + 4 * a3 + 48);
    do
    {
      *(v12 - 4) = *(v13 - 4);
      v14 = *v13;
      v13 += 8;
      *v12 = v14;
      v12 += 8;
      --v10;
    }
    while (v10);
  }
  v15 = (char *)a2 + 4 * a3;
  v16 = *((int *)v15 + 16400);
  memcpy((void *)(*((_QWORD *)this + 8202) + 4 * *((_DWORD *)this + 16406) * a4), (const void *)(*((_QWORD *)a2 + 8202) + 4 * *((_DWORD *)a2 + 16406) * a3), 4 * v16);
  v17 = (char *)this + 4 * v11;
  *((_DWORD *)v17 + 16400) = v16;
  v18 = *((unsigned int *)v15 + 8200);
  *((_DWORD *)v17 + 8200) = v18;
  if ((int)v18 >= 1)
  {
    v19 = v17 + 32832;
    v20 = (int *)(v15 + 32832);
    do
    {
      *(v19 - 4) = *(v20 - 4);
      v21 = *v20;
      v20 += 8;
      *v19 = v21;
      v19 += 8;
      --v18;
    }
    while (v18);
  }
  if (*(int *)(v8[27] + 88) >= 1)
  {
    v22 = 0;
    do
    {
      v23 = *v7;
      v24 = *v8;
      *(_DWORD *)(*(_QWORD *)(v8[1] + 8 * v22) + 4 * v11) = *(_DWORD *)(*(_QWORD *)(v7[1] + 8 * v22) + 4 * v9);
      *(_DWORD *)(*(_QWORD *)(v24 + 8 * v22) + 4 * v11) = *(_DWORD *)(*(_QWORD *)(v23 + 8 * v22) + 4 * v9);
      v25 = *(_QWORD *)(v8[6] + 8 * v22);
      v26 = *(_QWORD *)(v7[6] + 8 * v22);
      memcpy((void *)(*(_QWORD *)(v25 + 16) + 4 * *(_DWORD *)(v25 + 24) * a4), (const void *)(*(_QWORD *)(v26 + 16) + 4 * *(_DWORD *)(v26 + 24) * a3), 4 * *(int *)(v25 + 24));
      *(_DWORD *)(v25 + 4 * v11) = *(_DWORD *)(v26 + 4 * v9);
      ++v22;
    }
    while (v22 < *(int *)(v8[27] + 88));
  }
  v27 = (_QWORD *)((char *)a2 + 8 * v9);
  v28 = (_QWORD *)((char *)this + 8 * v11);
  v28[8205] = v27[8205];
  v28[8209] = v27[8209];
  v29 = (char *)a2 + 4 * v9;
  v30 = (char *)this + 4 * v11;
  *((_DWORD *)v30 + 16426) = *((_DWORD *)v29 + 16426);
  result = *((float *)v29 + 16430);
  *((float *)v30 + 16430) = result;
  *((_DWORD *)v30 + 16434) = *((_DWORD *)v29 + 16434);
  *((_DWORD *)v30 + 16438) = *((_DWORD *)v29 + 16438);
  v28[8221] = v27[8221];
  v28[8226] = v27[8226];
  v32 = (char *)this + v11;
  v32[65844] = *((_BYTE *)a2 + v9 + 65844);
  v32[65848] = *((_BYTE *)a2 + v9 + 65848);
  v32[65840] = *((_BYTE *)a2 + v9 + 65840);
  return result;
}

unint64_t Phase::DspLayer::NUPConvolverSlice::GetInput(Phase::DspLayer::NUPConvolverSlice *this, int a2, int a3)
{
  if (a2)
    return 0xFFFFFFFF00000008;
  else
    return (unint64_t)*((unsigned int *)this + a3 + 8204) << 32;
}

uint64_t Phase::DspLayer::NUPConvolverSlice::AddInput(Phase::DspLayer::NUPConvolverSlice *this, int a2, int a3, int a4, float a5)
{
  uint64_t result;
  char *v7;
  uint64_t v8;
  char *v9;

  if (a2)
    return 8;
  v7 = (char *)this + 16;
  v8 = *((int *)this + a3 + 4);
  if ((int)v8 > 1023)
    return 6;
  result = 0;
  v9 = (char *)this + 32 * v8 + 4 * a3;
  *((_DWORD *)v9 + 8) = a4;
  *((float *)v9 + 12) = a5;
  *(_DWORD *)&v7[4 * a3] = v8 + 1;
  return result;
}

uint64_t Phase::DspLayer::NUPConvolverSlice::RemoveInput(Phase::DspLayer::NUPConvolverSlice *this, int a2, int a3, int a4)
{
  uint64_t result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *i;
  uint64_t v9;
  char *v10;

  if (a2)
    return 8;
  v5 = (char *)this + 16;
  v6 = *((unsigned int *)this + a3 + 4);
  if ((int)v6 < 1)
    return 7;
  v7 = 0;
  for (i = (_DWORD *)((char *)this + 4 * a3 + 32); *i != a4; i += 8)
  {
    if (v6 == ++v7)
      return 7;
  }
  if ((v7 & 0x80000000) != 0)
    return 7;
  v9 = (v6 - 1);
  if ((int)v9 > (int)v7)
  {
    v10 = (char *)this + 32 * v9 + 4 * a3;
    *i = *((_DWORD *)v10 + 8);
    i[4] = *((_DWORD *)v10 + 12);
  }
  result = 0;
  *(_DWORD *)&v5[4 * a3] = v9;
  return result;
}

uint64_t Phase::DspLayer::NUPConvolverSlice::SetInputGain(Phase::DspLayer::NUPConvolverSlice *this, int a2, int a3, int a4, float a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  float *i;

  if (a2)
    return 8;
  v6 = *((unsigned int *)this + a3 + 4);
  if ((int)v6 < 1)
    return 7;
  v7 = 0;
  for (i = (float *)((char *)this + 4 * a3 + 48); *((_DWORD *)i - 4) != a4; i += 8)
  {
    if (v6 == ++v7)
      return 7;
  }
  if ((v7 & 0x80000000) != 0)
    return 7;
  result = 0;
  *i = a5;
  return result;
}

uint64_t Phase::DspLayer::NUPConvolverSlice::ClearInputs(Phase::DspLayer::NUPConvolverSlice *this, int a2)
{
  *((_DWORD *)this + a2 + 4) = 0;
  return 0;
}

uint64_t Phase::DspLayer::NUPConvolverSlice::GetMaximumInputConnectionCount(Phase::DspLayer::NUPConvolverSlice *this, int a2)
{
  return (a2 == 0) << 10;
}

unint64_t Phase::DspLayer::NUPConvolverSlice::GetOutput(Phase::DspLayer::NUPConvolverSlice *this, int a2, int a3)
{
  if (*(_DWORD *)(*((_QWORD *)this + 8225) + 88) <= a2)
    return 0xFFFFFFFF00000008;
  else
    return (unint64_t)*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 8198) + 8 * a2) + 4 * a3) << 32;
}

uint64_t Phase::DspLayer::NUPConvolverSlice::SetOutput(Phase::DspLayer::NUPConvolverSlice *this, int a2, int a3, int a4)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)((char *)this + 65584);
  if (*(_DWORD *)(*((_QWORD *)this + 8225) + 88) <= a2)
    return 8;
  result = 0;
  *(_DWORD *)(*(_QWORD *)(*v4 + 8 * a2) + 4 * a3) = a4;
  return result;
}

uint64_t Phase::DspLayer::NUPConvolverSlice::SetBuffer(Phase::DspLayer::NUPConvolverSlice *this, int a2, int a3, void *a4)
{
  *((_QWORD *)this + a3 + 8226) = a4;
  return 0;
}

void std::__function::__func<Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(int)::$_0,std::allocator<Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(int)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_DWORD *std::__function::__func<Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(int)::$_0,std::allocator<Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(int)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24D577D88;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(int)::$_0,std::allocator<Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(int)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24D577D88;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

int *std::__function::__func<Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(int)::$_0,std::allocator<Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(int)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()(uint64_t a1, Phase::DspLayer::VoiceEngine **a2, int *a3)
{
  Phase::DspLayer::VoiceEngine *v4;
  int v5;
  int *v6;
  int v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int *v18;

  v4 = *a2;
  v5 = *a3;
  v6 = (int *)operator new();
  v7 = *(_DWORD *)(a1 + 8);
  Phase::DspLayer::VoicePool::VoicePool((Phase::DspLayer::VoicePool *)v6, "ConvolverVoicePool", v4, v5, 65856);
  *(_QWORD *)v6 = &off_24D577C90;
  v6[22] = v7;
  v8 = v6;
  if (v6[10] >= 1)
  {
    v9 = 0;
    v18 = v8;
    do
    {
      v10 = *((_QWORD *)v8 + 4);
      v11 = *((_QWORD *)v8 + 3) + v8[4] * (uint64_t)v9;
      *(_QWORD *)v11 = &off_24D577CB0;
      *(_QWORD *)(v11 + 8) = 0;
      v12 = v8;
      bzero((void *)(v11 + 16), 0x10030uLL);
      v13 = malloc_type_malloc(0x800uLL, 0x100004052888210uLL);
      *(_QWORD *)(v11 + 65616) = v13;
      *(_QWORD *)(v11 + 65624) = 128;
      *(_OWORD *)(v11 + 65600) = 0u;
      bzero(v13, 0x800uLL);
      *(_QWORD *)(v11 + 65632) = 0;
      *(_OWORD *)(v11 + 65808) = 0u;
      *(_OWORD *)(v11 + 65824) = 0u;
      *(_BYTE *)(v11 + 65840) = 1;
      *(_WORD *)(v11 + 65841) = 0;
      *(_QWORD *)(v11 + 65843) = 0x10000000100;
      *(_BYTE *)(v11 + 65851) = 0;
      *(_QWORD *)(v11 + 65800) = v12;
      *(_QWORD *)(v11 + 65632) = malloc_type_malloc(8 * v12[22], 0x2004093837F09uLL);
      *(_QWORD *)(v11 + 65584) = malloc_type_malloc(8 * *(int *)(*(_QWORD *)(v11 + 65800) + 88), 0x10040436913F5uLL);
      *(_QWORD *)(v11 + 65592) = malloc_type_malloc(8 * *(int *)(*(_QWORD *)(v11 + 65800) + 88), 0x10040436913F5uLL);
      if (*(int *)(*(_QWORD *)(v11 + 65800) + 88) >= 1)
      {
        v14 = 0;
        do
        {
          v15 = operator new();
          v16 = malloc_type_malloc(0x800uLL, 0x100004052888210uLL);
          *(_QWORD *)(v15 + 8) = 0;
          *(_QWORD *)(v15 + 16) = v16;
          *(_DWORD *)(v15 + 24) = 128;
          *(_QWORD *)v15 = 0;
          bzero(v16, 0x800uLL);
          *(_QWORD *)(*(_QWORD *)(v11 + 65632) + 8 * v14) = v15;
          *(_QWORD *)(*(_QWORD *)(v11 + 65584) + 8 * v14) = malloc_type_malloc(0x10uLL, 0x100004052888210uLL);
          *(_QWORD *)(*(_QWORD *)(v11 + 65592) + 8 * v14++) = malloc_type_malloc(0x10uLL, 0x100004052888210uLL);
        }
        while (v14 < *(int *)(*(_QWORD *)(v11 + 65800) + 88));
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v10);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, v10);
      ++v9;
      v8 = v18;
    }
    while (v9 < v18[10]);
  }
  return v8;
}

void sub_216502B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Phase::DspLayer::VoicePool *a10)
{
  uint64_t v10;

  MEMORY[0x2199F9D70](v10, 0x10F1C400BE8F744);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::AmbientSubmix::AmbientSubmix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Phase::Logger *a6, uint64_t a7, uint64_t a8)
{
  Phase::Logger *v10;
  uint64_t *v11;
  const void *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t ChannelMask;
  int **v16;
  Phase::Logger *v17;
  int *v18;
  int v19;
  __int32 v20;
  uint8x8_t v21;
  uint64_t NumNonLFEChannels;
  void *v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Phase::Logger *v57;
  uint64_t v58;
  float *v59;
  float v60;
  float v61;
  float v62;
  float v63;
  __float2 v64;
  __float2 v65;
  float *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  Phase::Logger *v70;
  Phase::Logger *InstancePtr;
  NSObject *v72;
  unint64_t v73;
  const char *v74;
  void *v75;
  void *v76;
  int v77;
  const char *v78;
  void *v79;
  double v80;
  double v81;
  double v82;
  double v83;
  NSObject *v85;
  std::runtime_error *v86;
  NSObject *v87;
  std::runtime_error *v88;
  NSObject *v89;
  std::logic_error *exception;
  NSObject *v91;
  std::logic_error *v92;
  NSObject *v93;
  std::logic_error *v94;
  NSObject *v95;
  void *v96;
  void *v97;
  std::__shared_weak_count *v98;
  char v99;
  void *v100;
  _BYTE *v101;
  void *__p[6];
  __int16 v103;
  const char *v104;
  __int16 v105;
  void *v106;
  __int16 v107;
  double v108;
  __int16 v109;
  double v110;
  __int16 v111;
  double v112;
  __int16 v113;
  double v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  v10 = Phase::Controller::Submix::Submix((Phase::Logger *)a1, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72), *(_DWORD *)(a2 + 80), a3, a4, a5, a6, a7, a8);
  *(_QWORD *)v10 = &off_24D577DD0;
  *((_QWORD *)v10 + 40) = *(_QWORD *)a2;
  v11 = (uint64_t *)((char *)v10 + 328);
  *((_QWORD *)v10 + 49) = 0;
  *(_OWORD *)((char *)v10 + 360) = 0u;
  *(_OWORD *)((char *)v10 + 376) = 0u;
  *(_OWORD *)((char *)v10 + 328) = 0u;
  *(_OWORD *)((char *)v10 + 344) = 0u;
  v12 = *(const void **)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  memset(__p, 0, 24);
  v14 = std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(__p, v12, v13, v13 - (_QWORD)v12);
  ChannelMask = Phase::Controller::AmbientSubmix::GetChannelMask((uint64_t)v14, (Phase::Logger *)(a2 + 40));
  v16 = (int **)(a1 + 400);
  Phase::ChannelLayout::ReduceLayout((uint64_t)__p, ChannelMask, (std::vector<char> *)(a1 + 400));
  v17 = (Phase::Logger *)__p[0];
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)(a1 + 424) = xmmword_2166F7280;
  if (!*(_QWORD *)(a1 + 320))
  {
    v89 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v17) + 384));
    if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "CvmAmbientSubmix.mm";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 60;
      WORD1(__p[2]) = 2048;
      *(void **)((char *)&__p[2] + 4) = (void *)a1;
      _os_log_impl(&dword_2164CC000, v89, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [Geometry::InvalidEntityHandle == mListenerEntityHandle is true]: \"Ambient Submix@%p: Error: invalid Listener Handle\"", (uint8_t *)__p, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Ambient Submix@%p: Error: invalid Listener Handle");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  v18 = *v16;
  v19 = **v16;
  if (v19 == 0x10000)
  {
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)v18[1]);
    v21.i16[0] = vaddlv_u8(v21);
    v20 = v21.i32[0];
  }
  else if (v19)
  {
    v20 = (unsigned __int16)**v16;
  }
  else
  {
    v20 = v18[2];
  }
  if (!v20)
  {
    v91 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v17) + 384));
    if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "CvmAmbientSubmix.mm";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 65;
      WORD1(__p[2]) = 2048;
      *(void **)((char *)&__p[2] + 4) = (void *)a1;
      _os_log_impl(&dword_2164CC000, v91, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [channelCount == 0 is true]: \"Ambient Submix@%p: Error: Input Channel Layout has no channels\"", (uint8_t *)__p, 0x1Cu);
    }
    v92 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v92, "Ambient Submix@%p: Error: Input Channel Layout has no channels");
    v92->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  NumNonLFEChannels = Phase::ChannelLayout::GetNumNonLFEChannels((Phase::Logger *)(a1 + 400));
  if ((NumNonLFEChannels & 0x80000000) != 0)
    goto LABEL_84;
  if (!(_DWORD)NumNonLFEChannels)
  {
    v93 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)NumNonLFEChannels)
                                                     + 384));
    if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "CvmAmbientSubmix.mm";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 71;
      WORD1(__p[2]) = 2048;
      *(void **)((char *)&__p[2] + 4) = (void *)a1;
      _os_log_impl(&dword_2164CC000, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [fullRangeChannelCount == 0 is true]: \"Ambient Submix@%p: Error: Input Channel Layout doesn't contain any fullrange channels\"", (uint8_t *)__p, 0x1Cu);
    }
    v94 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v94, "Ambient Submix@%p: Error: Input Channel Layout doesn't contain any fullrange channels");
LABEL_103:
    v94->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  if (v20 != (_DWORD)NumNonLFEChannels)
  {
    v95 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)NumNonLFEChannels)
                                                     + 384));
    if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "CvmAmbientSubmix.mm";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 75;
      WORD1(__p[2]) = 2048;
      *(void **)((char *)&__p[2] + 4) = (void *)a1;
      _os_log_impl(&dword_2164CC000, v95, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [channelCount != fullRangeChannelCount is true]: \"Ambient Submix@%p: Error: Input Channel Layout contains LFE channels\"", (uint8_t *)__p, 0x1Cu);
    }
    v94 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v94, "Ambient Submix@%p: Error: Input Channel Layout contains LFE channels");
    goto LABEL_103;
  }
  Phase::ChannelLayout::GetChannelLayoutChannelDescriptions((char **)(a1 + 400), (uint64_t *)&v100);
  v24 = v100;
  v23 = v101;
  v25 = 0xCCCCCCCCCCCCCCCDLL * ((v101 - (_BYTE *)v100) >> 2);
  v26 = *(_QWORD *)(a1 + 352);
  v27 = *(_QWORD *)(a1 + 360);
  v28 = (v27 - v26) >> 3;
  if (v25 <= v28)
  {
    if (v25 >= v28)
      goto LABEL_30;
    v42 = v26 + 0x6666666666666668 * ((v101 - (_BYTE *)v100) >> 2);
    goto LABEL_27;
  }
  v29 = v25 - v28;
  v30 = *(_QWORD *)(a1 + 368);
  if (v25 - v28 <= (v30 - v27) >> 3)
  {
    bzero(*(void **)(a1 + 360), 8 * v29);
    v42 = v27 + 8 * v29;
LABEL_27:
    *(_QWORD *)(a1 + 360) = v42;
    goto LABEL_30;
  }
  if (v25 >> 61)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  v31 = v30 - v26;
  v32 = v31 >> 2;
  if (v31 >> 2 <= v25)
    v32 = 0xCCCCCCCCCCCCCCCDLL * ((v101 - (_BYTE *)v100) >> 2);
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
    v33 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v33 = v32;
  v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a1 + 368, v33);
  v96 = v23;
  v35 = *(char **)(a1 + 352);
  v36 = *(char **)(a1 + 360);
  v37 = &v34[8 * v28];
  v39 = &v34[8 * v38];
  bzero(v37, 8 * v29);
  v40 = &v37[8 * v29];
  while (v36 != v35)
  {
    v41 = *((_QWORD *)v36 - 1);
    v36 -= 8;
    *((_QWORD *)v37 - 1) = v41;
    v37 -= 8;
  }
  *(_QWORD *)(a1 + 352) = v37;
  *(_QWORD *)(a1 + 360) = v40;
  *(_QWORD *)(a1 + 368) = v39;
  v23 = v96;
  if (v35)
    operator delete(v35);
LABEL_30:
  v43 = *(_QWORD *)(a1 + 328);
  v44 = *(_QWORD *)(a1 + 336);
  v45 = 0xAAAAAAAAAAAAAAABLL * ((v44 - v43) >> 2);
  v46 = v25 - v45;
  if (v25 <= v45)
  {
    if (v25 >= v45)
      goto LABEL_46;
    v54 = v43 + 12 * v25;
    goto LABEL_45;
  }
  v47 = *(_QWORD *)(a1 + 344);
  if (0xAAAAAAAAAAAAAAABLL * ((v47 - v44) >> 2) >= v46)
  {
    bzero(*(void **)(a1 + 336), 12 * ((12 * v46 - 12) / 0xC) + 12);
    v54 = v44 + 12 * ((12 * v46 - 12) / 0xC) + 12;
LABEL_45:
    *(_QWORD *)(a1 + 336) = v54;
    goto LABEL_46;
  }
  if (v25 > 0x1555555555555555)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  v48 = 0xAAAAAAAAAAAAAAABLL * ((v47 - v43) >> 2);
  v49 = 2 * v48;
  if (2 * v48 <= v25)
    v49 = v25;
  if (v48 >= 0xAAAAAAAAAAAAAAALL)
    v50 = 0x1555555555555555;
  else
    v50 = v49;
  __p[4] = (void *)(a1 + 344);
  v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Vector<float,3ul>>>(a1 + 344, v50);
  v52 = &v51[12 * v45];
  __p[0] = v51;
  __p[1] = v52;
  __p[3] = &v51[12 * v53];
  bzero(v52, 12 * ((12 * v46 - 12) / 0xC) + 12);
  __p[2] = &v52[12 * ((12 * v46 - 12) / 0xC) + 12];
  std::vector<Phase::Vector<float,3ul>>::__swap_out_circular_buffer(v11, __p);
  if (__p[2] != __p[1])
    __p[2] = (char *)__p[1] + ((char *)__p[2] - (char *)__p[1] - 12) % 0xCuLL;
  if (__p[0])
    operator delete(__p[0]);
LABEL_46:
  if (v23 != v24)
  {
    v55 = 0;
    if (v25 <= 1)
      v56 = 1;
    else
      v56 = v25;
    while (1)
    {
      v57 = (Phase::Logger *)Phase::Geometry::CreateEntity<Phase::Geometry::Source>(0, &v97);
      if (!v97)
      {
        v85 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v57) + 384));
        if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p[0]) = 136315650;
          *(void **)((char *)__p + 4) = "CvmAmbientSubmix.mm";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 95;
          WORD1(__p[2]) = 2048;
          *(void **)((char *)&__p[2] + 4) = (void *)a1;
          _os_log_impl(&dword_2164CC000, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!sourceEntityPtr is true]: \"Ambient Submix@%p: Error: Could not create a Source Entity\"", (uint8_t *)__p, 0x1Cu);
        }
        v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v86, "Ambient Submix@%p: Error: Could not create a Source Entity");
      }
      if (*((float *)v97 + 4) != 0.0
        || *((float *)v97 + 5) != 0.0
        || *((float *)v97 + 6) != 0.0
        || *((float *)v97 + 7) != 1.0
        || *((float *)v97 + 8) != 0.0
        || *((float *)v97 + 9) != 0.0
        || *((float *)v97 + 10) != 0.0
        || *((float *)v97 + 11) != 1.0)
      {
        break;
      }
      v58 = Phase::Geometry::SystemScheduler::AddToDatabase(*(_QWORD *)(a1 + 240) + 2352, (uint64_t *)&v97);
      if (!v58)
      {
        v87 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
        if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p[0]) = 136315650;
          *(void **)((char *)__p + 4) = "CvmAmbientSubmix.mm";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 103;
          WORD1(__p[2]) = 2048;
          *(void **)((char *)&__p[2] + 4) = (void *)a1;
          _os_log_impl(&dword_2164CC000, v87, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [Phase::Geometry::InvalidEntityHandle == sourceEntityHandle is true]: \"Ambient Submix@%p: Error: Could not add Source Entity to Geometry Layer\"", (uint8_t *)__p, 0x1Cu);
        }
        v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v88, "Ambient Submix@%p: Error: Could not add Source Entity to Geometry Layer");
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * v55) = v58;
      Phase::Geometry::SystemScheduler::AddChild(*(_QWORD *)(a1 + 240) + 2352, *(_QWORD *)(*(_QWORD *)(a1 + 240) + 1456), v58);
      v59 = (float *)((char *)v100 + 20 * v55);
      v60 = v59[3];
      v61 = (float)((float)(180.0 - v59[2]) - (float)(floorf((float)(180.0 - v59[2]) / 360.0) * 360.0)) + 0.0;
      if (v61 >= 360.0)
        v61 = nextafterf(360.0, 0.0);
      v62 = (float)(v60 * -0.017453) + 1.5708;
      v63 = v61 * 0.017453;
      v64 = __sincosf_stret(v62);
      v65 = __sincosf_stret(v63);
      v66 = (float *)(*v11 + 12 * v55);
      *v66 = v64.__sinval * v65.__sinval;
      v66[1] = v64.__cosval;
      v66[2] = v64.__sinval * v65.__cosval;
      v67 = v98;
      if (v98)
      {
        p_shared_owners = (unint64_t *)&v98->__shared_owners_;
        do
          v69 = __ldaxr(p_shared_owners);
        while (__stlxr(v69 - 1, p_shared_owners));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      if (++v55 == v56)
        goto LABEL_68;
    }
LABEL_84:
    std::terminate();
  }
LABEL_68:
  v70 = (Phase::Logger *)Phase::Controller::AmbientSubmix::SetOrientation(a1, (float32x4_t *)(a2 + 24), 1);
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(v70);
  if (*((_BYTE *)InstancePtr + 1552))
  {
    v72 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                        + 384)));
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      v73 = *(char *)(a1 + 72);
      if (v73 > 7)
        v74 = "<not found>";
      else
        v74 = off_24D577F70[v73];
      v75 = *(void **)(a1 + 32);
      v76 = *(void **)(a1 + 16);
      v77 = *(unsigned __int8 *)(a1 + 8);
      Phase::ChannelLayout::GetStringDescription((unsigned int **)(a1 + 400));
      v78 = "false";
      if (!v77)
        v78 = "true";
      if (v99 >= 0)
        v79 = &v97;
      else
        v79 = v97;
      v80 = *(float *)(a1 + 424);
      v81 = *(float *)(a1 + 428);
      v82 = *(float *)(a1 + 432);
      v83 = *(float *)(a1 + 436);
      LODWORD(__p[0]) = 136317698;
      *(void **)((char *)__p + 4) = "CvmAmbientSubmix.mm";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 134;
      WORD1(__p[2]) = 2048;
      *(void **)((char *)&__p[2] + 4) = v75;
      WORD2(__p[3]) = 2048;
      *(void **)((char *)&__p[3] + 6) = v76;
      HIWORD(__p[4]) = 2080;
      __p[5] = (void *)v74;
      v103 = 2080;
      v104 = v78;
      v105 = 2080;
      v106 = v79;
      v107 = 2048;
      v108 = v80;
      v109 = 2048;
      v110 = v81;
      v111 = 2048;
      v112 = v82;
      v113 = 2048;
      v114 = v83;
      _os_log_impl(&dword_2164CC000, v72, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu) - created (type: ambient, state: %s, sleep transitions enabled: %s, channel layout: %s, orientation: [%f, %f, %f, %f])", (uint8_t *)__p, 0x6Cu);
      if (v99 < 0)
        operator delete(v97);
    }

  }
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
  return a1;
}

void sub_216503770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25)
{
  Phase::Controller::Submix *v25;
  void **v26;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  v28 = *a16;
  if (*a16)
  {
    *((_QWORD *)v25 + 51) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)v25 + 47);
  if (v29)
  {
    *((_QWORD *)v25 + 48) = v29;
    operator delete(v29);
  }
  v30 = *a15;
  if (*a15)
  {
    *((_QWORD *)v25 + 45) = v30;
    operator delete(v30);
  }
  v31 = *v26;
  if (*v26)
  {
    *((_QWORD *)v25 + 42) = v31;
    operator delete(v31);
  }
  Phase::Controller::Submix::~Submix(v25);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::AmbientSubmix::GetChannelMask(uint64_t a1, Phase::Logger *a2)
{
  uint64_t v3;
  unsigned __int32 i;
  int *v5;
  int v6;
  unsigned int v7;
  uint8x8_t v8;
  _BOOL4 IsChannelLFE;
  uint64_t v10;

  v3 = 0;
  for (i = 0; ; ++i)
  {
    v5 = *(int **)a2;
    v6 = **(_DWORD **)a2;
    if (v6 == 0x10000)
    {
      v8 = (uint8x8_t)vcnt_s8((int8x8_t)v5[1]);
      v8.i16[0] = vaddlv_u8(v8);
      v7 = v8.i32[0];
    }
    else
    {
      v7 = v6 ? (unsigned __int16)**(_DWORD **)a2 : v5[2];
    }
    if (i >= v7)
      break;
    IsChannelLFE = Phase::ChannelLayout::IsChannelLFE(a2, i);
    v10 = 1 << i;
    if (IsChannelLFE)
      v10 = 0;
    v3 |= v10;
  }
  return v3;
}

uint64_t Phase::Controller::AmbientSubmix::SetOrientation(uint64_t a1, float32x4_t *a2, int a3)
{
  float v5;
  float *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  float32x4_t v25;

  _Q0 = *a2;
  _Q1 = vmulq_f32(_Q0, _Q0);
  v5 = 1.0 - sqrtf((float)(vaddv_f32(*(float32x2_t *)_Q1.f32) + _Q1.f32[2]) + _Q1.f32[3]);
  if (v5 < 0.0)
    v5 = -v5;
  if (v5 > 0.1)
    std::terminate();
  _S2 = HIDWORD(*(unsigned __int128 *)a2);
  _S3 = a2->i64[1];
  __asm
  {
    FMLA            S1, S3, V0.S[2]
    FMLA            S1, S2, V0.S[3]
  }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  v25 = vdivq_f32(_Q0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  v14 = (float *)(a1 + 424);
  result = Phase::IsNearlyEqual<float>(v25.f32, (float *)(a1 + 424), 0.00000011921);
  if (!(_DWORD)result || a3)
  {
    *(float32x4_t *)v14 = v25;
    v16 = *(_QWORD *)(a1 + 328);
    if (*(_QWORD *)(a1 + 336) != v16)
    {
      v17 = 0;
      v18 = 0;
      do
      {
        Phase::operator*<float>(v14, (float *)(v16 + v17), (float *)&v23);
        v19 = xmmword_2166F7280;
        v20 = v23;
        v21 = v24;
        v22 = 1065353216;
        result = Phase::Geometry::SystemScheduler::UpdateTransform(*(_QWORD *)(a1 + 240) + 2352, *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * v18++), &v19);
        v16 = *(_QWORD *)(a1 + 328);
        v17 += 12;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 336) - v16) >> 2) > v18);
    }
  }
  return result;
}

void Phase::Controller::AmbientSubmix::~AmbientSubmix(Phase::Controller::AmbientSubmix *this)
{
  uint64_t *v2;
  uint64_t *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  Phase::Controller::AmbientSubmix *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 30))
  {
    v2 = (uint64_t *)*((_QWORD *)this + 44);
    v3 = (uint64_t *)*((_QWORD *)this + 45);
    while (v2 != v3)
    {
      if (*v2)
      {
        Phase::Geometry::SystemScheduler::RemoveChild(*((_QWORD *)this + 30) + 2352, *(_QWORD *)(*((_QWORD *)this + 30) + 1456), *v2);
        Phase::Geometry::SystemScheduler::ReleaseEntity(*((_QWORD *)this + 30) + 2352, *v2);
      }
      ++v2;
    }
  }
  else
  {
    v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 384));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315650;
      v10 = "CvmAmbientSubmix.mm";
      v11 = 1024;
      v12 = 166;
      v13 = 2048;
      v14 = this;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Ambient Submix@%p: Error: Could not get a pointer to the Geometry System", (uint8_t *)&v9, 0x1Cu);
    }
  }
  Phase::Controller::AmbientSubmix::Destroy(this);
  if (*((_BYTE *)this + 72))
    Phase::Controller::DVM::VoiceGraph::RemoveSubmix(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 28) + 72), *((_QWORD *)this + 2), *((_QWORD *)this + 3));
  v5 = (void *)*((_QWORD *)this + 50);
  if (v5)
  {
    *((_QWORD *)this + 51) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 47);
  if (v6)
  {
    *((_QWORD *)this + 48) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 44);
  if (v7)
  {
    *((_QWORD *)this + 45) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 41);
  if (v8)
  {
    *((_QWORD *)this + 42) = v8;
    operator delete(v8);
  }
  Phase::Controller::Submix::~Submix(this);
}

{
  Phase::Controller::AmbientSubmix::~AmbientSubmix(this);
  JUMPOUT(0x2199F9D70);
}

void sub_216503C50(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *Phase::Controller::AmbientSubmix::Destroy(_QWORD *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v1 = (uint64_t)this;
  v2 = (uint64_t *)this[47];
  v3 = (uint64_t *)this[48];
  while (v2 != v3)
  {
    if (*v2)
    {
      v4 = v2[1];
    }
    else
    {
      v4 = v2[1];
      if (!v4)
        goto LABEL_8;
    }
    v5 = *(_QWORD *)(v1 + 232);
    v6[0] = *v2;
    v6[1] = v4;
    this = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(v5 + 40), v6);
    if (this)
      this = Phase::Controller::SubmixSystem::Destroy(*(Phase::Logger **)(v1 + 232), *v2, v2[1]);
LABEL_8:
    v2 += 2;
  }
  *(_QWORD *)(v1 + 56) |= 0x28uLL;
  return this;
}

uint64_t Phase::Controller::AmbientSubmix::IsPrepared(Phase::Controller::AmbientSubmix *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *i;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t Submix;
  _QWORD v10[2];

  v1 = (uint64_t *)*((_QWORD *)this + 47);
  v2 = (uint64_t *)*((_QWORD *)this + 48);
  if (v1 == v2)
    return 0;
  for (i = v1 + 1; ; i += 2)
  {
    v5 = i - 1;
    if (*(i - 1))
    {
      v6 = *i;
    }
    else
    {
      v6 = *i;
      if (!*i)
        return 0;
    }
    v7 = *((_QWORD *)this + 29);
    v10[0] = *(i - 1);
    v10[1] = v6;
    result = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(v7 + 40), v10);
    if (!result)
      break;
    Submix = Phase::Controller::SubmixSystem::GetSubmix(*((Phase::Logger **)this + 29), *v5, *i);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)Submix + 104))(Submix) & 1) == 0)
      return 0;
    if (v5 + 2 == v2)
      return 1;
  }
  return result;
}

void Phase::Controller::AmbientSubmix::Update(Phase::Controller::AmbientSubmix *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA;
  BOOL v9;
  _QWORD *v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char **v17;
  _QWORD *v18;
  _QWORD *v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  int v48;
  __int128 v49;

  if (*((_QWORD *)this + 47) != *((_QWORD *)this + 48))
    goto LABEL_48;
  v4 = *((_QWORD *)this + 44);
  v5 = *((_QWORD *)this + 45);
  if (v4 == v5)
  {
LABEL_12:
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v40 = 1065353216;
    v41 = 0;
    v42 = 0u;
    v43 = 0;
    v44 = xmmword_2166F7270;
    v45 = 0x3FF0000000000000;
    v34 = *((_QWORD *)this + 40);
    v47 = 0u;
    v48 = 0;
    v46 = *((_OWORD *)this + 1);
    v10 = operator new(0x28uLL);
    *v10 = 0;
    v10[1] = 4;
    *((_DWORD *)v10 + 4) = 4;
    v10[3] = 0x3FF0000000000000;
    *((_BYTE *)v10 + 32) = 1;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>((uint64_t)&v38, 1uLL);
    v11 = *((_QWORD *)&v38 + 1);
    v12 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v38 + 8));
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = 4;
      if (*((_QWORD *)&v38 + 1) <= 4uLL)
        v13 = 4u % BYTE8(v38);
    }
    else
    {
      v13 = (BYTE8(v38) - 1) & 4;
    }
    v14 = v38;
    v15 = *(_QWORD **)(v38 + 8 * v13);
    if (v15)
    {
      *v10 = *v15;
    }
    else
    {
      *v10 = v39;
      *(_QWORD *)&v39 = v10;
      *(_QWORD *)(v14 + 8 * v13) = &v39;
      if (!*v10)
      {
LABEL_25:
        v17 = (char **)((char *)this + 376);
        ++*((_QWORD *)&v39 + 1);
        v18 = (_QWORD *)*((_QWORD *)this + 44);
        v19 = (_QWORD *)*((_QWORD *)this + 45);
        if (v18 == v19)
        {
          v23 = (char *)*((_QWORD *)this + 48);
          v33 = *((_QWORD *)this + 44);
        }
        else
        {
          do
          {
            MEMORY[0x2199FA6B8](&v49);
            v20 = v49;
            if (v49 == 0)
              goto LABEL_49;
            *(_QWORD *)&v36 = *v18;
            v35 = v49;
            v48 = *((_DWORD *)this + 12);
            Phase::Controller::SubmixSystem::CreateSpatialSubmix(*((Phase::Controller::SubmixSystem **)this + 29), (const Phase::Controller::CreateSpatialSubmixParameters *)&v34);
            v22 = (char *)*((_QWORD *)this + 48);
            v21 = *((_QWORD *)this + 49);
            if ((unint64_t)v22 >= v21)
            {
              v24 = (v22 - *v17) >> 4;
              v25 = v24 + 1;
              if ((unint64_t)(v24 + 1) >> 60)
                std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
              v26 = v21 - (_QWORD)*v17;
              if (v26 >> 3 > v25)
                v25 = v26 >> 3;
              if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
                v27 = 0xFFFFFFFFFFFFFFFLL;
              else
                v27 = v25;
              if (v27)
                v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)this + 392, v27);
              else
                v28 = 0;
              v29 = &v28[16 * v24];
              *(_OWORD *)v29 = v20;
              v31 = (char *)*((_QWORD *)this + 47);
              v30 = (char *)*((_QWORD *)this + 48);
              v32 = v29;
              if (v30 != v31)
              {
                do
                {
                  *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                  v32 -= 16;
                  v30 -= 16;
                }
                while (v30 != v31);
                v30 = *v17;
              }
              v23 = v29 + 16;
              *((_QWORD *)this + 47) = v32;
              *((_QWORD *)this + 48) = v29 + 16;
              *((_QWORD *)this + 49) = &v28[16 * v27];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *(_OWORD *)v22 = v20;
              v23 = v22 + 16;
            }
            *((_QWORD *)this + 48) = v23;
            ++v18;
          }
          while (v18 != v19);
          v18 = (_QWORD *)*((_QWORD *)this + 44);
          v33 = *((_QWORD *)this + 45);
        }
        if ((v33 - (uint64_t)v18) >> 3 != (v23 - *v17) >> 4)
LABEL_49:
          std::terminate();
        Phase::Controller::AmbientSubmix::InternalPrepare(this);
        *(_QWORD *)&v49 = &v41;
        std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
        std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v38);
        goto LABEL_48;
      }
      v16 = *(_QWORD *)(*v10 + 8);
      if (v12.u32[0] > 1uLL)
      {
        if (v16 >= v11)
          v16 %= v11;
      }
      else
      {
        v16 &= v11 - 1;
      }
      v15 = (_QWORD *)(v38 + 8 * v16);
    }
    *v15 = v10;
    goto LABEL_25;
  }
  v6 = v4 + 8;
  while (1)
  {
    v7 = *(_QWORD *)(v6 - 8);
    if (!v7)
      break;
    v34 = *((_QWORD *)this + 30) + 1240;
    UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA = (_QWORD *)_ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(v34, v7, (uint64_t)&v34);
    if (!UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA)
      break;
    if (*UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA)
      v9 = v6 == v5;
    else
      v9 = 1;
    v6 += 8;
    if (v9)
    {
      if (!*UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA)
        break;
      goto LABEL_12;
    }
  }
LABEL_48:
  Phase::Controller::Submix::Update(this, a2);
}

void sub_216504128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Phase::Controller::CreateSpatialSubmixParameters::~CreateSpatialSubmixParameters((Phase::Controller::CreateSpatialSubmixParameters *)va);
  _Unwind_Resume(a1);
}

void Phase::Controller::AmbientSubmix::InternalPrepare(Phase::Controller::AmbientSubmix *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];
  void **v6;

  Phase::Controller::Submix::InternalPrepare(this);
  if (*((_BYTE *)this + 72) != 2)
    std::terminate();
  v2 = *((_QWORD *)this + 28);
  v3 = *((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  Phase::Controller::Submix::GetEffects((Phase::Logger **)this, 0, v5);
  Phase::Controller::DVM::VoiceGraph::ConfigureAmbientSubmix(*(_QWORD **)(*(_QWORD *)v2 + 72), v3, v4, (uint64_t *)this + 47, v5);
  v6 = (void **)v5;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_2165041E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::AmbientSubmix::GetListenerId(Phase::Controller::AmbientSubmix *this)
{
  return *((_QWORD *)this + 40);
}

_QWORD *Phase::Controller::AmbientSubmix::GetInputChannelLayout@<X0>(Phase::Controller::AmbientSubmix *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a2, *((const void **)this + 50), *((_QWORD *)this + 51), *((_QWORD *)this + 51) - *((_QWORD *)this + 50));
}

void Phase::Controller::AmbientSubmix::SetPlayState(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Submix;

  if (*(_QWORD *)(a1 + 384) != *(_QWORD *)(a1 + 376))
  {
    Phase::Controller::Submix::SetPlayState(a1, a2);
    v4 = *(uint64_t **)(a1 + 376);
    v5 = *(uint64_t **)(a1 + 384);
    while (v4 != v5)
    {
      v6 = *v4;
      v7 = v4[1];
      v4 += 2;
      Submix = Phase::Controller::SubmixSystem::GetSubmix(*(Phase::Logger **)(a1 + 232), v6, v7);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)Submix + 280))(Submix, a2);
    }
  }
}

uint64_t Phase::Controller::AmbientSubmix::Fade(uint64_t this, float a2, float a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Submix;

  v3 = *(uint64_t **)(this + 376);
  v4 = *(uint64_t **)(this + 384);
  if (v3 != v4)
  {
    v7 = this;
    do
    {
      v8 = *v3;
      v9 = v3[1];
      v3 += 2;
      Submix = Phase::Controller::SubmixSystem::GetSubmix(*(Phase::Logger **)(v7 + 232), v8, v9);
      this = (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)Submix + 224))(Submix, a2, a3);
    }
    while (v3 != v4);
  }
  return this;
}

uint64_t Phase::Controller::AmbientSubmix::SetSessionLevel(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Submix;

  v3 = *(uint64_t **)(result + 376);
  v4 = *(uint64_t **)(result + 384);
  if (v3 != v4)
  {
    v7 = result;
    do
    {
      v8 = *v3;
      v9 = v3[1];
      v3 += 2;
      Submix = Phase::Controller::SubmixSystem::GetSubmix(*(Phase::Logger **)(v7 + 232), v8, v9);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)Submix + 232))(Submix, a2, a3);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t Phase::Controller::AmbientSubmix::SetParameter(uint64_t this, uint64_t a2, double a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Submix;

  v3 = *(uint64_t **)(this + 376);
  v4 = *(uint64_t **)(this + 384);
  if (v3 != v4)
  {
    v7 = this;
    do
    {
      v8 = *v3;
      v9 = v3[1];
      v3 += 2;
      Submix = Phase::Controller::SubmixSystem::GetSubmix(*(Phase::Logger **)(v7 + 232), v8, v9);
      this = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)Submix + 144))(Submix, a2, a3);
    }
    while (v3 != v4);
  }
  return this;
}

void Phase::Controller::AmbientSubmix::SetParameterData(Phase::Controller::AmbientSubmix *this, uint64_t a2, float32x4_t *a3, uint64_t a4)
{
  float32x4_t v7;

  if (a2 == 0xB11F8D5B5762E28DLL)
  {
    if (*(_BYTE *)(Phase::Logger::GetInstancePtr(this) + 1555))
    {
      if (a4 != 16)
        std::terminate();
      v7 = *a3;
      Phase::Controller::AmbientSubmix::SetOrientation((uint64_t)this, &v7, 0);
    }
  }
  else
  {
    Phase::Controller::Submix::SetParameterData(this, a2, a3);
  }
}

double Phase::Controller::AmbientSubmix::GetGain(Phase::Geometry::System **this)
{
  double v2;
  Phase::Geometry::System *v3;
  uint64_t v4;
  uint64_t v5;
  double Gain;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  Phase::Geometry::System::GetCurrentState(this[30], &v11);
  v2 = 0.0;
  if (v11)
  {
    v3 = this[40];
    if (*(_DWORD *)(v11 + 136) > v3)
    {
      v4 = *(_QWORD *)(v11 + 120);
      if (*(_DWORD *)(v4 + 24 * v3 + 20) == HIDWORD(v3))
      {
        v5 = *(_QWORD *)(v4 + 24 * this[40]);
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            v2 = *(double *)(v5 + 176);
        }
      }
    }
  }
  Gain = Phase::Controller::Submix::GetGain((Phase::Controller::Submix *)this);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v2 * Gain;
}

void sub_216504534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::AmbientSubmix::GetType(Phase::Controller::AmbientSubmix *this)
{
  return 2;
}

uint64_t Phase::Controller::AmbientSubmix::GetNumChannels(Phase::Controller::AmbientSubmix *this)
{
  _DWORD *v1;
  uint8x8_t v3;

  v1 = (_DWORD *)*((_QWORD *)this + 50);
  if (*v1 == 0x10000)
  {
    v3 = (uint8x8_t)vcnt_s8((int8x8_t)v1[1]);
    v3.i16[0] = vaddlv_u8(v3);
    return v3.u32[0];
  }
  else if (*v1)
  {
    return (unsigned __int16)*v1;
  }
  else
  {
    return v1[2];
  }
}

BOOL Phase::IsNearlyEqual<float>(float *a1, float *a2, float a3)
{
  float v3;
  float v4;
  float v5;
  float v7;

  v3 = *a1 - *a2;
  if (v3 < 0.0)
    v3 = -v3;
  if (v3 > a3)
    return 0;
  v4 = a1[1] - a2[1];
  if (v4 < 0.0)
    v4 = -v4;
  if (v4 > a3)
    return 0;
  v5 = a1[2] - a2[2];
  if (v5 < 0.0)
    v5 = -v5;
  if (v5 > a3)
    return 0;
  v7 = a1[3] - a2[3];
  if (v7 < 0.0)
    v7 = -v7;
  return v7 <= a3;
}

void Phase::Controller::Submix::SetSpatialCategoryIsActive(Phase::Logger *a1)
{
  NSObject *v2;
  uint64_t v3;
  std::runtime_error *exception;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 384));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v3 = *((_QWORD *)a1 + 2);
    v5 = 136315650;
    v6 = "CvmSubmix.h";
    v7 = 1024;
    v8 = 177;
    v9 = 2048;
    v10 = v3;
    _os_log_impl(&dword_2164CC000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"SetSpatialCategoryIsActive called on submixId %llu which doesn't implement it.\"", (uint8_t *)&v5, 0x1Cu);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "SetSpatialCategoryIsActive called on submixId %llu which doesn't implement it.");
}

void sub_2165046EC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void Phase::Controller::Submix::SetSpatialCategorySendLevel(Phase::Logger *a1)
{
  NSObject *v2;
  uint64_t v3;
  std::runtime_error *exception;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 384));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v3 = *((_QWORD *)a1 + 2);
    v5 = 136315650;
    v6 = "CvmSubmix.h";
    v7 = 1024;
    v8 = 183;
    v9 = 2048;
    v10 = v3;
    _os_log_impl(&dword_2164CC000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"SetSpatialCategorySendLevel called on submixId %llu which doesn't implement it.\"", (uint8_t *)&v5, 0x1Cu);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "SetSpatialCategorySendLevel called on submixId %llu which doesn't implement it.");
}

void sub_2165047DC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void Phase::Controller::Submix::SetSpatialCategoryParameter(Phase::Logger *a1)
{
  NSObject *v2;
  uint64_t v3;
  std::runtime_error *exception;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 384));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v3 = *((_QWORD *)a1 + 2);
    v5 = 136315650;
    v6 = "CvmSubmix.h";
    v7 = 1024;
    v8 = 190;
    v9 = 2048;
    v10 = v3;
    _os_log_impl(&dword_2164CC000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"SetSpatialCategoryParameter called on submixId %llu which doesn't implement it.\"", (uint8_t *)&v5, 0x1Cu);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "SetSpatialCategoryParameter called on submixId %llu which doesn't implement it.");
}

void sub_2165048CC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void Phase::Controller::Submix::SetSpatialCategoryProperty(Phase::Logger *a1)
{
  NSObject *v2;
  uint64_t v3;
  std::runtime_error *exception;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 384));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v3 = *((_QWORD *)a1 + 2);
    v5 = 136315650;
    v6 = "CvmSubmix.h";
    v7 = 1024;
    v8 = 199;
    v9 = 2048;
    v10 = v3;
    _os_log_impl(&dword_2164CC000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"SetSpatialCategoryParameter called on submixId %llu which doesn't implement it.\"", (uint8_t *)&v5, 0x1Cu);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "SetSpatialCategoryParameter called on submixId %llu which doesn't implement it.");
}

void sub_2165049BC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<Phase::Vector<float,3ul>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_DWORD *)(v2 - 12);
    v2 -= 12;
    *(_DWORD *)(v4 - 12) = v5;
    v4 -= 12;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Vector<float,3ul>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a2);
}

uint64_t _ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *UniqueSlot;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;

  UniqueSlot = (uint64_t *)Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::GetUniqueSlot(a1, a2);
  v5 = (uint64_t)UniqueSlot;
  if (UniqueSlot)
  {
    v6 = UniqueSlot[1];
    if (v6)
    {
      if (*(uint64_t *)(v6 + 8) >= 1)
      {
        if (!*(_QWORD *)(*(_QWORD *)a3 + 200))
          std::terminate();
        Phase::Geometry::EntityFactory::Create(*UniqueSlot, (uint64_t *)&v11);
        std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100](v5, &v11);
        v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
        if (*((_QWORD *)&v11 + 1))
        {
          v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
      }
    }
  }
  return v5;
}

uint64_t Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::GetUniqueSlot(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 16) <= a2)
    return 0;
  v3 = a2;
  result = *(_QWORD *)a1 + 24 * a2;
  if (*(_DWORD *)(result + 20) != HIDWORD(a2))
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    if (*(uint64_t *)(v5 + 8) >= 1)
    {
      Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::Realloc((__int128 *)a1);
      return *(_QWORD *)a1 + 24 * v3;
    }
  }
  return result;
}

void Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::Realloc(__int128 *a1)
{
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 *v11;
  char v12;
  __int128 v13;

  v1 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v1)
  {
    Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::AllocSlots(v1, &v13);
    if (*((_DWORD *)a1 + 4))
    {
      v3 = 0;
      v4 = 16;
      do
      {
        v5 = (_QWORD *)(*(_QWORD *)a1 + v4);
        v6 = (_QWORD *)(v13 + v4);
        std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100]((_QWORD *)(v13 + v4 - 16), v5 - 2);
        *v6 = *v5;
        ++v3;
        v4 += 24;
      }
      while (v3 < *((unsigned int *)a1 + 4));
    }
    v11 = a1 + 2;
    v12 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 2));
    v7 = *a1;
    *a1 = v13;
    v13 = v7;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v11);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_216504C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::AllocSlots(unint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  if (a1)
  {
    is_mul_ok(a1, 0x18uLL);
    v4 = 24 * a1;
    v5 = (_QWORD *)operator new[]();
    *v5 = 24;
    v5[1] = a1;
    v6 = v5 + 2;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6 += 3;
      v4 -= 24;
    }
    while (v4);
    std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot []>::shared_ptr[abi:ne180100]<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot,void>(a2, (uint64_t)(v5 + 2));
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

_QWORD *std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot []>::shared_ptr[abi:ne180100]<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D577F48;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216504DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot,std::default_delete<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot []>::operator()[abi:ne180100]<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>(a1 + 24, *(_QWORD *)(a1 + 24));
}

void std::default_delete<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot []>::operator()[abi:ne180100]<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v2 = *(_QWORD *)(a2 - 8);
    if (v2)
    {
      v3 = 24 * v2;
      v4 = a2 - 24;
      do
      {
        std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v4 + v3);
        v3 -= 24;
      }
      while (v3);
    }
    JUMPOUT(0x2199F9D4CLL);
  }
}

uint64_t std::unique_ptr<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot,std::default_delete<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    std::__shared_mutex_base::unlock(*(std::__shared_mutex_base **)a1);
  return a1;
}

void std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        v7 = (void **)(v4 - 24);
        std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<Phase::Controller::DspNodeVoice>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<Phase::Controller::DspNodeVoice>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  v3 = *(void **)(a2 + 80);
  if (v3)
  {
    *(_QWORD *)(a2 + 88) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 56);
  if (v4)
  {
    *(_QWORD *)(a2 + 64) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a2 + 32);
  if (v5)
  {
    *(_QWORD *)(a2 + 40) = v5;
    operator delete(v5);
  }
  v6 = (void **)(a2 + 8);
  std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 24));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t Phase::Controller::ChannelSubmix::ChannelSubmix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Phase::Logger *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Phase::Logger *v11;
  unsigned int **v12;
  _BOOL8 IsLayoutSupported;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  Phase::Logger *v21;
  Phase::Logger *InstancePtr;
  NSObject *v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  const char *v29;
  void *v30;
  NSObject *v32;
  std::logic_error *exception;
  void *v34;
  char v35;
  void *__p;
  _BYTE *v37;
  uint64_t v38;
  void (**v39)(Phase::Controller::MatrixRendererConfig *__hidden);
  int v40;
  void *v41;
  void *v42;
  uint64_t v43;
  _BYTE buf[18];
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  void *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v11 = Phase::Controller::Submix::Submix((Phase::Logger *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), *(_DWORD *)(a2 + 56), a3, a4, a5, a6, a7, a8);
  *(_QWORD *)v11 = &off_24D577FC0;
  v12 = (unsigned int **)((char *)v11 + 320);
  *((_QWORD *)v11 + 41) = 0;
  *((_QWORD *)v11 + 42) = 0;
  *((_QWORD *)v11 + 40) = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((_QWORD *)v11 + 40, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  IsLayoutSupported = Phase::ChannelLayout::IsLayoutSupported(v12);
  if (!IsLayoutSupported)
  {
    v32 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)IsLayoutSupported)
                                                     + 384));
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmChannelSubmix.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 43;
      _os_log_impl(&dword_2164CC000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: ChannelLayout::IsLayoutSupported(mInputChannelLayout) is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: ChannelLayout::IsLayoutSupported(mInputChannelLayout) is false.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  v37 = 0;
  v38 = 0;
  __p = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, *(const void **)(a1 + 320), *(_QWORD *)(a1 + 328), *(_QWORD *)(a1 + 328) - *(_QWORD *)(a1 + 320));
  v40 = 1;
  v39 = &off_24D578138;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v41, __p, (uint64_t)v37, v37 - (_BYTE *)__p);
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  Phase::Controller::RendererSystem::CreateRenderer(a9, (uint64_t)&v39, (uint64_t *)buf);
  v14 = *(_OWORD *)buf;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v15 = *(std::__shared_weak_count **)(a1 + 352);
  *(_OWORD *)(a1 + 344) = v14;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  Phase::Controller::Submix::InternalPrepare((Phase::Controller::Submix *)a1);
  v21 = (Phase::Logger *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, double))(**(_QWORD **)(a1 + 344) + 32))(*(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1.0);
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(v21);
  if (*((_BYTE *)InstancePtr + 1552))
  {
    v23 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                        + 384)));
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *(char *)(a1 + 72);
      if (v24 > 7)
        v25 = "<not found>";
      else
        v25 = off_24D578148[v24];
      v26 = *(_QWORD *)(a1 + 32);
      v27 = *(_QWORD *)(a1 + 16);
      v28 = *(unsigned __int8 *)(a1 + 8);
      Phase::ChannelLayout::GetStringDescription(v12);
      v29 = "false";
      *(_QWORD *)&buf[4] = "CvmChannelSubmix.mm";
      *(_WORD *)&buf[12] = 1024;
      if (!v28)
        v29 = "true";
      *(_DWORD *)buf = 136316674;
      *(_DWORD *)&buf[14] = 59;
      if (v35 >= 0)
        v30 = &v34;
      else
        v30 = v34;
      v45 = 2048;
      v46 = v26;
      v47 = 2048;
      v48 = v27;
      v49 = 2080;
      v50 = v25;
      v51 = 2080;
      v52 = v29;
      v53 = 2080;
      v54 = v30;
      _os_log_impl(&dword_2164CC000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu) - created (type: channel, state: %s, sleep transitions enabled: %s, channel layout: %s)", buf, 0x44u);
      if (v35 < 0)
        operator delete(v34);
    }

  }
  v39 = &off_24D578138;
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  return a1;
}

void sub_21650547C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  Phase::Controller::Submix *v23;
  void **v24;
  uint64_t v25;
  void *v27;

  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v25);
  v27 = *v24;
  if (*v24)
  {
    *((_QWORD *)v23 + 41) = v27;
    operator delete(v27);
  }
  Phase::Controller::Submix::~Submix(v23);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ChannelSubmix::InternalPrepare(Phase::Controller::ChannelSubmix *this)
{
  Phase::Controller::Submix::InternalPrepare(this);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, double))(**((_QWORD **)this + 43) + 32))(*((_QWORD *)this + 43), *((_QWORD *)this + 2), *((_QWORD *)this + 3), 1.0);
}

void Phase::Controller::MatrixRendererConfig::~MatrixRendererConfig(Phase::Controller::MatrixRendererConfig *this)
{
  void *v2;

  *(_QWORD *)this = &off_24D578138;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24D578138;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::ChannelSubmix::~ChannelSubmix(Phase::Controller::ChannelSubmix *this)
{
  void *v2;

  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  v2 = (void *)*((_QWORD *)this + 40);
  if (v2)
  {
    *((_QWORD *)this + 41) = v2;
    operator delete(v2);
  }
  Phase::Controller::Submix::~Submix(this);
}

{
  Phase::Controller::ChannelSubmix::~ChannelSubmix(this);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::ChannelSubmix::IsStopped(Phase::Controller::ChannelSubmix *this)
{
  if (*((_BYTE *)this + 72) || !*((_BYTE *)this + 288))
    return 0;
  else
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 96))(*((_QWORD *)this + 43));
}

uint64_t Phase::Controller::ChannelSubmix::IsPrepared(Phase::Controller::ChannelSubmix *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 88))(*((_QWORD *)this + 43));
}

uint64_t Phase::Controller::ChannelSubmix::InternalSleep(Phase::Controller::ChannelSubmix *this)
{
  uint64_t result;

  Phase::Controller::Submix::InternalSleep(this);
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 43) + 40))(*((_QWORD *)this + 43), *((_QWORD *)this + 2), *((_QWORD *)this + 3));
  *((_BYTE *)this + 360) = 0;
  return result;
}

void Phase::Controller::ChannelSubmix::InternalStop(Phase::Controller::ChannelSubmix *this)
{
  Phase::Controller::Submix::SetPlayState((uint64_t)this, 0);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 43) + 112))(*((_QWORD *)this + 43), 0, 0);
  Phase::Controller::Submix::InternalStop(this);
}

uint64_t Phase::Controller::ChannelSubmix::SetPlayState(uint64_t a1, uint64_t a2)
{
  Phase::Controller::Submix::SetPlayState(a1, a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 344) + 112))(*(_QWORD *)(a1 + 344), a2, 0);
}

uint64_t Phase::Controller::ChannelSubmix::GetType(Phase::Controller::ChannelSubmix *this)
{
  return 3;
}

uint64_t Phase::Controller::ChannelSubmix::GetNumChannels(Phase::Controller::ChannelSubmix *this)
{
  _DWORD *v1;
  uint8x8_t v3;

  v1 = (_DWORD *)*((_QWORD *)this + 40);
  if (*v1 == 0x10000)
  {
    v3 = (uint8x8_t)vcnt_s8((int8x8_t)v1[1]);
    v3.i16[0] = vaddlv_u8(v3);
    return v3.u32[0];
  }
  else if (*v1)
  {
    return (unsigned __int16)*v1;
  }
  else
  {
    return v1[2];
  }
}

_QWORD *Phase::Controller::ChannelSubmix::GetInputChannelLayout@<X0>(Phase::Controller::ChannelSubmix *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a2, *((const void **)this + 40), *((_QWORD *)this + 41), *((_QWORD *)this + 41) - *((_QWORD *)this + 40));
}

uint64_t Phase::Controller::ConvolutionRenderer::ConvolutionRenderer(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  Phase::DspLayer::SimpleConvolver *v19;
  uint64_t v20;
  Phase::Logger *v21;
  int v22;
  NSObject *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  NSObject *v33;
  NSObject *v35;
  std::logic_error *exception;
  Phase::Logger *InstancePtr;
  NSObject *v38;
  std::runtime_error *v39;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  BOOL v45[8];
  _BYTE buf[12];
  __int16 v47;
  int v48;
  __int16 v49;
  unint64_t v50;
  __int16 v51;
  _BYTE v52[10];
  unint64_t v53[3];
  unint64_t *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v13 = Phase::Controller::Renderer::Renderer(a1, a2, *(_DWORD *)(a3 + 8));
  *(_QWORD *)v13 = off_24D578198;
  *(_OWORD *)(v13 + 56) = xmmword_2166F76F0;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_DWORD *)(v13 + 104) = 1065353216;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 144) = 0u;
  *(_QWORD *)(v13 + 160) = a5;
  *(_QWORD *)(v13 + 168) = a6;
  *(_QWORD *)(v13 + 176) = a8;
  *(_DWORD *)(v13 + 184) = 0;
  *(_DWORD *)(v13 + 187) = 0;
  *(_WORD *)(v13 + 191) = 1;
  *(_DWORD *)(v13 + 208) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(v13 + 200) = &off_24D578258;
  v14 = *(_QWORD *)(a3 + 12);
  v15 = *(_DWORD *)(a3 + 20);
  *(_QWORD *)(v13 + 224) = 0;
  v13 += 224;
  v44 = (uint64_t *)(v13 - 72);
  *(_DWORD *)(v13 - 4) = v15;
  *(_QWORD *)(v13 - 12) = v14;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v13, *(const void **)(a3 + 24), *(_QWORD *)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a3 + 48);
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  v16 = operator new();
  v17 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_QWORD *)(v16 + 32) = 0;
  *(_DWORD *)(v16 + 40) = 1065353216;
  *(_QWORD *)(v16 + 56) = 0;
  *(_QWORD *)(v16 + 64) = 0;
  *(_QWORD *)(v16 + 48) = v17;
  v18 = *(_DWORD *)(a1 + 220);
  v42 = v16 + 8;
  v43 = v16;
  v19 = (Phase::DspLayer::SimpleConvolver *)operator new();
  Phase::DspLayer::SimpleConvolver::SimpleConvolver(v19, 128, v18);
  if (_MergedGlobals_14 != -1)
    dispatch_once(&_MergedGlobals_14, &__block_literal_global_0);
  if (v18 >= 1)
  {
    v20 = 0;
    do
    {
      v21 = (Phase::Logger *)(*(uint64_t (**)(Phase::DspLayer::SimpleConvolver *, uint64_t, float *, uint64_t))(*(_QWORD *)v19 + 16))(v19, v20, flt_254E446B0, 128);
      v22 = (int)v21;
      if ((_DWORD)v21)
      {
        v23 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v21) + 496));
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "CvmConvolutionRenderer.mm";
          v47 = 1024;
          v48 = 84;
          v49 = 1024;
          LODWORD(v50) = v22;
          _os_log_impl(&dword_2164CC000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Convolver SetFilter error %d", buf, 0x18u);
        }
      }
      v20 = (v20 + 1);
    }
    while (v18 != (_DWORD)v20);
  }
  v24 = *(_QWORD *)(v43 + 48);
  v53[0] = (unint64_t)&off_24D5782A0;
  v53[1] = (unint64_t)Phase::Controller::ConvolutionRenderer::BufferManager::DeleteVoiceBuffer;
  v53[2] = v24;
  v54 = v53;
  v25 = operator new();
  *(_QWORD *)v25 = v19;
  *(_DWORD *)(v25 + 8) = 0;
  *(_BYTE *)(v25 + 12) = 1;
  *(_QWORD *)buf = v25;
  v26 = (uint64_t)v54;
  if (!v54)
    goto LABEL_12;
  if (v54 != v53)
  {
    v26 = (*(uint64_t (**)(unint64_t *))(*v54 + 16))(v54);
LABEL_12:
    *(_QWORD *)&v52[2] = v26;
    goto LABEL_14;
  }
  *(_QWORD *)&v52[2] = &buf[8];
  (*(void (**)(unint64_t *))(v53[0] + 24))(v53);
LABEL_14:
  v27 = *(_QWORD *)buf;
  *(_QWORD *)(v43 + 64) = *(_QWORD *)buf;
  *(_QWORD *)v45 = v27;
  v28 = std::__hash_table<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v42, v27, v45);
  std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>::operator=[abi:ne180100](v28 + 3, (uint64_t *)buf);
  std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
  v29 = v54;
  if (v54 == v53)
  {
    v30 = 4;
    v29 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_19;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_19:
  std::unique_ptr<Phase::Controller::ConvolutionRenderer::BufferManager>::reset[abi:ne180100](v44, v43);
  if (*(int *)(a1 + 16) <= 0)
  {
    v35 = objc_retainAutorelease(**(id **)(a1 + 24));
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "Commandable.hpp";
      v47 = 1024;
      v48 = 132;
      _os_log_impl(&dword_2164CC000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B0] + 16);
  }
  v31 = **(_QWORD **)(a1 + 8);
  v53[0] = 0;
  v45[0] = 1;
  v32 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v31, 48, v53, v45);
  if (!v32)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v38 = objc_retainAutorelease(**(id **)(v31 + 48));
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CommandQueue.hpp";
      v47 = 1024;
      v48 = 100;
      _os_log_impl(&dword_2164CC000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v39, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v45[0])
  {
    v33 = objc_retainAutorelease(**(id **)(v31 + 48));
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "CommandQueue.hpp";
      v47 = 1024;
      v48 = 89;
      v49 = 2048;
      v50 = v53[0];
      v51 = 2048;
      *(_QWORD *)v52 = 48;
      _os_log_impl(&dword_2164CC000, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(_QWORD *)v32 = &off_24D578308;
  *((_QWORD *)v32 + 1) = a1;
  *((_QWORD *)v32 + 2) = Phase::Controller::ConvolutionRenderer::Setup;
  *((_QWORD *)v32 + 3) = 0;
  *((_QWORD *)v32 + 4) = a7;
  *((_BYTE *)v32 + 40) = a4;
  Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v31, 48);
  atomic_store(0, (unsigned __int8 *)(v31 + 40));
  return a1;
}

void sub_216505D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Phase::Controller::VoiceData *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;

  if (a2)
  {
    __cxa_free_exception(v21);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(a16);
    __cxa_end_catch();
    JUMPOUT(0x216505BCCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::Renderer::Renderer(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t InstancePtr;
  Phase::Logger *v7;
  NSObject *v9;
  std::logic_error *exception;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  InstancePtr = Phase::Logger::GetInstancePtr((Phase::Logger *)a1);
  v7 = (Phase::Logger *)Phase::Commandable<128,Phase::LockFreeQueueMPSC>::Commandable(a1, *(_QWORD *)(InstancePtr + 496), 1, 0x20000);
  *(_QWORD *)a1 = off_24D578908;
  *(_QWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_BYTE *)(a1 + 52) = 0;
  if (a2 == -1)
  {
    v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7) + 384));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "CvmRenderer.hpp";
      v13 = 1024;
      v14 = 139;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: mRendererId != kInvalidRendererId is false.", (uint8_t *)&v11, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: mRendererId != kInvalidRendererId is false.");
    exception->__vftable = (std::logic_error_vtbl *)&off_24D578278;
  }
  return a1;
}

void sub_216506040(_Unwind_Exception *a1)
{
  _QWORD *v1;

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::ConvolutionRenderer::Setup(uint64_t a1, unint64_t *a2, int a3)
{
  std::string *v6;
  unsigned int v7;
  std::string::value_type *v8;
  uint64_t v9;
  unsigned int v10;
  Phase::Logger *v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  void **v15;
  int v16;
  std::string::size_type v17;
  std::string *v18;
  void **v19;
  void **v20;
  uint64_t v21;
  Phase::Logger *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  Phase::Logger *v36;
  NSObject *v37;
  void **v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  char v63;
  _QWORD *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  NSObject *v74;
  void **v75;
  std::logic_error *v76;
  NSObject *v77;
  void **v78;
  std::logic_error *exception;
  _QWORD *v80;
  char *v81;
  char *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  void *v85[2];
  __int128 v86;
  char v87[8];
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::string v92;
  void **v93;
  char v94;
  void *__p[2];
  uint64_t v96;
  char v97;
  _BYTE buf[48];
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  Phase::DspLayer::ConvolverVoicePool::GetStaticInstanceName((Phase::DspLayer::ConvolverVoicePool *)*(unsigned int *)(a1 + 220), &v92);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = (std::string *)v92.__r_.__value_.__r.__words[0];
    if (!v92.__r_.__value_.__r.__words[0])
    {
LABEL_8:
      v9 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    v6 = &v92;
  }
  v7 = v6->__r_.__value_.__s.__data_[0];
  if (!v6->__r_.__value_.__s.__data_[0])
    goto LABEL_8;
  v8 = &v6->__r_.__value_.__s.__data_[1];
  v9 = 0xCBF29CE484222325;
  do
  {
    v9 = 0x100000001B3 * (v9 ^ v7);
    v10 = *v8++;
    v7 = v10;
  }
  while (v10);
LABEL_9:
  Phase::Controller::Spatializer::AcquireFilters(*(Phase::Controller::Spatializer **)(*(_QWORD *)(a1 + 168) + 96), (uint64_t)v87);
  v12 = v89;
  if (!v89)
  {
    v77 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11)
                                                                                        + 496)));
    if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(v85, a1);
      v78 = (SBYTE7(v86) & 0x80u) == 0 ? v85 : (void **)v85[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmConvolutionRenderer.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 255;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v78;
      _os_log_impl(&dword_2164CC000, v77, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!encoder is true]: \"%s: Couldn't find the encoder!\"", buf, 0x1Cu);
      if (SBYTE7(v86) < 0)
        operator delete(v85[0]);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s: Couldn't find the encoder!");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11)
                                                                                      + 496)));
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(v85, a1);
    v14 = SBYTE7(v86);
    v15 = (void **)v85[0];
    v16 = SHIBYTE(v92.__r_.__value_.__r.__words[2]);
    v17 = v92.__r_.__value_.__r.__words[0];
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v12 + 40))(__p, v12);
    v18 = &v92;
    if (v16 < 0)
      v18 = (std::string *)v17;
    v19 = v85;
    if (v14 < 0)
      v19 = v15;
    *(_QWORD *)&buf[4] = "CvmConvolutionRenderer.mm";
    *(_DWORD *)buf = 136316162;
    *(_WORD *)&buf[12] = 1024;
    if (v96 >= 0)
      v20 = __p;
    else
      v20 = (void **)__p[0];
    *(_DWORD *)&buf[14] = 258;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v19;
    *(_WORD *)&buf[28] = 2080;
    *(_QWORD *)&buf[30] = v18;
    *(_WORD *)&buf[38] = 2080;
    *(_QWORD *)&buf[40] = v20;
    _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s: Setting up using %s voice pool. Encoder Details: %s\n", buf, 0x30u);
    if (SHIBYTE(v96) < 0)
      operator delete(__p[0]);
    if (SBYTE7(v86) < 0)
      operator delete(v85[0]);
  }

  v21 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)buf = v9;
  v22 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)(v21 + 40), (unint64_t *)buf);
  if (!v22 || (v23 = (void **)*((_QWORD *)v22 + 3)) == 0)
  {
    v74 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v22)
                                                                                        + 496)));
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(v85, a1);
      v75 = (SBYTE7(v86) & 0x80u) == 0 ? v85 : (void **)v85[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmConvolutionRenderer.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 262;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v75;
      _os_log_impl(&dword_2164CC000, v74, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!pConvolverVoicePoolEntry is true]: \"%s: Couldn't find a Voice Pool!\"", buf, 0x1Cu);
      if (SBYTE7(v86) < 0)
        operator delete(v85[0]);
    }

    v76 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v76, "%s: Couldn't find a Voice Pool!");
    v76->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  do
    v24 = __ldaxr(a2);
  while (__stlxr(v24 + 1, a2));
  Phase::Controller::VoiceData::VoiceData((Phase::Controller::VoiceData *)buf, (const Phase::Controller::VoicePoolEntry *)v23, v24);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)buf;
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)(a1 + 72));
  v25 = *(_QWORD *)&buf[16];
  *(_QWORD *)&buf[16] = 0;
  v26 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v25;
  if (v26)
    operator delete(v26);
  v27 = *(_QWORD *)&buf[24];
  v28 = *(_QWORD *)&buf[32];
  *(_QWORD *)(a1 + 88) = *(_QWORD *)&buf[32];
  *(_QWORD *)(a1 + 80) = v27;
  *(_QWORD *)&buf[24] = 0;
  v29 = *(_QWORD *)&buf[40];
  *(_QWORD *)(a1 + 96) = *(_QWORD *)&buf[40];
  *(_DWORD *)(a1 + 104) = v99;
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 8);
    if ((v27 & (v27 - 1)) != 0)
    {
      if (v30 >= v27)
        v30 %= v27;
    }
    else
    {
      v30 &= v27 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v30) = a1 + 88;
    *(_QWORD *)&buf[32] = 0;
    *(_QWORD *)&buf[40] = 0;
  }
  std::vector<Phase::Controller::VoiceBufferParameter>::__vdeallocate((void **)(a1 + 112));
  *(_OWORD *)(a1 + 112) = v100;
  *(_QWORD *)(a1 + 128) = v101;
  v101 = 0;
  v100 = 0uLL;
  *(_OWORD *)(a1 + 136) = v102;
  v85[0] = &v100;
  std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)v85);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&buf[16]);
  *(_OWORD *)v85 = 0u;
  v86 = 0u;
  v85[0] = v23[3];
  Phase::Controller::VoiceData::CreateDspNodeVoice((Phase::Controller::VoiceData *)(a1 + 56), (uint64_t)buf);
  v31 = (_QWORD *)v86;
  if ((unint64_t)v86 >= *((_QWORD *)&v86 + 1))
  {
    *(_QWORD *)&v86 = std::vector<Phase::Controller::DspNodeVoice>::__push_back_slow_path<Phase::Controller::DspNodeVoice>((uint64_t *)&v85[1], (uint64_t)buf);
    if ((_QWORD)v102)
    {
      *((_QWORD *)&v102 + 1) = v102;
      operator delete((void *)v102);
    }
  }
  else
  {
    *(_QWORD *)v86 = *(_QWORD *)buf;
    v31[1] = 0;
    v31[3] = 0;
    v31[4] = 0;
    v31[2] = 0;
    *(_OWORD *)(v31 + 1) = *(_OWORD *)&buf[8];
    v31[3] = *(_QWORD *)&buf[24];
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    v31[5] = 0;
    v31[6] = 0;
    *((_OWORD *)v31 + 2) = *(_OWORD *)&buf[32];
    v31[6] = v99;
    v31[7] = 0;
    memset(&buf[24], 0, 24);
    v99 = 0;
    v31[8] = 0;
    v31[9] = 0;
    *(_OWORD *)(v31 + 7) = v100;
    v100 = 0uLL;
    v31[9] = v101;
    v31[10] = 0;
    v31[11] = 0;
    v31[12] = 0;
    *((_OWORD *)v31 + 5) = v102;
    v31[12] = v103;
    v101 = 0;
    v102 = 0uLL;
    v103 = 0;
    *(_QWORD *)&v86 = v31 + 13;
  }
  if ((_QWORD)v100)
  {
    *((_QWORD *)&v100 + 1) = v100;
    operator delete((void *)v100);
  }
  if (*(_QWORD *)&buf[32])
  {
    *(_QWORD *)&buf[40] = *(_QWORD *)&buf[32];
    operator delete(*(void **)&buf[32]);
  }
  __p[0] = &buf[8];
  std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  Phase::Controller::DVM::VoiceGraph::AddRenderer(*(Phase::Controller::DVM::VoiceGraph **)(**(_QWORD **)(a1 + 160) + 72), *(_QWORD *)(a1 + 40), 0xFFFFFFFFFFFFFFFELL);
  if (a3)
    v32 = 1;
  else
    v32 = 2;
  *(_DWORD *)(a1 + 184) = v32;
  v33 = *(_QWORD *)(a1 + 160);
  v34 = *(_QWORD *)(a1 + 40);
  memset(buf, 0, 24);
  v35 = Phase::Controller::DVM::VoiceGraph::ConfigureRenderer(*(_QWORD *)(*(_QWORD *)v33 + 72), v34, v32, (uint64_t)v85, (uint64_t *)buf);
  __p[0] = buf;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v35)
  {
    v37 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v36)
                                                                                        + 496)));
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(__p, a1);
      v38 = v96 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "CvmConvolutionRenderer.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 281;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v38;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v35;
      _os_log_impl(&dword_2164CC000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: Failed to configure DVM renderer with error %hu", buf, 0x22u);
      if (SHIBYTE(v96) < 0)
        operator delete(__p[0]);
    }

  }
  else
  {
    v48 = *(std::__shared_weak_count_vtbl **)(a1 + 152);
    v49 = (std::__shared_weak_count *)operator new(0x28uLL);
    v50 = v49;
    v49->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    v49->__shared_weak_owners_ = 0;
    v49[1].__vftable = v48;
    v49->__vftable = (std::__shared_weak_count_vtbl *)&off_24D578330;
    LODWORD(v49[1].__shared_owners_) = 1;
    BYTE4(v49[1].__shared_owners_) = 1;
    v83 = v49 + 1;
    v84 = v49;
    do
      v52 = __ldxr(p_shared_owners);
    while (__stxr(v52 + 1, p_shared_owners));
    *(_DWORD *)buf = 0;
    *(_QWORD *)&buf[8] = v49 + 1;
    *(_QWORD *)&buf[16] = v49;
    do
      v53 = __ldxr(p_shared_owners);
    while (__stxr(v53 + 1, p_shared_owners));
    buf[24] = 0;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v50);
    }
    v55 = *(_QWORD *)(a1 + 160);
    v56 = *(_QWORD *)(a1 + 56);
    v57 = *(_QWORD *)(a1 + 64);
    v58 = *(_DWORD *)buf;
    LODWORD(__p[0]) = *(_DWORD *)buf;
    v60 = *(_QWORD *)&buf[8];
    v59 = *(std::__shared_weak_count **)&buf[16];
    __p[1] = *(void **)&buf[8];
    v96 = *(_QWORD *)&buf[16];
    if (*(_QWORD *)&buf[16])
    {
      v61 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    v63 = buf[24];
    v97 = buf[24];
    v81 = 0;
    v82 = 0;
    v80 = 0;
    v93 = (void **)&v80;
    v94 = 0;
    v64 = operator new(0x20uLL);
    v80 = v64;
    v81 = (char *)v64;
    v82 = (char *)(v64 + 4);
    *(_DWORD *)v64 = v58;
    v64[1] = v60;
    v64[2] = v59;
    if (v59)
    {
      v65 = (unint64_t *)&v59->__shared_owners_;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    *((_BYTE *)v64 + 24) = v63;
    v81 = (char *)(v64 + 4);
    Phase::Controller::DVM::VoiceGraph::SetBufferParameters(*(Phase::Controller::DVM::VoiceGraph **)(*(_QWORD *)v55 + 72), v56, v57, (uint64_t *)&v80);
    v93 = (void **)&v80;
    std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v93);
    if (v59)
    {
      v67 = (unint64_t *)&v59->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    if (*(_DWORD *)(a1 + 184) == 1)
    {
      Phase::Controller::ConvolutionRenderer::BufferManager::SetNopFilter(*(_QWORD **)(a1 + 152));
      atomic_store(1u, (unsigned __int8 *)(a1 + 190));
    }
    *(_BYTE *)(a1 + 192) = 1;
    if (v59)
    {
      v69 = (unint64_t *)&v59->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v71 = v84;
    if (v84)
    {
      v72 = (unint64_t *)&v84->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  *(_QWORD *)buf = &v85[1];
  std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v39 = v91;
  if (v91)
  {
    v40 = (unint64_t *)&v91->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v90;
  if (v90)
  {
    v43 = (unint64_t *)&v90->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v88;
  if (v88)
  {
    v46 = (unint64_t *)&v88->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
}

void sub_216506AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  Phase::Controller::SpatializerFilterHandle::~SpatializerFilterHandle((Phase::Controller::SpatializerFilterHandle *)&a23);
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Phase::Controller::ConvolutionRendererConfig::~ConvolutionRendererConfig(Phase::Controller::ConvolutionRendererConfig *this)
{
  void *v2;

  *(_QWORD *)this = &off_24D578258;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24D578258;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::VoiceData::~VoiceData(Phase::Controller::VoiceData *this)
{
  void **v2;

  v2 = (void **)((char *)this + 56);
  std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 16);
}

void Phase::Controller::DspNodeVoice::~DspNodeVoice(Phase::Controller::DspNodeVoice *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void **)((char *)this + 8);
  std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void Phase::Controller::ConvolutionRenderer::~ConvolutionRenderer(Phase::Controller::ConvolutionRenderer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v10;
  _BYTE buf[12];
  __int16 v12;
  int v13;
  __int16 v14;
  void **v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = off_24D578198;
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  Phase::Controller::DVM::VoiceGraph::RemoveRenderer(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 20) + 72), *((_QWORD *)this + 5));
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)this + 9);
  v3 = *((_QWORD *)this + 14);
  v2 = *((_QWORD *)this + 15);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 32;
      std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v2 - 24);
      v2 = v4;
    }
    while (v4 != v3);
  }
  *((_QWORD *)this + 15) = v3;
  v5 = (void *)*((_QWORD *)this + 32);
  if (v5)
  {
    free(v5);
    *((_QWORD *)this + 32) = 0;
    *((_QWORD *)this + 33) = 0;
  }
  else if (*((_QWORD *)this + 33))
  {
    std::terminate();
  }
  v6 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v5)
                                                                                     + 496)));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, Phase::Controller::ConvolutionRenderer *))(*(_QWORD *)this + 144))(__p, this);
    v7 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "CvmConvolutionRenderer.mm";
    v12 = 1024;
    v13 = 325;
    v14 = 2080;
    v15 = v7;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s: destroyed.", buf, 0x1Cu);
    if (v10 < 0)
      operator delete(__p[0]);
  }

  *((_QWORD *)this + 25) = &off_24D578258;
  v8 = (void *)*((_QWORD *)this + 28);
  if (v8)
  {
    *((_QWORD *)this + 29) = v8;
    operator delete(v8);
  }
  std::unique_ptr<Phase::Controller::ConvolutionRenderer::BufferManager>::reset[abi:ne180100]((uint64_t *)this + 19, 0);
  *(_QWORD *)buf = (char *)this + 112;
  std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 72);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  Phase::Controller::ConvolutionRenderer::~ConvolutionRenderer(this);
  JUMPOUT(0x2199F9D70);
}

void sub_216506EB4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void Phase::Controller::ConvolutionRenderer::AddSubmix(Phase::Logger *a1, unint64_t a2, unint64_t a3, double a4)
{
  NSObject *v5;
  void **v6;
  std::logic_error *exception;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  void **v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!(a2 | a3))
  {
    v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1)
                                                                                       + 496)));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, Phase::Logger *))(*(_QWORD *)a1 + 144))(__p, a1);
      if (v9 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      v11 = "CvmConvolutionRenderer.mm";
      v12 = 1024;
      v13 = 333;
      v14 = 2080;
      v15 = v6;
      v16 = 2048;
      v17 = 0;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [inSubmixId == kInvalidSubmixId is true]: \"%s: Invalid SubmixId %llu!\"", buf, 0x26u);
      if (v9 < 0)
        operator delete(__p[0]);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "%s: Invalid SubmixId %llu!");
  }
  Phase::Controller::ConvolutionRenderer::UpdateSubmixToRendererConnection((uint64_t)a1, a2, a3, a4);
}

void sub_21650703C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *_ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)&off_24D578278;
  return result;
}

void Phase::Controller::ConvolutionRenderer::UpdateSubmixToRendererConnection(uint64_t a1, unint64_t a2, unint64_t a3, double a4)
{
  double v4;
  NSObject *v9;
  const char *v10;
  Phase::Logger *v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  double v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 184))
  {
    v4 = a4;
    if (a4 < 0.0 || a4 > 1.0)
    {
      v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 496));
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = *(const char **)(a1 + 40);
        v16 = 136316418;
        v17 = "CvmConvolutionRenderer.mm";
        v18 = 1024;
        v19 = 431;
        v20 = 2048;
        v21 = v10;
        v22 = 2048;
        v23 = v4;
        v24 = 2048;
        v25 = 0;
        v26 = 2048;
        v27 = 0x3FF0000000000000;
        _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d (renderer: %llu) send level %f is out of range [%f, %f]. Clamping...", (uint8_t *)&v16, 0x3Au);
      }
      v4 = fmin(fmax(v4, 0.0), 1.0);
    }
    v11 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::ConnectSubmixToRenderer(*(Phase::Controller::DVM::VoiceGraph **)(**(_QWORD **)(a1 + 160) + 72), a2, a3, *(_QWORD *)(a1 + 40), v4);
    if ((_DWORD)v11)
    {
      v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11) + 496));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = *(int *)(a1 + 248);
        if (v13 > 3)
          v14 = "None";
        else
          v14 = off_24D578358[v13];
        v15 = *(_QWORD *)(a1 + 40);
        v16 = 136316162;
        v17 = "CvmConvolutionRenderer.mm";
        v18 = 1024;
        v19 = 438;
        v20 = 2080;
        v21 = v14;
        v22 = 2048;
        v23 = *(double *)&a2;
        v24 = 2048;
        v25 = v15;
        _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d %s Connecting submixId %llu to rendererId %llu failed! \n", (uint8_t *)&v16, 0x30u);
      }
    }
  }
}

void Phase::Controller::ConvolutionRenderer::RemoveSubmix(Phase::Logger *a1, unint64_t a2, unint64_t a3)
{
  NSObject *v4;
  void **v5;
  std::logic_error *exception;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  void **v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!(a2 | a3))
  {
    v4 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1)
                                                                                       + 496)));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, Phase::Logger *))(*(_QWORD *)a1 + 144))(__p, a1);
      if (v8 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      v10 = "CvmConvolutionRenderer.mm";
      v11 = 1024;
      v12 = 341;
      v13 = 2080;
      v14 = v5;
      v15 = 2048;
      v16 = 0;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [inSubmixId == kInvalidSubmixId is true]: \"%s: Invalid SubmixId %llu!\"", buf, 0x26u);
      if (v8 < 0)
        operator delete(__p[0]);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "%s: Invalid SubmixId %llu!");
  }
  Phase::Controller::ConvolutionRenderer::UpdateSubmixToRendererConnection((uint64_t)a1, a2, a3, 0.0);
}

void sub_2165073E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::ConvolutionRenderer::SetSubmixSendLevel(Phase::Logger *result, unint64_t a2, unint64_t a3, double a4)
{
  Phase::Logger *v4;
  double v5;
  NSObject *v7;
  UniqueObjectId *v8;
  NSObject *v9;
  UniqueObjectId *v10;
  std::logic_error *exception;
  UniqueObjectId __p;
  char v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  UniqueObjectId *v19;
  __int16 v20;
  double v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v4 = result;
  v26 = *MEMORY[0x24BDAC8D0];
  if (!(a2 | a3))
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result)
                                                                                       + 496)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(UniqueObjectId *__return_ptr, Phase::Logger *))(*(_QWORD *)v4 + 144))(&__p, v4);
      v10 = v13 >= 0 ? &__p : (UniqueObjectId *)__p.mStorage[0];
      *(_DWORD *)buf = 136315906;
      v15 = "CvmConvolutionRenderer.mm";
      v16 = 1024;
      v17 = 353;
      v18 = 2080;
      v19 = v10;
      v20 = 2048;
      v21 = 0.0;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [inSubmixId == kInvalidSubmixId is true]: \"%s: Invalid SubmixId %llu!\"", buf, 0x26u);
      if (v13 < 0)
        operator delete((void *)__p.mStorage[0]);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "%s: Invalid SubmixId %llu!");
  }
  __p.mStorage[0] = a2;
  __p.mStorage[1] = a3;
  if (*((_DWORD *)result + 46))
  {
    v5 = a4;
    if (a4 < 0.0 || a4 > 1.0)
    {
      v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 496));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = (UniqueObjectId *)*((_QWORD *)v4 + 5);
        *(_DWORD *)buf = 136316418;
        v15 = "CvmConvolutionRenderer.mm";
        v16 = 1024;
        v17 = 451;
        v18 = 2048;
        v19 = v8;
        v20 = 2048;
        v21 = v5;
        v22 = 2048;
        v23 = 0;
        v24 = 2048;
        v25 = 0x3FF0000000000000;
        _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d (renderer: %llu) send level %f is out of range [%f, %f]. Clamping...", buf, 0x3Au);
      }
      v5 = fmin(fmax(v5, 0.0), 1.0);
    }
    return (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::UpdateSubmixToRendererConnectionGain(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)v4 + 20) + 72), &__p, (unint64_t *)v4 + 5, v5);
  }
  return result;
}

void sub_216507658(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::ConvolutionRenderer::SetParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  float v4;
  Phase::Logger *WorkBufferSizeInBytes;
  Phase::Logger *v6;
  Phase::Logger *v7;
  NSObject *v8;
  void **v9;
  uint64_t v10;
  uint64_t InstancePtr;
  Phase::Logger *v12;
  const Phase::Controller::IR::Metadata *v13;
  NSObject *v14;
  NSObject *v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  unsigned int MaxDelayInSamples;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  vDSP_Length v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  Phase::Logger *v34;
  Phase::Logger *v35;
  _QWORD *v36;
  Phase::Logger *v37;
  NSObject *v38;
  void **v39;
  Phase::DspLayer::SimpleConvolver *v40;
  Phase::Logger *v41;
  int v42;
  NSObject *v43;
  void **v44;
  uint64_t v45;
  char *v46;
  NSObject *v47;
  void **v48;
  int v49;
  Phase::Logger *v50;
  void **v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  Phase::Logger *v57;
  NSObject *v58;
  void **v59;
  uint64_t v60;
  char *v61;
  DSPComplex *v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  int v66;
  Phase::Logger *v67;
  uint64_t v68;
  int v69;
  NSObject *v70;
  void **v71;
  unsigned __int8 v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  void **v78;
  Phase::Logger *v79;
  Phase::DspLayer::SimpleConvolver *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  int8x8_t v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint8x8_t v90;
  unint64_t v91;
  _QWORD **v92;
  _QWORD *i;
  unint64_t v94;
  _QWORD *j;
  unsigned __int8 v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  Phase::Logger *v100;
  NSObject *v101;
  NSObject *v102;
  _QWORD *v103;
  void **v104;
  std::__shared_weak_count *v105;
  unint64_t *p_shared_owners;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  NSObject *v114;
  uint8_t *v115;
  std::logic_error *exception;
  NSObject *v117;
  std::runtime_error *v118;
  int v119;
  Phase::Logger *spid;
  float __C;
  _QWORD v122[3];
  uint8_t v123[4];
  _BYTE v124[14];
  __int16 v125;
  _BYTE v126[12];
  uint64_t v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count *v129;
  uint8_t buf[64];
  void *v131[2];
  int64_t v132;
  void **v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)a2 != 2)
  {
    v114 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1)
                                                                                         + 496)));
    if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(buf, a1);
      v115 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v123 = 136315650;
      *(_QWORD *)v124 = "CvmConvolutionRenderer.mm";
      *(_WORD *)&v124[8] = 1024;
      *(_DWORD *)&v124[10] = 363;
      v125 = 2080;
      *(_QWORD *)v126 = v115;
      _os_log_impl(&dword_2164CC000, v114, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [pInRendererParameters->mRendererType != RendererType::NUPConvolution is true]: \"%s: Render parameters mismatch.\"", v123, 0x1Cu);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s: Render parameters mismatch.");
  }
  v3 = *(_QWORD *)(a1 + 168);
  v4 = *(double *)v3;
  Phase::Controller::IR::Metadata::Metadata((uint64_t)v123, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 120), *(Phase::Controller::Spatializer **)(v3 + 96), v4);
  WorkBufferSizeInBytes = (Phase::Logger *)Phase::Controller::ConvolutionRenderer::GetWorkBufferSizeInBytes((Phase::Controller::ConvolutionRenderer *)a1, (const Phase::Controller::IR::Metadata *)v123);
  v6 = WorkBufferSizeInBytes;
  if (!WorkBufferSizeInBytes)
  {
    v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                       + 496)));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(v131, a1);
      v9 = v132 >= 0 ? v131 : (void **)v131[0];
      v10 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "CvmConvolutionRenderer.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 373;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v9;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v10;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: Invalid work buffer size in Build IR node for instance %llu", buf, 0x26u);
      if (SHIBYTE(v132) < 0)
        operator delete(v131[0]);
    }
    goto LABEL_12;
  }
  v7 = *(Phase::Logger **)(a1 + 256);
  if ((unint64_t)WorkBufferSizeInBytes > *(_QWORD *)(a1 + 264))
  {
    if (v7)
      WorkBufferSizeInBytes = (Phase::Logger *)malloc_type_realloc(*(void **)(a1 + 256), (size_t)WorkBufferSizeInBytes, 0xB7EECBCFuLL);
    else
      WorkBufferSizeInBytes = (Phase::Logger *)malloc_type_malloc((size_t)WorkBufferSizeInBytes, 0x9E589963uLL);
    v7 = WorkBufferSizeInBytes;
    *(_QWORD *)(a1 + 256) = WorkBufferSizeInBytes;
    *(_QWORD *)(a1 + 264) = v6;
  }
  if (!v7)
    std::terminate();
  InstancePtr = Phase::Logger::GetInstancePtr(WorkBufferSizeInBytes);
  spid = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 496));
  v12 = (Phase::Logger *)Phase::Logger::GetInstancePtr(spid);
  if (*((_BYTE *)v12 + 504))
  {
    v14 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v12)
                                                                                        + 496)));
    v15 = v14;
    if ((unint64_t)spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(v131, a1);
      if (*(_QWORD *)&v124[4] && **(_DWORD **)&v124[4] == 3)
      {
        v16 = *(_QWORD **)(*(_QWORD *)&v124[4] + 104);
        if (v16)
          v16 = (_QWORD *)*v16;
      }
      else
      {
        v16 = 0;
      }
      v17 = (void **)v131[0];
      if (v132 >= 0)
        v17 = v131;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v17;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = *(_QWORD *)&v124[4];
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v16;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v15, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)spid, "Phase_ConvolutionRenderer_PrepareIR", "%s: IR Build Begin for Metadata %p: %zu reflections", buf, 0x20u);
      if (SHIBYTE(v132) < 0)
        operator delete(v131[0]);
    }

  }
  v18 = v127;
  MaxDelayInSamples = Phase::Controller::IR::GetMaxDelayInSamples((Phase::Controller::IR *)v123, v13);
  v20 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v18 + 64))(v18, &v124[12]);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
  v22 = *(int *)(a1 + 220);
  v23 = Phase::Controller::IR::IRBuilder::GetWorkBufferSizeInBytes(*(_QWORD *)(a1 + 168), (uint64_t)v123, 0, *(_DWORD *)(a1 + 212));
  v24 = v21 * (v20 + MaxDelayInSamples);
  v25 = v24;
  v26 = v22;
  v27 = (v24 / (int)v22);
  v28 = ((unint64_t)v7 + 39) & 0xFFFFFFFFFFFFFFF0;
  v29 = (v28 + 4 * v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)v7 = v28;
  *((_QWORD *)v7 + 1) = v29;
  v30 = v29 + 8 * v22;
  if ((int)v22 >= 1)
  {
    v31 = 0;
    do
    {
      v32 = (v30 + 15) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(*((_QWORD *)v7 + 1) + v31) = v32;
      v30 = v32 + 4 * (int)v27;
      v31 += 8;
    }
    while (8 * v22 != v31);
  }
  v33 = (v30 + 15) & 0xFFFFFFFFFFFFFFF0;
  *((_QWORD *)v7 + 2) = v33;
  v34 = (Phase::Logger *)Phase::Controller::ConvolutionRenderer::GetWorkBufferSizeInBytes((Phase::Controller::ConvolutionRenderer *)a1, (const Phase::Controller::IR::Metadata *)v123);
  if (v34 != (Phase::Logger *)(v33 + v23 - (_QWORD)v7))
  {
    v117 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v34) + 496));
    if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmConvolutionRenderer.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 520;
      _os_log_impl(&dword_2164CC000, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [GetWorkBufferSizeInBytes(inMetadata) != PointerDiff(pMemory, pInWorkBuffer) is true]: \"Memory Allocation Error\"", buf, 0x12u);
    }
    v118 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v118, "Memory Allocation Error");
  }
  vDSP_vclr(*(float **)v7, 1, v25);
  if (*(_QWORD *)&v124[4]
    && **(_DWORD **)&v124[4] == 3
    && (v36 = *(_QWORD **)(*(_QWORD *)&v124[4] + 104)) != 0
    && *v36)
  {
    Phase::Controller::IR::IRBuilder::Build(*(Phase::Logger **)(a1 + 168), (uint64_t)v123, 0, *(_DWORD *)(a1 + 212), *((_QWORD *)v7 + 2), *(_QWORD *)v7);
  }
  else
  {
    v38 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v35)
                                                                                        + 496)));
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(v131, a1);
      v39 = v132 >= 0 ? v131 : (void **)v131[0];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "CvmConvolutionRenderer.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 550;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v39;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v123;
      _os_log_impl(&dword_2164CC000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: metadata %p is empty", buf, 0x26u);
      if (SHIBYTE(v132) < 0)
        operator delete(v131[0]);
    }

  }
  if (*(_DWORD *)(a1 + 208) != 2)
  {
    v47 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v37)
                                                                                        + 496)));
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(v131, a1);
      v48 = v132 >= 0 ? v131 : (void **)v131[0];
      v49 = *(_DWORD *)(a1 + 208);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "CvmConvolutionRenderer.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 615;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v48;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v49;
      _os_log_impl(&dword_2164CC000, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: Convolver type %d not supported!", buf, 0x22u);
      if (SHIBYTE(v132) < 0)
        operator delete(v131[0]);
    }

    v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v50)
                                                                                       + 496)));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(v131, a1);
      v51 = v132 >= 0 ? v131 : (void **)v131[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmConvolutionRenderer.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 622;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v51;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: Convolver pointer is null!", buf, 0x1Cu);
      if (SHIBYTE(v132) < 0)
        operator delete(v131[0]);
    }
LABEL_12:

    goto LABEL_177;
  }
  if ((int)v27 > 128)
  {
    memset(buf, 0, 24);
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(buf, *(const void **)(a1 + 224), *(_QWORD *)(a1 + 232), (uint64_t)(*(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) >> 2);
    v52 = *(_QWORD **)buf;
    if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
    {
      v53 = *(_QWORD *)&buf[16];
      if (*(_QWORD *)&buf[16] - *(_QWORD *)buf <= 7uLL)
      {
        if (*(_QWORD *)buf)
        {
          *(_QWORD *)&buf[8] = *(_QWORD *)buf;
          operator delete(*(void **)buf);
          v53 = 0;
          memset(buf, 0, 24);
        }
        v54 = v53 >> 1;
        if ((unint64_t)(v53 >> 1) <= 2)
          v54 = 2;
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
          v55 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v55 = v54;
        std::vector<int>::__vallocate[abi:ne180100](buf, v55);
        v52 = *(_QWORD **)&buf[8];
      }
      *v52 = 0x40000000080;
      *(_QWORD *)&buf[8] = v52 + 1;
    }
    v40 = (Phase::DspLayer::SimpleConvolver *)operator new();
    Phase::DspLayer::NUPSConvolver::NUPSConvolver((uint64_t)v40, (uint64_t)buf, v27, v22);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  else
  {
    v40 = (Phase::DspLayer::SimpleConvolver *)operator new();
    v41 = Phase::DspLayer::SimpleConvolver::SimpleConvolver(v40, 128, v22);
    v42 = *(_DWORD *)(a1 + 248);
    if (v42 && v42 != 3)
    {
      v43 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v41)
                                                                                          + 496)));
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(v131, a1);
        v44 = v132 >= 0 ? v131 : (void **)v131[0];
        v45 = *(int *)(a1 + 248);
        v46 = v45 > 3 ? "None" : off_24D578358[v45];
        v56 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "CvmConvolutionRenderer.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 587;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v44;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v40;
        *(_WORD *)&buf[38] = 2080;
        *(_QWORD *)&buf[40] = v46;
        *(_WORD *)&buf[48] = 2048;
        *(_QWORD *)&buf[50] = v56;
        _os_log_impl(&dword_2164CC000, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: Simple Convolver %p created for %s, rendererId %llu \n", buf, 0x3Au);
        if (SHIBYTE(v132) < 0)
          operator delete(v131[0]);
      }

    }
  }
  __C = 0.0;
  vDSP_svesq(*(const float **)v7, 1, &__C, v25);
  if (__C == 0.0)
  {
    v58 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v57)
                                                                                        + 496)));
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(v131, a1);
      v59 = v132 >= 0 ? v131 : (void **)v131[0];
      v60 = *(int *)(a1 + 248);
      v61 = v60 > 3 ? "None" : off_24D578358[v60];
      v65 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "CvmConvolutionRenderer.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 638;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v59;
      *(_WORD *)&buf[28] = 2080;
      *(_QWORD *)&buf[30] = v61;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v27;
      *(_WORD *)&buf[44] = 2048;
      *(_QWORD *)&buf[46] = v65;
      *(_WORD *)&buf[54] = 1024;
      *(_DWORD *)&buf[56] = 128;
      _os_log_impl(&dword_2164CC000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: Filter energy is 0 for %s, filter size %d, rendererId %llu. Using %d (blocksize) as crossfade length \n", buf, 0x3Cu);
      if (SHIBYTE(v132) < 0)
        operator delete(v131[0]);
    }

    v62 = *(DSPComplex **)v7;
LABEL_101:
    v66 = 128;
    goto LABEL_102;
  }
  v62 = *(DSPComplex **)v7;
  if ((int)v25 < 1)
    goto LABEL_101;
  v63 = 0;
  v64 = 0.0;
  while (1)
  {
    v64 = v64 + (float)(*(&v62->real + v63) * *(&v62->real + v63));
    if (v64 > (float)(__C * 0.0))
      break;
    if (v25 == ++v63)
      goto LABEL_101;
  }
  v66 = (int)v63 / (int)v22;
  if (v66 < 1)
    goto LABEL_101;
LABEL_102:
  v119 = v66;
  Phase::ArrayFunction::Deinterleave(v62, *((void ***)v7 + 1), (int)v27, v22);
  if ((int)v22 >= 1)
  {
    v68 = 0;
    do
    {
      v67 = (Phase::Logger *)(*(uint64_t (**)(Phase::DspLayer::SimpleConvolver *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v40 + 16))(v40, v68, *(_QWORD *)(*((_QWORD *)v7 + 1) + 8 * v68), v27);
      v69 = (int)v67;
      if ((_DWORD)v67)
      {
        v70 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v67)
                                                                                            + 496)));
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(v131, a1);
          v71 = v131;
          if (v132 < 0)
            v71 = (void **)v131[0];
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "CvmConvolutionRenderer.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 669;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v71;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v69;
          _os_log_impl(&dword_2164CC000, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: Convolver SetFilter error %d", buf, 0x22u);
          if (SHIBYTE(v132) < 0)
            operator delete(v131[0]);
        }

      }
      ++v68;
    }
    while (v26 != v68);
  }
  v72 = atomic_load((unsigned __int8 *)(a1 + 188));
  if ((v72 & 1) != 0)
  {
    v77 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v67)
                                                                                        + 496)));
    if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(v131, a1);
      v78 = v132 >= 0 ? v131 : (void **)v131[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmConvolutionRenderer.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 692;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v78;
      _os_log_impl(&dword_2164CC000, v77, OS_LOG_TYPE_INFO, "%25s:%-5d %s: Skipped built IR because the renderer is stopping.", buf, 0x1Cu);
      if (SHIBYTE(v132) < 0)
        operator delete(v131[0]);
    }

    v80 = v40;
    goto LABEL_162;
  }
  v73 = *(unint64_t **)(a1 + 152);
  v74 = v73[6];
  v131[0] = &off_24D5782A0;
  v131[1] = Phase::Controller::ConvolutionRenderer::BufferManager::DeleteVoiceBuffer;
  v132 = v74;
  v133 = v131;
  v75 = operator new();
  *(_QWORD *)v75 = v40;
  *(_DWORD *)(v75 + 8) = v119;
  *(_BYTE *)(v75 + 12) = 1;
  *(_QWORD *)buf = v75;
  v76 = (uint64_t)v133;
  if (v133)
  {
    if (v133 == v131)
    {
      *(_QWORD *)&buf[32] = &buf[8];
      (*((void (**)(void **))v131[0] + 3))(v131);
      goto LABEL_127;
    }
    v76 = (*((uint64_t (**)(void))*v133 + 2))();
  }
  *(_QWORD *)&buf[32] = v76;
LABEL_127:
  v81 = *(_QWORD *)buf;
  do
    v82 = __ldaxr(v73);
  while (__stlxr(v81, v73));
  v83 = (unint64_t *)v73[7];
  if (v83)
  {
    v84 = *(_QWORD *)buf;
    do
      __ldaxr(v83);
    while (__stlxr(v84, v83));
  }
  if (v82)
  {
    if (v73[8] != v82)
    {
      v85 = (int8x8_t)v73[2];
      if (v85)
      {
        v86 = v73 + 1;
        v87 = 0x9DDFEA08EB382D69 * (((8 * v82) + 8) ^ HIDWORD(v82));
        v88 = 0x9DDFEA08EB382D69 * (HIDWORD(v82) ^ (v87 >> 47) ^ v87);
        v89 = 0x9DDFEA08EB382D69 * (v88 ^ (v88 >> 47));
        v90 = (uint8x8_t)vcnt_s8(v85);
        v90.i16[0] = vaddlv_u8(v90);
        if (v90.u32[0] > 1uLL)
        {
          v91 = v89;
          if (v89 >= *(_QWORD *)&v85)
            v91 = v89 % *(_QWORD *)&v85;
        }
        else
        {
          v91 = (*(_QWORD *)&v85 - 1) & v89;
        }
        v92 = *(_QWORD ***)(*v86 + 8 * v91);
        if (v92)
        {
          for (i = *v92; i; i = (_QWORD *)*i)
          {
            v94 = i[1];
            if (v94 == v89)
            {
              if (i[2] == v82)
              {
                std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::remove((uint64_t)v122, v86, i);
                std::unique_ptr<std::__hash_node<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v122);
                break;
              }
            }
            else
            {
              if (v90.u32[0] > 1uLL)
              {
                if (v94 >= *(_QWORD *)&v85)
                  v94 %= *(_QWORD *)&v85;
              }
              else
              {
                v94 &= *(_QWORD *)&v85 - 1;
              }
              if (v94 != v91)
                break;
            }
          }
        }
      }
    }
  }
  for (j = (_QWORD *)v73[3]; j; j = (_QWORD *)*j)
  {
    while (1)
    {
      v96 = atomic_load((unsigned __int8 *)(j[3] + 12));
      if ((v96 & 1) != 0 || j[2] == v73[8])
        break;
      v97 = (_QWORD *)*j;
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::remove((uint64_t)v122, v73 + 1, j);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v122);
      j = v97;
      if (!v97)
        goto LABEL_156;
    }
  }
LABEL_156:
  v122[0] = *(_QWORD *)buf;
  v98 = std::__hash_table<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t)(v73 + 1), *(unint64_t *)buf, v122);
  std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>::operator=[abi:ne180100](v98 + 3, (uint64_t *)buf);
  std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
  v79 = (Phase::Logger *)v133;
  if (v133 == v131)
  {
    v99 = 4;
    v79 = (Phase::Logger *)v131;
    goto LABEL_160;
  }
  if (v133)
  {
    v99 = 5;
LABEL_160:
    v79 = (Phase::Logger *)(*(uint64_t (**)(void))(*(_QWORD *)v79 + 8 * v99))();
  }
  v80 = 0;
  *(_BYTE *)(a1 + 191) = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 190));
LABEL_162:
  v100 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v79);
  if (*((_BYTE *)v100 + 504))
  {
    v101 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v100)
                                                                                         + 496)));
    v102 = v101;
    if ((unint64_t)spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v101))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(v131, a1);
      if (*(_QWORD *)&v124[4] && **(_DWORD **)&v124[4] == 3)
      {
        v103 = *(_QWORD **)(*(_QWORD *)&v124[4] + 104);
        if (v103)
          v103 = (_QWORD *)*v103;
      }
      else
      {
        v103 = 0;
      }
      v104 = (void **)v131[0];
      if (v132 >= 0)
        v104 = v131;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v104;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = *(_QWORD *)&v124[4];
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v103;
      *(_WORD *)&buf[32] = 2048;
      *(_QWORD *)&buf[34] = v40;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v102, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)spid, "Phase_ConvolutionRenderer_PrepareIR", "%s: IR Build End for Metadata %p: %zu reflections on Convolver %p", buf, 0x2Au);
      if (SHIBYTE(v132) < 0)
        operator delete(v131[0]);
    }

  }
  if (v80)
    (*(void (**)(Phase::DspLayer::SimpleConvolver *))(*(_QWORD *)v80 + 8))(v80);
LABEL_177:
  v105 = v129;
  if (v129)
  {
    p_shared_owners = (unint64_t *)&v129->__shared_owners_;
    do
      v107 = __ldaxr(p_shared_owners);
    while (__stlxr(v107 - 1, p_shared_owners));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v128;
  if (v128)
  {
    v109 = (unint64_t *)&v128->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = *(std::__shared_weak_count **)&v126[4];
  if (*(_QWORD *)&v126[4])
  {
    v112 = (unint64_t *)(*(_QWORD *)&v126[4] + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
}

void sub_2165088A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_signpost_id_t spid, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,__int16 a29,__int16 a30,__int16 a31,char a32,char a33,int a34,__int16 a35)
{
  uint64_t v35;
  void *v36;

  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  Phase::Controller::IR::Metadata::~Metadata((Phase::Controller::IR::Metadata *)&a17);
  _Unwind_Resume(a1);
}

unint64_t Phase::Controller::ConvolutionRenderer::GetWorkBufferSizeInBytes(Phase::Controller::ConvolutionRenderer *this, const Phase::Controller::IR::Metadata *a2)
{
  char *v4;
  uint64_t v5;
  unsigned int MaxDelayInSamples;
  int v7;
  uint64_t v8;
  int WorkBufferSizeInBytes;
  unint64_t v10;
  uint64_t v11;

  v4 = (char *)a2 + 16;
  v5 = *((_QWORD *)a2 + 4);
  MaxDelayInSamples = Phase::Controller::IR::GetMaxDelayInSamples(a2, a2);
  LODWORD(v4) = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v5 + 64))(v5, v4) + MaxDelayInSamples;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5) * (_DWORD)v4;
  v8 = *((int *)this + 55);
  WorkBufferSizeInBytes = Phase::Controller::IR::IRBuilder::GetWorkBufferSizeInBytes(*((_QWORD *)this + 21), (uint64_t)a2, 0, *((_DWORD *)this + 53));
  v10 = ((4 * v7 + 47) & 0xFFFFFFFFFFFFFFF0) + 8 * v8;
  if ((int)v8 >= 1)
  {
    v11 = 4 * (v7 / (int)v8);
    do
    {
      v10 = ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + v11;
      LODWORD(v8) = v8 - 1;
    }
    while ((_DWORD)v8);
  }
  return ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + WorkBufferSizeInBytes;
}

uint64_t Phase::Controller::ConvolutionRenderer::NeedsMetadata(Phase::Controller::ConvolutionRenderer *this)
{
  return *((unsigned __int8 *)this + 191);
}

uint64_t Phase::Controller::ConvolutionRenderer::SetPlayState(uint64_t result, int a2, int a3)
{
  int v3;
  uint64_t v6;

  v3 = *(_DWORD *)(result + 184);
  if (v3 != a2 && v3 != 0)
  {
    v6 = result;
    if (!a2)
    {
      atomic_store(1u, (unsigned __int8 *)(result + 188));
      if (a3)
      {
        Phase::Controller::ConvolutionRenderer::BufferManager::SetNopFilter(*(_QWORD **)(result + 152));
        atomic_store(1u, (unsigned __int8 *)(v6 + 190));
      }
    }
    result = Phase::Controller::DVM::VoiceGraph::SetRendererPlayState(*(_QWORD *)(**(_QWORD **)(v6 + 160) + 72), *(_QWORD *)(v6 + 40), a2, 0);
    *(_DWORD *)(v6 + 184) = a2;
  }
  return result;
}

uint64_t Phase::Controller::ConvolutionRenderer::GetPlayState(Phase::Controller::ConvolutionRenderer *this)
{
  return *((unsigned int *)this + 46);
}

_QWORD *Phase::Controller::ConvolutionRenderer::BufferManager::SetNopFilter(_QWORD *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  NSObject *v6;
  uint64_t v7;
  std::logic_error *exception;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v1 = this[8];
  if (!v1)
  {
    v5 = this;
    v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)this) + 496));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = v5[6];
      v9 = 136315650;
      v10 = "CvmConvolutionRenderer.mm";
      v11 = 1024;
      v12 = 161;
      v13 = 2048;
      v14 = v7;
      _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [nullptr == mpNopBuffer is true]: \"Uninitialized nop filter in ConvolutionRenderer %llu\"", (uint8_t *)&v9, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Uninitialized nop filter in ConvolutionRenderer %llu");
  }
  do
    v2 = __ldaxr(this);
  while (__stlxr(v1, this));
  v3 = (unint64_t *)this[7];
  if (v3)
  {
    v4 = this[8];
    do
      __ldaxr(v3);
    while (__stlxr(v4, v3));
  }
  if (v2)
  {
    if (this[8] != v2)
      atomic_store(0, (unsigned __int8 *)(v2 + 12));
  }
  return this;
}

void sub_216508F18(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

BOOL Phase::Controller::ConvolutionRenderer::IsPrepared(Phase::Controller::ConvolutionRenderer *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 190);
  return (v1 & 1) != 0 && *((_BYTE *)this + 192) != 0;
}

BOOL Phase::Controller::ConvolutionRenderer::IsStopped(Phase::Controller::ConvolutionRenderer *this)
{
  return !*((_DWORD *)this + 46) && *((_BYTE *)this + 189) != 0;
}

uint64_t Phase::Controller::ConvolutionRenderer::IsStopping(Phase::Controller::ConvolutionRenderer *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 188);
  return v1 & 1;
}

uint64_t Phase::Controller::ConvolutionRenderer::SubmitRendererStoppedResult(uint64_t this, std::error_code a2)
{
  uint64_t v2;
  NSObject *v3;
  void *exception;
  NSObject *v5;
  void **v6;
  std::logic_error *v7;
  void *__p[2];
  char v9;
  std::error_code v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  void **v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  if (a2.__val_ == 1)
  {
    v3 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)this) + 496));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v12 = "CvmConvolutionRenderer.mm";
      v13 = 1024;
      v14 = 724;
      _os_log_impl(&dword_2164CC000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inErrorCode.value() == true is true]: inErrorCode.message()", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    std::error_code::message((std::string *)buf, &v10);
    MEMORY[0x2199F9908](exception, buf);
  }
  v2 = this;
  if (*(_DWORD *)(this + 184))
  {
    v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)this)
                                                                                       + 496)));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v2 + 144))(__p, v2);
      if (v9 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v12 = "CvmConvolutionRenderer.mm";
      v13 = 1024;
      v14 = 727;
      v15 = 2080;
      v16 = v6;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [mPlayState != PlayState::kStopped is true]: \"%s: [SubmitRendererStoppedResult] Received stopped result for renderer which is not in stopped state!\"", buf, 0x1Cu);
      if (v9 < 0)
        operator delete(__p[0]);
    }

    v7 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v7, "%s: [SubmitRendererStoppedResult] Received stopped result for renderer which is not in stopped state!");
  }
  *(_BYTE *)(this + 189) = 1;
  return this;
}

void sub_2165091A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

unsigned __int8 *Phase::Controller::ConvolutionRenderer::Rebuild(unsigned __int8 *this, int a2)
{
  unsigned __int8 *v2;

  v2 = this;
  if (a2)
  {
    this = (unsigned __int8 *)Phase::Controller::ConvolutionRenderer::BufferManager::SetNopFilter(*((_QWORD **)this + 19));
    atomic_store(1u, v2 + 190);
  }
  v2[191] = 1;
  return this;
}

uint64_t Phase::Controller::ConvolutionRenderer::GetConfig(Phase::Controller::ConvolutionRenderer *this)
{
  return (uint64_t)this + 200;
}

uint64_t Phase::Controller::ConvolutionRenderer::GetDescription(Phase::Controller::ConvolutionRenderer *this)
{
  _QWORD *v2;
  uint64_t v3;
  const char *v4;
  size_t v5;
  _QWORD *v6;
  const Method *v7;
  char *MethodString;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Renderer (convolution, ", 23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"id ", 3);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", ", 2);
  v3 = *((int *)this + 62);
  if (v3 > 3)
    v4 = "None";
  else
    v4 = off_24D578358[v3];
  v5 = strlen(v4);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
  MethodString = Phase::Controller::IR::IRBuilder::GetMethodString((Phase::Controller::ConvolutionRenderer *)((char *)this + 212), v7);
  v9 = strlen(MethodString);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)MethodString, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" channels) ", 11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"impl@", 5);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)")", 1);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v14[1] = MEMORY[0x24BEDB848] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2199F9CD4](&v16);
}

void sub_2165093E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void std::vector<Phase::Controller::VoiceBufferParameter>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 32;
        std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(v3 - 24));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void Phase::Controller::InvalidId::~InvalidId(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::ConvolutionRenderer::BufferManager::DeleteVoiceBuffer(uint64_t a1, _QWORD *a2)
{
  if (*a2)
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 8))(*a2);
  JUMPOUT(0x2199F9D70);
}

uint64_t *std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  v4 = *a2;
  *a2 = 0;
  v5 = a2 + 1;
  std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>::reset[abi:ne180100](a1, v4);
  v7 = (uint64_t **)(a1 + 4);
  v6 = (uint64_t *)a1[4];
  a1[4] = 0;
  if (v6 == a1 + 1)
  {
    v8 = 4;
    v6 = a1 + 1;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v8))();
LABEL_6:
  v11 = a2[4];
  v10 = a2 + 4;
  v9 = (uint64_t *)v11;
  if (v11)
  {
    if (v9 == v5)
    {
      *v7 = a1 + 1;
      (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*v10 + 24))(*v10, a1 + 1);
      return a1;
    }
    *v7 = v9;
  }
  else
  {
    v10 = a1 + 4;
  }
  *v10 = 0;
  return a1;
}

void std::__function::__func<std::__bind<void (*)(unsigned long long,Phase::DspLayer::VoiceBuffer *),unsigned long long &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (*)(unsigned long long,Phase::DspLayer::VoiceBuffer *),unsigned long long &,std::placeholders::__ph<1> const&>>,void ()(Phase::DspLayer::VoiceBuffer *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<std::__bind<void (*)(unsigned long long,Phase::DspLayer::VoiceBuffer *),unsigned long long &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (*)(unsigned long long,Phase::DspLayer::VoiceBuffer *),unsigned long long &,std::placeholders::__ph<1> const&>>,void ()(Phase::DspLayer::VoiceBuffer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D5782A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (*)(unsigned long long,Phase::DspLayer::VoiceBuffer *),unsigned long long &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (*)(unsigned long long,Phase::DspLayer::VoiceBuffer *),unsigned long long &,std::placeholders::__ph<1> const&>>,void ()(Phase::DspLayer::VoiceBuffer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D5782A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (*)(unsigned long long,Phase::DspLayer::VoiceBuffer *),unsigned long long &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (*)(unsigned long long,Phase::DspLayer::VoiceBuffer *),unsigned long long &,std::placeholders::__ph<1> const&>>,void ()(Phase::DspLayer::VoiceBuffer *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *a2);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>::~unique_ptr[abi:ne180100](v1 + 3);
    operator delete(v1);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  void *v36;
  _QWORD v37[2];
  char v38;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x40uLL);
  v37[0] = v15;
  v37[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  v15[2] = *a3;
  v15[3] = 0;
  v15[7] = 0;
  v38 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(void **)a1;
          *(_QWORD *)a1 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*v14;
          if (*v14)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v14;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_55:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v36 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (_QWORD *)v37[0];
  if (v33)
  {
    *(_QWORD *)v37[0] = *v33;
LABEL_72:
    *v33 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v37[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
  if (*i)
  {
    v34 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  v37[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v37);
  return i;
}

void sub_216509B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

uint64_t *std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>::reset[abi:ne180100](a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216509C38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t *std::unique_ptr<Phase::Controller::ConvolutionRenderer::BufferManager>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__hash_table<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>>>::~__hash_table(v2 + 8);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>::~unique_ptr[abi:ne180100](v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void ___ZN5Phase10Controller19ConvolutionRenderer13BufferManagerC2EyRKNS0_25ConvolutionRendererConfigE_block_invoke()
{
  vDSP_vclr(flt_254E446B0, 1, 0x80uLL);
}

void Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(uint64_t a1)
{
  std::string *p_p;
  int64_t size;
  char *v4;
  std::string *v5;
  char *v6;
  NSObject *v8;
  std::string *v9;
  std::string __p;
  _BYTE buf[28];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  atomic_store(1u, (unsigned __int8 *)(a1 + 32));
  p_p = &__p;
  Phase::GetBacktraceFrame<1ul>(&__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (size >= 9)
  {
    v4 = (char *)p_p + size;
    v5 = p_p;
    do
    {
      v6 = (char *)memchr(v5, 67, size - 8);
      if (!v6)
        break;
      if (*(_QWORD *)v6 == 0x6E7973416C6C6143 && v6[8] == 99)
      {
        if (v6 != v4 && v6 - (char *)p_p != -1)
        {
          Phase::GetBacktraceFrame<2ul>((std::string *)buf);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = *(std::string *)buf;
        }
        break;
      }
      v5 = (std::string *)(v6 + 1);
      size = v4 - (char *)v5;
    }
    while (v4 - (char *)v5 >= 9);
  }
  v8 = objc_retainAutorelease(**(id **)(a1 + 24));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    v9 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "Commandable.hpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 356;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v9;
    _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to push command into the queue from:\n%s", buf, 0x1Cu);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_216509F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::Controller::ConvolutionRenderer,void,Phase::SerialNumberAllocator<long long> *,BOOL>(int,void (Phase::Controller::ConvolutionRenderer::*)(Phase::SerialNumberAllocator<long long> *,BOOL),Phase::SerialNumberAllocator<long long> *,BOOL)::{lambda(void)#1},void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::Controller::ConvolutionRenderer,void,Phase::SerialNumberAllocator<long long> *,BOOL>(int,void (Phase::Controller::ConvolutionRenderer::*)(Phase::SerialNumberAllocator<long long> *,BOOL),Phase::SerialNumberAllocator<long long> *,BOOL)::{lambda(void)#1},void>::operator()(uint64_t a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD, _QWORD);
  uint64_t v2;
  _QWORD *v3;

  v1 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 8) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v3 + v1);
  return v1(v3, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void Phase::GetBacktraceFrame<2ul>(std::string *a1@<X8>)
{
  int v2;
  std::locale::id *v3;
  const std::locale::facet *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  unint64_t v14;
  std::string __p;
  _QWORD v16[13];
  char v17;
  uint64_t v18;
  void **v19;
  void **v20;
  std::locale v21;
  void **v22;

  std::vector<void *>::vector(&v19, 4uLL);
  v2 = backtrace(v19, (unint64_t)((char *)v20 - (char *)v19) >> 3);
  std::vector<void *>::resize((uint64_t)&v19, v2);
  applesauce::backtrace::detail::symbolicate_snapshot((uint64_t)&v19, 4, &__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v16, &__p, 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v3 = (std::locale::id *)MEMORY[0x24BEDB350];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(v16[0] - 24)));
    v4 = std::locale::use_facet(&v21, v3);
    v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
    std::locale::~locale(&v21);
    v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, (uint64_t)&__p, v5);
    if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
      break;
    v7 = v13;
    if ((unint64_t)v13 >= v14)
    {
      v9 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v12, (__int128 *)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v13->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      v9 = v7 + 1;
    }
    v13 = v9;
  }
  if (*(char *)(v12 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)(v12 + 72), *(_QWORD *)(v12 + 80));
  }
  else
  {
    v10 = *(_OWORD *)(v12 + 72);
    a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 88);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v10;
  }
  v22 = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16[0] = *MEMORY[0x24BEDB7F0];
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v16[2] = v11;
  v16[3] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199F9CD4](&v18);
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
}

void sub_21650A1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;
  void *v20;

  *(_QWORD *)(v18 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 56));
  if (a17 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  v20 = *(void **)(v18 - 88);
  if (v20)
  {
    *(_QWORD *)(v18 - 80) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<Phase::Controller::DspNodeVoice>::__push_back_slow_path<Phase::Controller::DspNodeVoice>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL)
    v6 = 0x276276276276276;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::DspNodeVoice>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[104 * v3];
  v13 = &v7[104 * v6];
  std::allocator<Phase::Controller::DspNodeVoice>::construct[abi:ne180100]<Phase::Controller::DspNodeVoice,Phase::Controller::DspNodeVoice>((uint64_t)(a1 + 2), v11, a2);
  v12 = v11 + 104;
  std::vector<Phase::Controller::DspNodeVoice>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<Phase::Controller::DspNodeVoice>::~__split_buffer(&v10);
  return v8;
}

void sub_21650A330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Phase::Controller::DspNodeVoice>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<Phase::Controller::DspNodeVoice>::construct[abi:ne180100]<Phase::Controller::DspNodeVoice,Phase::Controller::DspNodeVoice>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __n128 result;

  *a2 = *(_QWORD *)a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 8);
  a2[3] = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  a2[4] = 0;
  a2[5] = 0;
  a2[6] = 0;
  *((_OWORD *)a2 + 2) = *(_OWORD *)(a3 + 32);
  a2[6] = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  a2[7] = 0;
  a2[8] = 0;
  a2[9] = 0;
  *(_OWORD *)(a2 + 7) = *(_OWORD *)(a3 + 56);
  a2[9] = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  a2[10] = 0;
  a2[11] = 0;
  a2[12] = 0;
  result = *(__n128 *)(a3 + 80);
  *((__n128 *)a2 + 5) = result;
  a2[12] = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  return result;
}

uint64_t std::vector<Phase::Controller::DspNodeVoice>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::Controller::DspNodeVoice>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::DspNodeVoice>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::Controller::DspNodeVoice>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 104;
      std::allocator<Phase::Controller::DspNodeVoice>::construct[abi:ne180100]<Phase::Controller::DspNodeVoice,Phase::Controller::DspNodeVoice>(a1, (_QWORD *)(v7 - 104), v9);
      v7 = *((_QWORD *)&v16 + 1) - 104;
      *((_QWORD *)&v16 + 1) -= 104;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::DspNodeVoice>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::DspNodeVoice>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::DspNodeVoice>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::DspNodeVoice>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<Phase::Controller::DspNodeVoice>::destroy[abi:ne180100](v3, v1);
      v1 += 104;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<Phase::Controller::DspNodeVoice>::~__split_buffer(void **a1)
{
  std::__split_buffer<Phase::Controller::DspNodeVoice>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<Phase::Controller::DspNodeVoice>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 104;
    std::allocator<Phase::Controller::DspNodeVoice>::destroy[abi:ne180100](v4, i - 104);
  }
}

void std::__shared_ptr_emplace<Phase::DspLayer::VoiceBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D578330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::DspLayer::VoiceBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D578330;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::ExternalOutputPullStreamSampler::ResumeStream(Phase::Controller::ExternalOutputPullStreamSampler *this)
{
  int v2;
  char v3;
  int v4;

  *((_BYTE *)this + 592) = 0;
  v2 = *((_DWORD *)this + 94);
  if (v2 == 2)
  {
    if (*((_BYTE *)this + 593))
      goto LABEL_11;
    if (*((_BYTE *)this + 512))
    {
      v4 = *((_DWORD *)this + 95);
      if (v4 == 1)
      {
        Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 4) + 72), *((_QWORD *)this + 29), *((_QWORD *)this + 30), 3);
      }
      else if (!v4)
      {
        Phase::Controller::ExternalOutputPullStreamSampler::StartVoices(this, *((double *)this + 46));
      }
    }
    if (*((_BYTE *)this + 593))
LABEL_11:
      v3 = 1;
    else
      v3 = *((_BYTE *)this + 592) != 0;
  }
  else
  {
    if (v2 != 1)
      return;
    v3 = *((_BYTE *)this + 593);
  }
  *((_BYTE *)this + 512) = v3;
}

void Phase::Controller::ExternalOutputPullStreamSampler::StartVoices(Phase::Controller::ExternalOutputPullStreamSampler *this, double a2)
{
  void *v3;
  id v4;

  Phase::Controller::Generator::StartVoices(this, a2);
  v3 = (void *)*((_QWORD *)this + 75);
  v4 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", (char *)this + 608);
  objc_msgSend(v3, "updateController:pauseState:");

}

void sub_21650A780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ExternalOutputPullStreamSampler::PauseStream(uint64_t this)
{
  uint64_t v1;

  *(_BYTE *)(this + 592) = 1;
  if ((*(_DWORD *)(this + 376) - 1) <= 1)
  {
    v1 = this;
    if (!*(_BYTE *)(this + 512) && *(_DWORD *)(this + 380) == 1)
      this = Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**(_QWORD **)(this + 32) + 72), *(_QWORD *)(this + 232), *(_QWORD *)(this + 240), 2);
    *(_BYTE *)(v1 + 512) = 1;
  }
  return this;
}

void Phase::Controller::ExternalOutputPullStreamSampler::StopVoices(Phase::Controller::ExternalOutputPullStreamSampler *this)
{
  void *v2;
  id v3;

  Phase::Controller::Generator::StopVoices(this);
  v2 = (void *)*((_QWORD *)this + 75);
  v3 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", (char *)this + 608);
  objc_msgSend(v2, "updateController:pauseState:");

}

void sub_21650A85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void Phase::Controller::ExternalOutputPullStreamSampler::Play(Phase::Controller::ExternalOutputPullStreamSampler *this)
{
  int v2;
  char v3;

  v2 = *((_DWORD *)this + 94);
  if (v2 == 2)
  {
    *((_BYTE *)this + 593) = 0;
    if (*((_BYTE *)this + 592))
    {
      v3 = 1;
    }
    else
    {
      v3 = *((_BYTE *)this + 512);
      if (v3)
      {
        Phase::Controller::ExternalOutputPullStreamSampler::StartVoices(this, *((double *)this + 46));
        v3 = 0;
      }
    }
  }
  else
  {
    if (v2 != 1)
      return;
    *((_BYTE *)this + 593) = 0;
    v3 = *((_BYTE *)this + 592);
  }
  *((_BYTE *)this + 512) = v3;
}

void Phase::Controller::ExternalOutputPullStreamSampler::Pause(Phase::Controller::ExternalOutputPullStreamSampler *this)
{
  void *v2;
  void *v3;

  if ((*((_DWORD *)this + 94) - 1) <= 1)
  {
    *((_BYTE *)this + 593) = 1;
    if (!*((_BYTE *)this + 512) && *((_DWORD *)this + 95) == 1)
    {
      Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 4) + 72), *((_QWORD *)this + 29), *((_QWORD *)this + 30), 2);
      v2 = (void *)*((_QWORD *)this + 75);
      v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", (char *)this + 608);
      objc_msgSend(v2, "updateController:pauseState:", v3, 1);

    }
    *((_BYTE *)this + 512) = 1;
  }
}

void sub_21650A980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::Controller::ExternalOutputPullStreamSampler::Resume(Phase::Controller::ExternalOutputPullStreamSampler *this)
{
  char v2;
  void *v3;
  void *v4;

  if ((*((_DWORD *)this + 94) - 1) <= 1)
  {
    *((_BYTE *)this + 593) = 0;
    v2 = *((_BYTE *)this + 592);
    if (!v2 && *((_BYTE *)this + 512) && *((_DWORD *)this + 95) == 1)
    {
      Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 4) + 72), *((_QWORD *)this + 29), *((_QWORD *)this + 30), 3);
      v3 = (void *)*((_QWORD *)this + 75);
      v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", (char *)this + 608);
      objc_msgSend(v3, "updateController:pauseState:", v4, 0);

    }
    *((_BYTE *)this + 512) = v2;
  }
}

void sub_21650AA3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Phase::Controller::ExternalOutputPullStreamSampler::~ExternalOutputPullStreamSampler(id *this)
{

  Phase::Controller::StreamSamplerBase::~StreamSamplerBase((Phase::Controller::StreamSamplerBase *)this);
}

{

  Phase::Controller::StreamSamplerBase::~StreamSamplerBase((Phase::Controller::StreamSamplerBase *)this);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::FileSampler::FileSampler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v19;
  Phase::Logger *v20;
  Phase::Logger *v21;
  uint64_t v22;
  Phase::Logger *v23;
  NSObject *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  NSObject *v29;
  std::logic_error *v30;
  NSObject *v31;
  std::runtime_error *exception;
  NSObject *v33;
  std::logic_error *v34;
  _BYTE buf[12];
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v19 = Phase::Controller::SamplerBase::SamplerBase(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  *(_QWORD *)v19 = &off_24D578418;
  *(_QWORD *)(v19 + 608) = 0;
  *(_OWORD *)(v19 + 560) = 0u;
  *(_OWORD *)(v19 + 576) = 0u;
  *(_OWORD *)(v19 + 592) = xmmword_2166F7320;
  v20 = (Phase::Logger *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a8 + 16))(a8);
  v21 = v20;
  if (!v20)
  {
    v31 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmFileSampler.mm";
      v36 = 1024;
      v37 = 51;
      _os_log_impl(&dword_2164CC000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nullptr == pSamplerPrepareParameters is true]: \"Invalid GeneratorPrepareParameters for GeneratorType::Sampler!\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid GeneratorPrepareParameters for GeneratorType::Sampler!");
  }
  if (*((_BYTE *)v20 + 64))
  {
    v33 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v20) + 384));
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmFileSampler.mm";
      v36 = 1024;
      v37 = 53;
      _os_log_impl(&dword_2164CC000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [pSamplerPrepareParameters->mSamplerType != SamplerType::FileBased is true]: \"Invalid sampler type for a file-based Sampler\"", buf, 0x12u);
    }
    v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v34, "Invalid sampler type for a file-based Sampler");
    v34->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  v22 = Phase::Controller::TaskManager::GetService<Phase::Controller::VoicePoolRegistry>(*(Phase::Logger **)(a1 + 24), 3);
  *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8);
  v23 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)(v22 + 40), (unint64_t *)buf);
  if (!v23 || !*((_QWORD *)v23 + 3))
  {
    v29 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v23) + 384));
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmFileSampler.mm";
      v36 = 1024;
      v37 = 57;
      _os_log_impl(&dword_2164CC000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!pVoicePoolEntry is true]: \"Couldn't find a Voice Pool!\"", buf, 0x12u);
    }
    v30 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v30, "Couldn't find a Voice Pool!");
    v30->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  v24 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v23) + 384));
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v25 = *((_QWORD *)v21 + 11);
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "CvmFileSampler.mm";
    v36 = 1024;
    v37 = 61;
    v38 = 2048;
    v39 = a1;
    v40 = 2048;
    v41 = a2;
    v42 = 2048;
    v43 = a4;
    v44 = 2048;
    v45 = v25;
    _os_log_impl(&dword_2164CC000, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: create file sampler with generatorId %llu on submixId %llu with audio file assetId: (%llu)", buf, 0x3Au);
  }
  *(_QWORD *)(a1 + 560) = *((_QWORD *)v21 + 11);
  v26 = *((_OWORD *)v21 + 6);
  v27 = *((_OWORD *)v21 + 7);
  *(_QWORD *)(a1 + 648) = *((_QWORD *)v21 + 16);
  *(_OWORD *)(a1 + 616) = v26;
  *(_OWORD *)(a1 + 632) = v27;
  return a1;
}

void sub_21650AE6C(_Unwind_Exception *a1)
{
  void **v1;
  void *v2;

  __cxa_free_exception(v2);
  Phase::Controller::SamplerBase::~SamplerBase(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::VoicePoolRegistry>(Phase::Logger *a1, int a2)
{
  uint64_t v3;
  Phase::Logger *v4;
  uint64_t (**v5)(uint64_t, _QWORD, _QWORD, _QWORD, void *);
  NSObject *v7;
  std::logic_error *exception;
  NSObject *v9;
  std::string *v10;
  std::logic_error *v11;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 7) - v3) >> 5))
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 112;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(_QWORD *)v4)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 121;
      v17 = 1024;
      v18 = a2;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  v5 = std::any_cast[abi:ne180100]<Phase::Controller::VoicePoolRegistry * const>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v4);
  if (!v5)
    std::__throw_bad_any_cast[abi:ne180100]();
  return (uint64_t)*v5;
}

void sub_21650B0C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21650B1B8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_21650B1D8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void Phase::Controller::FileSampler::~FileSampler(Phase::Controller::FileSampler *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  Phase::Controller::FileSampler *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 384));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 29);
    v4 = *((_QWORD *)this + 50);
    v5 = *((_QWORD *)this + 70);
    v6 = 136316418;
    v7 = "CvmFileSampler.mm";
    v8 = 1024;
    v9 = 71;
    v10 = 2048;
    v11 = this;
    v12 = 2048;
    v13 = v3;
    v14 = 2048;
    v15 = v4;
    v16 = 2048;
    v17 = v5;
    _os_log_impl(&dword_2164CC000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: destroyed file sampler with generatorId %llu on submixId %llu with audio file assetId: (%llu)", (uint8_t *)&v6, 0x3Au);
  }
  Phase::Controller::SamplerBase::~SamplerBase((void **)this);
}

{
  Phase::Controller::FileSampler::~FileSampler(this);
  JUMPOUT(0x2199F9D70);
}

void sub_21650B2EC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t Phase::Controller::FileSampler::InternalPrepare(Phase::Controller::FileSampler *this, double a2)
{
  Phase::Logger *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v9;
  NSObject *v10;
  int16x8_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  unsigned int v19;
  double v20;
  void *__p[2];
  char v22;
  double v23;
  int v24;
  int v25;
  int v26;
  int v27;
  void *v28;
  _BYTE *v29;
  unint64_t v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = (Phase::Logger *)(*(_QWORD *(**)(double *__return_ptr, _QWORD, _QWORD, _QWORD, double))(**((_QWORD **)this + 5) + 40))(&v23, *((_QWORD *)this + 5), *((_QWORD *)this + 29), *((_QWORD *)this + 30), a2);
  if (v27)
    v4 = 1;
  else
    v4 = (v25 & 0x20) == 0;
  if (v4 && v23 > 0.0)
  {
    v5 = *(unsigned int *)v28;
    if (v5 != (unint64_t)(v29 - (_BYTE *)v28 - 8) >> 4)
      __assert_rtn("GetNumberBuffers", "CoreAudioBaseTypes.hpp", 1096, "GetAudioBufferList().mNumberBuffers == (mStorage.size() - kHeaderSize) / sizeof(AudioBuffer)");
    if ((_DWORD)v5 && (_DWORD)v30)
    {
      v6 = 0;
      v7 = 16 * v5;
      while (*(_QWORD *)((char *)v28 + v6 + 16) && *(_DWORD *)((char *)v28 + v6 + 12) >= (v26 * v30))
      {
        v6 += 16;
        if (v7 == v6)
        {
          v9 = (v25 & 1) == 0 || v24 != 1819304813;
          if ((v25 & 0x20) != 0 || v9)
          {
            if (v9)
              break;
          }
          else if (v27 != 1)
          {
            break;
          }
          Phase::Controller::SamplerBase::AssignVoiceBuffers(this, (const AudioBufferList *)v28, v30);
          v19 = v30;
          *((_QWORD *)this + 71) = v30;
          v20 = v23;
          *((double *)this + 72) = v23;
          *((double *)this + 73) = (double)v19 / v20;
          v17 = 1;
          goto LABEL_30;
        }
      }
    }
  }
  v10 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v3)
                                                                                      + 384)));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    v12 = *((_QWORD *)this + 52);
    v13 = *((_QWORD *)this + 50);
    v14 = *((_QWORD *)this + 29);
    v15 = *((_QWORD *)this + 70);
    CA::StreamDescription::AsString((CA::StreamDescription *)&v23, (uint64_t)__p, v11);
    v16 = v22 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136316674;
    v32 = "CvmFileSampler.mm";
    v33 = 1024;
    v34 = 93;
    v35 = 2048;
    v36 = v12;
    v37 = 2048;
    v38 = v13;
    v39 = 2048;
    v40 = v14;
    v41 = 2048;
    v42 = v15;
    v43 = 2080;
    v44 = v16;
    _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d (sound event: %llu, submix: %llu, generator: %llu) - prepare failed (info for asset: %llx was either not found, or has an invalid format: %s", buf, 0x44u);
    if (v22 < 0)
      operator delete(__p[0]);
  }

  v17 = 0;
LABEL_30:
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  return v17;
}

void sub_21650B59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Phase::Controller::FileSampler::InternalConfigureDspGenerator(Phase::Controller::FileSampler *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5[3];
  void **v6;

  v1 = *((_QWORD *)this + 4);
  v2 = *((_QWORD *)this + 29);
  v3 = *((_QWORD *)this + 30);
  v4 = (char *)*((_QWORD *)this + 23);
  memset(v5, 0, sizeof(v5));
  Phase::Controller::DVM::VoiceGraph::ConfigureGeneratorWithRenderCallback(*(_QWORD *)(*(_QWORD *)v1 + 72), v2, v3, 1, v4, v5, 0);
  v6 = (void **)v5;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_21650B634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

double Phase::Controller::FileSampler::GetAnchorTimeForWakeFromSleepInSeconds(Phase::Controller::FileSampler *this, PHASECullOption a2, double a3)
{
  double v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (a2 != PHASECullOptionSleepWakeAtRandomOffset)
    return 0.0;
  v3 = *((double *)this + 73);
  v4 = *((_QWORD *)this + 74);
  v5 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 74) = v5;
  v6 = (v5 >> 26) ^ ((v4 ^ (unint64_t)(v4 << 23)) >> 17) ^ v5 ^ v4 ^ (v4 << 23);
  *((_QWORD *)this + 75) = v6;
  return v3 * ((double)(v6 + v5) * 5.42101086e-20) + 0.0;
}

void Phase::Controller::FileSampler::SeekTime(Phase::Controller::FileSampler *this, double a2)
{
  unsigned int v4;
  int v5;

  if (!*((_QWORD *)this + 69) && *((double *)this + 73) <= a2)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5), *((_QWORD *)this + 29), *((_QWORD *)this + 30), 0);
    Phase::Controller::Generator::Stop(this);
    return;
  }
  v4 = *((_DWORD *)this + 94);
  if (v4 < 2)
    goto LABEL_10;
  if (v4 - 3 < 2)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5), *((_QWORD *)this + 29), *((_QWORD *)this + 30), 1);
    return;
  }
  if (v4 == 2)
  {
    v5 = *((_DWORD *)this + 127);
    if ((v5 - 1) >= 2)
    {
      if (v5)
      {
LABEL_11:
        *((double *)this + 46) = a2;
        return;
      }
      Phase::Controller::Generator::SetParameter(this, 0x5FB837590D112C13uLL, a2 - *((double *)this + 73) * floor(a2 / *((double *)this + 73)), 1);
    }
LABEL_10:
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5), *((_QWORD *)this + 29), *((_QWORD *)this + 30), 0);
    goto LABEL_11;
  }
}

void Phase::Controller::FileSampler::InternalSeekDVM(Phase::Controller::FileSampler *this, double a2)
{
  Phase::Controller::Generator::SetParameter(this, 0x5FB837590D112C13uLL, a2 - *((double *)this + 73) * floor(a2 / *((double *)this + 73)), 1);
}

uint64_t Phase::Controller::Generator::AsExternalOutputPullStreamSampler(Phase::Controller::Generator *this)
{
  return 0;
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Controller::VoicePoolRegistry * const>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::VoicePoolRegistry *>::__id);
    else
      return 0;
  }
  return result;
}

void Phase::Controller::FileStreamSampler::SeekTime(Phase::Controller::FileStreamSampler *this, double a2)
{
  uint64_t v4;
  void (*v5)(void);

  v4 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 5) + 48))(*((_QWORD *)this + 5), *((_QWORD *)this + 29), *((_QWORD *)this + 30), *((_QWORD *)this + 69));
  if ((_DWORD)v4)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5), *((_QWORD *)this + 29), *((_QWORD *)this + 30), v4);
    Phase::Controller::Generator::Stop(this);
  }
  else
  {
    v5 = *(void (**)(void))(**((_QWORD **)this + 5) + 32);
    if ((*((_DWORD *)this + 94) - 3) > 1)
    {
      v5();
      *((double *)this + 46) = a2;
    }
    else
    {
      v5();
    }
  }
}

void Phase::Controller::FileStreamSampler::~FileStreamSampler(Phase::Controller::FileStreamSampler *this)
{
  Phase::Controller::StreamSamplerBase::~StreamSamplerBase(this);
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::Generator::Generator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v22;
  _DWORD *v23;
  Phase::Logger *v24;
  uint64_t v25;
  _DWORD *v31;
  __int32 v32;
  uint8x8_t v33;
  char *v34;
  char v35;
  char *v36;
  char v37;
  char *v38;
  char v39;
  char *v40;
  char v41;
  Phase::Logger *InstancePtr;
  NSObject *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  const char *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v60;
  std::logic_error *exception;
  NSObject *v62;
  NSObject *v63;
  NSObject *v64;
  NSObject *v65;
  std::runtime_error *v66;
  __int128 v67;
  const char *v68;
  std::vector<char>::value_type __x;
  _BYTE v70[38];
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  const char *v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  const char *v78;
  __int16 v79;
  const char *v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24D578538;
  *(_QWORD *)(a1 + 8) = a9;
  *(_QWORD *)(a1 + 16) = a11;
  *(_QWORD *)(a1 + 24) = a12;
  *(_QWORD *)(a1 + 32) = a13;
  *(_QWORD *)(a1 + 40) = a14;
  v22 = *(_DWORD *)(a8 + 48);
  __x = 0;
  std::vector<char>::vector((std::vector<char> *)v70, 0x20uLL, &__x);
  v23 = *(_DWORD **)v70;
  *(_DWORD *)(*(_QWORD *)v70 + 4) = 0;
  v23[2] = 0;
  *v23 = v22;
  Phase::ChannelLayout::ReduceLayout((uint64_t)v70, *(_QWORD *)(a8 + 56), (std::vector<char> *)(a1 + 48));
  v24 = *(Phase::Logger **)v70;
  if (*(_QWORD *)v70)
  {
    *(_QWORD *)&v70[8] = *(_QWORD *)v70;
    operator delete(*(void **)v70);
  }
  v25 = *(_QWORD *)(a8 + 56);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 72) = v25;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = xmmword_2166F7730;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a10;
  *(_QWORD *)(a1 + 232) = a2;
  *(_QWORD *)(a1 + 240) = a3;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 304) = _Q1;
  *(_BYTE *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0x3FF0000000000000;
  v67 = _Q1;
  *(_OWORD *)(a1 + 336) = _Q1;
  *(_QWORD *)(a1 + 352) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 384) = 1;
  *(_DWORD *)(a1 + 388) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = a4;
  *(_QWORD *)(a1 + 408) = a5;
  *(_QWORD *)(a1 + 416) = a6;
  *(_QWORD *)(a1 + 424) = a7;
  *(_QWORD *)(a1 + 432) = 0xFFFF00000000;
  *(_DWORD *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 508) = 0;
  *(_WORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 496) = 0;
  v31 = *(_DWORD **)(a1 + 48);
  if (*v31 == 0x10000)
  {
    v33 = (uint8x8_t)vcnt_s8((int8x8_t)v31[1]);
    v33.i16[0] = vaddlv_u8(v33);
    v32 = v33.i32[0];
  }
  else if (*v31)
  {
    v32 = (unsigned __int16)*v31;
  }
  else
  {
    v32 = v31[2];
  }
  if (!v32)
  {
    v60 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v24) + 384));
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v70 = 136315394;
      *(_QWORD *)&v70[4] = "CvmGenerator.mm";
      *(_WORD *)&v70[12] = 1024;
      *(_DWORD *)&v70[14] = 180;
      _os_log_impl(&dword_2164CC000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: mChannelLayout.GetNumberChannels() > 0 is false.", v70, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: mChannelLayout.GetNumberChannels() > 0 is false.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  Phase::BitBlockAllocator<Phase::SystemAllocator>::Initialize(a1 + 432, 16, 56, *(_QWORD *)(a1 + 8), (uint64_t)"Effect Allocator");
  *(_OWORD *)v70 = xmmword_2166F7740;
  *(_OWORD *)&v70[16] = v67;
  v70[32] = 0;
  v34 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,Phase::Controller::Parameter<double>>(a1 + 248, qword_24D5785C8, qword_24D5785C8, (uint64_t)v70);
  if (!v35)
  {
    v62 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v34) + 384));
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v70 = 136315650;
      *(_QWORD *)&v70[4] = "CvmGenerator.mm";
      *(_WORD *)&v70[12] = 1024;
      *(_DWORD *)&v70[14] = 188;
      *(_WORD *)&v70[18] = 2048;
      *(_QWORD *)&v70[20] = 0x981F232BD33EC927;
      _os_log_impl(&dword_2164CC000, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert %llu parameter\"", v70, 0x1Cu);
    }
LABEL_45:
    v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v66, "Failed to insert %llu parameter");
  }
  *(_QWORD *)v70 = 0;
  *(_OWORD *)&v70[8] = v67;
  *(_QWORD *)&v70[24] = 0x3FF0000000000000;
  v70[32] = 0;
  v36 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,Phase::Controller::Parameter<double>>(a1 + 248, qword_24D5785F8, qword_24D5785F8, (uint64_t)v70);
  if (!v37)
  {
    v63 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v36) + 384));
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v70 = 136315650;
      *(_QWORD *)&v70[4] = "CvmGenerator.mm";
      *(_WORD *)&v70[12] = 1024;
      *(_DWORD *)&v70[14] = 191;
      *(_WORD *)&v70[18] = 2048;
      *(_QWORD *)&v70[20] = 0xB5767F7E05AD941ELL;
      _os_log_impl(&dword_2164CC000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert %llu parameter\"", v70, 0x1Cu);
    }
    goto LABEL_45;
  }
  *(_QWORD *)v70 = 0;
  *(_OWORD *)&v70[8] = v67;
  *(_QWORD *)&v70[24] = 0x3FF0000000000000;
  v70[32] = 0;
  v38 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,Phase::Controller::Parameter<double>>(a1 + 248, qword_24D578628, qword_24D578628, (uint64_t)v70);
  if (!v39)
  {
    v64 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v38) + 384));
    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v70 = 136315650;
      *(_QWORD *)&v70[4] = "CvmGenerator.mm";
      *(_WORD *)&v70[12] = 1024;
      *(_DWORD *)&v70[14] = 195;
      *(_WORD *)&v70[18] = 2048;
      *(_QWORD *)&v70[20] = 0x81FBB92FC0173ECLL;
      _os_log_impl(&dword_2164CC000, v64, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert %llu parameter\"", v70, 0x1Cu);
    }
    goto LABEL_45;
  }
  *(_QWORD *)v70 = 0;
  *(_OWORD *)&v70[8] = v67;
  *(_QWORD *)&v70[24] = 0x3FF0000000000000;
  v70[32] = 0;
  v40 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,Phase::Controller::Parameter<double>>(a1 + 248, qword_24D578658, qword_24D578658, (uint64_t)v70);
  if (!v41)
  {
    v65 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v40) + 384));
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v70 = 136315650;
      *(_QWORD *)&v70[4] = "CvmGenerator.mm";
      *(_WORD *)&v70[12] = 1024;
      *(_DWORD *)&v70[14] = 199;
      *(_WORD *)&v70[18] = 2048;
      *(_QWORD *)&v70[20] = 0x8119B92FBF50030;
      _os_log_impl(&dword_2164CC000, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert %llu parameter\"", v70, 0x1Cu);
    }
    goto LABEL_45;
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a8 + 16);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a8 + 24);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a8 + 40);
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)v40);
  if (*((_BYTE *)InstancePtr + 1552))
  {
    v43 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                        + 384)));
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      v44 = *(int *)(a1 + 376);
      if (v44 > 4)
        v45 = "<not found>";
      else
        v45 = off_24D5786A8[v44];
      v68 = v45;
      v46 = *(int *)(a1 + 380);
      if (v46 > 2)
        v47 = "<not found>";
      else
        v47 = off_24D5786E8[v46];
      v48 = *(int *)(a1 + 508);
      v49 = "<not found>";
      v50 = "<not found>";
      if (v48 <= 2)
        v50 = off_24D5786D0[v48];
      v51 = *(_QWORD *)(a1 + 416);
      v52 = *(_QWORD *)(a1 + 400);
      v53 = *(_QWORD *)(a1 + 232);
      v54 = *(_DWORD *)(a1 + 388);
      if (v54 == 1)
        v49 = "interrupted";
      if (v54)
        v55 = v49;
      else
        v55 = "active";
      GetCalibrationModeString(*(PHASECalibrationMode *)(a1 + 192));
      v56 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v57 = objc_msgSend(v56, "UTF8String");
      v58 = *(_QWORD *)(a1 + 200);
      *(_DWORD *)v70 = 136317698;
      *(_QWORD *)&v70[4] = "CvmGenerator.mm";
      *(_WORD *)&v70[12] = 1024;
      *(_DWORD *)&v70[14] = 214;
      *(_WORD *)&v70[18] = 2048;
      *(_QWORD *)&v70[20] = v51;
      *(_WORD *)&v70[28] = 2048;
      *(_QWORD *)&v70[30] = v52;
      v71 = 2048;
      v72 = v53;
      v73 = 2080;
      v74 = v68;
      v75 = 2080;
      v76 = v47;
      v77 = 2080;
      v78 = v50;
      v79 = 2080;
      v80 = v55;
      v81 = 2080;
      v82 = v57;
      v83 = 2048;
      v84 = v58;
      _os_log_impl(&dword_2164CC000, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu, generator: %llu) - created (state: %s, voice state: %s, sleep state: %s, session state: %s, calibration mode: %s, level: %f", v70, 0x6Cu);

    }
  }
  return a1;
}

void sub_21650C120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  void *v25;

  __cxa_free_exception(v21);
  Phase::BitBlockAllocator<Phase::SystemAllocator>::Destroy(a14);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v22);
  v24 = *(_QWORD *)(v20 + 184);
  *(_QWORD *)(v20 + 184) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  a19 = a10;
  std::vector<Phase::Controller::VoiceData>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(a11);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(a12);
  v25 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v20 + 56) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

void Phase::Controller::Generator::~Generator(Phase::Controller::Generator *this)
{
  NSObject *v2;
  Phase::Logger *InstancePtr;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BYTE v10[12];
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = off_24D578538;
  if (*((_DWORD *)this + 94) != 4)
  {
    v2 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 384));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v10 = 136315394;
      *(_QWORD *)&v10[4] = "CvmGenerator.mm";
      v11 = 1024;
      v12 = 223;
      _os_log_impl(&dword_2164CC000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Generator was destroyed prematurely, cleaning up", v10, 0x12u);
    }
    Phase::Controller::Generator::Finish(this);
  }
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(this);
  if (*((_BYTE *)InstancePtr + 1552))
  {
    v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 384));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *((_QWORD *)this + 52);
      v6 = *((_QWORD *)this + 50);
      v7 = *((_QWORD *)this + 29);
      *(_DWORD *)v10 = 136316162;
      *(_QWORD *)&v10[4] = "CvmGenerator.mm";
      v11 = 1024;
      v12 = 230;
      v13 = 2048;
      v14 = v5;
      v15 = 2048;
      v16 = v6;
      v17 = 2048;
      v18 = v7;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu, generator: %llu) - destroyed", v10, 0x30u);
    }
  }
  Phase::BitBlockAllocator<Phase::SystemAllocator>::Destroy((uint64_t)this + 432);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 248);
  v8 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *(_QWORD *)v10 = (char *)this + 160;
  std::vector<Phase::Controller::VoiceData>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 80);
  v9 = (void *)*((_QWORD *)this + 6);
  if (v9)
  {
    *((_QWORD *)this + 7) = v9;
    operator delete(v9);
  }
}

void sub_21650C3F4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void Phase::Controller::Generator::Finish(Phase::Controller::Generator *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_DWORD *)this + 94) != 4)
  {
    Phase::Controller::DVM::VoiceGraph::RemoveGenerator(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 4) + 72), *((_QWORD *)this + 29), *((_QWORD *)this + 30));
    v2 = (_QWORD *)*((_QWORD *)this + 20);
    v3 = (_QWORD *)*((_QWORD *)this + 21);
    while (v2 != v3)
    {
      std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(v2 + 2);
      v5 = v2[7];
      v4 = v2[8];
      if (v4 != v5)
      {
        do
        {
          v6 = v4 - 32;
          std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v4 - 24);
          v4 = v6;
        }
        while (v6 != v5);
      }
      v2[8] = v5;
      v2 += 12;
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD, char *))(**((_QWORD **)this + 5) + 24))(*((_QWORD *)this + 5), *((_QWORD *)this + 29), *((_QWORD *)this + 30), (char *)this + 520);
    Phase::Controller::Generator::SetState((uint64_t)this, 4u);
  }
}

void Phase::Controller::Generator::Prepare(Phase::Controller::Generator *this, double a2)
{
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if ((*(unsigned int (**)(Phase::Controller::Generator *, double))(*(_QWORD *)this + 80))(this, a2))
  {
    *((_QWORD *)this + 46) = 0;
    *((_BYTE *)this + 512) = 1;
    Phase::Controller::Generator::SetState((uint64_t)this, 1u);
    for (i = *((_QWORD *)this + 20); i != *((_QWORD *)this + 21); i += 96)
    {
      if (*(_QWORD *)(i + 64) != *(_QWORD *)(i + 56))
      {
        v4 = *((_QWORD *)this + 23);
        v5 = *(_QWORD *)(v4 + 16);
        v6 = *(_QWORD *)(v4 + 24);
        while (v5 != v6)
        {
          v7 = *(_QWORD *)(v5 + 8);
          if (v7 == *(_QWORD *)(v5 + 16) || (v8 = *(_QWORD **)(v7 + 8)) == 0 || !*v8)
            std::terminate();
          v5 += 104;
        }
      }
    }
  }
  else
  {
    Phase::Controller::Generator::Finish(this);
  }
}

void Phase::Controller::Generator::SetState(uint64_t a1, unsigned int a2)
{
  Phase::Logger *InstancePtr;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)a1);
  if (*((_BYTE *)InstancePtr + 1552))
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 384));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(int *)(a1 + 376);
      if (v6 > 4)
        v7 = "<not found>";
      else
        v7 = off_24D5786A8[v6];
      v8 = *(_QWORD *)(a1 + 416);
      v9 = *(_QWORD *)(a1 + 400);
      v10 = *(_QWORD *)(a1 + 232);
      if (a2 > 4)
        v11 = "<not found>";
      else
        v11 = off_24D5786A8[a2];
      v12 = 136316674;
      v13 = "CvmGenerator.mm";
      v14 = 1024;
      v15 = 1159;
      v16 = 2048;
      v17 = v8;
      v18 = 2048;
      v19 = v9;
      v20 = 2048;
      v21 = v10;
      v22 = 2080;
      v23 = v7;
      v24 = 2080;
      v25 = v11;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu, generator: %llu) - state changed from '%s' to '%s'", (uint8_t *)&v12, 0x44u);
    }
  }
  *(_DWORD *)(a1 + 376) = a2;
}

uint64_t Phase::Controller::Generator::Play(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 376);
  if (v1 == 2)
  {
    *(_BYTE *)(this + 512) = 0;
    *(_BYTE *)(this + 384) = 1;
    return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)this + 104))(this, *(double *)(this + 368));
  }
  else if (v1 == 1)
  {
    *(_BYTE *)(this + 512) = 0;
    *(_BYTE *)(this + 384) = 1;
  }
  return this;
}

uint64_t Phase::Controller::Generator::Pause(uint64_t this)
{
  if ((*(_DWORD *)(this + 376) - 1) <= 1)
  {
    *(_BYTE *)(this + 512) = 1;
    if (*(_DWORD *)(this + 380) == 1 && !*(_BYTE *)(this + 513))
      return Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**(_QWORD **)(this + 32) + 72), *(_QWORD *)(this + 232), *(_QWORD *)(this + 240), 2);
  }
  return this;
}

void Phase::Controller::Generator::Resume(Phase::Controller::Generator *this)
{
  if ((*((_DWORD *)this + 94) - 1) <= 1)
  {
    if (*((_DWORD *)this + 95) == 1 && !*((_BYTE *)this + 513))
    {
      Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 4) + 72), *((_QWORD *)this + 29), *((_QWORD *)this + 30), 3);
      Phase::Controller::Generator::SetSessionState((uint64_t)this, 0);
    }
    *((_BYTE *)this + 512) = 0;
    *((_BYTE *)this + 384) = 1;
  }
}

void Phase::Controller::Generator::SetSessionState(uint64_t a1, int a2)
{
  Phase::Logger *InstancePtr;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  const char *v11;
  const char *v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 388) != a2)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)a1);
    if (*((_BYTE *)InstancePtr + 1552))
    {
      v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 384));
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(_QWORD *)(a1 + 416);
        v7 = *(_QWORD *)(a1 + 400);
        v8 = *(_QWORD *)(a1 + 232);
        v9 = *(_DWORD *)(a1 + 388);
        v10 = "<not found>";
        if (v9 == 1)
          v11 = "interrupted";
        else
          v11 = "<not found>";
        if (v9)
          v12 = v11;
        else
          v12 = "active";
        v13 = 136316674;
        v14 = "CvmGenerator.mm";
        v15 = 1024;
        if (a2 == 1)
          v10 = "interrupted";
        v16 = 1204;
        v17 = 2048;
        if (!a2)
          v10 = "active";
        v18 = v6;
        v19 = 2048;
        v20 = v7;
        v21 = 2048;
        v22 = v8;
        v23 = 2080;
        v24 = v12;
        v25 = 2080;
        v26 = v10;
        _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu, generator: %llu) - session state changed from '%s' to '%s'", (uint8_t *)&v13, 0x44u);
      }
    }
    *(_DWORD *)(a1 + 388) = a2;
  }
}

uint64_t Phase::Controller::Generator::ClientEnginePause(uint64_t this)
{
  if ((*(_DWORD *)(this + 376) - 1) <= 1)
  {
    *(_BYTE *)(this + 513) = 1;
    if (*(_DWORD *)(this + 380) == 1 && !*(_BYTE *)(this + 512))
      return Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**(_QWORD **)(this + 32) + 72), *(_QWORD *)(this + 232), *(_QWORD *)(this + 240), 2);
  }
  return this;
}

uint64_t Phase::Controller::Generator::ClientEngineStart(uint64_t this)
{
  uint64_t v1;

  if ((*(_DWORD *)(this + 376) - 1) <= 1)
  {
    v1 = this;
    if (*(_DWORD *)(this + 380) == 1 && !*(_BYTE *)(this + 512))
      this = Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**(_QWORD **)(this + 32) + 72), *(_QWORD *)(this + 232), *(_QWORD *)(this + 240), 3);
    *(_BYTE *)(v1 + 513) = 0;
  }
  return this;
}

void Phase::Controller::Generator::Stop(Phase::Controller::Generator *this)
{
  int v2;

  v2 = *((_DWORD *)this + 94);
  switch(v2)
  {
    case 2:
      (*(void (**)(Phase::Controller::Generator *, _QWORD))(*(_QWORD *)this + 112))(this, 0);
LABEL_7:
      Phase::Controller::Generator::SetState((uint64_t)this, 3u);
      return;
    case 1:
      (*(void (**)(Phase::Controller::Generator *, _QWORD))(*(_QWORD *)this + 112))(this, 0);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), *((_QWORD *)this + 29), *((_QWORD *)this + 30));
      goto LABEL_7;
    case 0:
      Phase::Controller::Generator::Finish(this);
      break;
  }
}

void Phase::Controller::Generator::SetSleepState(uint64_t a1, unsigned int a2)
{
  Phase::Logger *InstancePtr;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)a1);
  if (*((_BYTE *)InstancePtr + 1552))
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 384));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(int *)(a1 + 508);
      if (v6 > 2)
        v7 = "<not found>";
      else
        v7 = off_24D5786D0[v6];
      v8 = *(_QWORD *)(a1 + 416);
      v9 = *(_QWORD *)(a1 + 400);
      v10 = *(_QWORD *)(a1 + 232);
      if (a2 > 2)
        v11 = "<not found>";
      else
        v11 = off_24D5786D0[a2];
      v12 = 136316674;
      v13 = "CvmGenerator.mm";
      v14 = 1024;
      v15 = 1185;
      v16 = 2048;
      v17 = v8;
      v18 = 2048;
      v19 = v9;
      v20 = 2048;
      v21 = v10;
      v22 = 2080;
      v23 = v7;
      v24 = 2080;
      v25 = v11;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu, generator: %llu) - sleep state changed from '%s' to '%s'", (uint8_t *)&v12, 0x44u);
    }
  }
  *(_DWORD *)(a1 + 508) = a2;
}

void Phase::Controller::Generator::SetParameter(Phase::Controller::Generator *this, unint64_t a2, double a3, int a4)
{
  double *v7;
  double *v8;
  double v9;
  _QWORD *v10;
  Phase::Logger *v11;
  NSObject *v12;
  const char *v13;
  Phase::Controller::VoiceData *v14;
  Phase::Controller::VoiceData *v15;
  int v16;
  unint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v17 = a2;
  v7 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((_QWORD *)this + 31, &v17);
  v8 = v7;
  if (v7)
  {
    v9 = Phase::Controller::sClamp<double>((Phase::Logger *)v7, a3, v7[3], v7[4]);
    if (v9 != v8[6])
    {
      v8[6] = v9;
      *((_BYTE *)v8 + 56) = 1;
    }
    if (a4)
      *((_BYTE *)v8 + 56) = 1;
    return;
  }
  v10 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((_QWORD *)this + 10, &v17);
  if (!v10)
  {
    v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      return;
    *(_DWORD *)buf = 136315650;
    v19 = "CvmGenerator.mm";
    v20 = 1024;
    v21 = 545;
    v22 = 2048;
    v23 = v17;
    v13 = "%25s:%-5d Generator:SetParameter: was called with an invalid inParameterId %lld!";
    goto LABEL_12;
  }
  v11 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((_QWORD *)this + 15, &v17);
  if (v11)
  {
    v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11) + 384));
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      return;
    *(_DWORD *)buf = 136315650;
    v19 = "CvmGenerator.mm";
    v20 = 1024;
    v21 = 539;
    v22 = 2048;
    v23 = v17;
    v13 = "%25s:%-5d Generator:SetParameter: was called with an illegal temporal inParameterId %lld!";
LABEL_12:
    _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_DEBUG, v13, buf, 0x1Cu);
    return;
  }
  v14 = (Phase::Controller::VoiceData *)*((_QWORD *)this + 20);
  v15 = (Phase::Controller::VoiceData *)*((_QWORD *)this + 21);
  if (v14 != v15)
  {
    v16 = *((_DWORD *)v10 + 6);
    do
    {
      Phase::Controller::VoiceData::SetParameter(v14, v16, a3, a4);
      v14 = (Phase::Controller::VoiceData *)((char *)v14 + 96);
    }
    while (v14 != v15);
  }
}

double Phase::Controller::Generator::GetGain(Phase::Controller::Generator *this)
{
  double CorrectionGain;
  double *v3;

  CorrectionGain = Phase::Controller::Generator::GetCorrectionGain(this);
  v3 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)this + 31, qword_24D5785F8);
  if (!v3)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return CorrectionGain * v3[6] * *((double *)this + 39);
}

double Phase::Controller::Generator::GetCorrectionGain(Phase::Controller::Generator *this)
{
  uint64_t v1;
  uint64_t v2;
  double result;
  double v4;

  v1 = *((_QWORD *)this + 24);
  if (!v1)
    return *((double *)this + 25);
  v2 = *((_QWORD *)this + 2);
  if (v1 == 2)
  {
    v4 = *((double *)this + 25);
    return exp((v4 - (*(double *)(v2 + 24) + *((double *)this + 26))) * 10.0 / 10.0 * 0.115129255);
  }
  result = 1.0;
  if (v1 == 1)
  {
    v4 = *(double *)(v2 + 64) + *((double *)this + 25);
    return exp((v4 - (*(double *)(v2 + 24) + *((double *)this + 26))) * 10.0 / 10.0 * 0.115129255);
  }
  return result;
}

void Phase::Controller::Generator::Update(Phase::Controller::Generator *this, double a2, int a3)
{
  int v6;
  __n128 v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;

  v6 = *((unsigned __int8 *)this + 392);
  *((_BYTE *)this + 392) = 0;
  if (v6)
    Phase::Controller::Generator::SetVoiceState((uint64_t)this, 0);
  switch(*((_DWORD *)this + 94))
  {
    case 0:
    case 3:
      if (v6 || !*((_DWORD *)this + 95))
        goto LABEL_5;
      return;
    case 1:
      if (!a3)
        return;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), *((_QWORD *)this + 29), *((_QWORD *)this + 30));
      if (v6)
        goto LABEL_5;
      Phase::Controller::Generator::DistanceCull(this);
      v8 = *((_DWORD *)this + 127);
      if (!v8)
      {
        if (!*((_BYTE *)this + 512))
          (*(void (**)(Phase::Controller::Generator *, double))(*(_QWORD *)this + 104))(this, *((double *)this + 46));
        goto LABEL_36;
      }
      if (v8 > 2 || *((_BYTE *)this + 512))
        goto LABEL_36;
      v9 = *((_QWORD *)this + 45);
      switch(v9)
      {
        case 1:
          *((_QWORD *)this + 46) = 0;
          v7.n128_u64[0] = 0;
          break;
        case 3:
          v7.n128_u64[0] = *((_QWORD *)this + 46);
          break;
        case 2:
          v7.n128_f64[0] = (*(double (**)(Phase::Controller::Generator *, uint64_t, double))(*(_QWORD *)this + 96))(this, 2, *((double *)this + 46));
          *((_QWORD *)this + 46) = v7.n128_u64[0];
          break;
        default:
LABEL_35:
          Phase::Controller::Generator::SetSleepState((uint64_t)this, 0);
LABEL_36:
          Phase::Controller::Generator::SetState((uint64_t)this, 2u);
          return;
      }
      (*(void (**)(Phase::Controller::Generator *, __n128))(*(_QWORD *)this + 104))(this, v7);
      goto LABEL_35;
    case 2:
      if (v6)
      {
        v10 = *((_DWORD *)this + 127);
        if (v10 == 2)
        {
          Phase::Controller::Generator::SetSleepState((uint64_t)this, 0);
        }
        else if (!v10)
        {
LABEL_5:
          Phase::Controller::Generator::Finish(this);
          return;
        }
      }
      if (!*((_BYTE *)this + 512))
      {
        Phase::Controller::Generator::DistanceCull(this);
        if (!*((_DWORD *)this + 127))
        {
          v11 = *((_DWORD *)this + 95);
          if (v11 == 1)
          {
            Phase::Controller::Generator::UpdateParameters(this, a2, *((unsigned __int8 *)this + 384));
            *((_BYTE *)this + 384) = 0;
          }
          else if (!v11)
          {
            Phase::Controller::Generator::SetState((uint64_t)this, 1u);
          }
        }
        *((double *)this + 46) = *((double *)this + 46) + a2;
      }
      return;
    default:
      return;
  }
}

void Phase::Controller::Generator::SetVoiceState(uint64_t a1, unsigned int a2)
{
  Phase::Logger *InstancePtr;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr((Phase::Logger *)a1);
  if (*((_BYTE *)InstancePtr + 1552))
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr) + 384));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(int *)(a1 + 380);
      if (v6 > 2)
        v7 = "<not found>";
      else
        v7 = off_24D5786E8[v6];
      v8 = *(_QWORD *)(a1 + 416);
      v9 = *(_QWORD *)(a1 + 400);
      v10 = *(_QWORD *)(a1 + 232);
      if (a2 > 2)
        v11 = "<not found>";
      else
        v11 = off_24D5786E8[a2];
      v12 = 136316674;
      v13 = "CvmGenerator.mm";
      v14 = 1024;
      v15 = 1172;
      v16 = 2048;
      v17 = v8;
      v18 = 2048;
      v19 = v9;
      v20 = 2048;
      v21 = v10;
      v22 = 2080;
      v23 = v7;
      v24 = 2080;
      v25 = v11;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu, generator: %llu) - voice state changed from '%s' to '%s'", (uint8_t *)&v12, 0x44u);
    }
  }
  *(_DWORD *)(a1 + 380) = a2;
}

void Phase::Controller::Generator::DistanceCull(Phase::Controller::Generator *this)
{
  double v1;

  if (*((_DWORD *)this + 94) == 2)
  {
    v1 = *((double *)this + 39);
    if (*((_DWORD *)this + 127))
    {
      if (v1 > 0.0 && !*((_BYTE *)this + 504))
        Phase::Controller::Generator::Wake_Internal(this);
    }
    else if (v1 <= 0.0)
    {
      Phase::Controller::Generator::Sleep_Internal(this);
    }
  }
}

void Phase::Controller::Generator::UpdateParameters(Phase::Controller::Generator *this, double a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  double v10;
  Phase::Controller::VoiceData *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *i;
  void *__p[3];

  Phase::Controller::Generator::UpdateCombinatorialParameters(this);
  v6 = *((_QWORD *)this + 20);
  v7 = *((_QWORD *)this + 21);
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 5) != 0x4EC4EC4EC4EC4EC5
                                                * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 23) + 24)
                                                           - *(_QWORD *)(*((_QWORD *)this + 23) + 16)) >> 3))
    std::terminate();
  if (v7 != v6)
  {
    v8 = 0;
    v9 = 0.016666;
    if (a2 <= 0.016666)
      v9 = a2;
    if (a3)
      v10 = 0.0;
    else
      v10 = v9;
    do
    {
      v11 = (Phase::Controller::VoiceData *)(v6 + 96 * v8);
      if (std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((_QWORD *)this + 10, qword_24D578688))
      {
        v12 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((_QWORD *)this + 10, qword_24D578688);
        if (!v12)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        Phase::Controller::VoiceData::SetParameter(v11, *((_DWORD *)v12 + 6), v10, 0);
      }
      v13 = *((_QWORD *)this + 4);
      v14 = *(_QWORD *)v11;
      v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 16) + 104 * v8);
      Phase::Controller::VoiceData::PackDirtyDspParameters(v11, __p);
      Phase::Controller::DVM::VoiceGraph::SetParameters(*(Phase::Controller::DVM::VoiceGraph **)(*(_QWORD *)v13 + 72), v14, v15, __p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      for (i = (uint64_t *)*((_QWORD *)v11 + 4); i; i = (uint64_t *)*i)
        *((_BYTE *)i + 56) = 0;
      ++v8;
      v6 = *((_QWORD *)this + 20);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 21) - v6) >> 5) > v8);
  }
}

void sub_21650D3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::Generator::SubmitGeneratorStoppedResult(uint64_t result, uint64_t a2, const std::error_category *a3, _QWORD *a4)
{
  NSObject *v4;
  void *exception;
  std::error_code v6;
  std::string buf;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v6.__val_ = a2;
  v6.__cat_ = a3;
  if ((_DWORD)a2 == 1)
  {
    v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result) + 384));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"CvmGenerator.mm";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 727;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inErrorCode.value() == true is true]: inErrorCode.message()", (uint8_t *)&buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    std::error_code::message(&buf, &v6);
    MEMORY[0x2199F9908](exception, &buf);
  }
  *(_BYTE *)(result + 392) = 1;
  *(_QWORD *)(result + 520) = *a4;
  return result;
}

void sub_21650D4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void Phase::Controller::Generator::Sleep_Internal(Phase::Controller::Generator *this)
{
  int v2;
  uint64_t v3;

  if ((*((_DWORD *)this + 94) - 3) >= 2)
  {
    v2 = *((_DWORD *)this + 127);
    if (v2 == 2)
    {
      Phase::Controller::Generator::SetSleepState((uint64_t)this, 1u);
    }
    else if (!v2)
    {
      v3 = *((_QWORD *)this + 45);
      if ((unint64_t)(v3 - 1) >= 3)
      {
        if (!v3)
          Phase::Controller::Generator::Stop(this);
      }
      else
      {
        Phase::Controller::Generator::SetSleepState((uint64_t)this, 1u);
        (*(void (**)(Phase::Controller::Generator *, _QWORD))(*(_QWORD *)this + 112))(this, 0);
      }
    }
  }
}

void Phase::Controller::Generator::Wake_Internal(Phase::Controller::Generator *this)
{
  unsigned int v2;

  if ((*((_DWORD *)this + 94) - 3) >= 2 && !*((_BYTE *)this + 504) && *((_DWORD *)this + 127) == 1)
  {
    v2 = *((_DWORD *)this + 95);
    if (v2 != 2)
    {
      if (v2)
      {
        v2 = 0;
      }
      else
      {
        Phase::Controller::Generator::SetState((uint64_t)this, 1u);
        v2 = 2;
      }
    }
    Phase::Controller::Generator::SetSleepState((uint64_t)this, v2);
  }
}

uint64_t Phase::Controller::Generator::ConfigureDspGenerator(Phase::Controller::Generator *this, double a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  Phase::Controller::VoiceData *v6;
  Phase::Controller::VoiceData *j;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *k;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t *m;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  void *__p[2];
  uint64_t v25;
  void **v26;

  Phase::Controller::Generator::UpdateCombinatorialParameters(this);
  v3 = *((_QWORD *)this + 23);
  v5 = *(_QWORD *)(v3 + 16);
  for (i = *(_QWORD *)(v3 + 24);
        i != v5;
        std::allocator<Phase::Controller::DspNodeVoice>::destroy[abi:ne180100](v3 + 32, i))
  {
    i -= 104;
  }
  *(_QWORD *)(v3 + 24) = v5;
  (*(void (**)(Phase::Controller::Generator *, double))(*(_QWORD *)this + 120))(this, *((double *)this + 46));
  v6 = (Phase::Controller::VoiceData *)*((_QWORD *)this + 20);
  for (j = (Phase::Controller::VoiceData *)*((_QWORD *)this + 21);
        v6 != j;
        v6 = (Phase::Controller::VoiceData *)((char *)v6 + 96))
  {
    v8 = (unint64_t *)*((_QWORD *)this + 28);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    *((_QWORD *)v6 + 1) = v9;
    for (k = (uint64_t *)*((_QWORD *)v6 + 4); k; k = (uint64_t *)*k)
      *((_BYTE *)k + 56) = 1;
    v11 = (uint64_t *)*((_QWORD *)this + 23);
    Phase::Controller::VoiceData::CreateDspNodeVoice(v6, (uint64_t)&v17);
    v12 = (_QWORD *)v11[3];
    if ((unint64_t)v12 >= v11[4])
    {
      v13 = std::vector<Phase::Controller::DspNodeVoice>::__push_back_slow_path<Phase::Controller::DspNodeVoice>(v11 + 2, (uint64_t)&v17);
      v14 = __p[0];
      v11[3] = v13;
      if (v14)
      {
        __p[1] = v14;
        operator delete(v14);
      }
    }
    else
    {
      *v12 = v17;
      v12[1] = 0;
      v12[3] = 0;
      v12[4] = 0;
      v12[2] = 0;
      *(_OWORD *)(v12 + 1) = v18;
      v12[3] = v19;
      v18 = 0uLL;
      v19 = 0;
      v12[5] = 0;
      v12[6] = 0;
      *((_OWORD *)v12 + 2) = *(_OWORD *)v20;
      v12[6] = v21;
      v12[7] = 0;
      v20[0] = 0;
      v20[1] = 0;
      v21 = 0;
      v12[8] = 0;
      v12[9] = 0;
      *(_OWORD *)(v12 + 7) = *(_OWORD *)v22;
      v22[0] = 0;
      v22[1] = 0;
      v12[9] = v23;
      v12[10] = 0;
      v23 = 0;
      v12[11] = 0;
      v12[12] = 0;
      *((_OWORD *)v12 + 5) = *(_OWORD *)__p;
      v12[12] = v25;
      __p[0] = 0;
      __p[1] = 0;
      v25 = 0;
      v11[3] = (uint64_t)(v12 + 13);
    }
    if (v22[0])
    {
      v22[1] = v22[0];
      operator delete(v22[0]);
    }
    if (v20[0])
    {
      v20[1] = v20[0];
      operator delete(v20[0]);
    }
    v26 = (void **)&v18;
    std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v26);
    for (m = (uint64_t *)*((_QWORD *)v6 + 4); m; m = (uint64_t *)*m)
      *((_BYTE *)m + 56) = 0;
  }
  return (*(uint64_t (**)(Phase::Controller::Generator *))(*(_QWORD *)this + 88))(this);
}

void sub_21650D834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Phase::Controller::DspNodeVoice::~DspNodeVoice((Phase::Controller::DspNodeVoice *)&a9);
  _Unwind_Resume(a1);
}

void Phase::Controller::Generator::UpdateCombinatorialParameters(Phase::Controller::Generator *this)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  double Gain;
  _QWORD *v7;
  Phase::Controller::VoiceData *v8;
  Phase::Controller::VoiceData *v9;
  int v10;
  double *v11;
  double v12;
  _QWORD *v13;
  Phase::Controller::VoiceData *v14;
  Phase::Controller::VoiceData *v15;
  int v16;
  double *v17;
  double v18;
  _QWORD *v19;
  Phase::Controller::VoiceData *v20;
  Phase::Controller::VoiceData *v21;
  int v22;
  double *v23;
  double v24;
  _QWORD *v25;
  Phase::Controller::VoiceData *v26;
  Phase::Controller::VoiceData *v27;
  int v28;

  v1 = (_QWORD *)*((_QWORD *)this + 33);
  if (v1)
  {
    v3 = (_QWORD *)((char *)this + 80);
    v4 = (_QWORD *)((char *)this + 248);
    do
    {
      v5 = v1[2];
      if (v5 > 0x8119B92FBF5002FLL)
      {
        if (v5 == 0x8119B92FBF50030)
        {
          v23 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v4, qword_24D578658);
          if (!v23)
            goto LABEL_37;
          v24 = v23[6];
          if (v24 != *((double *)this + 43))
          {
            v25 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(v3, v1 + 2);
            if (!v25)
LABEL_37:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            v27 = (Phase::Controller::VoiceData *)*((_QWORD *)this + 20);
            v26 = (Phase::Controller::VoiceData *)*((_QWORD *)this + 21);
            if (v27 != v26)
            {
              v28 = *((_DWORD *)v25 + 6);
              do
              {
                Phase::Controller::VoiceData::SetParameter(v27, v28, v24, 0);
                v27 = (Phase::Controller::VoiceData *)((char *)v27 + 96);
              }
              while (v27 != v26);
            }
            *((double *)this + 43) = v24;
          }
        }
        else if (v5 == 0x81FBB92FC0173ECLL)
        {
          v11 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v4, qword_24D578628);
          if (!v11)
            goto LABEL_37;
          v12 = v11[6];
          if (v12 != *((double *)this + 42))
          {
            v13 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(v3, v1 + 2);
            if (!v13)
              goto LABEL_37;
            v15 = (Phase::Controller::VoiceData *)*((_QWORD *)this + 20);
            v14 = (Phase::Controller::VoiceData *)*((_QWORD *)this + 21);
            if (v15 != v14)
            {
              v16 = *((_DWORD *)v13 + 6);
              do
              {
                Phase::Controller::VoiceData::SetParameter(v15, v16, v12, 0);
                v15 = (Phase::Controller::VoiceData *)((char *)v15 + 96);
              }
              while (v15 != v14);
            }
            *((double *)this + 42) = v12;
          }
        }
      }
      else if (v5 == 0x981F232BD33EC927)
      {
        v17 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v4, qword_24D5785C8);
        if (!v17)
          goto LABEL_37;
        v18 = v17[6];
        if (v18 != *((double *)this + 44))
        {
          v19 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(v3, v1 + 2);
          if (!v19)
            goto LABEL_37;
          v21 = (Phase::Controller::VoiceData *)*((_QWORD *)this + 20);
          v20 = (Phase::Controller::VoiceData *)*((_QWORD *)this + 21);
          if (v21 != v20)
          {
            v22 = *((_DWORD *)v19 + 6);
            do
            {
              Phase::Controller::VoiceData::SetParameter(v21, v22, v18, 0);
              v21 = (Phase::Controller::VoiceData *)((char *)v21 + 96);
            }
            while (v21 != v20);
          }
          *((double *)this + 44) = v18;
        }
      }
      else if (v5 == 0xB5767F7E05AD941ELL)
      {
        Gain = Phase::Controller::Generator::GetGain(this);
        if (Gain != *((double *)this + 41))
        {
          v7 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(v3, v1 + 2);
          if (!v7)
            goto LABEL_37;
          v9 = (Phase::Controller::VoiceData *)*((_QWORD *)this + 20);
          v8 = (Phase::Controller::VoiceData *)*((_QWORD *)this + 21);
          if (v9 != v8)
          {
            v10 = *((_DWORD *)v7 + 6);
            do
            {
              Phase::Controller::VoiceData::SetParameter(v9, v10, Gain, 0);
              v9 = (Phase::Controller::VoiceData *)((char *)v9 + 96);
            }
            while (v9 != v8);
          }
          *((double *)this + 41) = Gain;
        }
      }
      v1 = (_QWORD *)*v1;
    }
    while (v1);
  }
}

void Phase::Controller::Generator::StartVoices(Phase::Controller::Generator *this, double a2)
{
  double v3;

  Phase::Controller::DVM::VoiceGraph::AddGenerator(*(_QWORD *)(**((_QWORD **)this + 4) + 72), *(char *)(*((_QWORD *)this + 23) + 40), *((_QWORD *)this + 29), *((_QWORD *)this + 30), *((_QWORD *)this + 50), *((_QWORD *)this + 51));
  Phase::Controller::Generator::ConfigureDspGenerator(this, v3);
  Phase::Controller::Generator::SetVoiceState((uint64_t)this, 1u);
  Phase::Controller::Generator::UpdateParameters(this, 0.0, *((unsigned __int8 *)this + 384));
}

void Phase::Controller::Generator::StopVoices(Phase::Controller::Generator *this)
{
  if (*((_DWORD *)this + 95) == 1)
  {
    Phase::Controller::DVM::VoiceGraph::RemoveGenerator(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 4) + 72), *((_QWORD *)this + 29), *((_QWORD *)this + 30));
    Phase::Controller::Generator::SetVoiceState((uint64_t)this, 2u);
  }
}

void std::vector<Phase::Controller::VoiceData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<Phase::Controller::VoiceData>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<Phase::Controller::VoiceData>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  void **v5;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 96)
  {
    v5 = (void **)(i - 40);
    std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v5);
    result = std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(i - 80);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,Phase::Controller::Parameter<double>>(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  __int128 v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_QWORD *)v12 + 2) == v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  v12 = (char *)operator new(0x40uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_QWORD *)v12 + 2) = *a3;
  v14 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)a4;
  *(_OWORD *)(v12 + 40) = v14;
  *((_QWORD *)v12 + 7) = *(_QWORD *)(a4 + 32);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v12 = *v22;
LABEL_38:
    *v22 = v12;
    goto LABEL_39;
  }
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v23 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_21650DE50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t Phase::Controller::MatrixRenderer::MatrixRenderer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  _DWORD *v14;
  int v15;
  uint8x8_t v16;
  _BOOL8 v17;
  NSObject *v19;
  std::logic_error *exception;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v13 = Phase::Controller::Renderer::Renderer(a1, a2, *(_DWORD *)(a3 + 8));
  *(_QWORD *)v13 = off_24D578710;
  *(_QWORD *)(v13 + 56) = a5;
  *(_QWORD *)(v13 + 64) = a6;
  *(_BYTE *)(v13 + 72) = 1;
  *(_QWORD *)(v13 + 80) = a7;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 96) = 0;
  *(_QWORD *)(v13 + 104) = 0;
  *(_DWORD *)(v13 + 111) = 0;
  *(_DWORD *)(v13 + 128) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(v13 + 120) = &off_24D578138;
  *(_QWORD *)(v13 + 144) = 0;
  *(_QWORD *)(v13 + 152) = 0;
  *(_QWORD *)(v13 + 136) = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((_QWORD *)(v13 + 136), *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16));
  *(_DWORD *)(a1 + 160) = 2;
  *(_QWORD *)(a1 + 168) = a4;
  *(_DWORD *)(a1 + 176) = 0;
  Phase::Controller::DVM::VoiceGraph::AddRenderer(*(Phase::Controller::DVM::VoiceGraph **)(**(_QWORD **)(a1 + 56) + 72), *(_QWORD *)(a1 + 40), 0xFFFFFFFFFFFFFFFELL);
  v14 = *(_DWORD **)(Phase::Controller::SpatializerManager::GetActiveSpatializer(*(Phase::Controller::SpatializerManager **)(a1 + 80))
                   + 24);
  if (*v14 == 0x10000)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v14[1]);
    v16.i16[0] = vaddlv_u8(v16);
    v15 = v16.i32[0];
  }
  else if (*v14)
  {
    v15 = (unsigned __int16)*v14;
  }
  else
  {
    v15 = v14[2];
  }
  v17 = Phase::Controller::MatrixRenderer::ConfigureMatrixMixerVoiceNode((Phase::Controller::MatrixRenderer *)a1, v15);
  if (!v17)
  {
    v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v17) + 496));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v21 = 136315650;
      v22 = "CvmMatrixRenderer.mm";
      v23 = 1024;
      v24 = 37;
      v25 = 1024;
      v26 = v15;
      _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!ConfigureMatrixMixerVoiceNode(numberOfOutputChannels) is true]: \"Couldn't find a Voice Pool for %d channels!\"", (uint8_t *)&v21, 0x18u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Couldn't find a Voice Pool for %d channels!");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  *(_DWORD *)(a1 + 176) = v15;
  *(_WORD *)(a1 + 112) = 0;
  return a1;
}

void sub_21650E124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  void *v13;

  __cxa_free_exception(v10);
  v9[15] = v11;
  v13 = (void *)v9[17];
  if (v13)
  {
    v9[18] = v13;
    operator delete(v13);
  }
  std::vector<Phase::Controller::VoiceData>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v9);
  _Unwind_Resume(a1);
}

BOOL Phase::Controller::MatrixRenderer::ConfigureMatrixMixerVoiceNode(Phase::Controller::MatrixRenderer *this, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  Phase::Logger *v15;
  const Phase::Controller::VoicePoolEntry *v16;
  _QWORD *v17;
  unsigned int i;
  _DWORD *v19;
  unsigned int v20;
  uint8x8_t v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  NSObject *v32;
  uint64_t v33;
  const char *v34;
  NSObject *v35;
  uint32_t v36;
  _BOOL8 v37;
  Phase::Controller::VoiceData *v38;
  Phase::Controller::VoiceData *j;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  Phase::Logger *v45;
  NSObject *v46;
  uint64_t v47;
  NSObject *v48;
  const Phase::Controller::VoicePoolEntry *v49;
  uint64_t v50;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  void **v58;
  _BYTE buf[48];
  uint64_t v60;
  void *v61[2];
  uint64_t v62;
  void *__p[2];
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 1:
    case 2:
      v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 496));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *((_QWORD *)this + 5);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "CvmMatrixRenderer.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 236;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v13;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = a2;
        _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MatrixRenderer: rendererId %llu is now using MatrixMixer1x2 for %d output channels! \n", buf, 0x22u);
      }
      v6 = 0xD0B8A19AAC0ALL;
      goto LABEL_14;
    case 3:
    case 4:
    case 5:
    case 6:
      v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 496));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *((_QWORD *)this + 5);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "CvmMatrixRenderer.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 247;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v5;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = a2;
        _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MatrixRenderer: rendererId %llu is now using MatrixMixer1x6 for %d output channels! \n", buf, 0x22u);
      }
      v6 = 0xCCB8A19AA53ELL;
      goto LABEL_14;
    case 7:
    case 8:
      v10 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 496));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)this + 5);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "CvmMatrixRenderer.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 256;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v11;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = a2;
        _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MatrixRenderer: rendererId %llu is now using MatrixMixer1x8 for %d output channels! \n", buf, 0x22u);
      }
      v6 = 0xC6B8A19A9B0CLL;
LABEL_14:
      v9 = v6 & 0xFFFFFFFFFFFFLL | 0xC1F9000000000000;
      goto LABEL_15;
    case 9:
    case 10:
    case 11:
    case 12:
      v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 496));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *((_QWORD *)this + 5);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "CvmMatrixRenderer.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 267;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v8;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = a2;
        _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MatrixRenderer: rendererId %llu is now using MatrixMixer1x12 for %d output channels! \n", buf, 0x22u);
      }
      v9 = 0x36265BBA99CF899FLL;
LABEL_15:
      v14 = *((_QWORD *)this + 8);
      *(_QWORD *)buf = v9;
      v15 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)(v14 + 40), (unint64_t *)buf);
      if (v15 && (v16 = (const Phase::Controller::VoicePoolEntry *)*((_QWORD *)v15 + 3)) != 0)
      {
        v17 = (_QWORD *)((char *)this + 88);
        std::vector<Phase::Controller::VoiceData>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 88, *((_QWORD *)this + 11));
        for (i = 0; ; ++i)
        {
          v19 = (_DWORD *)*((_QWORD *)this + 17);
          if (*v19 == 0x10000)
          {
            v21 = (uint8x8_t)vcnt_s8((int8x8_t)v19[1]);
            v21.i16[0] = vaddlv_u8(v21);
            v20 = v21.i32[0];
          }
          else
          {
            v20 = *v19 ? (unsigned __int16)*v19 : v19[2];
          }
          if (i >= v20)
            break;
          v22 = (unint64_t *)*((_QWORD *)this + 21);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 + 1, v22));
          v25 = *((_QWORD *)this + 12);
          v24 = *((_QWORD *)this + 13);
          if (v25 >= v24)
          {
            v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *v17) >> 5);
            v28 = v27 + 1;
            if (v27 + 1 > 0x2AAAAAAAAAAAAAALL)
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *v17) >> 5);
            if (2 * v29 > v28)
              v28 = 2 * v29;
            if (v29 >= 0x155555555555555)
              v30 = 0x2AAAAAAAAAAAAAALL;
            else
              v30 = v28;
            *(_QWORD *)&buf[32] = (char *)this + 104;
            if (v30)
              v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::VoiceData>>((uint64_t)this + 104, v30);
            else
              v31 = 0;
            *(_QWORD *)buf = v31;
            *(_QWORD *)&buf[8] = &v31[96 * v27];
            *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
            *(_QWORD *)&buf[24] = &v31[96 * v30];
            Phase::Controller::VoiceData::VoiceData(*(Phase::Controller::VoiceData **)&buf[8], v16, v23);
            *(_QWORD *)&buf[16] += 96;
            std::vector<Phase::Controller::VoiceData>::__swap_out_circular_buffer((uint64_t *)this + 11, buf);
            v26 = *((_QWORD *)this + 12);
            std::__split_buffer<Phase::Controller::VoiceData>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            Phase::Controller::VoiceData::VoiceData(*((Phase::Controller::VoiceData **)this + 12), v16, v23);
            v26 = v25 + 96;
            *((_QWORD *)this + 12) = v25 + 96;
          }
          *((_QWORD *)this + 12) = v26;
        }
        v56 = 0;
        v57 = 0;
        v54 = *((_QWORD *)v16 + 3);
        v55 = 0;
        v38 = (Phase::Controller::VoiceData *)*((_QWORD *)this + 11);
        for (j = (Phase::Controller::VoiceData *)*((_QWORD *)this + 12);
              v38 != j;
              v38 = (Phase::Controller::VoiceData *)((char *)v38 + 96))
        {
          Phase::Controller::VoiceData::CreateDspNodeVoice(v38, (uint64_t)buf);
          v40 = v56;
          if ((unint64_t)v56 >= v57)
          {
            v56 = (_QWORD *)std::vector<Phase::Controller::DspNodeVoice>::__push_back_slow_path<Phase::Controller::DspNodeVoice>(&v55, (uint64_t)buf);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            *v56 = *(_QWORD *)buf;
            v40[1] = 0;
            v40[3] = 0;
            v40[4] = 0;
            v40[2] = 0;
            *(_OWORD *)(v40 + 1) = *(_OWORD *)&buf[8];
            v40[3] = *(_QWORD *)&buf[24];
            memset(&buf[8], 0, 24);
            v40[5] = 0;
            v40[6] = 0;
            *((_OWORD *)v40 + 2) = *(_OWORD *)&buf[32];
            v40[6] = v60;
            v40[7] = 0;
            *(_OWORD *)&buf[32] = 0uLL;
            v60 = 0;
            v40[8] = 0;
            v40[9] = 0;
            *(_OWORD *)(v40 + 7) = *(_OWORD *)v61;
            v61[0] = 0;
            v61[1] = 0;
            v40[9] = v62;
            v40[10] = 0;
            v62 = 0;
            v40[11] = 0;
            v40[12] = 0;
            *((_OWORD *)v40 + 5) = *(_OWORD *)__p;
            v40[12] = v64;
            __p[0] = 0;
            __p[1] = 0;
            v64 = 0;
            v56 = v40 + 13;
          }
          if (v61[0])
          {
            v61[1] = v61[0];
            operator delete(v61[0]);
          }
          if (*(_QWORD *)&buf[32])
          {
            *(_QWORD *)&buf[40] = *(_QWORD *)&buf[32];
            operator delete(*(void **)&buf[32]);
          }
          v58 = (void **)&buf[8];
          std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v58);
        }
        v41 = *((_QWORD *)this + 7);
        v42 = *((_QWORD *)this + 5);
        v43 = *((_DWORD *)this + 40);
        memset(buf, 0, 24);
        v44 = Phase::Controller::DVM::VoiceGraph::ConfigureRenderer(*(_QWORD *)(*(_QWORD *)v41 + 72), v42, v43, (uint64_t)&v54, (uint64_t *)buf);
        v58 = (void **)buf;
        std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](&v58);
        v37 = v44 == 0;
        if (v44)
        {
          v46 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v45) + 496));
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          {
            v47 = *((_QWORD *)this + 5);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "CvmMatrixRenderer.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 310;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v47;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v44;
            _os_log_impl(&dword_2164CC000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d MatrixMixerRenderer: Failed to configure rendererId %llu, with error %hhd! \n", buf, 0x22u);
          }
        }
        else
        {
          v48 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v45)
                                                                                              + 496)));
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            if (*((char *)v16 + 23) >= 0)
              v49 = v16;
            else
              v49 = *(const Phase::Controller::VoicePoolEntry **)v16;
            v50 = *((_QWORD *)this + 5);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "CvmMatrixRenderer.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 315;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v49;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v50;
            _os_log_impl(&dword_2164CC000, v48, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MatrixMixerRenderer: creating a %s voice pool for rendererId %llu! \n", buf, 0x26u);
          }

        }
        *(_QWORD *)buf = &v55;
        std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      else
      {
        v32 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15) + 496));
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          v33 = *((_QWORD *)this + 5);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "CvmMatrixRenderer.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 285;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v33;
          v34 = "%25s:%-5d MatrixMixerRenderer: Failed to get voice pool registry entry for rendererId %llu! \n";
          v35 = v32;
          v36 = 28;
LABEL_41:
          _os_log_impl(&dword_2164CC000, v35, OS_LOG_TYPE_ERROR, v34, buf, v36);
        }
        return 0;
      }
      return v37;
    default:
      v52 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 496));
      if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
        return 0;
      v53 = *((_QWORD *)this + 5);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "CvmMatrixRenderer.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 275;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v53;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = a2;
      v34 = "%25s:%-5d MatrixRenderer: rendererId %llu doesn't support %d output channels! \n";
      v35 = v52;
      v36 = 34;
      goto LABEL_41;
  }
}

void sub_21650E9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Phase::Controller::MatrixRenderer::~MatrixRenderer(Phase::Controller::MatrixRenderer *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void **v8;

  *(_QWORD *)this = off_24D578710;
  Phase::Controller::DVM::VoiceGraph::RemoveRenderer(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 7) + 72), *((_QWORD *)this + 5));
  v2 = (_QWORD *)*((_QWORD *)this + 11);
  v3 = (_QWORD *)*((_QWORD *)this + 12);
  while (v2 != v3)
  {
    std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(v2 + 2);
    v5 = v2[7];
    v4 = v2[8];
    if (v4 != v5)
    {
      do
      {
        v6 = v4 - 32;
        std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v4 - 24);
        v4 = v6;
      }
      while (v6 != v5);
    }
    v2[8] = v5;
    v2 += 12;
  }
  *((_QWORD *)this + 15) = &off_24D578138;
  v7 = (void *)*((_QWORD *)this + 17);
  if (v7)
  {
    *((_QWORD *)this + 18) = v7;
    operator delete(v7);
  }
  v8 = (void **)((char *)this + 88);
  std::vector<Phase::Controller::VoiceData>::__destroy_vector::operator()[abi:ne180100](&v8);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  Phase::Controller::MatrixRenderer::~MatrixRenderer(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::MatrixRenderer::AddSubmix(Phase::Logger *a1, unint64_t a2, unint64_t a3, double a4)
{
  NSObject *v4;
  std::logic_error *exception;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!(a2 | a3))
  {
    v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 496));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315394;
      v7 = "CvmMatrixRenderer.mm";
      v8 = 1024;
      v9 = 59;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [inSubmixId == kInvalidSubmixId is true]: \"Invalid SubmixId!\"", (uint8_t *)&v6, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid SubmixId!");
  }
  Phase::Controller::MatrixRenderer::UpdateSubmixToRendererConnection((uint64_t)a1, a2, a3, a4);
}

void sub_21650EC24(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void Phase::Controller::MatrixRenderer::UpdateSubmixToRendererConnection(uint64_t a1, unint64_t a2, unint64_t a3, double a4)
{
  double v6;
  NSObject *v9;
  unint64_t v10;
  Phase::Logger *v11;
  NSObject *v12;
  double v13;
  const char *v14;
  double v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  double v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)(a1 + 160))
  {
    v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 496));
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      return;
    v15 = *(double *)(a1 + 40);
    v16 = 136315906;
    v17 = "CvmMatrixRenderer.mm";
    v18 = 1024;
    v19 = 188;
    v20 = 2048;
    v21 = a2;
    v22 = 2048;
    v23 = v15;
    v14 = "%25s:%-5d MatrixMixerRenderer: Trying to connect submixId %llu to a stopped rendererId %llu! \n";
    goto LABEL_14;
  }
  v6 = a4;
  if (a4 < 0.0 || a4 > 1.0)
  {
    v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 496));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(a1 + 40);
      v16 = 136316418;
      v17 = "CvmMatrixRenderer.mm";
      v18 = 1024;
      v19 = 171;
      v20 = 2048;
      v21 = v10;
      v22 = 2048;
      v23 = v6;
      v24 = 2048;
      v25 = 0;
      v26 = 2048;
      v27 = 0x3FF0000000000000;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d (renderer: %llu) send level %f is out of range [%f, %f]. Clamping...", (uint8_t *)&v16, 0x3Au);
    }
    v6 = fmin(fmax(v6, 0.0), 1.0);
  }
  v11 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::ConnectSubmixToRenderer(*(Phase::Controller::DVM::VoiceGraph **)(**(_QWORD **)(a1 + 56) + 72), a2, a3, *(_QWORD *)(a1 + 40), v6);
  if ((_DWORD)v11)
  {
    v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11) + 496));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = *(double *)(a1 + 40);
      v16 = 136315906;
      v17 = "CvmMatrixRenderer.mm";
      v18 = 1024;
      v19 = 180;
      v20 = 2048;
      v21 = a2;
      v22 = 2048;
      v23 = v13;
      v14 = "%25s:%-5d MatrixMixerRenderer: Connecting submixId %llu to rendererId %llu failed! \n";
LABEL_14:
      _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v16, 0x26u);
    }
  }
}

void Phase::Controller::MatrixRenderer::RemoveSubmix(uint64_t a1, unint64_t a2, unint64_t a3)
{
  Phase::Controller::MatrixRenderer::UpdateSubmixToRendererConnection(a1, a2, a3, 0.0);
}

void Phase::Controller::MatrixRenderer::SetSubmixSendLevel(Phase::Logger *a1, unint64_t a2, unint64_t a3, double a4)
{
  NSObject *v5;
  void **v6;
  std::logic_error *exception;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  void **v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!(a2 | a3))
  {
    v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1)
                                                                                       + 496)));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, Phase::Logger *))(*(_QWORD *)a1 + 144))(__p, a1);
      if (v9 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      v11 = "CvmMatrixRenderer.mm";
      v12 = 1024;
      v13 = 72;
      v14 = 2080;
      v15 = v6;
      v16 = 2048;
      v17 = 0;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [inSubmixId == kInvalidSubmixId is true]: \"%s: Invalid SubmixId %llu!\"", buf, 0x26u);
      if (v9 < 0)
        operator delete(__p[0]);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "%s: Invalid SubmixId %llu!");
  }
  Phase::Controller::MatrixRenderer::UpdateSubmixToRendererConnection((uint64_t)a1, a2, a3, a4);
}

void sub_21650EFE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::MatrixRenderer::SetParameters(Phase::Logger *result, _DWORD *a2)
{
  NSObject *v2;
  std::logic_error *exception;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*a2 != 1)
  {
    v2 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 496));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315394;
      v5 = "CvmMatrixRenderer.mm";
      v6 = 1024;
      v7 = 82;
      _os_log_impl(&dword_2164CC000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [pInRendererParameters->mRendererType != RendererType::Matrix is true]: \"Renderer parameters mismatch.\"", (uint8_t *)&v4, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Renderer parameters mismatch.");
  }
  return result;
}

void sub_21650F108(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::MatrixRenderer::NeedsMetadata(Phase::Controller::MatrixRenderer *this)
{
  return 0;
}

uint64_t Phase::Controller::MatrixRenderer::SetPlayState(uint64_t a1, int a2)
{
  uint64_t result;

  result = Phase::Controller::DVM::VoiceGraph::SetRendererPlayState(*(_QWORD *)(**(_QWORD **)(a1 + 56) + 72), *(_QWORD *)(a1 + 40), a2, 0);
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a1 + 160) = a2;
    *(_BYTE *)(a1 + 113) = (a2 & 0xFFFFFFFD) == 1;
  }
  return result;
}

uint64_t Phase::Controller::MatrixRenderer::GetPlayState(Phase::Controller::MatrixRenderer *this)
{
  return *((unsigned int *)this + 40);
}

Phase::Logger *Phase::Controller::MatrixRenderer::SubmitRendererStoppedResult(Phase::Logger *this, std::error_code a2)
{
  NSObject *v2;
  void *exception;
  std::error_code v4;
  std::string buf;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  if (a2.__val_ == 1)
  {
    v2 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 496));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"CvmMatrixRenderer.mm";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 107;
      _os_log_impl(&dword_2164CC000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inErrorCode.value() == true is true]: inErrorCode.message()", (uint8_t *)&buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    std::error_code::message(&buf, &v4);
    MEMORY[0x2199F9908](exception, &buf);
  }
  if (*((_BYTE *)this + 113))
    std::terminate();
  *((_BYTE *)this + 114) = 1;
  return this;
}

void sub_21650F2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void Phase::Controller::MatrixRenderer::Update(Phase::Controller::SpatializerManager **this)
{
  unsigned __int8 *v2;
  int v3;
  uint64_t ActiveSpatializer;
  int v5;
  uint8x8_t v6;
  int **v7;
  unint64_t i;
  int *v9;
  int v10;
  unsigned int v11;
  uint8x8_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t j;
  Phase::Logger *v16;
  int v17;
  NSObject *v18;
  unint64_t v19;
  Phase::Controller::SpatializerManager *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *__p[3];
  uint64_t v25[3];
  _BYTE buf[12];
  __int16 v27;
  int v28;
  __int16 v29;
  Phase::Controller::SpatializerManager *v30;
  __int16 v31;
  unint64_t v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned __int8 *)(this + 9);
  do
  {
    v3 = __ldaxr(v2);
    if (v3 != 1)
    {
      __clrex();
      return;
    }
  }
  while (__stlxr(0, v2));
  ActiveSpatializer = Phase::Controller::SpatializerManager::GetActiveSpatializer(this[10]);
  v22 = 0;
  v23 = 0;
  v21 = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v21, *(const void **)(ActiveSpatializer + 24), *(_QWORD *)(ActiveSpatializer + 32), *(_QWORD *)(ActiveSpatializer + 32) - *(_QWORD *)(ActiveSpatializer + 24));
  if (*(_DWORD *)v21 == 0x10000)
  {
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v21 + 1));
    v6.i16[0] = vaddlv_u8(v6);
    v5 = v6.i32[0];
  }
  else if (*(_DWORD *)v21)
  {
    v5 = (unsigned __int16)*(_DWORD *)v21;
  }
  else
  {
    v5 = *((_DWORD *)v21 + 2);
  }
  if (*((_DWORD *)this + 44) != v5)
  {
    if (!Phase::Controller::MatrixRenderer::ConfigureMatrixMixerVoiceNode((Phase::Controller::MatrixRenderer *)this, v5))
    {
      (*((void (**)(Phase::Controller::SpatializerManager **, _QWORD, _QWORD))*this + 14))(this, 0, 0);
      *((_BYTE *)this + 112) = 0;
      goto LABEL_34;
    }
    *((_DWORD *)this + 44) = v5;
  }
  v7 = (int **)(this + 17);
  Phase::ChannelLayout::GetCrossmixMatrix((int **)this + 17, (int **)&v21, v25);
  for (i = 0; ; ++i)
  {
    v9 = *v7;
    v10 = **v7;
    if (v10 == 0x10000)
    {
      v12 = (uint8x8_t)vcnt_s8((int8x8_t)v9[1]);
      v12.i16[0] = vaddlv_u8(v12);
      v11 = v12.i32[0];
    }
    else
    {
      v11 = v10 ? (unsigned __int16)**v7 : v9[2];
    }
    if (i >= v11)
      break;
    v13 = (unint64_t *)((char *)this[11] + 96 * i);
    if (*((_DWORD *)this + 44))
    {
      v14 = 0;
      do
      {
        Phase::Controller::VoiceData::SetParameter((Phase::Controller::VoiceData *)v13, v14, *(float *)(*(_QWORD *)(v25[0] + 24 * i) + 4 * v14), 0);
        ++v14;
      }
      while (v14 < *((unsigned int *)this + 44));
    }
    for (j = v13[4]; j; j = *(_QWORD *)j)
      *(_BYTE *)(j + 56) = 1;
    Phase::Controller::VoiceData::PackDirtyDspParameters((Phase::Controller::VoiceData *)v13, __p);
    v16 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::SetParameters(*(Phase::Controller::DVM::VoiceGraph **)(*(_QWORD *)this[7] + 72), *v13, v13[1], __p);
    v17 = (int)v16;
    if ((_DWORD)v16)
    {
      v18 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v16)
                                                                                          + 496)));
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v19 = v13[1];
        v20 = this[5];
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "CvmMatrixRenderer.mm";
        v27 = 1024;
        v28 = 347;
        v29 = 2048;
        v30 = v20;
        v31 = 2048;
        v32 = v19;
        v33 = 1024;
        v34 = v17;
        _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d MatrixMixerRenderer: Failed to set parameters on rendererId %llu, vid %lld, with error %hhd! \n", buf, 0x2Cu);
      }

    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  *(_QWORD *)buf = v25;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *((_BYTE *)this + 112) = 1;
LABEL_34:
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
}

void sub_21650F5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::MatrixRenderer::IsPrepared(Phase::Controller::MatrixRenderer *this)
{
  return *((unsigned __int8 *)this + 112);
}

BOOL Phase::Controller::MatrixRenderer::IsStopped(Phase::Controller::MatrixRenderer *this)
{
  return !*((_BYTE *)this + 113) && *((_BYTE *)this + 114) != 0;
}

BOOL Phase::Controller::MatrixRenderer::IsStopping(Phase::Controller::MatrixRenderer *this)
{
  return *((_BYTE *)this + 113) == 0;
}

uint64_t Phase::Controller::MatrixRenderer::Rebuild(uint64_t this)
{
  atomic_store(1u, (unsigned __int8 *)(this + 72));
  return this;
}

uint64_t Phase::Controller::MatrixRenderer::GetConfig(Phase::Controller::MatrixRenderer *this)
{
  return (uint64_t)this + 120;
}

uint64_t Phase::Controller::MatrixRenderer::GetDescription(Phase::Controller::MatrixRenderer *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD v4[11];
  char v5;
  uint64_t v6;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Renderer (matrix, ", 18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"id ", 3);
  v1 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"impl@", 5);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)")", 1);
  std::stringbuf::str();
  v4[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v4[1] = MEMORY[0x24BEDB848] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2199F9CD4](&v6);
}

void sub_21650F7A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Phase::Controller::VoiceData>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::Controller::VoiceData>,std::reverse_iterator<Phase::Controller::VoiceData*>,std::reverse_iterator<Phase::Controller::VoiceData*>,std::reverse_iterator<Phase::Controller::VoiceData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::VoiceData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::Controller::VoiceData>,std::reverse_iterator<Phase::Controller::VoiceData*>,std::reverse_iterator<Phase::Controller::VoiceData*>,std::reverse_iterator<Phase::Controller::VoiceData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(v9 - 96);
      std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__hash_table(v7 - 80, (uint64_t *)(v9 - 80));
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(v9 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(v9 - 24);
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(v9 - 16);
      v7 = *((_QWORD *)&v15 + 1) - 96;
      *((_QWORD *)&v15 + 1) -= 96;
      v9 -= 96;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::VoiceData>,std::reverse_iterator<Phase::Controller::VoiceData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::VoiceData>,std::reverse_iterator<Phase::Controller::VoiceData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::VoiceData>,std::reverse_iterator<Phase::Controller::VoiceData*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::VoiceData>,std::reverse_iterator<Phase::Controller::VoiceData*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<Phase::Controller::VoiceData>,std::reverse_iterator<std::reverse_iterator<Phase::Controller::VoiceData*>>,std::reverse_iterator<std::reverse_iterator<Phase::Controller::VoiceData*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<Phase::Controller::VoiceData>,std::reverse_iterator<std::reverse_iterator<Phase::Controller::VoiceData*>>,std::reverse_iterator<std::reverse_iterator<Phase::Controller::VoiceData*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t result;
  void **v7;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    v7 = (void **)(i + 56);
    std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v7);
    result = std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(i + 16);
    i = *(_QWORD *)(a2 + 32) + 96;
  }
  return result;
}

uint64_t std::__split_buffer<Phase::Controller::VoiceData>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<Phase::Controller::VoiceData>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<Phase::Controller::VoiceData>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void **v5;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 96;
      v5 = (void **)(v2 - 40);
      std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v5);
      result = std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v2 - 80);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

_QWORD *Phase::Controller::ProcedureBase::ProcedureBase(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  Phase::Logger *v17;
  Phase::Logger *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v26;
  std::runtime_error *exception;
  NSObject *v28;
  std::logic_error *v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v16 = Phase::Controller::Generator::Generator((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  *(_QWORD *)v16 = off_24D5787B8;
  *(_OWORD *)(v16 + 528) = 0u;
  v17 = (Phase::Logger *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a8 + 24))(a8);
  v18 = v17;
  if (!v17)
  {
    v26 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v31 = "CvmProcedureBase.mm";
      v32 = 1024;
      v33 = 38;
      _os_log_impl(&dword_2164CC000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nullptr == pProcedurePrepareParameters is true]: \"Invalid GeneratorPrepareParameters for GeneratorType::Procedure!\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid GeneratorPrepareParameters for GeneratorType::Procedure!");
  }
  if (!*((_BYTE *)v17 + 64))
  {
    v28 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v17) + 384));
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v31 = "CvmProcedureBase.mm";
      v32 = 1024;
      v33 = 40;
      _os_log_impl(&dword_2164CC000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [pProcedurePrepareParameters->mProcedureType == ProcedureType::None is true]: \"Invalid procedure type\"", buf, 0x12u);
    }
    v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v29, "Invalid procedure type");
    v29->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  v19 = operator new();
  v20 = *((_BYTE *)v18 + 64);
  v21 = *((_QWORD *)v18 + 10);
  v22 = *((_DWORD *)v18 + 22);
  v23 = *((_QWORD *)v18 + 12);
  *(_OWORD *)(v19 + 24) = 0u;
  *(_OWORD *)(v19 + 8) = 0u;
  *(_BYTE *)(v19 + 40) = 1;
  *(_QWORD *)(v19 + 48) = v21;
  *(_QWORD *)v19 = off_24D578848;
  *(_BYTE *)(v19 + 56) = v20;
  *(_DWORD *)(v19 + 60) = v22;
  *(_QWORD *)(v19 + 64) = v23;
  v24 = a1[23];
  a1[23] = v19;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  a1[45] = *((_QWORD *)v18 + 9);
  a1[67] = *((_QWORD *)v18 + 10);
  return a1;
}

void sub_21650FDE4(_Unwind_Exception *a1)
{
  Phase::Controller::Generator *v1;
  void *v2;

  __cxa_free_exception(v2);
  Phase::Controller::Generator::~Generator(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ProcedureBase::InternalPrepare(Phase::Controller::ProcedureBase *this, double a2)
{
  *((double *)this + 66) = a2;
  return 1;
}

void Phase::Controller::ProcedureBase::InternalConfigureDspGenerator(Phase::Controller::ProcedureBase *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5[3];
  void **v6;

  v1 = *((_QWORD *)this + 4);
  v2 = *((_QWORD *)this + 29);
  v3 = *((_QWORD *)this + 30);
  v4 = (char *)*((_QWORD *)this + 23);
  memset(v5, 0, sizeof(v5));
  Phase::Controller::DVM::VoiceGraph::ConfigureGeneratorWithRenderCallback(*(_QWORD *)(*(_QWORD *)v1 + 72), v2, v3, 1, v4, v5, 0);
  v6 = (void **)v5;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_21650FE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void Phase::Controller::DspProcedureNode::~DspProcedureNode(Phase::Controller::DspProcedureNode *this)
{
  void **v1;

  v1 = (void **)((char *)this + 16);
  std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  v2 = (void **)((char *)this + 16);
  std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x2199F9D70](this, 0x10A1C4004939F89);
}

uint64_t Phase::Controller::DspGeneratorNode::AsDspSamplerNode(Phase::Controller::DspGeneratorNode *this)
{
  return 0;
}

uint64_t Phase::Controller::PullStreamSampler::StartVoices(Phase::Controller::PullStreamSampler *this, double a2)
{
  Phase::Controller::Generator::StartVoices(this, a2);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 5) + 56))(*((_QWORD *)this + 5), *((_QWORD *)this + 29), *((_QWORD *)this + 30), 3);
}

uint64_t Phase::Controller::PullStreamSampler::StopVoices(Phase::Controller::PullStreamSampler *this)
{
  Phase::Controller::Generator::StopVoices(this);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 5) + 56))(*((_QWORD *)this + 5), *((_QWORD *)this + 29), *((_QWORD *)this + 30), 2);
}

uint64_t Phase::Controller::PullStreamSampler::Pause(Phase::Controller::PullStreamSampler *this)
{
  int v2;
  uint64_t result;
  int v4;
  BOOL v5;

  v2 = *((unsigned __int8 *)this + 512);
  result = Phase::Controller::Generator::Pause((uint64_t)this);
  v4 = *((unsigned __int8 *)this + 512);
  v5 = v4 == v2 || v4 == 0;
  if (!v5 && !*((_BYTE *)this + 513))
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 5) + 56))(*((_QWORD *)this + 5), *((_QWORD *)this + 29), *((_QWORD *)this + 30), 2);
  return result;
}

void Phase::Controller::PullStreamSampler::Resume(Phase::Controller::PullStreamSampler *this)
{
  int v2;
  BOOL v3;

  v2 = *((unsigned __int8 *)this + 512);
  Phase::Controller::Generator::Resume(this);
  if (v2)
    v3 = *((_BYTE *)this + 512) == 0;
  else
    v3 = 0;
  if (v3 && !*((_BYTE *)this + 513))
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 5) + 56))(*((_QWORD *)this + 5), *((_QWORD *)this + 29), *((_QWORD *)this + 30), 3);
}

uint64_t Phase::Controller::PullStreamSampler::ClientEnginePause(Phase::Controller::PullStreamSampler *this)
{
  int v2;
  uint64_t result;
  int v4;
  BOOL v5;

  v2 = *((unsigned __int8 *)this + 513);
  result = Phase::Controller::Generator::ClientEnginePause((uint64_t)this);
  v4 = *((unsigned __int8 *)this + 513);
  v5 = v4 == v2 || v4 == 0;
  if (!v5 && !*((_BYTE *)this + 512))
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 5) + 56))(*((_QWORD *)this + 5), *((_QWORD *)this + 29), *((_QWORD *)this + 30), 2);
  return result;
}

uint64_t Phase::Controller::PullStreamSampler::ClientEngineStart(Phase::Controller::PullStreamSampler *this)
{
  int v2;
  uint64_t result;
  BOOL v4;

  v2 = *((unsigned __int8 *)this + 513);
  result = Phase::Controller::Generator::ClientEngineStart((uint64_t)this);
  if (v2)
    v4 = *((_BYTE *)this + 513) == 0;
  else
    v4 = 0;
  if (v4 && !*((_BYTE *)this + 512))
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 5) + 56))(*((_QWORD *)this + 5), *((_QWORD *)this + 29), *((_QWORD *)this + 30), 2);
  return result;
}

void Phase::Controller::PullStreamSampler::~PullStreamSampler(Phase::Controller::PullStreamSampler *this)
{
  Phase::Controller::StreamSamplerBase::~StreamSamplerBase(this);
  JUMPOUT(0x2199F9D70);
}

_QWORD *Phase::Controller::Renderer::GetDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t Phase::Controller::RendererSystem::RendererSystem(uint64_t a1, Phase::Logger *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t InstancePtr;
  Phase::Controller::SpatializerManager *v10;
  uint64_t ActiveSpatializer;
  const Phase::Controller::Spatializer *v12;
  Phase::Controller::IR::IRBuilder *v13;
  Phase::Logger *v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  void *p_p;
  void *__p;
  char v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  _QWORD *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &unk_24D578A10;
  v8 = a1 + 8;
  InstancePtr = Phase::Logger::GetInstancePtr((Phase::Logger *)a1);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::Commandable(v8, *(_QWORD *)(InstancePtr + 496), 2, 0x20000);
  *(_QWORD *)a1 = &off_24D5789B0;
  *(_QWORD *)(a1 + 8) = &unk_24D5789E0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  v10 = (Phase::Controller::SpatializerManager *)Phase::Controller::TaskManager::GetService<Phase::Controller::SpatializerManager>(a2, 9);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = a4;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  ActiveSpatializer = Phase::Controller::SpatializerManager::GetActiveSpatializer(v10);
  std::allocate_shared[abi:ne180100]<CA::ChannelLayout,std::allocator<CA::ChannelLayout>,CA::ChannelLayout const&,void>((_QWORD *)(a1 + 168), *(const void **)(ActiveSpatializer + 24), *(_QWORD *)(ActiveSpatializer + 32));
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  v12 = (const Phase::Controller::Spatializer *)Phase::Controller::SpatializerManager::GetActiveSpatializer(*(Phase::Controller::SpatializerManager **)(a1 + 64));
  v13 = (Phase::Controller::IR::IRBuilder *)Phase::Controller::TaskManager::GetService<Phase::Controller::IR::IRBuilder>(*(Phase::Logger **)(*(_QWORD *)(a1 + 48) + 48), *(Phase::Logger **)(*(_QWORD *)(a1 + 48) + 56));
  Phase::Controller::IR::IRBuilder::SetSpatializer(v13, v12);
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 88) = a1;
  v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v14)
                                                                                      + 496)));
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v18 = (_QWORD *)*((_QWORD *)v12 + 9);
    v16 = (_QWORD *)((char *)v12 + 72);
    v17 = v18;
    v19 = *((char *)v16 + 23);
    Phase::ChannelLayout::GetStringDescription(*(unsigned int ***)(a1 + 168));
    if (v19 >= 0)
      v20 = v16;
    else
      v20 = v17;
    if (v24 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315906;
    v26 = "CvmRendererSystem.mm";
    v27 = 1024;
    v28 = 54;
    v29 = 2080;
    v30 = v20;
    v31 = 2080;
    v32 = p_p;
    _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RendererSystem: initialized with %s spatializer, output layout \n%s", buf, 0x26u);
    if (v24 < 0)
      operator delete(__p);
  }

  return a1;
}

void sub_216510364(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>>>::~__hash_table(v4);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v3);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v2 - 40);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::SpatializerManager>(Phase::Logger *a1, int a2)
{
  uint64_t v3;
  Phase::Logger *v4;
  uint64_t (**v5)(uint64_t, _QWORD, _QWORD, _QWORD, void *);
  NSObject *v7;
  std::logic_error *exception;
  NSObject *v9;
  std::string *v10;
  std::logic_error *v11;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 7) - v3) >> 5))
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 112;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(_QWORD *)v4)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 121;
      v17 = 1024;
      v18 = a2;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  v5 = std::any_cast[abi:ne180100]<Phase::Controller::SpatializerManager * const>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v4);
  if (!v5)
    std::__throw_bad_any_cast[abi:ne180100]();
  return (uint64_t)*v5;
}

void sub_2165105E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2165106D0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2165106F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::IR::IRBuilder>(Phase::Logger *a1, Phase::Logger *a2)
{
  uint64_t v2;
  NSObject *v4;
  std::logic_error *exception;
  NSObject *v6;
  std::string *v7;
  std::logic_error *v8;
  std::string __p;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  std::string *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a2 == a1)
  {
    v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v11 = "TaskManager.hpp";
      v12 = 1024;
      v13 = 112;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  if (!*(_QWORD *)a1)
  {
    v6 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1)
                                                                                       + 448)));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v11 = "TaskManager.hpp";
      v12 = 1024;
      v13 = 121;
      v14 = 1024;
      v15 = 0;
      v16 = 2080;
      v17 = v7;
      _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v8, "No service registered for Id %i, in call \n%s");
  }
  v2 = (*(uint64_t (**)(uint64_t, Phase::Logger *, _QWORD, _QWORD, void *))a1)(3, a1, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::IR::IRBuilder *>::__id);
  if (!v2)
    std::__throw_bad_any_cast[abi:ne180100]();
  return *(_QWORD *)v2;
}

void sub_216510924(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_216510A14(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_216510A34(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void Phase::Controller::RendererSystem::~RendererSystem(Phase::Controller::RendererSystem *this)
{
  _QWORD *v2;
  Phase::Logger *v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24D5789B0;
  *((_QWORD *)this + 1) = &unk_24D5789E0;
  v2 = (_QWORD *)((char *)this + 8);
  v3 = (Phase::Logger *)Phase::Controller::RendererSystem::Reset(this);
  if (*((_QWORD *)this + 14))
  {
    v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v3) + 496));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *((_QWORD *)this + 14);
      v6 = 136315650;
      v7 = "CvmRendererSystem.mm";
      v8 = 1024;
      v9 = 81;
      v10 = 2048;
      v11 = v5;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d %lu dangling RendererPtrs while destroying RendererSystem.", (uint8_t *)&v6, 0x1Cu);
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>>>::~__hash_table((uint64_t)this + 184);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + 168);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 88);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v2);
}

{
  Phase::Controller::RendererSystem::~RendererSystem(this);
  JUMPOUT(0x2199F9D70);
}

void sub_216510B7C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t Phase::Controller::RendererSystem::Reset(Phase::Controller::RendererSystem *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t **i;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;

  result = Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this + 8, 1u);
  if (*((int *)this + 6) >= 1)
  {
    v3 = 0;
    do
      result = Phase::CommandQueue<Phase::LockFreeQueueMPSC>::Reset(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v3++));
    while (v3 < *((int *)this + 6));
  }
  for (i = (uint64_t **)*((_QWORD *)this + 13); i; i = (uint64_t **)*i)
  {
    result = (*(uint64_t (**)(uint64_t *))(*i[3] + 96))(i[3]);
    if ((result & 1) == 0)
      result = (*(uint64_t (**)(uint64_t *, _QWORD, _QWORD))(*i[3] + 112))(i[3], 0, 0);
  }
  v5 = (uint64_t *)*((_QWORD *)this + 18);
  if (v5)
  {
    v6 = (_QWORD *)((char *)this + 128);
    do
    {
      v7 = v5[2];
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      result = std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(v6, v5);
      v5 = (uint64_t *)result;
    }
    while (result);
  }
  return result;
}

void `non-virtual thunk to'Phase::Controller::RendererSystem::~RendererSystem(Phase::Controller::RendererSystem *this)
{
  Phase::Controller::RendererSystem::~RendererSystem((Phase::Controller::RendererSystem *)((char *)this - 8));
}

{
  Phase::Controller::RendererSystem::~RendererSystem((Phase::Controller::RendererSystem *)((char *)this - 8));
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Controller::RendererSystem::CreateRenderer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  NSObject *v13;
  uint64_t result;
  Phase::Logger *InstancePtr;
  NSObject *v16;
  std::runtime_error *exception;
  __int128 v18;
  BOOL v19;
  unint64_t v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v5 = (unint64_t *)(a1 + 80);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  Phase::Controller::RendererSystem::CreateRendererInternal(a3, a1, v6, a2);
  *(_QWORD *)&v18 = a1;
  *((_QWORD *)&v18 + 1) = v6;
  v7 = *a3;
  v8 = a3[1];
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v20 = 0;
  v19 = 1;
  v12 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v11, 40, &v20, &v19);
  if (!v12)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v16 = objc_retainAutorelease(**(id **)(v11 + 48));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v22 = "CommandQueue.hpp";
      v23 = 1024;
      v24 = 100;
      _os_log_impl(&dword_2164CC000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v19)
  {
    v13 = objc_retainAutorelease(**(id **)(v11 + 48));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v22 = "CommandQueue.hpp";
      v23 = 1024;
      v24 = 89;
      v25 = 2048;
      v26 = v20;
      v27 = 2048;
      v28 = 40;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(_QWORD *)v12 = &off_24D578A78;
  *(_OWORD *)(v12 + 2) = v18;
  *((_QWORD *)v12 + 3) = v7;
  *((_QWORD *)v12 + 4) = v8;
  result = Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v11, 40);
  atomic_store(0, (unsigned __int8 *)(v11 + 40));
  return result;
}

void sub_216510EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  uint64_t v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a2)
  {
    __cxa_free_exception(v13);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v12 + 8);
    __cxa_end_catch();
    if (a12)
    {
      p_shared_owners = (unint64_t *)&a12->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
        std::__shared_weak_count::__release_weak(a12);
      }
    }
    JUMPOUT(0x216510E18);
  }
  _Unwind_Resume(exception_object);
}

void sub_216510F94(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x216510F8CLL);
}

_QWORD *Phase::Controller::RendererSystem::CreateRendererInternal(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  Phase::Logger *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *result;
  NSObject *v22;
  std::logic_error *exception;
  _BYTE buf[12];
  uint64_t v25;
  int NumNonLFEChannels;
  void *__p;
  void *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(a4 + 8);
  if (v8 == 2)
  {
    v13 = *(Phase::Logger **)(a2 + 168);
    v12 = *(std::__shared_weak_count **)(a2 + 176);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v16 = *(_DWORD *)(a4 + 8);
    }
    else
    {
      v16 = 2;
    }
    *(_DWORD *)&buf[8] = v16;
    *(_QWORD *)buf = &off_24D578258;
    v25 = *(_QWORD *)(a4 + 12);
    NumNonLFEChannels = *(_DWORD *)(a4 + 20);
    v28 = 0;
    v29 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a4 + 24), *(_QWORD *)(a4 + 32), (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 2);
    v30 = *(_DWORD *)(a4 + 48);
    NumNonLFEChannels = Phase::ChannelLayout::GetNumNonLFEChannels(v13);
    v17 = Phase::Controller::TaskManager::GetService<Phase::Controller::IR::IRBuilder>(*(Phase::Logger **)(*(_QWORD *)(a2 + 48) + 48), *(Phase::Logger **)(*(_QWORD *)(a2 + 48) + 56));
    v18 = Phase::Controller::TaskManager::GetService<Phase::Controller::VoicePoolRegistry>(*(Phase::Logger **)(a2 + 48), 3);
    v11 = operator new();
    Phase::Controller::ConvolutionRenderer::ConvolutionRenderer(v11, a3, (uint64_t)buf, 0, *(_QWORD *)(a2 + 56), v17, *(_QWORD *)(a2 + 72), v18);
    *(_QWORD *)buf = &off_24D578258;
    if (__p)
    {
      v28 = __p;
      operator delete(__p);
    }
    if (v12)
    {
      v19 = (unint64_t *)&v12->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    if (v8 != 1)
    {
      v22 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 496));
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "CvmRendererSystem.mm";
        LOWORD(v25) = 1024;
        *(_DWORD *)((char *)&v25 + 2) = 245;
        _os_log_impl(&dword_2164CC000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Unsupported renderer type\"", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported renderer type");
    }
    v9 = Phase::Controller::TaskManager::GetService<Phase::Controller::VoicePoolRegistry>(*(Phase::Logger **)(a2 + 48), 3);
    v10 = Phase::Controller::TaskManager::GetService<Phase::Controller::SpatializerManager>(*(Phase::Logger **)(a2 + 48), 9);
    v11 = operator new();
    Phase::Controller::MatrixRenderer::MatrixRenderer(v11, a3, a4, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 56), v9, v10);
  }
  *a1 = v11;
  result = (_QWORD *)operator new();
  *result = &off_24D578AC8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v11;
  result[4] = a2;
  a1[1] = (uint64_t)result;
  return result;
}

void sub_21651127C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  __break(1u);
}

void sub_21651130C()
{
  __cxa_end_catch();
  JUMPOUT(0x216511348);
}

void sub_216511318(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x216511348);
}

uint64_t Phase::Controller::RendererSystem::DestroyRenderer(uint64_t this, Phase::Controller::Renderer *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  NSObject *v6;
  Phase::Logger *InstancePtr;
  NSObject *v8;
  std::runtime_error *exception;
  BOOL v10;
  unint64_t v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  unint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = this;
    v4 = *(_QWORD *)(*(_QWORD *)(this + 16) + 8);
    v11 = 0;
    v10 = 1;
    v5 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v4, 24, &v11, &v10);
    if (!v5)
    {
      InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
      Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
      v8 = objc_retainAutorelease(**(id **)(v4 + 48));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v13 = "CommandQueue.hpp";
        v14 = 1024;
        v15 = 100;
        _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffe"
          "r is full, unable to grow.\"",
          buf,
          0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    }
    if (v10)
    {
      v6 = objc_retainAutorelease(**(id **)(v4 + 48));
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315906;
        v13 = "CommandQueue.hpp";
        v14 = 1024;
        v15 = 89;
        v16 = 2048;
        v17 = v11;
        v18 = 2048;
        v19 = 24;
        _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
      }
    }
    *v5 = &off_24D578AA0;
    v5[1] = v3;
    v5[2] = a2;
    this = Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v4, 24);
    atomic_store(0, (unsigned __int8 *)(v4 + 40));
  }
  return this;
}

void sub_216511544(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2 + 8);
    __cxa_end_catch();
    JUMPOUT(0x216511464);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *Phase::Controller::RendererSystem::Update(Phase::Controller::RendererSystem *this)
{
  uint64_t *result;
  uint64_t **i;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;

  result = (uint64_t *)Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this + 8);
  for (i = (uint64_t **)*((_QWORD *)this + 13); i; i = (uint64_t **)*i)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*i[3] + 80))(i[3]);
  v4 = (uint64_t *)*((_QWORD *)this + 18);
  if (v4)
  {
    v5 = (_QWORD *)((char *)this + 128);
    do
    {
      while (1)
      {
        v6 = v4[2];
        result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
        if (!(_DWORD)result)
          break;
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
        result = (uint64_t *)std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(v5, v4);
        v4 = result;
        if (!result)
          return result;
      }
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  return result;
}

uint64_t Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  NSObject *v7;
  std::logic_error *exception;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 16) <= (signed int)a2)
  {
    v7 = objc_retainAutorelease(**(id **)(a1 + 24));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "Commandable.hpp";
      v11 = 1024;
      v12 = 296;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.");
  }
  v3 = Phase::CommandQueue<Phase::LockFreeQueueMPSC>::ExecuteCommands(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * a2));
  v4 = __ldaxr((unsigned __int8 *)(a1 + 32));
  if (v4 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)(a1 + 32)))
    {
      v5 = objc_retainAutorelease(**(id **)(a1 + 24));
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v9 = 136315394;
        v10 = "Commandable.hpp";
        v11 = 1024;
        v12 = 303;
        _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_INFO, "%25s:%-5d Commandable: Executing pending commands in overflow queue.", (uint8_t *)&v9, 0x12u);
      }
    }
  }
  else
  {
    __clrex();
  }
  return v3;
}

void sub_2165117E0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void Phase::Controller::RendererSystem::ReconfigureRenderers(uint8_t **this, uint64_t a2, int a3)
{
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint8_t *v10;
  unint64_t *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  __n128 *v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 *v19;
  __n128 *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  __n128 *v26;
  unint64_t *v27;
  unint64_t v28;
  __n128 *v29;
  __n128 v30;
  uint64_t v31;
  uint8_t *i;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t *v44;
  float *v45;
  std::__shared_weak_count *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  uint8_t *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  uint8_t buf[24];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v6 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)this) + 384));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CvmRendererSystem.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 255;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RendererSystem: Reconfiguring all renderers", buf, 0x12u);
  }
  memset(buf, 0, sizeof(buf));
  v7 = (std::__shared_weak_count *)this[22];
  v58 = this[21];
  v59 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = this[13];
  if (v10)
  {
    v11 = (unint64_t *)(this + 10);
    do
    {
      v12 = (_DWORD *)*((_QWORD *)v10 + 3);
      if (a3)
      {
        if (v12[12] == 2)
        {
          do
            v13 = __ldaxr(v11);
          while (__stlxr(v13 + 1, v11));
          v14 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 136))(v12);
          Phase::Controller::RendererSystem::CreateRendererInternal((uint64_t *)&v57, (uint64_t)this, v13, v14);
          v15 = v57;
          v16 = *(__n128 **)&buf[8];
          if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
          {
            v20 = *(__n128 **)buf;
            v21 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 4;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 60)
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            v55 = v57;
            v23 = *(_QWORD *)&buf[16] - *(_QWORD *)buf;
            if ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3 > v22)
              v22 = v23 >> 3;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
              v24 = 0xFFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v25 = (char *)operator new(16 * v24);
            v26 = (__n128 *)&v25[16 * v21];
            v15 = v55;
            *v26 = v55;
            if (v55.n128_u64[1])
            {
              v27 = (unint64_t *)(v55.n128_u64[1] + 8);
              do
                v28 = __ldxr(v27);
              while (__stxr(v28 + 1, v27));
              v16 = *(__n128 **)&buf[8];
            }
            if (v16 == v20)
            {
              v19 = v26 + 1;
              *(_QWORD *)buf = v26;
              *(_QWORD *)&buf[8] = v26 + 1;
              *(_QWORD *)&buf[16] = &v25[16 * v24];
            }
            else
            {
              v29 = (__n128 *)&v25[16 * v21];
              do
              {
                v30 = v16[-1];
                --v16;
                v15 = v30;
                v29[-1] = v30;
                --v29;
                v16->n128_u64[0] = 0;
                v16->n128_u64[1] = 0;
              }
              while (v16 != v20);
              v20 = *(__n128 **)buf;
              v31 = *(_QWORD *)&buf[8];
              v19 = v26 + 1;
              *(_QWORD *)buf = v29;
              *(_QWORD *)&buf[8] = v26 + 1;
              *(_QWORD *)&buf[16] = &v25[16 * v24];
              while ((__n128 *)v31 != v20)
              {
                v31 -= 16;
                std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v31);
              }
            }
            if (v20)
              operator delete(v20);
          }
          else
          {
            **(_OWORD **)&buf[8] = v57;
            if (v15.n128_u64[1])
            {
              v17 = (unint64_t *)(v15.n128_u64[1] + 8);
              do
                v18 = __ldxr(v17);
              while (__stxr(v18 + 1, v17));
            }
            v19 = v16 + 1;
          }
          *(_QWORD *)&buf[8] = v19;
          for (i = this[25]; i; i = *(uint8_t **)i)
          {
            v33 = *(_QWORD *)(*((_QWORD *)v10 + 3) + 40);
            v56 = v57;
            if (v57.n128_u64[1])
            {
              v34 = (unint64_t *)(v57.n128_u64[1] + 8);
              do
                v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
            }
            v60 = v33;
            v36 = *((_QWORD *)i + 6);
            if (!v36)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(uint64_t, uint64_t *, __n128 *, __n128))(*(_QWORD *)v36 + 48))(v36, &v60, &v56, v15);
            v37 = (std::__shared_weak_count *)v56.n128_u64[1];
            if (v56.n128_u64[1])
            {
              v38 = (unint64_t *)(v56.n128_u64[1] + 8);
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
          }
          (*(void (**)(_QWORD, _QWORD, _QWORD, __n128))(**((_QWORD **)v10 + 3) + 112))(*((_QWORD *)v10 + 3), 0, 0, v15);
          v40 = (std::__shared_weak_count *)v57.n128_u64[1];
          if (v57.n128_u64[1])
          {
            v41 = (unint64_t *)(v57.n128_u64[1] + 8);
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
        }
      }
      else
      {
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v12 + 128))(v12, a2);
      }
      v10 = *(uint8_t **)v10;
    }
    while (v10);
    v43 = *(unint64_t **)buf;
  }
  else
  {
    v43 = 0;
  }
  v44 = *(unint64_t **)&buf[8];
  if (v43 != *(unint64_t **)&buf[8])
  {
    v45 = (float *)(this + 11);
    do
    {
      v47 = *v43;
      v46 = (std::__shared_weak_count *)v43[1];
      v57.n128_u64[0] = *v43;
      v57.n128_u64[1] = (unint64_t)v46;
      if (v46)
      {
        v48 = (unint64_t *)&v46->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v45, *(_QWORD *)(v47 + 40), (_QWORD *)(v47 + 40))[3] = v47;
      if (v46)
      {
        v50 = (unint64_t *)&v46->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v43 += 2;
    }
    while (v43 != v44);
  }
  v52 = v59;
  if (v59)
  {
    v53 = (unint64_t *)&v59->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v58 = buf;
  std::vector<std::shared_ptr<Phase::Controller::Renderer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
}

void sub_216511C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, char a19)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  a16 = (void **)&a19;
  std::vector<std::shared_ptr<Phase::Controller::Renderer>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void Phase::Controller::RendererSystem::SpatializerParametersChanged(Phase::Controller::RendererSystem *this)
{
  uint64_t v2;
  _BOOL8 IsLayoutSupported;
  BOOL v4;
  BOOL v5;
  NSObject *v6;
  void **v7;
  int NumNonLFEChannels;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  NSObject *v18;
  NSObject *v19;
  std::logic_error *exception;
  Phase::Logger *InstancePtr;
  NSObject *v22;
  std::runtime_error *v23;
  void *__p[2];
  char v25;
  BOOL v26;
  _BYTE buf[18];
  __int16 v28;
  void **v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(Phase::Controller::TaskManager::GetService<Phase::Controller::IR::IRBuilder>(*(Phase::Logger **)(*((_QWORD *)this + 6) + 48), *(Phase::Logger **)(*((_QWORD *)this + 6) + 56))+ 96);
  IsLayoutSupported = Phase::ChannelLayout::IsLayoutSupported((unsigned int **)(v2 + 24));
  if (IsLayoutSupported)
  {
    v4 = Phase::ChannelLayout::AreLayoutsEqual((_QWORD *)(v2 + 24), *((uint64_t **)this + 21));
    if (v4)
    {
      v5 = 0;
    }
    else
    {
      NumNonLFEChannels = Phase::ChannelLayout::GetNumNonLFEChannels((Phase::Logger *)(v2 + 24));
      v5 = NumNonLFEChannels != Phase::ChannelLayout::GetNumNonLFEChannels(*((Phase::Logger **)this + 21));
      std::allocate_shared[abi:ne180100]<CA::ChannelLayout,std::allocator<CA::ChannelLayout>,CA::ChannelLayout const&,void>(buf, *(const void **)(v2 + 24), *(_QWORD *)(v2 + 32));
      v9 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v10 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
      *(_OWORD *)((char *)this + 168) = v9;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    if (*((int *)this + 6) <= 0)
    {
      v19 = objc_retainAutorelease(**((id **)this + 4));
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "Commandable.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 132;
        _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.");
    }
    v16 = **((_QWORD **)this + 2);
    __p[0] = 0;
    v26 = 1;
    v17 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v16, 40, (unint64_t *)__p, &v26);
    if (!v17)
    {
      InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
      Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
      v22 = objc_retainAutorelease(**(id **)(v16 + 48));
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "CommandQueue.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 100;
        _os_log_impl(&dword_2164CC000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffe"
          "r is full, unable to grow.\"",
          buf,
          0x12u);
      }
      v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v23, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    }
    if (v26)
    {
      v18 = objc_retainAutorelease(**(id **)(v16 + 48));
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "CommandQueue.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 89;
        v28 = 2048;
        v29 = (void **)__p[0];
        v30 = 2048;
        v31 = 40;
        _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
      }
    }
    *(_QWORD *)v17 = &off_24D578B00;
    *((_QWORD *)v17 + 1) = this;
    *((_QWORD *)v17 + 2) = Phase::Controller::RendererSystem::ReconfigureRenderers;
    *((_QWORD *)v17 + 3) = 0;
    *((_BYTE *)v17 + 32) = !v4;
    *((_BYTE *)v17 + 33) = v5;
    Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v16, 40);
    atomic_store(0, (unsigned __int8 *)(v16 + 40));
  }
  else
  {
    v6 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)IsLayoutSupported)
                                                                                       + 496)));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      Phase::ChannelLayout::GetStringDescription((unsigned int **)(v2 + 24));
      v7 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmRendererSystem.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 321;
      v28 = 2080;
      v29 = v7;
      _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d RendererSystem: setting invalid output channel layout \n%s", buf, 0x1Cu);
      if (v25 < 0)
        operator delete(__p[0]);
    }

  }
}

void sub_2165120FC(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2 + 8);
    __cxa_end_catch();
    JUMPOUT(0x216511F80);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::RendererSystem::ActiveSpatializerChanged(Phase::Controller::RendererSystem *this, const Phase::Controller::Spatializer *a2)
{
  Phase::Controller::IR::IRBuilder *v4;

  v4 = (Phase::Controller::IR::IRBuilder *)Phase::Controller::TaskManager::GetService<Phase::Controller::IR::IRBuilder>(*(Phase::Logger **)(*((_QWORD *)this + 6) + 48), *(Phase::Logger **)(*((_QWORD *)this + 6) + 56));
  Phase::Controller::IR::IRBuilder::SetSpatializer(v4, a2);
  return (*(uint64_t (**)(Phase::Controller::RendererSystem *))(*(_QWORD *)this + 16))(this);
}

uint64_t Phase::Controller::RendererSystem::SubmitRendererStoppedResult(Phase::Controller::RendererSystem *this, uint64_t a2, std::error_code a3)
{
  const std::error_category *cat;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  NSObject *v9;
  uint64_t result;
  Phase::Logger *InstancePtr;
  NSObject *v12;
  std::runtime_error *exception;
  BOOL v14;
  unint64_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a2 == -1)
    __assert_rtn("SubmitRendererStoppedResult", "CvmRendererSystem.mm", 348, "inRendererId != kInvalidRendererId");
  cat = a3.__cat_;
  v4 = *(_QWORD *)&a3.__val_;
  v7 = **((_QWORD **)this + 2);
  v15 = 0;
  v14 = 1;
  v8 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v7, 40, &v15, &v14);
  if (!v8)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v12 = objc_retainAutorelease(**(id **)(v7 + 48));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v17 = "CommandQueue.hpp";
      v18 = 1024;
      v19 = 100;
      _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v14)
  {
    v9 = objc_retainAutorelease(**(id **)(v7 + 48));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v17 = "CommandQueue.hpp";
      v18 = 1024;
      v19 = 89;
      v20 = 2048;
      v21 = v15;
      v22 = 2048;
      v23 = 40;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *v8 = &off_24D578B28;
  v8[1] = this;
  v8[2] = a2;
  v8[3] = v4;
  v8[4] = cat;
  result = Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v7, 40);
  atomic_store(0, (unsigned __int8 *)(v7 + 40));
  return result;
}

void sub_2165123E4(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2 + 8);
    __cxa_end_catch();
    JUMPOUT(0x2165122E0);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_DWORD *Phase::Controller::RendererSystem::GetStats@<X0>(_DWORD *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;

  v2 = this;
  v4 = 0;
  v5 = a2 + 16;
  do
  {
    v6 = __const__ZNK5Phase10Controller14RendererSystem8GetStatsEv_rendererPlayStates[v4];
    v7 = (_QWORD *)*((_QWORD *)v2 + 13);
    if (v7)
    {
      v8 = 0;
      do
      {
        this = (_DWORD *)v7[3];
        if (this[12] == 2)
        {
          this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 120))(this);
          if ((_DWORD)this == (_DWORD)v6)
            ++v8;
        }
        v7 = (_QWORD *)*v7;
      }
      while (v7);
      v9 = (_QWORD *)*((_QWORD *)v2 + 13);
      *(_DWORD *)(a2 + 4 * v6) = v8;
      for (LODWORD(v7) = 0; v9; v9 = (_QWORD *)*v9)
      {
        this = (_DWORD *)v9[3];
        if (this[12] == 1)
        {
          this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 120))(this);
          if ((_DWORD)this == (_DWORD)v6)
            LODWORD(v7) = (_DWORD)v7 + 1;
        }
      }
    }
    else
    {
      *(_DWORD *)(a2 + 4 * v6) = 0;
    }
    *(_DWORD *)(v5 + 4 * v6) = (_DWORD)v7;
    ++v4;
  }
  while (v4 != 4);
  return this;
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Controller::SpatializerManager * const>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::SpatializerManager *>::__id);
    else
      return 0;
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<CA::ChannelLayout,std::allocator<CA::ChannelLayout>,CA::ChannelLayout const&,void>(_QWORD *a1, const void *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  v6[3] = 0;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24D578A40;
  v6[4] = 0;
  v6[5] = 0;
  result = std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(v6 + 3, a2, a3, a3 - (_QWORD)a2);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_216512678(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CA::ChannelLayout>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D578A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CA::ChannelLayout>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D578A40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

void std::__shared_ptr_emplace<CA::ChannelLayout>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v3 = (_QWORD *)*v2;
      v4 = (_QWORD *)v2[6];
      if (v4 == v2 + 3)
        break;
      if (v4)
      {
        v5 = 5;
LABEL_6:
        (*(void (**)(void))(*v4 + 8 * v5))();
      }
      operator delete(v2);
      v2 = v3;
      if (!v3)
        goto LABEL_8;
    }
    v4 = v2 + 3;
    v5 = 4;
    goto LABEL_6;
  }
LABEL_8:
  v6 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
    operator delete(v6);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v14 = 1;
  if (v7 >= 3)
    v14 = (v7 & (v7 - 1)) != 0;
  v15 = v14 | (2 * v7);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v30)
  {
    *i = *v30;
LABEL_72:
    *v30 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v29[v5] = a1 + 4;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_216512B44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *Phase::LambdaFunction<Phase::Controller::RendererSystem::CreateRenderer(Phase::Controller::RendererConfig const*)::$_0,void>::~LambdaFunction(_QWORD *a1)
{
  *a1 = &off_24D578A78;
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  return a1;
}

void Phase::LambdaFunction<Phase::Controller::RendererSystem::CreateRenderer(Phase::Controller::RendererConfig const*)::$_0,void>::~LambdaFunction(_QWORD *a1)
{
  *a1 = &off_24D578A78;
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  JUMPOUT(0x2199F9D70);
}

_QWORD *Phase::LambdaFunction<Phase::Controller::RendererSystem::CreateRenderer(Phase::Controller::RendererConfig const*)::$_0,void>::operator()(Phase::Logger *a1)
{
  unint64_t v1;
  uint64_t v2;
  float *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  unint64_t v9;
  uint64_t v10;
  _QWORD *result;
  NSObject *v12;
  std::runtime_error *exception;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)a1 + 2);
  v2 = *((_QWORD *)a1 + 1);
  v3 = (float *)(v2 + 88);
  v4 = *(int8x8_t *)(v2 + 96);
  if (v4)
  {
    v5 = (uint8x8_t)vcnt_s8(v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = *((_QWORD *)a1 + 2);
      if (*(_QWORD *)&v4 <= v1)
        v6 = v1 % *(_QWORD *)&v4;
    }
    else
    {
      v6 = (*(_QWORD *)&v4 - 1) & v1;
    }
    v7 = *(_QWORD **)(*(_QWORD *)v3 + 8 * v6);
    if (v7)
    {
      for (i = (_QWORD *)*v7; i; i = (_QWORD *)*i)
      {
        v9 = i[1];
        if (v9 == v1)
        {
          if (i[2] == v1)
          {
            v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 496));
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              v15 = 136315394;
              v16 = "CvmRendererSystem.mm";
              v17 = 1024;
              v18 = 96;
              _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [mRenderers.count(rendererId) > 0 is true]: \"Renderer already registered for this Id!\"", (uint8_t *)&v15, 0x12u);
            }
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Renderer already registered for this Id!");
          }
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v9 >= *(_QWORD *)&v4)
              v9 %= *(_QWORD *)&v4;
          }
          else
          {
            v9 &= *(_QWORD *)&v4 - 1;
          }
          if (v9 != v6)
            break;
        }
      }
    }
  }
  v10 = *((_QWORD *)a1 + 3);
  result = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v3, v1, (_QWORD *)a1 + 2);
  result[3] = v10;
  return result;
}

void sub_216512D78(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void Phase::LambdaFunction<Phase::Controller::RendererSystem::DestroyRenderer(Phase::Controller::Renderer *)::$_0,void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

void Phase::LambdaFunction<Phase::Controller::RendererSystem::DestroyRenderer(Phase::Controller::Renderer *)::$_0,void>::operator()(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD *v15;
  _QWORD *i;
  unint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  int8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  NSObject *v50;
  std::runtime_error *exception;
  int v52;
  const char *v53;
  __int16 v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = (_QWORD *)(v3 + 88);
  v5 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(v3 + 88), *(_QWORD *)(v2 + 40));
  if (!v5)
  {
    v50 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 496));
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      v52 = 136315394;
      v53 = "CvmRendererSystem.mm";
      v54 = 1024;
      v55 = 123;
      _os_log_impl(&dword_2164CC000, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [rendererIter == mRenderers.end() is true]: \"Renderer not found to destroy!\"", (uint8_t *)&v52, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Renderer not found to destroy!");
  }
  v6 = v5;
  v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 96))(v2);
  v8 = *(_QWORD *)(a1 + 16);
  if ((v7 & 1) == 0)
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 112))(v8, 0, 0);
    v9 = *(_QWORD *)(a1 + 16);
    v10 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
    v11 = 0x9DDFEA08EB382D69 * (HIDWORD(v9) ^ (v10 >> 47) ^ v10);
    v12 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
    v13 = *(_QWORD *)(v3 + 136);
    if (v13)
    {
      v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        v2 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
        if (v12 >= v13)
          v2 = v12 % v13;
      }
      else
      {
        v2 = v12 & (v13 - 1);
      }
      v15 = *(_QWORD **)(*(_QWORD *)(v3 + 128) + 8 * v2);
      if (v15)
      {
        for (i = (_QWORD *)*v15; i; i = (_QWORD *)*i)
        {
          v17 = i[1];
          if (v17 == v12)
          {
            if (i[2] == v9)
              goto LABEL_78;
          }
          else
          {
            if (v14.u32[0] > 1uLL)
            {
              if (v17 >= v13)
                v17 %= v13;
            }
            else
            {
              v17 &= v13 - 1;
            }
            if (v17 != v2)
              break;
          }
        }
      }
    }
    v18 = operator new(0x18uLL);
    *v18 = 0;
    v18[1] = v12;
    v18[2] = v9;
    v19 = (float)(unint64_t)(*(_QWORD *)(v3 + 152) + 1);
    v20 = *(float *)(v3 + 160);
    if (v13 && (float)(v20 * (float)v13) >= v19)
    {
LABEL_68:
      v37 = *(_QWORD *)(v3 + 128);
      v38 = *(_QWORD **)(v37 + 8 * v2);
      if (v38)
      {
        *v18 = *v38;
      }
      else
      {
        *v18 = *(_QWORD *)(v3 + 144);
        *(_QWORD *)(v3 + 144) = v18;
        *(_QWORD *)(v37 + 8 * v2) = v3 + 144;
        if (!*v18)
        {
LABEL_77:
          ++*(_QWORD *)(v3 + 152);
          goto LABEL_78;
        }
        v39 = *(_QWORD *)(*v18 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v39 >= v13)
            v39 %= v13;
        }
        else
        {
          v39 &= v13 - 1;
        }
        v38 = (_QWORD *)(*(_QWORD *)(v3 + 128) + 8 * v39);
      }
      *v38 = v18;
      goto LABEL_77;
    }
    v21 = 1;
    if (v13 >= 3)
      v21 = (v13 & (v13 - 1)) != 0;
    v22 = v21 | (2 * v13);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v13 = *(_QWORD *)(v3 + 136);
    }
    if (*(_QWORD *)&prime > v13)
      goto LABEL_34;
    if (*(_QWORD *)&prime < v13)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(v3 + 152) / *(float *)(v3 + 160));
      if (v13 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v13)
      {
        v13 = *(_QWORD *)(v3 + 136);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = *(void **)(v3 + 128);
          *(_QWORD *)(v3 + 128) = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          *(int8x8_t *)(v3 + 136) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(v3 + 128) + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = *(_QWORD **)(v3 + 144);
          if (v28)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(v3 + 128) + 8 * v29) = v3 + 144;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  v36 = *(_QWORD *)(v3 + 128);
                  if (!*(_QWORD *)(v36 + 8 * v35))
                  {
                    *(_QWORD *)(v36 + 8 * v35) = v28;
                    goto LABEL_59;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*(_QWORD *)(v3 + 128) + 8 * v35);
                  **(_QWORD **)(*(_QWORD *)(v3 + 128) + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_59:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v13 = (unint64_t)prime;
          goto LABEL_63;
        }
        v49 = *(void **)(v3 + 128);
        *(_QWORD *)(v3 + 128) = 0;
        if (v49)
          operator delete(v49);
        v13 = 0;
        *(_QWORD *)(v3 + 136) = 0;
      }
    }
LABEL_63:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v2 = v12 % v13;
      else
        v2 = v12;
    }
    else
    {
      v2 = (v13 - 1) & v12;
    }
    goto LABEL_68;
  }
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
LABEL_78:
  v40 = *(int8x8_t *)(v3 + 96);
  v41 = *v6;
  v42 = v6[1];
  v43 = (uint8x8_t)vcnt_s8(v40);
  v43.i16[0] = vaddlv_u8(v43);
  if (v43.u32[0] > 1uLL)
  {
    if (v42 >= *(_QWORD *)&v40)
      v42 %= *(_QWORD *)&v40;
  }
  else
  {
    v42 &= *(_QWORD *)&v40 - 1;
  }
  v44 = *(uint64_t **)(*v4 + 8 * v42);
  do
  {
    v45 = v44;
    v44 = (uint64_t *)*v44;
  }
  while (v44 != v6);
  if (v45 == (uint64_t *)(v3 + 104))
    goto LABEL_95;
  v46 = v45[1];
  if (v43.u32[0] > 1uLL)
  {
    if (v46 >= *(_QWORD *)&v40)
      v46 %= *(_QWORD *)&v40;
  }
  else
  {
    v46 &= *(_QWORD *)&v40 - 1;
  }
  if (v46 != v42)
  {
LABEL_95:
    if (v41)
    {
      v47 = *(_QWORD *)(v41 + 8);
      if (v43.u32[0] > 1uLL)
      {
        v48 = *(_QWORD *)(v41 + 8);
        if (v47 >= *(_QWORD *)&v40)
          v48 = v47 % *(_QWORD *)&v40;
      }
      else
      {
        v48 = v47 & (*(_QWORD *)&v40 - 1);
      }
      if (v48 == v42)
        goto LABEL_99;
    }
    *(_QWORD *)(*v4 + 8 * v42) = 0;
    v41 = *v6;
  }
  if (!v41)
    goto LABEL_105;
  v47 = *(_QWORD *)(v41 + 8);
LABEL_99:
  if (v43.u32[0] > 1uLL)
  {
    if (v47 >= *(_QWORD *)&v40)
      v47 %= *(_QWORD *)&v40;
  }
  else
  {
    v47 &= *(_QWORD *)&v40 - 1;
  }
  if (v47 != v42)
  {
    *(_QWORD *)(*v4 + 8 * v47) = v45;
    v41 = *v6;
  }
LABEL_105:
  *v45 = v41;
  *v6 = 0;
  --*(_QWORD *)(v3 + 112);
  operator delete(v6);
}

void sub_216513410(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

void std::__shared_ptr_pointer<Phase::Controller::Renderer *,Phase::Controller::RendererSystem::CreateRendererInternal(unsigned long long,Phase::Controller::RendererConfig const*)::$_0,std::allocator<Phase::Controller::Renderer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

uint64_t std::__shared_ptr_pointer<Phase::Controller::Renderer *,Phase::Controller::RendererSystem::CreateRendererInternal(unsigned long long,Phase::Controller::RendererConfig const*)::$_0,std::allocator<Phase::Controller::Renderer>>::__on_zero_shared(uint64_t a1)
{
  return Phase::Controller::RendererSystem::DestroyRenderer(*(_QWORD *)(a1 + 32), *(Phase::Controller::Renderer **)(a1 + 24));
}

void std::vector<std::shared_ptr<Phase::Controller::Renderer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::Controller::RendererSystem,void,BOOL,BOOL>(int,void (Phase::Controller::RendererSystem::*)(BOOL,BOOL),BOOL,BOOL)::{lambda(void)#1},void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::Controller::RendererSystem,void,BOOL,BOOL>(int,void (Phase::Controller::RendererSystem::*)(BOOL,BOOL),BOOL,BOOL)::{lambda(void)#1},void>::operator()(uint64_t a1)
{
  uint64_t (*v1)(_QWORD *, _QWORD, _QWORD);
  uint64_t v2;
  _QWORD *v3;

  v1 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 8) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v3 + v1);
  return v1(v3, *(unsigned __int8 *)(a1 + 32), *(unsigned __int8 *)(a1 + 33));
}

void Phase::LambdaFunction<Phase::Controller::RendererSystem::SubmitRendererStoppedResult(unsigned long long,std::error_code)::$_0,void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::LambdaFunction<Phase::Controller::RendererSystem::SubmitRendererStoppedResult(unsigned long long,std::error_code)::$_0,void>::operator()(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  Phase::Logger *v4;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  std::logic_error *v9;
  NSObject *v10;
  std::logic_error *exception;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v2 = a1[2];
  v4 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(v3 + 88), v2);
  if (v4)
  {
    v4 = (Phase::Logger *)*((_QWORD *)v4 + 3);
    if (!v4)
    {
      v10 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 496));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v12 = 136315394;
        v13 = "CvmRendererSystem.mm";
        v14 = 1024;
        v15 = 367;
        _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: nullptr != pRenderer is false.", (uint8_t *)&v12, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "POSTCONDITION: nullptr != pRenderer is false.");
    }
  }
  else
  {
    v6 = *(_QWORD **)(v3 + 144);
    if (!v6)
    {
LABEL_7:
      v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4) + 496));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = a1[2];
        v12 = 136315650;
        v13 = "CvmRendererSystem.mm";
        v14 = 1024;
        v15 = 358;
        v16 = 2048;
        v17 = v8;
        _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [mRenderersToBeDeleted.end() == deletedRendererIt is true]: \"Received renderer stop callback for invalid renderer Id %llu\"", (uint8_t *)&v12, 0x1Cu);
      }
      v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v9, "Received renderer stop callback for invalid renderer Id %llu");
    }
    while (1)
    {
      v4 = (Phase::Logger *)v6[2];
      if (v2 == *((_QWORD *)v4 + 5))
        break;
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_7;
    }
  }
  return (*(uint64_t (**)(Phase::Logger *, _QWORD, _QWORD))(*(_QWORD *)v4 + 72))(v4, a1[3], a1[4]);
}

void sub_21651377C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t *a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v35;

  v7 = *a2;
  v8 = a1[1];
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 2;
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[6] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = a1[1];
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v8)
    {
      v26 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v8 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = (void *)*a1;
          *a1 = (uint64_t)v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*v13;
          if (*v13)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v24) = v13;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v30))
                  {
                    *(_QWORD *)(*a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*a1 + 8 * v30);
                  **(_QWORD **)(*a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = (void *)*a1;
        *a1 = 0;
        if (v35)
          operator delete(v35);
        v8 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v31 = *a1;
  v32 = *(_QWORD **)(*a1 + 8 * v4);
  if (v32)
  {
    *i = *v32;
LABEL_72:
    *v32 = i;
    goto LABEL_73;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v31 + 8 * v4) = v13;
  if (*i)
  {
    v33 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8)
        v33 %= v8;
    }
    else
    {
      v33 &= v8 - 1;
    }
    v32 = (_QWORD *)(*a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_216513B88(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_216513D08(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t Phase::Controller::SamplerBase::SamplerBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Phase::Logger *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned __int8 *v27;
  unsigned int v28;
  Phase::Logger *v29;
  char v30;
  unsigned int i;
  _DWORD *v32;
  unsigned int v33;
  uint8x8_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v42;
  uint64_t v43;
  std::runtime_error *v44;
  NSObject *v45;
  std::runtime_error *exception;
  NSObject *v47;
  std::logic_error *v48;
  int v49;
  uint64_t v50;
  Phase::Controller::VoicePoolEntry *v51;
  _BYTE buf[12];
  __int16 v53;
  int v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v17 = Phase::Controller::Generator::Generator(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  *(_QWORD *)v17 = off_24D578B50;
  *(_OWORD *)(v17 + 528) = 0u;
  *(_OWORD *)(v17 + 544) = 0u;
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a8 + 16))(a8);
  if (!v18)
  {
    v45 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmSamplerBase.mm";
      v53 = 1024;
      v54 = 46;
      _os_log_impl(&dword_2164CC000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nullptr == pSamplerPrepareParameters is true]: \"Invalid GeneratorPrepareParameters for GeneratorType::Sampler!\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid GeneratorPrepareParameters for GeneratorType::Sampler!");
  }
  v19 = Phase::Controller::TaskManager::GetService<Phase::Controller::VoicePoolRegistry>(*(Phase::Logger **)(a1 + 24), 3);
  *(_QWORD *)buf = a15;
  v20 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((_QWORD *)(v19 + 40), (unint64_t *)buf);
  if (!v20)
  {
    v51 = 0;
LABEL_35:
    v47 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v20) + 384));
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmSamplerBase.mm";
      v53 = 1024;
      v54 = 50;
      _os_log_impl(&dword_2164CC000, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!pVoicePoolEntry is true]: \"Couldn't find a Voice Pool!\"", buf, 0x12u);
    }
    v48 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v48, "Couldn't find a Voice Pool!");
    v48->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  v21 = *((_QWORD *)v20 + 3);
  v51 = (Phase::Controller::VoicePoolEntry *)v21;
  if (!v21)
    goto LABEL_35;
  if (*(int *)(v21 + 144) >= 1)
  {
    v22 = 0;
    v23 = *(_QWORD *)(v21 + 136);
    do
    {
      v24 = (uint64_t *)(v23 + 56 * v22);
      v50 = 0;
      v25 = *v24;
      if (*v24)
      {
        v26 = *(unsigned __int8 *)v25;
        if (*(_BYTE *)v25)
        {
          v27 = (unsigned __int8 *)(v25 + 1);
          v25 = 0xCBF29CE484222325;
          do
          {
            v25 = 0x100000001B3 * (v25 ^ v26);
            v28 = *v27++;
            v26 = v28;
          }
          while (v28);
        }
        else
        {
          v25 = 0;
        }
      }
      v50 = v25;
      v49 = *(_DWORD *)(v23 + 56 * v22 + 8);
      v29 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,int const&>(a1 + 80, (unint64_t *)&v50, &v50, &v49);
      if ((v30 & 1) == 0)
      {
        v42 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v29) + 384));
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          v43 = *v24;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "CvmSamplerBase.mm";
          v53 = 1024;
          v54 = 61;
          v55 = 2080;
          v56 = v43;
          _os_log_impl(&dword_2164CC000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert %s parameter ids\"", buf, 0x1Cu);
        }
        v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v44, "Failed to insert %s parameter ids");
      }
      ++v22;
    }
    while (v22 < *(int *)(v21 + 144));
  }
  for (i = 0; ; ++i)
  {
    v32 = *(_DWORD **)(a1 + 48);
    if (*v32 == 0x10000)
    {
      v34 = (uint8x8_t)vcnt_s8((int8x8_t)v32[1]);
      v34.i16[0] = vaddlv_u8(v34);
      v33 = v34.i32[0];
    }
    else
    {
      v33 = *v32 ? (unsigned __int16)*v32 : v32[2];
    }
    if (i >= v33)
      break;
    v35 = *(_QWORD *)(a1 + 168);
    if (v35 >= *(_QWORD *)(a1 + 176))
    {
      v36 = std::vector<Phase::Controller::VoiceData>::__emplace_back_slow_path<Phase::Controller::VoicePoolEntry const*&>((uint64_t *)(a1 + 160), &v51);
    }
    else
    {
      Phase::Controller::VoiceData::VoiceData(*(Phase::Controller::VoiceData **)(a1 + 168), v51, 0x7FFFFFFFFFFFFFFFLL);
      v36 = v35 + 96;
      *(_QWORD *)(a1 + 168) = v35 + 96;
    }
    *(_QWORD *)(a1 + 168) = v36;
  }
  v37 = operator new();
  v38 = *(_BYTE *)(v18 + 64);
  v39 = *(_QWORD *)(v18 + 160);
  *(_BYTE *)(v37 + 40) = 0;
  *(_OWORD *)(v37 + 24) = 0u;
  *(_OWORD *)(v37 + 8) = 0u;
  *(_QWORD *)(v37 + 48) = v39;
  *(_QWORD *)v37 = off_24D578BE0;
  *(_BYTE *)(v37 + 56) = v38;
  v40 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v37;
  if (v40)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    v37 = *(_QWORD *)(a1 + 184);
  }
  *(_QWORD *)(v37 + 8) = a15;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(v18 + 152);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(v18 + 160);
  return a1;
}

void sub_2165141A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*(char *)(v1 + 551) < 0)
    operator delete(*(void **)(v1 + 528));
  Phase::Controller::Generator::~Generator((Phase::Controller::Generator *)v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::SamplerBase::~SamplerBase(void **this)
{
  *this = off_24D578B50;
  if (*((char *)this + 551) < 0)
    operator delete(this[66]);
  Phase::Controller::Generator::~Generator((Phase::Controller::Generator *)this);
}

void Phase::Controller::SamplerBase::AssignVoiceBuffers(Phase::Controller::SamplerBase *this, const AudioBufferList *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  UInt32 v9;
  UInt32 v10;
  Phase::Logger *v11;
  void *mData;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;

  v3 = *((_QWORD *)this + 20);
  v4 = *((_QWORD *)this + 21);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 5) > a2->mNumberBuffers)
    goto LABEL_16;
  if (v4 != v3)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = (*((_QWORD *)this + 9) & (1 << v9)) != 0 ? v9 : v9 + 1;
      if (v10 >= a2->mNumberBuffers)
        break;
      v11 = (Phase::Logger *)(v3 + 96 * v8);
      if (*((_QWORD *)v11 + 8) - *((_QWORD *)v11 + 7) != 32)
        break;
      mData = a2->mBuffers[v10].mData;
      v13 = operator new(0x28uLL);
      v13[1] = 0;
      v13[2] = 0;
      *v13 = &off_24D578330;
      *((_DWORD *)v13 + 8) = a3;
      *((_BYTE *)v13 + 36) = 1;
      v18 = (std::__shared_weak_count *)v13;
      v13[3] = mData;
      v17 = v13 + 3;
      Phase::Controller::VoiceData::SetBuffer(v11, 0, (uint64_t *)&v17);
      v14 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      ++v8;
      v9 = v10 + 1;
      v3 = *((_QWORD *)this + 20);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 21) - v3) >> 5) <= v8)
        return;
    }
LABEL_16:
    std::terminate();
  }
}

void sub_2165143BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Phase::Controller::SamplerBase::InternalSeekDVM(Phase::Controller::SamplerBase *this, double a2)
{
  Phase::Controller::Generator::SetParameter(this, 0x5FB837590D112C13uLL, a2, 0);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,int const&>(uint64_t a1, unint64_t *a2, _QWORD *a3, _DWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  *((_DWORD *)v12 + 6) = *a4;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    v22 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_216514600(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Phase::Controller::VoiceData>::__emplace_back_slow_path<Phase::Controller::VoicePoolEntry const*&>(uint64_t *a1, const Phase::Controller::VoicePoolEntry **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  Phase::Controller::VoiceData *v14;
  Phase::Controller::VoiceData *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::VoiceData>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (Phase::Controller::VoiceData *)&v10[96 * v4];
  v15 = v14;
  v16 = &v10[96 * v9];
  Phase::Controller::VoiceData::VoiceData(v14, *a2, 0x7FFFFFFFFFFFFFFFLL);
  v15 = (Phase::Controller::VoiceData *)((char *)v14 + 96);
  std::vector<Phase::Controller::VoiceData>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<Phase::Controller::VoiceData>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_216514708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Phase::Controller::VoiceData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void Phase::Controller::DspSamplerNode::~DspSamplerNode(Phase::Controller::DspSamplerNode *this)
{
  void **v1;

  v1 = (void **)((char *)this + 16);
  std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  v2 = (void **)((char *)this + 16);
  std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x2199F9D70](this, 0x10A1C4098D1E1D4);
}

uint64_t Phase::Controller::DspGeneratorNode::AsDspProcedureNode(Phase::Controller::DspGeneratorNode *this)
{
  return 0;
}

double Phase::Controller::SpatialModelerCategory::SpatialModelerCategory(Phase::Controller::SpatialModelerCategory *this)
{
  uint64_t InstancePtr;
  double result;

  InstancePtr = Phase::Logger::GetInstancePtr(this);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::Commandable((uint64_t)this, *(_QWORD *)(InstancePtr + 240), 1, 0x80000);
  *(_QWORD *)this = off_24D578C10;
  result = 0.0;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_QWORD *)((char *)this + 68) = 0x3F80000000000000;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = 1065353216;
  *((_QWORD *)this + 17) = 10;
  *((_QWORD *)this + 18) = 0x3FC999999999999ALL;
  return result;
}

void Phase::Controller::SpatialModelerCategory::~SpatialModelerCategory(Phase::Controller::SpatialModelerCategory *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  Phase::Controller::SpatialModelerInstance **v5;
  Phase::Controller::SpatialModelerInstance *v6;
  void *v7;

  *(_QWORD *)this = off_24D578C10;
  v2 = (_QWORD *)*((_QWORD *)this + 13);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    operator delete(v4);
  v5 = (Phase::Controller::SpatialModelerInstance **)*((_QWORD *)this + 7);
  if (v5)
  {
    do
    {
      v6 = *v5;
      std::unique_ptr<Phase::Controller::SpatialModelerInstance>::reset[abi:ne180100](v5 + 3);
      operator delete(v5);
      v5 = (Phase::Controller::SpatialModelerInstance **)v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    operator delete(v7);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  Phase::Controller::SpatialModelerCategory::~SpatialModelerCategory(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::SpatialModelerCategory::Initialize(uint64_t a1, int a2, unint64_t a3, uint64_t a4, Phase::Logger *a5, Phase::Controller::RendererSystem *a6, uint64_t a7)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  _QWORD *v13;
  Phase::Controller::SpatialModelerInstance *v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  void **v18;
  void *i;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  Phase::Logger *v42;
  char v43;
  void *v44;
  _QWORD *v45;
  NSObject *v46;
  unint64_t v47;
  std::logic_error *v48;
  NSObject *v49;
  std::logic_error *exception;
  NSObject *v51;
  std::logic_error *v52;
  unint64_t v53;
  void *__p;
  unint64_t *v59;
  _BYTE buf[12];
  __int16 v61;
  int v62;
  __int16 v63;
  unint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if (a2 == 5 || !a2)
  {
    v49 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 240));
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmSpatialModelerCategory.mm";
      v61 = 1024;
      v62 = 38;
      _os_log_impl(&dword_2164CC000, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inSpatialCategory == SpatialCategory::Invalid || inSpatialCategory == SpatialCategory::Count is true]: \"Invalid Spatial Category!\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid Spatial Category!");
  }
  v10 = Phase::Controller::TaskManager::GetService<Phase::Controller::SpatialModelerRegistry>(a5, 5);
  Phase::Controller::SpatialModelerRegistry::GetSpatialModelerIds(v10, a2, (char **)&__p);
  v12 = (unint64_t *)__p;
  v11 = v59;
  v53 = a3;
  if (__p != v59)
  {
    v13 = (_QWORD *)(a1 + 56);
    while (1)
    {
      v14 = (Phase::Controller::SpatialModelerInstance *)operator new();
      Phase::Controller::SpatialModelerInstance::SpatialModelerInstance(v14);
      *(_QWORD *)buf = v14;
      v15 = *v12;
      v16 = *(_QWORD *)(a1 + 48);
      if (v16)
      {
        v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          a3 = *v12;
          if (v16 <= v15)
            a3 = v15 % v16;
        }
        else
        {
          a3 = (v16 - 1) & v15;
        }
        v18 = *(void ***)(*(_QWORD *)(a1 + 40) + 8 * a3);
        if (v18)
        {
          for (i = *v18; i; i = *(void **)i)
          {
            v20 = *((_QWORD *)i + 1);
            if (v20 == v15)
            {
              if (*((_QWORD *)i + 2) == v15)
              {
                v43 = 1;
LABEL_78:
                Phase::Controller::SpatialModelerInstance::~SpatialModelerInstance(v14);
                v42 = (Phase::Logger *)MEMORY[0x2199F9D70]();
                if ((v43 & 1) != 0)
                {
                  v46 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v42) + 240));
                  if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
                  {
                    v47 = *v12;
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = "CvmSpatialModelerCategory.mm";
                    v61 = 1024;
                    v62 = 57;
                    v63 = 2048;
                    v64 = v47;
                    _os_log_impl(&dword_2164CC000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Tried to create more than one spatial modeler instance with the same spatial modeler id: %llu.\"", buf, 0x1Cu);
                  }
                  v48 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v48, "Tried to create more than one spatial modeler instance with the same spatial modeler id: %llu.");
                  v48->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
                }
                goto LABEL_79;
              }
            }
            else
            {
              if (v17.u32[0] > 1uLL)
              {
                if (v20 >= v16)
                  v20 %= v16;
              }
              else
              {
                v20 &= v16 - 1;
              }
              if (v20 != a3)
                break;
            }
          }
        }
      }
      i = operator new(0x20uLL);
      *(_QWORD *)i = 0;
      *((_QWORD *)i + 1) = v15;
      *(_QWORD *)buf = 0;
      *((_QWORD *)i + 2) = v15;
      *((_QWORD *)i + 3) = v14;
      v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 64) + 1);
      v22 = *(float *)(a1 + 72);
      if (!v16 || (float)(v22 * (float)v16) < v21)
        break;
LABEL_67:
      v39 = *(_QWORD *)(a1 + 40);
      v40 = *(_QWORD **)(v39 + 8 * a3);
      if (v40)
      {
        *(_QWORD *)i = *v40;
LABEL_75:
        *v40 = i;
        goto LABEL_76;
      }
      *(_QWORD *)i = *v13;
      *v13 = i;
      *(_QWORD *)(v39 + 8 * a3) = v13;
      if (*(_QWORD *)i)
      {
        v41 = *(_QWORD *)(*(_QWORD *)i + 8);
        if ((v16 & (v16 - 1)) != 0)
        {
          if (v41 >= v16)
            v41 %= v16;
        }
        else
        {
          v41 &= v16 - 1;
        }
        v40 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v41);
        goto LABEL_75;
      }
LABEL_76:
      ++*(_QWORD *)(a1 + 64);
      v14 = *(Phase::Controller::SpatialModelerInstance **)buf;
      if (*(_QWORD *)buf)
      {
        v43 = 0;
        goto LABEL_78;
      }
LABEL_79:
      Phase::Controller::SpatialModelerInstance::Initialize(*((Phase::Controller::SpatialModelerInstance **)i + 3), *v12++, a4, a5, a6, a7);
      a3 = v53;
      if (v12 == v11)
        goto LABEL_90;
    }
    v23 = (v16 & (v16 - 1)) != 0;
    if (v16 < 3)
      v23 = 1;
    v24 = v23 | (2 * v16);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = (int8x8_t)v25;
    else
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v16 = *(_QWORD *)(a1 + 48);
    }
    if (*(_QWORD *)&prime > v16)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v16)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 64) / *(float *)(a1 + 72));
      if (v16 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (*(_QWORD *)&prime <= v33)
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime >= v16)
      {
        v16 = *(_QWORD *)(a1 + 48);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v27 = operator new(8 * *(_QWORD *)&prime);
          v28 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v27;
          if (v28)
            operator delete(v28);
          v29 = 0;
          *(int8x8_t *)(a1 + 48) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v29++) = 0;
          while (*(_QWORD *)&prime != v29);
          v30 = (_QWORD *)*v13;
          if (*v13)
          {
            v31 = v30[1];
            v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(_QWORD *)&prime)
                v31 %= *(_QWORD *)&prime;
            }
            else
            {
              v31 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v31) = v13;
            v36 = (_QWORD *)*v30;
            if (*v30)
            {
              do
              {
                v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&prime)
                    v37 %= *(_QWORD *)&prime;
                }
                else
                {
                  v37 &= *(_QWORD *)&prime - 1;
                }
                if (v37 != v31)
                {
                  v38 = *(_QWORD *)(a1 + 40);
                  if (!*(_QWORD *)(v38 + 8 * v37))
                  {
                    *(_QWORD *)(v38 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  *v30 = *v36;
                  *v36 = **(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * v37);
                  **(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * v37) = v36;
                  v36 = v30;
                }
                v37 = v31;
LABEL_58:
                v30 = v36;
                v36 = (_QWORD *)*v36;
                v31 = v37;
              }
              while (v36);
            }
          }
          v16 = (unint64_t)prime;
          goto LABEL_62;
        }
        v44 = *(void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = 0;
        if (v44)
          operator delete(v44);
        v16 = 0;
        *(_QWORD *)(a1 + 48) = 0;
      }
    }
LABEL_62:
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v16 <= v15)
        a3 = v15 % v16;
      else
        a3 = v15;
    }
    else
    {
      a3 = (v16 - 1) & v15;
    }
    goto LABEL_67;
  }
LABEL_90:
  *(_DWORD *)(a1 + 36) = a2;
  v45 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(a1 + 40), a3);
  if (!v45)
  {
    v51 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 240));
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmSpatialModelerCategory.mm";
      v61 = 1024;
      v62 = 71;
      v63 = 2048;
      v64 = v53;
      _os_log_impl(&dword_2164CC000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"A spatial modeler instance matching %llu cannot be found.\"", buf, 0x1Cu);
    }
    v52 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v52, "A spatial modeler instance matching %llu cannot be found.");
    v52->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  *(_QWORD *)(a1 + 80) = v45[3];
  if (__p)
  {
    v59 = (unint64_t *)__p;
    operator delete(__p);
  }
}

void sub_216514FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::SpatialModelerRegistry>(Phase::Logger *a1, int a2)
{
  uint64_t v3;
  Phase::Logger *v4;
  uint64_t (**v5)(uint64_t, _QWORD, _QWORD, _QWORD, void *);
  NSObject *v7;
  std::logic_error *exception;
  NSObject *v9;
  std::string *v10;
  std::logic_error *v11;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 7) - v3) >> 5))
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 448));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 112;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(_QWORD *)v4)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v14 = "TaskManager.hpp";
      v15 = 1024;
      v16 = 121;
      v17 = 1024;
      v18 = a2;
      v19 = 2080;
      v20 = v10;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  v5 = std::any_cast[abi:ne180100]<Phase::Controller::SpatialModelerRegistry * const>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v4);
  if (!v5)
    std::__throw_bad_any_cast[abi:ne180100]();
  return (uint64_t)*v5;
}

void sub_2165152C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2165153B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2165153D4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialModelerCategory::SetActiveSpatialModeler(Phase::Controller::SpatialModelerCategory *this, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 v6;
  NSObject *v7;
  std::logic_error *exception;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)this + 5, a2);
  if (!v4)
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315650;
      v10 = "CvmSpatialModelerCategory.mm";
      v11 = 1024;
      v12 = 111;
      v13 = 2048;
      v14 = a2;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [iterator == mSpatialModelerInstances.end() is true]: \"Invalid SpatialModelerId %llu!\"", (uint8_t *)&v9, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid SpatialModelerId %llu!");
  }
  v5 = v4[3];
  if (v5 != *((_QWORD *)this + 10))
  {
    v6 = atomic_load((unsigned __int8 *)(v5 + 5641));
    if ((v6 & 1) != 0)
      std::terminate();
    Phase::Controller::SpatialModelerInstance::StopUpdate(*((Phase::Controller::SpatialModelerInstance **)this + 10));
    Phase::Controller::SpatialModelerInstance::Reset((Phase::Controller::SpatialSubmixRouter **)v5);
    Phase::Controller::SpatialModelerInstance::CopyRuntimeSettingsFrom((Phase::Controller::SpatialModelerInstance *)v5, *((__n128 **)this + 10));
    Phase::Controller::SpatialModelerInstance::UnregisterAllSubmixes(*((Phase::Controller::SpatialModelerInstance **)this
                                                                     + 10));
    Phase::Controller::SpatialModelerInstance::Reset(*((Phase::Controller::SpatialSubmixRouter ***)this + 10));
    *((_QWORD *)this + 10) = v5;
    Phase::Controller::SpatialModelerCategory::Update((Phase::Controller::SpatialModelerInstance **)this, 0.0);
  }
}

void sub_216515580(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void Phase::Controller::SpatialModelerCategory::Update(Phase::Controller::SpatialModelerInstance **this, double a2)
{
  uint64_t InstancePtr;
  Phase::Logger *v5;
  Phase::Logger *v6;
  NSObject *v7;
  NSObject *v8;
  Phase::Controller::RenderGroupMgr **v9;
  Phase::Logger *v10;
  Phase::Logger *v11;
  NSObject *v12;
  NSObject *v13;
  uint8_t v14[16];
  uint8_t buf[16];

  InstancePtr = Phase::Logger::GetInstancePtr((Phase::Logger *)this);
  v5 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(InstancePtr + 896));
  v6 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v5);
  if (*((_BYTE *)v6 + 904))
  {
    v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v6)
                                                                                       + 896)));
    v8 = v7;
    if ((unint64_t)v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v8, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v5, "Phase_SpatialModelerSystem_Update", "Spatial Modeler Category Update", buf, 2u);
    }

  }
  v9 = (Phase::Controller::RenderGroupMgr **)*((_QWORD *)this[10] + 809);
  Phase::Controller::RenderGroupMgr::LoadFreshData(v9[46]);
  Phase::Controller::RouterCommandList::ExecuteCommands((Phase::Controller::RouterCommandList *)v9, v9);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  Phase::Controller::SpatialModelerInstance::Update(this[10], a2);
  v11 = (Phase::Logger *)Phase::Logger::GetInstancePtr(v10);
  if (*((_BYTE *)v11 + 904))
  {
    v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11)
                                                                                        + 896)));
    v13 = v12;
    if ((unint64_t)v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
    {
      *(_WORD *)v14 = 0;
      _os_signpost_emit_with_name_impl(&dword_2164CC000, v13, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v5, "Phase_SpatialModelerSystem_Update", (const char *)&unk_21676613F, v14, 2u);
    }

  }
}

void Phase::Controller::SpatialModelerCategory::RegisterSubmix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 **a6)
{
  unint64_t v6;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  _QWORD *v16;
  _QWORD *i;
  unint64_t v18;
  _QWORD *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  NSObject *v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  NSObject *v48;
  std::logic_error *v50;
  NSObject *v51;
  std::logic_error *exception;
  Phase::Logger *InstancePtr;
  NSObject *v54;
  std::runtime_error *v55;
  __int128 v56;
  BOOL v57;
  unint64_t v58;
  _BYTE v59[32];
  uint64_t v60;
  __int128 *v61;
  __int128 *v62;
  uint64_t v63;
  _BYTE buf[12];
  __int16 v65;
  int v66;
  __int16 v67;
  unint64_t v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v56 = a2;
  *((_QWORD *)&v56 + 1) = a3;
  if (!(a2 | a3))
  {
    v51 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 240));
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v59 = 136315394;
      *(_QWORD *)&v59[4] = "CvmSpatialModelerCategory.mm";
      *(_WORD *)&v59[12] = 1024;
      *(_DWORD *)&v59[14] = 156;
      _os_log_impl(&dword_2164CC000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [inSubmixId == kInvalidSubmixId is true]: \"Invalid SubmixId!\"", v59, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid SubmixId!");
  }
  v12 = 0;
  v13 = 0xCBF29CE484222325;
  do
    v13 = 0x100000001B3 * (v13 ^ *((char *)&v56 + v12++));
  while (v12 != 16);
  v14 = *(_QWORD *)(a1 + 96);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v6 = v13;
      if (v13 >= v14)
        v6 = v13 % v14;
    }
    else
    {
      v6 = (v14 - 1) & v13;
    }
    v16 = *(_QWORD **)(*(_QWORD *)(a1 + 88) + 8 * v6);
    if (v16)
    {
      for (i = (_QWORD *)*v16; i; i = (_QWORD *)*i)
      {
        v18 = i[1];
        if (v18 == v13)
        {
          if (i[2] == a2 && i[3] == a3)
          {
            v48 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 240));
            if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v59 = 136315650;
              *(_QWORD *)&v59[4] = "CvmSpatialModelerCategory.mm";
              *(_WORD *)&v59[12] = 1024;
              *(_DWORD *)&v59[14] = 163;
              *(_WORD *)&v59[18] = 2048;
              *(_QWORD *)&v59[20] = a2;
              _os_log_impl(&dword_2164CC000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (IdAlreadyExists) [!mRegisteredSubmixes.insert(inSubmixId).second is true]: \"SubmixId %llu is already registered!\"", v59, 0x1Cu);
            }
            v50 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            _ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(v50, "SubmixId %llu is already registered!");
          }
        }
        else
        {
          if (v15.u32[0] > 1uLL)
          {
            if (v18 >= v14)
              v18 %= v14;
          }
          else
          {
            v18 &= v14 - 1;
          }
          if (v18 != v6)
            break;
        }
      }
    }
  }
  v20 = operator new(0x20uLL);
  *v20 = 0;
  v20[1] = v13;
  *((_OWORD *)v20 + 1) = v56;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 112) + 1);
  v22 = *(float *)(a1 + 120);
  if (!v14 || (float)(v22 * (float)v14) < v21)
  {
    v23 = 1;
    if (v14 >= 3)
      v23 = (v14 & (v14 - 1)) != 0;
    v24 = v23 | (2 * v14);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = (int8x8_t)v25;
    else
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v14 = *(_QWORD *)(a1 + 96);
    }
    if (*(_QWORD *)&prime > v14)
      goto LABEL_37;
    if (*(_QWORD *)&prime < v14)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 112) / *(float *)(a1 + 120));
      if (v14 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (*(_QWORD *)&prime <= v33)
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime >= v14)
      {
        v14 = *(_QWORD *)(a1 + 96);
      }
      else
      {
        if (prime)
        {
LABEL_37:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v27 = operator new(8 * *(_QWORD *)&prime);
          v28 = *(void **)(a1 + 88);
          *(_QWORD *)(a1 + 88) = v27;
          if (v28)
            operator delete(v28);
          v29 = 0;
          *(int8x8_t *)(a1 + 96) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v29++) = 0;
          while (*(_QWORD *)&prime != v29);
          v30 = *(_QWORD **)(a1 + 104);
          if (v30)
          {
            v31 = v30[1];
            v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(_QWORD *)&prime)
                v31 %= *(_QWORD *)&prime;
            }
            else
            {
              v31 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v31) = a1 + 104;
            v36 = (_QWORD *)*v30;
            if (*v30)
            {
              do
              {
                v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&prime)
                    v37 %= *(_QWORD *)&prime;
                }
                else
                {
                  v37 &= *(_QWORD *)&prime - 1;
                }
                if (v37 != v31)
                {
                  v38 = *(_QWORD *)(a1 + 88);
                  if (!*(_QWORD *)(v38 + 8 * v37))
                  {
                    *(_QWORD *)(v38 + 8 * v37) = v30;
                    goto LABEL_62;
                  }
                  *v30 = *v36;
                  *v36 = **(_QWORD **)(*(_QWORD *)(a1 + 88) + 8 * v37);
                  **(_QWORD **)(*(_QWORD *)(a1 + 88) + 8 * v37) = v36;
                  v36 = v30;
                }
                v37 = v31;
LABEL_62:
                v30 = v36;
                v36 = (_QWORD *)*v36;
                v31 = v37;
              }
              while (v36);
            }
          }
          v14 = (unint64_t)prime;
          goto LABEL_66;
        }
        v47 = *(void **)(a1 + 88);
        *(_QWORD *)(a1 + 88) = 0;
        if (v47)
          operator delete(v47);
        v14 = 0;
        *(_QWORD *)(a1 + 96) = 0;
      }
    }
LABEL_66:
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v6 = v13 % v14;
      else
        v6 = v13;
    }
    else
    {
      v6 = (v14 - 1) & v13;
    }
  }
  v39 = *(_QWORD *)(a1 + 88);
  v40 = *(_QWORD **)(v39 + 8 * v6);
  if (v40)
  {
    *v20 = *v40;
  }
  else
  {
    *v20 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v20;
    *(_QWORD *)(v39 + 8 * v6) = a1 + 104;
    if (!*v20)
      goto LABEL_80;
    v41 = *(_QWORD *)(*v20 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v41 >= v14)
        v41 %= v14;
    }
    else
    {
      v41 &= v14 - 1;
    }
    v40 = (_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v41);
  }
  *v40 = v20;
LABEL_80:
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v59 = a1;
  *(_OWORD *)&v59[8] = v56;
  *(_QWORD *)&v59[24] = a4;
  v60 = a5;
  v62 = 0;
  v63 = 0;
  v61 = 0;
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::OptionalPropertyDescription*,Phase::SpatialModeler::OptionalPropertyDescription*>((uint64_t)&v61, *a6, a6[1], 0x6DB6DB6DB6DB6DB7 * (((char *)a6[1] - (char *)*a6) >> 3));
  v42 = **(_QWORD **)(a1 + 8);
  v58 = 0;
  v57 = 1;
  v43 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v42, 72, &v58, &v57);
  if (!v43)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v54 = objc_retainAutorelease(**(id **)(v42 + 48));
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CommandQueue.hpp";
      v65 = 1024;
      v66 = 100;
      _os_log_impl(&dword_2164CC000, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v57)
  {
    v44 = objc_retainAutorelease(**(id **)(v42 + 48));
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "CommandQueue.hpp";
      v65 = 1024;
      v66 = 89;
      v67 = 2048;
      v68 = v58;
      v69 = 2048;
      v70 = 72;
      _os_log_impl(&dword_2164CC000, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(_QWORD *)v43 = off_24D578C40;
  v45 = *(_OWORD *)v59;
  v46 = *(_OWORD *)&v59[16];
  *((_QWORD *)v43 + 5) = v60;
  *(_OWORD *)(v43 + 6) = v46;
  *(_OWORD *)(v43 + 2) = v45;
  *((_QWORD *)v43 + 7) = 0;
  *((_QWORD *)v43 + 8) = 0;
  *((_QWORD *)v43 + 6) = 0;
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::OptionalPropertyDescription*,Phase::SpatialModeler::OptionalPropertyDescription*>((uint64_t)(v43 + 12), v61, v62, 0x6DB6DB6DB6DB6DB7 * (((char *)v62 - (char *)v61) >> 3));
  Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v42, 72);
  atomic_store(0, (unsigned __int8 *)(v42 + 40));
  *(_QWORD *)buf = &v61;
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_216515ED0(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216515C50);
  }
  _Unwind_Resume(exception_object);
}

void sub_216515F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  JUMPOUT(0x216515F0CLL);
}

void sub_216515F54(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x216515F0CLL);
}

std::logic_error *_ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)&off_24D578EE0;
  return result;
}

_QWORD *Phase::Controller::SpatialModelerCategory::UnregisterSubmix(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD **v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  NSObject *v22;
  Phase::Logger *InstancePtr;
  NSObject *v24;
  std::runtime_error *exception;
  __int128 v26;
  BOOL v27;
  unint64_t v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  unint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;

  v3 = result;
  v4 = 0;
  v37 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v26 = a2;
  *((_QWORD *)&v26 + 1) = a3;
  v5 = 0xCBF29CE484222325;
  do
    v5 = 0x100000001B3 * (v5 ^ *((char *)&v26 + v4++));
  while (v4 != 16);
  v6 = (int8x8_t)result[12];
  if (!*(_QWORD *)&v6)
    return result;
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v5;
    if (v5 >= *(_QWORD *)&v6)
      v8 = v5 % *(_QWORD *)&v6;
  }
  else
  {
    v8 = (*(_QWORD *)&v6 - 1) & v5;
  }
  v9 = result[11];
  v10 = *(_QWORD ***)(v9 + 8 * v8);
  if (!v10)
    return result;
  result = *v10;
  if (!*v10)
    return result;
  v11 = *(_QWORD *)&v6 - 1;
  while (1)
  {
    v12 = result[1];
    if (v12 == v5)
      break;
    if (v7.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v6)
        v12 %= *(_QWORD *)&v6;
    }
    else
    {
      v12 &= v11;
    }
    if (v12 != v8)
      return result;
LABEL_23:
    result = (_QWORD *)*result;
    if (!result)
      return result;
  }
  if (result[2] != a2 || result[3] != a3)
    goto LABEL_23;
  v14 = (_QWORD *)*result;
  if (v7.u32[0] > 1uLL)
  {
    if (v5 >= *(_QWORD *)&v6)
      v5 %= *(_QWORD *)&v6;
  }
  else
  {
    v5 &= v11;
  }
  v15 = *(_QWORD **)(v9 + 8 * v5);
  do
  {
    v16 = v15;
    v15 = (_QWORD *)*v15;
  }
  while (v15 != result);
  if (v16 == v3 + 13)
    goto LABEL_42;
  v17 = v16[1];
  if (v7.u32[0] > 1uLL)
  {
    if (v17 >= *(_QWORD *)&v6)
      v17 %= *(_QWORD *)&v6;
  }
  else
  {
    v17 &= v11;
  }
  if (v17 == v5)
  {
LABEL_44:
    if (v14)
    {
      v18 = v14[1];
      goto LABEL_46;
    }
  }
  else
  {
LABEL_42:
    if (!v14)
      goto LABEL_43;
    v18 = v14[1];
    if (v7.u32[0] > 1uLL)
    {
      v19 = v14[1];
      if (v18 >= *(_QWORD *)&v6)
        v19 = v18 % *(_QWORD *)&v6;
    }
    else
    {
      v19 = v18 & v11;
    }
    if (v19 != v5)
    {
LABEL_43:
      *(_QWORD *)(v9 + 8 * v5) = 0;
      v14 = (_QWORD *)*result;
      goto LABEL_44;
    }
LABEL_46:
    if (v7.u32[0] > 1uLL)
    {
      if (v18 >= *(_QWORD *)&v6)
        v18 %= *(_QWORD *)&v6;
    }
    else
    {
      v18 &= v11;
    }
    if (v18 != v5)
    {
      *(_QWORD *)(v3[11] + 8 * v18) = v16;
      v14 = (_QWORD *)*result;
    }
  }
  *v16 = v14;
  *result = 0;
  --v3[14];
  operator delete(result);
  v20 = *(_QWORD *)v3[1];
  v28 = 0;
  v27 = 1;
  v21 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v20, 32, &v28, &v27);
  if (!v21)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v24 = objc_retainAutorelease(**(id **)(v20 + 48));
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v30 = "CommandQueue.hpp";
      v31 = 1024;
      v32 = 100;
      _os_log_impl(&dword_2164CC000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v27)
  {
    v22 = objc_retainAutorelease(**(id **)(v20 + 48));
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v30 = "CommandQueue.hpp";
      v31 = 1024;
      v32 = 89;
      v33 = 2048;
      v34 = v28;
      v35 = 2048;
      v36 = 32;
      _os_log_impl(&dword_2164CC000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(_QWORD *)v21 = &off_24D578C68;
  *((_QWORD *)v21 + 1) = v3;
  *((_OWORD *)v21 + 1) = v26;
  result = (_QWORD *)Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v20, 32);
  atomic_store(0, (unsigned __int8 *)(v20 + 40));
  return result;
}

void sub_216516358(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x21651627CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatialModelerCategory::AddInput(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  _DWORD *v9;
  NSObject *v10;
  uint64_t result;
  Phase::Logger *InstancePtr;
  NSObject *v13;
  std::runtime_error *exception;
  BOOL v15;
  unint64_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v8 = **(_QWORD **)(a1 + 8);
  v16 = 0;
  v15 = 1;
  v9 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v8, 40, &v16, &v15);
  if (!v9)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v13 = objc_retainAutorelease(**(id **)(v8 + 48));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v18 = "CommandQueue.hpp";
      v19 = 1024;
      v20 = 100;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v15)
  {
    v10 = objc_retainAutorelease(**(id **)(v8 + 48));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v18 = "CommandQueue.hpp";
      v19 = 1024;
      v20 = 89;
      v21 = 2048;
      v22 = v16;
      v23 = 2048;
      v24 = 40;
      _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(_QWORD *)v9 = &off_24D578C90;
  *((_QWORD *)v9 + 1) = a1;
  *((_QWORD *)v9 + 2) = a2;
  *((_QWORD *)v9 + 3) = a3;
  *((double *)v9 + 4) = a4;
  result = Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v8, 40);
  atomic_store(0, (unsigned __int8 *)(v8 + 40));
  return result;
}

void sub_2165165BC(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x2165164D8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatialModelerCategory::SetInputSendLevel(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  _DWORD *v9;
  NSObject *v10;
  uint64_t result;
  Phase::Logger *InstancePtr;
  NSObject *v13;
  std::runtime_error *exception;
  BOOL v15;
  unint64_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v8 = **(_QWORD **)(a1 + 8);
  v16 = 0;
  v15 = 1;
  v9 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v8, 40, &v16, &v15);
  if (!v9)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v13 = objc_retainAutorelease(**(id **)(v8 + 48));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v18 = "CommandQueue.hpp";
      v19 = 1024;
      v20 = 100;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v15)
  {
    v10 = objc_retainAutorelease(**(id **)(v8 + 48));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v18 = "CommandQueue.hpp";
      v19 = 1024;
      v20 = 89;
      v21 = 2048;
      v22 = v16;
      v23 = 2048;
      v24 = 40;
      _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(_QWORD *)v9 = &off_24D578CB8;
  *((_QWORD *)v9 + 1) = a1;
  *((_QWORD *)v9 + 2) = a2;
  *((_QWORD *)v9 + 3) = a3;
  *((double *)v9 + 4) = a4;
  result = Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v8, 40);
  atomic_store(0, (unsigned __int8 *)(v8 + 40));
  return result;
}

void sub_216516820(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x21651673CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatialModelerCategory::RemoveInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  uint64_t result;
  Phase::Logger *InstancePtr;
  NSObject *v11;
  std::runtime_error *exception;
  BOOL v13;
  unint64_t v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = **(_QWORD **)(a1 + 8);
  v14 = 0;
  v13 = 1;
  v7 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v6, 32, &v14, &v13);
  if (!v7)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v11 = objc_retainAutorelease(**(id **)(v6 + 48));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v16 = "CommandQueue.hpp";
      v17 = 1024;
      v18 = 100;
      _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v13)
  {
    v8 = objc_retainAutorelease(**(id **)(v6 + 48));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v16 = "CommandQueue.hpp";
      v17 = 1024;
      v18 = 89;
      v19 = 2048;
      v20 = v14;
      v21 = 2048;
      v22 = 32;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *v7 = &off_24D578CE0;
  v7[1] = a1;
  v7[2] = a2;
  v7[3] = a3;
  result = Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v6, 32);
  atomic_store(0, (unsigned __int8 *)(v6 + 40));
  return result;
}

void sub_216516A74(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216516994);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatialModelerCategory::SetPlayState(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  _DWORD *v9;
  NSObject *v10;
  uint64_t result;
  Phase::Logger *InstancePtr;
  NSObject *v13;
  std::runtime_error *exception;
  BOOL v15;
  unint64_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v8 = **(_QWORD **)(a1 + 8);
  v16 = 0;
  v15 = 1;
  v9 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v8, 40, &v16, &v15);
  if (!v9)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v13 = objc_retainAutorelease(**(id **)(v8 + 48));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v18 = "CommandQueue.hpp";
      v19 = 1024;
      v20 = 100;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v15)
  {
    v10 = objc_retainAutorelease(**(id **)(v8 + 48));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v18 = "CommandQueue.hpp";
      v19 = 1024;
      v20 = 89;
      v21 = 2048;
      v22 = v16;
      v23 = 2048;
      v24 = 40;
      _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(_QWORD *)v9 = &off_24D578D08;
  *((_QWORD *)v9 + 1) = a1;
  *((_QWORD *)v9 + 2) = a2;
  *((_QWORD *)v9 + 3) = a3;
  v9[8] = a4;
  result = Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v8, 40);
  atomic_store(0, (unsigned __int8 *)(v8 + 40));
  return result;
}

void sub_216516CD8(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216516BF4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatialModelerCategory::SetMinimumSimulationGainInDecibels(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  _DWORD *v9;
  NSObject *v10;
  uint64_t result;
  Phase::Logger *InstancePtr;
  NSObject *v13;
  std::runtime_error *exception;
  BOOL v15;
  unint64_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v8 = **(_QWORD **)(a1 + 8);
  v16 = 0;
  v15 = 1;
  v9 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v8, 40, &v16, &v15);
  if (!v9)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v13 = objc_retainAutorelease(**(id **)(v8 + 48));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v18 = "CommandQueue.hpp";
      v19 = 1024;
      v20 = 100;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v15)
  {
    v10 = objc_retainAutorelease(**(id **)(v8 + 48));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v18 = "CommandQueue.hpp";
      v19 = 1024;
      v20 = 89;
      v21 = 2048;
      v22 = v16;
      v23 = 2048;
      v24 = 40;
      _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(_QWORD *)v9 = &off_24D578D30;
  *((_QWORD *)v9 + 1) = a1;
  *((_QWORD *)v9 + 2) = a2;
  *((_QWORD *)v9 + 3) = a3;
  *((double *)v9 + 4) = a4;
  result = Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v8, 40);
  atomic_store(0, (unsigned __int8 *)(v8 + 40));
  return result;
}

void sub_216516F3C(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x216516E58);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatialModelerCategory::SetSimulationGainInDecibels(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  _DWORD *v9;
  NSObject *v10;
  uint64_t result;
  Phase::Logger *InstancePtr;
  NSObject *v13;
  std::runtime_error *exception;
  BOOL v15;
  unint64_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v8 = **(_QWORD **)(a1 + 8);
  v16 = 0;
  v15 = 1;
  v9 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v8, 40, &v16, &v15);
  if (!v9)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v13 = objc_retainAutorelease(**(id **)(v8 + 48));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v18 = "CommandQueue.hpp";
      v19 = 1024;
      v20 = 100;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v15)
  {
    v10 = objc_retainAutorelease(**(id **)(v8 + 48));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v18 = "CommandQueue.hpp";
      v19 = 1024;
      v20 = 89;
      v21 = 2048;
      v22 = v16;
      v23 = 2048;
      v24 = 40;
      _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(_QWORD *)v9 = &off_24D578D58;
  *((_QWORD *)v9 + 1) = a1;
  *((_QWORD *)v9 + 2) = a2;
  *((_QWORD *)v9 + 3) = a3;
  *((double *)v9 + 4) = a4;
  result = Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v8, 40);
  atomic_store(0, (unsigned __int8 *)(v8 + 40));
  return result;
}

void sub_2165171A0(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x2165170BCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatialModelerCategory::SetProperty(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, _OWORD *a6)
{
  __int128 v11;
  uint64_t v12;
  _DWORD *v13;
  NSObject *v14;
  __int128 v15;
  uint64_t result;
  Phase::Logger *InstancePtr;
  NSObject *v18;
  std::runtime_error *exception;
  BOOL v20;
  unint64_t v21;
  _BYTE v22[51];
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  unint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v11 = a6[1];
  *(_OWORD *)&v22[3] = *a6;
  *(_OWORD *)&v22[19] = v11;
  *(_OWORD *)&v22[35] = a6[2];
  v12 = **(_QWORD **)(a1 + 8);
  v21 = 0;
  v20 = 1;
  v13 = Phase::LockFreeQueueMPSC::GetWriteBuffer((Phase::LockFreeQueueMPSC *)v12, 88, &v21, &v20);
  if (!v13)
  {
    InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(InstancePtr, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    v18 = objc_retainAutorelease(**(id **)(v12 + 48));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v24 = "CommandQueue.hpp";
      v25 = 1024;
      v26 = 100;
      _os_log_impl(&dword_2164CC000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v20)
  {
    v14 = objc_retainAutorelease(**(id **)(v12 + 48));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v24 = "CommandQueue.hpp";
      v25 = 1024;
      v26 = 89;
      v27 = 2048;
      v28 = v21;
      v29 = 2048;
      v30 = 88;
      _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  v15 = *(_OWORD *)&v22[16];
  *(_OWORD *)((char *)v13 + 37) = *(_OWORD *)v22;
  *(_QWORD *)v13 = &off_24D578D80;
  *((_QWORD *)v13 + 1) = a1;
  *((_QWORD *)v13 + 2) = a2;
  *((_QWORD *)v13 + 3) = a3;
  v13[8] = a4;
  *((_BYTE *)v13 + 36) = a5;
  *(_OWORD *)((char *)v13 + 53) = v15;
  *(_OWORD *)((char *)v13 + 69) = *(_OWORD *)&v22[32];
  v13[21] = *(_DWORD *)&v22[47];
  result = Phase::LockFreeQueueSPSC::CommitBytes((Phase::LockFreeQueueSPSC *)v12, 88);
  atomic_store(0, (unsigned __int8 *)(v12 + 40));
  return result;
}

void sub_216517440(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x21651735CLL);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::SpatialModelerCategory::SetComputeTime(Phase::Controller::SpatialModelerCategory *this, double a2)
{
  NSObject *v2;
  std::logic_error *exception;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a2 <= 0.0)
  {
    v2 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 224));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315394;
      v5 = "CvmSpatialModelerCategory.mm";
      v6 = 1024;
      v7 = 265;
      _os_log_impl(&dword_2164CC000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inComputeTime > 0 is false.", (uint8_t *)&v4, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: inComputeTime > 0 is false.");
  }
  *((double *)this + 16) = a2;
  atomic_store(*(unint64_t *)&a2, (unint64_t *)(*((_QWORD *)this + 10) + 312));
}

void sub_2165175A8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void Phase::Controller::SpatialModelerCategory::GetEntityShapeTemplates(Phase::Controller::SpatialModelerCategory *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  for (i = (_QWORD *)*((_QWORD *)this + 7); i; i = (_QWORD *)*i)
  {
    v4 = *(_QWORD *)(i[3] + 5864);
    v6 = 0;
    v7 = 0;
    v5 = 0;
    std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::EntityShapeTemplate*,Phase::SpatialModeler::EntityShapeTemplate*>(&v5, *(_QWORD *)(v4 + 248), *(_QWORD *)(v4 + 256), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v4 + 256) - *(_QWORD *)(v4 + 248)) >> 3));
    std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Phase::SpatialModeler::EntityShapeTemplate const*>,std::__wrap_iter<Phase::SpatialModeler::EntityShapeTemplate const*>>((char **)a2, *(_QWORD *)(a2 + 8), v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3));
    v8 = (void **)&v5;
    std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
}

void sub_21651766C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void ***a12)
{
  a12 = &a9;
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatialModelerCategory::Reset(Phase::Controller::SpatialModelerCategory *this)
{
  uint64_t result;
  uint64_t **i;

  result = Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  for (i = (uint64_t **)*((_QWORD *)this + 7); i; i = (uint64_t **)*i)
    result = (uint64_t)Phase::Controller::SpatialModelerInstance::Reset((Phase::Controller::SpatialSubmixRouter **)i[3]);
  return result;
}

void Phase::Controller::IdAlreadyExists::~IdAlreadyExists(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x2199F9D70);
}

void std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 56)
  {
    if (*(char *)(i - 33) < 0)
      operator delete(*(void **)(i - 56));
  }
  a1[1] = v2;
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Controller::SpatialModelerRegistry * const>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::SpatialModelerRegistry *>::__id);
    else
      return 0;
  }
  return result;
}

Phase::Controller::SpatialModelerInstance *std::unique_ptr<Phase::Controller::SpatialModelerInstance>::reset[abi:ne180100](Phase::Controller::SpatialModelerInstance **a1)
{
  Phase::Controller::SpatialModelerInstance *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    Phase::Controller::SpatialModelerInstance::~SpatialModelerInstance(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::OptionalPropertyDescription*,Phase::SpatialModeler::OptionalPropertyDescription*>(uint64_t result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  __int128 v12;
  _QWORD v13[3];
  char v14;
  char *v15;
  char *v16;

  if (a4)
  {
    if (a4 >= 0x492492492492493)
      std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
    v7 = (_QWORD *)result;
    v8 = (char *)operator new(56 * a4);
    *v7 = v8;
    v7[1] = v8;
    v7[2] = &v8[56 * a4];
    v15 = v8;
    v16 = v8;
    v13[0] = v7 + 2;
    v13[1] = &v15;
    v13[2] = &v16;
    v14 = 0;
    if (a2 == a3)
    {
      v9 = v8;
    }
    else
    {
      v9 = v8;
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v9, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
          v11 = v16;
        }
        else
        {
          v10 = *a2;
          *((_QWORD *)v9 + 2) = *((_QWORD *)a2 + 2);
          *(_OWORD *)v9 = v10;
          v11 = v9;
        }
        v12 = *(__int128 *)((char *)a2 + 24);
        *(_OWORD *)(v9 + 40) = *(__int128 *)((char *)a2 + 40);
        *(_OWORD *)(v9 + 24) = v12;
        a2 = (__int128 *)((char *)a2 + 56);
        v9 = v11 + 56;
        v16 = v11 + 56;
      }
      while (a2 != a3);
    }
    v14 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::OptionalPropertyDescription>,Phase::SpatialModeler::OptionalPropertyDescription*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
    v7[1] = v9;
  }
  return result;
}

void sub_216517928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::OptionalPropertyDescription>,Phase::SpatialModeler::OptionalPropertyDescription*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::OptionalPropertyDescription>,Phase::SpatialModeler::OptionalPropertyDescription*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::OptionalPropertyDescription>,Phase::SpatialModeler::OptionalPropertyDescription*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 33) < 0)
      operator delete(*(void **)(v1 - 56));
    v1 -= 56;
  }
}

uint64_t Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::RegisterSubmix(Phase::UniqueObjectId,Phase::Handle64,Phase::Handle64,std::vector<Phase::SpatialModeler::OptionalPropertyDescription> const&)::$_0,void>::~LambdaFunction(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24D578C40;
  v3 = (void **)(a1 + 48);
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = off_24D578C40;
  v3 = (void **)(a1 + 48);
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x2199F9D70](a1, 0x10A1C4006195FD6);
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::RegisterSubmix(Phase::UniqueObjectId,Phase::Handle64,Phase::Handle64,std::vector<Phase::SpatialModeler::OptionalPropertyDescription> const&)::$_0,void>::operator()(_QWORD *a1)
{
  uint64_t v2;
  Phase::Logger *v3;
  NSObject *v4;
  uint64_t v5;
  std::logic_error *exception;
  _BYTE v7[18];
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1[1] + 80);
  *(_OWORD *)v7 = *((_OWORD *)a1 + 1);
  v3 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(v2 + 8), v7);
  if (v3)
  {
    v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v3) + 240));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = a1[2];
      *(_DWORD *)v7 = 136315650;
      *(_QWORD *)&v7[4] = "CvmSpatialModelerCategory.mm";
      *(_WORD *)&v7[12] = 1024;
      *(_DWORD *)&v7[14] = 172;
      v8 = 2048;
      v9 = v5;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (IdAlreadyExists) [activeModeler->IsRegistered(inSubmixId) is true]: \"SubmixId %llu is already registered!\"", v7, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(exception, "SubmixId %llu is already registered!");
  }
  Phase::Controller::SpatialModelerInstance::RegisterSubmix(v2, a1[2], a1[3], a1[4], a1[5], a1 + 6);
}

void sub_216517BA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::UnregisterSubmix(Phase::UniqueObjectId)::$_0,void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::UnregisterSubmix(Phase::UniqueObjectId)::$_0,void>::operator()(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _BYTE v5[18];
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  *(_OWORD *)v5 = *(_OWORD *)(a1 + 16);
  if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(v2 + 8), v5))
  {
    Phase::Controller::SpatialModelerInstance::UnregisterSubmix(v2, *(void **)(a1 + 16), *(void **)(a1 + 24));
  }
  else
  {
    v3 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 224));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)v5 = 136315650;
      *(_QWORD *)&v5[4] = "CvmSpatialModelerCategory.mm";
      *(_WORD *)&v5[12] = 1024;
      *(_DWORD *)&v5[14] = 195;
      v6 = 2048;
      v7 = v4;
      _os_log_impl(&dword_2164CC000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d SubmixId %llu is not registered!", v5, 0x1Cu);
    }
  }
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::AddInput(Phase::UniqueObjectId,double)::$_0,void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::AddInput(Phase::UniqueObjectId,double)::$_0,void>::operator()(uint64_t a1)
{
  return Phase::Controller::SpatialModelerInstance::AddInput(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(double *)(a1 + 32));
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetInputSendLevel(Phase::UniqueObjectId,double)::$_0,void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

Phase::Logger *Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetInputSendLevel(Phase::UniqueObjectId,double)::$_0,void>::operator()(uint64_t a1)
{
  return Phase::Controller::SpatialModelerInstance::SetInputSendLevel(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(double *)(a1 + 32));
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::RemoveInput(Phase::UniqueObjectId)::$_0,void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::RemoveInput(Phase::UniqueObjectId)::$_0,void>::operator()(uint64_t a1)
{
  return Phase::Controller::SpatialModelerInstance::RemoveInput(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), *(void **)(a1 + 16), *(void **)(a1 + 24));
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetPlayState(Phase::UniqueObjectId,Phase::Controller::PlayState)::$_0,void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

_BYTE *Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetPlayState(Phase::UniqueObjectId,Phase::Controller::PlayState)::$_0,void>::operator()(uint64_t a1)
{
  return Phase::Controller::SpatialModelerInstance::SetPlayState(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 32));
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetMinimumSimulationGainInDecibels(Phase::UniqueObjectId,double)::$_0,void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

Phase::Logger *Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetMinimumSimulationGainInDecibels(Phase::UniqueObjectId,double)::$_0,void>::operator()(_QWORD *a1)
{
  uint64_t v1;
  Phase::Logger *result;

  v1 = a1[4];
  result = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::MutableAt((_QWORD *)(*(_QWORD *)(a1[1] + 80) + 8), a1[2], a1[3]);
  *((_QWORD *)result + 7) = v1;
  return result;
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetSimulationGainInDecibels(Phase::UniqueObjectId,double)::$_0,void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

Phase::Logger *Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetSimulationGainInDecibels(Phase::UniqueObjectId,double)::$_0,void>::operator()(_QWORD *a1)
{
  uint64_t v1;
  Phase::Logger *result;

  v1 = a1[4];
  result = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::MutableAt((_QWORD *)(*(_QWORD *)(a1[1] + 80) + 8), a1[2], a1[3]);
  *((_QWORD *)result + 8) = v1;
  return result;
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetProperty(Phase::UniqueObjectId,unsigned int,Phase::Controller::PropertyType,std::variant<Phase::Controller::Parameter<double>,Phase::Handle64> const&)::$_0,void>::~LambdaFunction()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetProperty(Phase::UniqueObjectId,unsigned int,Phase::Controller::PropertyType,std::variant<Phase::Controller::Parameter<double>,Phase::Handle64> const&)::$_0,void>::operator()(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  __int128 *v3;
  Phase::Logger *v4;

  v1 = *(_DWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(a1 + 36);
  v3 = (__int128 *)(a1 + 40);
  v4 = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::MutableAt((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return Phase::Controller::OptionalProperties::SetValue((_QWORD *)v4 + 9, v1, v2, v3);
}

void std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 56;
        std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)(v4 - 48));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>,0>(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 40);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24D578D98[v2])(&v4, a1);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(a2);
}

uint64_t std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Phase::SpatialModeler::EntityShapeTemplate const*>,std::__wrap_iter<Phase::SpatialModeler::EntityShapeTemplate const*>>(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  char *v45;
  int v46;
  void **v47;
  uint64_t v48;
  uint64_t i;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  char *v64;
  char *v65;
  _DWORD *v66;
  char *v67;
  uint64_t v68;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 56;
  v7 = (uint64_t)&(*a1)[56 * v6];
  if (a5 < 1)
    return v7;
  v13 = a1[2];
  v11 = (uint64_t)(a1 + 2);
  v12 = v13;
  v14 = *(_QWORD *)(v11 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v13[-v14] >> 3) >= a5)
  {
    v19 = v14 - v7;
    v62 = v6;
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v14 - v7) >> 3) >= a5)
    {
      v21 = a3 + 56 * a5;
      v24 = *(char **)(v11 - 8);
LABEL_31:
      v39 = v7 + 56 * a5;
      v40 = &v24[-56 * a5];
      v41 = v24;
      if ((unint64_t)v40 < v14)
      {
        v42 = (uint64_t *)&v5[56 * v62 + 8 + 8 * ((uint64_t)&v24[-v39] >> 3)];
        v43 = v40;
        v41 = v24;
        do
        {
          *(_DWORD *)v41 = *((_DWORD *)v42 - 2);
          std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__hash_table((uint64_t)(v41 + 8), v42);
          *((_DWORD *)v41 + 12) = *((_DWORD *)v43 + 12);
          v43 += 56;
          v41 += 56;
          v42 += 7;
        }
        while ((unint64_t)v43 < v14);
      }
      a1[1] = v41;
      if (v24 != (char *)v39)
      {
        v44 = v40;
        v45 = v24;
        do
        {
          v46 = *((_DWORD *)v44 - 14);
          v44 -= 56;
          *((_DWORD *)v45 - 14) = v46;
          v45 -= 56;
          v47 = (void **)(v45 + 8);
          if (*((_QWORD *)v45 + 4))
          {
            std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__deallocate_node((uint64_t)(v45 + 8), *((_QWORD **)v24 - 4));
            *((_QWORD *)v24 - 4) = 0;
            v48 = *((_QWORD *)v24 - 5);
            if (v48)
            {
              for (i = 0; i != v48; ++i)
                *((_QWORD *)*v47 + i) = 0;
            }
            *((_QWORD *)v24 - 3) = 0;
          }
          v50 = (void *)*((_QWORD *)v40 - 6);
          *((_QWORD *)v40 - 6) = 0;
          v51 = *v47;
          *v47 = v50;
          if (v51)
            operator delete(v51);
          v52 = *((_QWORD *)v40 - 4);
          v53 = *((_QWORD *)v40 - 5);
          *((_QWORD *)v24 - 4) = v52;
          v54 = v24 - 32;
          *((_QWORD *)v24 - 5) = v53;
          *((_QWORD *)v40 - 5) = 0;
          v55 = *((_QWORD *)v40 - 3);
          *((_QWORD *)v54 + 1) = v55;
          *((_DWORD *)v54 + 4) = *((_DWORD *)v40 - 4);
          if (v55)
          {
            v56 = *(_QWORD *)(v52 + 8);
            v57 = *((_QWORD *)v24 - 5);
            if ((v57 & (v57 - 1)) != 0)
            {
              if (v56 >= v57)
                v56 %= v57;
            }
            else
            {
              v56 &= v57 - 1;
            }
            *((_QWORD *)*v47 + v56) = v54;
            *((_QWORD *)v40 - 4) = 0;
            *((_QWORD *)v40 - 3) = 0;
          }
          *((_DWORD *)v24 - 2) = *((_DWORD *)v40 - 2);
          v24 = v45;
          v40 = v44;
        }
        while (v44 != (char *)v7);
      }
      if (v21 != a3)
      {
        v58 = a3 + 24;
        v59 = v7;
        do
        {
          v60 = v58 - 24;
          *(_DWORD *)v59 = *(_DWORD *)(v58 - 24);
          if (v59 != v58 - 24)
          {
            *(_DWORD *)(v59 + 40) = *(_DWORD *)(v58 + 16);
            std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *> *>>((_QWORD *)(v59 + 8), *(uint64_t **)v58, 0);
          }
          *(_DWORD *)(v59 + 48) = *(_DWORD *)(v58 + 24);
          v58 += 56;
          v59 += 56;
        }
        while (v60 + 56 != v21);
      }
      return v7;
    }
    v21 = a3 + 8 * ((uint64_t)(v14 - v7) >> 3);
    if (v21 == a4)
    {
      v24 = *(char **)(v11 - 8);
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = v21 + v22;
        *(_DWORD *)(v14 + v22) = *(_DWORD *)(v21 + v22);
        std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map(v14 + v22 + 8, v21 + v22 + 8);
        *(_DWORD *)(v14 + v22 + 48) = *(_DWORD *)(v21 + v22 + 48);
        v22 += 56;
      }
      while (v23 + 56 != a4);
      v24 = (char *)(v14 + v22);
      v19 = v14 - v7;
    }
    a1[1] = v24;
    if (v19 >= 1)
      goto LABEL_31;
    return v7;
  }
  v15 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v14 - (_QWORD)v5) >> 3);
  if (v15 > 0x492492492492492)
    std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
  v16 = 0x6DB6DB6DB6DB6DB7 * ((v12 - v5) >> 3);
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x249249249249249)
    v17 = 0x492492492492492;
  else
    v17 = v15;
  v68 = v11;
  if (v17)
    v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::EntityShapeTemplate>>(v11, v17);
  else
    v18 = 0;
  v25 = &v18[56 * v6];
  v64 = v18;
  v65 = v25;
  v66 = v25;
  v67 = &v18[56 * v17];
  v26 = 56 * a5;
  v27 = &v25[v26];
  v28 = a3 + 8;
  do
  {
    *(_DWORD *)v25 = *(_DWORD *)(v28 - 8);
    std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map((uint64_t)(v25 + 8), v28);
    *((_DWORD *)v25 + 12) = *(_DWORD *)(v28 + 40);
    v25 += 56;
    v28 += 56;
    v26 -= 56;
  }
  while (v26);
  v29 = v6;
  v30 = v65;
  v31 = *a1;
  v32 = v65;
  if (*a1 != (char *)v7)
  {
    v33 = 0;
    do
    {
      *(_DWORD *)&v30[v33 - 56] = *(_DWORD *)(v7 + v33 - 56);
      std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__hash_table((uint64_t)&v30[v33 - 48], (uint64_t *)(v7 + v33 - 48));
      *(_DWORD *)&v30[v33 - 8] = *(_DWORD *)(v7 + v33 - 8);
      v33 -= 56;
    }
    while ((char *)(v7 + v33) != v31);
    v32 = &v30[v33];
  }
  v34 = a1[1];
  if (v34 != (char *)v7)
  {
    v35 = (uint64_t)&v5[56 * v29 + 8];
    do
    {
      *(_DWORD *)v27 = *(_DWORD *)(v35 - 8);
      std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__hash_table((uint64_t)(v27 + 8), (uint64_t *)v35);
      *((_DWORD *)v27 + 12) = *(_DWORD *)(v35 + 40);
      v27 += 56;
      v36 = v35 + 48;
      v35 += 56;
    }
    while ((char *)v36 != v34);
    v7 = (uint64_t)a1[1];
  }
  v37 = *a1;
  *a1 = v32;
  a1[1] = v27;
  v38 = a1[2];
  a1[2] = v67;
  v66 = (_DWORD *)v7;
  v67 = v38;
  v64 = v37;
  v65 = v37;
  std::__split_buffer<Phase::SpatialModeler::EntityShapeTemplate>::~__split_buffer((uint64_t)&v64);
  return (uint64_t)v30;
}

uint64_t std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  __int128 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(__int128 **)(a2 + 16); i; i = *(__int128 **)i)
    std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__emplace_unique_key_args<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue> const&>(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_2165185E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__emplace_unique_key_args<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue> const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t ***v12;
  uint64_t **v13;
  const void *v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v7 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)v27, *(uint64_t **)(a2 + 24), *(_QWORD *)(a2 + 32));
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        v16 = a2 + 24;
        v14 = *(const void **)(a2 + 24);
        v15 = *(_QWORD *)(v16 + 8);
        do
        {
          v17 = (unint64_t)v13[1];
          if (v17 == v8)
          {
            if (v13[6] == (uint64_t *)v15 && !memcmp(v13[5], v14, v15))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v17 >= v9)
                v17 %= v9;
            }
            else
            {
              v17 &= v9 - 1;
            }
            if (v17 != v3)
              break;
          }
          v13 = (uint64_t **)*v13;
        }
        while (v13);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__construct_node_hash<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue> const&>(a1, v8, a3, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v25 >= v9)
          v25 %= v9;
      }
      else
      {
        v25 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  v13 = (uint64_t **)v27[0];
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return v13;
}

void sub_216518870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__construct_node_hash<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x68uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2165188E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__string_view_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  char v4;

  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v4, a2, a3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v4 + v7 + v8 + a3;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v8 + a3 + v5 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v6 + v9 + v17;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v30 + v28 + v39 + v29;
        v21 = __ROR8__(v30 + v28 + v39, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * ((v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)) ^ v5);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

std::string *std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>::pair[abi:ne180100](std::string *a1, __int128 *a2)
{
  std::string *v4;

  v4 = Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey::InternalKey(a1, a2);
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v4[1].__r_.__value_.__r.__words[2], (uint64_t)a2 + 40);
  return a1;
}

void sub_216518DC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey::InternalKey(std::string *this, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  std::string::size_type size;
  std::string *v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  v5 = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a2 + 1);
  if (v5)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      v7 = (std::string *)this->__r_.__value_.__r.__words[0];
      size = this->__r_.__value_.__l.__size_;
    }
    else
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v7 = this;
    }
    this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    this[1].__r_.__value_.__l.__size_ = size;
  }
  else
  {
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(__int128 *)((char *)a2 + 24);
  }
  return this;
}

{
  __int128 v3;
  std::string::size_type size;
  std::string *v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v5 = this;
  }
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  this[1].__r_.__value_.__l.__size_ = size;
  return this;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_216518EA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 40);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24D578D98[v4])(&v7, result);
  *(_DWORD *)(v3 + 40) = -1;
  v5 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24D578DF8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 40) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  result = *(float *)(a3 + 4);
  *(float *)(a2 + 4) = result;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
  result = *(float *)(a3 + 8);
  *(float *)(a2 + 8) = result;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  result = *(float *)(a3 + 12);
  *(float *)(a2 + 12) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(int a1, std::string *this, __int128 *a3)
{
  __int128 v3;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(a2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map(a2, a3);
}

_QWORD *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21651909C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  __int128 *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;

  v4 = (__int128 *)a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey::operator=(v8 + 2, (uint64_t)(v4 + 1));
        std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v8 + 7), (uint64_t)v4 + 56);
        v10 = (_QWORD *)*v8;
        std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi(a1, (uint64_t)v8);
        v4 = *(__int128 **)v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != (__int128 *)a3);
    }
    std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != (__int128 *)a3)
  {
    std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__emplace_multi<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue> const&>(a1, v4 + 1);
    v4 = *(__int128 **)v4;
  }
}

void sub_216519210(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_21651922C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *inserted;
  char v8;

  v4 = a2 + 16;
  v5 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)&v8, *(uint64_t **)(a2 + 40), *(_QWORD *)(a2 + 48));
  *(_QWORD *)(a2 + 8) = v5;
  inserted = std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform(a1, (_QWORD *)a2, inserted);
  return a2;
}

uint64_t *Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (*((char *)a1 + 23) < 0)
    {
      v6 = (uint64_t *)*a1;
      v5 = a1[1];
    }
    else
    {
      v5 = *((unsigned __int8 *)a1 + 23);
      v6 = a1;
    }
    a1[3] = (uint64_t)v6;
    a1[4] = v5;
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 40);
  v4 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24D578D98[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 40) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24D578E58[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(uint64_t *a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 40))
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<0ul,BOOL const&>(result, a3);
  *a2 = *a3;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *result;

  result = *a1;
  if (result[10] != 1)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<1ul,int const&>(result, a3);
  *a2 = *a3;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *result;

  result = *a1;
  if (result[10] != 2)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<2ul,unsigned int const&>(result, a3);
  *a2 = *a3;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *result;

  result = *a1;
  if (result[10] != 3)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<3ul,float const&>(result, a3);
  *a2 = *a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 40) != 4)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<4ul,double const&>(result, a3);
  *a2 = *a3;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *result;

  result = *a1;
  if (result[10] != 5)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<5ul,Phase::Vector<float,2ul> const&>(result, a3);
  *a2 = *a3;
  a2[1] = a3[1];
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *result;

  result = *a1;
  if (result[10] != 6)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<6ul,Phase::Vector<float,3ul> const&>(result, a3);
  *a2 = *a3;
  a2[1] = a3[1];
  a2[2] = a3[2];
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<7ul,Phase::Vector<float,4ul>,Phase::Vector<float,4ul> const&>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(uint64_t *a1, std::string *a2, std::string *a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<8ul,std::string,std::string const&>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(uint64_t *a1, char *a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<9ul,std::vector<unsigned int>,std::vector<unsigned int> const&>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(uint64_t *a1, char *a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<10ul,std::vector<unsigned long long>,std::vector<unsigned long long> const&>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<11ul,Phase::UnorderedStringMap<Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue> const&>(*a1, a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<0ul,BOOL const&>(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24D578D98[v4])(&v6, a1);
  *(_BYTE *)a1 = *a2;
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

_DWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<1ul,int const&>(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = a1[10];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24D578D98[v4])(&v6, a1);
  a1[10] = -1;
  *a1 = *a2;
  a1[10] = 1;
  return a1;
}

_DWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<2ul,unsigned int const&>(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = a1[10];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24D578D98[v4])(&v6, a1);
  a1[10] = -1;
  *a1 = *a2;
  a1[10] = 2;
  return a1;
}

_DWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<3ul,float const&>(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = a1[10];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24D578D98[v4])(&v6, a1);
  *a1 = *a2;
  a1[10] = 3;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<4ul,double const&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24D578D98[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 40) = 4;
  return a1;
}

_DWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<5ul,Phase::Vector<float,2ul> const&>(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = a1[10];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24D578D98[v4])(&v6, a1);
  *a1 = *a2;
  a1[1] = a2[1];
  a1[10] = 5;
  return a1;
}

_DWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<6ul,Phase::Vector<float,3ul> const&>(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = a1[10];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24D578D98[v4])(&v6, a1);
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[10] = 6;
  return a1;
}

_DWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<7ul,Phase::Vector<float,4ul>,Phase::Vector<float,4ul> const&>(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  if (result[10] != 7)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<7ul,Phase::Vector<float,4ul> const&>(result, a3);
  *a2 = *a3;
  a2[1] = a3[1];
  a2[2] = a3[2];
  a2[3] = a3[3];
  return result;
}

_DWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<7ul,Phase::Vector<float,4ul> const&>(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = a1[10];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24D578D98[v4])(&v6, a1);
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[10] = 7;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<8ul,std::string,std::string const&>(uint64_t a1, std::string *this, std::string *__str)
{
  uint64_t v3[2];

  if (*(_DWORD *)(a1 + 40) == 8)
  {
    std::string::operator=(this, __str);
  }
  else
  {
    v3[0] = a1;
    v3[1] = (uint64_t)__str;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<8ul,std::string,std::string const&>(std::__variant_detail::__alt<8ul,std::string> &,std::string const&)::{unnamed type#1}::operator()[abi:ne180100](v3);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<8ul,std::string,std::string const&>(std::__variant_detail::__alt<8ul,std::string> &,std::string const&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  std::string __p;

  v2 = *a1;
  v1 = a1[1];
  if (*(char *)(v1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v1, *(_QWORD *)(v1 + 8));
  }
  else
  {
    v3 = *(_OWORD *)v1;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v1 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v3;
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<8ul,std::string>(v2, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_216519918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<8ul,std::string>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24D578D98[v4])(&v7, a1);
  *(_DWORD *)(a1 + 40) = -1;
  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 40) = 8;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<9ul,std::vector<unsigned int>,std::vector<unsigned int> const&>(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3[2];

  if (*(_DWORD *)(a1 + 40) == 9)
  {
    if (a2 != (char *)a3)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  else
  {
    v3[0] = a1;
    v3[1] = a3;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<9ul,std::vector<unsigned int>,std::vector<unsigned int> const&>(std::__variant_detail::__alt<9ul,std::vector<unsigned int>> &,std::vector<unsigned int> const&)::{unnamed type#1}::operator()[abi:ne180100](v3);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<9ul,std::vector<unsigned int>,std::vector<unsigned int> const&>(std::__variant_detail::__alt<9ul,std::vector<unsigned int>> &,std::vector<unsigned int> const&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *__p;
  void *v4;
  uint64_t v5;

  v2 = *a1;
  v1 = a1[1];
  v4 = 0;
  v5 = 0;
  __p = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)v1, *(_QWORD *)(v1 + 8), (uint64_t)(*(_QWORD *)(v1 + 8) - *(_QWORD *)v1) >> 2);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<9ul,std::vector<unsigned int>>(v2, (uint64_t)&__p);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_216519A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<9ul,std::vector<unsigned int>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24D578D98[v4])(&v6, a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 9;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<10ul,std::vector<unsigned long long>,std::vector<unsigned long long> const&>(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3[2];

  if (*(_DWORD *)(a1 + 40) == 10)
  {
    if (a2 != (char *)a3)
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(a2, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  }
  else
  {
    v3[0] = a1;
    v3[1] = a3;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<10ul,std::vector<unsigned long long>,std::vector<unsigned long long> const&>(std::__variant_detail::__alt<10ul,std::vector<unsigned long long>> &,std::vector<unsigned long long> const&)::{unnamed type#1}::operator()[abi:ne180100](v3);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<10ul,std::vector<unsigned long long>,std::vector<unsigned long long> const&>(std::__variant_detail::__alt<10ul,std::vector<unsigned long long>> &,std::vector<unsigned long long> const&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *__p;
  void *v4;
  uint64_t v5;

  v2 = *a1;
  v1 = a1[1];
  v4 = 0;
  v5 = 0;
  __p = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)v1, *(_QWORD *)(v1 + 8), (uint64_t)(*(_QWORD *)(v1 + 8) - *(_QWORD *)v1) >> 3);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<10ul,std::vector<unsigned long long>>(v2, (uint64_t)&__p);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_216519CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<10ul,std::vector<unsigned long long>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24D578D98[v4])(&v6, a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 10;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<11ul,Phase::UnorderedStringMap<Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3[2];

  if (*(_DWORD *)(a1 + 40) == 11)
  {
    if (a2 != a3)
    {
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
      std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *> *>>((_QWORD *)a2, *(uint64_t **)(a3 + 16), 0);
    }
  }
  else
  {
    v3[0] = a1;
    v3[1] = a3;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<11ul,Phase::UnorderedStringMap<Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue> const&>(std::__variant_detail::__alt<11ul,Phase::UnorderedStringMap<Phase::OptionsValue>> &,Phase::UnorderedStringMap<Phase::OptionsValue> const&)::{unnamed type#1}::operator()[abi:ne180100](v3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<11ul,Phase::UnorderedStringMap<Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue> const&>(std::__variant_detail::__alt<11ul,Phase::UnorderedStringMap<Phase::OptionsValue>> &,Phase::UnorderedStringMap<Phase::OptionsValue> const&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3[5];

  v1 = *a1;
  std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map((uint64_t)v3, a1[1]);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<11ul,Phase::UnorderedStringMap<Phase::OptionsValue>>(v1, v3);
  return std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)v3);
}

void sub_216519EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<11ul,Phase::UnorderedStringMap<Phase::OptionsValue>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24D578D98[v4])(&v6, a1);
  *(_DWORD *)(a1 + 40) = -1;
  result = std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__hash_table(a1, a2);
  *(_DWORD *)(a1 + 40) = 11;
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  int v17;
  size_t v18;
  const void *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _BOOL4 v23;
  int v24;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      v12 = v11;
    else
      v12 = v10;
    std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__rehash<false>(a1, v12);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  v19 = *(const void **)(a3 + 24);
  v18 = *(_QWORD *)(a3 + 32);
  do
  {
    v20 = v16;
    v16 = (uint64_t *)*v16;
    if (!v16)
      break;
    v21 = v16[1];
    if (v14 > 1)
    {
      v22 = v16[1];
      if (v21 >= v6)
        v22 = v21 % v6;
    }
    else
    {
      v22 = v21 & (v6 - 1);
    }
    if (v22 != v15)
      break;
    v23 = v21 == a2 && v16[6] == v18 && memcmp((const void *)v16[5], v19, v18) == 0;
    v24 = v17 & !v23;
    v17 |= v23;
  }
  while (v24 != 1);
  return v20;
}

_QWORD *std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  uint64_t *i;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  size_t v16;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = *v7; *v7; i = *v7)
      {
        v13 = i[1];
        if (v10 > 1)
        {
          if (v13 >= a2)
            v13 %= a2;
        }
        else
        {
          v13 &= a2 - 1;
        }
        if (v13 == v8)
        {
          v7 = (uint64_t **)i;
        }
        else
        {
          v14 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
          {
            do
            {
              v15 = v14;
              v14 = (uint64_t *)*v14;
              if (!v14)
                break;
              v16 = i[6];
              if (v16 != v14[6])
                break;
            }
            while (!memcmp((const void *)i[5], (const void *)v14[5], v16));
            *v7 = v14;
            *v15 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
            v7 = (uint64_t **)i;
            v8 = v13;
          }
        }
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__emplace_multi<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue> const&>(_QWORD *a1, __int128 *a2)
{
  uint64_t inserted;
  uint64_t v5[3];

  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__construct_node<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_21651A4B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__construct_node<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  unint64_t result;
  char v8;

  v5 = a1 + 16;
  v6 = (char *)operator new(0x68uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>::pair[abi:ne180100]((std::string *)(v6 + 16), a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)&v8, *((uint64_t **)v6 + 5), *((_QWORD *)v6 + 6));
  *((_QWORD *)v6 + 1) = result;
  return result;
}

void sub_21651A538(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::EntityShapeTemplate>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

uint64_t std::__split_buffer<Phase::SpatialModeler::EntityShapeTemplate>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

Phase::Controller::SpatialModelerInstance *Phase::Controller::SpatialModelerInstance::SpatialModelerInstance(Phase::Controller::SpatialModelerInstance *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  std::chrono::steady_clock::time_point v11;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = 1065353216;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *(_QWORD *)((char *)this + 68) = 0xFFFFFFFFLL;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)((char *)this + 80));
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_DWORD *)this + 70) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 40) = 10;
  *((_QWORD *)this + 41) = 0x3FC999999999999ALL;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = -1;
  *((_QWORD *)this + 46) = 0;
  *((_DWORD *)this + 94) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = -1;
  *((_QWORD *)this + 56) = 0;
  *((_DWORD *)this + 114) = 0;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 65) = -1;
  *((_QWORD *)this + 66) = 0;
  *((_DWORD *)this + 134) = 0;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_DWORD *)this + 152) = 1065353216;
  *((_DWORD *)this + 154) = 0;
  *((_DWORD *)this + 166) = 0;
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 82) = 0;
  *((_QWORD *)this + 84) = std::system_category();
  *((_QWORD *)this + 85) = 0;
  *((_QWORD *)this + 86) = 0;
  *((_QWORD *)this + 87) = -1;
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_DWORD *)this + 180) = 0;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 772) = 0u;
  *((_DWORD *)this + 288) = 2;
  v2 = (char *)this + 1904;
  v3 = 1160;
  do
  {
    v4 = (char *)this + v3;
    *(_OWORD *)v4 = xmmword_24D578EF8;
    *((_OWORD *)v4 + 1) = *(_OWORD *)&off_24D578F08;
    *((_QWORD *)v4 + 4) = Phase::SpatialModeler::PriorityQueue::ExecuteUpdateGlobals;
    *(_OWORD *)(v4 + 40) = 0uLL;
    *(_OWORD *)(v4 + 56) = 0uLL;
    *((_DWORD *)v4 + 18) = 1065353216;
    *((_QWORD *)v4 + 14) = 0;
    *((_QWORD *)v4 + 18) = 0;
    *((_QWORD *)v4 + 22) = 0;
    *((_QWORD *)v4 + 26) = 0;
    *((_QWORD *)v4 + 27) = 0;
    v3 += 248;
    *((_QWORD *)v4 + 28) = v4;
    *((_QWORD *)v4 + 29) = v4;
    *((_QWORD *)v4 + 30) = 0;
  }
  while (v4 + 248 != v2);
  *((_QWORD *)this + 244) = 0;
  *((_OWORD *)this + 120) = 0u;
  *((_OWORD *)this + 121) = 0u;
  *(_OWORD *)v2 = 0u;
  *((_DWORD *)this + 490) = 1065353216;
  *((_OWORD *)this + 123) = 0u;
  *((_OWORD *)this + 124) = 0u;
  *((_OWORD *)this + 125) = 0u;
  *((_OWORD *)this + 126) = 0u;
  *((_OWORD *)this + 127) = 0u;
  *((_OWORD *)this + 128) = 0u;
  *((_OWORD *)this + 129) = 0u;
  *((_OWORD *)this + 130) = 0u;
  *((_OWORD *)this + 131) = 0u;
  *((_QWORD *)this + 253) = std::system_category();
  *((_QWORD *)this + 255) = 0;
  *((_QWORD *)this + 254) = 0;
  *((_QWORD *)this + 256) = -1;
  *((_QWORD *)this + 258) = 0;
  *((_QWORD *)this + 257) = 0;
  *((_DWORD *)this + 518) = 0;
  *((_OWORD *)this + 130) = 0u;
  *((_OWORD *)this + 131) = 0u;
  *((_OWORD *)this + 132) = 0u;
  *((_OWORD *)this + 133) = 0u;
  *((_OWORD *)this + 134) = 0u;
  *((_QWORD *)this + 270) = 0;
  *((_DWORD *)this + 542) = 1065353216;
  Phase::Controller::RenderGroupMgr::RenderGroupMgr((Phase::Controller::SpatialModelerInstance *)((char *)this + 2176));
  Phase::Controller::RenderGroupMgr::RenderGroupMgr((Phase::Controller::SpatialModelerInstance *)((char *)this + 2752));
  *((_DWORD *)this + 832) = 1;
  v5 = (char *)this + 4080;
  v6 = 3336;
  do
  {
    v7 = (char *)this + v6;
    *(_OWORD *)v7 = xmmword_24D578EF8;
    *((_OWORD *)v7 + 1) = *(_OWORD *)&off_24D578F08;
    *((_QWORD *)v7 + 4) = Phase::SpatialModeler::PriorityQueue::ExecuteUpdateGlobals;
    *(_OWORD *)(v7 + 40) = 0uLL;
    *(_OWORD *)(v7 + 56) = 0uLL;
    *((_DWORD *)v7 + 18) = 1065353216;
    *((_QWORD *)v7 + 14) = 0;
    *((_QWORD *)v7 + 18) = 0;
    *((_QWORD *)v7 + 22) = 0;
    *((_QWORD *)v7 + 26) = 0;
    *((_QWORD *)v7 + 27) = 0;
    v6 += 248;
    *((_QWORD *)v7 + 28) = v7;
    *((_QWORD *)v7 + 29) = v7;
    *((_QWORD *)v7 + 30) = 0;
  }
  while (v7 + 248 != v5);
  *((_QWORD *)this + 516) = 0;
  *((_OWORD *)this + 256) = 0u;
  *((_OWORD *)this + 257) = 0u;
  *(_OWORD *)v5 = 0u;
  *((_DWORD *)this + 1034) = 1065353216;
  *((_OWORD *)this + 259) = 0u;
  *((_OWORD *)this + 260) = 0u;
  *((_OWORD *)this + 261) = 0u;
  *((_OWORD *)this + 262) = 0u;
  *((_OWORD *)this + 263) = 0u;
  *((_OWORD *)this + 264) = 0u;
  *((_OWORD *)this + 265) = 0u;
  *((_OWORD *)this + 266) = 0u;
  *((_OWORD *)this + 267) = 0u;
  *((_QWORD *)this + 525) = std::system_category();
  *((_QWORD *)this + 527) = 0;
  *((_QWORD *)this + 526) = 0;
  *((_QWORD *)this + 528) = -1;
  *((_QWORD *)this + 530) = 0;
  *((_QWORD *)this + 529) = 0;
  *((_DWORD *)this + 1062) = 0;
  *((_OWORD *)this + 266) = 0u;
  *((_OWORD *)this + 267) = 0u;
  *((_OWORD *)this + 268) = 0u;
  *((_OWORD *)this + 269) = 0u;
  *((_OWORD *)this + 270) = 0u;
  *((_QWORD *)this + 542) = 0;
  *((_DWORD *)this + 1086) = 1065353216;
  Phase::Controller::RenderGroupMgr::RenderGroupMgr((Phase::Controller::SpatialModelerInstance *)((char *)this + 4352));
  Phase::Controller::RenderGroupMgr::RenderGroupMgr((Phase::Controller::SpatialModelerInstance *)((char *)this + 4928));
  v8 = -96;
  do
  {
    v9 = (char *)this + v8;
    *((_WORD *)v9 + 2812) = 0;
    *((_QWORD *)v9 + 702) = 0;
    *((_OWORD *)v9 + 350) = 0uLL;
    v8 += 32;
  }
  while (v8);
  *((_DWORD *)this + 1400) = 0;
  *((_QWORD *)this + 701) = 0;
  *((_OWORD *)this + 351) = 0u;
  *((_WORD *)this + 2816) = 0;
  *((_DWORD *)this + 1410) = 0;
  *((_QWORD *)this + 706) = 850045863;
  *(_OWORD *)((char *)this + 5720) = 0u;
  *(_OWORD *)((char *)this + 5736) = 0u;
  *(_OWORD *)((char *)this + 5752) = 0u;
  *(_OWORD *)((char *)this + 5656) = 0u;
  *(_OWORD *)((char *)this + 5672) = 0u;
  *(_OWORD *)((char *)this + 5688) = 0u;
  *(_OWORD *)((char *)this + 5697) = 0u;
  *((_QWORD *)this + 721) = 10;
  *(_OWORD *)((char *)this + 5784) = 0u;
  *(_OWORD *)((char *)this + 5800) = 0u;
  *((_DWORD *)this + 1454) = 1065353216;
  *((_OWORD *)this + 364) = 0u;
  *((_QWORD *)this + 730) = 0;
  *((_OWORD *)this + 366) = 0u;
  v10 = operator new();
  *(_OWORD *)v10 = 0u;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = &off_24D581150;
  *(_DWORD *)(v10 + 20) = 1;
  *((_QWORD *)this + 734) = v10;
  *(_OWORD *)((char *)this + 5880) = 0u;
  Phase::Controller::RenderGroupMgr::RenderGroupMgr((Phase::Controller::SpatialModelerInstance *)((char *)this + 5896));
  *((_QWORD *)this + 809) = 0;
  *((_BYTE *)this + 6480) = 1;
  v11.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  *((double *)this + 722) = (double)v11.__d_.__rep_ / 1000000000.0;
  *((_BYTE *)this + 6480) = *(_DWORD *)(Phase::Logger::GetInstancePtr((Phase::Logger *)v11.__d_.__rep_) + 1540) == 0;
  return this;
}

void sub_21651AA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, Phase::Controller::SpatialModelerInstance::GraphData *a10, uint64_t a11, Phase::SpatialModeler::QueryDesc *a12, Phase::Controller::SpatialModelerInstance::GraphData *a13, Phase::Controller::SpatialQueryInstance **a14, Phase::SpatialModeler::QueryDesc *a15, void **a16, Phase::SpatialModeler::QueryDesc *a17, uint64_t a18, uint64_t a19)
{
  _QWORD *v19;
  std::mutex *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::error_category **v24;
  Phase::Controller::RenderGroupMgr *v25;
  Phase::Controller::SpatialSubmixRouter **v26;
  uint64_t v27;
  uint64_t i;
  void *v29;

  std::unique_ptr<Phase::Controller::SpatialSubmixRouter>::reset[abi:ne180100](v26, 0);
  Phase::Controller::RenderGroupMgr::~RenderGroupMgr(v25);
  std::unique_ptr<Phase::SpatialModeler::Scheduler>::reset[abi:ne180100](v24);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(v19 + 728));
  std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::~__hash_table(v23);
  std::deque<double>::~deque[abi:ne180100](v22);
  std::mutex::~mutex(v20);
  *(_QWORD *)(v27 - 88) = v19 + 701;
  std::vector<Phase::SpatialModeler::Graph>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 88));
  for (i = 0; i != -12; i -= 4)
  {
    *(_QWORD *)(v27 - 88) = &v19[i + 696];
    std::vector<Phase::SpatialModeler::Graph>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 88));
  }
  Phase::Controller::SpatialModelerInstance::GraphData::~GraphData(a10);
  Phase::Controller::SpatialModelerInstance::GraphData::~GraphData(a13);
  *(_QWORD *)(v27 - 88) = v19 + 95;
  std::vector<std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 88));
  Phase::Controller::SpatialQueryInstance::~SpatialQueryInstance(a14);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::~__hash_table(a11);
  Phase::SpatialModeler::QueryDesc::~QueryDesc(a17);
  Phase::SpatialModeler::QueryDesc::~QueryDesc(a12);
  Phase::SpatialModeler::QueryDesc::~QueryDesc(a15);
  v29 = *a16;
  if (*a16)
  {
    v19[37] = v29;
    operator delete(v29);
  }
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(v19 + 33));
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v21);
  Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::~SubmixSlotMap(a19);
  Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(v19);
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialModelerInstance::GraphData::~GraphData(Phase::Controller::SpatialModelerInstance::GraphData *this)
{
  void *v2;
  uint64_t i;

  Phase::Controller::RenderGroupMgr::~RenderGroupMgr((Phase::Controller::SpatialModelerInstance::GraphData *)((char *)this + 1600));
  Phase::Controller::RenderGroupMgr::~RenderGroupMgr((Phase::Controller::SpatialModelerInstance::GraphData *)((char *)this + 1024));
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::~__hash_table((uint64_t)this + 984);
  v2 = (void *)*((_QWORD *)this + 120);
  if (v2)
  {
    *((_QWORD *)this + 121) = v2;
    operator delete(v2);
  }
  Phase::Controller::SpatialQueryInstance::~SpatialQueryInstance((Phase::Controller::SpatialQueryInstance **)this + 102);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::~__hash_table((uint64_t)this + 776);
  for (i = 504; i != -240; i -= 248)
    Phase::SpatialModeler::PriorityQueue::~PriorityQueue((Phase::Controller::SpatialModelerInstance::GraphData *)((char *)this + i));
}

uint64_t Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::~SubmixSlotMap(uint64_t a1)
{
  uint64_t v2;
  std::mutex *v3;

  v2 = a1 + 40;
  v3 = (std::mutex *)(a1 + 72);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 184));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 136));
  std::mutex::~mutex(v3);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v2);
  return std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(a1);
}

void Phase::Controller::SpatialModelerInstance::~SpatialModelerInstance(Phase::Controller::SpatialModelerInstance *this)
{
  uint64_t i;
  void *v3;
  uint64_t j;
  void *v5;
  uint64_t k;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v11;

  Phase::Controller::SpatialModelerInstance::Destroy(this);
  std::unique_ptr<Phase::Controller::SpatialSubmixRouter>::reset[abi:ne180100]((Phase::Controller::SpatialSubmixRouter **)this + 809, 0);
  Phase::Controller::RenderGroupMgr::~RenderGroupMgr((Phase::Controller::SpatialModelerInstance *)((char *)this + 5896));
  std::unique_ptr<Phase::SpatialModeler::Scheduler>::reset[abi:ne180100]((std::error_category **)this + 734);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + 5824);
  std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::~__hash_table((uint64_t)this + 5784);
  std::deque<double>::~deque[abi:ne180100]((uint64_t)this + 5720);
  std::mutex::~mutex((std::mutex *)((char *)this + 5648));
  v11 = (void **)((char *)this + 5608);
  std::vector<Phase::SpatialModeler::Graph>::__destroy_vector::operator()[abi:ne180100](&v11);
  for (i = 0; i != -96; i -= 32)
  {
    v11 = (void **)((char *)this + i + 5568);
    std::vector<Phase::SpatialModeler::Graph>::__destroy_vector::operator()[abi:ne180100](&v11);
  }
  Phase::Controller::RenderGroupMgr::~RenderGroupMgr((Phase::Controller::SpatialModelerInstance *)((char *)this + 4928));
  Phase::Controller::RenderGroupMgr::~RenderGroupMgr((Phase::Controller::SpatialModelerInstance *)((char *)this + 4352));
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::~__hash_table((uint64_t)this + 4312);
  v3 = (void *)*((_QWORD *)this + 536);
  if (v3)
  {
    *((_QWORD *)this + 537) = v3;
    operator delete(v3);
  }
  Phase::Controller::SpatialQueryInstance::~SpatialQueryInstance((Phase::Controller::SpatialQueryInstance **)this + 518);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::~__hash_table((uint64_t)this + 4104);
  for (j = 3832; j != 3088; j -= 248)
    Phase::SpatialModeler::PriorityQueue::~PriorityQueue((Phase::Controller::SpatialModelerInstance *)((char *)this + j));
  Phase::Controller::RenderGroupMgr::~RenderGroupMgr((Phase::Controller::SpatialModelerInstance *)((char *)this + 2752));
  Phase::Controller::RenderGroupMgr::~RenderGroupMgr((Phase::Controller::SpatialModelerInstance *)((char *)this + 2176));
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::~__hash_table((uint64_t)this + 2136);
  v5 = (void *)*((_QWORD *)this + 264);
  if (v5)
  {
    *((_QWORD *)this + 265) = v5;
    operator delete(v5);
  }
  Phase::Controller::SpatialQueryInstance::~SpatialQueryInstance((Phase::Controller::SpatialQueryInstance **)this + 246);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::~__hash_table((uint64_t)this + 1928);
  for (k = 1656; k != 912; k -= 248)
    Phase::SpatialModeler::PriorityQueue::~PriorityQueue((Phase::Controller::SpatialModelerInstance *)((char *)this + k));
  v11 = (void **)((char *)this + 760);
  std::vector<std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  Phase::Controller::SpatialQueryInstance::~SpatialQueryInstance((Phase::Controller::SpatialQueryInstance **)this + 77);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::~__hash_table((uint64_t)this + 576);
  v7 = (void *)*((_QWORD *)this + 68);
  if (v7)
  {
    *((_QWORD *)this + 69) = v7;
    operator delete(v7);
  }
  if (*((char *)this + 519) < 0)
    operator delete(*((void **)this + 62));
  v8 = (void *)*((_QWORD *)this + 58);
  if (v8)
  {
    *((_QWORD *)this + 59) = v8;
    operator delete(v8);
  }
  if (*((char *)this + 439) < 0)
    operator delete(*((void **)this + 52));
  v9 = (void *)*((_QWORD *)this + 48);
  if (v9)
  {
    *((_QWORD *)this + 49) = v9;
    operator delete(v9);
  }
  if (*((char *)this + 359) < 0)
    operator delete(*((void **)this + 42));
  v10 = (void *)*((_QWORD *)this + 36);
  if (v10)
  {
    *((_QWORD *)this + 37) = v10;
    operator delete(v10);
  }
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  std::condition_variable::~condition_variable((std::condition_variable *)this + 4);
  std::condition_variable::~condition_variable((std::condition_variable *)this + 3);
  std::mutex::~mutex((std::mutex *)((char *)this + 80));
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 8);
  Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(this);
}

Phase::Controller::SpatialModelerInstance *Phase::Controller::SpatialModelerInstance::Destroy(Phase::Controller::SpatialModelerInstance *this)
{
  uint64_t v1;
  Phase::Controller::SpatialSubmixRouter *v2;
  uint64_t v3;
  uint64_t v4;

  if (*((_QWORD *)this + 732))
  {
    v1 = (uint64_t)this;
    Phase::Controller::SpatialModelerInstance::StopUpdate(this);
    v2 = Phase::Controller::SpatialModelerInstance::Reset((Phase::Controller::SpatialSubmixRouter **)v1);
    Phase::Controller::SpatialModelerInstance::DestroyAllTempGraphData((uint64_t)v2, v1 + 1152);
    Phase::Controller::SpatialModelerInstance::DestroyAllTempGraphData(v3, v1 + 3328);
    std::shared_ptr<Phase::Job>::reset[abi:ne180100]((_QWORD *)(v1 + 264));
    *(_DWORD *)(v1 + 280) = 0;
    Phase::Controller::SpatialModelerInstance::ClearRegisteredSubmixState((Phase::Controller::SpatialModelerInstance *)v1);
    std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)(v1 + 8));
    atomic_store(0, (unsigned int *)(v1 + 72));
    atomic_store(0xFFFFFFFF, (unsigned int *)(v1 + 68));
    std::shared_ptr<Phase::Job>::reset[abi:ne180100]((_QWORD *)(v1 + 48));
    *(_DWORD *)(v1 + 64) = 0;
    *(_QWORD *)(v1 + 296) = *(_QWORD *)(v1 + 288);
    v4 = **(_QWORD **)(v1 + 5872);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    std::unique_ptr<Phase::SpatialModeler::Scheduler>::reset[abi:ne180100]((std::error_category **)(v1 + 5872));
    this = *(Phase::Controller::SpatialModelerInstance **)(v1 + 5856);
    if (this)
      this = (Phase::Controller::SpatialModelerInstance *)(*(uint64_t (**)(Phase::Controller::SpatialModelerInstance *))(*(_QWORD *)this + 24))(this);
    *(_QWORD *)(v1 + 5856) = 0;
  }
  return this;
}

void Phase::Controller::SpatialModelerInstance::Initialize(Phase::Controller::SpatialModelerInstance *this, unint64_t a2, uint64_t a3, Phase::Logger *a4, Phase::Controller::RendererSystem *a5, uint64_t a6)
{
  char *v12;
  Phase::Controller::SpatialModelerRegistry *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  std::string::pointer data;
  uint64_t v18;
  unint64_t v19;
  std::string *v20;
  std::string *v21;
  char *v22;
  int v23;
  BOOL v24;
  char *v25;
  int v26;
  int v27;
  char *v29;
  int v30;
  Phase::Controller::SpatialModelerInstance *v31;
  uint64_t v32;
  int v34;
  _QWORD *v35;
  int v36;
  int v37;
  uint64_t v38;
  _QWORD *SpatialModelerInstance;
  Phase::Controller::SpatialModelerInstance *v40;
  Phase::Controller::SpatialSubmixRouter *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  void **v46;
  void **v47;
  void ***v48;
  void ***v49;
  void **v50;
  void **v51;
  unint64_t v52;
  void ***v53;
  void ***v54;
  void ***v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void ***v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void ***v65;
  __int128 v66;
  void **v67;
  void **v68;
  void ***v69;
  void ***v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void ***v75;
  __int128 v76;
  void **v77;
  void **v78;
  void ***v79;
  void ***v80;
  void ***v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  void ***v86;
  __int128 v87;
  void **v88;
  void **v89;
  void ***v90;
  void ***v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  void ***v96;
  __int128 v97;
  char inited;
  void ***v99;
  __int128 v100;
  void **v101;
  void **v102;
  void ***v103;
  void ***v104;
  void ***v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  void ***v110;
  __int128 v111;
  void **v112;
  void **v113;
  unint64_t v114;
  void ***v115;
  void ***v116;
  void ***v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  void ***v122;
  __int128 v123;
  void **v124;
  void **v125;
  void ***v126;
  Phase::Controller::SpatialModelerInstance *v127;
  void ***v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  void ***v133;
  __int128 v134;
  void **v135;
  void **v136;
  void ***v137;
  void ***v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  void ***v143;
  __int128 v144;
  NSObject *v145;
  std::runtime_error *v146;
  NSObject *v147;
  std::logic_error *exception;
  NSObject *v149;
  void **v150;
  std::logic_error *v151;
  uint64_t v152;
  Phase::Controller::RendererSystem *v153;
  Phase::Controller::SpatialModelerRegistry *v154;
  unint64_t v155;
  std::string *v156;
  Phase::Controller::SpatialModelerInstance *v157;
  void *__p;
  void ***v159;
  unint64_t v160;
  void *v161[2];
  char v162;
  uint64_t v163;
  void *v164[2];
  char v165;
  uint64_t v166;
  _BYTE buf[12];
  __int16 v168;
  int v169;
  __int16 v170;
  _QWORD v171[7];

  *(_QWORD *)((char *)&v171[4] + 4) = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 732))
    Phase::Controller::SpatialModelerInstance::Destroy(this);
  *((_QWORD *)this + 735) = a4;
  *((_QWORD *)this + 736) = a6;
  v12 = (char *)this + 792;
  *((_QWORD *)this + 143) = 0;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 1112) = 0u;
  *(_OWORD *)((char *)this + 1128) = 0u;
  v13 = (Phase::Controller::SpatialModelerRegistry *)Phase::Controller::TaskManager::GetService<Phase::Controller::SpatialModelerRegistry>(a4, 5);
  v14 = Phase::Controller::TaskManager::GetService<Phase::Geometry::System>(a4, 2);
  *(_QWORD *)buf = a2;
  v15 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v13, (unint64_t *)buf);
  v154 = v13;
  v155 = a2;
  v153 = a5;
  v16 = v15 + 1;
  if (!v15)
    v16 = 0;
  v157 = this;
  *((_QWORD *)this + 733) = v16;
  if (!v15)
  {
    v147 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 224));
    if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
      v168 = 1024;
      v169 = 436;
      _os_log_impl(&dword_2164CC000, v147, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!mpSpatialModelerInfo is true]: \"Couldn't find Spatial Modeler Info!\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Couldn't find Spatial Modeler Info!");
  }
  v152 = v14;
  data = v15[4].__r_.__value_.__l.__data_;
  if ((std::string::pointer)v15[4].__r_.__value_.__l.__size_ != data)
  {
    v18 = 0;
    v19 = 0;
    v20 = (std::string *)((char *)v157 + 496);
    v156 = (std::string *)((char *)v157 + 416);
    v21 = (std::string *)((char *)v157 + 336);
    do
    {
      v22 = &data[v18];
      if (data[v18 + 23] < 0)
      {
        v32 = *((_QWORD *)v22 + 1);
        if (v32 == 4)
        {
          v36 = **(_DWORD **)v22;
          goto LABEL_35;
        }
        if (v32 != 7)
          goto LABEL_219;
        v25 = *(char **)v22;
        if (**(_DWORD **)v22 == 1398099011 && *(_DWORD *)(*(_QWORD *)v22 + 3) == 1380275283)
        {
LABEL_31:
          v15 = std::string::operator=(v156, (const std::string *)&data[v18]);
          v34 = *(_DWORD *)&data[v18 + 40];
          *(_OWORD *)((char *)v157 + 440) = *(_OWORD *)&data[v18 + 24];
          *((_DWORD *)v157 + 114) = v34;
          v35 = (_QWORD *)((char *)v157 + 488);
          if (v22 != (char *)v156)
          {
            v15 = (std::string *)std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v157 + 464, *(char **)&data[v18 + 48], *(_QWORD *)&data[v18 + 56], (uint64_t)(*(_QWORD *)&data[v18 + 56] - *(_QWORD *)&data[v18 + 48]) >> 2);
            v35 = (_QWORD *)((char *)v157 + 488);
          }
LABEL_38:
          *v35 = *(_QWORD *)&data[v18 + 72];
          v31 = v157;
          goto LABEL_39;
        }
      }
      else
      {
        v23 = data[v18 + 23];
        if (v23 == 4)
        {
          v36 = *(_DWORD *)v22;
LABEL_35:
          if (v36 != 1280070979)
            goto LABEL_219;
          v15 = std::string::operator=(v21, (const std::string *)&data[v18]);
          v37 = *(_DWORD *)&data[v18 + 40];
          *(_OWORD *)((char *)v157 + 360) = *(_OWORD *)&data[v18 + 24];
          *((_DWORD *)v157 + 94) = v37;
          v35 = (_QWORD *)((char *)v157 + 408);
          if (v22 != (char *)v21)
          {
            v15 = (std::string *)std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v157 + 384, *(char **)&data[v18 + 48], *(_QWORD *)&data[v18 + 56], (uint64_t)(*(_QWORD *)&data[v18 + 56] - *(_QWORD *)&data[v18 + 48]) >> 2);
            v35 = (_QWORD *)((char *)v157 + 408);
          }
          goto LABEL_38;
        }
        if (v23 != 7)
          goto LABEL_219;
        v24 = *(_DWORD *)v22 == 1398099011 && *(_DWORD *)(v22 + 3) == 1380275283;
        v25 = &data[v18];
        if (v24)
          goto LABEL_31;
      }
      v26 = *(_DWORD *)v25;
      v27 = *(_DWORD *)(v25 + 3);
      if (v26 != 1413566547 || v27 != 1279347028)
      {
LABEL_219:
        v145 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v15) + 224));
        if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
          v168 = 1024;
          v169 = 456;
          _os_log_impl(&dword_2164CC000, v145, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unknown Name\"", buf, 0x12u);
        }
        v146 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v146, "Unknown Name");
      }
      v15 = std::string::operator=(v20, (const std::string *)&data[v18]);
      v29 = &data[v18];
      v30 = *((_DWORD *)v29 + 10);
      *(_OWORD *)((char *)v157 + 520) = *(_OWORD *)(v29 + 24);
      *((_DWORD *)v157 + 134) = v30;
      if (v22 != (char *)v20)
        v15 = (std::string *)std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v157 + 544, *((char **)v29 + 6), *((_QWORD *)v29 + 7), (uint64_t)(*((_QWORD *)v29 + 7) - *((_QWORD *)v29 + 6)) >> 2);
      v31 = v157;
      *((_QWORD *)v157 + 71) = *((_QWORD *)v29 + 9);
      if (*((_DWORD *)v157 + 132) != 2)
        goto LABEL_218;
LABEL_39:
      ++v19;
      v38 = *((_QWORD *)v31 + 733);
      data = *(std::string::pointer *)(v38 + 72);
      v18 += 80;
    }
    while (v19 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v38 + 80) - (_QWORD)data) >> 4));
  }
  SpatialModelerInstance = Phase::Controller::SpatialModelerRegistry::CreateSpatialModelerInstance(v154, v155);
  v40 = v157;
  *((_QWORD *)v157 + 732) = SpatialModelerInstance;
  if (!SpatialModelerInstance)
  {
    v149 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                         + 224)));
    if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)v164, *((Phase::Controller::SpatialModelerInfo **)v157 + 733));
      v150 = v165 >= 0 ? v164 : (void **)v164[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
      v168 = 1024;
      v169 = 464;
      v170 = 2080;
      v171[0] = v150;
      _os_log_impl(&dword_2164CC000, v149, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!mpSpatialModeler is true]: \"Couldn't find a Spatial Modeler: %s!\"", buf, 0x1Cu);
      if (v165 < 0)
        operator delete(v164[0]);
    }

    v151 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v151, "Couldn't find a Spatial Modeler: %s!");
  }
  SpatialModelerInstance[3] = Phase::Controller::SpatialModelerSystem::GetSceneQueryFilterForSpatialCategory((Phase::Logger *)*(unsigned int *)(*((_QWORD *)v157 + 733) + 40));
  Phase::SpatialModeler::Scheduler::Init(*((Phase::Logger **)v157 + 734), v152, *((Phase::Logger **)v157 + 732), a3);
  v41 = (Phase::Controller::SpatialSubmixRouter *)operator new();
  Phase::Controller::SpatialSubmixRouter::SpatialSubmixRouter(v41, *((const Phase::Controller::SpatialModelerInfo **)v157 + 733), v153, (Phase::Controller::SpatialModelerInstance *)((char *)v157 + 5896));
  std::unique_ptr<Phase::Controller::SpatialSubmixRouter>::reset[abi:ne180100]((Phase::Controller::SpatialSubmixRouter **)v157 + 809, v41);
  Phase::Controller::SpatialModelerInstance::SetupGraphData(v157, (_QWORD *)v157 + 144, (uint64_t)v157 + 912);
  Phase::Controller::SpatialModelerInstance::SetupGraphData(v157, (_QWORD *)v157 + 416, (uint64_t)v12);
  v42 = *((_QWORD *)v157 + 733);
  v43 = *((_QWORD *)v157 + 809);
  *((_QWORD *)v157 + 558) = v153;
  *((_QWORD *)v157 + 560) = v42;
  *((_QWORD *)v157 + 559) = v43;
  *((_QWORD *)v157 + 286) = v153;
  *((_QWORD *)v157 + 288) = v42;
  *((_QWORD *)v157 + 287) = v43;
  Phase::Controller::RenderGroupMgr::AddDiffTarget((Phase::Controller::SpatialModelerInstance *)((char *)v157 + 4352), (Phase::Controller::SpatialModelerInstance *)((char *)v157 + 2176));
  Phase::Controller::RenderGroupMgr::AddDiffTarget((Phase::Controller::SpatialModelerInstance *)((char *)v157 + 4352), (Phase::Controller::SpatialModelerInstance *)((char *)v157 + 5896));
  Phase::Controller::RenderGroupMgr::AddFullCopyTarget((Phase::Controller::SpatialModelerInstance *)((char *)v157 + 4352), (Phase::Controller::SpatialModelerInstance *)((char *)v157 + 4928));
  Phase::Controller::RenderGroupMgr::AddFullCopyTarget((Phase::Controller::SpatialModelerInstance *)((char *)v157 + 5896), (Phase::Controller::SpatialModelerInstance *)((char *)v157 + 4352));
  Phase::Controller::RenderGroupMgr::AddDiffTarget((Phase::Controller::SpatialModelerInstance *)((char *)v157 + 5896), (Phase::Controller::SpatialModelerInstance *)((char *)v157 + 2176));
  Phase::Controller::RenderGroupMgr::AddFullCopyTarget((Phase::Controller::SpatialModelerInstance *)((char *)v157 + 2176), (Phase::Controller::SpatialModelerInstance *)((char *)v157 + 5896));
  Phase::Controller::RenderGroupMgr::AddFullCopyTarget((Phase::Controller::SpatialModelerInstance *)((char *)v157 + 2176), (Phase::Controller::SpatialModelerInstance *)((char *)v157 + 2752));
  Phase::Controller::RenderGroupMgr::AddDiffTarget((Phase::Controller::SpatialModelerInstance *)((char *)v157 + 4928), (Phase::Controller::SpatialModelerInstance *)((char *)v157 + 2176));
  Phase::Controller::RenderGroupMgr::AddDiffTarget((Phase::Controller::SpatialModelerInstance *)((char *)v157 + 4928), (Phase::Controller::SpatialModelerInstance *)((char *)v157 + 5896));
  v44 = (_QWORD *)*((_QWORD *)v157 + 734);
  (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*v44 + 88))(buf, *v44, *((_QWORD *)v157 + 45));
  (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*v44 + 88))(v164, *v44, *((_QWORD *)v157 + 55));
  (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*v44 + 88))(v161, *v44, *((_QWORD *)v157 + 65));
  if (*((_DWORD *)v157 + 132) != 2)
LABEL_218:
    std::terminate();
  v45 = *(_DWORD *)(*((_QWORD *)v157 + 733) + 120);
  if (!v45)
  {
    *((_DWORD *)v157 + 1400) = 1;
    __p = 0;
    v159 = 0;
    v160 = 0;
    std::vector<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>::reserve(&__p, 3uLL);
    v50 = (void **)((char *)v157 + 1160);
    v51 = (void **)*((_QWORD *)v157 + 45);
    v53 = v159;
    v52 = v160;
    if ((unint64_t)v159 >= v160)
    {
      v55 = (void ***)__p;
      v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)v159 - (_BYTE *)__p) >> 3);
      v57 = v56 + 1;
      if (v56 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v160 - (_QWORD)__p) >> 3) > v57)
        v57 = 0x5555555555555556 * ((uint64_t)(v160 - (_QWORD)__p) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v160 - (_QWORD)__p) >> 3) >= 0x555555555555555)
        v58 = 0xAAAAAAAAAAAAAAALL;
      else
        v58 = v57;
      if (v58)
        v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>>(v58);
      else
        v59 = 0;
      v65 = (void ***)(v58 + 24 * v56);
      v52 = v58 + 24 * v59;
      *v65 = (void **)buf;
      v65[1] = v51;
      v65[2] = v50;
      v54 = v65 + 3;
      if (v53 != v55)
      {
        do
        {
          v66 = *(_OWORD *)(v53 - 3);
          *(v65 - 1) = *(v53 - 1);
          *(_OWORD *)(v65 - 3) = v66;
          v65 -= 3;
          v53 -= 3;
        }
        while (v53 != v55);
        v53 = (void ***)__p;
      }
      __p = v65;
      v160 = v58 + 24 * v59;
      if (v53)
        operator delete(v53);
    }
    else
    {
      *v159 = (void **)buf;
      v53[1] = v51;
      v53[2] = v50;
      v54 = v53 + 3;
    }
    v159 = v54;
    v67 = (void **)((char *)v157 + 1408);
    v68 = (void **)*((_QWORD *)v157 + 55);
    if ((unint64_t)v54 < v52)
    {
      *v54 = v164;
      v54[1] = v68;
      v54[2] = v67;
      v69 = v54 + 3;
      v40 = v157;
      goto LABEL_106;
    }
    v70 = (void ***)__p;
    v71 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (_BYTE *)__p) >> 3);
    v72 = v71 + 1;
    if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * ((uint64_t)(v52 - (_QWORD)__p) >> 3) > v72)
      v72 = 0x5555555555555556 * ((uint64_t)(v52 - (_QWORD)__p) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - (_QWORD)__p) >> 3) >= 0x555555555555555)
      v73 = 0xAAAAAAAAAAAAAAALL;
    else
      v73 = v72;
    if (v73)
      v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>>(v73);
    else
      v74 = 0;
    v40 = v157;
    v86 = (void ***)(v73 + 24 * v71);
    *v86 = v164;
    v86[1] = v68;
    v86[2] = v67;
    v69 = v86 + 3;
    if (v54 == v70)
    {
      __p = (void *)(v73 + 24 * v71);
      v159 = v86 + 3;
      v160 = v73 + 24 * v74;
    }
    else
    {
      do
      {
        v87 = *(_OWORD *)(v54 - 3);
        *(v86 - 1) = *(v54 - 1);
        *(_OWORD *)(v86 - 3) = v87;
        v86 -= 3;
        v54 -= 3;
      }
      while (v54 != v70);
      v54 = (void ***)__p;
      __p = v86;
      v159 = v69;
      v160 = v73 + 24 * v74;
      if (!v54)
      {
LABEL_106:
        v159 = v69;
        if (*((_DWORD *)v40 + 132) != 2)
          goto LABEL_218;
        v88 = (void **)((char *)v40 + 1656);
        v89 = (void **)*((_QWORD *)v40 + 65);
        if ((unint64_t)v69 < v160)
        {
          *v69 = v161;
          v69[1] = v89;
          v69[2] = v88;
          v90 = v69 + 3;
LABEL_125:
          v159 = v90;
          inited = Phase::SpatialModeler::Scheduler::InitGraphSequence((uint64_t)v44, (uint64_t *)v40 + 688, (uint64_t *)&__p);
          goto LABEL_153;
        }
        v91 = (void ***)__p;
        v92 = 0xAAAAAAAAAAAAAAABLL * (((char *)v69 - (_BYTE *)__p) >> 3);
        v93 = v92 + 1;
        if (v92 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v160 - (_QWORD)__p) >> 3) > v93)
          v93 = 0x5555555555555556 * ((uint64_t)(v160 - (_QWORD)__p) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v160 - (_QWORD)__p) >> 3) >= 0x555555555555555)
          v94 = 0xAAAAAAAAAAAAAAALL;
        else
          v94 = v93;
        if (v94)
          v94 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>>(v94);
        else
          v95 = 0;
        v96 = (void ***)(v94 + 24 * v92);
        *v96 = v161;
        v96[1] = v89;
        v96[2] = v88;
        v90 = v96 + 3;
        if (v69 == v91)
        {
          __p = (void *)(v94 + 24 * v92);
          v159 = v96 + 3;
          v160 = v94 + 24 * v95;
        }
        else
        {
          do
          {
            v97 = *(_OWORD *)(v69 - 3);
            *(v96 - 1) = *(v69 - 1);
            *(_OWORD *)(v96 - 3) = v97;
            v96 -= 3;
            v69 -= 3;
          }
          while (v69 != v91);
          v69 = (void ***)__p;
          __p = v96;
          v159 = v90;
          v160 = v94 + 24 * v95;
          if (!v69)
            goto LABEL_124;
        }
        operator delete(v69);
LABEL_124:
        v40 = v157;
        goto LABEL_125;
      }
    }
    operator delete(v54);
    goto LABEL_106;
  }
  if (v45 != 1)
    goto LABEL_218;
  *((_DWORD *)v157 + 1400) = 3;
  __p = 0;
  v159 = 0;
  v160 = 0;
  std::vector<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>::reserve(&__p, 1uLL);
  v46 = (void **)((char *)v157 + 1160);
  v47 = (void **)*((_QWORD *)v157 + 45);
  v48 = v159;
  if ((unint64_t)v159 >= v160)
  {
    v60 = (void ***)__p;
    v61 = 0xAAAAAAAAAAAAAAABLL * (((char *)v159 - (_BYTE *)__p) >> 3);
    v62 = v61 + 1;
    if (v61 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * ((uint64_t)(v160 - (_QWORD)__p) >> 3) > v62)
      v62 = 0x5555555555555556 * ((uint64_t)(v160 - (_QWORD)__p) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v160 - (_QWORD)__p) >> 3) >= 0x555555555555555)
      v63 = 0xAAAAAAAAAAAAAAALL;
    else
      v63 = v62;
    if (v63)
      v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>>(v63);
    else
      v64 = 0;
    v75 = (void ***)(v63 + 24 * v61);
    *v75 = (void **)buf;
    v75[1] = v47;
    v75[2] = v46;
    v49 = v75 + 3;
    if (v48 != v60)
    {
      do
      {
        v76 = *(_OWORD *)(v48 - 3);
        *(v75 - 1) = *(v48 - 1);
        *(_OWORD *)(v75 - 3) = v76;
        v75 -= 3;
        v48 -= 3;
      }
      while (v48 != v60);
      v48 = (void ***)__p;
    }
    __p = v75;
    v160 = v63 + 24 * v64;
    v40 = v157;
    if (v48)
      operator delete(v48);
  }
  else
  {
    *v159 = (void **)buf;
    v48[1] = v47;
    v48[2] = v46;
    v49 = v48 + 3;
  }
  v159 = v49;
  if ((Phase::SpatialModeler::Scheduler::InitGraphSequence((uint64_t)v44, (uint64_t *)v40 + 688, (uint64_t *)&__p) & 1) == 0)
    goto LABEL_218;
  if (__p)
    operator delete(__p);
  __p = 0;
  v159 = 0;
  v160 = 0;
  std::vector<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>::reserve(&__p, 1uLL);
  v77 = (void **)((char *)v40 + 1408);
  v78 = (void **)*((_QWORD *)v40 + 55);
  v79 = v159;
  if ((unint64_t)v159 >= v160)
  {
    v81 = (void ***)__p;
    v82 = 0xAAAAAAAAAAAAAAABLL * (((char *)v159 - (_BYTE *)__p) >> 3);
    v83 = v82 + 1;
    if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * ((uint64_t)(v160 - (_QWORD)__p) >> 3) > v83)
      v83 = 0x5555555555555556 * ((uint64_t)(v160 - (_QWORD)__p) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v160 - (_QWORD)__p) >> 3) >= 0x555555555555555)
      v84 = 0xAAAAAAAAAAAAAAALL;
    else
      v84 = v83;
    if (v84)
      v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>>(v84);
    else
      v85 = 0;
    v99 = (void ***)(v84 + 24 * v82);
    *v99 = v164;
    v99[1] = v78;
    v99[2] = v77;
    v80 = v99 + 3;
    if (v79 != v81)
    {
      do
      {
        v100 = *(_OWORD *)(v79 - 3);
        *(v99 - 1) = *(v79 - 1);
        *(_OWORD *)(v99 - 3) = v100;
        v99 -= 3;
        v79 -= 3;
      }
      while (v79 != v81);
      v79 = (void ***)__p;
    }
    __p = v99;
    v160 = v84 + 24 * v85;
    v40 = v157;
    if (v79)
      operator delete(v79);
  }
  else
  {
    *v159 = v164;
    v79[1] = v78;
    v79[2] = v77;
    v80 = v79 + 3;
  }
  v159 = v80;
  if ((Phase::SpatialModeler::Scheduler::InitGraphSequence((uint64_t)v44, (uint64_t *)v40 + 692, (uint64_t *)&__p) & 1) == 0)
    goto LABEL_218;
  if (__p)
    operator delete(__p);
  __p = 0;
  v159 = 0;
  v160 = 0;
  std::vector<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>::reserve(&__p, 1uLL);
  if (*((_DWORD *)v40 + 132) != 2)
    goto LABEL_218;
  v101 = (void **)((char *)v40 + 1656);
  v102 = (void **)*((_QWORD *)v40 + 65);
  v103 = v159;
  if ((unint64_t)v159 >= v160)
  {
    v105 = (void ***)__p;
    v106 = 0xAAAAAAAAAAAAAAABLL * (((char *)v159 - (_BYTE *)__p) >> 3);
    v107 = v106 + 1;
    if (v106 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * ((uint64_t)(v160 - (_QWORD)__p) >> 3) > v107)
      v107 = 0x5555555555555556 * ((uint64_t)(v160 - (_QWORD)__p) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v160 - (_QWORD)__p) >> 3) >= 0x555555555555555)
      v108 = 0xAAAAAAAAAAAAAAALL;
    else
      v108 = v107;
    if (v108)
      v108 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>>(v108);
    else
      v109 = 0;
    v110 = (void ***)(v108 + 24 * v106);
    *v110 = v161;
    v110[1] = v102;
    v110[2] = v101;
    v104 = v110 + 3;
    if (v103 != v105)
    {
      do
      {
        v111 = *(_OWORD *)(v103 - 3);
        *(v110 - 1) = *(v103 - 1);
        *(_OWORD *)(v110 - 3) = v111;
        v110 -= 3;
        v103 -= 3;
      }
      while (v103 != v105);
      v103 = (void ***)__p;
    }
    __p = v110;
    v160 = v108 + 24 * v109;
    v40 = v157;
    if (v103)
      operator delete(v103);
  }
  else
  {
    *v159 = v161;
    v103[1] = v102;
    v103[2] = v101;
    v104 = v103 + 3;
  }
  v159 = v104;
  inited = Phase::SpatialModeler::Scheduler::InitGraphSequence((uint64_t)v44, (uint64_t *)v40 + 696, (uint64_t *)&__p);
LABEL_153:
  if ((inited & 1) == 0)
    goto LABEL_218;
  if (__p)
    operator delete(__p);
  __p = 0;
  v159 = 0;
  v160 = 0;
  std::vector<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>::reserve(&__p, 3uLL);
  v112 = (void **)((char *)v40 + 3336);
  v113 = (void **)*((_QWORD *)v40 + 45);
  v115 = v159;
  v114 = v160;
  if ((unint64_t)v159 >= v160)
  {
    v117 = (void ***)__p;
    v118 = 0xAAAAAAAAAAAAAAABLL * (((char *)v159 - (_BYTE *)__p) >> 3);
    v119 = v118 + 1;
    if (v118 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * ((uint64_t)(v160 - (_QWORD)__p) >> 3) > v119)
      v119 = 0x5555555555555556 * ((uint64_t)(v160 - (_QWORD)__p) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v160 - (_QWORD)__p) >> 3) >= 0x555555555555555)
      v120 = 0xAAAAAAAAAAAAAAALL;
    else
      v120 = v119;
    if (v120)
      v120 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>>(v120);
    else
      v121 = 0;
    v122 = (void ***)(v120 + 24 * v118);
    v114 = v120 + 24 * v121;
    *v122 = (void **)buf;
    v122[1] = v113;
    v122[2] = v112;
    v116 = v122 + 3;
    if (v115 != v117)
    {
      do
      {
        v123 = *(_OWORD *)(v115 - 3);
        *(v122 - 1) = *(v115 - 1);
        *(_OWORD *)(v122 - 3) = v123;
        v122 -= 3;
        v115 -= 3;
      }
      while (v115 != v117);
      v115 = (void ***)__p;
    }
    __p = v122;
    v160 = v120 + 24 * v121;
    if (v115)
      operator delete(v115);
  }
  else
  {
    *v159 = (void **)buf;
    v115[1] = v113;
    v115[2] = v112;
    v116 = v115 + 3;
  }
  v159 = v116;
  v124 = (void **)((char *)v157 + 3584);
  v125 = (void **)*((_QWORD *)v157 + 55);
  if ((unint64_t)v116 < v114)
  {
    *v116 = v164;
    v116[1] = v125;
    v116[2] = v124;
    v126 = v116 + 3;
    v127 = v157;
    goto LABEL_189;
  }
  v128 = (void ***)__p;
  v129 = 0xAAAAAAAAAAAAAAABLL * (((char *)v116 - (_BYTE *)__p) >> 3);
  v130 = v129 + 1;
  if (v129 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(v114 - (_QWORD)__p) >> 3) > v130)
    v130 = 0x5555555555555556 * ((uint64_t)(v114 - (_QWORD)__p) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114 - (_QWORD)__p) >> 3) >= 0x555555555555555)
    v131 = 0xAAAAAAAAAAAAAAALL;
  else
    v131 = v130;
  if (v131)
    v131 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>>(v131);
  else
    v132 = 0;
  v127 = v157;
  v133 = (void ***)(v131 + 24 * v129);
  *v133 = v164;
  v133[1] = v125;
  v133[2] = v124;
  v126 = v133 + 3;
  if (v116 == v128)
  {
    __p = (void *)(v131 + 24 * v129);
    v159 = v133 + 3;
    v160 = v131 + 24 * v132;
LABEL_188:
    operator delete(v116);
    goto LABEL_189;
  }
  do
  {
    v134 = *(_OWORD *)(v116 - 3);
    *(v133 - 1) = *(v116 - 1);
    *(_OWORD *)(v133 - 3) = v134;
    v133 -= 3;
    v116 -= 3;
  }
  while (v116 != v128);
  v116 = (void ***)__p;
  __p = v133;
  v159 = v126;
  v160 = v131 + 24 * v132;
  if (v116)
    goto LABEL_188;
LABEL_189:
  v159 = v126;
  if (*((_DWORD *)v127 + 132) != 2)
    goto LABEL_218;
  v135 = (void **)((char *)v127 + 3832);
  v136 = (void **)*((_QWORD *)v127 + 65);
  if ((unint64_t)v126 < v160)
  {
    *v126 = v161;
    v126[1] = v136;
    v126[2] = v135;
    v137 = v126 + 3;
    goto LABEL_208;
  }
  v138 = (void ***)__p;
  v139 = 0xAAAAAAAAAAAAAAABLL * (((char *)v126 - (_BYTE *)__p) >> 3);
  v140 = v139 + 1;
  if (v139 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(v160 - (_QWORD)__p) >> 3) > v140)
    v140 = 0x5555555555555556 * ((uint64_t)(v160 - (_QWORD)__p) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v160 - (_QWORD)__p) >> 3) >= 0x555555555555555)
    v141 = 0xAAAAAAAAAAAAAAALL;
  else
    v141 = v140;
  if (v141)
    v141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>>(v141);
  else
    v142 = 0;
  v143 = (void ***)(v141 + 24 * v139);
  *v143 = v161;
  v143[1] = v136;
  v143[2] = v135;
  v137 = v143 + 3;
  if (v126 == v138)
  {
    __p = (void *)(v141 + 24 * v139);
    v159 = v143 + 3;
    v160 = v141 + 24 * v142;
  }
  else
  {
    do
    {
      v144 = *(_OWORD *)(v126 - 3);
      *(v143 - 1) = *(v126 - 1);
      *(_OWORD *)(v143 - 3) = v144;
      v143 -= 3;
      v126 -= 3;
    }
    while (v126 != v138);
    v126 = (void ***)__p;
    __p = v143;
    v159 = v137;
    v160 = v141 + 24 * v142;
    if (!v126)
      goto LABEL_207;
  }
  operator delete(v126);
LABEL_207:
  v127 = v157;
LABEL_208:
  v159 = v137;
  if ((Phase::SpatialModeler::Scheduler::InitGraphSequence((uint64_t)v44, (uint64_t *)v127 + 701, (uint64_t *)&__p) & 1) == 0)
    goto LABEL_218;
  if (__p)
    operator delete(__p);
  __p = &v163;
  std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v162 < 0)
    operator delete(v161[0]);
  v161[0] = &v166;
  std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__destroy_vector::operator()[abi:ne180100]((void ***)v161);
  if (v165 < 0)
    operator delete(v164[0]);
  v164[0] = (char *)v171 + 4;
  std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__destroy_vector::operator()[abi:ne180100]((void ***)v164);
  if (SBYTE3(v171[0]) < 0)
    operator delete(*(void **)buf);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>((uint64_t)v127 + 8, vcvtps_u32_f32(0.0 / *((float *)v127 + 10)));
  Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Resize((uint64_t *)v127 + 6, 0);
}

void sub_21651C150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;

  __cxa_free_exception(v31);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatialModelerInstance::StopUpdate(Phase::Controller::SpatialModelerInstance *this)
{
  unsigned __int8 *v2;
  unsigned __int8 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = (unsigned __int8 *)this + 5640;
  if (*((_QWORD *)this + 728))
  {
    v3 = atomic_load((unsigned __int8 *)this + 5642);
    if ((v3 & 1) != 0)
    {
      v4 = *((_QWORD *)this + 736);
      v5 = (std::__shared_weak_count *)*((_QWORD *)this + 729);
      v24 = *((_QWORD *)this + 728);
      v25 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v4 + 64))(v4, &v24, 0);
      v8 = v25;
      if (v25)
      {
        v9 = (unint64_t *)&v25->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      atomic_store(0, v2 + 2);
    }
    v11 = atomic_load(v2);
    if ((v11 & 1) != 0)
    {
      v12 = *((_QWORD *)this + 736);
      v13 = (std::__shared_weak_count *)*((_QWORD *)this + 729);
      v22 = *((_QWORD *)this + 728);
      v23 = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      (*(void (**)(uint64_t, uint64_t *, double))(*(_QWORD *)v12 + 96))(v12, &v22, 0.0);
      v16 = v23;
      if (v23)
      {
        v17 = (unint64_t *)&v23->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
  v2[72] = 0;
  std::shared_ptr<Phase::Job>::reset[abi:ne180100]((_QWORD *)this + 728);
  Phase::Controller::SpatialModelerInstance::StopSustainGraph(this, 1);
  std::mutex::lock((std::mutex *)((char *)this + 5648));
  std::mutex::unlock((std::mutex *)((char *)this + 5648));
  Phase::Controller::SpatialModelerInstance::CancelAllQueries(this);
  v19 = (unsigned __int8 *)this + 5641;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(0, v19));
  return v20 & 1;
}

void sub_21651C3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

Phase::Controller::SpatialSubmixRouter *Phase::Controller::SpatialModelerInstance::Reset(Phase::Controller::SpatialSubmixRouter **this)
{
  Phase::Controller::SpatialSubmixRouter *result;

  Phase::Controller::SpatialModelerInstance::CancelAllQueries((Phase::Controller::SpatialModelerInstance *)this);
  Phase::Controller::SpatialModelerInstance::ResetAllGraphData((Phase::Controller::SpatialModelerInstance *)this, (Phase::Controller::SpatialModelerInstance::GraphData *)(this + 144));
  Phase::Controller::SpatialModelerInstance::ResetAllGraphData((Phase::Controller::SpatialModelerInstance *)this, (Phase::Controller::SpatialModelerInstance::GraphData *)(this + 416));
  Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(this);
  result = this[809];
  if (result)
    return (Phase::Controller::SpatialSubmixRouter *)Phase::Controller::SpatialSubmixRouter::Reset(result);
  return result;
}

void Phase::Controller::SpatialModelerInstance::ClearRegisteredSubmixState(Phase::Controller::SpatialModelerInstance *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  v4 = 0;
  v5 = 0;
  std::atomic_store[abi:ne180100]<Phase::Controller::SubmixSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo>>((uint64_t *)this + 31, &v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_21651C494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::error_category **std::unique_ptr<Phase::SpatialModeler::Scheduler>::reset[abi:ne180100](std::error_category **result)
{
  std::error_category *v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::error_category::~error_category(v1 + 3);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t Phase::Controller::SpatialModelerInstance::GetDescription(Phase::Controller::SpatialModelerInstance *this, uint64_t a2)
{
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"SpatialModelerInstance impl@", 28);
  std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (", 2);
  Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *(Phase::Controller::SpatialModelerInfo **)(a2 + 5864));
  if ((v9 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v5 = v9;
  else
    v5 = (uint64_t)__p[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)")", 1);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2199F9CD4](&v12);
}

void sub_21651C620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *Phase::Controller::SpatialModelerInstance::SetupGraphData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *result;
  uint64_t v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  _BYTE v45[24];
  _BYTE *v46;
  _QWORD v47[3];
  _QWORD *v48;
  _QWORD v49[3];
  _QWORD *v50;
  _QWORD v51[3];
  _QWORD *v52;
  _QWORD v53[3];
  _QWORD *v54;
  _QWORD v55[3];
  _QWORD *v56;
  _QWORD v57[3];
  _QWORD *v58;
  _QWORD v59[3];
  _QWORD *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  a2[31] = a1[45];
  v6 = operator new(0x20uLL);
  *v6 = &off_24D579190;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v60 = v6;
  std::function<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator=(a2 + 12, v59);
  v7 = v60;
  if (v60 == v59)
  {
    v8 = 4;
    v7 = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v57[0] = &off_24D5791D8;
  v57[1] = a1;
  v57[2] = a2;
  v58 = v57;
  std::function<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator=(a2 + 16, v57);
  v9 = v58;
  if (v58 == v57)
  {
    v10 = 4;
    v9 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  v55[0] = &off_24D579220;
  v55[1] = a1;
  v55[2] = a2;
  v56 = v55;
  std::function<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::operator=(a2 + 20, v55);
  v11 = v56;
  if (v56 == v55)
  {
    v12 = 4;
    v11 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_16;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_16:
  v53[0] = &off_24D579268;
  v54 = v53;
  std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::operator=(a2 + 24, (uint64_t)v53);
  v13 = v54;
  if (v54 == v53)
  {
    v14 = 4;
    v13 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_21;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_21:
  a2[62] = a1[55];
  v15 = operator new(0x20uLL);
  *v15 = &off_24D5792B0;
  v15[1] = a1;
  v15[2] = a2;
  v15[3] = a3;
  v52 = v15;
  std::function<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator=(a2 + 43, v51);
  v16 = v52;
  if (v52 == v51)
  {
    v17 = 4;
    v16 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_26;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_26:
  v49[0] = &off_24D5792F8;
  v49[1] = a1;
  v49[2] = a2;
  v50 = v49;
  std::function<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator=(a2 + 47, v49);
  v18 = v50;
  if (v50 == v49)
  {
    v19 = 4;
    v18 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_31;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_31:
  v47[0] = &off_24D579340;
  v47[1] = a1;
  v47[2] = a2;
  v48 = v47;
  std::function<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::operator=(a2 + 51, v47);
  v20 = v48;
  if (v48 == v47)
  {
    v21 = 4;
    v20 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_36;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_36:
  v46 = 0;
  std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::operator=(a2 + 55, (uint64_t)v45);
  v22 = v46;
  if (v46 == v45)
  {
    v23 = 4;
    v22 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_41;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_41:
  a2[93] = a1[65];
  v24 = operator new(0x20uLL);
  *v24 = &off_24D579388;
  v24[1] = a1;
  v24[2] = a2;
  v24[3] = a3;
  v44 = v24;
  std::function<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator=(a2 + 74, v43);
  v25 = v44;
  if (v44 == v43)
  {
    v26 = 4;
    v25 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_46;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_46:
  v41[0] = &off_24D5793D0;
  v41[1] = a1;
  v41[2] = a2;
  v42 = v41;
  std::function<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::operator=(a2 + 82, v41);
  v27 = v42;
  if (v42 == v41)
  {
    v28 = 4;
    v27 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_51;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_51:
  v39[0] = &off_24D579418;
  v39[1] = a2;
  v40 = v39;
  std::function<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator=(a2 + 78, v39);
  v29 = v40;
  if (v40 == v39)
  {
    v30 = 4;
    v29 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_56;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_56:
  v37[0] = &off_24D579460;
  v38 = v37;
  std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::operator=(a2 + 86, (uint64_t)v37);
  v31 = v38;
  if (v38 == v37)
  {
    v32 = 4;
    v31 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_61;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_61:
  v35[0] = &off_24D5794A8;
  v35[1] = a1;
  v35[2] = a2;
  v36 = v35;
  Phase::Controller::SpatialQueryInstance::Initialize((uint64_t)(a2 + 102), (uint64_t)(a1 + 52), (Phase::SystemAllocator *)(a1 + 731), (uint64_t)v35, 0);
  result = v36;
  if (v36 == v35)
  {
    v34 = 4;
    result = v35;
  }
  else
  {
    if (!v36)
      return result;
    v34 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v34))();
}

void sub_21651CAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  char *v41;
  char *v43;
  uint64_t v44;

  v43 = a13;
  if (a13 == v41)
  {
    v44 = 4;
    v43 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v44 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_21651CC68()
{
  JUMPOUT(0x21651CC60);
}

void std::vector<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;

  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) < a2)
  {
    v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>>(a2);
    v5 = &v4[24 * v3];
    v7 = &v4[24 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *(_OWORD *)(v8 - 24);
        *((_QWORD *)v10 - 1) = *((_QWORD *)v8 - 1);
        *(_OWORD *)(v10 - 24) = v11;
        v10 -= 24;
        v8 -= 24;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void std::shared_ptr<Phase::Job>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void Phase::Controller::SpatialModelerInstance::StopSustainGraph(Phase::Controller::SpatialModelerInstance *this, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  Phase::Logger *v24;
  NSObject *v25;
  void **v26;
  void *__p[2];
  char v28;
  uint64_t v29[3];
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  _BYTE buf[18];
  __int16 v34;
  void **v35;
  __int16 v36;
  uint64_t v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = (std::mutex *)((char *)this + 5648);
  std::mutex::lock((std::mutex *)((char *)this + 5648));
  v5 = *((_QWORD *)this + 726);
  if (!v5)
  {
    std::mutex::unlock(v4);
    return;
  }
  v6 = 0;
  atomic_store(1u, (unsigned __int8 *)this + 5643);
  v30 = (uint64_t *)&v30;
  v31 = (uint64_t *)&v30;
  v32 = 0;
  v7 = (uint64_t *)&v30;
  do
  {
    v8 = (uint64_t *)operator new(0x20uLL);
    v8[2] = 0;
    v8[3] = 0;
    *v8 = (uint64_t)v7;
    v8[1] = (uint64_t)&v30;
    v7[1] = (uint64_t)v8;
    ++v6;
    v7 = v8;
    v30 = v8;
    v32 = v6;
  }
  while (v5 != v6);
  v9 = (_QWORD *)*((_QWORD *)this + 725);
  if (v9)
  {
    v10 = v31;
    do
    {
      v11 = v9[3];
      v12 = (std::__shared_weak_count *)v9[4];
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      *(_QWORD *)buf = v11;
      *(_QWORD *)&buf[8] = v12;
      std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)(v10 + 2), (__int128 *)buf);
      v16 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_14;
      v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if (v12)
        {
LABEL_15:
          v19 = (unint64_t *)&v12->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
      else
      {
LABEL_14:
        if (v12)
          goto LABEL_15;
      }
      v9 = (_QWORD *)*v9;
      v10 = (uint64_t *)v10[1];
    }
    while (v9);
  }
  v21 = *((_QWORD *)this + 736);
  std::list<std::shared_ptr<Phase::Job>>::list(v29, (uint64_t)&v30);
  v38[0] = &off_24D5796C8;
  v38[1] = this;
  v38[2] = v32;
  v39 = v38;
  (*(void (**)(uint64_t, uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)v21 + 88))(v21, v29, v38, a2);
  v22 = v39;
  if (v39 == v38)
  {
    v23 = 4;
    v22 = v38;
    goto LABEL_26;
  }
  if (v39)
  {
    v23 = 5;
LABEL_26:
    (*(void (**)(void))(*v22 + 8 * v23))();
  }
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v29);
  v25 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v24)
                                                                                      + 224)));
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, (uint64_t)this);
    if (v28 >= 0)
      v26 = __p;
    else
      v26 = (void **)__p[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3116;
    v34 = 2080;
    v35 = v26;
    v36 = 2048;
    v37 = v32;
    _os_log_impl(&dword_2164CC000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s: stopping all (%lu) sustain graphs", buf, 0x26u);
    if (v28 < 0)
      operator delete(__p[0]);
  }

  std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::clear((uint64_t)this + 5784);
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear((uint64_t *)&v30);
}

void sub_21651D0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);

  std::__list_imp<std::shared_ptr<Phase::Job>>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialModelerInstance::CancelAllQueries(Phase::Controller::SpatialModelerInstance *this)
{
  uint64_t i;

  Phase::SpatialModeler::Scheduler::CancelAllQueries(*((_QWORD **)this + 734), (unsigned __int8 *)this + 5608);
  for (i = 0; i != 96; i += 32)
    Phase::SpatialModeler::Scheduler::CancelAllQueries(*((_QWORD **)this + 734), (unsigned __int8 *)this + i + 5504);
}

void Phase::Controller::SpatialModelerInstance::Update(Phase::Controller::SpatialModelerInstance *this, double a2)
{
  unsigned __int8 v4;

  Phase::Controller::SpatialModelerInstance::SaveRegisteredSubmixState(this);
  Phase::Controller::SpatialSubmixRouter::Update(*((Phase::Controller::RenderGroupMgr ***)this + 809), a2);
  v4 = atomic_load((unsigned __int8 *)this + 5641);
  if ((v4 & 1) != 0)
    Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(this);
}

void Phase::Controller::SpatialModelerInstance::SaveRegisteredSubmixState(Phase::Controller::SpatialModelerInstance *this)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v17 = 0;
  v18 = 0;
  v19 = 0;
  std::shared_ptr<Phase::Controller::SpatialModelerInstance::SubmixInfo>::operator=[abi:ne180100](&v17, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
  v19 = *((_DWORD *)this + 16);
  v2 = operator new(0x30uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24D579080;
  v2[3] = 0;
  v2[4] = 0;
  *((_DWORD *)v2 + 10) = 0;
  std::shared_ptr<Phase::Controller::SpatialModelerInstance::SubmixInfo>::operator=[abi:ne180100](v2 + 3, v17, (uint64_t)v18);
  *((_DWORD *)v2 + 10) = v19;
  v20 = (uint64_t)(v2 + 3);
  v21 = (std::__shared_weak_count *)v2;
  v3 = v18;
  if (!v18)
  {
    v6 = (uint64_t *)((char *)this + 248);
    v15 = v2 + 3;
    v16 = (std::__shared_weak_count *)v2;
LABEL_9:
    v7 = v2 + 1;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    goto LABEL_11;
  }
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  v6 = (uint64_t *)((char *)this + 248);
  v2 = &v21->__vftable;
  v15 = (_QWORD *)v20;
  v16 = v21;
  if (v21)
    goto LABEL_9;
LABEL_11:
  std::atomic_store[abi:ne180100]<Phase::Controller::SubmixSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo>>(v6, (uint64_t *)&v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v21;
  if (v21)
  {
    v13 = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_21651D344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(Phase::Controller::SpatialModelerInstance *this)
{
  unsigned __int8 *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  Phase::Logger *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  std::string *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t j;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *size;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  BOOL v81;
  char v82;
  unint64_t *v83;
  unint64_t v84;
  NSObject *v85;
  std::string *v86;
  std::chrono::steady_clock::time_point v87;
  char *v88;
  void **v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  double v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  BOOL v97;
  unint64_t v98;
  char *v99;
  void *v100;
  void *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  int64_t v111;
  char *v112;
  std::chrono::steady_clock::time_point v113;
  void **v114;
  unint64_t v115;
  void **v116;
  void **v117;
  double *v118;
  uint64_t v119;
  char *v120;
  void **v121;
  void *v122;
  void *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  double v127;
  uint64_t v128;
  __int16 v129;
  unint64_t v130;
  uint64_t v131;
  double *v132;
  unint64_t v133;
  uint64_t v134;
  double v135;
  double *v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  void *v159;
  unint64_t v160;
  void **v161;
  void **v162;
  double *v163;
  __int16 v164;
  unint64_t v165;
  uint64_t v166;
  double v167;
  double *v168;
  uint64_t v169;
  double v170;
  double *v171;
  unint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  void **v176;
  void **v177;
  uint64_t v178;
  uint64_t v179;
  void **v180;
  void *v181;
  void *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  int64_t v194;
  void *v195;
  uint64_t v196;
  unint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  uint64_t i;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  unint64_t v206;
  char *v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char *v220;
  uint64_t v221;
  char *v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  void *v228;
  uint64_t v229[2];
  uint64_t v230;
  std::__shared_weak_count *v231;
  uint64_t v232;
  std::__shared_weak_count *v233;
  std::string __p;
  uint64_t v235;
  std::__shared_weak_count *v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  __int128 v241;
  _QWORD v242[3];
  _QWORD *v243;
  uint8_t buf[40];
  uint64_t v245;

  v245 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned __int8 *)this + 5640;
  if (!*((_BYTE *)this + 6480))
    goto LABEL_28;
  v3 = *((_QWORD *)this + 40);
  if (v3 < 1 || (v4 = *((double *)this + 41), v4 <= 0.0))
  {
    *((_BYTE *)this + 5712) = 0;
    goto LABEL_11;
  }
  v5 = *(_QWORD *)this;
  if (*((_QWORD *)this + 721) != v3)
  {
    v6 = (void **)*((_QWORD *)this + 716);
    v7 = *((_QWORD *)this + 717);
    *((_QWORD *)this + 720) = 0;
    v8 = v7 - (_QWORD)v6;
    if (v8 >= 0x11)
    {
      do
      {
        operator delete(*v6);
        v6 = (void **)(*((_QWORD *)this + 716) + 8);
        *((_QWORD *)this + 716) = v6;
        v8 = *((_QWORD *)this + 717) - (_QWORD)v6;
      }
      while (v8 > 0x10);
    }
    if (v8 >> 3 == 1)
    {
      v9 = 256;
    }
    else
    {
      if (v8 >> 3 != 2)
      {
LABEL_136:
        *((_QWORD *)this + 721) = v3;
        v4 = *((double *)this + 41);
        goto LABEL_137;
      }
      v9 = 512;
    }
    *((_QWORD *)this + 719) = v9;
    goto LABEL_136;
  }
LABEL_137:
  if (v5)
  {
    v87.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v88 = (char *)*((_QWORD *)this + 717);
    v89 = (void **)*((_QWORD *)this + 716);
    v90 = v88 - (char *)v89;
    v91 = (double)v87.__d_.__rep_ / 1000000000.0;
    if (v88 == (char *)v89)
      v92 = 0;
    else
      v92 = ((v88 - (char *)v89) << 6) - 1;
    if (v91 - *((double *)this + 722) <= 2.0)
      v93 = v91 - *((double *)this + 722);
    else
      v93 = 2.0;
    v94 = *((_QWORD *)this + 719);
    v95 = *((_QWORD *)this + 720);
    v96 = v95 + v94;
    if (v92 != v95 + v94)
    {
LABEL_205:
      (*(double **)((char *)v89 + ((v96 >> 6) & 0x3FFFFFFFFFFFFF8)))[v96 & 0x1FF] = v93;
      *((_QWORD *)this + 720) = v95 + 1;
      if ((unint64_t)(v95 + 1) > *((_QWORD *)this + 721))
      {
        *((_QWORD *)this + 720) = v95;
        *((_QWORD *)this + 719) = ++v94;
        if (v94 >= 0x400)
        {
          operator delete(*v89);
          v89 = (void **)(*((_QWORD *)this + 716) + 8);
          *((_QWORD *)this + 716) = v89;
          v94 = *((_QWORD *)this + 719) - 512;
          *((_QWORD *)this + 719) = v94;
        }
      }
      *((double *)this + 722) = v91;
      if (!v2[72])
      {
        v160 = *((_QWORD *)this + 720);
        if (v160 >= 2)
        {
          v161 = &v89[v94 >> 9];
          v162 = (void **)*((_QWORD *)this + 717);
          if (v162 == v89)
            v163 = 0;
          else
            v163 = (double *)((char *)*v161 + 8 * (v94 & 0x1FF));
          v164 = v160 + v94;
          v165 = (v160 + v94) >> 9;
          v166 = v164 & 0x1FF;
          v167 = 0.0;
LABEL_214:
          v168 = v163 - 512;
          while (1)
          {
            v169 = v162 == v89 ? 0 : (uint64_t)v89[v165] + 8 * v166;
            if (v163 == (double *)v169)
              break;
            v170 = *v163++;
            v167 = v167 + v170;
            if (*v161 == ++v168)
            {
              v171 = (double *)v161[1];
              ++v161;
              v163 = v171;
              goto LABEL_214;
            }
          }
          if (v167 / (double)v160 < v4)
            v2[72] = 1;
        }
      }
      goto LABEL_11;
    }
    v97 = v94 >= 0x200;
    v98 = v94 - 512;
    if (v97)
    {
      *((_QWORD *)this + 719) = v98;
      v101 = *v89;
      v99 = (char *)(v89 + 1);
      v100 = v101;
      *((_QWORD *)this + 716) = v99;
      if (v88 == *((char **)this + 718))
      {
        v102 = *((_QWORD *)this + 715);
        v103 = (uint64_t)&v99[-v102];
        if ((unint64_t)v99 <= v102)
        {
          v148 = (uint64_t)&v88[-v102];
          v81 = v148 == 0;
          v149 = v148 >> 2;
          if (v81)
            v150 = 1;
          else
            v150 = v149;
          v151 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v150);
          v153 = &v151[8 * (v150 >> 2)];
          v154 = (uint64_t *)*((_QWORD *)this + 716);
          v88 = v153;
          v155 = *((_QWORD *)this + 717) - (_QWORD)v154;
          if (v155)
          {
            v88 = &v153[v155 & 0xFFFFFFFFFFFFFFF8];
            v156 = 8 * (v155 >> 3);
            v157 = &v151[8 * (v150 >> 2)];
            do
            {
              v158 = *v154++;
              *(_QWORD *)v157 = v158;
              v157 += 8;
              v156 -= 8;
            }
            while (v156);
          }
          v159 = (void *)*((_QWORD *)this + 715);
          *((_QWORD *)this + 715) = v151;
          *((_QWORD *)this + 716) = v153;
          *((_QWORD *)this + 717) = v88;
          *((_QWORD *)this + 718) = &v151[8 * v152];
          if (v159)
          {
            operator delete(v159);
            v88 = (char *)*((_QWORD *)this + 717);
          }
        }
        else
        {
          v104 = v103 >> 3;
          v105 = v103 >> 3 < -1;
          v106 = (v103 >> 3) + 2;
          if (v105)
            v107 = v106;
          else
            v107 = v104 + 1;
          v108 = -(v107 >> 1);
          v109 = v107 >> 1;
          v110 = &v99[-8 * v109];
          v111 = v88 - v99;
          if (v88 != v99)
          {
            memmove(&v99[-8 * v109], v99, v88 - v99);
            v88 = (char *)*((_QWORD *)this + 716);
          }
          v112 = &v88[8 * v108];
          v88 = &v110[v111];
          *((_QWORD *)this + 717) = &v110[v111];
          *((_QWORD *)this + 716) = v112;
        }
      }
      *(_QWORD *)v88 = v100;
    }
    else
    {
      v119 = v90 >> 3;
      v120 = (char *)*((_QWORD *)this + 718);
      v121 = (void **)*((_QWORD *)this + 715);
      if (v90 >> 3 >= (unint64_t)((v120 - (char *)v121) >> 3))
      {
        if (v120 == (char *)v121)
          v138 = 1;
        else
          v138 = (v120 - (char *)v121) >> 2;
        v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v138);
        v141 = v140;
        v142 = operator new(0x1000uLL);
        v143 = &v139[8 * v119];
        v144 = &v139[8 * v141];
        if (v119 == v141)
        {
          v145 = 8 * v119;
          if (v90 < 1)
          {
            v195 = v142;
            v196 = v145 >> 2;
            if (v88 == (char *)v89)
              v197 = 1;
            else
              v197 = v196;
            v198 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v197);
            v143 = &v198[8 * (v197 >> 2)];
            v144 = &v198[8 * v199];
            if (v139)
              operator delete(v139);
            v139 = v198;
            v142 = v195;
          }
          else
          {
            v146 = v145 >> 3;
            if (v146 >= -1)
              v147 = v146 + 1;
            else
              v147 = v146 + 2;
            v143 -= 8 * (v147 >> 1);
          }
        }
        *(_QWORD *)v143 = v142;
        v200 = v143 + 8;
        for (i = *((_QWORD *)this + 717); i != *((_QWORD *)this + 716); i -= 8)
        {
          if (v143 == v139)
          {
            if (v200 >= v144)
            {
              if (v144 == v139)
                v206 = 1;
              else
                v206 = (v144 - v139) >> 2;
              v207 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v206);
              v209 = v207;
              v143 = &v207[(2 * v206 + 6) & 0xFFFFFFFFFFFFFFF8];
              v210 = v200 - v139;
              v81 = v200 == v139;
              v200 = v143;
              if (!v81)
              {
                v200 = &v143[v210 & 0xFFFFFFFFFFFFFFF8];
                v211 = 8 * (v210 >> 3);
                v212 = v143;
                v213 = (uint64_t *)v139;
                do
                {
                  v214 = *v213++;
                  *(_QWORD *)v212 = v214;
                  v212 += 8;
                  v211 -= 8;
                }
                while (v211);
              }
              v144 = &v207[8 * v208];
              if (v139)
                operator delete(v139);
              v139 = v209;
            }
            else
            {
              v202 = (v144 - v200) >> 3;
              if (v202 >= -1)
                v203 = v202 + 1;
              else
                v203 = v202 + 2;
              v204 = v203 >> 1;
              v143 = &v139[8 * (v203 >> 1)];
              v205 = v139;
              if (v200 != v139)
              {
                memmove(v143, v139, v200 - v139);
                v205 = v200;
              }
              v200 = &v205[8 * v204];
            }
          }
          v215 = *(_QWORD *)(i - 8);
          *((_QWORD *)v143 - 1) = v215;
          v143 -= 8;
        }
        v216 = (void *)*((_QWORD *)this + 715);
        *((_QWORD *)this + 715) = v139;
        *((_QWORD *)this + 716) = v143;
        *((_QWORD *)this + 717) = v200;
        *((_QWORD *)this + 718) = v144;
        if (v216)
          operator delete(v216);
        goto LABEL_204;
      }
      v122 = operator new(0x1000uLL);
      v123 = v122;
      if (v120 == v88)
      {
        if (v89 == v121)
        {
          if (v88 == (char *)v89)
            v172 = 1;
          else
            v172 = (v120 - (char *)v89) >> 2;
          v173 = 2 * v172;
          v174 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v172);
          v89 = (void **)&v174[(v173 + 6) & 0xFFFFFFFFFFFFFFF8];
          v176 = (void **)*((_QWORD *)this + 716);
          v177 = v89;
          v178 = *((_QWORD *)this + 717) - (_QWORD)v176;
          if (v178)
          {
            v177 = (void **)((char *)v89 + (v178 & 0xFFFFFFFFFFFFFFF8));
            v179 = 8 * (v178 >> 3);
            v180 = v89;
            do
            {
              v181 = *v176++;
              *v180++ = v181;
              v179 -= 8;
            }
            while (v179);
          }
          v182 = (void *)*((_QWORD *)this + 715);
          *((_QWORD *)this + 715) = v174;
          *((_QWORD *)this + 716) = v89;
          *((_QWORD *)this + 717) = v177;
          *((_QWORD *)this + 718) = &v174[8 * v175];
          if (v182)
          {
            operator delete(v182);
            v89 = (void **)*((_QWORD *)this + 716);
          }
        }
        *(v89 - 1) = v123;
        v183 = (char *)*((_QWORD *)this + 716);
        *((_QWORD *)this + 716) = v183 - 8;
        v184 = *((_QWORD *)v183 - 1);
        *((_QWORD *)this + 716) = v183;
        v185 = (char *)*((_QWORD *)this + 717);
        if (v185 == *((char **)this + 718))
        {
          v186 = *((_QWORD *)this + 715);
          v187 = (uint64_t)&v183[-v186];
          if ((unint64_t)v183 <= v186)
          {
            v217 = (uint64_t)&v185[-v186];
            v81 = v217 == 0;
            v218 = v217 >> 2;
            if (v81)
              v219 = 1;
            else
              v219 = v218;
            v220 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v219);
            v222 = &v220[8 * (v219 >> 2)];
            v223 = (uint64_t *)*((_QWORD *)this + 716);
            v185 = v222;
            v224 = *((_QWORD *)this + 717) - (_QWORD)v223;
            if (v224)
            {
              v185 = &v222[v224 & 0xFFFFFFFFFFFFFFF8];
              v225 = 8 * (v224 >> 3);
              v226 = &v220[8 * (v219 >> 2)];
              do
              {
                v227 = *v223++;
                *(_QWORD *)v226 = v227;
                v226 += 8;
                v225 -= 8;
              }
              while (v225);
            }
            v228 = (void *)*((_QWORD *)this + 715);
            *((_QWORD *)this + 715) = v220;
            *((_QWORD *)this + 716) = v222;
            *((_QWORD *)this + 717) = v185;
            *((_QWORD *)this + 718) = &v220[8 * v221];
            if (v228)
            {
              operator delete(v228);
              v185 = (char *)*((_QWORD *)this + 717);
            }
          }
          else
          {
            v188 = v187 >> 3;
            v105 = v187 >> 3 < -1;
            v189 = (v187 >> 3) + 2;
            if (v105)
              v190 = v189;
            else
              v190 = v188 + 1;
            v191 = -(v190 >> 1);
            v192 = v190 >> 1;
            v193 = &v183[-8 * v192];
            v194 = v185 - v183;
            if (v185 != v183)
            {
              memmove(&v183[-8 * v192], v183, v185 - v183);
              v183 = (char *)*((_QWORD *)this + 716);
            }
            v185 = &v193[v194];
            *((_QWORD *)this + 717) = &v193[v194];
            *((_QWORD *)this + 716) = &v183[8 * v191];
          }
        }
        *(_QWORD *)v185 = v184;
      }
      else
      {
        *(_QWORD *)v88 = v122;
      }
    }
    *((_QWORD *)this + 717) += 8;
LABEL_204:
    v95 = *((_QWORD *)this + 720);
    v89 = (void **)*((_QWORD *)this + 716);
    v94 = *((_QWORD *)this + 719);
    v96 = v94 + v95;
    goto LABEL_205;
  }
  if (!v2[72])
    goto LABEL_11;
  v113.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v114 = (void **)*((_QWORD *)this + 716);
  v115 = *((_QWORD *)this + 719);
  v116 = &v114[v115 >> 9];
  v117 = (void **)*((_QWORD *)this + 717);
  v118 = v117 == v114 ? 0 : (double *)((char *)*v116 + 8 * (*((_QWORD *)this + 719) & 0x1FFLL));
  v127 = (double)v113.__d_.__rep_ / 1000000000.0 - *((double *)this + 722);
  v128 = *((_QWORD *)this + 720);
  v129 = v128 + v115;
  v130 = (v128 + v115) >> 9;
  v131 = v129 & 0x1FF;
LABEL_170:
  v132 = v118 - 512;
  while (1)
  {
    v133 = (char *)v117 - (char *)v114;
    v134 = v117 == v114 ? 0 : (uint64_t)v114[v130] + 8 * v131;
    if (v118 == (double *)v134)
      break;
    v135 = *v118++;
    v127 = v127 + v135;
    if (*v116 == ++v132)
    {
      v136 = (double *)v116[1];
      ++v116;
      v118 = v136;
      goto LABEL_170;
    }
  }
  if (v127 / (double)(unint64_t)(v128 + 1) <= v4)
    goto LABEL_11;
  v2[72] = 0;
  *((_QWORD *)this + 720) = 0;
  if (v133 >= 0x11)
  {
    do
    {
      operator delete(*v114);
      v114 = (void **)(*((_QWORD *)this + 716) + 8);
      *((_QWORD *)this + 716) = v114;
      v133 = *((_QWORD *)this + 717) - (_QWORD)v114;
    }
    while (v133 > 0x10);
  }
  if (v133 >> 3 == 1)
  {
    v137 = 256;
    goto LABEL_193;
  }
  if (v133 >> 3 == 2)
  {
    v137 = 512;
LABEL_193:
    *((_QWORD *)this + 719) = v137;
  }
LABEL_11:
  v10 = atomic_load(v2 + 2);
  if ((v10 & 1) != 0 && !v2[72])
  {
    v11 = *((_QWORD *)this + 736);
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 729);
    v232 = *((_QWORD *)this + 728);
    v233 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = (Phase::Logger *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v11 + 64))(v11, &v232, 0);
    v16 = v233;
    if (v233)
    {
      v17 = (unint64_t *)&v233->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    atomic_store(0, v2 + 2);
    v19 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15)
                                                                                        + 224)));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)&__p, (uint64_t)this);
      v20 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 797;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v20;
      _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s: stopped overflow graph", buf, 0x1Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

  }
LABEL_28:
  if (*(_QWORD *)this)
  {
    if (!*((_QWORD *)this + 726))
      Phase::Controller::SpatialModelerInstance::StartSustainGraph(this);
    if (!v2[840])
    {
      Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::Commit((unint64_t *)this + 172, this);
      return;
    }
    v21 = atomic_load(v2);
    if ((v21 & 1) != 0)
      return;
    if (!*((_QWORD *)this + 728))
    {
      v241 = 0uLL;
      v30 = *((_QWORD *)this + 701);
      for (j = *((_QWORD *)this + 702); v30 != j; v30 += 192)
      {
        v33 = *(_QWORD *)(v30 + 168);
        v32 = *(_QWORD *)(v30 + 176);
        while (v33 != v32)
        {
          (*(void (**)(uint8_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 736) + 16))(buf, *((_QWORD *)this + 736), v33 + 24);
          v34 = v241;
          v35 = *(_QWORD *)buf;
          if ((_QWORD)v241)
          {
            *(_QWORD *)(*(_QWORD *)buf + 256) = &off_24D5795E0;
            *(_QWORD *)(v35 + 264) = v33;
            *(_BYTE *)(v35 + 383) = 1;
            atomic_store(1u, (unsigned __int8 *)(v35 + 40));
            v36 = *((_QWORD *)this + 736);
            v239 = v35;
            v240 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v37 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v38 = __ldxr(v37);
              while (__stxr(v38 + 1, v37));
            }
            v237 = v34;
            v238 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
            if (*((_QWORD *)&v241 + 1))
            {
              v39 = (unint64_t *)(*((_QWORD *)&v241 + 1) + 8);
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v36 + 24))(v36, &v239, &v237);
            v41 = v238;
            if (v238)
            {
              v42 = (unint64_t *)&v238->__shared_owners_;
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            v44 = v240;
            if (v240)
            {
              v45 = (unint64_t *)&v240->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)buf + 256) = &off_24D579608;
            *(_QWORD *)(v35 + 264) = v33;
            *(_QWORD *)(v35 + 272) = this;
            *(_BYTE *)(v35 + 383) = 1;
            atomic_store(1u, (unsigned __int8 *)(v35 + 40));
          }
          std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100](&v241, (uint64_t *)buf);
          v47 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v48 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v33 += 96;
        }
      }
      v50 = *((_QWORD *)this + 736);
      v51 = *((_QWORD *)this + 733);
      std::string::basic_string[abi:ne180100]<0>(&__p, "-Attack-Graph");
      v52 = *(char *)(v51 + 23);
      if (v52 >= 0)
        v53 = (const std::string::value_type *)v51;
      else
        v53 = *(const std::string::value_type **)v51;
      if (v52 >= 0)
        v54 = *(unsigned __int8 *)(v51 + 23);
      else
        v54 = *(_QWORD *)(v51 + 8);
      v55 = std::string::insert(&__p, 0, v53, v54);
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      *(_QWORD *)&buf[16] = *((_QWORD *)&v55->__r_.__value_.__l + 2);
      *(_OWORD *)buf = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *))(*(_QWORD *)v50 + 16))(&v235, v50, buf);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v57 = v235;
      *(_QWORD *)(v235 + 256) = &off_24D579630;
      *(_QWORD *)(v57 + 264) = this;
      *(_BYTE *)(v57 + 383) = 1;
      atomic_store(1u, (unsigned __int8 *)(v57 + 40));
      v58 = *((_QWORD *)this + 736);
      *(_QWORD *)buf = v57;
      *(_QWORD *)&buf[8] = v236;
      if (v236)
      {
        v59 = (unint64_t *)&v236->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v241;
      if (*((_QWORD *)&v241 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v241 + 1) + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      (*(void (**)(uint64_t, uint8_t *, std::string *))(*(_QWORD *)v58 + 24))(v58, buf, &__p);
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v64 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v66 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v67 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100]((_QWORD *)this + 728, &v235);
      v69 = *((_QWORD *)this + 728);
      *(_QWORD *)(v69 + 512) = 0;
      *(_DWORD *)(v69 + 520) = -1;
      *(_QWORD *)(v69 + 384) = &off_24D579658;
      *(_QWORD *)(v69 + 392) = this;
      *(_BYTE *)(v69 + 511) = 1;
      atomic_store(1u, (unsigned __int8 *)(v69 + 40));
      v70 = v236;
      if (v236)
      {
        v71 = (unint64_t *)&v236->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
      if (*((_QWORD *)&v241 + 1))
      {
        v74 = (unint64_t *)(*((_QWORD *)&v241 + 1) + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
    }
    Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::Commit((unint64_t *)this + 444, this);
    if (v2[72])
    {
      v22 = atomic_load(v2 + 2);
      if ((v22 & 1) != 0)
        return;
      atomic_store(1u, v2 + 2);
      v23 = *((_QWORD *)this + 736);
      v24 = (std::__shared_weak_count *)*((_QWORD *)this + 729);
      v230 = *((_QWORD *)this + 728);
      v231 = v24;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v242[0] = &off_24D579000;
      v242[1] = this;
      v243 = v242;
      Phase::JobManager::ScheduleJobWithPeriod(v23, &v230, (uint64_t)v242, 0.0166666675);
      v27 = v243;
      if (v243 == v242)
      {
        v28 = 4;
        v27 = v242;
      }
      else
      {
        if (!v243)
          goto LABEL_163;
        v28 = 5;
      }
      (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_163:
      v124 = v231;
      if (v231)
      {
        v125 = (unint64_t *)&v231->__shared_owners_;
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
        }
      }
      return;
    }
    atomic_store(1u, v2);
    v76 = *((_QWORD *)this + 736);
    v77 = (std::__shared_weak_count *)*((_QWORD *)this + 729);
    v229[0] = *((_QWORD *)this + 728);
    v229[1] = (uint64_t)v77;
    if (v77)
    {
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
    }
    v80 = Phase::JobManager::RunJobAsync(v76, v229);
    if (HIDWORD(v80))
      v81 = 1;
    else
      v81 = (_DWORD)v80 == 0;
    v82 = v81;
    if (v77)
    {
      v83 = (unint64_t *)&v77->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    if ((v82 & 1) == 0)
    {
      v85 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v80)
                                                                                          + 224)));
      if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
      {
        Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)&__p, (uint64_t)this);
        v86 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 858;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v86;
        _os_log_impl(&dword_2164CC000, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: failed to start attack graph", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }

    }
  }
  else
  {
    v29 = atomic_load(v2 + 3);
    if ((v29 & 1) == 0 && *((_QWORD *)this + 153) && !*((_QWORD *)this + 726))
      Phase::Controller::SpatialModelerInstance::StartSustainGraph(this);
  }
}

void sub_21651E320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  void *v40;

  operator delete(v40);
  if (v39)
    operator delete(v39);
  _Unwind_Resume(a1);
}

_QWORD *Phase::Controller::SpatialModelerInstance::ResetAllGraphData(Phase::Controller::SpatialModelerInstance *this, Phase::Controller::SpatialModelerInstance::GraphData *a2)
{
  uint64_t v4;
  uint64_t i;

  Phase::Controller::SpatialModelerInstance::DestroyAllTempGraphData((uint64_t)this, (uint64_t)a2);
  v4 = -744;
  do
  {
    Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::ClearCommands((unint64_t *)((char *)a2 + v4 + 968));
    std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((Phase::Controller::SpatialModelerInstance::GraphData *)((char *)a2 + v4 + 792));
    v4 += 248;
  }
  while (v4);
  for (i = 0; i != 24; i += 8)
    atomic_store(0, (unint64_t *)((char *)a2 + i + 752));
  Phase::Controller::RenderGroupMgr::Reset((Phase::Controller::SpatialModelerInstance *)((char *)this + 5896));
  Phase::Controller::RenderGroupMgr::Reset((Phase::Controller::SpatialModelerInstance *)((char *)this + 4352));
  Phase::Controller::RenderGroupMgr::Reset((Phase::Controller::SpatialModelerInstance *)((char *)this + 2176));
  Phase::Controller::RenderGroupMgr::Reset((Phase::Controller::SpatialModelerInstance *)((char *)this + 4928));
  return Phase::Controller::RenderGroupMgr::Reset((Phase::Controller::SpatialModelerInstance *)((char *)this + 2752));
}

_QWORD *Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = *result;
  if (*result)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 88);
      Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(v2 + 80);
      result = (_QWORD *)MEMORY[0x2199F9D70](v2, 0x1020C40994B1BD2);
      v2 = v3;
    }
    while (v3);
  }
  *v1 = 0;
  return result;
}

void Phase::Controller::SpatialModelerInstance::GetLatestSubmixState(Phase::Controller::SpatialModelerInstance *this, uint64_t a2)
{
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  sp_mut = std::__get_sp_mut((const void *)(a2 + 248));
  std::__sp_mut::lock(sp_mut);
  v6 = *(_QWORD *)(a2 + 248);
  v5 = *(std::__shared_weak_count **)(a2 + 256);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  std::__sp_mut::unlock(sp_mut);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  if (v6)
  {
    std::shared_ptr<Phase::Controller::SpatialModelerInstance::SubmixInfo>::operator=[abi:ne180100](this, *(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    *((_DWORD *)this + 4) = *(_DWORD *)(v6 + 16);
  }
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void Phase::Controller::SpatialModelerInstance::StartSustainGraph(Phase::Controller::SpatialModelerInstance *this)
{
  Phase::Logger *v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  size_t v41;
  _BYTE *v42;
  _BYTE *v43;
  std::string::size_type v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  unint64_t v60;
  uint8x8_t v61;
  _QWORD *v62;
  _QWORD *i;
  unint64_t v64;
  char *v65;
  unint64_t *v66;
  unint64_t v67;
  float v68;
  float v69;
  _BOOL8 v70;
  unint64_t v71;
  unint64_t v72;
  size_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::string::size_type v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  const std::string::value_type *v102;
  std::string::size_type v103;
  std::string *v104;
  __int128 v105;
  void *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  void *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD **v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint8x8_t v129;
  unint64_t v130;
  float v131;
  float v132;
  unint64_t v133;
  uint64_t v134;
  _BOOL8 v135;
  size_t v136;
  unint64_t v137;
  size_t v138;
  uint8x8_t v139;
  _QWORD **v140;
  _QWORD *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  _QWORD *v149;
  std::locale::id *v150;
  double *Params;
  double v152;
  NSObject *v153;
  std::string *v154;
  double v155;
  double *v156;
  std::string::size_type v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  const std::locale::facet *v161;
  uint64_t v162;
  char *v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  NSObject *v167;
  std::logic_error *v168;
  NSObject *v169;
  _BYTE *v170;
  std::logic_error *exception;
  _QWORD *v172;
  uint64_t *v173;
  void *v174[2];
  uint64_t v175;
  _QWORD v176[3];
  uint64_t v177[3];
  __int128 v178;
  unsigned __int128 v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  std::string::size_type v182;
  std::string::size_type size;
  void *v184;
  std::__shared_weak_count *v185;
  unsigned __int8 v186;
  std::string v187;
  std::string v188;
  std::string v189;
  __int128 v190;
  _BYTE v191[24];
  _BYTE *v192;
  _BYTE v193[28];
  _BYTE __p[64];
  void *v195;
  char v196;
  _QWORD v197[22];

  v197[19] = *MEMORY[0x24BDAC8D0];
  std::mutex::lock((std::mutex *)((char *)this + 5648));
  if (*((_QWORD *)this + 726))
  {
    v169 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v2)
                                                                                         + 224)));
    if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)v193, (uint64_t)this);
      v170 = v193[23] >= 0 ? v193 : *(_BYTE **)v193;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 3025;
      *(_WORD *)&__p[18] = 2080;
      *(_QWORD *)&__p[20] = v170;
      _os_log_impl(&dword_2164CC000, v169, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [false == mSustainJobs.empty() is true]: \"%s: Attempting to start a running Spatial Modeler!\"", __p, 0x1Cu);
      if ((v193[23] & 0x80000000) != 0)
        operator delete(*(void **)v193);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s: Attempting to start a running Spatial Modeler!");
  }
  v3 = *((_QWORD *)this + 733);
  v4 = *(_DWORD *)(v3 + 120);
  if (v4)
  {
    if (v4 == 1 && *((_DWORD *)this + 1400) == 3)
    {
      v5 = 0;
      v173 = (uint64_t *)((char *)this + 5784);
      v172 = (_QWORD *)((char *)this + 5800);
      while (1)
      {
        v190 = 0uLL;
        v6 = *((_QWORD *)this + 733);
        std::string::basic_string[abi:ne180100]<0>(&v187, "-Sustain-");
        v7 = *(char *)(v6 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)v6;
        else
          v8 = *(const std::string::value_type **)v6;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(v6 + 23);
        else
          v9 = *(_QWORD *)(v6 + 8);
        v10 = std::string::insert(&v187, 0, v8, v9);
        v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        v188.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        if (v5 >= 3)
        {
          v167 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v10) + 224));
          if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315650;
            *(_QWORD *)&__p[4] = "CvmSpatialModelerInstance.mm";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 2820;
            *(_WORD *)&__p[18] = 2048;
            *(_QWORD *)&__p[20] = v5;
            _os_log_impl(&dword_2164CC000, v167, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Invalid stage index %lu\"", __p, 0x1Cu);
          }
          v168 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v168, "Invalid stage index %lu");
          v168->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        }
        std::string::basic_string[abi:ne180100]<0>(&v184, off_24D579700[v5]);
        if ((v186 & 0x80u) == 0)
          v12 = (const std::string::value_type *)&v184;
        else
          v12 = (const std::string::value_type *)v184;
        if ((v186 & 0x80u) == 0)
          v13 = v186;
        else
          v13 = (std::string::size_type)v185;
        v14 = std::string::append(&v188, v12, v13);
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v189.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "-");
        if (__p[23] >= 0)
          v16 = __p;
        else
          v16 = *(const std::string::value_type **)__p;
        if (__p[23] >= 0)
          v17 = __p[23];
        else
          v17 = *(_QWORD *)&__p[8];
        v18 = std::string::append(&v189, v16, v17);
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        *(_QWORD *)&v193[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
        *(_OWORD *)v193 = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v189.__r_.__value_.__l.__data_);
        if ((char)v186 < 0)
          operator delete(v184);
        if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v188.__r_.__value_.__l.__data_);
        if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v187.__r_.__value_.__l.__data_);
        v20 = *((_QWORD *)this + 4 * v5 + 688);
        v21 = *((_QWORD *)this + 4 * v5 + 689);
        while (v20 != v21)
        {
          v22 = *(_QWORD *)(v20 + 168);
          v6 = *(_QWORD *)(v20 + 176);
          while (v22 != v6)
          {
            v23 = *((_QWORD *)this + 736);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v193, (const void **)(v22 + 24), (uint64_t)__p);
            (*(void (**)(std::string *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v23 + 16))(&v189, v23, __p);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            v24 = v190;
            v25 = v189.__r_.__value_.__r.__words[0];
            if ((_QWORD)v190)
            {
              *(_QWORD *)(v189.__r_.__value_.__r.__words[0] + 256) = &off_24D5794F0;
              *(_QWORD *)(v25 + 264) = v22;
              *(_BYTE *)(v25 + 383) = 1;
              atomic_store(1u, (unsigned __int8 *)(v25 + 40));
              v26 = *((_QWORD *)this + 736);
              v182 = v25;
              size = v189.__r_.__value_.__l.__size_;
              if (v189.__r_.__value_.__l.__size_)
              {
                v27 = (unint64_t *)(v189.__r_.__value_.__l.__size_ + 8);
                do
                  v28 = __ldxr(v27);
                while (__stxr(v28 + 1, v27));
              }
              v180 = v24;
              v181 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
              if (*((_QWORD *)&v190 + 1))
              {
                v29 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
                do
                  v30 = __ldxr(v29);
                while (__stxr(v30 + 1, v29));
              }
              (*(void (**)(uint64_t, std::string::size_type *, uint64_t *))(*(_QWORD *)v26 + 24))(v26, &v182, &v180);
              v31 = v181;
              if (v181)
              {
                p_shared_owners = (unint64_t *)&v181->__shared_owners_;
                do
                  v33 = __ldaxr(p_shared_owners);
                while (__stlxr(v33 - 1, p_shared_owners));
                if (!v33)
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
              }
              v34 = (std::__shared_weak_count *)size;
              if (size)
              {
                v35 = (unint64_t *)(size + 8);
                do
                  v36 = __ldaxr(v35);
                while (__stlxr(v36 - 1, v35));
                if (!v36)
                {
                  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                  std::__shared_weak_count::__release_weak(v34);
                }
              }
            }
            else
            {
              *(_QWORD *)(v189.__r_.__value_.__r.__words[0] + 256) = &off_24D579518;
              *(_QWORD *)(v25 + 264) = v22;
              *(_QWORD *)(v25 + 272) = this;
              *(_BYTE *)(v25 + 383) = 1;
              atomic_store(1u, (unsigned __int8 *)(v25 + 40));
            }
            std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100](&v190, (uint64_t *)&v189);
            v37 = (std::__shared_weak_count *)v189.__r_.__value_.__l.__size_;
            if (v189.__r_.__value_.__l.__size_)
            {
              v38 = (unint64_t *)(v189.__r_.__value_.__l.__size_ + 8);
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            v22 += 96;
          }
          v20 += 192;
        }
        if (v5 == 2)
        {
          v40 = *((_QWORD *)this + 736);
          if (v193[23] >= 0)
            v41 = v193[23];
          else
            v41 = *(_QWORD *)&v193[8];
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v41 + 39);
          if (__p[23] >= 0)
            v42 = __p;
          else
            v42 = *(_BYTE **)__p;
          if (v41)
          {
            if (v193[23] >= 0)
              v43 = v193;
            else
              v43 = *(_BYTE **)v193;
            memmove(v42, v43, v41);
          }
          strcpy(&v42[v41], "spatial+build-IRs+prepare-filter-frames");
          (*(void (**)(std::string *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v40 + 16))(&v189, v40, __p);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v44 = v189.__r_.__value_.__r.__words[0];
          *(_QWORD *)(v189.__r_.__value_.__r.__words[0] + 256) = &off_24D579540;
          *(_QWORD *)(v44 + 264) = this;
          *(_BYTE *)(v44 + 383) = 1;
          atomic_store(1u, (unsigned __int8 *)(v44 + 40));
          v45 = *((_QWORD *)this + 736);
          v179 = __PAIR128__(v189.__r_.__value_.__l.__size_, v44);
          if (v189.__r_.__value_.__l.__size_)
          {
            v46 = (unint64_t *)(v189.__r_.__value_.__l.__size_ + 8);
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          v178 = v190;
          if (*((_QWORD *)&v190 + 1))
          {
            v48 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
          }
          (*(void (**)(uint64_t, unsigned __int128 *, __int128 *))(*(_QWORD *)v45 + 24))(v45, &v179, &v178);
          v50 = (std::__shared_weak_count *)*((_QWORD *)&v178 + 1);
          if (*((_QWORD *)&v178 + 1))
          {
            v51 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          v53 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
          if (*((_QWORD *)&v179 + 1))
          {
            v54 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100](&v190, (uint64_t *)&v189);
          v56 = (std::__shared_weak_count *)v189.__r_.__value_.__l.__size_;
          if (v189.__r_.__value_.__l.__size_)
          {
            v57 = (unint64_t *)(v189.__r_.__value_.__l.__size_ + 8);
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
        }
        v59 = v190;
        v60 = *((_QWORD *)this + 724);
        if (v60)
        {
          v61 = (uint8x8_t)vcnt_s8((int8x8_t)v60);
          v61.i16[0] = vaddlv_u8(v61);
          if (v61.u32[0] > 1uLL)
          {
            v6 = v5;
            if (v60 <= v5)
              v6 = v5 % v60;
          }
          else
          {
            v6 = (v60 + 0x7FFFFFFFFFFFFFFFLL) & v5;
          }
          v62 = *(_QWORD **)(*v173 + 8 * v6);
          if (v62)
          {
            for (i = (_QWORD *)*v62; i; i = (_QWORD *)*i)
            {
              v64 = i[1];
              if (v64 == v5)
              {
                if (i[2] == v5)
                  goto LABEL_142;
              }
              else
              {
                if (v61.u32[0] > 1uLL)
                {
                  if (v64 >= v60)
                    v64 %= v60;
                }
                else
                {
                  v64 &= v60 - 1;
                }
                if (v64 != v6)
                  break;
              }
            }
          }
        }
        v65 = (char *)operator new(0x28uLL);
        *(_QWORD *)__p = v65;
        *(_QWORD *)&__p[8] = (char *)this + 5800;
        *(_QWORD *)v65 = 0;
        *((_QWORD *)v65 + 1) = v5;
        *((_QWORD *)v65 + 2) = v5;
        *(_OWORD *)(v65 + 24) = v59;
        if (*((_QWORD *)&v59 + 1))
        {
          v66 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
        __p[16] = 1;
        v68 = (float)(unint64_t)(*((_QWORD *)this + 726) + 1);
        v69 = *((float *)this + 1454);
        if (!v60 || (float)(v69 * (float)v60) < v68)
        {
          v70 = (v60 & (v60 - 1)) != 0;
          if (v60 < 3)
            v70 = 1;
          v71 = v70 | (2 * v60);
          v72 = vcvtps_u32_f32(v68 / v69);
          if (v71 <= v72)
            v73 = v72;
          else
            v73 = v71;
          std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v173, v73);
          v60 = *((_QWORD *)this + 724);
          if ((v60 & (v60 - 1)) != 0)
          {
            if (v60 <= v5)
              v6 = v5 % v60;
            else
              v6 = v5;
          }
          else
          {
            v6 = (v60 + 0x7FFFFFFFFFFFFFFFLL) & v5;
          }
        }
        v74 = *v173;
        v75 = *(_QWORD **)(*v173 + 8 * v6);
        if (v75)
        {
          *(_QWORD *)v65 = *v75;
        }
        else
        {
          *(_QWORD *)v65 = *v172;
          *v172 = v65;
          *(_QWORD *)(v74 + 8 * v6) = v172;
          if (!*(_QWORD *)v65)
            goto LABEL_141;
          v76 = *(_QWORD *)(*(_QWORD *)v65 + 8);
          if ((v60 & (v60 - 1)) != 0)
          {
            if (v76 >= v60)
              v76 %= v60;
          }
          else
          {
            v76 &= v60 - 1;
          }
          v75 = (_QWORD *)(*v173 + 8 * v76);
        }
        *v75 = v65;
LABEL_141:
        *(_QWORD *)__p = 0;
        ++*((_QWORD *)this + 726);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
LABEL_142:
        if ((v193[23] & 0x80000000) != 0)
          operator delete(*(void **)v193);
        v77 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
        if (*((_QWORD *)&v190 + 1))
        {
          v78 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (++v5 == 3)
          goto LABEL_257;
      }
    }
LABEL_277:
    std::terminate();
  }
  if (*((_DWORD *)this + 1400) != 1)
    goto LABEL_277;
  *(_OWORD *)&v189.__r_.__value_.__l.__data_ = 0uLL;
  v80 = *((_QWORD *)this + 688);
  v81 = *((_QWORD *)this + 689);
  if (v80 != v81)
  {
    do
    {
      v82 = *(_QWORD *)(v80 + 168);
      v83 = *(_QWORD *)(v80 + 176);
      while (v82 != v83)
      {
        (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 736) + 16))(__p, *((_QWORD *)this + 736), v82 + 24);
        v84 = v189.__r_.__value_.__r.__words[0];
        v85 = *(_QWORD *)__p;
        if (v189.__r_.__value_.__r.__words[0])
        {
          *(_QWORD *)(*(_QWORD *)__p + 256) = &off_24D579568;
          *(_QWORD *)(v85 + 264) = v82;
          *(_BYTE *)(v85 + 383) = 1;
          atomic_store(1u, (unsigned __int8 *)(v85 + 40));
          v86 = *((_QWORD *)this + 736);
          v188.__r_.__value_.__r.__words[0] = v85;
          v188.__r_.__value_.__l.__size_ = *(_QWORD *)&__p[8];
          if (*(_QWORD *)&__p[8])
          {
            v87 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
            do
              v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
          }
          v187.__r_.__value_.__r.__words[0] = v84;
          v187.__r_.__value_.__l.__size_ = v189.__r_.__value_.__l.__size_;
          if (v189.__r_.__value_.__l.__size_)
          {
            v89 = (unint64_t *)(v189.__r_.__value_.__l.__size_ + 8);
            do
              v90 = __ldxr(v89);
            while (__stxr(v90 + 1, v89));
          }
          (*(void (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)v86 + 24))(v86, &v188, &v187);
          v91 = (std::__shared_weak_count *)v187.__r_.__value_.__l.__size_;
          if (v187.__r_.__value_.__l.__size_)
          {
            v92 = (unint64_t *)(v187.__r_.__value_.__l.__size_ + 8);
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          v94 = (std::__shared_weak_count *)v188.__r_.__value_.__l.__size_;
          if (v188.__r_.__value_.__l.__size_)
          {
            v95 = (unint64_t *)(v188.__r_.__value_.__l.__size_ + 8);
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)__p + 256) = &off_24D579590;
          *(_QWORD *)(v85 + 264) = v82;
          *(_QWORD *)(v85 + 272) = this;
          *(_BYTE *)(v85 + 383) = 1;
          atomic_store(1u, (unsigned __int8 *)(v85 + 40));
        }
        std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100](&v189, (uint64_t *)__p);
        v97 = *(std::__shared_weak_count **)&__p[8];
        if (*(_QWORD *)&__p[8])
        {
          v98 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
        v82 += 96;
      }
      v80 += 192;
    }
    while (v80 != v81);
    v3 = *((_QWORD *)this + 733);
  }
  v100 = *((_QWORD *)this + 736);
  std::string::basic_string[abi:ne180100]<0>(v193, "-Sustain-Graph-Combined");
  v101 = *(char *)(v3 + 23);
  if (v101 >= 0)
    v102 = (const std::string::value_type *)v3;
  else
    v102 = *(const std::string::value_type **)v3;
  if (v101 >= 0)
    v103 = *(unsigned __int8 *)(v3 + 23);
  else
    v103 = *(_QWORD *)(v3 + 8);
  v104 = std::string::insert((std::string *)v193, 0, v102, v103);
  v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v104->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v105;
  v104->__r_.__value_.__l.__size_ = 0;
  v104->__r_.__value_.__r.__words[2] = 0;
  v104->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v100 + 16))(&v184, v100, __p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v193[23] & 0x80000000) != 0)
    operator delete(*(void **)v193);
  v106 = v184;
  *((_QWORD *)v184 + 32) = &off_24D5795B8;
  *((_QWORD *)v106 + 33) = this;
  *((_BYTE *)v106 + 383) = 1;
  atomic_store(1u, (unsigned __int8 *)v106 + 40);
  v107 = *((_QWORD *)this + 736);
  *(_OWORD *)v193 = __PAIR128__((unint64_t)v185, (unint64_t)v106);
  if (v185)
  {
    v108 = (unint64_t *)&v185->__shared_owners_;
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
  }
  v190 = *(_OWORD *)&v189.__r_.__value_.__l.__data_;
  if (v189.__r_.__value_.__l.__size_)
  {
    v110 = (unint64_t *)(v189.__r_.__value_.__l.__size_ + 8);
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
  }
  (*(void (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v107 + 24))(v107, v193, &v190);
  v112 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
  if (*((_QWORD *)&v190 + 1))
  {
    v113 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = *(std::__shared_weak_count **)&v193[8];
  if (*(_QWORD *)&v193[8])
  {
    v116 = (unint64_t *)(*(_QWORD *)&v193[8] + 8);
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v119 = v184;
  v118 = v185;
  v120 = operator new(0x28uLL);
  v121 = v120;
  v122 = (_QWORD *)((char *)this + 5800);
  *(_QWORD *)__p = v120;
  *(_QWORD *)&__p[8] = (char *)this + 5800;
  v123 = (_QWORD **)((char *)this + 5784);
  *v120 = 0;
  v120[1] = 0;
  v120[2] = 0;
  v120[3] = v119;
  v120[4] = v118;
  if (v118)
  {
    v124 = (unint64_t *)&v118->__shared_owners_;
    do
      v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
  }
  __p[16] = 1;
  v120[1] = 0;
  v126 = *((_QWORD *)this + 724);
  if (v126)
  {
    v127 = (_QWORD *)**v123;
    if (v127)
    {
      v128 = (_QWORD *)*v127;
      if (v128)
      {
        v129 = (uint8x8_t)vcnt_s8((int8x8_t)v126);
        v129.i16[0] = vaddlv_u8(v129);
        do
        {
          v130 = v128[1];
          if (v130)
          {
            if (v129.u32[0] > 1uLL)
            {
              if (v130 < v126 || v130 % v126)
                break;
            }
            else if ((v130 & (v126 - 1)) != 0)
            {
              break;
            }
          }
          else if (!v128[2])
          {
            goto LABEL_247;
          }
          v128 = (_QWORD *)*v128;
        }
        while (v128);
      }
    }
  }
  v131 = (float)(unint64_t)(*((_QWORD *)this + 726) + 1);
  v132 = *((float *)this + 1454);
  if (v126 && (float)(v132 * (float)v126) >= v131)
  {
    v133 = 0;
  }
  else
  {
    v134 = 2 * v126;
    v135 = v126 < 3 || (v126 & (v126 - 1)) != 0;
    v136 = v135 | v134;
    v137 = vcvtps_u32_f32(v131 / v132);
    if (v136 <= v137)
      v138 = v137;
    else
      v138 = v136;
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)this + 5784, v138);
    v126 = *((_QWORD *)this + 724);
    v133 = v121[1];
  }
  v139 = (uint8x8_t)vcnt_s8((int8x8_t)v126);
  v139.i16[0] = vaddlv_u8(v139);
  if (v139.u32[0] > 1uLL)
  {
    if (v133 >= v126)
      v133 %= v126;
  }
  else
  {
    v133 &= v126 - 1;
  }
  v140 = (_QWORD **)*v123;
  v141 = (_QWORD *)(*v123)[v133];
  if (v141)
  {
    *v121 = *v141;
LABEL_245:
    *v141 = v121;
    goto LABEL_246;
  }
  *v121 = *v122;
  *v122 = v121;
  v140[v133] = v122;
  if (*v121)
  {
    v142 = *(_QWORD *)(*v121 + 8);
    if (v139.u32[0] > 1uLL)
    {
      if (v142 >= v126)
        v142 %= v126;
    }
    else
    {
      v142 &= v126 - 1;
    }
    v141 = &(*v123)[v142];
    goto LABEL_245;
  }
LABEL_246:
  ++*((_QWORD *)this + 726);
  *(_QWORD *)__p = 0;
LABEL_247:
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
  v143 = v185;
  if (v185)
  {
    v144 = (unint64_t *)&v185->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = (std::__shared_weak_count *)v189.__r_.__value_.__l.__size_;
  if (v189.__r_.__value_.__l.__size_)
  {
    v147 = (unint64_t *)(v189.__r_.__value_.__l.__size_ + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
LABEL_257:
  if (!*((_QWORD *)this + 726))
    goto LABEL_277;
  v189.__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
  *(_OWORD *)&v189.__r_.__value_.__r.__words[1] = (unint64_t)&v189;
  v188.__r_.__value_.__r.__words[0] = (std::string::size_type)&v188;
  *(_OWORD *)&v188.__r_.__value_.__r.__words[1] = (unint64_t)&v188;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
  v149 = (_QWORD *)((char *)this + 5800);
  v150 = (std::locale::id *)MEMORY[0x24BEDB350];
  while (1)
  {
    v149 = (_QWORD *)*v149;
    if (!v149)
      break;
    Params = (double *)Phase::Controller::SpatialModelerInstance::GetParams(this, 2, v149[2]);
    v152 = Params[2];
    if (v152 == 0.0)
    {
      v153 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)Params)
                                                                                           + 224)));
      if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
      {
        Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)&v187, (uint64_t)this);
        v154 = &v187;
        if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v154 = (std::string *)v187.__r_.__value_.__r.__words[0];
        *(_DWORD *)v193 = 136315650;
        *(_QWORD *)&v193[4] = "CvmSpatialModelerInstance.mm";
        *(_WORD *)&v193[12] = 1024;
        *(_DWORD *)&v193[14] = 3047;
        *(_WORD *)&v193[18] = 2080;
        *(_QWORD *)&v193[20] = v154;
        _os_log_impl(&dword_2164CC000, v153, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s: Load Balancer parameters were not set.  Using default update rate 25Hz", v193, 0x1Cu);
        if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v187.__r_.__value_.__l.__data_);
      }

      v155 = 0.04;
    }
    else
    {
      v155 = 1.0 / v152;
    }
    std::list<std::shared_ptr<Phase::Job>>::push_back((uint64_t *)&v189, v149 + 3);
    v156 = (double *)operator new(0x18uLL);
    v156[2] = v155;
    v157 = v188.__r_.__value_.__r.__words[0];
    *v156 = *(double *)&v188.__r_.__value_.__l.__data_;
    *((_QWORD *)v156 + 1) = &v188;
    *(_QWORD *)(v157 + 8) = v156;
    v188.__r_.__value_.__r.__words[0] = (std::string::size_type)v156;
    ++v188.__r_.__value_.__r.__words[2];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"<", 1);
    v158 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)", ", 2);
    v159 = (_QWORD *)std::ostream::operator<<();
    v160 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)" Hz>", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v160 + *(_QWORD *)(*v160 - 24)));
    v161 = std::locale::use_facet((const std::locale *)v193, v150);
    ((void (*)(const std::locale::facet *, uint64_t))v161->__vftable[2].~facet_0)(v161, 10);
    std::locale::~locale((std::locale *)v193);
    std::ostream::put();
    std::ostream::flush();
  }
  v162 = *((_QWORD *)this + 736);
  std::list<std::shared_ptr<Phase::Job>>::list(v177, (uint64_t)&v189);
  std::list<double>::list(v176, (uint64_t)&v188);
  std::stringbuf::str();
  v192 = 0;
  v163 = (char *)operator new(0x28uLL);
  *(_QWORD *)v163 = off_24D579680;
  *(_OWORD *)(v163 + 8) = *(_OWORD *)v174;
  *((_QWORD *)v163 + 3) = v175;
  *((_QWORD *)v163 + 4) = this;
  v192 = v163;
  (*(void (**)(uint64_t, uint64_t *, _QWORD *, _BYTE *))(*(_QWORD *)v162 + 56))(v162, v177, v176, v191);
  v164 = v192;
  if (v192 == v191)
  {
    v165 = 4;
    v164 = v191;
  }
  else
  {
    if (!v192)
      goto LABEL_274;
    v165 = 5;
  }
  (*(void (**)(void))(*v164 + 8 * v165))();
LABEL_274:
  std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear(v176);
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v177);
  *(_QWORD *)__p = *MEMORY[0x24BEDB7F0];
  v166 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&__p[16] = v166;
  *(_QWORD *)&__p[24] = MEMORY[0x24BEDB848] + 16;
  if (v196 < 0)
    operator delete(v195);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199F9CD4](v197);
  std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear(&v188);
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear((uint64_t *)&v189);
}

void sub_21651F880(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialModelerInstance::RegisterSubmix(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v6;
  _QWORD *v10;
  Phase::Logger *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  Phase::Logger *v15;
  uint64_t *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  Phase::Logger *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  Phase::Logger *UniqueSlot;
  Phase::Logger *v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t i;
  uint64_t *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t *v46;
  uint64_t *inserted;
  _OWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint8x8_t v61;
  uint64_t **v62;
  uint64_t *j;
  unint64_t v64;
  uint64_t v65;
  __int128 v66;
  float v67;
  float v68;
  _BOOL8 v69;
  unint64_t v70;
  unint64_t v71;
  size_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  int v76;
  double v77;
  double v78;
  double v79;
  _OWORD *v80;
  __int128 v81;
  uint64_t v82;
  NSObject *v83;
  int v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  void **v89;
  NSObject *v90;
  std::logic_error *v91;
  NSObject *v92;
  void **v93;
  std::logic_error *exception;
  NSObject *v95;
  void **v96;
  uint64_t v97;
  std::logic_error *v98;
  NSObject *v99;
  void (__cdecl *v100)(std::logic_error *__hidden);
  struct type_info *v101;
  NSObject *v102;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[24];
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  void *__p[2];
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint8_t buf[72];
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  if (!(a2 | a3))
  {
    v92 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1)
                                                                                        + 224)));
    if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, a1);
      v93 = v115 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 905;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v93;
      _os_log_impl(&dword_2164CC000, v92, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [inSubmixId == kInvalidSubmixId is true]: \"%s: Invalid SubmixId!\"", buf, 0x1Cu);
      if (v115 < 0)
        operator delete(__p[0]);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "%s: Invalid SubmixId!");
  }
  v10 = (_QWORD *)(a1 + 8);
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  v11 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 8), buf);
  if (v11)
  {
    v95 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11)
                                                                                        + 224)));
    if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, a1);
      v96 = v115 >= 0 ? __p : (void **)__p[0];
      v97 = *(_QWORD *)(*(_QWORD *)(a1 + 5864) + 24);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 912;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v96;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = a2;
      *(_WORD *)&buf[38] = 2048;
      *(_QWORD *)&buf[40] = v97;
      _os_log_impl(&dword_2164CC000, v95, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (IdAlreadyExists) [IsRegistered(inSubmixId) is true]: \"%s: SubmixId %llu is already registered for spatial modeler %llu !\"", buf, 0x30u);
      if (v115 < 0)
        operator delete(__p[0]);
    }

    v98 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(v98, "%s: SubmixId %llu is already registered for spatial modeler %llu !");
  }
  v12 = (_QWORD *)(*(_QWORD *)(a1 + 6472) + 120);
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  v13 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v12, buf);
  if (v13)
    v14 = v13[4];
  else
    v14 = 0;
  *(_QWORD *)&v107 = a2;
  *((_QWORD *)&v107 + 1) = a3;
  *(_QWORD *)&v108 = 0;
  BYTE8(v108) = 0;
  *(_QWORD *)&v109 = v14;
  *((_QWORD *)&v109 + 1) = a4;
  *(_QWORD *)v110 = a5;
  __p[0] = (void *)a2;
  *(_OWORD *)&v110[8] = 0u;
  v111 = 0u;
  v112 = 0u;
  v113 = 1065353216;
  __p[1] = (void *)a3;
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  v15 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v10, buf);
  if (v15)
  {
    v99 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15) + 224));
    if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 63;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = a2;
      _os_log_impl(&dword_2164CC000, v99, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [true == Contains(inSubmixId) is true]: \"SubmixId %llu already exists in SubmixSlotMap::Insert\"", buf, 0x1Cu);
    }
    v91 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v91, "SubmixId %llu already exists in SubmixSlotMap::Insert");
    v91->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v100 = (void (__cdecl *)(std::logic_error *__hidden))MEMORY[0x24BEDAB88];
    goto LABEL_126;
  }
  v16 = (uint64_t *)(a1 + 48);
  v17 = (unsigned int *)(a1 + 68);
  v18 = atomic_load((unsigned int *)(a1 + 68));
  if (v18 != -1)
  {
    *(_QWORD *)buf = a1 + 80;
    buf[8] = 1;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 80));
    do
    {
      v19 = v18;
      v20 = *v16;
      v21 = *(_DWORD *)(*v16 + 24 * v18 + 16);
      while (1)
      {
        v18 = __ldaxr(v17);
        if (v18 != v19)
          break;
        if (!__stlxr(v21, v17))
        {
          Phase::Handle64::Set((Phase::Logger *)&v117, v19, *(unsigned int *)(v20 + 24 * v19 + 20));
          v24 = (Phase::Logger *)std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
          v116 = v117;
          if (v117)
            goto LABEL_19;
          v102 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v24) + 224));
          if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "CvmSubmixSlotMapImpl.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 68;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = a2;
            _os_log_impl(&dword_2164CC000, v102, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [SubmixHandle::kInvalidHandle == submixHandle is true]: \"SubmixSlotMap::Insert unable to allocate new handle SubmixId %llu\"", buf, 0x1Cu);
          }
          v91 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v91, "SubmixSlotMap::Insert unable to allocate new handle SubmixId %llu");
LABEL_125:
          v91->__vftable = (std::logic_error_vtbl *)&off_24D578278;
          v100 = Phase::Controller::InvalidId::~InvalidId;
LABEL_126:
          __cxa_throw(v91, v101, (void (*)(void *))v100);
        }
      }
      __clrex();
    }
    while (v18 != -1);
    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
  }
  v22 = (unsigned int *)(a1 + 72);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  v116 = v23 | 0x100000000;
LABEL_19:
  v25 = atomic_load((unsigned int *)(a1 + 72));
  if (*(_DWORD *)(a1 + 64) < v25)
  {
    if (v25 >= 0x40)
      v26 = v25 + (v25 >> 1);
    else
      v26 = 64;
    Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Resize((uint64_t *)(a1 + 48), v26);
  }
  v27 = v116;
  UniqueSlot = (Phase::Logger *)Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::GetUniqueSlot(a1 + 48, v116);
  v29 = UniqueSlot;
  if (!UniqueSlot)
  {
    v34 = 0;
    if (v116)
      goto LABEL_31;
LABEL_101:
    v90 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(UniqueSlot) + 224));
    if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 76;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = 0;
      *(_WORD *)&buf[28] = 2048;
      *(void **)&buf[30] = __p[0];
      _os_log_impl(&dword_2164CC000, v90, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [SubmixHandle::kInvalidHandle == submixHandle is true]: \"SubmixSlotMap::Insert couldn't find SubmixHandle %llu for SubmixId %llu\"", buf, 0x26u);
    }
    v91 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v91, "SubmixSlotMap::Insert couldn't find SubmixHandle %llu for SubmixId %llu");
    goto LABEL_125;
  }
  v30 = (char *)operator new(0x88uLL);
  *((_QWORD *)v30 + 1) = 0;
  *((_QWORD *)v30 + 2) = 0;
  *(_QWORD *)v30 = &off_24D579048;
  *(_OWORD *)(v30 + 120) = 0u;
  *(_OWORD *)(v30 + 40) = 0u;
  *(_OWORD *)(v30 + 56) = 0u;
  *(_OWORD *)(v30 + 72) = 0u;
  *(_OWORD *)(v30 + 88) = 0u;
  *(_OWORD *)(v30 + 104) = 0u;
  *(_OWORD *)(v30 + 24) = 0u;
  *((_DWORD *)v30 + 32) = 1065353216;
  *(_QWORD *)buf = v30 + 24;
  *(_QWORD *)&buf[8] = v30;
  UniqueSlot = (Phase::Logger *)std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100]((uint64_t)v29, (__int128 *)buf);
  v31 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v32 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = *(_QWORD *)v29;
  if (!v27)
    goto LABEL_101;
LABEL_31:
  *(_OWORD *)v34 = v107;
  v35 = v108;
  v36 = v109;
  v37 = *(_OWORD *)v110;
  *(_QWORD *)(v34 + 64) = *(_QWORD *)&v110[16];
  *(_OWORD *)(v34 + 32) = v36;
  *(_OWORD *)(v34 + 48) = v37;
  *(_OWORD *)(v34 + 16) = v35;
  if ((__int128 *)v34 != &v107)
  {
    *(_DWORD *)(v34 + 104) = v113;
    v38 = (uint64_t *)v112;
    v39 = *(_QWORD *)(v34 + 80);
    if (!v39)
      goto LABEL_40;
    for (i = 0; i != v39; *(_QWORD *)(*(_QWORD *)(v34 + 72) + 8 * i++) = 0)
      ;
    v41 = *(uint64_t **)(v34 + 88);
    *(_QWORD *)(v34 + 88) = 0;
    *(_QWORD *)(v34 + 96) = 0;
    if (v41)
    {
      while (v38)
      {
        v42 = *((unsigned int *)v38 + 4);
        *((_DWORD *)v41 + 4) = v42;
        v43 = *(_OWORD *)(v38 + 3);
        v44 = *(_OWORD *)(v38 + 5);
        v45 = *(_OWORD *)(v38 + 7);
        v41[9] = v38[9];
        *(_OWORD *)(v41 + 7) = v45;
        *(_OWORD *)(v41 + 5) = v44;
        *(_OWORD *)(v41 + 3) = v43;
        v46 = (uint64_t *)*v41;
        v41[1] = v42;
        inserted = std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__node_insert_multi_prepare(v34 + 72, v42, (_DWORD *)v41 + 4);
        std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform((_QWORD *)(v34 + 72), v41, inserted);
        v38 = (uint64_t *)*v38;
        v41 = v46;
        if (!v46)
          goto LABEL_40;
      }
      do
      {
        v85 = (uint64_t *)*v41;
        operator delete(v41);
        v41 = v85;
      }
      while (v85);
    }
    else
    {
LABEL_40:
      while (v38)
      {
        v48 = operator new(0x50uLL);
        *(_QWORD *)v48 = 0;
        v49 = *((_OWORD *)v38 + 4);
        v51 = *((_OWORD *)v38 + 1);
        v50 = *((_OWORD *)v38 + 2);
        v48[3] = *((_OWORD *)v38 + 3);
        v48[4] = v49;
        v48[1] = v51;
        v48[2] = v50;
        v52 = *((unsigned int *)v48 + 4);
        *((_QWORD *)v48 + 1) = v52;
        v53 = std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__node_insert_multi_prepare(v34 + 72, v52, (_DWORD *)v48 + 4);
        std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform((_QWORD *)(v34 + 72), v48, v53);
        v38 = (uint64_t *)*v38;
      }
    }
  }
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__emplace_unique_key_args<Phase::UniqueObjectId,Phase::UniqueObjectId&,Phase::Handle64&>((uint64_t)v10, __p, __p, &v116);
  v54 = v116;
  v55 = std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v111);
  *(_QWORD *)(v34 + 16) = v54;
  v56 = *a6;
  v106 = a6[1];
  if (*a6 != v106)
  {
    v57 = (uint64_t *)(v34 + 72);
    v58 = (uint64_t *)(v34 + 88);
    while (1)
    {
      v59 = *(unsigned int *)(v56 + 24);
      memset(&buf[4], 0, 56);
      v60 = *(_QWORD *)(v34 + 80);
      if (v60)
      {
        v61 = (uint8x8_t)vcnt_s8((int8x8_t)v60);
        v61.i16[0] = vaddlv_u8(v61);
        if (v61.u32[0] > 1uLL)
        {
          v6 = v59;
          if (v60 <= v59)
            v6 = v59 % v60;
        }
        else
        {
          v6 = ((_DWORD)v60 - 1) & v59;
        }
        v62 = *(uint64_t ***)(*v57 + 8 * v6);
        if (v62)
        {
          for (j = *v62; j; j = (uint64_t *)*j)
          {
            v64 = j[1];
            if (v64 == v59)
            {
              if (*((_DWORD *)j + 4) == (_DWORD)v59)
              {
                v83 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v55)
                                                                 + 224));
                v55 = os_log_type_enabled(v83, OS_LOG_TYPE_ERROR);
                if ((_DWORD)v55)
                {
                  v84 = *(_DWORD *)(v56 + 24);
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "CvmSpatialModelerOptionalProperties.hpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 65;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = v84;
                  _os_log_impl(&dword_2164CC000, v83, OS_LOG_TYPE_ERROR, "%25s:%-5d Unexpected duplicate OptionalPropertyDescription entry for UID %d", buf, 0x18u);
                }
                goto LABEL_87;
              }
            }
            else
            {
              if (v61.u32[0] > 1uLL)
              {
                if (v64 >= v60)
                  v64 %= v60;
              }
              else
              {
                v64 &= v60 - 1;
              }
              if (v64 != v6)
                break;
            }
          }
        }
      }
      v55 = (uint64_t)operator new(0x50uLL);
      v65 = v55;
      *(_QWORD *)v55 = 0;
      *(_QWORD *)(v55 + 8) = v59;
      *(_DWORD *)(v55 + 16) = v59;
      v66 = *(_OWORD *)&buf[16];
      *(_OWORD *)(v55 + 20) = *(_OWORD *)buf;
      *(_OWORD *)(v55 + 36) = v66;
      *(_OWORD *)(v55 + 52) = *(_OWORD *)&buf[32];
      *(_OWORD *)(v55 + 64) = *(_OWORD *)&buf[44];
      v67 = (float)(unint64_t)(*(_QWORD *)(v34 + 96) + 1);
      v68 = *(float *)(v34 + 104);
      if ((((float)(v68 * (float)v60) >= v67) & ~(v60 == 0)) == 0)
      {
        v69 = (v60 & (v60 - 1)) != 0;
        if (v60 < 3)
          v69 = 1;
        v70 = v69 | (2 * v60);
        v71 = vcvtps_u32_f32(v67 / v68);
        if (v70 <= v71)
          v72 = v71;
        else
          v72 = v70;
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(v34 + 72, v72);
        v60 = *(_QWORD *)(v34 + 80);
        if ((v60 & (v60 - 1)) != 0)
        {
          if (v60 <= v59)
            v6 = v59 % v60;
          else
            v6 = v59;
        }
        else
        {
          v6 = ((_DWORD)v60 - 1) & v59;
        }
      }
      v73 = *v57;
      v74 = *(uint64_t **)(*v57 + 8 * v6);
      if (v74)
        break;
      *(_QWORD *)v65 = *v58;
      *v58 = v65;
      *(_QWORD *)(v73 + 8 * v6) = v58;
      if (*(_QWORD *)v65)
      {
        v75 = *(_QWORD *)(*(_QWORD *)v65 + 8);
        if ((v60 & (v60 - 1)) != 0)
        {
          if (v75 >= v60)
            v75 %= v60;
        }
        else
        {
          v75 &= v60 - 1;
        }
        v74 = (uint64_t *)(*v57 + 8 * v75);
        goto LABEL_78;
      }
LABEL_79:
      ++*(_QWORD *)(v34 + 96);
      *(_DWORD *)(v65 + 24) = *(_DWORD *)(v56 + 24);
      v76 = *(unsigned __int8 *)(v56 + 28);
      *(_BYTE *)(v65 + 28) = v76;
      if (v76 == 1)
      {
        v82 = *(_QWORD *)(v56 + 32);
        if (*(_DWORD *)(v65 + 72) != 1)
          *(_DWORD *)(v65 + 72) = 1;
        *(_QWORD *)(v65 + 32) = v82;
      }
      else
      {
        if (v76)
          std::terminate();
        v77 = *(double *)(v56 + 40);
        v78 = *(double *)(v56 + 48);
        v79 = *(double *)(v56 + 32);
        memset(buf, 0, 33);
        v55 = Phase::Controller::Parameter<double>::Initialize((uint64_t)buf, v77, v78, v79);
        v80 = (_OWORD *)(v65 + 32);
        v81 = *(_OWORD *)&buf[16];
        if (*(_DWORD *)(v65 + 72))
        {
          *v80 = *(_OWORD *)buf;
          *(_OWORD *)(v65 + 48) = v81;
          *(_QWORD *)(v65 + 64) = *(_QWORD *)&buf[32];
          *(_DWORD *)(v65 + 72) = 0;
        }
        else
        {
          *v80 = *(_OWORD *)buf;
          *(_OWORD *)(v65 + 48) = v81;
          *(_BYTE *)(v65 + 64) = buf[32];
        }
      }
LABEL_87:
      v56 += 56;
      if (v56 == v106)
        goto LABEL_93;
    }
    *(_QWORD *)v65 = *v74;
LABEL_78:
    *v74 = v65;
    goto LABEL_79;
  }
LABEL_93:
  v86 = operator new();
  *(_DWORD *)v86 = 1;
  *(_QWORD *)(v86 + 8) = a2;
  *(_QWORD *)(v86 + 16) = a3;
  *(_QWORD *)(v86 + 24) = v54;
  *(_QWORD *)(v86 + 32) = 0;
  *(_QWORD *)(v86 + 40) = 0;
  *(_QWORD *)(v86 + 48) = 0x3FF0000000000000;
  *(_WORD *)(v86 + 56) = 0;
  *(_QWORD *)(v86 + 64) = 0;
  *(_DWORD *)(v86 + 72) = 1;
  v87 = *(_QWORD *)a1;
  *(_QWORD *)(v86 + 80) = 0;
  *(_QWORD *)(v86 + 88) = v87;
  *(_QWORD *)a1 = v86;
  v88 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v86)
                                                                                      + 224)));
  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
  {
    Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, a1);
    if (v115 >= 0)
      v89 = __p;
    else
      v89 = (void **)__p[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 934;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v89;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = a2;
    _os_log_impl(&dword_2164CC000, v88, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s: register submixId %llu", buf, 0x26u);
    if (v115 < 0)
      operator delete(__p[0]);
  }

}

void sub_2165207E4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  __cxa_free_exception(v1);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void sub_21652081C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216520828()
{
  uint64_t v0;
  uint64_t v1;

  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100](v1 - 176);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v0);
  JUMPOUT(0x2165208C4);
}

void sub_216520838(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216520844(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_216520870()
{
  uint64_t v0;

  __cxa_end_catch();
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v0);
  JUMPOUT(0x2165208C4);
}

void sub_21652087C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_21652088C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_2165208A8()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x2165208B4);
}

uint64_t Phase::Controller::SpatialModelerInstance::UnregisterSubmix(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  void **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t UniqueSlot;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  NSObject *v19;
  std::logic_error *exception;
  void *__p[2];
  char v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  void **v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1)
                                                                                     + 224)));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, a1);
    v7 = v22 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315906;
    v24 = "CvmSpatialModelerInstance.mm";
    v25 = 1024;
    v26 = 940;
    v27 = 2080;
    v28 = v7;
    v29 = 2048;
    v30 = a2;
    _os_log_impl(&dword_2164CC000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s: unregister submixId %llu", buf, 0x26u);
    if (v22 < 0)
      operator delete(__p[0]);
  }

  Phase::Controller::SpatialModelerInstance::RemoveInput(a1, a2, a3);
  __p[0] = a2;
  __p[1] = a3;
  v8 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((_QWORD *)(a1 + 8), __p);
  v9 = v8;
  if (!v8)
  {
    v19 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 224));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v24 = "CvmSubmixSlotMapImpl.hpp";
      v25 = 1024;
      v26 = 91;
      v27 = 2048;
      v28 = (void **)__p[0];
      _os_log_impl(&dword_2164CC000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [iter == mSubmixHandleMap.end() is true]: \"SubmixSlotMap::Erase couldn't find SubmixId %llu\"", buf, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "SubmixSlotMap::Erase couldn't find SubmixId %llu");
  }
  v10 = v8[4];
  UniqueSlot = Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::GetUniqueSlot(a1 + 48, v10);
  v12 = UniqueSlot;
  if (!UniqueSlot)
    return std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase((_QWORD *)(a1 + 8), v9);
  ++*(_DWORD *)(UniqueSlot + 20);
  std::shared_ptr<Phase::Job>::reset[abi:ne180100]((_QWORD *)UniqueSlot);
  v13 = (unsigned int *)(a1 + 68);
  v14 = atomic_load((unsigned int *)(a1 + 68));
  *(_DWORD *)(v12 + 16) = v14;
  v15 = __ldaxr((unsigned int *)(a1 + 68));
  if (v15 != v14)
  {
    __clrex();
LABEL_13:
    while (1)
    {
      *(_DWORD *)(v12 + 16) = v15;
      v16 = __ldaxr(v13);
      if (v16 != v15)
        break;
      if (__stlxr(v10, v13))
        goto LABEL_17;
      v17 = 1;
LABEL_18:
      v15 = v16;
      if (v17)
        return std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase((_QWORD *)(a1 + 8), v9);
    }
    __clrex();
LABEL_17:
    v17 = 0;
    goto LABEL_18;
  }
  if (__stlxr(v10, v13))
    goto LABEL_13;
  return std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase((_QWORD *)(a1 + 8), v9);
}

void sub_216520B70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatialModelerInstance::RemoveInput(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD v8[2];

  v6 = (_QWORD *)(*(_QWORD *)(a1 + 6472) + 120);
  v8[0] = a2;
  v8[1] = a3;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v6, v8);
  if (result)
  {
    Phase::Controller::SpatialSubmixRouter::RemoveInput(*(_QWORD *)(a1 + 6472), a2, a3);
    result = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::GetMutable((_QWORD *)(a1 + 8), (uint64_t)a2, (uint64_t)a3);
    if (result)
      *(_QWORD *)(result + 32) = 0;
  }
  return result;
}

void Phase::Controller::SpatialModelerInstance::UnregisterAllSubmixes(Phase::Controller::SpatialModelerInstance *this)
{
  _QWORD *v2;
  void ***v3;
  unsigned int v4;
  void ***v5;
  void **v6;
  void ***v7;
  unint64_t v8;
  void ***v9;

  v2 = (_QWORD *)((char *)this + 48);
  v3 = (void ***)*((_QWORD *)this + 6);
  v4 = *((_DWORD *)this + 16);
  v5 = &v3[3 * v4];
  if (v4)
  {
    v6 = *v3;
    if (!*v3)
    {
      v7 = v3 + 3;
      while (1)
      {
        v3 = v7;
        if (v7 >= v5)
          break;
        v7 += 3;
        v6 = *v3;
        if (*v3)
          goto LABEL_9;
      }
      v6 = 0;
    }
LABEL_9:
    v8 = (unint64_t)v5;
  }
  else
  {
    v6 = 0;
    v8 = *((_QWORD *)this + 6);
  }
LABEL_16:
  while (v3 != v5)
  {
    Phase::Controller::SpatialModelerInstance::RemoveInput((uint64_t)this, *v6, v6[1]);
    if ((unint64_t)v3 < v8)
    {
      v9 = v3 + 3;
      while (1)
      {
        v3 = v9;
        if ((unint64_t)v9 >= v8)
          break;
        v9 += 3;
        v6 = *v3;
        if (*v3)
          goto LABEL_16;
      }
      v6 = 0;
    }
  }
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((_QWORD *)this + 1);
  atomic_store(0, (unsigned int *)this + 18);
  atomic_store(0xFFFFFFFF, (unsigned int *)this + 17);
  std::shared_ptr<Phase::Job>::reset[abi:ne180100](v2);
  *((_DWORD *)this + 16) = 0;
}

uint64_t Phase::Controller::SpatialModelerInstance::AddInput(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[2];

  v8 = (_QWORD *)(*(_QWORD *)(a1 + 6472) + 120);
  v11[0] = a2;
  v11[1] = a3;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v8, v11);
  if (!result)
  {
    v10 = Phase::Controller::SpatialSubmixRouter::AddInput(*(_QWORD *)(a1 + 6472), a2, a3, a4);
    result = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::GetMutable((_QWORD *)(a1 + 8), a2, a3);
    if (result)
      *(_QWORD *)(result + 32) = v10;
  }
  return result;
}

uint64_t Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::GetMutable(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v4 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(a1, v7);
  if (v4)
    v5 = v4[4];
  else
    v5 = 0;
  result = _ZN5Phase7details13SharedSlotMapINS_10Controller22SpatialModelerInstance10SubmixInfoENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS4_S5_DnE9GetUniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA_((uint64_t)(a1 + 5), v5);
  if (result)
    return *(_QWORD *)result;
  return result;
}

Phase::Logger *Phase::Controller::SpatialModelerInstance::SetInputSendLevel(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  _QWORD *v8;
  Phase::Logger *result;
  _QWORD v10[2];

  v8 = (_QWORD *)(*(_QWORD *)(a1 + 6472) + 120);
  v10[0] = a2;
  v10[1] = a3;
  result = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v8, v10);
  if (result)
    return Phase::Controller::SpatialSubmixRouter::SetInputSendLevel(*(_QWORD *)(a1 + 6472), a2, a3, a4);
  return result;
}

_QWORD *Phase::Controller::SpatialModelerInstance::IsPrepared(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *result;
  _QWORD v8[2];

  v6 = (_QWORD *)(*(_QWORD *)(a1 + 6472) + 120);
  v8[0] = a2;
  v8[1] = a3;
  result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v6, v8);
  if (result)
    return (_QWORD *)Phase::Controller::SpatialSubmixRouter::IsPrepared(*(Phase::Controller::SpatialModelerInfo ***)(a1 + 6472), a2, a3);
  return result;
}

_QWORD *Phase::Controller::SpatialModelerInstance::IsStopped(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *result;
  _QWORD v8[2];

  v6 = (_QWORD *)(*(_QWORD *)(a1 + 6472) + 120);
  v8[0] = a2;
  v8[1] = a3;
  result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v6, v8);
  if (result)
    return (_QWORD *)Phase::Controller::SpatialSubmixRouter::IsStopped(*(_QWORD *)(a1 + 6472), a2, a3);
  return result;
}

_BYTE *Phase::Controller::SpatialModelerInstance::SetPlayState(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v8;
  _BYTE *result;
  _QWORD v10[2];

  v8 = (_QWORD *)(*(_QWORD *)(a1 + 6472) + 120);
  v10[0] = a2;
  v10[1] = a3;
  result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v8, v10);
  if (result)
  {
    Phase::Controller::SpatialSubmixRouter::SetPlayState(*(_QWORD *)(a1 + 6472), a2, a3, a4);
    result = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::MutableAt((_QWORD *)(a1 + 8), a2, a3);
    result[24] = (a4 & 0xFFFFFFFD) == 1;
  }
  return result;
}

Phase::Logger *Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::MutableAt(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  Phase::Logger *result;
  NSObject *v8;
  std::logic_error *exception;
  _BYTE v10[18];
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v10 = a2;
  *(_QWORD *)&v10[8] = a3;
  v5 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(a1, v10);
  if (v5)
    v6 = v5[4];
  else
    v6 = 0;
  result = (Phase::Logger *)_ZN5Phase7details13SharedSlotMapINS_10Controller22SpatialModelerInstance10SubmixInfoENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS4_S5_DnE9GetUniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA_((uint64_t)(a1 + 5), v6);
  if (!result || (result = *(Phase::Logger **)result) == 0)
  {
    v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 224));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v10 = 136315906;
      *(_QWORD *)&v10[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&v10[12] = 1024;
      *(_DWORD *)&v10[14] = 171;
      v11 = 2048;
      v12 = v6;
      v13 = 2048;
      v14 = a2;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [nullptr == pObject is true]: \"SubmixSlotMap::MutableAt couldn't find SubmixHandle %llu for SubmixId %llu\"", v10, 0x26u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "SubmixSlotMap::MutableAt couldn't find SubmixHandle %llu for SubmixId %llu");
  }
  return result;
}

void sub_2165210F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::OptionalProperties::SetValue(_QWORD *a1, unsigned int a2, uint64_t a3, __int128 *a4)
{
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;

  v4 = a1[1];
  if (!v4)
    goto LABEL_17;
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = a2;
    if (v4 <= a2)
      v6 = a2 % v4;
  }
  else
  {
    v6 = ((_DWORD)v4 - 1) & a2;
  }
  v7 = *(uint64_t ***)(*a1 + 8 * v6);
  if (!v7 || (v8 = *v7) == 0)
LABEL_17:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  while (1)
  {
    v9 = v8[1];
    if (v9 == a2)
      break;
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= v4)
        v9 %= v4;
    }
    else
    {
      v9 &= v4 - 1;
    }
    if (v9 != v6)
      goto LABEL_17;
LABEL_16:
    v8 = (uint64_t *)*v8;
    if (!v8)
      goto LABEL_17;
  }
  if (*((_DWORD *)v8 + 4) != a2)
    goto LABEL_16;
  v10 = *a4;
  v11 = a4[2];
  *((_OWORD *)v8 + 3) = a4[1];
  *((_OWORD *)v8 + 4) = v11;
  *((_OWORD *)v8 + 2) = v10;
  return 1;
}

void std::atomic_store[abi:ne180100]<Phase::Controller::SubmixSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo>>(uint64_t *a1, uint64_t *a2)
{
  std::__sp_mut *sp_mut;
  uint64_t v5;
  uint64_t v6;

  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  v5 = *a1;
  *a1 = *a2;
  *a2 = v5;
  v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;
  std::__sp_mut::unlock(sp_mut);
}

void Phase::Controller::SpatialModelerInstance::SubmixInfo::MakeSubmix(Phase::Controller::SpatialModelerInstance::SubmixInfo *this, uint64_t a2, uint64_t a3)
{
  double v4;
  float *v5;
  float v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t i;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  NSObject *v21;
  int v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = *(double *)(a2 + 56);
  if (v4 < *(double *)(a2 + 64))
    v4 = *(double *)(a2 + 64);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = 0u;
  v5 = (float *)((char *)this + 16);
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *((_DWORD *)this + 35) = a3;
  if (a3)
  {
    v6 = v4;
    do
    {
      *v5++ = v6;
      --a3;
    }
    while (a3);
  }
  v7 = 0;
  *((_QWORD *)this + 18) = *(_QWORD *)(a2 + 48);
  *((_BYTE *)this + 152) = *(_BYTE *)(a2 + 24);
  v8 = (char *)this + 160;
  do
  {
    v9 = (char *)this + v7;
    *((_DWORD *)v9 + 40) = 0;
    *((_QWORD *)v9 + 21) = 0;
    v7 += 16;
  }
  while (v7 != 128);
  for (i = 1; i != 8; ++i)
  {
    v11 = *(int8x8_t *)(a2 + 80);
    if (!*(_QWORD *)&v11)
      goto LABEL_25;
    v12 = (uint8x8_t)vcnt_s8(v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = i;
      if (*(_QWORD *)&v11 <= i)
        v13 = i % *(_QWORD *)&v11;
    }
    else
    {
      v13 = (*(_QWORD *)&v11 + 0x7FFFFFFFLL) & i;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)(a2 + 72) + 8 * v13);
    if (!v14 || (v15 = *v14) == 0)
LABEL_25:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    while (1)
    {
      v16 = v15[1];
      if (v16 == i)
        break;
      if (v12.u32[0] > 1uLL)
      {
        if (v16 >= *(_QWORD *)&v11)
          v16 %= *(_QWORD *)&v11;
      }
      else
      {
        v16 &= *(_QWORD *)&v11 - 1;
      }
      if (v16 != v13)
        goto LABEL_25;
LABEL_24:
      v15 = (uint64_t *)*v15;
      if (!v15)
        goto LABEL_25;
    }
    if (i != *((_DWORD *)v15 + 4))
      goto LABEL_24;
    if (*((_BYTE *)v15 + 28))
    {
      if (*((_BYTE *)v15 + 28) == 1)
      {
        if (*((_DWORD *)v15 + 18) == 1)
        {
          v17 = v15[4];
          v18 = &v8[16 * i];
          *(_DWORD *)v18 = i;
          v18[4] = 1;
          *((_QWORD *)v18 + 1) = v17;
        }
      }
      else
      {
        v21 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 224));
        this = (Phase::Controller::SpatialModelerInstance::SubmixInfo *)os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
        if ((_DWORD)this)
        {
          v22 = *((unsigned __int8 *)v15 + 28);
          *(_DWORD *)buf = 136315650;
          v24 = "CvmSpatialModelerOptionalProperties.hpp";
          v25 = 1024;
          v26 = 138;
          v27 = 1024;
          v28 = v22;
          _os_log_impl(&dword_2164CC000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Unhandled OptionalPropertyDescription type %hhd", buf, 0x18u);
        }
      }
    }
    else if (!*((_DWORD *)v15 + 18))
    {
      v19 = v15[7];
      v20 = &v8[16 * i];
      *(_DWORD *)v20 = i;
      v20[4] = 0;
      *((_QWORD *)v20 + 1) = v19;
    }
  }
}

void sub_21652165C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_216521668(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x216521670);
  __clang_call_terminate(a1);
}

unsigned __int8 *Phase::Controller::SpatialModelerInstance::SetParameter(unsigned __int8 *result, uint64_t a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 v5;
  double v6;
  float v7;
  NSObject *v8;
  std::logic_error *exception;
  NSObject *v10;
  std::logic_error *v11;
  NSObject *v12;
  std::logic_error *v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  switch(*(_DWORD *)(a2 + 4))
  {
    case 0:
      v8 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result) + 224));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v14 = 136315394;
        v15 = "CvmSpatialModelerInstance.mm";
        v16 = 1024;
        v17 = 1114;
        _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId): \"Invalid SpatialModeler Graph type\"", (uint8_t *)&v14, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid SpatialModeler Graph type");
    case 1:
      v3 = result + 792;
      break;
    case 2:
      v3 = result + 912;
      break;
    case 3:
      v3 = result + 1032;
      break;
    default:
      v3 = 0;
      break;
  }
  switch(*(_DWORD *)(a2 + 8))
  {
    case 0:
      v10 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result) + 224));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v14 = 136315394;
        v15 = "CvmSpatialModelerInstance.mm";
        v16 = 1024;
        v17 = 1132;
        _os_log_impl(&dword_2164CC000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId): \"Invalid SpatialModeler Stage type\"", (uint8_t *)&v14, 0x12u);
      }
      v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v11, "Invalid SpatialModeler Stage type");
    case 1:
      break;
    case 2:
      v3 += 40;
      break;
    case 3:
      v3 += 80;
      break;
    default:
      v3 = 0;
      break;
  }
  switch(*(_DWORD *)(a2 + 12))
  {
    case 0:
      v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result) + 224));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v14 = 136315394;
        v15 = "CvmSpatialModelerInstance.mm";
        v16 = 1024;
        v17 = 1186;
        _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId): \"Invalid SpatialModelerParameter type\"", (uint8_t *)&v14, 0x12u);
      }
      v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v13, "Invalid SpatialModelerParameter type");
    case 1:
      v4 = result + 5641;
      v5 = atomic_load(result + 5641);
      v6 = *(double *)(a2 + 16);
      if ((v5 & 1) == 0 || v6 == *((double *)v3 + 2))
      {
        *((double *)v3 + 2) = v6;
      }
      else
      {
        result = (unsigned __int8 *)Phase::Controller::SpatialModelerInstance::StopUpdate((Phase::Controller::SpatialModelerInstance *)result);
        *((_QWORD *)v3 + 2) = *(_QWORD *)(a2 + 16);
        atomic_store(1u, v4);
      }
      break;
    case 2:
      *(_QWORD *)v3 = (unint64_t)*(double *)(a2 + 16);
      break;
    case 3:
      v7 = *(double *)(a2 + 16);
      *((float *)v3 + 2) = v7;
      break;
    case 4:
      *((_QWORD *)v3 + 3) = *(_QWORD *)(a2 + 16);
      break;
    case 5:
      *((_QWORD *)v3 + 4) = *(_QWORD *)(a2 + 16);
      break;
    default:
      return result;
  }
  return result;
}

void sub_2165219C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::SpatialModelerInstance::GetAvailableComputeForGraph(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  double v5;
  Phase::Logger *result;
  double v7;
  NSObject *v8;
  void **v9;
  int v10;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  void **v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 == 3)
    goto LABEL_4;
  if (v3 == 2)
  {
    atomic_load((unint64_t *)(a1 + 312));
    Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)a1, *(_DWORD *)(a1 + 3328), 0);
    Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)a1, *(_DWORD *)(a1 + 3328), 1);
    if (*(_DWORD *)(a1 + 528) == 2)
      return Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)a1, *(_DWORD *)(a1 + 3328), 2);
LABEL_15:
    std::terminate();
  }
  if (v3 != 1)
  {
    v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1)
                                                                                       + 208)));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, a1);
      v9 = (void **)__p[0];
      if (v13 >= 0)
        v9 = __p;
      v10 = *a2;
      *(_DWORD *)buf = 136315906;
      v15 = "CvmSpatialModelerInstance.mm";
      v16 = 1024;
      v17 = 1246;
      v18 = 2080;
      v19 = v9;
      v20 = 1024;
      v21 = v10;
      _os_log_impl(&dword_2164CC000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: Invalid graph type %i", buf, 0x22u);
      if (v13 < 0)
        operator delete(__p[0]);
    }

    goto LABEL_15;
  }
LABEL_4:
  v4 = 0;
  v5 = 0.0;
  do
  {
    result = Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)a1, *(_DWORD *)(a1 + 1152), v4);
    v7 = COERCE_DOUBLE(atomic_load((unint64_t *)(a1 + 8 * v4 + 1904)));
    v5 = v5 + v7 * *((double *)result + 2);
    ++v4;
  }
  while (v4 != 3);
  atomic_load((unint64_t *)(a1 + 312));
  return result;
}

void sub_216521C08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::SpatialModelerInstance::GetParams(Phase::Logger *a1, int a2, uint64_t a3)
{
  Phase::Logger *result;
  NSObject *v5;
  std::logic_error *v6;
  NSObject *v7;
  std::logic_error *exception;
  NSObject *v9;
  void **v10;
  std::logic_error *v11;
  NSObject *v12;
  void **v13;
  std::logic_error *v14;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  void **v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 0:
      v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 224));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v20 = "CvmSpatialModelerInstance.mm";
        v21 = 1024;
        v22 = 2777;
        _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId): \"Invalid SpatialModeler Graph type\"", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid SpatialModeler Graph type");
    case 1:
      result = (Phase::Logger *)((char *)a1 + 792);
      break;
    case 2:
      result = (Phase::Logger *)((char *)a1 + 912);
      break;
    case 3:
      result = (Phase::Logger *)((char *)a1 + 1032);
      break;
    default:
      v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1)
                                                                                          + 224)));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, (uint64_t)a1);
        v13 = v18 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315906;
        v20 = "CvmSpatialModelerInstance.mm";
        v21 = 1024;
        v22 = 2782;
        v23 = 2080;
        v24 = v13;
        v25 = 1024;
        LODWORD(v26) = a2;
        _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [nullptr == pStage is true]: \"%s: SpatialModeler Graph stage not found for graph %i\"", buf, 0x22u);
        if (v18 < 0)
          operator delete(__p[0]);
      }

      v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v14, "%s: SpatialModeler Graph stage not found for graph %i");
  }
  switch(a3)
  {
    case -1:
    case 3:
      v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 224));
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v20 = "CvmSpatialModelerInstance.mm";
        v21 = 1024;
        v22 = 2799;
        _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId): \"Invalid SpatialModeler Stage type\"", buf, 0x12u);
      }
      v6 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v6, "Invalid SpatialModeler Stage type");
    case 0:
      return result;
    case 1:
      result = (Phase::Logger *)((char *)result + 40);
      break;
    case 2:
      result = (Phase::Logger *)((char *)result + 80);
      break;
    default:
      v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result)
                                                                                         + 224)));
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, (uint64_t)a1);
        v10 = v18 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315906;
        v20 = "CvmSpatialModelerInstance.mm";
        v21 = 1024;
        v22 = 2804;
        v23 = 2080;
        v24 = v10;
        v25 = 2048;
        v26 = a3;
        _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [nullptr == pParams is true]: \"%s: SpatialModeler parameters not found for stage %zu\"", buf, 0x26u);
        if (v18 < 0)
          operator delete(__p[0]);
      }

      v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v11, "%s: SpatialModeler parameters not found for stage %zu");
  }
  return result;
}

void sub_216522014(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::CullabilityOutput<float>>(uint64_t a1)
{
  Phase::Logger *result;
  uint64_t v3;
  NSObject *v4;
  int v5;
  std::logic_error *exception;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = *(Phase::Logger **)(a1 + 120);
  if (!result || *(_DWORD *)result != 1)
  {
    v3 = a1;
    v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 384));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = **(_DWORD **)(v3 + 120);
      v7 = 136315906;
      v8 = "CvmSpatialQueryInstance.hpp";
      v9 = 1024;
      v10 = 121;
      v11 = 1024;
      v12 = 1;
      v13 = 1024;
      v14 = v5;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [nullptr == pOutput is true]: \"Bad spatial query output cast: expected type: %i, actual type: %i\"", (uint8_t *)&v7, 0x1Eu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Bad spatial query output cast: expected type: %i, actual type: %i");
  }
  return result;
}

void sub_21652219C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

Phase::Logger *Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::SubmixListenerInput<float>>(uint64_t a1)
{
  Phase::Logger *result;
  uint64_t v3;
  NSObject *v4;
  int v5;
  std::logic_error *exception;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = *(Phase::Logger **)(a1 + 112);
  if (!result || *(_DWORD *)result != 1)
  {
    v3 = a1;
    v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 384));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = **(_DWORD **)(v3 + 112);
      v7 = 136315906;
      v8 = "CvmSpatialQueryInstance.hpp";
      v9 = 1024;
      v10 = 98;
      v11 = 1024;
      v12 = 1;
      v13 = 1024;
      v14 = v5;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [nullptr == pInput is true]: \"Bad spatial query input cast: expected type: %i, actual type: %i\"", (uint8_t *)&v7, 0x1Eu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Bad spatial query input cast: expected type: %i, actual type: %i");
  }
  return result;
}

void sub_2165222DC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sGenerateSpatialModelerInfoString(uint64_t a1, uint64_t a2)
{
  id v3;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;
  void *__dst[2];
  unsigned __int8 v17;

  GetSpatialCategoryString(*(_DWORD *)(a2 + 40));
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100](__dst, (void *)objc_msgSend(v3, "UTF8String"), objc_msgSend(v3, "lengthOfBytesUsingEncoding:", 4));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"spatial category: ", 18);
  if ((v17 & 0x80u) == 0)
    v5 = __dst;
  else
    v5 = (void **)__dst[0];
  if ((v17 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (uint64_t)__dst[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"spatial modeler: ", 17);
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *(_QWORD *)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x24BEDB7F0];
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v13[0] = v11;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199F9CD4](&v15);
  if ((char)v17 < 0)
    operator delete(__dst[0]);

}

void sub_216522474(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  if (*(char *)(v2 - 49) < 0)
    operator delete(*(void **)(v2 - 72));

  _Unwind_Resume(a1);
}

uint64_t sGenerateSubmixListenerInputString()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"type: SubmixListenerInput", 25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"submix: ", 8);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"listener: ", 10);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 8) |= 0x4000u;
  v2 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, 48);
  v3 = *v2;
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 24) = 8;
  *(_DWORD *)((char *)v2 + *(_QWORD *)(v3 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(v3 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"source: ", 8);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 8) |= 0x4000u;
  v6 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, 48);
  v7 = *v6;
  *(uint64_t *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 24) = 8;
  *(_DWORD *)((char *)v6 + *(_QWORD *)(v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  v10[0] = *MEMORY[0x24BEDB7F0];
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v11[0] = v8;
  v11[1] = MEMORY[0x24BEDB848] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2199F9CD4](&v13);
}

void sub_2165226C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sGenerateCullabilityOutputString()
{
  uint64_t v0;
  _QWORD v2[2];
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"type: CullabilityOutput", 23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"cullability: ", 13);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x24BEDB7F0];
  v0 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v3[0] = v0;
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2199F9CD4](&v5);
}

void sub_2165227D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sGenerateErrorCodeString(const std::error_code *a1, const std::error_code *a2)
{
  _QWORD *v3;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v6;
  std::string __p;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"error code: ", 12);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"error message: ", 15);
  std::error_code::message(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v10[0] = v6;
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2199F9CD4](&v12);
}

void sub_21652292C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::ClusterSetInput<float>>(uint64_t a1)
{
  Phase::Logger *result;
  uint64_t v3;
  NSObject *v4;
  int v5;
  std::logic_error *exception;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = *(Phase::Logger **)(a1 + 112);
  if (!result || *(_DWORD *)result != 3)
  {
    v3 = a1;
    v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 384));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = **(_DWORD **)(v3 + 112);
      v7 = 136315906;
      v8 = "CvmSpatialQueryInstance.hpp";
      v9 = 1024;
      v10 = 98;
      v11 = 1024;
      v12 = 3;
      v13 = 1024;
      v14 = v5;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [nullptr == pInput is true]: \"Bad spatial query input cast: expected type: %i, actual type: %i\"", (uint8_t *)&v7, 0x1Eu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Bad spatial query input cast: expected type: %i, actual type: %i");
  }
  return result;
}

void sub_216522A80(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::vector<Phase::UniqueObjectId>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<Phase::UniqueObjectId>::__append((void **)a1, a2 - v2);
  }
}

uint64_t sGenerateClusterSetInputStrings(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  std::vector<std::string>::pointer end;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  std::string *v28;
  std::string *v29;
  std::string *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  std::vector<std::string>::pointer v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  std::string *v46;
  std::string *v47;
  std::string *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *__p[2];
  std::string::size_type v62;
  void *v63[2];
  uint64_t v64;
  uint64_t v65;
  void *v66;
  char v67;
  _BYTE v68[152];
  std::vector<std::string> v69;
  _QWORD v70[2];
  _QWORD v71[11];
  char v72;
  uint64_t v73;
  std::__split_buffer<std::string> __v;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v70);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"type: ClusterSetInput", 21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)", ", 2);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"listener: ", 10);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 8) |= 0x4000u;
  v5 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, 48);
  v6 = *v5;
  *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 24) = 8;
  *(_DWORD *)((char *)v5 + *(_QWORD *)(v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v5 + *(_QWORD *)(v6 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  v7 = 0;
  memset(&v69, 0, sizeof(v69));
  v8 = *(_QWORD *)(a2 + 144);
  v58 = v8 / 0xA;
  v9 = MEMORY[0x24BEDB7F0];
  v53 = v8;
  if (v8 >= 0xA)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v56 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v57 = (void *)*MEMORY[0x24BEDB7F0];
    v55 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v54 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v60 = v11;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v63);
      v13 = 0;
      v59 = v10;
      v14 = v12 + 9;
      v15 = v63[0];
      do
      {
        v16 = *(_DWORD *)((char *)&v63[1] + *(v15 - 3));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"{", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"index: ", 7);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)", ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"submix: ", 8);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)", ", 2);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"source: ", 8);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"0x", 2);
        *(_DWORD *)((char *)v18 + *(_QWORD *)(*v18 - 24) + 8) |= 0x4000u;
        v19 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, 48);
        v20 = *v19;
        *(uint64_t *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 24) = 8;
        *(_DWORD *)((char *)v19 + *(_QWORD *)(v20 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(v20 - 24) + 8) & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        if (v12 + v13 >= v14)
          v21 = "}";
        else
          v21 = "}, ";
        if (v12 + v13 >= v14)
          v22 = 1;
        else
          v22 = 3;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)v21, v22);
        v15 = v63[0];
        *(_DWORD *)((char *)&v63[1] + *((_QWORD *)v63[0] - 3)) = v16;
        ++v13;
        v10 += 304;
      }
      while (v13 != 10);
      std::stringbuf::str();
      end = v69.__end_;
      v9 = MEMORY[0x24BEDB7F0];
      v7 = v12 + 10;
      if (v69.__end_ >= v69.__end_cap_.__value_)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v69.__end_ - (char *)v69.__begin_) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<char>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v69.__end_cap_.__value_ - (char *)v69.__begin_) >> 3) > v26)
          v26 = 0x5555555555555556 * (((char *)v69.__end_cap_.__value_ - (char *)v69.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v69.__end_cap_.__value_ - (char *)v69.__begin_) >> 3) >= 0x555555555555555)
          v27 = 0xAAAAAAAAAAAAAAALL;
        else
          v27 = v26;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v69.__end_cap_;
        if (v27)
          v28 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v69.__end_cap_, v27);
        else
          v28 = 0;
        v29 = v28 + v25;
        __v.__first_ = v28;
        __v.__begin_ = v29;
        __v.__end_cap_.__value_ = &v28[v27];
        v29->__r_.__value_.__r.__words[2] = v62;
        *(_OWORD *)&v29->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v62 = 0;
        *(_OWORD *)__p = 0uLL;
        __v.__end_ = v29 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v69, &__v);
        v30 = v69.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v69.__end_ = v30;
        v24 = v59;
      }
      else
      {
        v69.__end_->__r_.__value_.__r.__words[2] = v62;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v69.__end_ = end + 1;
        v24 = v59;
      }
      v63[0] = v57;
      *(void **)((char *)v63 + *((_QWORD *)v57 - 3)) = v56;
      v64 = v55;
      v65 = v54;
      if (v67 < 0)
        operator delete(v66);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x2199F9CD4](v68);
      v11 = v60 + 1;
      v10 = v24 + 3040;
      v12 += 10;
    }
    while (v60 + 1 != v58);
  }
  v31 = v53 - 10 * v58;
  if (v31)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v63);
    if (v7 < v7 + v31)
    {
      v32 = v7 + v31 - 1;
      v33 = v63[0];
      v34 = 304 * v7;
      do
      {
        v35 = *(_DWORD *)((char *)&v63[1] + *(v33 - 3));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"{", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"index: ", 7);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)", ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"submix: ", 8);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)", ", 2);
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"source: ", 8);
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"0x", 2);
        *(_DWORD *)((char *)v37 + *(_QWORD *)(*v37 - 24) + 8) |= 0x4000u;
        v38 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, 48);
        v39 = *v38;
        *(uint64_t *)((char *)v38 + *(_QWORD *)(*v38 - 24) + 24) = 8;
        *(_DWORD *)((char *)v38 + *(_QWORD *)(v39 - 24) + 8) = *(_DWORD *)((_BYTE *)v38 + *(_QWORD *)(v39 - 24) + 8) & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        if (v7 >= v32)
          v40 = "}";
        else
          v40 = "}, ";
        if (v7 >= v32)
          v41 = 1;
        else
          v41 = 3;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)v40, v41);
        v33 = v63[0];
        *(_DWORD *)((char *)&v63[1] + *((_QWORD *)v63[0] - 3)) = v35;
        ++v7;
        v34 += 304;
        --v31;
      }
      while (v31);
    }
    std::stringbuf::str();
    v42 = v69.__end_;
    v9 = MEMORY[0x24BEDB7F0];
    if (v69.__end_ >= v69.__end_cap_.__value_)
    {
      v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)v69.__end_ - (char *)v69.__begin_) >> 3);
      v44 = v43 + 1;
      if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<char>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v69.__end_cap_.__value_ - (char *)v69.__begin_) >> 3) > v44)
        v44 = 0x5555555555555556 * (((char *)v69.__end_cap_.__value_ - (char *)v69.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v69.__end_cap_.__value_ - (char *)v69.__begin_) >> 3) >= 0x555555555555555)
        v45 = 0xAAAAAAAAAAAAAAALL;
      else
        v45 = v44;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v69.__end_cap_;
      if (v45)
        v46 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v69.__end_cap_, v45);
      else
        v46 = 0;
      v47 = v46 + v43;
      __v.__first_ = v46;
      __v.__begin_ = v47;
      __v.__end_cap_.__value_ = &v46[v45];
      v47->__r_.__value_.__r.__words[2] = v62;
      *(_OWORD *)&v47->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      __v.__end_ = v47 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v69, &__v);
      v48 = v69.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v69.__end_ = v48;
    }
    else
    {
      v69.__end_->__r_.__value_.__r.__words[2] = v62;
      *(_OWORD *)&v42->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v69.__end_ = v42 + 1;
    }
    v63[0] = *(void **)v9;
    v49 = *(_QWORD *)(v9 + 72);
    *(void **)((char *)v63 + *((_QWORD *)v63[0] - 3)) = *(void **)(v9 + 64);
    v64 = v49;
    v65 = MEMORY[0x24BEDB848] + 16;
    if (v67 < 0)
      operator delete(v66);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2199F9CD4](v68);
  }
  std::stringbuf::str();
  std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string,std::vector<std::string>&,0>(a1, (__int128 *)v63, (__int128 **)&v69);
  if (SHIBYTE(v64) < 0)
    operator delete(v63[0]);
  v63[0] = &v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v63);
  v70[0] = *(_QWORD *)v9;
  v50 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)((char *)v70 + *(_QWORD *)(v70[0] - 24)) = *(_QWORD *)(v9 + 64);
  v71[0] = v50;
  v71[1] = MEMORY[0x24BEDB848] + 16;
  if (v72 < 0)
    operator delete((void *)v71[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2199F9CD4](&v73);
}

void sub_2165232E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char a67;
  uint64_t v67;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v67 - 128));
  if (a28 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a29);
  a29 = &a64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::vector<std::string>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void Phase::Controller::SpatialModelerInstance::FinishClusterQuery(Phase::Controller::SpatialModelerInstance *this, Phase::Controller::SpatialQueryInstance *a2, Phase::SpatialModeler::PriorityQueue *a3, Phase::Controller::SpatialModelerInstance::GraphData *a4)
{
  char *v4;
  unsigned int v5;
  unsigned int v6;
  Phase::Logger *v8;
  Phase::Logger *v9;
  Phase::Logger *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  Phase::Logger *v14;
  NSObject *v15;
  void **v16;
  void **v17;
  unint64_t v18;
  void **v19;
  uint64_t v20;
  Phase::Logger *v21;
  unint64_t v22;
  NSObject *v23;
  void **v24;
  void **v25;
  unint64_t v26;
  NSObject *v27;
  void **v28;
  void **v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;
  unint64_t v36;
  Phase::SpatialModeler::RenderGroup *v37;
  uint64_t *RenderGroup;
  uint64_t v39;
  NSObject *v40;
  void **v41;
  uint64_t v42;
  NSObject *v43;
  void **v44;
  unsigned int v45;
  const char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  void **v56;
  uint64_t v57;
  Phase::Logger *v58;
  Phase::Logger *v59;
  Phase::Logger *v60;
  NSObject *v61;
  int v62;
  void **v63;
  int v64;
  void **v65;
  int v66;
  void **v67;
  uint64_t v68;
  void **v69;
  void **v70;
  void **v71;
  std::error_code *v72;
  Phase::Logger *v73;
  unint64_t v74;
  NSObject *v75;
  void **v76;
  void **v77;
  unint64_t v78;
  NSObject *v79;
  void **v80;
  void **v81;
  Phase::Logger *v82;
  Phase::Logger *v83;
  Phase::Logger *ClusterSetOutputStrings;
  NSObject *v85;
  int v86;
  void **v87;
  int v88;
  void **v89;
  int v90;
  void **v91;
  uint64_t v92;
  void **v93;
  void **v94;
  void **v95;
  std::error_code *v96;
  Phase::Logger *v97;
  unint64_t v98;
  NSObject *v99;
  void **v100;
  void **v101;
  unint64_t v102;
  NSObject *v103;
  void **v104;
  void **v105;
  NSObject *v106;
  void **v107;
  Phase::Logger *v108;
  NSObject *v109;
  void **v110;
  void **v111;
  unint64_t v112;
  void **v113;
  uint64_t v114;
  Phase::Logger *v115;
  unint64_t v116;
  NSObject *v117;
  void **v118;
  void **v119;
  unint64_t v120;
  NSObject *v121;
  void **v122;
  void **v123;
  Phase::Logger *v124;
  NSObject *v125;
  void **v126;
  void **v127;
  unint64_t v128;
  void **v129;
  uint64_t v130;
  Phase::Logger *v131;
  unint64_t v132;
  NSObject *v133;
  void **v134;
  void **v135;
  unint64_t v136;
  NSObject *v137;
  void **v138;
  void **v139;
  Phase::Logger *v140;
  NSObject *v141;
  void **v142;
  void **v143;
  unint64_t v144;
  void **v145;
  uint64_t v146;
  Phase::Logger *v147;
  unint64_t v148;
  NSObject *v149;
  void **v150;
  void **v151;
  unint64_t v152;
  NSObject *v153;
  void **v154;
  void **v155;
  Phase::SpatialModeler::PriorityQueue *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  float *v161;
  float *v162;
  int v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  Phase::Controller::RenderGroupMgr *v167;
  std::error_code v170;
  std::error_code v171;
  char v172;
  void *__p[2];
  char v174;
  void *v175[2];
  char v176;
  uint64_t v177;
  uint64_t v178;
  void *v179[2];
  char v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE buf[38];
  __int16 v184;
  unint64_t v185;
  __int16 v186;
  void **v187;
  __int16 v188;
  uint64_t v189;
  __int16 v190;
  std::error_code *v191;
  __int16 v192;
  unint64_t v193;
  uint64_t v194;

  v194 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)a3 + 816;
  v167 = (Phase::SpatialModeler::PriorityQueue *)((char *)a3 + 1024);
  v5 = atomic_load((unsigned int *)a3 + 204);
  if (v5 == 5)
  {
    v82 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::ClusterSetInput<float>>((uint64_t)a3 + 816);
    v83 = Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::ClusterSetOutput<float>>((uint64_t)v4);
    sGenerateClusterSetInputStrings((uint64_t)v179, (uint64_t)v82);
    ClusterSetOutputStrings = (Phase::Logger *)sGenerateClusterSetOutputStrings((uint64_t)v175, v83);
    v85 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(ClusterSetOutputStrings)
                                                                                        + 224)));
    if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
    {
      sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
      v86 = v174;
      v87 = (void **)__p[0];
      v88 = v180;
      v89 = (void **)v179[0];
      v166 = *((_QWORD *)v82 + 18);
      v90 = v176;
      v91 = (void **)v175[0];
      v92 = *((_QWORD *)v83 + 18);
      v170 = (std::error_code)*((_OWORD *)a3 + 54);
      sGenerateErrorCodeString(&v171, &v170);
      *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&buf[12] = 1024;
      v93 = v175;
      if (v90 < 0)
        v93 = v91;
      *(_DWORD *)&buf[14] = 2059;
      v94 = v179;
      if (v88 < 0)
        v94 = v89;
      v95 = __p;
      *(_DWORD *)buf = 136316930;
      if (v86 < 0)
        v95 = v87;
      *(_WORD *)&buf[18] = 2080;
      if (v172 >= 0)
        v96 = &v171;
      else
        v96 = *(std::error_code **)&v171.__val_;
      *(_QWORD *)&buf[20] = v95;
      *(_WORD *)&buf[28] = 2080;
      *(_QWORD *)&buf[30] = v94;
      v184 = 2048;
      v185 = v166;
      v186 = 2080;
      v187 = v93;
      v188 = 2048;
      v189 = v92;
      v190 = 2080;
      v191 = v96;
      _os_log_impl(&dword_2164CC000, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - cluster query cancelled (%s, submix count: %zu, ...) (%s, submix count: %zu, ...) (%s)", buf, 0x4Eu);
      if (v172 < 0)
        operator delete(*(void **)&v171.__val_);
      if (v174 < 0)
        operator delete(__p[0]);
    }

    if (v182 != v181)
    {
      v98 = 0;
      do
      {
        v99 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v97)
                                                                                            + 224)));
        if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
        {
          sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
          v100 = (void **)__p[0];
          if (v174 >= 0)
            v100 = __p;
          v101 = (void **)(v181 + 24 * v98);
          if (*((char *)v101 + 23) < 0)
            v101 = (void **)*v101;
          ++v98;
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2064;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v100;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v98;
          v184 = 2048;
          v185 = 0xAAAAAAAAAAAAAAABLL * ((v182 - v181) >> 3);
          v186 = 2080;
          v187 = v101;
          _os_log_impl(&dword_2164CC000, v99, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetInput log %zu of %zu (%s)", buf, 0x3Au);
          if (v174 < 0)
            operator delete(__p[0]);
        }
        else
        {
          ++v98;
        }

      }
      while (v98 < 0xAAAAAAAAAAAAAAABLL * ((v182 - v181) >> 3));
    }
    if (v178 != v177)
    {
      v102 = 0;
      do
      {
        v103 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v97)
                                                                                             + 224)));
        if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
        {
          sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
          v104 = (void **)__p[0];
          if (v174 >= 0)
            v104 = __p;
          v105 = (void **)(v177 + 24 * v102);
          if (*((char *)v105 + 23) < 0)
            v105 = (void **)*v105;
          ++v102;
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2070;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v104;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v102;
          v184 = 2048;
          v185 = 0xAAAAAAAAAAAAAAABLL * ((v178 - v177) >> 3);
          v186 = 2080;
          v187 = v105;
          _os_log_impl(&dword_2164CC000, v103, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetOutput log %zu of %zu (%s)", buf, 0x3Au);
          if (v174 < 0)
            operator delete(__p[0]);
        }
        else
        {
          ++v102;
        }

      }
      while (v102 < 0xAAAAAAAAAAAAAAABLL * ((v178 - v177) >> 3));
    }
    goto LABEL_154;
  }
  if (v5 == 4)
  {
    v58 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::ClusterSetInput<float>>((uint64_t)a3 + 816);
    v59 = Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::ClusterSetOutput<float>>((uint64_t)v4);
    sGenerateClusterSetInputStrings((uint64_t)v179, (uint64_t)v58);
    v60 = (Phase::Logger *)sGenerateClusterSetOutputStrings((uint64_t)v175, v59);
    v61 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v60)
                                                                                        + 224)));
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
    {
      sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
      v62 = v174;
      v63 = (void **)__p[0];
      v64 = v180;
      v65 = (void **)v179[0];
      v165 = *((_QWORD *)v58 + 18);
      v66 = v176;
      v67 = (void **)v175[0];
      v68 = *((_QWORD *)v59 + 18);
      v170 = (std::error_code)*((_OWORD *)a3 + 54);
      sGenerateErrorCodeString(&v171, &v170);
      *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&buf[12] = 1024;
      v69 = v175;
      if (v66 < 0)
        v69 = v67;
      *(_DWORD *)&buf[14] = 2029;
      v70 = v179;
      if (v64 < 0)
        v70 = v65;
      v71 = __p;
      *(_DWORD *)buf = 136316930;
      if (v62 < 0)
        v71 = v63;
      *(_WORD *)&buf[18] = 2080;
      if (v172 >= 0)
        v72 = &v171;
      else
        v72 = *(std::error_code **)&v171.__val_;
      *(_QWORD *)&buf[20] = v71;
      *(_WORD *)&buf[28] = 2080;
      *(_QWORD *)&buf[30] = v70;
      v184 = 2048;
      v185 = v165;
      v186 = 2080;
      v187 = v69;
      v188 = 2048;
      v189 = v68;
      v190 = 2080;
      v191 = v72;
      _os_log_impl(&dword_2164CC000, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - cluster query failed (%s, submix count: %zu, ...) (%s, submix count: %zu, ...) (%s)", buf, 0x4Eu);
      if (v172 < 0)
        operator delete(*(void **)&v171.__val_);
      if (v174 < 0)
        operator delete(__p[0]);
    }

    if (v182 != v181)
    {
      v74 = 0;
      do
      {
        v75 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v73)
                                                                                            + 224)));
        if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
        {
          sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
          v76 = (void **)__p[0];
          if (v174 >= 0)
            v76 = __p;
          v77 = (void **)(v181 + 24 * v74);
          if (*((char *)v77 + 23) < 0)
            v77 = (void **)*v77;
          ++v74;
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2034;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v76;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v74;
          v184 = 2048;
          v185 = 0xAAAAAAAAAAAAAAABLL * ((v182 - v181) >> 3);
          v186 = 2080;
          v187 = v77;
          _os_log_impl(&dword_2164CC000, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetInput log %zu of %zu (%s)", buf, 0x3Au);
          if (v174 < 0)
            operator delete(__p[0]);
        }
        else
        {
          ++v74;
        }

      }
      while (v74 < 0xAAAAAAAAAAAAAAABLL * ((v182 - v181) >> 3));
    }
    if (v178 != v177)
    {
      v78 = 0;
      do
      {
        v79 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v73)
                                                                                            + 224)));
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
          v80 = (void **)__p[0];
          if (v174 >= 0)
            v80 = __p;
          v81 = (void **)(v177 + 24 * v78);
          if (*((char *)v81 + 23) < 0)
            v81 = (void **)*v81;
          ++v78;
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2040;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v80;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v78;
          v184 = 2048;
          v185 = 0xAAAAAAAAAAAAAAABLL * ((v178 - v177) >> 3);
          v186 = 2080;
          v187 = v81;
          _os_log_impl(&dword_2164CC000, v79, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetOutput log %zu of %zu (%s)", buf, 0x3Au);
          if (v174 < 0)
            operator delete(__p[0]);
        }
        else
        {
          ++v78;
        }

      }
      while (v78 < 0xAAAAAAAAAAAAAAABLL * ((v178 - v177) >> 3));
    }
LABEL_154:
    *(_QWORD *)buf = &v177;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v176 < 0)
      operator delete(v175[0]);
    *(_QWORD *)buf = &v181;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v180 < 0)
      operator delete(v179[0]);
    goto LABEL_269;
  }
  v6 = v5 - 3;
  if (!v6)
  {
    *(_QWORD *)&v171.__val_ = 0;
    v8 = Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::ClusterSetOutput<float>>((uint64_t)a3 + 816);
    v9 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::ClusterSetInput<float>>((uint64_t)v4);
    v10 = v9;
    v11 = *((_QWORD *)a3 + 121);
    v12 = *((_QWORD *)a3 + 120);
    if (*((_QWORD *)v8 + 18) == (v11 - v12) >> 4)
    {
      if (*((_QWORD *)v8 + 1) && (v13 = *((_QWORD *)v8 + 6)) != 0)
      {
        if (*((_QWORD *)v8 + 7) && *((_QWORD *)v8 + 12))
        {
          v164 = (unint64_t)*((double *)v9 + 5);
          if (v13 > v164)
          {
            sGenerateClusterSetInputStrings((uint64_t)v179, (uint64_t)v9);
            v14 = (Phase::Logger *)sGenerateClusterSetOutputStrings((uint64_t)v175, v8);
            v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v14)
                                                                                                + 224)));
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
              if (v174 >= 0)
                v16 = __p;
              else
                v16 = (void **)__p[0];
              v17 = v179;
              if (v180 < 0)
                v17 = (void **)v179[0];
              v18 = *((_QWORD *)v10 + 18);
              v19 = v175;
              if (v176 < 0)
                v19 = (void **)v175[0];
              v20 = *((_QWORD *)v8 + 18);
              *(_DWORD *)buf = 136317186;
              *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1873;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v16;
              *(_WORD *)&buf[28] = 2080;
              *(_QWORD *)&buf[30] = v17;
              v184 = 2048;
              v185 = v18;
              v186 = 2080;
              v187 = v19;
              v188 = 2048;
              v189 = v20;
              v190 = 2048;
              v191 = (std::error_code *)v13;
              v192 = 2048;
              v193 = v164;
              _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - cluster query returned more render groups than the input maximum cluster count. pruning excess clusters. this may sound incorrect. (%s, submix count: %zu, ...) (%s, submix count: %zu, ...) (render group count: %zu, maximum cluster count: %zu)", buf, 0x58u);
              if (v174 < 0)
                operator delete(__p[0]);
            }

            if (v182 != v181)
            {
              v22 = 0;
              do
              {
                v23 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v21) + 224));
                if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
                {
                  sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
                  v24 = (void **)__p[0];
                  if (v174 >= 0)
                    v24 = __p;
                  v25 = (void **)(v181 + 24 * v22);
                  if (*((char *)v25 + 23) < 0)
                    v25 = (void **)*v25;
                  ++v22;
                  *(_DWORD *)buf = 136316418;
                  *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1878;
                  *(_WORD *)&buf[18] = 2080;
                  *(_QWORD *)&buf[20] = v24;
                  *(_WORD *)&buf[28] = 2048;
                  *(_QWORD *)&buf[30] = v22;
                  v184 = 2048;
                  v185 = 0xAAAAAAAAAAAAAAABLL * ((v182 - v181) >> 3);
                  v186 = 2080;
                  v187 = v25;
                  _os_log_impl(&dword_2164CC000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetInput log %zu of %zu (%s)", buf, 0x3Au);
                  if (v174 < 0)
                    operator delete(__p[0]);
                }
                else
                {
                  ++v22;
                }

              }
              while (v22 < 0xAAAAAAAAAAAAAAABLL * ((v182 - v181) >> 3));
            }
            if (v178 != v177)
            {
              v26 = 0;
              do
              {
                v27 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v21) + 224));
                if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
                {
                  sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
                  v28 = (void **)__p[0];
                  if (v174 >= 0)
                    v28 = __p;
                  v29 = (void **)(v177 + 24 * v26);
                  if (*((char *)v29 + 23) < 0)
                    v29 = (void **)*v29;
                  ++v26;
                  *(_DWORD *)buf = 136316418;
                  *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1884;
                  *(_WORD *)&buf[18] = 2080;
                  *(_QWORD *)&buf[20] = v28;
                  *(_WORD *)&buf[28] = 2048;
                  *(_QWORD *)&buf[30] = v26;
                  v184 = 2048;
                  v185 = 0xAAAAAAAAAAAAAAABLL * ((v178 - v177) >> 3);
                  v186 = 2080;
                  v187 = v29;
                  _os_log_impl(&dword_2164CC000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetOutput log %zu of %zu (%s)", buf, 0x3Au);
                  if (v174 < 0)
                    operator delete(__p[0]);
                }
                else
                {
                  ++v26;
                }

              }
              while (v26 < 0xAAAAAAAAAAAAAAABLL * ((v178 - v177) >> 3));
            }
            std::pair<std::string,std::vector<std::string>>::~pair((uint64_t)v175);
            std::pair<std::string,std::vector<std::string>>::~pair((uint64_t)v179);
            v11 = *((_QWORD *)a3 + 121);
            v12 = *((_QWORD *)a3 + 120);
          }
          if (v11 != v12)
          {
            v30 = 0;
            v31 = 0;
            v32 = (_QWORD *)((char *)a2 + 40);
            do
            {
              *(_OWORD *)v175 = *(_OWORD *)(v12 + v30);
              v33 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v32, v175);
              v34 = v33;
              if (v33)
              {
                if (*((_QWORD *)v8 + 18) <= v31)
                  goto LABEL_287;
                v35 = v33 + 4;
                v36 = *(_QWORD *)(*((_QWORD *)v8 + 13) + v30);
                if (v36 == -1 || v36 >= *((_QWORD *)v8 + 6))
                {
                  v40 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v33) + 224));
                  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
                  {
                    sGenerateSpatialModelerInfoString((uint64_t)v179, *((_QWORD *)this + 733));
                    v41 = v179;
                    if (v180 < 0)
                      v41 = (void **)v179[0];
                    v42 = *v35;
                    *(_DWORD *)buf = 136315906;
                    *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 1912;
                    *(_WORD *)&buf[18] = 2080;
                    *(_QWORD *)&buf[20] = v41;
                    *(_WORD *)&buf[28] = 2048;
                    *(_QWORD *)&buf[30] = v42;
                    _os_log_impl(&dword_2164CC000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - submix routing emitted without a valid render group. submix will not be updated. (submix: %llu)", buf, 0x26u);
                    if (v180 < 0)
                      operator delete(v179[0]);
                  }
                }
                else
                {
                  if (v36 >= v164)
                    v36 = 0;
                  v37 = (Phase::SpatialModeler::RenderGroup *)(*((_QWORD *)v8 + 1) + 336 * v36);
                  if (*(_QWORD *)v37 || *((_QWORD *)v37 + 1))
                  {
                    *(_OWORD *)(v33 + 7) = *(_OWORD *)v37;
                    *((long double *)v33 + 9) = exp(*(double *)(*((_QWORD *)v8 + 13) + v30 + 8)* 10.0/ 10.0* 0.115129255);
                    RenderGroup = Phase::Controller::RenderGroupMgr::GetRenderGroup(v167, *(UniqueObjectId *)(v34 + 7));
                    if (RenderGroup)
                    {
                      v39 = *RenderGroup;
                    }
                    else
                    {
                      v43 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 224));
                      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                      {
                        sGenerateSpatialModelerInfoString((uint64_t)v179, *((_QWORD *)this + 733));
                        v44 = v179;
                        if (v180 < 0)
                          v44 = (void **)v179[0];
                        v45 = *(_DWORD *)a3 - 1;
                        v46 = "<invalid>";
                        if (v45 <= 2)
                          v46 = off_24D579718[v45];
                        v47 = *(_QWORD *)v37;
                        *(_DWORD *)buf = 136316162;
                        *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 1953;
                        *(_WORD *)&buf[18] = 2080;
                        *(_QWORD *)&buf[20] = v44;
                        *(_WORD *)&buf[28] = 2080;
                        *(_QWORD *)&buf[30] = v46;
                        v184 = 2048;
                        v185 = v47;
                        _os_log_impl(&dword_2164CC000, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (%s) - added render group to render group manager (graph: %s, cluster: %llu)", buf, 0x30u);
                        if (v180 < 0)
                          operator delete(v179[0]);
                      }

                      v39 = Phase::Controller::RenderGroupMgr::NewRenderGroup(v167, v37);
                    }
                    Phase::Controller::RenderGroupMgr::SetSubmixSendLevel((uint64_t)v167, v34[4], v34[5], *((double *)v34 + 9));
                    Phase::Controller::RenderGroupMgr::SetSubmixRendererId((uint64_t)v167, v34[4], v34[5], v39);
                    if (*((_BYTE *)v34 + 80))
                    {
                      *(_OWORD *)buf = *(_OWORD *)v35;
                      *(_OWORD *)&buf[16] = *(_OWORD *)(v34 + 7);
                      v48 = v34[9];
                      v49 = operator new();
                      *(_DWORD *)v49 = 3;
                      v50 = *(_OWORD *)&buf[16];
                      *(_OWORD *)(v49 + 8) = *(_OWORD *)buf;
                      *(_OWORD *)(v49 + 24) = v50;
                      *(_QWORD *)(v49 + 40) = v48;
                      *(_DWORD *)(v49 + 72) = 3;
                      v51 = *(_QWORD *)&v171.__val_;
                      *(_QWORD *)(v49 + 80) = 0;
                      *(_QWORD *)(v49 + 88) = v51;
                      *(_QWORD *)&v171.__val_ = v49;
                    }
                    else
                    {
                      v52 = operator new();
                      *(_QWORD *)(v52 + 80) = 0;
                      *(_DWORD *)v52 = 1;
                      v53 = *(_OWORD *)v35;
                      v54 = *((_OWORD *)v34 + 3);
                      v55 = *((_OWORD *)v34 + 4);
                      *(_OWORD *)(v52 + 56) = *((_OWORD *)v34 + 5);
                      *(_OWORD *)(v52 + 40) = v55;
                      *(_OWORD *)(v52 + 24) = v54;
                      *(_OWORD *)(v52 + 8) = v53;
                      *(_DWORD *)(v52 + 72) = 1;
                      *(_QWORD *)(v52 + 88) = *(_QWORD *)&v171.__val_;
                      *(_QWORD *)&v171.__val_ = v52;
                      *((_BYTE *)v34 + 80) = 1;
                    }
                    *((double *)v34 + 11) = (double)std::chrono::steady_clock::now().__d_.__rep_ / 1000000000.0;
                    goto LABEL_73;
                  }
                  v40 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v33) + 224));
                  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
                  {
                    sGenerateSpatialModelerInfoString((uint64_t)v179, *((_QWORD *)this + 733));
                    v56 = v179;
                    if (v180 < 0)
                      v56 = (void **)v179[0];
                    v57 = *v35;
                    *(_DWORD *)buf = 136315906;
                    *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 1932;
                    *(_WORD *)&buf[18] = 2080;
                    *(_QWORD *)&buf[20] = v56;
                    *(_WORD *)&buf[28] = 2048;
                    *(_QWORD *)&buf[30] = v57;
                    _os_log_impl(&dword_2164CC000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - submix assigned to a render group without a valid id. submix will not be updated. (submix: %llu)", buf, 0x26u);
                    if (v180 < 0)
                      operator delete(v179[0]);
                  }
                }

              }
LABEL_73:
              ++v31;
              v12 = *((_QWORD *)a3 + 120);
              v30 += 16;
            }
            while (v31 < (*((_QWORD *)a3 + 121) - v12) >> 4);
          }
          if (*((_QWORD *)v8 + 6))
          {
            v157 = 0;
            v158 = 0;
            do
            {
              v159 = *((_QWORD *)v8 + 1);
              v160 = (_QWORD *)(v159 + v157);
              v161 = (float *)Phase::Controller::RenderGroupMgr::GetRenderGroup(v167, *(UniqueObjectId *)(v159 + v157));
              v162 = v161;
              if (v161)
              {
                v163 = *(unsigned __int8 *)(*((_QWORD *)v8 + 7) + v158);
                if (*((unsigned __int8 *)v161 + 352) != v163
                  || *(_QWORD *)(v159 + v157 + 16) != *((_QWORD *)v161 + 4)
                  || *v160 != *((_QWORD *)v161 + 2)
                  || v160[1] != *((_QWORD *)v161 + 3)
                  || Phase::operator!=<float>((float *)(v159 + v157 + 24), v161 + 10)
                  || *(_QWORD *)(v159 + v157 + 184) != *((_QWORD *)v162 + 25)
                  || *(float *)(v159 + v157 + 192) != v162[52]
                  || *(float *)(v159 + v157 + 196) != v162[53]
                  || *(float *)(v159 + v157 + 200) != v162[54]
                  || *(unsigned __int8 *)(v159 + v157 + 320) != *((unsigned __int8 *)v162 + 336))
                {
                  Phase::Controller::RenderGroupMgr::UpdateRenderGroup(v167, (Phase::SpatialModeler::RenderGroup *)(v159 + v157), v163 != 0);
                }
              }
              ++v158;
              v157 += 336;
            }
            while (*((_QWORD *)v8 + 6) > v158);
          }
          if (*(_QWORD *)&v171.__val_)
            Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::Commit((unint64_t *)a3 + 90, &v171);
          goto LABEL_268;
        }
        sGenerateClusterSetInputStrings((uint64_t)v179, (uint64_t)v9);
        v140 = (Phase::Logger *)sGenerateClusterSetOutputStrings((uint64_t)v175, v8);
        v141 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v140)
                                                                                             + 224)));
        if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
        {
          sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
          if (v174 >= 0)
            v142 = __p;
          else
            v142 = (void **)__p[0];
          v143 = v179;
          if (v180 < 0)
            v143 = (void **)v179[0];
          v144 = *((_QWORD *)v10 + 18);
          v145 = v175;
          if (v176 < 0)
            v145 = (void **)v175[0];
          v146 = *((_QWORD *)v8 + 18);
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1843;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v142;
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = v143;
          v184 = 2048;
          v185 = v144;
          v186 = 2080;
          v187 = v145;
          v188 = 2048;
          v189 = v146;
          _os_log_impl(&dword_2164CC000, v141, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - cluster query output render group spatial update flag array is null or empty. cluster query aborted. (%s, submix count: %zu, ...) (%s, submix count: %zu, ...)", buf, 0x44u);
          if (v174 < 0)
            operator delete(__p[0]);
        }

        if (v182 != v181)
        {
          v148 = 0;
          do
          {
            v149 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v147)
                                                                                                 + 224)));
            if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
            {
              sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
              v150 = (void **)__p[0];
              if (v174 >= 0)
                v150 = __p;
              v151 = (void **)(v181 + 24 * v148);
              if (*((char *)v151 + 23) < 0)
                v151 = (void **)*v151;
              ++v148;
              *(_DWORD *)buf = 136316418;
              *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1848;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v150;
              *(_WORD *)&buf[28] = 2048;
              *(_QWORD *)&buf[30] = v148;
              v184 = 2048;
              v185 = 0xAAAAAAAAAAAAAAABLL * ((v182 - v181) >> 3);
              v186 = 2080;
              v187 = v151;
              _os_log_impl(&dword_2164CC000, v149, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetInput log %zu of %zu (%s)", buf, 0x3Au);
              if (v174 < 0)
                operator delete(__p[0]);
            }
            else
            {
              ++v148;
            }

          }
          while (v148 < 0xAAAAAAAAAAAAAAABLL * ((v182 - v181) >> 3));
        }
        if (v178 != v177)
        {
          v152 = 0;
          do
          {
            v153 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v147)
                                                                                                 + 224)));
            if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
            {
              sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
              v154 = (void **)__p[0];
              if (v174 >= 0)
                v154 = __p;
              v155 = (void **)(v177 + 24 * v152);
              if (*((char *)v155 + 23) < 0)
                v155 = (void **)*v155;
              ++v152;
              *(_DWORD *)buf = 136316418;
              *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1854;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v154;
              *(_WORD *)&buf[28] = 2048;
              *(_QWORD *)&buf[30] = v152;
              v184 = 2048;
              v185 = 0xAAAAAAAAAAAAAAABLL * ((v178 - v177) >> 3);
              v186 = 2080;
              v187 = v155;
              _os_log_impl(&dword_2164CC000, v153, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetOutput log %zu of %zu (%s)", buf, 0x3Au);
              if (v174 < 0)
                operator delete(__p[0]);
            }
            else
            {
              ++v152;
            }

          }
          while (v152 < 0xAAAAAAAAAAAAAAABLL * ((v178 - v177) >> 3));
        }
      }
      else
      {
        sGenerateClusterSetInputStrings((uint64_t)v179, (uint64_t)v9);
        v124 = (Phase::Logger *)sGenerateClusterSetOutputStrings((uint64_t)v175, v8);
        v125 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v124)
                                                                                             + 224)));
        if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
        {
          sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
          if (v174 >= 0)
            v126 = __p;
          else
            v126 = (void **)__p[0];
          v127 = v179;
          if (v180 < 0)
            v127 = (void **)v179[0];
          v128 = *((_QWORD *)v10 + 18);
          v129 = v175;
          if (v176 < 0)
            v129 = (void **)v175[0];
          v130 = *((_QWORD *)v8 + 18);
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1815;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v126;
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = v127;
          v184 = 2048;
          v185 = v128;
          v186 = 2080;
          v187 = v129;
          v188 = 2048;
          v189 = v130;
          _os_log_impl(&dword_2164CC000, v125, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - cluster query output render groups array is null or empty. cluster query aborted. (%s, submix count: %zu, ...) (%s, submix count: %zu, ...)", buf, 0x44u);
          if (v174 < 0)
            operator delete(__p[0]);
        }

        if (v182 != v181)
        {
          v132 = 0;
          do
          {
            v133 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v131)
                                                                                                 + 224)));
            if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
            {
              sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
              v134 = (void **)__p[0];
              if (v174 >= 0)
                v134 = __p;
              v135 = (void **)(v181 + 24 * v132);
              if (*((char *)v135 + 23) < 0)
                v135 = (void **)*v135;
              ++v132;
              *(_DWORD *)buf = 136316418;
              *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1820;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v134;
              *(_WORD *)&buf[28] = 2048;
              *(_QWORD *)&buf[30] = v132;
              v184 = 2048;
              v185 = 0xAAAAAAAAAAAAAAABLL * ((v182 - v181) >> 3);
              v186 = 2080;
              v187 = v135;
              _os_log_impl(&dword_2164CC000, v133, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetInput log %zu of %zu (%s)", buf, 0x3Au);
              if (v174 < 0)
                operator delete(__p[0]);
            }
            else
            {
              ++v132;
            }

          }
          while (v132 < 0xAAAAAAAAAAAAAAABLL * ((v182 - v181) >> 3));
        }
        if (v178 != v177)
        {
          v136 = 0;
          do
          {
            v137 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v131)
                                                                                                 + 224)));
            if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
            {
              sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
              v138 = (void **)__p[0];
              if (v174 >= 0)
                v138 = __p;
              v139 = (void **)(v177 + 24 * v136);
              if (*((char *)v139 + 23) < 0)
                v139 = (void **)*v139;
              ++v136;
              *(_DWORD *)buf = 136316418;
              *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1826;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v138;
              *(_WORD *)&buf[28] = 2048;
              *(_QWORD *)&buf[30] = v136;
              v184 = 2048;
              v185 = 0xAAAAAAAAAAAAAAABLL * ((v178 - v177) >> 3);
              v186 = 2080;
              v187 = v139;
              _os_log_impl(&dword_2164CC000, v137, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetOutput log %zu of %zu (%s)", buf, 0x3Au);
              if (v174 < 0)
                operator delete(__p[0]);
            }
            else
            {
              ++v136;
            }

          }
          while (v136 < 0xAAAAAAAAAAAAAAABLL * ((v178 - v177) >> 3));
        }
      }
    }
    else
    {
      sGenerateClusterSetInputStrings((uint64_t)v179, (uint64_t)v9);
      v108 = (Phase::Logger *)sGenerateClusterSetOutputStrings((uint64_t)v175, v8);
      v109 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v108)
                                                                                           + 224)));
      if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
      {
        sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
        if (v174 >= 0)
          v110 = __p;
        else
          v110 = (void **)__p[0];
        v111 = v179;
        if (v180 < 0)
          v111 = (void **)v179[0];
        v112 = *((_QWORD *)v10 + 18);
        v113 = v175;
        if (v176 < 0)
          v113 = (void **)v175[0];
        v114 = *((_QWORD *)v8 + 18);
        *(_DWORD *)buf = 136316674;
        *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1788;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v110;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = v111;
        v184 = 2048;
        v185 = v112;
        v186 = 2080;
        v187 = v113;
        v188 = 2048;
        v189 = v114;
        _os_log_impl(&dword_2164CC000, v109, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - failed to submit cluster query (%s, submix count: %zu, ...) (%s, submix count: %zu, ...)", buf, 0x44u);
        if (v174 < 0)
          operator delete(__p[0]);
      }

      if (v182 != v181)
      {
        v116 = 0;
        do
        {
          v117 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v115)
                                                                                               + 224)));
          if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
          {
            sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
            v118 = (void **)__p[0];
            if (v174 >= 0)
              v118 = __p;
            v119 = (void **)(v181 + 24 * v116);
            if (*((char *)v119 + 23) < 0)
              v119 = (void **)*v119;
            ++v116;
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1793;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v118;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v116;
            v184 = 2048;
            v185 = 0xAAAAAAAAAAAAAAABLL * ((v182 - v181) >> 3);
            v186 = 2080;
            v187 = v119;
            _os_log_impl(&dword_2164CC000, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetInput log %zu of %zu (%s)", buf, 0x3Au);
            if (v174 < 0)
              operator delete(__p[0]);
          }
          else
          {
            ++v116;
          }

        }
        while (v116 < 0xAAAAAAAAAAAAAAABLL * ((v182 - v181) >> 3));
      }
      if (v178 != v177)
      {
        v120 = 0;
        do
        {
          v121 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v115)
                                                                                               + 224)));
          if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
          {
            sGenerateSpatialModelerInfoString((uint64_t)__p, *((_QWORD *)this + 733));
            v122 = (void **)__p[0];
            if (v174 >= 0)
              v122 = __p;
            v123 = (void **)(v177 + 24 * v120);
            if (*((char *)v123 + 23) < 0)
              v123 = (void **)*v123;
            ++v120;
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1799;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v122;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v120;
            v184 = 2048;
            v185 = 0xAAAAAAAAAAAAAAABLL * ((v178 - v177) >> 3);
            v186 = 2080;
            v187 = v123;
            _os_log_impl(&dword_2164CC000, v121, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetOutput log %zu of %zu (%s)", buf, 0x3Au);
            if (v174 < 0)
              operator delete(__p[0]);
          }
          else
          {
            ++v120;
          }

        }
        while (v120 < 0xAAAAAAAAAAAAAAABLL * ((v178 - v177) >> 3));
      }
    }
    *(_QWORD *)buf = &v177;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v176 < 0)
      operator delete(v175[0]);
    *(_QWORD *)buf = &v181;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v180 < 0)
      operator delete(v179[0]);
LABEL_268:
    Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(&v171);
    goto LABEL_269;
  }
  if (v6 <= 0xFFFFFFFD)
LABEL_287:
    std::terminate();
  v106 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this)
                                                                                       + 224)));
  if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
  {
    sGenerateSpatialModelerInfoString((uint64_t)v179, *((_QWORD *)this + 733));
    v107 = v180 >= 0 ? v179 : (void **)v179[0];
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2083;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v107;
    _os_log_impl(&dword_2164CC000, v106, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - unexpected cluster query status. query not finished in the update callback", buf, 0x1Cu);
    if (v180 < 0)
      operator delete(v179[0]);
  }

LABEL_269:
  v156 = a3;
  atomic_store(0, (unsigned int *)a3 + 204);
  std::shared_ptr<Phase::Job>::reset[abi:ne180100]((_QWORD *)v156 + 110);
  atomic_store(0, (unsigned int *)v156 + 230);
  Phase::Controller::RenderGroupMgr::SendChanges(v167);
}

void sub_216525380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  void *v36;

  Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(&a21);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::ClusterSetOutput<float>>(uint64_t a1)
{
  Phase::Logger *result;
  uint64_t v3;
  NSObject *v4;
  int v5;
  std::logic_error *exception;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = *(Phase::Logger **)(a1 + 120);
  if (!result || *(_DWORD *)result != 2)
  {
    v3 = a1;
    v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 384));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = **(_DWORD **)(v3 + 120);
      v7 = 136315906;
      v8 = "CvmSpatialQueryInstance.hpp";
      v9 = 1024;
      v10 = 121;
      v11 = 1024;
      v12 = 2;
      v13 = 1024;
      v14 = v5;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [nullptr == pOutput is true]: \"Bad spatial query output cast: expected type: %i, actual type: %i\"", (uint8_t *)&v7, 0x1Eu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Bad spatial query output cast: expected type: %i, actual type: %i");
  }
  return result;
}

void sub_2165256C4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sGenerateClusterSetOutputStrings(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  std::vector<std::string>::pointer end;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  std::string *v29;
  std::string *v30;
  std::string *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  std::vector<std::string>::pointer v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  std::string *v49;
  std::string *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *__p[2];
  std::string::size_type v67;
  void *v68[2];
  uint64_t v69;
  uint64_t v70;
  void *v71;
  char v72;
  _BYTE v73[152];
  std::vector<std::string> v74;
  _QWORD v75[2];
  _QWORD v76[11];
  char v77;
  uint64_t v78;
  std::__split_buffer<std::string> __v;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v75);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"type: ClusterSetOutput", 22);
  v3 = 0;
  memset(&v74, 0, sizeof(v74));
  v4 = a2[18];
  v61 = v4 / 0xA;
  v5 = MEMORY[0x24BEDB7F0];
  v56 = v4;
  if (v4 >= 0xA)
  {
    v6 = 0;
    v7 = 0;
    v64 = 0;
    v59 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v60 = (void *)*MEMORY[0x24BEDB7F0];
    v58 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v57 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v63 = v7;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v68);
      v8 = 0;
      v62 = v6;
      v9 = v64 + 9;
      v10 = v68[0];
      v11 = v6;
      do
      {
        v12 = *(_DWORD *)((char *)&v68[1] + *(v10 - 3));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"{", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"index: ", 7);
        v13 = v64 + v8;
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)", ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"send: ", 6);
        v14 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" dB", 3);
        v15 = *(_QWORD *)(a2[13] + v11);
        if (v15 == -1 || v15 >= a2[6])
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)", ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"<invalid render group index>", 28);
        }
        else
        {
          v16 = *(_QWORD *)(a2[1] + 336 * v15 + 16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)", ", 2);
          if (v16)
          {
            v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"source: ", 8);
            v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"0x", 2);
            *(_DWORD *)((char *)v18 + *(_QWORD *)(*v18 - 24) + 8) |= 0x4000u;
            v19 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, 48);
            v20 = *v19;
            *(uint64_t *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 24) = 8;
            *(_DWORD *)((char *)v19 + *(_QWORD *)(v20 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(v20 - 24) + 8) & 0xFFFFFFB5 | 8;
          }
          else
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"cluster: ", 9);
          }
          std::ostream::operator<<();
        }
        if (v13 >= v9)
          v21 = "}";
        else
          v21 = "}, ";
        if (v13 >= v9)
          v22 = 1;
        else
          v22 = 3;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)v21, v22);
        v10 = v68[0];
        *(_DWORD *)((char *)&v68[1] + *((_QWORD *)v68[0] - 3)) = v12;
        ++v8;
        v11 += 16;
      }
      while (v8 != 10);
      std::stringbuf::str();
      end = v74.__end_;
      v5 = MEMORY[0x24BEDB7F0];
      if (v74.__end_ >= v74.__end_cap_.__value_)
      {
        v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v74.__end_ - (char *)v74.__begin_) >> 3);
        v27 = v26 + 1;
        if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<char>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v74.__end_cap_.__value_ - (char *)v74.__begin_) >> 3) > v27)
          v27 = 0x5555555555555556 * (((char *)v74.__end_cap_.__value_ - (char *)v74.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v74.__end_cap_.__value_ - (char *)v74.__begin_) >> 3) >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v27;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v74.__end_cap_;
        v24 = v62;
        v3 = v64 + 10;
        if (v28)
          v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v74.__end_cap_, v28);
        else
          v29 = 0;
        v30 = v29 + v26;
        __v.__first_ = v29;
        __v.__begin_ = v30;
        __v.__end_cap_.__value_ = &v29[v28];
        v30->__r_.__value_.__r.__words[2] = v67;
        *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v67 = 0;
        *(_OWORD *)__p = 0uLL;
        __v.__end_ = v30 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v74, &__v);
        v31 = v74.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v74.__end_ = v31;
        v25 = v63;
      }
      else
      {
        v74.__end_->__r_.__value_.__r.__words[2] = v67;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v74.__end_ = end + 1;
        v24 = v62;
        v3 = v64 + 10;
        v25 = v63;
      }
      v68[0] = v60;
      *(void **)((char *)v68 + *((_QWORD *)v60 - 3)) = v59;
      v69 = v58;
      v70 = v57;
      if (v72 < 0)
        operator delete(v71);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x2199F9CD4](v73);
      v7 = v25 + 1;
      v6 = v24 + 160;
      v64 = v3;
    }
    while (v7 != v61);
  }
  v32 = v56 - 10 * v61;
  if (v32)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v68);
    if (v3 < v3 + v32)
    {
      v65 = v3 + 9;
      v33 = v68[0];
      v34 = 16 * v3;
      do
      {
        v35 = *(_DWORD *)((char *)&v68[1] + *(v33 - 3));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"{", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"index: ", 7);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)", ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"send: ", 6);
        v36 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" dB", 3);
        v37 = *(_QWORD *)(a2[13] + v34);
        if (v37 == -1 || v37 >= a2[6])
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)", ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"<invalid render group index>", 28);
        }
        else
        {
          v38 = *(_QWORD *)(a2[1] + 336 * v37 + 16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)", ", 2);
          if (v38)
          {
            v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"source: ", 8);
            v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"0x", 2);
            *(_DWORD *)((char *)v40 + *(_QWORD *)(*v40 - 24) + 8) |= 0x4000u;
            v41 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v40, 48);
            v42 = *v41;
            *(uint64_t *)((char *)v41 + *(_QWORD *)(*v41 - 24) + 24) = 8;
            *(_DWORD *)((char *)v41 + *(_QWORD *)(v42 - 24) + 8) = *(_DWORD *)((_BYTE *)v41 + *(_QWORD *)(v42 - 24) + 8) & 0xFFFFFFB5 | 8;
          }
          else
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"cluster: ", 9);
          }
          std::ostream::operator<<();
        }
        if (v3 >= v65)
          v43 = "}";
        else
          v43 = "}, ";
        if (v3 >= v65)
          v44 = 1;
        else
          v44 = 3;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)v43, v44);
        v33 = v68[0];
        *(_DWORD *)((char *)&v68[1] + *((_QWORD *)v68[0] - 3)) = v35;
        ++v3;
        v34 += 16;
        --v32;
      }
      while (v32);
    }
    std::stringbuf::str();
    v45 = v74.__end_;
    v5 = MEMORY[0x24BEDB7F0];
    if (v74.__end_ >= v74.__end_cap_.__value_)
    {
      v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v74.__end_ - (char *)v74.__begin_) >> 3);
      v47 = v46 + 1;
      if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<char>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v74.__end_cap_.__value_ - (char *)v74.__begin_) >> 3) > v47)
        v47 = 0x5555555555555556 * (((char *)v74.__end_cap_.__value_ - (char *)v74.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v74.__end_cap_.__value_ - (char *)v74.__begin_) >> 3) >= 0x555555555555555)
        v48 = 0xAAAAAAAAAAAAAAALL;
      else
        v48 = v47;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v74.__end_cap_;
      if (v48)
        v49 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v74.__end_cap_, v48);
      else
        v49 = 0;
      v50 = v49 + v46;
      __v.__first_ = v49;
      __v.__begin_ = v50;
      __v.__end_cap_.__value_ = &v49[v48];
      v50->__r_.__value_.__r.__words[2] = v67;
      *(_OWORD *)&v50->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      __v.__end_ = v50 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v74, &__v);
      v51 = v74.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v74.__end_ = v51;
    }
    else
    {
      v74.__end_->__r_.__value_.__r.__words[2] = v67;
      *(_OWORD *)&v45->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v74.__end_ = v45 + 1;
    }
    v68[0] = *(void **)v5;
    v52 = *(_QWORD *)(v5 + 72);
    *(void **)((char *)v68 + *((_QWORD *)v68[0] - 3)) = *(void **)(v5 + 64);
    v69 = v52;
    v70 = MEMORY[0x24BEDB848] + 16;
    if (v72 < 0)
      operator delete(v71);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2199F9CD4](v73);
  }
  std::stringbuf::str();
  std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string,std::vector<std::string>&,0>(a1, (__int128 *)v68, (__int128 **)&v74);
  if (SHIBYTE(v69) < 0)
    operator delete(v68[0]);
  v68[0] = &v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
  v75[0] = *(_QWORD *)v5;
  v53 = *(_QWORD *)(v5 + 72);
  *(_QWORD *)((char *)v75 + *(_QWORD *)(v75[0] - 24)) = *(_QWORD *)(v5 + 64);
  v76[0] = v53;
  v76[1] = MEMORY[0x24BEDB848] + 16;
  if (v77 < 0)
    operator delete((void *)v76[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2199F9CD4](&v78);
}

void sub_216525FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char a67;
  uint64_t v67;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v67 - 128));
  if (a28 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a29);
  a29 = &a64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a67);
  _Unwind_Resume(a1);
}

BOOL Phase::operator!=<float>(float *a1, float *a2)
{
  return *a1 != *a2
      || a1[1] != a2[1]
      || a1[2] != a2[2]
      || a1[3] != a2[3]
      || a1[4] != a2[4]
      || a1[5] != a2[5]
      || a1[6] != a2[6]
      || a1[7] != a2[7];
}

_QWORD *Phase::UniqueObjectId::str@<X0>(Phase::UniqueObjectId *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE v4[37];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  memset(v4, 0, sizeof(v4));
  uuid_unparse((const unsigned __int8 *)this, v4);
  return std::string::basic_string[abi:ne180100]<0>(a2, v4);
}

Phase::Logger *Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::RenderGroupInput<float>>(uint64_t a1)
{
  Phase::Logger *result;
  uint64_t v3;
  NSObject *v4;
  int v5;
  std::logic_error *exception;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = *(Phase::Logger **)(a1 + 112);
  if (!result || *(_DWORD *)result != 2)
  {
    v3 = a1;
    v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 384));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = **(_DWORD **)(v3 + 112);
      v7 = 136315906;
      v8 = "CvmSpatialQueryInstance.hpp";
      v9 = 1024;
      v10 = 98;
      v11 = 1024;
      v12 = 2;
      v13 = 1024;
      v14 = v5;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [nullptr == pInput is true]: \"Bad spatial query input cast: expected type: %i, actual type: %i\"", (uint8_t *)&v7, 0x1Eu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Bad spatial query input cast: expected type: %i, actual type: %i");
  }
  return result;
}

void sub_216526294(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void Phase::Controller::SpatialModelerInstance::DestroyTempSpatialGraphData(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  UniqueObjectId v9;

  for (i = *(_QWORD **)(a2 + 1000); i; i = (_QWORD *)*i)
  {
    v9 = (UniqueObjectId)*((_OWORD *)Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::RenderGroupInput<float>>(i[4])
                         + 12);
    Phase::Controller::RenderGroupMgr::GetRendererForRenderGroup((Phase::Controller::RenderGroupMgr *)(a2 + 1600), v9, &v7);
    if (v7)
      atomic_store(0, (unsigned __int8 *)(v7 + 52));
    v4 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::clear(a2 + 984);
}

uint64_t sGenerateRenderGroupInputString(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"type: RenderGroupInput", 22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"listener: ", 10);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 8) |= 0x4000u;
  v5 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, 48);
  v6 = *v5;
  *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 24) = 8;
  *(_DWORD *)((char *)v5 + *(_QWORD *)(v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v5 + *(_QWORD *)(v6 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a2 + 208);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
  if (v7)
  {
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"source: ", 8);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"0x", 2);
    *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 8) |= 0x4000u;
    v10 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, 48);
    v11 = *v10;
    *(uint64_t *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 24) = 8;
    *(_DWORD *)((char *)v10 + *(_QWORD *)(v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(v11 - 24) + 8) & 0xFFFFFFB5 | 8;
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"cluster: ", 9);
  }
  std::ostream::operator<<();
  std::stringbuf::str();
  v14[0] = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v15[0] = v12;
  v15[1] = MEMORY[0x24BEDB848] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2199F9CD4](&v17);
}

void sub_21652656C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::DirectionalMetadataOutput<float>>(uint64_t a1)
{
  Phase::Logger *result;
  uint64_t v3;
  NSObject *v4;
  int v5;
  std::logic_error *exception;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = *(Phase::Logger **)(a1 + 120);
  if (!result || *(_DWORD *)result != 3)
  {
    v3 = a1;
    v4 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 384));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = **(_DWORD **)(v3 + 120);
      v7 = 136315906;
      v8 = "CvmSpatialQueryInstance.hpp";
      v9 = 1024;
      v10 = 121;
      v11 = 1024;
      v12 = 3;
      v13 = 1024;
      v14 = v5;
      _os_log_impl(&dword_2164CC000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [nullptr == pOutput is true]: \"Bad spatial query output cast: expected type: %i, actual type: %i\"", (uint8_t *)&v7, 0x1Eu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Bad spatial query output cast: expected type: %i, actual type: %i");
  }
  return result;
}

void sub_2165266B8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sGenerateDirectionalMetadataOutputString()
{
  uint64_t v0;
  _QWORD v2[2];
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"type: DirectionalMetadataOutput", 31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"direction count: ", 17);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x24BEDB7F0];
  v0 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v3[0] = v0;
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2199F9CD4](&v5);
}

void sub_2165267C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialModelerInstance::DestroyAllTempGraphData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::clear(a2 + 776);
  v4 = Phase::Controller::SpatialModelerInstance::DestroyTempClusterGraphData(v3, a2);
  Phase::Controller::SpatialModelerInstance::DestroyTempSpatialGraphData((uint64_t)v4, a2);
}

uint64_t *Phase::Controller::SpatialModelerInstance::DestroyTempClusterGraphData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *result;

  v3 = a2 + 816;
  v4 = (uint64_t *)Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::ClusterSetInput<float>>(a2 + 816);
  std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::reset[abi:ne180100](v4 + 13);
  v4[18] = 0;
  std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100](v4 + 7);
  v4[12] = 0;
  v5 = (uint64_t *)Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::ClusterSetOutput<float>>(v3);
  std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100](v5 + 1);
  v5[6] = 0;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](v5 + 7);
  v5[12] = 0;
  result = std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100](v5 + 13);
  v5[18] = 0;
  *(_QWORD *)(a2 + 968) = *(_QWORD *)(a2 + 960);
  return result;
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

_QWORD *std::list<std::shared_ptr<Phase::Job>>::push_back(uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  result = operator new(0x20uLL);
  v5 = a2[1];
  result[2] = *a2;
  result[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *a1;
  *result = *a1;
  result[1] = a1;
  *(_QWORD *)(v8 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

void Phase::Controller::SpatialModelerInstance::BuildIRs(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  std::chrono::steady_clock::time_point v5;
  UniqueObjectId *v6;
  Phase::Controller::RenderGroupMgr *v7;
  double v8;
  _QWORD *v9;
  unint64_t v10;
  unsigned int v11;
  void *v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  double *v16;
  int v17;
  int rep;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  void *p_p;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  void *__p;
  std::__shared_weak_count *v32;
  char v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unsigned int v36;
  _BYTE buf[38];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 1008))
  {
    Phase::Controller::SpatialModelerInstance::GetLatestSubmixState((Phase::Controller::SpatialModelerInstance *)&v34, a1);
    if (v36)
    {
      v4 = v34;
      while (!*v4)
      {
        v4 += 3;
        if (v4 >= &v34[3 * v36])
          goto LABEL_33;
      }
      v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v6 = *(UniqueObjectId **)(a2 + 1000);
      if (v6)
      {
        v7 = (Phase::Controller::RenderGroupMgr *)(a2 + 1600);
        v8 = (double)v5.__d_.__rep_ / 1000000000.0;
        v9 = (_QWORD *)(a2 + 544);
        do
        {
          v10 = v6[2].mStorage[0];
          v11 = atomic_load((unsigned int *)v10);
          if (v11)
          {
            if (v11 == 3)
            {
              Phase::Controller::RenderGroupMgr::GetRendererForRenderGroup(v7, v6[1], &__p);
              v12 = __p;
              if (!__p)
              {
                v28 = v32;
                if (v32)
                {
                  p_shared_owners = (unint64_t *)&v32->__shared_owners_;
                  do
                    v30 = __ldaxr(p_shared_owners);
                  while (__stlxr(v30 - 1, p_shared_owners));
                  if (!v30)
                  {
                    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                    std::__shared_weak_count::__release_weak(v28);
                  }
                }
                break;
              }
              v13 = (_OWORD *)v6[2].mStorage[1];
              v14 = (_OWORD *)v6[3].mStorage[0];
              if (v13 != v14)
              {
                do
                {
                  v15 = v13[1];
                  *(_OWORD *)buf = *v13;
                  *(_OWORD *)&buf[16] = v15;
                  v16 = (double *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v9, buf);
                  if (!v16)
                    std::terminate();
                  v16[11] = v8;
                  v13 += 2;
                }
                while (v13 != v14);
                v12 = __p;
              }
              v17 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 120) + 4);
              v5.__d_.__rep_ = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 64))(v12);
              if (v17)
                rep = 1;
              else
                rep = v5.__d_.__rep_;
              if (rep == 1)
              {
                *(_DWORD *)buf = 2;
                *(_QWORD *)&buf[8] = v10;
                v5.__d_.__rep_ = (*(uint64_t (**)(void *, _BYTE *))(*(_QWORD *)__p + 56))(__p, buf);
              }
              v19 = v32;
              atomic_store(0, (unsigned __int8 *)__p + 52);
              if (v19)
              {
                v20 = (unint64_t *)&v19->__shared_owners_;
                do
                  v21 = __ldaxr(v20);
                while (__stlxr(v21 - 1, v20));
                if (!v21)
                {
                  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                  std::__shared_weak_count::__release_weak(v19);
                }
              }
            }
            else
            {
              v22 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v5.__d_.__rep_)
                                                                                                  + 224)));
              if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
              {
                Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)&__p, a1);
                p_p = &__p;
                if (v33 < 0)
                  p_p = __p;
                v24 = *(_QWORD *)(*(_QWORD *)(a1 + 5864) + 24);
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3384;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = p_p;
                *(_WORD *)&buf[28] = 2048;
                *(_QWORD *)&buf[30] = v24;
                _os_log_impl(&dword_2164CC000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: Invalid Spatial Query status in Build IR node for instance %llu", buf, 0x26u);
                if (v33 < 0)
                  operator delete(__p);
              }

            }
          }
          v6 = (UniqueObjectId *)v6->mStorage[0];
        }
        while (v6);
      }
    }
LABEL_33:
    v25 = v35;
    if (v35)
    {
      v26 = (unint64_t *)&v35->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
}

void sub_216526CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);

  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 Phase::Controller::SpatialModelerInstance::CopyRuntimeSettingsFrom(Phase::Controller::SpatialModelerInstance *this, __n128 *a2)
{
  uint64_t **v4;
  unsigned int v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  double InputSendLevel;
  int PlayState;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  unint64_t v19;
  __n128 result;
  _QWORD v21[2];
  UniqueObjectId v22;

  Phase::Controller::SpatialModelerInstance::ClearRegisteredSubmixState(this);
  Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::DeepCopyFrom((uint64_t)this + 8, (uint64_t)&a2->n128_i64[1]);
  v4 = (uint64_t **)*((_QWORD *)this + 6);
  v5 = *((_DWORD *)this + 16);
  v6 = &v4[3 * v5];
  if (v5)
  {
    v7 = *v4;
    if (!*v4)
    {
      v8 = v4 + 3;
      while (1)
      {
        v4 = v8;
        if (v8 >= v6)
          break;
        v8 += 3;
        v7 = *v4;
        if (*v4)
          goto LABEL_9;
      }
      v7 = 0;
    }
LABEL_9:
    v9 = (unint64_t)v6;
  }
  else
  {
    v7 = 0;
    v9 = *((_QWORD *)this + 6);
  }
  while (v4 != v6)
  {
    v10 = *v7;
    v11 = v7[1];
    v12 = (_QWORD *)(a2[404].n128_u64[1] + 120);
    v21[0] = *v7;
    v21[1] = v11;
    if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v12, v21))
    {
      InputSendLevel = Phase::Controller::SpatialSubmixRouter::GetInputSendLevel(a2[404].n128_i64[1], v10, v11);
      Phase::Controller::SpatialModelerInstance::AddInput((uint64_t)this, v10, v11, InputSendLevel);
      v22.mStorage[0] = v10;
      v22.mStorage[1] = v11;
      PlayState = Phase::Controller::SpatialSubmixRouter::GetPlayState((Phase::Controller::SpatialSubmixRouter *)a2[404].n128_u64[1], v22);
      Phase::Controller::SpatialModelerInstance::SetPlayState((uint64_t)this, v10, v11, PlayState);
    }
    v15 = v7[2];
    v16 = operator new();
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = v10;
    *(_QWORD *)(v16 + 16) = v11;
    *(_QWORD *)(v16 + 24) = v15;
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 40) = 0;
    *(_QWORD *)(v16 + 48) = 0x3FF0000000000000;
    *(_WORD *)(v16 + 56) = 0;
    *(_QWORD *)(v16 + 64) = 0;
    *(_DWORD *)(v16 + 72) = 1;
    v17 = *(_QWORD *)this;
    *(_QWORD *)(v16 + 80) = 0;
    *(_QWORD *)(v16 + 88) = v17;
    *(_QWORD *)this = v16;
    if ((unint64_t)v4 < v9)
    {
      v18 = v4 + 3;
      while (1)
      {
        v4 = v18;
        if ((unint64_t)v18 >= v9)
          break;
        v18 += 3;
        v7 = *v4;
        if (*v4)
          goto LABEL_19;
      }
      v7 = 0;
    }
LABEL_19:
    ;
  }
  Phase::Controller::SpatialSubmixRouter::CopyRuntimeSettingsFrom(*((Phase::Logger **)this + 809), (const Phase::Controller::SpatialSubmixRouter *)a2[404].n128_u64[1]);
  v19 = atomic_load(&a2[19].n128_u64[1]);
  atomic_store(v19, (unint64_t *)this + 39);
  result = a2[20];
  *((__n128 *)this + 20) = result;
  return result;
}

void Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::DeepCopyFrom(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,void *> *>>((_QWORD *)a1, *(uint64_t **)(a2 + 16), 0);
  }
  _ZN5Phase7details13SharedSlotMapINS_10Controller22SpatialModelerInstance10SubmixInfoENS_8Handle64EE12DeepCopyFromIZNS_13SharedSlotMapIS4_S5_DnE12DeepCopyFromERKS9_EUlRT_E_EEvRKS6_OSC_((uint64_t *)(a1 + 40), (unsigned int *)(a2 + 40));
}

double Phase::Controller::RenderGroupMgr::RenderGroupMgr(Phase::Controller::RenderGroupMgr *this)
{
  uint64_t v1;
  char *v2;
  double result;

  *((_OWORD *)this + 2) = xmmword_24D578F40;
  *((_OWORD *)this + 3) = *(_OWORD *)&off_24D578F50;
  *((_OWORD *)this + 4) = xmmword_24D578F60;
  *(_OWORD *)this = xmmword_24D578F20;
  *((_OWORD *)this + 1) = *(_OWORD *)&off_24D578F30;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = this;
  *((_QWORD *)this + 12) = this;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 62) = 1065353216;
  v1 = 264;
  *((_QWORD *)this + 32) = 0;
  do
  {
    v2 = (char *)this + v1;
    *(_OWORD *)v2 = 0uLL;
    *((_OWORD *)v2 + 1) = 0uLL;
    *((_DWORD *)v2 + 8) = 1065353216;
    *(_OWORD *)(v2 + 40) = 0uLL;
    *(_OWORD *)(v2 + 56) = 0uLL;
    *((_DWORD *)v2 + 18) = 1065353216;
    *((_OWORD *)v2 + 5) = 0uLL;
    *((_OWORD *)v2 + 6) = 0uLL;
    v1 += 120;
    *((_DWORD *)v2 + 28) = 1065353216;
  }
  while (v2 + 120 != (char *)this + 504);
  *((_QWORD *)this + 63) = (char *)this + 264;
  *((_QWORD *)this + 64) = (char *)this + 384;
  *((_BYTE *)this + 568) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  return result;
}

void Phase::Controller::RenderGroupMgr::~RenderGroupMgr(Phase::Controller::RenderGroupMgr *this)
{
  void *v2;
  void *v3;
  uint64_t v4;

  Phase::Controller::RenderGroupMgr::Reset(this);
  v2 = (void *)*((_QWORD *)this + 68);
  if (v2)
  {
    *((_QWORD *)this + 69) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 65);
  if (v3)
  {
    *((_QWORD *)this + 66) = v3;
    operator delete(v3);
  }
  v4 = 240;
  do
  {
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + v4 + 224);
    std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::~__hash_table((uint64_t)this + v4 + 184);
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + v4 + 144);
    v4 -= 120;
  }
  while (v4);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 216);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::~__hash_table((uint64_t)this + 176);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 136);
  Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((_QWORD *)this + 13);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (std::__shared_weak_count *)v2[4];
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = *result;
  if (*result)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 392);
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear(v2 + 384);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v2 + 16);
      result = (_QWORD *)MEMORY[0x2199F9D70](v2, 0x1022C40083BFC85);
      v2 = v3;
    }
    while (v3);
  }
  *v1 = 0;
  return result;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v2])(&v4, a1);
  *(_DWORD *)(a1 + 352) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a2 + 344);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a2 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t std::deque<double>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<Phase::SpatialModeler::Graph>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 192;
        std::allocator<Phase::SpatialModeler::Graph>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<Phase::SpatialModeler::Graph>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;

  v7 = (void **)(a2 + 168);
  std::vector<Phase::SpatialModeler::GraphNode>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](a2 + 152);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](a2 + 136);
  v3 = *(_QWORD **)(a2 + 128);
  if (v3 == (_QWORD *)(a2 + 104))
  {
    v4 = 4;
    v3 = (_QWORD *)(a2 + 104);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a2 + 96);
  if (v5 == (_QWORD *)(a2 + 72))
  {
    v6 = 4;
    v5 = (_QWORD *)(a2 + 72);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (void **)(a2 + 32);
  std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void std::vector<Phase::SpatialModeler::GraphNode>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<Phase::SpatialModeler::GraphNode>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<Phase::SpatialModeler::GraphNode>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(a2 + 88);
  if (v3 == (_QWORD *)(a2 + 64))
  {
    v4 = 4;
    v3 = (_QWORD *)(a2 + 64);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100]((uint64_t **)(a2 + 56), 0);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
}

uint64_t **std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  void *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](v2 + 10, 0);
    v3 = (void *)v2[6];
    if (v3)
    {
      v2[7] = (uint64_t)v3;
      operator delete(v3);
    }
    std::unique_ptr<Phase::SpatialModeler::QueryState,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v2 + 1);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::QueryState,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<Phase::SpatialModeler::QueryState,std::function<void ()(void *)>>::reset[abi:ne180100](a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::QueryState,std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t Phase::Controller::Parameter<double>::Initialize(uint64_t result, double a2, double a3, double a4)
{
  NSObject *v5;
  std::logic_error *exception;
  NSObject *v7;
  std::logic_error *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a2 > a3)
  {
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result) + 704));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "CvmParameter.hpp";
      v12 = 1024;
      v13 = 72;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inMinimumValue > inMaximumValue is true]: \"inMinimumValue > inMaximumValue\"", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "inMinimumValue > inMaximumValue");
  }
  if (a4 < a2 || a4 > a3)
  {
    v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)result) + 704));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "CvmParameter.hpp";
      v12 = 1024;
      v13 = 74;
      _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inDefaultValue < inMinimumValue || inDefaultValue > inMaximumValue is true]: \"inDefaultValue is out-of-range\"", (uint8_t *)&v10, 0x12u);
    }
    v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v9, "inDefaultValue is out-of-range");
  }
  *(double *)result = a2;
  *(double *)(result + 8) = a3;
  *(double *)(result + 16) = a4;
  *(double *)(result + 24) = a4;
  *(_BYTE *)(result + 32) = 0;
  return result;
}

void sub_2165279B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char a2)
{
  char *v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (*((_DWORD *)v4 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, MEMORY[0x24BEDB350]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v4 + 36) = v6;
  }
  *((_DWORD *)v4 + 36) = a2;
  return a1;
}

void sub_216527A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::reset[abi:ne180100](a1);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v3 = v1;
    v2 = result[4];
    if (!v2)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v3);
  }
  return result;
}

uint64_t std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string,std::vector<std::string>&,0>(uint64_t a1, __int128 *a2, __int128 **a3)
{
  __int128 v4;
  __int128 *v5;
  __int128 *v6;
  unint64_t v7;
  std::string *v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  std::string *v15;
  std::string *v16;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v5 = *a3;
  v6 = a3[1];
  if (v6 != *a3)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v5) >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v8 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a1 + 40, v7);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = &v8[v9];
    v15 = v8;
    v16 = v8;
    v13[0] = a1 + 40;
    v13[1] = &v15;
    v13[2] = &v16;
    v14 = 0;
    v10 = v8;
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
        v10 = v16;
      }
      else
      {
        v11 = *v5;
        v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
      }
      v5 = (__int128 *)((char *)v5 + 24);
      v16 = ++v10;
    }
    while (v5 != v6);
    v14 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
    *(_QWORD *)(a1 + 32) = v10;
  }
  return a1;
}

void sub_216527C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 8);
    for (i = **(_QWORD **)(a1 + 16); i != v3; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
  }
  return a1;
}

_QWORD *std::function<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator=(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v9 != a1)
  {
    v4 = v10;
    v5 = (_QWORD *)a1[3];
    if (v10 == v9)
    {
      if (v5 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v9);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, a1);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, a1);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v9);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v10;
      v10 = v9;
    }
    else
    {
      v10 = (_QWORD *)a1[3];
      a1[3] = v4;
    }
  }
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_19;
  }
  if (v10)
  {
    v7 = 5;
LABEL_19:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_216527ED0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::function<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::operator=(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v9 != a1)
  {
    v4 = v10;
    v5 = (_QWORD *)a1[3];
    if (v10 == v9)
    {
      if (v5 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v9);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, a1);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, a1);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v9);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v10;
      v10 = v9;
    }
    else
    {
      v10 = (_QWORD *)a1[3];
      a1[3] = v4;
    }
  }
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_19;
  }
  if (v10)
  {
    v7 = 5;
LABEL_19:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_2165280D4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
  if (v8 != a1)
  {
    v3 = v9;
    v4 = (_QWORD *)a1[3];
    if (v9 == v8)
    {
      if (v4 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, v10);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v8);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v9 = v8;
        (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, a1);
        (*(void (**)(_QWORD *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, a1);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v9;
      v9 = v8;
    }
    else
    {
      v9 = (_QWORD *)a1[3];
      a1[3] = v3;
    }
  }
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_14;
  }
  if (v9)
  {
    v6 = 5;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_216528290(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__list_imp<std::shared_ptr<Phase::Job>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::__deallocate_node(a1, *(Phase::Controller::SpatialQueryInstance ****)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::__deallocate_node(uint64_t a1, Phase::Controller::SpatialQueryInstance ***a2)
{
  Phase::Controller::SpatialQueryInstance ***v2;
  Phase::Controller::SpatialQueryInstance **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      std::unique_ptr<Phase::Controller::SpatialQueryInstance>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      v2 = (Phase::Controller::SpatialQueryInstance ***)v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<Phase::UniqueObjectId const,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

Phase::Controller::SpatialQueryInstance **std::__destroy_at[abi:ne180100]<std::pair<Phase::UniqueObjectId const,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return std::unique_ptr<Phase::Controller::SpatialQueryInstance>::reset[abi:ne180100]((Phase::Controller::SpatialQueryInstance ***)(a1 + 16), 0);
}

void std::vector<std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  Phase::Controller::SpatialQueryInstance ***v2;
  Phase::Controller::SpatialQueryInstance ***v4;
  void *v5;
  Phase::Controller::SpatialQueryInstance **v6;

  v1 = *a1;
  v2 = (Phase::Controller::SpatialQueryInstance ***)**a1;
  if (v2)
  {
    v4 = (Phase::Controller::SpatialQueryInstance ***)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = *(v4 - 3);
        if (v6)
        {
          *(v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 4;
        std::unique_ptr<Phase::Controller::SpatialQueryInstance>::reset[abi:ne180100](v4, 0);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 3));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

Phase::Controller::SpatialSubmixRouter *std::unique_ptr<Phase::Controller::SpatialSubmixRouter>::reset[abi:ne180100](Phase::Controller::SpatialSubmixRouter **a1, Phase::Controller::SpatialSubmixRouter *a2)
{
  Phase::Controller::SpatialSubmixRouter *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::SpatialSubmixRouter::~SpatialSubmixRouter(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Resize(uint64_t *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v2 = *((unsigned int *)a1 + 4);
  if (v2 < a2)
  {
    Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::AllocSlots(&v17, a2);
    v5 = v17;
    if ((_DWORD)v2)
    {
      v6 = 0;
      do
      {
        v7 = (uint64_t *)(*a1 + v6);
        std::shared_ptr<Phase::Controller::SpatialModelerInstance::SubmixInfo>::operator=[abi:ne180100]((_QWORD *)(v5 + v6), *v7, v7[1])[2] = v7[2];
        v6 += 24;
      }
      while (24 * v2 != v6);
      v8 = v2;
    }
    else
    {
      v8 = 0;
    }
    v9 = (_QWORD *)(v5 + 24 * v8);
    do
    {
      std::shared_ptr<Phase::Job>::reset[abi:ne180100](v9);
      v9[2] = 0x1FFFFFFFFLL;
      LODWORD(v2) = v2 + 1;
      v9 += 3;
    }
    while (a2 != (_DWORD)v2);
    v15 = a1 + 4;
    v16 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 4));
    v10 = *a1;
    v11 = (std::__shared_weak_count *)a1[1];
    v12 = v18;
    *a1 = v5;
    a1[1] = (uint64_t)v12;
    v17 = v10;
    v18 = v11;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v15);
    *((_DWORD *)a1 + 4) = a2;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_216528698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::AllocSlots(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = result;
  if (a2)
  {
    v4 = 24 * a2;
    v5 = (_QWORD *)operator new[]();
    *v5 = 24;
    v5[1] = a2;
    v6 = v5 + 2;
    v7 = v5 + 2;
    do
    {
      *v7 = 0;
      v7[1] = 0;
      v7 += 3;
      v4 -= 24;
    }
    while (v4);
    *v2 = v6;
    result = (_QWORD *)operator new();
    *result = &off_24D578FC8;
    result[1] = 0;
    result[2] = 0;
    result[3] = v6;
    v2[1] = result;
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  return result;
}

void sub_21652874C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v1);
  MEMORY[0x2199F9D70](v3, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

uint64_t std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 - 8);
    if (v2)
    {
      v3 = 24 * v2;
      v4 = v1 - 24;
      do
      {
        std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v4 + v3);
        v3 -= 24;
      }
      while (v3);
    }
    JUMPOUT(0x2199F9D4CLL);
  }
  return result;
}

_QWORD *std::shared_ptr<Phase::Controller::SpatialModelerInstance::SubmixInfo>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D579000;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D579000;
  a2[1] = v2;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::operator()(Phase::Logger *a1, unsigned __int8 *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  NSObject *v11;
  NSObject *v12;
  void **v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void **v17;
  uint64_t v18[2];
  uint64_t v19;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  void **v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v18[0] = (uint64_t)v18;
  v18[1] = (uint64_t)v18;
  v19 = 0;
  v4 = a3[2];
  if (v4)
  {
    v6 = *a3;
    v5 = (uint64_t *)a3[1];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    v8 = v18[0];
    *(_QWORD *)(v18[0] + 8) = v5;
    *v5 = v8;
    *(_QWORD *)(v6 + 8) = v18;
    v18[0] = v6;
    v19 = v4;
    a3[2] = 0;
  }
  v9 = *((_QWORD *)a1 + 1);
  v10 = v3 == 0;
  v11 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1)
                                                                                      + 224)));
  v12 = v11;
  if (v10)
  {
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, v9);
    if (v21 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    v23 = "CvmSpatialModelerInstance.mm";
    v24 = 1024;
    v25 = 841;
    v26 = 2080;
    v27 = v17;
    v14 = "%25s:%-5d %s: failed to start overflow graph";
    v15 = v12;
    v16 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      goto LABEL_16;
    Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, v9);
    if (v21 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    v23 = "CvmSpatialModelerInstance.mm";
    v24 = 1024;
    v25 = 836;
    v26 = 2080;
    v27 = v13;
    v14 = "%25s:%-5d %s: started overflow graph";
    v15 = v12;
    v16 = OS_LOG_TYPE_DEFAULT;
  }
  _os_log_impl(&dword_2164CC000, v15, v16, v14, buf, 0x1Cu);
  if (v21 < 0)
    operator delete(__p[0]);
LABEL_16:

  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v18);
}

void sub_216528B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(&a9);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Handle64::Set(Phase::Logger *this, unsigned int a2, uint64_t a3)
{
  NSObject *v3;
  std::logic_error *exception;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (!(_DWORD)a3)
  {
    v3 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 48));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315394;
      v6 = "Handle.hpp";
      v7 = 1024;
      v8 = 166;
      _os_log_impl(&dword_2164CC000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inGeneration > 0 is false.", (uint8_t *)&v5, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: inGeneration > 0 is false.");
  }
  *(_QWORD *)this = a2 | (unint64_t)(a3 << 32);
  return this;
}

void sub_216528C48(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    std::__shared_mutex_base::unlock_shared(*(std::__shared_mutex_base **)a1);
  return a1;
}

uint64_t Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::GetUniqueSlot(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 16) <= a2)
    return 0;
  v3 = a2;
  result = *(_QWORD *)a1 + 24 * a2;
  if (*(_DWORD *)(result + 20) != HIDWORD(a2))
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    if (*(uint64_t *)(v5 + 8) >= 1)
    {
      Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Realloc((uint64_t *)a1);
      return *(_QWORD *)a1 + 24 * v3;
    }
  }
  return result;
}

void Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Realloc(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  char v12;
  __int128 v13;

  v1 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v1)
  {
    Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::AllocSlots(&v13, v1);
    if (*((_DWORD *)a1 + 4))
    {
      v3 = 0;
      v4 = 0;
      v5 = v13;
      do
      {
        v6 = (uint64_t *)(*a1 + v3);
        std::shared_ptr<Phase::Controller::SpatialModelerInstance::SubmixInfo>::operator=[abi:ne180100]((_QWORD *)(v5 + v3), *v6, v6[1])[2] = v6[2];
        ++v4;
        v3 += 24;
      }
      while (v4 < *((unsigned int *)a1 + 4));
    }
    v11 = a1 + 4;
    v12 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 4));
    v7 = *a1;
    v8 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v13;
    *(_QWORD *)&v13 = v7;
    *((_QWORD *)&v13 + 1) = v8;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v11);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_216528DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phase::Controller::SpatialModelerInstance::SubmixInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D579048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Controller::SpatialModelerInstance::SubmixInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D579048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

uint64_t std::__shared_ptr_emplace<Phase::Controller::SpatialModelerInstance::SubmixInfo>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(a1 + 96);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t **v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t *i;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint8x8_t v26;
  unint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t *result;
  unint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  int v34;
  void *v35;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      prime = (int8x8_t)v11;
    else
      prime = (int8x8_t)v10;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_74;
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_43;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * *(_QWORD *)&prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (*(_QWORD *)&prime != v15);
      v16 = *(uint64_t ***)(a1 + 16);
      if (v16)
      {
        v17 = (unint64_t)v16[1];
        v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&prime)
            v17 %= *(_QWORD *)&prime;
        }
        else
        {
          v17 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = a1 + 16;
        for (i = *v16; *v16; i = *v16)
        {
          v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&prime)
              v23 %= *(_QWORD *)&prime;
          }
          else
          {
            v23 &= *(_QWORD *)&prime - 1;
          }
          if (v23 == v17)
          {
            v16 = (uint64_t **)i;
          }
          else
          {
            v24 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              do
              {
                v25 = v24;
                v24 = (uint64_t *)*v24;
              }
              while (v24 && *((_DWORD *)i + 4) == *((_DWORD *)v24 + 4));
              *v16 = v24;
              *v25 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v16;
              v16 = (uint64_t **)i;
              v17 = v23;
            }
          }
        }
      }
      v6 = (unint64_t)prime;
    }
    else
    {
      v35 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v35)
        operator delete(v35);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v27 = a2;
    if (v6 <= a2)
      v27 = a2 % v6;
  }
  else
  {
    v27 = (v6 - 1) & a2;
  }
  v28 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v27);
  if (!v28)
    return 0;
  v29 = 0;
  do
  {
    result = v28;
    v28 = (uint64_t *)*v28;
    if (!v28)
      break;
    v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      v32 = v28[1];
      if (v31 >= v6)
        v32 = v31 % v6;
    }
    else
    {
      v32 = v31 & (v6 - 1);
    }
    if (v32 != v27)
      break;
    v33 = v31 == a2 && *((_DWORD *)v28 + 4) == *a3;
    v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__emplace_unique_key_args<Phase::UniqueObjectId,Phase::UniqueObjectId&,Phase::Handle64&>(uint64_t a1, _QWORD *a2, _OWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v8 = 0;
  v9 = 0xCBF29CE484222325;
  do
    v9 = 0x100000001B3 * (v9 ^ *((char *)a2 + v8++));
  while (v8 != 16);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v9;
  *((_OWORD *)i + 1) = *a3;
  i[4] = *a4;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *i = *v23;
LABEL_44:
    *v23 = i;
    goto LABEL_45;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_2165293F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN5Phase7details13SharedSlotMapINS_10Controller22SpatialModelerInstance10SubmixInfoENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS4_S5_DnE9GetUniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA_(uint64_t a1, uint64_t a2)
{
  uint64_t *UniqueSlot;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;

  UniqueSlot = (uint64_t *)Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::GetUniqueSlot(a1, a2);
  v3 = (uint64_t)UniqueSlot;
  if (UniqueSlot)
  {
    v4 = UniqueSlot[1];
    if (v4)
    {
      if (*(uint64_t *)(v4 + 8) >= 1)
      {
        std::allocate_shared[abi:ne180100]<Phase::Controller::SpatialModelerInstance::SubmixInfo,std::allocator<Phase::Controller::SpatialModelerInstance::SubmixInfo>,Phase::Controller::SpatialModelerInstance::SubmixInfo&,void>(*UniqueSlot, &v9);
        std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100](v3, &v9);
        v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
        if (*((_QWORD *)&v9 + 1))
        {
          v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 - 1, v6));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }
    }
  }
  return v3;
}

uint64_t std::allocate_shared[abi:ne180100]<Phase::Controller::SpatialModelerInstance::SubmixInfo,std::allocator<Phase::Controller::SpatialModelerInstance::SubmixInfo>,Phase::Controller::SpatialModelerInstance::SubmixInfo&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x88uLL);
  result = std::__shared_ptr_emplace<Phase::Controller::SpatialModelerInstance::SubmixInfo>::__shared_ptr_emplace[abi:ne180100]<Phase::Controller::SpatialModelerInstance::SubmixInfo&,std::allocator<Phase::Controller::SpatialModelerInstance::SubmixInfo>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_2165294E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Phase::Controller::SpatialModelerInstance::SubmixInfo>::__shared_ptr_emplace[abi:ne180100]<Phase::Controller::SpatialModelerInstance::SubmixInfo&,std::allocator<Phase::Controller::SpatialModelerInstance::SubmixInfo>,0>(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24D579048;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 40) = v3;
  std::unordered_map<unsigned int,Phase::Controller::OptionalProperties::Property>::unordered_map(a1 + 96, a2 + 72);
  return a1;
}

void sub_216529558(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned int,Phase::Controller::OptionalProperties::Property>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      v8 = *((unsigned int *)v5 + 4);
      if (v7)
      {
        v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v2 = *((unsigned int *)v5 + 4);
          if (v7 <= v8)
            v2 = v8 % v7;
        }
        else
        {
          v2 = ((_DWORD)v7 - 1) & v8;
        }
        v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
        if (v10)
        {
          for (i = *v10; i; i = (uint64_t *)*i)
          {
            v12 = i[1];
            if (v12 == v8)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v8)
                goto LABEL_41;
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v7)
                  v12 %= v7;
              }
              else
              {
                v12 &= v7 - 1;
              }
              if (v12 != v2)
                break;
            }
          }
        }
      }
      v13 = operator new(0x50uLL);
      *v13 = 0;
      v13[1] = v8;
      v14 = *((_OWORD *)v5 + 1);
      v15 = *((_OWORD *)v5 + 2);
      v16 = *((_OWORD *)v5 + 4);
      *((_OWORD *)v13 + 3) = *((_OWORD *)v5 + 3);
      *((_OWORD *)v13 + 4) = v16;
      *((_OWORD *)v13 + 1) = v14;
      *((_OWORD *)v13 + 2) = v15;
      v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v18 = *(float *)(a1 + 32);
      if (!v7 || (float)(v18 * (float)v7) < v17)
      {
        v19 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v19 = 1;
        v20 = v19 | (2 * v7);
        v21 = vcvtps_u32_f32(v17 / v18);
        if (v20 <= v21)
          v22 = v21;
        else
          v22 = v20;
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v22);
        v7 = *(_QWORD *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v8)
            v2 = v8 % v7;
          else
            v2 = v8;
        }
        else
        {
          v2 = ((_DWORD)v7 - 1) & v8;
        }
      }
      v23 = *(_QWORD *)a1;
      v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v24)
      {
        *v13 = *v24;
      }
      else
      {
        *v13 = *v6;
        *v6 = v13;
        *(_QWORD *)(v23 + 8 * v2) = v6;
        if (!*v13)
          goto LABEL_40;
        v25 = *(_QWORD *)(*v13 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v25 >= v7)
            v25 %= v7;
        }
        else
        {
          v25 &= v7 - 1;
        }
        v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
      }
      *v24 = v13;
LABEL_40:
      ++*(_QWORD *)(a1 + 24);
LABEL_41:
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_2165297A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phase::Controller::SubmixSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D579080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Controller::SubmixSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D579080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199F9D70);
}

uint64_t std::__shared_ptr_emplace<Phase::Controller::SubmixSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo>>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](a1 + 24);
}

uint64_t Phase::SpatialModeler::SubmixListenerInput<float>::SubmixListenerInput(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 2;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  v6 = 0;
  v7 = 0;
  Phase::Subbands<float>::Subbands(a1 + 208, &v6, 3);
  v3 = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  do
  {
    v4 = a1 + v3;
    *(_DWORD *)(v4 + 352) = 0;
    *(_QWORD *)(v4 + 360) = 0;
    v3 += 16;
  }
  while (v3 != 128);
  *(_QWORD *)(a1 + 480) = 0;
  return a1;
}

_QWORD *std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::EntityShapeTemplate*,Phase::SpatialModeler::EntityShapeTemplate*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::EntityShapeTemplate>,Phase::SpatialModeler::EntityShapeTemplate*,Phase::SpatialModeler::EntityShapeTemplate*,Phase::SpatialModeler::EntityShapeTemplate*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216529938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::EntityShapeTemplate>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::EntityShapeTemplate>,Phase::SpatialModeler::EntityShapeTemplate*,Phase::SpatialModeler::EntityShapeTemplate*,Phase::SpatialModeler::EntityShapeTemplate*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a2 + v7;
      *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7);
      std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map(a4 + v7 + 8, a2 + v7 + 8);
      *(_DWORD *)(a4 + v7 + 48) = *(_DWORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (v8 + 56 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_216529A28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 48;
    do
    {
      std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(v4 + v2);
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

Phase::Controller::SpatialQueryInstance **std::unique_ptr<Phase::Controller::SpatialQueryInstance>::reset[abi:ne180100](Phase::Controller::SpatialQueryInstance ***a1, Phase::Controller::SpatialQueryInstance **a2)
{
  Phase::Controller::SpatialQueryInstance **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::SpatialQueryInstance::~SpatialQueryInstance(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

void std::vector<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry>>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void *std::get_temporary_buffer[abi:ne180100]<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry>>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0xFFFFFFFFFFFFFFFLL)
    v1 = 0xFFFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  while (1)
  {
    result = operator new(8 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(uint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  char *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  if (a4 >= 2)
  {
    v8 = (uint64_t *)result;
    if (a4 == 2)
    {
      v9 = *(_QWORD *)(a3 + 24);
      if (v9)
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 48))(v9, *(a2 - 1), *v8);
        if ((_DWORD)result)
        {
          v10 = *v8;
          *v8 = *(a2 - 1);
          *(a2 - 1) = v10;
        }
        return result;
      }
LABEL_38:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if ((uint64_t)a4 > 128)
    {
      v22 = (char *)a5;
      v23 = a4 >> 1;
      v24 = (uint64_t *)(result + 8 * (a4 >> 1));
      v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>((uint64_t *)result, v24, a3, v25, a5);
        v26 = (uint64_t *)&v22[8 * v23];
        result = (uint64_t)std::__stable_sort_move<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v26);
        v27 = &v22[8 * a4];
        v28 = v26;
        while (v28 != (uint64_t *)v27)
        {
          v29 = *(_QWORD *)(a3 + 24);
          if (!v29)
            goto LABEL_38;
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v29 + 48))(v29, *v28, *(_QWORD *)v22);
          if ((_DWORD)result)
            v30 = (char *)v28;
          else
            v30 = v22;
          v22 += 8 * (result ^ 1);
          v28 += result;
          *v8++ = *(_QWORD *)v30;
          if (v22 == (char *)v26)
          {
            if (v28 != (uint64_t *)v27)
            {
              v31 = 0;
              do
              {
                v8[v31] = v28[v31];
                ++v31;
              }
              while (&v28[v31] != (uint64_t *)v27);
            }
            return result;
          }
        }
        if (v22 != (char *)v26)
        {
          v32 = 0;
          do
          {
            v8[v32] = *(_QWORD *)&v22[v32 * 8];
            ++v32;
          }
          while (&v22[v32 * 8] != (char *)v26);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(result, v24, a3, v25, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v22, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>((uint64_t)v8, (char *)&v8[a4 >> 1], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v22, a6);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      v12 = (_QWORD *)(result + 8);
      if ((uint64_t *)(result + 8) != a2)
      {
        v13 = 0;
        v14 = (_QWORD *)result;
        while (1)
        {
          v15 = *(_QWORD *)(a3 + 24);
          if (!v15)
            goto LABEL_38;
          v16 = v12;
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 48))(v15, *v12, *v14);
          if ((_DWORD)result)
          {
            v17 = *v16;
            v18 = v13;
            while (1)
            {
              *(uint64_t *)((char *)v8 + v18 + 8) = *(uint64_t *)((char *)v8 + v18);
              if (!v18)
                break;
              v19 = *(_QWORD *)(a3 + 24);
              if (!v19)
                goto LABEL_38;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v19 + 48))(v19, v17, *(uint64_t *)((char *)v8 + v18 - 8));
              v18 -= 8;
              if ((result & 1) == 0)
              {
                v20 = (uint64_t *)((char *)v8 + v18 + 8);
                goto LABEL_18;
              }
            }
            v20 = v8;
LABEL_18:
            *v20 = v17;
          }
          v12 = v16 + 1;
          v13 += 8;
          v14 = v16;
          if (v16 + 1 == a2)
            return result;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(uint64_t *result, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_10:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = *(_QWORD *)(a3 + 24);
      if (v10)
      {
        v11 = a2 - 1;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 48))(v10, *(a2 - 1), *v7);
        if ((_DWORD)result)
          v12 = v11;
        else
          v12 = v7;
        *v5++ = *v12;
        if (!(_DWORD)result)
          v7 = v11;
        goto LABEL_10;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if ((uint64_t)a4 > 8)
    {
      v22 = &result[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(result, v22, a3, a4 >> 1, a5, a4 >> 1);
      result = (uint64_t *)std::__stable_sort<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v23 = &v7[a4 >> 1];
      while (v23 != a2)
      {
        v24 = *(_QWORD *)(a3 + 24);
        if (!v24)
          goto LABEL_42;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 48))(v24, *v23, *v7);
        if ((_DWORD)result)
          v25 = v23;
        else
          v25 = v7;
        v23 += result;
        v7 += result ^ 1;
        *v5++ = *v25;
        if (v7 == v22)
        {
          if (v23 != a2)
          {
            v26 = 0;
            do
            {
              v5[v26] = v23[v26];
              ++v26;
            }
            while (&v23[v26] != a2);
          }
          return result;
        }
      }
      if (v7 != v22)
      {
        v27 = 0;
        do
        {
          v5[v27] = v7[v27];
          ++v27;
        }
        while (&v7[v27] != v22);
      }
    }
    else if (result != a2)
    {
      v13 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v14 = 0;
        v15 = a5;
        while (1)
        {
          v16 = *(_QWORD *)(a3 + 24);
          if (!v16)
            goto LABEL_42;
          v17 = v15++;
          result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(v16, *v13, *v17);
          v18 = v15;
          if ((_DWORD)result)
          {
            v17[1] = *v17;
            v18 = v5;
            if (v17 != v5)
            {
              v19 = v14;
              while (1)
              {
                v20 = *(_QWORD *)(a3 + 24);
                if (!v20)
                  goto LABEL_42;
                result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v20 + 48))(v20, *v13, *(uint64_t *)((char *)v5 + v19 - 8));
                if (!(_DWORD)result)
                  break;
                *(uint64_t *)((char *)v5 + v19) = *(uint64_t *)((char *)v5 + v19 - 8);
                v19 -= 8;
                if (!v19)
                {
                  v18 = v5;
                  goto LABEL_25;
                }
              }
              v18 = (uint64_t *)((char *)v5 + v19);
            }
          }
LABEL_25:
          v21 = *v13++;
          *v18 = v21;
          v14 += 8;
          if (v13 == a2)
            return result;
        }
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(uint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  BOOL v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v68;
  _BYTE v69[24];
  _BYTE *v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v68 = a6;
  if (!a6)
    return result;
  v11 = (char *)result;
  while (a5 > a8 && v68 > a8)
  {
    if (!a5)
      return result;
    v12 = 0;
    v13 = -a5;
    while (1)
    {
      v14 = *(_QWORD *)(a4 + 24);
      if (!v14)
        std::__throw_bad_function_call[abi:ne180100]();
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 48))(v14, *(_QWORD *)a2, *(_QWORD *)&v11[v12]);
      if ((result & 1) != 0)
        break;
      v12 += 8;
      if (__CFADD__(v13++, 1))
        return result;
    }
    if (-v13 < v68)
    {
      if (v68 >= 0)
        v16 = v68;
      else
        v16 = v68 + 1;
      v63 = v16 >> 1;
      v17 = &a2[8 * (v16 >> 1)];
      v18 = a2;
      if (a2 - v11 != v12)
      {
        v19 = (a2 - v11 - v12) >> 3;
        v18 = &v11[v12];
        do
        {
          v20 = *(_QWORD *)(a4 + 24);
          if (!v20)
            std::__throw_bad_function_call[abi:ne180100]();
          v21 = &v18[8 * (v19 >> 1)];
          if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v20 + 48))(v20, *(_QWORD *)v17, *(_QWORD *)v21))
          {
            v19 >>= 1;
          }
          else
          {
            v18 = v21 + 8;
            v19 += ~(v19 >> 1);
          }
        }
        while (v19);
      }
      v22 = (v18 - v11 - v12) >> 3;
      goto LABEL_44;
    }
    if (v13 == -1)
    {
      v61 = *(_QWORD *)&v11[v12];
      *(_QWORD *)&v11[v12] = *(_QWORD *)a2;
      *(_QWORD *)a2 = v61;
      return result;
    }
    if (v13 <= 0)
      v23 = -v13;
    else
      v23 = 1 - v13;
    std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v69, a4);
    v22 = v23 >> 1;
    v18 = &v11[8 * v22 + v12];
    v17 = a2;
    if (a2 != a3)
    {
      v64 = v22;
      v24 = (a3 - a2) >> 3;
      v17 = a2;
      do
      {
        if (!v70)
          std::__throw_bad_function_call[abi:ne180100]();
        v25 = &v17[8 * (v24 >> 1)];
        v26 = (*(uint64_t (**)(_BYTE *, _QWORD, _QWORD))(*(_QWORD *)v70 + 48))(v70, *(_QWORD *)v25, *(_QWORD *)v18);
        if (v26)
          v24 += ~(v24 >> 1);
        else
          v24 >>= 1;
        if (v26)
          v17 = v25 + 8;
      }
      while (v24);
      v22 = v64;
    }
    v27 = v70;
    if (v70 == v69)
    {
      v27 = v69;
      v28 = 4;
      goto LABEL_42;
    }
    if (v70)
    {
      v28 = 5;
LABEL_42:
      (*(void (**)(void))(*v27 + 8 * v28))();
    }
    v63 = (v17 - a2) >> 3;
LABEL_44:
    if (v18 == a2)
    {
      a2 = v17;
    }
    else
    {
      v29 = v17 - a2;
      if (v17 == a2)
      {
        a2 = v18;
      }
      else
      {
        v30 = v18 + 8;
        if (v18 + 8 == a2)
        {
          v35 = v22;
          v36 = *(_QWORD *)v18;
          memmove(v18, a2, v17 - a2);
          a2 = &v18[v29];
          *(_QWORD *)&v18[v29] = v36;
          v22 = v35;
        }
        else
        {
          v31 = a2 + 8;
          if (a2 + 8 == v17)
          {
            v37 = *((_QWORD *)v17 - 1);
            a2 = v18 + 8;
            if (v17 - 8 != v18)
              memmove(v18 + 8, v18, v17 - 8 - v18);
            *(_QWORD *)v18 = v37;
          }
          else
          {
            v32 = (a2 - v18) >> 3;
            if (v32 == v29 >> 3)
            {
              do
              {
                v33 = *((_QWORD *)v30 - 1);
                *((_QWORD *)v30 - 1) = *((_QWORD *)v31 - 1);
                *((_QWORD *)v31 - 1) = v33;
                if (v30 == a2)
                  break;
                v30 += 8;
                v34 = v31 == v17;
                v31 += 8;
              }
              while (!v34);
            }
            else
            {
              v38 = v29 >> 3;
              v39 = (a2 - v18) >> 3;
              do
              {
                v40 = v39;
                v39 = v38;
                v38 = v40 % v38;
              }
              while (v38);
              if (v39)
              {
                v41 = &v18[8 * v39];
                do
                {
                  v43 = *((_QWORD *)v41 - 1);
                  v41 -= 8;
                  v42 = v43;
                  v44 = &v41[8 * v32];
                  v45 = v41;
                  do
                  {
                    v46 = v44;
                    *(_QWORD *)v45 = *(_QWORD *)v44;
                    v47 = &v44[8 * v32];
                    v48 = __OFSUB__(v32, (v17 - v44) >> 3);
                    v50 = v32 - ((v17 - v44) >> 3);
                    v49 = (v50 < 0) ^ v48;
                    v44 = &v18[8 * v50];
                    if (v49)
                      v44 = v47;
                    v45 = v46;
                  }
                  while (v44 != v41);
                  *(_QWORD *)v46 = v42;
                }
                while (v41 != v18);
              }
              a2 = &v18[8 * (v29 >> 3)];
            }
          }
        }
      }
    }
    a5 = -v22 - v13;
    v51 = v68 - v63;
    if (v22 + v63 >= v68 - (v22 + v63) - v13)
    {
      result = std::__inplace_merge<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(a2, v17, a3, a4, -v22 - v13, v68 - v63, a7, a8);
      a3 = a2;
      a2 = v18;
      v11 += v12;
      v51 = v63;
      a5 = v22;
    }
    else
    {
      result = std::__inplace_merge<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(&v11[v12], v18, a2, a4, v22, v63, a7, a8);
      v11 = a2;
      a2 = v17;
    }
    v68 = v51;
    if (!v51)
      return result;
  }
  if (a5 <= v68)
  {
    if (v11 != a2)
    {
      v57 = 0;
      do
      {
        *(_QWORD *)&a7[v57] = *(_QWORD *)&v11[v57];
        v57 += 8;
      }
      while (&v11[v57] != a2);
      if (v57)
      {
        v58 = a7;
        while (a2 != a3)
        {
          v59 = *(_QWORD *)(a4 + 24);
          if (!v59)
            std::__throw_bad_function_call[abi:ne180100]();
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v59 + 48))(v59, *(_QWORD *)a2, *(_QWORD *)v58);
          if ((_DWORD)result)
            v60 = a2;
          else
            v60 = v58;
          a2 += 8 * result;
          v58 += 8 * (result ^ 1);
          *(_QWORD *)v11 = *(_QWORD *)v60;
          v11 += 8;
          if (&a7[v57] == v58)
            return result;
        }
        return (uint64_t)memmove(v11, v58, a7 - v58 + v57);
      }
    }
  }
  else if (a3 != a2)
  {
    v52 = 0;
    do
    {
      *(_QWORD *)&a7[v52] = *(_QWORD *)&a2[v52];
      v52 += 8;
    }
    while (&a2[v52] != a3);
    if (v52)
    {
      v53 = &a7[v52];
      v54 = a3 - 8;
      while (a2 != v11)
      {
        v55 = *(_QWORD *)(a4 + 24);
        if (!v55)
          std::__throw_bad_function_call[abi:ne180100]();
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v55 + 48))(v55, *((_QWORD *)v53 - 1), *((_QWORD *)a2 - 1));
        if ((_DWORD)result)
          v56 = a2;
        else
          v56 = v53;
        if ((_DWORD)result)
          a2 -= 8;
        else
          v53 -= 8;
        *(_QWORD *)v54 = *((_QWORD *)v56 - 1);
        v54 -= 8;
        if (v53 == a7)
          return result;
      }
      v62 = 0;
      do
      {
        *(_QWORD *)&v54[v62] = *(_QWORD *)&v53[v62 - 8];
        v62 -= 8;
      }
      while (&v53[v62] != a7);
    }
  }
  return result;
}

void sub_21652A5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v20;
  uint64_t v21;

  v20 = a19;
  if (a19 == &a16)
  {
    v21 = 4;
    v20 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SubmitCullQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0::operator() const(Phase::SpatialModeler::PriorityQueueEntry &,Phase::Controller::SpatialModelerInstance::SubmixInfo const*)::{lambda(Phase::SpatialModeler::Query &)#1},std::allocator<Phase::Controller::SpatialModelerInstance::SubmitCullQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0::operator() const(Phase::SpatialModeler::PriorityQueueEntry &,Phase::Controller::SpatialModelerInstance::SubmixInfo const*)::{lambda(Phase::SpatialModeler::Query &)#1}>,void ()(Phase::SpatialModeler::Query &)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SubmitCullQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0::operator() const(Phase::SpatialModeler::PriorityQueueEntry &,Phase::Controller::SpatialModelerInstance::SubmixInfo const*)::{lambda(Phase::SpatialModeler::Query &)#1},std::allocator<Phase::Controller::SpatialModelerInstance::SubmitCullQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0::operator() const(Phase::SpatialModeler::PriorityQueueEntry &,Phase::Controller::SpatialModelerInstance::SubmixInfo const*)::{lambda(Phase::SpatialModeler::Query &)#1}>,void ()(Phase::SpatialModeler::Query &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24D5790B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SubmitCullQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0::operator() const(Phase::SpatialModeler::PriorityQueueEntry &,Phase::Controller::SpatialModelerInstance::SubmixInfo const*)::{lambda(Phase::SpatialModeler::Query &)#1},std::allocator<Phase::Controller::SpatialModelerInstance::SubmitCullQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0::operator() const(Phase::SpatialModeler::PriorityQueueEntry &,Phase::Controller::SpatialModelerInstance::SubmixInfo const*)::{lambda(Phase::SpatialModeler::Query &)#1}>,void ()(Phase::SpatialModeler::Query &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D5790B8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SubmitCullQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0::operator() const(Phase::SpatialModeler::PriorityQueueEntry &,Phase::Controller::SpatialModelerInstance::SubmixInfo const*)::{lambda(Phase::SpatialModeler::Query &)#1},std::allocator<Phase::Controller::SpatialModelerInstance::SubmitCullQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0::operator() const(Phase::SpatialModeler::PriorityQueueEntry &,Phase::Controller::SpatialModelerInstance::SubmixInfo const*)::{lambda(Phase::SpatialModeler::Query &)#1}>,void ()(Phase::SpatialModeler::Query &)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  Phase::Logger *v32;
  NSObject *v33;
  uint64_t v34;
  void **v35;
  void **v36;
  int v37;
  void **v38;
  void **v39;
  std::error_code *p_p;
  unint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  Phase::Logger *v45;
  NSObject *v46;
  void **v47;
  void **v48;
  int v49;
  void **v50;
  void **v51;
  std::error_code *v52;
  std::error_code v53;
  std::error_code __p;
  char v55;
  void *v56[2];
  char v57;
  void *v58[2];
  char v59;
  void *v60[2];
  char v61;
  _BYTE buf[18];
  __int16 v63;
  void **v64;
  __int16 v65;
  void **v66;
  __int16 v67;
  void **v68;
  __int16 v69;
  std::error_code *v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  v1 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = atomic_load((unsigned int *)v1);
  if (v5 == 5)
  {
    *(_OWORD *)buf = *(_OWORD *)v3;
    Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::AddCommand<Phase::UniqueObjectId>((unint64_t *)(v4 + 472), 2, buf);
    *(_OWORD *)buf = *(_OWORD *)v3;
    Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::AddCommand<Phase::UniqueObjectId>((unint64_t *)(v4 + 720), 2, buf);
    *(_BYTE *)(v3 + 48) = 0;
    if (!*(_BYTE *)(v3 + 49))
    {
      v12 = *(_QWORD *)(v2 + 6472);
      v13 = Phase::Controller::RouterCommand::NotifyCulled(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), 1);
      v14 = (unint64_t *)(v12 + 32);
      v15 = atomic_load((unint64_t *)(v12 + 32));
      *(_QWORD *)(v13 + 40) = v15;
      while (1)
      {
        v16 = __ldaxr(v14);
        if (v16 != v15)
          break;
        if (!__stlxr(v13, v14))
          goto LABEL_34;
      }
      __clrex();
      do
      {
        *(_QWORD *)(v13 + 40) = v16;
        while (1)
        {
          v28 = __ldaxr(v14);
          if (v28 != v16)
            break;
          if (!__stlxr(v13, v14))
          {
            v29 = 1;
            goto LABEL_33;
          }
        }
        v29 = 0;
        __clrex();
LABEL_33:
        v16 = v28;
      }
      while (!v29);
LABEL_34:
      *(_BYTE *)(v3 + 49) = 1;
    }
    Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::SubmixListenerInput<float>>(v1);
    Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::CullabilityOutput<float>>(v1);
  }
  else if (v5 == 4)
  {
    *(_OWORD *)buf = *(_OWORD *)v3;
    Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::AddCommand<Phase::UniqueObjectId>((unint64_t *)(v4 + 472), 2, buf);
    *(_OWORD *)buf = *(_OWORD *)v3;
    Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::AddCommand<Phase::UniqueObjectId>((unint64_t *)(v4 + 720), 2, buf);
    *(_BYTE *)(v3 + 48) = 0;
    if (!*(_BYTE *)(v3 + 49))
    {
      v17 = *(_QWORD *)(v2 + 6472);
      v18 = Phase::Controller::RouterCommand::NotifyCulled(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), 1);
      v19 = (unint64_t *)(v17 + 32);
      v20 = atomic_load((unint64_t *)(v17 + 32));
      *(_QWORD *)(v18 + 40) = v20;
      while (1)
      {
        v21 = __ldaxr(v19);
        if (v21 != v20)
          break;
        if (!__stlxr(v18, v19))
          goto LABEL_43;
      }
      __clrex();
      do
      {
        *(_QWORD *)(v18 + 40) = v21;
        while (1)
        {
          v30 = __ldaxr(v19);
          if (v30 != v21)
            break;
          if (!__stlxr(v18, v19))
          {
            v31 = 1;
            goto LABEL_42;
          }
        }
        v31 = 0;
        __clrex();
LABEL_42:
        v21 = v30;
      }
      while (!v31);
LABEL_43:
      *(_BYTE *)(v3 + 49) = 1;
    }
    Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::SubmixListenerInput<float>>(v1);
    v32 = Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::CullabilityOutput<float>>(v1);
    v33 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v32)
                                                                                        + 224)));
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v34 = *(_QWORD *)(v2 + 5864);
      v35 = v60;
      sGenerateSpatialModelerInfoString((uint64_t)v60, v34);
      if (v61 < 0)
        v35 = (void **)v60[0];
      sGenerateSubmixListenerInputString();
      if (v59 >= 0)
        v36 = v58;
      else
        v36 = (void **)v58[0];
      sGenerateCullabilityOutputString();
      v37 = v57;
      v38 = (void **)v56[0];
      v53 = *(std::error_code *)(v1 + 48);
      sGenerateErrorCodeString(&__p, &v53);
      v39 = v56;
      if (v37 < 0)
        v39 = v38;
      if (v55 >= 0)
        p_p = &__p;
      else
        p_p = *(std::error_code **)&__p.__val_;
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1499;
      v63 = 2080;
      v64 = v35;
      v65 = 2080;
      v66 = v36;
      v67 = 2080;
      v68 = v39;
      v69 = 2080;
      v70 = p_p;
      _os_log_impl(&dword_2164CC000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - cull query failed. submix will be treated as inaudible. (%s) (%s (%s)", buf, 0x3Au);
      if (v55 < 0)
        operator delete(*(void **)&__p.__val_);
      if (v57 < 0)
        operator delete(v56[0]);
      if (v59 < 0)
        operator delete(v58[0]);
      if (v61 < 0)
        operator delete(v60[0]);
    }

  }
  else
  {
    v6 = a1[2];
    if (v5 != 3)
    {
      Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::SubmixListenerInput<float>>(v6);
      v45 = Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::CullabilityOutput<float>>(v1);
      v46 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v45)
                                                                                          + 224)));
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        v47 = v60;
        sGenerateSpatialModelerInfoString((uint64_t)v60, *(_QWORD *)(v2 + 5864));
        if (v61 < 0)
          v47 = (void **)v60[0];
        sGenerateSubmixListenerInputString();
        if (v59 >= 0)
          v48 = v58;
        else
          v48 = (void **)v58[0];
        sGenerateCullabilityOutputString();
        v49 = v57;
        v50 = (void **)v56[0];
        v53 = *(std::error_code *)(v1 + 48);
        sGenerateErrorCodeString(&__p, &v53);
        v51 = v56;
        if (v49 < 0)
          v51 = v50;
        if (v55 >= 0)
          v52 = &__p;
        else
          v52 = *(std::error_code **)&__p.__val_;
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1543;
        v63 = 2080;
        v64 = v47;
        v65 = 2080;
        v66 = v48;
        v67 = 2080;
        v68 = v51;
        v69 = 2080;
        v70 = v52;
        _os_log_impl(&dword_2164CC000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - unexpected cull query status. we are about to force a crash. (%s) (%s (%s)", buf, 0x3Au);
        if (v55 < 0)
          operator delete(*(void **)&__p.__val_);
        if (v57 < 0)
          operator delete(v56[0]);
        if (v59 < 0)
          operator delete(v58[0]);
        if (v61 < 0)
          operator delete(v60[0]);
      }

      std::terminate();
    }
    if (*((float *)Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::CullabilityOutput<float>>(v6)
         + 2) >= 1.0)
    {
      if (*(_BYTE *)(v3 + 48))
      {
        *(_OWORD *)buf = *(_OWORD *)v3;
        Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::AddCommand<Phase::UniqueObjectId>((unint64_t *)(v4 + 472), 2, buf);
        *(_OWORD *)buf = *(_OWORD *)v3;
        Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::AddCommand<Phase::UniqueObjectId>((unint64_t *)(v4 + 720), 2, buf);
        *(_BYTE *)(v3 + 48) = 0;
      }
      if (!*(_BYTE *)(v3 + 49))
      {
        v22 = *(_QWORD *)(v2 + 6472);
        v23 = Phase::Controller::RouterCommand::NotifyCulled(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), 1);
        v24 = (unint64_t *)(v22 + 32);
        v25 = atomic_load((unint64_t *)(v22 + 32));
        *(_QWORD *)(v23 + 40) = v25;
        while (1)
        {
          v26 = __ldaxr(v24);
          if (v26 != v25)
            break;
          if (!__stlxr(v23, v24))
          {
            v27 = 1;
            goto LABEL_75;
          }
        }
        v27 = 0;
        __clrex();
LABEL_75:
        if ((v27 & 1) == 0)
        {
          do
          {
            *(_QWORD *)(v23 + 40) = v26;
            while (1)
            {
              v43 = __ldaxr(v24);
              if (v43 != v26)
                break;
              if (!__stlxr(v23, v24))
              {
                v44 = 1;
                goto LABEL_81;
              }
            }
            v44 = 0;
            __clrex();
LABEL_81:
            v26 = v43;
          }
          while (!v44);
        }
        *(_BYTE *)(v3 + 49) = 1;
      }
    }
    else
    {
      if (*(_BYTE *)(v3 + 49))
      {
        v7 = *(_QWORD *)(v2 + 6472);
        v8 = Phase::Controller::RouterCommand::NotifyCulled(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), 0);
        v9 = (unint64_t *)(v7 + 32);
        v10 = atomic_load((unint64_t *)(v7 + 32));
        *(_QWORD *)(v8 + 40) = v10;
        while (1)
        {
          v11 = __ldaxr(v9);
          if (v11 != v10)
            break;
          if (!__stlxr(v8, v9))
            goto LABEL_71;
        }
        __clrex();
        do
        {
          *(_QWORD *)(v8 + 40) = v11;
          while (1)
          {
            v41 = __ldaxr(v9);
            if (v41 != v11)
              break;
            if (!__stlxr(v8, v9))
            {
              v42 = 1;
              goto LABEL_70;
            }
          }
          v42 = 0;
          __clrex();
LABEL_70:
          v11 = v41;
        }
        while (!v42);
LABEL_71:
        *(_BYTE *)(v3 + 49) = 1;
      }
      *(_BYTE *)(v3 + 49) = 0;
      if (!*(_BYTE *)(v3 + 48))
      {
        Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::AddCommand<Phase::SpatialModeler::PriorityQueueEntry>((unint64_t *)(v4 + 472), 1, (_OWORD *)v3);
        *(_BYTE *)(v3 + 48) = 1;
      }
    }
  }
  *(double *)(v3 + 56) = (double)std::chrono::steady_clock::now().__d_.__rep_ / 1000000000.0;
  atomic_store(0, (unsigned int *)v1);
  std::shared_ptr<Phase::Job>::reset[abi:ne180100]((_QWORD *)(v1 + 64));
  atomic_store(0, (unsigned int *)(v1 + 104));
}

void sub_21652AD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);

  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>>>::__erase_unique<Phase::UniqueObjectId>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1, a2);
  if (result)
    return (uint64_t *)std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(a1, result);
  return result;
}

_QWORD *Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(Phase::Logger *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  NSObject *v15;
  std::logic_error *exception;
  _BYTE v17[18];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v15 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 112));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v17 = 136315394;
      *(_QWORD *)&v17[4] = "ManagedPtr.hpp";
      *(_WORD *)&v17[12] = 1024;
      *(_DWORD *)&v17[14] = 229;
      _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v17, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  v7 = (char *)Phase::SystemAllocator::Alloc(*(Phase::SystemAllocator **)a3, (Phase::Logger *)(304 * **(_QWORD **)(a3 + 8)), **(std::align_val_t **)(a3 + 16));
  v8 = &v7[304 * a2];
  v9 = v7;
  do
  {
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *(_QWORD *)v17 = 0;
    *(_DWORD *)&v17[8] = 0;
    Phase::Subbands<float>::Subbands((uint64_t)(v9 + 16), v17, 3);
    v10 = 0;
    *((_QWORD *)v9 + 18) = 0;
    v9[152] = 0;
    do
    {
      v11 = &v9[v10];
      *((_DWORD *)v11 + 40) = 0;
      *((_QWORD *)v11 + 21) = 0;
      v10 += 16;
    }
    while (v10 != 128);
    *((_QWORD *)v9 + 36) = -1;
    *((_QWORD *)v9 + 37) = 0;
    v9 += 304;
  }
  while (v9 != v8);
  v12 = *a4;
  *(_QWORD *)v17 = &off_24D579100;
  *(_QWORD *)&v17[8] = v12;
  v18 = v17;
  *(_QWORD *)a1 = v7;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)a1 + 8, (uint64_t)v17);
  result = v18;
  if (v18 == v17)
  {
    v14 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void sub_21652AFF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *Phase::SystemAllocator::Alloc(Phase::SystemAllocator *this, Phase::Logger *a2, std::align_val_t a3)
{
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  Phase::Logger *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (!a3)
      return operator new((size_t)a2);
    if ((a3 & (a3 - 1)) == 0)
      return operator new((size_t)a2, a3);
    v5 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 176));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "SystemAllocator.hpp";
      v8 = 1024;
      v9 = 47;
      v10 = 2048;
      v11 = a2;
      _os_log_impl(&dword_2164CC000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Error allocating memory - alignment must be power of two. Alignment requested %zu", (uint8_t *)&v6, 0x1Cu);
    }
  }
  return 0;
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D579100;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D579100;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  operator delete(*a2);
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    v8 = v5;
    v6 = a1[4];
    if (!v6)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v8);
  }
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void std::vector<Phase::UniqueObjectId>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<Phase::UniqueObjectId const,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::find<Phase::UniqueObjectId>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;

  v3 = 0;
  v4 = 0xCBF29CE484222325;
  do
    v4 = 0x100000001B3 * (v4 ^ *((char *)a3 + v3++));
  while (v3 != 16);
  if (!a2)
    return 0;
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v4;
    if (v4 >= a2)
      v6 = v4 % a2;
  }
  else
  {
    v6 = v4 & (a2 - 1);
  }
  v7 = *(_QWORD **)(a1 + 8 * v6);
  if (!v7)
    return 0;
  result = (_QWORD *)*v7;
  if (*v7)
  {
    do
    {
      v9 = result[1];
      if (v9 == v4)
      {
        if (result[2] == *a3 && result[3] == a3[1])
          return result;
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= a2)
            v9 %= a2;
        }
        else
        {
          v9 &= a2 - 1;
        }
        if (v9 != v6)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SubmitSpatialQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::SubmitSpatialQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0>,void ()(Phase::SpatialModeler::Query &)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SubmitSpatialQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::SubmitSpatialQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0>,void ()(Phase::SpatialModeler::Query &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24D579148;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SubmitSpatialQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::SubmitSpatialQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0>,void ()(Phase::SpatialModeler::Query &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D579148;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SubmitSpatialQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::SubmitSpatialQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0>,void ()(Phase::SpatialModeler::Query &)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  Phase::Logger *v6;
  uint64_t updated;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  NSObject *v27;
  void ***v28;
  void **v29;
  Phase::Logger *v30;
  Phase::Logger *v31;
  NSObject *v32;
  uint64_t v33;
  void ***v34;
  void *v35;
  int v36;
  void **v37;
  void **v38;
  std::error_code *p_p;
  Phase::Logger *v40;
  Phase::Logger *v41;
  uint64_t v42;
  void ***v43;
  void *v44;
  int v45;
  void **v46;
  void **v47;
  std::error_code *v48;
  uint64_t v49;
  Phase::Logger *v50;
  Phase::Logger *v51;
  NSObject *v52;
  uint64_t v53;
  void ***v54;
  void *v55;
  int v56;
  void **v57;
  void **v58;
  std::error_code *v59;
  std::error_code v60;
  std::error_code __p;
  char v62;
  void *v63;
  int v64;
  char v65;
  __int128 v66;
  void *v67;
  float v68;
  char v69;
  _BYTE buf[20];
  void *v71;
  __int16 v72;
  void *v73;
  __int16 v74;
  void **v75;
  __int16 v76;
  std::error_code *v77;
  void **v78;
  float v79;
  char v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 32);
  v66 = *(_OWORD *)(a1 + 16);
  v3 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::find<Phase::UniqueObjectId>(*(_QWORD *)(v2 + 984), *(_QWORD *)(v2 + 992), &v66);
  if (!v3)
  {
    v27 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                        + 224)));
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      sGenerateSpatialModelerInfoString((uint64_t)&v78, *(_QWORD *)(v1 + 5864));
      v29 = v80 >= 0 ? (void **)&v78 : v78;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2416;
      *(_WORD *)&buf[18] = 2080;
      v71 = v29;
      _os_log_impl(&dword_2164CC000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - invalid spatial query in finish callback", buf, 0x1Cu);
      if (v80 < 0)
        operator delete(v78);
    }
    goto LABEL_40;
  }
  v4 = v3;
  v5 = atomic_load((unsigned int *)v3[4]);
  if (v5 == 5)
  {
    v30 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::RenderGroupInput<float>>(v3[4]);
    v31 = Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::DirectionalMetadataOutput<float>>(v4[4]);
    v32 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v31)
                                                                                        + 224)));
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v33 = *(_QWORD *)(v1 + 5864);
      v34 = &v78;
      sGenerateSpatialModelerInfoString((uint64_t)&v78, v33);
      if (v80 < 0)
        v34 = (void ***)v78;
      sGenerateRenderGroupInputString((uint64_t)&v67, (uint64_t)v30);
      if (v69 >= 0)
        v35 = &v67;
      else
        v35 = v67;
      sGenerateDirectionalMetadataOutputString();
      v36 = v65;
      v37 = (void **)v63;
      v60 = *(std::error_code *)(v4[4] + 48);
      sGenerateErrorCodeString(&__p, &v60);
      v38 = &v63;
      if (v36 < 0)
        v38 = v37;
      if (v62 >= 0)
        p_p = &__p;
      else
        p_p = *(std::error_code **)&__p.__val_;
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2504;
      *(_WORD *)&buf[18] = 2080;
      v71 = v34;
      v72 = 2080;
      v73 = v35;
      v74 = 2080;
      v75 = v38;
      v76 = 2080;
      v77 = p_p;
      _os_log_impl(&dword_2164CC000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - spatial query failed (%s) (%s) (%s)", buf, 0x3Au);
      if (v62 < 0)
        operator delete(*(void **)&__p.__val_);
      if (v65 < 0)
        operator delete(v63);
      if (v69 < 0)
        operator delete(v67);
      if (v80 < 0)
        operator delete(v78);
    }
    goto LABEL_87;
  }
  if (v5 == 4)
  {
    v40 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::RenderGroupInput<float>>(v3[4]);
    v41 = Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::DirectionalMetadataOutput<float>>(v4[4]);
    v32 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v41)
                                                                                        + 224)));
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v42 = *(_QWORD *)(v1 + 5864);
      v43 = &v78;
      sGenerateSpatialModelerInfoString((uint64_t)&v78, v42);
      if (v80 < 0)
        v43 = (void ***)v78;
      sGenerateRenderGroupInputString((uint64_t)&v67, (uint64_t)v40);
      if (v69 >= 0)
        v44 = &v67;
      else
        v44 = v67;
      sGenerateDirectionalMetadataOutputString();
      v45 = v65;
      v46 = (void **)v63;
      v60 = *(std::error_code *)(v4[4] + 48);
      sGenerateErrorCodeString(&__p, &v60);
      v47 = &v63;
      if (v45 < 0)
        v47 = v46;
      if (v62 >= 0)
        v48 = &__p;
      else
        v48 = *(std::error_code **)&__p.__val_;
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2486;
      *(_WORD *)&buf[18] = 2080;
      v71 = v43;
      v72 = 2080;
      v73 = v44;
      v74 = 2080;
      v75 = v47;
      v76 = 2080;
      v77 = v48;
      _os_log_impl(&dword_2164CC000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - spatial query failed (%s) (%s) (%s)", buf, 0x3Au);
      if (v62 < 0)
        operator delete(*(void **)&__p.__val_);
      if (v65 < 0)
        operator delete(v63);
      if (v69 < 0)
        operator delete(v67);
      if (v80 < 0)
        operator delete(v78);
    }
LABEL_87:

    v49 = v4[4];
    atomic_store(0, (unsigned int *)v49);
    std::shared_ptr<Phase::Job>::reset[abi:ne180100]((_QWORD *)(v49 + 64));
    atomic_store(0, (unsigned int *)(v49 + 104));
    v4[6] = v4[5];
    return;
  }
  if (v5 != 3)
  {
    v50 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::RenderGroupInput<float>>(v3[4]);
    v51 = Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::DirectionalMetadataOutput<float>>(v4[4]);
    v52 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v51)
                                                                                        + 224)));
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      v53 = *(_QWORD *)(v1 + 5864);
      v54 = &v78;
      sGenerateSpatialModelerInfoString((uint64_t)&v78, v53);
      if (v80 < 0)
        v54 = (void ***)v78;
      sGenerateRenderGroupInputString((uint64_t)&v67, (uint64_t)v50);
      if (v69 >= 0)
        v55 = &v67;
      else
        v55 = v67;
      sGenerateDirectionalMetadataOutputString();
      v56 = v65;
      v57 = (void **)v63;
      v60 = *(std::error_code *)(v4[4] + 48);
      sGenerateErrorCodeString(&__p, &v60);
      v58 = &v63;
      if (v56 < 0)
        v58 = v57;
      if (v62 >= 0)
        v59 = &__p;
      else
        v59 = *(std::error_code **)&__p.__val_;
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2522;
      *(_WORD *)&buf[18] = 2080;
      v71 = v54;
      v72 = 2080;
      v73 = v55;
      v74 = 2080;
      v75 = v58;
      v76 = 2080;
      v77 = v59;
      _os_log_impl(&dword_2164CC000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - unexpected spatial query status. we are about to force a crash. (%s) (%s) (%s)", buf, 0x3Au);
      if (v62 < 0)
        operator delete(*(void **)&__p.__val_);
      if (v65 < 0)
        operator delete(v63);
      if (v69 < 0)
        operator delete(v67);
      if (v80 < 0)
        operator delete(v78);
    }

    std::terminate();
  }
  v6 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::RenderGroupInput<float>>(v3[4]);
  updated = (uint64_t)Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::DirectionalMetadataOutput<float>>(v4[4]);
  if (*(_BYTE *)(updated + 200))
  {
    v8 = updated;
    v9 = v2 + 1600;
    v10 = *(float **)(updated + 104);
    v11 = v10[4];
    v12 = v10[5];
    v13 = v10[6];
    if (v11 <= 0.0)
      v11 = COERCE_FLOAT(1);
    v14 = (float)((float)(logf(v11) * 8.6859) / 10.0) * 10.0;
    *(float *)&v78 = v14;
    if (v12 <= 0.0)
      v15 = COERCE_FLOAT(1);
    else
      v15 = v12;
    v16 = (float)((float)(logf(v15) * 8.6859) / 10.0) * 10.0;
    *((float *)&v78 + 1) = v16;
    if (v13 <= 0.0)
      v17 = COERCE_FLOAT(1);
    else
      v17 = v13;
    v18 = logf(v17);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = (float)((float)(v18 * 8.6859) / 10.0) * 10.0;
    v79 = v22;
    *(_QWORD *)buf = 0;
    *(_DWORD *)&buf[8] = 0;
    do
    {
      if (v21 <= 2)
      {
        v20 = v21 + 1;
        *(_DWORD *)&buf[4 * v21++] = *(_DWORD *)((char *)&v78 + v19);
      }
      v19 += 4;
    }
    while (v19 != 12);
    if (v20 <= 2)
      bzero(&buf[4 * v20], 12 - 4 * v20);
    v63 = *(void **)buf;
    v64 = *(_DWORD *)&buf[8];
    v23 = *((_QWORD *)v6 + 67) == *(_QWORD *)buf && *((_DWORD *)v6 + 136) == (unint64_t)*(unsigned int *)&buf[8];
    if (!v23 || *((float *)v6 + 137) != **(float **)(v8 + 56))
    {
      v24 = 0;
      v25 = 0;
      v26 = 0;
      *(_QWORD *)buf = *(_QWORD *)(v8 + 192);
      v67 = (void *)__PAIR64__(LODWORD(v16), LODWORD(v14));
      v68 = v22;
      v78 = 0;
      v79 = 0.0;
      do
      {
        if (v26 <= 2)
        {
          v25 = v26 + 1;
          *((_DWORD *)&v78 + v26++) = *(_DWORD *)((char *)&v67 + v24);
        }
        v24 += 4;
      }
      while (v24 != 12);
      if (v25 <= 2)
        bzero((char *)&v78 + 4 * v25, 12 - 4 * v25);
      *(_QWORD *)&buf[8] = v78;
      *(float *)&buf[16] = v79;
      LODWORD(v71) = **(_DWORD **)(v8 + 56);
      updated = Phase::Controller::RenderGroupMgr::UpdatePointSourceHistory(v9, *((_QWORD *)v6 + 24), *((_QWORD *)v6 + 25), (__int128 *)buf);
    }
  }
  if (v4[5] == v4[6])
  {
    v27 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)updated)
                                                                                        + 224)));
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      sGenerateSpatialModelerInfoString((uint64_t)&v78, *(_QWORD *)(v1 + 5864));
      if (v80 >= 0)
        v28 = &v78;
      else
        v28 = (void ***)v78;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2470;
      *(_WORD *)&buf[18] = 2080;
      v71 = v28;
      _os_log_impl(&dword_2164CC000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - empty spatial query in finish callback", buf, 0x1Cu);
      if (v80 < 0)
        operator delete(v78);
    }
LABEL_40:

  }
}

void sub_21652BDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  uint64_t v29;

  if (a19 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v29 - 137) < 0)
    operator delete(*(void **)(v29 - 160));

  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::__deallocate_node(a1, *(Phase::Controller::SpatialQueryInstance ****)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_0>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_0>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D579190;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_0>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D579190;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_0>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator()(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  double v8;
  double v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  double v41;
  float v42;
  float *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint8x8_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  float v53;
  float v54;
  _BOOL8 v55;
  unint64_t v56;
  unint64_t v57;
  int8x8_t prime;
  void *v59;
  void *v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint8x8_t v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  unsigned __int8 *v74;
  NSObject *v75;
  void **v76;
  int v77;
  void **v78;
  void **v79;
  std::error_code *p_p;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t *v87;
  unsigned __int8 *v88;
  Phase::Logger *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  std::__shared_weak_count *v93;
  unsigned int v94;
  void *v95;
  char *v96;
  unint64_t v97;
  std::error_code __p;
  char v99;
  void *v100;
  char v101;
  void *v102[2];
  char v103;
  __int128 v104;
  __int128 v105;
  _OWORD __src[18];
  _BYTE v107[24];
  _BYTE *v108;
  uint8_t buf[504];
  _BYTE v110[24];
  _BYTE *v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  if (!a2[8])
    return;
  v5 = a1[1];
  v6 = a1[2];
  v88 = *(unsigned __int8 **)(v5 + 5872);
  v90 = a1[3];
  v91 = v5;
  Phase::Controller::SpatialModelerInstance::GetLatestSubmixState((Phase::Controller::SpatialModelerInstance *)&v92, v5);
  if (!v94)
  {
LABEL_6:
    Phase::SpatialModeler::PriorityQueue::ClearEntries((Phase::SpatialModeler::PriorityQueue *)a2, 1);
    goto LABEL_158;
  }
  v7 = v92;
  while (!*v7)
  {
    v7 += 3;
    if (v7 >= &v92[3 * v94])
      goto LABEL_6;
  }
  Phase::Controller::SpatialModelerInstance::GetAvailableComputeForGraph(v91, (int *)v6);
  v9 = v8;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  std::vector<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry>>::reserve(&v95, a2[8]);
  v86 = a3;
  v10 = (_QWORD *)a2[7];
  if (v10)
  {
    v11 = v96;
    do
    {
      v12 = v10 + 4;
      if ((unint64_t)v11 >= v97)
      {
        v14 = (char *)v95;
        v15 = (v11 - (_BYTE *)v95) >> 3;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        v17 = v97 - (_QWORD)v95;
        if ((uint64_t)(v97 - (_QWORD)v95) >> 2 > v16)
          v16 = v17 >> 2;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
          v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v18);
        else
          v19 = 0;
        v20 = (char *)(v18 + 8 * v15);
        *(_QWORD *)v20 = v12;
        v13 = v20 + 8;
        if (v11 != v14)
        {
          do
          {
            v21 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *((_QWORD *)v20 - 1) = v21;
            v20 -= 8;
          }
          while (v11 != v14);
          v11 = (char *)v95;
        }
        v95 = v20;
        v96 = v13;
        v97 = v18 + 8 * v19;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_QWORD *)v11 = v12;
        v13 = v11 + 8;
      }
      v96 = v13;
      v10 = (_QWORD *)*v10;
      v11 = v13;
    }
    while (v10);
  }
  v22 = (uint64_t *)v95;
  if (a2[26])
  {
    v23 = (uint64_t *)v96;
    std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v107, (uint64_t)(a2 + 23));
    v24 = a2 + 5;
    if ((char *)v23 - (char *)v22 < 1025)
    {
      v25 = 0;
      v27 = 0;
    }
    else
    {
      v25 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry>>(v23 - v22);
      v27 = v26;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>((uint64_t)v22, v23, (uint64_t)v107, v23 - v22, v25, v27);
    if (v25)
      operator delete(v25);
    v28 = v108;
    if (v108 == v107)
    {
      v29 = 4;
      v28 = v107;
      goto LABEL_37;
    }
    if (v108)
    {
      v29 = 5;
LABEL_37:
      (*(void (**)(void))(*v28 + 8 * v29))();
    }
  }
  else
  {
    v23 = (uint64_t *)v96;
    v24 = a2 + 5;
  }
  if (v22 == v23)
    goto LABEL_155;
  v85 = (_QWORD *)(v6 + 792);
  v30 = v22;
  v87 = v23;
  do
  {
    v31 = (_QWORD *)*v30;
    v32 = *(_QWORD *)(*v30 + 16);
    if (v94 <= v32
      || HIDWORD(v92[3 * v32 + 2]) != HIDWORD(v32)
      || (v33 = v92[3 * *(_QWORD *)(*v30 + 16)]) == 0)
    {
      v38 = a2[22];
      if (v38)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 48))(v38, *v30);
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>>>::__erase_unique<Phase::UniqueObjectId>(v24, v31);
      goto LABEL_49;
    }
    v34 = operator new();
    *(_OWORD *)(v34 + 80) = 0u;
    *(_OWORD *)(v34 + 96) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_OWORD *)(v34 + 48) = 0u;
    *(_OWORD *)v34 = 0u;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 64) = 0u;
    *(_QWORD *)(v34 + 56) = std::system_category();
    *(_QWORD *)(v34 + 64) = 0;
    *(_QWORD *)(v34 + 72) = 0;
    *(_QWORD *)(v34 + 80) = -1;
    *(_QWORD *)(v34 + 88) = 0;
    *(_QWORD *)(v34 + 96) = 0;
    *(_DWORD *)(v34 + 104) = 0;
    *(_OWORD *)(v34 + 112) = 0u;
    *(_OWORD *)(v34 + 128) = 0u;
    v111 = 0;
    v35 = operator new(0x28uLL);
    *v35 = &off_24D5790B8;
    v35[1] = v91;
    v35[2] = v34;
    v35[3] = v31;
    v35[4] = v6;
    v111 = v35;
    Phase::Controller::SpatialQueryInstance::Initialize(v34, v91 + 336, (Phase::SystemAllocator *)(v91 + 5848), (uint64_t)v110, 0);
    v36 = v111;
    if (v111 == v110)
    {
      v36 = v110;
      v37 = 4;
    }
    else
    {
      if (!v111)
        goto LABEL_53;
      v37 = 5;
    }
    (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_53:
    v89 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::SubmixListenerInput<float>>(v34);
    v39 = *(_QWORD *)v90;
    v40 = *(_OWORD *)(v90 + 24);
    v104 = *(_OWORD *)(v90 + 8);
    v105 = v40;
    Phase::SpatialModeler::SubmixListenerInput<float>::SubmixListenerInput((uint64_t)buf, 1);
    v41 = *(double *)(v33 + 56);
    memset(__src, 0, 124);
    HIDWORD(__src[7]) = v39;
    if (v39)
    {
      v42 = v41;
      v43 = (float *)__src;
      v44 = v39;
      do
      {
        *v43++ = v42;
        --v44;
      }
      while (v44);
    }
    *(_OWORD *)&buf[128] = __src[4];
    *(_OWORD *)&buf[144] = __src[5];
    *(_OWORD *)&buf[160] = __src[6];
    *(_OWORD *)&buf[176] = __src[7];
    *(_OWORD *)&buf[64] = __src[0];
    *(_OWORD *)&buf[80] = __src[1];
    *(_OWORD *)&buf[96] = __src[2];
    *(_OWORD *)&buf[112] = __src[3];
    Phase::Controller::SpatialModelerInstance::SubmixInfo::MakeSubmix((Phase::Controller::SpatialModelerInstance::SubmixInfo *)__src, v33, v39);
    memcpy(&buf[192], __src, 0x120uLL);
    *(_QWORD *)&buf[480] = *(_QWORD *)(v33 + 40);
    *(_QWORD *)&buf[8] = v39;
    *(_OWORD *)&buf[16] = v104;
    *(_OWORD *)&buf[32] = v105;
    v45 = (unint64_t)v89;
    memcpy(v89, buf, 0x1E8uLL);
    *((_BYTE *)v89 + 48) = (*(_DWORD *)v6 & 0xFFFFFFFD) == 1;
    if (v9 < 0.0)
    {
      Phase::Controller::SpatialQueryInstance::~SpatialQueryInstance((Phase::Controller::SpatialQueryInstance **)v34);
      MEMORY[0x2199F9D70]();
      v24 = a2 + 5;
      v23 = v87;
      goto LABEL_49;
    }
    v46 = v31[2];
    v47 = *(_QWORD *)(v6 + 784);
    if (!v47)
      goto LABEL_74;
    v48 = (uint8x8_t)vcnt_s8((int8x8_t)v47);
    v48.i16[0] = vaddlv_u8(v48);
    if (v48.u32[0] > 1uLL)
    {
      v45 = v31[2];
      if (v47 <= v46)
        v45 = v46 % v47;
    }
    else
    {
      v45 = (v47 - 1) & v46;
    }
    v49 = *(_QWORD **)(*(_QWORD *)(v6 + 776) + 8 * v45);
    if (!v49 || (v50 = (_QWORD *)*v49) == 0)
    {
LABEL_74:
      v52 = operator new(0x20uLL);
      *v52 = 0;
      v52[1] = v46;
      v52[2] = v46;
      v52[3] = v34;
      v53 = (float)(unint64_t)(*(_QWORD *)(v6 + 800) + 1);
      v54 = *(float *)(v6 + 808);
      if (v47 && (float)(v54 * (float)v47) >= v53)
      {
LABEL_120:
        v71 = *(_QWORD *)(v6 + 776);
        v72 = *(_QWORD **)(v71 + 8 * v45);
        v24 = a2 + 5;
        if (v72)
        {
          *v52 = *v72;
        }
        else
        {
          *v52 = *v85;
          *v85 = v52;
          *(_QWORD *)(v71 + 8 * v45) = v85;
          if (!*v52)
          {
LABEL_129:
            ++*(_QWORD *)(v6 + 800);
            goto LABEL_130;
          }
          v73 = *(_QWORD *)(*v52 + 8);
          if ((v47 & (v47 - 1)) != 0)
          {
            if (v73 >= v47)
              v73 %= v47;
          }
          else
          {
            v73 &= v47 - 1;
          }
          v72 = (_QWORD *)(*(_QWORD *)(v6 + 776) + 8 * v73);
        }
        *v72 = v52;
        goto LABEL_129;
      }
      v55 = (v47 & (v47 - 1)) != 0;
      if (v47 < 3)
        v55 = 1;
      v56 = v55 | (2 * v47);
      v57 = vcvtps_u32_f32(v53 / v54);
      if (v56 <= v57)
        prime = (int8x8_t)v57;
      else
        prime = (int8x8_t)v56;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v47 = *(_QWORD *)(v6 + 784);
      }
      if (*(_QWORD *)&prime > v47)
        goto LABEL_86;
      if (*(_QWORD *)&prime < v47)
      {
        v65 = vcvtps_u32_f32((float)*(unint64_t *)(v6 + 800) / *(float *)(v6 + 808));
        if (v47 < 3 || (v66 = (uint8x8_t)vcnt_s8((int8x8_t)v47), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
        {
          v65 = std::__next_prime(v65);
        }
        else
        {
          v67 = 1 << -(char)__clz(v65 - 1);
          if (v65 >= 2)
            v65 = v67;
        }
        if (*(_QWORD *)&prime <= v65)
          prime = (int8x8_t)v65;
        if (*(_QWORD *)&prime >= v47)
        {
          v47 = *(_QWORD *)(v6 + 784);
        }
        else
        {
          if (prime)
          {
LABEL_86:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v59 = operator new(8 * *(_QWORD *)&prime);
            v60 = *(void **)(v6 + 776);
            *(_QWORD *)(v6 + 776) = v59;
            if (v60)
              operator delete(v60);
            v61 = 0;
            *(int8x8_t *)(v6 + 784) = prime;
            do
              *(_QWORD *)(*(_QWORD *)(v6 + 776) + 8 * v61++) = 0;
            while (*(_QWORD *)&prime != v61);
            v62 = (_QWORD *)*v85;
            if (*v85)
            {
              v63 = v62[1];
              v64 = (uint8x8_t)vcnt_s8(prime);
              v64.i16[0] = vaddlv_u8(v64);
              if (v64.u32[0] > 1uLL)
              {
                if (v63 >= *(_QWORD *)&prime)
                  v63 %= *(_QWORD *)&prime;
              }
              else
              {
                v63 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)(v6 + 776) + 8 * v63) = v85;
              v68 = (_QWORD *)*v62;
              if (*v62)
              {
                do
                {
                  v69 = v68[1];
                  if (v64.u32[0] > 1uLL)
                  {
                    if (v69 >= *(_QWORD *)&prime)
                      v69 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v69 &= *(_QWORD *)&prime - 1;
                  }
                  if (v69 != v63)
                  {
                    v70 = *(_QWORD *)(v6 + 776);
                    if (!*(_QWORD *)(v70 + 8 * v69))
                    {
                      *(_QWORD *)(v70 + 8 * v69) = v62;
                      goto LABEL_111;
                    }
                    *v62 = *v68;
                    *v68 = **(_QWORD **)(*(_QWORD *)(v6 + 776) + 8 * v69);
                    **(_QWORD **)(*(_QWORD *)(v6 + 776) + 8 * v69) = v68;
                    v68 = v62;
                  }
                  v69 = v63;
LABEL_111:
                  v62 = v68;
                  v68 = (_QWORD *)*v68;
                  v63 = v69;
                }
                while (v68);
              }
            }
            v47 = (unint64_t)prime;
            goto LABEL_115;
          }
          v81 = *(void **)(v6 + 776);
          *(_QWORD *)(v6 + 776) = 0;
          if (v81)
            operator delete(v81);
          v47 = 0;
          *(_QWORD *)(v6 + 784) = 0;
        }
      }
LABEL_115:
      if ((v47 & (v47 - 1)) != 0)
      {
        if (v47 <= v46)
          v45 = v46 % v47;
        else
          v45 = v46;
      }
      else
      {
        v45 = (v47 - 1) & v46;
      }
      goto LABEL_120;
    }
    while (1)
    {
      v51 = v50[1];
      if (v51 == v46)
        break;
      if (v48.u32[0] > 1uLL)
      {
        if (v51 >= v47)
          v51 %= v47;
      }
      else
      {
        v51 &= v47 - 1;
      }
      if (v51 != v45)
        goto LABEL_74;
LABEL_73:
      v50 = (_QWORD *)*v50;
      if (!v50)
        goto LABEL_74;
    }
    if (v50[2] != v46)
      goto LABEL_73;
    Phase::Controller::SpatialQueryInstance::~SpatialQueryInstance((Phase::Controller::SpatialQueryInstance **)v34);
    MEMORY[0x2199F9D70]();
    v24 = a2 + 5;
LABEL_130:
    v74 = Phase::SpatialModeler::Scheduler::SubmitQuery(v88, v34, v86, (uint64_t)__src);
    v23 = v87;
    if (!LOBYTE(__src[0]))
    {
      v75 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v74)
                                                                                          + 224)));
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        sGenerateSpatialModelerInfoString((uint64_t)v102, *(_QWORD *)(v91 + 5864));
        if (v103 >= 0)
          v76 = v102;
        else
          v76 = (void **)v102[0];
        sGenerateSubmixListenerInputString();
        v77 = v101;
        v78 = (void **)v100;
        sGenerateErrorCodeString(&__p, (const std::error_code *)((char *)__src + 8));
        v79 = &v100;
        if (v77 < 0)
          v79 = v78;
        p_p = &__p;
        if (v99 < 0)
          p_p = *(std::error_code **)&__p.__val_;
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1411;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v76;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = v79;
        *(_WORD *)&buf[38] = 2080;
        *(_QWORD *)&buf[40] = p_p;
        _os_log_impl(&dword_2164CC000, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - failed to submit cull query (%s) (%s)", buf, 0x30u);
        if (v99 < 0)
          operator delete(*(void **)&__p.__val_);
        v24 = a2 + 5;
        v23 = v87;
        if (v101 < 0)
          operator delete(v100);
        if (v103 < 0)
          operator delete(v102[0]);
      }

      atomic_store(0, (unsigned int *)v34);
      std::shared_ptr<Phase::Job>::reset[abi:ne180100]((_QWORD *)(v34 + 64));
      atomic_store(0, (unsigned int *)(v34 + 104));
    }
LABEL_49:
    ++v30;
  }
  while (v30 != v23);
LABEL_155:
  if (v22)
    operator delete(v22);
  atomic_store(0, (unint64_t *)(v6 + 752));
LABEL_158:
  v82 = v93;
  if (v93)
  {
    p_shared_owners = (unint64_t *)&v93->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
}

void sub_21652CA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  void *v46;
  void *v47;
  unint64_t *p_shared_owners;
  unint64_t v50;

  if (a40 < 0)
    operator delete(__p);
  if (a46 < 0)
    operator delete(a41);

  if (v46)
    operator delete(v46);
  if (a27)
  {
    p_shared_owners = (unint64_t *)&a27->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))a27->__on_zero_shared)(a27);
      std::__shared_weak_count::__release_weak(a27);
    }
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_1,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_1>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_1,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_1>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D5791D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_1,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_1>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D5791D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_1,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_1>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator()(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::clear(*(_QWORD *)(a1 + 16) + 776);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_2,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_2>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_2,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_2>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D579220;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_2,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_2>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D579220;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

const std::error_category *std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_2,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_2>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::operator()(const std::error_category *result, uint64_t a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;

  v2 = (int8x8_t *)result[2].__vftable;
  v3 = v2[98];
  if (!*(_QWORD *)&v3)
    return result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)&v3 <= v4)
      v6 = v4 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = (*(_QWORD *)&v3 - 1) & v4;
  }
  v7 = *(_QWORD **)(*(_QWORD *)&v2[97] + 8 * v6);
  if (!v7)
    return result;
  v8 = (_QWORD *)*v7;
  if (!v8)
    return result;
  while (1)
  {
    v9 = v8[1];
    if (v9 == v4)
      break;
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v6)
      return result;
LABEL_16:
    v8 = (_QWORD *)*v8;
    if (!v8)
      return result;
  }
  if (v8[2] != v4)
    goto LABEL_16;
  v10 = (unsigned int *)v8[3];
  if (v10)
  {
    if (atomic_load(v10 + 26))
    {
      v12 = atomic_load(v10);
      if (v12 - 1 <= 1)
      {
        while (1)
        {
          v13 = __ldaxr(v10);
          if (v13 != v12)
            break;
          if (!__stlxr(6u, v10))
            return std::system_category();
        }
        __clrex();
      }
    }
  }
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_3,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_3>,BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_3,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_3>,BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D579268;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_3,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_3>,BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D579268;
}

BOOL std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_3,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_3>,BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + 56) < *(double *)(a3 + 56);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_4,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_4>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_4,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_4>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D5792B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_4,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_4>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D5792B0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_4,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_4>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator()(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  Phase::Logger *v9;
  __int128 v10;
  __int128 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  Phase::Logger *Params;
  double v18;
  double v19;
  int v20;
  void **v21;
  Phase::Logger *v22;
  void **v23;
  uint64_t *v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  void **v31;
  _QWORD *v32;
  unint64_t v33;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD *v47;
  uint64_t *v48;
  _QWORD *v49;
  void **v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void **v57;
  void *v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint8x8_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t ***v79;
  uint64_t **i;
  unint64_t v81;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  void **v87;
  unint64_t v88;
  void **v89;
  uint64_t v90;
  Phase::Logger *ClusterSetInputStrings;
  NSObject *v92;
  void **p_p;
  void **v94;
  void **v95;
  Phase::Logger *v96;
  void **v97;
  NSObject *v98;
  void **v99;
  void **v100;
  unsigned __int8 *v101;
  Phase::Logger *v102;
  NSObject *v103;
  void **v104;
  void **v105;
  void **v106;
  Phase::Logger *v107;
  void **v108;
  NSObject *v109;
  void **v110;
  void **v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *p_shared_owners;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  unsigned __int8 *v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t *v123;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  void *v129[2];
  char v130;
  __int128 v131;
  __int128 v132;
  float v133;
  _QWORD *v134;
  std::__shared_weak_count *v135;
  unsigned int v136;
  void *v137;
  void *__p;
  void **v139;
  uint64_t *v140;
  uint64_t v141;
  void *v142;
  _BYTE v143[15];
  char v144;
  void **v145;
  void **v146;
  void **v147;
  void **__src[40];

  __src[37] = *(void ***)MEMORY[0x24BDAC8D0];
  if (!a2[8])
    return;
  v5 = a1[1];
  v120 = *(unsigned __int8 **)(v5 + 5872);
  v6 = a1[3];
  v126 = a1[2];
  Phase::Controller::RenderGroupMgr::LoadFreshData((Phase::Controller::RenderGroupMgr *)(v126 + 1024));
  v128 = v5;
  Phase::Controller::SpatialModelerInstance::GetLatestSubmixState((Phase::Controller::SpatialModelerInstance *)&v134, v5);
  if (v136)
  {
    v127 = a2 + 5;
    v122 = (_QWORD *)(v126 + 960);
    v123 = (uint64_t *)(v6 + 40);
    v7 = v134;
    while (!*v7)
    {
      v7 += 3;
      if (v7 >= &v134[3 * v136])
        goto LABEL_6;
    }
    v8 = (void *)a2[8];
    if (!v8)
      goto LABEL_191;
    v9 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::ClusterSetInput<float>>(v126 + 816);
    v10 = *(_OWORD *)v123;
    v11 = *(_OWORD *)(v6 + 56);
    *((_QWORD *)v9 + 5) = *(_QWORD *)(v6 + 72);
    *(_OWORD *)((char *)v9 + 24) = v11;
    *(_OWORD *)((char *)v9 + 8) = v10;
    v125 = (uint64_t)v9;
    v12 = *((double *)v9 + 5);
    Phase::Controller::SpatialModelerInstance::GetAvailableComputeForGraph(v5, (int *)v126);
    v14 = v13;
    Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)v5, *(_DWORD *)v126, 0);
    v15 = *((double *)Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)v5, *(_DWORD *)v126, 0) + 2);
    v16 = *(_QWORD *)(v126 + 72);
    Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)v5, *(_DWORD *)v126, 1);
    Params = Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)v5, *(_DWORD *)v126, 1);
    if (*(_DWORD *)(v5 + 528) != 2)
      std::terminate();
    v18 = *((double *)Params + 2);
    Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)v5, *(_DWORD *)v126, 2);
    v19 = *((double *)Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)v5, *(_DWORD *)v126, 2) + 2)
        * 0.0;
    if (v19 <= 0.0)
    {
      v20 = 0x7FFFFFFF;
    }
    else
    {
      v20 = llround((v14 + v15 * -0.0 * (double)v16 + v18 * -0.0) / v19);
      if (v20 <= 1)
        v20 = 1;
    }
    v117 = v6;
    if (v20 >= (int)v12)
      v20 = (int)v12;
    *(double *)(v125 + 40) = (double)v20;
    __p = v8;
    v129[0] = (void *)16;
    *(_QWORD *)&v131 = v5 + 5848;
    *((_QWORD *)&v131 + 1) = &__p;
    *(_QWORD *)&v132 = v129;
    v116 = (void *)(v5 + 5848);
    v141 = v5 + 5848;
    Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>((Phase::Logger *)&v142, (uint64_t)v8, (uint64_t)&v131, &v141);
    v121 = a2;
    v21 = (void **)v142;
    v142 = 0;
    __src[0] = v21;
    std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&__src[1], (uint64_t)v143);
    __src[5] = (void **)v8;
    std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v142);
    v119 = (uint64_t *)(v125 + 104);
    std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v125 + 104), (uint64_t *)__src);
    *(void ***)(v125 + 144) = __src[5];
    std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)__src);
    v131 = 0u;
    v132 = 0u;
    v133 = 1.0;
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)&v131, (unint64_t)(float)*(unint64_t *)(v126 + 1184));
    v22 = *(Phase::Logger **)(v126 + 1184);
    v118 = (unint64_t)v8;
    if (v22)
    {
      v129[0] = *(void **)(v126 + 1184);
      v141 = 16;
      __p = (void *)(v5 + 5848);
      v139 = v129;
      v140 = &v141;
      v137 = (void *)(v5 + 5848);
      Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(v22, (uint64_t)&__p, (uint64_t *)&v137, (size_t *)&v142);
      v23 = (void **)v142;
      v142 = 0;
      __src[0] = v23;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&__src[1], (uint64_t)v143);
      __src[5] = (void **)v22;
      std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v142);
      std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v125 + 56), (uint64_t *)__src);
      *(void ***)(v125 + 96) = __src[5];
      std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)__src);
      v24 = *(uint64_t **)(v126 + 1176);
      if (v24)
      {
        v25 = 0;
        do
        {
          v26 = v24 + 6;
          v27 = 48;
          v28 = 0xCBF29CE484222325;
          do
            v28 = 0x100000001B3 * (v28 ^ *((char *)v24 + v27++));
          while (v27 != 64);
          v29 = *((_QWORD *)&v131 + 1);
          if (*((_QWORD *)&v131 + 1))
          {
            v30 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v131 + 8));
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              v3 = v28;
              if (v28 >= *((_QWORD *)&v131 + 1))
                v3 = v28 % *((_QWORD *)&v131 + 1);
            }
            else
            {
              v3 = (*((_QWORD *)&v131 + 1) - 1) & v28;
            }
            v31 = *(void ***)(v131 + 8 * v3);
            if (v31)
            {
              v32 = *v31;
              if (*v31)
              {
                do
                {
                  v33 = v32[1];
                  if (v33 == v28)
                  {
                    if (v32[2] == v24[6] && v32[3] == v24[7])
                      goto LABEL_62;
                  }
                  else
                  {
                    if (v30.u32[0] > 1uLL)
                    {
                      if (v33 >= *((_QWORD *)&v131 + 1))
                        v33 %= *((_QWORD *)&v131 + 1);
                    }
                    else
                    {
                      v33 &= *((_QWORD *)&v131 + 1) - 1;
                    }
                    if (v33 != v3)
                      break;
                  }
                  v32 = (_QWORD *)*v32;
                }
                while (v32);
              }
            }
          }
          v32 = operator new(0x28uLL);
          *v32 = 0;
          v32[1] = v28;
          *((_OWORD *)v32 + 1) = *v26;
          *((_DWORD *)v32 + 8) = 0;
          v35 = (float)(unint64_t)(*((_QWORD *)&v132 + 1) + 1);
          if (!v29 || (float)(v133 * (float)v29) < v35)
          {
            v36 = (v29 & (v29 - 1)) != 0;
            if (v29 < 3)
              v36 = 1;
            v37 = v36 | (2 * v29);
            v38 = vcvtps_u32_f32(v35 / v133);
            if (v37 <= v38)
              v39 = v38;
            else
              v39 = v37;
            std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)&v131, v39);
            v29 = *((_QWORD *)&v131 + 1);
            if ((*((_QWORD *)&v131 + 1) & (*((_QWORD *)&v131 + 1) - 1)) != 0)
            {
              if (v28 >= *((_QWORD *)&v131 + 1))
                v3 = v28 % *((_QWORD *)&v131 + 1);
              else
                v3 = v28;
            }
            else
            {
              v3 = (*((_QWORD *)&v131 + 1) - 1) & v28;
            }
          }
          v40 = v131;
          v41 = *(_QWORD **)(v131 + 8 * v3);
          if (v41)
          {
            *v32 = *v41;
          }
          else
          {
            *v32 = v132;
            *(_QWORD *)&v132 = v32;
            *(_QWORD *)(v40 + 8 * v3) = &v132;
            if (!*v32)
              goto LABEL_61;
            v42 = *(_QWORD *)(*v32 + 8);
            if ((v29 & (v29 - 1)) != 0)
            {
              if (v42 >= v29)
                v42 %= v29;
            }
            else
            {
              v42 &= v29 - 1;
            }
            v41 = (_QWORD *)(v131 + 8 * v42);
          }
          *v41 = v32;
LABEL_61:
          ++*((_QWORD *)&v132 + 1);
LABEL_62:
          *((_DWORD *)v32 + 8) = v25;
          v43 = *(_QWORD *)(v125 + 56) + 336 * v25;
          v44 = *v26;
          *(_QWORD *)(v43 + 16) = v24[8];
          *(_OWORD *)v43 = v44;
          *(_DWORD *)(v43 + 24) = *((_DWORD *)v24 + 18);
          *(_DWORD *)(v43 + 28) = *((_DWORD *)v24 + 19);
          *(_DWORD *)(v43 + 32) = *((_DWORD *)v24 + 20);
          *(_DWORD *)(v43 + 36) = *((_DWORD *)v24 + 21);
          *(_DWORD *)(v43 + 40) = *((_DWORD *)v24 + 22);
          *(_DWORD *)(v43 + 44) = *((_DWORD *)v24 + 23);
          *(_DWORD *)(v43 + 48) = *((_DWORD *)v24 + 24);
          *(_DWORD *)(v43 + 52) = *((_DWORD *)v24 + 25);
          memcpy((void *)(v43 + 56), v24 + 13, 0x109uLL);
          ++v25;
          v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
    }
    else
    {
      std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)(v125 + 56));
      *(_QWORD *)(v125 + 96) = 0;
    }
    *(_QWORD *)(v126 + 968) = *(_QWORD *)(v126 + 960);
    std::vector<Phase::UniqueObjectId>::resize((uint64_t)v122, v118);
    v45 = *(_OWORD *)v123;
    v46 = *(_OWORD *)(v6 + 56);
    *(_QWORD *)(v125 + 40) = *(_QWORD *)(v6 + 72);
    *(_OWORD *)(v125 + 8) = v45;
    *(_OWORD *)(v125 + 24) = v46;
    *(_BYTE *)(v125 + 48) = ((*(_DWORD *)v126 - 1) & 0xFFFFFFFD) == 0;
    __p = 0;
    v139 = 0;
    v140 = 0;
    std::vector<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry>>::reserve(&__p, v121[8]);
    v47 = (_QWORD *)v121[7];
    if (v47)
    {
      v48 = (uint64_t *)v139;
      do
      {
        v49 = v47 + 4;
        if (v48 >= v140)
        {
          v51 = (uint64_t *)__p;
          v52 = ((char *)v48 - (_BYTE *)__p) >> 3;
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 61)
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          v54 = (char *)v140 - (_BYTE *)__p;
          if (((char *)v140 - (_BYTE *)__p) >> 2 > v53)
            v53 = v54 >> 2;
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
            v55 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v55 = v53;
          if (v55)
            v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v55);
          else
            v56 = 0;
          v57 = (void **)(v55 + 8 * v52);
          *v57 = v49;
          v50 = v57 + 1;
          if (v48 != v51)
          {
            do
            {
              v58 = (void *)*--v48;
              *--v57 = v58;
            }
            while (v48 != v51);
            v48 = (uint64_t *)__p;
          }
          __p = v57;
          v139 = v50;
          v140 = (uint64_t *)(v55 + 8 * v56);
          if (v48)
            operator delete(v48);
        }
        else
        {
          *v48 = (uint64_t)v49;
          v50 = (void **)(v48 + 1);
        }
        v139 = v50;
        v47 = (_QWORD *)*v47;
        v48 = (uint64_t *)v50;
      }
      while (v47);
    }
    v59 = v121;
    v60 = (uint64_t *)__p;
    if (v121[26])
    {
      v61 = (uint64_t *)v139;
      std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)&v142, (uint64_t)(v121 + 23));
      if ((char *)v61 - (char *)v60 < 1025)
      {
        v62 = 0;
        v64 = 0;
      }
      else
      {
        v62 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry>>(v61 - v60);
        v64 = v63;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>((uint64_t)v60, v61, (uint64_t)&v142, v61 - v60, v62, v64);
      if (v62)
        operator delete(v62);
      v65 = v145;
      if (v145 == &v142)
      {
        v66 = 4;
        v65 = &v142;
        v59 = v121;
        goto LABEL_95;
      }
      v59 = v121;
      if (v145)
      {
        v66 = 5;
LABEL_95:
        (*((void (**)(void))*v65 + v66))();
      }
    }
    else
    {
      v61 = (uint64_t *)v139;
    }
    if (v60 == v61)
    {
      v67 = 0;
    }
    else
    {
      v67 = 0;
      v68 = v60;
      do
      {
        v69 = *v68;
        v70 = *(_QWORD *)(*v68 + 16);
        if (v136 > v70
          && HIDWORD(v134[3 * v70 + 2]) == HIDWORD(v70)
          && (v71 = v134[3 * *(_QWORD *)(*v68 + 16)]) != 0)
        {
          if (*(_QWORD *)(v125 + 144) <= (unint64_t)v67)
            __assert_rtn("operator()", "CvmSpatialModelerInstance.mm", 1647, "clusterSourceIdx < pClusterSetInput->mSubmixRoutings.Size()");
          v72 = *v119;
          Phase::Controller::SpatialModelerInstance::SubmixInfo::MakeSubmix((Phase::Controller::SpatialModelerInstance::SubmixInfo *)__src, v71, *v123);
          v73 = (_OWORD *)(v72 + 304 * v67);
          memcpy(v73, __src, 0x120uLL);
          v74 = 24;
          v75 = 0xCBF29CE484222325;
          do
            v75 = 0x100000001B3 * (v75 ^ *(char *)(v69 + v74++));
          while (v74 != 40);
          if (*((_QWORD *)&v131 + 1))
          {
            v76 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v131 + 8));
            v76.i16[0] = vaddlv_u8(v76);
            if (v76.u32[0] > 1uLL)
            {
              v77 = v75;
              if (v75 >= *((_QWORD *)&v131 + 1))
                v77 = v75 % *((_QWORD *)&v131 + 1);
            }
            else
            {
              v77 = v75 & (*((_QWORD *)&v131 + 1) - 1);
            }
            v79 = *(uint64_t ****)(v131 + 8 * v77);
            if (v79)
            {
              for (i = *v79; i; i = (uint64_t **)*i)
              {
                v81 = (unint64_t)i[1];
                if (v81 == v75)
                {
                  if (i[2] == *(uint64_t **)(v69 + 24) && i[3] == *(uint64_t **)(v69 + 32))
                  {
                    v86 = *((unsigned int *)i + 8);
                    goto LABEL_130;
                  }
                }
                else
                {
                  if (v76.u32[0] > 1uLL)
                  {
                    if (v81 >= *((_QWORD *)&v131 + 1))
                      v81 %= *((_QWORD *)&v131 + 1);
                  }
                  else
                  {
                    v81 &= *((_QWORD *)&v131 + 1) - 1;
                  }
                  if (v81 != v77)
                    break;
                }
              }
            }
          }
          v86 = -1;
LABEL_130:
          v83 = v72 + 304 * v67;
          *(_QWORD *)(v83 + 288) = v86;
          v84 = *(double *)(v69 + 40);
          if (v84 <= 0.0)
            v84 = COERCE_DOUBLE(1);
          *(long double *)(v83 + 296) = log(v84) * 8.68588964 / 10.0 * 10.0;
          *v73 = *(_OWORD *)v69;
          *(_QWORD *)(v125 + 152) = *(_QWORD *)(v71 + 40);
          *(_OWORD *)(*v122 + 16 * v67) = *(_OWORD *)v69;
          v85 = *(_QWORD *)(v128 + 5864);
          if (v85)
          {
            *((double *)v73 + 35) = *(float *)(*(_QWORD *)(v85 + 240) + 16);
            *((_QWORD *)v73 + 33) = *(_QWORD *)(v117 + 56);
          }
          ++v67;
          v59 = v121;
        }
        else
        {
          v78 = v59[22];
          if (v78)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 48))(v78, *v68);
          std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>>>::__erase_unique<Phase::UniqueObjectId>(v127, (_QWORD *)v69);
        }
        ++v68;
      }
      while (v68 != v61);
    }
    if (v60)
      operator delete(v60);
    atomic_store(0, (unint64_t *)(v126 + 760));
    if (v118 != v67)
    {
      std::vector<Phase::UniqueObjectId>::resize((uint64_t)v122, v67);
      if (v67 >= 1)
      {
        v129[0] = (void *)v67;
        v141 = 16;
        __p = v116;
        v139 = v129;
        v140 = &v141;
        v137 = v116;
        Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>((Phase::Logger *)__src, v67, (uint64_t)&__p, (uint64_t *)&v137);
        v87 = __src[0];
        __src[0] = 0;
        v142 = v87;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v143, (uint64_t)&__src[1]);
        v147 = (void **)v67;
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)__src);
        v88 = 0;
        v89 = (void **)v142;
        v90 = 304 * v67;
        do
        {
          memcpy(&v89[v88 / 8], (const void *)(*v119 + v88), 0x130uLL);
          v88 += 304;
        }
        while (v90 != v88);
        v142 = 0;
        __src[0] = v89;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&__src[1], (uint64_t)v143);
        __src[5] = v147;
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)&v142, v119);
        v147 = *(void ***)(v125 + 144);
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::operator=[abi:ne180100](v119, (uint64_t *)__src);
        *(void ***)(v125 + 144) = __src[5];
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)__src);
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v142);
        v147 = 0;
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v142);
      }
    }
    if (*(double *)(v125 + 40) == 0.0)
    {
      ClusterSetInputStrings = (Phase::Logger *)sGenerateClusterSetInputStrings((uint64_t)&v142, v125);
      v92 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(ClusterSetInputStrings)
                                                                                          + 224)));
      if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
      {
        sGenerateSpatialModelerInfoString((uint64_t)&__p, *(_QWORD *)(v128 + 5864));
        if (SHIBYTE(v140) >= 0)
          p_p = &__p;
        else
          p_p = (void **)__p;
        v94 = &v142;
        if (v144 < 0)
          v94 = (void **)v142;
        v95 = *(void ***)(v125 + 144);
        LODWORD(__src[0]) = 136316162;
        *(void ***)((char *)__src + 4) = (void **)"CvmSpatialModelerInstance.mm";
        WORD2(__src[1]) = 1024;
        *(_DWORD *)((char *)&__src[1] + 6) = 1709;
        WORD1(__src[2]) = 2080;
        *(void ***)((char *)&__src[2] + 4) = p_p;
        WORD2(__src[3]) = 2080;
        *(void ***)((char *)&__src[3] + 6) = v94;
        HIWORD(__src[4]) = 2048;
        __src[5] = v95;
        _os_log_impl(&dword_2164CC000, v92, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - cluster query input has a maximum cluster count set to 0. forcing maximum cluster count to 1. this may sound incorrect. (%s, submix count: %zu, ...)", (uint8_t *)__src, 0x30u);
        if (SHIBYTE(v140) < 0)
          operator delete(__p);
      }

      if (v146 != v145)
      {
        v97 = 0;
        do
        {
          v98 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v96)
                                                                                              + 224)));
          if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
          {
            sGenerateSpatialModelerInfoString((uint64_t)&__p, *(_QWORD *)(v128 + 5864));
            v99 = (void **)__p;
            if (SHIBYTE(v140) >= 0)
              v99 = &__p;
            v100 = &v145[3 * (_QWORD)v97];
            if (*((char *)v100 + 23) < 0)
              v100 = (void **)*v100;
            v97 = (void **)((char *)v97 + 1);
            LODWORD(__src[0]) = 136316418;
            *(void ***)((char *)__src + 4) = (void **)"CvmSpatialModelerInstance.mm";
            WORD2(__src[1]) = 1024;
            *(_DWORD *)((char *)&__src[1] + 6) = 1714;
            WORD1(__src[2]) = 2080;
            *(void ***)((char *)&__src[2] + 4) = v99;
            WORD2(__src[3]) = 2048;
            *(void ***)((char *)&__src[3] + 6) = v97;
            HIWORD(__src[4]) = 2048;
            __src[5] = (void **)(0xAAAAAAAAAAAAAAABLL * (v146 - v145));
            LOWORD(__src[6]) = 2080;
            *(void ***)((char *)&__src[6] + 2) = v100;
            _os_log_impl(&dword_2164CC000, v98, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - followup ClusterSetInput log %zu of %zu (%s)", (uint8_t *)__src, 0x3Au);
            if (SHIBYTE(v140) < 0)
              operator delete(__p);
          }
          else
          {
            v97 = (void **)((char *)v97 + 1);
          }

        }
        while ((unint64_t)v97 < 0xAAAAAAAAAAAAAAABLL * (v146 - v145));
      }
      *(_QWORD *)(v125 + 40) = 0x3FF0000000000000;
      __src[0] = (void **)&v145;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](__src);
      if (v144 < 0)
        operator delete(v142);
    }
    v101 = Phase::SpatialModeler::Scheduler::SubmitQuery(v120, v126 + 816, a3, (uint64_t)&__p);
    if (!(_BYTE)__p)
    {
      v102 = (Phase::Logger *)sGenerateClusterSetInputStrings((uint64_t)&v142, v125);
      v103 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v102)
                                                                                           + 224)));
      if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
        sGenerateSpatialModelerInfoString((uint64_t)v129, *(_QWORD *)(v128 + 5864));
        if (v130 >= 0)
          v104 = v129;
        else
          v104 = (void **)v129[0];
        v105 = &v142;
        if (v144 < 0)
          v105 = (void **)v142;
        v106 = *(void ***)(v125 + 144);
        LODWORD(__src[0]) = 136316162;
        *(void ***)((char *)__src + 4) = (void **)"CvmSpatialModelerInstance.mm";
        WORD2(__src[1]) = 1024;
        *(_DWORD *)((char *)&__src[1] + 6) = 1728;
        WORD1(__src[2]) = 2080;
        *(void ***)((char *)&__src[2] + 4) = v104;
        WORD2(__src[3]) = 2080;
        *(void ***)((char *)&__src[3] + 6) = v105;
        HIWORD(__src[4]) = 2048;
        __src[5] = v106;
        _os_log_impl(&dword_2164CC000, v103, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - failed to submit cluster query (%s, submix count: %zu, ...)", (uint8_t *)__src, 0x30u);
        if (v130 < 0)
          operator delete(v129[0]);
      }

      if (v146 != v145)
      {
        v108 = 0;
        do
        {
          v109 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v107)
                                                                                               + 224)));
          if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
          {
            sGenerateSpatialModelerInfoString((uint64_t)v129, *(_QWORD *)(v128 + 5864));
            v110 = (void **)v129[0];
            if (v130 >= 0)
              v110 = v129;
            v111 = &v145[3 * (_QWORD)v108];
            if (*((char *)v111 + 23) < 0)
              v111 = (void **)*v111;
            v108 = (void **)((char *)v108 + 1);
            LODWORD(__src[0]) = 136316418;
            *(void ***)((char *)__src + 4) = (void **)"CvmSpatialModelerInstance.mm";
            WORD2(__src[1]) = 1024;
            *(_DWORD *)((char *)&__src[1] + 6) = 1733;
            WORD1(__src[2]) = 2080;
            *(void ***)((char *)&__src[2] + 4) = v110;
            WORD2(__src[3]) = 2048;
            *(void ***)((char *)&__src[3] + 6) = v108;
            HIWORD(__src[4]) = 2048;
            __src[5] = (void **)(0xAAAAAAAAAAAAAAABLL * (v146 - v145));
            LOWORD(__src[6]) = 2080;
            *(void ***)((char *)&__src[6] + 2) = v111;
            _os_log_impl(&dword_2164CC000, v109, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetInput log %zu of %zu (%s)", (uint8_t *)__src, 0x3Au);
            if (v130 < 0)
              operator delete(v129[0]);
          }
          else
          {
            v108 = (void **)((char *)v108 + 1);
          }

        }
        while ((unint64_t)v108 < 0xAAAAAAAAAAAAAAABLL * (v146 - v145));
      }
      v112 = v126;
      atomic_store(0, (unsigned int *)(v126 + 816));
      std::shared_ptr<Phase::Job>::reset[abi:ne180100]((_QWORD *)(v112 + 880));
      atomic_store(0, (unsigned int *)(v112 + 920));
      __src[0] = (void **)&v145;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](__src);
      if (v144 < 0)
        operator delete(v142);
    }
    if ((*(_BYTE *)(*(_QWORD *)(Phase::Logger::GetInstancePtr((Phase::Logger *)v101) + 224) + 8) & 4) != 0)
    {
      sGenerateClusterSetInputStrings((uint64_t)__src, v125);
      v142 = &__src[3];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
      if (SHIBYTE(__src[2]) < 0)
        operator delete(__src[0]);
    }
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v131);
    goto LABEL_191;
  }
LABEL_6:
  Phase::SpatialModeler::PriorityQueue::ClearEntries((Phase::SpatialModeler::PriorityQueue *)a2, 1);
LABEL_191:
  v113 = v135;
  if (v135)
  {
    p_shared_owners = (unint64_t *)&v135->__shared_owners_;
    do
      v115 = __ldaxr(p_shared_owners);
    while (__stlxr(v115 - 1, p_shared_owners));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
}

void sub_21652E01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t *a52)
{
  void *v52;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;

  a52 = &a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);
  if (a48 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&a29);
  v54 = a36;
  if (a36)
  {
    p_shared_owners = (unint64_t *)&a36->__shared_owners_;
    do
      v56 = __ldaxr(p_shared_owners);
    while (__stlxr(v56 - 1, p_shared_owners));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_5,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_5>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_5,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_5>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D5792F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_5,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_5>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D5792F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_5,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_5>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator()(uint64_t a1)
{
  return Phase::Controller::SpatialModelerInstance::DestroyTempClusterGraphData(a1, *(_QWORD *)(a1 + 16));
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_6,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_6>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_6,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_6>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D579340;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_6,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_6>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D579340;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

const std::error_category *std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_6,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_6>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::operator()(const std::error_category *result)
{
  std::error_category_vtbl *v1;
  unsigned int *p_equivalent;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;

  v1 = result[2].__vftable;
  p_equivalent = (unsigned int *)&v1[14].equivalent;
  v3 = atomic_load((unsigned int *)&v1[14].equivalent);
  if (v3 - 1 <= 1
    && result[2].__vftable[5].equivalent_0 == (BOOL (__cdecl *)(const std::error_category *__hidden, const std::error_code *, int))1)
  {
    if (atomic_load((unsigned int *)&v1[16].default_error_condition))
    {
      v5 = atomic_load(p_equivalent);
      if (v5 - 1 <= 1)
      {
        while (1)
        {
          v6 = __ldaxr(p_equivalent);
          if (v6 != v5)
            break;
          if (!__stlxr(6u, p_equivalent))
            return std::system_category();
        }
        __clrex();
      }
    }
  }
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_7,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_7>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_7,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_7>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D579388;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_7,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_7>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D579388;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_7,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_7>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator()(_QWORD *a1, Phase::SpatialModeler::PriorityQueue *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  Phase::Logger *v11;
  Phase::Logger *v12;
  unsigned int v13;
  NSObject *v15;
  void *v17;
  void **v18;
  uint64_t *v19;
  double v20;
  uint64_t *v21;
  Phase::Controller::RenderGroupMgr *v22;
  double v23;
  Phase::SystemAllocator *v24;
  _QWORD *v25;
  Phase::Logger *v27;
  int v28;
  unsigned __int8 *v29;
  uint64_t v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  Phase::Logger *v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint8x8_t v50;
  Phase::Controller::SpatialQueryInstance ****v51;
  Phase::Controller::SpatialQueryInstance ***i;
  unint64_t v53;
  _QWORD *v55;
  float v56;
  uint64_t v57;
  float v58;
  _BOOL8 v59;
  unint64_t v60;
  unint64_t v61;
  size_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  Phase::Logger **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  Phase::Logger *v111;
  uint64_t v112;
  float v113;
  uint64_t v114;
  uint8_t *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *j;
  Phase::Logger *v124;
  NSObject *v125;
  void *v126;
  int v127;
  void **v128;
  void **v129;
  std::error_code *v130;
  uint64_t v131;
  NSObject *v132;
  char *v133;
  unsigned int v134;
  char *v135;
  NSObject *v136;
  int v138;
  void **v139;
  void **v140;
  std::error_code *v141;
  std::logic_error *v142;
  NSObject *v143;
  int v145;
  char *v146;
  char *v147;
  void **v148;
  std::runtime_error *exception;
  _QWORD *v150;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t v154;
  _QWORD *v156;
  std::__shared_weak_count *v157;
  unsigned int v158;
  void *v159;
  char *v160;
  unint64_t v161;
  std::error_code v162;
  char v163;
  void *v164[2];
  char v165;
  unsigned __int8 uu[16];
  __int128 v167;
  void *__p[2];
  char v169;
  void **v170;
  Phase::Logger *v171;
  std::__shared_weak_count *v172;
  char v173;
  Phase::Logger **v174;
  uint8_t buf[48];
  __int128 v176;
  __int128 v177;
  __int128 v178;
  _BYTE v179[32];
  __int128 v180;
  uuid_string_t out;
  uint64_t v182;

  v182 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)a2 + 8))
    return;
  v3 = a1[2];
  v4 = a1[3];
  v154 = a1[1];
  Phase::Controller::SpatialModelerInstance::GetLatestSubmixState((Phase::Controller::SpatialModelerInstance *)&v156, v154);
  if (v158)
  {
    v153 = (uint64_t *)(v4 + 80);
    v5 = v156;
    while (!*v5)
    {
      v5 += 3;
      if (v5 >= &v156[3 * v158])
        goto LABEL_6;
    }
    Phase::Controller::RenderGroupMgr::LoadFreshData((Phase::Controller::RenderGroupMgr *)(v3 + 1600));
    v9 = (_QWORD *)(v3 + 984);
    v152 = (uint64_t *)(v3 + 984);
    if (*(_DWORD *)v3 == 2)
    {
      v10 = *(uint64_t **)(v3 + 1000);
      if (v10)
      {
        while (1)
        {
          v11 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(v3 + 1736), v10 + 2);
          v12 = v11;
          if (!v11)
            goto LABEL_33;
          v13 = atomic_load((unsigned int *)v10[4]);
          if (v13 && v13 != 3)
            break;
          v10 = (uint64_t *)*v10;
LABEL_34:
          if (!v10)
            goto LABEL_37;
        }
        v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v11)
                                                                                            + 224)));
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          sGenerateSpatialModelerInfoString((uint64_t)&v171, *(_QWORD *)(v154 + 5864));
          if (v173 >= 0)
            v17 = &v171;
          else
            v17 = v171;
          memset(out, 0, sizeof(out));
          uuid_unparse((const unsigned __int8 *)v12 + 16, out);
          std::string::basic_string[abi:ne180100]<0>(__p, out);
          v18 = __p;
          if (v169 < 0)
            v18 = (void **)__p[0];
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2154;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v17;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v13;
          *(_WORD *)&buf[34] = 2080;
          *(_QWORD *)&buf[36] = v18;
          _os_log_impl(&dword_2164CC000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - removing spatial query with unexpected status %i for render group %s", buf, 0x2Cu);
          if (v169 < 0)
            operator delete(__p[0]);
          v9 = (_QWORD *)(v3 + 984);
          if (v173 < 0)
            operator delete(v171);
        }

LABEL_33:
        v19 = (uint64_t *)*v10;
        std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::remove((uint64_t)buf, v9, v10);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
        v10 = v19;
        goto LABEL_34;
      }
    }
    else
    {
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::clear(v3 + 984);
      std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(v3 + 984, vcvtps_u32_f32((float)*(unint64_t *)(v3 + 1760) / *(float *)(v3 + 1016)));
    }
LABEL_37:
    Phase::Controller::SpatialModelerInstance::GetAvailableComputeForGraph(v154, (int *)v3);
    v21 = *(uint64_t **)(v3 + 1752);
    v22 = (Phase::Controller::RenderGroupMgr *)(v3 + 1600);
    if (v21)
    {
      v23 = v20;
      v24 = (Phase::SystemAllocator *)(v154 + 5848);
      v150 = (_QWORD *)(v3 + 1000);
      do
      {
        v25 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::find<Phase::UniqueObjectId>(*(_QWORD *)(v3 + 984), *(_QWORD *)(v3 + 992), v21 + 2);
        if (!*((_BYTE *)v21 + 384) && (*(_DWORD *)v3 != 2 || v25 != 0))
          goto LABEL_116;
        Phase::Controller::RenderGroupMgr::GetRenderer(v22, v21[4], &v171);
        v27 = v171;
        if (v171)
        {
          v28 = *(_DWORD *)v3;
          if (*(_DWORD *)v3 == 1)
            goto LABEL_49;
          if (v28 == 2)
          {
LABEL_51:
            v29 = (unsigned __int8 *)v27 + 52;
            while (!__ldaxr(v29))
            {
              if (!__stlxr(1u, v29))
                goto LABEL_54;
            }
            __clrex();
          }
          else
          {
            if (v28 != 3)
            {
              v132 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v171) + 224));
              if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
              {
                sGenerateSpatialModelerInfoString((uint64_t)out, *(_QWORD *)(v154 + 5864));
                v133 = out[23] >= 0 ? out : *(char **)out;
                v134 = *(_DWORD *)v3 - 1;
                v135 = v134 > 2 ? "<invalid>" : off_24D579718[v134];
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2238;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = v133;
                *(_WORD *)&buf[28] = 2080;
                *(_QWORD *)&buf[30] = v135;
                _os_log_impl(&dword_2164CC000, v132, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"(%s) - invalid spatial modeler graph type (graph: %s)\"", buf, 0x26u);
                if (out[23] < 0)
                  operator delete(*(void **)out);
              }

              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "(%s) - invalid spatial modeler graph type (graph: %s)");
            }
LABEL_49:
            if (((*(uint64_t (**)(void))(*(_QWORD *)v171 + 88))() & 1) == 0)
            {
              v27 = v171;
              goto LABEL_51;
            }
          }
          v46 = 7;
          goto LABEL_110;
        }
LABEL_54:
        v31 = operator new();
        *(_OWORD *)(v31 + 80) = 0u;
        *(_OWORD *)(v31 + 96) = 0u;
        *(_OWORD *)(v31 + 48) = 0u;
        *(_OWORD *)(v31 + 64) = 0u;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_OWORD *)(v31 + 32) = 0u;
        *(_OWORD *)v31 = 0u;
        *(_QWORD *)(v31 + 56) = std::system_category();
        *(_QWORD *)(v31 + 64) = 0;
        *(_QWORD *)(v31 + 72) = 0;
        *(_QWORD *)(v31 + 80) = -1;
        *(_QWORD *)(v31 + 88) = 0;
        *(_QWORD *)(v31 + 96) = 0;
        *(_DWORD *)(v31 + 104) = 0;
        *(_OWORD *)(v31 + 112) = 0u;
        *(_OWORD *)(v31 + 128) = 0u;
        v167 = *((_OWORD *)v21 + 3);
        v170 = 0;
        v32 = operator new(0x28uLL);
        *v32 = &off_24D579148;
        v32[1] = v154;
        *((_OWORD *)v32 + 1) = v167;
        v32[4] = v3;
        v170 = (void **)v32;
        Phase::Controller::SpatialQueryInstance::Initialize(v31, v154 + 496, v24, (uint64_t)__p, v31);
        v33 = v170;
        if (v170 == __p)
        {
          v33 = __p;
          v34 = 4;
        }
        else
        {
          if (!v170)
            goto LABEL_59;
          v34 = 5;
        }
        (*((void (**)(void))*v33 + v34))();
LABEL_59:
        v35 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::RenderGroupInput<float>>(v31);
        v36 = v21 + 6;
        v37 = *((_OWORD *)v21 + 3);
        *((_QWORD *)v35 + 26) = v21[8];
        *((_OWORD *)v35 + 12) = v37;
        *((_DWORD *)v35 + 54) = *((_DWORD *)v21 + 18);
        *((_DWORD *)v35 + 55) = *((_DWORD *)v21 + 19);
        *((_DWORD *)v35 + 56) = *((_DWORD *)v21 + 20);
        *((_DWORD *)v35 + 57) = *((_DWORD *)v21 + 21);
        *((_DWORD *)v35 + 58) = *((_DWORD *)v21 + 22);
        *((_DWORD *)v35 + 59) = *((_DWORD *)v21 + 23);
        *((_DWORD *)v35 + 60) = *((_DWORD *)v21 + 24);
        *((_DWORD *)v35 + 61) = *((_DWORD *)v21 + 25);
        memcpy((char *)v35 + 248, v21 + 13, 0x109uLL);
        v38 = v21[51];
        *((_OWORD *)v35 + 33) = *(_OWORD *)(v21 + 49);
        *((_QWORD *)v35 + 68) = v38;
        v39 = *v153;
        memset(buf, 0, sizeof(buf));
        v176 = 0u;
        v177 = 0u;
        v178 = 0u;
        memset(v179, 0, 28);
        *(_DWORD *)&v179[28] = v39;
        if (v39)
          memset_pattern16(buf, &unk_2166F77F0, 4 * v39);
        v40 = v178;
        *((_OWORD *)v35 + 8) = v177;
        *((_OWORD *)v35 + 9) = v40;
        v41 = *(_OWORD *)&v179[16];
        *((_OWORD *)v35 + 10) = *(_OWORD *)v179;
        *((_OWORD *)v35 + 11) = v41;
        v42 = *(_OWORD *)&buf[16];
        *((_OWORD *)v35 + 4) = *(_OWORD *)buf;
        *((_OWORD *)v35 + 5) = v42;
        v43 = v176;
        *((_OWORD *)v35 + 6) = *(_OWORD *)&buf[32];
        *((_OWORD *)v35 + 7) = v43;
        v44 = *(_OWORD *)v153;
        v45 = *((_OWORD *)v153 + 1);
        *((_QWORD *)v35 + 5) = v153[4];
        *(_OWORD *)((char *)v35 + 24) = v45;
        *(_OWORD *)((char *)v35 + 8) = v44;
        *((_BYTE *)v35 + 48) = (*(_DWORD *)v3 & 0xFFFFFFFD) == 1;
        if (v23 < 0.0)
        {
          Phase::Controller::SpatialQueryInstance::~SpatialQueryInstance((Phase::Controller::SpatialQueryInstance **)v31);
          MEMORY[0x2199F9D70]();
          v46 = 1;
          goto LABEL_110;
        }
        v47 = 0;
        v48 = 0xCBF29CE484222325;
        do
          v48 = 0x100000001B3 * (v48 ^ *((char *)v36 + v47++));
        while (v47 != 16);
        v49 = *(_QWORD *)(v3 + 992);
        if (v49)
        {
          v50 = (uint8x8_t)vcnt_s8((int8x8_t)v49);
          v50.i16[0] = vaddlv_u8(v50);
          if (v50.u32[0] > 1uLL)
          {
            v22 = (Phase::Controller::RenderGroupMgr *)v48;
            if (v48 >= v49)
              v22 = (Phase::Controller::RenderGroupMgr *)(v48 % v49);
          }
          else
          {
            v22 = (Phase::Controller::RenderGroupMgr *)((v49 - 1) & v48);
          }
          v51 = *(Phase::Controller::SpatialQueryInstance *****)(*v152 + 8 * (_QWORD)v22);
          if (v51)
          {
            for (i = *v51; i; i = (Phase::Controller::SpatialQueryInstance ***)*i)
            {
              v53 = (unint64_t)i[1];
              if (v53 == v48)
              {
                if (i[2] == (Phase::Controller::SpatialQueryInstance **)v21[6]
                  && i[3] == (Phase::Controller::SpatialQueryInstance **)v21[7])
                {
                  std::unique_ptr<Phase::Controller::SpatialQueryInstance>::reset[abi:ne180100](i + 4, (Phase::Controller::SpatialQueryInstance **)v31);
                  v46 = 0;
                  i[6] = i[5];
                  goto LABEL_109;
                }
              }
              else
              {
                if (v50.u32[0] > 1uLL)
                {
                  if (v53 >= v49)
                    v53 %= v49;
                }
                else
                {
                  v53 &= v49 - 1;
                }
                if ((Phase::Controller::RenderGroupMgr *)v53 != v22)
                  break;
              }
            }
          }
        }
        v55 = operator new(0x40uLL);
        *(_QWORD *)buf = v55;
        *(_QWORD *)&buf[8] = v3 + 1000;
        *v55 = 0;
        v55[1] = v48;
        *((_OWORD *)v55 + 1) = *v36;
        v55[6] = 0;
        v55[7] = 0;
        v55[4] = v31;
        v55[5] = 0;
        v56 = *(float *)(v3 + 1016);
        v57 = *(_QWORD *)(v3 + 1008);
        buf[16] = 1;
        v58 = (float)(unint64_t)(v57 + 1);
        if (!v49 || (float)(v56 * (float)v49) < v58)
        {
          v59 = (v49 & (v49 - 1)) != 0;
          if (v49 < 3)
            v59 = 1;
          v60 = v59 | (2 * v49);
          v61 = vcvtps_u32_f32(v58 / v56);
          if (v60 <= v61)
            v62 = v61;
          else
            v62 = v60;
          std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v152, v62);
          v49 = *(_QWORD *)(v3 + 992);
          if ((v49 & (v49 - 1)) != 0)
          {
            if (v48 >= v49)
              v22 = (Phase::Controller::RenderGroupMgr *)(v48 % v49);
            else
              v22 = (Phase::Controller::RenderGroupMgr *)v48;
          }
          else
          {
            v22 = (Phase::Controller::RenderGroupMgr *)((v49 - 1) & v48);
          }
        }
        v63 = *v152;
        v64 = *(_QWORD **)(*v152 + 8 * (_QWORD)v22);
        if (v64)
        {
          *v55 = *v64;
        }
        else
        {
          *v55 = *v150;
          *v150 = v55;
          *(_QWORD *)(v63 + 8 * (_QWORD)v22) = v150;
          if (!*v55)
            goto LABEL_108;
          v65 = *(_QWORD *)(*v55 + 8);
          if ((v49 & (v49 - 1)) != 0)
          {
            v66 = (_QWORD *)(v3 + 984);
            if (v65 >= v49)
              v65 %= v49;
          }
          else
          {
            v65 &= v49 - 1;
            v66 = (_QWORD *)(v3 + 984);
          }
          v64 = (_QWORD *)(*v66 + 8 * v65);
        }
        *v64 = v55;
LABEL_108:
        *(_QWORD *)buf = 0;
        ++*(_QWORD *)(v3 + 1008);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
        v46 = 0;
LABEL_109:
        v22 = (Phase::Controller::RenderGroupMgr *)(v3 + 1600);
        v24 = (Phase::SystemAllocator *)(v154 + 5848);
LABEL_110:
        v67 = v172;
        if (!v172)
          goto LABEL_114;
        p_shared_owners = (unint64_t *)&v172->__shared_owners_;
        do
          v69 = __ldaxr(p_shared_owners);
        while (__stlxr(v69 - 1, p_shared_owners));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
          if (v46)
          {
LABEL_115:
            if (v46 != 7)
              goto LABEL_7;
          }
        }
        else
        {
LABEL_114:
          if (v46)
            goto LABEL_115;
        }
LABEL_116:
        v21 = (uint64_t *)*v21;
      }
      while (v21);
    }
    v159 = 0;
    v160 = 0;
    v161 = 0;
    std::vector<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry>>::reserve(&v159, *((_QWORD *)a2 + 8));
    v70 = (_QWORD *)*((_QWORD *)a2 + 7);
    if (v70)
    {
      v71 = v160;
      do
      {
        v72 = v70 + 4;
        if ((unint64_t)v71 >= v161)
        {
          v74 = (char *)v159;
          v75 = (v71 - (_BYTE *)v159) >> 3;
          v76 = v75 + 1;
          if ((unint64_t)(v75 + 1) >> 61)
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          v77 = v161 - (_QWORD)v159;
          if ((uint64_t)(v161 - (_QWORD)v159) >> 2 > v76)
            v76 = v77 >> 2;
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
            v78 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v78 = v76;
          if (v78)
            v78 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v78);
          else
            v79 = 0;
          v80 = (char *)(v78 + 8 * v75);
          *(_QWORD *)v80 = v72;
          v73 = v80 + 8;
          if (v71 != v74)
          {
            do
            {
              v81 = *((_QWORD *)v71 - 1);
              v71 -= 8;
              *((_QWORD *)v80 - 1) = v81;
              v80 -= 8;
            }
            while (v71 != v74);
            v71 = (char *)v159;
          }
          v159 = v80;
          v160 = v73;
          v161 = v78 + 8 * v79;
          if (v71)
            operator delete(v71);
        }
        else
        {
          *(_QWORD *)v71 = v72;
          v73 = v71 + 8;
        }
        v160 = v73;
        v70 = (_QWORD *)*v70;
        v71 = v73;
      }
      while (v70);
    }
    v82 = (uint64_t *)v159;
    if (*((_QWORD *)a2 + 26))
    {
      v83 = (uint64_t *)v160;
      std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)&v171, (uint64_t)a2 + 184);
      if ((char *)v83 - (char *)v82 < 1025)
      {
        v84 = 0;
        v86 = 0;
      }
      else
      {
        v84 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry>>(v83 - v82);
        v86 = v85;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>((uint64_t)v82, v83, (uint64_t)&v171, v83 - v82, v84, v86);
      if (v84)
        operator delete(v84);
      v87 = v174;
      if (v174 == &v171)
      {
        v88 = 4;
        v87 = &v171;
        goto LABEL_150;
      }
      if (v174)
      {
        v88 = 5;
LABEL_150:
        (*((void (**)(void))*v87 + v88))();
      }
    }
    else
    {
      v83 = (uint64_t *)v160;
    }
    if (v82 != v83)
    {
      do
      {
        v89 = *v82;
        v90 = *(_QWORD *)(*v82 + 16);
        if (v158 > v90
          && HIDWORD(v156[3 * v90 + 2]) == HIDWORD(v90)
          && (v91 = v156[3 * *(_QWORD *)(*v82 + 16)]) != 0)
        {
          v180 = *(_OWORD *)v89;
          v92 = *(_QWORD *)(v91 + 32);
          *(_OWORD *)uu = *(_OWORD *)(v89 + 24);
          v93 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::find<Phase::UniqueObjectId>(*(_QWORD *)(v3 + 984), *(_QWORD *)(v3 + 992), uu);
          if (v93)
          {
            v94 = v93;
            if (!atomic_load((unsigned int *)v93[4]))
            {
              v96 = v93[6];
              v97 = v93[7];
              if (v96 >= v97)
              {
                v100 = v93[5];
                v101 = (uint64_t)(v96 - v100) >> 5;
                v102 = v101 + 1;
                if ((unint64_t)(v101 + 1) >> 59)
                  std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
                v103 = v97 - v100;
                if (v103 >> 4 > v102)
                  v102 = v103 >> 4;
                if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFE0)
                  v104 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v104 = v102;
                if (v104)
                  v104 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>(v104);
                else
                  v105 = 0;
                v106 = v104 + 32 * v101;
                *(_OWORD *)v106 = v180;
                *(_QWORD *)(v106 + 16) = v90;
                *(_QWORD *)(v106 + 24) = v92;
                v108 = (char *)v94[5];
                v107 = (char *)v94[6];
                v109 = v106;
                if (v107 != v108)
                {
                  do
                  {
                    v110 = *((_OWORD *)v107 - 1);
                    *(_OWORD *)(v109 - 32) = *((_OWORD *)v107 - 2);
                    *(_OWORD *)(v109 - 16) = v110;
                    v109 -= 32;
                    v107 -= 32;
                  }
                  while (v107 != v108);
                  v107 = (char *)v94[5];
                }
                v98 = v106 + 32;
                v94[5] = v109;
                v94[6] = v106 + 32;
                v94[7] = v104 + 32 * v105;
                if (v107)
                  operator delete(v107);
              }
              else
              {
                *(_OWORD *)v96 = v180;
                *(_QWORD *)(v96 + 16) = v90;
                *(_QWORD *)(v96 + 24) = v92;
                v98 = v96 + 32;
              }
              v94[6] = v98;
              v111 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::RenderGroupInput<float>>(v94[4]);
              v112 = (uint64_t)v111;
              v113 = *(double *)(v91 + 56);
              if (*((float *)v111 + 16) > v113)
              {
                v114 = *v153;
                memset(buf, 0, sizeof(buf));
                v176 = 0u;
                v177 = 0u;
                v178 = 0u;
                memset(v179, 0, 28);
                *(_DWORD *)&v179[28] = v114;
                if (v114)
                {
                  v115 = buf;
                  do
                  {
                    *(float *)v115 = v113;
                    v115 += 4;
                    --v114;
                  }
                  while (v114);
                }
                v116 = v178;
                *((_OWORD *)v111 + 8) = v177;
                *((_OWORD *)v111 + 9) = v116;
                v117 = *(_OWORD *)&v179[16];
                *((_OWORD *)v111 + 10) = *(_OWORD *)v179;
                *((_OWORD *)v111 + 11) = v117;
                v118 = *(_OWORD *)&buf[16];
                *((_OWORD *)v111 + 4) = *(_OWORD *)buf;
                *((_OWORD *)v111 + 5) = v118;
                v119 = v176;
                *((_OWORD *)v111 + 6) = *(_OWORD *)&buf[32];
                *((_OWORD *)v111 + 7) = v119;
              }
              v120 = *((_QWORD *)v111 + 69);
              v121 = *(_QWORD *)(v91 + 40);
              if (v120)
              {
                if (v120 != v121)
                {
                  v143 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v111) + 224));
                  if (os_log_type_enabled(v143, OS_LOG_TYPE_ERROR))
                  {
                    sGenerateSpatialModelerInfoString((uint64_t)out, *(_QWORD *)(v154 + 5864));
                    v145 = out[23];
                    v146 = *(char **)out;
                    sGenerateRenderGroupInputString((uint64_t)v164, v112);
                    v147 = out;
                    if (v145 < 0)
                      v147 = v146;
                    if (v165 >= 0)
                      v148 = v164;
                    else
                      v148 = (void **)v164[0];
                    *(_DWORD *)buf = 136315906;
                    *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 2355;
                    *(_WORD *)&buf[18] = 2080;
                    *(_QWORD *)&buf[20] = v147;
                    *(_WORD *)&buf[28] = 2080;
                    *(_QWORD *)&buf[30] = v148;
                    _os_log_impl(&dword_2164CC000, v143, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [pQueryInput->mListenerEntity != inpSubmixInfo->mListenerHandle is true]: \"(%s) - render group is defined for multiple listeners (%s)\"", buf, 0x26u);
                    if (v165 < 0)
                      operator delete(v164[0]);
                    if (out[23] < 0)
                      operator delete(*(void **)out);
                  }

                  v142 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v142, "(%s) - render group is defined for multiple listeners (%s)");
                  goto LABEL_242;
                }
              }
              else
              {
                *((_QWORD *)v111 + 69) = v121;
              }
            }
          }
          else if (*(_DWORD *)v3 == 2)
          {
            v136 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0)
                                                                                                 + 224)));
            if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
            {
              sGenerateSpatialModelerInfoString((uint64_t)v164, *(_QWORD *)(v154 + 5864));
              v138 = v165;
              v139 = (void **)v164[0];
              memset(out, 0, sizeof(out));
              uuid_unparse(uu, out);
              std::string::basic_string[abi:ne180100]<0>(&v162, out);
              v140 = v164;
              if (v138 < 0)
                v140 = v139;
              if (v163 >= 0)
                v141 = &v162;
              else
                v141 = *(std::error_code **)&v162.__val_;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2320;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v140;
              *(_WORD *)&buf[28] = 2080;
              *(_QWORD *)&buf[30] = v141;
              _os_log_impl(&dword_2164CC000, v136, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [SpatialModelerGraph::Sustain == inGraphData.mGraphType is true]: \"(%s) - spatial query not found in lookup map for render group %s in sustain graph\"", buf, 0x26u);
              if (v163 < 0)
                operator delete(*(void **)&v162.__val_);
              if (v165 < 0)
                operator delete(v164[0]);
            }

            v142 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v142, "(%s) - spatial query not found in lookup map for render group %s in sustain graph");
LABEL_242:
          }
          v83 = (uint64_t *)v160;
        }
        else
        {
          v99 = *((_QWORD *)a2 + 22);
          if (v99)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v99 + 48))(v99, *v82);
          std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>>>::__erase_unique<Phase::UniqueObjectId>((_QWORD *)a2 + 5, (_QWORD *)v89);
        }
        ++v82;
      }
      while (v82 != v83);
      v82 = (uint64_t *)v159;
    }
    if (v82)
      operator delete(v82);
    atomic_store(0, (unint64_t *)(v3 + 768));
    for (j = *(_QWORD **)(v3 + 1000); j; j = (_QWORD *)*j)
    {
      if (j[5] != j[6] && !atomic_load((unsigned int *)j[4]))
      {
        Phase::SpatialModeler::Scheduler::SubmitQuery(*(unsigned __int8 **)(v154 + 5872), j[4], a3, (uint64_t)out);
        if (!out[0])
        {
          v124 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::RenderGroupInput<float>>(j[4]);
          v125 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v124)
                                                                                               + 224)));
          if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
          {
            sGenerateSpatialModelerInfoString((uint64_t)&v171, *(_QWORD *)(v154 + 5864));
            if (v173 >= 0)
              v126 = &v171;
            else
              v126 = v171;
            sGenerateRenderGroupInputString((uint64_t)v164, (uint64_t)v124);
            v127 = v165;
            v128 = (void **)v164[0];
            sGenerateErrorCodeString(&v162, (const std::error_code *)&out[8]);
            v129 = v164;
            if (v127 < 0)
              v129 = v128;
            v130 = &v162;
            if (v163 < 0)
              v130 = *(std::error_code **)&v162.__val_;
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "CvmSpatialModelerInstance.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2392;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v126;
            *(_WORD *)&buf[28] = 2080;
            *(_QWORD *)&buf[30] = v129;
            *(_WORD *)&buf[38] = 2080;
            *(_QWORD *)&buf[40] = v130;
            _os_log_impl(&dword_2164CC000, v125, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - failed to submit spatial query (%s) (%s)", buf, 0x30u);
            if (v163 < 0)
              operator delete(*(void **)&v162.__val_);
            if (v165 < 0)
              operator delete(v164[0]);
            if (v173 < 0)
              operator delete(v171);
          }

          v131 = j[4];
          atomic_store(0, (unsigned int *)v131);
          std::shared_ptr<Phase::Job>::reset[abi:ne180100]((_QWORD *)(v131 + 64));
          atomic_store(0, (unsigned int *)(v131 + 104));
        }
      }
    }
    goto LABEL_7;
  }
LABEL_6:
  Phase::SpatialModeler::PriorityQueue::ClearEntries(a2, 1);
LABEL_7:
  v6 = v157;
  if (v157)
  {
    v7 = (unint64_t *)&v157->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_21652F4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void **a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,__int128 buf,__int128 a54)
{
  uint64_t v54;
  void *v55;
  uint64_t v56;
  unint64_t *p_shared_owners;
  unint64_t v60;
  Phase::Logger *v61;
  NSObject *v62;
  void **v63;
  uint64_t v64;
  uint64_t v65;

  if (*(char *)(v56 - 137) < 0)
    operator delete(*(void **)(v56 - 160));

  if (__p)
    operator delete(__p);
  if (a2 == 1)
  {
    v61 = (Phase::Logger *)__cxa_begin_catch(a1);
    v62 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v61)
                                                                                        + 224)));
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      v63 = (void **)&a32;
      sGenerateSpatialModelerInfoString((uint64_t)&a32, *(_QWORD *)(a20 + 5864));
      if (a37 < 0)
        v63 = a32;
      v64 = (*(uint64_t (**)(Phase::Logger *))(*(_QWORD *)v61 + 16))(v61);
      LODWORD(buf) = 136315906;
      *(_QWORD *)((char *)&buf + 4) = "CvmSpatialModelerInstance.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 2366;
      WORD1(a54) = 2080;
      *(_QWORD *)((char *)&a54 + 4) = v63;
      WORD6(a54) = 2080;
      *(_QWORD *)((char *)&a54 + 14) = v64;
      _os_log_impl(&dword_2164CC000, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - exception thrown and caught (exception: %s)", (uint8_t *)&buf, 0x26u);
      if (a37 < 0)
        operator delete(a32);
    }

    Phase::Controller::SpatialModelerInstance::DestroyTempSpatialGraphData(v65, v54);
    __cxa_end_catch();
    JUMPOUT(0x21652E3F0);
  }
  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v60 = __ldaxr(p_shared_owners);
    while (__stlxr(v60 - 1, p_shared_owners));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_8,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_8>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_8,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_8>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D5793D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_8,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_8>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D5793D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

const std::error_category *std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_8,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_8>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::operator()(const std::error_category *result, _QWORD *a2)
{
  std::string (__cdecl *message)(const std::error_category *__hidden, int);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;

  message = result[2].__vftable[17].message;
  if (message)
  {
    while (1)
    {
      v4 = *((_QWORD *)message + 5);
      v3 = *((_QWORD *)message + 6);
      v5 = v3 - v4;
      if (v3 != v4)
        break;
LABEL_10:
      message = *(std::string (__cdecl **)(const std::error_category *__hidden, int))message;
      if (!message)
        return result;
    }
    v6 = 0;
    if ((unint64_t)(v5 >> 5) <= 1)
      v7 = 1;
    else
      v7 = v5 >> 5;
    v8 = *((_QWORD *)message + 5);
    while (1)
    {
      result = *(const std::error_category **)v8;
      if (*a2 == *(_QWORD *)v8)
      {
        result = *(const std::error_category **)(v8 + 8);
        if ((const std::error_category *)a2[1] == result)
          break;
      }
      ++v6;
      v8 += 32;
      if (v7 == v6)
        goto LABEL_10;
    }
    if (v5 == 32)
    {
      *((_QWORD *)message + 6) = v4;
      v9 = (unsigned int *)*((_QWORD *)message + 4);
      if (v9)
      {
        if (atomic_load(v9 + 26))
        {
          v11 = atomic_load(v9);
          if (v11 - 1 <= 1)
          {
            while (1)
            {
              v12 = __ldaxr(v9);
              if (v12 != v11)
                break;
              if (!__stlxr(6u, v9))
                return std::system_category();
            }
            __clrex();
          }
        }
      }
    }
    else if (v5 >> 5 > (unint64_t)(v6 + 1))
    {
      v13 = *(_OWORD *)(v3 - 16);
      *(_OWORD *)v8 = *(_OWORD *)(v3 - 32);
      *(_OWORD *)(v8 + 16) = v13;
      *((_QWORD *)message + 6) -= 32;
    }
  }
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_9,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_9>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_9,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_9>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D579418;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_9,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_9>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D579418;
  a2[1] = v2;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_9,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_9>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator()(uint64_t a1)
{
  Phase::Controller::RenderGroupMgr::SendChanges((Phase::Controller::RenderGroupMgr *)(*(_QWORD *)(a1 + 8) + 1600));
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_10,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_10>,BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_10,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_10>,BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D579460;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_10,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_10>,BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D579460;
}

BOOL std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_10,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_10>,BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + 56) < *(double *)(a3 + 56);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_11,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_11>,void ()(Phase::SpatialModeler::Query &)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_11,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_11>,void ()(Phase::SpatialModeler::Query &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D5794A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_11,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_11>,void ()(Phase::SpatialModeler::Query &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D5794A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_11,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_11>,void ()(Phase::SpatialModeler::Query &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, Phase::Controller::SpatialModelerInstance::GraphData *a4)
{
  Phase::Controller::SpatialModelerInstance::FinishClusterQuery(*(Phase::Controller::SpatialModelerInstance **)(a1 + 8), (Phase::Controller::SpatialQueryInstance *)(*(_QWORD *)(a1 + 16) + 256), *(Phase::SpatialModeler::PriorityQueue **)(a1 + 16), a4);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_0,void>::~Invoker()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_0,void>::Call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_1,void>::~Invoker()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_1,void>::Call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_2,void>::~Invoker()
{
  JUMPOUT(0x2199F9D70);
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_2,void>::Call(uint64_t a1)
{
  Phase::Controller::SpatialModelerInstance::BuildIRs(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) + 1152);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_3,void>::~Invoker()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_3,void>::Call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_4,void>::~Invoker()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_4,void>::Call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_5,void>::~Invoker()
{
  JUMPOUT(0x2199F9D70);
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_5,void>::Call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = v1 + 1152;
  Phase::Controller::SpatialModelerInstance::BuildIRs(v1, v1 + 1152);
  Phase::Controller::SpatialModelerInstance::DestroyTempSpatialGraphData(v3, v2);
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateAttackJob(void)::$_0,void>::~Invoker()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateAttackJob(void)::$_0,void>::Call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateAttackJob(void)::$_1,void>::~Invoker()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateAttackJob(void)::$_1,void>::Call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateAttackJob(void)::$_2,void>::~Invoker()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateAttackJob(void)::$_2,void>::Call(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t i;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v14;
  uint64_t v15;

  v1 = *(unint64_t **)(a1 + 8);
  Phase::Controller::SpatialModelerInstance::BuildIRs((uint64_t)v1, (uint64_t)(v1 + 416));
  Phase::Controller::SpatialModelerInstance::DestroyTempSpatialGraphData(v2, (uint64_t)(v1 + 416));
  v14 = 0;
  v15 = 0;
  for (i = v1[424]; i; i = *(_QWORD *)i)
  {
    v4 = operator new();
    *(_QWORD *)(v4 + 80) = 0;
    *(_DWORD *)v4 = 1;
    v5 = *(_OWORD *)(i + 32);
    v6 = *(_OWORD *)(i + 48);
    v7 = *(_OWORD *)(i + 64);
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(i + 80);
    *(_OWORD *)(v4 + 40) = v7;
    *(_OWORD *)(v4 + 24) = v6;
    *(_OWORD *)(v4 + 8) = v5;
    *(_DWORD *)(v4 + 72) = 1;
    *(_QWORD *)(v4 + 88) = v15;
    v15 = v4;
  }
  v8 = v1[455];
  if (v8)
  {
    do
    {
      *(_BYTE *)(v8 + 80) = 0;
      v9 = operator new();
      *(_QWORD *)(v9 + 80) = 0;
      *(_DWORD *)v9 = 1;
      v10 = *(_OWORD *)(v8 + 32);
      v11 = *(_OWORD *)(v8 + 48);
      v12 = *(_OWORD *)(v8 + 64);
      *(_OWORD *)(v9 + 56) = *(_OWORD *)(v8 + 80);
      *(_OWORD *)(v9 + 40) = v12;
      *(_OWORD *)(v9 + 24) = v11;
      *(_OWORD *)(v9 + 8) = v10;
      *(_DWORD *)(v9 + 72) = 1;
      *(_QWORD *)(v9 + 88) = v14;
      v14 = v9;
      v8 = *(_QWORD *)v8;
    }
    while (v8);
    goto LABEL_7;
  }
  if (v14)
LABEL_7:
    Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::Commit(v1 + 203, &v14);
  Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::Commit(v1 + 172, &v15);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(v1 + 422);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(v1 + 453);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(v1 + 484);
  Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(&v14);
  return Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(&v15);
}

void sub_21652FF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(&a9);
  Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(&a10);
  _Unwind_Resume(a1);
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateAttackJob(void)::$_3,void>::~Invoker()
{
  JUMPOUT(0x2199F9D70);
}

uint64_t Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateAttackJob(void)::$_3,void>::Call(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(*(_QWORD *)(result + 8) + 5640));
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t *std::list<std::shared_ptr<Phase::Job>>::list(uint64_t *a1, uint64_t a2)
{
  uint64_t i;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (i = a2; ; std::list<std::shared_ptr<Phase::Job>>::push_back(a1, (_QWORD *)(i + 16)))
  {
    i = *(_QWORD *)(i + 8);
    if (i == a2)
      break;
  }
  return a1;
}

void sub_216530014(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::list<double>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v7[2] = *(_QWORD *)(v3 + 16);
      *v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_2165300AC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D579680;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D579680;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x28uLL);
  *v2 = off_24D579680;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  v2[4] = *(_QWORD *)(a1 + 32);
  return v2;
}

void sub_2165301B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v4;
  __int128 v5;

  *a2 = off_24D579680;
  v4 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 8);
    a2[3] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  a2[4] = *(_QWORD *)(a1 + 32);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::operator()(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  NSObject *v12;
  NSObject *v13;
  void **v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18[2];
  uint64_t v19;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  void **v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v18[0] = (uint64_t)v18;
  v18[1] = (uint64_t)v18;
  v19 = 0;
  v5 = a3[2];
  if (v5)
  {
    v7 = *a3;
    v6 = (uint64_t *)a3[1];
    v8 = *v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    v9 = v18[0];
    *(_QWORD *)(v18[0] + 8) = v6;
    *v6 = v9;
    *(_QWORD *)(v7 + 8) = v18;
    v18[0] = v7;
    v19 = v5;
    a3[2] = 0;
  }
  v10 = *(_QWORD *)(a1 + 32);
  v11 = v4 == 0;
  v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1)
                                                                                      + 224)));
  v13 = v12;
  if (v11)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, v10);
      v16 = v21 >= 0 ? __p : (void **)__p[0];
      v17 = *(char *)(a1 + 31) >= 0 ? a1 + 8 : *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 136315906;
      v23 = "CvmSpatialModelerInstance.mm";
      v24 = 1024;
      v25 = 3073;
      v26 = 2080;
      v27 = v16;
      v28 = 2080;
      v29 = v17;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: failed to start sustain graphs (stage, rate):\n%s", buf, 0x26u);
      if (v21 < 0)
        operator delete(__p[0]);
    }

    std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::clear(v10 + 5784);
  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, v10);
      if (v21 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      if (*(char *)(a1 + 31) >= 0)
        v15 = a1 + 8;
      else
        v15 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 136315906;
      v23 = "CvmSpatialModelerInstance.mm";
      v24 = 1024;
      v25 = 3068;
      v26 = 2080;
      v27 = v14;
      v28 = 2080;
      v29 = v15;
      _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s: started sustain graphs (stage, rate):\n%s", buf, 0x26u);
      if (v21 < 0)
        operator delete(__p[0]);
    }

  }
  std::mutex::unlock((std::mutex *)(v10 + 5648));
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v18);
}

void sub_2165304C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::StopSustainGraph(BOOL)::$_1,std::allocator<Phase::Controller::SpatialModelerInstance::StopSustainGraph(BOOL)::$_1>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::StopSustainGraph(BOOL)::$_1,std::allocator<Phase::Controller::SpatialModelerInstance::StopSustainGraph(BOOL)::$_1>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D5796C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::StopSustainGraph(BOOL)::$_1,std::allocator<Phase::Controller::SpatialModelerInstance::StopSustainGraph(BOOL)::$_1>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D5796C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::StopSustainGraph(BOOL)::$_1,std::allocator<Phase::Controller::SpatialModelerInstance::StopSustainGraph(BOOL)::$_1>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::operator()(Phase::Logger *a1, unsigned __int8 *a2, uint64_t *a3)
{
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  NSObject *v12;
  NSObject *v13;
  void **v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21[2];
  uint64_t v22;
  void *__p[2];
  char v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  void **v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v21[0] = (uint64_t)v21;
  v21[1] = (uint64_t)v21;
  v22 = 0;
  v5 = a3[2];
  if (v5)
  {
    v7 = *a3;
    v6 = (uint64_t *)a3[1];
    v8 = *v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    v9 = v21[0];
    *(_QWORD *)(v21[0] + 8) = v6;
    *v6 = v9;
    *(_QWORD *)(v7 + 8) = v21;
    v21[0] = v7;
    v22 = v5;
    a3[2] = 0;
  }
  v10 = *((_QWORD *)a1 + 1);
  v11 = v4 == 0;
  v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1)
                                                                                      + 224)));
  v13 = v12;
  if (v11)
  {
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, v10);
    if (v24 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    v20 = *((_QWORD *)a1 + 2);
    *(_DWORD *)buf = 136315906;
    v26 = "CvmSpatialModelerInstance.mm";
    v27 = 1024;
    v28 = 3108;
    v29 = 2080;
    v30 = v19;
    v31 = 2048;
    v32 = v20;
    v16 = "%25s:%-5d %s: failed to stop (%lu) sustain graphs";
    v17 = v13;
    v18 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      goto LABEL_16;
    Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, v10);
    if (v24 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    v15 = *((_QWORD *)a1 + 2);
    *(_DWORD *)buf = 136315906;
    v26 = "CvmSpatialModelerInstance.mm";
    v27 = 1024;
    v28 = 3103;
    v29 = 2080;
    v30 = v14;
    v31 = 2048;
    v32 = v15;
    v16 = "%25s:%-5d %s: succesfully stopped all (%lu) sustain graphs";
    v17 = v13;
    v18 = OS_LOG_TYPE_DEFAULT;
  }
  _os_log_impl(&dword_2164CC000, v17, v18, v16, buf, 0x26u);
  if (v24 < 0)
    operator delete(__p[0]);
LABEL_16:

  atomic_store(0, (unsigned __int8 *)(v10 + 5643));
  std::mutex::unlock((std::mutex *)(v10 + 5648));
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v21);
}

void sub_21653078C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(&a9);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  uint64_t *v14;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_OWORD *)v8 + 1) = *((_OWORD *)a2 + 1);
      v8[4] = a2[4];
      v9 = (uint64_t *)*v8;
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__node_insert_multi((uint64_t)a1, v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_7;
    }
    do
    {
      v14 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v14;
    }
    while (v14);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v10 = operator new(0x28uLL);
      *(_QWORD *)v10 = 0;
      v11 = a2[4];
      v10[1] = *((_OWORD *)a2 + 1);
      *((_QWORD *)v10 + 4) = v11;
      v12 = 0xCBF29CE484222325;
      for (j = 16; j != 32; ++j)
        v12 = 0x100000001B3 * (v12 ^ *((char *)v10 + j));
      *((_QWORD *)v10 + 1) = v12;
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__node_insert_multi((uint64_t)a1, v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_2165308DC(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_2165308FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__node_insert_multi(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t i;
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  _QWORD *j;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint8x8_t v27;
  unint64_t v28;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  _BOOL4 v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;

  v4 = 0xCBF29CE484222325;
  for (i = 16; i != 32; ++i)
    v4 = 0x100000001B3 * (v4 ^ *((char *)a2 + i));
  a2[1] = v4;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      prime = (int8x8_t)v11;
    else
      prime = (int8x8_t)v10;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_102;
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_48;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_48;
    }
    if (prime)
    {
LABEL_102:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * *(_QWORD *)&prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (*(_QWORD *)&prime != v15);
      v16 = *(_QWORD **)(a1 + 16);
      if (v16)
      {
        v17 = v16[1];
        v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&prime)
            v17 %= *(_QWORD *)&prime;
        }
        else
        {
          v17 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = a1 + 16;
        for (j = (_QWORD *)*v16; *v16; j = (_QWORD *)*v16)
        {
          v23 = j[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&prime)
              v23 %= *(_QWORD *)&prime;
          }
          else
          {
            v23 &= *(_QWORD *)&prime - 1;
          }
          if (v23 == v17)
          {
            v16 = j;
          }
          else
          {
            v24 = j;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              do
              {
                v25 = v24;
                v24 = (_QWORD *)*v24;
                if (!v24)
                  break;
              }
              while (j[2] == v24[2] && j[3] == v24[3]);
              *v16 = v24;
              *v25 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = j;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v16;
              v16 = j;
              v17 = v23;
            }
          }
        }
      }
      v6 = (unint64_t)prime;
    }
    else
    {
      v39 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v39)
        operator delete(v39);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_48:
  v27 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v27.i16[0] = vaddlv_u8(v27);
  if (v27.u32[0] > 1uLL)
  {
    v28 = v4;
    if (v6 <= v4)
      v28 = v4 % v6;
  }
  else
  {
    v28 = (v6 - 1) & v4;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
  if (v29)
  {
    v30 = 0;
    do
    {
      v31 = v29;
      v29 = (_QWORD *)*v29;
      if (!v29)
        break;
      v32 = v29[1];
      if (v27.u32[0] > 1uLL)
      {
        v33 = v29[1];
        if (v32 >= v6)
          v33 = v32 % v6;
      }
      else
      {
        v33 = v32 & (v6 - 1);
      }
      if (v33 != v28)
        break;
      if (v32 == v4)
      {
        v34 = v29[2] == a2[2] && v29[3] == a2[3];
        v35 = v34;
      }
      else
      {
        v35 = 0;
      }
      v36 = v30 & !v35;
      v30 |= v35;
    }
    while (v36 != 1);
  }
  else
  {
    v31 = 0;
  }
  v37 = a2[1];
  if (v27.u32[0] > 1uLL)
  {
    if (v37 >= v6)
      v37 %= v6;
  }
  else
  {
    v37 &= v6 - 1;
  }
  if (!v31)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = a1 + 16;
    if (!*a2)
      goto LABEL_89;
    v38 = *(_QWORD *)(*a2 + 8);
    if (v27.u32[0] > 1uLL)
    {
      if (v38 >= v6)
        v38 %= v6;
    }
    else
    {
      v38 &= v6 - 1;
    }
LABEL_88:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = a2;
    goto LABEL_89;
  }
  *a2 = *v31;
  *v31 = a2;
  if (*a2)
  {
    v38 = *(_QWORD *)(*a2 + 8);
    if (v27.u32[0] > 1uLL)
    {
      if (v38 >= v6)
        v38 %= v6;
    }
    else
    {
      v38 &= v6 - 1;
    }
    if (v38 != v37)
      goto LABEL_88;
  }
LABEL_89:
  ++*(_QWORD *)(a1 + 24);
}

void _ZN5Phase7details13SharedSlotMapINS_10Controller22SpatialModelerInstance10SubmixInfoENS_8Handle64EE12DeepCopyFromIZNS_13SharedSlotMapIS4_S5_DnE12DeepCopyFromERKS9_EUlRT_E_EEvRKS6_OSC_(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  __int128 v22;

  v4 = a2[4];
  *((_DWORD *)a1 + 4) = v4;
  Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::AllocSlots(&v22, v4);
  v5 = v22;
  v22 = 0uLL;
  v6 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v12)
  {
    for (i = 0; i < v12; ++i)
    {
      v14 = *a1;
      v15 = *(_QWORD *)a2;
      v16 = *(_QWORD *)(*(_QWORD *)a2 + 24 * i);
      if (v16)
      {
        std::allocate_shared[abi:ne180100]<Phase::Controller::SpatialModelerInstance::SubmixInfo,std::allocator<Phase::Controller::SpatialModelerInstance::SubmixInfo>,Phase::Controller::SpatialModelerInstance::SubmixInfo&,void>(v16, &v22);
        std::shared_ptr<Phase::Controller::BinauralEncoder::FilterSwapInfo>::operator=[abi:ne180100](v14 + 24 * i, &v22);
        v17 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
        if (*((_QWORD *)&v22 + 1))
        {
          v18 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v12 = *((unsigned int *)a1 + 4);
      }
      *(_QWORD *)(v14 + 24 * i + 16) = *(_QWORD *)(v15 + 24 * i + 16);
    }
  }
  v20 = atomic_load(a2 + 5);
  atomic_store(v20, (unsigned int *)a1 + 5);
  v21 = atomic_load(a2 + 6);
  atomic_store(v21, (unsigned int *)a1 + 6);
}

void Phase::Controller::SpatialModelerSystem::~SpatialModelerSystem(Phase::Controller::SpatialModelerSystem *this)
{
  void **v2;

  Phase::Controller::SpatialModelerSystem::Destroy(this);
  *((_QWORD *)this + 12) = 0;
  v2 = (void **)((char *)this + 64);
  std::vector<Phase::Controller::GeometryPermutation>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 40);
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>>>::~__hash_table((uint64_t)this);
}

void Phase::Controller::SpatialModelerSystem::Destroy(Phase::Controller::SpatialModelerSystem *this)
{
  _QWORD *i;
  Phase::Controller::SpatialSubmixRouter **v3;

  for (i = (_QWORD *)*((_QWORD *)this + 2); i; i = (_QWORD *)*i)
  {
    v3 = *(Phase::Controller::SpatialSubmixRouter ***)(i[3] + 80);
    if (Phase::Controller::SpatialModelerInstance::StopUpdate((Phase::Controller::SpatialModelerInstance *)v3))
      Phase::Controller::SpatialModelerInstance::Reset(v3);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>>>::clear((uint64_t)this);
}

uint64_t Phase::Controller::SpatialModelerSystem::Initialize(Phase::Controller::SpatialModelerSystem *this, const Phase::Controller::SpatialModelerSystem::InitializeParameters *a2, Phase::Controller::TaskManager *a3, Phase::Controller::RendererSystem *a4)
{
  unint64_t v4;
  Phase::Controller::SpatialModelerSystem *v6;
  NSObject *v7;
  Phase::Controller::SpatialModelerRegistry *v8;
  double *v9;
  int *v10;
  unint64_t v11;
  int *v12;
  int8x8_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  Phase::Controller::SpatialModelerCategory *v20;
  int v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t **v24;
  uint64_t *i;
  unint64_t v26;
  _QWORD *v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  int8x8_t prime;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  double v48;
  unint64_t v49;
  _QWORD *v50;
  void **v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t **v57;
  int *v58;
  int v59;
  uint64_t **v60;
  int *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t **v65;
  int *v66;
  unint64_t v67;
  _DWORD *v68;
  int v69;
  char *v70;
  _DWORD *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  void **v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int64x2_t v96;
  void **v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  int v104;
  int v105;
  uint64_t v106;
  NSObject *v108;
  int v109;
  const char *v110;
  std::logic_error *exception;
  Phase::Logger *v112;
  NSObject *v113;
  id v115;
  uint64_t v116;
  std::logic_error *v117;
  Phase::Controller::SpatialModelerSystem *v118;
  uint64_t v119;
  _QWORD *v120;
  int64x2_t *v121;
  double *v122;
  uint64_t v124;
  _OWORD v126[2];
  int v127;
  uint64_t v128[2];
  uint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE buf[40];
  int v134;
  __int128 __p;
  __int128 v136;
  void **v137;
  int64x2_t v138;
  void **v139;
  uint64_t v140;
  int v141;
  uint64_t v142;

  v6 = this;
  v142 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 11) = a3;
  *((_QWORD *)this + 12) = *((_QWORD *)a3 + 5);
  v7 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 224));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CvmSpatialModelerSystem.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 73;
    _os_log_impl(&dword_2164CC000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initializing spatial modeler system with engine (dispatch) JobManager.", buf, 0x12u);
  }
  v8 = (Phase::Controller::SpatialModelerRegistry *)Phase::Controller::TaskManager::GetService<Phase::Controller::SpatialModelerRegistry>(a3, 5);
  Phase::Controller::SpatialModelerRegistry::GetSpatialCategories(v8, v128);
  memset(v126, 0, sizeof(v126));
  v127 = 1065353216;
  v10 = (int *)v129;
  if (v129)
  {
    v120 = (_QWORD *)((char *)v6 + 16);
    v122 = (double *)a2;
    do
    {
      v12 = v10 + 4;
      v11 = v10[4];
      v13 = *(int8x8_t *)((char *)a2 + 48);
      if (!*(_QWORD *)&v13)
        goto LABEL_208;
      v14 = (uint8x8_t)vcnt_s8(v13);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        v15 = v10[4];
        if (*(_QWORD *)&v13 <= v11)
          v15 = v11 % *(_QWORD *)&v13;
      }
      else
      {
        v15 = (*(_QWORD *)&v13 - 1) & v11;
      }
      v16 = *(uint64_t ***)(*((_QWORD *)a2 + 5) + 8 * v15);
      if (!v16 || (v17 = *v16) == 0)
      {
LABEL_208:
        v108 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)v9)
                                                                                             + 224)));
        if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
        {
          v109 = *v12;
          if (*v12 == 4)
          {
            v110 = "ambient";
          }
          else
          {
            GetSpatialCategoryString(*v12);
            v4 = (unint64_t)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v110 = (const char *)objc_msgSend((id)v4, "UTF8String");
          }
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "CvmSpatialModelerSystem.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 108;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v110;
          _os_log_impl(&dword_2164CC000, v108, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Initial spatial category to modeler map does not contain spatial category: %s.\"", buf, 0x1Cu);
          if (v109 != 4)

        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Initial spatial category to modeler map does not contain spatial category: %s.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      }
      while (1)
      {
        v18 = v17[1];
        if (v18 == v11)
          break;
        if (v14.u32[0] > 1uLL)
        {
          if (v18 >= *(_QWORD *)&v13)
            v18 %= *(_QWORD *)&v13;
        }
        else
        {
          v18 &= *(_QWORD *)&v13 - 1;
        }
        if (v18 != v15)
          goto LABEL_208;
LABEL_20:
        v17 = (uint64_t *)*v17;
        if (!v17)
          goto LABEL_208;
      }
      if (*((_DWORD *)v17 + 4) != (_DWORD)v11)
        goto LABEL_20;
      v19 = v17[3];
      v20 = (Phase::Controller::SpatialModelerCategory *)operator new();
      Phase::Controller::SpatialModelerCategory::SpatialModelerCategory(v20);
      v21 = *v12;
      v22 = *((_QWORD *)v6 + 1);
      if (v22)
      {
        v23 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
        v23.i16[0] = vaddlv_u8(v23);
        if (v23.u32[0] > 1uLL)
        {
          v4 = v21;
          if (v22 <= v21)
            v4 = v21 % v22;
        }
        else
        {
          v4 = (v22 - 1) & v21;
        }
        v24 = *(uint64_t ***)(*(_QWORD *)v6 + 8 * v4);
        if (v24)
        {
          for (i = *v24; i; i = (uint64_t *)*i)
          {
            v26 = i[1];
            if (v26 == v21)
            {
              if (*((_DWORD *)i + 4) == v21)
              {
                v112 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::SpatialModelerCategory *))(*(_QWORD *)v20 + 24))(v20);
                v113 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v112) + 224));
                if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
                {
                  GetSpatialCategoryString(*v12);
                  v115 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                  v116 = objc_msgSend(v115, "UTF8String");
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "CvmSpatialModelerSystem.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 100;
                  *(_WORD *)&buf[18] = 2080;
                  *(_QWORD *)&buf[20] = v116;
                  _os_log_impl(&dword_2164CC000, v113, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Tried to create more than one spatial modeler category with the same spatial category: %s.\"", buf, 0x1Cu);

                }
                v117 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v117, "Tried to create more than one spatial modeler category with the same spatial category: %s.");
                v117->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
              }
            }
            else
            {
              if (v23.u32[0] > 1uLL)
              {
                if (v26 >= v22)
                  v26 %= v22;
              }
              else
              {
                v26 &= v22 - 1;
              }
              if (v26 != v4)
                break;
            }
          }
        }
      }
      v27 = operator new(0x20uLL);
      *v27 = 0;
      v27[1] = v21;
      *((_DWORD *)v27 + 4) = v21;
      v27[3] = v20;
      v28 = (float)(unint64_t)(*((_QWORD *)v6 + 3) + 1);
      v29 = *((float *)v6 + 8);
      if (!v22 || (float)(v29 * (float)v22) < v28)
      {
        v30 = (v22 & (v22 - 1)) != 0;
        if (v22 < 3)
          v30 = 1;
        v31 = v30 | (2 * v22);
        v32 = vcvtps_u32_f32(v28 / v29);
        if (v31 <= v32)
          prime = (int8x8_t)v32;
        else
          prime = (int8x8_t)v31;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          v22 = *((_QWORD *)v6 + 1);
        }
        if (*(_QWORD *)&prime <= v22)
        {
          if (*(_QWORD *)&prime < v22)
          {
            v40 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 3) / *((float *)v6 + 8));
            if (v22 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v22), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
            {
              v40 = std::__next_prime(v40);
            }
            else
            {
              v42 = 1 << -(char)__clz(v40 - 1);
              if (v40 >= 2)
                v40 = v42;
            }
            if (*(_QWORD *)&prime <= v40)
              prime = (int8x8_t)v40;
            if (*(_QWORD *)&prime >= v22)
            {
              v22 = *((_QWORD *)v6 + 1);
            }
            else
            {
              if (prime)
                goto LABEL_50;
              v50 = *(_QWORD **)v6;
              *(_QWORD *)v6 = 0;
              if (v50)
                operator delete(v50);
              v22 = 0;
              *((_QWORD *)v6 + 1) = 0;
            }
          }
        }
        else
        {
LABEL_50:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v34 = operator new(8 * *(_QWORD *)&prime);
          v35 = *(_QWORD **)v6;
          *(_QWORD *)v6 = v34;
          if (v35)
            operator delete(v35);
          v36 = 0;
          *((int8x8_t *)v6 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v6 + 8 * v36++) = 0;
          while (*(_QWORD *)&prime != v36);
          v37 = (_QWORD *)*v120;
          if (*v120)
          {
            v38 = v37[1];
            v39 = (uint8x8_t)vcnt_s8(prime);
            v39.i16[0] = vaddlv_u8(v39);
            if (v39.u32[0] > 1uLL)
            {
              if (v38 >= *(_QWORD *)&prime)
                v38 %= *(_QWORD *)&prime;
            }
            else
            {
              v38 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v6 + 8 * v38) = v120;
            v43 = (_QWORD *)*v37;
            if (*v37)
            {
              do
              {
                v44 = v43[1];
                if (v39.u32[0] > 1uLL)
                {
                  if (v44 >= *(_QWORD *)&prime)
                    v44 %= *(_QWORD *)&prime;
                }
                else
                {
                  v44 &= *(_QWORD *)&prime - 1;
                }
                if (v44 != v38)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v6 + 8 * v44))
                  {
                    *(_QWORD *)(*(_QWORD *)v6 + 8 * v44) = v37;
                    goto LABEL_75;
                  }
                  *v37 = *v43;
                  *v43 = **(_QWORD **)(*(_QWORD *)v6 + 8 * v44);
                  **(_QWORD **)(*(_QWORD *)v6 + 8 * v44) = v43;
                  v43 = v37;
                }
                v44 = v38;
LABEL_75:
                v37 = v43;
                v43 = (_QWORD *)*v43;
                v38 = v44;
              }
              while (v43);
            }
          }
          v22 = (unint64_t)prime;
        }
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v22 <= v21)
            v4 = v21 % v22;
          else
            v4 = v21;
        }
        else
        {
          v4 = (v22 - 1) & v21;
        }
      }
      v45 = *(_QWORD **)v6;
      v46 = *(_QWORD **)(*(_QWORD *)v6 + 8 * v4);
      if (v46)
      {
        *v27 = *v46;
        goto LABEL_92;
      }
      *v27 = *v120;
      *v120 = v27;
      v45[v4] = v120;
      if (*v27)
      {
        v47 = *(_QWORD *)(*v27 + 8);
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v47 >= v22)
            v47 %= v22;
        }
        else
        {
          v47 &= v22 - 1;
        }
        v46 = (_QWORD *)(*(_QWORD *)v6 + 8 * v47);
LABEL_92:
        *v46 = v27;
      }
      ++*((_QWORD *)v6 + 3);
      a2 = (const Phase::Controller::SpatialModelerSystem::InitializeParameters *)v122;
      Phase::Controller::SpatialModelerCategory::Initialize(v27[3], *v12, v19, (uint64_t)v122, a3, a4, *((_QWORD *)v6 + 12));
      v48 = v122[13];
      v49 = v130;
      *(_QWORD *)buf = v10 + 4;
      v9 = (double *)std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,double>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,double>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,double>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,double>>>::__emplace_unique_key_args<Phase::SpatialCategory,std::piecewise_construct_t const&,std::tuple<Phase::SpatialCategory const&>,std::tuple<>>((uint64_t)v126, v10 + 4, (uint64_t)&std::piecewise_construct, (_DWORD **)buf);
      v9[3] = v48 / (double)v49;
      v10 = *(int **)v10;
    }
    while (v10);
  }
  Phase::SpatialModeler::GetOptionalPropertyDescriptions(buf);
  v51 = (void **)((char *)v6 + 40);
  if (*((_QWORD *)v6 + 5))
  {
    std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__clear[abi:ne180100]((uint64_t *)v6 + 5);
    operator delete(*v51);
    *v51 = 0;
    *((_QWORD *)v6 + 6) = 0;
    *((_QWORD *)v6 + 7) = 0;
  }
  *(_OWORD *)((char *)v6 + 40) = *(_OWORD *)buf;
  *((_QWORD *)v6 + 7) = *(_QWORD *)&buf[16];
  memset(buf, 0, 24);
  v137 = (void **)buf;
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__destroy_vector::operator()[abi:ne180100](&v137);
  Phase::Controller::SpatialModelerSystem::SetParameters((unsigned __int8 *)v6, (uint64_t *)a2 + 10);
  Phase::Controller::SpatialModelerSystem::SetComputeTimes(v6, (uint64_t)v126);
  v121 = (int64x2_t *)((char *)v6 + 64);
  if (*((_QWORD *)v6 + 8) != *((_QWORD *)v6 + 9))
    std::terminate();
  v52 = (uint64_t *)*((_QWORD *)v6 + 2);
  if (v52)
  {
    v119 = (uint64_t)v6 + 80;
    v118 = v6;
    do
    {
      Phase::Controller::SpatialModelerCategory::GetEntityShapeTemplates((Phase::Controller::SpatialModelerCategory *)v52[3], (uint64_t)&v131);
      v54 = v131;
      v53 = v132;
      v124 = v132;
      while (v54 != v53)
      {
        v56 = *((_QWORD *)v6 + 8);
        v55 = *((_QWORD *)v6 + 9);
        if (v56 == v55)
          goto LABEL_133;
        while (1)
        {
          if (*(_DWORD *)v56 == *(_DWORD *)v54)
          {
            if (*(_DWORD *)v56 != 1)
              break;
            v57 = Phase::UnorderedStringMap<Phase::OptionsValue>::Find((_QWORD *)(v56 + 8), (__int128 *)&Phase::Geometry::MeshOptions::SortPrimitives);
            if (v57)
            {
              v58 = (int *)(v57 + 7);
              if (*((_DWORD *)v57 + 24) != 1)
                v58 = &dword_24D579740;
            }
            else
            {
              v58 = &dword_24D579740;
            }
            v59 = *v58;
            v60 = Phase::UnorderedStringMap<Phase::OptionsValue>::Find((_QWORD *)(v54 + 8), (__int128 *)&Phase::Geometry::MeshOptions::SortPrimitives);
            if (v60)
            {
              v61 = (int *)(v60 + 7);
              if (*((_DWORD *)v60 + 24) != 1)
                v61 = &dword_24D579740;
            }
            else
            {
              v61 = &dword_24D579740;
            }
            if (v59 == *v61)
              break;
          }
          v56 += 80;
          if (v56 == v55)
          {
            v56 = v55;
            break;
          }
        }
        if (v56 == *((_QWORD *)v6 + 9))
        {
LABEL_133:
          memset(&buf[8], 0, 32);
          *(_DWORD *)buf = 0;
          v134 = 1065353216;
          __p = 0u;
          v136 = 0u;
          *(_DWORD *)buf = *(_DWORD *)v54;
          if (*(_DWORD *)v54 == 1)
          {
            v65 = Phase::UnorderedStringMap<Phase::OptionsValue>::Find((_QWORD *)(v54 + 8), (__int128 *)&Phase::Geometry::MeshOptions::SortPrimitives);
            if (v65)
            {
              v66 = (int *)(v65 + 7);
              if (*((_DWORD *)v65 + 24) != 1)
                v66 = &dword_24D579740;
            }
            else
            {
              v66 = &dword_24D579740;
            }
            v69 = *v66;
            if (v69)
            {
              LODWORD(v137) = v69;
              v141 = 1;
              Phase::UnorderedStringMap<Phase::OptionsValue>::Set((uint64_t)&buf[8], (uint64_t)&Phase::Geometry::MeshOptions::SortPrimitives, (uint64_t)&v137);
              std::__variant_detail::__dtor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v137);
            }
          }
          v70 = (char *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1) >= (unint64_t)v136)
          {
            v72 = (char *)__p;
            v73 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
            v74 = v73 + 1;
            if ((unint64_t)(v73 + 1) >> 62)
              std::vector<Phase::Controller::GeometryPermutation>::__throw_length_error[abi:ne180100]();
            v75 = v136 - __p;
            if ((uint64_t)(v136 - __p) >> 1 > v74)
              v74 = v75 >> 1;
            if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
              v76 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v76 = v74;
            if (v76)
            {
              v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v136, v76);
              v70 = (char *)*((_QWORD *)&__p + 1);
              v72 = (char *)__p;
            }
            else
            {
              v77 = 0;
            }
            v78 = &v77[4 * v73];
            *(_DWORD *)v78 = *(_DWORD *)(v54 + 48);
            v71 = v78 + 4;
            while (v70 != v72)
            {
              v79 = *((_DWORD *)v70 - 1);
              v70 -= 4;
              *((_DWORD *)v78 - 1) = v79;
              v78 -= 4;
            }
            *(_QWORD *)&__p = v78;
            *((_QWORD *)&__p + 1) = v71;
            *(_QWORD *)&v136 = &v77[4 * v76];
            if (v72)
              operator delete(v72);
          }
          else
          {
            **((_DWORD **)&__p + 1) = *(_DWORD *)(v54 + 48);
            v71 = v70 + 4;
          }
          *((_QWORD *)&__p + 1) = v71;
          v80 = *((_DWORD *)v52 + 4) - 1;
          if (v80 < 3)
            *((_QWORD *)&v136 + 1) = qword_2166F7800[v80];
          v82 = *((_QWORD *)v6 + 9);
          v81 = *((_QWORD *)v6 + 10);
          if (v82 >= v81)
          {
            v84 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v82 - v121->i64[0]) >> 4);
            v85 = v84 + 1;
            if (v84 + 1 > 0x333333333333333)
              std::vector<Phase::Controller::GeometryPermutation>::__throw_length_error[abi:ne180100]();
            v86 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v81 - v121->i64[0]) >> 4);
            if (2 * v86 > v85)
              v85 = 2 * v86;
            if (v86 >= 0x199999999999999)
              v87 = 0x333333333333333;
            else
              v87 = v85;
            v140 = v119;
            if (v87)
              v88 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::GeometryPermutation>>(v119, v87);
            else
              v88 = 0;
            v137 = v88;
            v138.i64[0] = (uint64_t)&v88[10 * v84];
            v138.i64[1] = v138.i64[0];
            v139 = &v88[10 * v87];
            std::allocator<Phase::Controller::GeometryPermutation>::construct[abi:ne180100]<Phase::Controller::GeometryPermutation,Phase::Controller::GeometryPermutation const&>(v138.i64[0], (uint64_t)buf);
            v89 = v138.i64[0];
            v83 = v138.i64[1] + 80;
            v138.i64[1] += 80;
            v90 = *((_QWORD *)v6 + 8);
            v91 = *((_QWORD *)v6 + 9);
            if (v91 == v90)
            {
              v96 = vdupq_n_s64(v91);
            }
            else
            {
              v92 = v52;
              v93 = 0;
              do
              {
                v94 = v89 + v93;
                v95 = v91 + v93;
                *(_DWORD *)(v89 + v93 - 80) = *(_DWORD *)(v91 + v93 - 80);
                std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__hash_table(v89 + v93 - 72, (uint64_t *)(v91 + v93 - 72));
                *(_QWORD *)(v94 - 32) = 0;
                *(_QWORD *)(v94 - 24) = 0;
                *(_QWORD *)(v94 - 16) = 0;
                *(_OWORD *)(v94 - 32) = *(_OWORD *)(v91 + v93 - 32);
                *(_QWORD *)(v94 - 16) = *(_QWORD *)(v91 + v93 - 16);
                *(_QWORD *)(v95 - 32) = 0;
                *(_QWORD *)(v95 - 24) = 0;
                *(_QWORD *)(v95 - 16) = 0;
                *(_QWORD *)(v94 - 8) = *(_QWORD *)(v91 + v93 - 8);
                v93 -= 80;
              }
              while (v91 + v93 != v90);
              v96 = *v121;
              v83 = v138.i64[1];
              v89 += v93;
              v52 = v92;
              v6 = v118;
            }
            *((_QWORD *)v6 + 8) = v89;
            *((_QWORD *)v6 + 9) = v83;
            v138 = v96;
            v97 = (void **)*((_QWORD *)v6 + 10);
            *((_QWORD *)v6 + 10) = v139;
            v139 = v97;
            v137 = (void **)v96.i64[0];
            std::__split_buffer<Phase::Controller::GeometryPermutation>::~__split_buffer((uint64_t)&v137);
          }
          else
          {
            std::allocator<Phase::Controller::GeometryPermutation>::construct[abi:ne180100]<Phase::Controller::GeometryPermutation,Phase::Controller::GeometryPermutation const&>(*((_QWORD *)v6 + 9), (uint64_t)buf);
            v83 = v82 + 80;
            *((_QWORD *)v6 + 9) = v82 + 80;
          }
          *((_QWORD *)v6 + 9) = v83;
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)&buf[8]);
        }
        else
        {
          v62 = *(char **)(v56 + 48);
          v63 = *(char **)(v56 + 56);
          if (v62 == v63)
          {
            v64 = *(char **)(v56 + 48);
          }
          else
          {
            v64 = *(char **)(v56 + 48);
            while (*(_DWORD *)v64 != *(_DWORD *)(v54 + 48))
            {
              v64 += 4;
              if (v64 == v63)
              {
                v64 = *(char **)(v56 + 56);
                break;
              }
            }
          }
          if (v64 == v63)
          {
            v67 = *(_QWORD *)(v56 + 64);
            if ((unint64_t)v63 >= v67)
            {
              v98 = (v63 - v62) >> 2;
              if ((unint64_t)(v98 + 1) >> 62)
                std::vector<Phase::Controller::GeometryPermutation>::__throw_length_error[abi:ne180100]();
              v99 = v67 - (_QWORD)v62;
              v100 = (uint64_t)(v67 - (_QWORD)v62) >> 1;
              if (v100 <= v98 + 1)
                v100 = v98 + 1;
              if (v99 >= 0x7FFFFFFFFFFFFFFCLL)
                v101 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v101 = v100;
              if (v101)
              {
                v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v56 + 64, v101);
                v62 = *(char **)(v56 + 48);
                v63 = *(char **)(v56 + 56);
              }
              else
              {
                v102 = 0;
              }
              v103 = &v102[4 * v98];
              *(_DWORD *)v103 = *(_DWORD *)(v54 + 48);
              v68 = v103 + 4;
              while (v63 != v62)
              {
                v104 = *((_DWORD *)v63 - 1);
                v63 -= 4;
                *((_DWORD *)v103 - 1) = v104;
                v103 -= 4;
              }
              *(_QWORD *)(v56 + 48) = v103;
              *(_QWORD *)(v56 + 56) = v68;
              *(_QWORD *)(v56 + 64) = &v102[4 * v101];
              if (v62)
                operator delete(v62);
            }
            else
            {
              *(_DWORD *)v63 = *(_DWORD *)(v54 + 48);
              v68 = v63 + 4;
            }
            *(_QWORD *)(v56 + 56) = v68;
          }
          v105 = *((_DWORD *)v52 + 4);
          switch(v105)
          {
            case 3:
              v106 = *(_QWORD *)(v56 + 72) | 4;
              break;
            case 2:
              v106 = *(_QWORD *)(v56 + 72) | 2;
              break;
            case 1:
              v106 = *(_QWORD *)(v56 + 72) | 1;
              break;
            default:
              goto LABEL_205;
          }
          *(_QWORD *)(v56 + 72) = v106;
        }
LABEL_205:
        v54 += 56;
        v53 = v124;
      }
      *(_QWORD *)buf = &v131;
      std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      v52 = (uint64_t *)*v52;
    }
    while (v52);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v126);
  return std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v128);
}

void sub_216531DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

unsigned __int8 *Phase::Controller::SpatialModelerSystem::SetParameters(unsigned __int8 *result, uint64_t *a2)
{
  uint64_t v2;
  int *v3;
  Phase::Logger *v4;
  int *v5;
  int v6;
  uint64_t SpatialModelerCategory;

  v2 = *a2;
  v3 = (int *)a2[1];
  if ((int *)*a2 != v3)
  {
    v4 = (Phase::Logger *)result;
    v5 = (int *)*a2;
    do
    {
      v6 = *v5;
      v5 += 6;
      SpatialModelerCategory = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(v4, v6);
      result = Phase::Controller::SpatialModelerInstance::SetParameter(*(unsigned __int8 **)(SpatialModelerCategory + 80), v2);
      v2 = (uint64_t)v5;
    }
    while (v5 != v3);
  }
  return result;
}

void Phase::Controller::SpatialModelerSystem::SetComputeTimes(Phase::Logger *a1, uint64_t a2)
{
  uint64_t *i;
  Phase::Controller::SpatialModelerCategory *SpatialModelerCategory;

  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    SpatialModelerCategory = (Phase::Controller::SpatialModelerCategory *)Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(a1, *((_DWORD *)i + 4));
    Phase::Controller::SpatialModelerCategory::SetComputeTime(SpatialModelerCategory, *((double *)i + 3));
  }
}

Phase::Controller::SpatialSubmixRouter *Phase::Controller::SpatialModelerSystem::Stop(Phase::Controller::SpatialSubmixRouter *this)
{
  _QWORD *i;
  Phase::Controller::SpatialModelerInstance *v2;

  for (i = (_QWORD *)*((_QWORD *)this + 2); i; i = (_QWORD *)*i)
  {
    v2 = *(Phase::Controller::SpatialModelerInstance **)(i[3] + 80);
    this = (Phase::Controller::SpatialSubmixRouter *)Phase::Controller::SpatialModelerInstance::StopUpdate(v2);
    if ((_DWORD)this)
      this = Phase::Controller::SpatialModelerInstance::Reset((Phase::Controller::SpatialSubmixRouter **)v2);
  }
  return this;
}

void Phase::Controller::SpatialModelerSystem::SetModelers(Phase::Logger *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *i;
  Phase::Controller::SpatialModelerCategory *SpatialModelerCategory;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  unsigned __int8 v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  _OWORD v15[2];
  int v16;
  uint64_t *v17;
  _QWORD *v18[2];

  v18[0] = 0;
  v18[1] = 0;
  v17 = (uint64_t *)v18;
  memset(v15, 0, sizeof(v15));
  v16 = 1065353216;
  for (i = (uint64_t *)(a2 + 16);
        ;
        Phase::Controller::SpatialModelerCategory::SetActiveSpatialModeler(SpatialModelerCategory, i[3]))
  {
    i = (uint64_t *)*i;
    if (!i)
      break;
    SpatialModelerCategory = (Phase::Controller::SpatialModelerCategory *)Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(a1, *((_DWORD *)i + 4));
    v7 = *((_QWORD *)SpatialModelerCategory + 10);
    if (v7)
    {
      v8 = atomic_load((unsigned __int8 *)(v7 + 5641));
      if ((v8 & 1) != 0)
        std::__tree<Phase::SpatialCategory>::__emplace_unique_key_args<Phase::SpatialCategory,Phase::SpatialCategory const&>(&v17, (int *)i + 4, (_DWORD *)i + 4);
    }
  }
  Phase::Controller::SpatialModelerSystem::SetParameters((unsigned __int8 *)a1, a3);
  v9 = v17;
  if (v17 != (uint64_t *)v18)
  {
    do
    {
      v10 = (unsigned __int8 *)(*(_QWORD *)(Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(a1, *((_DWORD *)v9 + 7))+ 80)+ 5641);
      v11 = atomic_load(v10);
      if ((v11 & 1) == 0)
        atomic_store(1u, v10);
      v12 = (uint64_t *)v9[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)v9[2];
          v14 = *v13 == (_QWORD)v9;
          v9 = v13;
        }
        while (!v14);
      }
      v9 = v13;
    }
    while (v13 != (uint64_t *)v18);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v15);
  std::__tree<Phase::SpatialCategory>::destroy((uint64_t)&v17, v18[0]);
}

void sub_216532124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&a9);
  std::__tree<Phase::SpatialCategory>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(Phase::Logger *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  NSObject *v9;
  std::logic_error *exception;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a1 + 1);
  if (!v2)
    goto LABEL_17;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
  if (!v5 || (v6 = *v5) == 0)
  {
LABEL_17:
    v9 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 224));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = 136315650;
      v13 = "CvmSpatialModelerSystem.mm";
      v14 = 1024;
      v15 = 382;
      v16 = 1024;
      v17 = a2;
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [iterator == mSpatialModelerCategories.end() is true]: \"Invalid SpatialCategory %d!\"", (uint8_t *)&v12, 0x18u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid SpatialCategory %d!");
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == a2)
      break;
    if (v3.u32[0] > 1uLL)
    {
      if (v7 >= v2)
        v7 %= v2;
    }
    else
    {
      v7 &= v2 - 1;
    }
    if (v7 != v4)
      goto LABEL_17;
LABEL_16:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_17;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_16;
  return v6[3];
}

void sub_2165322F0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatialModelerSystem::GetSceneQueryFilterForSpatialCategory(Phase::Logger *a1)
{
  int v2;
  NSObject *v3;
  std::logic_error *exception;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (((_DWORD)a1 - 1) >= 4)
  {
    v2 = (int)a1;
    v3 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 224));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315650;
      v6 = "CvmSpatialModelerSystem.mm";
      v7 = 1024;
      v8 = 280;
      v9 = 1024;
      v10 = v2;
      _os_log_impl(&dword_2164CC000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Could not build SceneQueryFilter. Unknown SpatialCategory : %d.\"", (uint8_t *)&v5, 0x18u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Could not build SceneQueryFilter. Unknown SpatialCategory : %d.");
  }
  return qword_2166F7818[(int)a1 - 1];
}

void sub_21653241C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatialModelerSystem::RemoveAllInputs(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *i;
  uint64_t v6;
  _QWORD v7[2];

  for (i = *(_QWORD **)(result + 16); i; i = (_QWORD *)*i)
  {
    v6 = i[3];
    v7[0] = a2;
    v7[1] = a3;
    result = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(v6 + 88), v7);
    if (result)
      result = Phase::Controller::SpatialModelerCategory::RemoveInput(i[3], a2, a3);
  }
  return result;
}

BOOL Phase::Controller::SpatialModelerSystem::IsPrepared(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD v11[2];

  v3 = *(_QWORD **)(a1 + 16);
  if (v3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = v3[3];
      v11[0] = a2;
      v11[1] = a3;
      if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(v8 + 88), v11))
      {
        ++v7;
        v6 += Phase::Controller::SpatialModelerInstance::IsPrepared(*(_QWORD *)(v3[3] + 80), a2, a3);
      }
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  return v7 > 0 && v7 == v6;
}

uint64_t Phase::Controller::SpatialModelerSystem::IsStopped(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v3 = *(_QWORD **)(a1 + 16);
  if (!v3)
    return 1;
  while (1)
  {
    v6 = v3[3];
    v8[0] = a2;
    v8[1] = a3;
    if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((_QWORD *)(v6 + 88), v8))
    {
      result = (uint64_t)Phase::Controller::SpatialModelerInstance::IsStopped(*(_QWORD *)(v3[3] + 80), a2, a3);
      if (!(_DWORD)result)
        break;
    }
    v3 = (_QWORD *)*v3;
    if (!v3)
      return 1;
  }
  return result;
}

void Phase::Controller::GeometryPermutation::~GeometryPermutation(Phase::Controller::GeometryPermutation *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t **Phase::UnorderedStringMap<Phase::OptionsValue>::Find(_QWORD *a1, __int128 *a2)
{
  uint64_t **v2;
  void *__p[2];
  uint64_t v5;
  __int128 v6;

  v6 = *a2;
  __p[1] = 0;
  v5 = 0;
  __p[0] = 0;
  v2 = std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::find<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey>(a1, (uint64_t)__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_216532638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::find<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  const void *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  char v17;

  v4 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)&v17, *(uint64_t **)(a2 + 24), *(_QWORD *)(a2 + 32));
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v14 = a2 + 24;
    v12 = *(const void **)(a2 + 24);
    v13 = *(_QWORD *)(v14 + 8);
    do
    {
      v15 = (unint64_t)v11[1];
      if (v6 == v15)
      {
        if (v11[6] == (uint64_t *)v13 && !memcmp(v11[5], v12, v13))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(_QWORD *)&v5)
            v15 %= *(_QWORD *)&v5;
        }
        else
        {
          v15 &= *(_QWORD *)&v5 - 1;
        }
        if (v15 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[3];
      v2[3] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::vector<Phase::Controller::GeometryPermutation>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<Phase::Controller::GeometryPermutation>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<Phase::Controller::GeometryPermutation>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 48);
  if (v3)
  {
    *(_QWORD *)(a2 + 56) = v3;
    operator delete(v3);
  }
  return std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(a2 + 8);
}

_QWORD *std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,double>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,double>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,double>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,double>>>::__emplace_unique_key_args<Phase::SpatialCategory,std::piecewise_construct_t const&,std::tuple<Phase::SpatialCategory const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_216532AB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__tree<Phase::SpatialCategory>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<Phase::SpatialCategory>::destroy(a1, *a2);
    std::__tree<Phase::SpatialCategory>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<Phase::SpatialCategory>::__emplace_unique_key_args<Phase::SpatialCategory,Phase::SpatialCategory const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<Phase::SpatialCategory>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<Phase::SpatialCategory>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

_QWORD *std::vector<Phase::Controller::GeometryPermutation>::__init_with_size[abi:ne180100]<Phase::Controller::GeometryPermutation*,Phase::Controller::GeometryPermutation*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<Phase::Controller::GeometryPermutation>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Controller::GeometryPermutation>,Phase::Controller::GeometryPermutation*,Phase::Controller::GeometryPermutation*,Phase::Controller::GeometryPermutation*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216532CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<Phase::Controller::GeometryPermutation>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<Phase::Controller::GeometryPermutation>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    std::vector<Phase::Controller::GeometryPermutation>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::GeometryPermutation>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void std::vector<Phase::Controller::GeometryPermutation>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::GeometryPermutation>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Controller::GeometryPermutation>,Phase::Controller::GeometryPermutation*,Phase::Controller::GeometryPermutation*,Phase::Controller::GeometryPermutation*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<Phase::Controller::GeometryPermutation>::construct[abi:ne180100]<Phase::Controller::GeometryPermutation,Phase::Controller::GeometryPermutation&>(a1, v4, v6);
      v6 += 80;
      v4 = v12 + 80;
      v12 += 80;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::GeometryPermutation>,Phase::Controller::GeometryPermutation*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_216532E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::GeometryPermutation>,Phase::Controller::GeometryPermutation*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<Phase::Controller::GeometryPermutation>::construct[abi:ne180100]<Phase::Controller::GeometryPermutation,Phase::Controller::GeometryPermutation&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map(a2 + 8, a3 + 8);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  result = std::vector<Phase::Geometry::EntityType>::__init_with_size[abi:ne180100]<Phase::Geometry::EntityType*,Phase::Geometry::EntityType*>((_QWORD *)(a2 + 48), *(const void **)(a3 + 48), *(_QWORD *)(a3 + 56), (uint64_t)(*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 2);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
  return result;
}

void sub_216532EA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<Phase::Geometry::EntityType>::__init_with_size[abi:ne180100]<Phase::Geometry::EntityType*,Phase::Geometry::EntityType*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<Phase::Geometry::EntityType>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216532F10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Phase::Geometry::EntityType>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<Phase::Controller::GeometryPermutation>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::GeometryPermutation>,Phase::Controller::GeometryPermutation*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::GeometryPermutation>,Phase::Controller::GeometryPermutation*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::GeometryPermutation>,Phase::Controller::GeometryPermutation*>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)result[1];
  v1 = (uint64_t *)result[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *result;
    do
    {
      v3 -= 80;
      result = (uint64_t *)std::allocator<Phase::Controller::GeometryPermutation>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

void Phase::UnorderedStringMap<Phase::OptionsValue>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v3;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  std::string __p;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = *(const void **)a2;
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)&v10 + 1) = v3;
    v11 = v9 | 0x8000000000000000;
    *(_QWORD *)&v10 = v7;
    goto LABEL_8;
  }
  HIBYTE(v11) = *(_QWORD *)(a2 + 8);
  v7 = &v10;
  if (v3)
LABEL_8:
    memmove(v7, v6, v3);
  *((_BYTE *)v7 + v3) = 0;
  Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey::InternalKey(&__p, &v10);
  std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::insert_or_assign[abi:ne180100]<Phase::OptionsValue const&>(a1, (__int128 *)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11) < 0)
    operator delete((void *)v10);
}

void sub_2165330DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t **std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::insert_or_assign[abi:ne180100]<Phase::OptionsValue const&>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t **v5;
  char v6;

  v4 = std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__emplace_unique_key_args<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue const&>(a1, (uint64_t)a2, a2, a3);
  v5 = v4;
  if (!v6)
    std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v4 + 7), a3);
  return v5;
}

uint64_t **std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__emplace_unique_key_args<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue const&>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t ***v14;
  uint64_t **v15;
  const void *v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[3];

  v9 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)v29, *(uint64_t **)(a2 + 24), *(_QWORD *)(a2 + 32));
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v18 = a2 + 24;
        v16 = *(const void **)(a2 + 24);
        v17 = *(_QWORD *)(v18 + 8);
        do
        {
          v19 = (unint64_t)v15[1];
          if (v19 == v10)
          {
            if (v15[6] == (uint64_t *)v17 && !memcmp(v15[5], v16, v17))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v19 >= v11)
                v19 %= v11;
            }
            else
            {
              v19 &= v11 - 1;
            }
            if (v19 != v4)
              break;
          }
          v15 = (uint64_t **)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__construct_node_hash<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue const&>(a1, v10, a3, a4, (uint64_t)v29);
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  v15 = (uint64_t **)v29[0];
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return v15;
}

void sub_2165333E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__construct_node_hash<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  std::string *result;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x68uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  result = std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>::pair[abi:ne180100]<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue const&,0>((std::string *)(v10 + 16), a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_216533464(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>::pair[abi:ne180100]<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue const&,0>(std::string *a1, __int128 *a2, uint64_t a3)
{
  std::string *v5;

  v5 = Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey::InternalKey(a1, a2);
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v5[1].__r_.__value_.__r.__words[2], a3);
  return a1;
}

void sub_2165334B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocator<Phase::Controller::GeometryPermutation>::construct[abi:ne180100]<Phase::Controller::GeometryPermutation,Phase::Controller::GeometryPermutation const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map(a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  result = std::vector<Phase::Geometry::EntityType>::__init_with_size[abi:ne180100]<Phase::Geometry::EntityType*,Phase::Geometry::EntityType*>((_QWORD *)(a1 + 48), *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 2);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return result;
}

void sub_216533594(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<Phase::Controller::GeometryPermutation>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = i - 80;
    std::allocator<Phase::Controller::GeometryPermutation>::destroy[abi:ne180100](v4, i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void Phase::Controller::SpatialQueryInstance::~SpatialQueryInstance(Phase::Controller::SpatialQueryInstance **this)
{
  Phase::Controller::SpatialQueryInstance *v2;
  uint64_t v3;

  Phase::Controller::SpatialQueryInstance::Destroy((Phase::Controller::SpatialQueryInstance *)this);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  v2 = this[4];
  if (v2 == (Phase::Controller::SpatialQueryInstance *)(this + 1))
  {
    v3 = 4;
    v2 = (Phase::Controller::SpatialQueryInstance *)(this + 1);
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
}

void Phase::Controller::SpatialQueryInstance::Destroy(Phase::Controller::SpatialQueryInstance *this)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;

  Phase::SpatialModeler::Query::Clear(this);
  v2 = (unsigned int *)*((_QWORD *)this + 15);
  if (v2)
  {
    v3 = *v2;
    if ((v3 - 4) >= 0xFFFFFFFD)
    {
      __const__ZN5Phase14SpatialModeler14DestroyInPlaceEPvNS0_15QueryOutputTypeE_fTable[v3]();
      v2 = (unsigned int *)*((_QWORD *)this + 15);
    }
    operator delete(v2);
    *((_QWORD *)this + 15) = 0;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 14);
  if (v4)
  {
    v5 = *v4;
    if ((v5 - 1) <= 3)
    {
      __const__ZN5Phase14SpatialModeler14DestroyInPlaceEPvNS0_14QueryInputTypeE_fTable[v5]();
      v4 = (unsigned int *)*((_QWORD *)this + 14);
    }
    operator delete(v4);
    *((_QWORD *)this + 14) = 0;
  }
}

_QWORD *Phase::Controller::SpatialQueryInstance::Initialize(uint64_t a1, uint64_t a2, Phase::SystemAllocator *this, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  char *v11;
  Phase::Logger *v12;
  std::align_val_t v13;
  Phase::Logger *v14;
  uint64_t v15;
  Phase::Logger *v16;
  std::align_val_t v17;
  uint64_t v18;
  _BYTE *v19;
  Phase::Logger *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *result;
  uint64_t v30;
  NSObject *v31;
  std::logic_error *exception;
  NSObject *v33;
  std::logic_error *v34;
  __int128 v35;
  _QWORD v36[3];
  _QWORD *v37;
  _BYTE buf[32];
  __int128 v39;
  __int128 v40;
  _QWORD v41[4];

  v41[3] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 136) = this;
  v10 = *(unsigned int *)(a2 + 32);
  if (v10 > 4)
  {
    v12 = 0;
    v13 = 0;
  }
  else
  {
    v11 = (char *)&__const__ZN5Phase14SpatialModeler14SizeAndAlignOfENS0_14QueryInputTypeE_table + 16 * v10;
    v12 = *(Phase::Logger **)v11;
    v13 = *((_QWORD *)v11 + 1);
  }
  v14 = (Phase::Logger *)Phase::SystemAllocator::Alloc(this, v12, v13);
  *(_QWORD *)(a1 + 112) = v14;
  v15 = *(unsigned int *)(a2 + 32);
  if ((v15 - 1) > 3
    || (v14 = (Phase::Logger *)__const__ZN5Phase14SpatialModeler11InitInPlaceEPvNS0_14QueryInputTypeE_fTable[v15](),
        (v14 & 1) == 0))
  {
    v31 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v14) + 384));
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmSpatialQueryInstance.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 34;
      _os_log_impl(&dword_2164CC000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!queryInputInited is true]: \"Failed to initialize query input!\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Failed to initialize query input!");
  }
  v16 = 0;
  v17 = 0;
  *(_OWORD *)&buf[16] = xmmword_2166F7840;
  v39 = xmmword_2166F7850;
  v18 = *(unsigned int *)(a2 + 36);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v40 = xmmword_2166F7860;
  if (v18 <= 3)
  {
    v19 = &buf[16 * v18];
    v16 = *(Phase::Logger **)v19;
    v17 = *((_QWORD *)v19 + 1);
  }
  v20 = (Phase::Logger *)Phase::SystemAllocator::Alloc(this, v16, v17);
  *(_QWORD *)(a1 + 120) = v20;
  v21 = *(unsigned int *)(a2 + 36);
  if ((v21 - 4) < 0xFFFFFFFD
    || (v20 = (Phase::Logger *)__const__ZN5Phase14SpatialModeler11InitInPlaceEPvNS0_15QueryOutputTypeE_fTable[v21](),
        (v20 & 1) == 0))
  {
    v33 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v20) + 384));
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmSpatialQueryInstance.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 41;
      _os_log_impl(&dword_2164CC000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!queryOutputInited is true]: \"Failed to initialize query output!\"", buf, 0x12u);
    }
    v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v34, "Failed to initialize query output!");
  }
  v22 = *(_QWORD *)(a2 + 24);
  v35 = *(_OWORD *)(a1 + 112);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v36, a4);
  atomic_store(0, (unsigned int *)a1);
  v23 = (uint64_t)v37;
  if (!v37)
    goto LABEL_13;
  if (v37 != v36)
  {
    v23 = (*(uint64_t (**)(void))(*v37 + 16))();
LABEL_13:
    *(_QWORD *)&buf[24] = v23;
    goto LABEL_15;
  }
  *(_QWORD *)&buf[24] = buf;
  (*(void (**)(_QWORD *, _BYTE *))(v36[0] + 24))(v36, buf);
LABEL_15:
  v24 = a1 + 8;
  if (buf != (_BYTE *)(a1 + 8))
  {
    v25 = *(_QWORD *)&buf[24];
    v26 = *(_QWORD *)(a1 + 32);
    if (*(_BYTE **)&buf[24] == buf)
    {
      if (v26 == v24)
      {
        (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)buf + 24))(buf, v41);
        (*(void (**)(_QWORD))(**(_QWORD **)&buf[24] + 32))(*(_QWORD *)&buf[24]);
        *(_QWORD *)&buf[24] = 0;
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), buf);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)&buf[24] = buf;
        (*(void (**)(_QWORD *, uint64_t))(v41[0] + 24))(v41, a1 + 8);
        (*(void (**)(_QWORD *))(v41[0] + 32))(v41);
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)buf + 24))(buf, a1 + 8);
        (*(void (**)(_QWORD))(**(_QWORD **)&buf[24] + 32))(*(_QWORD *)&buf[24]);
        *(_QWORD *)&buf[24] = *(_QWORD *)(a1 + 32);
      }
      *(_QWORD *)(a1 + 32) = v24;
    }
    else if (v26 == v24)
    {
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v24 + 24))(a1 + 8, buf);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
      *(_QWORD *)(a1 + 32) = *(_QWORD *)&buf[24];
      *(_QWORD *)&buf[24] = buf;
    }
    else
    {
      *(_QWORD *)&buf[24] = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v25;
    }
  }
  v27 = *(_QWORD **)&buf[24];
  if (*(_BYTE **)&buf[24] == buf)
  {
    v28 = 4;
    v27 = buf;
  }
  else
  {
    if (!*(_QWORD *)&buf[24])
      goto LABEL_29;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_29:
  *(_QWORD *)(a1 + 40) = a5;
  std::shared_ptr<Phase::Job>::reset[abi:ne180100]((_QWORD *)(a1 + 64));
  *(_QWORD *)(a1 + 80) = v22;
  atomic_store(0, (unsigned int *)(a1 + 104));
  *(_OWORD *)(a1 + 88) = v35;
  result = v37;
  if (v37 == v36)
  {
    v30 = 4;
    result = v36;
  }
  else
  {
    if (!v37)
      return result;
    v30 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v30))();
}

void sub_216533B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::Query::Clear(Phase::SpatialModeler::Query *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  atomic_store(0, (unsigned int *)this);
  v2 = (char *)this + 8;
  v3 = (char *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  *((_QWORD *)this + 5) = 0;
  std::shared_ptr<Phase::Job>::reset[abi:ne180100]((_QWORD *)this + 8);
  *((_QWORD *)this + 10) = -1;
  *((_QWORD *)this + 11) = 0;
  atomic_store(0, (unsigned int *)this + 26);
  *((_QWORD *)this + 12) = 0;
}

uint64_t Phase::Controller::SpatialSubmix::SpatialSubmix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Phase::Logger *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Phase::Logger *v12;
  _QWORD *v13;
  void **v14;
  Phase::Logger *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t i;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *inserted;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  double v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  Phase::Logger *v41;
  Phase::Logger *InstancePtr;
  NSObject *v43;
  unint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  NSObject *v53;
  std::logic_error *exception;
  NSObject *v55;
  NSObject *v56;
  double v57[2];
  __int128 v58;
  uint64_t v59;
  void **v60;
  _BYTE buf[38];
  __int16 v62;
  const char *v63;
  __int16 v64;
  const char *v65;
  __int16 v66;
  uint64_t v67;
  _QWORD v68[3];
  _QWORD *v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v12 = Phase::Controller::Submix::Submix((Phase::Logger *)a1, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 568), *(_QWORD *)(a2 + 576), *(_DWORD *)(a2 + 584), a3, a4, a5, a6, a7, a9);
  *(_QWORD *)v12 = &off_24D579758;
  v13 = (_QWORD *)((char *)v12 + 336);
  *((_OWORD *)v12 + 20) = 0u;
  *((_OWORD *)v12 + 21) = 0u;
  *((_OWORD *)v12 + 22) = 0u;
  *((_DWORD *)v12 + 92) = 1065353216;
  *(_OWORD *)((char *)v12 + 376) = 0u;
  *(_OWORD *)((char *)v12 + 392) = 0u;
  *((_DWORD *)v12 + 102) = 1065353216;
  *((_BYTE *)v12 + 416) = 0;
  *((_QWORD *)v12 + 54) = 0;
  *((_QWORD *)v12 + 55) = 0x7FEFFFFFFFFFFFFFLL;
  v14 = (void **)((char *)v12 + 448);
  *((_QWORD *)v12 + 53) = 0;
  v15 = Phase::Envelope<double>::Envelope((Phase::Logger *)((char *)v12 + 448));
  *(_BYTE *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 513) = 0u;
  *(_QWORD *)(a1 + 576) = a8;
  *(_WORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 552);
  if (!*(_QWORD *)(a2 + 80))
  {
    v53 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15) + 384));
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmSpatialSubmix.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 65;
      _os_log_impl(&dword_2164CC000, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: !inCreateSpatialSubmixParameters.mSpatialCategoryParameters.empty() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: !inCreateSpatialSubmixParameters.mSpatialCategoryParameters.empty() is false.");
LABEL_52:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  if (!*(_QWORD *)a2)
  {
    v55 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15) + 384));
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmSpatialSubmix.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 67;
      _os_log_impl(&dword_2164CC000, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inCreateSpatialSubmixParameters.mListenerHandle != Geometry::InvalidEntityHandle is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: inCreateSpatialSubmixParameters.mListenerHandle != Geometry::InvalidEntityHandle is false.");
    goto LABEL_52;
  }
  if (!*(_QWORD *)(a2 + 24))
  {
    v56 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v15) + 384));
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CvmSpatialSubmix.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 69;
      _os_log_impl(&dword_2164CC000, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inCreateSpatialSubmixParameters.mSourceHandle != Geometry::InvalidEntityHandle is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: inCreateSpatialSubmixParameters.mSourceHandle != Geometry::InvalidEntityHandle is false.");
    goto LABEL_52;
  }
  *(_QWORD *)(a1 + 320) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 24);
  if (v13 != (_QWORD *)(a2 + 56))
  {
    *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 88);
    v16 = *(uint64_t **)(a2 + 72);
    v17 = *(_QWORD *)(a1 + 344);
    if (!v17)
      goto LABEL_13;
    for (i = 0; i != v17; *(_QWORD *)(*v13 + 8 * i++) = 0)
      ;
    v19 = *(uint64_t **)(a1 + 352);
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    if (v19)
    {
      while (v16)
      {
        v20 = *((int *)v16 + 4);
        *((_DWORD *)v19 + 4) = v20;
        v21 = v16[3];
        *((_BYTE *)v19 + 32) = *((_BYTE *)v16 + 32);
        v19[3] = v21;
        v22 = (uint64_t *)*v19;
        v19[1] = v20;
        inserted = std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__node_insert_multi_prepare((uint64_t)v13, v20, (_DWORD *)v19 + 4);
        std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform(v13, v19, inserted);
        v16 = (uint64_t *)*v16;
        v19 = v22;
        if (!v22)
          goto LABEL_13;
      }
      do
      {
        v35 = (uint64_t *)*v19;
        operator delete(v19);
        v19 = v35;
      }
      while (v35);
    }
    else
    {
LABEL_13:
      while (v16)
      {
        v24 = operator new(0x28uLL);
        *(_QWORD *)v24 = 0;
        v25 = v16[4];
        v24[1] = *((_OWORD *)v16 + 1);
        *((_QWORD *)v24 + 4) = v25;
        v26 = *((int *)v24 + 4);
        *((_QWORD *)v24 + 1) = v26;
        v27 = std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__node_insert_multi_prepare((uint64_t)v13, v26, (_DWORD *)v24 + 4);
        std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform(v13, v24, v27);
        v16 = (uint64_t *)*v16;
      }
    }
  }
  Phase::Controller::SpatialSubmix::CheckSpatialCategoriesActiveState((Phase::Logger *)a1);
  v28 = *(_QWORD *)(a2 + 96);
  if (v28 != *(_QWORD *)(a2 + 104))
  {
    v29 = 0;
    v30 = 0;
    do
    {
      Phase::Controller::Submix::AddEffect((Phase::Controller::Submix *)a1, (uint64_t *)(v28 + v29), v30++);
      v28 = *(_QWORD *)(a2 + 96);
      v29 += 32;
    }
    while (v30 < (*(_QWORD *)(a2 + 104) - v28) >> 5);
    *(_QWORD *)(a1 + 64) |= 2uLL;
  }
  *(_QWORD *)(a1 + 424) = 0x3FA47AE147AE147BLL;
  v31 = *(double *)(a9 + 328);
  if (v31 <= 0.0)
    std::terminate();
  v32 = v31 * *(double *)(a2 + 528);
  v68[0] = &unk_24D5770F0;
  v68[1] = Phase::CurveFunction::Linear<double>;
  v69 = v68;
  v57[0] = v32 + -1.0;
  v57[1] = 1.0;
  *(double *)buf = v32;
  v33 = &buf[16];
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = &unk_24D5770F0;
  v63 = &buf[16];
  *(_QWORD *)&buf[24] = Phase::CurveFunction::Linear<double>;
  Phase::Envelope<double>::Envelope((Phase::Logger *)&v58, v57, (double *)buf);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vdeallocate(v14);
  *(_OWORD *)(a1 + 448) = v58;
  *(_QWORD *)(a1 + 464) = v59;
  v59 = 0;
  v58 = 0uLL;
  v60 = (void **)&v58;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v60);
  if (v63 == &buf[16])
  {
    v34 = 4;
  }
  else
  {
    if (!v63)
      goto LABEL_26;
    v34 = 5;
    v33 = (char *)v63;
  }
  (*(void (**)(char *))(*(_QWORD *)v33 + 8 * v34))(v33);
LABEL_26:
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 40);
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 496) = xmmword_2166F7870;
  *(_OWORD *)(a1 + 512) = _Q1;
  *(_BYTE *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 544) = xmmword_2166F7270;
  *(_QWORD *)(a1 + 560) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 568) = 0;
  Phase::Controller::SpatialSubmix::InternalPrepare((Phase::Controller::SpatialSubmix *)a1);
  InstancePtr = (Phase::Logger *)Phase::Logger::GetInstancePtr(v41);
  if (*((_BYTE *)InstancePtr + 1552))
  {
    v43 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(InstancePtr)
                                                                                        + 384)));
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      v44 = *(char *)(a1 + 72);
      if (v44 > 7)
        v45 = "<not found>";
      else
        v45 = off_24D5798C0[v44];
      v46 = *(_QWORD *)(a1 + 16);
      v47 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(a1 + 8))
        v48 = "false";
      else
        v48 = "true";
      v49 = *(_QWORD *)(a1 + 592);
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "CvmSpatialSubmix.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 126;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v47;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v46;
      v62 = 2080;
      v63 = v45;
      v64 = 2080;
      v65 = v48;
      v66 = 2048;
      v67 = v49;
      _os_log_impl(&dword_2164CC000, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu) - created (type: spatial, state: %s, sleep transitions enabled: %s, parent submix id: %llu)", buf, 0x44u);
    }

  }
  v50 = v69;
  if (v69 == v68)
  {
    v51 = 4;
    v50 = v68;
    goto LABEL_40;
  }
  if (v69)
  {
    v51 = 5;
LABEL_40:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  return a1;
}

void sub_216534308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  Phase::Controller::Submix *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;

  __cxa_free_exception(v22);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v21);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v20);
  Phase::Controller::Submix::~Submix(v19);
  _Unwind_Resume(a1);
}

void sub_21653432C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  Phase::Controller::Submix *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  va_list va;

  va_start(va, a11);
  v16 = *(_QWORD **)(v14 - 96);
  if (v16 == (_QWORD *)(v14 - 120))
  {
    v17 = 4;
    v16 = (_QWORD *)(v14 - 120);
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_6:
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v13);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v12);
  Phase::Controller::Submix::~Submix(v11);
  _Unwind_Resume(a1);
}

void sub_2165343C8(void *a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  JUMPOUT(0x21653444CLL);
}

void sub_2165343F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  Phase::Controller::Submix *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;

  va_start(va, a11);
  __cxa_end_catch();
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v13);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v12);
  Phase::Controller::Submix::~Submix(v11);
  _Unwind_Resume(a1);
}

void sub_216534400(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x21653444CLL);
}

void sub_216534414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  Phase::Controller::Submix *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  va_list va;

  va_start(va, a11);
  operator delete(v14);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v13);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v12);
  Phase::Controller::Submix::~Submix(v11);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::SpatialSubmix::CheckSpatialCategoriesActiveState(Phase::Logger *this)
{
  char *v1;
  Phase::Logger *v2;
  NSObject *v3;
  uint64_t v4;
  std::logic_error *exception;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v1 = (char *)this + 352;
  do
  {
    v1 = *(char **)v1;
    if (!v1)
    {
      v2 = this;
      v3 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(this) + 384));
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        v4 = *((_QWORD *)v2 + 2);
        v6 = 136315650;
        v7 = "CvmSpatialSubmix.mm";
        v8 = 1024;
        v9 = 679;
        v10 = 2048;
        v11 = v4;
        _os_log_impl(&dword_2164CC000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [not hasActiveSpatialCategory is true]: \"submixId %llu: must have at least one active spatial category!\"", (uint8_t *)&v6, 0x1Cu);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "submixId %llu: must have at least one active spatial category!");
    }
  }
  while (!v1[32]);
  return this;
}

void sub_216534568(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void Phase::Controller::SpatialSubmix::InternalPrepare(Phase::Controller::SpatialSubmix *this)
{
  uint64_t *i;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t SpatialModelerCategory;
  uint64_t v7;
  __int128 **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  Phase::Controller::SpatialSubmix::UpdateDistance(this);
  Phase::Controller::Submix::InternalPrepare(this);
  for (i = (uint64_t *)*((_QWORD *)this + 44); i; i = (uint64_t *)*i)
  {
    if (*((_BYTE *)i + 32))
    {
      v3 = *((_QWORD *)this + 2);
      v4 = *((_QWORD *)this + 3);
      v5 = *((double *)i + 3);
      SpatialModelerCategory = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)this + 72), *((_DWORD *)i + 4));
      Phase::Controller::SpatialModelerCategory::AddInput(SpatialModelerCategory, v3, v4, v5);
    }
    v7 = *((_QWORD *)this + 2);
    v8 = (__int128 **)*((_QWORD *)this + 72);
    v9 = *((_QWORD *)this + 3);
    v10 = *((_QWORD *)this + 40);
    v11 = *((_QWORD *)this + 41);
    v12 = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory((Phase::Logger *)v8, *((_DWORD *)i + 4));
    Phase::Controller::SpatialModelerCategory::RegisterSubmix(v12, v7, v9, v10, v11, v8 + 5);
    v13 = *((_DWORD *)i + 4);
    *(_QWORD *)&v35 = *((_QWORD *)this + 59);
    v38 = 1;
    v14 = *((_QWORD *)this + 2);
    v15 = *((_QWORD *)this + 3);
    v16 = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)this + 72), v13);
    Phase::Controller::SpatialModelerCategory::SetProperty(v16, v14, v15, 1, 1, &v35);
    v17 = *((_DWORD *)i + 4);
    *(_QWORD *)&v35 = *((_QWORD *)this + 60);
    v38 = 1;
    v18 = *((_QWORD *)this + 2);
    v19 = *((_QWORD *)this + 3);
    v20 = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)this + 72), v17);
    Phase::Controller::SpatialModelerCategory::SetProperty(v20, v18, v19, 2, 1, &v35);
    v21 = *((_DWORD *)i + 4);
    *(_QWORD *)&v35 = *((_QWORD *)this + 61);
    v38 = 1;
    v22 = *((_QWORD *)this + 2);
    v23 = *((_QWORD *)this + 3);
    v24 = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)this + 72), v21);
    Phase::Controller::SpatialModelerCategory::SetProperty(v24, v22, v23, 3, 1, &v35);
    v25 = *((_DWORD *)i + 4);
    v26 = *((_OWORD *)this + 32);
    v35 = *((_OWORD *)this + 31);
    v36 = v26;
    v37 = *((_QWORD *)this + 66);
    v38 = 0;
    v27 = *((_QWORD *)this + 2);
    v28 = *((_QWORD *)this + 3);
    v29 = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)this + 72), v25);
    Phase::Controller::SpatialModelerCategory::SetProperty(v29, v27, v28, 4, 0, &v35);
    v30 = *((_DWORD *)i + 4);
    v31 = *(_OWORD *)((char *)this + 552);
    v35 = *(_OWORD *)((char *)this + 536);
    v36 = v31;
    v37 = *((_QWORD *)this + 71);
    v38 = 0;
    v32 = *((_QWORD *)this + 2);
    v33 = *((_QWORD *)this + 3);
    v34 = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)this + 72), v30);
    Phase::Controller::SpatialModelerCategory::SetProperty(v34, v32, v33, 5, 0, &v35);
  }
  if (*((_BYTE *)this + 72) != 2)
    std::terminate();
}

double Phase::Controller::SpatialSubmix::Destroy(Phase::Controller::SpatialSubmix *this)
{
  double result;

  *((_QWORD *)this + 7) |= 0x28uLL;
  result = 0.0;
  *((_OWORD *)this + 37) = 0u;
  return result;
}

void Phase::Controller::SpatialSubmix::~SpatialSubmix(Phase::Controller::SpatialSubmix *this)
{
  uint64_t *i;
  uint64_t v3;
  uint64_t v4;
  _QWORD *SpatialModelerCategory;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t j;
  void **v10;

  *((_QWORD *)this + 7) |= 0x28uLL;
  *((_OWORD *)this + 37) = 0u;
  if (*((_BYTE *)this + 72))
  {
    for (i = (uint64_t *)*((_QWORD *)this + 44); i; i = (uint64_t *)*i)
    {
      v3 = *((_QWORD *)this + 2);
      v4 = *((_QWORD *)this + 3);
      SpatialModelerCategory = (_QWORD *)Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)this + 72), *((_DWORD *)i + 4));
      Phase::Controller::SpatialModelerCategory::UnregisterSubmix(SpatialModelerCategory, v3, v4);
    }
    Phase::Controller::DVM::VoiceGraph::RemoveSubmix(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 28) + 72), *((_QWORD *)this + 2), *((_QWORD *)this + 3));
  }
  if (*((_QWORD *)this + 45))
  {
    v6 = (_QWORD *)*((_QWORD *)this + 44);
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    *((_QWORD *)this + 44) = 0;
    v8 = *((_QWORD *)this + 43);
    if (v8)
    {
      for (j = 0; j != v8; ++j)
        *(_QWORD *)(*((_QWORD *)this + 42) + 8 * j) = 0;
    }
    *((_QWORD *)this + 45) = 0;
  }
  Phase::Geometry::SystemScheduler::ReleaseDirectivity(*((_QWORD *)this + 30) + 2352, *((_QWORD *)this + 61));
  Phase::Geometry::SystemScheduler::ReleaseDirectivity(*((_QWORD *)this + 30) + 2352, *((_QWORD *)this + 60));
  Phase::Geometry::SystemScheduler::ReleaseDistanceModel(*((_QWORD *)this + 30) + 2352, *((_QWORD *)this + 59));
  v10 = (void **)((char *)this + 448);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v10);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 376);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 336);
  Phase::Controller::Submix::~Submix(this);
}

{
  Phase::Controller::SpatialSubmix::~SpatialSubmix(this);
  JUMPOUT(0x2199F9D70);
}

void Phase::Controller::SpatialSubmix::Update(Phase::Controller::SpatialSubmix *this, double a2)
{
  Phase::Controller::SpatialSubmix *v3;
  double v4;
  double v5;
  unsigned int v6;
  _QWORD *v7;
  double v8;
  Phase::Controller::Generator *v9;
  Phase::Logger *v10;
  NSObject *v11;
  Phase::Logger *v12;
  double Gain;
  NSObject *v14;
  double v15;
  uint64_t v16;
  uint64_t *v17;
  double v18;
  uint64_t v19;
  void *v20;
  int *v21;
  double v22;
  double v23;
  char *v24;
  uint64_t v25;
  void *v26;
  Phase::Controller::SpatialSubmix *v27;
  Phase::Logger *v28;
  int v29;
  uint64_t v30;
  double v31;
  double v32;
  Phase::Logger *v33;
  uint64_t SpatialModelerCategory;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  std::logic_error *exception;
  uint64_t v41;
  _BYTE buf[12];
  __int16 v43;
  int v44;
  __int16 v45;
  double v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  double v50;
  uint64_t v51;

  v3 = this;
  v51 = *MEMORY[0x24BDAC8D0];
  v4 = *((double *)this + 53);
  v5 = *((double *)this + 54) + a2;
  *((double *)this + 54) = v5;
  if (v5 >= v4 || !*((_BYTE *)this + 416))
  {
    *((_BYTE *)this + 416) = 1;
    v6 = (v5 / v4);
    if (v6 >= 2)
      *((double *)this + 54) = v5 - v4 * (double)(v6 - 1);
    if (Phase::Controller::SpatialSubmix::HasInputs(this))
      Phase::Controller::SpatialSubmix::UpdateDistance(v3);
    *((double *)v3 + 54) = *((double *)v3 + 54) - *((double *)v3 + 53);
  }
  Phase::Controller::Submix::Update(v3, a2);
  if (*((unsigned __int8 *)v3 + 72) - 2 <= 2)
  {
    v7 = (_QWORD *)*((_QWORD *)v3 + 33);
    if (*((_QWORD *)v3 + 34))
      v8 = 0.0;
    else
      v8 = 1.0;
    if (v7)
    {
      do
      {
        v9 = (Phase::Controller::Generator *)v7[4];
        if (!v9)
        {
          v39 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "CvmSpatialSubmix.mm";
            v43 = 1024;
            v44 = 220;
            _os_log_impl(&dword_2164CC000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", buf, 0x12u);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "PRECONDITION: pGenerator != nullptr is false.");
        }
        v8 = fmax(v8, Phase::Controller::Generator::GetGain(v9));
        v7 = (_QWORD *)*v7;
      }
      while (v7);
      if (v8 < 0.0)
      {
        v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v10) + 384));
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "CvmSpatialSubmix.mm";
          v43 = 1024;
          v44 = 227;
          v45 = 2048;
          v46 = v8;
          _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d maxGeneratorGain %f is out-of-range [0, FLT_MAX]. Clamping...\n", buf, 0x1Cu);
        }
        v8 = fmax(v8, 0.0);
      }
    }
    Gain = Phase::Controller::SpatialSubmix::GetGain((Phase::Geometry::System **)v3);
    if (Gain < 0.0 || Gain > 1.0)
    {
      v14 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v12) + 384));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = *((double *)v3 + 4);
        v16 = *((_QWORD *)v3 + 2);
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "CvmSpatialSubmix.mm";
        v43 = 1024;
        v44 = 237;
        v45 = 2048;
        v46 = v15;
        v47 = 2048;
        v48 = v16;
        v49 = 2048;
        v50 = Gain;
        _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d (sound event: %llu, submix: %llu) submix gain %f is out of range [0, 1]. Clamping...", buf, 0x30u);
      }
      Gain = fmin(fmax(Gain, 0.0), 1.0);
    }
    v17 = (uint64_t *)*((_QWORD *)v3 + 44);
    if (v17)
    {
      v18 = v8 * Gain;
      v19 = (uint64_t)v3 + 376;
      v20 = &std::piecewise_construct;
      v41 = (uint64_t)v3 + 376;
      do
      {
        v21 = (int *)(v17 + 2);
        v22 = *((double *)v17 + 3);
        *(_QWORD *)buf = v17 + 2;
        v23 = v18 * v22;
        if (*((double *)std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,double>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,double>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,double>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,double>>>::__emplace_unique_key_args<Phase::SpatialCategory,std::piecewise_construct_t const&,std::tuple<Phase::SpatialCategory const&>,std::tuple<>>(v19, (int *)v17 + 4, (uint64_t)v20, (_DWORD **)buf)+ 3) != v18 * v22)
        {
          v24 = (char *)v3 + 16;
          v25 = *((_QWORD *)v3 + 2);
          v26 = v20;
          v27 = v3;
          v28 = (Phase::Logger *)*((_QWORD *)v3 + 72);
          v29 = *v21;
          v30 = *((_QWORD *)v24 + 1);
          *(_QWORD *)&v31 = 1;
          if (v23 > 0.0)
            v31 = v18 * v22;
          v32 = log(v31);
          v33 = v28;
          v3 = v27;
          v20 = v26;
          v19 = v41;
          SpatialModelerCategory = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(v33, v29);
          Phase::Controller::SpatialModelerCategory::SetSimulationGainInDecibels(SpatialModelerCategory, v25, v30, v32 * 8.68588964 / 10.0 * 10.0);
          *(_QWORD *)buf = v17 + 2;
          *((double *)std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,double>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,double>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,double>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,double>>>::__emplace_unique_key_args<Phase::SpatialCategory,std::piecewise_construct_t const&,std::tuple<Phase::SpatialCategory const&>,std::tuple<>>(v41, (int *)v17 + 4, (uint64_t)v20, (_DWORD **)buf)+ 3) = v23;
          v35 = *v21;
          v36 = *(_QWORD *)v24;
          v37 = *((_QWORD *)v24 + 1);
          v38 = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)v24 + 70), v35);
          Phase::Controller::SpatialModelerCategory::SetMinimumSimulationGainInDecibels(v38, v36, v37, -106.0);
        }
        v17 = (uint64_t *)*v17;
      }
      while (v17);
    }
  }
}

void sub_216534DF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL Phase::Controller::SpatialSubmix::HasInputs(Phase::Controller::SpatialSubmix *this)
{
  uint64_t Submix;

  if (*((_OWORD *)this + 37) == 0)
    return *((_QWORD *)this + 34) != 0;
  Submix = Phase::Controller::SubmixSystem::GetSubmix(*((Phase::Logger **)this + 29), *((_QWORD *)this + 74), *((_QWORD *)this + 75));
  return ((*(uint64_t (**)(uint64_t))(*(_QWORD *)Submix + 120))(Submix) & 1) != 0
      || *((_QWORD *)this + 34) != 0;
}

void Phase::Controller::SpatialSubmix::UpdateDistance(Phase::Controller::SpatialSubmix *this)
{
  Phase::Logger *v2;
  double v3;
  double v4;
  _QWORD *i;
  uint64_t v6;
  double v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  std::logic_error *exception;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  Phase::Geometry::System::GetCurrentState(*((Phase::Geometry::System **)this + 30), &v13);
  v3 = Phase::DistanceBetweenListenerAndSource<double>(v13, *((_QWORD *)this + 40), *((_QWORD *)this + 41));
  if (v3 >= 0.0 && v3 != *((double *)this + 55))
  {
    *((double *)this + 55) = v3;
    v4 = 1.0;
    if (v3 >= **((double **)this + 56))
    {
      v4 = 0.0;
      if (v3 <= *(double *)(*((_QWORD *)this + 57) - 48))
        v4 = Phase::Envelope<double>::operator()((double **)this + 56, v3);
    }
    for (i = (_QWORD *)*((_QWORD *)this + 33); i; i = (_QWORD *)*i)
    {
      v6 = i[4];
      if (!v6)
      {
        v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v2) + 384));
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v16 = "CvmSpatialSubmix.mm";
          v17 = 1024;
          v18 = 747;
          _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", buf, 0x12u);
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "PRECONDITION: pGenerator != nullptr is false.");
      }
      v7 = Phase::Controller::sClamp<double>(v2, v4, *(double *)(v6 + 288), *(double *)(v6 + 296));
      if (v7 != *(double *)(v6 + 312))
      {
        *(double *)(v6 + 312) = v7;
        *(_BYTE *)(v6 + 320) = 1;
      }
    }
  }
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_216535044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double Phase::Controller::SpatialSubmix::GetGain(Phase::Geometry::System **this)
{
  Phase::Geometry::System *v2;
  unsigned int v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  Phase::Geometry::System *v8;
  uint64_t v9;
  uint64_t v10;
  double Gain;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;

  Phase::Geometry::System::GetCurrentState(this[30], &v16);
  v2 = this[40];
  v3 = *(_DWORD *)(v16 + 136);
  v4 = 0.0;
  v5 = 0.0;
  if (v3 > v2)
  {
    v6 = *(_QWORD *)(v16 + 120);
    if (*(_DWORD *)(v6 + 24 * v2 + 20) == HIDWORD(v2))
    {
      v7 = *(_QWORD *)(v6 + 24 * this[40]);
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          v5 = *(double *)(v7 + 176);
      }
    }
  }
  v8 = this[41];
  if (v3 > v8)
  {
    v9 = *(_QWORD *)(v16 + 120);
    if (*(_DWORD *)(v9 + 24 * v8 + 20) == HIDWORD(v8))
    {
      v10 = *(_QWORD *)(v9 + 24 * this[41]);
      if (v10)
      {
        if (*(_DWORD *)v10 == 3)
          v4 = *(double *)(v10 + 168);
      }
    }
  }
  Gain = Phase::Controller::Submix::GetGain((Phase::Controller::Submix *)this);
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v5 * v4 * Gain;
}

void sub_2165351B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatialSubmix::HasActiveInputs(Phase::Controller::SpatialSubmix *this)
{
  uint64_t Submix;
  _QWORD *v4;
  uint64_t v5;

  if (*((_OWORD *)this + 37) != 0)
  {
    Submix = Phase::Controller::SubmixSystem::GetSubmix(*((Phase::Logger **)this + 29), *((_QWORD *)this + 74), *((_QWORD *)this + 75));
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)Submix + 128))(Submix) & 1) != 0)
      return 1;
  }
  v4 = (_QWORD *)*((_QWORD *)this + 33);
  if (v4)
  {
    while (1)
    {
      v5 = v4[4];
      if (*(_DWORD *)(v5 + 508) != 1 && *(_DWORD *)(v5 + 376) != 4)
        break;
      v4 = (_QWORD *)*v4;
      if (!v4)
        return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t Phase::Controller::SpatialSubmix::AllInputsPaused(Phase::Controller::SpatialSubmix *this)
{
  uint64_t Submix;
  uint64_t result;
  _QWORD *v4;

  if (*((_OWORD *)this + 37) == 0
    || (Submix = Phase::Controller::SubmixSystem::GetSubmix(*((Phase::Logger **)this + 29), *((_QWORD *)this + 74), *((_QWORD *)this + 75)), result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Submix + 136))(Submix), (_DWORD)result))
  {
    v4 = (_QWORD *)((char *)this + 264);
    do
    {
      v4 = (_QWORD *)*v4;
      result = v4 == 0;
    }
    while (v4 && *(_BYTE *)(v4[4] + 512));
  }
  return result;
}

Phase::Logger *Phase::Controller::SpatialSubmix::SetSpatialCategoryIsActive(uint64_t a1, int a2, int a3)
{
  uint64_t *SpatialCategoryParameters;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t SpatialModelerCategory;
  uint64_t v11;

  SpatialCategoryParameters = Phase::Controller::SpatialSubmix::GetSpatialCategoryParameters((Phase::Logger *)a1, a2);
  if (*((unsigned __int8 *)SpatialCategoryParameters + 8) != a3)
  {
    *((_BYTE *)SpatialCategoryParameters + 8) = a3;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 24);
    if (a3)
    {
      v9 = *(double *)SpatialCategoryParameters;
      SpatialModelerCategory = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*(Phase::Logger **)(a1 + 576), a2);
      Phase::Controller::SpatialModelerCategory::AddInput(SpatialModelerCategory, v7, v8, v9);
    }
    else
    {
      v11 = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*(Phase::Logger **)(a1 + 576), a2);
      Phase::Controller::SpatialModelerCategory::RemoveInput(v11, v7, v8);
    }
  }
  return Phase::Controller::SpatialSubmix::CheckSpatialCategoriesActiveState((Phase::Logger *)a1);
}

uint64_t *Phase::Controller::SpatialSubmix::GetSpatialCategoryParameters(Phase::Logger *a1, int a2)
{
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  id v10;
  std::logic_error *exception;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 43);
  if (!v3)
    goto LABEL_17;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (v3 <= a2)
      v5 = a2 % v3;
  }
  else
  {
    v5 = (v3 - 1) & a2;
  }
  v6 = *(uint64_t ***)(*((_QWORD *)a1 + 42) + 8 * v5);
  if (!v6 || (v7 = *v6) == 0)
  {
LABEL_17:
    v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1)
                                                                                       + 384)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      GetSpatialCategoryString(a2);
      v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v13 = 136315650;
      v14 = "CvmSpatialSubmix.mm";
      v15 = 1024;
      v16 = 654;
      v17 = 2080;
      v18 = objc_msgSend(v10, "UTF8String");
      _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [it == mSpatialCategoryParameters.end() is true]: \"Invalid SpatialCategory %s\"", (uint8_t *)&v13, 0x1Cu);

    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid SpatialCategory %s");
  }
  while (1)
  {
    v8 = v7[1];
    if (v8 == a2)
      break;
    if (v4.u32[0] > 1uLL)
    {
      if (v8 >= v3)
        v8 %= v3;
    }
    else
    {
      v8 &= v3 - 1;
    }
    if (v8 != v5)
      goto LABEL_17;
LABEL_16:
    v7 = (uint64_t *)*v7;
    if (!v7)
      goto LABEL_17;
  }
  if (*((_DWORD *)v7 + 4) != a2)
    goto LABEL_16;
  return v7 + 3;
}

void sub_21653551C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialSubmix::SetSpatialCategorySendLevel(Phase::Logger *a1, int a2, double a3)
{
  uint64_t *SpatialCategoryParameters;
  double *v7;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  Phase::Logger *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t SpatialModelerCategory;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  SpatialCategoryParameters = Phase::Controller::SpatialSubmix::GetSpatialCategoryParameters(a1, a2);
  if (*((_BYTE *)SpatialCategoryParameters + 8))
  {
    v7 = (double *)SpatialCategoryParameters;
    if (a3 < 0.0 || a3 > 1.0)
    {
      v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)SpatialCategoryParameters)
                                                                                         + 384)));
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = *((_QWORD *)a1 + 4);
        v11 = *((_QWORD *)a1 + 2);
        GetSpatialCategoryString(a2);
        v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v17 = 136316930;
        v18 = "CvmSpatialSubmix.mm";
        v19 = 1024;
        v20 = 338;
        v21 = 2048;
        v22 = v10;
        v23 = 2048;
        v24 = v11;
        v25 = 2080;
        v26 = objc_msgSend(v12, "UTF8String");
        v27 = 2048;
        v28 = a3;
        v29 = 2048;
        v30 = 0;
        v31 = 2048;
        v32 = 0x3FF0000000000000;
        _os_log_impl(&dword_2164CC000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d (sound event: %llu, submix: %llu) '%s' send level %f is out of range [%f, %f]. Clamping...", (uint8_t *)&v17, 0x4Eu);

      }
      a3 = fmin(fmax(a3, 0.0), 1.0);
    }
    if (*v7 != a3)
    {
      *v7 = a3;
      v13 = (Phase::Logger *)*((_QWORD *)a1 + 72);
      v15 = *((_QWORD *)a1 + 2);
      v14 = *((_QWORD *)a1 + 3);
      SpatialModelerCategory = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(v13, a2);
      Phase::Controller::SpatialModelerCategory::SetInputSendLevel(SpatialModelerCategory, v15, v14, a3);
    }
  }
}

void sub_2165356FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatialSubmix::SetSpatialCategoryProperty(uint64_t a1, int a2, int a3, char a4, _OWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t SpatialModelerCategory;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  SpatialModelerCategory = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*(Phase::Logger **)(a1 + 576), a2);
  return Phase::Controller::SpatialModelerCategory::SetProperty(SpatialModelerCategory, v8, v9, a3, a4, a5);
}

double Phase::Controller::SpatialSubmix::GetInputChannelLayout@<D0>(std::vector<char> *a1@<X8>)
{
  std::vector<char>::pointer begin;
  double result;
  std::vector<char>::value_type __x;

  __x = 0;
  begin = std::vector<char>::vector(a1, 0x20uLL, &__x)->__begin_;
  *(_QWORD *)&result = 6553601;
  *(_QWORD *)begin = 6553601;
  *((_DWORD *)begin + 2) = 0;
  return result;
}

void Phase::Controller::SpatialSubmix::InternalSleep(Phase::Controller::SpatialSubmix *this)
{
  int HasActiveInputs;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *SpatialModelerCategory;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  if (*((_BYTE *)this + 72) != 7)
  {
    HasActiveInputs = Phase::Controller::SpatialSubmix::HasActiveInputs(this);
    if (*((_BYTE *)this + 72) != 6 && HasActiveInputs != 0)
      goto LABEL_26;
    Phase::Controller::Submix::SetState((uint64_t)this, 6u);
    if (!*((_BYTE *)this + 584))
      *((_BYTE *)this + 584) = 3;
    if (*((_BYTE *)this + 72) != 7)
    {
      while (*((unsigned __int8 *)this + 584) - 3 < 0xFFFFFFFE)
      {
        switch(*((_BYTE *)this + 584))
        {
          case 0:
            *((_BYTE *)this + 584) = 3;
            break;
          case 3:
            for (i = (uint64_t *)*((_QWORD *)this + 44); i; i = (uint64_t *)*i)
            {
              v5 = *((_QWORD *)this + 2);
              v6 = *((_QWORD *)this + 3);
              SpatialModelerCategory = (_QWORD *)Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)this + 72), *((_DWORD *)i + 4));
              Phase::Controller::SpatialModelerCategory::UnregisterSubmix(SpatialModelerCategory, v5, v6);
            }
            v8 = *(_QWORD **)(*((_QWORD *)this + 72) + 16);
            if (v8)
            {
              v9 = *((_QWORD *)this + 2);
              v10 = *((_QWORD *)this + 3);
              do
              {
                Phase::Controller::SpatialModelerCategory::SetPlayState(v8[3], v9, v10, 0);
                v8 = (_QWORD *)*v8;
              }
              while (v8);
            }
            *((_BYTE *)this + 584) = 4;
            break;
          case 4:
            if (!Phase::Controller::SpatialModelerSystem::IsStopped(*((_QWORD *)this + 72), *((_QWORD *)this + 2), *((_QWORD *)this + 3)))return;
            Phase::Controller::SpatialModelerSystem::RemoveAllInputs(*((_QWORD *)this + 72), *((_QWORD *)this + 2), *((_QWORD *)this + 3));
            Phase::Controller::DVM::VoiceGraph::RemoveSubmix(*(Phase::Controller::DVM::VoiceGraph **)(**((_QWORD **)this + 28) + 72), *((_QWORD *)this + 2), *((_QWORD *)this + 3));
            *((_BYTE *)this + 584) = 5;
            break;
          case 5:
            if (!*((_BYTE *)this + 288))
              return;
            *((_BYTE *)this + 584) = 6;
            break;
          default:
            *((_BYTE *)this + 584) = 0;
            Phase::Controller::Submix::SetState((uint64_t)this, 7u);
            Phase::Controller::Submix::SetSessionPlayState((uint64_t)this, 0, 0, 0);
            break;
        }
        if (*((_BYTE *)this + 72) == 7)
          return;
      }
LABEL_26:
      std::terminate();
    }
  }
}

void Phase::Controller::SpatialSubmix::InternalStop(Phase::Controller::SpatialSubmix *this)
{
  char i;
  int v3;

  *((_QWORD *)this + 7) &= 0xFFFFFFFFFFFFFFF9;
  if (*((_BYTE *)this + 72))
  {
    Phase::Controller::Submix::SetState((uint64_t)this, 1u);
    if (!*((_BYTE *)this + 585))
      *((_BYTE *)this + 585) = 1;
    for (i = *((_BYTE *)this + 72); i; i = *((_BYTE *)this + 72))
    {
      switch(*((_BYTE *)this + 585))
      {
        case 0:
          *((_BYTE *)this + 585) = 1;
          continue;
        case 1:
          Phase::Controller::Submix::StopInputs(this);
          *((_BYTE *)this + 585) = 2;
          continue;
        case 2:
          if ((Phase::Controller::SpatialSubmix::HasActiveInputs(this) & 1) != 0)
            return;
          *((_BYTE *)this + 585) = 3;
          break;
        case 3:
        case 4:
        case 5:
          Phase::Controller::SpatialSubmix::InternalSleep(this);
          v3 = *((unsigned __int8 *)this + 72);
          Phase::Controller::Submix::SetState((uint64_t)this, i);
          if ((v3 & 0xFE) != 6)
            std::terminate();
          if (v3 != 7)
            return;
          *((_BYTE *)this + 585) = 6;
          break;
        default:
          *((_BYTE *)this + 585) = 0;
          Phase::Controller::Submix::SetState((uint64_t)this, 0);
          Phase::Controller::Submix::SetSessionPlayState((uint64_t)this, 0, 0, 0);
          *((_QWORD *)this + 7) &= ~8uLL;
          continue;
      }
    }
  }
}

BOOL Phase::Controller::SpatialSubmix::IsPrepared(Phase::Controller::SpatialSubmix *this)
{
  return Phase::Controller::SpatialModelerSystem::IsPrepared(*((_QWORD *)this + 72), *((_QWORD *)this + 2), *((_QWORD *)this + 3));
}

void Phase::Controller::SpatialSubmix::SetPlayState(_QWORD *a1, int a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  Phase::Controller::Submix::SetPlayState((uint64_t)a1, a2);
  v4 = *(_QWORD **)(a1[72] + 16);
  if (v4)
  {
    v5 = a1[2];
    v6 = a1[3];
    do
    {
      Phase::Controller::SpatialModelerCategory::SetPlayState(v4[3], v5, v6, a2);
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
}

uint64_t Phase::Controller::SpatialSubmix::GetType(Phase::Controller::SpatialSubmix *this)
{
  return 1;
}

uint64_t Phase::Controller::SpatialSubmix::GetNumChannels(Phase::Controller::SpatialSubmix *this)
{
  return 1;
}

uint64_t Phase::Controller::SpatialSubmix::GetChannelMask(uint64_t a1, Phase::Logger *a2)
{
  uint64_t v3;
  unsigned __int32 i;
  int *v5;
  int v6;
  unsigned int v7;
  uint8x8_t v8;
  _BOOL4 IsChannelLFE;
  uint64_t v10;

  v3 = 0;
  for (i = 0; ; ++i)
  {
    v5 = *(int **)a2;
    v6 = **(_DWORD **)a2;
    if (v6 == 0x10000)
    {
      v8 = (uint8x8_t)vcnt_s8((int8x8_t)v5[1]);
      v8.i16[0] = vaddlv_u8(v8);
      v7 = v8.i32[0];
    }
    else
    {
      v7 = v6 ? (unsigned __int16)**(_DWORD **)a2 : v5[2];
    }
    if (i >= v7)
      break;
    IsChannelLFE = Phase::ChannelLayout::IsChannelLFE(a2, i);
    v10 = 1 << i;
    if (IsChannelLFE)
      v10 = 0;
    v3 |= v10;
  }
  return v3;
}

uint64_t Phase::Controller::SpatialSubmix::GetSourceId(Phase::Controller::SpatialSubmix *this)
{
  return *((_QWORD *)this + 41);
}

uint64_t Phase::Controller::SpatialSubmix::GetListenerId(Phase::Controller::SpatialSubmix *this)
{
  return *((_QWORD *)this + 40);
}

uint64_t Phase::Controller::CreateDistanceModelHandle(double *a1, uint64_t a2)
{
  uint64_t v2;
  Phase::Logger *v5;
  double v6;
  int v7;
  Phase::Logger *v8;
  double v9;
  int v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  NSObject *v14;
  const char *v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  Phase::Logger *v19;
  float *v20;
  Phase::Logger *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  double *v25;
  double v26;
  int v27;
  float v28;
  double v29;
  int v30;
  float v31;
  float *v32;
  uint64_t v33;
  uint64_t (*v34)();
  NSObject *v35;
  _BOOL4 v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  float v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  Phase::Logger *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  NSObject *v61;
  unint64_t *p_shared_owners;
  NSObject *v64;
  double v65;
  std::logic_error *exception;
  float *v68;
  float *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE buf[40];
  uint8_t v77[32];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int8 *)a1;
  if (!*(_BYTE *)a1)
    return v2;
  if ((_DWORD)v2 == 2)
  {
    if (!a2)
      goto LABEL_123;
    v8 = (Phase::Logger *)Phase::Geometry::DistanceModelFactory::Create(a2 + 456, 2u, &v72);
    if (!v72)
    {
      v13 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v8) + 384));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "CvmSpatialSubmixHelpers.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 145;
        _os_log_impl(&dword_2164CC000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to create a geometric spreading distance model.", buf, 0x12u);
      }
      v2 = 0;
      goto LABEL_117;
    }
    v9 = a1[1];
    if (v9 >= -3.40282347e38)
    {
      v16 = v9;
      v10 = 2139095039;
      if (v16 <= 3.4028e38)
        goto LABEL_22;
    }
    else
    {
      v10 = -8388609;
    }
    v16 = *(float *)&v10;
LABEL_22:
    v17 = **(_QWORD **)(v72 + 40);
    LODWORD(v71) = 0;
    *((float *)&v71 + 1) = v16;
    v18 = *((unsigned int *)a1 + 4);
    v69 = 0;
    v70 = 0;
    v68 = 0;
    *(_QWORD *)buf = &v68;
    buf[8] = 0;
    if ((_DWORD)v18)
    {
      v19 = (Phase::Logger *)operator new(40 * v18);
      v20 = (float *)v19;
      v68 = (float *)v19;
      v70 = (char *)v19 + 40 * v18;
      v21 = v19;
      do
      {
        *(_OWORD *)v21 = 0uLL;
        *((_QWORD *)v21 + 1) = &off_24D579910;
        v22 = (char *)v21 + 8;
        *(_OWORD *)(v22 + 8) = 0uLL;
        *((_QWORD *)v22 + 3) = v22;
        v21 = (Phase::Logger *)(v22 + 32);
      }
      while (v21 != (Phase::Logger *)((char *)v19 + 40 * v18));
      v23 = 0;
      v24 = 0;
      v69 = (float *)((char *)v19 + 40 * v18);
      v25 = a1 + 5;
      while (1)
      {
        v26 = *(v25 - 2);
        if (v26 >= -3.40282347e38)
        {
          v28 = v26;
          if (v28 <= 3.4028e38)
            goto LABEL_31;
          v27 = 2139095039;
        }
        else
        {
          v27 = -8388609;
        }
        v28 = *(float *)&v27;
LABEL_31:
        v29 = *(v25 - 1);
        if (v29 >= -3.40282347e38)
        {
          v31 = v29;
          if (v31 <= 3.4028e38)
            goto LABEL_36;
          v30 = 2139095039;
        }
        else
        {
          v30 = -8388609;
        }
        v31 = *(float *)&v30;
LABEL_36:
        v32 = &v20[v23];
        *v32 = v28;
        v32[1] = v31;
        v33 = *(_QWORD *)v25;
        v34 = Phase::CurveFunction::Linear<float>;
        if (*(uint64_t *)v25 > 1668434002)
        {
          if (v33 > 1668434500)
          {
            if (v33 <= 1668436838)
            {
              if (v33 == 1668434501)
              {
                v34 = (uint64_t (*)())Phase::CurveFunction::JumpToEndValue<float>;
                goto LABEL_65;
              }
              if (v33 == 1668435054)
                goto LABEL_65;
            }
            else
            {
              switch(v33)
              {
                case 1668436839:
LABEL_56:
                  v34 = (uint64_t (*)())Phase::CurveFunction::Sigmoid<float>;
                  goto LABEL_65;
                case 1668436846:
LABEL_57:
                  v34 = (uint64_t (*)())Phase::CurveFunction::Sine<float>;
                  goto LABEL_65;
                case 1668436849:
LABEL_48:
                  v34 = (uint64_t (*)())Phase::CurveFunction::Squared<float>;
                  goto LABEL_65;
              }
            }
          }
          else if (v33 <= 1668434246)
          {
            if (v33 == 1668434003)
            {
              v34 = (uint64_t (*)())Phase::CurveFunction::HoldStartValue<float>;
              goto LABEL_65;
            }
            if (v33 == 1668434243)
            {
LABEL_51:
              v34 = (uint64_t (*)())Phase::CurveFunction::InverseCubed<float>;
              goto LABEL_65;
            }
          }
          else
          {
            switch(v33)
            {
              case 1668434247:
LABEL_58:
                v34 = (uint64_t (*)())Phase::CurveFunction::InverseSigmoid<float>;
                goto LABEL_65;
              case 1668434257:
LABEL_55:
                v34 = (uint64_t (*)())Phase::CurveFunction::InverseSquared<float>;
                goto LABEL_65;
              case 1668434259:
LABEL_43:
                v34 = (uint64_t (*)())Phase::CurveFunction::InverseSine<float>;
                goto LABEL_65;
            }
          }
LABEL_63:
          v35 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v19) + 640));
          v36 = os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
          v34 = Phase::CurveFunction::Linear<float>;
          if (v36)
          {
            *(_DWORD *)v77 = 136315650;
            *(_QWORD *)&v77[4] = "CurveUtility.hpp";
            *(_WORD *)&v77[12] = 1024;
            *(_DWORD *)&v77[14] = 90;
            *(_WORD *)&v77[18] = 1024;
            *(_DWORD *)&v77[20] = v33;
            _os_log_impl(&dword_2164CC000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported PHASECurveType %d. Setting the curve to linear.", v77, 0x18u);
            v34 = Phase::CurveFunction::Linear<float>;
          }
        }
        else
        {
          switch(v33)
          {
            case 0:
              break;
            case 1:
              goto LABEL_48;
            case 2:
              goto LABEL_55;
            case 3:
              goto LABEL_60;
            case 4:
              goto LABEL_51;
            case 5:
              goto LABEL_43;
            case 6:
              goto LABEL_57;
            case 7:
              goto LABEL_56;
            case 8:
              goto LABEL_58;
            default:
              if (v33 != 1668432757)
                goto LABEL_63;
LABEL_60:
              v34 = (uint64_t (*)())Phase::CurveFunction::Cubed<float>;
              break;
          }
        }
LABEL_65:
        *(_QWORD *)buf = &unk_24D579958;
        *(_QWORD *)&buf[8] = v34;
        *(_QWORD *)&buf[24] = buf;
        std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](&v20[v23 + 2], (uint64_t)buf);
        v19 = *(Phase::Logger **)&buf[24];
        if (*(_BYTE **)&buf[24] == buf)
        {
          v19 = (Phase::Logger *)buf;
          v37 = 4;
          goto LABEL_69;
        }
        if (*(_QWORD *)&buf[24])
        {
          v37 = 5;
LABEL_69:
          v19 = (Phase::Logger *)(*(uint64_t (**)(void))(*(_QWORD *)v19 + 8 * v37))();
        }
        ++v24;
        v20 = v68;
        v38 = v69;
        v39 = (char *)v69 - (char *)v68;
        v23 += 10;
        v25 += 3;
        if (0xCCCCCCCCCCCCCCCDLL * (((char *)v69 - (char *)v68) >> 3) <= v24)
          goto LABEL_84;
      }
    }
    v39 = 0;
    v38 = 0;
    v20 = 0;
LABEL_84:
    memset(v77, 0, 24);
    v44 = 0xCCCCCCCCCCCCCCCDLL * (v39 >> 3);
    if (v44 == 1)
    {
      Phase::Envelope<float>::InitializeFromSingleSegment((Phase::Logger *)v77, (float *)&v71, v20);
    }
    else
    {
      if (v44)
      {
        if (v38 == v20)
        {
          v48 = 0;
          v49 = 0;
        }
        else
        {
          std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__vdeallocate((void **)v77);
          if (v44 > 0x555555555555555)
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          v50 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v77[16] - *(_QWORD *)v77) >> 4);
          if (v50 <= v44)
            v50 = v44;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v77[16] - *(_QWORD *)v77) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v51 = 0x555555555555555;
          else
            v51 = v50;
          std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__vallocate[abi:ne180100](v77, v51);
          v74 = *(_QWORD *)&v77[8];
          v75 = *(_QWORD *)&v77[8];
          *(_QWORD *)buf = &v77[16];
          *(_QWORD *)&buf[8] = &v74;
          *(_QWORD *)&buf[16] = &v75;
          buf[24] = 0;
          if (v20 == v38)
          {
            v49 = *(_QWORD *)&v77[8];
          }
          else
          {
            v52 = (uint64_t)(v20 + 2);
            v49 = *(_QWORD *)&v77[8];
            do
            {
              *(_QWORD *)v49 = 0;
              v53 = v52 - 8;
              *(_DWORD *)(v49 + 8) = *(_DWORD *)(v52 - 8);
              *(_DWORD *)(v49 + 12) = *(_DWORD *)(v52 - 4);
              std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100](v49 + 16, v52);
              v49 = v75 + 48;
              v75 += 48;
              v52 += 40;
            }
            while ((float *)(v53 + 40) != v38);
          }
          buf[24] = 1;
          std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Envelope<float>::SegmentInternal>,Phase::Envelope<float>::SegmentInternal*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)buf);
          *(_QWORD *)&v77[8] = v49;
          v48 = *(_QWORD *)v77;
        }
        v54 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - v48) >> 4));
        if (v49 == v48)
          v55 = 0;
        else
          v55 = v54;
        v56 = (Phase::Logger *)std::__introsort<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*,false>(v48, v49, v55, 1);
        v57 = *(_QWORD *)v77;
        if (*(float *)&v71 > *(float *)(*(_QWORD *)v77 + 8))
        {
          v64 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v56) + 640));
          if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
          {
            v65 = *(float *)(*(_QWORD *)v77 + 8);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "Envelope.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 117;
            *(_WORD *)&buf[18] = 2048;
            *(double *)&buf[20] = *(float *)&v71;
            *(_WORD *)&buf[28] = 2048;
            *(double *)&buf[30] = v65;
            _os_log_impl(&dword_2164CC000, v64, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (EnvelopeException::InvalidStartPoint) [!(inStartPoint.x <= mSegments[0].mEndPoint.x) is true]: \"Invalid start point x value: %f. Must be <= first end point x value: %f\"", buf, 0x26u);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Invalid start point x value: %f. Must be <= first end point x value: %f");
          exception->__vftable = (std::logic_error_vtbl *)&off_24D5770C8;
        }
        **(_DWORD **)v77 = v71;
        *(_DWORD *)(v57 + 4) = HIDWORD(v71);
        v58 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)&v77[8] - v57) >> 4);
        v59 = v58 - 1;
        if (v58 != 1)
        {
          v60 = (_QWORD *)(v57 + 16 * ((*(_QWORD *)&v77[8] - v57) >> 4) - 88);
          do
          {
            v60[5] = *v60;
            v60 -= 6;
            --v59;
          }
          while (v59);
        }
        goto LABEL_113;
      }
      v45 = &buf[8];
      *(_QWORD *)&buf[8] = &off_24D579910;
      *(_QWORD *)&buf[32] = &buf[8];
      *(_QWORD *)buf = v71;
      v46.n128_f32[0] = Phase::Envelope<float>::InitializeFromSingleSegment((Phase::Logger *)v77, (float *)&v71, (float *)buf);
      if (*(_BYTE **)&buf[32] == &buf[8])
      {
        v47 = 4;
      }
      else
      {
        if (!*(_QWORD *)&buf[32])
          goto LABEL_113;
        v47 = 5;
        v45 = *(_QWORD **)&buf[32];
      }
      (*(void (**)(_QWORD *, __n128))(*v45 + 8 * v47))(v45, v46);
    }
LABEL_113:
    std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__vdeallocate((void **)(v17 + 16));
    *(_OWORD *)(v17 + 16) = *(_OWORD *)v77;
    *(_QWORD *)(v17 + 32) = *(_QWORD *)&v77[16];
    memset(v77, 0, 24);
    *(_QWORD *)buf = v77;
    std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    v2 = Phase::Geometry::SystemScheduler::AddToDatabase(a2 + 2352, &v72);
    if (!v2)
    {
      v61 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "CvmSpatialSubmixHelpers.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 140;
        _os_log_impl(&dword_2164CC000, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to add distance model to geometry layer database.", buf, 0x12u);
      }
    }
    *(_QWORD *)buf = &v68;
    std::vector<Phase::Envelope<float>::Segment,std::allocator<Phase::Envelope<float>::Segment>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_117:
    v41 = v73;
    if (!v73)
      return v2;
    p_shared_owners = (unint64_t *)&v73->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
LABEL_120:
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    return v2;
  }
  if ((_DWORD)v2 == 1)
  {
    if (a2)
    {
      v5 = (Phase::Logger *)Phase::Geometry::DistanceModelFactory::Create(a2 + 456, 1u, v77);
      if (!*(_QWORD *)v77)
      {
        v14 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v5) + 384));
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "CvmSpatialSubmixHelpers.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 100;
          v15 = "%25s:%-5d Failed to create a geometric spreading distance model.";
LABEL_77:
          _os_log_impl(&dword_2164CC000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
        }
LABEL_78:
        v2 = 0;
        goto LABEL_79;
      }
      v6 = a1[1];
      if (v6 >= -3.40282347e38)
      {
        v40 = v6;
        v7 = 2139095039;
        if (v40 <= 3.4028e38)
          goto LABEL_74;
      }
      else
      {
        v7 = -8388609;
      }
      v40 = *(float *)&v7;
LABEL_74:
      *(float *)(**(_QWORD **)(*(_QWORD *)v77 + 40) + 16) = v40;
      v2 = Phase::Geometry::SystemScheduler::AddToDatabase(a2 + 2352, (uint64_t *)v77);
      if (v2)
      {
LABEL_79:
        v41 = *(std::__shared_weak_count **)&v77[8];
        if (!*(_QWORD *)&v77[8])
          return v2;
        v42 = (unint64_t *)(*(_QWORD *)&v77[8] + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        goto LABEL_120;
      }
      v14 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "CvmSpatialSubmixHelpers.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 95;
        v15 = "%25s:%-5d Failed to add distance model to geometry layer database.";
        goto LABEL_77;
      }
      goto LABEL_78;
    }
LABEL_123:
    std::terminate();
  }
  v11 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr((Phase::Logger *)a1) + 384));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    v12 = *(unsigned __int8 *)a1;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "CvmSpatialSubmixHelpers.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 154;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v12;
    _os_log_impl(&dword_2164CC000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d unhandled distance model type: %hhu", buf, 0x18u);
  }
  return 0;
}

void sub_2165366BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28)
{
  void *v28;

  __cxa_free_exception(v28);
  a21 = &a27;
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a21 = &a13;
  std::vector<Phase::Envelope<float>::Segment,std::allocator<Phase::Envelope<float>::Segment>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::CreateDirectivityModelHandle(unsigned __int8 *a1, uint64_t a2, int a3)
{
  Phase::Logger *v6;
  uint64_t v7;
  Phase::Logger *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  float v14;
  float v15;
  double v16;
  float v17;
  float v18;
  int v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float *v25;
  float *v26;
  double *v27;
  float *v28;
  double v29;
  float v30;
  float v31;
  double v32;
  float v33;
  float v34;
  int v35;
  float v36;
  uint64_t v37;
  void *v38;
  float *v39;
  int *v40;
  int *v41;
  int v42;
  int v43;
  int v44;
  Phase::Logger *v45;
  NSObject *v46;
  Phase::Logger *v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  double *v51;
  double v52;
  float v53;
  float v54;
  double v55;
  int v56;
  float v57;
  double v58;
  int v59;
  float v60;
  int v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  float *v67;
  float *v68;
  float *v69;
  double *v70;
  float *v71;
  double v72;
  float v73;
  float v74;
  double v75;
  int v76;
  float v77;
  double v78;
  int v79;
  float v80;
  double v81;
  int v82;
  float v83;
  _DWORD *v84;
  void *v85;
  float *v86;
  int *v87;
  int *v88;
  int *v89;
  int v90;
  int v91;
  int v92;
  int v93;
  Phase::Logger *v94;
  NSObject *v95;
  Phase::Logger *v96;
  Phase::Geometry::SphericalCapDirectivity *v97;
  NSObject *v98;
  const char *v99;
  const char *v100;
  NSObject *v101;
  uint32_t v102;
  NSObject *v103;
  int v104;
  NSObject *v105;
  const char *v106;
  NSObject *v107;
  uint32_t v108;
  NSObject *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  NSObject *v113;
  const char *v114;
  NSObject *v115;
  uint32_t v116;
  NSObject *v117;
  const char *v118;
  unint64_t *v119;
  NSObject *v120;
  const char *v121;
  unint64_t *p_shared_owners;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  _OWORD v128[2];
  int v129;
  void *v130[3];
  void *v131;
  std::__shared_weak_count *v132;
  void *__p;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  float *v141;
  uint64_t v142;
  _BYTE buf[18];
  __int16 v144;
  uint64_t v145;
  int v146;
  uint64_t v147;

  v147 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    std::terminate();
  memset(v128, 0, sizeof(v128));
  v129 = 1065353216;
  v141 = (float *)"DirectivityDataMapSize";
  v142 = 22;
  *(_DWORD *)buf = 4;
  v146 = 1;
  Phase::UnorderedStringMap<Phase::OptionsValue>::Set((uint64_t)v128, (uint64_t)&v141, (uint64_t)buf);
  v6 = (Phase::Logger *)std::__variant_detail::__dtor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
  v7 = *a1;
  switch(*a1)
  {
    case 0u:
      goto LABEL_175;
    case 1u:
      v8 = (Phase::Logger *)Phase::Geometry::DirectivityFactory::Create(a2 + 208, 1u, &v131);
      if (v131)
      {
        v124 = a2;
        v9 = **((_QWORD **)v131 + 5);
        v10 = *((unsigned int *)a1 + 2);
        *(_OWORD *)(v9 + 144) = 0u;
        v11 = v9 + 144;
        *(_OWORD *)(v11 - 20) = 0u;
        *(_OWORD *)(v11 - 48) = 0u;
        *(_OWORD *)(v11 - 32) = 0u;
        *(_OWORD *)(v11 - 80) = 0u;
        *(_OWORD *)(v11 - 64) = 0u;
        *(_OWORD *)(v11 - 112) = 0u;
        *(_OWORD *)(v11 - 96) = 0u;
        *(_OWORD *)(v11 - 128) = 0u;
        *(_DWORD *)(v11 - 4) = v10;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 80) = 0u;
        *(_OWORD *)(v11 + 96) = 0u;
        *(_OWORD *)(v11 + 108) = 0u;
        *(_DWORD *)(v11 + 124) = v10;
        *(_OWORD *)(v11 + 236) = 0u;
        *(_OWORD *)(v11 + 208) = 0u;
        *(_OWORD *)(v11 + 224) = 0u;
        *(_OWORD *)(v11 + 176) = 0u;
        *(_OWORD *)(v11 + 192) = 0u;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_OWORD *)(v11 + 160) = 0u;
        *(_OWORD *)(v11 + 128) = 0u;
        *(_DWORD *)(v11 + 252) = v10;
        if ((_DWORD)v10)
        {
          v12 = (double *)(a1 + 32);
          while (1)
          {
            v13 = *(v12 - 2);
            v14 = v13;
            if (v14 > 3.4028e38)
              v14 = 3.4028e38;
            if (v13 >= -3.40282347e38)
              v15 = v14;
            else
              v15 = -3.4028e38;
            *(float *)(v11 - 128) = v15;
            v16 = *(v12 - 1);
            v17 = v16;
            if (v17 > 3.4028e38)
              v17 = 3.4028e38;
            v18 = v16 >= -3.40282347e38 ? v17 : -3.4028e38;
            *(float *)v11 = v18;
            if (*v12 < -3.40282347e38)
              break;
            v20 = *v12;
            if (v20 > 3.4028e38)
            {
              v19 = 2139095039;
              goto LABEL_20;
            }
LABEL_21:
            *(float *)(v11 + 128) = v20;
            v11 += 4;
            v12 += 3;
            if (!--v10)
              goto LABEL_22;
          }
          v19 = -8388609;
LABEL_20:
          v20 = *(float *)&v19;
          goto LABEL_21;
        }
LABEL_22:
        v21 = 1;
        while (1)
        {
          v22 = *(_QWORD *)(*((_QWORD *)v131 + 5) + 40 * v21);
          v23 = qword_2166F78E8[v21 - 1];
          sGetFrequencies((uint64_t)&v141, v23);
          v24 = *((unsigned int *)a1 + 2);
          std::vector<float>::vector(buf, v24);
          std::vector<float>::vector(&v139, v24);
          std::vector<float>::vector(&v137, v24);
          if ((_DWORD)v24)
          {
            v25 = *(float **)buf;
            v26 = (float *)v139;
            v27 = (double *)(a1 + 32);
            v28 = (float *)v137;
            while (1)
            {
              v29 = *(v27 - 2);
              v30 = v29;
              if (v30 > 3.4028e38)
                v30 = 3.4028e38;
              if (v29 >= -3.40282347e38)
                v31 = v30;
              else
                v31 = -3.4028e38;
              *v25 = v31;
              v32 = *(v27 - 1);
              v33 = v32;
              if (v33 > 3.4028e38)
                v33 = 3.4028e38;
              v34 = v32 >= -3.40282347e38 ? v33 : -3.4028e38;
              *v26 = v34;
              if (*v27 < -3.40282347e38)
                break;
              v36 = *v27;
              if (v36 > 3.4028e38)
              {
                v35 = 2139095039;
                goto LABEL_39;
              }
LABEL_40:
              *v28++ = v36;
              v27 += 3;
              ++v26;
              ++v25;
              if (!--v24)
                goto LABEL_41;
            }
            v35 = -8388609;
LABEL_39:
            v36 = *(float *)&v35;
            goto LABEL_40;
          }
LABEL_41:
          std::vector<float>::vector(&v135, v23);
          std::vector<float>::vector(&__p, v23);
          Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Identity<float>,&float Phase::Identity<float>>(*(float **)buf, *(float **)&buf[8], (uint64_t)v139, (uint64_t)v140, v141, (float *)v142, (uint64_t)v135);
          Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Identity<float>,&float Phase::Identity<float>>(*(float **)buf, *(float **)&buf[8], (uint64_t)v137, (uint64_t)v138, v141, (float *)v142, (uint64_t)__p);
          *(_OWORD *)(v22 + 144) = 0u;
          v37 = v22 + 144;
          *(_OWORD *)(v37 - 20) = 0u;
          *(_OWORD *)(v37 - 48) = 0u;
          *(_OWORD *)(v37 - 32) = 0u;
          *(_OWORD *)(v37 - 80) = 0u;
          *(_OWORD *)(v37 - 64) = 0u;
          *(_OWORD *)(v37 - 112) = 0u;
          *(_OWORD *)(v37 - 96) = 0u;
          *(_OWORD *)(v37 - 128) = 0u;
          *(_DWORD *)(v37 - 4) = v23;
          *(_OWORD *)(v37 + 16) = 0u;
          *(_OWORD *)(v37 + 32) = 0u;
          *(_OWORD *)(v37 + 48) = 0u;
          *(_OWORD *)(v37 + 64) = 0u;
          *(_OWORD *)(v37 + 80) = 0u;
          *(_OWORD *)(v37 + 96) = 0u;
          *(_OWORD *)(v37 + 108) = 0u;
          *(_DWORD *)(v37 + 124) = v23;
          *(_OWORD *)(v37 + 236) = 0u;
          *(_OWORD *)(v37 + 208) = 0u;
          *(_OWORD *)(v37 + 224) = 0u;
          *(_OWORD *)(v37 + 176) = 0u;
          *(_OWORD *)(v37 + 192) = 0u;
          *(_OWORD *)(v37 + 144) = 0u;
          *(_OWORD *)(v37 + 160) = 0u;
          *(_OWORD *)(v37 + 128) = 0u;
          *(_DWORD *)(v37 + 252) = v23;
          v38 = __p;
          if (v23)
            break;
          if (__p)
            goto LABEL_46;
LABEL_47:
          if (v135)
          {
            v136 = v135;
            operator delete(v135);
          }
          if (v137)
          {
            v138 = v137;
            operator delete(v137);
          }
          if (v139)
          {
            v140 = v139;
            operator delete(v139);
          }
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
            operator delete(*(void **)buf);
          }
          if (v141)
          {
            v142 = (uint64_t)v141;
            operator delete(v141);
          }
          if (++v21 == 4)
          {
            v45 = (Phase::Logger *)Phase::Geometry::SystemScheduler::AddToDatabase(v124 + 2352, (uint64_t *)&v131);
            v7 = (uint64_t)v45;
            if (v45)
            {
              v46 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v45) + 384));
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "CvmSpatialSubmixHelpers.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 337;
                v144 = 2048;
                v145 = v7;
                _os_log_impl(&dword_2164CC000, v46, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating geometry Directivity: 0x%llx", buf, 0x1Cu);
              }
              goto LABEL_170;
            }
            v120 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
            if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
            {
              v121 = "source";
              *(_QWORD *)&buf[4] = "CvmSpatialSubmixHelpers.mm";
              *(_DWORD *)buf = 136315650;
              if (a3)
                v121 = "listener";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 343;
              v144 = 2080;
              v145 = (uint64_t)v121;
              v114 = "%25s:%-5d Failed to add %s directivity model to geometry layer database.";
              v115 = v120;
              v116 = 28;
LABEL_168:
              _os_log_impl(&dword_2164CC000, v115, OS_LOG_TYPE_ERROR, v114, buf, v116);
            }
            goto LABEL_169;
          }
        }
        v39 = v141;
        v40 = (int *)v135;
        v41 = (int *)__p;
        do
        {
          v42 = *(_DWORD *)v39++;
          *(_DWORD *)(v37 - 128) = v42;
          v43 = *v40++;
          *(_DWORD *)v37 = v43;
          v44 = *v41++;
          *(_DWORD *)(v37 + 128) = v44;
          v37 += 4;
          --v23;
        }
        while (v23);
LABEL_46:
        v134 = v38;
        operator delete(v38);
        goto LABEL_47;
      }
      v113 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v8) + 384));
      if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "CvmSpatialSubmixHelpers.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 348;
        v114 = "%25s:%-5d Failed to create a cardioid directivity model.";
        v115 = v113;
        v116 = 18;
        goto LABEL_168;
      }
LABEL_169:
      v7 = 0;
LABEL_170:
      v110 = v132;
      if (v132)
      {
        p_shared_owners = (unint64_t *)&v132->__shared_owners_;
        do
          v112 = __ldaxr(p_shared_owners);
        while (__stlxr(v112 - 1, p_shared_owners));
        goto LABEL_173;
      }
      goto LABEL_175;
    case 2u:
      v47 = (Phase::Logger *)Phase::Geometry::DirectivityFactory::Create(a2 + 208, 2u, &v126);
      if (!v126)
      {
        v105 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v47) + 384));
        if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "CvmSpatialSubmixHelpers.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 396;
          v106 = "%25s:%-5d Failed to create a cardioid directivity model.";
          v107 = v105;
          v108 = 18;
          goto LABEL_158;
        }
LABEL_159:
        v7 = 0;
        goto LABEL_160;
      }
      v125 = a2;
      v48 = **(_QWORD **)(v126 + 40);
      v49 = *((unsigned int *)a1 + 2);
      *(_OWORD *)(v48 + 124) = 0u;
      *(_OWORD *)(v48 + 96) = 0u;
      *(_OWORD *)(v48 + 112) = 0u;
      *(_OWORD *)(v48 + 64) = 0u;
      *(_OWORD *)(v48 + 80) = 0u;
      *(_OWORD *)(v48 + 32) = 0u;
      *(_OWORD *)(v48 + 48) = 0u;
      *(_OWORD *)(v48 + 16) = 0u;
      *(_DWORD *)(v48 + 140) = v49;
      *(_OWORD *)(v48 + 144) = 0u;
      *(_OWORD *)(v48 + 160) = 0u;
      *(_OWORD *)(v48 + 176) = 0u;
      *(_OWORD *)(v48 + 192) = 0u;
      *(_OWORD *)(v48 + 208) = 0u;
      *(_OWORD *)(v48 + 224) = 0u;
      *(_OWORD *)(v48 + 240) = 0u;
      *(_OWORD *)(v48 + 252) = 0u;
      *(_DWORD *)(v48 + 268) = v49;
      v50 = (float *)(v48 + 272);
      *(_OWORD *)(v48 + 380) = 0u;
      *(_OWORD *)(v48 + 352) = 0u;
      *(_OWORD *)(v48 + 368) = 0u;
      *(_OWORD *)(v48 + 320) = 0u;
      *(_OWORD *)(v48 + 336) = 0u;
      *(_OWORD *)(v48 + 288) = 0u;
      *(_OWORD *)(v48 + 304) = 0u;
      *(_OWORD *)(v48 + 272) = 0u;
      *(_DWORD *)(v48 + 396) = v49;
      *(_OWORD *)(v48 + 508) = 0u;
      *(_OWORD *)(v48 + 480) = 0u;
      *(_OWORD *)(v48 + 496) = 0u;
      *(_OWORD *)(v48 + 448) = 0u;
      *(_OWORD *)(v48 + 464) = 0u;
      *(_OWORD *)(v48 + 416) = 0u;
      *(_OWORD *)(v48 + 432) = 0u;
      *(_OWORD *)(v48 + 400) = 0u;
      *(_DWORD *)(v48 + 524) = v49;
      if (!(_DWORD)v49)
        goto LABEL_85;
      v51 = (double *)(a1 + 40);
      while (1)
      {
        v52 = *(v51 - 3);
        v53 = v52;
        if (v53 > 3.4028e38)
          v53 = 3.4028e38;
        if (v52 >= -3.40282347e38)
          v54 = v53;
        else
          v54 = -3.4028e38;
        *(v50 - 64) = v54;
        v55 = *(v51 - 2) * 0.0174532925;
        if (v55 >= -3.40282347e38)
        {
          v57 = v55;
          if (v57 <= 3.4028e38)
            goto LABEL_74;
          v56 = 2139095039;
        }
        else
        {
          v56 = -8388609;
        }
        v57 = *(float *)&v56;
LABEL_74:
        *(v50 - 32) = v57;
        v58 = *(v51 - 1) * 0.0174532925;
        if (v58 >= -3.40282347e38)
        {
          v60 = v58;
          if (v60 <= 3.4028e38)
            goto LABEL_79;
          v59 = 2139095039;
        }
        else
        {
          v59 = -8388609;
        }
        v60 = *(float *)&v59;
LABEL_79:
        *v50 = v60;
        if (*v51 < -3.40282347e38)
        {
          v61 = -8388609;
LABEL_83:
          v62 = *(float *)&v61;
          goto LABEL_84;
        }
        v62 = *v51;
        if (v62 > 3.4028e38)
        {
          v61 = 2139095039;
          goto LABEL_83;
        }
LABEL_84:
        v50[32] = v62;
        ++v50;
        v51 += 4;
        if (!--v49)
        {
LABEL_85:
          v63 = 1;
          while (1)
          {
            v64 = *(_QWORD *)(*(_QWORD *)(v126 + 40) + 40 * v63);
            v65 = qword_2166F78E8[v63 - 1];
            sGetFrequencies((uint64_t)&v141, v65);
            v66 = *((unsigned int *)a1 + 2);
            std::vector<float>::vector(buf, v66);
            std::vector<float>::vector(&v139, v66);
            std::vector<float>::vector(&v137, v66);
            std::vector<float>::vector(&v135, v66);
            if ((_DWORD)v66)
            {
              v67 = *(float **)buf;
              v68 = (float *)v139;
              v69 = (float *)v137;
              v70 = (double *)(a1 + 24);
              v71 = (float *)v135;
              do
              {
                v72 = *(v70 - 1);
                v73 = v72;
                if (v73 > 3.4028e38)
                  v73 = 3.4028e38;
                if (v72 >= -3.40282347e38)
                  v74 = v73;
                else
                  v74 = -3.4028e38;
                *v67 = v74;
                v75 = *v70 * 0.0174532925;
                if (v75 >= -3.40282347e38)
                {
                  v77 = v75;
                  if (v77 <= 3.4028e38)
                    goto LABEL_98;
                  v76 = 2139095039;
                }
                else
                {
                  v76 = -8388609;
                }
                v77 = *(float *)&v76;
LABEL_98:
                *v68 = v77;
                v78 = v70[1] * 0.0174532925;
                if (v78 >= -3.40282347e38)
                {
                  v80 = v78;
                  if (v80 <= 3.4028e38)
                    goto LABEL_103;
                  v79 = 2139095039;
                }
                else
                {
                  v79 = -8388609;
                }
                v80 = *(float *)&v79;
LABEL_103:
                *v69 = v80;
                v81 = v70[2];
                if (v81 < -3.40282347e38)
                {
                  v82 = -8388609;
LABEL_107:
                  v83 = *(float *)&v82;
                  goto LABEL_108;
                }
                v83 = v81;
                if (v83 > 3.4028e38)
                {
                  v82 = 2139095039;
                  goto LABEL_107;
                }
LABEL_108:
                *v71++ = v83;
                ++v67;
                ++v69;
                v70 += 4;
                ++v68;
                --v66;
              }
              while (v66);
            }
            std::vector<float>::vector(&__p, v65);
            std::vector<float>::vector(&v131, v65);
            std::vector<float>::vector(v130, v65);
            Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Identity<float>,&float Phase::Identity<float>>(*(float **)buf, *(float **)&buf[8], (uint64_t)v139, (uint64_t)v140, v141, (float *)v142, (uint64_t)__p);
            Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Identity<float>,&float Phase::Identity<float>>(*(float **)buf, *(float **)&buf[8], (uint64_t)v137, (uint64_t)v138, v141, (float *)v142, (uint64_t)v131);
            Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Square<float>,&float Phase::SquareRoot<float>>(*(float **)buf, *(float **)&buf[8], (uint64_t)v135, (uint64_t)v136, v141, (float *)v142, (uint64_t)v130[0]);
            *(_OWORD *)(v64 + 124) = 0u;
            *(_OWORD *)(v64 + 96) = 0u;
            *(_OWORD *)(v64 + 112) = 0u;
            *(_OWORD *)(v64 + 64) = 0u;
            *(_OWORD *)(v64 + 80) = 0u;
            *(_OWORD *)(v64 + 32) = 0u;
            *(_OWORD *)(v64 + 48) = 0u;
            *(_OWORD *)(v64 + 16) = 0u;
            *(_DWORD *)(v64 + 140) = v65;
            *(_OWORD *)(v64 + 144) = 0u;
            *(_OWORD *)(v64 + 160) = 0u;
            *(_OWORD *)(v64 + 176) = 0u;
            *(_OWORD *)(v64 + 192) = 0u;
            *(_OWORD *)(v64 + 208) = 0u;
            *(_OWORD *)(v64 + 224) = 0u;
            *(_OWORD *)(v64 + 240) = 0u;
            *(_OWORD *)(v64 + 252) = 0u;
            *(_DWORD *)(v64 + 268) = v65;
            v84 = (_DWORD *)(v64 + 272);
            *(_OWORD *)(v64 + 380) = 0u;
            *(_OWORD *)(v64 + 352) = 0u;
            *(_OWORD *)(v64 + 368) = 0u;
            *(_OWORD *)(v64 + 320) = 0u;
            *(_OWORD *)(v64 + 336) = 0u;
            *(_OWORD *)(v64 + 288) = 0u;
            *(_OWORD *)(v64 + 304) = 0u;
            *(_OWORD *)(v64 + 272) = 0u;
            *(_DWORD *)(v64 + 396) = v65;
            *(_OWORD *)(v64 + 508) = 0u;
            *(_OWORD *)(v64 + 480) = 0u;
            *(_OWORD *)(v64 + 496) = 0u;
            *(_OWORD *)(v64 + 448) = 0u;
            *(_OWORD *)(v64 + 464) = 0u;
            *(_OWORD *)(v64 + 416) = 0u;
            *(_OWORD *)(v64 + 432) = 0u;
            *(_OWORD *)(v64 + 400) = 0u;
            *(_DWORD *)(v64 + 524) = v65;
            v85 = v130[0];
            if (v65)
              break;
            if (v130[0])
              goto LABEL_114;
LABEL_115:
            if (v131)
            {
              v132 = (std::__shared_weak_count *)v131;
              operator delete(v131);
            }
            if (__p)
            {
              v134 = __p;
              operator delete(__p);
            }
            if (v135)
            {
              v136 = v135;
              operator delete(v135);
            }
            if (v137)
            {
              v138 = v137;
              operator delete(v137);
            }
            if (v139)
            {
              v140 = v139;
              operator delete(v139);
            }
            if (*(_QWORD *)buf)
            {
              *(_QWORD *)&buf[8] = *(_QWORD *)buf;
              operator delete(*(void **)buf);
            }
            if (v141)
            {
              v142 = (uint64_t)v141;
              operator delete(v141);
            }
            if (++v63 == 4)
            {
              v94 = (Phase::Logger *)Phase::Geometry::SystemScheduler::AddToDatabase(v125 + 2352, &v126);
              v7 = (uint64_t)v94;
              if (v94)
              {
                v95 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v94) + 384));
                if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "CvmSpatialSubmixHelpers.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 385;
                  v144 = 2048;
                  v145 = v7;
                  _os_log_impl(&dword_2164CC000, v95, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating geometry Directivity: 0x%llx", buf, 0x1Cu);
                }
LABEL_160:
                v110 = v127;
                if (v127)
                {
                  v119 = (unint64_t *)&v127->__shared_owners_;
                  do
                    v112 = __ldaxr(v119);
                  while (__stlxr(v112 - 1, v119));
                  goto LABEL_173;
                }
                goto LABEL_175;
              }
              v117 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
              if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
              {
                v118 = "source";
                *(_QWORD *)&buf[4] = "CvmSpatialSubmixHelpers.mm";
                *(_DWORD *)buf = 136315650;
                if (a3)
                  v118 = "listener";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 391;
                v144 = 2080;
                v145 = (uint64_t)v118;
                v106 = "%25s:%-5d Failed to add %s directivity model to geometry layer database.";
                v107 = v117;
                v108 = 28;
LABEL_158:
                _os_log_impl(&dword_2164CC000, v107, OS_LOG_TYPE_ERROR, v106, buf, v108);
              }
              goto LABEL_159;
            }
          }
          v86 = v141;
          v87 = (int *)__p;
          v88 = (int *)v130[0];
          v89 = (int *)v131;
          do
          {
            v90 = *(_DWORD *)v86++;
            *(v84 - 64) = v90;
            v91 = *v87++;
            *(v84 - 32) = v91;
            v92 = *v89++;
            *v84 = v92;
            v93 = *v88++;
            v84[32] = v93;
            ++v84;
            --v65;
          }
          while (v65);
LABEL_114:
          v130[1] = v85;
          operator delete(v85);
          goto LABEL_115;
        }
      }
    case 3u:
      v96 = (Phase::Logger *)Phase::Geometry::DirectivityFactory::Create(a2 + 208, 3u, &v141);
      if (!v141)
      {
        v109 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v96) + 384));
        if (!os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
          goto LABEL_147;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "CvmSpatialSubmixHelpers.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 439;
        v100 = "%25s:%-5d Failed to create a spherical cap directivity model.";
        v101 = v109;
        v102 = 18;
        goto LABEL_146;
      }
      v97 = (Phase::Geometry::SphericalCapDirectivity *)**((_QWORD **)v141 + 5);
      *((_OWORD *)v97 + 1) = *(_OWORD *)(a1 + 8);
      Phase::Geometry::SphericalCapDirectivity::InitializeSubbandGainsDatabase(v97);
      v7 = Phase::Geometry::SystemScheduler::AddToDatabase(a2 + 2352, (uint64_t *)&v141);
      if (v7)
        goto LABEL_148;
      v98 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(0) + 384));
      if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
      {
        v99 = "source";
        *(_QWORD *)&buf[4] = "CvmSpatialSubmixHelpers.mm";
        *(_DWORD *)buf = 136315650;
        if (a3)
          v99 = "listener";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 434;
        v144 = 2080;
        v145 = (uint64_t)v99;
        v100 = "%25s:%-5d Failed to add %s directivity model to geometry layer database.";
        v101 = v98;
        v102 = 28;
LABEL_146:
        _os_log_impl(&dword_2164CC000, v101, OS_LOG_TYPE_ERROR, v100, buf, v102);
      }
LABEL_147:
      v7 = 0;
LABEL_148:
      v110 = (std::__shared_weak_count *)v142;
      if (v142)
      {
        v111 = (unint64_t *)(v142 + 8);
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
LABEL_173:
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
LABEL_175:
      std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)v128);
      return v7;
    default:
      v103 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v6) + 384));
      if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
        v104 = *a1;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "CvmSpatialSubmixHelpers.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 448;
        v144 = 1024;
        LODWORD(v145) = v104;
        _os_log_impl(&dword_2164CC000, v103, OS_LOG_TYPE_ERROR, "%25s:%-5d unhandled distance model type: %hhu", buf, 0x18u);
      }
      v7 = 0;
      goto LABEL_175;
  }
}

void sub_2165375F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<Phase::Geometry::SystemState>::~shared_ptr[abi:ne180100](v5 - 200);
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216537684(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x2165370C8);
  }
  JUMPOUT(0x21653767CLL);
}

void Phase::Geometry::SphericalCapDirectivity::InitializeSubbandGainsDatabase(Phase::Geometry::SphericalCapDirectivity *this)
{
  double v2;
  Phase::Logger *v3;
  uint64_t *v4;
  uint64_t *v5;
  char v6;
  int v7;
  void *__p[2];
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *((double *)this + 3);
  v11 = xmmword_2166F79B0;
  v12 = 12;
  v10 = 0x3F99999A43AB8000;
  Phase::Zeppelin::HorizontalSliceDatabaseContext::HorizontalSliceDatabaseContext((Phase::Zeppelin::HorizontalSliceDatabaseContext *)&v7);
  Phase::Zeppelin::ScsRadiationContext::ScsRadiationContext((uint64_t)v13, 0xCu, 1, *((double *)this + 2), v2 * 0.0174532925 * 0.5);
  v11 = *(_OWORD *)v13;
  v12 = *(_QWORD *)&v13[16];
  Phase::Zeppelin::PropagationMediumContext::PropagationMediumContext((float *)v13, 343.0, 1.2);
  v10 = *(_QWORD *)v13;
  Phase::Zeppelin::HorizontalSliceDatabaseContext::HorizontalSliceDatabaseContext((Phase::Zeppelin::HorizontalSliceDatabaseContext *)v13, 61, Phase::sThirdOctaveBandFrequencies, 0x1FuLL);
  v7 = *(_DWORD *)v13;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = *(_OWORD *)&v13[8];
  v9 = v14;
  v3 = (Phase::Logger *)operator new();
  Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(v3, (uint64_t)&v7, (uint64_t)&v11, (float *)&v10, (uint64_t)&v6);
  *(_QWORD *)v13 = 0;
  std::unique_ptr<Phase::Zeppelin::HorizontalSliceDatabase>::reset[abi:ne180100]((uint64_t **)this + 4, (uint64_t *)v3);
  std::unique_ptr<Phase::Zeppelin::HorizontalSliceDatabase>::reset[abi:ne180100]((uint64_t **)v13, 0);
  Phase::Zeppelin::HorizontalSliceDatabase::GenerateDatabaseForNewFrequencyResolution(*((Phase::Zeppelin::HorizontalSliceDatabase **)this + 4), Phase::sOctaveBandFrequencies, 0xAuLL, (Phase::Zeppelin::AcousticsUtils **)v13);
  v4 = *(uint64_t **)v13;
  *(_QWORD *)v13 = 0;
  std::unique_ptr<Phase::Zeppelin::HorizontalSliceDatabase>::reset[abi:ne180100]((uint64_t **)this + 5, v4);
  std::unique_ptr<Phase::Zeppelin::HorizontalSliceDatabase>::reset[abi:ne180100]((uint64_t **)v13, 0);
  Phase::Zeppelin::HorizontalSliceDatabase::GenerateDatabaseForNewFrequencyResolution(*((Phase::Zeppelin::HorizontalSliceDatabase **)this + 4), Phase::sThreeBandFrequencies, 3uLL, (Phase::Zeppelin::AcousticsUtils **)v13);
  v5 = *(uint64_t **)v13;
  *(_QWORD *)v13 = 0;
  std::unique_ptr<Phase::Zeppelin::HorizontalSliceDatabase>::reset[abi:ne180100]((uint64_t **)this + 6, v5);
  std::unique_ptr<Phase::Zeppelin::HorizontalSliceDatabase>::reset[abi:ne180100]((uint64_t **)v13, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;

  v1 = (char *)*a1;
  if (!*a1)
    return;
  v3 = (char *)a1[1];
  v4 = *a1;
  if (v3 == v1)
    goto LABEL_10;
  do
  {
    v5 = (char *)*((_QWORD *)v3 - 1);
    if (v3 - 32 == v5)
    {
      v5 = v3 - 32;
      v6 = 4;
    }
    else
    {
      if (!v5)
        goto LABEL_8;
      v6 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_8:
    v3 -= 48;
  }
  while (v3 != v1);
  v4 = *a1;
LABEL_10:
  a1[1] = v1;
  operator delete(v4);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

double sGetFrequencies(uint64_t a1, unint64_t a2)
{
  float *v4;
  float *v5;
  double result;
  float *v7;
  double v8;
  float *v9;
  __int128 v10;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  switch(a2)
  {
    case 0x1FuLL:
      v4 = Phase::sThirdOctaveBandFrequencies;
      v5 = (float *)&xmmword_2166F79B0;
      goto LABEL_7;
    case 0xAuLL:
      v4 = Phase::sOctaveBandFrequencies;
      v5 = Phase::sThirdOctaveBandFrequencies;
      goto LABEL_7;
    case 3uLL:
      v4 = Phase::sThreeBandFrequencies;
      v5 = Phase::sOctaveBandFrequencies;
LABEL_7:
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)a1, (char *)v4, (uint64_t)v5, a2);
      v7 = *(float **)a1;
      v8 = *(double *)(a1 + 8);
      goto LABEL_9;
  }
  Phase::GenerateLogarithmicSeries<float>(a2, &v9, 20.0, 20000.0);
  v7 = v9;
  *(_QWORD *)a1 = v9;
  result = *(double *)&v10;
  *(_OWORD *)(a1 + 8) = v10;
  v8 = result;
LABEL_9:
  if (v7 == *(float **)&v8)
    std::terminate();
  return result;
}

{
  char *v4;
  void *v5;
  double result;
  float *v7;
  double v8;
  float *v9;
  __int128 v10;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  switch(a2)
  {
    case 0x1FuLL:
      v4 = (char *)&Phase::sThirdOctaveBandFrequencies;
      v5 = &std::__any_imp::__unique_typeinfo<Phase::Controller::ListenerManager *>::__id;
      goto LABEL_7;
    case 0xAuLL:
      v4 = (char *)&Phase::sOctaveBandFrequencies;
      v5 = &Phase::sThirdOctaveBandFrequencies;
      goto LABEL_7;
    case 3uLL:
      v4 = (char *)&Phase::sThreeBandFrequencies;
      v5 = &Phase::sOctaveBandFrequencies;
LABEL_7:
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)a1, v4, (uint64_t)v5, a2);
      v7 = *(float **)a1;
      v8 = *(double *)(a1 + 8);
      goto LABEL_9;
  }
  Phase::GenerateLogarithmicSeries<float>(a2, &v9, 20.0, 20000.0);
  v7 = v9;
  *(_QWORD *)a1 = v9;
  result = *(double *)&v10;
  *(_OWORD *)(a1 + 8) = v10;
  v8 = result;
LABEL_9:
  if (v7 == *(float **)&v8)
    std::terminate();
  return result;
}

{
  char *v4;
  char *v5;
  double result;
  float *v7;
  double v8;
  float *v9;
  __int128 v10;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  switch(a2)
  {
    case 0x1FuLL:
      v4 = (char *)&Phase::sThirdOctaveBandFrequencies;
      v5 = &jpt_2166533F8;
      goto LABEL_7;
    case 0xAuLL:
      v4 = (char *)&Phase::sOctaveBandFrequencies;
      v5 = (char *)&Phase::sThirdOctaveBandFrequencies;
      goto LABEL_7;
    case 3uLL:
      v4 = (char *)&Phase::sThreeBandFrequencies;
      v5 = (char *)&Phase::sOctaveBandFrequencies;
LABEL_7:
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)a1, v4, (uint64_t)v5, a2);
      v7 = *(float **)a1;
      v8 = *(double *)(a1 + 8);
      goto LABEL_9;
  }
  Phase::GenerateLogarithmicSeries<float>(a2, &v9, 20.0, 20000.0);
  v7 = v9;
  *(_QWORD *)a1 = v9;
  result = *(double *)&v10;
  *(_OWORD *)(a1 + 8) = v10;
  v8 = result;
LABEL_9:
  if (v7 == *(float **)&v8)
    std::terminate();
  return result;
}

void sub_216537F00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Identity<float>,&float Phase::Identity<float>>(float *a1, float *a2, uint64_t a3, uint64_t a4, float *a5, float *a6, uint64_t a7)
{
  uint64_t v10;
  float *i;
  float v12;
  float v13;
  float *j;
  float v15;
  float v16;
  float *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  float *v34;
  float *v35;
  float *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  float *v42;
  int v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  float *v53;
  float v54;
  float *v55;
  float v56;
  float *v57;
  unint64_t v58;
  float v59;
  float v60;
  float *v61;
  float v62;
  float v63;
  float *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  float *v70;
  int v71;
  double v72;
  float *v73;
  float v74;
  float v75;
  uint64_t v76;
  float *v78;
  float *v79;
  float *v80;
  void *v81;
  char *v82;
  char *v83;
  void *__p;
  float *v85;
  float *v86;
  void *v87[3];
  void *v88[4];

  v10 = (char *)a2 - (char *)a1;
  if (a2 != a1)
  {
    for (i = a1 + 1; i != a2; ++i)
    {
      v13 = *(i - 1);
      v12 = *i;
      if (v12 < v13)
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 262, "std::is_sorted(inFrequenciesFirst, inFrequenciesLast)");
    }
  }
  if (a5 != a6)
  {
    for (j = a5 + 1; j != a6; ++j)
    {
      v16 = *(j - 1);
      v15 = *j;
      if (v15 < v16)
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 263, "std::is_sorted(inOutputFrequenciesFirst, inOutputFrequenciesLast)");
    }
  }
  Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<float *>,float>(a1, a2, (float **)v88, 22000.0);
  Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<float const*>,float>(a5, a6, (float **)v87, 22000.0);
  __p = 0;
  v85 = 0;
  v86 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v78 = 0;
  v80 = 0;
  if ((char *)a6 - (char *)a5 > 0)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = a6 - a5;
    v22 = v10 >> 2;
    v23 = (v10 >> 2) - 1;
    if (v21 <= 1)
      v21 = 1;
    v76 = v21;
    do
    {
      v24 = (float *)((char *)v87[0] + 8 * v20);
      v25 = *v24;
      v26 = v24[1];
      v85 = (float *)__p;
      v82 = v18;
      v79 = v17;
      if (v19 < v22)
      {
        v27 = (float *)((char *)v88[0] + 8 * v19);
        v28 = *v27;
        v29 = v27[1];
        if (v26 < v29)
          v29 = v26;
        if (v28 >= v25)
          v30 = *v27;
        else
          v30 = v25;
        v31 = fmaxf(v29 - v30, 0.0);
        v32 = v26;
        v33 = v19;
        if (v31 == 0.0)
        {
LABEL_62:
          v19 -= v28 != v32;
        }
        else
        {
          while (1)
          {
            v34 = v85;
            if (v85 >= v86)
            {
              v36 = (float *)__p;
              v37 = ((char *)v85 - (_BYTE *)__p) >> 2;
              v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v39 = (char *)v86 - (_BYTE *)__p;
              if (((char *)v86 - (_BYTE *)__p) >> 1 > v38)
                v38 = v39 >> 1;
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
                v40 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v40 = v38;
              if (v40)
              {
                v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v86, v40);
                v36 = (float *)__p;
                v34 = v85;
              }
              else
              {
                v41 = 0;
              }
              v42 = (float *)&v41[4 * v37];
              *v42 = v31;
              v35 = v42 + 1;
              while (v34 != v36)
              {
                v43 = *((_DWORD *)v34-- - 1);
                *((_DWORD *)v42-- - 1) = v43;
              }
              __p = v42;
              v85 = v35;
              v86 = (float *)&v41[4 * v40];
              if (v36)
                operator delete(v36);
            }
            else
            {
              *v85 = v31;
              v35 = v34 + 1;
            }
            v85 = v35;
            v44 = v82;
            if (v82 >= v83)
            {
              v45 = (char *)v81;
              v46 = (v82 - (_BYTE *)v81) >> 3;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61)
                std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
              v48 = v83 - (_BYTE *)v81;
              if ((v83 - (_BYTE *)v81) >> 2 > v47)
                v47 = v48 >> 2;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                v49 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v83, v49);
                v45 = (char *)v81;
                v44 = v82;
              }
              else
              {
                v50 = 0;
              }
              v51 = (uint64_t *)&v50[8 * v46];
              *v51 = v19;
              v18 = (char *)(v51 + 1);
              while (v44 != v45)
              {
                v52 = *((_QWORD *)v44 - 1);
                v44 -= 8;
                *--v51 = v52;
              }
              v81 = v51;
              v82 = v18;
              v83 = &v50[8 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_QWORD *)v82 = v19;
              v18 = v44 + 8;
            }
            v82 = v18;
            if (v19 == v23)
              v33 = v19;
            if (++v19 == v22)
              break;
            v53 = (float *)((char *)v88[0] + 8 * v19);
            v28 = *v53;
            v54 = v53[1];
            v55 = (float *)((char *)v87[0] + 8 * v20);
            v56 = *v55;
            v32 = v55[1];
            if (v32 < v54)
              v54 = v55[1];
            if (v28 >= v56)
              v56 = v28;
            v31 = fmaxf(v54 - v56, 0.0);
            if (v31 == 0.0)
              goto LABEL_62;
          }
          v19 = v33;
        }
      }
      v57 = v79;
      if (v18 == v81)
      {
        v60 = 0.0;
      }
      else
      {
        v58 = 0;
        v59 = v26 - v25;
        v60 = 0.0;
        v61 = v79;
        v18 = (char *)v81;
        do
        {
          v62 = *((float *)__p + v58) / v59;
          v63 = v62 * *(float *)(a3 + 4 * *(_QWORD *)&v18[8 * v58]);
          if (v61 >= v80)
          {
            v64 = v78;
            v65 = v61 - v78;
            v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v67 = (char *)v80 - (char *)v78;
            if (((char *)v80 - (char *)v78) >> 1 > v66)
              v66 = v67 >> 1;
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
              v68 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v68 = v66;
            if (v68)
            {
              v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v80, v68);
              v64 = v78;
              v61 = v79;
            }
            else
            {
              v69 = 0;
            }
            v70 = (float *)&v69[4 * v65];
            *v70 = v63;
            v57 = v70 + 1;
            while (v61 != v64)
            {
              v71 = *((_DWORD *)v61-- - 1);
              *((_DWORD *)v70-- - 1) = v71;
            }
            v78 = v70;
            v80 = (float *)&v69[4 * v68];
            if (v64)
              operator delete(v64);
          }
          else
          {
            *v61 = v63;
            v57 = v61 + 1;
          }
          v79 = v57;
          v60 = v60 + v62;
          ++v58;
          v18 = (char *)v81;
          v61 = v57;
        }
        while (v58 < (v82 - (_BYTE *)v81) >> 3);
      }
      v17 = v78;
      v72 = 0.0;
      if (v78 != v57)
      {
        v73 = v78;
        do
        {
          v74 = *v73++;
          v72 = v72 + v74;
        }
        while (v73 != v57);
      }
      v75 = v72;
      v23 = (v10 >> 2) - 1;
      *(float *)(a7 + 4 * v20++) = v75 / v60;
    }
    while (v20 != v76);
    if (v78)
    {
      operator delete(v78);
      v18 = (char *)v81;
    }
    if (v18)
    {
      v82 = v18;
      operator delete(v18);
    }
  }
  if (__p)
  {
    v85 = (float *)__p;
    operator delete(__p);
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
}

void sub_21653845C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *Phase::GenerateLogarithmicSeries<float>@<X0>(unint64_t a1@<X0>, float **a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  unint64_t v4;
  float v5;
  float v7;
  float v8;
  float v9;
  _QWORD *result;
  float *v11;

  v4 = a1;
  v5 = a3;
  v7 = 1.0 / (float)((float)a1 + -1.0);
  v8 = log10f(a4 / a3);
  v9 = expf((float)(v8 * v7) * 2.3026);
  result = std::vector<float>::vector(a2, v4);
  if (v4)
  {
    v11 = *a2;
    do
    {
      *v11++ = v5;
      v5 = v9 * v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

Phase::Logger *Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<float *>,float>@<X0>(float *a1@<X0>, float *a2@<X1>, float **a3@<X8>, float a4@<S0>)
{
  uint64_t v8;
  int64_t v9;
  Phase::Logger *result;
  float *v11;
  float *v12;
  float *v13;
  float v14;
  _BOOL4 v15;
  BOOL v16;
  _BOOL4 v17;
  float *v18;
  float *v19;
  float v20;
  BOOL v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  float *v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  NSObject *v31;
  double v32;
  std::logic_error *exception;
  NSObject *v34;
  double v35;
  NSObject *v36;
  double v37;
  NSObject *v38;
  double v39;
  double v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)a2 - (char *)a1;
  v9 = a2 - a1;
  *(_QWORD *)v41 = 0;
  result = (Phase::Logger *)std::vector<Phase::FrequencyBand<float>>::vector(a3, v9, v41);
  v11 = *a3;
  **a3 = 10.0;
  if (v9 == 31)
  {
    if (a1 == a2)
    {
      v15 = 0;
      v17 = 1;
      goto LABEL_21;
    }
    v18 = a1 + 1;
    v19 = (float *)&Phase::sThirdOctaveBandFrequencies;
    do
    {
      v20 = *v19++;
      v17 = *(v18 - 1) == v20;
      v21 = *(v18 - 1) != v20 || v18 == a2;
      ++v18;
    }
    while (!v21);
LABEL_20:
    v15 = 0;
    goto LABEL_21;
  }
  if (v9 != 10)
  {
    v17 = 0;
    goto LABEL_20;
  }
  if (a1 == a2)
  {
    v17 = 0;
    v15 = 1;
  }
  else
  {
    v12 = a1 + 1;
    v13 = (float *)&Phase::sOctaveBandFrequencies;
    do
    {
      v14 = *v13++;
      v15 = *(v12 - 1) == v14;
      v16 = *(v12 - 1) != v14 || v12 == a2;
      ++v12;
    }
    while (!v16);
    v17 = 0;
  }
LABEL_21:
  if (v8 >= 1)
  {
    v22 = 0;
    v23 = v9 - 1;
    if (v9 <= 1)
      v24 = 1;
    else
      v24 = v9;
    v25 = v11 + 2;
    v26 = a1;
    do
    {
      v27 = *v26;
      if (v15)
      {
        v28 = v27 + (float)((float)(v27 / 1.4142) * 0.5);
        if (v28 >= a4)
          v28 = a4;
        v29 = 20.363;
      }
      else if (v17)
      {
        v28 = v27 + (float)((float)(v27 / 4.2426) * 0.5);
        if (v28 >= a4)
          v28 = a4;
        v29 = 17.643;
      }
      else
      {
        if ((LODWORD(v27) & 0x7FFFFFFFu) >= 0x7F800000)
        {
          v31 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 1136));
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            v32 = *v26;
            *(_DWORD *)v41 = 136315650;
            *(_QWORD *)&v41[4] = "FrequencyResponse.hpp";
            v42 = 1024;
            v43 = 99;
            v44 = 2048;
            v45 = v32;
            _os_log_impl(&dword_2164CC000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!std::isfinite(inFrequenciesFirst[i]) is true]: \"GetBandsFromCenterFrequencies: bad center frequency: %fHz\"", v41, 0x1Cu);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: bad center frequency: %fHz");
LABEL_60:
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        }
        if (v27 < 10.0)
        {
          v36 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 1136));
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            v37 = *v26;
            *(_DWORD *)v41 = 136315906;
            *(_QWORD *)&v41[4] = "FrequencyResponse.hpp";
            v42 = 1024;
            v43 = 103;
            v44 = 2048;
            v45 = v37;
            v46 = 2048;
            v47 = 10.0;
            _os_log_impl(&dword_2164CC000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inFrequenciesFirst[i] < lowestSupportedFreqInHz is true]: \"GetBandsFromCenterFrequencies: center frequency: %fHz cannot be below lowest supported frequency: %fHz\"", v41, 0x26u);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequency: %fHz cannot be below lowest supported frequency: %fHz");
          goto LABEL_60;
        }
        if (v27 > a4)
        {
          v34 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 1136));
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            v35 = *v26;
            *(_DWORD *)v41 = 136315906;
            *(_QWORD *)&v41[4] = "FrequencyResponse.hpp";
            v42 = 1024;
            v43 = 107;
            v44 = 2048;
            v45 = v35;
            v46 = 2048;
            v47 = a4;
            _os_log_impl(&dword_2164CC000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inFrequenciesFirst[i] > highestSupportedFreqInHz is true]: \"GetBandsFromCenterFrequencies: center frequency: %fHz cannot be above highest supported frequency: %fHz\"", v41, 0x26u);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequency: %fHz cannot be above highest supported frequency: %fHz");
          goto LABEL_60;
        }
        if (v22)
        {
          v30 = (v22 - 1);
          if (a1[v30] >= v27)
          {
            v38 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 1136));
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              v39 = a1[v30];
              v40 = *v26;
              *(_DWORD *)v41 = 136315906;
              *(_QWORD *)&v41[4] = "FrequencyResponse.hpp";
              v42 = 1024;
              v43 = 111;
              v44 = 2048;
              v45 = v39;
              v46 = 2048;
              v47 = v40;
              _os_log_impl(&dword_2164CC000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [i > 0 && inFrequenciesFirst[i - 1] >= inFrequenciesFirst[i] is true]: \"GetBandsFromCenterFrequencies: center frequencies are not in ascending order. %fHz is before %fHz\"", v41, 0x26u);
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequencies are not in ascending order. %fHz is before %fHz");
            goto LABEL_60;
          }
        }
        v29 = 10.0;
        if (v23 <= v22)
          v28 = a4;
        else
          v28 = v27 * sqrtf(v26[1] / v27);
      }
      *(v25 - 1) = v28;
      *v11 = v29;
      if (v23 > v22)
        *v25 = v28;
      ++v22;
      ++v26;
      v25 += 2;
    }
    while (v24 != v22);
  }
  return result;
}

void sub_216538B5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;

  __cxa_free_exception(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<float const*>,float>@<X0>(float *a1@<X0>, float *a2@<X1>, float **a3@<X8>, float a4@<S0>)
{
  uint64_t v8;
  int64_t v9;
  Phase::Logger *result;
  float *v11;
  float *v12;
  float *v13;
  float v14;
  _BOOL4 v15;
  BOOL v16;
  _BOOL4 v17;
  float *v18;
  float *v19;
  float v20;
  BOOL v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  float *v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  NSObject *v31;
  double v32;
  std::logic_error *exception;
  NSObject *v34;
  double v35;
  NSObject *v36;
  double v37;
  NSObject *v38;
  double v39;
  double v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)a2 - (char *)a1;
  v9 = a2 - a1;
  *(_QWORD *)v41 = 0;
  result = (Phase::Logger *)std::vector<Phase::FrequencyBand<float>>::vector(a3, v9, v41);
  v11 = *a3;
  **a3 = 10.0;
  if (v9 == 31)
  {
    if (a1 == a2)
    {
      v15 = 0;
      v17 = 1;
      goto LABEL_21;
    }
    v18 = a1 + 1;
    v19 = (float *)&Phase::sThirdOctaveBandFrequencies;
    do
    {
      v20 = *v19++;
      v17 = *(v18 - 1) == v20;
      v21 = *(v18 - 1) != v20 || v18 == a2;
      ++v18;
    }
    while (!v21);
LABEL_20:
    v15 = 0;
    goto LABEL_21;
  }
  if (v9 != 10)
  {
    v17 = 0;
    goto LABEL_20;
  }
  if (a1 == a2)
  {
    v17 = 0;
    v15 = 1;
  }
  else
  {
    v12 = a1 + 1;
    v13 = (float *)&Phase::sOctaveBandFrequencies;
    do
    {
      v14 = *v13++;
      v15 = *(v12 - 1) == v14;
      v16 = *(v12 - 1) != v14 || v12 == a2;
      ++v12;
    }
    while (!v16);
    v17 = 0;
  }
LABEL_21:
  if (v8 >= 1)
  {
    v22 = 0;
    v23 = v9 - 1;
    if (v9 <= 1)
      v24 = 1;
    else
      v24 = v9;
    v25 = v11 + 2;
    v26 = a1;
    do
    {
      v27 = *v26;
      if (v15)
      {
        v28 = v27 + (float)((float)(v27 / 1.4142) * 0.5);
        if (v28 >= a4)
          v28 = a4;
        v29 = 20.363;
      }
      else if (v17)
      {
        v28 = v27 + (float)((float)(v27 / 4.2426) * 0.5);
        if (v28 >= a4)
          v28 = a4;
        v29 = 17.643;
      }
      else
      {
        if ((LODWORD(v27) & 0x7FFFFFFFu) >= 0x7F800000)
        {
          v31 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 1136));
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            v32 = *v26;
            *(_DWORD *)v41 = 136315650;
            *(_QWORD *)&v41[4] = "FrequencyResponse.hpp";
            v42 = 1024;
            v43 = 99;
            v44 = 2048;
            v45 = v32;
            _os_log_impl(&dword_2164CC000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!std::isfinite(inFrequenciesFirst[i]) is true]: \"GetBandsFromCenterFrequencies: bad center frequency: %fHz\"", v41, 0x1Cu);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: bad center frequency: %fHz");
LABEL_60:
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        }
        if (v27 < 10.0)
        {
          v36 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 1136));
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            v37 = *v26;
            *(_DWORD *)v41 = 136315906;
            *(_QWORD *)&v41[4] = "FrequencyResponse.hpp";
            v42 = 1024;
            v43 = 103;
            v44 = 2048;
            v45 = v37;
            v46 = 2048;
            v47 = 10.0;
            _os_log_impl(&dword_2164CC000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inFrequenciesFirst[i] < lowestSupportedFreqInHz is true]: \"GetBandsFromCenterFrequencies: center frequency: %fHz cannot be below lowest supported frequency: %fHz\"", v41, 0x26u);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequency: %fHz cannot be below lowest supported frequency: %fHz");
          goto LABEL_60;
        }
        if (v27 > a4)
        {
          v34 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 1136));
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            v35 = *v26;
            *(_DWORD *)v41 = 136315906;
            *(_QWORD *)&v41[4] = "FrequencyResponse.hpp";
            v42 = 1024;
            v43 = 107;
            v44 = 2048;
            v45 = v35;
            v46 = 2048;
            v47 = a4;
            _os_log_impl(&dword_2164CC000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inFrequenciesFirst[i] > highestSupportedFreqInHz is true]: \"GetBandsFromCenterFrequencies: center frequency: %fHz cannot be above highest supported frequency: %fHz\"", v41, 0x26u);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequency: %fHz cannot be above highest supported frequency: %fHz");
          goto LABEL_60;
        }
        if (v22)
        {
          v30 = (v22 - 1);
          if (a1[v30] >= v27)
          {
            v38 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(result) + 1136));
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              v39 = a1[v30];
              v40 = *v26;
              *(_DWORD *)v41 = 136315906;
              *(_QWORD *)&v41[4] = "FrequencyResponse.hpp";
              v42 = 1024;
              v43 = 111;
              v44 = 2048;
              v45 = v39;
              v46 = 2048;
              v47 = v40;
              _os_log_impl(&dword_2164CC000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [i > 0 && inFrequenciesFirst[i - 1] >= inFrequenciesFirst[i] is true]: \"GetBandsFromCenterFrequencies: center frequencies are not in ascending order. %fHz is before %fHz\"", v41, 0x26u);
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequencies are not in ascending order. %fHz is before %fHz");
            goto LABEL_60;
          }
        }
        v29 = 10.0;
        if (v23 <= v22)
          v28 = a4;
        else
          v28 = v27 * sqrtf(v26[1] / v27);
      }
      *(v25 - 1) = v28;
      *v11 = v29;
      if (v23 > v22)
        *v25 = v28;
      ++v22;
      ++v26;
      v25 += 2;
    }
    while (v24 != v22);
  }
  return result;
}

void sub_2165390B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;

  __cxa_free_exception(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::vector<Phase::FrequencyBand<float>>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Phase::FrequencyBand<float>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_216539164(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Phase::FrequencyBand<float>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Square<float>,&float Phase::SquareRoot<float>>(float *a1, float *a2, uint64_t a3, uint64_t a4, float *a5, float *a6, uint64_t a7)
{
  uint64_t v10;
  float *i;
  float v12;
  float v13;
  float *j;
  float v15;
  float v16;
  float *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  float *v34;
  float *v35;
  float *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  float *v42;
  int v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  float *v53;
  float v54;
  float *v55;
  float v56;
  float *v57;
  unint64_t v58;
  float v59;
  float v60;
  float *v61;
  float v62;
  float v63;
  float v64;
  float *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  float *v71;
  int v72;
  double v73;
  float *v74;
  float v75;
  float v76;
  uint64_t v77;
  float *v79;
  float *v80;
  float *v81;
  void *v82;
  char *v83;
  char *v84;
  void *__p;
  float *v86;
  float *v87;
  void *v88[3];
  void *v89[4];

  v10 = (char *)a2 - (char *)a1;
  if (a2 != a1)
  {
    for (i = a1 + 1; i != a2; ++i)
    {
      v13 = *(i - 1);
      v12 = *i;
      if (v12 < v13)
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 262, "std::is_sorted(inFrequenciesFirst, inFrequenciesLast)");
    }
  }
  if (a5 != a6)
  {
    for (j = a5 + 1; j != a6; ++j)
    {
      v16 = *(j - 1);
      v15 = *j;
      if (v15 < v16)
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 263, "std::is_sorted(inOutputFrequenciesFirst, inOutputFrequenciesLast)");
    }
  }
  Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<float *>,float>(a1, a2, (float **)v89, 22000.0);
  Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<float const*>,float>(a5, a6, (float **)v88, 22000.0);
  __p = 0;
  v86 = 0;
  v87 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v79 = 0;
  v81 = 0;
  if ((char *)a6 - (char *)a5 > 0)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = a6 - a5;
    v22 = v10 >> 2;
    v23 = (v10 >> 2) - 1;
    if (v21 <= 1)
      v21 = 1;
    v77 = v21;
    do
    {
      v24 = (float *)((char *)v88[0] + 8 * v20);
      v25 = *v24;
      v26 = v24[1];
      v86 = (float *)__p;
      v83 = v18;
      v80 = v17;
      if (v19 < v22)
      {
        v27 = (float *)((char *)v89[0] + 8 * v19);
        v28 = *v27;
        v29 = v27[1];
        if (v26 < v29)
          v29 = v26;
        if (v28 >= v25)
          v30 = *v27;
        else
          v30 = v25;
        v31 = fmaxf(v29 - v30, 0.0);
        v32 = v26;
        v33 = v19;
        if (v31 == 0.0)
        {
LABEL_62:
          v19 -= v28 != v32;
        }
        else
        {
          while (1)
          {
            v34 = v86;
            if (v86 >= v87)
            {
              v36 = (float *)__p;
              v37 = ((char *)v86 - (_BYTE *)__p) >> 2;
              v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v39 = (char *)v87 - (_BYTE *)__p;
              if (((char *)v87 - (_BYTE *)__p) >> 1 > v38)
                v38 = v39 >> 1;
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
                v40 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v40 = v38;
              if (v40)
              {
                v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v87, v40);
                v36 = (float *)__p;
                v34 = v86;
              }
              else
              {
                v41 = 0;
              }
              v42 = (float *)&v41[4 * v37];
              *v42 = v31;
              v35 = v42 + 1;
              while (v34 != v36)
              {
                v43 = *((_DWORD *)v34-- - 1);
                *((_DWORD *)v42-- - 1) = v43;
              }
              __p = v42;
              v86 = v35;
              v87 = (float *)&v41[4 * v40];
              if (v36)
                operator delete(v36);
            }
            else
            {
              *v86 = v31;
              v35 = v34 + 1;
            }
            v86 = v35;
            v44 = v83;
            if (v83 >= v84)
            {
              v45 = (char *)v82;
              v46 = (v83 - (_BYTE *)v82) >> 3;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61)
                std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
              v48 = v84 - (_BYTE *)v82;
              if ((v84 - (_BYTE *)v82) >> 2 > v47)
                v47 = v48 >> 2;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                v49 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v84, v49);
                v45 = (char *)v82;
                v44 = v83;
              }
              else
              {
                v50 = 0;
              }
              v51 = (uint64_t *)&v50[8 * v46];
              *v51 = v19;
              v18 = (char *)(v51 + 1);
              while (v44 != v45)
              {
                v52 = *((_QWORD *)v44 - 1);
                v44 -= 8;
                *--v51 = v52;
              }
              v82 = v51;
              v83 = v18;
              v84 = &v50[8 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_QWORD *)v83 = v19;
              v18 = v44 + 8;
            }
            v83 = v18;
            if (v19 == v23)
              v33 = v19;
            if (++v19 == v22)
              break;
            v53 = (float *)((char *)v89[0] + 8 * v19);
            v28 = *v53;
            v54 = v53[1];
            v55 = (float *)((char *)v88[0] + 8 * v20);
            v56 = *v55;
            v32 = v55[1];
            if (v32 < v54)
              v54 = v55[1];
            if (v28 >= v56)
              v56 = v28;
            v31 = fmaxf(v54 - v56, 0.0);
            if (v31 == 0.0)
              goto LABEL_62;
          }
          v19 = v33;
        }
      }
      v57 = v80;
      if (v18 == v82)
      {
        v60 = 0.0;
      }
      else
      {
        v58 = 0;
        v59 = v26 - v25;
        v60 = 0.0;
        v61 = v80;
        v18 = (char *)v82;
        do
        {
          v62 = *((float *)__p + v58) / v59;
          v63 = *(float *)(a3 + 4 * *(_QWORD *)&v18[8 * v58]);
          v64 = v62 * (float)(v63 * v63);
          if (v61 >= v81)
          {
            v65 = v79;
            v66 = v61 - v79;
            v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v68 = (char *)v81 - (char *)v79;
            if (((char *)v81 - (char *)v79) >> 1 > v67)
              v67 = v68 >> 1;
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
              v69 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v69 = v67;
            if (v69)
            {
              v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v81, v69);
              v65 = v79;
              v61 = v80;
            }
            else
            {
              v70 = 0;
            }
            v71 = (float *)&v70[4 * v66];
            *v71 = v64;
            v57 = v71 + 1;
            while (v61 != v65)
            {
              v72 = *((_DWORD *)v61-- - 1);
              *((_DWORD *)v71-- - 1) = v72;
            }
            v79 = v71;
            v81 = (float *)&v70[4 * v69];
            if (v65)
              operator delete(v65);
          }
          else
          {
            *v61 = v64;
            v57 = v61 + 1;
          }
          v80 = v57;
          v60 = v60 + v62;
          ++v58;
          v18 = (char *)v82;
          v61 = v57;
        }
        while (v58 < (v83 - (_BYTE *)v82) >> 3);
      }
      v17 = v79;
      v73 = 0.0;
      if (v79 != v57)
      {
        v74 = v79;
        do
        {
          v75 = *v74++;
          v73 = v73 + v75;
        }
        while (v74 != v57);
      }
      v76 = v73;
      v23 = (v10 >> 2) - 1;
      *(float *)(a7 + 4 * v20++) = sqrtf(v76 / v60);
    }
    while (v20 != v77);
    if (v79)
    {
      operator delete(v79);
      v18 = (char *)v82;
    }
    if (v18)
    {
      v83 = v18;
      operator delete(v18);
    }
  }
  if (__p)
  {
    v86 = (float *)__p;
    operator delete(__p);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
  if (v89[0])
  {
    v89[1] = v89[0];
    operator delete(v89[0]);
  }
}

void sub_216539708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **std::unique_ptr<Phase::Zeppelin::HorizontalSliceDatabase>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>::~NDimEquiangularHalfCircleData(result);
    JUMPOUT(0x2199F9D70);
  }
  return result;
}

uint64_t Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>::~NDimEquiangularHalfCircleData(uint64_t a1)
{
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * i);
      if (v4)
      {
        MEMORY[0x2199F9D4C](v4, 0x1000C8000313F17);
        v2 = *(unsigned int *)(a1 + 24);
      }
    }
  }
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    MEMORY[0x2199F9D4C](v5, 0x80C80B8603338);
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

void std::__function::__func<Phase::Envelope<float>::Segment::{lambda(float)#1},std::allocator<Phase::Envelope<float>::Segment::{lambda(float)#1}>,float ()(float)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<Phase::Envelope<float>::Segment::{lambda(float)#1},std::allocator<Phase::Envelope<float>::Segment::{lambda(float)#1}>,float ()(float)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D579910;
  return result;
}

void std::__function::__func<Phase::Envelope<float>::Segment::{lambda(float)#1},std::allocator<Phase::Envelope<float>::Segment::{lambda(float)#1}>,float ()(float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D579910;
}

float std::__function::__func<Phase::Envelope<float>::Segment::{lambda(float)#1},std::allocator<Phase::Envelope<float>::Segment::{lambda(float)#1}>,float ()(float)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(float *)a2;
}

void std::vector<Phase::Envelope<float>::Segment,std::allocator<Phase::Envelope<float>::Segment>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = (char *)*((_QWORD *)v4 - 1);
    if (v4 - 32 == v6)
    {
      v6 = v4 - 32;
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_8;
      v7 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_8:
    v4 -= 40;
  }
  while (v4 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

float Phase::CurveFunction::Squared<float>(float a1)
{
  return a1 * a1;
}

float Phase::CurveFunction::InverseSquared<float>(float a1)
{
  return 1.0 - (float)((float)(1.0 - a1) * (float)(1.0 - a1));
}

float Phase::CurveFunction::Cubed<float>(float a1)
{
  return (float)(a1 * a1) * a1;
}

float Phase::CurveFunction::InverseCubed<float>(float a1)
{
  return 1.0 - (float)((float)(1.0 - a1) * (float)((float)(1.0 - a1) * (float)(1.0 - a1)));
}

float Phase::CurveFunction::Sine<float>(float a1)
{
  return (float)(sinf((float)((float)((float)(a1 + -1.0) + 1.0) * 3.1416) * 0.5) + -1.0) + 1.0;
}

float Phase::CurveFunction::InverseSine<float>(float a1)
{
  return sinf((float)((float)(1.0 - a1) * -3.1416) * 0.5) + 1.0;
}

void Phase::CurveFunction::Sigmoid<float>(float a1)
{
  if (a1 >= 0.5)
    sinf((float)((float)(1.0 - (float)((float)((float)(a1 + -0.5) * -2.0) + 1.0)) * 3.1416) * 0.5);
  else
    sinf((float)((float)(1.0 - (float)(a1 + a1)) * -3.1416) * 0.5);
}

void Phase::CurveFunction::InverseSigmoid<float>(float a1)
{
  if (a1 >= 0.5)
    sinf((float)((float)(1.0 - (float)((float)(a1 + -0.5) + (float)(a1 + -0.5))) * -3.1416) * 0.5);
  else
    sinf((float)((float)(1.0 - (float)((float)(a1 * -2.0) + 1.0)) * 3.1416) * 0.5);
}

float Phase::CurveFunction::HoldStartValue<float>()
{
  return 0.0;
}

float Phase::CurveFunction::JumpToEndValue<float>()
{
  return 1.0;
}

void std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::~__func()
{
  JUMPOUT(0x2199F9D70);
}

_QWORD *std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24D579958;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24D579958;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return (*(uint64_t (**)(float))(a1 + 8))(*a2);
}

float Phase::Envelope<float>::InitializeFromSingleSegment(Phase::Logger *a1, float *a2, float *a3)
{
  float v4;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  float *v9;
  float result;
  NSObject *v12;
  double v13;
  double v14;
  std::logic_error *exception;
  _BYTE v16[12];
  _BYTE v17[6];
  __int16 v18;
  double v19;
  __int16 v20;
  double v21;
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *a3;
  if (*a2 > *a3)
  {
    v12 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(a1) + 96));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = *a2;
      v14 = *a3;
      *(_DWORD *)v16 = 136315906;
      *(_QWORD *)&v16[4] = "Envelope.hpp";
      *(_WORD *)v17 = 1024;
      *(_DWORD *)&v17[2] = 243;
      v18 = 2048;
      v19 = v13;
      v20 = 2048;
      v21 = v14;
      _os_log_impl(&dword_2164CC000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (EnvelopeException::InvalidStartPoint) [!(inStartPoint.x <= inSegment.mEndPoint.x) is true]: \"Invalid start point x value: %f. Must be <= end point x value: %f\"", v16, 0x26u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase17EnvelopeException17InvalidStartPointCI1St11logic_errorEPKc(exception, "Invalid start point x value: %f. Must be <= end point x value: %f");
  }
  *(_QWORD *)v16 = 0;
  v6 = *((_DWORD *)a3 + 1);
  *(float *)&v16[8] = v4;
  *(_DWORD *)v17 = v6;
  v7 = &v17[4];
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)&v17[4], (uint64_t)(a3 + 2));
  std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::assign((uint64_t)a1, 1uLL, v16);
  if (v22 == &v17[4])
  {
    v8 = 4;
    goto LABEL_6;
  }
  if (v22)
  {
    v8 = 5;
    v7 = v22;
LABEL_6:
    (*(void (**)(_QWORD *))(*v7 + 8 * v8))(v7);
  }
  v9 = *(float **)a1;
  *v9 = *a2;
  result = a2[1];
  v9[1] = result;
  return result;
}

void sub_216539D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::assign(uint64_t result, unint64_t a2, _DWORD *a3)
{
  _QWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = (_QWORD *)result;
  v6 = *(_DWORD **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 4) >= a2)
  {
    v12 = (*(_QWORD *)(result + 8) - (_QWORD)v6) / 48;
    if (v12 >= a2)
      v13 = a2;
    else
      v13 = (*(_QWORD *)(result + 8) - (_QWORD)v6) / 48;
    for (; v13; --v13)
    {
      *v6 = *a3;
      v6[1] = a3[1];
      v6[2] = a3[2];
      v6[3] = a3[3];
      result = (uint64_t)std::function<float ()(float)>::operator=((_QWORD *)v6 + 2, (uint64_t)(a3 + 4));
      v6 += 12;
    }
    if (a2 > v12)
    {
      v14 = (_DWORD *)v5[1];
      v15 = &v14[12 * (a2 - v12)];
      v16 = -48 * v12 + 48 * a2;
      do
      {
        *v14 = *a3;
        v14[1] = a3[1];
        v14[2] = a3[2];
        v14[3] = a3[3];
        result = std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(v14 + 4), (uint64_t)(a3 + 4));
        v14 += 12;
        v16 -= 48;
      }
      while (v16);
      v5[1] = v15;
      return result;
    }
    v17 = v5[1];
    v18 = *v5 + 48 * a2;
    while (1)
    {
      if (v17 == v18)
      {
        v5[1] = v18;
        return result;
      }
      result = *(_QWORD *)(v17 - 8);
      if (v17 - 32 == result)
      {
        result = v17 - 32;
        v19 = 4;
      }
      else
      {
        if (!result)
          goto LABEL_27;
        v19 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v19))();
LABEL_27:
      v17 -= 48;
    }
  }
  std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__vdeallocate((void **)result);
  if (a2 > 0x555555555555555)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  v7 = 0x5555555555555556 * ((uint64_t)(v5[2] - *v5) >> 4);
  if (v7 <= a2)
    v7 = a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[2] - *v5) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v7;
  std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__vallocate[abi:ne180100](v5, v8);
  v9 = (_DWORD *)v5[1];
  v10 = &v9[12 * a2];
  v11 = 48 * a2;
  do
  {
    *v9 = *a3;
    v9[1] = a3[1];
    v9[2] = a3[2];
    v9[3] = a3[3];
    result = std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)(v9 + 4), (uint64_t)(a3 + 4));
    v9 += 12;
    v11 -= 48;
  }
  while (v11);
  v5[1] = v10;
  return result;
}

void sub_21653A020(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_21653A028(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::Segment>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

_QWORD *std::function<float ()(float)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<float ()(float)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<float ()(float)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_21653A280(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Envelope<float>::SegmentInternal>,Phase::Envelope<float>::SegmentInternal*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Envelope<float>::SegmentInternal>,Phase::Envelope<float>::SegmentInternal*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Envelope<float>::SegmentInternal>,Phase::Envelope<float>::SegmentInternal*>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_QWORD **)(result + 16);
  v2 = **(_QWORD **)(result + 8);
  while (v1 != v2)
  {
    result = *(_QWORD *)(v1 - 8);
    if (v1 - 32 == result)
    {
      result = v1 - 32;
      v3 = 4;
    }
    else
    {
      if (!result)
        goto LABEL_8;
      v3 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v3))();
LABEL_8:
    v1 -= 48;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  float v14;
  int v15;
  uint64_t v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float v21;
  unint64_t v22;
  float v23;
  unint64_t v24;
  float v25;
  float v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  float v32;
  unint64_t v33;
  float v34;
  unint64_t v35;
  unint64_t v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  float v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  unint64_t v72;
  float v73;
  unint64_t v74;
  float v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v80;
  _QWORD *i;
  _QWORD *v82;
  float v83;
  int v84;
  _QWORD *v85;
  _QWORD *v86;
  float *v87;
  float v88;
  float v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  __int128 v93;
  _BYTE v94[24];
  _BYTE *v95;
  uint64_t v96;
  float v97;
  int v98;
  _BYTE v99[24];
  _BYTE *v100;
  uint64_t v101;

  v7 = result;
  v101 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v92 = a2 - 48;
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 4);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(float *)(a2 - 40) < *(float *)(v7 + 8))
          return (uint64_t)std::swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal>((__int128 *)v7, v92);
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>((__int128 *)v7, v7 + 48, v92);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(v7, v7 + 48, v7 + 96, v92);
      case 5uLL:
        return (uint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(v7, v7 + 48, v7 + 96, v7 + 144, v92);
      default:
        if (v9 <= 1151)
        {
          if ((a4 & 1) != 0)
          {
            if (v7 == a2)
              return result;
            v41 = (_QWORD *)(v7 + 48);
            if (v7 + 48 == a2)
              return result;
            v42 = 0;
            v43 = v7;
            while (1)
            {
              v44 = v41;
              v45 = *(float *)(v43 + 56);
              if (v45 < *(float *)(v43 + 8))
              {
                v96 = *v41;
                v46 = *(_DWORD *)(v43 + 60);
                v97 = v45;
                v98 = v46;
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v99, v43 + 64);
                v47 = v42;
                while (1)
                {
                  v48 = v47;
                  v49 = v7 + v47;
                  *(_DWORD *)(v49 + 48) = *(_DWORD *)v49;
                  *(_QWORD *)(v49 + 52) = *(_QWORD *)(v49 + 4);
                  *(_DWORD *)(v49 + 60) = *(_DWORD *)(v49 + 12);
                  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v49 + 64), v49 + 16);
                  if (!v48)
                    break;
                  v47 = v48 - 48;
                  if (v97 >= *(float *)(v7 + v48 - 40))
                  {
                    v50 = v7 + v48;
                    goto LABEL_80;
                  }
                }
                v50 = v7;
LABEL_80:
                *(_QWORD *)v50 = v96;
                *(float *)(v50 + 8) = v97;
                *(_DWORD *)(v50 + 12) = v98;
                std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v7 + v48 + 16), (uint64_t)v99);
                result = (uint64_t)v100;
                if (v100 == v99)
                {
                  result = (uint64_t)v99;
                  v51 = 4;
                  goto LABEL_84;
                }
                if (v100)
                {
                  v51 = 5;
LABEL_84:
                  result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v51))();
                }
              }
              v41 = v44 + 6;
              v42 += 48;
              v43 = (uint64_t)v44;
              if (v44 + 6 == (_QWORD *)a2)
                return result;
            }
          }
          if (v7 == a2)
            return result;
          v80 = (_QWORD *)(v7 + 48);
          if (v7 + 48 == a2)
            return result;
          for (i = (_QWORD *)(v7 + 64); ; i += 6)
          {
            v82 = v80;
            v83 = *(float *)(v7 + 56);
            if (v83 < *(float *)(v7 + 8))
            {
              v96 = *v80;
              v84 = *(_DWORD *)(v7 + 60);
              v97 = v83;
              v98 = v84;
              std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v99, v7 + 64);
              v85 = i;
              do
              {
                *((_DWORD *)v85 - 4) = *((_DWORD *)v85 - 16);
                *(_QWORD *)((char *)v85 - 12) = *(_QWORD *)((char *)v85 - 60);
                *((_DWORD *)v85 - 1) = *((_DWORD *)v85 - 13);
                v86 = v85 - 6;
                v87 = (float *)std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v85, (uint64_t)(v85 - 6));
                v88 = v97;
                v89 = *(v87 - 26);
                v85 = v86;
              }
              while (v97 < v89);
              *(v86 - 2) = v96;
              *((float *)v86 - 2) = v88;
              *((_DWORD *)v86 - 1) = v98;
              std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v86, (uint64_t)v99);
              result = (uint64_t)v100;
              if (v100 == v99)
              {
                result = (uint64_t)v99;
                v90 = 4;
                goto LABEL_142;
              }
              if (v100)
              {
                v90 = 5;
LABEL_142:
                result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v90))();
              }
            }
            v80 = v82 + 6;
            v7 = (uint64_t)v82;
            if (v82 + 6 == (_QWORD *)a2)
              return result;
          }
        }
        if (a3)
        {
          v11 = v7 + 48 * (v10 >> 1);
          if ((unint64_t)v9 < 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>((__int128 *)(v7 + 48 * (v10 >> 1)), v7, v92);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>((__int128 *)v7, v7 + 48 * (v10 >> 1), v92);
            v12 = 3 * (v10 >> 1);
            v13 = (__int128 *)(v7 + 48 * (v10 >> 1) - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>((__int128 *)(v7 + 48), (uint64_t)v13, a2 - 96);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>((__int128 *)(v7 + 96), v7 + 48 + 16 * v12, a2 - 144);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(v13, v11, v7 + 48 + 16 * v12);
            std::swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal>((__int128 *)v7, v11);
          }
          --a3;
          if ((a4 & 1) != 0)
          {
            v14 = *(float *)(v7 + 8);
          }
          else
          {
            v14 = *(float *)(v7 + 8);
            if (*(float *)(v7 - 40) >= v14)
            {
              v96 = *(_QWORD *)v7;
              v30 = *(_DWORD *)(v7 + 12);
              v97 = v14;
              v98 = v30;
              std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v99, v7 + 16);
              if (v97 >= *(float *)(a2 - 40))
              {
                v33 = v7 + 48;
                do
                {
                  v8 = v33;
                  if (v33 >= a2)
                    break;
                  v34 = *(float *)(v33 + 8);
                  v33 += 48;
                }
                while (v97 >= v34);
              }
              else
              {
                v31 = v7;
                do
                {
                  v8 = v31 + 48;
                  v32 = *(float *)(v31 + 56);
                  v31 += 48;
                }
                while (v97 >= v32);
              }
              v35 = a2;
              if (v8 < a2)
              {
                v36 = a2;
                do
                {
                  v35 = v36 - 48;
                  v37 = *(float *)(v36 - 40);
                  v36 -= 48;
                }
                while (v97 < v37);
              }
              while (v8 < v35)
              {
                std::swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal>((__int128 *)v8, v35);
                do
                {
                  v38 = *(float *)(v8 + 56);
                  v8 += 48;
                }
                while (v97 >= v38);
                do
                {
                  v39 = *(float *)(v35 - 40);
                  v35 -= 48;
                }
                while (v97 < v39);
              }
              if (v8 - 48 != v7)
              {
                *(_DWORD *)v7 = *(_DWORD *)(v8 - 48);
                *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 44);
                *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 40);
                *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 - 36);
                std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v7 + 16), v8 - 32);
              }
              *(_QWORD *)(v8 - 48) = v96;
              *(float *)(v8 - 40) = v97;
              *(_DWORD *)(v8 - 36) = v98;
              std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v8 - 32), (uint64_t)v99);
              result = (uint64_t)v100;
              if (v100 == v99)
              {
                result = (uint64_t)v99;
                v40 = 4;
              }
              else
              {
                if (!v100)
                  goto LABEL_39;
                v40 = 5;
              }
              result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v40))();
              goto LABEL_39;
            }
          }
          v96 = *(_QWORD *)v7;
          v15 = *(_DWORD *)(v7 + 12);
          v97 = v14;
          v98 = v15;
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v99, v7 + 16);
          v16 = 0;
          do
          {
            v17 = *(float *)(v7 + v16 + 56);
            v16 += 48;
          }
          while (v17 < v97);
          v18 = v7 + v16;
          v19 = a2;
          if (v16 == 48)
          {
            v22 = a2;
            while (v18 < v22)
            {
              v20 = v22 - 48;
              v23 = *(float *)(v22 - 40);
              v22 -= 48;
              if (v23 < v97)
                goto LABEL_22;
            }
            v20 = v22;
          }
          else
          {
            do
            {
              v20 = v19 - 48;
              v21 = *(float *)(v19 - 40);
              v19 -= 48;
            }
            while (v21 >= v97);
          }
LABEL_22:
          v8 = v18;
          if (v18 < v20)
          {
            v24 = v20;
            do
            {
              std::swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal>((__int128 *)v8, v24);
              do
              {
                v25 = *(float *)(v8 + 56);
                v8 += 48;
              }
              while (v25 < v97);
              do
              {
                v26 = *(float *)(v24 - 40);
                v24 -= 48;
              }
              while (v26 >= v97);
            }
            while (v8 < v24);
          }
          if (v8 - 48 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 48);
            *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 44);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 40);
            *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 - 36);
            std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v7 + 16), v8 - 32);
          }
          *(_QWORD *)(v8 - 48) = v96;
          *(float *)(v8 - 40) = v97;
          *(_DWORD *)(v8 - 36) = v98;
          std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v8 - 32), (uint64_t)v99);
          v27 = v100;
          if (v100 == v99)
          {
            v27 = v99;
            v28 = 4;
          }
          else
          {
            if (!v100)
              goto LABEL_35;
            v28 = 5;
          }
          (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_35:
          if (v18 < v20)
            goto LABEL_38;
          v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(v7, v8 - 48);
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(v8, a2);
          if (!(_DWORD)result)
          {
            if (v29)
              continue;
LABEL_38:
            result = std::__introsort<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*,false>(v7, v8 - 48, a3, a4 & 1);
LABEL_39:
            a4 = 0;
            continue;
          }
          a2 = v8 - 48;
          if (v29)
            return result;
          goto LABEL_2;
        }
        if (v7 != a2)
        {
          v52 = (v10 - 2) >> 1;
          v53 = v52;
          v91 = a2;
          while (1)
          {
            v54 = v53;
            if (v52 < v53)
              goto LABEL_105;
            v55 = (2 * v53) | 1;
            v56 = v7 + 48 * v55;
            if (2 * v53 + 2 < (uint64_t)v10 && *(float *)(v7 + 48 * v55 + 8) < *(float *)(v56 + 56))
            {
              v56 += 48;
              v55 = 2 * v53 + 2;
            }
            v57 = *(float *)(v7 + 48 * v53 + 8);
            if (*(float *)(v56 + 8) < v57)
              goto LABEL_105;
            v58 = v7 + 48 * v53;
            v96 = *(_QWORD *)v58;
            v97 = v57;
            v98 = *(_DWORD *)(v58 + 12);
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v99, v58 + 16);
            do
            {
              v59 = v56;
              *(_DWORD *)v58 = *(_DWORD *)v56;
              *(_DWORD *)(v58 + 4) = *(_DWORD *)(v56 + 4);
              *(_DWORD *)(v58 + 8) = *(_DWORD *)(v56 + 8);
              *(_DWORD *)(v58 + 12) = *(_DWORD *)(v56 + 12);
              v60 = (_QWORD *)(v56 + 16);
              std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v58 + 16), v56 + 16);
              if (v52 < v55)
                break;
              v61 = (2 * v55) | 1;
              v56 = v7 + 48 * v61;
              if (2 * v55 + 2 < (uint64_t)v10 && *(float *)(v7 + 48 * v61 + 8) < *(float *)(v56 + 56))
              {
                v56 += 48;
                v61 = 2 * v55 + 2;
              }
              v58 = v59;
              v55 = v61;
            }
            while (*(float *)(v56 + 8) >= v97);
            *(_QWORD *)v59 = v96;
            *(float *)(v59 + 8) = v97;
            *(_DWORD *)(v59 + 12) = v98;
            std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v60, (uint64_t)v99);
            result = (uint64_t)v100;
            a2 = v91;
            if (v100 == v99)
              break;
            if (v100)
            {
              v62 = 5;
LABEL_104:
              result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v62))();
            }
LABEL_105:
            v53 = v54 - 1;
            if (!v54)
            {
              v63 = v9 / 0x30uLL;
              while (2)
              {
                if (v63 < 2)
                  goto LABEL_130;
                v64 = a2;
                v93 = *(_OWORD *)v7;
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v94, v7 + 16);
                v65 = 0;
                v66 = v7;
                do
                {
                  v67 = v65 + 1;
                  v68 = v66 + 48 * (v65 + 1);
                  v69 = 2 * v65;
                  v65 = (2 * v65) | 1;
                  v70 = v69 + 2;
                  if (v70 < v63 && *(float *)(v66 + 48 * v67 + 8) < *(float *)(v68 + 56))
                  {
                    v68 += 48;
                    v65 = v70;
                  }
                  *(_DWORD *)v66 = *(_DWORD *)v68;
                  *(_DWORD *)(v66 + 4) = *(_DWORD *)(v68 + 4);
                  *(_DWORD *)(v66 + 8) = *(_DWORD *)(v68 + 8);
                  *(_DWORD *)(v66 + 12) = *(_DWORD *)(v68 + 12);
                  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v66 + 16), v68 + 16);
                  v66 = v68;
                }
                while (v65 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
                if (v68 == v64 - 48)
                {
                  *(_OWORD *)v68 = v93;
                  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v68 + 16), (uint64_t)v94);
                }
                else
                {
                  *(_DWORD *)v68 = *(_DWORD *)(v64 - 48);
                  *(_DWORD *)(v68 + 4) = *(_DWORD *)(v64 - 44);
                  *(_DWORD *)(v68 + 8) = *(_DWORD *)(v64 - 40);
                  *(_DWORD *)(v68 + 12) = *(_DWORD *)(v64 - 36);
                  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v68 + 16), v64 - 32);
                  *(_OWORD *)(v64 - 48) = v93;
                  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v64 - 32), (uint64_t)v94);
                  v71 = v68 - v7 + 48;
                  if (v71 >= 49)
                  {
                    v72 = (v71 / 0x30uLL - 2) >> 1;
                    v73 = *(float *)(v68 + 8);
                    if (*(float *)(v7 + 48 * v72 + 8) < v73)
                    {
                      v96 = *(_QWORD *)v68;
                      v97 = v73;
                      v98 = *(_DWORD *)(v68 + 12);
                      std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v99, v68 + 16);
                      do
                      {
                        v74 = v68;
                        v68 = v7 + 48 * v72;
                        *(_DWORD *)v74 = *(_DWORD *)v68;
                        *(_DWORD *)(v74 + 4) = *(_DWORD *)(v68 + 4);
                        *(_DWORD *)(v74 + 8) = *(_DWORD *)(v68 + 8);
                        *(_DWORD *)(v74 + 12) = *(_DWORD *)(v68 + 12);
                        std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v74 + 16), v68 + 16);
                        v75 = v97;
                        if (!v72)
                          break;
                        v72 = (v72 - 1) >> 1;
                      }
                      while (*(float *)(v7 + 48 * v72 + 8) < v97);
                      *(_QWORD *)v68 = v96;
                      *(float *)(v68 + 8) = v75;
                      *(_DWORD *)(v68 + 12) = v98;
                      std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v68 + 16), (uint64_t)v99);
                      v76 = v100;
                      if (v100 == v99)
                      {
                        v76 = v99;
                        v77 = 4;
LABEL_124:
                        (*(void (**)(void))(*v76 + 8 * v77))();
                      }
                      else if (v100)
                      {
                        v77 = 5;
                        goto LABEL_124;
                      }
                    }
                  }
                }
                result = (uint64_t)v95;
                if (v95 == v94)
                {
                  result = (uint64_t)v94;
                  v78 = 4;
                  a2 = v64;
                  goto LABEL_129;
                }
                a2 = v64;
                if (v95)
                {
                  v78 = 5;
LABEL_129:
                  result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v78))();
                }
LABEL_130:
                a2 -= 48;
                if ((unint64_t)v63-- <= 2)
                  return result;
                continue;
              }
            }
          }
          result = (uint64_t)v99;
          v62 = 4;
          goto LABEL_104;
        }
        return result;
    }
  }
}

void sub_21653AF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(__int128 *result, uint64_t a2, uint64_t a3)
{
  __int128 *v5;
  float v6;
  float v7;
  uint64_t v8;

  v5 = result;
  v6 = *(float *)(a2 + 8);
  v7 = *(float *)(a3 + 8);
  if (v6 < *((float *)result + 2))
  {
    if (v7 >= v6)
    {
      result = (__int128 *)std::swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal>(result, a2);
      if (*(float *)(a3 + 8) >= *(float *)(a2 + 8))
        return result;
      result = (__int128 *)a2;
    }
    v8 = a3;
    return (__int128 *)std::swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal>(result, v8);
  }
  if (v7 < v6)
  {
    result = (__int128 *)std::swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal>((__int128 *)a2, a3);
    if (*(float *)(a2 + 8) < *((float *)v5 + 2))
    {
      result = v5;
      v8 = a2;
      return (__int128 *)std::swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal>(result, v8);
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v16[12];
  int v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 40) < *(float *)(a1 + 8))
      {
        std::swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal>((__int128 *)a1, a2 - 48);
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>((__int128 *)a1, a1 + 48, a2 - 48);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v6 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>((__int128 *)a1, a1 + 48, a1 + 96);
      v7 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (*(float *)(v7 + 8) >= *(float *)(v6 + 8))
  {
LABEL_18:
    v6 = v7;
    v8 += 48;
    v7 += 48;
    if (v7 == a2)
      return 1;
  }
  *(_QWORD *)v16 = *(_QWORD *)v7;
  *(_DWORD *)&v16[8] = *(_DWORD *)(v7 + 8);
  v17 = *(_DWORD *)(v7 + 12);
  std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v18, v7 + 16);
  v10 = v8;
  while (1)
  {
    v11 = v10;
    v12 = a1 + v10;
    *(_DWORD *)(v12 + 144) = *(_DWORD *)(v12 + 96);
    *(_QWORD *)(v12 + 148) = *(_QWORD *)(v12 + 100);
    *(_DWORD *)(v12 + 156) = *(_DWORD *)(v12 + 108);
    std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(v12 + 160), v12 + 112);
    if (v11 == -96)
      break;
    v10 = v11 - 48;
    if (*(float *)&v16[8] >= *(float *)(a1 + v11 + 56))
    {
      v13 = a1 + v10 + 144;
      goto LABEL_12;
    }
  }
  v13 = a1;
LABEL_12:
  *(_DWORD *)v13 = *(_DWORD *)v16;
  *(_QWORD *)(v13 + 4) = *(_QWORD *)&v16[4];
  *(_DWORD *)(v13 + 12) = v17;
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(a1 + v11 + 112), (uint64_t)v18);
  v14 = v19;
  if (v19 == v18)
  {
    v14 = v18;
    v15 = 4;
  }
  else
  {
    if (!v19)
      goto LABEL_17;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_17:
  if (++v9 != 8)
    goto LABEL_18;
  return v7 + 48 == a2;
}

void sub_21653B310(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal>(__int128 *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  __int128 v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  v4 = v9;
  v5 = a1 + 1;
  std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)(a1 + 1));
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *((_DWORD *)a1 + 1) = *(_DWORD *)(a2 + 4);
  *((_DWORD *)a1 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)a1 + 3) = *(_DWORD *)(a2 + 12);
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v5, a2 + 16);
  *(_OWORD *)a2 = v8;
  result = std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(a2 + 16), (uint64_t)v9);
  if (v10 == v9)
  {
    v7 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v7 = 5;
    v4 = v10;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8 * v7))(v4);
}

void sub_21653B410(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>((__int128 *)a1, a2, a3);
  if (*(float *)(a4 + 8) < *(float *)(a3 + 8))
  {
    result = std::swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal>((__int128 *)a3, a4);
    if (*(float *)(a3 + 8) < *(float *)(a2 + 8))
    {
      result = std::swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal>((__int128 *)a2, a3);
      if (*(float *)(a2 + 8) < *(float *)(a1 + 8))
        return std::swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal>((__int128 *)a1, a2);
    }
  }
  return result;
}

_QWORD *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(a1, a2, a3, a4);
  if (*(float *)(a5 + 8) < *(float *)(a4 + 8))
  {
    result = std::swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal>((__int128 *)a4, a5);
    if (*(float *)(a4 + 8) < *(float *)(a3 + 8))
    {
      result = std::swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal>((__int128 *)a3, a4);
      if (*(float *)(a3 + 8) < *(float *)(a2 + 8))
      {
        result = std::swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal>((__int128 *)a2, a3);
        if (*(float *)(a2 + 8) < *(float *)(a1 + 8))
          return std::swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal>((__int128 *)a1, a2);
      }
    }
  }
  return result;
}

_QWORD *Phase::Controller::RouterCommandBatch::Clear(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  v2 = *this;
  if (*this)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 40);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor(v2 + 8);
      this = (_QWORD *)MEMORY[0x2199F9D70](v2, 0x1022C4068034D05);
      v2 = v3;
    }
    while (v3);
  }
  *v1 = 0;
  return this;
}

void Phase::Controller::RouterCommand::~RouterCommand(Phase::Controller::RouterCommand *this)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8);
}

uint64_t Phase::Controller::RouterCommand::AddRenderer(uint64_t *a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_DWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_DWORD *)v2 = 1;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>>::__assign_alt[abi:ne180100]<3ul,std::shared_ptr<Phase::Controller::Renderer>,std::shared_ptr<Phase::Controller::Renderer>&>(v2 + 8, (_QWORD *)(v2 + 8), a1);
  return v2;
}

uint64_t Phase::Controller::RouterCommand::NotifyCulled(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD v8[2];
  char v9;

  v6 = operator new();
  *(_DWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_DWORD *)v6 = 3;
  v8[0] = a1;
  v8[1] = a2;
  v9 = a3;
  std::variant<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>::operator=[abi:ne180100]<std::pair<Phase::UniqueObjectId,BOOL>,0,std::pair<Phase::UniqueObjectId,BOOL>,5ul,0>(v6 + 8, (uint64_t)v8);
  return v6;
}

uint64_t std::variant<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>::operator=[abi:ne180100]<std::pair<Phase::UniqueObjectId,BOOL>,0,std::pair<Phase::UniqueObjectId,BOOL>,5ul,0>(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 24) == 5)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>>::__emplace[abi:ne180100]<5ul,std::pair<Phase::UniqueObjectId,BOOL>>(a1, (__int128 *)a2);
  }
  return a1;
}

Phase::Controller::RouterCommandList *Phase::Controller::RouterCommandList::ExecuteCommands(Phase::Controller::RouterCommandList *this, void *a2)
{
  unint64_t *v4;
  Phase::Controller::RouterCommand *v5;
  Phase::Controller::RouterCommandList *result;
  uint64_t i;
  uint64_t (*v8)(void *);
  _OWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, sizeof(v9));
  v4 = (unint64_t *)((char *)this + 32);
  do
    v5 = (Phase::Controller::RouterCommand *)__ldaxr(v4);
  while (__stlxr(0, v4));
  result = Phase::Controller::RouterCommandList::SortCommandList(this, v5, (Phase::Controller::RouterCommand **)v9);
  if (*(_QWORD *)&v9[0])
LABEL_10:
    std::terminate();
  for (i = 8; i != 32; i += 8)
  {
    v8 = *(uint64_t (**)(void *))((char *)this + i);
    if (!v8)
      goto LABEL_10;
    if (*(_QWORD *)((char *)v9 + i))
      result = (Phase::Controller::RouterCommandList *)v8(a2);
  }
  return result;
}

Phase::Controller::RouterCommandList *Phase::Controller::RouterCommandList::SortCommandList(Phase::Controller::RouterCommandList *this, Phase::Controller::RouterCommand *a2, Phase::Controller::RouterCommand **a3)
{
  Phase::Controller::RouterCommand *v4;
  Phase::Controller::RouterCommandList *v5;
  Phase::Controller::RouterCommand *v6;
  uint64_t v7;

  if (a2)
  {
    v4 = a2;
    v5 = this;
    do
    {
      v6 = (Phase::Controller::RouterCommand *)*((_QWORD *)v4 + 5);
      v7 = *(unsigned int *)v4;
      if ((_DWORD)v7)
      {
        if (v7 > 3)
        {
          Phase::Controller::RouterCommand::~RouterCommand(v4);
          MEMORY[0x2199F9D70]();
          std::terminate();
        }
        *((_QWORD *)v4 + 5) = a3[v7];
        a3[v7] = v4;
      }
      else
      {
        if (*((_DWORD *)v4 + 8) != 1)
          std::__throw_bad_variant_access[abi:ne180100]();
        Phase::Controller::RouterCommandList::SortCommandList(v5, *((Phase::Controller::RouterCommand **)v4 + 1), a3);
        *((_QWORD *)v4 + 1) = 0;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v4 + 8);
        this = (Phase::Controller::RouterCommandList *)MEMORY[0x2199F9D70](v4, 0x1022C4068034D05);
      }
      v4 = v6;
    }
    while (v6);
  }
  return this;
}

void sub_21653B908(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t Phase::Controller::RouterCommandList::Clear(uint64_t this)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;

  v1 = (unint64_t *)(this + 32);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(0, v1));
  if (v2)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 40);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor(v2 + 8);
      this = MEMORY[0x2199F9D70](v2, 0x1022C4068034D05);
      v2 = v3;
    }
    while (v3);
  }
  return this;
}

Phase::Controller::SpatialSubmixRouter *Phase::Controller::SpatialSubmixRouter::SpatialSubmixRouter(Phase::Controller::SpatialSubmixRouter *this, const Phase::Controller::SpatialModelerInfo *a2, Phase::Controller::RendererSystem *a3, Phase::Controller::RenderGroupMgr *a4)
{
  Phase::Logger *v7;
  uint64_t v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v23;
  void **v24;
  std::logic_error *exception;
  NSObject *v26;
  void **v27;
  void *__p[2];
  char v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE buf[12];
  __int16 v33;
  int v34;
  __int16 v35;
  void **v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)this = xmmword_24D579990;
  *((_OWORD *)this + 1) = *(_OWORD *)off_24D5799A0;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = a2;
  *((_QWORD *)this + 7) = (char *)this + 56;
  *((_QWORD *)this + 8) = (char *)this + 56;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 0;
  *(_QWORD *)((char *)this + 180) = 0xFFFFFFFFLL;
  v7 = (Phase::Logger *)std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)((char *)this + 192));
  *((_QWORD *)this + 45) = a3;
  *((_QWORD *)this + 46) = a4;
  *((_QWORD *)this + 55) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  v8 = *(_QWORD *)(*((_QWORD *)this + 6) + 240);
  if (!v8)
  {
    v23 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7)
                                                                                        + 224)));
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *((Phase::Controller::SpatialModelerInfo **)this + 6));
      v24 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmSpatialSubmixRouter.mm";
      v33 = 1024;
      v34 = 283;
      v35 = 2080;
      v36 = v24;
      _os_log_impl(&dword_2164CC000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [mpSpatialModelerInfo->mpRendererConfig == nullptr is true]: \"%s [SpatialSubmixRouter]: Couldn't find a valid RendererConfig!\"", buf, 0x1Cu);
      if (v29 < 0)
        operator delete(__p[0]);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s [SpatialSubmixRouter]: Couldn't find a valid RendererConfig!");
LABEL_29:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  if (!*(_DWORD *)(v8 + 8))
  {
    v26 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v7)
                                                                                        + 224)));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *((Phase::Controller::SpatialModelerInfo **)this + 6));
      v27 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "CvmSpatialSubmixRouter.mm";
      v33 = 1024;
      v34 = 288;
      v35 = 2080;
      v36 = v27;
      _os_log_impl(&dword_2164CC000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [mpSpatialModelerInfo->mpRendererConfig->mRendererType == RendererType::None is true]: \"%s [SpatialSubmixRouter]: Couldn't find a valid RendererType!\"", buf, 0x1Cu);
      if (v29 < 0)
        operator delete(__p[0]);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s [SpatialSubmixRouter]: Couldn't find a valid RendererType!");
    goto LABEL_29;
  }
  v9 = (char *)operator new(0xC00uLL);
  *((_QWORD *)this + 47) = v9;
  *((_QWORD *)this + 48) = v9;
  *((_QWORD *)this + 49) = v9 + 3072;
  std::vector<Phase::UniqueObjectId>::reserve((void **)this + 50, 0x80uLL);
  v10 = (_BYTE *)*((_QWORD *)this + 53);
  if (*((_QWORD *)this + 55) - (_QWORD)v10 <= 0x3FFuLL)
  {
    v11 = (_BYTE *)*((_QWORD *)this + 54);
    v12 = (char *)operator new(0x400uLL);
    v13 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF8];
    v14 = v13;
    if (v11 != v10)
    {
      v14 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v15 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v14 - 1) = v15;
        v14 -= 8;
      }
      while (v11 != v10);
    }
    *((_QWORD *)this + 53) = v14;
    *((_QWORD *)this + 54) = v13;
    *((_QWORD *)this + 55) = v12 + 1024;
    if (v10)
      operator delete(v10);
  }
  v16 = *((_QWORD *)this + 45);
  v17 = *((_QWORD *)this + 6);
  v18 = operator new(0x20uLL);
  *v18 = &off_24D5799F0;
  v18[1] = Phase::Controller::SpatialSubmixRouter::OnRendererChanged;
  v18[2] = 0;
  v18[3] = this;
  v31 = v18;
  *(_QWORD *)buf = v17 + 24;
  v19 = std::__hash_table<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t *)(v16 + 184), (unint64_t *)(v17 + 24), (uint64_t)&std::piecewise_construct, (_QWORD **)buf);
  std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::operator=(v19 + 3, (uint64_t)v30);
  v20 = v31;
  if (v31 == v30)
  {
    v21 = 4;
    v20 = v30;
    goto LABEL_13;
  }
  if (v31)
  {
    v21 = 5;
LABEL_13:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  return this;
}

void sub_21653BD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  void **v19;
  void **v20;
  void *v21;
  void *v23;
  void *v24;
  void *v25;

  __cxa_free_exception(v21);
  v23 = (void *)v16[53];
  if (v23)
  {
    v16[54] = v23;
    operator delete(v23);
  }
  v24 = *v19;
  if (*v19)
  {
    v16[51] = v24;
    operator delete(v24);
  }
  v25 = *v20;
  if (*v20)
  {
    v16[48] = v25;
    operator delete(v25);
  }
  Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::~SubmixSlotMap(v18);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::~__hash_table((uint64_t)(v16 + 10));
  std::__list_imp<Phase::Controller::SpatialSubmixRouter::StoppingRenderer>::clear(v17);
  Phase::Controller::RouterCommandBatch::Clear(v16 + 5);
  Phase::Controller::RouterCommandList::Clear((uint64_t)v16);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatialSubmixRouter::ExecuteAddRenderer(uint64_t this, _QWORD *a2, Phase::Controller::RouterCommand *a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  _QWORD **v16;
  _QWORD *i;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _QWORD v33[2];
  char v34;

  if (a2)
  {
    v4 = a2;
    v5 = this;
    v6 = (uint64_t *)(this + 80);
    v7 = (_QWORD *)(this + 96);
    do
    {
      v8 = (_QWORD *)v4[5];
      if (*((_DWORD *)v4 + 8) != 3)
        std::__throw_bad_variant_access[abi:ne180100]();
      v10 = v4[1];
      v9 = (std::__shared_weak_count *)v4[2];
      v31 = v10;
      v32 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v13 = *(_QWORD *)(v10 + 40);
      v14 = *(_QWORD *)(v5 + 88);
      if (v14)
      {
        v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          v3 = *(_QWORD *)(v10 + 40);
          if (v14 <= v13)
            v3 = v13 % v14;
        }
        else
        {
          v3 = (v14 - 1) & v13;
        }
        v16 = *(_QWORD ***)(*v6 + 8 * v3);
        if (v16)
        {
          for (i = *v16; i; i = (_QWORD *)*i)
          {
            v18 = i[1];
            if (v18 == v13)
            {
              if (i[2] == v13)
                goto LABEL_45;
            }
            else
            {
              if (v15.u32[0] > 1uLL)
              {
                if (v18 >= v14)
                  v18 %= v14;
              }
              else
              {
                v18 &= v14 - 1;
              }
              if (v18 != v3)
                break;
            }
          }
        }
      }
      i = operator new(0x28uLL);
      v33[0] = i;
      v33[1] = v7;
      *i = 0;
      i[1] = v13;
      i[2] = *(_QWORD *)(v10 + 40);
      i[3] = 0;
      i[4] = 0;
      v34 = 1;
      v19 = (float)(unint64_t)(*(_QWORD *)(v5 + 104) + 1);
      v20 = *(float *)(v5 + 112);
      if (!v14 || (float)(v20 * (float)v14) < v19)
      {
        v21 = (v14 & (v14 - 1)) != 0;
        if (v14 < 3)
          v21 = 1;
        v22 = v21 | (2 * v14);
        v23 = vcvtps_u32_f32(v19 / v20);
        if (v22 <= v23)
          v24 = v23;
        else
          v24 = v22;
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v6, v24);
        v14 = *(_QWORD *)(v5 + 88);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v14 <= v13)
            v3 = v13 % v14;
          else
            v3 = v13;
        }
        else
        {
          v3 = (v14 - 1) & v13;
        }
      }
      v25 = *v6;
      v26 = *(_QWORD **)(*v6 + 8 * v3);
      if (v26)
      {
        *i = *v26;
      }
      else
      {
        *i = *v7;
        *v7 = i;
        *(_QWORD *)(v25 + 8 * v3) = v7;
        if (!*i)
          goto LABEL_44;
        v27 = *(_QWORD *)(*i + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v27 >= v14)
            v27 %= v14;
        }
        else
        {
          v27 &= v14 - 1;
        }
        v26 = (_QWORD *)(*v6 + 8 * v27);
      }
      *v26 = i;
LABEL_44:
      v33[0] = 0;
      ++*(_QWORD *)(v5 + 104);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,void *>>>>::reset[abi:ne180100]((uint64_t)v33);
LABEL_45:
      std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100](i + 3, &v31);
      v28 = v32;
      if (v32)
      {
        v29 = (unint64_t *)&v32->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v4 + 1));
      this = MEMORY[0x2199F9D70](v4, 0x1022C4068034D05);
      v4 = v8;
    }
    while (v8);
  }
  return this;
}

uint64_t Phase::Controller::SpatialSubmixRouter::ExecuteRemoveRenderer(uint64_t this, _QWORD *a2, Phase::Controller::RouterCommand *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  if (a2)
  {
    v3 = a2;
    v4 = (_QWORD *)(this + 80);
    do
    {
      v5 = (_QWORD *)v3[5];
      if (*((_DWORD *)v3 + 8) != 4)
        std::__throw_bad_variant_access[abi:ne180100]();
      std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::__erase_unique<unsigned long long>(v4, v3[1]);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v3 + 1));
      this = MEMORY[0x2199F9D70](v3, 0x1022C4068034D05);
      v3 = v5;
    }
    while (v5);
  }
  return this;
}

uint64_t Phase::Controller::SpatialSubmixRouter::ExecuteNotifyCulled(uint64_t this, _QWORD *a2, Phase::Controller::RouterCommand *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;

  if (a2)
  {
    v3 = a2;
    v4 = (_QWORD *)(this + 120);
    do
    {
      v5 = (_QWORD *)v3[5];
      if (*((_DWORD *)v3 + 8) != 5)
        std::__throw_bad_variant_access[abi:ne180100]();
      v6 = *((_BYTE *)v3 + 24);
      *((_BYTE *)Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams>::MutableAt(v4, v3[1], v3[2])+ 112) = v6 & 1;
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v3 + 1));
      this = MEMORY[0x2199F9D70](v3, 0x1022C4068034D05);
      v3 = v5;
    }
    while (v5);
  }
  return this;
}

void std::vector<Phase::UniqueObjectId>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

unint64_t Phase::Controller::SpatialSubmixRouter::OnRendererChanged(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD *v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_weak_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  Phase::Logger *v40;
  unint64_t v41;
  NSObject *v42;
  void **v44;
  unint64_t v45;
  uint64_t v46[2];
  void *__p[2];
  char v48;
  _BYTE buf[18];
  __int16 v50;
  void **v51;
  __int16 v52;
  unint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)(a1 + 80);
  result = (unint64_t)std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((_QWORD *)(a1 + 80), a2);
  if (!result)
    return result;
  v45 = a2;
  v10 = *a3;
  v9 = a3[1];
  v11 = *(_QWORD *)(*a3 + 40);
  v12 = *(_QWORD *)(a1 + 88);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v3 = *(_QWORD *)(*a3 + 40);
      if (v12 <= v11)
        v3 = v11 % v12;
    }
    else
    {
      v3 = (v12 - 1) & v11;
    }
    v14 = *(_QWORD **)(*v7 + 8 * v3);
    if (v14)
    {
      for (i = (_QWORD *)*v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v11)
        {
          if (i[2] == v11)
          {
            v40 = (Phase::Logger *)std::shared_ptr<Phase::Controller::SpatializerFilterDatabase>::operator=[abi:ne180100](i + 3, a3);
            v41 = a2;
            v42 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstancePtr(v40)
                                                                                                + 224)));
            if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
            {
              Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *(Phase::Controller::SpatialModelerInfo **)(a1 + 48));
              v44 = v48 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "CvmSpatialSubmixRouter.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 910;
              v50 = 2080;
              v51 = v44;
              v52 = 2048;
              v53 = a2;
              _os_log_impl(&dword_2164CC000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d %s [SpatialSubmixRouter]: New rendererId %llu was already present in working renderer map", buf, 0x26u);
              if (v48 < 0)
                operator delete(__p[0]);
            }

            goto LABEL_44;
          }
        }
        else
        {
          if (v13.u32[0] > 1uLL)
          {
            if (v16 >= v12)
              v16 %= v12;
          }
          else
          {
            v16 &= v12 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 96);
  v18 = operator new(0x28uLL);
  *(_QWORD *)buf = v18;
  *(_QWORD *)&buf[8] = a1 + 96;
  *v18 = 0;
  v18[1] = v11;
  v18[2] = v11;
  v18[3] = v10;
  v18[4] = v9;
  if (v9)
  {
    v19 = (unint64_t *)(v9 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  buf[16] = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 104) + 1);
  v22 = *(float *)(a1 + 112);
  if (!v12 || (float)(v22 * (float)v12) < v21)
  {
    v23 = 1;
    if (v12 >= 3)
      v23 = (v12 & (v12 - 1)) != 0;
    v24 = v23 | (2 * v12);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v7, v26);
    v12 = *(_QWORD *)(a1 + 88);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v11)
        v3 = v11 % v12;
      else
        v3 = v11;
    }
    else
    {
      v3 = (v12 - 1) & v11;
    }
  }
  v27 = *v7;
  v28 = *(_QWORD **)(*v7 + 8 * v3);
  if (v28)
  {
    *v18 = *v28;
  }
  else
  {
    *v18 = *v17;
    *v17 = v18;
    *(_QWORD *)(v27 + 8 * v3) = v17;
    if (!*v18)
      goto LABEL_43;
    v29 = *(_QWORD *)(*v18 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v29 >= v12)
        v29 %= v12;
    }
    else
    {
      v29 &= v12 - 1;
    }
    v28 = (_QWORD *)(*v7 + 8 * v29);
  }
  *v28 = v18;
LABEL_43:
  *(_QWORD *)buf = 0;
  ++*(_QWORD *)(a1 + 104);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
  v41 = v45;
LABEL_44:
  v30 = *(_QWORD *)(a1 + 368);
  v31 = *a3;
  v32 = (std::__shared_weak_count *)a3[1];
  v46[0] = v31;
  v46[1] = (uint64_t)v32;
  if (v32)
  {
    p_shared_weak_owners = (unint64_t *)&v32->__shared_weak_owners_;
    do
      v34 = __ldxr(p_shared_weak_owners);
    while (__stxr(v34 + 1, p_shared_weak_owners));
  }
  Phase::Controller::RenderGroupMgr::UpdateRenderer(v30, v41, v46);
  if (v32)
    std::__shared_weak_count::__release_weak(v32);
  result = operator new();
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)result = 2;
  *(_QWORD *)(result + 8) = v41;
  *(_DWORD *)(result + 32) = 4;
  v35 = (unint64_t *)(a1 + 32);
  v36 = atomic_load((unint64_t *)(a1 + 32));
  *(_QWORD *)(result + 40) = v36;
  while (1)
  {
    v37 = __ldaxr(v35);
    if (v37 != v36)
      break;
    if (!__stlxr(result, v35))
      return result;
  }
  __clrex();
  do
  {
    *(_QWORD *)(result + 40) = v37;
    while (1)
    {
      v38 = __ldaxr(v35);
      if (v38 != v37)
        break;
      if (!__stlxr(result, v35))
      {
        v39 = 1;
        goto LABEL_59;
      }
    }
    v39 = 0;
    __clrex();
LABEL_59:
    v37 = v38;
  }
  while ((v39 & 1) == 0);
  return result;
}

