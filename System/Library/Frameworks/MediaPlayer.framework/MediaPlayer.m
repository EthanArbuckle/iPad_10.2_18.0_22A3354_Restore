id getATAssetClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getATAssetClass_softClass;
  v7 = getATAssetClass_softClass;
  if (!getATAssetClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getATAssetClass_block_invoke;
    v3[3] = &unk_1E31639A0;
    v3[4] = &v4;
    __getATAssetClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_193B9E7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getATMachDownloadObserverServiceName()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getATMachDownloadObserverServiceNameSymbolLoc_ptr;
  v7 = getATMachDownloadObserverServiceNameSymbolLoc_ptr;
  if (!getATMachDownloadObserverServiceNameSymbolLoc_ptr)
  {
    v1 = AirTrafficLibrary();
    v0 = dlsym(v1, "ATMachDownloadObserverServiceName");
    v5[3] = (uint64_t)v0;
    getATMachDownloadObserverServiceNameSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getATMachDownloadObserverServiceName(void)");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("MPMediaDownloadManager.m"), 63, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_193B9E8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getATMachKeepLocalRequestHandlerServiceName()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getATMachKeepLocalRequestHandlerServiceNameSymbolLoc_ptr;
  v7 = getATMachKeepLocalRequestHandlerServiceNameSymbolLoc_ptr;
  if (!getATMachKeepLocalRequestHandlerServiceNameSymbolLoc_ptr)
  {
    v1 = AirTrafficLibrary();
    v0 = dlsym(v1, "ATMachKeepLocalRequestHandlerServiceName");
    v5[3] = (uint64_t)v0;
    getATMachKeepLocalRequestHandlerServiceNameSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getATMachKeepLocalRequestHandlerServiceName(void)");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("MPMediaDownloadManager.m"), 61, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_193B9E998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getATStartupCompleteNotification()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getATStartupCompleteNotificationSymbolLoc_ptr;
  v7 = getATStartupCompleteNotificationSymbolLoc_ptr;
  if (!getATStartupCompleteNotificationSymbolLoc_ptr)
  {
    v1 = AirTrafficLibrary();
    v0 = dlsym(v1, "ATStartupCompleteNotification");
    v5[3] = (uint64_t)v0;
    getATStartupCompleteNotificationSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getATStartupCompleteNotification(void)");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("MPMediaDownloadManager.m"), 62, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_193B9EA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getSSDownloadKindMovie()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getSSDownloadKindMovieSymbolLoc_ptr;
  v8 = getSSDownloadKindMovieSymbolLoc_ptr;
  if (!getSSDownloadKindMovieSymbolLoc_ptr)
  {
    v1 = StoreServicesLibrary_50149();
    v0 = (id *)dlsym(v1, "SSDownloadKindMovie");
    v6[3] = (uint64_t)v0;
    getSSDownloadKindMovieSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getSSDownloadKindMovie(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MPStoreDownloadManager.m"), 47, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_193B9EB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getSSDownloadKindTelevisionEpisode()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getSSDownloadKindTelevisionEpisodeSymbolLoc_ptr;
  v8 = getSSDownloadKindTelevisionEpisodeSymbolLoc_ptr;
  if (!getSSDownloadKindTelevisionEpisodeSymbolLoc_ptr)
  {
    v1 = StoreServicesLibrary_50149();
    v0 = (id *)dlsym(v1, "SSDownloadKindTelevisionEpisode");
    v6[3] = (uint64_t)v0;
    getSSDownloadKindTelevisionEpisodeSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getSSDownloadKindTelevisionEpisode(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MPStoreDownloadManager.m"), 46, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_193B9EC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSSDownloadManagerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSSDownloadManagerClass_softClass;
  v7 = getSSDownloadManagerClass_softClass;
  if (!getSSDownloadManagerClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSSDownloadManagerClass_block_invoke;
    v3[3] = &unk_1E31639A0;
    v3[4] = &v4;
    __getSSDownloadManagerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_193B9ED38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _MPModelObject_q_getterIMP(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForModelKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "longLongValue");
  return v6;
}

void sub_193B9F36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v33;
  void *v34;
  void *v35;
  void **v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;

  v30 = v25;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v29 - 120);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (__p)
  {
    a10 = (uint64_t)__p;
    operator delete(__p);
  }

  if (a2 == 2)
  {
    v33 = __cxa_begin_catch(a1);
    v34 = (void *)MEMORY[0x1E0C99DA0];
    v35 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&__p);
    (*(void (**)(void ***__return_ptr, void *, void **))(*(_QWORD *)v33 + 24))(&a16, v33, &__p);
    if (a21 >= 0)
      v36 = (void **)&a16;
    else
      v36 = a16;
    objc_msgSend(v35, "stringWithUTF8String:", v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v37, 0);
    v38 = (id)objc_claimAutoreleasedReturnValue();

    if (a21 < 0)
      operator delete(a16);
    objc_exception_throw(v38);
  }
  if (a2 == 1)
  {
    v39 = __cxa_begin_catch(a1);
    v40 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v39 + 16))(v39));
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v41, 0);
    v42 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v42);
  }

  _Unwind_Resume(a1);
}

id _MPModelObject__getterIMP(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForModelKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void ___ZL24_MPMLInitPropertySongMapv_block_invoke_4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  void *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  void *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  void *v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  void *v18;
  void *__p[2];
  char v20;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "cloudUniversalLibraryID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setUniversalCloudLibraryID:", v6);

  if (v20 < 0)
    operator delete(__p[0]);
  v7 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "subscriptionStoreID");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v7, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), *(int8x8_t **)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setSubscriptionAdamID:", objc_msgSend(v9, "longLongValue"));

  if (v20 < 0)
    operator delete(__p[0]);
  v10 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeID");
  v11 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v10, (unsigned __int8 *)__p);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v11 + 5), *(int8x8_t **)(a1 + 40));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAdamID:", objc_msgSend(v12, "longLongValue"));

  if (v20 < 0)
    operator delete(__p[0]);
  objc_msgSend(v3, "setPurchasedAdamID:", objc_msgSend(v3, "adamID"));
  v13 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "reportingStoreItemID");
  v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v13, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), *(int8x8_t **)(a1 + 40));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setReportingAdamID:", objc_msgSend(v15, "longLongValue"));

  if (v20 < 0)
    operator delete(__p[0]);
  v16 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "assetStoreItemID");
  v17 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v16, (unsigned __int8 *)__p);
  if (!v17)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v17 + 5), *(int8x8_t **)(a1 + 40));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAssetAdamID:", objc_msgSend(v18, "longLongValue"));

  if (v20 < 0)
    operator delete(__p[0]);

}

void sub_193BA035C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id MPMediaLibraryPropertyCacheValueForProperty(ModelPropertyBase *a1, int8x8_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  int8x8_t v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  void *v19;
  int8x8_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  double **v29;
  double *v30;
  unint64_t v31;
  uint64_t ***v32;
  uint64_t **v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t **v38;
  uint64_t *v39;
  unint64_t v40;
  std::string *v41;
  void *v42;
  void *v43;
  id v45;
  std::string __p[3];
  _BYTE v47[40];
  std::string v48;

  switch((*(unsigned int (**)(ModelPropertyBase *))(*(_QWORD *)a1 + 80))(a1))
  {
    case 0u:
      v4 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::find<mlcore::ModelProperty<long long> *>(&a2[16], (unint64_t)a1);
      if (v4)
        v5 = *((unsigned int *)v4 + 6);
      else
        v5 = 0;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v5);
      v28 = objc_claimAutoreleasedReturnValue();
      goto LABEL_74;
    case 1u:
      v26 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::find<mlcore::ModelProperty<long long> *>(&a2[21], (unint64_t)a1);
      if (v26)
        v27 = v26[3];
      else
        v27 = 0;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v27);
      v28 = objc_claimAutoreleasedReturnValue();
      goto LABEL_74;
    case 2u:
      v12 = a2[12];
      v13 = 0.0;
      if (!*(_QWORD *)&v12)
        goto LABEL_73;
      v14 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)a1) + 8) ^ ((unint64_t)a1 >> 32));
      v15 = 0x9DDFEA08EB382D69 * (((unint64_t)a1 >> 32) ^ (v14 >> 47) ^ v14);
      v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
      v17 = (uint8x8_t)vcnt_s8(v12);
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        v18 = v16;
        if (v16 >= *(_QWORD *)&v12)
          v18 = v16 % *(_QWORD *)&v12;
      }
      else
      {
        v18 = v16 & (*(_QWORD *)&v12 - 1);
      }
      v29 = *(double ***)(*(_QWORD *)&a2[11] + 8 * v18);
      if (!v29)
        goto LABEL_73;
      v30 = *v29;
      if (!v30)
        goto LABEL_73;
      while (2)
      {
        v31 = *((_QWORD *)v30 + 1);
        if (v16 == v31)
        {
          if (*((ModelPropertyBase **)v30 + 2) == a1)
          {
            v13 = v30[3];
            goto LABEL_73;
          }
        }
        else
        {
          if (v17.u32[0] > 1uLL)
          {
            if (v31 >= *(_QWORD *)&v12)
              v31 %= *(_QWORD *)&v12;
          }
          else
          {
            v31 &= *(_QWORD *)&v12 - 1;
          }
          if (v31 != v18)
          {
LABEL_73:
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v13);
            v28 = objc_claimAutoreleasedReturnValue();
LABEL_74:
            v37 = (id)v28;
            return v37;
          }
        }
        v30 = *(double **)v30;
        if (!v30)
          goto LABEL_73;
        continue;
      }
    case 3u:
      v19 = (void *)MEMORY[0x1E0CB3940];
      std::string::basic_string[abi:ne180100]<0>(&v48, "");
      v20 = a2[7];
      if (!*(_QWORD *)&v20)
        goto LABEL_61;
      v21 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)a1) + 8) ^ ((unint64_t)a1 >> 32));
      v22 = 0x9DDFEA08EB382D69 * (((unint64_t)a1 >> 32) ^ (v21 >> 47) ^ v21);
      v23 = 0x9DDFEA08EB382D69 * (v22 ^ (v22 >> 47));
      v24 = (uint8x8_t)vcnt_s8(v20);
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.u32[0] > 1uLL)
      {
        v25 = v23;
        if (v23 >= *(_QWORD *)&v20)
          v25 = v23 % *(_QWORD *)&v20;
      }
      else
      {
        v25 = v23 & (*(_QWORD *)&v20 - 1);
      }
      v38 = *(uint64_t ***)(*(_QWORD *)&a2[6] + 8 * v25);
      if (!v38)
        goto LABEL_61;
      v39 = *v38;
      if (!v39)
        goto LABEL_61;
      while (2)
      {
        v40 = v39[1];
        if (v23 == v40)
        {
          if ((ModelPropertyBase *)v39[2] == a1)
          {
            if (*((char *)v39 + 47) < 0)
              std::string::__init_copy_ctor_external(__p, (const std::string::value_type *)v39[3], v39[4]);
            else
              __p[0] = *(std::string *)((_BYTE *)v39 + 1);
LABEL_62:
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v41 = __p;
            else
              v41 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
            objc_msgSend(v19, "stringWithUTF8String:", v41, *(_OWORD *)&__p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__r.__words[2]);
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[0].__r_.__value_.__l.__data_);
            if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v48.__r_.__value_.__l.__data_);
            if (objc_msgSend(v42, "length"))
              v43 = v42;
            else
              v43 = 0;
            v37 = v43;

            return v37;
          }
        }
        else
        {
          if (v24.u32[0] > 1uLL)
          {
            if (v40 >= *(_QWORD *)&v20)
              v40 %= *(_QWORD *)&v20;
          }
          else
          {
            v40 &= *(_QWORD *)&v20 - 1;
          }
          if (v40 != v25)
          {
LABEL_61:
            __p[0] = v48;
            memset(&v48, 0, sizeof(v48));
            goto LABEL_62;
          }
        }
        v39 = (uint64_t *)*v39;
        if (!v39)
          goto LABEL_61;
        continue;
      }
    case 4u:
      mediaplatform::Data::Data((mediaplatform::Data *)v47);
      v6 = a2[2];
      if (!*(_QWORD *)&v6)
        goto LABEL_46;
      v7 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)a1) + 8) ^ ((unint64_t)a1 >> 32));
      v8 = 0x9DDFEA08EB382D69 * (((unint64_t)a1 >> 32) ^ (v7 >> 47) ^ v7);
      v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      v10 = (uint8x8_t)vcnt_s8(v6);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        v11 = v9;
        if (v9 >= *(_QWORD *)&v6)
          v11 = v9 % *(_QWORD *)&v6;
      }
      else
      {
        v11 = v9 & (*(_QWORD *)&v6 - 1);
      }
      v32 = *(uint64_t ****)(*(_QWORD *)&a2[1] + 8 * v11);
      if (!v32)
        goto LABEL_46;
      v33 = *v32;
      if (!v33)
        goto LABEL_46;
      while (2)
      {
        v34 = (unint64_t)v33[1];
        if (v9 == v34)
        {
          if (v33[2] == (uint64_t *)a1)
          {
            mediaplatform::Data::Data();
            goto LABEL_47;
          }
LABEL_45:
          v33 = (uint64_t **)*v33;
          if (!v33)
            goto LABEL_46;
          continue;
        }
        break;
      }
      if (v10.u32[0] > 1uLL)
      {
        if (v34 >= *(_QWORD *)&v6)
          v34 %= *(_QWORD *)&v6;
      }
      else
      {
        v34 &= *(_QWORD *)&v6 - 1;
      }
      if (v34 == v11)
        goto LABEL_45;
LABEL_46:
      mediaplatform::Data::Data();
LABEL_47:
      mediaplatform::Data::~Data((mediaplatform::Data *)v47);
      v35 = (void *)MEMORY[0x1E0C99D50];
      v36 = mediaplatform::Data::bytes((mediaplatform::Data *)__p);
      objc_msgSend(v35, "dataWithBytes:length:", v36, mediaplatform::Data::length((mediaplatform::Data *)__p));
      v37 = (id)objc_claimAutoreleasedReturnValue();
      mediaplatform::Data::~Data((mediaplatform::Data *)__p);
      return v37;
    default:
      objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], CFSTR("unknown property type"), 0);
      v45 = (id)objc_claimAutoreleasedReturnValue();
      objc_exception_throw(v45);
  }
}

void sub_193BA089C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  __break(1u);
}

void sub_193BA0A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

_QWORD *std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::find<mlcore::ModelProperty<long long> *>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void sub_193BA1178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_193BA2AB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193BA2E68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193BA2F24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<long,MPIdentifierSet * {__strong}>,std::__map_value_compare<long,std::__value_type<long,MPIdentifierSet * {__strong}>,std::less<long>,true>,std::allocator<std::__value_type<long,MPIdentifierSet * {__strong}>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x30uLL);
    v9[4] = *a3;
    v9[5] = 0;
    std::__tree<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::__map_value_compare<long long,std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

uint64_t *std::__tree<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::__map_value_compare<long long,std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void sub_193BA3224(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  __break(1u);
}

void sub_193BA33D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_193BA36D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v24;
  void *v25;
  void *v26;
  void **p_p;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;

  if (a2 == 2)
  {
    v24 = __cxa_begin_catch(a1);
    v25 = (void *)MEMORY[0x1E0C99DA0];
    v26 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a9);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v24 + 24))(&__p, v24, &a9);
    if (a21 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v26, "stringWithUTF8String:", p_p);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v28, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();

    if (a21 < 0)
      operator delete(__p);
    objc_exception_throw(v29);
  }
  if (a2 == 1)
  {
    v30 = __cxa_begin_catch(a1);
    v31 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v32, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v33);
  }
  _Unwind_Resume(a1);
}

void sub_193BA3828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193BA3AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  void *v30;
  void *v31;
  void *v32;
  void **p_p;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;

  if (a2 == 2)
  {
    v30 = __cxa_begin_catch(a1);
    v31 = (void *)MEMORY[0x1E0C99DA0];
    v32 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a11);
    (*(void (**)(void ***__return_ptr, void *, void **))(*(_QWORD *)v30 + 24))(&__p, v30, &a11);
    if (a26 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v32, "stringWithUTF8String:", p_p);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v34, 0);
    v35 = (id)objc_claimAutoreleasedReturnValue();

    if (a26 < 0)
      operator delete(__p);
    objc_exception_throw(v35);
  }
  if (a2 == 1)
  {
    v36 = __cxa_begin_catch(a1);
    v37 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v36 + 16))(v36));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v38, 0);
    v39 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v39);
  }

  _Unwind_Resume(a1);
}

void sub_193BA3E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_193BA457C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void **__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v33;
  void *v34;
  void *v35;
  void **p_p;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;

  if (a2 == 2)
  {
    v33 = __cxa_begin_catch(a1);
    v34 = (void *)MEMORY[0x1E0C99DA0];
    v35 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a12);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v33 + 24))(&__p, v33, &a12);
    if (a26 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v35, "stringWithUTF8String:", p_p);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v37, 0);
    v38 = (id)objc_claimAutoreleasedReturnValue();

    if (a26 < 0)
      operator delete(__p);
    objc_exception_throw(v38);
  }
  if (a2 == 1)
  {
    v39 = __cxa_begin_catch(a1);
    v40 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v39 + 16))(v39));
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v41, 0);
    v42 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v42);
  }

  _Unwind_Resume(a1);
}

void sub_193BA4970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ___ZL24_MPMLInitPropertySongMapv_block_invoke(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4, void *a5)
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  unsigned __int8 *v14;
  void *v15;
  void *__p[2];
  char v17;
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];

  v8 = a2;
  v9 = a5;
  objc_msgSend(v8, "mediaLibrary");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "uniqueIdentifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = ___ZL24_MPMLInitPropertySongMapv_block_invoke_2;
  v20[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v20[4] = a3;
  v20[5] = a4;
  objc_msgSend(v9, "setLibraryIdentifiersWithDatabaseID:block:", v11, v20);
  objc_msgSend(v8, "personID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v13, "length"))
  {
    v19[0] = v12;
    v19[1] = 3221225472;
    v19[2] = ___ZL24_MPMLInitPropertySongMapv_block_invoke_3;
    v19[3] = &__block_descriptor_48_e45_v16__0___MPMutablePersonalStoreIdentifiers__8l;
    v19[4] = a3;
    v19[5] = a4;
    objc_msgSend(v9, "setPersonalStoreIdentifiersWithPersonID:block:", v13, v19);
  }
  v18[0] = v12;
  v18[1] = 3221225472;
  v18[2] = ___ZL24_MPMLInitPropertySongMapv_block_invoke_4;
  v18[3] = &__block_descriptor_48_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v18[4] = a3;
  v18[5] = a4;
  objc_msgSend(v9, "setUniversalStoreIdentifiersWithBlock:", v18);
  std::string::basic_string[abi:ne180100]<0>(__p, "excludeFromShuffle");
  v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setShouldExcludeFromShuffle:", objc_msgSend(v15, "BOOLValue"));

  if (v17 < 0)
    operator delete(__p[0]);

}

void sub_193BA4F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_193BA50C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void ___ZL24_MPMLInitPropertySongMapv_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  void *v9;
  void *__p[2];
  char v11;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "cloudID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setCloudID:", objc_msgSend(v6, "unsignedLongLongValue"));

  if (v11 < 0)
    operator delete(__p[0]);
  v7 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeCloudAlbumID");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v7, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), *(int8x8_t **)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setCloudAlbumID:", v9);

  if (v11 < 0)
    operator delete(__p[0]);

}

void sub_193BA58C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL24_MPMLInitPropertySongMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  void *v9;
  void *__p[2];
  char v11;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v11 < 0)
    operator delete(__p[0]);
  v7 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "syncID");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v7, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), *(int8x8_t **)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setSyncID:", objc_msgSend(v9, "longLongValue"));

  if (v11 < 0)
    operator delete(__p[0]);

}

void sub_193BA5A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(*(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *a2;
  *a2 = 0;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    operator delete(v7);
  v10 = a2[2];
  v9 = a2 + 2;
  v8 = v10;
  v11 = *(v9 - 1);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  v12 = v9[1];
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v8 + 8);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    *v9 = 0;
    v9[1] = 0;
  }
}

void ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "cloudID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setCloudID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193BA5CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  void *v9;
  void *__p[2];
  char v11;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v11 < 0)
    operator delete(__p[0]);
  v7 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "syncID");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v7, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), *(int8x8_t **)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setSyncID:", objc_msgSend(v9, "longLongValue"));

  if (v11 < 0)
    operator delete(__p[0]);

}

void sub_193BA5E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<std::unordered_map<std::string,mlcore::ModelPropertyBase *>>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::~__hash_table(a1 + 24);
}

void sub_193BA5F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::UnaryPredicate<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

id _MPMLKeyForEntityClass(uint64_t a1)
{
  void *v1;
  mediaplatform::DatabaseTableBase *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)MEMORY[0x1E0CB3940];
  v2 = (mediaplatform::DatabaseTableBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v3 = mediaplatform::DatabaseTableBase::name(v2);
  if (*(char *)(v3 + 23) >= 0)
    v4 = v3;
  else
    v4 = *(_QWORD *)v3;
  objc_msgSend(v1, "stringWithUTF8String:", v4);
  return (id)objc_claimAutoreleasedReturnValue();
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_9(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193BA6AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_25(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  int v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "likedState");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "intValue");

  if (v13 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v9 == 3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193BA6BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_24(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  int v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "likedState");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "intValue");

  if (v13 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v9 == 2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193BA6CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_22(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocalConstraints");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "numberWithUnsignedInteger:", (int)objc_msgSend(v9, "intValue"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 < 0)
    operator delete(__p[0]);

  return v10;
}

void sub_193BA6DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_21(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocalStatusReason");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "numberWithUnsignedInteger:", (int)objc_msgSend(v9, "intValue"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 < 0)
    operator delete(__p[0]);

  return v10;
}

void sub_193BA6EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_20(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *__p[2];
  char v15;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocalStatus");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "intValue") + 1;
  if (v10 >= 7)
    v11 = 0;
  else
    v11 = v10 - 1;
  objc_msgSend(v7, "numberWithInteger:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15 < 0)
    operator delete(__p[0]);

  return v12;
}

void sub_193BA6F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_18(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  unsigned __int8 *v6;
  void *v7;
  int v8;
  unsigned __int8 *v9;
  void *v10;
  unsigned __int8 *v11;
  void *v12;
  unsigned __int8 *v13;
  void *v14;
  unsigned __int8 *v15;
  void *v16;
  int v17;
  unsigned __int8 *v18;
  void *v19;
  int v20;
  unsigned __int8 *v21;
  void *v22;
  char v23;
  unsigned __int8 *v24;
  void *v25;
  int v26;
  unsigned __int8 *v27;
  void *v28;
  int v29;
  unsigned __int8 *v30;
  void *v31;
  int v32;
  unsigned __int8 *v33;
  void *v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  int v47;
  int v48;
  int v49;
  id v50;
  void *__p[2];
  char v52;

  v50 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "isSmart");
  v6 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v6 + 5), a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "BOOLValue");

  if (v52 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isGenius");
  v9 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v9 + 5), a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = objc_msgSend(v10, "BOOLValue");

  if (v52 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isFolder");
  v11 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v11 + 5), a4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = objc_msgSend(v12, "BOOLValue");

  if (v52 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "shouldDisplayIndex");
  v13 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v13)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v13 + 5), a4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = objc_msgSend(v14, "BOOLValue");

  if (v52 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isPersonalMix");
  v15 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v15)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v15 + 5), a4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "BOOLValue");

  if (v52 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isFavoriteSongsPlaylist");
  v18 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v18)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v18 + 5), a4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "BOOLValue");

  if (v52 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isExternalVendorPlaylist");
  v21 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v21)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v21 + 5), a4);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(v22, "BOOLValue");

  if (v52 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isOwner");
  v24 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v24)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v24 + 5), a4);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "BOOLValue");

  if (v52 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isPublic");
  v27 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v27)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v27 + 5), a4);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend(v28, "BOOLValue");

  if (v52 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isEditorial");
  v30 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v30)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v30 + 5), a4);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = objc_msgSend(v31, "BOOLValue");

  if (v52 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isUserShared");
  v33 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v33)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v33 + 5), a4);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend(v34, "BOOLValue");

  if (v52 < 0)
    operator delete(__p[0]);
  v36 = v48 | v49 | v20;
  v37 = 9;
  if (v49)
    v37 = 2;
  if (v48)
    v37 = 3;
  v38 = v36 | v8 | v47;
  v39 = 8;
  if (v8)
    v39 = 1;
  if (v36)
    v40 = v37;
  else
    v40 = v39;
  v41 = v38 | v17 | v23;
  v42 = 5;
  if (v17)
    v42 = 7;
  if (!v38)
    v40 = v42;
  v43 = 6;
  if (!(v35 | v26 & v29))
    v43 = 0;
  if (v32)
    v43 = 4;
  if ((v41 & 1) != 0)
    v44 = v40;
  else
    v44 = v43;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v44);
  v45 = (void *)objc_claimAutoreleasedReturnValue();

  return v45;
}

void sub_193BA74F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_17()
{
  return MEMORY[0x1E0C9AAA0];
}

uint64_t ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_16()
{
  return MEMORY[0x1E0C9AAB0];
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_11(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "isHidden");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "numberWithBool:", objc_msgSend(v9, "BOOLValue") ^ 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 < 0)
    operator delete(__p[0]);

  return v10;
}

void sub_193BA768C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_10(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  char v8;
  void *v9;
  unsigned __int8 *v10;
  void *v11;
  char v12;
  uint64_t v13;
  unsigned __int8 *v14;
  void *v15;
  char v16;
  unsigned __int8 *v17;
  void *v18;
  unsigned __int8 *v19;
  void *v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  void *v24;
  unsigned __int8 *v25;
  void *v26;
  int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  void *v30;
  unsigned __int8 *v31;
  void *v32;
  uint64_t v33;
  void *v35[2];
  char v36;
  void *__p[2];
  char v38;

  v6 = a2;
  objc_msgSend(v6, "mediaLibrary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isHomeSharingLibrary");

  if ((v8 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "isFavoriteSongsPlaylist");
    v10 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (!v10)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v10 + 5), a4);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "BOOLValue");

    if (v38 < 0)
    {
      operator delete(__p[0]);
      if ((v12 & 1) != 0)
        goto LABEL_6;
    }
    else if ((v12 & 1) != 0)
    {
LABEL_6:
      v13 = 0;
LABEL_44:
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v13);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_45;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "isSmart");
    v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (!v14)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), a4);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v15, "BOOLValue") & 1) != 0)
    {
      v16 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "isGenius");
      v17 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)v35);
      if (!v17)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v17 + 5), a4);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v18, "BOOLValue");

      if (v36 < 0)
        operator delete(v35[0]);
    }

    if (v38 < 0)
    {
      operator delete(__p[0]);
      if ((v16 & 1) != 0)
        goto LABEL_16;
    }
    else if ((v16 & 1) != 0)
    {
LABEL_16:
      v13 = 2;
      goto LABEL_44;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "isSubscribed");
    v19 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (!v19)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v19 + 5), a4);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v20, "BOOLValue");

    if (v38 < 0)
      operator delete(__p[0]);
    if (v21)
      v22 = 0;
    else
      v22 = 2;
    std::string::basic_string[abi:ne180100]<0>(__p, "isOwner");
    v23 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (!v23)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v23 + 5), a4);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v24, "BOOLValue"))
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "isCollaborative");
      v25 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)v35);
      if (!v25)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v25 + 5), a4);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend(v26, "BOOLValue");

      if (v36 < 0)
        operator delete(v35[0]);
    }
    else
    {
      v27 = 0;
    }

    if (v38 < 0)
      operator delete(__p[0]);
    if (v27)
      v28 = 2;
    else
      v28 = v22;
    std::string::basic_string[abi:ne180100]<0>(__p, "isTracklistUserEditable");
    v29 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (!v29)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v29 + 5), a4);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v30, "BOOLValue"))
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "isFolder");
      v31 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)v35);
      if (!v31)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v31 + 5), a4);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend(v32, "BOOLValue") ^ 1;

      if (v36 < 0)
        operator delete(v35[0]);
    }
    else
    {
      v33 = 0;
    }

    if (v38 < 0)
      operator delete(__p[0]);
    v13 = v33 | v28;
    goto LABEL_44;
  }
  v9 = &unk_1E31E4DF8;
LABEL_45:

  return v9;
}

void sub_193BA7AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;

  if (a14 < 0)
    operator delete(__p);

  if (a20 < 0)
    operator delete(a15);

  _Unwind_Resume(a1);
}

id ___ZL27_MPMLInitPropertyCuratorMapv_block_invoke_4(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13 < 0)
    operator delete(__p[0]);
  if (!objc_msgSend(v8, "length"))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "externalVendorName");
    v9 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (!v9)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v9 + 5), a4);
    v10 = objc_claimAutoreleasedReturnValue();

    if (v13 < 0)
      operator delete(__p[0]);
    v8 = (void *)v10;
  }

  return v8;
}

void sub_193BA7C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void ___ZL27_MPMLInitPropertyCuratorMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", -objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193BA7D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::PropertiesQuery>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

id ___ZL36_MPMLInitPropertyPlaybackPositionMapv_block_invoke_6(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "stopTime");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  if (v9 < 1)
  {
    v10 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)v9 / 1000.0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v10;
}

void sub_193BA862C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL36_MPMLInitPropertyPlaybackPositionMapv_block_invoke_5(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *__p[2];
  char v12;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "startTime");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)objc_msgSend(v8, "longLongValue") / 1000.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_193BA872C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL36_MPMLInitPropertyPlaybackPositionMapv_block_invoke_4(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "cloudKVSKey");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193BA87F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL36_MPMLInitPropertyPlaybackPositionMapv_block_invoke_3(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *__p[2];
  char v12;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "cloudKVSBookmarkTime");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)objc_msgSend(v8, "longLongValue") / 1000.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_193BA88E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL36_MPMLInitPropertyPlaybackPositionMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", -objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193BA89BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL36_MPMLInitPropertyPlaybackPositionMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v10 = a5;
  objc_msgSend(a2, "mediaLibrary");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "uniqueIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZL36_MPMLInitPropertyPlaybackPositionMapv_block_invoke_2;
  v11[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v11[4] = a3;
  v11[5] = a4;
  objc_msgSend(v10, "setLibraryIdentifiersWithDatabaseID:block:", v9, v11);

}

void sub_193BA8A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id ___ZL36_MPMLInitPropertyHomeSharingAssetMapv_block_invoke_4(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned __int8 *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *__p[2];
  char v22;

  v6 = a2;
  objc_msgSend(v6, "mediaLibrary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "isHomeSharingLibrary"))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "location");
    v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (!v8)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v22 < 0)
      operator delete(__p[0]);
    objc_msgSend(MEMORY[0x1E0CB3500], "punctuationCharacterSet");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringByTrimmingCharactersInSet:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    std::string::basic_string[abi:ne180100]<0>(__p, "homeSharingID");
    v12 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (!v12)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v12 + 5), a4);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "unsignedLongLongValue");

    if (v22 < 0)
      operator delete(__p[0]);
    objc_msgSend(MEMORY[0x1E0D335D0], "requestWithDatabaseID:itemID:format:", objc_msgSend(v7, "homeSharingDatabaseID"), v14, v11);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)MEMORY[0x1E0CB3998];
    objc_msgSend(v7, "URLForHomeSharingRequest:", v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "componentsWithURL:resolvingAgainstBaseURL:", v17, 1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v18, "setScheme:", CFSTR("home-sharing"));
    objc_msgSend(v18, "URL");
    v19 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v19 = 0;
  }

  return v19;
}

void sub_193BA8CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_193BA8D48()
{
  JUMPOUT(0x193BA8D3CLL);
}

void ___ZL36_MPMLInitPropertyHomeSharingAssetMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", -objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193BA8DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL36_MPMLInitPropertyHomeSharingAssetMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v10 = a5;
  objc_msgSend(a2, "mediaLibrary");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "uniqueIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZL36_MPMLInitPropertyHomeSharingAssetMapv_block_invoke_2;
  v11[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v11[4] = a3;
  v11[5] = a4;
  objc_msgSend(v10, "setLibraryIdentifiersWithDatabaseID:block:", v9, v11);

}

void sub_193BA8ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id ___ZL30_MPMLInitPropertyStoreAssetMapv_block_invoke_6(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  int v9;
  unsigned __int8 *v10;
  void *v11;
  int v12;
  void *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  void *v16;
  void *__p[2];
  char v19;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "episodeType");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "intValue");

  if (v19 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "endpointType");
  v10 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v10 + 5), a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "integerValue");

  if (v19 < 0)
    operator delete(__p[0]);
  v13 = (void *)MEMORY[0x1E0CB37E8];
  if (v12 == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "isAUC");
    v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (!v14)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), a4);
    a3 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    v15 = (v9 != 4) & ~objc_msgSend(a3, "BOOLValue");
  }
  else
  {
    v15 = 0;
  }
  objc_msgSend(v13, "numberWithBool:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 == 3)
  {

    if (v19 < 0)
      operator delete(__p[0]);
  }

  return v16;
}

void sub_193BA90A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id ___ZL30_MPMLInitPropertyStoreAssetMapv_block_invoke_5(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  int v9;
  unsigned __int8 *v10;
  void *v11;
  int v12;
  unsigned __int8 *v13;
  void *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  void *v20;
  unsigned __int8 *v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v30[2];
  char v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *__p[2];
  char v37;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "cloudAssetAvailable");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "BOOLValue");

  if (v37 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "endpointType");
  v10 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v10 + 5), a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "integerValue");

  if (v37 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeCloudID");
  v13 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v13)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v13 + 5), a4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "longLongValue");
  std::string::basic_string[abi:ne180100]<0>(v34, "storeAdamID");
  v16 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)v34);
  if (!v16)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v16 + 5), a4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "longLongValue");
  std::string::basic_string[abi:ne180100]<0>(v32, "matchRedownloadParams");
  v19 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)v32);
  if (!v19)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v19 + 5), a4);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  std::string::basic_string[abi:ne180100]<0>(v30, "purchaseHistoryRedownloadParams");
  v21 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)v30);
  if (!v21)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v21 + 5), a4);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v20;
  v24 = v22;
  switch(v12)
  {
    case 0:
      if (v15 && objc_msgSend(v23, "length"))
        goto LABEL_14;
      if (!v18)
        goto LABEL_19;
      v25 = objc_msgSend(v24, "length") != 0;
      break;
    case 1:
      v25 = 1;
      break;
    case 2:
LABEL_14:
      v25 = 2;
      break;
    case 3:
      v25 = 3;
      break;
    default:
LABEL_19:
      v25 = 0;
      break;
  }

  if (v31 < 0)
    operator delete(v30[0]);

  if (v33 < 0)
    operator delete(v32[0]);

  if (v35 < 0)
    operator delete(v34[0]);

  if (v37 < 0)
    operator delete(__p[0]);
  v26 = 3;
  if (!v9)
    v26 = 0;
  if (v25 == 3)
    v27 = v26;
  else
    v27 = v25;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  return v28;
}

void sub_193BA9434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  if (a14 < 0)
    operator delete(__p);

  if (a20 < 0)
    operator delete(a15);

  if (a26 < 0)
    operator delete(a21);

  if (a32 < 0)
    operator delete(a27);

  _Unwind_Resume(a1);
}

id ___ZL30_MPMLInitPropertyStoreAssetMapv_block_invoke_3(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  unsigned __int8 *v9;
  void *v10;
  unsigned __int8 *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  unsigned __int8 *v15;
  void *v16;
  id v17;
  void *__p[2];
  char v20;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "matchRedownloadParams");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "purchaseHistoryRedownloadParams");
  v9 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v9 + 5), a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeCloudID");
  v11 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v11 + 5), a4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "unsignedLongLongValue");

  if (v20 < 0)
  {
    operator delete(__p[0]);
    if (v13)
    {
LABEL_10:
      if (v8)
        v14 = v8;
      else
        v14 = v10;
LABEL_18:
      v17 = v14;
      goto LABEL_19;
    }
  }
  else if (v13)
  {
    goto LABEL_10;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "purchaseHistoryID");
  v15 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v15)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v15 + 5), a4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (id)objc_msgSend(v16, "unsignedLongLongValue");

  if (v20 < 0)
    operator delete(__p[0]);
  v14 = v10;
  if (v17)
    goto LABEL_18;
LABEL_19:

  return v17;
}

void sub_193BA96E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_193BA9744(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x193BA9734);
}

void sub_193BA975C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x193BA9738);
}

void ___ZL30_MPMLInitPropertyStoreAssetMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", -objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193BA9818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL30_MPMLInitPropertyStoreAssetMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v10 = a5;
  objc_msgSend(a2, "mediaLibrary");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "uniqueIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZL30_MPMLInitPropertyStoreAssetMapv_block_invoke_2;
  v11[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v11[4] = a3;
  v11[5] = a4;
  objc_msgSend(v10, "setLibraryIdentifiersWithDatabaseID:block:", v9, v11);

}

void sub_193BA98F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id ___ZL30_MPMLInitPropertyItemArtistMapv_block_invoke_6(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193BA99B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL30_MPMLInitPropertyItemArtistMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193BA9A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyFileAssetMapv_block_invoke_6(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  int v9;
  void *v10;
  id v11;
  void *__p[2];
  char v14;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "hasLoFiStreamingAsset");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "BOOLValue");

  if (v14 < 0)
    operator delete(__p[0]);
  if (v9)
    v10 = &unk_1E31E4DC8;
  else
    v10 = &unk_1E31E4DE0;
  v11 = v10;

  return v11;
}

void sub_193BA9B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyFileAssetMapv_block_invoke_5(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *__p[2];
  char v14;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "protected");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "longLongValue");

  if (v14 < 0)
    operator delete(__p[0]);
  if (v9 == 1)
    v10 = 1;
  else
    v10 = 2 * (v9 == 2);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

void sub_193BA9C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyFileAssetMapv_block_invoke_4(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned __int8 *v13;
  void *v14;
  unsigned __int8 *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *__p[2];
  char v24;
  _QWORD v25[4];

  v25[3] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "hasStreamingAsset");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "BOOLValue");

  if (v24 < 0)
  {
    operator delete(__p[0]);
    if (v9)
      goto LABEL_4;
LABEL_17:
    v21 = 0;
    goto LABEL_18;
  }
  if (!v9)
    goto LABEL_17;
LABEL_4:
  objc_msgSend(v6, "mediaLibrary");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "ml3Library");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "mediaFolderPath");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  std::string::basic_string[abi:ne180100]<0>(__p, "baseLocationPath");
  v13 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v13)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v13 + 5), a4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "location");
  v15 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v15)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v15 + 5), a4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  if (objc_msgSend(v12, "length") && objc_msgSend(v14, "length") && objc_msgSend(v16, "length"))
  {
    v17 = (void *)MEMORY[0x1E0CB3940];
    v25[0] = v12;
    v25[1] = v14;
    v25[2] = v16;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v25, 3);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "pathWithComponents:", v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "stringByDeletingPathExtension");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "stringByAppendingPathExtension:", CFSTR("plist"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v21 = 0;
  }

LABEL_18:
  return v21;
}

void sub_193BA9F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void ___ZL29_MPMLInitPropertyFileAssetMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", -objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193BAA088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL29_MPMLInitPropertyFileAssetMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v10 = a5;
  objc_msgSend(a2, "mediaLibrary");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "uniqueIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZL29_MPMLInitPropertyFileAssetMapv_block_invoke_2;
  v11[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v11[4] = a3;
  v11[5] = a4;
  objc_msgSend(v10, "setLibraryIdentifiersWithDatabaseID:block:", v9, v11);

}

void sub_193BAA164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZL26_MPMLInitPropertyLyricsMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", -objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193BAA234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL26_MPMLInitPropertyLyricsMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v10 = a5;
  objc_msgSend(a2, "mediaLibrary");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "uniqueIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZL26_MPMLInitPropertyLyricsMapv_block_invoke_2;
  v11[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v11[4] = a3;
  v11[5] = a4;
  objc_msgSend(v10, "setLibraryIdentifiersWithDatabaseID:block:", v9, v11);

}

void sub_193BAA310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id ___ZL26_MPMLInitPropertyArtistMapv_block_invoke_9(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193BAA3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL26_MPMLInitPropertyArtistMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193BAA49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyGenreMapv_block_invoke_7(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193BAA568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyGenreMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193BAA634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyGenreMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v10 = a5;
  objc_msgSend(a2, "mediaLibrary");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "uniqueIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZL25_MPMLInitPropertyGenreMapv_block_invoke_2;
  v11[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v11[4] = a3;
  v11[5] = a4;
  objc_msgSend(v10, "setLibraryIdentifiersWithDatabaseID:block:", v9, v11);

}

void sub_193BAA710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_9(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "title");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193BAA7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "albumCloudLibraryID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setCloudAlbumID:", v6);

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193BAA898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  void *v9;
  void *__p[2];
  char v11;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v11 < 0)
    operator delete(__p[0]);
  v7 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "syncID");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v7, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), *(int8x8_t **)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setSyncID:", objc_msgSend(v9, "longLongValue"));

  if (v11 < 0)
    operator delete(__p[0]);

}

void sub_193BAA9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_17(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  NSNumber *v8;
  void *v9;
  void *__p[2];
  char v12;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "volumeNormalization");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (NSNumber *)objc_claimAutoreleasedReturnValue();
  if (v12 < 0)
    operator delete(__p[0]);
  _MPMLVolumeNormalizationFromDatabaseValue(v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_193BAAAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_31(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  int v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "likedState");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "intValue");

  if (v13 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v9 == 3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193BAABBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_25(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  void *v13;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(v17, "hasNonPurgeableAsset");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)v17);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "BOOLValue");
  if ((v10 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "isStoreRedownloadable");
    v12 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (!v12)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v12 + 5), a4);
    a4 = (int8x8_t *)objc_claimAutoreleasedReturnValue();
    v11 = -[int8x8_t BOOLValue](a4, "BOOLValue");
  }
  objc_msgSend(v7, "numberWithBool:", v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v10 & 1) == 0)
  {

    if (v16 < 0)
      operator delete(__p[0]);
  }

  if (v18 < 0)
    operator delete(v17[0]);

  return v13;
}

void sub_193BAAD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;

  if (a14 < 0)
    operator delete(__p);

  if (a20 < 0)
    operator delete(a15);

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_21(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  unint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *__p[2];
  char v19;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "hlsAudioCapability");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "integerValue");

  if (v19 < 0)
    operator delete(__p[0]);
  +[MPCloudController sharedCloudController](MPCloudController, "sharedCloudController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isEnhancedAudioAvailable");

  if (v11)
    v12 = (v9 >> 2) & 8 | (16 * (v9 & 3)) | (v9 >> 1) & 2 | (v9 >> 2) & 4;
  else
    v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "masteredForiTunes");
  v13 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v13)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v13 + 5), a4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "BOOLValue");

  if (v19 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v12 | v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

void sub_193BAAEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_19(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *__p[2];
  char v12;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "time");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)objc_msgSend(v8, "longLongValue") / 1000.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_193BAB01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_18(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  double v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "relativeVolume");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13 < 0)
    operator delete(__p[0]);
  *(float *)&v9 = (float)((float)((float)(unint64_t)(objc_msgSend(v8, "integerValue") + 1000) / 2000.0) * 2.0)
                + 0.0;
  if (*(float *)&v9 < 0.0)
    *(float *)&v9 = 0.0;
  if (*(float *)&v9 > 2.0)
    *(float *)&v9 = 2.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193BAB134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_13(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "trackNumber");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193BAB1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_11(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "title");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193BAB2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

_QWORD *std::map<long,MPIdentifierSet * {__strong}>::at(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  if (!a1)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v2 = a1[4];
      if (v2 <= a2)
        break;
      a1 = (_QWORD *)*a1;
      if (!a1)
        goto LABEL_8;
    }
    if (v2 >= a2)
      return a1 + 5;
    a1 = (_QWORD *)a1[1];
    if (!a1)
      goto LABEL_8;
  }
}

void std::__shared_ptr_emplace<std::vector<std::string>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t std::__shared_ptr_emplace<mlcore::MultiEntityQuery>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_193BAB5C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL26_MPMLInitPropertyArtistMapv_block_invoke_4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "albumArtistCloudUniversalLibraryID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setCloudArtistID:", v6);

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193BAC0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4, void *a5)
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char isKindOfClass;
  void *v16;
  unsigned __int8 *v17;
  void *v18;
  int v19;
  int v20;
  void *v21;
  void *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  void *v25;
  void *__p[2];
  char v27;
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];

  v8 = a2;
  v9 = a5;
  objc_msgSend(v8, "mediaLibrary");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "uniqueIdentifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = MEMORY[0x1E0C809B0];
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_2;
  v30[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v30[4] = a3;
  v30[5] = a4;
  objc_msgSend(v9, "setLibraryIdentifiersWithDatabaseID:block:", v11, v30);

  objc_msgSend(v8, "personID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v13, "length"))
  {
    v29[0] = v12;
    v29[1] = 3221225472;
    v29[2] = ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_3;
    v29[3] = &__block_descriptor_48_e45_v16__0___MPMutablePersonalStoreIdentifiers__8l;
    v29[4] = a3;
    v29[5] = a4;
    objc_msgSend(v9, "setPersonalStoreIdentifiersWithPersonID:block:", v13, v29);
  }
  v28[0] = v12;
  v28[1] = 3221225472;
  v28[2] = ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_4;
  v28[3] = &__block_descriptor_48_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v28[4] = a3;
  v28[5] = a4;
  objc_msgSend(v9, "setUniversalStoreIdentifiersWithBlock:", v28);
  objc_msgSend(v9, "modelKind");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(v9, "modelKind");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v16 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "isFolder");
  v17 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v17)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v17 + 5), a4);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "BOOLValue");

  if (v27 < 0)
    operator delete(__p[0]);
  if (v16)
    v20 = v19;
  else
    v20 = 0;
  if (v20 == 1)
  {
    objc_msgSend(v16, "playlistEntryKind");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    +[MPModelPlaylist kindWithVariants:playlistEntryKind:options:](MPModelPlaylist, "kindWithVariants:playlistEntryKind:options:", 8, v21, objc_msgSend(v16, "options"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setModelKind:", v22);
  }
  else
  {
    if (!v16)
      goto LABEL_17;
    v23 = objc_msgSend(v16, "variants");
    objc_msgSend(v16, "playlistEntryKind");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    +[MPModelPlaylist kindWithVariants:playlistEntryKind:options:](MPModelPlaylist, "kindWithVariants:playlistEntryKind:options:", v23 & 0xFFFFFFFFFFFFFFF7, v21, objc_msgSend(v16, "options"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setModelKind:", v22);
  }

LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(__p, "versionHash");
  v24 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v24)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v24 + 5), a4);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setVersionHash:", v25);

  if (v27 < 0)
    operator delete(__p[0]);

}

void sub_193BAEA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  void *v9;
  void *__p[2];
  char v11;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "cloudUniversalLibraryID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setUniversalCloudLibraryID:", v6);

  if (v11 < 0)
    operator delete(__p[0]);
  v7 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "globalID");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v7, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), *(int8x8_t **)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setGlobalPlaylistID:", v9);

  if (v11 < 0)
    operator delete(__p[0]);

}

void sub_193BAEC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_193BB0484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location)
{
  uint64_t v12;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v12 - 112));
  _Unwind_Resume(a1);
}

void sub_193BB1F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id a40)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a40);
  _Unwind_Resume(a1);
}

void sub_193BB24B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

void sub_193BB460C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_193BB46F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::~__hash_table((uint64_t)&a9);
  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mlcore::ModelPropertyBase *> const&>(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_193BB4798(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_193BB4874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_193BB4F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  void *v57;
  void *v58;
  void *v59;
  void *v62;
  void *v63;
  void *v64;
  void **p_p;
  void *v66;
  id v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a57, 8);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::~__hash_table(a13);
  if (a2 == 2)
  {
    v62 = __cxa_begin_catch(a1);
    v63 = (void *)MEMORY[0x1E0C99DA0];
    v64 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a57);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v62 + 24))(&__p, v62, &a57);
    if (a46 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v64, "stringWithUTF8String:", p_p);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v63, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v66, 0);
    v67 = (id)objc_claimAutoreleasedReturnValue();

    if (a46 < 0)
      operator delete(__p);
    objc_exception_throw(v67);
  }
  if (a2 == 1)
  {
    v68 = __cxa_begin_catch(a1);
    v69 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v68 + 16))(v68));
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v69, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v70, 0);
    v71 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v71);
  }

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(*(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(void **__p)
{
  void **v1;
  void **v2;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0)
        operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<mlcore::ModelPropertyBase *,std::hash<mlcore::ModelPropertyBase *>,std::equal_to<mlcore::ModelPropertyBase *>,std::allocator<mlcore::ModelPropertyBase *>>::__emplace_unique_key_args<mlcore::ModelPropertyBase *,mlcore::ModelPropertyBase * const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *v14 = *v33;
LABEL_72:
    *v33 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    v34 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_193BB5760(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _MPMLGetForeignPropertyMap(uint64_t a1, ModelPropertyBase *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned __int8 *v5;
  ModelPropertyBase *v6;
  uint64_t Property;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  std::string *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v28;

  if (a2)
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)(a1 + 32) = 1065353216;
    v5 = *(unsigned __int8 **)(a3 + 16);
    if (v5)
    {
      v6 = a2;
      v28 = (_QWORD *)(a1 + 16);
      do
      {
        Property = MPMediaLibraryGetProperty(v6, *((ModelPropertyBase **)v5 + 5));
        v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 16));
        v9 = v8;
        v10 = *(_QWORD *)(a1 + 8);
        if (v10)
        {
          v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
          v11.i16[0] = vaddlv_u8(v11);
          v12 = v11.u32[0];
          if (v11.u32[0] > 1uLL)
          {
            v3 = v8;
            if (v8 >= v10)
              v3 = v8 % v10;
          }
          else
          {
            v3 = (v10 - 1) & v8;
          }
          v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
          if (v13)
          {
            v14 = (char *)*v13;
            if (*v13)
            {
              while (1)
              {
                v15 = *((_QWORD *)v14 + 1);
                if (v15 == v9)
                {
                  if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v14 + 16, v5 + 16))
                  {
                    v6 = a2;
                    goto LABEL_46;
                  }
                }
                else
                {
                  if (v12 > 1)
                  {
                    if (v15 >= v10)
                      v15 %= v10;
                  }
                  else
                  {
                    v15 &= v10 - 1;
                  }
                  if (v15 != v3)
                  {
LABEL_20:
                    v6 = a2;
                    break;
                  }
                }
                v14 = *(char **)v14;
                if (!v14)
                  goto LABEL_20;
              }
            }
          }
        }
        v14 = (char *)operator new(0x30uLL);
        *(_QWORD *)v14 = 0;
        *((_QWORD *)v14 + 1) = v9;
        v16 = (std::string *)(v14 + 16);
        if ((char)v5[39] < 0)
        {
          std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)v5 + 2), *((_QWORD *)v5 + 3));
        }
        else
        {
          v17 = *((_OWORD *)v5 + 1);
          *((_QWORD *)v14 + 4) = *((_QWORD *)v5 + 4);
          *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
        }
        *((_QWORD *)v14 + 5) = 0;
        v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
        v19 = *(float *)(a1 + 32);
        if (!v10 || (float)(v19 * (float)v10) < v18)
        {
          v20 = (v10 & (v10 - 1)) != 0;
          if (v10 < 3)
            v20 = 1;
          v21 = v20 | (2 * v10);
          v22 = vcvtps_u32_f32(v18 / v19);
          if (v21 <= v22)
            v23 = v22;
          else
            v23 = v21;
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v23);
          v10 = *(_QWORD *)(a1 + 8);
          if ((v10 & (v10 - 1)) != 0)
          {
            if (v9 >= v10)
              v3 = v9 % v10;
            else
              v3 = v9;
          }
          else
          {
            v3 = (v10 - 1) & v9;
          }
        }
        v24 = *(_QWORD *)a1;
        v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
        if (v25)
        {
          *(_QWORD *)v14 = *v25;
        }
        else
        {
          *(_QWORD *)v14 = *v28;
          *v28 = v14;
          *(_QWORD *)(v24 + 8 * v3) = v28;
          if (!*(_QWORD *)v14)
            goto LABEL_45;
          v26 = *(_QWORD *)(*(_QWORD *)v14 + 8);
          if ((v10 & (v10 - 1)) != 0)
          {
            if (v26 >= v10)
              v26 %= v10;
          }
          else
          {
            v26 &= v10 - 1;
          }
          v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
        }
        *v25 = v14;
LABEL_45:
        ++*(_QWORD *)(a1 + 24);
LABEL_46:
        *((_QWORD *)v14 + 5) = Property;
        v5 = *(unsigned __int8 **)v5;
      }
      while (v5);
    }
  }
  else
  {
    std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map(a1, a3);
  }
}

void sub_193BB5A24(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v2);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_193BB5C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mlcore::ModelPropertyBase *> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_193BB5E34(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mlcore::ModelPropertyBase *> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x30uLL);
  *v15 = 0;
  v15[1] = v8;
  v16 = (std::string *)(v15 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v15[4] = *(_QWORD *)(a3 + 16);
  }
  v15[5] = *(_QWORD *)(a3 + 24);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v15 = *v24;
LABEL_41:
    *v24 = v15;
    goto LABEL_42;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    v25 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
}

void sub_193BB6084(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t MPMediaLibraryGetProperty(ModelPropertyBase *a1, ModelPropertyBase *a2)
{
  return mlcore::GetForeignPropertyBase();
}

void sub_193BB63CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v24;
  void *v25;
  void *v26;
  void **p_p;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v21 - 48);
  if (a2 == 2)
  {
    v24 = __cxa_begin_catch(a1);
    v25 = (void *)MEMORY[0x1E0C99DA0];
    v26 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a9);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v24 + 24))(&__p, v24, &a9);
    if (a21 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v26, "stringWithUTF8String:", p_p);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v28, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();

    if (a21 < 0)
      operator delete(__p);
    objc_exception_throw(v29);
  }
  if (a2 == 1)
  {
    v30 = __cxa_begin_catch(a1);
    v31 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v32, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_193BB71F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_193BB7588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_193BB7850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v32;
  void *v33;
  void *v34;
  void **p_p;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;

  if (a2 == 2)
  {
    v32 = __cxa_begin_catch(a1);
    v33 = (void *)MEMORY[0x1E0C99DA0];
    v34 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a15);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v32 + 24))(&__p, v32, &a15);
    if (a27 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v34, "stringWithUTF8String:", p_p);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v36, 0);
    v37 = (id)objc_claimAutoreleasedReturnValue();

    if (a27 < 0)
      operator delete(__p);
    objc_exception_throw(v37);
  }
  if (a2 == 1)
  {
    v38 = __cxa_begin_catch(a1);
    v39 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38));
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v40, 0);
    v41 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v41);
  }

  _Unwind_Resume(a1);
}

void sub_193BB7D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id a44)
{
  void *v44;
  void *v45;

  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_193BB8010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,void *a29,void *a30,void *a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v38;
  void *v39;
  void *v40;
  void **p_p;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;

  if (a2 == 2)
  {
    v38 = __cxa_begin_catch(a1);
    v39 = (void *)MEMORY[0x1E0C99DA0];
    v40 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a10);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v38 + 24))(&__p, v38, &a10);
    if (a22 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v40, "stringWithUTF8String:", p_p);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v42, 0);
    v43 = (id)objc_claimAutoreleasedReturnValue();

    if (a22 < 0)
      operator delete(__p);
    objc_exception_throw(v43);
  }
  if (a2 == 1)
  {
    v44 = __cxa_begin_catch(a1);
    v45 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v44 + 16))(v44));
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v46, 0);
    v47 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v47);
  }

  _Unwind_Resume(a1);
}

void sub_193BB8460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  v15 = *a3;
  v16 = **a3;
  *((_QWORD *)i + 4) = *((_QWORD *)*a3 + 2);
  *((_OWORD *)i + 1) = v16;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)i + 5) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_193BB86C4(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void sub_193BBAC60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193BBCB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::~__hash_table((uint64_t)&a9);
  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_193BBCC9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void std::__tree<std::__value_type<long,MPIdentifierSet * {__strong}>,std::__map_value_compare<long,std::__value_type<long,MPIdentifierSet * {__strong}>,std::less<long>,true>,std::allocator<std::__value_type<long,MPIdentifierSet * {__strong}>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long,MPIdentifierSet * {__strong}>,std::__map_value_compare<long,std::__value_type<long,MPIdentifierSet * {__strong}>,std::less<long>,true>,std::allocator<std::__value_type<long,MPIdentifierSet * {__strong}>>>::destroy(*a1);
    std::__tree<std::__value_type<long,MPIdentifierSet * {__strong}>,std::__map_value_compare<long,std::__value_type<long,MPIdentifierSet * {__strong}>,std::less<long>,true>,std::allocator<std::__value_type<long,MPIdentifierSet * {__strong}>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

void sub_193BBD674(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_193BBED2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BBEDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BC0370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193BC1A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,id *location,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38)
{

  _Block_object_dispose(&STACK[0x2B0], 8);
  _Block_object_dispose(&STACK[0x340], 8);

  _Unwind_Resume(a1);
}

uint64_t _MPModelObject_Q_getterIMP(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForModelKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "unsignedLongLongValue");
  return v6;
}

void sub_193BC20FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193BC23F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_193BC28CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_193BC2CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BC33B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_193BC36C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_193BC3CB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193BC4C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _MPModelObject_B_setterIMP(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setValue:forModelKey:", v6, v7);

}

void _MPModelObject_q_setterIMP(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setValue:forModelKey:", v6, v7);

}

void _MPModelObject__setterIMP(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v5 = a3;
  v6 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setValue:forModelKey:", v5, v7);

}

void _MPModelObject_Q_setterIMP(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setValue:forModelKey:", v6, v7);

}

void _MPModelObject_f_setterIMP(void *a1, uint64_t a2, float a3)
{
  id v5;
  double v6;
  void *v7;
  id v8;

  v5 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  *(float *)&v6 = a3;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setValue:forModelKey:", v7, v8);

}

void _MPModelObject_d_setterIMP(void *a1, uint64_t a2, double a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setValue:forModelKey:", v6, v7);

}

void sub_193BC949C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x350], 8);
  _Unwind_Resume(a1);
}

void sub_193BC96D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BCA320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_193BCA988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BCAA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BCB6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_193BCC0E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_193BCD39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v46;

  v46 = v44;

  _Unwind_Resume(a1);
}

void sub_193BCE5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_193BCEC60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193BCED18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193BCEDD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193BCEE94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193BCFD40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193BCFDF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193BCFF34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_193BD0D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_26(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  void *__p[2];
  char v15;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocal");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "intValue") + 2;
  if (v10 > 4)
    v11 = 0;
  else
    v11 = qword_193F0C8F0[v10];
  objc_msgSend(v7, "numberWithInteger:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15 < 0)
    operator delete(__p[0]);

  return v12;
}

void sub_193BD1028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_27(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *__p[2];
  char v15;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocalStatus");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "intValue") + 1;
  if (v10 >= 7)
    v11 = 0;
  else
    v11 = v10 - 1;
  objc_msgSend(v7, "numberWithInteger:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15 < 0)
    operator delete(__p[0]);

  return v12;
}

void sub_193BD1120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_29(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocalConstraints");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "numberWithUnsignedInteger:", (int)objc_msgSend(v9, "intValue"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 < 0)
    operator delete(__p[0]);

  return v10;
}

void sub_193BD120C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_30(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  int v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "likedState");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "intValue");

  if (v13 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v9 == 2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193BD12FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_19(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  void *__p[2];
  char v15;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocal");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "intValue") + 2;
  if (v10 > 4)
    v11 = 0;
  else
    v11 = qword_193F0C8F0[v10];
  objc_msgSend(v7, "numberWithInteger:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15 < 0)
    operator delete(__p[0]);

  return v12;
}

void sub_193BD1408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_23(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  char v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "traits");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "intValue");

  if (v13 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", (v9 & 1) << 8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193BD14F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_193BD1710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193BD18F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193BD1CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, _Unwind_Exception *exception_object, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_193BD20A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193BD224C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193BD2548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_193BD27C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{

  _Unwind_Resume(a1);
}

void sub_193BD2A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v26;
  void *v27;
  void *v28;
  void **v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;

  if (a14 < 0)
    operator delete(__p);
  if (a2 == 2)
  {
    v26 = __cxa_begin_catch(exception_object);
    v27 = (void *)MEMORY[0x1E0C99DA0];
    v28 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&__p);
    (*(void (**)(void ***__return_ptr, void *, void **))(*(_QWORD *)v26 + 24))(&a19, v26, &__p);
    if (a24 >= 0)
      v29 = (void **)&a19;
    else
      v29 = a19;
    objc_msgSend(v28, "stringWithUTF8String:", v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v30, 0);
    v31 = (id)objc_claimAutoreleasedReturnValue();

    if (a24 < 0)
      operator delete(a19);
    objc_exception_throw(v31);
  }
  if (a2 == 1)
  {
    v32 = __cxa_begin_catch(exception_object);
    v33 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v32 + 16))(v32));
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v34, 0);
    v35 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v35);
  }
  _Unwind_Resume(exception_object);
}

id MPStoreItemMetadataCacheableStorefrontForStorefront(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  void *v4;

  v1 = a1;
  v2 = objc_msgSend(v1, "rangeOfString:", CFSTR(" "));
  if (v2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v3 = v1;
  }
  else
  {
    objc_msgSend(v1, "substringToIndex:", v2);
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  v4 = v3;

  return v4;
}

uint64_t std::__shared_ptr_emplace<mlcore::InPredicate<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_193BD4058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193BD4204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193BD4D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id ML3CollectionEntityClassForGroupingType()
{
  objc_opt_class();
  return (id)objc_claimAutoreleasedReturnValue();
}

id ML3CollectionEntityClassForMPMediaItemCollectionProperty(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;

  v1 = a1;
  if (ML3CollectionEntityClassForMPMediaItemCollectionProperty_onceToken != -1)
    dispatch_once(&ML3CollectionEntityClassForMPMediaItemCollectionProperty_onceToken, &__block_literal_global_20780);
  objc_msgSend((id)ML3CollectionEntityClassForMPMediaItemCollectionProperty_propertyToClassMap, "objectForKeyedSubscript:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2)
    v2 = (void *)objc_opt_class();
  v4 = v2;

  return v4;
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_8(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  float v10;
  void *v11;
  void *__p[2];
  char v14;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "userRating");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14 < 0)
    operator delete(__p[0]);
  v9 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v8, "floatValue");
  objc_msgSend(v9, "numberWithDouble:", v10 / 100.0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

void sub_193BD50B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t MLMediaTypeForMPMediaType(unsigned int a1)
{
  int v1;
  int v2;

  if ((_BYTE)a1 == 0xFF)
    v1 = 255;
  else
    v1 = 0;
  if ((~(_WORD)a1 & 0xFF00) != 0)
    v2 = v1;
  else
    v2 = v1 | 0xFF00;
  return a1 & 0x3210 | (a1 >> 1) & 2 | (4 * ((a1 >> 1) & 1)) & 0xFFFFF7D7 | (8 * (a1 & 1)) & 0xDF | (32 * ((a1 >> 3) & 1)) & 0xFFFFF7FF | (((a1 >> 8) & 1) << 11) | (a1 >> 2) & 0x100 | (a1 >> 1) & 0x400 | v2;
}

void sub_193BD6F44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t MPMediaTypeForMLMediaType(unsigned int a1)
{
  uint64_t v1;

  v1 = 255;
  if ((_BYTE)a1 != 0xFF)
    v1 = 0;
  if ((~a1 & 0xFF00) == 0)
    v1 |= 0xFF00uLL;
  return v1 | a1 & 0x3210 | (2 * a1) & 4 | (a1 >> 1) & 2 | (a1 >> 3) & 1 | (a1 >> 2) & 8 | (a1 >> 3) & 0x100 | (((a1 >> 8) & 1) << 10) | (2 * a1) & 0x800;
}

void sub_193BD7B14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__CFString *MPCreateLoggableValueForDSID(void *a1)
{
  id v1;
  void *v2;
  char v3;
  __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t *v7;
  ldiv_t v8;
  uint64_t v9;
  char *v10;
  const UInt8 *v11;
  unsigned __int8 *v12;
  char *v13;
  char *v14;
  uint64_t m;
  unsigned int v16;
  char *v17;
  id v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  char *v26;
  char *v27;
  uint64_t j;
  unsigned int v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t quot;
  lldiv_t v34;
  uint64_t v35;
  CFStringRef v36;
  unsigned __int8 *v37;
  char *v38;
  char *v39;
  uint64_t k;
  unsigned int v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  unsigned __int8 *v47;
  char *v48;
  char *v49;
  uint64_t i;
  unsigned int v51;
  char *v52;
  void *v54;
  void *v55;
  _BYTE v56[208];
  _BYTE v57[72];
  _OWORD v58[4];
  uint64_t v59;
  _QWORD v60[3];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0DDBF50], "currentDeviceInfo");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "isInternalBuild");

    v4 = (__CFString *)v1;
    if ((v3 & 1) == 0)
    {
      memset(v56, 0, sizeof(v56));
      CC_SHA1_Init((CC_SHA1_CTX *)v56);
      v5 = objc_retainAutorelease(v4);
      CC_SHA1_Update((CC_SHA1_CTX *)v56, (const void *)-[__CFString UTF8String](v5, "UTF8String"), -[__CFString length](v5, "length"));

      memset(&v57[8], 0, 64);
      *(_QWORD *)v57 = 4001;
      CC_SHA1_Final(&v57[8], (CC_SHA1_CTX *)v56);
      v58[0] = *(_OWORD *)v57;
      v58[1] = *(_OWORD *)&v57[16];
      v58[2] = *(_OWORD *)&v57[32];
      v58[3] = *(_OWORD *)&v57[48];
      v59 = *(_QWORD *)&v57[64];
      if (*(uint64_t *)v57 > 3999)
      {
        if (*(uint64_t *)v57 > 4255)
        {
          if (*(_QWORD *)v57 == 4256)
          {
            v47 = (unsigned __int8 *)v58 + 8;
            v48 = (char *)malloc_type_calloc(0x40uLL, 1uLL, 0x100004077774924uLL);
            v49 = v48;
            for (i = 0; i != 64; i += 2)
            {
              v51 = *v47++;
              v52 = &v48[i];
              *v52 = MSVFastHexStringFromBytes_hexCharacters_47995[(unint64_t)v51 >> 4];
              v52[1] = MSVFastHexStringFromBytes_hexCharacters_47995[v51 & 0xF];
            }
            v18 = objc_alloc(MEMORY[0x1E0CB3940]);
            v19 = v49;
            v20 = 64;
          }
          else
          {
            if (*(_QWORD *)v57 != 4512)
              goto LABEL_53;
            v25 = (unsigned __int8 *)v58 + 8;
            v26 = (char *)malloc_type_calloc(0x80uLL, 1uLL, 0x100004077774924uLL);
            v27 = v26;
            for (j = 0; j != 128; j += 2)
            {
              v29 = *v25++;
              v30 = &v26[j];
              *v30 = MSVFastHexStringFromBytes_hexCharacters_47995[(unint64_t)v29 >> 4];
              v30[1] = MSVFastHexStringFromBytes_hexCharacters_47995[v29 & 0xF];
            }
            v18 = objc_alloc(MEMORY[0x1E0CB3940]);
            v19 = v27;
            v20 = 128;
          }
        }
        else if (*(_QWORD *)v57 == 4000)
        {
          v37 = (unsigned __int8 *)v58 + 8;
          v38 = (char *)malloc_type_calloc(0x20uLL, 1uLL, 0x100004077774924uLL);
          v39 = v38;
          for (k = 0; k != 32; k += 2)
          {
            v41 = *v37++;
            v42 = &v38[k];
            *v42 = MSVFastHexStringFromBytes_hexCharacters_47995[(unint64_t)v41 >> 4];
            v42[1] = MSVFastHexStringFromBytes_hexCharacters_47995[v41 & 0xF];
          }
          v18 = objc_alloc(MEMORY[0x1E0CB3940]);
          v19 = v39;
          v20 = 32;
        }
        else
        {
          if (*(_QWORD *)v57 != 4001)
            goto LABEL_53;
          v12 = (unsigned __int8 *)v58 + 8;
          v13 = (char *)malloc_type_calloc(0x28uLL, 1uLL, 0x100004077774924uLL);
          v14 = v13;
          for (m = 0; m != 40; m += 2)
          {
            v16 = *v12++;
            v17 = &v13[m];
            *v17 = MSVFastHexStringFromBytes_hexCharacters_47995[(unint64_t)v16 >> 4];
            v17[1] = MSVFastHexStringFromBytes_hexCharacters_47995[v16 & 0xF];
          }
          v18 = objc_alloc(MEMORY[0x1E0CB3940]);
          v19 = v14;
          v20 = 40;
        }
      }
      else
      {
        if (*(uint64_t *)v57 <= 2999)
        {
          if (*(_QWORD *)v57 == 1000)
          {
            v31 = *((_QWORD *)&v58[0] + 1);
            v32 = (char *)&v61 + 1;
            quot = *((_QWORD *)&v58[0] + 1);
            do
            {
              v34 = lldiv(quot, 10);
              quot = v34.quot;
              if (v34.rem >= 0)
                LOBYTE(v35) = v34.rem;
              else
                v35 = -v34.rem;
              *(v32 - 2) = v35 + 48;
              v11 = (const UInt8 *)(v32 - 2);
              --v32;
            }
            while (v34.quot);
            if (v31 < 0)
            {
              *(v32 - 2) = 45;
              v11 = (const UInt8 *)(v32 - 2);
            }
            v10 = (char *)((char *)&v61 - (char *)v11);
            goto LABEL_39;
          }
          if (*(_QWORD *)v57 == 2000)
          {
            v6 = DWORD2(v58[0]);
            v7 = &v61;
            do
            {
              v8 = ldiv(v6, 10);
              v6 = v8.quot;
              if (v8.rem >= 0)
                LOBYTE(v9) = v8.rem;
              else
                v9 = -v8.rem;
              *((_BYTE *)v7 - 1) = v9 + 48;
              v7 = (uint64_t *)((char *)v7 - 1);
            }
            while (v8.quot);
            v10 = (char *)((char *)&v61 - (char *)v7);
            v11 = (const UInt8 *)v7;
LABEL_39:
            v36 = CFStringCreateWithBytes(0, v11, (CFIndex)v10, 0x8000100u, 0);
LABEL_50:
            v4 = (__CFString *)v36;
LABEL_51:

            goto LABEL_52;
          }
LABEL_53:
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler", 4001, *(_QWORD *)v56);
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString * _Nonnull _MSVHashGetDigest(MSVHash)");
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v54, "handleFailureInFunction:file:lineNumber:description:", v55, CFSTR("MSVHasher+Algorithms.h"), 356, CFSTR("Cannot obtain digest from unknown hasher algorithm"));

          v4 = &stru_1E3163D10;
          goto LABEL_51;
        }
        if (*(_QWORD *)v57 == 3000)
        {
          LODWORD(v60[0]) = bswap32(DWORD2(v58[0]));
          v43 = (char *)malloc_type_calloc(8uLL, 1uLL, 0x100004077774924uLL);
          v44 = 0;
          v45 = v43 + 1;
          do
          {
            v46 = *((unsigned __int8 *)v60 + v44);
            *(v45 - 1) = MSVFastHexStringFromBytes_hexCharacters_47995[v46 >> 4];
            *v45 = MSVFastHexStringFromBytes_hexCharacters_47995[v46 & 0xF];
            v45 += 2;
            ++v44;
          }
          while (v44 != 4);
          v18 = objc_alloc(MEMORY[0x1E0CB3940]);
          v19 = v43;
          v20 = 8;
        }
        else
        {
          if (*(_QWORD *)v57 != 3001)
            goto LABEL_53;
          v60[0] = bswap64(*((unint64_t *)&v58[0] + 1));
          v21 = (char *)malloc_type_calloc(0x10uLL, 1uLL, 0x100004077774924uLL);
          v22 = 0;
          v23 = v21 + 1;
          do
          {
            v24 = *((unsigned __int8 *)v60 + v22);
            *(v23 - 1) = MSVFastHexStringFromBytes_hexCharacters_47995[v24 >> 4];
            *v23 = MSVFastHexStringFromBytes_hexCharacters_47995[v24 & 0xF];
            v23 += 2;
            ++v22;
          }
          while (v22 != 8);
          v18 = objc_alloc(MEMORY[0x1E0CB3940]);
          v19 = v21;
          v20 = 16;
        }
      }
      v36 = (CFStringRef)objc_msgSend(v18, "initWithBytesNoCopy:length:encoding:freeWhenDone:", v19, v20, 4, 1, 4001, *(_QWORD *)v56);
      goto LABEL_50;
    }
  }
  else
  {
    v4 = CFSTR("nil");
  }
LABEL_52:

  return v4;
}

void sub_193BD93E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_193BDA828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  void *v30;

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_193BDA92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193BDAE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193BDB9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BDDB14(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_193BDE6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double MPArtworkRepresentationBestSizeMatchingSize(void *a1, double a2, double a3)
{
  id v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  double v12;
  double v13;
  _BOOL4 v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = *((double *)&MPArtworkCatalogOriginalSize + 1);
  v7 = *(double *)&MPArtworkCatalogOriginalSize;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v17 != v10)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * i), "CGSizeValue");
        v14 = v12 >= v7;
        if (v12 < a2)
          v14 = 1;
        if (v13 >= v6)
          v14 = 1;
        if (v13 < a3)
          v14 = 1;
        if (!v14)
        {
          v6 = v13;
          v7 = v12;
        }
      }
      v9 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v9);
  }

  return v7;
}

void sub_193BE1FB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193BE2494(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193BE2714(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_193BE2978(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193BE2B84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193BE2C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193BE2D1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193BE2E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id __MPGetModelToTranslatorMap()
{
  if (__MPGetModelToTranslatorMap_onceToken != -1)
    dispatch_once(&__MPGetModelToTranslatorMap_onceToken, &__block_literal_global_22181);
  return (id)__MPGetModelToTranslatorMap___MPModelToTranslatorMap;
}

void sub_193BE5928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id _MPMLTranslatorCreateArtworkCatalogBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  __CFString *v15;
  __CFString *v16;
  id v17;
  id v18;
  MPMediaLibraryArtworkRequest *v19;
  const __CFString *v20;
  const __CFString *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD v28[4];
  id v29;
  MPMediaLibraryArtworkRequest *v30;

  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  v19 = -[MPMediaLibraryArtworkRequest initWithLibrary:identifier:entityType:artworkType:mediaType:]([MPMediaLibraryArtworkRequest alloc], "initWithLibrary:identifier:entityType:artworkType:mediaType:", v18, a1, a3, a4, a2);
  if ((objc_msgSend(v18, "isHomeSharingLibrary") & 1) == 0)
  {
    if (!-[__CFString length](v15, "length") && !-[__CFString length](v16, "length"))
    {
      v26 = 0;
      goto LABEL_12;
    }
    if (v15)
      v20 = v15;
    else
      v20 = &stru_1E3163D10;
    -[MPMediaLibraryArtworkRequest setAvailableArtworkToken:](v19, "setAvailableArtworkToken:", v20);
    if (v16)
      v21 = v16;
    else
      v21 = &stru_1E3163D10;
    -[MPMediaLibraryArtworkRequest setFetchableArtworkToken:](v19, "setFetchableArtworkToken:", v21);
    -[MPMediaLibraryArtworkRequest setFetchableArtworkSource:](v19, "setFetchableArtworkSource:", v17);
  }
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = ___ZL40_MPMLTranslatorCreateArtworkCatalogBlockxm17MPMediaEntityType25MPMediaLibraryArtworkTypebP8NSStringS2_P8NSNumberP14MPMediaLibrary_block_invoke;
  v28[3] = &unk_1E315FBE8;
  v29 = v18;
  v30 = v19;
  v22 = (void *)MEMORY[0x19403A810](v28);
  v26 = (void *)MEMORY[0x19403A810](v22, v23, v24, v25);

LABEL_12:
  return v26;
}

void sub_193BE5ABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_193BE5D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_193BE5F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BE6D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v27;
  void *v28;
  void *v29;
  void **p_p;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a2 == 2)
  {
    v27 = __cxa_begin_catch(a1);
    v28 = (void *)MEMORY[0x1E0C99DA0];
    v29 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a10);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v27 + 24))(&__p, v27, &a10);
    if (a22 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v29, "stringWithUTF8String:", p_p);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v31, 0);
    v32 = (id)objc_claimAutoreleasedReturnValue();

    if (a22 < 0)
      operator delete(__p);
    objc_exception_throw(v32);
  }
  if (a2 == 1)
  {
    v33 = __cxa_begin_catch(a1);
    v34 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33));
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v35, 0);
    v36 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v36);
  }

  _Unwind_Resume(a1);
}

void sub_193BE87D0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t a68;
  uint64_t a71;
  uint64_t a72;
  uint64_t a73;
  void *v73;
  uint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  id v82;
  void *v83;
  void *v84;
  void *v85;
  id v86;

  mlcore::LanguageResources::~LanguageResources(&a49);
  a49 = &STACK[0x218];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  v76 = MEMORY[0x1E0D4AF30] + 16;
  a73 = MEMORY[0x1E0D4AF30] + 16;
  a49 = &STACK[0x200];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  a71 = v76;
  a49 = &a72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  a67 = v76;
  a49 = &a68;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);

  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);

  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);

  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);

  if (a2 == 2)
  {
    v77 = __cxa_begin_catch(a1);
    v78 = (void *)MEMORY[0x1E0C99DA0];
    v79 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a67);
    (*(void (**)(void **__return_ptr, void *, uint64_t *))(*(_QWORD *)v77 + 24))(&a49, v77, &a67);
    if (a54 >= 0)
      v80 = &a49;
    else
      v80 = a49;
    objc_msgSend(v79, "stringWithUTF8String:", v80);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v78, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v81, 0);
    v82 = (id)objc_claimAutoreleasedReturnValue();

    if (a54 < 0)
      operator delete(a49);
    objc_exception_throw(v82);
  }
  if (a2 == 1)
  {
    v83 = __cxa_begin_catch(a1);
    v84 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v83 + 16))(v83));
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v84, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v85, 0);
    v86 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v86);
  }
  _Unwind_Resume(a1);
}

void sub_193BE91D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193BE9220(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::vector<std::string>::pointer begin;
  std::string *end;
  std::__split_buffer<std::string>::pointer v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  std::string *v8;
  std::string *value;

  begin = this->__begin_;
  end = this->__end_;
  v4 = __v->__begin_;
  if (end == this->__begin_)
  {
    v5 = __v->__begin_;
  }
  else
  {
    do
    {
      v5 = v4 - 1;
      v6 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
      v4[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v4[-1].__r_.__value_.__l.__data_ = v6;
      end[-1].__r_.__value_.__l.__size_ = 0;
      end[-1].__r_.__value_.__r.__words[2] = 0;
      end[-1].__r_.__value_.__r.__words[0] = 0;
      --v4;
      --end;
    }
    while (end != begin);
  }
  __v->__begin_ = v5;
  v7 = this->__begin_;
  this->__begin_ = v5;
  __v->__begin_ = v7;
  v8 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v8;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void sub_193BE95AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_193BE97A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::UnaryPredicate<long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t MPStoreItemMetadataInt64NormalizeStoreIDValue(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v2 = objc_msgSend(v1, "longLongValue");
  else
    v2 = 0;

  return v2;
}

id MPStoreItemMetadataStringNormalizeStoreIDValue(void *a1)
{
  id v1;
  id v2;
  void *v3;

  v1 = a1;
  if (_NSIsNSString())
  {
    v2 = v1;
  }
  else
  {
    if ((objc_opt_respondsToSelector() & 1) == 0 || !objc_msgSend(v1, "longLongValue"))
    {
      v3 = 0;
      goto LABEL_8;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lli"), objc_msgSend(v1, "longLongValue"));
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  v3 = v2;
LABEL_8:

  return v3;
}

void sub_193BEF134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)MPModelLibraryResponse;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_193BEFB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BEFD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BEFEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BF0020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BF01A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BF0430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 136), 8);
  _Unwind_Resume(a1);
}

double _MPModelObject_d_getterIMP(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  double v6;
  double v7;

  v3 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForModelKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "doubleValue");
  v7 = v6;

  return v7;
}

id _MPMRDateComponentsFromDate(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = (void *)MEMORY[0x1E0C99D48];
    v2 = a1;
    objc_msgSend(v1, "currentCalendar");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "components:fromDate:", 1048606, v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

uint64_t MPStoreItemMetadataItemKindIsArtistUploadedContent(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("uploadedAudio")) & 1) != 0)
    v2 = 1;
  else
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("uploadedVideo"));

  return v2;
}

id MPStoreItemMetadataSubscriptionOfferInOffers(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  id v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v11 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        objc_msgSend(v6, "offerType", (_QWORD)v10);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v7, "isEqualToString:", CFSTR("subscription")) & 1) != 0
          || objc_msgSend(v7, "isEqualToString:", CFSTR("redownload")))
        {
          v8 = v6;

          goto LABEL_13;
        }

      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      v8 = 0;
      if (v3)
        continue;
      break;
    }
  }
  else
  {
    v8 = 0;
  }
LABEL_13:

  return v8;
}

void sub_193BF2760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BF35BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_193BF373C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v26;
  void *v27;
  void *v28;
  void **p_p;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a22);

  if (a2 == 2)
  {
    v26 = __cxa_begin_catch(a1);
    v27 = (void *)MEMORY[0x1E0C99DA0];
    v28 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a9);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v26 + 24))(&__p, v26, &a9);
    if (a21 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v28, "stringWithUTF8String:", p_p);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v30, 0);
    v31 = (id)objc_claimAutoreleasedReturnValue();

    if (a21 < 0)
      operator delete(__p);
    objc_exception_throw(v31);
  }
  if (a2 == 1)
  {
    v32 = __cxa_begin_catch(a1);
    v33 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v32 + 16))(v32));
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v34, 0);
    v35 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v35);
  }

  _Unwind_Resume(a1);
}

void sub_193BF42FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,void **__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47)
{
  uint64_t v47;
  void *v50;
  void *v51;
  void *v52;
  void **p_p;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v47 - 256);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  *(_QWORD *)(v47 - 256) = &__p;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v47 - 256));
  if (a2 == 2)
  {
    v50 = __cxa_begin_catch(a1);
    v51 = (void *)MEMORY[0x1E0C99DA0];
    v52 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)(v47 - 256));
    (*(void (**)(void ***__return_ptr, void *, uint64_t))(*(_QWORD *)v50 + 24))(&__p, v50, v47 - 256);
    if (a46 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v52, "stringWithUTF8String:", p_p);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v54, 0);
    v55 = (id)objc_claimAutoreleasedReturnValue();

    if (a46 < 0)
      operator delete(__p);
    objc_exception_throw(v55);
  }
  if (a2 == 1)
  {
    v56 = __cxa_begin_catch(a1);
    v57 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v56 + 16))(v56));
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v58, 0);
    v59 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v59);
  }
  _Unwind_Resume(a1);
}

void sub_193BF4620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193BF4674(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x193BF467CLL);
  __clang_call_terminate(a1);
}

void sub_193BF4B08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_193BF4BE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x193BF4BB8);
}

void sub_193BF4E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  void *v24;
  void *v25;
  uint64_t i;
  void *v29;
  void *v30;
  void *v31;
  void **p_p;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  __p = &a15;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)(&a24 + i));
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a22);

  if (a2 == 2)
  {
    v29 = __cxa_begin_catch(a1);
    v30 = (void *)MEMORY[0x1E0C99DA0];
    v31 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a24);
    (*(void (**)(char **__return_ptr, void *, char *))(*(_QWORD *)v29 + 24))(&__p, v29, &a24);
    if (a14 >= 0)
      p_p = (void **)&__p;
    else
      p_p = (void **)__p;
    objc_msgSend(v31, "stringWithUTF8String:", p_p);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v33, 0);
    v34 = (id)objc_claimAutoreleasedReturnValue();

    if (a14 < 0)
      operator delete(__p);
    objc_exception_throw(v34);
  }
  if (a2 == 1)
  {
    v35 = __cxa_begin_catch(a1);
    v36 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v35 + 16))(v35));
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v37, 0);
    v38 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v38);
  }

  _Unwind_Resume(a1);
}

void sub_193BF5480(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v27 - 96);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  *(_QWORD *)(v27 - 96) = &a11;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 96));
  if (a2 == 2)
  {
    v30 = __cxa_begin_catch(a1);
    v31 = (void *)MEMORY[0x1E0C99DA0];
    v32 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a11);
    (*(void (**)(void *, char *))(*(_QWORD *)v30 + 24))(v30, &a11);
    if (*(char *)(v27 - 73) >= 0)
      v33 = v27 - 96;
    else
      v33 = *(_QWORD *)(v27 - 96);
    objc_msgSend(v32, "stringWithUTF8String:", v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v34, 0);
    v35 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v27 - 73) < 0)
      operator delete(*(void **)(v27 - 96));
    objc_exception_throw(v35);
  }
  if (a2 == 1)
  {
    v36 = __cxa_begin_catch(a1);
    v37 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v36 + 16))(v36));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v38, 0);
    v39 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v39);
  }
  _Unwind_Resume(a1);
}

void sub_193BF5640(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193BF5694(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x193BF569CLL);
  __clang_call_terminate(a1);
}

void sub_193BF5BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char *__p,char *a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  void *v37;
  void *v38;
  void *v39;
  void **p_p;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v34 - 96);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  if (__p)
  {
    a30 = __p;
    operator delete(__p);
  }
  __p = &a11;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a2 == 2)
  {
    v37 = __cxa_begin_catch(a1);
    v38 = (void *)MEMORY[0x1E0C99DA0];
    v39 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a11);
    (*(void (**)(char **__return_ptr, void *, char *))(*(_QWORD *)v37 + 24))(&__p, v37, &a11);
    if (a34 >= 0)
      p_p = (void **)&__p;
    else
      p_p = (void **)__p;
    objc_msgSend(v39, "stringWithUTF8String:", p_p);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v41, 0);
    v42 = (id)objc_claimAutoreleasedReturnValue();

    if (a34 < 0)
      operator delete(__p);
    objc_exception_throw(v42);
  }
  if (a2 == 1)
  {
    v43 = __cxa_begin_catch(a1);
    v44 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v43 + 16))(v43));
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v45, 0);
    v46 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v46);
  }
  _Unwind_Resume(a1);
}

void sub_193BF5DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193BF5E18(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x193BF5E20);
  __clang_call_terminate(a1);
}

void std::__tree<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::__map_value_compare<long long,std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::__map_value_compare<long long,std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::__map_value_compare<long long,std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>>>::destroy(a1[1]);
    std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

void sub_193BF64A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char *__p,char *a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  void *v37;
  void *v38;
  void *v39;
  void **p_p;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v34 - 96);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  if (__p)
  {
    a30 = __p;
    operator delete(__p);
  }
  __p = &a11;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a2 == 2)
  {
    v37 = __cxa_begin_catch(a1);
    v38 = (void *)MEMORY[0x1E0C99DA0];
    v39 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a11);
    (*(void (**)(char **__return_ptr, void *, char *))(*(_QWORD *)v37 + 24))(&__p, v37, &a11);
    if (a34 >= 0)
      p_p = (void **)&__p;
    else
      p_p = (void **)__p;
    objc_msgSend(v39, "stringWithUTF8String:", p_p);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v41, 0);
    v42 = (id)objc_claimAutoreleasedReturnValue();

    if (a34 < 0)
      operator delete(__p);
    objc_exception_throw(v42);
  }
  if (a2 == 1)
  {
    v43 = __cxa_begin_catch(a1);
    v44 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v43 + 16))(v43));
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v45, 0);
    v46 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v46);
  }
  _Unwind_Resume(a1);
}

void sub_193BF66A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193BF66F4(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x193BF66FCLL);
  __clang_call_terminate(a1);
}

void sub_193BF6AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char *__p,char *a26,int a27,__int16 a28,char a29,char a30)
{
  void *v32;
  void *v33;
  void *v34;
  void **p_p;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;

  if (__p)
  {
    a26 = __p;
    operator delete(__p);
  }
  __p = &a11;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a2 == 2)
  {
    v32 = __cxa_begin_catch(a1);
    v33 = (void *)MEMORY[0x1E0C99DA0];
    v34 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a11);
    (*(void (**)(char **__return_ptr, void *, char *))(*(_QWORD *)v32 + 24))(&__p, v32, &a11);
    if (a30 >= 0)
      p_p = (void **)&__p;
    else
      p_p = (void **)__p;
    objc_msgSend(v34, "stringWithUTF8String:", p_p);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v36, 0);
    v37 = (id)objc_claimAutoreleasedReturnValue();

    if (a30 < 0)
      operator delete(__p);
    objc_exception_throw(v37);
  }
  if (a2 == 1)
  {
    v38 = __cxa_begin_catch(a1);
    v39 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38));
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v40, 0);
    v41 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v41);
  }
  _Unwind_Resume(a1);
}

void sub_193BF6C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void _MPMLPredicateForVariants(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  __int128 v30;
  int64x2_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  char *v60;
  __int128 v61;
  int64x2_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  _QWORD *v80;
  char *v81;
  __int128 v82;
  int64x2_t v83;
  _OWORD *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  int64x2_t v96;
  _QWORD v97[6];
  _QWORD v98[3];
  _QWORD v99[3];
  std::__shared_weak_count *v100;
  __int128 v101;
  _BYTE v102[24];
  _OWORD v103[2];
  int64x2_t *v104;
  int64x2_t v105;
  uint64_t v106;
  _QWORD *v107;

  v96 = 0uLL;
  v97[0] = 0;
  v7 = a2 + 1;
  v6 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v8 = v6[4];
      v9 = v6[5];
      *(_QWORD *)&v103[0] = v8;
      *((_QWORD *)&v103[0] + 1) = v9;
      v10 = (std::__shared_weak_count *)v6[6];
      *(_QWORD *)&v103[1] = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      if ((v8 & ~a4) != 0)
      {
        v13 = v96.i64[1];
        if (v96.i64[1] >= v97[0])
        {
          v17 = (v96.i64[1] - v96.i64[0]) >> 4;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60)
            std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
          v19 = v97[0] - v96.i64[0];
          if ((v97[0] - v96.i64[0]) >> 3 > v18)
            v18 = v19 >> 3;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
            v20 = 0xFFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          v107 = v97;
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v20);
          v23 = &v21[16 * v17];
          v24 = *(_QWORD *)&v103[1];
          *(_OWORD *)v23 = *(_OWORD *)((char *)v103 + 8);
          if (v24)
          {
            v25 = (unint64_t *)(v24 + 8);
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
          }
          v27 = (_QWORD *)v96.i64[1];
          v28 = (_QWORD *)v96.i64[0];
          if (v96.i64[1] == v96.i64[0])
          {
            v31 = vdupq_n_s64(v96.u64[1]);
            v29 = &v21[16 * v17];
          }
          else
          {
            v29 = &v21[16 * v17];
            do
            {
              v30 = *((_OWORD *)v27 - 1);
              v27 -= 2;
              *((_OWORD *)v29 - 1) = v30;
              v29 -= 16;
              *v27 = 0;
              v27[1] = 0;
            }
            while (v27 != v28);
            v31 = v96;
          }
          v16 = v23 + 16;
          v96.i64[0] = (uint64_t)v29;
          v96.i64[1] = (uint64_t)(v23 + 16);
          v105 = v31;
          v32 = v97[0];
          v97[0] = &v21[16 * v22];
          v106 = v32;
          v104 = (int64x2_t *)v31.i64[0];
          std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v104);
          v10 = *(std::__shared_weak_count **)&v103[1];
        }
        else
        {
          *(_QWORD *)v96.i64[1] = *((_QWORD *)&v103[0] + 1);
          *(_QWORD *)(v13 + 8) = v10;
          if (v10)
          {
            v14 = (unint64_t *)&v10->__shared_owners_;
            do
              v15 = __ldxr(v14);
            while (__stxr(v15 + 1, v14));
          }
          v16 = (_OWORD *)(v13 + 16);
        }
        v96.i64[1] = (uint64_t)v16;
      }
      if (v10)
      {
        v33 = (unint64_t *)&v10->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v35 = (_QWORD *)v6[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v6[2];
          v37 = *v36 == (_QWORD)v6;
          v6 = v36;
        }
        while (!v37);
      }
      v6 = v36;
    }
    while (v36 != v7);
  }
  if ((a3 & ~a4) != 0)
  {
    memset(v103, 0, 24);
    v38 = (_QWORD *)*a2;
    if ((_QWORD *)*a2 == v7)
    {
      v69 = 0;
      v68 = 0;
    }
    else
    {
      do
      {
        v39 = v38[4];
        v40 = v38[5];
        *(_QWORD *)v102 = v39;
        *(_QWORD *)&v102[8] = v40;
        v41 = (std::__shared_weak_count *)v38[6];
        *(_QWORD *)&v102[16] = v41;
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        if ((v39 & ~a4) == 0)
        {
          v44 = *((_QWORD *)&v103[0] + 1);
          if (*((_QWORD *)&v103[0] + 1) >= *(_QWORD *)&v103[1])
          {
            v48 = (uint64_t)(*((_QWORD *)&v103[0] + 1) - *(_QWORD *)&v103[0]) >> 4;
            v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 60)
              std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
            v50 = *(_QWORD *)&v103[1] - *(_QWORD *)&v103[0];
            if ((uint64_t)(*(_QWORD *)&v103[1] - *(_QWORD *)&v103[0]) >> 3 > v49)
              v49 = v50 >> 3;
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
              v51 = 0xFFFFFFFFFFFFFFFLL;
            else
              v51 = v49;
            v107 = &v103[1];
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v51);
            v54 = &v52[16 * v48];
            v55 = *(_QWORD *)&v102[16];
            *(_OWORD *)v54 = *(_OWORD *)&v102[8];
            if (v55)
            {
              v56 = (unint64_t *)(v55 + 8);
              do
                v57 = __ldxr(v56);
              while (__stxr(v57 + 1, v56));
            }
            v58 = (_QWORD *)*((_QWORD *)&v103[0] + 1);
            v59 = *(_QWORD **)&v103[0];
            if (*((_QWORD *)&v103[0] + 1) == *(_QWORD *)&v103[0])
            {
              v62 = vdupq_n_s64(*((unint64_t *)&v103[0] + 1));
              v60 = &v52[16 * v48];
            }
            else
            {
              v60 = &v52[16 * v48];
              do
              {
                v61 = *((_OWORD *)v58 - 1);
                v58 -= 2;
                *((_OWORD *)v60 - 1) = v61;
                v60 -= 16;
                *v58 = 0;
                v58[1] = 0;
              }
              while (v58 != v59);
              v62 = (int64x2_t)v103[0];
            }
            v47 = v54 + 16;
            *(_QWORD *)&v103[0] = v60;
            *((_QWORD *)&v103[0] + 1) = v54 + 16;
            v105 = v62;
            v63 = *(_QWORD *)&v103[1];
            *(_QWORD *)&v103[1] = &v52[16 * v53];
            v106 = v63;
            v104 = (int64x2_t *)v62.i64[0];
            std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v104);
            v41 = *(std::__shared_weak_count **)&v102[16];
          }
          else
          {
            **((_QWORD **)&v103[0] + 1) = *(_QWORD *)&v102[8];
            *(_QWORD *)(v44 + 8) = v41;
            if (v41)
            {
              v45 = (unint64_t *)&v41->__shared_owners_;
              do
                v46 = __ldxr(v45);
              while (__stxr(v46 + 1, v45));
            }
            v47 = (_OWORD *)(v44 + 16);
          }
          *((_QWORD *)&v103[0] + 1) = v47;
        }
        if (v41)
        {
          v64 = (unint64_t *)&v41->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v66 = (_QWORD *)v38[1];
        if (v66)
        {
          do
          {
            v67 = v66;
            v66 = (_QWORD *)*v66;
          }
          while (v66);
        }
        else
        {
          do
          {
            v67 = (_QWORD *)v38[2];
            v37 = *v67 == (_QWORD)v38;
            v38 = v67;
          }
          while (!v37);
        }
        v38 = v67;
      }
      while (v67 != v7);
      v69 = (char *)*((_QWORD *)&v103[0] + 1);
      v68 = *(char **)&v103[0];
    }
    memset(v99, 0, sizeof(v99));
    std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v99, v68, v69, (v69 - v68) >> 4);
    mlcore::CreateAndPredicate();
    mlcore::CreateNotPredicate();
    v70 = v101;
    *(_OWORD *)v102 = v101;
    v101 = 0uLL;
    v71 = v96.i64[1];
    if (v96.i64[1] >= v97[0])
    {
      v72 = (v96.i64[1] - v96.i64[0]) >> 4;
      v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 60)
        std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
      v74 = v97[0] - v96.i64[0];
      if ((v97[0] - v96.i64[0]) >> 3 > v73)
        v73 = v74 >> 3;
      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
        v75 = 0xFFFFFFFFFFFFFFFLL;
      else
        v75 = v73;
      v107 = v97;
      v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v75);
      v78 = &v76[16 * v72];
      *(_OWORD *)v78 = *(_OWORD *)v102;
      *(_OWORD *)v102 = 0uLL;
      v79 = (_QWORD *)v96.i64[1];
      v80 = (_QWORD *)v96.i64[0];
      if (v96.i64[1] == v96.i64[0])
      {
        v83 = vdupq_n_s64(v96.u64[1]);
        v81 = &v76[16 * v72];
      }
      else
      {
        v81 = &v76[16 * v72];
        do
        {
          v82 = *((_OWORD *)v79 - 1);
          v79 -= 2;
          *((_OWORD *)v81 - 1) = v82;
          v81 -= 16;
          *v79 = 0;
          v79[1] = 0;
        }
        while (v79 != v80);
        v83 = v96;
      }
      v84 = v78 + 16;
      v96.i64[0] = (uint64_t)v81;
      v105 = v83;
      v85 = v97[0];
      v97[0] = &v76[16 * v77];
      v106 = v85;
      v104 = (int64x2_t *)v83.i64[0];
      std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v104);
      v86 = *(std::__shared_weak_count **)&v102[8];
      v96.i64[1] = (uint64_t)v84;
      if (*(_QWORD *)&v102[8])
      {
        v87 = (unint64_t *)(*(_QWORD *)&v102[8] + 8);
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
    }
    else
    {
      *(_QWORD *)v96.i64[1] = v70;
      *(_QWORD *)(v71 + 8) = *((_QWORD *)&v70 + 1);
      *(_OWORD *)v102 = 0uLL;
      v96.i64[1] = v71 + 16;
    }
    v89 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
    if (*((_QWORD *)&v101 + 1))
    {
      v90 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v92 = v100;
    if (v100)
    {
      v93 = (unint64_t *)&v100->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v104 = (int64x2_t *)v99;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
    v104 = (int64x2_t *)v103;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  }
  memset(v98, 0, sizeof(v98));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v98, v96.i64[0], (_QWORD *)v96.i64[1], (v96.i64[1] - v96.i64[0]) >> 4);
  mlcore::CreateAndPredicate();
  v104 = (int64x2_t *)v98;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  v104 = &v96;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
}

void sub_193BF7324(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,void **a31)
{
  uint64_t v31;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  *(_QWORD *)(v31 - 144) = &a24;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 144));
  a31 = (void **)(v31 - 176);
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100](&a31);
  *(_QWORD *)(v31 - 176) = &a13;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 176));
  if (a2 == 2)
  {
    v34 = __cxa_begin_catch(a1);
    v35 = (void *)MEMORY[0x1E0C99DA0];
    v36 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a13);
    (*(void (**)(void *, char *))(*(_QWORD *)v34 + 24))(v34, &a13);
    if (*(char *)(v31 - 153) >= 0)
      v37 = v31 - 176;
    else
      v37 = *(_QWORD *)(v31 - 176);
    objc_msgSend(v36, "stringWithUTF8String:", v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v38, 0);
    v39 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v31 - 153) < 0)
      operator delete(*(void **)(v31 - 176));
    objc_exception_throw(v39);
  }
  if (a2 == 1)
  {
    v40 = __cxa_begin_catch(a1);
    v41 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40));
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v42, 0);
    v43 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v43);
  }
  _Unwind_Resume(a1);
}

void sub_193BF750C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_193BF836C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void _MPSectionedIdentifierListEnumeratorAdjustForStartItemInclusionIfNeeded(void *a1, char a2, void *a3, void *a4)
{
  id v7;
  id v8;
  int v9;
  id v10;
  id v11;

  v11 = a1;
  v7 = a3;
  v8 = a4;
  v9 = v7 != 0;
  if (objc_msgSend(v7, "entryType") == 2 || objc_msgSend(v7, "entryType") == 4)
  {
    v9 = a2 & 1;
  }
  else if (objc_msgSend(v7, "entryType") == 3)
  {
    if ((a2 & 2) != 0)
      v9 = 1;
    else
      v9 = objc_msgSend(v7, "isRemoved") ^ 1;
  }
  if ((a2 & 4) == 0 && v9)
    v10 = (id)objc_msgSend(v11, "nextObjectWithExclusiveAccessToken:", v8);

}

uint64_t _MPSectionedIdentifierListEnumeratorShouldEmitAsDataSourceEntry(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v8 = v6;
    objc_msgSend(v5, "_sectionHeadEntryMapWithExclusiveAccessToken:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "sectionIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "objectForKeyedSubscript:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "identifiersItemEntryMap");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "itemIdentifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "objectForKeyedSubscript:", v13);
    v14 = (id)objc_claimAutoreleasedReturnValue();

    if (v14 == v8)
      v15 = objc_msgSend(v8, "isDataSourceRemoved") ^ 1;
    else
      v15 = 0;

  }
  else
  {
    v15 = 1;
  }

  return v15;
}

_QWORD *__copy_helper_block_ea8_88c75_ZTSNSt3__113unordered_setIxNS_4hashIxEENS_8equal_toIxEENS_9allocatorIxEEEE128c69_ZTSNSt3__16vectorIPN6mlcore17ModelPropertyBaseENS_9allocatorIS3_EEEE(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = a1;
  std::unordered_set<long long>::unordered_set((uint64_t)(a1 + 11), a2 + 88);
  v3[16] = 0;
  v3[17] = 0;
  v3 += 16;
  v3[2] = 0;
  return std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(v3, *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
}

void sub_193BFB1C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<long long>::unordered_set(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1, i[2], i[2]);
  return a1;
}

void sub_193BFB230(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = a2;
  v12[2] = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_193BFB438(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_193BFBDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BFBE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BFBF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BFC07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BFC1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193BFC2C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_193BFCB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;

  _Block_object_dispose((const void *)(v33 - 120), 8);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a29);

  _Unwind_Resume(a1);
}

void sub_193BFD978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v62 - 256);

  _Unwind_Resume(a1);
}

void sub_193BFDD8C()
{
  JUMPOUT(0x193BFDD64);
}

void sub_193BFDE50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_193BFE118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  void *v32;
  void *v35;
  void *v36;
  void *v37;
  void **p_p;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;

  if (a2 == 2)
  {
    v35 = __cxa_begin_catch(a1);
    v36 = (void *)MEMORY[0x1E0C99DA0];
    v37 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a13);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v35 + 24))(&__p, v35, &a13);
    if (a25 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v37, "stringWithUTF8String:", p_p);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v39, 0);
    v40 = (id)objc_claimAutoreleasedReturnValue();

    if (a25 < 0)
      operator delete(__p);
    objc_exception_throw(v40);
  }
  if (a2 == 1)
  {
    v41 = __cxa_begin_catch(a1);
    v42 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41));
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v43, 0);
    v44 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v44);
  }

  _Unwind_Resume(a1);
}

void sub_193BFE404(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193BFE698(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_193BFE944(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193BFEE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_193BFF3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_193BFF75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, id);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v12 + 48);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E3149EC8;
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::LocalizedSearchQueryResult>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_193BFF8F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_193BFFCE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_193C02E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 160), 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_193C044EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t _MPModelObject_B_getterIMP(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForModelKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "BOOLValue");
  return v6;
}

void sub_193C04C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 160), 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_193C04D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193C04E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193C050AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

float _MPModelObject_f_getterIMP(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  float v6;
  float v7;

  v3 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForModelKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "floatValue");
  v7 = v6;

  return v7;
}

void sub_193C05D80(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_193C06E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 224), 8);
  _Block_object_dispose((const void *)(v39 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_193C07028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193C073B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193C086A0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_193C09120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id MPMediaRemoteCollectionInfoToNowPlaying(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  _QWORD v16[4];
  id v17;
  id v18;
  _QWORD v19[13];
  _QWORD v20[14];

  v20[13] = *MEMORY[0x1E0C80C00];
  v1 = (objc_class *)MEMORY[0x1E0C99E08];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  v4 = *MEMORY[0x1E0D4C958];
  v19[0] = *MEMORY[0x1E0D4C960];
  v19[1] = v4;
  v20[0] = CFSTR("_MPNowPlayingCollectionInfoKeyTitle");
  v20[1] = CFSTR("_MPNowPlayingCollectionInfoKeyIdentifiers");
  v5 = *MEMORY[0x1E0D4C940];
  v19[2] = *MEMORY[0x1E0D4C950];
  v19[3] = v5;
  v20[2] = CFSTR("_MPNowPlayingCollectionInfoKeyCollectionType");
  v20[3] = CFSTR("_MPNowPlayingCollectionInfoCollectionTypePlaylist");
  v6 = *MEMORY[0x1E0D4C948];
  v19[4] = *MEMORY[0x1E0D4C938];
  v19[5] = v6;
  v20[4] = CFSTR("_MPNowPlayingCollectionInfoCollectionTypeAlbum");
  v20[5] = CFSTR("_MPNowPlayingCollectionInfoCollectionTypeRadio");
  v7 = *MEMORY[0x1E0D4CAF0];
  v19[6] = *MEMORY[0x1E0D4CAE0];
  v19[7] = v7;
  v20[6] = CFSTR("_MPNowPlayingInfoPropertyRadioStationIdentifier");
  v20[7] = CFSTR("_MPNowPlayingInfoPropertyRadioStationStringIdentifier");
  v8 = *MEMORY[0x1E0D4CB90];
  v19[8] = *MEMORY[0x1E0D4CB88];
  v19[9] = v8;
  v20[8] = CFSTR("_MPNowPlayingInfoPropertyiTunesStoreIdentifier");
  v20[9] = CFSTR("_MPNowPlayingInfoPropertyiTunesStoreSubscriptionAdamIdentifier");
  v9 = *MEMORY[0x1E0D4C970];
  v19[10] = *MEMORY[0x1E0D4C988];
  v19[11] = v9;
  v20[10] = CFSTR("_MPNowPlayingInfoPropertyArtistiTunesStoreAdamIdentifier");
  v20[11] = CFSTR("_MPNowPlayingInfoPropertyAlbumiTunesStoreAdamIdentifier");
  v19[12] = *MEMORY[0x1E0D4CAB8];
  v20[12] = CFSTR("_MPNowPlayingInfoPropertyPlaylistGlobalIdentifier");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, v19, 13);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __MPMediaRemoteCollectionInfoToNowPlaying_block_invoke;
  v16[3] = &unk_1E315EFE8;
  v17 = v10;
  v11 = v3;
  v18 = v11;
  v12 = v10;
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v16);

  v13 = v18;
  v14 = v11;

  return v14;
}

id MPNowPlayingCollectionInfoToMediaRemote(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  _QWORD v24[4];
  id v25;
  id v26;
  _QWORD v27[15];
  _QWORD v28[16];

  v28[15] = *MEMORY[0x1E0C80C00];
  v1 = (objc_class *)MEMORY[0x1E0C99E08];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  v4 = *MEMORY[0x1E0D4C960];
  v27[0] = CFSTR("_MPNowPlayingCollectionInfoKeyTitle");
  v27[1] = CFSTR("_MPNowPlayingCollectionInfoKeyIdentifiers");
  v5 = *MEMORY[0x1E0D4C958];
  v28[0] = v4;
  v28[1] = v5;
  v6 = *MEMORY[0x1E0D4C950];
  v27[2] = CFSTR("_MPNowPlayingCollectionInfoKeyCollectionType");
  v27[3] = CFSTR("_MPNowPlayingCollectionInfoCollectionTypePlaylist");
  v7 = *MEMORY[0x1E0D4C940];
  v28[2] = v6;
  v28[3] = v7;
  v8 = *MEMORY[0x1E0D4C938];
  v27[4] = CFSTR("_MPNowPlayingCollectionInfoCollectionTypeAlbum");
  v27[5] = CFSTR("_MPNowPlayingCollectionInfoCollectionTypeRadio");
  v9 = *MEMORY[0x1E0D4C948];
  v28[4] = v8;
  v28[5] = v9;
  v10 = *MEMORY[0x1E0D4CAE0];
  v27[6] = CFSTR("_MPNowPlayingInfoPropertyRadioStationIdentifier");
  v27[7] = CFSTR("_MPNowPlayingInfoPropertyRadioStationStringIdentifier");
  v11 = *MEMORY[0x1E0D4CAF0];
  v28[6] = v10;
  v28[7] = v11;
  v12 = *MEMORY[0x1E0D4CAD8];
  v27[8] = CFSTR("_MPNowPlayingInfoPropertyRadioStationHash");
  v27[9] = CFSTR("_MPNowPlayingInfoPropertyRadioStationName");
  v13 = *MEMORY[0x1E0D4CAE8];
  v28[8] = v12;
  v28[9] = v13;
  v14 = *MEMORY[0x1E0D4CB88];
  v27[10] = CFSTR("_MPNowPlayingInfoPropertyiTunesStoreIdentifier");
  v27[11] = CFSTR("_MPNowPlayingInfoPropertyiTunesStoreSubscriptionAdamIdentifier");
  v15 = *MEMORY[0x1E0D4CB90];
  v28[10] = v14;
  v28[11] = v15;
  v16 = *MEMORY[0x1E0D4C988];
  v27[12] = CFSTR("_MPNowPlayingInfoPropertyArtistiTunesStoreAdamIdentifier");
  v27[13] = CFSTR("_MPNowPlayingInfoPropertyAlbumiTunesStoreAdamIdentifier");
  v17 = *MEMORY[0x1E0D4C970];
  v28[12] = v16;
  v28[13] = v17;
  v27[14] = CFSTR("_MPNowPlayingInfoPropertyPlaylistGlobalIdentifier");
  v28[14] = *MEMORY[0x1E0D4CAB8];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, v27, 15);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __MPNowPlayingCollectionInfoToMediaRemote_block_invoke;
  v24[3] = &unk_1E315EFE8;
  v25 = v18;
  v19 = v3;
  v26 = v19;
  v20 = v18;
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v24);

  v21 = v26;
  v22 = v19;

  return v22;
}

void sub_193C0ACB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_193C0C2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11)
{
  uint64_t v11;

  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak((id *)(v11 - 112));
  _Unwind_Resume(a1);
}

void sub_193C0C35C()
{
  JUMPOUT(0x193C0C344);
}

id MPUIApplication()
{
  Class v0;
  void *v1;

  v0 = NSClassFromString(CFSTR("UIApplication"));
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[objc_class sharedApplication](v0, "sharedApplication");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = 0;
  }
  return v1;
}

void sub_193C0D050(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_193C0D1C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193C0EDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193C0F388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_193C0F5F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193C0F6B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193C0F8B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_193C0F970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193C0FBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_193C10ADC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{
  void *v51;
  void *v52;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  unint64_t *v59;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;

  v55 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    STACK[0x2B0] = (unint64_t)v55;
    operator delete(v55);
  }
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](a16);
  if (a2 == 2)
  {
    v56 = __cxa_begin_catch(a1);
    v57 = (void *)MEMORY[0x1E0C99DA0];
    v58 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a51);
    (*(void (**)(unint64_t *__return_ptr, void *, void **))(*(_QWORD *)v56 + 24))(&STACK[0x2A8], v56, &a51);
    if (SLOBYTE(STACK[0x2BF]) >= 0)
      v59 = &STACK[0x2A8];
    else
      v59 = (unint64_t *)STACK[0x2A8];
    objc_msgSend(v58, "stringWithUTF8String:", v59);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v60, 0);
    v61 = (id)objc_claimAutoreleasedReturnValue();

    if (SLOBYTE(STACK[0x2BF]) < 0)
      operator delete((void *)STACK[0x2A8]);
    objc_exception_throw(v61);
  }
  if (a2 == 1)
  {
    v62 = __cxa_begin_catch(a1);
    v63 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v62 + 16))(v62));
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v63, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v64, 0);
    v65 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v65);
  }

  _Unwind_Resume(a1);
}

void sub_193C10F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  __cxa_end_catch();

  JUMPOUT(0x193C11004);
}

void sub_193C11698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  void *v38;
  void *v39;
  void *v40;
  void *v43;
  void *v44;
  void *v45;
  void **p_p;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;

  a17 = a15;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a2 == 2)
  {
    v43 = __cxa_begin_catch(a1);
    v44 = (void *)MEMORY[0x1E0C99DA0];
    v45 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a17);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v43 + 24))(&__p, v43, &a17);
    if (a29 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v45, "stringWithUTF8String:", p_p);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v47, 0);
    v48 = (id)objc_claimAutoreleasedReturnValue();

    if (a29 < 0)
      operator delete(__p);
    objc_exception_throw(v48);
  }
  if (a2 == 1)
  {
    v49 = __cxa_begin_catch(a1);
    v50 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v49 + 16))(v49));
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v50, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v51, 0);
    v52 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v52);
  }

  _Unwind_Resume(a1);
}

void sub_193C118AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  __cxa_end_catch();

  JUMPOUT(0x193C11914);
}

void sub_193C11900(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_193C11E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  void *v42;
  void *v45;
  void *v46;
  void *v47;
  void **p_p;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;

  a18 = a15;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (a2 == 2)
  {
    v45 = __cxa_begin_catch(a1);
    v46 = (void *)MEMORY[0x1E0C99DA0];
    v47 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a18);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v45 + 24))(&__p, v45, &a18);
    if (a30 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v47, "stringWithUTF8String:", p_p);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v49, 0);
    v50 = (id)objc_claimAutoreleasedReturnValue();

    if (a30 < 0)
      operator delete(__p);
    objc_exception_throw(v50);
  }
  if (a2 == 1)
  {
    v51 = __cxa_begin_catch(a1);
    v52 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v51 + 16))(v51));
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v53, 0);
    v54 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v54);
  }

  _Unwind_Resume(a1);
}

void sub_193C1205C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  __cxa_end_catch();

  JUMPOUT(0x193C120C4);
}

void sub_193C120B0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_193C122D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  uint64_t v25;
  uint64_t v26;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Block_object_dispose(&a19, 8);

  _Block_object_dispose((const void *)(v26 - 112), 8);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v25);

  _Unwind_Resume(a1);
}

void sub_193C12740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__n128 ___ZL32_MPMLInitPropertyGenericModelMapv_block_invoke_2@<Q0>(__n128 *a1@<X8>)
{
  _QWORD *v2;
  __n128 result;

  v2 = operator new(0x150uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E314A870;
  result.n128_u64[0] = MEMORY[0x194038FD4](v2 + 3);
  result.n128_u64[1] = (unint64_t)v2;
  *a1 = result;
  return result;
}

void sub_193C1279C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void ___ZL26_MPMLInitPropertyArtistMapv_block_invoke_5(uint64_t a1, void *a2, uint64_t *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  mlcore *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  mlcore *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  int64x2_t v39;
  uint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  void *v55;
  _QWORD v56[3];
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  __int128 v63;
  void *__p[2];
  char v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  int64x2_t v68;
  unint64_t v69;
  int64x2_t *v70;
  int64x2_t v71;
  unint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v68 = 0uLL;
  v69 = 0;
  objc_msgSend(v4, "modelKind");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "identityKind");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[MPModelArtistKind identityKind](MPModelArtistKind, "identityKind");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "isEqual:", v7);

  if ((v8 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyArtistMap()_block_invoke_5");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "handleFailureInFunction:file:lineNumber:description:", v55, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 1730, CFSTR("Must have artist kind to generate artist entity query."));

  }
  v9 = (std::__shared_weak_count *)a3[1];
  v66 = *a3;
  v67 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  objc_msgSend(v5, "applyToView:withContext:", &v66, v4);
  v12 = v67;
  if (v67)
  {
    v13 = (unint64_t *)&v67->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  objc_msgSend(v4, "allowedEntityIdentifiers");
  v15 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v16 = mlcore::ArtistPropertyStoreID(v15);
  v17 = mlcore::ArtistPropertyPersistentID((mlcore *)v16);
  _MPMLInsertPredicatesForIdentifierSet(&v68, v15, v16, 0, v17, 0, 0, 0, 0, 0);

  objc_msgSend(v4, "filterText");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v16) = objc_msgSend(v18, "length") == 0;

  if ((v16 & 1) == 0)
  {
    objc_msgSend(v4, "filterText");
    v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v19, "UTF8String"));

    v21 = mlcore::ArtistPropertyName(v20);
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *,std::string&,void>(&v58, v21, (uint64_t)__p);
    v23 = v58;
    v22 = v59;
    v74 = v58;
    v75 = v59;
    v58 = 0;
    v59 = 0;
    v61 = 0;
    v62 = 0;
    v60 = 0;
    v70 = (int64x2_t *)&v60;
    v71.i8[0] = 0;
    v24 = operator new(0x10uLL);
    v60 = v24;
    v61 = v24;
    v62 = v24 + 2;
    *v24 = v23;
    v24[1] = v22;
    if (v22)
    {
      v25 = (unint64_t *)&v22->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v61 = v24 + 2;
    mlcore::CreateOrPredicate();
    v27 = v68.i64[1];
    if (v68.i64[1] >= v69)
    {
      v28 = (v68.i64[1] - v68.i64[0]) >> 4;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60)
        std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
      v30 = v69 - v68.i64[0];
      if ((uint64_t)(v69 - v68.i64[0]) >> 3 > v29)
        v29 = v30 >> 3;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
        v31 = 0xFFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      v73 = &v69;
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v31);
      v34 = &v32[16 * v28];
      *(_OWORD *)v34 = v63;
      v63 = 0uLL;
      v35 = (_QWORD *)v68.i64[1];
      v36 = v68.i64[0];
      if (v68.i64[1] == v68.i64[0])
      {
        v39 = vdupq_n_s64(v68.u64[1]);
        v37 = (uint64_t)&v32[16 * v28];
      }
      else
      {
        v37 = (uint64_t)&v32[16 * v28];
        do
        {
          v38 = *((_OWORD *)v35 - 1);
          v35 -= 2;
          *(_OWORD *)(v37 - 16) = v38;
          v37 -= 16;
          *v35 = 0;
          v35[1] = 0;
        }
        while (v35 != (_QWORD *)v36);
        v39 = v68;
      }
      v40 = (uint64_t)(v34 + 16);
      v68.i64[0] = v37;
      v68.i64[1] = (uint64_t)(v34 + 16);
      v71 = v39;
      v41 = v69;
      v69 = (unint64_t)&v32[16 * v33];
      v72 = v41;
      v70 = (int64x2_t *)v39.i64[0];
      std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v70);
      v42 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      v68.i64[1] = v40;
      if (*((_QWORD *)&v63 + 1))
      {
        v43 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
    }
    else
    {
      *(_OWORD *)v68.i64[1] = v63;
      v63 = 0uLL;
      v68.i64[1] = v27 + 16;
    }
    v70 = (int64x2_t *)&v60;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    v45 = v75;
    if (v75)
    {
      v46 = (unint64_t *)&v75->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = v59;
    if (v59)
    {
      v49 = (unint64_t *)&v59->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (v65 < 0)
      operator delete(__p[0]);
  }
  memset(v56, 0, sizeof(v56));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v56, v68.i64[0], (_QWORD *)v68.i64[1], (v68.i64[1] - v68.i64[0]) >> 4);
  mlcore::CreateAndPredicate();
  mlcore::EntityQuery::artistsQuery();
  v51 = v57;
  if (v57)
  {
    v52 = (unint64_t *)&v57->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v70 = (int64x2_t *)v56;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);

  v70 = &v68;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);

}

void sub_193C12C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  __p = &a32;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_193C12E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_193C15140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_193C15240(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_193C16738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  id *v10;
  uint64_t v11;

  objc_destroyWeak(v10);
  objc_destroyWeak((id *)(v11 - 112));
  _Unwind_Resume(a1);
}

void sub_193C167FC()
{
  JUMPOUT(0x193C167DCLL);
}

void sub_193C16808()
{
  JUMPOUT(0x193C167ECLL);
}

uint64_t std::__shared_ptr_emplace<mlcore::InPredicate<long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__CFString *MPNSStringFromShuffleType(uint64_t a1)
{
  __CFString *v1;
  void *v2;
  void *v3;
  void *v4;

  if (a1 > 1)
  {
    if (a1 == 2)
    {
      v1 = CFSTR("Albums");
      return v1;
    }
    if (a1 == 1000)
    {
      v2 = (void *)MEMORY[0x1E0CB3940];
      +[MPPlaybackUserDefaults standardUserDefaults](MPPlaybackUserDefaults, "standardUserDefaults");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      MPNSStringFromShuffleType(objc_msgSend(v3, "musicShuffleType"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "stringWithFormat:", CFSTR("UserDefault[%@]"), v4);
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue();

      return v1;
    }
LABEL_8:
    v1 = CFSTR("Unknown");
    return v1;
  }
  if (!a1)
  {
    v1 = CFSTR("Off");
    return v1;
  }
  if (a1 != 1)
    goto LABEL_8;
  v1 = CFSTR("Songs");
  return v1;
}

__CFString *MPNSStringFromRepeatType(uint64_t a1)
{
  __CFString *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = CFSTR("Off");
  switch(a1)
  {
    case 0:
      return v1;
    case 1:
      v1 = CFSTR("One");
      break;
    case 2:
      v1 = CFSTR("All");
      break;
    case 3:
      v2 = (void *)MEMORY[0x1E0CB3940];
      +[MPPlaybackUserDefaults standardUserDefaults](MPPlaybackUserDefaults, "standardUserDefaults");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      MPNSStringFromRepeatType(objc_msgSend(v3, "musicRepeatType"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "stringWithFormat:", CFSTR("UserDefault[%@]"), v4);
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue();

      break;
    default:
      v1 = CFSTR("Unknown");
      break;
  }
  return v1;
}

__CFString *MPNSStringFromQueueEndAction(uint64_t a1, void *a2)
{
  __CFString *v2;
  id v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = CFSTR("Clear");
  switch(a1)
  {
    case 0:
      return v2;
    case 1:
      v2 = CFSTR("None");
      break;
    case 2:
      v2 = CFSTR("Reset");
      break;
    case 3:
      v2 = CFSTR("AutoPlay");
      break;
    default:
      if (a1 == 1000)
      {
        v3 = a2;
        +[MPPlaybackUserDefaults standardUserDefaults](MPPlaybackUserDefaults, "standardUserDefaults");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = objc_msgSend(v4, "autoPlayEnabledForUserIdentity:", v3);

        if (v5)
          v6 = 3;
        else
          v6 = 2;
        v7 = (void *)MEMORY[0x1E0CB3940];
        MPNSStringFromQueueEndAction(v6, v3);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v7, "stringWithFormat:", CFSTR("UserDefault[%@]"), v8);
        v2 = (__CFString *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v2 = CFSTR("Unknown");
      }
      break;
  }
  return v2;
}

void ___ZL27_MPMLInitPropertyCuratorMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[6];
  _QWORD v14[6];

  v12 = a2;
  v8 = a5;
  objc_msgSend(v12, "mediaLibrary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "uniqueIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = ___ZL27_MPMLInitPropertyCuratorMapv_block_invoke_2;
  v14[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v14[4] = a3;
  v14[5] = a4;
  objc_msgSend(v8, "setLibraryIdentifiersWithDatabaseID:block:", v10, v14);

  v13[0] = v11;
  v13[1] = 3221225472;
  v13[2] = ___ZL27_MPMLInitPropertyCuratorMapv_block_invoke_3;
  v13[3] = &__block_descriptor_48_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v13[4] = a3;
  v13[5] = a4;
  objc_msgSend(v8, "setUniversalStoreIdentifiersWithBlock:", v13);

}

void sub_193C17E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void ___ZL27_MPMLInitPropertyCuratorMapv_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAdamID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193C17F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::ComparisonPredicate<long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_193C1885C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MPShuffleTypeFromMediaRemoteShuffleMode(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_193F0BDD0[a1];
}

uint64_t MPRepeatTypeFromMediaRemoteRepeatMode(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_193F0BDB0[a1];
}

void sub_193C189CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_193C18A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_193C18E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_88c75_ZTSNSt3__113unordered_setIxNS_4hashIxEENS_8equal_toIxEENS_9allocatorIxEEEE128c69_ZTSNSt3__16vectorIPN6mlcore17ModelPropertyBaseENS_9allocatorIS3_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(_QWORD *)(a1 + 136) = v2;
    operator delete(v2);
  }
  return std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::~__hash_table(a1 + 88);
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v2 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v12 = v2;
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_193C1A82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_193C1ABEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_193C1B158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  void *v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v19 + 8) = v20;
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(&a18);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<mlcore::PropertyCache>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 216);
    *(_QWORD *)(a1 + 16) = i - 216;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &off_1E3149C40;
  v2 = (_QWORD *)a1[23];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[21];
  a1[21] = 0;
  if (v4)
    operator delete(v4);
  *a1 = &off_1E3149C20;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::~__hash_table((uint64_t)(a1 + 16));
  return mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(a1);
}

_QWORD *mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &off_1E3149C00;
  v2 = (_QWORD *)a1[13];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[11];
  a1[11] = 0;
  if (v4)
    operator delete(v4);
  *a1 = &off_1E3149BE0;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::~__hash_table((uint64_t)(a1 + 6));
  *a1 = &off_1E3149BC0;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      mediaplatform::Data::~Data((mediaplatform::Data *)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_193C1C208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_193C1C710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_193C1E3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193C1F458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193C1F85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id MPAVGetBatteryLevelFromAVODDS(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v4 = a2;
  v5 = v4;
  switch(a3)
  {
    case 0:
      v6 = (_QWORD *)MEMORY[0x1E0C8AB50];
      goto LABEL_5;
    case 1:
      v6 = (_QWORD *)MEMORY[0x1E0C8AB58];
      goto LABEL_5;
    case 2:
      v6 = (_QWORD *)MEMORY[0x1E0C8AB48];
LABEL_5:
      objc_msgSend(v4, "objectForKeyedSubscript:", *v6);
      v7 = objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    case 3:
      if (!MRAVOutputDeviceHasBatteryLevel())
        goto LABEL_11;
      v11 = objc_alloc(MEMORY[0x1E0CB37E8]);
      MRAVOutputDeviceGetBatteryLevel();
      v7 = objc_msgSend(v11, "initWithFloat:");
LABEL_6:
      v8 = (void *)v7;
      if (v7)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSNumber *MPAVGetBatteryLevelFromAVODDS(MRAVOutputDeviceRef, NSDictionary *__strong, MPAVBatteryLevelType)");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("MPAVBatteryLevel.m"), 168, CFSTR("battery level value is not a number"));

        }
      }
      break;
    default:
LABEL_11:
      v8 = 0;
      break;
  }

  return v8;
}

void sub_193C1FD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193C1FF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193C201E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193C2046C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193C20C94(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_193C20F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193C212F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193C22D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL28_MPMLInitPropertyTVSeasonMapv_block_invoke_4(uint64_t a1, void *a2, uint64_t *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  mlcore *v15;
  mlcore *v16;
  mlcore *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  void *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  _QWORD v43[3];
  int64x2_t *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  int64x2_t v48;
  uint64_t v49;
  void **v50;

  v4 = a2;
  v48 = 0uLL;
  v49 = 0;
  objc_msgSend(v4, "modelKind");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "identityKind");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[MPModelTVSeasonKind identityKind](MPModelTVSeasonKind, "identityKind");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "isEqual:", v7);

  if ((v8 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyTVSeasonMap()_block_invoke_4");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "handleFailureInFunction:file:lineNumber:description:", v40, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 3074, CFSTR("Must have TV Season kind to generate TV Season entity query."));

  }
  v9 = (std::__shared_weak_count *)a3[1];
  v46 = *a3;
  v47 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  objc_msgSend(v5, "applyToView:withContext:", &v46, v4);
  v12 = v47;
  if (v47)
  {
    v13 = (unint64_t *)&v47->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  objc_msgSend(v4, "allowedEntityIdentifiers");
  v15 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v16 = (mlcore *)mlcore::AlbumPropertyStoreID(v15);
  v17 = (mlcore *)mlcore::AlbumPropertyPersistentID(v16);
  v18 = mlcore::AlbumPropertySyncID(v17);
  _MPMLInsertPredicatesForIdentifierSet(&v48, v15, (uint64_t)v16, 0, (uint64_t)v17, 0, 0, v18, 0, 0);

  objc_msgSend(v4, "scopedContainers");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "firstObject");
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v20, "identifiers");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "library");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "persistentID");

  memset(v43, 0, sizeof(v43));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v43, v48.i64[0], (_QWORD *)v48.i64[1], (v48.i64[1] - v48.i64[0]) >> 4);
  mlcore::CreateAndPredicate();
  v50 = (void **)v43;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100](&v50);
  v23 = objc_opt_class();
  if (v23 == objc_opt_class())
    __assert_rtn("_MPMLInitPropertyTVSeasonMap_block_invoke_4", "MPMediaLibraryTranslatorSchema.mm", 3086, "0");
  v24 = objc_opt_class();
  if (v24 == objc_opt_class())
  {
    v30 = (std::__shared_weak_count *)operator new(0x100uLL);
    v30->__shared_owners_ = 0;
    v30->__shared_weak_owners_ = 0;
    v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AB10;
    mlcore::TVShow::TVShow((mlcore::TVShow *)&v30[1]);
    v42 = v45;
    if (v45)
    {
      v31 = (unint64_t *)&v45->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    mlcore::EntityQuery::tvSeasonsForShowQuery();
    if (v42)
    {
      v33 = (unint64_t *)&v42->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v27 = v30;
    if (v30)
    {
      v35 = (unint64_t *)&v30->__shared_owners_;
      do
        v29 = __ldaxr(v35);
      while (__stlxr(v29 - 1, v35));
LABEL_31:
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  else
  {
    v41 = v45;
    if (v45)
    {
      v25 = (unint64_t *)&v45->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    mlcore::EntityQuery::tvSeasonsQuery();
    v27 = v41;
    if (v41)
    {
      v28 = (unint64_t *)&v41->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      goto LABEL_31;
    }
  }
  v36 = v45;
  if (v45)
  {
    v37 = (unint64_t *)&v45->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }

  v44 = &v48;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);

}

void sub_193C231C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  a21 = (void **)(v25 - 96);
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100](&a21);

  _Unwind_Resume(a1);
}

void ___ZL28_MPMLInitPropertyComposerMapv_block_invoke_3(uint64_t a1, void *a2, uint64_t *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  mlcore *v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  id v19;
  mlcore *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  int64x2_t v39;
  uint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  void *v55;
  _QWORD v56[3];
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  __int128 v63;
  void *__p[2];
  char v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  int64x2_t v68;
  unint64_t v69;
  int64x2_t *v70;
  int64x2_t v71;
  unint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v68 = 0uLL;
  v69 = 0;
  objc_msgSend(v4, "modelKind");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "identityKind");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[MPModelComposerKind identityKind](MPModelComposerKind, "identityKind");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "isEqual:", v7);

  if ((v8 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyComposerMap()_block_invoke_3");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "handleFailureInFunction:file:lineNumber:description:", v55, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 1944, CFSTR("Must have composer kind to generate composer entity query."));

  }
  v9 = (std::__shared_weak_count *)a3[1];
  v66 = *a3;
  v67 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  objc_msgSend(v5, "applyToView:withContext:", &v66, v4);
  v12 = v67;
  if (v67)
  {
    v13 = (unint64_t *)&v67->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  objc_msgSend(v4, "allowedEntityIdentifiers");
  v15 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v16 = mlcore::ComposerPropertyPersistentID(v15);
  _MPMLInsertPredicatesForIdentifierSet(&v68, v15, 0, 0, v16, 0, 0, 0, 0, 0);

  objc_msgSend(v4, "filterText");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "length") == 0;

  if (!v18)
  {
    objc_msgSend(v4, "filterText");
    v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v19, "UTF8String"));

    v21 = mlcore::ComposerPropertyName(v20);
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *,std::string&,void>(&v58, v21, (uint64_t)__p);
    v23 = v58;
    v22 = v59;
    v74 = v58;
    v75 = v59;
    v58 = 0;
    v59 = 0;
    v61 = 0;
    v62 = 0;
    v60 = 0;
    v70 = (int64x2_t *)&v60;
    v71.i8[0] = 0;
    v24 = operator new(0x10uLL);
    v60 = v24;
    v61 = v24;
    v62 = v24 + 2;
    *v24 = v23;
    v24[1] = v22;
    if (v22)
    {
      v25 = (unint64_t *)&v22->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v61 = v24 + 2;
    mlcore::CreateOrPredicate();
    v27 = v68.i64[1];
    if (v68.i64[1] >= v69)
    {
      v28 = (v68.i64[1] - v68.i64[0]) >> 4;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60)
        std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
      v30 = v69 - v68.i64[0];
      if ((uint64_t)(v69 - v68.i64[0]) >> 3 > v29)
        v29 = v30 >> 3;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
        v31 = 0xFFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      v73 = &v69;
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v31);
      v34 = &v32[16 * v28];
      *(_OWORD *)v34 = v63;
      v63 = 0uLL;
      v35 = (_QWORD *)v68.i64[1];
      v36 = v68.i64[0];
      if (v68.i64[1] == v68.i64[0])
      {
        v39 = vdupq_n_s64(v68.u64[1]);
        v37 = (uint64_t)&v32[16 * v28];
      }
      else
      {
        v37 = (uint64_t)&v32[16 * v28];
        do
        {
          v38 = *((_OWORD *)v35 - 1);
          v35 -= 2;
          *(_OWORD *)(v37 - 16) = v38;
          v37 -= 16;
          *v35 = 0;
          v35[1] = 0;
        }
        while (v35 != (_QWORD *)v36);
        v39 = v68;
      }
      v40 = (uint64_t)(v34 + 16);
      v68.i64[0] = v37;
      v68.i64[1] = (uint64_t)(v34 + 16);
      v71 = v39;
      v41 = v69;
      v69 = (unint64_t)&v32[16 * v33];
      v72 = v41;
      v70 = (int64x2_t *)v39.i64[0];
      std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v70);
      v42 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      v68.i64[1] = v40;
      if (*((_QWORD *)&v63 + 1))
      {
        v43 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
    }
    else
    {
      *(_OWORD *)v68.i64[1] = v63;
      v63 = 0uLL;
      v68.i64[1] = v27 + 16;
    }
    v70 = (int64x2_t *)&v60;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    v45 = v75;
    if (v75)
    {
      v46 = (unint64_t *)&v75->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = v59;
    if (v59)
    {
      v49 = (unint64_t *)&v59->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (v65 < 0)
      operator delete(__p[0]);
  }
  memset(v56, 0, sizeof(v56));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v56, v68.i64[0], (_QWORD *)v68.i64[1], (v68.i64[1] - v68.i64[0]) >> 4);
  mlcore::CreateAndPredicate();
  mlcore::EntityQuery::composersQuery();
  v51 = v57;
  if (v57)
  {
    v52 = (unint64_t *)&v57->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v70 = (int64x2_t *)v56;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);

  v70 = &v68;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);

}

void sub_193C237AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  __p = &a32;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_193C239A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyGenreMapv_block_invoke_3(uint64_t a1, void *a2, uint64_t *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  mlcore *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  mlcore *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  int64x2_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  void *v41;
  __int128 v42;
  _QWORD v43[3];
  std::__shared_weak_count *v44;
  __int128 v45;
  __int128 v46;
  void *__p[2];
  char v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  int64x2_t v51;
  unint64_t v52;
  int64x2_t *v53;
  int64x2_t v54;
  unint64_t v55;
  unint64_t *v56;

  v4 = a2;
  v51 = 0uLL;
  v52 = 0;
  objc_msgSend(v4, "modelKind");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "identityKind");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[MPModelGenreKind identityKind](MPModelGenreKind, "identityKind");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "isEqual:", v7);

  if ((v8 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyGenreMap()_block_invoke_3");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "handleFailureInFunction:file:lineNumber:description:", v41, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 2079, CFSTR("Must have Genre kind to generate Genre entity query."));

  }
  v9 = (std::__shared_weak_count *)a3[1];
  v49 = *a3;
  v50 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  objc_msgSend(v5, "applyToView:withContext:", &v49, v4);
  v12 = v50;
  if (v50)
  {
    v13 = (unint64_t *)&v50->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  objc_msgSend(v4, "allowedEntityIdentifiers");
  v15 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v16 = mlcore::GenrePropertyPersistentID(v15);
  _MPMLInsertPredicatesForIdentifierSet(&v51, v15, 0, 0, v16, 0, 0, 0, 0, 0);

  objc_msgSend(v4, "filterText");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "length");

  if (v18)
  {
    objc_msgSend(v4, "filterText");
    v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v19, "UTF8String"));

    v21 = mlcore::GenrePropertyName(v20);
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *,std::string&,void>(&v45, v21, (uint64_t)__p);
    v22 = v45;
    v46 = v45;
    v45 = 0uLL;
    v23 = v51.i64[1];
    if (v51.i64[1] >= v52)
    {
      v42 = v22;
      v25 = (v51.i64[1] - v51.i64[0]) >> 4;
      if ((unint64_t)(v25 + 1) >> 60)
        std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
      v26 = (uint64_t)(v52 - v51.i64[0]) >> 3;
      if (v26 <= v25 + 1)
        v26 = v25 + 1;
      if (v52 - v51.i64[0] >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      v56 = &v52;
      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v27);
      v30 = &v28[16 * v25];
      *(_OWORD *)v30 = v42;
      v46 = 0uLL;
      v31 = (_QWORD *)v51.i64[1];
      v32 = v51.i64[0];
      if (v51.i64[1] == v51.i64[0])
      {
        v35 = vdupq_n_s64(v51.u64[1]);
        v33 = (uint64_t)&v28[16 * v25];
      }
      else
      {
        v33 = (uint64_t)&v28[16 * v25];
        do
        {
          v34 = *((_OWORD *)v31 - 1);
          v31 -= 2;
          *(_OWORD *)(v33 - 16) = v34;
          v33 -= 16;
          *v31 = 0;
          v31[1] = 0;
        }
        while (v31 != (_QWORD *)v32);
        v35 = v51;
      }
      v24 = (uint64_t)(v30 + 16);
      v51.i64[0] = v33;
      v51.i64[1] = (uint64_t)(v30 + 16);
      v54 = v35;
      v36 = v52;
      v52 = (unint64_t)&v28[16 * v29];
      v55 = v36;
      v53 = (int64x2_t *)v35.i64[0];
      std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v53);
    }
    else
    {
      *(_OWORD *)v51.i64[1] = v22;
      v24 = v23 + 16;
      v46 = 0uLL;
    }
    v51.i64[1] = v24;
    if (v48 < 0)
      operator delete(__p[0]);
  }
  memset(v43, 0, sizeof(v43));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v43, v51.i64[0], (_QWORD *)v51.i64[1], (v51.i64[1] - v51.i64[0]) >> 4);
  mlcore::CreateAndPredicate();
  mlcore::EntityQuery::genresQuery();
  v37 = v44;
  if (v44)
  {
    v38 = (unint64_t *)&v44->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v53 = (int64x2_t *)v43;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);

  v53 = &v51;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);

}

void sub_193C23D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;

  __p = (void *)(v34 - 128);
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_193C23F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void ___ZL26_MPMLInitPropertyTVShowMapv_block_invoke_4(uint64_t a1, void *a2, uint64_t *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  mlcore *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  mlcore *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  int64x2_t v39;
  uint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  void *v55;
  _QWORD v56[3];
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  __int128 v63;
  void *__p[2];
  char v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  int64x2_t v68;
  unint64_t v69;
  int64x2_t *v70;
  int64x2_t v71;
  unint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v68 = 0uLL;
  v69 = 0;
  objc_msgSend(v4, "modelKind");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "identityKind");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[MPModelTVShowKind identityKind](MPModelTVShowKind, "identityKind");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "isEqual:", v7);

  if ((v8 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyTVShowMap()_block_invoke_4");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "handleFailureInFunction:file:lineNumber:description:", v55, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 3207, CFSTR("Must have TV Show kind to generate TV Show entity query."));

  }
  v9 = (std::__shared_weak_count *)a3[1];
  v66 = *a3;
  v67 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  objc_msgSend(v5, "applyToView:withContext:", &v66, v4);
  v12 = v67;
  if (v67)
  {
    v13 = (unint64_t *)&v67->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  objc_msgSend(v4, "allowedEntityIdentifiers");
  v15 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v16 = mlcore::ItemArtistPropertyStoreID(v15);
  v17 = mlcore::ItemArtistPropertyPersistentID((mlcore *)v16);
  _MPMLInsertPredicatesForIdentifierSet(&v68, v15, v16, 0, v17, 0, 0, 0, 0, 0);

  objc_msgSend(v4, "filterText");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v16) = objc_msgSend(v18, "length") == 0;

  if ((v16 & 1) == 0)
  {
    objc_msgSend(v4, "filterText");
    v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v19, "UTF8String"));

    v21 = mlcore::ItemArtistPropertyName(v20);
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *,std::string&,void>(&v58, v21, (uint64_t)__p);
    v23 = v58;
    v22 = v59;
    v74 = v58;
    v75 = v59;
    v58 = 0;
    v59 = 0;
    v61 = 0;
    v62 = 0;
    v60 = 0;
    v70 = (int64x2_t *)&v60;
    v71.i8[0] = 0;
    v24 = operator new(0x10uLL);
    v60 = v24;
    v61 = v24;
    v62 = v24 + 2;
    *v24 = v23;
    v24[1] = v22;
    if (v22)
    {
      v25 = (unint64_t *)&v22->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v61 = v24 + 2;
    mlcore::CreateOrPredicate();
    v27 = v68.i64[1];
    if (v68.i64[1] >= v69)
    {
      v28 = (v68.i64[1] - v68.i64[0]) >> 4;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60)
        std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
      v30 = v69 - v68.i64[0];
      if ((uint64_t)(v69 - v68.i64[0]) >> 3 > v29)
        v29 = v30 >> 3;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
        v31 = 0xFFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      v73 = &v69;
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v31);
      v34 = &v32[16 * v28];
      *(_OWORD *)v34 = v63;
      v63 = 0uLL;
      v35 = (_QWORD *)v68.i64[1];
      v36 = v68.i64[0];
      if (v68.i64[1] == v68.i64[0])
      {
        v39 = vdupq_n_s64(v68.u64[1]);
        v37 = (uint64_t)&v32[16 * v28];
      }
      else
      {
        v37 = (uint64_t)&v32[16 * v28];
        do
        {
          v38 = *((_OWORD *)v35 - 1);
          v35 -= 2;
          *(_OWORD *)(v37 - 16) = v38;
          v37 -= 16;
          *v35 = 0;
          v35[1] = 0;
        }
        while (v35 != (_QWORD *)v36);
        v39 = v68;
      }
      v40 = (uint64_t)(v34 + 16);
      v68.i64[0] = v37;
      v68.i64[1] = (uint64_t)(v34 + 16);
      v71 = v39;
      v41 = v69;
      v69 = (unint64_t)&v32[16 * v33];
      v72 = v41;
      v70 = (int64x2_t *)v39.i64[0];
      std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v70);
      v42 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      v68.i64[1] = v40;
      if (*((_QWORD *)&v63 + 1))
      {
        v43 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
    }
    else
    {
      *(_OWORD *)v68.i64[1] = v63;
      v63 = 0uLL;
      v68.i64[1] = v27 + 16;
    }
    v70 = (int64x2_t *)&v60;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    v45 = v75;
    if (v75)
    {
      v46 = (unint64_t *)&v75->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = v59;
    if (v59)
    {
      v49 = (unint64_t *)&v59->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (v65 < 0)
      operator delete(__p[0]);
  }
  memset(v56, 0, sizeof(v56));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v56, v68.i64[0], (_QWORD *)v68.i64[1], (v68.i64[1] - v68.i64[0]) >> 4);
  mlcore::CreateAndPredicate();
  mlcore::EntityQuery::tvShowsQuery();
  v51 = v57;
  if (v57)
  {
    v52 = (unint64_t *)&v57->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v70 = (int64x2_t *)v56;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);

  v70 = &v68;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);

}

void sub_193C24418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  __p = &a32;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_193C24614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_5(uint64_t a1, void *a2, uint64_t *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  mlcore *v15;
  uint64_t v16;
  mlcore *v17;
  mlcore *v18;
  mlcore *v19;
  mlcore *v20;
  mlcore *v21;
  uint64_t v22;
  void *v23;
  id v24;
  mlcore *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  int64x2_t v44;
  uint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  void *v60;
  _QWORD v61[3];
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  __int128 v68;
  void *__p[2];
  char v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  int64x2_t v73;
  unint64_t v74;
  int64x2_t *v75;
  int64x2_t v76;
  unint64_t v77;
  unint64_t *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v73 = 0uLL;
  v74 = 0;
  objc_msgSend(v4, "modelKind");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "identityKind");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[MPModelMovieKind identityKind](MPModelMovieKind, "identityKind");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "isEqual:", v7);

  if ((v8 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyMovieMap()_block_invoke_5");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "handleFailureInFunction:file:lineNumber:description:", v60, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 2623, CFSTR("Must have Movie kind to generate Movie entity query."));

  }
  v9 = (std::__shared_weak_count *)a3[1];
  v71 = *a3;
  v72 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  objc_msgSend(v5, "applyToView:withContext:", &v71, v4);
  v12 = v72;
  if (v72)
  {
    v13 = (unint64_t *)&v72->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  objc_msgSend(v4, "allowedEntityIdentifiers");
  v15 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v16 = mlcore::ItemPropertyStoreID(v15);
  v17 = (mlcore *)mlcore::ItemPropertySubscriptionStoreItemID((mlcore *)v16);
  v18 = (mlcore *)mlcore::ItemPropertyPersistentID(v17);
  v19 = (mlcore *)mlcore::ItemPropertyStoreCloudID(v18);
  v20 = (mlcore *)mlcore::ItemPropertySyncID(v19);
  v21 = (mlcore *)mlcore::ItemPropertyStoreCloudUniversalLibraryID(v20);
  v22 = mlcore::ItemPropertyStoreCloudAlbumID(v21);
  _MPMLInsertPredicatesForIdentifierSet(&v73, v15, v16, (uint64_t)v17, (uint64_t)v18, (uint64_t)v19, 0, (uint64_t)v20, (uint64_t)v21, v22);

  objc_msgSend(v4, "filterText");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v16) = objc_msgSend(v23, "length") == 0;

  if ((v16 & 1) == 0)
  {
    objc_msgSend(v4, "filterText");
    v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v24, "UTF8String"));

    v26 = mlcore::ItemPropertyTitle(v25);
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *,std::string&,void>(&v63, v26, (uint64_t)__p);
    v28 = v63;
    v27 = v64;
    v79 = v63;
    v80 = v64;
    v63 = 0;
    v64 = 0;
    v66 = 0;
    v67 = 0;
    v65 = 0;
    v75 = (int64x2_t *)&v65;
    v76.i8[0] = 0;
    v29 = operator new(0x10uLL);
    v65 = v29;
    v66 = v29;
    v67 = v29 + 2;
    *v29 = v28;
    v29[1] = v27;
    if (v27)
    {
      v30 = (unint64_t *)&v27->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v66 = v29 + 2;
    mlcore::CreateOrPredicate();
    v32 = v73.i64[1];
    if (v73.i64[1] >= v74)
    {
      v33 = (v73.i64[1] - v73.i64[0]) >> 4;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 60)
        std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
      v35 = v74 - v73.i64[0];
      if ((uint64_t)(v74 - v73.i64[0]) >> 3 > v34)
        v34 = v35 >> 3;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
        v36 = 0xFFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      v78 = &v74;
      v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v36);
      v39 = &v37[16 * v33];
      *(_OWORD *)v39 = v68;
      v68 = 0uLL;
      v40 = (_QWORD *)v73.i64[1];
      v41 = v73.i64[0];
      if (v73.i64[1] == v73.i64[0])
      {
        v44 = vdupq_n_s64(v73.u64[1]);
        v42 = (uint64_t)&v37[16 * v33];
      }
      else
      {
        v42 = (uint64_t)&v37[16 * v33];
        do
        {
          v43 = *((_OWORD *)v40 - 1);
          v40 -= 2;
          *(_OWORD *)(v42 - 16) = v43;
          v42 -= 16;
          *v40 = 0;
          v40[1] = 0;
        }
        while (v40 != (_QWORD *)v41);
        v44 = v73;
      }
      v45 = (uint64_t)(v39 + 16);
      v73.i64[0] = v42;
      v73.i64[1] = (uint64_t)(v39 + 16);
      v76 = v44;
      v46 = v74;
      v74 = (unint64_t)&v37[16 * v38];
      v77 = v46;
      v75 = (int64x2_t *)v44.i64[0];
      std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v75);
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
      v73.i64[1] = v45;
      if (*((_QWORD *)&v68 + 1))
      {
        v48 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
    else
    {
      *(_OWORD *)v73.i64[1] = v68;
      v68 = 0uLL;
      v73.i64[1] = v32 + 16;
    }
    v75 = (int64x2_t *)&v65;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
    v50 = v80;
    if (v80)
    {
      v51 = (unint64_t *)&v80->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = v64;
    if (v64)
    {
      v54 = (unint64_t *)&v64->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (v70 < 0)
      operator delete(__p[0]);
  }
  memset(v61, 0, sizeof(v61));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v61, v73.i64[0], (_QWORD *)v73.i64[1], (v73.i64[1] - v73.i64[0]) >> 4);
  mlcore::CreateAndPredicate();
  mlcore::EntityQuery::moviesQuery();
  v56 = v62;
  if (v62)
  {
    v57 = (unint64_t *)&v62->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v75 = (int64x2_t *)v61;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);

  v75 = &v73;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);

}

void sub_193C24B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  __p = &a32;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_193C250E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_5(uint64_t a1, void *a2, uint64_t *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  mlcore *v15;
  uint64_t v16;
  mlcore *v17;
  mlcore *v18;
  mlcore *v19;
  uint64_t v20;
  void *v21;
  id v22;
  mlcore *v23;
  uint64_t v24;
  mlcore *v25;
  uint64_t v26;
  _OWORD *v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  int64x2_t v46;
  uint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t i;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  mlcore *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void *v107;
  void *v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count *v114;
  _QWORD v115[3];
  __int128 v116;
  __int128 v117;
  _OWORD *v118;
  _OWORD *v119;
  _OWORD *v120;
  __int128 v121;
  void *v122[2];
  char v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  int64x2_t v126;
  unint64_t v127;
  int64x2_t *v128;
  int64x2_t v129;
  unint64_t v130;
  unint64_t *v131;
  _OWORD v132[2];
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v126 = 0uLL;
  v127 = 0;
  objc_msgSend(v4, "modelKind");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "identityKind");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[MPModelAlbumKind identityKind](MPModelAlbumKind, "identityKind");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "isEqual:", v7);

  if ((v8 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyAlbumMap()_block_invoke_5");
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v107, "handleFailureInFunction:file:lineNumber:description:", v108, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 917, CFSTR("Must have album kind to generate album entity query."));

  }
  v9 = (std::__shared_weak_count *)a3[1];
  v124 = *a3;
  v125 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  objc_msgSend(v5, "applyToView:withContext:", &v124, v4);
  v12 = v125;
  if (v125)
  {
    v13 = (unint64_t *)&v125->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  objc_msgSend(v4, "allowedEntityIdentifiers");
  v15 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v16 = mlcore::AlbumPropertyStoreID(v15);
  v17 = (mlcore *)mlcore::AlbumPropertyPersistentID((mlcore *)v16);
  v18 = (mlcore *)mlcore::AlbumPropertySyncID(v17);
  v19 = (mlcore *)mlcore::AlbumPropertyCloudLibraryID(v18);
  v20 = mlcore::AlbumPropertyCloudLibraryID(v19);
  _MPMLInsertPredicatesForIdentifierSet(&v126, v15, v16, 0, (uint64_t)v17, 0, 0, (uint64_t)v18, (uint64_t)v19, v20);

  objc_msgSend(v4, "filterText");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v16) = objc_msgSend(v21, "length") == 0;

  if ((v16 & 1) == 0)
  {
    objc_msgSend(v4, "filterText");
    v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(v122, (char *)objc_msgSend(v22, "UTF8String"));

    v24 = mlcore::AlbumPropertyTitle(v23);
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *,std::string&,void>(&v117, v24, (uint64_t)v122);
    v132[0] = v117;
    v117 = 0uLL;
    v26 = mlcore::AlbumPropertyArtistName(v25);
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *,std::string&,void>(&v116, v26, (uint64_t)v122);
    v132[1] = v116;
    v116 = 0uLL;
    v119 = 0;
    v120 = 0;
    v118 = 0;
    v128 = (int64x2_t *)&v118;
    v129.i8[0] = 0;
    v27 = operator new(0x20uLL);
    v28 = 0;
    v29 = 0;
    v118 = v27;
    v119 = v27;
    v120 = v27 + 2;
    do
    {
      v30 = v28;
      v31 = v132[v29];
      *v27 = v31;
      if (*((_QWORD *)&v31 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      ++v27;
      v28 = 1;
      v29 = 1;
    }
    while ((v30 & 1) == 0);
    v119 = v27;
    mlcore::CreateOrPredicate();
    v34 = v126.i64[1];
    if (v126.i64[1] >= v127)
    {
      v35 = (v126.i64[1] - v126.i64[0]) >> 4;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 60)
        std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
      v37 = v127 - v126.i64[0];
      if ((uint64_t)(v127 - v126.i64[0]) >> 3 > v36)
        v36 = v37 >> 3;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
        v38 = 0xFFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      v131 = &v127;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v38);
      v41 = &v39[16 * v35];
      *(_OWORD *)v41 = v121;
      v121 = 0uLL;
      v42 = (_QWORD *)v126.i64[1];
      v43 = v126.i64[0];
      if (v126.i64[1] == v126.i64[0])
      {
        v46 = vdupq_n_s64(v126.u64[1]);
        v44 = (uint64_t)&v39[16 * v35];
      }
      else
      {
        v44 = (uint64_t)&v39[16 * v35];
        do
        {
          v45 = *((_OWORD *)v42 - 1);
          v42 -= 2;
          *(_OWORD *)(v44 - 16) = v45;
          v44 -= 16;
          *v42 = 0;
          v42[1] = 0;
        }
        while (v42 != (_QWORD *)v43);
        v46 = v126;
      }
      v47 = (uint64_t)(v41 + 16);
      v126.i64[0] = v44;
      v126.i64[1] = (uint64_t)(v41 + 16);
      v129 = v46;
      v48 = v127;
      v127 = (unint64_t)&v39[16 * v40];
      v130 = v48;
      v128 = (int64x2_t *)v46.i64[0];
      std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v128);
      v49 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
      v126.i64[1] = v47;
      if (*((_QWORD *)&v121 + 1))
      {
        v50 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
    }
    else
    {
      *(_OWORD *)v126.i64[1] = v121;
      v121 = 0uLL;
      v126.i64[1] = v34 + 16;
    }
    v128 = (int64x2_t *)&v118;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
    for (i = 1; i != -1; --i)
      std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&v132[i]);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
    if (*((_QWORD *)&v116 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
    if (*((_QWORD *)&v117 + 1))
    {
      v57 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (v123 < 0)
      operator delete(v122[0]);
  }
  objc_msgSend(v4, "scopedContainers");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v59, "firstObject");
  v60 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v60, "identifiers");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v61, "library");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  v63 = objc_msgSend(v62, "persistentID");

  objc_msgSend(v61, "universalStore");
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  v65 = (void *)objc_msgSend(v64, "adamID");

  v122[0] = v65;
  memset(v115, 0, sizeof(v115));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v115, v126.i64[0], (_QWORD *)v126.i64[1], (v126.i64[1] - v126.i64[0]) >> 4);
  mlcore::CreateAndPredicate();
  *(_QWORD *)&v132[0] = v115;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)v132);
  v66 = objc_opt_class();
  if (v66 == objc_opt_class())
    __assert_rtn("_MPMLInitPropertyAlbumMap_block_invoke_5", "MPMediaLibraryTranslatorSchema.mm", 938, "0");
  v67 = objc_opt_class();
  v68 = (mlcore *)objc_opt_class();
  if ((mlcore *)v67 != v68)
  {
    v69 = objc_opt_class();
    if (v69 == objc_opt_class())
    {
      v80 = (std::__shared_weak_count *)operator new(0x100uLL);
      v80->__shared_owners_ = 0;
      v80->__shared_weak_owners_ = 0;
      v80->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AA68;
      mlcore::Genre::Genre((mlcore::Genre *)&v80[1]);
      v111 = (std::__shared_weak_count *)v129.i64[0];
      if (v129.i64[0])
      {
        v81 = (unint64_t *)(v129.i64[0] + 8);
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      mlcore::EntityQuery::albumsForGenreQuery();
      if (v111)
      {
        v83 = (unint64_t *)&v111->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      v77 = v80;
      if (!v80)
        goto LABEL_122;
      v85 = (unint64_t *)&v80->__shared_owners_;
      do
        v79 = __ldaxr(v85);
      while (__stlxr(v79 - 1, v85));
    }
    else
    {
      v70 = objc_opt_class();
      if (v70 != objc_opt_class())
        goto LABEL_53;
      v86 = (std::__shared_weak_count *)operator new(0x100uLL);
      v86->__shared_owners_ = 0;
      v86->__shared_weak_owners_ = 0;
      v86->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AB48;
      mlcore::Composer::Composer((mlcore::Composer *)&v86[1]);
      v110 = (std::__shared_weak_count *)v129.i64[0];
      if (v129.i64[0])
      {
        v87 = (unint64_t *)(v129.i64[0] + 8);
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      mlcore::EntityQuery::albumsForComposerQuery();
      if (v110)
      {
        v89 = (unint64_t *)&v110->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      v77 = v86;
      if (!v86)
        goto LABEL_122;
      v91 = (unint64_t *)&v86->__shared_owners_;
      do
        v79 = __ldaxr(v91);
      while (__stlxr(v79 - 1, v91));
    }
LABEL_120:
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
    goto LABEL_122;
  }
  if (v63)
  {
    v72 = (std::__shared_weak_count *)operator new(0x100uLL);
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AAD8;
    mlcore::Artist::Artist((mlcore::Artist *)&v72[1]);
    v114 = (std::__shared_weak_count *)v129.i64[0];
    if (v129.i64[0])
    {
      v73 = (unint64_t *)(v129.i64[0] + 8);
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
    }
    mlcore::EntityQuery::albumsForArtistQuery();
    if (v114)
    {
      v75 = (unint64_t *)&v114->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    v77 = v72;
    if (!v72)
      goto LABEL_122;
    v78 = (unint64_t *)&v72->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    goto LABEL_120;
  }
  if (v65)
  {
    mlcore::ItemPropertyArtistStoreID(v68);
    std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<long long>,std::allocator<mlcore::ComparisonPredicate<long long>>,mlcore::ModelProperty<long long> *&,mlcore::ComparisonOperator,long long const&,void>((uint64_t *)v132);
    v113 = (std::__shared_weak_count *)*((_QWORD *)&v132[0] + 1);
    if (*((_QWORD *)&v132[0] + 1))
    {
      v92 = (unint64_t *)(*((_QWORD *)&v132[0] + 1) + 8);
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 1, v92));
    }
    v112 = (std::__shared_weak_count *)v129.i64[0];
    if (v129.i64[0])
    {
      v94 = (unint64_t *)(v129.i64[0] + 8);
      do
        v95 = __ldxr(v94);
      while (__stxr(v95 + 1, v94));
    }
    mlcore::EntityQuery::albumsForArtistQueryWithPredicate();
    if (v112)
    {
      v96 = (unint64_t *)&v112->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    if (v113)
    {
      v98 = (unint64_t *)&v113->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    v77 = (std::__shared_weak_count *)*((_QWORD *)&v132[0] + 1);
    if (!*((_QWORD *)&v132[0] + 1))
      goto LABEL_122;
    v100 = (unint64_t *)(*((_QWORD *)&v132[0] + 1) + 8);
    do
      v79 = __ldaxr(v100);
    while (__stlxr(v79 - 1, v100));
    goto LABEL_120;
  }
LABEL_53:
  objc_msgSend(v4, "allowedEntityIdentifiers");
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v71, "count"))
    objc_msgSend(v4, "isMultiQuery");

  v109 = (std::__shared_weak_count *)v129.i64[0];
  if (v129.i64[0])
  {
    v101 = (unint64_t *)(v129.i64[0] + 8);
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
  }
  mlcore::EntityQuery::albumsQuery();
  v77 = v109;
  if (v109)
  {
    v103 = (unint64_t *)&v109->__shared_owners_;
    do
      v79 = __ldaxr(v103);
    while (__stlxr(v79 - 1, v103));
    goto LABEL_120;
  }
LABEL_122:
  v104 = (std::__shared_weak_count *)v129.i64[0];
  if (v129.i64[0])
  {
    v105 = (unint64_t *)(v129.i64[0] + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }

  v128 = &v126;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);

}

void sub_193C25B3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 128) = v5 - 208;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v5 - 128));

  _Unwind_Resume(a1);
}

void sub_193C25EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_193C26900(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t p_p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t v64;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  id v72;
  void *v73;
  void *v74;
  void *v75;
  id v76;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a64);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  a64 = v64 - 256;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a64);
  *(_QWORD *)(v64 - 256) = &p_p;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v64 - 256));
  p_p = (uint64_t)&__p;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  __p = &a15;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a2 == 2)
  {
    v67 = __cxa_begin_catch(a1);
    v68 = (void *)MEMORY[0x1E0C99DA0];
    v69 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a15);
    (*(void (**)(void **__return_ptr, void *, char *))(*(_QWORD *)v67 + 24))(&__p, v67, &a15);
    if (a58 >= 0)
      v70 = &__p;
    else
      v70 = __p;
    objc_msgSend(v69, "stringWithUTF8String:", v70);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v68, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v71, 0);
    v72 = (id)objc_claimAutoreleasedReturnValue();

    if (a58 < 0)
      operator delete(__p);
    objc_exception_throw(v72);
  }
  if (a2 == 1)
  {
    v73 = __cxa_begin_catch(a1);
    v74 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v73 + 16))(v73));
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v75, 0);
    v76 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v76);
  }

  _Unwind_Resume(a1);
}

void sub_193C26BE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  __cxa_end_catch();

  JUMPOUT(0x193C26C50);
}

void sub_193C26C3C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_193C26F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;
  uint64_t i;
  void *v33;
  void *v34;
  void *v35;
  void **p_p;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  __p = &a19;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)(&a28 + i));
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  if (a2 == 2)
  {
    v33 = __cxa_begin_catch(a1);
    v34 = (void *)MEMORY[0x1E0C99DA0];
    v35 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a28);
    (*(void (**)(char **__return_ptr, void *, char *))(*(_QWORD *)v33 + 24))(&__p, v33, &a28);
    if (a14 >= 0)
      p_p = (void **)&__p;
    else
      p_p = (void **)__p;
    objc_msgSend(v35, "stringWithUTF8String:", p_p);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v37, 0);
    v38 = (id)objc_claimAutoreleasedReturnValue();

    if (a14 < 0)
      operator delete(__p);
    objc_exception_throw(v38);
  }
  if (a2 == 1)
  {
    v39 = __cxa_begin_catch(a1);
    v40 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v39 + 16))(v39));
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v41, 0);
    v42 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v42);
  }

  _Unwind_Resume(a1);
}

void sub_193C27298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_193C27388(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193C274A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_193C276A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_193C27A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;

  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyFileAssetMapv_block_invoke_3(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 *v10;
  void *v11;
  unsigned __int8 *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *__p[2];
  char v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  objc_msgSend(v6, "mediaLibrary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "ml3Library");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "mediaFolderPath");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  std::string::basic_string[abi:ne180100]<0>(__p, "baseLocationPath");
  v10 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v10 + 5), a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "location");
  v12 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v12)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v12 + 5), a4);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19 < 0)
    operator delete(__p[0]);
  if (objc_msgSend(v9, "length") && objc_msgSend(v11, "length") && objc_msgSend(v13, "length"))
  {
    v14 = (void *)MEMORY[0x1E0CB3940];
    v20[0] = v9;
    v20[1] = v11;
    v20[2] = v13;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v20, 3);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "pathWithComponents:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v16 = 0;
  }

  return v16;
}

void sub_193C27E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_193C28578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MPMediaContentTasteTasteTypeToMPMediaEntityLikedState(uint64_t a1)
{
  uint64_t v1;

  v1 = 3;
  if (a1 != 2)
    v1 = 1;
  if (a1 == 1)
    return 2;
  else
    return v1;
}

void sub_193C2953C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __getATAssetClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AirTrafficLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("ATAsset");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getATAssetClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getATAssetClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("MPMediaDownloadManager.m"), 60, CFSTR("Unable to find class %s"), "ATAsset");

    __break(1u);
  }
}

void sub_193C29858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void *AirTrafficLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!AirTrafficLibraryCore_frameworkLibrary)
    AirTrafficLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)AirTrafficLibraryCore_frameworkLibrary;
  if (!AirTrafficLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AirTrafficLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("MPMediaDownloadManager.m"), 59, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void _MPMLInitPropertyMaps(void)
{
  void *v0;
  void *v1;
  mlcore *v2;
  mlcore *v3;
  mlcore *v4;
  mlcore *v5;
  mlcore *v6;
  mlcore *v7;
  mlcore *v8;
  mlcore *v9;
  mlcore *v10;
  mlcore *v11;
  mlcore *v12;
  mlcore *v13;
  mlcore *v14;
  uint64_t v15;
  mlcore *v16;
  void *v17;
  mlcore *v18;
  uint64_t v19;
  mlcore *v20;
  uint64_t v21;
  mlcore *v22;
  uint64_t v23;
  mlcore *v24;
  uint64_t v25;
  mlcore *v26;
  uint64_t v27;
  mlcore *v28;
  uint64_t v29;
  mlcore *v30;
  uint64_t v31;
  mlcore *v32;
  uint64_t v33;
  mlcore *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  mlcore *v38;
  mlcore *v39;
  mlcore *v40;
  mlcore *v41;
  mlcore *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  mlcore *v46;
  uint64_t v47;
  mlcore *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  mlcore *v52;
  mlcore *v53;
  mlcore *v54;
  uint64_t v55;
  mlcore *v56;
  uint64_t HasTrackNumber;
  void *v58;
  void *v59;
  mlcore *v60;
  mlcore *v61;
  mlcore *v62;
  mlcore *v63;
  uint64_t v64;
  mlcore *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  mlcore *v69;
  uint64_t v70;
  void *v71;
  void *v72;
  mlcore *v73;
  uint64_t v74;
  mlcore *v75;
  uint64_t v76;
  mlcore *v77;
  uint64_t v78;
  mlcore *v79;
  uint64_t FrameResync;
  void *v81;
  uint64_t i;
  uint64_t v83;
  void *v84;
  mlcore *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  mlcore *v89;
  uint64_t v90;
  mlcore *v91;
  uint64_t v92;
  mlcore *v93;
  uint64_t v94;
  mlcore *v95;
  uint64_t v96;
  void *v97;
  uint64_t j;
  void *v99;
  mlcore *v100;
  uint64_t IsMasteredForiTunes;
  void *v102;
  uint64_t k;
  mlcore *v104;
  mlcore *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  void *HasNonPurgeableAsset;
  mlcore *v113;
  uint64_t IsStoreRedownloadable;
  void *v115;
  uint64_t m;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  void *v130;
  mlcore *v131;
  mlcore *v132;
  mlcore *v133;
  mlcore *v134;
  mlcore *v135;
  mlcore *v136;
  mlcore *v137;
  mlcore *v138;
  mlcore *v139;
  mlcore *v140;
  uint64_t v141;
  void *v142;
  void *v143;
  mlcore *v144;
  uint64_t v145;
  void *v146;
  uint64_t n;
  mlcore *v148;
  void *HasStreamingAsset;
  mlcore *v150;
  uint64_t v151;
  mlcore *v152;
  uint64_t v153;
  void *v154;
  uint64_t ii;
  uint64_t IsProtected;
  void *v157;
  uint64_t HasLoFiStreamingAsset;
  void *v159;
  uint64_t v160;
  void *v161;
  mlcore *v162;
  mlcore *v163;
  mlcore *v164;
  void *v165;
  mlcore *v166;
  uint64_t v167;
  void *v168;
  uint64_t jj;
  mlcore *v170;
  uint64_t v171;
  void *v172;
  void *v173;
  void *v174;
  mlcore *v175;
  uint64_t v176;
  void *v177;
  uint64_t kk;
  mlcore *v179;
  uint64_t v180;
  void *v181;
  mlcore *v182;
  mlcore *v183;
  mlcore *v184;
  void *matched;
  mlcore *v186;
  uint64_t v187;
  mlcore *v188;
  uint64_t v189;
  mlcore *v190;
  uint64_t v191;
  void *v192;
  uint64_t mm;
  uint64_t v194;
  void *v195;
  mlcore *v196;
  uint64_t v197;
  mlcore *v198;
  uint64_t v199;
  void *v200;
  uint64_t nn;
  void *v202;
  mlcore *v203;
  uint64_t v204;
  mlcore *v205;
  uint64_t v206;
  mlcore *v207;
  uint64_t v208;
  mlcore *v209;
  uint64_t v210;
  mlcore *v211;
  uint64_t v212;
  void *v213;
  uint64_t i1;
  void *v215;
  mlcore *v216;
  uint64_t IsArtistUploadedContent;
  mlcore *v218;
  uint64_t v219;
  void *v220;
  uint64_t i2;
  mlcore *v222;
  uint64_t v223;
  void *v224;
  mlcore *v225;
  mlcore *v226;
  mlcore *v227;
  uint64_t v228;
  mlcore *v229;
  void *v230;
  mlcore *v231;
  uint64_t v232;
  mlcore *v233;
  uint64_t v234;
  mlcore *v235;
  uint64_t v236;
  void *v237;
  uint64_t i3;
  mlcore *v239;
  mlcore *v240;
  mlcore *v241;
  uint64_t v242;
  mlcore *v243;
  void *HasTitle;
  mlcore *v245;
  uint64_t v246;
  void *v247;
  uint64_t i4;
  void *v249;
  uint64_t IsPreOrder;
  void *v251;
  void *v252;
  void *v253;
  void *v254;
  mlcore *v255;
  uint64_t v256;
  mlcore *v257;
  uint64_t v258;
  mlcore *v259;
  uint64_t v260;
  mlcore *v261;
  uint64_t v262;
  void *v263;
  uint64_t i5;
  mlcore *v265;
  mlcore *v266;
  uint64_t v267;
  void *v268;
  uint64_t v269;
  void *v270;
  uint64_t v271;
  void *v272;
  uint64_t v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  uint64_t v278;
  void *v279;
  mlcore *v280;
  ModelPropertyBase *IsExplicit;
  uint64_t Property;
  void *v283;
  uint64_t v284;
  void *v285;
  uint64_t v286;
  void *v287;
  uint64_t v288;
  void *v289;
  uint64_t v290;
  void *v291;
  uint64_t v292;
  void *v293;
  mlcore *v294;
  ModelPropertyBase *v295;
  void *v296;
  mlcore *v297;
  mlcore *v298;
  ModelPropertyBase *v299;
  uint64_t v300;
  void *v301;
  uint64_t i6;
  void *v303;
  mlcore *v304;
  uint64_t v305;
  void *v306;
  uint64_t v307;
  void *v308;
  uint64_t v309;
  void *v310;
  mlcore *v311;
  mlcore *v312;
  mlcore *v313;
  uint64_t v314;
  mlcore *v315;
  void *v316;
  mlcore *v317;
  uint64_t v318;
  mlcore *v319;
  uint64_t v320;
  mlcore *v321;
  uint64_t v322;
  mlcore *v323;
  uint64_t v324;
  mlcore *v325;
  uint64_t v326;
  mlcore *v327;
  uint64_t IsFolder;
  void *v329;
  uint64_t i7;
  uint64_t v331;
  mlcore *v332;
  uint64_t v333;
  void *v334;
  void *v335;
  mlcore *v336;
  mlcore *v337;
  mlcore *v338;
  mlcore *v339;
  mlcore *v340;
  mlcore *v341;
  mlcore *v342;
  void *IsTracklistUserEditable;
  mlcore *v344;
  uint64_t IsSmart;
  mlcore *v346;
  uint64_t v347;
  mlcore *v348;
  uint64_t IsGenius;
  mlcore *v350;
  uint64_t IsSubscribed;
  mlcore *v352;
  uint64_t IsFavoritedSongs;
  mlcore *v354;
  uint64_t IsOwner;
  mlcore *v356;
  uint64_t IsCollaborative;
  void *v358;
  uint64_t i8;
  uint64_t v360;
  void *v361;
  void *v362;
  void *v363;
  mlcore *v364;
  uint64_t v365;
  mlcore *v366;
  uint64_t v367;
  mlcore *v368;
  uint64_t v369;
  void *v370;
  uint64_t i9;
  uint64_t v372;
  void *v373;
  void *v374;
  void *v375;
  void *v376;
  void *v377;
  void *v378;
  uint64_t IsHidden;
  void *v380;
  uint64_t v381;
  void *v382;
  uint64_t v383;
  uint64_t v384;
  void *v385;
  uint64_t v386;
  void *v387;
  uint64_t v388;
  void *v389;
  void *v390;
  void *v391;
  void *v392;
  mlcore *v393;
  uint64_t v394;
  mlcore *v395;
  uint64_t v396;
  mlcore *v397;
  uint64_t ShouldDisplayIndex;
  mlcore *v399;
  uint64_t IsPersonalMix;
  mlcore *v401;
  uint64_t v402;
  mlcore *v403;
  uint64_t IsExternalVendorPlaylist;
  mlcore *v405;
  uint64_t v406;
  mlcore *v407;
  uint64_t IsPublic;
  mlcore *v409;
  uint64_t IsEditorial;
  mlcore *v411;
  uint64_t IsUserShared;
  void *v413;
  uint64_t v414;
  uint64_t v415;
  void *v416;
  uint64_t v417;
  void *v418;
  uint64_t v419;
  void *v420;
  uint64_t v421;
  void *v422;
  uint64_t v423;
  void *v424;
  uint64_t v425;
  void *v426;
  uint64_t v427;
  void *v428;
  uint64_t v429;
  void *v430;
  uint64_t v431;
  void *v432;
  mlcore *v433;
  mlcore *v434;
  mlcore *v435;
  mlcore *v436;
  mlcore *v437;
  mlcore *v438;
  uint64_t v439;
  void *v440;
  uint64_t v441;
  void *v442;
  mlcore *v443;
  mlcore *v444;
  mlcore *v445;
  mlcore *v446;
  void *v447;
  mlcore *v448;
  uint64_t v449;
  void *v450;
  uint64_t i10;
  void *v452;
  mlcore *v453;
  uint64_t v454;
  void *v455;
  uint64_t i11;
  void *v457;
  void *v458;
  uint64_t v459;
  mlcore *v460;
  void *v461;
  mlcore *v462;
  uint64_t v463;
  mlcore *v464;
  uint64_t v465;
  void *v466;
  uint64_t i12;
  uint64_t v468;
  mlcore *v469;
  void *HasName;
  mlcore *v471;
  uint64_t v472;
  void *v473;
  uint64_t i13;
  void *v475;
  void *v476;
  mlcore *v477;
  uint64_t v478;
  mlcore *v479;
  uint64_t v480;
  mlcore *v481;
  uint64_t v482;
  void *v483;
  uint64_t i14;
  mlcore *v485;
  mlcore *v486;
  uint64_t v487;
  void *v488;
  mlcore *v489;
  uint64_t v490;
  void *v491;
  uint64_t v492;
  void *v493;
  uint64_t v494;
  void *v495;
  void *v496;
  mlcore *v497;
  uint64_t v498;
  void *v499;
  uint64_t i15;
  mlcore *v501;
  mlcore *v502;
  ModelPropertyBase *v503;
  uint64_t v504;
  mlcore *v505;
  void *v506;
  mlcore *v507;
  uint64_t v508;
  void *v509;
  uint64_t i16;
  uint64_t v511;
  mlcore *v512;
  void *v513;
  mlcore *v514;
  uint64_t v515;
  void *v516;
  uint64_t i17;
  void *v518;
  void *v519;
  mlcore *v520;
  uint64_t v521;
  mlcore *v522;
  uint64_t v523;
  mlcore *v524;
  uint64_t v525;
  void *v526;
  uint64_t i18;
  void *v528;
  void *v529;
  void *v530;
  void *v531;
  mlcore *v532;
  mlcore *v533;
  ModelPropertyBase *v534;
  uint64_t v535;
  mlcore *v536;
  uint64_t v537;
  void *v538;
  uint64_t v539;
  mlcore *v540;
  void *v541;
  mlcore *v542;
  uint64_t v543;
  void *v544;
  uint64_t i19;
  void *v546;
  uint64_t v547;
  void *v548;
  uint64_t v549;
  mlcore *v550;
  uint64_t v551;
  void *v552;
  uint64_t v553;
  mlcore *v554;
  void *v555;
  mlcore *v556;
  uint64_t v557;
  void *v558;
  uint64_t i20;
  void *v560;
  uint64_t v561;
  void *v562;
  uint64_t v563;
  mlcore *v564;
  void *v565;
  mlcore *v566;
  uint64_t v567;
  mlcore *v568;
  mlcore *v569;
  ModelPropertyBase *v570;
  uint64_t v571;
  mlcore *v572;
  mlcore *v573;
  ModelPropertyBase *v574;
  uint64_t v575;
  mlcore *v576;
  mlcore *v577;
  ModelPropertyBase *v578;
  uint64_t v579;
  mlcore *v580;
  mlcore *v581;
  ModelPropertyBase *v582;
  uint64_t v583;
  mlcore *v584;
  mlcore *v585;
  ModelPropertyBase *v586;
  uint64_t v587;
  mlcore *v588;
  mlcore *v589;
  ModelPropertyBase *v590;
  uint64_t v591;
  mlcore *v592;
  mlcore *v593;
  ModelPropertyBase *v594;
  uint64_t v595;
  mlcore *v596;
  mlcore *v597;
  ModelPropertyBase *v598;
  uint64_t v599;
  mlcore *v600;
  uint64_t v601;
  void *v602;
  uint64_t v603;
  void *v604;
  mlcore *v605;
  mlcore *v606;
  ModelPropertyBase *v607;
  uint64_t v608;
  mlcore *v609;
  uint64_t v610;
  mlcore *v611;
  uint64_t v612;
  mlcore *v613;
  uint64_t v614;
  void *v615;
  uint64_t i21;
  uint64_t v617;
  void *v618;
  void *v619;
  mlcore *v620;
  uint64_t v621;
  void *v622;
  uint64_t i22;
  void *v624;
  mlcore *v625;
  uint64_t v626;
  void *v627;
  uint64_t i23;
  mlcore *v629;
  mlcore *v630;
  void *v631;
  mlcore *v632;
  mlcore *v633;
  ModelPropertyBase *v634;
  uint64_t v635;
  void *v636;
  uint64_t i24;
  mlcore *v638;
  mlcore *v639;
  void *v640;
  mlcore *v641;
  mlcore *v642;
  ModelPropertyBase *v643;
  uint64_t v644;
  void *v645;
  uint64_t i25;
  mlcore *v647;
  mlcore *v648;
  void *v649;
  mlcore *v650;
  mlcore *v651;
  ModelPropertyBase *v652;
  uint64_t v653;
  void *v654;
  uint64_t i26;
  mlcore *v656;
  mlcore *v657;
  ModelPropertyBase *v658;
  mlcore *v659;
  uint64_t v660;
  void *v661;
  mlcore *v662;
  ModelPropertyBase *v663;
  uint64_t v664;
  void *v665;
  uint64_t v666;
  void *v667;
  mlcore *v668;
  uint64_t started;
  void *v670;
  uint64_t v671;
  void *v672;
  mlcore *v673;
  ModelPropertyBase *HasBeenPlayed;
  uint64_t v675;
  void *v676;
  mlcore *v677;
  ModelPropertyBase *v678;
  uint64_t v679;
  void *v680;
  uint64_t v681;
  mlcore *v682;
  uint64_t v683;
  void *v684;
  uint64_t v685;
  mlcore *v686;
  void *v687;
  mlcore *v688;
  uint64_t v689;
  void *v690;
  uint64_t i27;
  void *v692;
  uint64_t v693;
  void *v694;
  void *v695;
  mlcore *v696;
  uint64_t v697;
  mlcore *v698;
  uint64_t v699;
  mlcore *v700;
  uint64_t v701;
  mlcore *v702;
  uint64_t v703;
  void *v704;
  uint64_t i28;
  mlcore *v706;
  uint64_t v707;
  mlcore *v708;
  void *v709;
  mlcore *v710;
  uint64_t v711;
  void *v712;
  uint64_t i29;
  uint64_t v714;
  mlcore *v715;
  void *v716;
  mlcore *v717;
  uint64_t v718;
  void *v719;
  uint64_t i30;
  void *v721;
  uint64_t v722;
  mlcore *v723;
  void *v724;
  mlcore *v725;
  uint64_t v726;
  mlcore *v727;
  uint64_t v728;
  void *v729;
  uint64_t i31;
  uint64_t v731;
  mlcore *v732;
  uint64_t v733;
  void *v734;
  void *v735;
  uint64_t v736;
  void *v737;
  uint64_t v738;
  void *v739;
  uint64_t v740;
  void *v741;
  mlcore *v742;
  mlcore *v743;
  mlcore *v744;
  uint64_t v745;
  void *v746;
  mlcore *v747;
  mlcore *v748;
  mlcore *v749;
  mlcore *v750;
  uint64_t v751;
  mlcore *v752;
  void *v753;
  mlcore *v754;
  uint64_t v755;
  void *v756;
  uint64_t i32;
  uint64_t v758;
  mlcore *v759;
  void *v760;
  mlcore *v761;
  uint64_t v762;
  void *v763;
  uint64_t i33;
  void *v765;
  uint64_t v766;
  mlcore *v767;
  void *v768;
  mlcore *v769;
  uint64_t v770;
  mlcore *v771;
  uint64_t v772;
  mlcore *v773;
  uint64_t v774;
  mlcore *v775;
  uint64_t v776;
  mlcore *v777;
  uint64_t v778;
  mlcore *v779;
  uint64_t v780;
  mlcore *v781;
  uint64_t v782;
  void *v783;
  uint64_t i34;
  uint64_t v785;
  mlcore *v786;
  uint64_t v787;
  void *v788;
  void *v789;
  mlcore *v790;
  uint64_t v791;
  void *v792;
  uint64_t v793;
  void *v794;
  void *v795;
  mlcore *v796;
  uint64_t v797;
  mlcore *v798;
  uint64_t v799;
  mlcore *v800;
  uint64_t v801;
  mlcore *v802;
  uint64_t v803;
  void *v804;
  uint64_t i35;
  void *v806;
  uint64_t v807;
  void *v808;
  void *v809;
  mlcore *v810;
  mlcore *v811;
  mlcore *v812;
  uint64_t v813;
  void *v814;
  uint64_t v815;
  uint64_t v816;
  void *v817;
  uint64_t v818;
  void *v819;
  void *v820;
  mlcore *v821;
  uint64_t v822;
  void *v823;
  uint64_t i36;
  uint64_t v825;
  void *v826;
  uint64_t v827;
  void *v828;
  uint64_t v829;
  void *v830;
  uint64_t v831;
  void *v832;
  void *v833;
  mlcore *v834;
  mlcore *v835;
  mlcore *v836;
  uint64_t v837;
  mlcore *v838;
  void *v839;
  mlcore *v840;
  uint64_t v841;
  mlcore *v842;
  uint64_t v843;
  mlcore *v844;
  uint64_t v845;
  mlcore *v846;
  uint64_t v847;
  mlcore *v848;
  uint64_t v849;
  mlcore *v850;
  uint64_t v851;
  mlcore *v852;
  uint64_t v853;
  void *v854;
  uint64_t i37;
  uint64_t v856;
  mlcore *v857;
  uint64_t v858;
  void *v859;
  void *v860;
  mlcore *v861;
  uint64_t v862;
  void *v863;
  mlcore *v864;
  mlcore *v865;
  mlcore *v866;
  uint64_t v867;
  mlcore *v868;
  uint64_t v869;
  mlcore *v870;
  void *v871;
  mlcore *v872;
  uint64_t v873;
  mlcore *v874;
  uint64_t v875;
  void *v876;
  uint64_t i38;
  void *v878;
  uint64_t i39;
  uint64_t v880;
  void *v881;
  mlcore *v882;
  void *v883;
  mlcore *v884;
  uint64_t v885;
  mlcore *v886;
  uint64_t v887;
  mlcore *v888;
  uint64_t v889;
  mlcore *v890;
  uint64_t v891;
  void *v892;
  uint64_t i40;
  mlcore *v894;
  uint64_t v895;
  void *v896;
  uint64_t v897;
  void *v898;
  uint64_t v899;
  void *v900;
  uint64_t v901;
  uint64_t v902;
  void *v903;
  void *v904;
  mlcore *v905;
  uint64_t v906;
  void *v907;
  uint64_t i41;
  uint64_t v909;
  void *v910;
  uint64_t v911;
  void *v912;
  uint64_t v913;
  void *v914;
  uint64_t v915;
  void *v916;
  mlcore *v917;
  mlcore *v918;
  mlcore *v919;
  mlcore *v920;
  mlcore *v921;
  uint64_t v922;
  mlcore *v923;
  void *v924;
  mlcore *v925;
  uint64_t v926;
  void *v927;
  uint64_t i42;
  mlcore *v929;
  mlcore *v930;
  mlcore *v931;
  uint64_t v932;
  void *v933;
  uint64_t v934;
  void *v935;
  void *v936;
  void *v937;
  void *v938;
  mlcore *v939;
  ModelPropertyBase *v940;
  uint64_t v941;
  void *v942;
  mlcore *v943;
  uint64_t v944;
  void *v945;
  void *v946;
  mlcore *v947;
  uint64_t v948;
  mlcore *v949;
  uint64_t v950;
  mlcore *v951;
  uint64_t v952;
  mlcore *v953;
  uint64_t v954;
  void *v955;
  uint64_t i43;
  mlcore *v957;
  mlcore *v958;
  ModelPropertyBase *v959;
  mlcore *v960;
  uint64_t v961;
  mlcore *v962;
  void *v963;
  mlcore *v964;
  uint64_t v965;
  void *v966;
  uint64_t i44;
  uint64_t v968;
  mlcore *v969;
  void *HasSeriesName;
  mlcore *v971;
  uint64_t v972;
  void *v973;
  uint64_t i45;
  void *v975;
  void *v976;
  mlcore *v977;
  mlcore *v978;
  ModelPropertyBase *v979;
  uint64_t v980;
  mlcore *v981;
  mlcore *v982;
  ModelPropertyBase *v983;
  uint64_t v984;
  mlcore *v985;
  mlcore *v986;
  ModelPropertyBase *v987;
  uint64_t v988;
  mlcore *v989;
  mlcore *v990;
  ModelPropertyBase *v991;
  uint64_t v992;
  void *v993;
  uint64_t i46;
  void *v995;
  mlcore *v996;
  mlcore *v997;
  ModelPropertyBase *v998;
  uint64_t v999;
  void *v1000;
  mlcore *v1001;
  mlcore *v1002;
  ModelPropertyBase *v1003;
  uint64_t v1004;
  mlcore *v1005;
  void *v1006;
  mlcore *v1007;
  uint64_t v1008;
  void *v1009;
  uint64_t i47;
  uint64_t v1011;
  mlcore *v1012;
  void *v1013;
  mlcore *v1014;
  uint64_t v1015;
  void *v1016;
  uint64_t i48;
  void *v1018;
  void *v1019;
  mlcore *v1020;
  uint64_t v1021;
  mlcore *v1022;
  uint64_t v1023;
  mlcore *v1024;
  uint64_t v1025;
  void *v1026;
  uint64_t i49;
  uint64_t v1028;
  mlcore *v1029;
  void *v1030;
  mlcore *v1031;
  uint64_t v1032;
  void *v1033;
  uint64_t i50;
  mlcore *v1035;
  mlcore *v1036;
  void *v1037;
  void *v1038;
  void *v1039;
  void *v1040;
  uint64_t v1041;
  void *v1042;
  uint64_t v1043;
  mlcore *v1044;
  void *v1045;
  mlcore *v1046;
  uint64_t v1047;
  void *v1048;
  uint64_t i51;
  mlcore *v1050;
  mlcore *v1051;
  mlcore *v1052;
  mlcore *v1053;
  ModelPropertyBase *v1054;
  mlcore *v1055;
  mlcore *v1056;
  ModelPropertyBase *v1057;
  uint64_t v1058;
  mlcore *v1059;
  uint64_t v1060;
  void *v1061;
  mlcore *v1062;
  uint64_t v1063;
  void *v1064;
  mlcore *v1065;
  mlcore *v1066;
  ModelPropertyBase *v1067;
  mlcore *v1068;
  mlcore *v1069;
  ModelPropertyBase *v1070;
  void *__p[2];
  void *v1072[2];
  _QWORD v1073[3];
  uint64_t v1074;
  _QWORD v1075[3];
  uint64_t v1076;
  _QWORD v1077[3];
  uint64_t v1078;
  _QWORD v1079[3];
  uint64_t v1080;
  _QWORD v1081[3];
  uint64_t v1082;
  _QWORD v1083[3];
  uint64_t v1084;
  _QWORD v1085[3];
  uint64_t v1086;
  _QWORD v1087[3];
  uint64_t v1088;
  _QWORD v1089[3];
  uint64_t v1090;
  _QWORD v1091[3];
  uint64_t v1092;
  void *v1093[2];
  void **v1094;
  uint64_t v1095;
  void *v1096[2];
  void **v1097;
  uint64_t v1098;
  _QWORD v1099[4];
  void *v1100[2];
  void **v1101;
  uint64_t v1102;
  uint64_t v1103;

  v1103 = *MEMORY[0x1E0C80C00];
  +[MPMediaLibraryEntityTranslator translatorForTransientMPModelClass:](MPMediaLibraryEntityTranslator, "translatorForTransientMPModelClass:", objc_opt_class());
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  objc_msgSend(v0, "mapIdentifierMLProperties:identifierCreationBlock:", __p, &__block_literal_global_19_43388);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v1 = __p[0];
  __p[0] = 0;
  if (v1)
    operator delete(v1);
  objc_msgSend(v0, "setEntityQueryBlock:", &__block_literal_global_21_43389);
  v2 = (mlcore *)objc_opt_class();
  objc_msgSend(v0, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipGenericSong"), v2, 1, mlcore::ItemPropertyPersistentID(v2));
  v3 = (mlcore *)objc_opt_class();
  objc_msgSend(v0, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipGenericAlbum"), v3, 1, mlcore::AlbumPropertyPersistentID(v3));
  v4 = (mlcore *)objc_opt_class();
  objc_msgSend(v0, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipGenericArtist"), v4, 1, mlcore::AlbumPropertyArtistPersistentID(v4));
  v5 = (mlcore *)objc_opt_class();
  objc_msgSend(v0, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipGenericPlaylist"), v5, 1, mlcore::PlaylistPropertyPersistentID(v5));
  v6 = (mlcore *)objc_opt_class();
  objc_msgSend(v0, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipGenericPlaylistEntry"), v6, 1, mlcore::PlaylistItemPropertyPersistentID(v6));
  v7 = (mlcore *)objc_opt_class();
  objc_msgSend(v0, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipGenericTVEpisode"), v7, 1, mlcore::ItemPropertyPersistentID(v7));
  v8 = (mlcore *)objc_opt_class();
  objc_msgSend(v0, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipGenericTVSeason"), v8, 1, mlcore::AlbumPropertyPersistentID(v8));
  v9 = (mlcore *)objc_opt_class();
  objc_msgSend(v0, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipGenericTVShow"), v9, 1, mlcore::ItemArtistPropertyPersistentID(v9));
  v10 = (mlcore *)objc_opt_class();
  objc_msgSend(v0, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipGenericMovie"), v10, 1, mlcore::ItemPropertyPersistentID(v10));
  v11 = (mlcore *)objc_opt_class();
  objc_msgSend(v0, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipGenericPodcast"), v11, 1, mlcore::AlbumPropertyPersistentID(v11));
  v12 = (mlcore *)objc_opt_class();
  objc_msgSend(v0, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipGenericPodcastEpisode"), v12, 1, mlcore::ItemPropertyPersistentID(v12));
  v13 = (mlcore *)objc_opt_class();
  objc_msgSend(v0, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipGenericComposer"), v13, 1, mlcore::ItemPropertyComposerPersistentID(v13));
  v14 = (mlcore *)objc_opt_class();
  objc_msgSend(v0, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipGenericGenre"), v14, 1, mlcore::ItemPropertyGenrePersistentID(v14));

  v15 = MEMORY[0x194039EC8]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v15);
  v16 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)mlcore::ItemPropertyStoreID(v16);
  v18 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "storeID");
  v1072[1] = v17;
  v19 = mlcore::ItemPropertyStoreCloudID(v18);
  v20 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "cloudID");
  v1074 = v19;
  v21 = mlcore::ItemPropertyStoreCloudUniversalLibraryID(v20);
  v22 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "cloudUniversalLibraryID");
  v1076 = v21;
  v23 = mlcore::ItemPropertyPersistentID(v22);
  v24 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1077, "pid");
  v1078 = v23;
  v25 = mlcore::ItemPropertyExcludeFromShuffle(v24);
  v26 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1079, "excludeFromShuffle");
  v1080 = v25;
  v27 = mlcore::ItemPropertySubscriptionStoreItemID(v26);
  v28 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1081, "subscriptionStoreID");
  v1082 = v27;
  v29 = mlcore::ItemPropertyStoreCloudAlbumID(v28);
  v30 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1083, "storeCloudAlbumID");
  v1084 = v29;
  v31 = mlcore::ItemPropertySyncID(v30);
  v32 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1085, "syncID");
  v1086 = v31;
  v33 = mlcore::ItemPropertyReportingStoreItemID(v32);
  v34 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1087, "reportingStoreItemID");
  v1088 = v33;
  v35 = mlcore::ItemPropertyAssetStoreItemID(v34);
  std::string::basic_string[abi:ne180100]<0>(v1089, "assetStoreItemID");
  v1090 = v35;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 10);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v16, "mapIdentifierMLProperties:identifierCreationBlock:", v1096, &__block_literal_global_45_43400);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v36 = v1096[0];
  v1096[0] = 0;
  if (v36)
    operator delete(v36);
  v37 = 40;
  do
  {
    if (*((char *)&__p[v37 - 1] - 1) < 0)
      operator delete(__p[v37 - 4]);
    v37 -= 4;
  }
  while (v37 * 8);
  -[mlcore setEntityQueryBlock:](v16, "setEntityQueryBlock:", &__block_literal_global_52_43401);
  v38 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongDiscNumber"), mlcore::ItemPropertyDiscNumber((mlcore *)-[mlcore setAllowedItemPredicatesBlock:](v16, "setAllowedItemPredicatesBlock:", &__block_literal_global_62_43402)));
  v39 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongExplicit"), mlcore::ItemPropertyIsExplicit(v38));
  v40 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongHasVideo"), mlcore::ItemPropertyIsVideo(v39));
  v41 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongCopyrightText"), mlcore::ItemPropertyCopyright(v40));
  v42 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongHasCloudSyncSource"), mlcore::ItemPropertyHasCloudSyncSource(v41));
  -[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongYear"), mlcore::ItemPropertyYear(v42));
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongHasCredits"), __p, &__block_literal_global_64_43403);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v43 = __p[0];
  __p[0] = 0;
  if (v43)
    operator delete(v43);
  v44 = mlcore::ItemPropertyUserRating((mlcore *)v43);
  std::string::basic_string[abi:ne180100]<0>(v1096, "userRating");
  v1098 = v44;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongUserRating"), __p, &__block_literal_global_66_43405);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v45 = __p[0];
  __p[0] = 0;
  if (v45)
    operator delete(v45);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v46 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongCloudStatus"), mlcore::ItemPropertyStoreCloudStatus((mlcore *)v45));
  v47 = mlcore::ItemPropertyTitle(v46);
  std::string::basic_string[abi:ne180100]<0>(v1100, "title");
  v1102 = v47;
  v48 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1100, 1);
  v49 = mlcore::ItemPropertyTitleOrder(v48);
  std::string::basic_string[abi:ne180100]<0>(v1093, "titleOrder");
  v1095 = v49;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)v1093, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:filterTransformer:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:filterTransformer:valueTransformer:", CFSTR("MPModelPropertySongTitle"), __p, v1096, &__block_literal_global_70_43408, &__block_literal_global_72_43409, &__block_literal_global_75_43410);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v50 = v1096[0];
  v1096[0] = 0;
  if (v50)
    operator delete(v50);
  if (SHIBYTE(v1094) < 0)
    operator delete(v1093[0]);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v51 = __p[0];
  __p[0] = 0;
  if (v51)
    operator delete(v51);
  if (SHIBYTE(v1101) < 0)
    operator delete(v1100[0]);
  v52 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("_MPModelPropertySongTrackCount"), mlcore::ItemPropertyAlbumTrackCount((mlcore *)v51));
  v53 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongPlayCount"), mlcore::ItemPropertyPlayCountUser(v52));
  v54 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongSkipCount"), mlcore::ItemPropertySkipCountUser(v53));
  v55 = mlcore::ItemPropertyTrackNumber(v54);
  std::string::basic_string[abi:ne180100]<0>(v1100, "trackNumber");
  v1102 = v55;
  v56 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1100, 1);
  HasTrackNumber = mlcore::ItemPropertyHasTrackNumber(v56);
  std::string::basic_string[abi:ne180100]<0>(v1093, "hasTrackNumber");
  v1095 = HasTrackNumber;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)v1093, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:", CFSTR("MPModelPropertySongTrackNumber"), __p, v1096, &__block_literal_global_78_43413, &__block_literal_global_79_43414);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v58 = v1096[0];
  v1096[0] = 0;
  if (v58)
    operator delete(v58);
  if (SHIBYTE(v1094) < 0)
    operator delete(v1093[0]);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v59 = __p[0];
  __p[0] = 0;
  if (v59)
    operator delete(v59);
  if (SHIBYTE(v1101) < 0)
    operator delete(v1100[0]);
  v60 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongGrouping"), mlcore::ItemPropertyGrouping((mlcore *)v59));
  v61 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongClassicalWork"), mlcore::ItemPropertyClassicalWork(v60));
  v62 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongClassicalMovementCount"), mlcore::ItemPropertyClassicalMovementCount(v61));
  v63 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongClassicalMovementNumber"), mlcore::ItemPropertyClassicalMovementNumber(v62));
  v64 = mlcore::ItemPropertyClassicalMovement(v63);
  std::string::basic_string[abi:ne180100]<0>(v1100, "classicalMovement");
  v1102 = v64;
  v65 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1100, 1);
  v66 = mlcore::ItemPropertyClassicalMovementNumber(v65);
  std::string::basic_string[abi:ne180100]<0>(v1093, "classicalMovementNumber");
  v1095 = v66;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)v1093, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:", CFSTR("MPModelPropertySongClassicalMovement"), __p, v1096, &__block_literal_global_82, &__block_literal_global_83_43417);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v67 = v1096[0];
  v1096[0] = 0;
  if (v67)
    operator delete(v67);
  if (SHIBYTE(v1094) < 0)
    operator delete(v1093[0]);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v68 = __p[0];
  __p[0] = 0;
  if (v68)
    operator delete(v68);
  if (SHIBYTE(v1101) < 0)
    operator delete(v1100[0]);
  v69 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongShouldShowComposer"), mlcore::ItemPropertyShowComposerAsArtist((mlcore *)v68));
  v70 = mlcore::ItemPropertyVolumeNormalization(v69);
  std::string::basic_string[abi:ne180100]<0>(v1096, "volumeNormalization");
  v1098 = v70;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongVolumeNormalization"), __p, &__block_literal_global_85_43419);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v71 = __p[0];
  __p[0] = 0;
  if (v71)
    operator delete(v71);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v72 = (void *)mlcore::ItemPropertyDurationInSamples((mlcore *)v71);
  v73 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "durationInSamples");
  v1072[1] = v72;
  v74 = mlcore::ItemPropertyGaplessHeuristicInfo(v73);
  v75 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "gaplessHeuristicInfo");
  v1074 = v74;
  v76 = mlcore::ItemPropertyGaplessEncodingDelay(v75);
  v77 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "gaplessEncodingDelay");
  v1076 = v76;
  v78 = mlcore::ItemPropertyGaplessEncodingDrain(v77);
  v79 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1077, "gaplessEncodingDrain");
  v1078 = v78;
  FrameResync = mlcore::ItemPropertyGaplessLastFrameResync(v79);
  std::string::basic_string[abi:ne180100]<0>(v1079, "gaplessLastFrameResync");
  v1080 = FrameResync;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 5);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongGaplessInfo"), v1096, &__block_literal_global_91_43425);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v81 = v1096[0];
  v1096[0] = 0;
  if (v81)
    operator delete(v81);
  for (i = 0; i != -20; i -= 4)
  {
    if (SHIBYTE(v1079[i + 2]) < 0)
      operator delete((void *)v1079[i]);
  }
  v83 = mlcore::ItemPropertyRelativeVolume((mlcore *)v81);
  std::string::basic_string[abi:ne180100]<0>(v1096, "relativeVolume");
  v1098 = v83;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongVolumeAdjustment"), __p, &__block_literal_global_94_43427);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v84 = __p[0];
  __p[0] = 0;
  if (v84)
    operator delete(v84);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v85 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongBeatsPerMinute"), mlcore::ItemPropertyBPM((mlcore *)v84));
  v86 = mlcore::ItemPropertyTotalTime(v85);
  std::string::basic_string[abi:ne180100]<0>(v1096, "time");
  v1098 = v86;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongDuration"), __p, &__block_literal_global_96_43429);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v87 = __p[0];
  __p[0] = 0;
  if (v87)
    operator delete(v87);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v88 = (void *)mlcore::ItemPropertyPersistentID((mlcore *)v87);
  v89 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v1072[1] = v88;
  v90 = mlcore::ItemPropertyMediaType(v89);
  v91 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "mediaType");
  v1074 = v90;
  v92 = mlcore::ItemPropertyAvailableArtworkToken(v91);
  v93 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "availableArtworkToken");
  v1076 = v92;
  v94 = mlcore::ItemPropertyFetchableArtworkToken(v93);
  v95 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1077, "fetchableArtworkToken");
  v1078 = v94;
  v96 = mlcore::ItemPropertyFetchableArtworkSourceType(v95);
  std::string::basic_string[abi:ne180100]<0>(v1079, "fetchableArtworkSourceType");
  v1080 = v96;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 5);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongArtwork"), v1096, &__block_literal_global_102_43435);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v97 = v1096[0];
  v1096[0] = 0;
  if (v97)
    operator delete(v97);
  for (j = 0; j != -20; j -= 4)
  {
    if (SHIBYTE(v1079[j + 2]) < 0)
      operator delete((void *)v1079[j]);
  }
  v99 = (void *)mlcore::ItemPropertyHLSAudioCapability((mlcore *)v97);
  v100 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "hlsAudioCapability");
  v1072[1] = v99;
  IsMasteredForiTunes = mlcore::ItemPropertyIsMasteredForiTunes(v100);
  std::string::basic_string[abi:ne180100]<0>(v1073, "masteredForiTunes");
  v1074 = IsMasteredForiTunes;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongTraits"), v1096, &__block_literal_global_105_43438);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v102 = v1096[0];
  v1096[0] = 0;
  if (v102)
    operator delete(v102);
  for (k = 0; k != -8; k -= 4)
  {
    if (SHIBYTE(v1073[k + 2]) < 0)
      operator delete((void *)v1073[k]);
  }
  v104 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongArtistUploadedContent"), mlcore::ItemPropertyIsArtistUploadedContent((mlcore *)v102));
  v105 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongLibraryAdded"), mlcore::ItemPropertyInMyLibrary(v104));
  v106 = mlcore::ItemPropertyDateAdded(v105);
  std::string::basic_string[abi:ne180100]<0>(v1096, "libraryAdded");
  v1098 = v106;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongLibraryAddedDate"), __p, &__block_literal_global_108_43440);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v107 = __p[0];
  __p[0] = 0;
  if (v107)
    operator delete(v107);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v108 = mlcore::ItemPropertyDateDownloaded((mlcore *)v107);
  std::string::basic_string[abi:ne180100]<0>(v1096, "downloadedDate");
  v1098 = v108;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongDownloadedDate"), __p, &__block_literal_global_110_43442);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v109 = __p[0];
  __p[0] = 0;
  if (v109)
    operator delete(v109);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v110 = mlcore::ItemPropertyDatePlayed((mlcore *)v109);
  std::string::basic_string[abi:ne180100]<0>(v1096, "datePlayed");
  v1098 = v110;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongLastDevicePlaybackDate"), __p, &__block_literal_global_112_43444);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v111 = __p[0];
  __p[0] = 0;
  if (v111)
    operator delete(v111);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  HasNonPurgeableAsset = (void *)mlcore::ItemPropertyHasNonPurgeableAsset((mlcore *)v111);
  v113 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "hasNonPurgeableAsset");
  v1072[1] = HasNonPurgeableAsset;
  IsStoreRedownloadable = mlcore::ItemPropertyIsStoreRedownloadable(v113);
  std::string::basic_string[abi:ne180100]<0>(v1073, "isStoreRedownloadable");
  v1074 = IsStoreRedownloadable;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongLibraryAddEligible"), v1096, &__block_literal_global_115_43447);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v115 = v1096[0];
  v1096[0] = 0;
  if (v115)
    operator delete(v115);
  for (m = 0; m != -8; m -= 4)
  {
    if (SHIBYTE(v1073[m + 2]) < 0)
      operator delete((void *)v1073[m]);
  }
  v117 = mlcore::ItemPropertyKeepLocal((mlcore *)v115);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocal");
  v1098 = v117;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongKeepLocalEnableState"), __p, &__block_literal_global_117_43449);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v118 = __p[0];
  __p[0] = 0;
  if (v118)
    operator delete(v118);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v119 = mlcore::ItemPropertyKeepLocalStatus((mlcore *)v118);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocalStatus");
  v1098 = v119;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongKeepLocalManagedStatus"), __p, &__block_literal_global_119);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v120 = __p[0];
  __p[0] = 0;
  if (v120)
    operator delete(v120);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v121 = mlcore::ItemPropertyKeepLocalStatusReason((mlcore *)v120);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocalStatusReason");
  v1098 = v121;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongKeepLocalManagedStatusReason"), __p, &__block_literal_global_121_43452);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v122 = __p[0];
  __p[0] = 0;
  if (v122)
    operator delete(v122);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v123 = mlcore::ItemPropertyKeepLocalConstraints((mlcore *)v122);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocalConstraints");
  v1098 = v123;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongKeepLocalConstraints"), __p, &__block_literal_global_123_43454);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v124 = __p[0];
  __p[0] = 0;
  if (v124)
    operator delete(v124);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v125 = mlcore::ItemPropertyLikedState((mlcore *)v124);
  std::string::basic_string[abi:ne180100]<0>(v1096, "likedState");
  v1098 = v125;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongIsFavorite"), __p, &__block_literal_global_125_43456);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v126 = __p[0];
  __p[0] = 0;
  if (v126)
    operator delete(v126);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v127 = mlcore::ItemPropertyLikedState((mlcore *)v126);
  std::string::basic_string[abi:ne180100]<0>(v1096, "likedState");
  v1098 = v127;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongIsDisliked"), __p, &__block_literal_global_126);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v128 = __p[0];
  __p[0] = 0;
  if (v128)
    operator delete(v128);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v129 = mlcore::ItemPropertyLikedStateChangedDate((mlcore *)v128);
  std::string::basic_string[abi:ne180100]<0>(v1096, "likedStateChangedDate");
  v1098 = v129;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v16, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySongDateFavorited"), __p, &__block_literal_global_128_43458);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v130 = __p[0];
  __p[0] = 0;
  if (v130)
    operator delete(v130);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  -[mlcore mapPropertyKey:toMLProperty:](v16, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySongSupportsExtendedLyricsAttribute"), mlcore::ItemPropertyStoreExtendedLyricsAttribute((mlcore *)v130));
  v131 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:usingForeignPropertyBase:](v16, "mapRelationshipKey:toModelClass:usingForeignPropertyBase:", CFSTR("MPModelRelationshipSongArtist"), v131, mlcore::ItemPropertyItemArtistPersistentID(v131));
  v132 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:usingForeignPropertyBase:](v16, "mapRelationshipKey:toModelClass:usingForeignPropertyBase:", CFSTR("MPModelRelationshipSongAlbum"), v132, mlcore::ItemPropertyAlbumPersistentID(v132));
  v133 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:usingForeignPropertyBase:](v16, "mapRelationshipKey:toModelClass:usingForeignPropertyBase:", CFSTR("MPModelRelationshipSongComposer"), v133, mlcore::ItemPropertyComposerPersistentID(v133));
  v134 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:usingForeignPropertyBase:](v16, "mapRelationshipKey:toModelClass:usingForeignPropertyBase:", CFSTR("MPModelRelationshipSongGenre"), v134, mlcore::ItemPropertyGenrePersistentID(v134));
  v135 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v16, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipSongLocalFileAsset"), v135, 1, mlcore::ItemPropertyPersistentID(v135));
  v136 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v16, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipSongLyrics"), v136, 1, mlcore::ItemPropertyPersistentID(v136));
  v137 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v16, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipSongHomeSharingAsset"), v137, 1, mlcore::ItemPropertyPersistentID(v137));
  v138 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v16, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipSongPlaybackPosition"), v138, 1, mlcore::ItemPropertyPersistentID(v138));
  v139 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v16, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipSongStoreAsset"), v139, 1, mlcore::ItemPropertyPersistentID(v139));

  +[MPMediaLibraryEntityTranslator translatorForTransientMPModelClass:](MPMediaLibraryEntityTranslator, "translatorForTransientMPModelClass:", objc_opt_class());
  v140 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v141 = mlcore::ItemPropertyPersistentID(v140);
  std::string::basic_string[abi:ne180100]<0>(v1096, "pid");
  v1098 = v141;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v140, "mapIdentifierMLProperties:identifierCreationBlock:", __p, &__block_literal_global_143_43459);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v142 = __p[0];
  __p[0] = 0;
  if (v142)
    operator delete(v142);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v143 = (void *)mlcore::ItemPropertyLocation((mlcore *)v142);
  v144 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "location");
  v1072[1] = v143;
  v145 = mlcore::ItemPropertyBaseLocationPath(v144);
  std::string::basic_string[abi:ne180100]<0>(v1073, "baseLocationPath");
  v1074 = v145;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v140, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyFileAssetFilePath"), v1096, &__block_literal_global_146_43462);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v146 = v1096[0];
  v1096[0] = 0;
  if (v146)
    operator delete(v146);
  for (n = 0; n != -8; n -= 4)
  {
    if (SHIBYTE(v1073[n + 2]) < 0)
      operator delete((void *)v1073[n]);
  }
  v148 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v140, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyFileAssetFileSize"), mlcore::ItemPropertyFileSize((mlcore *)v146));
  HasStreamingAsset = (void *)mlcore::ItemPropertyHasStreamingAsset(v148);
  v150 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "hasStreamingAsset");
  v1072[1] = HasStreamingAsset;
  v151 = mlcore::ItemPropertyLocation(v150);
  v152 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "location");
  v1074 = v151;
  v153 = mlcore::ItemPropertyBaseLocationPath(v152);
  std::string::basic_string[abi:ne180100]<0>(v1075, "baseLocationPath");
  v1076 = v153;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 3);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v140, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyFileAssetPurchaseBundleFilePath"), v1096, &__block_literal_global_149_43464);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v154 = v1096[0];
  v1096[0] = 0;
  if (v154)
    operator delete(v154);
  for (ii = 0; ii != -12; ii -= 4)
  {
    if (SHIBYTE(v1075[ii + 2]) < 0)
      operator delete((void *)v1075[ii]);
  }
  IsProtected = mlcore::ItemPropertyIsProtected((mlcore *)v154);
  std::string::basic_string[abi:ne180100]<0>(v1096, "protected");
  v1098 = IsProtected;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v140, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyFileAssetProtectionType"), __p, &__block_literal_global_153_43466);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v157 = __p[0];
  __p[0] = 0;
  if (v157)
    operator delete(v157);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  HasLoFiStreamingAsset = mlcore::ItemPropertyHasLoFiStreamingAsset((mlcore *)v157);
  std::string::basic_string[abi:ne180100]<0>(v1096, "hasLoFiStreamingAsset");
  v1098 = HasLoFiStreamingAsset;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v140, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyFileAssetQualityType"), __p, &__block_literal_global_155_43468);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v159 = __p[0];
  __p[0] = 0;
  if (v159)
    operator delete(v159);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v160 = mlcore::ItemPropertyHasNonPurgeableAsset((mlcore *)v159);
  std::string::basic_string[abi:ne180100]<0>(v1096, "hasNonPurgeableAsset");
  v1098 = v160;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v140, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyFileAssetNonPurgeable"), __p, &__block_literal_global_159);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v161 = __p[0];
  __p[0] = 0;
  if (v161)
    operator delete(v161);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v162 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v140, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyFileAssetHLSKeyServerURL"), mlcore::ItemPropertyHLSKeyServerURL((mlcore *)v161));
  v163 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v140, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyFileAssetHLSKeyServerProtocol"), mlcore::ItemPropertyHLSKeyServerProtocol(v162));
  v164 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v140, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyFileAssetHLSKeyCertificateURL"), mlcore::ItemPropertyHLSKeyCertificateURL(v163));
  v165 = (void *)mlcore::ItemPropertyHLSAssetTraits(v164);
  v166 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "hlsTraits");
  v1072[1] = v165;
  v167 = mlcore::ItemPropertyIsMasteredForiTunes(v166);
  std::string::basic_string[abi:ne180100]<0>(v1073, "masteredForiTunes");
  v1074 = v167;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v140, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyFileAssetTraits"), v1096, &__block_literal_global_162);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v168 = v1096[0];
  v1096[0] = 0;
  if (v168)
    operator delete(v168);
  for (jj = 0; jj != -8; jj -= 4)
  {
    if (SHIBYTE(v1073[jj + 2]) < 0)
      operator delete((void *)v1073[jj]);
  }

  +[MPMediaLibraryEntityTranslator translatorForTransientMPModelClass:](MPMediaLibraryEntityTranslator, "translatorForTransientMPModelClass:", objc_opt_class());
  v170 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v171 = mlcore::ItemPropertyPersistentID(v170);
  std::string::basic_string[abi:ne180100]<0>(v1096, "pid");
  v1098 = v171;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v170, "mapIdentifierMLProperties:identifierCreationBlock:", __p, &__block_literal_global_163);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v172 = __p[0];
  __p[0] = 0;
  if (v172)
    operator delete(v172);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v170, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyHomeSharingAssetProtectedContentSupportStorageFileURL"), __p, &__block_literal_global_164_43470);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v173 = __p[0];
  __p[0] = 0;
  if (v173)
    operator delete(v173);
  v174 = (void *)mlcore::ItemPropertyLocation((mlcore *)v173);
  v175 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "location");
  v1072[1] = v174;
  v176 = mlcore::ItemPropertyHomeSharingID(v175);
  std::string::basic_string[abi:ne180100]<0>(v1073, "homeSharingID");
  v1074 = v176;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v170, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyHomeSharingAssetURL"), v1096, &__block_literal_global_166_43472);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v177 = v1096[0];
  v1096[0] = 0;
  if (v177)
    operator delete(v177);
  for (kk = 0; kk != -8; kk -= 4)
  {
    if (SHIBYTE(v1073[kk + 2]) < 0)
      operator delete((void *)v1073[kk]);
  }
  -[mlcore mapPropertyKey:toMLProperty:](v170, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyHomeSharingAssetAvailable"), mlcore::ItemPropertyHomeSharingAssetAvailable((mlcore *)v177));

  +[MPMediaLibraryEntityTranslator translatorForTransientMPModelClass:](MPMediaLibraryEntityTranslator, "translatorForTransientMPModelClass:", objc_opt_class());
  v179 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v180 = mlcore::ItemPropertyPersistentID(v179);
  std::string::basic_string[abi:ne180100]<0>(v1096, "pid");
  v1098 = v180;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v179, "mapIdentifierMLProperties:identifierCreationBlock:", __p, &__block_literal_global_172);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v181 = __p[0];
  __p[0] = 0;
  if (v181)
    operator delete(v181);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v182 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v179, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyStoreAssetAccountIdentifier"), mlcore::ItemPropertyStoreAccountID((mlcore *)v181));
  v183 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v179, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyStoreAssetShouldReportPlayEvents"), mlcore::ItemPropertyStoreNeedsReporting(v182));
  v184 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v179, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyStoreAssetRedownloadable"), mlcore::ItemPropertyIsStoreRedownloadable(v183));
  matched = (void *)mlcore::ItemPropertyMatchRedownloadParameters(v184);
  v186 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "matchRedownloadParams");
  v1072[1] = matched;
  v187 = mlcore::ItemPropertyPurchaseHistoryRedownloadParameters(v186);
  v188 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "purchaseHistoryRedownloadParams");
  v1074 = v187;
  v189 = mlcore::ItemPropertyStoreCloudID(v188);
  v190 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "storeCloudID");
  v1076 = v189;
  v191 = mlcore::ItemPropertyPurchaseHistoryID(v190);
  std::string::basic_string[abi:ne180100]<0>(v1077, "purchaseHistoryID");
  v1078 = v191;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 4);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v179, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyStoreAssetRedownloadParameters"), v1096, &__block_literal_global_177);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v192 = v1096[0];
  v1096[0] = 0;
  if (v192)
    operator delete(v192);
  for (mm = 0; mm != -16; mm -= 4)
  {
    if (SHIBYTE(v1077[mm + 2]) < 0)
      operator delete((void *)v1077[mm]);
  }
  v194 = MPModelPropertyStoreAssetNeedsUserUpload;
  v195 = (void *)mlcore::ItemPropertyCloudAssetAvailable((mlcore *)v192);
  v196 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "cloudAssetAvailable");
  v1072[1] = v195;
  v197 = mlcore::ItemPropertyStoreCloudStatus(v196);
  v198 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "cloudStatus");
  v1074 = v197;
  v199 = mlcore::ItemPropertyStoreCloudID(v198);
  std::string::basic_string[abi:ne180100]<0>(v1075, "storeCloudID");
  v1076 = v199;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 3);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v179, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", v194, v1096, &__block_literal_global_180);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v200 = v1096[0];
  v1096[0] = 0;
  if (v200)
    operator delete(v200);
  for (nn = 0; nn != -12; nn -= 4)
  {
    if (SHIBYTE(v1075[nn + 2]) < 0)
      operator delete((void *)v1075[nn]);
  }
  v202 = (void *)mlcore::ItemPropertyStorePlaybackEndpointType((mlcore *)v200);
  v203 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "endpointType");
  v1072[1] = v202;
  v204 = mlcore::ItemPropertyMatchRedownloadParameters(v203);
  v205 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "matchRedownloadParams");
  v1074 = v204;
  v206 = mlcore::ItemPropertyPurchaseHistoryRedownloadParameters(v205);
  v207 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "purchaseHistoryRedownloadParams");
  v1076 = v206;
  v208 = mlcore::ItemPropertyStoreCloudID(v207);
  v209 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1077, "storeCloudID");
  v1078 = v208;
  v210 = mlcore::ItemPropertyStoreID(v209);
  v211 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1079, "storeAdamID");
  v1080 = v210;
  v212 = mlcore::ItemPropertyCloudAssetAvailable(v211);
  std::string::basic_string[abi:ne180100]<0>(v1081, "cloudAssetAvailable");
  v1082 = v212;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 6);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v179, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyStoreAssetEndpointType"), v1096, &__block_literal_global_183_43481);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v213 = v1096[0];
  v1096[0] = 0;
  if (v213)
    operator delete(v213);
  for (i1 = 0; i1 != -24; i1 -= 4)
  {
    if (SHIBYTE(v1081[i1 + 2]) < 0)
      operator delete((void *)v1081[i1]);
  }
  v215 = (void *)mlcore::ItemPropertyStorePlaybackEndpointType((mlcore *)v213);
  v216 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "endpointType");
  v1072[1] = v215;
  IsArtistUploadedContent = mlcore::ItemPropertyIsArtistUploadedContent(v216);
  v218 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "isAUC");
  v1074 = IsArtistUploadedContent;
  v219 = mlcore::ItemPropertyEpisodeType(v218);
  std::string::basic_string[abi:ne180100]<0>(v1075, "episodeType");
  v1076 = v219;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 3);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v179, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyStoreAssetSubscriptionRequired"), v1096, &__block_literal_global_186_43484);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v220 = v1096[0];
  v1096[0] = 0;
  if (v220)
    operator delete(v220);
  for (i2 = 0; i2 != -12; i2 -= 4)
  {
    if (SHIBYTE(v1075[i2 + 2]) < 0)
      operator delete((void *)v1075[i2]);
  }

  +[MPMediaLibraryEntityTranslator translatorForTransientMPModelClass:](MPMediaLibraryEntityTranslator, "translatorForTransientMPModelClass:", objc_opt_class());
  v222 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v223 = mlcore::ItemPropertyPersistentID(v222);
  std::string::basic_string[abi:ne180100]<0>(v1096, "pid");
  v1098 = v223;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v222, "mapIdentifierMLProperties:identifierCreationBlock:", __p, &__block_literal_global_187);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v224 = __p[0];
  __p[0] = 0;
  if (v224)
    operator delete(v224);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v225 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v222, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyLyricsText"), mlcore::ItemPropertyLyrics((mlcore *)v224));
  v226 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v222, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyLyricsHasStoreLyrics"), mlcore::ItemPropertyStoreLyricsAvailable(v225));
  v227 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v222, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyLyricsHasTimeSyncedLyrics"), mlcore::ItemPropertyTimeSyncedLyricsAvailable(v226));
  -[mlcore mapPropertyKey:toMLProperty:](v222, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyLyricsHasLibraryLyrics"), mlcore::ItemPropertyLibraryLyricsAvailable(v227));

  v228 = MEMORY[0x194039F1C]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v228);
  v229 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v230 = (void *)mlcore::AlbumPropertyPersistentID(v229);
  v231 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v1072[1] = v230;
  v232 = mlcore::AlbumPropertyStoreID(v231);
  v233 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "storeID");
  v1074 = v232;
  v234 = mlcore::AlbumPropertySyncID(v233);
  v235 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "syncID");
  v1076 = v234;
  v236 = mlcore::AlbumPropertyCloudLibraryID(v235);
  std::string::basic_string[abi:ne180100]<0>(v1077, "albumCloudLibraryID");
  v1078 = v236;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 4);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v229, "mapIdentifierMLProperties:identifierCreationBlock:", v1096, &__block_literal_global_189_43486);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v237 = v1096[0];
  v1096[0] = 0;
  if (v237)
    operator delete(v237);
  for (i3 = 0; i3 != -16; i3 -= 4)
  {
    if (SHIBYTE(v1077[i3 + 2]) < 0)
      operator delete((void *)v1077[i3]);
  }
  -[mlcore setEntityQueryBlock:](v229, "setEntityQueryBlock:", &__block_literal_global_190);
  v239 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v229, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyAlbumIsCompilation"), mlcore::AlbumPropertyAllCompilations((mlcore *)-[mlcore setAllowedItemPredicatesBlock:](v229, "setAllowedItemPredicatesBlock:", &__block_literal_global_194_43487)));
  v240 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v229, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyAlbumIsClassical"), mlcore::AlbumPropertyContainsClassicalWork(v239));
  v241 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v229, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyAlbumCopyrightText"), mlcore::AlbumPropertyCopyright(v240));
  v242 = mlcore::AlbumPropertyTitle(v241);
  std::string::basic_string[abi:ne180100]<0>(v1093, "title");
  v1095 = v242;
  v243 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)v1093, 1);
  HasTitle = (void *)mlcore::AlbumPropertyHasTitle(v243);
  v245 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "hasTitle");
  v1072[1] = HasTitle;
  v246 = mlcore::AlbumPropertyOrder(v245);
  std::string::basic_string[abi:ne180100]<0>(v1073, "titleOrder");
  v1074 = v246;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1100, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:filterTransformer:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:filterTransformer:valueTransformer:", CFSTR("MPModelPropertyAlbumTitle"), v1096, v1100, &__block_literal_global_196_43489, &__block_literal_global_197, &__block_literal_global_200_43490);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1101);
  v247 = v1100[0];
  v1100[0] = 0;
  if (v247)
    operator delete(v247);
  for (i4 = 0; i4 != -8; i4 -= 4)
  {
    if (SHIBYTE(v1073[i4 + 2]) < 0)
      operator delete((void *)v1073[i4]);
  }
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v249 = v1096[0];
  v1096[0] = 0;
  if (v249)
    operator delete(v249);
  if (SHIBYTE(v1094) < 0)
    operator delete(v1093[0]);
  IsPreOrder = mlcore::AlbumPropertyIsPreOrder((mlcore *)v249);
  std::string::basic_string[abi:ne180100]<0>(v1096, "isPreOrder");
  v1098 = IsPreOrder;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumPreorder"), __p, &__block_literal_global_202);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v251 = __p[0];
  __p[0] = 0;
  if (v251)
    operator delete(v251);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumEditorNotes"), __p, &__block_literal_global_203_43492);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v252 = __p[0];
  __p[0] = 0;
  if (v252)
    operator delete(v252);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumShortEditorNotes"), __p, &__block_literal_global_204_43493);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v253 = __p[0];
  __p[0] = 0;
  if (v253)
    operator delete(v253);
  v254 = (void *)mlcore::AlbumPropertyRepresentativeItemPersistentID((mlcore *)v253);
  v255 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v1072[1] = v254;
  v256 = mlcore::AlbumPropertyRepresentativeItemMediaType(v255);
  v257 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "mediaType");
  v1074 = v256;
  v258 = mlcore::AlbumPropertyRepresentativeItemAvailableArtworkToken(v257);
  v259 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "availableArtworkToken");
  v1076 = v258;
  v260 = mlcore::AlbumPropertyRepresentativeItemFetchableArtworkToken(v259);
  v261 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1077, "fetchableArtworkToken");
  v1078 = v260;
  v262 = mlcore::AlbumPropertyRepresentativeItemFetchableArtworkSourceType(v261);
  std::string::basic_string[abi:ne180100]<0>(v1079, "fetchableArtworkSourceType");
  v1080 = v262;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 5);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumArtwork"), v1096, &__block_literal_global_205_43494);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v263 = v1096[0];
  v1096[0] = 0;
  if (v263)
    operator delete(v263);
  for (i5 = 0; i5 != -20; i5 -= 4)
  {
    if (SHIBYTE(v1079[i5 + 2]) < 0)
      operator delete((void *)v1079[i5]);
  }
  v265 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v229, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyAlbumTrackCount"), mlcore::AlbumPropertyItemCount((mlcore *)v263));
  v266 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v229, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyAlbumMaximumItemTrackNumber"), mlcore::AlbumPropertyMaximumItemTrackNumber(v265));
  v267 = mlcore::AlbumPropertyDateReleased(v266);
  std::string::basic_string[abi:ne180100]<0>(v1096, "dateReleased");
  v1098 = v267;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumReleaseDateComponents"), __p, &__block_literal_global_207_43496);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v268 = __p[0];
  __p[0] = 0;
  if (v268)
    operator delete(v268);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v269 = mlcore::AlbumPropertyLatestItemDateAdded((mlcore *)v268);
  std::string::basic_string[abi:ne180100]<0>(v1096, "libraryAdded");
  v1098 = v269;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumLibraryAddedDate"), __p, &__block_literal_global_208_43497);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v270 = __p[0];
  __p[0] = 0;
  if (v270)
    operator delete(v270);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v271 = mlcore::AlbumPropertyDateDownloaded((mlcore *)v270);
  std::string::basic_string[abi:ne180100]<0>(v1096, "downloadedDate");
  v1098 = v271;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumDownloadedDate"), __p, &__block_literal_global_209_43498);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v272 = __p[0];
  __p[0] = 0;
  if (v272)
    operator delete(v272);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v273 = mlcore::AlbumPropertyVolumeNormalization((mlcore *)v272);
  std::string::basic_string[abi:ne180100]<0>(v1096, "volumeNormalization");
  v1098 = v273;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumVolumeNormalization"), __p, &__block_literal_global_210_43499);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v274 = __p[0];
  __p[0] = 0;
  if (v274)
    operator delete(v274);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  -[mlcore mapPropertyKey:toMLProperty:](v229, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyAlbumYear"), mlcore::AlbumPropertyYear((mlcore *)v274));
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumLibraryAdded"), __p, &__block_literal_global_211_43500);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v275 = __p[0];
  __p[0] = 0;
  if (v275)
    operator delete(v275);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumHasExplicitContent"), __p, &__block_literal_global_212_43501);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v276 = __p[0];
  __p[0] = 0;
  if (v276)
    operator delete(v276);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumLibraryAddEligible"), __p, &__block_literal_global_213_43502);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v277 = __p[0];
  __p[0] = 0;
  if (v277)
    operator delete(v277);
  v278 = mlcore::AlbumPropertyDatePlayedLocal((mlcore *)v277);
  std::string::basic_string[abi:ne180100]<0>(v1096, "datePlayedLocal");
  v1098 = v278;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumLastDevicePlaybackDate"), __p, &__block_literal_global_215_43504);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v279 = __p[0];
  __p[0] = 0;
  if (v279)
    operator delete(v279);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v280 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID((mlcore *)v279);
  IsExplicit = (ModelPropertyBase *)mlcore::ItemPropertyIsExplicit(v280);
  Property = MPMediaLibraryGetProperty((ModelPropertyBase *)v280, IsExplicit);
  std::string::basic_string[abi:ne180100]<0>(v1096, "representativeItemExplicit");
  v1098 = Property;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumHasCleanContent"), __p, &__block_literal_global_217);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v283 = __p[0];
  __p[0] = 0;
  if (v283)
    operator delete(v283);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v284 = mlcore::AlbumPropertyKeepLocal((mlcore *)v283);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocal");
  v1098 = v284;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumKeepLocalEnableState"), __p, &__block_literal_global_218);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v285 = __p[0];
  __p[0] = 0;
  if (v285)
    operator delete(v285);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v286 = mlcore::AlbumPropertyKeepLocalStatus((mlcore *)v285);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocalStatus");
  v1098 = v286;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumKeepLocalManagedStatus"), __p, &__block_literal_global_219);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v287 = __p[0];
  __p[0] = 0;
  if (v287)
    operator delete(v287);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v288 = mlcore::AlbumPropertyKeepLocalStatusReason((mlcore *)v287);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocalStatusReason");
  v1098 = v288;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumKeepLocalManagedStatusReason"), __p, &__block_literal_global_220);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v289 = __p[0];
  __p[0] = 0;
  if (v289)
    operator delete(v289);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v290 = mlcore::AlbumPropertyKeepLocalConstraints((mlcore *)v289);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocalConstraints");
  v1098 = v290;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumKeepLocalConstraints"), __p, &__block_literal_global_221_43506);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v291 = __p[0];
  __p[0] = 0;
  if (v291)
    operator delete(v291);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v292 = mlcore::AlbumPropertyAppData((mlcore *)v291);
  std::string::basic_string[abi:ne180100]<0>(v1096, "appData");
  v1098 = v292;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumSongPopularity"), __p, &__block_literal_global_223);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v293 = __p[0];
  __p[0] = 0;
  if (v293)
    operator delete(v293);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v294 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID((mlcore *)v293);
  v295 = (ModelPropertyBase *)mlcore::ItemPropertyHLSAudioCapability(v294);
  v296 = (void *)MPMediaLibraryGetProperty((ModelPropertyBase *)v294, v295);
  v297 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "hlsAudioCapability");
  v1072[1] = v296;
  v298 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(v297);
  v299 = (ModelPropertyBase *)mlcore::ItemPropertyIsMasteredForiTunes(v298);
  v300 = MPMediaLibraryGetProperty((ModelPropertyBase *)v298, v299);
  std::string::basic_string[abi:ne180100]<0>(v1073, "masteredForiTunes");
  v1074 = v300;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumTraits"), v1096, &__block_literal_global_227);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v301 = v1096[0];
  v1096[0] = 0;
  if (v301)
    operator delete(v301);
  for (i6 = 0; i6 != -8; i6 -= 4)
  {
    if (SHIBYTE(v1073[i6 + 2]) < 0)
      operator delete((void *)v1073[i6]);
  }
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumVersionHash"), __p, &__block_literal_global_228_43508);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v303 = __p[0];
  __p[0] = 0;
  if (v303)
    operator delete(v303);
  v304 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v229, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyAlbumClassicalExperienceAvailable"), mlcore::AlbumPropertyClassicalExperienceAvailable((mlcore *)v303));
  v305 = mlcore::AlbumPropertyLikedState(v304);
  std::string::basic_string[abi:ne180100]<0>(v1096, "likedState");
  v1098 = v305;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumIsFavorite"), __p, &__block_literal_global_229);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v306 = __p[0];
  __p[0] = 0;
  if (v306)
    operator delete(v306);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v307 = mlcore::AlbumPropertyLikedState((mlcore *)v306);
  std::string::basic_string[abi:ne180100]<0>(v1096, "likedState");
  v1098 = v307;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumIsDisliked"), __p, &__block_literal_global_230_43509);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v308 = __p[0];
  __p[0] = 0;
  if (v308)
    operator delete(v308);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v309 = mlcore::AlbumPropertyLikedStateChangedDate((mlcore *)v308);
  std::string::basic_string[abi:ne180100]<0>(v1096, "likedStateChangedDate");
  v1098 = v309;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v229, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyAlbumDateFavorited"), __p, &__block_literal_global_231);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v310 = __p[0];
  __p[0] = 0;
  if (v310)
    operator delete(v310);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v311 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:usingForeignPropertyBase:](v229, "mapRelationshipKey:toModelClass:usingForeignPropertyBase:", CFSTR("MPModelRelationshipAlbumGenre"), v311, mlcore::AlbumPropertyGenrePersistentID(v311));
  v312 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:usingForeignPropertyBase:](v229, "mapRelationshipKey:toModelClass:usingForeignPropertyBase:", CFSTR("MPModelRelationshipAlbumArtist"), v312, mlcore::AlbumPropertyArtistPersistentID(v312));
  v313 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:usingForeignPropertyBase:](v229, "mapRelationshipKey:toModelClass:usingForeignPropertyBase:", CFSTR("MPModelRelationshipAlbumRepresentativeSong"), v313, mlcore::AlbumPropertyRepresentativeItemPersistentID(v313));

  v314 = MEMORY[0x194039FE8]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v314);
  v315 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v316 = (void *)mlcore::PlaylistPropertyPersistentID(v315);
  v317 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v1072[1] = v316;
  v318 = mlcore::PlaylistPropertyCloudGlobalID(v317);
  v319 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "globalID");
  v1074 = v318;
  v320 = mlcore::PlaylistPropertyStoreCloudID(v319);
  v321 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "cloudID");
  v1076 = v320;
  v322 = mlcore::PlaylistPropertyCloudUniversalLibraryID(v321);
  v323 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1077, "cloudUniversalLibraryID");
  v1078 = v322;
  v324 = mlcore::PlaylistPropertySyncID(v323);
  v325 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1079, "syncID");
  v1080 = v324;
  v326 = mlcore::PlaylistPropertyCloudVersionHash(v325);
  v327 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1081, "versionHash");
  v1082 = v326;
  IsFolder = mlcore::PlaylistPropertySmartIsFolder(v327);
  std::string::basic_string[abi:ne180100]<0>(v1083, "isFolder");
  v1084 = IsFolder;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 7);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v315, "mapIdentifierMLProperties:identifierCreationBlock:", v1096, &__block_literal_global_236_43513);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v329 = v1096[0];
  v1096[0] = 0;
  if (v329)
    operator delete(v329);
  for (i7 = 0; i7 != -28; i7 -= 4)
  {
    if (SHIBYTE(v1083[i7 + 2]) < 0)
      operator delete((void *)v1083[i7]);
  }
  -[mlcore setEntityQueryBlock:](v315, "setEntityQueryBlock:", &__block_literal_global_238_43514);
  v331 = mlcore::PlaylistPropertyName((mlcore *)-[mlcore setAllowedItemPredicatesBlock:](v315, "setAllowedItemPredicatesBlock:", &__block_literal_global_252));
  std::string::basic_string[abi:ne180100]<0>(v1100, "name");
  v1102 = v331;
  v332 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1100, 1);
  v333 = mlcore::PlaylistPropertyNameOrder(v332);
  std::string::basic_string[abi:ne180100]<0>(v1093, "nameOrder");
  v1095 = v333;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)v1093, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:filterTransformer:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:filterTransformer:valueTransformer:", CFSTR("MPModelPropertyPlaylistName"), __p, v1096, &__block_literal_global_255, &__block_literal_global_256, &__block_literal_global_259);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v334 = v1096[0];
  v1096[0] = 0;
  if (v334)
    operator delete(v334);
  if (SHIBYTE(v1094) < 0)
    operator delete(v1093[0]);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v335 = __p[0];
  __p[0] = 0;
  if (v335)
    operator delete(v335);
  if (SHIBYTE(v1101) < 0)
    operator delete(v1100[0]);
  v336 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v315, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistDescriptionText"), mlcore::PlaylistPropertyDescription((mlcore *)v335));
  v337 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v315, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistIsOwner"), mlcore::PlaylistPropertyIsOwner(v336));
  v338 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v315, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistCuratorPlaylist"), mlcore::PlaylistPropertyIsCuratorOwned(v337));
  v339 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v315, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistPublicPlaylist"), mlcore::PlaylistPropertyCloudIsPublic(v338));
  v340 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v315, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistVisiblePlaylist"), mlcore::PlaylistPropertyCloudIsVisible(v339));
  v341 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v315, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistSubscribed"), mlcore::PlaylistPropertyIsSubscribed(v340));
  v342 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v315, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistCloudVersionHash"), mlcore::PlaylistPropertyCloudVersionHash(v341));
  IsTracklistUserEditable = (void *)mlcore::PlaylistPropertyIsTracklistUserEditable(v342);
  v344 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "isTracklistUserEditable");
  v1072[1] = IsTracklistUserEditable;
  IsSmart = mlcore::PlaylistPropertyIsSmart(v344);
  v346 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "isSmart");
  v1074 = IsSmart;
  v347 = mlcore::PlaylistPropertySmartIsFolder(v346);
  v348 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "isFolder");
  v1076 = v347;
  IsGenius = mlcore::PlaylistPropertySmartIsGenius(v348);
  v350 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1077, "isGenius");
  v1078 = IsGenius;
  IsSubscribed = mlcore::PlaylistPropertyIsSubscribed(v350);
  v352 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1079, "isSubscribed");
  v1080 = IsSubscribed;
  IsFavoritedSongs = mlcore::PlaylistPropertyIsFavoritedSongs(v352);
  v354 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1081, "isFavoriteSongsPlaylist");
  v1082 = IsFavoritedSongs;
  IsOwner = mlcore::PlaylistPropertyIsOwner(v354);
  v356 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1083, "isOwner");
  v1084 = IsOwner;
  IsCollaborative = mlcore::PlaylistPropertyIsCollaborative(v356);
  std::string::basic_string[abi:ne180100]<0>(v1085, "isCollaborative");
  v1086 = IsCollaborative;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 8);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistUserEditableComponents"), v1096, &__block_literal_global_267);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v358 = v1096[0];
  v1096[0] = 0;
  if (v358)
    operator delete(v358);
  for (i8 = 0; i8 != -32; i8 -= 4)
  {
    if (SHIBYTE(v1085[i8 + 2]) < 0)
      operator delete((void *)v1085[i8]);
  }
  v360 = mlcore::PlaylistPropertyCloudShareURL((mlcore *)v358);
  std::string::basic_string[abi:ne180100]<0>(v1096, "shareURL");
  v1098 = v360;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistShareURL"), __p, &__block_literal_global_272_43525);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v361 = __p[0];
  __p[0] = 0;
  if (v361)
    operator delete(v361);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistShareShortURL"), __p, &__block_literal_global_275);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v362 = __p[0];
  __p[0] = 0;
  if (v362)
    operator delete(v362);
  v363 = (void *)mlcore::PlaylistPropertyPersistentID((mlcore *)v362);
  v364 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "playlistPID");
  v1072[1] = v363;
  v365 = mlcore::PlaylistPropertyAvailableArtworkToken(v364);
  v366 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "availableArtworkToken");
  v1074 = v365;
  v367 = mlcore::PlaylistPropertyFetchableArtworkToken(v366);
  v368 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "fetchableArtworkToken");
  v1076 = v367;
  v369 = mlcore::PlaylistPropertyFetchableArtworkSourceType(v368);
  std::string::basic_string[abi:ne180100]<0>(v1077, "fetchableArtworkSourceType");
  v1078 = v369;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 4);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistArtwork"), v1096, &__block_literal_global_278);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v370 = v1096[0];
  v1096[0] = 0;
  if (v370)
    operator delete(v370);
  for (i9 = 0; i9 != -16; i9 -= 4)
  {
    if (SHIBYTE(v1077[i9 + 2]) < 0)
      operator delete((void *)v1077[i9]);
  }
  v372 = mlcore::PlaylistPropertyPersistentID((mlcore *)v370);
  std::string::basic_string[abi:ne180100]<0>(v1096, "playlistPID");
  v1098 = v372;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistTracksTiledArtwork"), __p, &__block_literal_global_280);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v373 = __p[0];
  __p[0] = 0;
  if (v373)
    operator delete(v373);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistEditorialArtwork"), __p, &__block_literal_global_284);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v374 = __p[0];
  __p[0] = 0;
  if (v374)
    operator delete(v374);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistReleaseDateComponents"), __p, &__block_literal_global_286);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v375 = __p[0];
  __p[0] = 0;
  if (v375)
    operator delete(v375);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistShortEditorNotes"), __p, &__block_literal_global_288);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v376 = __p[0];
  __p[0] = 0;
  if (v376)
    operator delete(v376);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistEditorNotes"), __p, &__block_literal_global_290);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v377 = __p[0];
  __p[0] = 0;
  if (v377)
    operator delete(v377);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistVersionHash"), __p, &__block_literal_global_292);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v378 = __p[0];
  __p[0] = 0;
  if (v378)
    operator delete(v378);
  IsHidden = mlcore::PlaylistPropertyIsHidden((mlcore *)v378);
  std::string::basic_string[abi:ne180100]<0>(v1096, "isHidden");
  v1098 = IsHidden;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistLibraryAdded"), __p, &__block_literal_global_294_43528);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v380 = __p[0];
  __p[0] = 0;
  if (v380)
    operator delete(v380);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v381 = mlcore::PlaylistPropertyDateCreated((mlcore *)v380);
  std::string::basic_string[abi:ne180100]<0>(v1096, "libraryAdded");
  v1098 = v381;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistLibraryAddedDate"), __p, &__block_literal_global_295);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v382 = __p[0];
  __p[0] = 0;
  if (v382)
    operator delete(v382);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v383 = MPModelPropertyPlaylistDownloadedDate;
  v384 = mlcore::PlaylistPropertyDateDownloaded((mlcore *)v382);
  std::string::basic_string[abi:ne180100]<0>(v1096, "downloadedDate");
  v1098 = v384;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", v383, __p, &__block_literal_global_296_43529);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v385 = __p[0];
  __p[0] = 0;
  if (v385)
    operator delete(v385);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v386 = mlcore::PlaylistPropertyDateModified((mlcore *)v385);
  std::string::basic_string[abi:ne180100]<0>(v1096, "dateModified");
  v1098 = v386;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistLastModifiedDateComponents"), __p, &__block_literal_global_298_43531);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v387 = __p[0];
  __p[0] = 0;
  if (v387)
    operator delete(v387);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v388 = mlcore::PlaylistPropertyDatePlayedLocal((mlcore *)v387);
  std::string::basic_string[abi:ne180100]<0>(v1096, "datePlayedLocal");
  v1098 = v388;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistLastDevicePlaybackDate"), __p, &__block_literal_global_299_43532);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v389 = __p[0];
  __p[0] = 0;
  if (v389)
    operator delete(v389);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistHasCleanContent"), __p, &__block_literal_global_300);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v390 = __p[0];
  __p[0] = 0;
  if (v390)
    operator delete(v390);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistHasExplicitContent"), __p, &__block_literal_global_301);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v391 = __p[0];
  __p[0] = 0;
  if (v391)
    operator delete(v391);
  v392 = (void *)mlcore::PlaylistPropertyIsSmart((mlcore *)v391);
  v393 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "isSmart");
  v1072[1] = v392;
  v394 = mlcore::PlaylistPropertySmartIsGenius(v393);
  v395 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "isGenius");
  v1074 = v394;
  v396 = mlcore::PlaylistPropertySmartIsFolder(v395);
  v397 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "isFolder");
  v1076 = v396;
  ShouldDisplayIndex = mlcore::PlaylistPropertyShouldDisplayIndex(v397);
  v399 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1077, "shouldDisplayIndex");
  v1078 = ShouldDisplayIndex;
  IsPersonalMix = mlcore::PlaylistCategoryTypeIsPersonalMix(v399);
  v401 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1079, "isPersonalMix");
  v1080 = IsPersonalMix;
  v402 = mlcore::PlaylistPropertyIsFavoritedSongs(v401);
  v403 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1081, "isFavoriteSongsPlaylist");
  v1082 = v402;
  IsExternalVendorPlaylist = mlcore::PlaylistPropertyIsExternalVendorPlaylist(v403);
  v405 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1083, "isExternalVendorPlaylist");
  v1084 = IsExternalVendorPlaylist;
  v406 = mlcore::PlaylistPropertyIsOwner(v405);
  v407 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1085, "isOwner");
  v1086 = v406;
  IsPublic = mlcore::PlaylistPropertyCloudIsPublic(v407);
  v409 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1087, "isPublic");
  v1088 = IsPublic;
  IsEditorial = mlcore::PlaylistCategoryTypeIsEditorial(v409);
  v411 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1089, "isEditorial");
  v1090 = IsEditorial;
  IsUserShared = mlcore::PlaylistCategoryTypeIsUserShared(v411);
  std::string::basic_string[abi:ne180100]<0>(v1091, "isUserShared");
  v1092 = IsUserShared;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 11);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistType"), v1096, &__block_literal_global_308_43539);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v413 = v1096[0];
  v1096[0] = 0;
  if (v413)
    operator delete(v413);
  v414 = 44;
  do
  {
    if (*((char *)&__p[v414 - 1] - 1) < 0)
      operator delete(__p[v414 - 4]);
    v414 -= 4;
  }
  while (v414 * 8);
  v415 = mlcore::PlaylistPropertyKeepLocal((mlcore *)v413);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocal");
  v1098 = v415;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistKeepLocalEnableState"), __p, &__block_literal_global_309);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v416 = __p[0];
  __p[0] = 0;
  if (v416)
    operator delete(v416);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v417 = mlcore::PlaylistPropertyKeepLocalStatus((mlcore *)v416);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocalStatus");
  v1098 = v417;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistKeepLocalManagedStatus"), __p, &__block_literal_global_310_43540);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v418 = __p[0];
  __p[0] = 0;
  if (v418)
    operator delete(v418);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v419 = mlcore::PlaylistPropertyKeepLocalStatusReason((mlcore *)v418);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocalStatusReason");
  v1098 = v419;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistKeepLocalManagedStatusReason"), __p, &__block_literal_global_311);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v420 = __p[0];
  __p[0] = 0;
  if (v420)
    operator delete(v420);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v421 = mlcore::PlaylistPropertyKeepLocalConstraints((mlcore *)v420);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocalConstraints");
  v1098 = v421;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistKeepLocalConstraints"), __p, &__block_literal_global_312);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v422 = __p[0];
  __p[0] = 0;
  if (v422)
    operator delete(v422);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v423 = mlcore::PlaylistPropertyTraits((mlcore *)v422);
  std::string::basic_string[abi:ne180100]<0>(v1096, "traits");
  v1098 = v423;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistTraits"), __p, &__block_literal_global_314_43542);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v424 = __p[0];
  __p[0] = 0;
  if (v424)
    operator delete(v424);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v425 = mlcore::PlaylistPropertyLikedState((mlcore *)v424);
  std::string::basic_string[abi:ne180100]<0>(v1096, "likedState");
  v1098 = v425;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistIsFavorite"), __p, &__block_literal_global_315_43543);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v426 = __p[0];
  __p[0] = 0;
  if (v426)
    operator delete(v426);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v427 = mlcore::PlaylistPropertyLikedState((mlcore *)v426);
  std::string::basic_string[abi:ne180100]<0>(v1096, "likedState");
  v1098 = v427;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistIsDisliked"), __p, &__block_literal_global_316);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v428 = __p[0];
  __p[0] = 0;
  if (v428)
    operator delete(v428);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v429 = mlcore::PlaylistPropertyLikedStateChangedDate((mlcore *)v428);
  std::string::basic_string[abi:ne180100]<0>(v1096, "likedStateChangedDate");
  v1098 = v429;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistDateFavorited"), __p, &__block_literal_global_317);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v430 = __p[0];
  __p[0] = 0;
  if (v430)
    operator delete(v430);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v431 = mlcore::PlaylistPropertyIsFavoritedSongs((mlcore *)v430);
  std::string::basic_string[abi:ne180100]<0>(v1096, "favoriteSongsPlaylist");
  v1098 = v431;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistIsFavoriteSongsPlaylist"), __p, &__block_literal_global_319);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v432 = __p[0];
  __p[0] = 0;
  if (v432)
    operator delete(v432);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v433 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v315, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistCoverArtworkRecipe"), mlcore::PlaylistPropertyCoverArtworkRecipe((mlcore *)v432));
  v434 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v315, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistIsCollaborative"), mlcore::PlaylistPropertyIsCollaborative(v433));
  v435 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v315, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistCollaborationSharingMode"), mlcore::PlaylistPropertyCollaborationMode(v434));
  v436 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v315, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistCollaborationMode"), mlcore::PlaylistPropertyCollaborationMode(v435));
  v437 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v315, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistCollaboratorPermissions"), mlcore::PlaylistPropertyCollaboratorPermissions(v436));
  v438 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v315, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistCollaborationInvitationURL"), mlcore::PlaylistPropertyCollaborationInvitationURL(v437));
  v439 = mlcore::PlaylistPropertyCollaborationInvitationURL(v438);
  std::string::basic_string[abi:ne180100]<0>(v1096, "invitationURL");
  v1098 = v439;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistCollaborationInvitationURL"), __p, &__block_literal_global_321);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v440 = __p[0];
  __p[0] = 0;
  if (v440)
    operator delete(v440);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v441 = mlcore::PlaylistPropertyCollaborationInvitationURLExpirationDate((mlcore *)v440);
  std::string::basic_string[abi:ne180100]<0>(v1096, "collaborationInvitationURLExpirationDate");
  v1098 = v441;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v315, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistCollaborationInvitationURLExpirationDate"), __p, &__block_literal_global_323);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v442 = __p[0];
  __p[0] = 0;
  if (v442)
    operator delete(v442);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v443 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v315, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistCollaborationJoinRequestIsPending"), mlcore::PlaylistPropertyCollaborationJoinRequestPending((mlcore *)v442));
  v444 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v315, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistCollaboratorStatus"), mlcore::PlaylistPropertyCollaboratorStatus(v443));
  -[mlcore mapPropertyKey:toMLProperty:](v315, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistParentPersistentID"), mlcore::PlaylistPropertyParentPersistentID(v444));
  v445 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v315, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipPlaylistCurator"), v445, 1, mlcore::PlaylistPropertyPersistentID(v445));

  +[MPMediaLibraryEntityTranslator translatorForTransientMPModelClass:](MPMediaLibraryEntityTranslator, "translatorForTransientMPModelClass:", objc_opt_class());
  v446 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v447 = (void *)mlcore::PlaylistPropertyPersistentID(v446);
  v448 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v1072[1] = v447;
  v449 = mlcore::PlaylistPropertyCloudAuthorStoreID(v448);
  std::string::basic_string[abi:ne180100]<0>(v1073, "storeID");
  v1074 = v449;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v446, "mapIdentifierMLProperties:identifierCreationBlock:", v1096, &__block_literal_global_324);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v450 = v1096[0];
  v1096[0] = 0;
  if (v450)
    operator delete(v450);
  for (i10 = 0; i10 != -8; i10 -= 4)
  {
    if (SHIBYTE(v1073[i10 + 2]) < 0)
      operator delete((void *)v1073[i10]);
  }
  v452 = (void *)mlcore::PlaylistPropertyCloudAuthorName((mlcore *)v450);
  v453 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v1072[1] = v452;
  v454 = mlcore::PlaylistPropertyExternalVendorDisplayName(v453);
  std::string::basic_string[abi:ne180100]<0>(v1073, "externalVendorName");
  v1074 = v454;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v446, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPersonName"), v1096, &__block_literal_global_326);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v455 = v1096[0];
  v1096[0] = 0;
  if (v455)
    operator delete(v455);
  for (i11 = 0; i11 != -8; i11 -= 4)
  {
    if (SHIBYTE(v1073[i11 + 2]) < 0)
      operator delete((void *)v1073[i11]);
  }
  -[mlcore mapPropertyKey:toMLProperty:](v446, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyCuratorHandle"), mlcore::PlaylistPropertyCloudAuthorHandle((mlcore *)v455));
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v446, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyCuratorKind"), __p, &__block_literal_global_327);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v457 = __p[0];
  __p[0] = 0;
  if (v457)
    operator delete(v457);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v446, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyCuratorSubKind"), __p, &__block_literal_global_328);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v458 = __p[0];
  __p[0] = 0;
  if (v458)
    operator delete(v458);

  v459 = MEMORY[0x194039F64]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v459);
  v460 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v461 = (void *)mlcore::ArtistPropertyPersistentID(v460);
  v462 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v1072[1] = v461;
  v463 = mlcore::ArtistPropertyStoreID(v462);
  v464 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "storeID");
  v1074 = v463;
  v465 = mlcore::ArtistPropertyCloudUniversalLibraryID(v464);
  std::string::basic_string[abi:ne180100]<0>(v1075, "albumArtistCloudUniversalLibraryID");
  v1076 = v465;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 3);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v460, "mapIdentifierMLProperties:identifierCreationBlock:", v1096, &__block_literal_global_330);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v466 = v1096[0];
  v1096[0] = 0;
  if (v466)
    operator delete(v466);
  for (i12 = 0; i12 != -12; i12 -= 4)
  {
    if (SHIBYTE(v1075[i12 + 2]) < 0)
      operator delete((void *)v1075[i12]);
  }
  -[mlcore setEntityQueryBlock:](v460, "setEntityQueryBlock:", &__block_literal_global_331);
  v468 = mlcore::ArtistPropertyName((mlcore *)-[mlcore setAllowedItemPredicatesBlock:](v460, "setAllowedItemPredicatesBlock:", &__block_literal_global_335));
  std::string::basic_string[abi:ne180100]<0>(v1093, "name");
  v1095 = v468;
  v469 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)v1093, 1);
  HasName = (void *)mlcore::ArtistPropertyHasName(v469);
  v471 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "hasName");
  v1072[1] = HasName;
  v472 = mlcore::ArtistPropertyOrder(v471);
  std::string::basic_string[abi:ne180100]<0>(v1073, "nameOrder");
  v1074 = v472;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1100, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:filterTransformer:valueTransformer:](v460, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:filterTransformer:valueTransformer:", CFSTR("MPModelPropertyPersonName"), v1096, v1100, &__block_literal_global_337, &__block_literal_global_338_43550, &__block_literal_global_341);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1101);
  v473 = v1100[0];
  v1100[0] = 0;
  if (v473)
    operator delete(v473);
  for (i13 = 0; i13 != -8; i13 -= 4)
  {
    if (SHIBYTE(v1073[i13 + 2]) < 0)
      operator delete((void *)v1073[i13]);
  }
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v475 = v1096[0];
  v1096[0] = 0;
  if (v475)
    operator delete(v475);
  if (SHIBYTE(v1094) < 0)
    operator delete(v1093[0]);
  v476 = (void *)mlcore::ArtistPropertyPersistentID((mlcore *)v475);
  v477 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "artistPID");
  v1072[1] = v476;
  v478 = mlcore::ArtistPropertyAvailableArtworkToken(v477);
  v479 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "artistAvailableArtworkToken");
  v1074 = v478;
  v480 = mlcore::ArtistPropertyFetchableArtworkToken(v479);
  v481 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "artistFetchableArtworkToken");
  v1076 = v480;
  v482 = mlcore::ArtistPropertyFetchableArtworkSourceType(v481);
  std::string::basic_string[abi:ne180100]<0>(v1077, "artistFetchableArtworkSourceType");
  v1078 = v482;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 4);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v460, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyArtistArtwork"), v1096, &__block_literal_global_346);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v483 = v1096[0];
  v1096[0] = 0;
  if (v483)
    operator delete(v483);
  for (i14 = 0; i14 != -16; i14 -= 4)
  {
    if (SHIBYTE(v1077[i14 + 2]) < 0)
      operator delete((void *)v1077[i14]);
  }
  v485 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v460, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyArtistSongCount"), mlcore::ArtistPropertyItemCount((mlcore *)v483));
  v486 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v460, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyArtistAlbumCount"), mlcore::ArtistPropertyAlbumCount(v485));
  v487 = mlcore::ArtistPropertyLatestItemDateAdded(v486);
  std::string::basic_string[abi:ne180100]<0>(v1096, "libraryAdded");
  v1098 = v487;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v460, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyArtistLibraryAddedDate"), __p, &__block_literal_global_347);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v488 = __p[0];
  __p[0] = 0;
  if (v488)
    operator delete(v488);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v489 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v460, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyArtistClassicalExperienceAvailable"), mlcore::ArtistPropertyClassicalExperienceAvailable((mlcore *)v488));
  v490 = mlcore::ArtistPropertyLikedState(v489);
  std::string::basic_string[abi:ne180100]<0>(v1096, "likedState");
  v1098 = v490;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v460, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyArtistIsFavorite"), __p, &__block_literal_global_348_43555);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v491 = __p[0];
  __p[0] = 0;
  if (v491)
    operator delete(v491);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v492 = mlcore::ArtistPropertyLikedState((mlcore *)v491);
  std::string::basic_string[abi:ne180100]<0>(v1096, "likedState");
  v1098 = v492;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v460, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyArtistIsDisliked"), __p, &__block_literal_global_349_43556);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v493 = __p[0];
  __p[0] = 0;
  if (v493)
    operator delete(v493);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v494 = mlcore::ArtistPropertyLikedStateChangedDate((mlcore *)v493);
  std::string::basic_string[abi:ne180100]<0>(v1096, "likedStateChangedDate");
  v1098 = v494;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v460, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyArtistDateFavorited"), __p, &__block_literal_global_350_43557);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v495 = __p[0];
  __p[0] = 0;
  if (v495)
    operator delete(v495);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v496 = (void *)mlcore::ArtistPropertyLikedState((mlcore *)v495);
  v497 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "likedState");
  v1072[1] = v496;
  v498 = mlcore::ArtistPropertyLibraryItemCount(v497);
  std::string::basic_string[abi:ne180100]<0>(v1073, "libraryItemCount");
  v1074 = v498;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v460, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyArtistLibraryAdded"), v1096, &__block_literal_global_352);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v499 = v1096[0];
  v1096[0] = 0;
  if (v499)
    operator delete(v499);
  for (i15 = 0; i15 != -8; i15 -= 4)
  {
    if (SHIBYTE(v1073[i15 + 2]) < 0)
      operator delete((void *)v1073[i15]);
  }
  v501 = (mlcore *)objc_opt_class();
  v502 = (mlcore *)mlcore::ArtistPropertyRepresentativeItemPersistentID(v501);
  v503 = (ModelPropertyBase *)mlcore::ItemPropertyGenrePersistentID(v502);
  -[mlcore mapRelationshipKey:toModelClass:usingForeignPropertyBase:](v460, "mapRelationshipKey:toModelClass:usingForeignPropertyBase:", CFSTR("MPModelRelationshipArtistGenre"), v501, MPMediaLibraryGetProperty((ModelPropertyBase *)v502, v503));

  v504 = MEMORY[0x194038D28]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v504);
  v505 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v506 = (void *)mlcore::ItemArtistPropertyPersistentID(v505);
  v507 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v1072[1] = v506;
  v508 = mlcore::ItemArtistPropertyStoreID(v507);
  std::string::basic_string[abi:ne180100]<0>(v1073, "storeID");
  v1074 = v508;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v505, "mapIdentifierMLProperties:identifierCreationBlock:", v1096, &__block_literal_global_353);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v509 = v1096[0];
  v1096[0] = 0;
  if (v509)
    operator delete(v509);
  for (i16 = 0; i16 != -8; i16 -= 4)
  {
    if (SHIBYTE(v1073[i16 + 2]) < 0)
      operator delete((void *)v1073[i16]);
  }
  v511 = mlcore::ItemArtistPropertyName((mlcore *)v509);
  std::string::basic_string[abi:ne180100]<0>(v1093, "name");
  v1095 = v511;
  v512 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)v1093, 1);
  v513 = (void *)mlcore::ItemArtistPropertyHasName(v512);
  v514 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "hasName");
  v1072[1] = v513;
  v515 = mlcore::ItemArtistPropertyOrder(v514);
  std::string::basic_string[abi:ne180100]<0>(v1073, "nameOrder");
  v1074 = v515;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1100, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:filterTransformer:valueTransformer:](v505, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:filterTransformer:valueTransformer:", CFSTR("MPModelPropertyPersonName"), v1096, v1100, &__block_literal_global_354, &__block_literal_global_355, &__block_literal_global_356);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1101);
  v516 = v1100[0];
  v1100[0] = 0;
  if (v516)
    operator delete(v516);
  for (i17 = 0; i17 != -8; i17 -= 4)
  {
    if (SHIBYTE(v1073[i17 + 2]) < 0)
      operator delete((void *)v1073[i17]);
  }
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v518 = v1096[0];
  v1096[0] = 0;
  if (v518)
    operator delete(v518);
  if (SHIBYTE(v1094) < 0)
    operator delete(v1093[0]);
  v519 = (void *)mlcore::ItemArtistPropertyPersistentID((mlcore *)v518);
  v520 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "artistPID");
  v1072[1] = v519;
  v521 = mlcore::ItemArtistPropertyAvailableArtworkToken(v520);
  v522 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "artistAvailableArtworkToken");
  v1074 = v521;
  v523 = mlcore::ItemArtistPropertyFetchableArtworkToken(v522);
  v524 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "artistFetchableArtworkToken");
  v1076 = v523;
  v525 = mlcore::ItemArtistPropertyFetchableArtworkSourceType(v524);
  std::string::basic_string[abi:ne180100]<0>(v1077, "artistFetchableArtworkSourceType");
  v1078 = v525;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 4);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v505, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyArtistArtwork"), v1096, &__block_literal_global_357);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v526 = v1096[0];
  v1096[0] = 0;
  if (v526)
    operator delete(v526);
  for (i18 = 0; i18 != -16; i18 -= 4)
  {
    if (SHIBYTE(v1077[i18 + 2]) < 0)
      operator delete((void *)v1077[i18]);
  }
  -[mlcore mapPropertyKey:toMLProperty:](v505, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyArtistClassicalExperienceAvailable"), mlcore::ItemArtistPropertyClassicalExperienceAvailable((mlcore *)v526));
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v505, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyArtistIsFavorite"), __p, &__block_literal_global_358_43559);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v528 = __p[0];
  __p[0] = 0;
  if (v528)
    operator delete(v528);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v505, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyArtistIsDisliked"), __p, &__block_literal_global_359);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v529 = __p[0];
  __p[0] = 0;
  if (v529)
    operator delete(v529);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v505, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyArtistDateFavorited"), __p, &__block_literal_global_360);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v530 = __p[0];
  __p[0] = 0;
  if (v530)
    operator delete(v530);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v505, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyArtistLibraryAdded"), __p, &__block_literal_global_361);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v531 = __p[0];
  __p[0] = 0;
  if (v531)
    operator delete(v531);
  v532 = (mlcore *)objc_opt_class();
  v533 = (mlcore *)mlcore::ItemArtistPropertyRepresentativeItemPersistentID(v532);
  v534 = (ModelPropertyBase *)mlcore::ItemPropertyGenrePersistentID(v533);
  -[mlcore mapRelationshipKey:toModelClass:usingForeignPropertyBase:](v505, "mapRelationshipKey:toModelClass:usingForeignPropertyBase:", CFSTR("MPModelRelationshipArtistGenre"), v532, MPMediaLibraryGetProperty((ModelPropertyBase *)v533, v534));

  v535 = MEMORY[0x194039FD0]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v535);
  v536 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v537 = mlcore::ComposerPropertyPersistentID(v536);
  std::string::basic_string[abi:ne180100]<0>(v1096, "pid");
  v1098 = v537;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v536, "mapIdentifierMLProperties:identifierCreationBlock:", __p, &__block_literal_global_362);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v538 = __p[0];
  __p[0] = 0;
  if (v538)
    operator delete(v538);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v539 = mlcore::ComposerPropertyName((mlcore *)-[mlcore setEntityQueryBlock:](v536, "setEntityQueryBlock:", &__block_literal_global_363_43560));
  std::string::basic_string[abi:ne180100]<0>(v1093, "name");
  v1095 = v539;
  v540 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)v1093, 1);
  v541 = (void *)mlcore::ComposerPropertyHasName(v540);
  v542 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "hasName");
  v1072[1] = v541;
  v543 = mlcore::ComposerPropertyOrder(v542);
  std::string::basic_string[abi:ne180100]<0>(v1073, "nameOrder");
  v1074 = v543;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1100, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:filterTransformer:valueTransformer:](v536, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:filterTransformer:valueTransformer:", CFSTR("MPModelPropertyPersonName"), v1096, v1100, &__block_literal_global_367, &__block_literal_global_368, &__block_literal_global_371);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1101);
  v544 = v1100[0];
  v1100[0] = 0;
  if (v544)
    operator delete(v544);
  for (i19 = 0; i19 != -8; i19 -= 4)
  {
    if (SHIBYTE(v1073[i19 + 2]) < 0)
      operator delete((void *)v1073[i19]);
  }
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v546 = v1096[0];
  v1096[0] = 0;
  if (v546)
    operator delete(v546);
  if (SHIBYTE(v1094) < 0)
    operator delete(v1093[0]);
  v547 = mlcore::ComposerPropertyLatestItemDateAdded((mlcore *)v546);
  std::string::basic_string[abi:ne180100]<0>(v1096, "libraryAdded");
  v1098 = v547;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v536, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyComposerLibraryAddedDate"), __p, &__block_literal_global_372_43561);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v548 = __p[0];
  __p[0] = 0;
  if (v548)
    operator delete(v548);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);

  v549 = MEMORY[0x194039F28]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v549);
  v550 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v551 = mlcore::GenrePropertyPersistentID(v550);
  std::string::basic_string[abi:ne180100]<0>(v1096, "pid");
  v1098 = v551;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v550, "mapIdentifierMLProperties:identifierCreationBlock:", __p, &__block_literal_global_373_43562);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v552 = __p[0];
  __p[0] = 0;
  if (v552)
    operator delete(v552);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  -[mlcore setEntityQueryBlock:](v550, "setEntityQueryBlock:", &__block_literal_global_374);
  v553 = mlcore::GenrePropertyName((mlcore *)-[mlcore setAllowedItemPredicatesBlock:](v550, "setAllowedItemPredicatesBlock:", &__block_literal_global_378));
  std::string::basic_string[abi:ne180100]<0>(v1093, "name");
  v1095 = v553;
  v554 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)v1093, 1);
  v555 = (void *)mlcore::GenrePropertyHasName(v554);
  v556 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "hasName");
  v1072[1] = v555;
  v557 = mlcore::GenrePropertyOrder(v556);
  std::string::basic_string[abi:ne180100]<0>(v1073, "nameOrder");
  v1074 = v557;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1100, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:filterTransformer:valueTransformer:](v550, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:filterTransformer:valueTransformer:", CFSTR("MPModelPropertyGenreName"), v1096, v1100, &__block_literal_global_379, &__block_literal_global_380, &__block_literal_global_383);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1101);
  v558 = v1100[0];
  v1100[0] = 0;
  if (v558)
    operator delete(v558);
  for (i20 = 0; i20 != -8; i20 -= 4)
  {
    if (SHIBYTE(v1073[i20 + 2]) < 0)
      operator delete((void *)v1073[i20]);
  }
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v560 = v1096[0];
  v1096[0] = 0;
  if (v560)
    operator delete(v560);
  if (SHIBYTE(v1094) < 0)
    operator delete(v1093[0]);
  v561 = mlcore::GenrePropertyLatestItemDateAdded((mlcore *)v560);
  std::string::basic_string[abi:ne180100]<0>(v1096, "libraryAdded");
  v1098 = v561;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v550, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyGenreLibraryAddedDate"), __p, &__block_literal_global_384);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v562 = __p[0];
  __p[0] = 0;
  if (v562)
    operator delete(v562);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);

  v563 = MEMORY[0x194038ED8]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v563);
  v564 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v565 = (void *)mlcore::PlaylistItemPropertyPersistentID(v564);
  v566 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v1072[1] = v565;
  v567 = mlcore::PlaylistItemPropertyItemPersistentID(v566);
  v568 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "itemPid");
  v1074 = v567;
  v569 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(v568);
  v570 = (ModelPropertyBase *)mlcore::ItemPropertyExcludeFromShuffle(v569);
  v571 = MPMediaLibraryGetProperty((ModelPropertyBase *)v569, v570);
  v572 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "excludeFromShuffle");
  v1076 = v571;
  v573 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(v572);
  v574 = (ModelPropertyBase *)mlcore::ItemPropertyStoreID(v573);
  v575 = MPMediaLibraryGetProperty((ModelPropertyBase *)v573, v574);
  v576 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1077, "storeID");
  v1078 = v575;
  v577 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(v576);
  v578 = (ModelPropertyBase *)mlcore::ItemPropertyStoreCloudID(v577);
  v579 = MPMediaLibraryGetProperty((ModelPropertyBase *)v577, v578);
  v580 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1079, "cloudID");
  v1080 = v579;
  v581 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(v580);
  v582 = (ModelPropertyBase *)mlcore::ItemPropertyStoreCloudUniversalLibraryID(v581);
  v583 = MPMediaLibraryGetProperty((ModelPropertyBase *)v581, v582);
  v584 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1081, "cloudUniversalLibraryID");
  v1082 = v583;
  v585 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(v584);
  v586 = (ModelPropertyBase *)mlcore::ItemPropertySubscriptionStoreItemID(v585);
  v587 = MPMediaLibraryGetProperty((ModelPropertyBase *)v585, v586);
  v588 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1083, "subscriptionStoreID");
  v1084 = v587;
  v589 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(v588);
  v590 = (ModelPropertyBase *)mlcore::ItemPropertyStoreCloudAlbumID(v589);
  v591 = MPMediaLibraryGetProperty((ModelPropertyBase *)v589, v590);
  v592 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1085, "storeCloudAlbumID");
  v1086 = v591;
  v593 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(v592);
  v594 = (ModelPropertyBase *)mlcore::ItemPropertyReportingStoreItemID(v593);
  v595 = MPMediaLibraryGetProperty((ModelPropertyBase *)v593, v594);
  v596 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1087, "reportingStoreItemID");
  v1088 = v595;
  v597 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(v596);
  v598 = (ModelPropertyBase *)mlcore::ItemPropertyAssetStoreItemID(v597);
  v599 = MPMediaLibraryGetProperty((ModelPropertyBase *)v597, v598);
  v600 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1089, "assetStoreItemID");
  v1090 = v599;
  v601 = mlcore::PlaylistItemPropertyOccurrenceID(v600);
  std::string::basic_string[abi:ne180100]<0>(v1091, "occurrenceID");
  v1092 = v601;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 11);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v564, "mapIdentifierMLProperties:identifierCreationBlock:", v1096, &__block_literal_global_387);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v602 = v1096[0];
  v1096[0] = 0;
  if (v602)
    operator delete(v602);
  v603 = 44;
  do
  {
    if (*((char *)&__p[v603 - 1] - 1) < 0)
      operator delete(__p[v603 - 4]);
    v603 -= 4;
  }
  while (v603 * 8);
  v604 = (void *)mlcore::PlaylistItemPropertyItemPersistentID((mlcore *)-[mlcore setEntityQueryBlock:](v564, "setEntityQueryBlock:", &__block_literal_global_388));
  v605 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v1072[1] = v604;
  v606 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(v605);
  v607 = (ModelPropertyBase *)mlcore::ItemPropertyMediaType(v606);
  v608 = MPMediaLibraryGetProperty((ModelPropertyBase *)v606, v607);
  v609 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "mediaType");
  v1074 = v608;
  v610 = mlcore::PlaylistItemPropertyAvailableArtworkToken(v609);
  v611 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "availableArtworkToken");
  v1076 = v610;
  v612 = mlcore::PlaylistItemPropertyFetchableArtworkToken(v611);
  v613 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1077, "fetchableArtworkToken");
  v1078 = v612;
  v614 = mlcore::PlaylistItemPropertyFetchableArtworkSourceType(v613);
  std::string::basic_string[abi:ne180100]<0>(v1079, "fetchableArtworkSourceType");
  v1080 = v614;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 5);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v564, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("_MPModelPropertyPlaylistEntryArtwork"), v1096, &__block_literal_global_395);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v615 = v1096[0];
  v1096[0] = 0;
  if (v615)
    operator delete(v615);
  for (i21 = 0; i21 != -20; i21 -= 4)
  {
    if (SHIBYTE(v1079[i21 + 2]) < 0)
      operator delete((void *)v1079[i21]);
  }
  v617 = mlcore::PlaylistItemPropertyPosition((mlcore *)v615);
  std::string::basic_string[abi:ne180100]<0>(v1096, "position");
  v1098 = v617;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v564, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistEntryPosition"), __p, &__block_literal_global_397_43565);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v618 = __p[0];
  __p[0] = 0;
  if (v618)
    operator delete(v618);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v619 = (void *)mlcore::PlaylistItemPropertyPersistentID((mlcore *)v618);
  v620 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "persistentID");
  v1072[1] = v619;
  v621 = mlcore::PlaylistItemPropertyUUID(v620);
  std::string::basic_string[abi:ne180100]<0>(v1073, "UUID");
  v1074 = v621;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v564, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistEntryUniversalIdentifier"), v1096, &__block_literal_global_400_43568);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v622 = v1096[0];
  v1096[0] = 0;
  if (v622)
    operator delete(v622);
  for (i22 = 0; i22 != -8; i22 -= 4)
  {
    if (SHIBYTE(v1073[i22 + 2]) < 0)
      operator delete((void *)v1073[i22]);
  }
  v624 = (void *)mlcore::PlaylistItemPropertyPosition((mlcore *)v622);
  v625 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "position");
  v1072[1] = v624;
  v626 = mlcore::PlaylistItemPropertyPositionUUID(v625);
  std::string::basic_string[abi:ne180100]<0>(v1073, "positionUUID");
  v1074 = v626;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v564, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistEntryPositionUniversalIdentifier"), v1096, &__block_literal_global_402_43570);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v627 = v1096[0];
  v1096[0] = 0;
  if (v627)
    operator delete(v627);
  for (i23 = 0; i23 != -8; i23 -= 4)
  {
    if (SHIBYTE(v1073[i23 + 2]) < 0)
      operator delete((void *)v1073[i23]);
  }
  v629 = (mlcore *)objc_opt_class();
  v630 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(v629);
  v631 = (void *)mlcore::PlaylistItemPropertyItemPersistentID(v630);
  v632 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v1072[1] = v631;
  v633 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(v632);
  v634 = (ModelPropertyBase *)mlcore::ItemPropertyMediaType(v633);
  v635 = MPMediaLibraryGetProperty((ModelPropertyBase *)v633, v634);
  std::string::basic_string[abi:ne180100]<0>(v1073, "mediaType");
  v1074 = v635;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:relationshipValidationProperties:isValidRelationshipHandler:](v564, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:relationshipValidationProperties:isValidRelationshipHandler:", CFSTR("MPModelRelationshipPlaylistEntrySong"), v629, 0, v630, v1096, &__block_literal_global_404);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v636 = v1096[0];
  v1096[0] = 0;
  if (v636)
    operator delete(v636);
  for (i24 = 0; i24 != -8; i24 -= 4)
  {
    if (SHIBYTE(v1073[i24 + 2]) < 0)
      operator delete((void *)v1073[i24]);
  }
  v638 = (mlcore *)objc_opt_class();
  v639 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(v638);
  v640 = (void *)mlcore::PlaylistItemPropertyItemPersistentID(v639);
  v641 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v1072[1] = v640;
  v642 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(v641);
  v643 = (ModelPropertyBase *)mlcore::ItemPropertyMediaType(v642);
  v644 = MPMediaLibraryGetProperty((ModelPropertyBase *)v642, v643);
  std::string::basic_string[abi:ne180100]<0>(v1073, "mediaType");
  v1074 = v644;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:relationshipValidationProperties:isValidRelationshipHandler:](v564, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:relationshipValidationProperties:isValidRelationshipHandler:", CFSTR("MPModelRelationshipPlaylistEntryTVEpisode"), v638, 0, v639, v1096, &__block_literal_global_405);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v645 = v1096[0];
  v1096[0] = 0;
  if (v645)
    operator delete(v645);
  for (i25 = 0; i25 != -8; i25 -= 4)
  {
    if (SHIBYTE(v1073[i25 + 2]) < 0)
      operator delete((void *)v1073[i25]);
  }
  v647 = (mlcore *)objc_opt_class();
  v648 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(v647);
  v649 = (void *)mlcore::PlaylistItemPropertyItemPersistentID(v648);
  v650 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v1072[1] = v649;
  v651 = (mlcore *)mlcore::PlaylistItemPropertyItemPersistentID(v650);
  v652 = (ModelPropertyBase *)mlcore::ItemPropertyMediaType(v651);
  v653 = MPMediaLibraryGetProperty((ModelPropertyBase *)v651, v652);
  std::string::basic_string[abi:ne180100]<0>(v1073, "mediaType");
  v1074 = v653;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:relationshipValidationProperties:isValidRelationshipHandler:](v564, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:relationshipValidationProperties:isValidRelationshipHandler:", CFSTR("MPModelRelationshipPlaylistEntryMovie"), v647, 0, v648, v1096, &__block_literal_global_406);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v654 = v1096[0];
  v1096[0] = 0;
  if (v654)
    operator delete(v654);
  for (i26 = 0; i26 != -8; i26 -= 4)
  {
    if (SHIBYTE(v1073[i26 + 2]) < 0)
      operator delete((void *)v1073[i26]);
  }
  v656 = (mlcore *)objc_opt_class();
  v657 = (mlcore *)mlcore::PlaylistItemPropertyPersistentID(v656);
  v658 = (ModelPropertyBase *)mlcore::ContainerItemPersonPropertyPersonPersistentID(v657);
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v564, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipPlaylistEntrySocialContributor"), v656, 0, MPMediaLibraryGetProperty((ModelPropertyBase *)v657, v658));

  +[MPMediaLibraryEntityTranslator translatorForTransientMPModelClass:](MPMediaLibraryEntityTranslator, "translatorForTransientMPModelClass:", objc_opt_class());
  v659 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v660 = mlcore::ItemPropertyPersistentID(v659);
  std::string::basic_string[abi:ne180100]<0>(v1096, "pid");
  v1098 = v660;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v659, "mapIdentifierMLProperties:identifierCreationBlock:", __p, &__block_literal_global_409_43571);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v661 = __p[0];
  __p[0] = 0;
  if (v661)
    operator delete(v661);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v662 = (mlcore *)mlcore::ItemPropertyCloudKVSKey((mlcore *)v661);
  v663 = (ModelPropertyBase *)mlcore::CloudKVSEntityPropertyBookmarkTime(v662);
  v664 = MPMediaLibraryGetProperty((ModelPropertyBase *)v662, v663);
  std::string::basic_string[abi:ne180100]<0>(v1096, "cloudKVSBookmarkTime");
  v1098 = v664;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v659, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaybackPositionBookmarkTime"), __p, &__block_literal_global_411);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v665 = __p[0];
  __p[0] = 0;
  if (v665)
    operator delete(v665);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v666 = mlcore::ItemPropertyCloudKVSKey((mlcore *)v665);
  std::string::basic_string[abi:ne180100]<0>(v1096, "cloudKVSKey");
  v1098 = v666;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v659, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaybackPositionStoreUbiquitousIdentifier"), __p, &__block_literal_global_413_43573);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v667 = __p[0];
  __p[0] = 0;
  if (v667)
    operator delete(v667);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v668 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v659, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaybackPositionShouldRememberBookmarkTime"), mlcore::ItemPropertyRememberBookmarkTime((mlcore *)v667));
  started = mlcore::ItemPropertyStartTime(v668);
  std::string::basic_string[abi:ne180100]<0>(v1096, "startTime");
  v1098 = started;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v659, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaybackPositionStartTime"), __p, &__block_literal_global_415);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v670 = __p[0];
  __p[0] = 0;
  if (v670)
    operator delete(v670);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v671 = mlcore::ItemPropertyStopTime((mlcore *)v670);
  std::string::basic_string[abi:ne180100]<0>(v1096, "stopTime");
  v1098 = v671;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v659, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaybackPositionStopTime"), __p, &__block_literal_global_417);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v672 = __p[0];
  __p[0] = 0;
  if (v672)
    operator delete(v672);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v673 = (mlcore *)mlcore::ItemPropertyCloudKVSKey((mlcore *)v672);
  HasBeenPlayed = (ModelPropertyBase *)mlcore::CloudKVSEntityPropertyHasBeenPlayed(v673);
  v675 = MPMediaLibraryGetProperty((ModelPropertyBase *)v673, HasBeenPlayed);
  std::string::basic_string[abi:ne180100]<0>(v1096, "cloudKVSHasBeenPlayed");
  v1098 = v675;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v659, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaybackPositionHasBeenPlayed"), __p, &__block_literal_global_419);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v676 = __p[0];
  __p[0] = 0;
  if (v676)
    operator delete(v676);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v677 = (mlcore *)mlcore::ItemPropertyCloudKVSKey((mlcore *)v676);
  v678 = (ModelPropertyBase *)mlcore::CloudKVSEntityPropertyPlayCount(v677);
  v679 = MPMediaLibraryGetProperty((ModelPropertyBase *)v677, v678);
  std::string::basic_string[abi:ne180100]<0>(v1096, "cloudKVSPlayCount");
  v1098 = v679;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v659, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaybackPositionUserPlayCount"), __p, &__block_literal_global_421_43577);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v680 = __p[0];
  __p[0] = 0;
  if (v680)
    operator delete(v680);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);

  v681 = MEMORY[0x194039FB8]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v681);
  v682 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v683 = mlcore::AlbumPropertyPersistentID(v682);
  std::string::basic_string[abi:ne180100]<0>(v1096, "pid");
  v1098 = v683;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v682, "mapIdentifierMLProperties:identifierCreationBlock:", __p, &__block_literal_global_422);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v684 = __p[0];
  __p[0] = 0;
  if (v684)
    operator delete(v684);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  -[mlcore setEntityQueryBlock:](v682, "setEntityQueryBlock:", &__block_literal_global_423);
  v685 = mlcore::AlbumPropertyTitle((mlcore *)-[mlcore setAllowedItemPredicatesBlock:](v682, "setAllowedItemPredicatesBlock:", &__block_literal_global_427));
  std::string::basic_string[abi:ne180100]<0>(v1093, "title");
  v1095 = v685;
  v686 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)v1093, 1);
  v687 = (void *)mlcore::AlbumPropertyHasTitle(v686);
  v688 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "hasTitle");
  v1072[1] = v687;
  v689 = mlcore::AlbumPropertyOrder(v688);
  std::string::basic_string[abi:ne180100]<0>(v1073, "titleOrder");
  v1074 = v689;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1100, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:](v682, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:", CFSTR("MPModelPropertyPodcastTitle"), v1096, v1100, &__block_literal_global_428, &__block_literal_global_429);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1101);
  v690 = v1100[0];
  v1100[0] = 0;
  if (v690)
    operator delete(v690);
  for (i27 = 0; i27 != -8; i27 -= 4)
  {
    if (SHIBYTE(v1073[i27 + 2]) < 0)
      operator delete((void *)v1073[i27]);
  }
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v692 = v1096[0];
  v1096[0] = 0;
  if (v692)
    operator delete(v692);
  if (SHIBYTE(v1094) < 0)
    operator delete(v1093[0]);
  v693 = mlcore::AlbumPropertyFeedURL((mlcore *)v692);
  std::string::basic_string[abi:ne180100]<0>(v1096, "feedURL");
  v1098 = v693;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v682, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPodcastFeedURL"), __p, &__block_literal_global_431);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v694 = __p[0];
  __p[0] = 0;
  if (v694)
    operator delete(v694);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v695 = (void *)mlcore::AlbumPropertyRepresentativeItemPersistentID((mlcore *)v694);
  v696 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v1072[1] = v695;
  v697 = mlcore::AlbumPropertyRepresentativeItemMediaType(v696);
  v698 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "mediaType");
  v1074 = v697;
  v699 = mlcore::AlbumPropertyRepresentativeItemAvailableArtworkToken(v698);
  v700 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "availableArtworkToken");
  v1076 = v699;
  v701 = mlcore::AlbumPropertyRepresentativeItemFetchableArtworkToken(v700);
  v702 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1077, "fetchableArtworkToken");
  v1078 = v701;
  v703 = mlcore::AlbumPropertyRepresentativeItemFetchableArtworkSourceType(v702);
  std::string::basic_string[abi:ne180100]<0>(v1079, "fetchableArtworkSourceType");
  v1080 = v703;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 5);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v682, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPodcastArtwork"), v1096, &__block_literal_global_432_43578);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v704 = v1096[0];
  v1096[0] = 0;
  if (v704)
    operator delete(v704);
  for (i28 = 0; i28 != -20; i28 -= 4)
  {
    if (SHIBYTE(v1079[i28 + 2]) < 0)
      operator delete((void *)v1079[i28]);
  }
  v706 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:usingForeignPropertyBase:](v682, "mapRelationshipKey:toModelClass:usingForeignPropertyBase:", CFSTR("MPModelRelationshipPodcastAuthor"), v706, mlcore::AlbumPropertyArtistPersistentID(v706));

  v707 = MEMORY[0x194039F64]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v707);
  v708 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v709 = (void *)mlcore::ArtistPropertyPersistentID(v708);
  v710 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v1072[1] = v709;
  v711 = mlcore::ArtistPropertyStoreID(v710);
  std::string::basic_string[abi:ne180100]<0>(v1073, "storeID");
  v1074 = v711;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v708, "mapIdentifierMLProperties:identifierCreationBlock:", v1096, &__block_literal_global_434);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v712 = v1096[0];
  v1096[0] = 0;
  if (v712)
    operator delete(v712);
  for (i29 = 0; i29 != -8; i29 -= 4)
  {
    if (SHIBYTE(v1073[i29 + 2]) < 0)
      operator delete((void *)v1073[i29]);
  }
  v714 = mlcore::ArtistPropertyName((mlcore *)v712);
  std::string::basic_string[abi:ne180100]<0>(v1093, "name");
  v1095 = v714;
  v715 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)v1093, 1);
  v716 = (void *)mlcore::ArtistPropertyHasName(v715);
  v717 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "hasName");
  v1072[1] = v716;
  v718 = mlcore::ArtistPropertyOrder(v717);
  std::string::basic_string[abi:ne180100]<0>(v1073, "nameOrder");
  v1074 = v718;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1100, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:](v708, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:", CFSTR("MPModelPropertyPersonName"), v1096, v1100, &__block_literal_global_435, &__block_literal_global_436);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1101);
  v719 = v1100[0];
  v1100[0] = 0;
  if (v719)
    operator delete(v719);
  for (i30 = 0; i30 != -8; i30 -= 4)
  {
    if (SHIBYTE(v1073[i30 + 2]) < 0)
      operator delete((void *)v1073[i30]);
  }
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v721 = v1096[0];
  v1096[0] = 0;
  if (v721)
    operator delete(v721);
  if (SHIBYTE(v1094) < 0)
    operator delete(v1093[0]);

  v722 = MEMORY[0x194038F20]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v722);
  v723 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v724 = (void *)mlcore::ItemPropertyPersistentID(v723);
  v725 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v1072[1] = v724;
  v726 = mlcore::ItemPropertyStoreID(v725);
  v727 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "storeID");
  v1074 = v726;
  v728 = mlcore::ItemPropertyPodcastExternalGUID(v727);
  std::string::basic_string[abi:ne180100]<0>(v1075, "externalGUID");
  v1076 = v728;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 3);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v723, "mapIdentifierMLProperties:identifierCreationBlock:", v1096, &__block_literal_global_438);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v729 = v1096[0];
  v1096[0] = 0;
  if (v729)
    operator delete(v729);
  for (i31 = 0; i31 != -12; i31 -= 4)
  {
    if (SHIBYTE(v1075[i31 + 2]) < 0)
      operator delete((void *)v1075[i31]);
  }
  -[mlcore setEntityQueryBlock:](v723, "setEntityQueryBlock:", &__block_literal_global_439);
  v731 = mlcore::ItemPropertyTitle((mlcore *)-[mlcore setAllowedItemPredicatesBlock:](v723, "setAllowedItemPredicatesBlock:", &__block_literal_global_443));
  std::string::basic_string[abi:ne180100]<0>(v1100, "title");
  v1102 = v731;
  v732 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1100, 1);
  v733 = mlcore::ItemPropertyTitleOrder(v732);
  std::string::basic_string[abi:ne180100]<0>(v1093, "titleOrder");
  v1095 = v733;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)v1093, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:](v723, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:", CFSTR("MPModelPropertyPodcastEpisodeTitle"), __p, v1096, &__block_literal_global_444, &__block_literal_global_445_43580);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v734 = v1096[0];
  v1096[0] = 0;
  if (v734)
    operator delete(v734);
  if (SHIBYTE(v1094) < 0)
    operator delete(v1093[0]);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v735 = __p[0];
  __p[0] = 0;
  if (v735)
    operator delete(v735);
  if (SHIBYTE(v1101) < 0)
    operator delete(v1100[0]);
  v736 = mlcore::ItemPropertyTotalTime((mlcore *)v735);
  std::string::basic_string[abi:ne180100]<0>(v1096, "time");
  v1098 = v736;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v723, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPodcastEpisodeDuration"), __p, &__block_literal_global_446);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v737 = __p[0];
  __p[0] = 0;
  if (v737)
    operator delete(v737);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v738 = mlcore::ItemPropertyDateReleased((mlcore *)v737);
  std::string::basic_string[abi:ne180100]<0>(v1096, "dateReleased");
  v1098 = v738;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v723, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPodcastEpisodeReleaseDateComponents"), __p, &__block_literal_global_447);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v739 = __p[0];
  __p[0] = 0;
  if (v739)
    operator delete(v739);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v740 = mlcore::ItemPropertyUserRating((mlcore *)v739);
  std::string::basic_string[abi:ne180100]<0>(v1096, "userRating");
  v1098 = v740;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v723, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPodcastEpisodeUserRating"), __p, &__block_literal_global_448);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v741 = __p[0];
  __p[0] = 0;
  if (v741)
    operator delete(v741);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v742 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v723, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPodcastEpisodeExplicit"), mlcore::ItemPropertyIsExplicit((mlcore *)v741));
  v743 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v723, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPodcastEpisodeDescriptionText"), mlcore::ItemPropertyLongDescription(v742));
  v744 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v723, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPodcastEpisodeHasVideo"), mlcore::ItemPropertyIsVideo(v743));
  v745 = mlcore::ItemPropertyDatePlayed(v744);
  std::string::basic_string[abi:ne180100]<0>(v1096, "datePlayed");
  v1098 = v745;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v723, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPodcastEpisodeDatePlayed"), __p, &__block_literal_global_449);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v746 = __p[0];
  __p[0] = 0;
  if (v746)
    operator delete(v746);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v747 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:usingForeignPropertyBase:](v723, "mapRelationshipKey:toModelClass:usingForeignPropertyBase:", CFSTR("MPModelRelationshipPodcastEpisodeAuthor"), v747, mlcore::ItemPropertyItemArtistPersistentID(v747));
  v748 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v723, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipPodcastEpisodeLocalFileAsset"), v748, 1, mlcore::ItemPropertyPersistentID(v748));
  v749 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:usingForeignPropertyBase:](v723, "mapRelationshipKey:toModelClass:usingForeignPropertyBase:", CFSTR("MPModelRelationshipPodcastEpisodePodcast"), v749, mlcore::ItemPropertyAlbumPersistentID(v749));
  v750 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v723, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipPodcastEpisodePlaybackPosition"), v750, 1, mlcore::ItemPropertyPersistentID(v750));

  v751 = MEMORY[0x194038D28]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v751);
  v752 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v753 = (void *)mlcore::ItemArtistPropertyPersistentID(v752);
  v754 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v1072[1] = v753;
  v755 = mlcore::ItemArtistPropertyStoreID(v754);
  std::string::basic_string[abi:ne180100]<0>(v1073, "storeID");
  v1074 = v755;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v752, "mapIdentifierMLProperties:identifierCreationBlock:", v1096, &__block_literal_global_451);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v756 = v1096[0];
  v1096[0] = 0;
  if (v756)
    operator delete(v756);
  for (i32 = 0; i32 != -8; i32 -= 4)
  {
    if (SHIBYTE(v1073[i32 + 2]) < 0)
      operator delete((void *)v1073[i32]);
  }
  v758 = mlcore::ItemArtistPropertyName((mlcore *)v756);
  std::string::basic_string[abi:ne180100]<0>(v1093, "name");
  v1095 = v758;
  v759 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)v1093, 1);
  v760 = (void *)mlcore::ItemArtistPropertyHasName(v759);
  v761 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "hasName");
  v1072[1] = v760;
  v762 = mlcore::ItemArtistPropertyOrder(v761);
  std::string::basic_string[abi:ne180100]<0>(v1073, "nameOrder");
  v1074 = v762;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1100, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:](v752, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:", CFSTR("MPModelPropertyPersonName"), v1096, v1100, &__block_literal_global_452, &__block_literal_global_453);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1101);
  v763 = v1100[0];
  v1100[0] = 0;
  if (v763)
    operator delete(v763);
  for (i33 = 0; i33 != -8; i33 -= 4)
  {
    if (SHIBYTE(v1073[i33 + 2]) < 0)
      operator delete((void *)v1073[i33]);
  }
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v765 = v1096[0];
  v1096[0] = 0;
  if (v765)
    operator delete(v765);
  if (SHIBYTE(v1094) < 0)
    operator delete(v1093[0]);

  v766 = MEMORY[0x194039F40]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v766);
  v767 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v768 = (void *)mlcore::ItemPropertyStoreID(v767);
  v769 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "storeID");
  v1072[1] = v768;
  v770 = mlcore::ItemPropertyStoreCloudID(v769);
  v771 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "cloudID");
  v1074 = v770;
  v772 = mlcore::ItemPropertyStoreCloudUniversalLibraryID(v771);
  v773 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "cloudUniversalLibraryID");
  v1076 = v772;
  v774 = mlcore::ItemPropertyPersistentID(v773);
  v775 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1077, "pid");
  v1078 = v774;
  v776 = mlcore::ItemPropertySubscriptionStoreItemID(v775);
  v777 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1079, "subscriptionStoreID");
  v1080 = v776;
  v778 = mlcore::ItemPropertyStoreCloudAlbumID(v777);
  v779 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1081, "storeCloudAlbumID");
  v1082 = v778;
  v780 = mlcore::ItemPropertyReportingStoreItemID(v779);
  v781 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1083, "reportingStoreItemID");
  v1084 = v780;
  v782 = mlcore::ItemPropertyAssetStoreItemID(v781);
  std::string::basic_string[abi:ne180100]<0>(v1085, "assetStoreItemID");
  v1086 = v782;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 8);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v767, "mapIdentifierMLProperties:identifierCreationBlock:", v1096, &__block_literal_global_454);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v783 = v1096[0];
  v1096[0] = 0;
  if (v783)
    operator delete(v783);
  for (i34 = 0; i34 != -32; i34 -= 4)
  {
    if (SHIBYTE(v1085[i34 + 2]) < 0)
      operator delete((void *)v1085[i34]);
  }
  -[mlcore setEntityQueryBlock:](v767, "setEntityQueryBlock:", &__block_literal_global_455_43581);
  v785 = mlcore::ItemPropertyTitle((mlcore *)-[mlcore setAllowedItemPredicatesBlock:](v767, "setAllowedItemPredicatesBlock:", &__block_literal_global_459));
  std::string::basic_string[abi:ne180100]<0>(v1100, "title");
  v1102 = v785;
  v786 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1100, 1);
  v787 = mlcore::ItemPropertyTitleOrder(v786);
  std::string::basic_string[abi:ne180100]<0>(v1093, "titleOrder");
  v1095 = v787;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)v1093, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:](v767, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:", CFSTR("MPModelPropertyMovieTitle"), __p, v1096, &__block_literal_global_460, &__block_literal_global_461);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v788 = v1096[0];
  v1096[0] = 0;
  if (v788)
    operator delete(v788);
  if (SHIBYTE(v1094) < 0)
    operator delete(v1093[0]);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v789 = __p[0];
  __p[0] = 0;
  if (v789)
    operator delete(v789);
  if (SHIBYTE(v1101) < 0)
    operator delete(v1100[0]);
  v790 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v767, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyMovieDescriptionText"), mlcore::ItemPropertyLongDescription((mlcore *)v789));
  v791 = mlcore::MoviePropertyInfo(v790);
  std::string::basic_string[abi:ne180100]<0>(v1096, "movieInfoPlist");
  v1098 = v791;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v767, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyMovieInfoDictionary"), __p, &__block_literal_global_463_43583);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v792 = __p[0];
  __p[0] = 0;
  if (v792)
    operator delete(v792);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v793 = mlcore::ItemPropertyDateReleased((mlcore *)v792);
  std::string::basic_string[abi:ne180100]<0>(v1096, "dateReleased");
  v1098 = v793;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v767, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyMovieReleaseDate"), __p, &__block_literal_global_464_43584);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v794 = __p[0];
  __p[0] = 0;
  if (v794)
    operator delete(v794);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v795 = (void *)mlcore::ItemPropertyPersistentID((mlcore *)v794);
  v796 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v1072[1] = v795;
  v797 = mlcore::ItemPropertyMediaType(v796);
  v798 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "mediaType");
  v1074 = v797;
  v799 = mlcore::ItemPropertyAvailableArtworkToken(v798);
  v800 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "availableArtworkToken");
  v1076 = v799;
  v801 = mlcore::ItemPropertyFetchableArtworkToken(v800);
  v802 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1077, "fetchableArtworkToken");
  v1078 = v801;
  v803 = mlcore::ItemPropertyFetchableArtworkSourceType(v802);
  std::string::basic_string[abi:ne180100]<0>(v1079, "fetchableArtworkSourceType");
  v1080 = v803;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 5);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v767, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyMovieArtwork"), v1096, &__block_literal_global_465);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v804 = v1096[0];
  v1096[0] = 0;
  if (v804)
    operator delete(v804);
  for (i35 = 0; i35 != -20; i35 -= 4)
  {
    if (SHIBYTE(v1079[i35 + 2]) < 0)
      operator delete((void *)v1079[i35]);
  }
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v767, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyMovieEditorialArtwork"), __p, &__block_literal_global_466);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v806 = __p[0];
  __p[0] = 0;
  if (v806)
    operator delete(v806);
  v807 = mlcore::ItemPropertyTotalTime((mlcore *)v806);
  std::string::basic_string[abi:ne180100]<0>(v1096, "time");
  v1098 = v807;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v767, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyMovieDuration"), __p, &__block_literal_global_467_43585);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v808 = __p[0];
  __p[0] = 0;
  if (v808)
    operator delete(v808);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v767, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyMovieTagline"), __p, &__block_literal_global_468);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v809 = __p[0];
  __p[0] = 0;
  if (v809)
    operator delete(v809);
  v810 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v767, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyMovieExplicitRating"), mlcore::ItemPropertyContentRatingLevel((mlcore *)v809));
  v811 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v767, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyMovieHasCloudSyncSource"), mlcore::ItemPropertyHasCloudSyncSource(v810));
  v812 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v767, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyMovieLibraryAdded"), mlcore::ItemPropertyInMyLibrary(v811));
  v813 = mlcore::ItemPropertyDateAdded(v812);
  std::string::basic_string[abi:ne180100]<0>(v1096, "libraryAdded");
  v1098 = v813;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v767, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyMovieLibraryAddedDate"), __p, &__block_literal_global_469);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v814 = __p[0];
  __p[0] = 0;
  if (v814)
    operator delete(v814);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v815 = MPModelPropertyMovieDownloadedDate;
  v816 = mlcore::ItemPropertyDateDownloaded((mlcore *)v814);
  std::string::basic_string[abi:ne180100]<0>(v1096, "downloadedDate");
  v1098 = v816;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v767, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", v815, __p, &__block_literal_global_470_43586);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v817 = __p[0];
  __p[0] = 0;
  if (v817)
    operator delete(v817);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v818 = mlcore::ItemPropertyDatePlayed((mlcore *)v817);
  std::string::basic_string[abi:ne180100]<0>(v1096, "datePlayed");
  v1098 = v818;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v767, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyMovieLastDevicePlaybackDate"), __p, &__block_literal_global_471_43587);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v819 = __p[0];
  __p[0] = 0;
  if (v819)
    operator delete(v819);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v820 = (void *)mlcore::ItemPropertyHasNonPurgeableAsset((mlcore *)v819);
  v821 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "hasNonPurgeableAsset");
  v1072[1] = v820;
  v822 = mlcore::ItemPropertyIsStoreRedownloadable(v821);
  std::string::basic_string[abi:ne180100]<0>(v1073, "isStoreRedownloadable");
  v1074 = v822;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v767, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyMovieLibraryAddEligible"), v1096, &__block_literal_global_472_43588);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v823 = v1096[0];
  v1096[0] = 0;
  if (v823)
    operator delete(v823);
  for (i36 = 0; i36 != -8; i36 -= 4)
  {
    if (SHIBYTE(v1073[i36 + 2]) < 0)
      operator delete((void *)v1073[i36]);
  }
  v825 = mlcore::ItemPropertyKeepLocal((mlcore *)v823);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocal");
  v1098 = v825;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v767, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyMovieKeepLocalEnableState"), __p, &__block_literal_global_473);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v826 = __p[0];
  __p[0] = 0;
  if (v826)
    operator delete(v826);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v827 = mlcore::ItemPropertyKeepLocalStatus((mlcore *)v826);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocalStatus");
  v1098 = v827;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v767, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyMovieKeepLocalManagedStatus"), __p, &__block_literal_global_474);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v828 = __p[0];
  __p[0] = 0;
  if (v828)
    operator delete(v828);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v829 = mlcore::ItemPropertyKeepLocalStatus((mlcore *)v828);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocalStatusReason");
  v1098 = v829;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v767, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyMovieKeepLocalManagedStatusReason"), __p, &__block_literal_global_475);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v830 = __p[0];
  __p[0] = 0;
  if (v830)
    operator delete(v830);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v831 = mlcore::ItemPropertyKeepLocalConstraints((mlcore *)v830);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocalConstraints");
  v1098 = v831;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v767, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyMovieKeepLocalConstraints"), __p, &__block_literal_global_476);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v832 = __p[0];
  __p[0] = 0;
  if (v832)
    operator delete(v832);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  -[mlcore mapPropertyKey:toMLProperty:](v767, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyMovieStoreCanonicalID"), mlcore::ItemPropertyStoreCanonicalItemId((mlcore *)v832));
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v767, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelRelationshipMovieClips"), __p, &__block_literal_global_477_43589);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v833 = __p[0];
  __p[0] = 0;
  if (v833)
    operator delete(v833);
  v834 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v767, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipMovieLocalFileAsset"), v834, 1, mlcore::ItemPropertyPersistentID(v834));
  v835 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v767, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipMovieStoreAsset"), v835, 1, mlcore::ItemPropertyPersistentID(v835));
  v836 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v767, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipMoviePlaybackPosition"), v836, 1, mlcore::ItemPropertyPersistentID(v836));

  v837 = MEMORY[0x19403A00C]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v837);
  v838 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v839 = (void *)mlcore::ItemPropertyStoreID(v838);
  v840 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "storeID");
  v1072[1] = v839;
  v841 = mlcore::ItemPropertyStoreCloudID(v840);
  v842 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "cloudID");
  v1074 = v841;
  v843 = mlcore::ItemPropertyStoreCloudUniversalLibraryID(v842);
  v844 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "cloudUniversalLibraryID");
  v1076 = v843;
  v845 = mlcore::ItemPropertyPersistentID(v844);
  v846 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1077, "pid");
  v1078 = v845;
  v847 = mlcore::ItemPropertySubscriptionStoreItemID(v846);
  v848 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1079, "subscriptionStoreID");
  v1080 = v847;
  v849 = mlcore::ItemPropertyStoreCloudAlbumID(v848);
  v850 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1081, "storeCloudAlbumID");
  v1082 = v849;
  v851 = mlcore::ItemPropertyReportingStoreItemID(v850);
  v852 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1083, "reportingStoreItemID");
  v1084 = v851;
  v853 = mlcore::ItemPropertyAssetStoreItemID(v852);
  std::string::basic_string[abi:ne180100]<0>(v1085, "assetStoreItemID");
  v1086 = v853;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 8);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v838, "mapIdentifierMLProperties:identifierCreationBlock:", v1096, &__block_literal_global_478);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v854 = v1096[0];
  v1096[0] = 0;
  if (v854)
    operator delete(v854);
  for (i37 = 0; i37 != -32; i37 -= 4)
  {
    if (SHIBYTE(v1085[i37 + 2]) < 0)
      operator delete((void *)v1085[i37]);
  }
  -[mlcore setEntityQueryBlock:](v838, "setEntityQueryBlock:", &__block_literal_global_479);
  v856 = mlcore::ItemPropertyTitle((mlcore *)-[mlcore setAllowedItemPredicatesBlock:](v838, "setAllowedItemPredicatesBlock:", &__block_literal_global_483));
  std::string::basic_string[abi:ne180100]<0>(v1100, "title");
  v1102 = v856;
  v857 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1100, 1);
  v858 = mlcore::ItemPropertyTitleOrder(v857);
  std::string::basic_string[abi:ne180100]<0>(v1093, "titleOrder");
  v1095 = v858;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)v1093, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:](v838, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:", CFSTR("MPModelPropertyTVEpisodeTitle"), __p, v1096, &__block_literal_global_484, &__block_literal_global_485_43590);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v859 = v1096[0];
  v1096[0] = 0;
  if (v859)
    operator delete(v859);
  if (SHIBYTE(v1094) < 0)
    operator delete(v1093[0]);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v860 = __p[0];
  __p[0] = 0;
  if (v860)
    operator delete(v860);
  if (SHIBYTE(v1101) < 0)
    operator delete(v1100[0]);
  v861 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v838, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyTVEpisodeDescriptionText"), mlcore::ItemPropertyLongDescription((mlcore *)v860));
  v862 = mlcore::ItemPropertyTotalTime(v861);
  std::string::basic_string[abi:ne180100]<0>(v1096, "time");
  v1098 = v862;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v838, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVEpisodeDuration"), __p, &__block_literal_global_486);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v863 = __p[0];
  __p[0] = 0;
  if (v863)
    operator delete(v863);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v864 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v838, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyTVEpisodeExplicitRating"), mlcore::ItemPropertyContentRatingLevel((mlcore *)v863));
  v865 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v838, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyTVEpisodeHasCloudSyncSource"), mlcore::ItemPropertyHasCloudSyncSource(v864));
  v866 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v838, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyTVEpisodeMusicShow"), mlcore::ItemPropertyIsMusicShow(v865));
  v867 = mlcore::TVEpisodePropertyEpisodeSortID(v866);
  v868 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1096, "sortID");
  v1098 = v867;
  v869 = mlcore::ItemPropertyTrackNumber(v868);
  std::string::basic_string[abi:ne180100]<0>(v1099, "trackNumber");
  v1099[3] = v869;
  v870 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1100, (unsigned __int8 *)v1096, 2);
  v871 = (void *)mlcore::ItemPropertyEpisodeSortID(v870);
  v872 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "sortID");
  v1072[1] = v871;
  v873 = mlcore::ItemPropertyEpisodeSubSortOrder(v872);
  v874 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "subOrder");
  v1074 = v873;
  v875 = mlcore::ItemPropertyTrackNumber(v874);
  std::string::basic_string[abi:ne180100]<0>(v1075, "trackNumber");
  v1076 = v875;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1093, (unsigned __int8 *)__p, 3);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:](v838, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:", CFSTR("MPModelPropertyTVEpisodeNumber"), v1100, v1093, &__block_literal_global_489, &__block_literal_global_490_43593);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1094);
  v876 = v1093[0];
  v1093[0] = 0;
  if (v876)
    operator delete(v876);
  for (i38 = 0; i38 != -12; i38 -= 4)
  {
    if (SHIBYTE(v1075[i38 + 2]) < 0)
      operator delete((void *)v1075[i38]);
  }
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1101);
  v878 = v1100[0];
  v1100[0] = 0;
  if (v878)
    operator delete(v878);
  for (i39 = 0; i39 != -8; i39 -= 4)
  {
    if (SHIBYTE(v1099[i39 + 2]) < 0)
      operator delete((void *)v1099[i39]);
  }
  v880 = mlcore::ItemPropertyEpisodeType((mlcore *)v878);
  std::string::basic_string[abi:ne180100]<0>(v1096, "episodeType");
  v1098 = v880;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v838, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVEpisodeType"), __p, &__block_literal_global_491);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v881 = __p[0];
  __p[0] = 0;
  if (v881)
    operator delete(v881);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v882 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v838, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyTVEpisodeTypeDisplayName"), mlcore::ItemPropertyEpisodeTypeDisplayName((mlcore *)v881));
  v883 = (void *)mlcore::ItemPropertyPersistentID(v882);
  v884 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v1072[1] = v883;
  v885 = mlcore::ItemPropertyMediaType(v884);
  v886 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "mediaType");
  v1074 = v885;
  v887 = mlcore::TVEpisodePropertyAvailableScreenshotToken(v886);
  v888 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "availableArtworkToken");
  v1076 = v887;
  v889 = mlcore::TVEpisodePropertyFetchableScreenshotToken(v888);
  v890 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1077, "fetchableArtworkToken");
  v1078 = v889;
  v891 = mlcore::TVEpisodePropertyFetchableScreenshotSourceType(v890);
  std::string::basic_string[abi:ne180100]<0>(v1079, "fetchableArtworkSourceType");
  v1080 = v891;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 5);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v838, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVEpisodeArtwork"), v1096, &__block_literal_global_498);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v892 = v1096[0];
  v1096[0] = 0;
  if (v892)
    operator delete(v892);
  for (i40 = 0; i40 != -20; i40 -= 4)
  {
    if (SHIBYTE(v1079[i40 + 2]) < 0)
      operator delete((void *)v1079[i40]);
  }
  v894 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v838, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyTVEpisodeLibraryAdded"), mlcore::ItemPropertyInMyLibrary((mlcore *)v892));
  v895 = mlcore::ItemPropertyDateAdded(v894);
  std::string::basic_string[abi:ne180100]<0>(v1096, "libraryAdded");
  v1098 = v895;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v838, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVEpisodeLibraryAddedDate"), __p, &__block_literal_global_500);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v896 = __p[0];
  __p[0] = 0;
  if (v896)
    operator delete(v896);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v897 = mlcore::ItemPropertyDatePlayed((mlcore *)v896);
  std::string::basic_string[abi:ne180100]<0>(v1096, "datePlayed");
  v1098 = v897;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v838, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVEpisodeLastDevicePlaybackDate"), __p, &__block_literal_global_502);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v898 = __p[0];
  __p[0] = 0;
  if (v898)
    operator delete(v898);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v899 = mlcore::ItemPropertyDateReleased((mlcore *)v898);
  std::string::basic_string[abi:ne180100]<0>(v1096, "dateReleased");
  v1098 = v899;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v838, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVEpisodeReleaseDate"), __p, &__block_literal_global_504);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v900 = __p[0];
  __p[0] = 0;
  if (v900)
    operator delete(v900);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v901 = MPModelPropertyTVEpisodeDownloadedDate;
  v902 = mlcore::ItemPropertyDateDownloaded((mlcore *)v900);
  std::string::basic_string[abi:ne180100]<0>(v1096, "downloadedDate");
  v1098 = v902;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v838, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", v901, __p, &__block_literal_global_506);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v903 = __p[0];
  __p[0] = 0;
  if (v903)
    operator delete(v903);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v904 = (void *)mlcore::ItemPropertyHasNonPurgeableAsset((mlcore *)v903);
  v905 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "hasNonPurgeableAsset");
  v1072[1] = v904;
  v906 = mlcore::ItemPropertyIsStoreRedownloadable(v905);
  std::string::basic_string[abi:ne180100]<0>(v1073, "isStoreRedownloadable");
  v1074 = v906;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v838, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVEpisodeLibraryAddEligible"), v1096, &__block_literal_global_508_43594);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v907 = v1096[0];
  v1096[0] = 0;
  if (v907)
    operator delete(v907);
  for (i41 = 0; i41 != -8; i41 -= 4)
  {
    if (SHIBYTE(v1073[i41 + 2]) < 0)
      operator delete((void *)v1073[i41]);
  }
  v909 = mlcore::ItemPropertyKeepLocal((mlcore *)v907);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocal");
  v1098 = v909;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v838, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVEpisodeKeepLocalEnableState"), __p, &__block_literal_global_510);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v910 = __p[0];
  __p[0] = 0;
  if (v910)
    operator delete(v910);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v911 = mlcore::ItemPropertyKeepLocalStatus((mlcore *)v910);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocalStatus");
  v1098 = v911;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v838, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVEpisodeKeepLocalManagedStatus"), __p, &__block_literal_global_512);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v912 = __p[0];
  __p[0] = 0;
  if (v912)
    operator delete(v912);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v913 = mlcore::ItemPropertyKeepLocalStatus((mlcore *)v912);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocalStatusReason");
  v1098 = v913;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v838, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVEpisodeKeepLocalManagedStatusReason"), __p, &__block_literal_global_514);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v914 = __p[0];
  __p[0] = 0;
  if (v914)
    operator delete(v914);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v915 = mlcore::ItemPropertyKeepLocalConstraints((mlcore *)v914);
  std::string::basic_string[abi:ne180100]<0>(v1096, "keepLocalConstraints");
  v1098 = v915;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v838, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVEpisodeKeepLocalConstraints"), __p, &__block_literal_global_516);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v916 = __p[0];
  __p[0] = 0;
  if (v916)
    operator delete(v916);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v917 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:usingForeignPropertyBase:](v838, "mapRelationshipKey:toModelClass:usingForeignPropertyBase:", CFSTR("MPModelRelationshipTVEpisodeSeason"), v917, mlcore::ItemPropertyAlbumPersistentID(v917));
  v918 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:usingForeignPropertyBase:](v838, "mapRelationshipKey:toModelClass:usingForeignPropertyBase:", CFSTR("MPModelRelationshipTVEpisodeShow"), v918, mlcore::ItemPropertyItemArtistPersistentID(v918));
  v919 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v838, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipTVEpisodeLocalFileAsset"), v919, 1, mlcore::ItemPropertyPersistentID(v919));
  v920 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v838, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipTVEpisodePlaybackPosition"), v920, 1, mlcore::ItemPropertyPersistentID(v920));
  v921 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v838, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipTVEpisodeStoreAsset"), v921, 1, mlcore::ItemPropertyPersistentID(v921));

  v922 = MEMORY[0x19403A000]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v922);
  v923 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v924 = (void *)mlcore::AlbumPropertyPersistentID(v923);
  v925 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v1072[1] = v924;
  v926 = mlcore::AlbumPropertyStoreID(v925);
  std::string::basic_string[abi:ne180100]<0>(v1073, "storeID");
  v1074 = v926;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v923, "mapIdentifierMLProperties:identifierCreationBlock:", v1096, &__block_literal_global_517);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v927 = v1096[0];
  v1096[0] = 0;
  if (v927)
    operator delete(v927);
  for (i42 = 0; i42 != -8; i42 -= 4)
  {
    if (SHIBYTE(v1073[i42 + 2]) < 0)
      operator delete((void *)v1073[i42]);
  }
  -[mlcore setEntityQueryBlock:](v923, "setEntityQueryBlock:", &__block_literal_global_518);
  v929 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v923, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyTVSeasonNumber"), mlcore::AlbumPropertySeasonNumber((mlcore *)-[mlcore setAllowedItemPredicatesBlock:](v923, "setAllowedItemPredicatesBlock:", &__block_literal_global_522_43595)));
  v930 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v923, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyTVSeasonDescriptionText"), mlcore::AlbumPropertyRepresentativeItemCollectionDescription(v929));
  v931 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v923, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyTVSeasonYear"), mlcore::AlbumPropertyYear(v930));
  v932 = mlcore::TVSeasonPropertyLatestItemDateAdded(v931);
  std::string::basic_string[abi:ne180100]<0>(v1096, "libraryAdded");
  v1098 = v932;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v923, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVSeasonLibraryAddedDate"), __p, &__block_literal_global_523_43596);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v933 = __p[0];
  __p[0] = 0;
  if (v933)
    operator delete(v933);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v934 = mlcore::TVSeasonPropertyLatestItemDateDownloaded((mlcore *)v933);
  std::string::basic_string[abi:ne180100]<0>(v1096, "downloadedDate");
  v1098 = v934;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v923, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVSeasonDownloadedDate"), __p, &__block_literal_global_524);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v935 = __p[0];
  __p[0] = 0;
  if (v935)
    operator delete(v935);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v923, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVSeasonLibraryAdded"), __p, &__block_literal_global_525);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v936 = __p[0];
  __p[0] = 0;
  if (v936)
    operator delete(v936);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v923, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVSeasonLibraryAddEligible"), __p, &__block_literal_global_526_43597);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v937 = __p[0];
  __p[0] = 0;
  if (v937)
    operator delete(v937);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v923, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVSeasonHasExplicitContent"), __p, &__block_literal_global_527);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v938 = __p[0];
  __p[0] = 0;
  if (v938)
    operator delete(v938);
  v939 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID((mlcore *)v938);
  v940 = (ModelPropertyBase *)mlcore::ItemPropertyIsExplicit(v939);
  v941 = MPMediaLibraryGetProperty((ModelPropertyBase *)v939, v940);
  std::string::basic_string[abi:ne180100]<0>(v1096, "representativeItemExplicit");
  v1098 = v941;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v923, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVSeasonHasCleanContent"), __p, &__block_literal_global_528);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v942 = __p[0];
  __p[0] = 0;
  if (v942)
    operator delete(v942);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v943 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v923, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyTVSeasonEpisodesCount"), mlcore::TVSeasonPropertyEpisodeCount((mlcore *)v942));
  v944 = mlcore::AlbumPropertyRepresentativeItemShowSortType(v943);
  std::string::basic_string[abi:ne180100]<0>(v1096, "sortType");
  v1098 = v944;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v923, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVSeasonSortType"), __p, &__block_literal_global_530_43599);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v945 = __p[0];
  __p[0] = 0;
  if (v945)
    operator delete(v945);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v946 = (void *)mlcore::AlbumPropertyRepresentativeItemPersistentID((mlcore *)v945);
  v947 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v1072[1] = v946;
  v948 = mlcore::AlbumPropertyRepresentativeItemMediaType(v947);
  v949 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "mediaType");
  v1074 = v948;
  v950 = mlcore::AlbumPropertyRepresentativeItemAvailableArtworkToken(v949);
  v951 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "availableArtworkToken");
  v1076 = v950;
  v952 = mlcore::AlbumPropertyRepresentativeItemFetchableArtworkToken(v951);
  v953 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1077, "fetchableArtworkToken");
  v1078 = v952;
  v954 = mlcore::AlbumPropertyRepresentativeItemFetchableArtworkSourceType(v953);
  std::string::basic_string[abi:ne180100]<0>(v1079, "fetchableArtworkSourceType");
  v1080 = v954;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 5);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v923, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVSeasonArtwork"), v1096, &__block_literal_global_531_43600);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v955 = v1096[0];
  v1096[0] = 0;
  if (v955)
    operator delete(v955);
  for (i43 = 0; i43 != -20; i43 -= 4)
  {
    if (SHIBYTE(v1079[i43 + 2]) < 0)
      operator delete((void *)v1079[i43]);
  }
  v957 = (mlcore *)objc_opt_class();
  v958 = (mlcore *)mlcore::AlbumPropertyRepresentativeItemPersistentID(v957);
  v959 = (ModelPropertyBase *)mlcore::ItemPropertyItemArtistPersistentID(v958);
  -[mlcore mapRelationshipKey:toModelClass:usingForeignPropertyBase:](v923, "mapRelationshipKey:toModelClass:usingForeignPropertyBase:", CFSTR("MPModelRelationshipTVSeasonShow"), v957, MPMediaLibraryGetProperty((ModelPropertyBase *)v958, v959));
  v960 = (mlcore *)objc_opt_class();
  -[mlcore mapRelationshipKey:toModelClass:usingForeignPropertyBase:](v923, "mapRelationshipKey:toModelClass:usingForeignPropertyBase:", CFSTR("MPModelRelationshipTVSeasonRepresentativeEpisode"), v960, mlcore::AlbumPropertyRepresentativeItemPersistentID(v960));

  v961 = MEMORY[0x194039F94]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v961);
  v962 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v963 = (void *)mlcore::ItemArtistPropertyPersistentID(v962);
  v964 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v1072[1] = v963;
  v965 = mlcore::ItemArtistPropertyStoreID(v964);
  std::string::basic_string[abi:ne180100]<0>(v1073, "storeID");
  v1074 = v965;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v962, "mapIdentifierMLProperties:identifierCreationBlock:", v1096, &__block_literal_global_532_43601);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v966 = v1096[0];
  v1096[0] = 0;
  if (v966)
    operator delete(v966);
  for (i44 = 0; i44 != -8; i44 -= 4)
  {
    if (SHIBYTE(v1073[i44 + 2]) < 0)
      operator delete((void *)v1073[i44]);
  }
  -[mlcore setEntityQueryBlock:](v962, "setEntityQueryBlock:", &__block_literal_global_533);
  v968 = mlcore::ItemArtistPropertySeriesName((mlcore *)-[mlcore setAllowedItemPredicatesBlock:](v962, "setAllowedItemPredicatesBlock:", &__block_literal_global_537_43602));
  std::string::basic_string[abi:ne180100]<0>(v1093, "name");
  v1095 = v968;
  v969 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)v1093, 1);
  HasSeriesName = (void *)mlcore::TVShowPropertyHasSeriesName(v969);
  v971 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "hasName");
  v1072[1] = HasSeriesName;
  v972 = mlcore::TVShowPropertySeriesOrder(v971);
  std::string::basic_string[abi:ne180100]<0>(v1073, "nameOrder");
  v1074 = v972;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1100, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:](v962, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:", CFSTR("MPModelPropertyTVShowTitle"), v1096, v1100, &__block_literal_global_538, &__block_literal_global_539);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1101);
  v973 = v1100[0];
  v1100[0] = 0;
  if (v973)
    operator delete(v973);
  for (i45 = 0; i45 != -8; i45 -= 4)
  {
    if (SHIBYTE(v1073[i45 + 2]) < 0)
      operator delete((void *)v1073[i45]);
  }
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v975 = v1096[0];
  v1096[0] = 0;
  if (v975)
    operator delete(v975);
  if (SHIBYTE(v1094) < 0)
    operator delete(v1093[0]);
  v976 = (void *)mlcore::ItemArtistPropertyRepresentativeItemPersistentID((mlcore *)v975);
  v977 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v1072[1] = v976;
  v978 = (mlcore *)mlcore::ItemArtistPropertyRepresentativeItemPersistentID(v977);
  v979 = (ModelPropertyBase *)mlcore::ItemPropertyMediaType(v978);
  v980 = MPMediaLibraryGetProperty((ModelPropertyBase *)v978, v979);
  v981 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "mediaType");
  v1074 = v980;
  v982 = (mlcore *)mlcore::ItemArtistPropertyRepresentativeItemPersistentID(v981);
  v983 = (ModelPropertyBase *)mlcore::ItemPropertyAvailableArtworkToken(v982);
  v984 = MPMediaLibraryGetProperty((ModelPropertyBase *)v982, v983);
  v985 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "availableArtworkToken");
  v1076 = v984;
  v986 = (mlcore *)mlcore::ItemArtistPropertyRepresentativeItemPersistentID(v985);
  v987 = (ModelPropertyBase *)mlcore::ItemPropertyFetchableArtworkToken(v986);
  v988 = MPMediaLibraryGetProperty((ModelPropertyBase *)v986, v987);
  v989 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1077, "fetchableArtworkToken");
  v1078 = v988;
  v990 = (mlcore *)mlcore::ItemArtistPropertyRepresentativeItemPersistentID(v989);
  v991 = (ModelPropertyBase *)mlcore::ItemPropertyFetchableArtworkSourceType(v990);
  v992 = MPMediaLibraryGetProperty((ModelPropertyBase *)v990, v991);
  std::string::basic_string[abi:ne180100]<0>(v1079, "fetchableArtworkSourceType");
  v1080 = v992;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 5);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v962, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVShowArtwork"), v1096, &__block_literal_global_540_43603);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v993 = v1096[0];
  v1096[0] = 0;
  if (v993)
    operator delete(v993);
  for (i46 = 0; i46 != -20; i46 -= 4)
  {
    if (SHIBYTE(v1079[i46 + 2]) < 0)
      operator delete((void *)v1079[i46]);
  }
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v962, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVShowEditorialArtwork"), __p, &__block_literal_global_541);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v995 = __p[0];
  __p[0] = 0;
  if (v995)
    operator delete(v995);
  v996 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v962, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyTVShowEpisodeCount"), mlcore::TVShowPropertyEpisodeCount((mlcore *)v995));
  v997 = (mlcore *)mlcore::ItemArtistPropertyRepresentativeItemPersistentID(v996);
  v998 = (ModelPropertyBase *)mlcore::ItemPropertyStoreCanonicalItemId(v997);
  v999 = MPMediaLibraryGetProperty((ModelPropertyBase *)v997, v998);
  std::string::basic_string[abi:ne180100]<0>(v1096, "canonicalID");
  v1098 = v999;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v962, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVShowStoreCanonicalID"), __p, &__block_literal_global_543);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v1000 = __p[0];
  __p[0] = 0;
  if (v1000)
    operator delete(v1000);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v1001 = (mlcore *)objc_opt_class();
  v1002 = (mlcore *)mlcore::ItemArtistPropertyRepresentativeItemPersistentID(v1001);
  v1003 = (ModelPropertyBase *)mlcore::ItemPropertyAlbumArtistPersistentID(v1002);
  -[mlcore mapRelationshipKey:toModelClass:usingForeignPropertyBase:](v962, "mapRelationshipKey:toModelClass:usingForeignPropertyBase:", CFSTR("MPModelRelationshipTVShowCreator"), v1001, MPMediaLibraryGetProperty((ModelPropertyBase *)v1002, v1003));

  v1004 = MEMORY[0x194039F64]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v1004);
  v1005 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v1006 = (void *)mlcore::ArtistPropertyPersistentID(v1005);
  v1007 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v1072[1] = v1006;
  v1008 = mlcore::ArtistPropertyStoreID(v1007);
  std::string::basic_string[abi:ne180100]<0>(v1073, "storeID");
  v1074 = v1008;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v1005, "mapIdentifierMLProperties:identifierCreationBlock:", v1096, &__block_literal_global_545_43605);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v1009 = v1096[0];
  v1096[0] = 0;
  if (v1009)
    operator delete(v1009);
  for (i47 = 0; i47 != -8; i47 -= 4)
  {
    if (SHIBYTE(v1073[i47 + 2]) < 0)
      operator delete((void *)v1073[i47]);
  }
  v1011 = mlcore::ArtistPropertyName((mlcore *)v1009);
  std::string::basic_string[abi:ne180100]<0>(v1093, "name");
  v1095 = v1011;
  v1012 = (mlcore *)std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)v1093, 1);
  v1013 = (void *)mlcore::ArtistPropertyHasName(v1012);
  v1014 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "hasName");
  v1072[1] = v1013;
  v1015 = mlcore::ArtistPropertyOrder(v1014);
  std::string::basic_string[abi:ne180100]<0>(v1073, "nameOrder");
  v1074 = v1015;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1100, (unsigned __int8 *)__p, 2);
  -[mlcore mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:](v1005, "mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:", CFSTR("MPModelPropertyPersonName"), v1096, v1100, &__block_literal_global_546_43606, &__block_literal_global_547);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1101);
  v1016 = v1100[0];
  v1100[0] = 0;
  if (v1016)
    operator delete(v1016);
  for (i48 = 0; i48 != -8; i48 -= 4)
  {
    if (SHIBYTE(v1073[i48 + 2]) < 0)
      operator delete((void *)v1073[i48]);
  }
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v1018 = v1096[0];
  v1096[0] = 0;
  if (v1018)
    operator delete(v1018);
  if (SHIBYTE(v1094) < 0)
    operator delete(v1093[0]);
  v1019 = (void *)mlcore::ArtistPropertyPersistentID((mlcore *)v1018);
  v1020 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "artistPID");
  v1072[1] = v1019;
  v1021 = mlcore::ArtistPropertyAvailableArtworkToken(v1020);
  v1022 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1073, "artistAvailableArtworkToken");
  v1074 = v1021;
  v1023 = mlcore::ArtistPropertyFetchableArtworkToken(v1022);
  v1024 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(v1075, "artistFetchableArtworkToken");
  v1076 = v1023;
  v1025 = mlcore::ArtistPropertyFetchableArtworkSourceType(v1024);
  std::string::basic_string[abi:ne180100]<0>(v1077, "artistFetchableArtworkSourceType");
  v1078 = v1025;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 4);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v1005, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyTVShowCreatorArtwork"), v1096, &__block_literal_global_548);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v1026 = v1096[0];
  v1096[0] = 0;
  if (v1026)
    operator delete(v1026);
  for (i49 = 0; i49 != -16; i49 -= 4)
  {
    if (SHIBYTE(v1077[i49 + 2]) < 0)
      operator delete((void *)v1077[i49]);
  }

  v1028 = MEMORY[0x194039F88]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v1028);
  v1029 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v1030 = (void *)mlcore::PersonPropertyPersistentID(v1029);
  v1031 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v1072[1] = v1030;
  v1032 = mlcore::PersonPropertyCloudIdentifier(v1031);
  std::string::basic_string[abi:ne180100]<0>(v1073, "socialProfileID");
  v1074 = v1032;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v1029, "mapIdentifierMLProperties:identifierCreationBlock:", v1096, &__block_literal_global_550);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v1033 = v1096[0];
  v1096[0] = 0;
  if (v1033)
    operator delete(v1033);
  for (i50 = 0; i50 != -8; i50 -= 4)
  {
    if (SHIBYTE(v1073[i50 + 2]) < 0)
      operator delete((void *)v1073[i50]);
  }
  v1035 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v1029, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPersonName"), mlcore::PersonPropertyName((mlcore *)v1033));
  v1036 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v1029, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySocialPersonUncensoredName"), mlcore::PersonPropertyName(v1035));
  -[mlcore mapPropertyKey:toMLProperty:](v1029, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySocialPersonHandle"), mlcore::PersonPropertyHandle(v1036));
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v1029, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySocialPersonBiography"), __p, &__block_literal_global_551_43607);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v1037 = __p[0];
  __p[0] = 0;
  if (v1037)
    operator delete(v1037);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v1029, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySocialPersonPendingRequestsCount"), __p, &__block_literal_global_552);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v1038 = __p[0];
  __p[0] = 0;
  if (v1038)
    operator delete(v1038);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v1029, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySocialPersonIsPrivate"), __p, &__block_literal_global_553);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v1039 = __p[0];
  __p[0] = 0;
  if (v1039)
    operator delete(v1039);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1072 = 0u;
  LODWORD(v1073[0]) = 1065353216;
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v1029, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySocialPersonIsVerified"), __p, &__block_literal_global_554);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v1040 = __p[0];
  __p[0] = 0;
  if (v1040)
    operator delete(v1040);
  v1041 = mlcore::PersonPropertyImageURL((mlcore *)v1040);
  std::string::basic_string[abi:ne180100]<0>(v1096, "imageURL");
  v1098 = v1041;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v1029, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertySocialPersonArtwork"), __p, &__block_literal_global_556);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v1042 = __p[0];
  __p[0] = 0;
  if (v1042)
    operator delete(v1042);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  -[mlcore mapPropertyKey:toMLProperty:](v1029, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertySocialPersonHasLightweightProfile"), mlcore::PersonPropertyHasLightweightProfile((mlcore *)v1042));

  v1043 = MEMORY[0x194038F14]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v1043);
  v1044 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v1045 = (void *)mlcore::PlaylistAuthorPropertyPersistentID(v1044);
  v1046 = (mlcore *)std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v1072[1] = v1045;
  v1047 = mlcore::PlaylistAuthorSocialProfileID(v1046);
  std::string::basic_string[abi:ne180100]<0>(v1073, "socialProfileID");
  v1074 = v1047;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)v1096, (unsigned __int8 *)__p, 2);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v1044, "mapIdentifierMLProperties:identifierCreationBlock:", v1096, &__block_literal_global_568);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node(v1097);
  v1048 = v1096[0];
  v1096[0] = 0;
  if (v1048)
    operator delete(v1048);
  for (i51 = 0; i51 != -8; i51 -= 4)
  {
    if (SHIBYTE(v1073[i51 + 2]) < 0)
      operator delete((void *)v1073[i51]);
  }
  v1050 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v1044, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistAuthorRole"), mlcore::PlaylistAuthorPropertyRole((mlcore *)-[mlcore setEntityQueryBlock:](v1044, "setEntityQueryBlock:", &__block_literal_global_569)));
  v1051 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v1044, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistAuthorIsPendingApproval"), mlcore::PlaylistAuthorPropertyIsPending(v1050));
  -[mlcore mapPropertyKey:toMLProperty:](v1044, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistAuthorPosition"), mlcore::PlaylistAuthorPropertyPosition(v1051));
  v1052 = (mlcore *)objc_opt_class();
  v1053 = (mlcore *)mlcore::PlaylistAuthorPropertyPersistentID(v1052);
  v1054 = (ModelPropertyBase *)mlcore::PlaylistAuthorPropertyPersonPersistentID(v1053);
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v1044, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipPlaylistAuthorSocialProfile"), v1052, 0, MPMediaLibraryGetProperty((ModelPropertyBase *)v1053, v1054));
  v1055 = (mlcore *)objc_opt_class();
  v1056 = (mlcore *)mlcore::PlaylistAuthorPropertyPersistentID(v1055);
  v1057 = (ModelPropertyBase *)mlcore::PlaylistAuthorPropertyContainerPersistentID(v1056);
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v1044, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipPlaylistAuthorPlaylist"), v1055, 0, MPMediaLibraryGetProperty((ModelPropertyBase *)v1056, v1057));

  v1058 = MEMORY[0x19403925C]();
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:](MPMediaLibraryEntityTranslator, "translatorForMPModelClass:mlcoreEntityClass:", objc_opt_class(), v1058);
  v1059 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v1060 = mlcore::PlaylistItemReactionPropertyPersistentID(v1059);
  std::string::basic_string[abi:ne180100]<0>(v1096, "itemPID");
  v1098 = v1060;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapIdentifierMLProperties:identifierCreationBlock:](v1059, "mapIdentifierMLProperties:identifierCreationBlock:", __p, &__block_literal_global_576_43608);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v1061 = __p[0];
  __p[0] = 0;
  if (v1061)
    operator delete(v1061);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v1062 = (mlcore *)-[mlcore mapPropertyKey:toMLProperty:](v1059, "mapPropertyKey:toMLProperty:", CFSTR("MPModelPropertyPlaylistEntryReactionText"), mlcore::PlaylistItemReactionPropertyReactionText((mlcore *)-[mlcore setEntityQueryBlock:](v1059, "setEntityQueryBlock:", &__block_literal_global_577)));
  v1063 = mlcore::PlaylistItemReactionPropertyDate(v1062);
  std::string::basic_string[abi:ne180100]<0>(v1096, "date");
  v1098 = v1063;
  std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)__p, (unsigned __int8 *)v1096, 1);
  -[mlcore mapPropertyKey:withPropertiesToFetch:valueTransformer:](v1059, "mapPropertyKey:withPropertiesToFetch:valueTransformer:", CFSTR("MPModelPropertyPlaylistEntryReactionDate"), __p, &__block_literal_global_584);
  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__deallocate_node((void **)v1072[0]);
  v1064 = __p[0];
  __p[0] = 0;
  if (v1064)
    operator delete(v1064);
  if (SHIBYTE(v1097) < 0)
    operator delete(v1096[0]);
  v1065 = (mlcore *)objc_opt_class();
  v1066 = (mlcore *)mlcore::PlaylistItemReactionPropertyPersistentID(v1065);
  v1067 = (ModelPropertyBase *)mlcore::PlaylistItemReactionPropertyPersonPersistentID(v1066);
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v1059, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipPlaylistEntryReactionSocialProfile"), v1065, 0, MPMediaLibraryGetProperty((ModelPropertyBase *)v1066, v1067));
  v1068 = (mlcore *)objc_opt_class();
  v1069 = (mlcore *)mlcore::PlaylistItemReactionPropertyPersistentID(v1068);
  v1070 = (ModelPropertyBase *)mlcore::PlaylistItemReactionPropertyContainerItemPersistentID(v1069);
  -[mlcore mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:](v1059, "mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:", CFSTR("MPModelRelationshipPlaylistEntryReactionPlaylistEntry"), v1068, 0, MPMediaLibraryGetProperty((ModelPropertyBase *)v1069, v1070));

}

void sub_193C3585C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  uint64_t v17;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;

  std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::~__hash_table((uint64_t)&__p);
  if (*(char *)(v17 - 177) < 0)
    operator delete(*(void **)(v17 - 200));

  if (a2 == 2)
  {
    v20 = __cxa_begin_catch(a1);
    v21 = (void *)MEMORY[0x1E0C99DA0];
    v22 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&__p);
    (*(void (**)(void *, void **))(*(_QWORD *)v20 + 24))(v20, &__p);
    if (*(char *)(v17 - 177) >= 0)
      v23 = v17 - 200;
    else
      v23 = *(_QWORD *)(v17 - 200);
    objc_msgSend(v22, "stringWithUTF8String:", v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v24, 0);
    v25 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v17 - 177) < 0)
      operator delete(*(void **)(v17 - 200));
    objc_exception_throw(v25);
  }
  if (a2 == 1)
  {
    v26 = __cxa_begin_catch(a1);
    v27 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v26 + 16))(v26));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v28, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v29);
  }
  _Unwind_Resume(a1);
}

id ___ZL36_MPMLInitPropertyHomeSharingAssetMapv_block_invoke_3(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a2, "mediaLibrary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "protectedContentSupportStorageURL");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_193C3ADD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193C3B0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<mlcore::Section>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 6;
      *(_QWORD *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_193C3CFD0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  unint64_t *v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;

  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }

  v43 = (std::__shared_weak_count *)STACK[0x490];
  if (STACK[0x490])
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }

  if (a2 == 2)
  {
    v46 = __cxa_begin_catch(a1);
    v47 = (void *)MEMORY[0x1E0C99DA0];
    v48 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&__p);
    (*(void (**)(unint64_t *__return_ptr, void *, void **))(*(_QWORD *)v46 + 24))(&STACK[0x470], v46, &__p);
    if (SLOBYTE(STACK[0x487]) >= 0)
      v49 = &STACK[0x470];
    else
      v49 = (unint64_t *)STACK[0x470];
    objc_msgSend(v48, "stringWithUTF8String:", v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v50, 0);
    v51 = (id)objc_claimAutoreleasedReturnValue();

    if (SLOBYTE(STACK[0x487]) < 0)
      operator delete((void *)STACK[0x470]);
    objc_exception_throw(v51);
  }
  if (a2 == 1)
  {
    v52 = __cxa_begin_catch(a1);
    v53 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52));
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v54, 0);
    v55 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v55);
  }
  _Unwind_Resume(a1);
}

void sub_193C3DC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_193C3DE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

id MPSharedBackgroundTaskProvider()
{
  if (MPSharedBackgroundTaskProvider_onceToken != -1)
    dispatch_once(&MPSharedBackgroundTaskProvider_onceToken, &__block_literal_global_34040);
  return (id)MPSharedBackgroundTaskProvider_sharedProvider;
}

void sub_193C40734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a38, 8);
  _Unwind_Resume(a1);
}

void getSSDownloadPropertyKind()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getSSDownloadPropertyKindSymbolLoc_ptr_50182;
  v8 = getSSDownloadPropertyKindSymbolLoc_ptr_50182;
  if (!getSSDownloadPropertyKindSymbolLoc_ptr_50182)
  {
    v1 = StoreServicesLibrary_50149();
    v0 = (id *)dlsym(v1, "SSDownloadPropertyKind");
    v6[3] = (uint64_t)v0;
    getSSDownloadPropertyKindSymbolLoc_ptr_50182 = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getSSDownloadPropertyKind(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MPStoreDownloadManager.m"), 52, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_193C4094C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getSSDownloadPropertyClientBundleIdentifier()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getSSDownloadPropertyClientBundleIdentifierSymbolLoc_ptr_50179;
  v8 = getSSDownloadPropertyClientBundleIdentifierSymbolLoc_ptr_50179;
  if (!getSSDownloadPropertyClientBundleIdentifierSymbolLoc_ptr_50179)
  {
    v1 = StoreServicesLibrary_50149();
    v0 = (id *)dlsym(v1, "SSDownloadPropertyClientBundleIdentifier");
    v6[3] = (uint64_t)v0;
    getSSDownloadPropertyClientBundleIdentifierSymbolLoc_ptr_50179 = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getSSDownloadPropertyClientBundleIdentifier(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MPStoreDownloadManager.m"), 48, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_193C40A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getSSPurchaseManagerClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  StoreServicesLibrary_50149();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SSPurchaseManager");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSSPurchaseManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSSPurchaseManagerClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("MPStoreDownloadManager.m"), 37, CFSTR("Unable to find class %s"), "SSPurchaseManager");

    __break(1u);
  }
}

void __getSSDownloadManagerOptionsClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  StoreServicesLibrary_50149();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SSDownloadManagerOptions");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSSDownloadManagerOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSSDownloadManagerOptionsClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("MPStoreDownloadManager.m"), 39, CFSTR("Unable to find class %s"), "SSDownloadManagerOptions");

    __break(1u);
  }
}

void __getSSDownloadManagerClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  StoreServicesLibrary_50149();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SSDownloadManager");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSSDownloadManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSSDownloadManagerClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("MPStoreDownloadManager.m"), 36, CFSTR("Unable to find class %s"), "SSDownloadManager");

    __break(1u);
  }
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_16(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  NSNumber *v8;
  void *v9;
  void *__p[2];
  char v12;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "volumeNormalization");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (NSNumber *)objc_claimAutoreleasedReturnValue();
  if (v12 < 0)
    operator delete(__p[0]);
  _MPMLVolumeNormalizationFromDatabaseValue(v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_193C41528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

id _MPMLVolumeNormalizationFromDatabaseValue(NSNumber *a1)
{
  unint64_t v1;
  float v2;
  double v3;

  v1 = -[NSNumber unsignedIntegerValue](a1, "unsignedIntegerValue");
  v2 = 1.0;
  if (v1 && v1 != 0xFFFF)
    v2 = sqrtf(1000.0 / (float)v1);
  if (v2 < 0.25119)
    v2 = 0.25119;
  if (v2 > 3.9811)
    v2 = 3.9811;
  v3 = floor((float)(log10f(v2) * 20.0) + 0.5);
  *(float *)&v3 = v3;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v3);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_193C416EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193C41AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193C4206C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<mlcore::EntityClass *,mlcore::ModelPropertyBase *>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      v8 = v5[2];
      v9 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
      v10 = 0x9DDFEA08EB382D69 * (HIDWORD(v8) ^ (v9 >> 47) ^ v9);
      v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
      if (v7)
      {
        v12 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          v2 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
          if (v11 >= v7)
            v2 = v11 % v7;
        }
        else
        {
          v2 = v11 & (v7 - 1);
        }
        v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        if (v13)
        {
          for (i = (_QWORD *)*v13; i; i = (_QWORD *)*i)
          {
            v15 = i[1];
            if (v15 == v11)
            {
              if (i[2] == v8)
                goto LABEL_41;
            }
            else
            {
              if (v12.u32[0] > 1uLL)
              {
                if (v15 >= v7)
                  v15 %= v7;
              }
              else
              {
                v15 &= v7 - 1;
              }
              if (v15 != v2)
                break;
            }
          }
        }
      }
      v16 = operator new(0x20uLL);
      *v16 = 0;
      v16[1] = v11;
      *((_OWORD *)v16 + 1) = *((_OWORD *)v5 + 1);
      v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v18 = *(float *)(a1 + 32);
      if (!v7 || (float)(v18 * (float)v7) < v17)
      {
        v19 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v19 = 1;
        v20 = v19 | (2 * v7);
        v21 = vcvtps_u32_f32(v17 / v18);
        if (v20 <= v21)
          v22 = v21;
        else
          v22 = v20;
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v22);
        v7 = *(_QWORD *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v11 >= v7)
            v2 = v11 % v7;
          else
            v2 = v11;
        }
        else
        {
          v2 = (v7 - 1) & v11;
        }
      }
      v23 = *(_QWORD *)a1;
      v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v24)
      {
        *v16 = *v24;
      }
      else
      {
        *v16 = *v6;
        *v6 = v16;
        *(_QWORD *)(v23 + 8 * v2) = v6;
        if (!*v16)
          goto LABEL_40;
        v25 = *(_QWORD *)(*v16 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v25 >= v7)
            v25 %= v7;
        }
        else
        {
          v25 &= v7 - 1;
        }
        v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
      }
      *v24 = v16;
LABEL_40:
      ++*(_QWORD *)(a1 + 24);
LABEL_41:
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_193C42324(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<mlcore::MultiSortDescriptor>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 56);
    *(_QWORD *)(a1 + 16) = i - 56;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,mlcore::ModelPropertyBase *>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,mlcore::ModelPropertyBase *>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,mlcore::ModelPropertyBase *>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void ___ZL31_MPMLInitTranslatorDictionariesv_block_invoke()
{
  id v0;
  void *v1;
  id v2;
  void *v3;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v1 = (void *)MPModelToTranslatorDictionary;
  MPModelToTranslatorDictionary = (uint64_t)v0;

  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v3 = (void *)MLEntityClassToTranslatorDictionary;
  MLEntityClassToTranslatorDictionary = (uint64_t)v2;

}

void ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_5(uint64_t a1, void *a2, uint64_t *a3)
{
  void *v4;
  void *v5;
  char v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  mlcore *v22;
  mlcore *v23;
  mlcore *v24;
  mlcore *v25;
  mlcore *v26;
  uint64_t v27;
  void *v28;
  BOOL v29;
  id v30;
  mlcore *v31;
  uint64_t v32;
  mlcore *v33;
  uint64_t v34;
  _OWORD *v35;
  char v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  int64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t i;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t j;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  mlcore *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  int64x2_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void *v107;
  id v108;
  mlcore *v109;
  __int128 v110;
  _OWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  void *v122;
  BOOL v123;
  mlcore *v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  __int128 v130;
  int64x2_t v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  void *v136;
  void *v137;
  __int128 v138;
  id v139;
  __int128 v140;
  __int128 v141;
  void *v142;
  void *v143;
  void *v144;
  id v145;
  _QWORD v146[3];
  std::__shared_weak_count *v147;
  _QWORD v148[3];
  std::__shared_weak_count *v149;
  void **v150;
  std::__shared_weak_count *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  _OWORD *v158;
  _OWORD *v159;
  _OWORD *v160;
  __int128 v161;
  void *__p[2];
  char v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  int64x2_t v166;
  _QWORD v167[3];
  int64x2_t *v168;
  int64x2_t v169;
  uint64_t v170;
  _QWORD *v171;
  _BYTE v172[128];
  _OWORD v173[2];
  const __CFString *v174;
  void *v175;
  _QWORD v176[4];

  v176[1] = *MEMORY[0x1E0C80C00];
  v166 = 0uLL;
  v167[0] = 0;
  v145 = a2;
  objc_msgSend(v145, "modelKind");
  v142 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v142, "identityKind");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[MPModelPlaylistKind identityKind](MPModelPlaylistKind, "identityKind");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "isEqual:", v5);

  if ((v6 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v136 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyPlaylistMap()_block_invoke_5");
    v137 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v136, "handleFailureInFunction:file:lineNumber:description:", v137, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 1247, CFSTR("Must have playlist kind to generate playlist entity query."));

  }
  v7 = v142;
  objc_opt_class();
  v8 = v7;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v8 = v7;
    if ((objc_msgSend(v8, "variants") & 2) != 0 && (objc_msgSend(v8, "variants") & 0x80) == 0)
    {
      v9 = (void *)MEMORY[0x1E0D4D030];
      v174 = CFSTR("playlistKind");
      objc_msgSend(v8, "description");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v175 = v10;
      v143 = v8;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v175, &v174, 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v176[0] = v11;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v176, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", *MEMORY[0x1E0D4CE38], CFSTR("Bug"), CFSTR("MPModelLibraryRequestWithSmartPlaylistAndNoFavoriteSongs"), CFSTR("-[MPModelLibraryRequest] Requesting playlist from an MPModelLibraryRequest with smart playlists but not the favorite songs playlist"), 0, v12, 0);

      v13 = objc_msgSend(v8, "variants");
      objc_msgSend(v8, "playlistEntryKind");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      +[MPModelPlaylist kindWithVariants:playlistEntryKind:options:](MPModelPlaylist, "kindWithVariants:playlistEntryKind:options:", v13 | 0x80, v14, objc_msgSend(v8, "options"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      v8 = v15;
    }

  }
  v16 = (std::__shared_weak_count *)a3[1];
  v164 = *a3;
  v165 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v144 = v8;
  objc_msgSend(v8, "applyToView:withContext:", &v164, v145);
  v19 = v165;
  if (v165)
  {
    v20 = (unint64_t *)&v165->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  objc_msgSend(v145, "allowedEntityIdentifiers");
  v22 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v23 = (mlcore *)mlcore::PlaylistPropertyPersistentID(v22);
  v24 = (mlcore *)mlcore::PlaylistPropertyStoreCloudID(v23);
  v25 = (mlcore *)mlcore::PlaylistPropertyCloudGlobalID(v24);
  v26 = (mlcore *)mlcore::PlaylistPropertySyncID(v25);
  v27 = mlcore::PlaylistPropertyCloudUniversalLibraryID(v26);
  _MPMLInsertPredicatesForIdentifierSet(&v166, v22, 0, 0, (uint64_t)v23, (uint64_t)v24, (uint64_t)v25, (uint64_t)v26, v27, 0);

  objc_msgSend(v145, "filterText");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend(v28, "length") == 0;

  if (!v29)
  {
    objc_msgSend(v145, "filterText");
    v30 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v30, "UTF8String"));

    v32 = mlcore::PlaylistPropertyName(v31);
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *,std::string&,void>(&v157, v32, (uint64_t)__p);
    v173[0] = v157;
    v157 = 0uLL;
    v34 = mlcore::PlaylistPropertyCloudAuthorName(v33);
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *,std::string&,void>(&v156, v34, (uint64_t)__p);
    v173[1] = v156;
    v156 = 0uLL;
    v159 = 0;
    v160 = 0;
    v158 = 0;
    v168 = (int64x2_t *)&v158;
    v169.i8[0] = 0;
    v35 = operator new(0x20uLL);
    v36 = 0;
    v37 = 0;
    v158 = v35;
    v159 = v35;
    v160 = v35 + 2;
    do
    {
      v38 = v36;
      v39 = v173[v37];
      *v35 = v39;
      if (*((_QWORD *)&v39 + 1))
      {
        v40 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      ++v35;
      v36 = 1;
      v37 = 1;
    }
    while ((v38 & 1) == 0);
    v159 = v35;
    mlcore::CreateOrPredicate();
    v42 = v166.i64[1];
    if (v166.i64[1] >= v167[0])
    {
      v43 = (v166.i64[1] - v166.i64[0]) >> 4;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 60)
        std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
      v45 = v167[0] - v166.i64[0];
      if ((v167[0] - v166.i64[0]) >> 3 > v44)
        v44 = v45 >> 3;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
        v46 = 0xFFFFFFFFFFFFFFFLL;
      else
        v46 = v44;
      v171 = v167;
      v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v46);
      v49 = &v47[16 * v43];
      *(_OWORD *)v49 = v161;
      v161 = 0uLL;
      v50 = (_QWORD *)v166.i64[1];
      v51 = v166.i64[0];
      if (v166.i64[1] == v166.i64[0])
      {
        v54 = vdupq_n_s64(v166.u64[1]);
        v52 = (uint64_t)&v47[16 * v43];
      }
      else
      {
        v52 = (uint64_t)&v47[16 * v43];
        do
        {
          v53 = *((_OWORD *)v50 - 1);
          v50 -= 2;
          *(_OWORD *)(v52 - 16) = v53;
          v52 -= 16;
          *v50 = 0;
          v50[1] = 0;
        }
        while (v50 != (_QWORD *)v51);
        v54 = v166;
      }
      v55 = (uint64_t)(v49 + 16);
      v166.i64[0] = v52;
      v166.i64[1] = (uint64_t)(v49 + 16);
      v169 = v54;
      v56 = v167[0];
      v167[0] = &v47[16 * v48];
      v170 = v56;
      v168 = (int64x2_t *)v54.i64[0];
      std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v168);
      v57 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
      v166.i64[1] = v55;
      if (*((_QWORD *)&v161 + 1))
      {
        v58 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
    }
    else
    {
      *(_OWORD *)v166.i64[1] = v161;
      v161 = 0uLL;
      v166.i64[1] = v42 + 16;
    }
    v168 = (int64x2_t *)&v158;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
    for (i = 1; i != -1; --i)
      std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&v173[i]);
    v61 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
    if (*((_QWORD *)&v156 + 1))
    {
      v62 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
    if (*((_QWORD *)&v157 + 1))
    {
      v65 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (v163 < 0)
      operator delete(__p[0]);
  }
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  objc_msgSend(v145, "scopedContainers");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v67, "reverseObjectEnumerator");
  v68 = (void *)objc_claimAutoreleasedReturnValue();

  v69 = objc_msgSend(v68, "countByEnumeratingWithState:objects:count:", &v152, v172, 16);
  if (!v69)
  {

    v71 = 0;
    goto LABEL_108;
  }
  v139 = v7;
  v70 = 0;
  v71 = 0;
  v72 = *(_QWORD *)v153;
  do
  {
    for (j = 0; j != v69; ++j)
    {
      if (*(_QWORD *)v153 != v72)
        objc_enumerationMutation(v68);
      v74 = *(void **)(*((_QWORD *)&v152 + 1) + 8 * j);
      if (v70)
      {
        if (v71)
          continue;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v70 = v74;
          if (v71)
            continue;
        }
        else
        {
          v70 = 0;
          if (v71)
            continue;
        }
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v71 = v74;
      else
        v71 = 0;
    }
    v69 = objc_msgSend(v68, "countByEnumeratingWithState:objects:count:", &v152, v172, 16);
  }
  while (v69);

  v7 = v139;
  if (v71)
  {
    *(_QWORD *)&v161 = 0;
    objc_msgSend(v71, "identifiers");
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v75, "universalStore");
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    v77 = objc_msgSend(v76, "adamID");

    *(_QWORD *)&v161 = v77;
    if (v77)
    {
      mlcore::PlaylistPropertyCloudAuthorStoreID(v78);
      std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<long long>,std::allocator<mlcore::ComparisonPredicate<long long>>,mlcore::ModelProperty<long long> *&,mlcore::ComparisonOperator,long long const&,void>((uint64_t *)__p);
      v79 = *(_OWORD *)__p;
      v173[0] = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v80 = v166.i64[1];
      if (v166.i64[1] >= v167[0])
      {
        v138 = v79;
        v82 = (v166.i64[1] - v166.i64[0]) >> 4;
        if ((unint64_t)(v82 + 1) >> 60)
          std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
        v83 = (v167[0] - v166.i64[0]) >> 3;
        if (v83 <= v82 + 1)
          v83 = v82 + 1;
        if (v167[0] - v166.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
          v84 = 0xFFFFFFFFFFFFFFFLL;
        else
          v84 = v83;
        v171 = v167;
        v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v84);
        v87 = &v85[16 * v82];
        *(_OWORD *)v87 = v138;
        v173[0] = 0uLL;
        v88 = (_QWORD *)v166.i64[1];
        v89 = v166.i64[0];
        if (v166.i64[1] == v166.i64[0])
        {
          v92 = vdupq_n_s64(v166.u64[1]);
          v90 = (uint64_t)&v85[16 * v82];
        }
        else
        {
          v90 = (uint64_t)&v85[16 * v82];
          do
          {
            v91 = *((_OWORD *)v88 - 1);
            v88 -= 2;
            *(_OWORD *)(v90 - 16) = v91;
            v90 -= 16;
            *v88 = 0;
            v88[1] = 0;
          }
          while (v88 != (_QWORD *)v89);
          v92 = v166;
        }
        v81 = (uint64_t)(v87 + 16);
        v166.i64[0] = v90;
        v166.i64[1] = (uint64_t)(v87 + 16);
        v169 = v92;
        v93 = v167[0];
        v167[0] = &v85[16 * v86];
        v170 = v93;
        v168 = (int64x2_t *)v92.i64[0];
        std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v168);
      }
      else
      {
        *(_OWORD *)v166.i64[1] = v79;
        v81 = v80 + 16;
        v173[0] = 0uLL;
      }
      v166.i64[1] = v81;
    }
  }
  if (v70)
  {
    objc_msgSend(v70, "identifiers");
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v94, "library");
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v95, "persistentID");

    std::allocate_shared[abi:ne180100]<mlcore::Playlist,std::allocator<mlcore::Playlist>,long long &,void>((uint64_t *)&v168);
    v150 = (void **)v168;
    v151 = (std::__shared_weak_count *)v169.i64[0];
    if (v169.i64[0])
    {
      v96 = (unint64_t *)(v169.i64[0] + 8);
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    memset(v148, 0, sizeof(v148));
    std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v148, v166.i64[0], (_QWORD *)v166.i64[1], (v166.i64[1] - v166.i64[0]) >> 4);
    mlcore::CreateAndPredicate();
    mlcore::EntityQuery::playlistsForFolderQuery();
    v98 = v149;
    if (v149)
    {
      v99 = (unint64_t *)&v149->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    *(_QWORD *)&v173[0] = v148;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)v173);
    v101 = v151;
    if (v151)
    {
      v102 = (unint64_t *)&v151->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v104 = (std::__shared_weak_count *)v169.i64[0];
    if (v169.i64[0])
    {
      v105 = (unint64_t *)(v169.i64[0] + 8);
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    goto LABEL_146;
  }
LABEL_108:
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v107 = v7;
  else
    v107 = 0;
  v108 = v107;
  v109 = (mlcore *)objc_msgSend(v108, "variants");
  if ((v109 & 8) == 0)
  {
    mlcore::PlaylistPropertySmartIsFolder(v109);
    std::allocate_shared[abi:ne180100]<mlcore::UnaryPredicate<int>,std::allocator<mlcore::UnaryPredicate<int>>,mlcore::ModelProperty<int> *&,mlcore::UnaryOperator,void>((uint64_t *)__p);
    v110 = *(_OWORD *)__p;
    v173[0] = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v111 = (_OWORD *)v166.i64[1];
    if (v166.i64[1] >= v167[0])
    {
      v140 = v110;
      v112 = (v166.i64[1] - v166.i64[0]) >> 4;
      if ((unint64_t)(v112 + 1) >> 60)
        std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
      v113 = (v167[0] - v166.i64[0]) >> 3;
      if (v113 <= v112 + 1)
        v113 = v112 + 1;
      if (v167[0] - v166.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
        v114 = 0xFFFFFFFFFFFFFFFLL;
      else
        v114 = v113;
      v171 = v167;
      v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v114);
      v117 = &v115[16 * v112];
      *(_OWORD *)v117 = v140;
      v173[0] = 0uLL;
      v118 = (_QWORD *)v166.i64[1];
      v119 = v166.i64[0];
      if (v166.i64[1] != v166.i64[0])
      {
        v120 = (uint64_t)&v115[16 * v112];
        do
        {
          v121 = *((_OWORD *)v118 - 1);
          v118 -= 2;
          *(_OWORD *)(v120 - 16) = v121;
          v120 -= 16;
          *v118 = 0;
          v118[1] = 0;
        }
        while (v118 != (_QWORD *)v119);
        goto LABEL_136;
      }
LABEL_137:
      v131 = vdupq_n_s64((unint64_t)v118);
      v120 = (uint64_t)v117;
      goto LABEL_138;
    }
LABEL_126:
    *v111 = v110;
    v125 = v111 + 1;
    v173[0] = 0uLL;
    goto LABEL_139;
  }
  objc_msgSend(v145, "allowedEntityIdentifiers");
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  v123 = objc_msgSend(v122, "count") == 0;

  if (v123)
  {
    mlcore::PlaylistPropertyParentPersistentID(v124);
    *(_QWORD *)&v161 = 0;
    std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<long long>,std::allocator<mlcore::ComparisonPredicate<long long>>,mlcore::ModelProperty<long long> *&,mlcore::ComparisonOperator,long long const&,void>((uint64_t *)__p);
    v110 = *(_OWORD *)__p;
    v173[0] = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v111 = (_OWORD *)v166.i64[1];
    if (v166.i64[1] < v167[0])
      goto LABEL_126;
    v141 = v110;
    v126 = (v166.i64[1] - v166.i64[0]) >> 4;
    if ((unint64_t)(v126 + 1) >> 60)
      std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
    v127 = (v167[0] - v166.i64[0]) >> 3;
    if (v127 <= v126 + 1)
      v127 = v126 + 1;
    if (v167[0] - v166.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
      v128 = 0xFFFFFFFFFFFFFFFLL;
    else
      v128 = v127;
    v171 = v167;
    v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v128);
    v117 = &v115[16 * v126];
    *(_OWORD *)v117 = v141;
    v173[0] = 0uLL;
    v118 = (_QWORD *)v166.i64[1];
    v129 = v166.i64[0];
    if (v166.i64[1] == v166.i64[0])
      goto LABEL_137;
    v120 = (uint64_t)&v115[16 * v126];
    do
    {
      v130 = *((_OWORD *)v118 - 1);
      v118 -= 2;
      *(_OWORD *)(v120 - 16) = v130;
      v120 -= 16;
      *v118 = 0;
      v118[1] = 0;
    }
    while (v118 != (_QWORD *)v129);
LABEL_136:
    v131 = v166;
LABEL_138:
    v125 = v117 + 16;
    v166.i64[0] = v120;
    v166.i64[1] = (uint64_t)(v117 + 16);
    v169 = v131;
    v132 = v167[0];
    v167[0] = &v115[16 * v116];
    v170 = v132;
    v168 = (int64x2_t *)v131.i64[0];
    std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v168);
LABEL_139:
    v166.i64[1] = (uint64_t)v125;
  }
  else
  {
    v125 = (_QWORD *)v166.i64[1];
  }
  memset(v146, 0, sizeof(v146));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v146, v166.i64[0], v125, ((uint64_t)v125 - v166.i64[0]) >> 4);
  mlcore::CreateAndPredicate();
  mlcore::EntityQuery::playlistsQuery();
  v133 = v147;
  if (v147)
  {
    v134 = (unint64_t *)&v147->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v168 = (int64x2_t *)v146;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);

  v70 = 0;
LABEL_146:

  v168 = &v166;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);

}

void sub_193C4452C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *v63;
  void *v64;
  uint64_t v65;

  *(_QWORD *)(v65 - 160) = &a58;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v65 - 160));

  _Unwind_Resume(a1);
}

void ___ZL24_MPMLInitPropertySongMapv_block_invoke_5(uint64_t a1, void *a2, uint64_t *a3)
{
  void *v4;
  void *v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  mlcore *v13;
  mlcore *v14;
  mlcore *v15;
  mlcore *v16;
  mlcore *v17;
  mlcore *v18;
  mlcore *v19;
  uint64_t v20;
  void *v21;
  BOOL v22;
  id v23;
  mlcore *v24;
  uint64_t v25;
  mlcore *v26;
  uint64_t v27;
  _OWORD *v28;
  char v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  int64x2_t v47;
  uint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t i;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t j;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  void **v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t **v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t **v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t **v98;
  uint64_t *v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  _QWORD *v103;
  uint64_t **v104;
  uint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t **v110;
  uint64_t *v111;
  unint64_t v112;
  uint64_t *v113;
  _QWORD *v114;
  uint64_t **v115;
  uint64_t *v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t **v137;
  uint64_t *v138;
  uint64_t *v139;
  unint64_t v140;
  uint64_t *v141;
  _QWORD *v142;
  uint64_t *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t **v151;
  uint64_t *v152;
  unint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  id *v162;
  _OWORD *v163;
  const void *v164;
  __int128 v165;
  _OWORD *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  _QWORD *v173;
  _QWORD *v174;
  char *v175;
  __int128 v176;
  _OWORD *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  __int128 v182;
  int64x2_t v183;
  unint64_t v184;
  _QWORD *v185;
  _OWORD *v186;
  BOOL v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  int64x2_t v202;
  uint64_t v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  id *v208;
  id *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  void *v213;
  void *v214;
  void *v215;
  id v216;
  void *obj;
  id obja[2];
  id objb[2];
  _QWORD v220[3];
  std::__shared_weak_count *v221;
  _QWORD v222[3];
  __int128 v223;
  __int128 v224;
  void *__p[2];
  _BYTE *v226;
  uint64_t v227;
  int64x2_t v228;
  _QWORD v229[2];
  _OWORD v230[2];
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  _OWORD *v237;
  _OWORD *v238;
  _OWORD *v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  int64x2_t v242;
  unint64_t v243;
  int64x2_t *v244;
  int64x2_t v245;
  unint64_t v246;
  unint64_t *v247;
  _BYTE v248[128];
  __int128 v249;
  int64x2_t v250;
  uint64_t v251;

  v251 = *MEMORY[0x1E0C80C00];
  v242 = 0uLL;
  v243 = 0;
  v216 = a2;
  objc_msgSend(v216, "modelKind");
  v215 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v215, "identityKind");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[MPModelSongKind identityKind](MPModelSongKind, "identityKind");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "isEqual:", v5);

  if ((v6 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v213 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertySongMap()_block_invoke_5");
    v214 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v213, "handleFailureInFunction:file:lineNumber:description:", v214, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 281, CFSTR("Must have song kind to generate song entity query."));

  }
  v7 = (std::__shared_weak_count *)a3[1];
  v240 = *a3;
  v241 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  objc_msgSend(v215, "applyToView:withContext:", &v240, v216);
  v10 = v241;
  if (v241)
  {
    v11 = (unint64_t *)&v241->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  objc_msgSend(v216, "allowedEntityIdentifiers");
  v13 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v14 = (mlcore *)mlcore::ItemPropertyStoreID(v13);
  v15 = (mlcore *)mlcore::ItemPropertySubscriptionStoreItemID(v14);
  v16 = (mlcore *)mlcore::ItemPropertyPersistentID(v15);
  v17 = (mlcore *)mlcore::ItemPropertyStoreCloudID(v16);
  v18 = (mlcore *)mlcore::ItemPropertySyncID(v17);
  v19 = (mlcore *)mlcore::ItemPropertyStoreCloudUniversalLibraryID(v18);
  v20 = mlcore::ItemPropertyStoreCloudAlbumID(v19);
  _MPMLInsertPredicatesForIdentifierSet(&v242, v13, (uint64_t)v14, (uint64_t)v15, (uint64_t)v16, (uint64_t)v17, 0, (uint64_t)v18, (uint64_t)v19, v20);

  objc_msgSend(v216, "filterText");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "length") == 0;

  if (!v22)
  {
    objc_msgSend(v216, "filterText");
    v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v23, "UTF8String"));

    v25 = mlcore::ItemPropertyTitle(v24);
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *,std::string&,void>(v230, v25, (uint64_t)__p);
    v249 = v230[0];
    v230[0] = 0uLL;
    v27 = mlcore::ItemPropertyItemArtistName(v26);
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *,std::string&,void>(&v228, v27, (uint64_t)__p);
    v250 = v228;
    v228 = 0uLL;
    v238 = 0;
    v239 = 0;
    v237 = 0;
    v244 = (int64x2_t *)&v237;
    v245.i8[0] = 0;
    v28 = operator new(0x20uLL);
    v29 = 0;
    v30 = 0;
    v237 = v28;
    v238 = v28;
    v239 = v28 + 2;
    do
    {
      v31 = v29;
      v32 = *(&v249 + v30);
      *v28 = v32;
      if (*((_QWORD *)&v32 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      ++v28;
      v29 = 1;
      v30 = 1;
    }
    while ((v31 & 1) == 0);
    v238 = v28;
    mlcore::CreateOrPredicate();
    v35 = v242.i64[1];
    if (v242.i64[1] >= v243)
    {
      v36 = (v242.i64[1] - v242.i64[0]) >> 4;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 60)
        std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
      v38 = v243 - v242.i64[0];
      if ((uint64_t)(v243 - v242.i64[0]) >> 3 > v37)
        v37 = v38 >> 3;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
        v39 = 0xFFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      v247 = &v243;
      v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v39);
      v42 = &v40[16 * v36];
      *(_OWORD *)v42 = v235;
      v235 = 0uLL;
      v43 = (_QWORD *)v242.i64[1];
      v44 = v242.i64[0];
      if (v242.i64[1] == v242.i64[0])
      {
        v47 = vdupq_n_s64(v242.u64[1]);
        v45 = (uint64_t)&v40[16 * v36];
      }
      else
      {
        v45 = (uint64_t)&v40[16 * v36];
        do
        {
          v46 = *((_OWORD *)v43 - 1);
          v43 -= 2;
          *(_OWORD *)(v45 - 16) = v46;
          v45 -= 16;
          *v43 = 0;
          v43[1] = 0;
        }
        while (v43 != (_QWORD *)v44);
        v47 = v242;
      }
      v48 = (uint64_t)(v42 + 16);
      v242.i64[0] = v45;
      v242.i64[1] = (uint64_t)(v42 + 16);
      v245 = v47;
      v49 = v243;
      v243 = (unint64_t)&v40[16 * v41];
      v246 = v49;
      v244 = (int64x2_t *)v47.i64[0];
      std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v244);
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
      v242.i64[1] = v48;
      if (*((_QWORD *)&v235 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
    }
    else
    {
      *(_OWORD *)v242.i64[1] = v235;
      v235 = 0uLL;
      v242.i64[1] = v35 + 16;
    }
    v244 = (int64x2_t *)&v237;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v244);
    for (i = 16; i != -16; i -= 16)
      std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&v249 + i);
    v54 = (std::__shared_weak_count *)v228.i64[1];
    if (v228.i64[1])
    {
      v55 = (unint64_t *)(v228.i64[1] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = (std::__shared_weak_count *)*((_QWORD *)&v230[0] + 1);
    if (*((_QWORD *)&v230[0] + 1))
    {
      v58 = (unint64_t *)(*((_QWORD *)&v230[0] + 1) + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    if (SHIBYTE(v226) < 0)
      operator delete(__p[0]);
  }
  *((_QWORD *)&v235 + 1) = 0;
  v236 = 0;
  *(_QWORD *)&v235 = (char *)&v235 + 8;
  v231 = 0u;
  v232 = 0u;
  v233 = 0u;
  v234 = 0u;
  objc_msgSend(v216, "scopedContainers");
  obj = (void *)objc_claimAutoreleasedReturnValue();
  v60 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v231, v248, 16);
  if (v60)
  {
    v61 = *(_QWORD *)v232;
    do
    {
      for (j = 0; j != v60; ++j)
      {
        if (*(_QWORD *)v232 != v61)
          objc_enumerationMutation(obj);
        objc_msgSend(*(id *)(*((_QWORD *)&v231 + 1) + 8 * j), "identifiers");
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v63, "library");
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        v65 = objc_msgSend(v64, "persistentID");

        objc_msgSend(v63, "universalStore");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        v67 = objc_msgSend(v66, "adamID");

        objc_msgSend(v63, "universalStore");
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        v69 = objc_msgSend(v68, "subscriptionAdamID");

        objc_msgSend(v63, "library");
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        v71 = objc_msgSend(v70, "syncID");

        v72 = (void **)objc_opt_class();
        v244 = (int64x2_t *)v72;
        if (v72 == (void **)objc_opt_class())
        {
          if (v65)
          {
            v74 = std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::__emplace_unique_key_args<objc_class * {__strong},std::piecewise_construct_t const&,std::tuple<objc_class * const {__strong}&>,std::tuple<>>((uint64_t **)&v235, (unint64_t)v72, (id *)&v244);
            *(_QWORD *)&v249 = mlcore::ItemPropertyAlbumPersistentID((mlcore *)v74);
            v75 = std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> *&&>,std::tuple<>>(v74 + 5, v249, (uint64_t *)&v249);
            v76 = v75;
            v78 = (uint64_t *)v75[6];
            v77 = v75[7];
            if ((unint64_t)v78 >= v77)
            {
              v79 = (uint64_t *)v75[5];
              v80 = v78 - v79;
              v81 = v80 + 1;
              if ((unint64_t)(v80 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v82 = v77 - (_QWORD)v79;
              if (v82 >> 2 > v81)
                v81 = v82 >> 2;
              v83 = (unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8;
              v84 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v83)
                v84 = v81;
              if (v84)
              {
                v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v84);
                v79 = (uint64_t *)v76[5];
                v78 = (uint64_t *)v76[6];
              }
              else
              {
                v85 = 0;
              }
              v125 = (uint64_t *)(v84 + 8 * v80);
              *v125 = v65;
              v118 = v125 + 1;
              while (v78 != v79)
              {
                v126 = *--v78;
                *--v125 = v126;
              }
              goto LABEL_189;
            }
            goto LABEL_104;
          }
          if (v71)
          {
            v98 = std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::__emplace_unique_key_args<objc_class * {__strong},std::piecewise_construct_t const&,std::tuple<objc_class * const {__strong}&>,std::tuple<>>((uint64_t **)&v235, (unint64_t)v72, (id *)&v244);
            *(_QWORD *)&v249 = mlcore::ItemPropertyAlbumSyncID((mlcore *)v98);
            v99 = std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> *&&>,std::tuple<>>(v98 + 5, v249, (uint64_t *)&v249);
            v100 = v99;
            v102 = (uint64_t *)v99[6];
            v101 = v99[7];
            if ((unint64_t)v102 >= v101)
            {
              v119 = (uint64_t *)v99[5];
              v120 = v102 - v119;
              v121 = v120 + 1;
              if ((unint64_t)(v120 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v122 = v101 - (_QWORD)v119;
              if (v122 >> 2 > v121)
                v121 = v122 >> 2;
              v83 = (unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8;
              v123 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v83)
                v123 = v121;
              if (v123)
              {
                v123 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v123);
                v119 = (uint64_t *)v100[5];
                v102 = (uint64_t *)v100[6];
              }
              else
              {
                v124 = 0;
              }
              v135 = (uint64_t *)(v123 + 8 * v120);
              *v135 = v71;
              v103 = v135 + 1;
              while (v102 != v119)
              {
                v136 = *--v102;
                *--v135 = v136;
              }
              v100[5] = (uint64_t)v135;
              v100[6] = (uint64_t)v103;
              v100[7] = v123 + 8 * v124;
              if (v119)
                operator delete(v119);
            }
            else
            {
              *v102 = v71;
              v103 = v102 + 1;
            }
            v100[6] = (uint64_t)v103;
          }
          if (v67)
          {
            v137 = std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::__emplace_unique_key_args<objc_class * {__strong},std::piecewise_construct_t const&,std::tuple<objc_class * const {__strong}&>,std::tuple<>>((uint64_t **)&v235, (unint64_t)v244, (id *)&v244);
            *(_QWORD *)&v249 = mlcore::ItemPropertyStorePlaylistID((mlcore *)v137);
            v138 = std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> *&&>,std::tuple<>>(v137 + 5, v249, (uint64_t *)&v249);
            v139 = v138;
            v141 = (uint64_t *)v138[6];
            v140 = v138[7];
            if ((unint64_t)v141 >= v140)
            {
              v143 = (uint64_t *)v138[5];
              v144 = v141 - v143;
              v145 = v144 + 1;
              if ((unint64_t)(v144 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v146 = v140 - (_QWORD)v143;
              if (v146 >> 2 > v145)
                v145 = v146 >> 2;
              v83 = (unint64_t)v146 >= 0x7FFFFFFFFFFFFFF8;
              v147 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v83)
                v147 = v145;
              if (v147)
              {
                v147 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v147);
                v143 = (uint64_t *)v139[5];
                v141 = (uint64_t *)v139[6];
              }
              else
              {
                v148 = 0;
              }
              v149 = (uint64_t *)(v147 + 8 * v144);
              *v149 = v67;
              v142 = v149 + 1;
              while (v141 != v143)
              {
                v150 = *--v141;
                *--v149 = v150;
              }
              v139[5] = (uint64_t)v149;
              v139[6] = (uint64_t)v142;
              v139[7] = v147 + 8 * v148;
              if (v143)
                operator delete(v143);
            }
            else
            {
              *v141 = v67;
              v142 = v141 + 1;
            }
            v139[6] = (uint64_t)v142;
          }
          if (v69)
          {
            v151 = std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::__emplace_unique_key_args<objc_class * {__strong},std::piecewise_construct_t const&,std::tuple<objc_class * const {__strong}&>,std::tuple<>>((uint64_t **)&v235, (unint64_t)v244, (id *)&v244);
            *(_QWORD *)&v249 = mlcore::ItemPropertyStorePlaylistID((mlcore *)v151);
            v152 = std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> *&&>,std::tuple<>>(v151 + 5, v249, (uint64_t *)&v249);
            v76 = v152;
            v154 = (uint64_t *)v152[6];
            v153 = v152[7];
            if ((unint64_t)v154 < v153)
            {
              *v154 = v69;
              v114 = v154 + 1;
LABEL_105:
              v118 = v114;
LABEL_191:
              v76[6] = (uint64_t)v118;
              goto LABEL_192;
            }
            v79 = (uint64_t *)v152[5];
            v155 = v154 - v79;
            v156 = v155 + 1;
            if ((unint64_t)(v155 + 1) >> 61)
              std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
            v157 = v153 - (_QWORD)v79;
            if (v157 >> 2 > v156)
              v156 = v157 >> 2;
            v83 = (unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8;
            v84 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v83)
              v84 = v156;
            if (v84)
            {
              v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v84);
              v79 = (uint64_t *)v76[5];
              v154 = (uint64_t *)v76[6];
            }
            else
            {
              v85 = 0;
            }
            v125 = (uint64_t *)(v84 + 8 * v155);
            *v125 = v69;
            v118 = v125 + 1;
            while (v154 != v79)
            {
              v158 = *--v154;
              *--v125 = v158;
            }
LABEL_189:
            v76[5] = (uint64_t)v125;
            v76[6] = (uint64_t)v118;
            v76[7] = v84 + 8 * v85;
            if (v79)
              operator delete(v79);
            goto LABEL_191;
          }
        }
        else
        {
          if (v72 == (void **)objc_opt_class())
          {
            if (!v65)
            {
              if (!v67)
                goto LABEL_192;
              v110 = std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::__emplace_unique_key_args<objc_class * {__strong},std::piecewise_construct_t const&,std::tuple<objc_class * const {__strong}&>,std::tuple<>>((uint64_t **)&v235, (unint64_t)v72, (id *)&v244);
              *(_QWORD *)&v249 = mlcore::ItemPropertyArtistStoreID((mlcore *)v110);
              v111 = std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> *&&>,std::tuple<>>(v110 + 5, v249, (uint64_t *)&v249);
              v76 = v111;
              v113 = (uint64_t *)v111[6];
              v112 = v111[7];
              if ((unint64_t)v113 < v112)
              {
                *v113 = v67;
                v114 = v113 + 1;
                goto LABEL_105;
              }
              v79 = (uint64_t *)v111[5];
              v130 = v113 - v79;
              v131 = v130 + 1;
              if ((unint64_t)(v130 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v132 = v112 - (_QWORD)v79;
              if (v132 >> 2 > v131)
                v131 = v132 >> 2;
              v83 = (unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8;
              v84 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v83)
                v84 = v131;
              if (v84)
              {
                v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v84);
                v79 = (uint64_t *)v76[5];
                v113 = (uint64_t *)v76[6];
              }
              else
              {
                v85 = 0;
              }
              v125 = (uint64_t *)(v84 + 8 * v130);
              *v125 = v67;
              v118 = v125 + 1;
              while (v113 != v79)
              {
                v161 = *--v113;
                *--v125 = v161;
              }
              goto LABEL_189;
            }
            v86 = std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::__emplace_unique_key_args<objc_class * {__strong},std::piecewise_construct_t const&,std::tuple<objc_class * const {__strong}&>,std::tuple<>>((uint64_t **)&v235, (unint64_t)v72, (id *)&v244);
            *(_QWORD *)&v249 = mlcore::ItemPropertyAlbumArtistPersistentID((mlcore *)v86);
            v87 = std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> *&&>,std::tuple<>>(v86 + 5, v249, (uint64_t *)&v249);
            v76 = v87;
            v78 = (uint64_t *)v87[6];
            v88 = v87[7];
            if ((unint64_t)v78 >= v88)
            {
              v79 = (uint64_t *)v87[5];
              v89 = v78 - v79;
              v90 = v89 + 1;
              if ((unint64_t)(v89 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v91 = v88 - (_QWORD)v79;
              if (v91 >> 2 > v90)
                v90 = v91 >> 2;
              v83 = (unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8;
              v84 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v83)
                v84 = v90;
              if (v84)
              {
                v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v84);
                v79 = (uint64_t *)v76[5];
                v78 = (uint64_t *)v76[6];
              }
              else
              {
                v85 = 0;
              }
              v125 = (uint64_t *)(v84 + 8 * v89);
              *v125 = v65;
              v118 = v125 + 1;
              while (v78 != v79)
              {
                v133 = *--v78;
                *--v125 = v133;
              }
              goto LABEL_189;
            }
            goto LABEL_104;
          }
          if (v72 == (void **)objc_opt_class())
          {
            if (!v65)
              goto LABEL_192;
            v92 = std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::__emplace_unique_key_args<objc_class * {__strong},std::piecewise_construct_t const&,std::tuple<objc_class * const {__strong}&>,std::tuple<>>((uint64_t **)&v235, (unint64_t)v72, (id *)&v244);
            *(_QWORD *)&v249 = mlcore::ItemPropertyItemArtistPersistentID((mlcore *)v92);
            v93 = std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> *&&>,std::tuple<>>(v92 + 5, v249, (uint64_t *)&v249);
            v76 = v93;
            v78 = (uint64_t *)v93[6];
            v94 = v93[7];
            if ((unint64_t)v78 >= v94)
            {
              v79 = (uint64_t *)v93[5];
              v95 = v78 - v79;
              v96 = v95 + 1;
              if ((unint64_t)(v95 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v97 = v94 - (_QWORD)v79;
              if (v97 >> 2 > v96)
                v96 = v97 >> 2;
              v83 = (unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8;
              v84 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v83)
                v84 = v96;
              if (v84)
              {
                v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v84);
                v79 = (uint64_t *)v76[5];
                v78 = (uint64_t *)v76[6];
              }
              else
              {
                v85 = 0;
              }
              v125 = (uint64_t *)(v84 + 8 * v95);
              *v125 = v65;
              v118 = v125 + 1;
              while (v78 != v79)
              {
                v134 = *--v78;
                *--v125 = v134;
              }
              goto LABEL_189;
            }
            goto LABEL_104;
          }
          if (v72 == (void **)objc_opt_class())
          {
            if (!v65)
              goto LABEL_192;
            v104 = std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::__emplace_unique_key_args<objc_class * {__strong},std::piecewise_construct_t const&,std::tuple<objc_class * const {__strong}&>,std::tuple<>>((uint64_t **)&v235, (unint64_t)v72, (id *)&v244);
            *(_QWORD *)&v249 = mlcore::ItemPropertyGenrePersistentID((mlcore *)v104);
            v105 = std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> *&&>,std::tuple<>>(v104 + 5, v249, (uint64_t *)&v249);
            v76 = v105;
            v78 = (uint64_t *)v105[6];
            v106 = v105[7];
            if ((unint64_t)v78 >= v106)
            {
              v79 = (uint64_t *)v105[5];
              v107 = v78 - v79;
              v108 = v107 + 1;
              if ((unint64_t)(v107 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v109 = v106 - (_QWORD)v79;
              if (v109 >> 2 > v108)
                v108 = v109 >> 2;
              v83 = (unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8;
              v84 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v83)
                v84 = v108;
              if (v84)
              {
                v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v84);
                v79 = (uint64_t *)v76[5];
                v78 = (uint64_t *)v76[6];
              }
              else
              {
                v85 = 0;
              }
              v125 = (uint64_t *)(v84 + 8 * v107);
              *v125 = v65;
              v118 = v125 + 1;
              while (v78 != v79)
              {
                v159 = *--v78;
                *--v125 = v159;
              }
              goto LABEL_189;
            }
            goto LABEL_104;
          }
          if (v72 == (void **)objc_opt_class())
          {
            v115 = std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::__emplace_unique_key_args<objc_class * {__strong},std::piecewise_construct_t const&,std::tuple<objc_class * const {__strong}&>,std::tuple<>>((uint64_t **)&v235, (unint64_t)v72, (id *)&v244);
            *(_QWORD *)&v249 = mlcore::ItemPropertyComposerPersistentID((mlcore *)v115);
            v116 = std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> *&&>,std::tuple<>>(v115 + 5, v249, (uint64_t *)&v249);
            v76 = v116;
            v78 = (uint64_t *)v116[6];
            v117 = v116[7];
            if ((unint64_t)v78 >= v117)
            {
              v79 = (uint64_t *)v116[5];
              v127 = v78 - v79;
              v128 = v127 + 1;
              if ((unint64_t)(v127 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v129 = v117 - (_QWORD)v79;
              if (v129 >> 2 > v128)
                v128 = v129 >> 2;
              v83 = (unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8;
              v84 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v83)
                v84 = v128;
              if (v84)
              {
                v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v84);
                v79 = (uint64_t *)v76[5];
                v78 = (uint64_t *)v76[6];
              }
              else
              {
                v85 = 0;
              }
              v125 = (uint64_t *)(v84 + 8 * v127);
              *v125 = v65;
              v118 = v125 + 1;
              while (v78 != v79)
              {
                v160 = *--v78;
                *--v125 = v160;
              }
              goto LABEL_189;
            }
LABEL_104:
            *v78 = v65;
            v114 = v78 + 1;
            goto LABEL_105;
          }
          v73 = objc_opt_class();
          if (v73 == objc_opt_class())
            __assert_rtn("_MPMLInitPropertySongMap_block_invoke_5", "MPMediaLibraryTranslatorSchema.mm", 343, "0");
        }
LABEL_192:

      }
      v60 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v231, v248, 16);
    }
    while (v60);
  }

  v162 = (id *)v235;
  if ((__int128 *)v235 != (__int128 *)((char *)&v235 + 8))
  {
    while (1)
    {
      std::pair<objc_class * const {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long>>,std::vector<std::pair<mlcore::ModelProperty<long long> const,std::allocator<long long>>>>>::pair[abi:ne180100](&v249, v162 + 4);
      std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>::map[abi:ne180100]((uint64_t)v230, (_QWORD *)&v249 + 1);
      v228 = 0uLL;
      v229[0] = 0;
      v163 = *(_OWORD **)&v230[0];
      if (*(_OWORD **)&v230[0] != (_OWORD *)((char *)v230 + 8))
        break;
      v189 = 0;
      v188 = 0;
LABEL_232:
      memset(v222, 0, sizeof(v222));
      std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v222, v188, v189, (v189 - v188) >> 4);
      mlcore::CreateOrPredicate();
      v190 = v242.i64[1];
      if (v242.i64[1] >= v243)
      {
        v191 = (v242.i64[1] - v242.i64[0]) >> 4;
        v192 = v191 + 1;
        if ((unint64_t)(v191 + 1) >> 60)
          std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
        v193 = v243 - v242.i64[0];
        if ((uint64_t)(v243 - v242.i64[0]) >> 3 > v192)
          v192 = v193 >> 3;
        if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFF0)
          v194 = 0xFFFFFFFFFFFFFFFLL;
        else
          v194 = v192;
        v247 = &v243;
        v195 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v194);
        v197 = &v195[16 * v191];
        *(_OWORD *)v197 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        v198 = (_QWORD *)v242.i64[1];
        v199 = v242.i64[0];
        if (v242.i64[1] == v242.i64[0])
        {
          v202 = vdupq_n_s64(v242.u64[1]);
          v200 = (uint64_t)&v195[16 * v191];
        }
        else
        {
          v200 = (uint64_t)&v195[16 * v191];
          do
          {
            v201 = *((_OWORD *)v198 - 1);
            v198 -= 2;
            *(_OWORD *)(v200 - 16) = v201;
            v200 -= 16;
            *v198 = 0;
            v198[1] = 0;
          }
          while (v198 != (_QWORD *)v199);
          v202 = v242;
        }
        v203 = (uint64_t)(v197 + 16);
        v242.i64[0] = v200;
        v242.i64[1] = (uint64_t)(v197 + 16);
        v245 = v202;
        v204 = v243;
        v243 = (unint64_t)&v195[16 * v196];
        v246 = v204;
        v244 = (int64x2_t *)v202.i64[0];
        std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v244);
        v205 = (std::__shared_weak_count *)__p[1];
        v242.i64[1] = v203;
        if (__p[1])
        {
          v206 = (unint64_t *)((char *)__p[1] + 8);
          do
            v207 = __ldaxr(v206);
          while (__stlxr(v207 - 1, v206));
          if (!v207)
          {
            ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
            std::__shared_weak_count::__release_weak(v205);
          }
        }
      }
      else
      {
        *(_OWORD *)v242.i64[1] = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        v242.i64[1] = v190 + 16;
      }
      v244 = (int64x2_t *)v222;
      std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v244);
      v244 = &v228;
      std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v244);
      std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::destroy(*((_QWORD **)&v230[0] + 1));
      std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::destroy(v250.i64[0]);

      v208 = (id *)v162[1];
      if (v208)
      {
        do
        {
          v209 = v208;
          v208 = (id *)*v208;
        }
        while (v208);
      }
      else
      {
        do
        {
          v209 = (id *)v162[2];
          v187 = *v209 == v162;
          v162 = v209;
        }
        while (!v187);
      }
      v162 = v209;
      if (v209 == (id *)((char *)&v235 + 8))
        goto LABEL_256;
    }
    while (1)
    {
      v164 = (const void *)*((_QWORD *)v163 + 5);
      __p[0] = *((void **)v163 + 4);
      v226 = 0;
      v227 = 0;
      __p[1] = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&__p[1], v164, *((_QWORD *)v163 + 6), (uint64_t)(*((_QWORD *)v163 + 6) - (_QWORD)v164) >> 3);
      if ((_BYTE *)(v226 - (char *)__p[1]) == (_BYTE *)8)
      {
        std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<long long>,std::allocator<mlcore::ComparisonPredicate<long long>>,mlcore::ModelProperty<long long> *&,mlcore::ComparisonOperator,long long const&,void>((uint64_t *)&v223);
        v165 = v223;
        v224 = v223;
        v223 = 0uLL;
        v166 = (_OWORD *)v228.i64[1];
        if (v228.i64[1] >= v229[0])
        {
          *(_OWORD *)obja = v165;
          v167 = (v228.i64[1] - v228.i64[0]) >> 4;
          if ((unint64_t)(v167 + 1) >> 60)
            std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
          v168 = (v229[0] - v228.i64[0]) >> 3;
          if (v168 <= v167 + 1)
            v168 = v167 + 1;
          if (v229[0] - v228.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
            v169 = 0xFFFFFFFFFFFFFFFLL;
          else
            v169 = v168;
          v247 = v229;
          v170 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v169);
          v172 = &v170[16 * v167];
          *(_OWORD *)v172 = *(_OWORD *)obja;
          v224 = 0uLL;
          v173 = (_QWORD *)v228.i64[1];
          v174 = (_QWORD *)v228.i64[0];
          if (v228.i64[1] != v228.i64[0])
          {
            v175 = &v170[16 * v167];
            do
            {
              v176 = *((_OWORD *)v173 - 1);
              v173 -= 2;
              *((_OWORD *)v175 - 1) = v176;
              v175 -= 16;
              *v173 = 0;
              v173[1] = 0;
            }
            while (v173 != v174);
            goto LABEL_219;
          }
          goto LABEL_220;
        }
      }
      else
      {
        std::allocate_shared[abi:ne180100]<mlcore::InPredicate<long long>,std::allocator<mlcore::InPredicate<long long>>,mlcore::ModelProperty<long long> *&,std::vector<long long> const&,void>((uint64_t *)&v223);
        v165 = v223;
        v224 = v223;
        v223 = 0uLL;
        v166 = (_OWORD *)v228.i64[1];
        if (v228.i64[1] >= v229[0])
        {
          *(_OWORD *)objb = v165;
          v178 = (v228.i64[1] - v228.i64[0]) >> 4;
          if ((unint64_t)(v178 + 1) >> 60)
            std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
          v179 = (v229[0] - v228.i64[0]) >> 3;
          if (v179 <= v178 + 1)
            v179 = v178 + 1;
          if (v229[0] - v228.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
            v180 = 0xFFFFFFFFFFFFFFFLL;
          else
            v180 = v179;
          v247 = v229;
          v170 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v180);
          v172 = &v170[16 * v178];
          *(_OWORD *)v172 = *(_OWORD *)objb;
          v224 = 0uLL;
          v173 = (_QWORD *)v228.i64[1];
          v181 = (_QWORD *)v228.i64[0];
          if (v228.i64[1] != v228.i64[0])
          {
            v175 = &v170[16 * v178];
            do
            {
              v182 = *((_OWORD *)v173 - 1);
              v173 -= 2;
              *((_OWORD *)v175 - 1) = v182;
              v175 -= 16;
              *v173 = 0;
              v173[1] = 0;
            }
            while (v173 != v181);
LABEL_219:
            v183 = v228;
LABEL_221:
            v177 = v172 + 16;
            v228.i64[0] = (uint64_t)v175;
            v228.i64[1] = (uint64_t)(v172 + 16);
            v245 = v183;
            v184 = v229[0];
            v229[0] = &v170[16 * v171];
            v246 = v184;
            v244 = (int64x2_t *)v183.i64[0];
            std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v244);
            goto LABEL_222;
          }
LABEL_220:
          v183 = vdupq_n_s64((unint64_t)v173);
          v175 = v172;
          goto LABEL_221;
        }
      }
      *v166 = v165;
      v177 = v166 + 1;
      v224 = 0uLL;
LABEL_222:
      v228.i64[1] = (uint64_t)v177;
      if (__p[1])
      {
        v226 = __p[1];
        operator delete(__p[1]);
      }
      v185 = (_QWORD *)*((_QWORD *)v163 + 1);
      if (v185)
      {
        do
        {
          v186 = v185;
          v185 = (_QWORD *)*v185;
        }
        while (v185);
      }
      else
      {
        do
        {
          v186 = (_OWORD *)*((_QWORD *)v163 + 2);
          v187 = *(_QWORD *)v186 == (_QWORD)v163;
          v163 = v186;
        }
        while (!v187);
      }
      v163 = v186;
      if (v186 == (_OWORD *)((char *)v230 + 8))
      {
        v189 = (char *)v228.i64[1];
        v188 = (char *)v228.i64[0];
        goto LABEL_232;
      }
    }
  }
LABEL_256:
  memset(v220, 0, sizeof(v220));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v220, v242.i64[0], (_QWORD *)v242.i64[1], (v242.i64[1] - v242.i64[0]) >> 4);
  mlcore::CreateAndPredicate();
  mlcore::EntityQuery::songsQuery();
  v210 = v221;
  if (v221)
  {
    v211 = (unint64_t *)&v221->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v244 = (int64x2_t *)v220;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v244);
  std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::destroy(*((_QWORD **)&v235 + 1));

  v244 = &v242;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v244);

}

void sub_193C45AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,void *a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *v63;
  void *v64;
  uint64_t v65;

  *(_QWORD *)(v65 - 144) = &a60;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v65 - 144));

  _Unwind_Resume(a1);
}

void _MPMLInsertPredicatesForIdentifierSet(int64x2_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t i;
  void *v12;
  id v13;
  std::vector<std::string>::pointer end;
  __int128 v15;
  std::string *v16;
  std::vector<std::string>::pointer v17;
  __int128 v18;
  std::string *v19;
  std::vector<std::string>::pointer v20;
  __int128 v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  void *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  void *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  void *v113;
  void *v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t j;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  void *v153;
  void *v154;
  std::vector<std::string>::pointer v155;
  __int128 v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  std::string *v161;
  __int128 v162;
  std::string *v163;
  void *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  void *v176;
  void *v177;
  std::vector<std::string>::pointer v178;
  __int128 v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  std::string *v184;
  __int128 v185;
  std::string *v186;
  void *v187;
  void *v188;
  std::vector<std::string>::pointer v189;
  __int128 v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  std::string *v195;
  __int128 v196;
  std::string *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  void *v210;
  std::__shared_weak_count *v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  uint64_t v218;
  char *v219;
  _QWORD *v220;
  _QWORD *v221;
  char *v222;
  __int128 v223;
  int64x2_t v224;
  _OWORD *v225;
  std::string *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *p_shared_owners;
  unint64_t v232;
  void *v233;
  std::__shared_weak_count *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  uint64_t v241;
  char *v242;
  _QWORD *v243;
  _QWORD *v244;
  char *v245;
  __int128 v246;
  int64x2_t v247;
  _OWORD *v248;
  std::string *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  void *v256;
  std::__shared_weak_count *v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char *v263;
  uint64_t v264;
  char *v265;
  _QWORD *v266;
  _QWORD *v267;
  char *v268;
  __int128 v269;
  int64x2_t v270;
  _OWORD *v271;
  std::string *v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  void *v279;
  std::__shared_weak_count *v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  char *v286;
  uint64_t v287;
  char *v288;
  _QWORD *v289;
  _QWORD *v290;
  char *v291;
  __int128 v292;
  int64x2_t v293;
  _OWORD *v294;
  std::string *v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  void *v302;
  std::__shared_weak_count *v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  char *v309;
  uint64_t v310;
  char *v311;
  _QWORD *v312;
  _QWORD *v313;
  char *v314;
  __int128 v315;
  int64x2_t v316;
  _OWORD *v317;
  std::string *v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  void *v325;
  std::__shared_weak_count *v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  char *v332;
  uint64_t v333;
  char *v334;
  _QWORD *v335;
  _QWORD *v336;
  char *v337;
  __int128 v338;
  int64x2_t v339;
  _OWORD *v340;
  std::string *v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  void *v348;
  std::__shared_weak_count *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  char *v355;
  uint64_t v356;
  char *v357;
  _QWORD *v358;
  _QWORD *v359;
  char *v360;
  __int128 v361;
  int64x2_t v362;
  _OWORD *v363;
  std::string *v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  void *v371;
  std::__shared_weak_count *v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  char *v378;
  uint64_t v379;
  char *v380;
  _QWORD *v381;
  _QWORD *v382;
  char *v383;
  __int128 v384;
  int64x2_t v385;
  _OWORD *v386;
  std::string *v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  unint64_t v394;
  _OWORD *v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  char *v400;
  uint64_t v401;
  char *v402;
  _QWORD *v403;
  _QWORD *v404;
  char *v405;
  __int128 v406;
  _QWORD *i64;
  int64x2_t v408;
  void *v409;
  std::__shared_weak_count *v410;
  uint64_t v411;
  _OWORD *v412;
  std::string *v413;
  std::__shared_weak_count *v414;
  unint64_t *v415;
  unint64_t v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t v420;
  char *v421;
  uint64_t v422;
  char *v423;
  _QWORD *v424;
  _QWORD *v425;
  char *v426;
  __int128 v427;
  int64x2_t v428;
  _OWORD *v429;
  std::string *v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  id v444;
  id obj;
  uint64_t v446;
  uint64_t v447;
  id v448;
  uint64_t *v449;
  uint64_t *v450;
  unint64_t v451;
  _QWORD v452[3];
  void *v453;
  std::__shared_weak_count *v454;
  void *v455[2];
  std::string::size_type v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  int64x2_t v465;
  std::string *v466;
  std::vector<std::string> v467;
  std::vector<std::string> v468;
  void *v469;
  uint64_t *v470;
  unint64_t v471;
  std::vector<std::string> v472;
  void *v473;
  uint64_t *v474;
  unint64_t v475;
  void *__p;
  uint64_t *v477;
  unint64_t v478;
  void *v479;
  uint64_t *v480;
  unint64_t v481;
  std::__split_buffer<std::string> __sz;
  _BYTE v483[128];
  _BYTE v484[128];
  uint64_t v485;

  v485 = *MEMORY[0x1E0C80C00];
  v444 = a2;
  if (objc_msgSend(v444, "count"))
  {
    v449 = 0;
    v450 = 0;
    v451 = 0;
    v480 = 0;
    v479 = 0;
    v481 = 0;
    v477 = 0;
    __p = 0;
    v478 = 0;
    v473 = 0;
    v474 = 0;
    v475 = 0;
    memset(&v472, 0, sizeof(v472));
    v469 = 0;
    v470 = 0;
    v471 = 0;
    memset(&v468, 0, sizeof(v468));
    memset(&v467, 0, sizeof(v467));
    v465 = 0uLL;
    v466 = 0;
    v463 = 0u;
    v464 = 0u;
    v461 = 0u;
    v462 = 0u;
    obj = v444;
    v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v461, v484, 16);
    if (v10)
    {
      v446 = *(_QWORD *)v462;
      do
      {
        v447 = v10;
        for (i = 0; i != v447; ++i)
        {
          if (*(_QWORD *)v462 != v446)
            objc_enumerationMutation(obj);
          v12 = *(void **)(*((_QWORD *)&v461 + 1) + 8 * i);
          objc_msgSend(v12, "opaqueID");
          v448 = (id)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v448, "length"))
          {
            v13 = objc_retainAutorelease(v448);
            std::string::basic_string[abi:ne180100]<0>(&__sz, (char *)objc_msgSend(v13, "UTF8String"));
            end = v472.__end_;
            if (v472.__end_ >= v472.__end_cap_.__value_)
            {
              v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v472, (__int128 *)&__sz);
            }
            else
            {
              if (SHIBYTE(__sz.__end_) < 0)
              {
                std::string::__init_copy_ctor_external(v472.__end_, (const std::string::value_type *)__sz.__first_, (std::string::size_type)__sz.__begin_);
              }
              else
              {
                v15 = *(_OWORD *)&__sz.__first_;
                v472.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)__sz.__end_;
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
              }
              v16 = end + 1;
            }
            v472.__end_ = v16;
            v17 = v468.__end_;
            if (v468.__end_ >= v468.__end_cap_.__value_)
            {
              v19 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v468, (__int128 *)&__sz);
            }
            else
            {
              if (SHIBYTE(__sz.__end_) < 0)
              {
                std::string::__init_copy_ctor_external(v468.__end_, (const std::string::value_type *)__sz.__first_, (std::string::size_type)__sz.__begin_);
              }
              else
              {
                v18 = *(_OWORD *)&__sz.__first_;
                v468.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)__sz.__end_;
                *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
              }
              v19 = v17 + 1;
            }
            v468.__end_ = v19;
            v20 = v467.__end_;
            if (v467.__end_ >= v467.__end_cap_.__value_)
            {
              v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v467, (__int128 *)&__sz);
            }
            else
            {
              if (SHIBYTE(__sz.__end_) < 0)
              {
                std::string::__init_copy_ctor_external(v467.__end_, (const std::string::value_type *)__sz.__first_, (std::string::size_type)__sz.__begin_);
              }
              else
              {
                v21 = *(_OWORD *)&__sz.__first_;
                v467.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)__sz.__end_;
                *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
              }
              v22 = v20 + 1;
            }
            v467.__end_ = v22;
            v23 = objc_msgSend(v13, "longLongValue");
            v24 = v23;
            if (v23)
            {
              v25 = v477;
              if ((unint64_t)v477 >= v478)
              {
                v27 = (uint64_t *)__p;
                v28 = ((char *)v477 - (_BYTE *)__p) >> 3;
                v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 61)
                  goto LABEL_563;
                v30 = v478 - (_QWORD)__p;
                if ((uint64_t)(v478 - (_QWORD)__p) >> 2 > v29)
                  v29 = v30 >> 2;
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
                  v31 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v31 = v29;
                if (v31)
                {
                  v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v31);
                  v25 = v477;
                  v27 = (uint64_t *)__p;
                }
                else
                {
                  v32 = 0;
                }
                v33 = (uint64_t *)(v31 + 8 * v28);
                *v33 = v24;
                v26 = v33 + 1;
                while (v25 != v27)
                {
                  v34 = *--v25;
                  *--v33 = v34;
                }
                __p = v33;
                v477 = v26;
                v478 = v31 + 8 * v32;
                if (v27)
                  operator delete(v27);
              }
              else
              {
                *v477 = v23;
                v26 = v25 + 1;
              }
              v477 = v26;
              v35 = v480;
              if ((unint64_t)v480 >= v481)
              {
                v37 = (uint64_t *)v479;
                v38 = ((char *)v480 - (_BYTE *)v479) >> 3;
                v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 61)
                  goto LABEL_563;
                v40 = v481 - (_QWORD)v479;
                if ((uint64_t)(v481 - (_QWORD)v479) >> 2 > v39)
                  v39 = v40 >> 2;
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
                  v41 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v41 = v39;
                if (v41)
                {
                  v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v41);
                  v35 = v480;
                  v37 = (uint64_t *)v479;
                }
                else
                {
                  v42 = 0;
                }
                v43 = (uint64_t *)(v41 + 8 * v38);
                *v43 = v24;
                v36 = v43 + 1;
                while (v35 != v37)
                {
                  v44 = *--v35;
                  *--v43 = v44;
                }
                v479 = v43;
                v480 = v36;
                v481 = v41 + 8 * v42;
                if (v37)
                  operator delete(v37);
              }
              else
              {
                *v480 = v24;
                v36 = v35 + 1;
              }
              v480 = v36;
              v45 = v450;
              if ((unint64_t)v450 >= v451)
              {
                v47 = v449;
                v48 = v450 - v449;
                v49 = v48 + 1;
                if ((unint64_t)(v48 + 1) >> 61)
                  goto LABEL_563;
                v50 = v451 - (_QWORD)v449;
                if ((uint64_t)(v451 - (_QWORD)v449) >> 2 > v49)
                  v49 = v50 >> 2;
                if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
                  v51 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v51 = v49;
                if (v51)
                {
                  v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v51);
                  v47 = v449;
                  v45 = v450;
                }
                else
                {
                  v52 = 0;
                }
                v53 = (uint64_t *)(v51 + 8 * v48);
                *v53 = v24;
                v46 = v53 + 1;
                while (v45 != v47)
                {
                  v54 = *--v45;
                  *--v53 = v54;
                }
                v449 = v53;
                v451 = v51 + 8 * v52;
                if (v47)
                  operator delete(v47);
              }
              else
              {
                *v450 = v24;
                v46 = v450 + 1;
              }
              v450 = v46;
              v55 = v474;
              if ((unint64_t)v474 >= v475)
              {
                v57 = (uint64_t *)v473;
                v58 = ((char *)v474 - (_BYTE *)v473) >> 3;
                v59 = v58 + 1;
                if ((unint64_t)(v58 + 1) >> 61)
                  goto LABEL_563;
                v60 = v475 - (_QWORD)v473;
                if ((uint64_t)(v475 - (_QWORD)v473) >> 2 > v59)
                  v59 = v60 >> 2;
                if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
                  v61 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v61 = v59;
                if (v61)
                {
                  v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v61);
                  v57 = (uint64_t *)v473;
                  v55 = v474;
                }
                else
                {
                  v62 = 0;
                }
                v63 = (uint64_t *)(v61 + 8 * v58);
                *v63 = v24;
                v56 = v63 + 1;
                while (v55 != v57)
                {
                  v64 = *--v55;
                  *--v63 = v64;
                }
                v473 = v63;
                v474 = v56;
                v475 = v61 + 8 * v62;
                if (v57)
                  operator delete(v57);
              }
              else
              {
                *v474 = v24;
                v56 = v55 + 1;
              }
              v474 = v56;
              v65 = v470;
              if ((unint64_t)v470 >= v471)
              {
                v67 = (uint64_t *)v469;
                v68 = ((char *)v470 - (_BYTE *)v469) >> 3;
                v69 = v68 + 1;
                if ((unint64_t)(v68 + 1) >> 61)
LABEL_563:
                  std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
                v70 = v471 - (_QWORD)v469;
                if ((uint64_t)(v471 - (_QWORD)v469) >> 2 > v69)
                  v69 = v70 >> 2;
                if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
                  v71 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v71 = v69;
                if (v71)
                {
                  v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v71);
                  v67 = (uint64_t *)v469;
                  v65 = v470;
                }
                else
                {
                  v72 = 0;
                }
                v73 = (uint64_t *)(v71 + 8 * v68);
                *v73 = v24;
                v66 = v73 + 1;
                while (v65 != v67)
                {
                  v74 = *--v65;
                  *--v73 = v74;
                }
                v469 = v73;
                v470 = v66;
                v471 = v71 + 8 * v72;
                if (v67)
                  operator delete(v67);
              }
              else
              {
                *v470 = v24;
                v66 = v65 + 1;
              }
              v470 = v66;
            }
            if (SHIBYTE(__sz.__end_) < 0)
              operator delete(__sz.__first_);
          }
          objc_msgSend(v12, "library");
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          v76 = objc_msgSend(v75, "persistentID");

          if (v76)
          {
            v77 = v477;
            if ((unint64_t)v477 >= v478)
            {
              v81 = (uint64_t *)__p;
              v82 = ((char *)v477 - (_BYTE *)__p) >> 3;
              v83 = v82 + 1;
              if ((unint64_t)(v82 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v84 = v478 - (_QWORD)__p;
              if ((uint64_t)(v478 - (_QWORD)__p) >> 2 > v83)
                v83 = v84 >> 2;
              if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
                v85 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v85 = v83;
              if (v85)
              {
                v85 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v85);
                v77 = v477;
                v81 = (uint64_t *)__p;
              }
              else
              {
                v86 = 0;
              }
              v96 = (uint64_t *)(v85 + 8 * v82);
              *v96 = v76;
              v78 = v96 + 1;
              while (v77 != v81)
              {
                v97 = *--v77;
                *--v96 = v97;
              }
              __p = v96;
              v477 = v78;
              v478 = v85 + 8 * v86;
              if (v81)
                operator delete(v81);
            }
            else
            {
              *v477 = v76;
              v78 = v77 + 1;
            }
            v477 = v78;
            goto LABEL_306;
          }
          objc_msgSend(v12, "universalStore");
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          v80 = objc_msgSend(v79, "subscriptionAdamID");
          if (v80)
          {

          }
          else
          {
            objc_msgSend(v12, "universalStore");
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            v80 = objc_msgSend(v87, "adamID");

            if (!v80)
              goto LABEL_148;
          }
          v88 = v480;
          if ((unint64_t)v480 >= v481)
          {
            v90 = (uint64_t *)v479;
            v91 = ((char *)v480 - (_BYTE *)v479) >> 3;
            v92 = v91 + 1;
            if ((unint64_t)(v91 + 1) >> 61)
              std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
            v93 = v481 - (_QWORD)v479;
            if ((uint64_t)(v481 - (_QWORD)v479) >> 2 > v92)
              v92 = v93 >> 2;
            if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
              v94 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v94 = v92;
            if (v94)
            {
              v94 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v94);
              v88 = v480;
              v90 = (uint64_t *)v479;
            }
            else
            {
              v95 = 0;
            }
            v98 = (uint64_t *)(v94 + 8 * v91);
            *v98 = v80;
            v89 = v98 + 1;
            while (v88 != v90)
            {
              v99 = *--v88;
              *--v98 = v99;
            }
            v479 = v98;
            v480 = v89;
            v481 = v94 + 8 * v95;
            if (v90)
              operator delete(v90);
          }
          else
          {
            *v480 = v80;
            v89 = v88 + 1;
          }
          v480 = v89;
LABEL_148:
          objc_msgSend(v12, "universalStore");
          v100 = (void *)objc_claimAutoreleasedReturnValue();
          v101 = objc_msgSend(v100, "purchasedAdamID");
          if (v101)
          {

LABEL_151:
            v103 = v450;
            if ((unint64_t)v450 >= v451)
            {
              v105 = v449;
              v106 = v450 - v449;
              v107 = v106 + 1;
              if ((unint64_t)(v106 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v108 = v451 - (_QWORD)v449;
              if ((uint64_t)(v451 - (_QWORD)v449) >> 2 > v107)
                v107 = v108 >> 2;
              if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
                v109 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v109 = v107;
              if (v109)
              {
                v109 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v109);
                v105 = v449;
                v103 = v450;
              }
              else
              {
                v110 = 0;
              }
              v111 = (uint64_t *)(v109 + 8 * v106);
              *v111 = v101;
              v104 = v111 + 1;
              while (v103 != v105)
              {
                v112 = *--v103;
                *--v111 = v112;
              }
              v449 = v111;
              v451 = v109 + 8 * v110;
              if (v105)
                operator delete(v105);
            }
            else
            {
              *v450 = v101;
              v104 = v450 + 1;
            }
            v450 = v104;
            goto LABEL_168;
          }
          objc_msgSend(v12, "universalStore");
          v102 = (void *)objc_claimAutoreleasedReturnValue();
          v101 = objc_msgSend(v102, "adamID");

          if (v101)
            goto LABEL_151;
LABEL_168:
          objc_msgSend(v12, "universalStore");
          v113 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v113, "formerAdamIDs");
          v114 = (void *)objc_claimAutoreleasedReturnValue();

          v459 = 0u;
          v460 = 0u;
          v457 = 0u;
          v458 = 0u;
          v115 = v114;
          v116 = objc_msgSend(v115, "countByEnumeratingWithState:objects:count:", &v457, v483, 16);
          if (v116)
          {
            v117 = *(_QWORD *)v458;
            do
            {
              for (j = 0; j != v116; ++j)
              {
                if (*(_QWORD *)v458 != v117)
                  objc_enumerationMutation(v115);
                v119 = objc_msgSend(*(id *)(*((_QWORD *)&v457 + 1) + 8 * j), "longLongValue");
                v120 = v119;
                if (v119)
                {
                  v121 = v450;
                  if ((unint64_t)v450 >= v451)
                  {
                    v123 = v449;
                    v124 = v450 - v449;
                    v125 = v124 + 1;
                    if ((unint64_t)(v124 + 1) >> 61)
                      goto LABEL_551;
                    v126 = v451 - (_QWORD)v449;
                    if ((uint64_t)(v451 - (_QWORD)v449) >> 2 > v125)
                      v125 = v126 >> 2;
                    if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8)
                      v127 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v127 = v125;
                    if (v127)
                    {
                      v127 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v127);
                      v123 = v449;
                      v121 = v450;
                    }
                    else
                    {
                      v128 = 0;
                    }
                    v129 = (uint64_t *)(v127 + 8 * v124);
                    *v129 = v120;
                    v122 = v129 + 1;
                    while (v121 != v123)
                    {
                      v130 = *--v121;
                      *--v129 = v130;
                    }
                    v449 = v129;
                    v451 = v127 + 8 * v128;
                    if (v123)
                      operator delete(v123);
                  }
                  else
                  {
                    *v450 = v119;
                    v122 = v450 + 1;
                  }
                  v450 = v122;
                  v131 = v480;
                  if ((unint64_t)v480 >= v481)
                  {
                    v133 = (uint64_t *)v479;
                    v134 = ((char *)v480 - (_BYTE *)v479) >> 3;
                    v135 = v134 + 1;
                    if ((unint64_t)(v134 + 1) >> 61)
LABEL_551:
                      std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
                    v136 = v481 - (_QWORD)v479;
                    if ((uint64_t)(v481 - (_QWORD)v479) >> 2 > v135)
                      v135 = v136 >> 2;
                    if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8)
                      v137 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v137 = v135;
                    if (v137)
                    {
                      v137 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v137);
                      v131 = v480;
                      v133 = (uint64_t *)v479;
                    }
                    else
                    {
                      v138 = 0;
                    }
                    v139 = (uint64_t *)(v137 + 8 * v134);
                    *v139 = v120;
                    v132 = v139 + 1;
                    while (v131 != v133)
                    {
                      v140 = *--v131;
                      *--v139 = v140;
                    }
                    v479 = v139;
                    v480 = v132;
                    v481 = v137 + 8 * v138;
                    if (v133)
                      operator delete(v133);
                  }
                  else
                  {
                    *v480 = v120;
                    v132 = v131 + 1;
                  }
                  v480 = v132;
                }
              }
              v116 = objc_msgSend(v115, "countByEnumeratingWithState:objects:count:", &v457, v483, 16);
            }
            while (v116);
          }

          objc_msgSend(v12, "personalizedStore");
          v141 = (void *)objc_claimAutoreleasedReturnValue();
          v142 = objc_msgSend(v141, "cloudID");

          if (v142)
          {
            v143 = v474;
            if ((unint64_t)v474 >= v475)
            {
              v145 = (uint64_t *)v473;
              v146 = ((char *)v474 - (_BYTE *)v473) >> 3;
              v147 = v146 + 1;
              if ((unint64_t)(v146 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v148 = v475 - (_QWORD)v473;
              if ((uint64_t)(v475 - (_QWORD)v473) >> 2 > v147)
                v147 = v148 >> 2;
              if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF8)
                v149 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v149 = v147;
              if (v149)
              {
                v149 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v149);
                v145 = (uint64_t *)v473;
                v143 = v474;
              }
              else
              {
                v150 = 0;
              }
              v151 = (uint64_t *)(v149 + 8 * v146);
              *v151 = v142;
              v144 = v151 + 1;
              while (v143 != v145)
              {
                v152 = *--v143;
                *--v151 = v152;
              }
              v473 = v151;
              v474 = v144;
              v475 = v149 + 8 * v150;
              if (v145)
                operator delete(v145);
            }
            else
            {
              *v474 = v142;
              v144 = v143 + 1;
            }
            v474 = v144;
          }
          objc_msgSend(v12, "universalStore");
          v153 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v153, "globalPlaylistID");
          v154 = (void *)objc_claimAutoreleasedReturnValue();

          if (v154)
          {
            std::string::basic_string[abi:ne180100]<0>(v455, (char *)objc_msgSend(objc_retainAutorelease(v154), "UTF8String"));
            v155 = v472.__end_;
            if (v472.__end_ >= v472.__end_cap_.__value_)
            {
              v157 = 0xAAAAAAAAAAAAAAABLL * (((char *)v472.__end_ - (char *)v472.__begin_) >> 3);
              v158 = v157 + 1;
              if (v157 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v472.__end_cap_.__value_ - (char *)v472.__begin_) >> 3) > v158)
                v158 = 0x5555555555555556 * (((char *)v472.__end_cap_.__value_ - (char *)v472.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v472.__end_cap_.__value_ - (char *)v472.__begin_) >> 3) >= 0x555555555555555)
                v159 = 0xAAAAAAAAAAAAAAALL;
              else
                v159 = v158;
              __sz.__end_cap_.__value_ = (std::allocator<std::string> *)&v472.__end_cap_;
              if (v159)
                v159 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v159);
              else
                v160 = 0;
              v161 = (std::string *)(v159 + 24 * v157);
              __sz.__first_ = (std::__split_buffer<std::string>::pointer)v159;
              __sz.__begin_ = v161;
              __sz.__end_cap_.__value_ = (std::string *)(v159 + 24 * v160);
              v162 = *(_OWORD *)v455;
              v161->__r_.__value_.__r.__words[2] = v456;
              *(_OWORD *)&v161->__r_.__value_.__l.__data_ = v162;
              v455[1] = 0;
              v456 = 0;
              v455[0] = 0;
              __sz.__end_ = v161 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v472, &__sz);
              v163 = v472.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__sz);
              v472.__end_ = v163;
              if (SHIBYTE(v456) < 0)
                operator delete(v455[0]);
            }
            else
            {
              v156 = *(_OWORD *)v455;
              v472.__end_->__r_.__value_.__r.__words[2] = v456;
              *(_OWORD *)&v155->__r_.__value_.__l.__data_ = v156;
              v472.__end_ = v155 + 1;
            }
          }
          objc_msgSend(v12, "library");
          v164 = (void *)objc_claimAutoreleasedReturnValue();
          v165 = objc_msgSend(v164, "syncID");

          if (v165)
          {
            v166 = v470;
            if ((unint64_t)v470 >= v471)
            {
              v168 = (uint64_t *)v469;
              v169 = ((char *)v470 - (_BYTE *)v469) >> 3;
              v170 = v169 + 1;
              if ((unint64_t)(v169 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v171 = v471 - (_QWORD)v469;
              if ((uint64_t)(v471 - (_QWORD)v469) >> 2 > v170)
                v170 = v171 >> 2;
              if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFF8)
                v172 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v172 = v170;
              if (v172)
              {
                v172 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v172);
                v168 = (uint64_t *)v469;
                v166 = v470;
              }
              else
              {
                v173 = 0;
              }
              v174 = (uint64_t *)(v172 + 8 * v169);
              *v174 = v165;
              v167 = v174 + 1;
              while (v166 != v168)
              {
                v175 = *--v166;
                *--v174 = v175;
              }
              v469 = v174;
              v470 = v167;
              v471 = v172 + 8 * v173;
              if (v168)
                operator delete(v168);
            }
            else
            {
              *v470 = v165;
              v167 = v166 + 1;
            }
            v470 = v167;
          }
          objc_msgSend(v12, "personalizedStore");
          v176 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v176, "cloudAlbumID");
          v177 = (void *)objc_claimAutoreleasedReturnValue();

          if (v177)
          {
            std::string::basic_string[abi:ne180100]<0>(v455, (char *)objc_msgSend(objc_retainAutorelease(v177), "UTF8String"));
            v178 = v468.__end_;
            if (v468.__end_ >= v468.__end_cap_.__value_)
            {
              v180 = 0xAAAAAAAAAAAAAAABLL * (((char *)v468.__end_ - (char *)v468.__begin_) >> 3);
              v181 = v180 + 1;
              if (v180 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v468.__end_cap_.__value_ - (char *)v468.__begin_) >> 3) > v181)
                v181 = 0x5555555555555556 * (((char *)v468.__end_cap_.__value_ - (char *)v468.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v468.__end_cap_.__value_ - (char *)v468.__begin_) >> 3) >= 0x555555555555555)
                v182 = 0xAAAAAAAAAAAAAAALL;
              else
                v182 = v181;
              __sz.__end_cap_.__value_ = (std::allocator<std::string> *)&v468.__end_cap_;
              if (v182)
                v182 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v182);
              else
                v183 = 0;
              v184 = (std::string *)(v182 + 24 * v180);
              __sz.__first_ = (std::__split_buffer<std::string>::pointer)v182;
              __sz.__begin_ = v184;
              __sz.__end_cap_.__value_ = (std::string *)(v182 + 24 * v183);
              v185 = *(_OWORD *)v455;
              v184->__r_.__value_.__r.__words[2] = v456;
              *(_OWORD *)&v184->__r_.__value_.__l.__data_ = v185;
              v455[1] = 0;
              v456 = 0;
              v455[0] = 0;
              __sz.__end_ = v184 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v468, &__sz);
              v186 = v468.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__sz);
              v468.__end_ = v186;
              if (SHIBYTE(v456) < 0)
                operator delete(v455[0]);
            }
            else
            {
              v179 = *(_OWORD *)v455;
              v468.__end_->__r_.__value_.__r.__words[2] = v456;
              *(_OWORD *)&v178->__r_.__value_.__l.__data_ = v179;
              v468.__end_ = v178 + 1;
            }
          }
          objc_msgSend(v12, "universalStore");
          v187 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v187, "universalCloudLibraryID");
          v188 = (void *)objc_claimAutoreleasedReturnValue();

          if (v188)
          {
            std::string::basic_string[abi:ne180100]<0>(v455, (char *)objc_msgSend(objc_retainAutorelease(v188), "UTF8String"));
            v189 = v467.__end_;
            if (v467.__end_ >= v467.__end_cap_.__value_)
            {
              v191 = 0xAAAAAAAAAAAAAAABLL * (((char *)v467.__end_ - (char *)v467.__begin_) >> 3);
              v192 = v191 + 1;
              if (v191 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v467.__end_cap_.__value_ - (char *)v467.__begin_) >> 3) > v192)
                v192 = 0x5555555555555556 * (((char *)v467.__end_cap_.__value_ - (char *)v467.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v467.__end_cap_.__value_ - (char *)v467.__begin_) >> 3) >= 0x555555555555555)
                v193 = 0xAAAAAAAAAAAAAAALL;
              else
                v193 = v192;
              __sz.__end_cap_.__value_ = (std::allocator<std::string> *)&v467.__end_cap_;
              if (v193)
                v193 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v193);
              else
                v194 = 0;
              v195 = (std::string *)(v193 + 24 * v191);
              __sz.__first_ = (std::__split_buffer<std::string>::pointer)v193;
              __sz.__begin_ = v195;
              __sz.__end_cap_.__value_ = (std::string *)(v193 + 24 * v194);
              v196 = *(_OWORD *)v455;
              v195->__r_.__value_.__r.__words[2] = v456;
              *(_OWORD *)&v195->__r_.__value_.__l.__data_ = v196;
              v455[1] = 0;
              v456 = 0;
              v455[0] = 0;
              __sz.__end_ = v195 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v467, &__sz);
              v197 = v467.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__sz);
              v467.__end_ = v197;
              if (SHIBYTE(v456) < 0)
                operator delete(v455[0]);
            }
            else
            {
              v190 = *(_OWORD *)v455;
              v467.__end_->__r_.__value_.__r.__words[2] = v456;
              *(_OWORD *)&v189->__r_.__value_.__l.__data_ = v190;
              v467.__end_ = v189 + 1;
            }
          }
          v198 = objc_msgSend(v12, "musicKit_possibleLibraryPersistentID");
          v199 = v198;
          if (v198)
          {
            v200 = v477;
            if ((unint64_t)v477 >= v478)
            {
              v202 = (uint64_t *)__p;
              v203 = ((char *)v477 - (_BYTE *)__p) >> 3;
              v204 = v203 + 1;
              if ((unint64_t)(v203 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v205 = v478 - (_QWORD)__p;
              if ((uint64_t)(v478 - (_QWORD)__p) >> 2 > v204)
                v204 = v205 >> 2;
              if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFF8)
                v206 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v206 = v204;
              if (v206)
              {
                v206 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v206);
                v200 = v477;
                v202 = (uint64_t *)__p;
              }
              else
              {
                v207 = 0;
              }
              v208 = (uint64_t *)(v206 + 8 * v203);
              *v208 = v199;
              v201 = v208 + 1;
              while (v200 != v202)
              {
                v209 = *--v200;
                *--v208 = v209;
              }
              __p = v208;
              v477 = v201;
              v478 = v206 + 8 * v207;
              if (v202)
                operator delete(v202);
            }
            else
            {
              *v477 = v198;
              v201 = v200 + 1;
            }
            v477 = v201;
          }

LABEL_306:
        }
        v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v461, v484, 16);
      }
      while (v10);
    }

    if (a3 && v450 != v449)
    {
      std::allocate_shared[abi:ne180100]<mlcore::InPredicate<long long>,std::allocator<mlcore::InPredicate<long long>>,mlcore::ModelProperty<long long> *&,std::vector<long long> const&,void>((uint64_t *)&v453);
      v210 = v453;
      v211 = v454;
      v455[0] = v453;
      v455[1] = v454;
      v453 = 0;
      v454 = 0;
      v212 = v465.i64[1];
      if (v465.i64[1] >= (unint64_t)v466)
      {
        v213 = (v465.i64[1] - v465.i64[0]) >> 4;
        v214 = v213 + 1;
        if ((unint64_t)(v213 + 1) >> 60)
          std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
        v215 = (uint64_t)v466 - v465.i64[0];
        if (((uint64_t)v466 - v465.i64[0]) >> 3 > v214)
          v214 = v215 >> 3;
        if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF0)
          v216 = 0xFFFFFFFFFFFFFFFLL;
        else
          v216 = v214;
        __sz.__end_cap_.__value_ = (std::allocator<std::string> *)&v466;
        v217 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v216);
        v219 = &v217[16 * v213];
        *(_OWORD *)v219 = *(_OWORD *)v455;
        v455[0] = 0;
        v455[1] = 0;
        v220 = (_QWORD *)v465.i64[1];
        v221 = (_QWORD *)v465.i64[0];
        if (v465.i64[1] == v465.i64[0])
        {
          v224 = vdupq_n_s64(v465.u64[1]);
          v222 = &v217[16 * v213];
        }
        else
        {
          v222 = &v217[16 * v213];
          do
          {
            v223 = *((_OWORD *)v220 - 1);
            v220 -= 2;
            *((_OWORD *)v222 - 1) = v223;
            v222 -= 16;
            *v220 = 0;
            v220[1] = 0;
          }
          while (v220 != v221);
          v224 = v465;
        }
        v225 = v219 + 16;
        v465.i64[0] = (uint64_t)v222;
        v465.i64[1] = (uint64_t)(v219 + 16);
        *(int64x2_t *)&__sz.__begin_ = v224;
        v226 = v466;
        v466 = (std::string *)&v217[16 * v218];
        __sz.__end_cap_.__value_ = v226;
        __sz.__first_ = (std::__split_buffer<std::string>::pointer)v224.i64[0];
        std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&__sz);
        v227 = (std::__shared_weak_count *)v455[1];
        v465.i64[1] = (uint64_t)v225;
        if (v455[1])
        {
          v228 = (unint64_t *)((char *)v455[1] + 8);
          do
            v229 = __ldaxr(v228);
          while (__stlxr(v229 - 1, v228));
          if (!v229)
          {
            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
            std::__shared_weak_count::__release_weak(v227);
          }
        }
      }
      else
      {
        *(_QWORD *)v465.i64[1] = v210;
        *(_QWORD *)(v212 + 8) = v211;
        v455[0] = 0;
        v455[1] = 0;
        v465.i64[1] = v212 + 16;
      }
      v230 = v454;
      if (v454)
      {
        p_shared_owners = (unint64_t *)&v454->__shared_owners_;
        do
          v232 = __ldaxr(p_shared_owners);
        while (__stlxr(v232 - 1, p_shared_owners));
        if (!v232)
        {
          ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
          std::__shared_weak_count::__release_weak(v230);
        }
      }
    }
    if (a4 && v480 != v479)
    {
      std::allocate_shared[abi:ne180100]<mlcore::InPredicate<long long>,std::allocator<mlcore::InPredicate<long long>>,mlcore::ModelProperty<long long> *&,std::vector<long long> const&,void>((uint64_t *)&v453);
      v233 = v453;
      v234 = v454;
      v455[0] = v453;
      v455[1] = v454;
      v453 = 0;
      v454 = 0;
      v235 = v465.i64[1];
      if (v465.i64[1] >= (unint64_t)v466)
      {
        v236 = (v465.i64[1] - v465.i64[0]) >> 4;
        v237 = v236 + 1;
        if ((unint64_t)(v236 + 1) >> 60)
          std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
        v238 = (uint64_t)v466 - v465.i64[0];
        if (((uint64_t)v466 - v465.i64[0]) >> 3 > v237)
          v237 = v238 >> 3;
        if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFF0)
          v239 = 0xFFFFFFFFFFFFFFFLL;
        else
          v239 = v237;
        __sz.__end_cap_.__value_ = (std::allocator<std::string> *)&v466;
        v240 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v239);
        v242 = &v240[16 * v236];
        *(_OWORD *)v242 = *(_OWORD *)v455;
        v455[0] = 0;
        v455[1] = 0;
        v243 = (_QWORD *)v465.i64[1];
        v244 = (_QWORD *)v465.i64[0];
        if (v465.i64[1] == v465.i64[0])
        {
          v247 = vdupq_n_s64(v465.u64[1]);
          v245 = &v240[16 * v236];
        }
        else
        {
          v245 = &v240[16 * v236];
          do
          {
            v246 = *((_OWORD *)v243 - 1);
            v243 -= 2;
            *((_OWORD *)v245 - 1) = v246;
            v245 -= 16;
            *v243 = 0;
            v243[1] = 0;
          }
          while (v243 != v244);
          v247 = v465;
        }
        v248 = v242 + 16;
        v465.i64[0] = (uint64_t)v245;
        v465.i64[1] = (uint64_t)(v242 + 16);
        *(int64x2_t *)&__sz.__begin_ = v247;
        v249 = v466;
        v466 = (std::string *)&v240[16 * v241];
        __sz.__end_cap_.__value_ = v249;
        __sz.__first_ = (std::__split_buffer<std::string>::pointer)v247.i64[0];
        std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&__sz);
        v250 = (std::__shared_weak_count *)v455[1];
        v465.i64[1] = (uint64_t)v248;
        if (v455[1])
        {
          v251 = (unint64_t *)((char *)v455[1] + 8);
          do
            v252 = __ldaxr(v251);
          while (__stlxr(v252 - 1, v251));
          if (!v252)
          {
            ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
            std::__shared_weak_count::__release_weak(v250);
          }
        }
      }
      else
      {
        *(_QWORD *)v465.i64[1] = v233;
        *(_QWORD *)(v235 + 8) = v234;
        v455[0] = 0;
        v455[1] = 0;
        v465.i64[1] = v235 + 16;
      }
      v253 = v454;
      if (v454)
      {
        v254 = (unint64_t *)&v454->__shared_owners_;
        do
          v255 = __ldaxr(v254);
        while (__stlxr(v255 - 1, v254));
        if (!v255)
        {
          ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
          std::__shared_weak_count::__release_weak(v253);
        }
      }
    }
    if (a5 && v477 != __p)
    {
      std::allocate_shared[abi:ne180100]<mlcore::InPredicate<long long>,std::allocator<mlcore::InPredicate<long long>>,mlcore::ModelProperty<long long> *&,std::vector<long long> const&,void>((uint64_t *)&v453);
      v256 = v453;
      v257 = v454;
      v455[0] = v453;
      v455[1] = v454;
      v453 = 0;
      v454 = 0;
      v258 = v465.i64[1];
      if (v465.i64[1] >= (unint64_t)v466)
      {
        v259 = (v465.i64[1] - v465.i64[0]) >> 4;
        v260 = v259 + 1;
        if ((unint64_t)(v259 + 1) >> 60)
          std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
        v261 = (uint64_t)v466 - v465.i64[0];
        if (((uint64_t)v466 - v465.i64[0]) >> 3 > v260)
          v260 = v261 >> 3;
        if ((unint64_t)v261 >= 0x7FFFFFFFFFFFFFF0)
          v262 = 0xFFFFFFFFFFFFFFFLL;
        else
          v262 = v260;
        __sz.__end_cap_.__value_ = (std::allocator<std::string> *)&v466;
        v263 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v262);
        v265 = &v263[16 * v259];
        *(_OWORD *)v265 = *(_OWORD *)v455;
        v455[0] = 0;
        v455[1] = 0;
        v266 = (_QWORD *)v465.i64[1];
        v267 = (_QWORD *)v465.i64[0];
        if (v465.i64[1] == v465.i64[0])
        {
          v270 = vdupq_n_s64(v465.u64[1]);
          v268 = &v263[16 * v259];
        }
        else
        {
          v268 = &v263[16 * v259];
          do
          {
            v269 = *((_OWORD *)v266 - 1);
            v266 -= 2;
            *((_OWORD *)v268 - 1) = v269;
            v268 -= 16;
            *v266 = 0;
            v266[1] = 0;
          }
          while (v266 != v267);
          v270 = v465;
        }
        v271 = v265 + 16;
        v465.i64[0] = (uint64_t)v268;
        v465.i64[1] = (uint64_t)(v265 + 16);
        *(int64x2_t *)&__sz.__begin_ = v270;
        v272 = v466;
        v466 = (std::string *)&v263[16 * v264];
        __sz.__end_cap_.__value_ = v272;
        __sz.__first_ = (std::__split_buffer<std::string>::pointer)v270.i64[0];
        std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&__sz);
        v273 = (std::__shared_weak_count *)v455[1];
        v465.i64[1] = (uint64_t)v271;
        if (v455[1])
        {
          v274 = (unint64_t *)((char *)v455[1] + 8);
          do
            v275 = __ldaxr(v274);
          while (__stlxr(v275 - 1, v274));
          if (!v275)
          {
            ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
            std::__shared_weak_count::__release_weak(v273);
          }
        }
      }
      else
      {
        *(_QWORD *)v465.i64[1] = v256;
        *(_QWORD *)(v258 + 8) = v257;
        v455[0] = 0;
        v455[1] = 0;
        v465.i64[1] = v258 + 16;
      }
      v276 = v454;
      if (v454)
      {
        v277 = (unint64_t *)&v454->__shared_owners_;
        do
          v278 = __ldaxr(v277);
        while (__stlxr(v278 - 1, v277));
        if (!v278)
        {
          ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
          std::__shared_weak_count::__release_weak(v276);
        }
      }
    }
    if (a6 && v474 != v473)
    {
      std::allocate_shared[abi:ne180100]<mlcore::InPredicate<long long>,std::allocator<mlcore::InPredicate<long long>>,mlcore::ModelProperty<long long> *&,std::vector<long long> const&,void>((uint64_t *)&v453);
      v279 = v453;
      v280 = v454;
      v455[0] = v453;
      v455[1] = v454;
      v453 = 0;
      v454 = 0;
      v281 = v465.i64[1];
      if (v465.i64[1] >= (unint64_t)v466)
      {
        v282 = (v465.i64[1] - v465.i64[0]) >> 4;
        v283 = v282 + 1;
        if ((unint64_t)(v282 + 1) >> 60)
          std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
        v284 = (uint64_t)v466 - v465.i64[0];
        if (((uint64_t)v466 - v465.i64[0]) >> 3 > v283)
          v283 = v284 >> 3;
        if ((unint64_t)v284 >= 0x7FFFFFFFFFFFFFF0)
          v285 = 0xFFFFFFFFFFFFFFFLL;
        else
          v285 = v283;
        __sz.__end_cap_.__value_ = (std::allocator<std::string> *)&v466;
        v286 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v285);
        v288 = &v286[16 * v282];
        *(_OWORD *)v288 = *(_OWORD *)v455;
        v455[0] = 0;
        v455[1] = 0;
        v289 = (_QWORD *)v465.i64[1];
        v290 = (_QWORD *)v465.i64[0];
        if (v465.i64[1] == v465.i64[0])
        {
          v293 = vdupq_n_s64(v465.u64[1]);
          v291 = &v286[16 * v282];
        }
        else
        {
          v291 = &v286[16 * v282];
          do
          {
            v292 = *((_OWORD *)v289 - 1);
            v289 -= 2;
            *((_OWORD *)v291 - 1) = v292;
            v291 -= 16;
            *v289 = 0;
            v289[1] = 0;
          }
          while (v289 != v290);
          v293 = v465;
        }
        v294 = v288 + 16;
        v465.i64[0] = (uint64_t)v291;
        v465.i64[1] = (uint64_t)(v288 + 16);
        *(int64x2_t *)&__sz.__begin_ = v293;
        v295 = v466;
        v466 = (std::string *)&v286[16 * v287];
        __sz.__end_cap_.__value_ = v295;
        __sz.__first_ = (std::__split_buffer<std::string>::pointer)v293.i64[0];
        std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&__sz);
        v296 = (std::__shared_weak_count *)v455[1];
        v465.i64[1] = (uint64_t)v294;
        if (v455[1])
        {
          v297 = (unint64_t *)((char *)v455[1] + 8);
          do
            v298 = __ldaxr(v297);
          while (__stlxr(v298 - 1, v297));
          if (!v298)
          {
            ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
            std::__shared_weak_count::__release_weak(v296);
          }
        }
      }
      else
      {
        *(_QWORD *)v465.i64[1] = v279;
        *(_QWORD *)(v281 + 8) = v280;
        v455[0] = 0;
        v455[1] = 0;
        v465.i64[1] = v281 + 16;
      }
      v299 = v454;
      if (v454)
      {
        v300 = (unint64_t *)&v454->__shared_owners_;
        do
          v301 = __ldaxr(v300);
        while (__stlxr(v301 - 1, v300));
        if (!v301)
        {
          ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
          std::__shared_weak_count::__release_weak(v299);
        }
      }
    }
    if (a7 && v472.__end_ != v472.__begin_)
    {
      std::allocate_shared[abi:ne180100]<mlcore::InPredicate<std::string>,std::allocator<mlcore::InPredicate<std::string>>,mlcore::ModelProperty<std::string> *&,std::vector<std::string> const&,void>((uint64_t *)&v453);
      v302 = v453;
      v303 = v454;
      v455[0] = v453;
      v455[1] = v454;
      v453 = 0;
      v454 = 0;
      v304 = v465.i64[1];
      if (v465.i64[1] >= (unint64_t)v466)
      {
        v305 = (v465.i64[1] - v465.i64[0]) >> 4;
        v306 = v305 + 1;
        if ((unint64_t)(v305 + 1) >> 60)
          std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
        v307 = (uint64_t)v466 - v465.i64[0];
        if (((uint64_t)v466 - v465.i64[0]) >> 3 > v306)
          v306 = v307 >> 3;
        if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFF0)
          v308 = 0xFFFFFFFFFFFFFFFLL;
        else
          v308 = v306;
        __sz.__end_cap_.__value_ = (std::allocator<std::string> *)&v466;
        v309 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v308);
        v311 = &v309[16 * v305];
        *(_OWORD *)v311 = *(_OWORD *)v455;
        v455[0] = 0;
        v455[1] = 0;
        v312 = (_QWORD *)v465.i64[1];
        v313 = (_QWORD *)v465.i64[0];
        if (v465.i64[1] == v465.i64[0])
        {
          v316 = vdupq_n_s64(v465.u64[1]);
          v314 = &v309[16 * v305];
        }
        else
        {
          v314 = &v309[16 * v305];
          do
          {
            v315 = *((_OWORD *)v312 - 1);
            v312 -= 2;
            *((_OWORD *)v314 - 1) = v315;
            v314 -= 16;
            *v312 = 0;
            v312[1] = 0;
          }
          while (v312 != v313);
          v316 = v465;
        }
        v317 = v311 + 16;
        v465.i64[0] = (uint64_t)v314;
        v465.i64[1] = (uint64_t)(v311 + 16);
        *(int64x2_t *)&__sz.__begin_ = v316;
        v318 = v466;
        v466 = (std::string *)&v309[16 * v310];
        __sz.__end_cap_.__value_ = v318;
        __sz.__first_ = (std::__split_buffer<std::string>::pointer)v316.i64[0];
        std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&__sz);
        v319 = (std::__shared_weak_count *)v455[1];
        v465.i64[1] = (uint64_t)v317;
        if (v455[1])
        {
          v320 = (unint64_t *)((char *)v455[1] + 8);
          do
            v321 = __ldaxr(v320);
          while (__stlxr(v321 - 1, v320));
          if (!v321)
          {
            ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
            std::__shared_weak_count::__release_weak(v319);
          }
        }
      }
      else
      {
        *(_QWORD *)v465.i64[1] = v302;
        *(_QWORD *)(v304 + 8) = v303;
        v455[0] = 0;
        v455[1] = 0;
        v465.i64[1] = v304 + 16;
      }
      v322 = v454;
      if (v454)
      {
        v323 = (unint64_t *)&v454->__shared_owners_;
        do
          v324 = __ldaxr(v323);
        while (__stlxr(v324 - 1, v323));
        if (!v324)
        {
          ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
          std::__shared_weak_count::__release_weak(v322);
        }
      }
    }
    if (a8 && v470 != v469)
    {
      std::allocate_shared[abi:ne180100]<mlcore::InPredicate<long long>,std::allocator<mlcore::InPredicate<long long>>,mlcore::ModelProperty<long long> *&,std::vector<long long> const&,void>((uint64_t *)&v453);
      v325 = v453;
      v326 = v454;
      v455[0] = v453;
      v455[1] = v454;
      v453 = 0;
      v454 = 0;
      v327 = v465.i64[1];
      if (v465.i64[1] >= (unint64_t)v466)
      {
        v328 = (v465.i64[1] - v465.i64[0]) >> 4;
        v329 = v328 + 1;
        if ((unint64_t)(v328 + 1) >> 60)
          std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
        v330 = (uint64_t)v466 - v465.i64[0];
        if (((uint64_t)v466 - v465.i64[0]) >> 3 > v329)
          v329 = v330 >> 3;
        if ((unint64_t)v330 >= 0x7FFFFFFFFFFFFFF0)
          v331 = 0xFFFFFFFFFFFFFFFLL;
        else
          v331 = v329;
        __sz.__end_cap_.__value_ = (std::allocator<std::string> *)&v466;
        v332 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v331);
        v334 = &v332[16 * v328];
        *(_OWORD *)v334 = *(_OWORD *)v455;
        v455[0] = 0;
        v455[1] = 0;
        v335 = (_QWORD *)v465.i64[1];
        v336 = (_QWORD *)v465.i64[0];
        if (v465.i64[1] == v465.i64[0])
        {
          v339 = vdupq_n_s64(v465.u64[1]);
          v337 = &v332[16 * v328];
        }
        else
        {
          v337 = &v332[16 * v328];
          do
          {
            v338 = *((_OWORD *)v335 - 1);
            v335 -= 2;
            *((_OWORD *)v337 - 1) = v338;
            v337 -= 16;
            *v335 = 0;
            v335[1] = 0;
          }
          while (v335 != v336);
          v339 = v465;
        }
        v340 = v334 + 16;
        v465.i64[0] = (uint64_t)v337;
        v465.i64[1] = (uint64_t)(v334 + 16);
        *(int64x2_t *)&__sz.__begin_ = v339;
        v341 = v466;
        v466 = (std::string *)&v332[16 * v333];
        __sz.__end_cap_.__value_ = v341;
        __sz.__first_ = (std::__split_buffer<std::string>::pointer)v339.i64[0];
        std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&__sz);
        v342 = (std::__shared_weak_count *)v455[1];
        v465.i64[1] = (uint64_t)v340;
        if (v455[1])
        {
          v343 = (unint64_t *)((char *)v455[1] + 8);
          do
            v344 = __ldaxr(v343);
          while (__stlxr(v344 - 1, v343));
          if (!v344)
          {
            ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
            std::__shared_weak_count::__release_weak(v342);
          }
        }
      }
      else
      {
        *(_QWORD *)v465.i64[1] = v325;
        *(_QWORD *)(v327 + 8) = v326;
        v455[0] = 0;
        v455[1] = 0;
        v465.i64[1] = v327 + 16;
      }
      v345 = v454;
      if (v454)
      {
        v346 = (unint64_t *)&v454->__shared_owners_;
        do
          v347 = __ldaxr(v346);
        while (__stlxr(v347 - 1, v346));
        if (!v347)
        {
          ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
          std::__shared_weak_count::__release_weak(v345);
        }
      }
    }
    if (a10 && v468.__end_ != v468.__begin_)
    {
      std::allocate_shared[abi:ne180100]<mlcore::InPredicate<std::string>,std::allocator<mlcore::InPredicate<std::string>>,mlcore::ModelProperty<std::string> *&,std::vector<std::string> const&,void>((uint64_t *)&v453);
      v348 = v453;
      v349 = v454;
      v455[0] = v453;
      v455[1] = v454;
      v453 = 0;
      v454 = 0;
      v350 = v465.i64[1];
      if (v465.i64[1] >= (unint64_t)v466)
      {
        v351 = (v465.i64[1] - v465.i64[0]) >> 4;
        v352 = v351 + 1;
        if ((unint64_t)(v351 + 1) >> 60)
          std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
        v353 = (uint64_t)v466 - v465.i64[0];
        if (((uint64_t)v466 - v465.i64[0]) >> 3 > v352)
          v352 = v353 >> 3;
        if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF0)
          v354 = 0xFFFFFFFFFFFFFFFLL;
        else
          v354 = v352;
        __sz.__end_cap_.__value_ = (std::allocator<std::string> *)&v466;
        v355 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v354);
        v357 = &v355[16 * v351];
        *(_OWORD *)v357 = *(_OWORD *)v455;
        v455[0] = 0;
        v455[1] = 0;
        v358 = (_QWORD *)v465.i64[1];
        v359 = (_QWORD *)v465.i64[0];
        if (v465.i64[1] == v465.i64[0])
        {
          v362 = vdupq_n_s64(v465.u64[1]);
          v360 = &v355[16 * v351];
        }
        else
        {
          v360 = &v355[16 * v351];
          do
          {
            v361 = *((_OWORD *)v358 - 1);
            v358 -= 2;
            *((_OWORD *)v360 - 1) = v361;
            v360 -= 16;
            *v358 = 0;
            v358[1] = 0;
          }
          while (v358 != v359);
          v362 = v465;
        }
        v363 = v357 + 16;
        v465.i64[0] = (uint64_t)v360;
        v465.i64[1] = (uint64_t)(v357 + 16);
        *(int64x2_t *)&__sz.__begin_ = v362;
        v364 = v466;
        v466 = (std::string *)&v355[16 * v356];
        __sz.__end_cap_.__value_ = v364;
        __sz.__first_ = (std::__split_buffer<std::string>::pointer)v362.i64[0];
        std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&__sz);
        v365 = (std::__shared_weak_count *)v455[1];
        v465.i64[1] = (uint64_t)v363;
        if (v455[1])
        {
          v366 = (unint64_t *)((char *)v455[1] + 8);
          do
            v367 = __ldaxr(v366);
          while (__stlxr(v367 - 1, v366));
          if (!v367)
          {
            ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
            std::__shared_weak_count::__release_weak(v365);
          }
        }
      }
      else
      {
        *(_QWORD *)v465.i64[1] = v348;
        *(_QWORD *)(v350 + 8) = v349;
        v455[0] = 0;
        v455[1] = 0;
        v465.i64[1] = v350 + 16;
      }
      v368 = v454;
      if (v454)
      {
        v369 = (unint64_t *)&v454->__shared_owners_;
        do
          v370 = __ldaxr(v369);
        while (__stlxr(v370 - 1, v369));
        if (!v370)
        {
          ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
          std::__shared_weak_count::__release_weak(v368);
        }
      }
    }
    if (a9 && v467.__end_ != v467.__begin_)
    {
      std::allocate_shared[abi:ne180100]<mlcore::InPredicate<std::string>,std::allocator<mlcore::InPredicate<std::string>>,mlcore::ModelProperty<std::string> *&,std::vector<std::string> const&,void>((uint64_t *)&v453);
      v371 = v453;
      v372 = v454;
      v455[0] = v453;
      v455[1] = v454;
      v453 = 0;
      v454 = 0;
      v373 = v465.i64[1];
      if (v465.i64[1] >= (unint64_t)v466)
      {
        v374 = (v465.i64[1] - v465.i64[0]) >> 4;
        v375 = v374 + 1;
        if ((unint64_t)(v374 + 1) >> 60)
          std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
        v376 = (uint64_t)v466 - v465.i64[0];
        if (((uint64_t)v466 - v465.i64[0]) >> 3 > v375)
          v375 = v376 >> 3;
        if ((unint64_t)v376 >= 0x7FFFFFFFFFFFFFF0)
          v377 = 0xFFFFFFFFFFFFFFFLL;
        else
          v377 = v375;
        __sz.__end_cap_.__value_ = (std::allocator<std::string> *)&v466;
        v378 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v377);
        v380 = &v378[16 * v374];
        *(_OWORD *)v380 = *(_OWORD *)v455;
        v455[0] = 0;
        v455[1] = 0;
        v381 = (_QWORD *)v465.i64[1];
        v382 = (_QWORD *)v465.i64[0];
        if (v465.i64[1] == v465.i64[0])
        {
          v385 = vdupq_n_s64(v465.u64[1]);
          v383 = &v378[16 * v374];
        }
        else
        {
          v383 = &v378[16 * v374];
          do
          {
            v384 = *((_OWORD *)v381 - 1);
            v381 -= 2;
            *((_OWORD *)v383 - 1) = v384;
            v383 -= 16;
            *v381 = 0;
            v381[1] = 0;
          }
          while (v381 != v382);
          v385 = v465;
        }
        v386 = v380 + 16;
        v465.i64[0] = (uint64_t)v383;
        v465.i64[1] = (uint64_t)(v380 + 16);
        *(int64x2_t *)&__sz.__begin_ = v385;
        v387 = v466;
        v466 = (std::string *)&v378[16 * v379];
        __sz.__end_cap_.__value_ = v387;
        __sz.__first_ = (std::__split_buffer<std::string>::pointer)v385.i64[0];
        std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&__sz);
        v388 = (std::__shared_weak_count *)v455[1];
        v465.i64[1] = (uint64_t)v386;
        if (v455[1])
        {
          v389 = (unint64_t *)((char *)v455[1] + 8);
          do
            v390 = __ldaxr(v389);
          while (__stlxr(v390 - 1, v389));
          if (!v390)
          {
            ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
            std::__shared_weak_count::__release_weak(v388);
          }
        }
      }
      else
      {
        *(_QWORD *)v465.i64[1] = v371;
        *(_QWORD *)(v373 + 8) = v372;
        v455[0] = 0;
        v455[1] = 0;
        v465.i64[1] = v373 + 16;
      }
      v391 = v454;
      if (v454)
      {
        v392 = (unint64_t *)&v454->__shared_owners_;
        do
          v393 = __ldaxr(v392);
        while (__stlxr(v393 - 1, v392));
        if (!v393)
        {
          ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
          std::__shared_weak_count::__release_weak(v391);
        }
      }
    }
    if (v465.i64[1] == v465.i64[0] && objc_msgSend(obj, "count"))
    {
      std::allocate_shared[abi:ne180100]<mlcore::UnaryPredicate<long long>,std::allocator<mlcore::UnaryPredicate<long long>>,mlcore::ModelProperty<long long> *&,mlcore::UnaryOperator,void>((uint64_t *)&v453);
      v409 = v453;
      v410 = v454;
      v455[0] = v453;
      v455[1] = v454;
      v453 = 0;
      v454 = 0;
      v411 = v465.i64[1];
      if (v465.i64[1] >= (unint64_t)v466)
      {
        v417 = (v465.i64[1] - v465.i64[0]) >> 4;
        v418 = v417 + 1;
        if ((unint64_t)(v417 + 1) >> 60)
          std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
        v419 = (uint64_t)v466 - v465.i64[0];
        if (((uint64_t)v466 - v465.i64[0]) >> 3 > v418)
          v418 = v419 >> 3;
        if ((unint64_t)v419 >= 0x7FFFFFFFFFFFFFF0)
          v420 = 0xFFFFFFFFFFFFFFFLL;
        else
          v420 = v418;
        __sz.__end_cap_.__value_ = (std::allocator<std::string> *)&v466;
        v421 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v420);
        v423 = &v421[16 * v417];
        *(_OWORD *)v423 = *(_OWORD *)v455;
        v455[0] = 0;
        v455[1] = 0;
        v424 = (_QWORD *)v465.i64[1];
        v425 = (_QWORD *)v465.i64[0];
        if (v465.i64[1] == v465.i64[0])
        {
          v428 = vdupq_n_s64(v465.u64[1]);
          v426 = &v421[16 * v417];
        }
        else
        {
          v426 = &v421[16 * v417];
          do
          {
            v427 = *((_OWORD *)v424 - 1);
            v424 -= 2;
            *((_OWORD *)v426 - 1) = v427;
            v426 -= 16;
            *v424 = 0;
            v424[1] = 0;
          }
          while (v424 != v425);
          v428 = v465;
        }
        v429 = v423 + 16;
        v465.i64[0] = (uint64_t)v426;
        v465.i64[1] = (uint64_t)(v423 + 16);
        *(int64x2_t *)&__sz.__begin_ = v428;
        v430 = v466;
        v466 = (std::string *)&v421[16 * v422];
        __sz.__end_cap_.__value_ = v430;
        __sz.__first_ = (std::__split_buffer<std::string>::pointer)v428.i64[0];
        std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&__sz);
        v431 = (std::__shared_weak_count *)v455[1];
        v465.i64[1] = (uint64_t)v429;
        if (v455[1])
        {
          v432 = (unint64_t *)((char *)v455[1] + 8);
          do
            v433 = __ldaxr(v432);
          while (__stlxr(v433 - 1, v432));
          if (!v433)
          {
            ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
            std::__shared_weak_count::__release_weak(v431);
          }
        }
      }
      else
      {
        *(_QWORD *)v465.i64[1] = v409;
        *(_QWORD *)(v411 + 8) = v410;
        v455[0] = 0;
        v455[1] = 0;
        v465.i64[1] = v411 + 16;
      }
      v434 = v454;
      if (v454)
      {
        v435 = (unint64_t *)&v454->__shared_owners_;
        do
          v436 = __ldaxr(v435);
        while (__stlxr(v436 - 1, v435));
        if (!v436)
        {
          ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
          std::__shared_weak_count::__release_weak(v434);
        }
      }
    }
    memset(v452, 0, sizeof(v452));
    std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v452, v465.i64[0], (_QWORD *)v465.i64[1], (v465.i64[1] - v465.i64[0]) >> 4);
    mlcore::CreateOrPredicate();
    v394 = a1[1].u64[0];
    v395 = (_OWORD *)a1->i64[1];
    if ((unint64_t)v395 >= v394)
    {
      v396 = ((uint64_t)v395 - a1->i64[0]) >> 4;
      v397 = v396 + 1;
      if ((unint64_t)(v396 + 1) >> 60)
        std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
      v398 = v394 - a1->i64[0];
      if (v398 >> 3 > v397)
        v397 = v398 >> 3;
      if ((unint64_t)v398 >= 0x7FFFFFFFFFFFFFF0)
        v399 = 0xFFFFFFFFFFFFFFFLL;
      else
        v399 = v397;
      __sz.__end_cap_.__value_ = (std::allocator<std::string> *)&a1[1];
      v400 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v399);
      v402 = &v400[16 * v396];
      *(_OWORD *)v402 = *(_OWORD *)v455;
      v455[0] = 0;
      v455[1] = 0;
      v404 = (_QWORD *)a1->i64[0];
      v403 = (_QWORD *)a1->i64[1];
      if (v403 == (_QWORD *)a1->i64[0])
      {
        v408 = vdupq_n_s64((unint64_t)v403);
        v405 = &v400[16 * v396];
        i64 = a1->i64;
      }
      else
      {
        v405 = &v400[16 * v396];
        do
        {
          v406 = *((_OWORD *)v403 - 1);
          v403 -= 2;
          *((_OWORD *)v405 - 1) = v406;
          v405 -= 16;
          *v403 = 0;
          v403[1] = 0;
        }
        while (v403 != v404);
        i64 = a1->i64;
        v408 = *a1;
      }
      v412 = v402 + 16;
      *i64 = v405;
      i64[1] = v402 + 16;
      *(int64x2_t *)&__sz.__begin_ = v408;
      v413 = (std::string *)i64[2];
      i64[2] = &v400[16 * v401];
      __sz.__end_cap_.__value_ = v413;
      __sz.__first_ = (std::__split_buffer<std::string>::pointer)v408.i64[0];
      std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&__sz);
      v414 = (std::__shared_weak_count *)v455[1];
      i64[1] = v412;
      if (v414)
      {
        v415 = (unint64_t *)&v414->__shared_owners_;
        do
          v416 = __ldaxr(v415);
        while (__stlxr(v416 - 1, v415));
        if (!v416)
        {
          ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
          std::__shared_weak_count::__release_weak(v414);
        }
      }
    }
    else
    {
      *v395 = *(_OWORD *)v455;
      v455[0] = 0;
      v455[1] = 0;
      a1->i64[1] = (uint64_t)(v395 + 1);
    }
    __sz.__first_ = (std::__split_buffer<std::string>::pointer)v452;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__sz);
    __sz.__first_ = (std::__split_buffer<std::string>::pointer)&v465;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__sz);
    __sz.__first_ = (std::__split_buffer<std::string>::pointer)&v467;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__sz);
    __sz.__first_ = (std::__split_buffer<std::string>::pointer)&v468;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__sz);
    if (v469)
    {
      v470 = (uint64_t *)v469;
      operator delete(v469);
    }
    __sz.__first_ = (std::__split_buffer<std::string>::pointer)&v472;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__sz);
    if (v473)
    {
      v474 = (uint64_t *)v473;
      operator delete(v473);
    }
    if (__p)
    {
      v477 = (uint64_t *)__p;
      operator delete(__p);
    }
    if (v479)
    {
      v480 = (uint64_t *)v479;
      operator delete(v479);
    }
    if (v449)
      operator delete(v449);
  }

}

void sub_193C47DBC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *__p;
  uint64_t a67;
  char a69;
  void *a71;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  unint64_t *v79;
  void *v80;
  id v81;
  void *v82;
  void *v83;
  void *v84;
  id v85;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  a37 = &a57;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  a57 = (uint64_t)&a60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  a60 = (uint64_t)&a63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a60);
  if (__p)
  {
    a67 = (uint64_t)__p;
    operator delete(__p);
  }
  __p = &a69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v73 = a71;
  if (a71)
  {
    STACK[0x200] = (unint64_t)a71;
    operator delete(v73);
  }
  v74 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v74;
    operator delete(v74);
  }
  v75 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v75;
    operator delete(v75);
  }
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  if (a2 == 2)
  {
    v76 = __cxa_begin_catch(a1);
    v77 = (void *)MEMORY[0x1E0C99DA0];
    v78 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a25);
    (*(void (**)(unint64_t *__return_ptr, void *, void **))(*(_QWORD *)v76 + 24))(&STACK[0x228], v76, &a25);
    if (SLOBYTE(STACK[0x23F]) >= 0)
      v79 = &STACK[0x228];
    else
      v79 = (unint64_t *)STACK[0x228];
    objc_msgSend(v78, "stringWithUTF8String:", v79);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v77, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v80, 0);
    v81 = (id)objc_claimAutoreleasedReturnValue();

    if (SLOBYTE(STACK[0x23F]) < 0)
      operator delete((void *)STACK[0x228]);
    objc_exception_throw(v81);
  }
  if (a2 == 1)
  {
    v82 = __cxa_begin_catch(a1);
    v83 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v82 + 16))(v82));
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v83, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v84, 0);
    v85 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v85);
  }

  _Unwind_Resume(a1);
}

void sub_193C482AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  __cxa_end_catch();

  JUMPOUT(0x193C48314);
}

void sub_193C48300(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::destroy(*a1);
    std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::destroy((_QWORD *)a1[6]);

    operator delete(a1);
  }
}

void sub_193C4B71C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ...)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  unint64_t *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  va_list va;

  va_start(va, a18);

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&STACK[0xB90]);
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::~__hash_table((uint64_t)&STACK[0xBC0]);

  v19 = (void *)STACK[0xBF0];
  if (STACK[0xBF0])
  {
    STACK[0xBF8] = (unint64_t)v19;
    operator delete(v19);
  }

  if (a2 == 2)
  {
    v20 = __cxa_begin_catch(a1);
    v21 = (void *)MEMORY[0x1E0C99DA0];
    v22 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)va);
    (*(void (**)(unint64_t *__return_ptr, void *, void **))(*(_QWORD *)v20 + 24))(&STACK[0xBC0], v20, (void **)va);
    if (SLOBYTE(STACK[0xBD7]) >= 0)
      v23 = &STACK[0xBC0];
    else
      v23 = (unint64_t *)STACK[0xBC0];
    objc_msgSend(v22, "stringWithUTF8String:", v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v24, 0);
    v25 = (id)objc_claimAutoreleasedReturnValue();

    if (SLOBYTE(STACK[0xBD7]) < 0)
      operator delete((void *)STACK[0xBC0]);
    objc_exception_throw(v25);
  }
  if (a2 == 1)
  {
    v26 = __cxa_begin_catch(a1);
    v27 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v26 + 16))(v26));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v28, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v29);
  }
  _Unwind_Resume(a1);
}

void sub_193C4C924(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193C4C970(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x193C4C97CLL);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void ___ZL30_MPMLInitPropertyItemArtistMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[6];
  _QWORD v14[6];

  v12 = a2;
  v8 = a5;
  objc_msgSend(v12, "mediaLibrary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "uniqueIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = ___ZL30_MPMLInitPropertyItemArtistMapv_block_invoke_2;
  v14[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v14[4] = a3;
  v14[5] = a4;
  objc_msgSend(v8, "setLibraryIdentifiersWithDatabaseID:block:", v10, v14);

  v13[0] = v11;
  v13[1] = 3221225472;
  v13[2] = ___ZL30_MPMLInitPropertyItemArtistMapv_block_invoke_3;
  v13[3] = &__block_descriptor_48_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v13[4] = a3;
  v13[5] = a4;
  objc_msgSend(v8, "setUniversalStoreIdentifiersWithBlock:", v13);

}

void sub_193C4D004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void ___ZL30_MPMLInitPropertyItemArtistMapv_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAdamID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193C4D0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL26_MPMLInitPropertyArtistMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];

  v13 = a2;
  v8 = a5;
  objc_msgSend(v13, "mediaLibrary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "uniqueIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = ___ZL26_MPMLInitPropertyArtistMapv_block_invoke_2;
  v16[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v16[4] = a3;
  v16[5] = a4;
  objc_msgSend(v8, "setLibraryIdentifiersWithDatabaseID:block:", v10, v16);

  v15[0] = v11;
  v15[1] = 3221225472;
  v15[2] = ___ZL26_MPMLInitPropertyArtistMapv_block_invoke_3;
  v15[3] = &__block_descriptor_48_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v15[4] = a3;
  v15[5] = a4;
  objc_msgSend(v8, "setUniversalStoreIdentifiersWithBlock:", v15);
  objc_msgSend(v13, "personID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v12, "length"))
  {
    v14[0] = v11;
    v14[1] = 3221225472;
    v14[2] = ___ZL26_MPMLInitPropertyArtistMapv_block_invoke_4;
    v14[3] = &__block_descriptor_48_e45_v16__0___MPMutablePersonalStoreIdentifiers__8l;
    v14[4] = a3;
    v14[5] = a4;
    objc_msgSend(v8, "setPersonalStoreIdentifiersWithPersonID:block:", v12, v14);
  }

}

void sub_193C4E710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZL26_MPMLInitPropertyArtistMapv_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAdamID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193C4E7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];

  v13 = a2;
  v8 = a5;
  objc_msgSend(v13, "mediaLibrary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "uniqueIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_2;
  v16[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v16[4] = a3;
  v16[5] = a4;
  objc_msgSend(v8, "setLibraryIdentifiersWithDatabaseID:block:", v10, v16);

  v15[0] = v11;
  v15[1] = 3221225472;
  v15[2] = ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_3;
  v15[3] = &__block_descriptor_48_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v15[4] = a3;
  v15[5] = a4;
  objc_msgSend(v8, "setUniversalStoreIdentifiersWithBlock:", v15);
  objc_msgSend(v13, "personID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v12, "length"))
  {
    v14[0] = v11;
    v14[1] = 3221225472;
    v14[2] = ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_4;
    v14[3] = &__block_descriptor_48_e45_v16__0___MPMutablePersonalStoreIdentifiers__8l;
    v14[4] = a3;
    v14[5] = a4;
    objc_msgSend(v8, "setPersonalStoreIdentifiersWithPersonID:block:", v12, v14);
  }

}

void sub_193C4E95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAdamID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193C4EA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_193C4F534(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_20(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  void *v15;
  unsigned __int8 *v16;
  void *v17;
  unsigned __int8 *v18;
  void *v19;
  void *v20;
  void *v21;
  void *__p[2];
  char v24;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "longLongValue");

  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "mediaType");
  v10 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v10 + 5), a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "unsignedIntValue");

  if (v24 < 0)
    operator delete(__p[0]);
  v13 = MPMediaTypeForMLMediaType(v12);
  std::string::basic_string[abi:ne180100]<0>(__p, "availableArtworkToken");
  v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fetchableArtworkToken");
  v16 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v16)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v16 + 5), a4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fetchableArtworkSourceType");
  v18 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v18)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v18 + 5), a4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  objc_msgSend(v6, "mediaLibrary");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  _MPMLTranslatorCreateArtworkCatalogBlock(v9, v13, 0, 1, v15, v17, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

void sub_193C4FE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v17;

  _Unwind_Resume(a1);
}

void sub_193C4FFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_193C506F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void *MPChangeDetailOperationGenerateEx(uint64_t a1, uint64_t a2, unint64_t *a3, char *a4, void *a5)
{
  id v9;
  void *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  _BOOL4 v41;
  _BOOL4 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  const __CFString *v48;
  const __CFString *v49;
  unint64_t v50;
  uint64_t v51;
  const char *v52;
  const __CFString *v53;
  uint64_t v54;
  char v57;
  const __CFString *v58;
  const __CFString *v59;
  void *v60;
  unint64_t v61;
  void *v62;
  unint64_t v63;
  void *v64;
  void *v65;
  const char *v66;
  const __CFString *v67;
  void *v68;
  unint64_t v69;
  void *v70;
  const __CFString *v71;
  const __CFString *v72;
  void *v73;
  unint64_t v74;
  void *v75;
  const __CFString *v76;
  const char *v77;
  const __CFString *v78;
  void *v79;
  unint64_t v80;
  void *v81;
  const __CFString *v82;
  const char *v83;
  const __CFString *v84;
  void *v85;
  unint64_t v86;
  void *v87;
  const char *v88;
  const __CFString *v89;
  void *v90;
  unint64_t v91;
  void *v92;
  const __CFString *v93;
  const __CFString *v94;
  uint64_t v95;
  void *v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _DWORD *v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  _DWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  _DWORD *v128;
  _DWORD *v129;
  _DWORD *v130;
  _DWORD **v131;
  void *v132;
  _DWORD *v133;
  _DWORD **v134;
  _DWORD *v135;
  void *v136;
  uint64_t v137;
  _DWORD *v138;
  void *v139;
  uint64_t v140;
  _QWORD *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  id v149;
  char *v150;
  void *v151;
  void *v152;
  void *v153;
  char *v154;
  void *v155;
  void *v156;
  void *v157;
  char *v158;
  unint64_t v159;
  unint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  void *ptr;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *context;
  uint64_t v182;
  unint64_t v183;
  unsigned int (**v184)(void);
  unsigned int (**v185)(void);
  uint64_t v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  _BOOL4 v221;
  _BOOL4 v222;
  _BOOL4 v223;
  _BOOL4 v224;
  _BOOL4 v225;
  _BOOL4 v226;
  _BOOL4 v227;
  _BOOL4 v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  char v237;
  _BOOL4 v238;
  _BOOL4 v239;
  _BOOL4 v240;
  _BOOL4 v241;
  _BOOL4 v242;
  _BOOL4 v243;
  _BOOL4 v244;
  _BOOL4 v245;
  unint64_t v246;
  uint64_t v247;

  v9 = a5;
  v10 = v9;
  v160 = a3;
  if (!a3)
  {
    v149 = v9;
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v150 = a4;
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MPChangeDetailOperation * _Nullable MPChangeDetailOperationGenerateEx(NSInteger, NSInteger, size_t * _Nonnull, BOOL * _Nonnull, __strong MPChangeDetailOperationIsEqualBlock _Nonnull)");
    v152 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v151, "handleFailureInFunction:file:lineNumber:description:", v152, CFSTR("MPChangeDetails.m"), 661, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("operationCount"));

    v10 = v149;
    a4 = v150;
    if (v149)
      goto LABEL_3;
LABEL_198:
    v153 = v10;
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v154 = a4;
    v155 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MPChangeDetailOperation * _Nullable MPChangeDetailOperationGenerateEx(NSInteger, NSInteger, size_t * _Nonnull, BOOL * _Nonnull, __strong MPChangeDetailOperationIsEqualBlock _Nonnull)");
    v156 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v155, "handleFailureInFunction:file:lineNumber:description:", v156, CFSTR("MPChangeDetails.m"), 662, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("isEqualBlock"));

    v10 = v153;
    a4 = v154;
    goto LABEL_3;
  }
  if (!v9)
    goto LABEL_198;
LABEL_3:
  v11 = 0;
  if (a1 > 100000 || a2 > 100000)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    if (a2 | a1)
    {
      v157 = v10;
      v158 = a4;
      v185 = v10;
      v13 = (void *)MEMORY[0x19403A624]();
      if (a1 >= a2)
        v14 = a2;
      else
        v14 = a1;
      if (v14 < 1)
      {
        v179 = 0;
      }
      else
      {
        v15 = 0;
        while (1)
        {
          v16 = v15;
          if (!v185[2]())
            break;
          v15 = v16 + 1;
          if (v14 == v16 + 1)
          {
            v179 = v14;
            goto LABEL_17;
          }
        }
        v179 = v16;
      }
LABEL_17:
      objc_autoreleasePoolPop(v13);
      v17 = -1;
      v18 = (void *)MEMORY[0x19403A624]();
      while (1)
      {
        v19 = v17;
        v20 = a2 + v17;
        v21 = a1 + v19;
        v22 = a1 + v19 >= v20 ? v20 : a1 + v19;
        if (v179 > v22)
          break;
        v23 = ((uint64_t (*)(unsigned int (**)(void), uint64_t, uint64_t))v185[2])(v185, a1 + v19, v20);
        v17 = v19 - 1;
        if ((v23 & 1) == 0)
        {
          v20 = a2 + v19;
          v21 = a1 + v19;
          break;
        }
      }
      objc_autoreleasePoolPop(v18);
      if (a1 >= 1)
        v24 = 1;
      else
        v24 = a1;
      if (a2 >= 1)
        v25 = 1;
      else
        v25 = a2;

      v171 = v20 + v25 - v179;
      v173 = v21 + v24 - v179;
      v27 = v173 == 1 && v20 + v25 - v179 == 1;
      v12 = malloc_type_malloc(8 * (a2 + a1), 0x100004000313F17uLL);
      v28 = a2 > 0;
      v29 = a1 > 0;
      if (a1 <= 0 && a2 < 1)
      {
        v11 = 0;
LABEL_39:
        v10 = v157;
        a4 = v158;
        goto LABEL_40;
      }
      v31 = v24;
      v32 = 0;
      v33 = v27;
      v34 = 0;
      v35 = 0;
      v36 = v25;
      v37 = 0;
      v38 = 0;
      v40 = v171;
      v39 = v173;
      if (v171)
        v41 = v173 == 0;
      else
        v41 = 0;
      if (v173)
        v42 = v171 == 0;
      else
        v42 = 0;
      v43 = v21 + v31;
      v44 = v20 + v36;
      v11 = 0;
      v45 = v179;
      v46 = ((unint64_t)(v179 & 0x7FFFFFFF) << 31) | 0x8000000000000000;
      v47 = 0x1E0CB3000uLL;
      v48 = CFSTR("Invalid operation type MPChangeDetailOperationTypeInsert");
      v49 = CFSTR("Invalid operation type MPChangeDetailOperationTypeReplace");
      v50 = 0x1E0CB3000uLL;
      v51 = !v33;
      v52 = "MPChangeDetailOperation * _Nullable MPChangeDetailOperationGenerateEx(NSInteger, NSInteger, size_t * _Nonnul"
            "l, BOOL * _Nonnull, __strong MPChangeDetailOperationIsEqualBlock _Nonnull)";
      v53 = CFSTR("Not enough operationCapacity");
      v54 = a2 + a1;
      ptr = v12;
      while (1)
      {
        if (v11 >= v54)
        {
          v230 = v35;
          v239 = v41;
          v222 = v42;
          v204 = v44;
          v213 = v43;
          v196 = v46;
          v188 = v51;
          objc_msgSend(*(id *)(v47 + 1160), "currentHandler");
          v163 = v11;
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(v50 + 2368), "stringWithUTF8String:", "MPChangeDetailOperation * _Nullable MPChangeDetailOperationGenerateEx(NSInteger, NSInteger, size_t * _Nonnull, BOOL * _Nonnull, __strong MPChangeDetailOperationIsEqualBlock _Nonnull)");
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v64, "handleFailureInFunction:file:lineNumber:description:", v65, CFSTR("MPChangeDetails.m"), 685, CFSTR("Not enough operationCapacity"));

          v50 = 0x1E0CB3000;
          v53 = CFSTR("Not enough operationCapacity");
          v52 = "MPChangeDetailOperation * _Nullable MPChangeDetailOperationGenerateEx(NSInteger, NSInteger, size_t * _No"
                "nnull, BOOL * _Nonnull, __strong MPChangeDetailOperationIsEqualBlock _Nonnull)";
          v51 = v188;
          v49 = CFSTR("Invalid operation type MPChangeDetailOperationTypeReplace");
          v48 = CFSTR("Invalid operation type MPChangeDetailOperationTypeInsert");
          v46 = v196;
          v44 = v204;
          v43 = v213;
          v42 = v222;
          v35 = v230;
          v41 = v239;
          v54 = a2 + a1;
          v11 = v163;
          v40 = v171;
          v47 = 0x1E0CB3000;
          v39 = v173;
          v12 = ptr;
          v45 = v179;
          if (v179)
            goto LABEL_54;
        }
        else if (v45)
        {
          goto LABEL_54;
        }
        if (v39 > v34 && !v40)
          goto LABEL_93;
        if (v40 > v32 && !v39)
        {
LABEL_59:
          if (!v28)
          {
            v233 = v35;
            v242 = v41;
            v225 = v42;
            v207 = v44;
            v216 = v43;
            v199 = v46;
            v76 = v48;
            v191 = v51;
            v77 = v52;
            v78 = v53;
            objc_msgSend(*(id *)(v47 + 1160), "currentHandler");
            v166 = v11;
            v79 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(v50 + 2368), "stringWithUTF8String:", "void _MPChangeDetailsSafeAddOperation(NSInteger, NSInteger, MPChangeDetailOperation *, size_t, MPChangeDetailOperationType, uint32_t, uint32_t)");
            v80 = v50;
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v79, "handleFailureInFunction:file:lineNumber:description:", v81, CFSTR("MPChangeDetails.m"), 647, v76);

            v50 = v80;
            v53 = v78;
            v52 = v77;
            v51 = v191;
            v49 = CFSTR("Invalid operation type MPChangeDetailOperationTypeReplace");
            v48 = v76;
            v46 = v199;
            v44 = v207;
            v43 = v216;
            v42 = v225;
            v35 = v233;
            v41 = v242;
            v54 = a2 + a1;
            v11 = v166;
            v40 = v171;
            v47 = 0x1E0CB3000;
            v39 = v173;
            v12 = ptr;
            v45 = v179;
          }
          *((_QWORD *)v12 + v11++) = v38 & 0x7FFFFFFF | 0xC000000000000000;
LABEL_84:
          ++v38;
          goto LABEL_103;
        }
LABEL_54:
        if (v45 > v34 && v45 > v32)
        {
          if ((uint64_t)v32 >= a2 || (uint64_t)v34 >= a1)
          {
            v232 = v35;
            v241 = v41;
            v224 = v42;
            v206 = v44;
            v215 = v43;
            v198 = v46;
            v71 = v49;
            v190 = v51;
            v72 = v53;
            objc_msgSend(*(id *)(v47 + 1160), "currentHandler");
            v165 = v11;
            v73 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(v50 + 2368), "stringWithUTF8String:", "void _MPChangeDetailsSafeAddOperation(NSInteger, NSInteger, MPChangeDetailOperation *, size_t, MPChangeDetailOperationType, uint32_t, uint32_t)");
            v74 = v50;
            v75 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v73, "handleFailureInFunction:file:lineNumber:description:", v75, CFSTR("MPChangeDetails.m"), 650, v71);

            v50 = v74;
            v53 = v72;
            v52 = "MPChangeDetailOperation * _Nullable MPChangeDetailOperationGenerateEx(NSInteger, NSInteger, size_t * _"
                  "Nonnull, BOOL * _Nonnull, __strong MPChangeDetailOperationIsEqualBlock _Nonnull)";
            v51 = v190;
            v49 = v71;
            v48 = CFSTR("Invalid operation type MPChangeDetailOperationTypeInsert");
            v46 = v198;
            v44 = v206;
            v43 = v215;
            v42 = v224;
            v35 = v232;
            v41 = v241;
            v54 = a2 + a1;
            v11 = v165;
            v40 = v171;
            v47 = 0x1E0CB3000;
            v39 = v173;
            v12 = ptr;
            v45 = v179;
          }
          *((_QWORD *)v12 + v11++) = v38 & 0x7FFFFFFF | (v34 << 31) | 0x4000000000000000;
          ++v37;
          goto LABEL_84;
        }
        if (v41)
        {
          if (v44 < a2 && v44 > v32)
            goto LABEL_59;
        }
        else if (v43 < a1 && v43 > v34 && v42)
        {
          goto LABEL_93;
        }
        if (v43 <= v34 && v29)
        {
          if ((uint64_t)v32 >= a2)
            goto LABEL_88;
          goto LABEL_86;
        }
        if (v44 > v32 || !v28)
        {
          if (!v29 && v28)
          {
            if (!v28)
            {
              v234 = v35;
              v243 = v41;
              v226 = v42;
              v208 = v44;
              v217 = v43;
              v200 = v46;
              v82 = v48;
              v192 = v51;
              v83 = v52;
              v84 = v53;
              objc_msgSend(*(id *)(v47 + 1160), "currentHandler");
              v167 = v11;
              v85 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(*(id *)(v50 + 2368), "stringWithUTF8String:", "void _MPChangeDetailsSafeAddOperation(NSInteger, NSInteger, MPChangeDetailOperation *, size_t, MPChangeDetailOperationType, uint32_t, uint32_t)");
              v86 = v50;
              v87 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v85, "handleFailureInFunction:file:lineNumber:description:", v87, CFSTR("MPChangeDetails.m"), 647, v82);

              v50 = v86;
              v53 = v84;
              v52 = v83;
              v51 = v192;
              v49 = CFSTR("Invalid operation type MPChangeDetailOperationTypeReplace");
              v48 = v82;
              v46 = v200;
              v44 = v208;
              v43 = v217;
              v42 = v226;
              v35 = v234;
              v41 = v243;
              v54 = a2 + a1;
              v11 = v167;
              v40 = v171;
              v47 = 0x1E0CB3000;
              v39 = v173;
              v12 = ptr;
            }
            *((_QWORD *)v12 + v11++) = v38 & 0x7FFFFFFF | 0xC000000000000000;
            goto LABEL_102;
          }
          if (!v28 && v29)
          {
            v45 = v179;
LABEL_93:
            if (!v29)
            {
              v231 = v35;
              v240 = v41;
              v223 = v42;
              v205 = v44;
              v214 = v43;
              v197 = v46;
              v189 = v51;
              v66 = v52;
              v67 = v53;
              objc_msgSend(*(id *)(v47 + 1160), "currentHandler");
              v164 = v11;
              v68 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(*(id *)(v50 + 2368), "stringWithUTF8String:", "void _MPChangeDetailsSafeAddOperation(NSInteger, NSInteger, MPChangeDetailOperation *, size_t, MPChangeDetailOperationType, uint32_t, uint32_t)");
              v69 = v50;
              v70 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v68, "handleFailureInFunction:file:lineNumber:description:", v70, CFSTR("MPChangeDetails.m"), 644, CFSTR("Invalid operation type MPChangeDetailOperationTypeDelete"));

              v50 = v69;
              v53 = v67;
              v52 = v66;
              v51 = v189;
              v49 = CFSTR("Invalid operation type MPChangeDetailOperationTypeReplace");
              v48 = CFSTR("Invalid operation type MPChangeDetailOperationTypeInsert");
              v46 = v197;
              v44 = v205;
              v43 = v214;
              v42 = v223;
              v35 = v231;
              v41 = v240;
              v54 = a2 + a1;
              v11 = v164;
              v40 = v171;
              v47 = 0x1E0CB3000;
              v39 = v173;
              v12 = ptr;
              v45 = v179;
            }
            *((_QWORD *)v12 + v11++) = ((v34 & 0x7FFFFFFF) << 31) | 0x8000000000000000;
            ++v37;
            goto LABEL_103;
          }
          v45 = v179;
          if (v179 == v34)
            v57 = v51;
          else
            v57 = 1;
          if ((v57 & 1) == 0 && v179 == v32)
          {
            if (!v29)
            {
              v235 = v35;
              v244 = v41;
              v227 = v42;
              v209 = v44;
              v218 = v43;
              v201 = v46;
              v193 = v51;
              v88 = v52;
              v89 = v53;
              objc_msgSend(*(id *)(v47 + 1160), "currentHandler");
              v168 = v11;
              v90 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(*(id *)(v50 + 2368), "stringWithUTF8String:", "void _MPChangeDetailsSafeAddOperation(NSInteger, NSInteger, MPChangeDetailOperation *, size_t, MPChangeDetailOperationType, uint32_t, uint32_t)");
              v91 = v50;
              v92 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v90, "handleFailureInFunction:file:lineNumber:description:", v92, CFSTR("MPChangeDetails.m"), 644, CFSTR("Invalid operation type MPChangeDetailOperationTypeDelete"));

              v50 = v91;
              v53 = v89;
              v52 = v88;
              v51 = v193;
              v49 = CFSTR("Invalid operation type MPChangeDetailOperationTypeReplace");
              v48 = CFSTR("Invalid operation type MPChangeDetailOperationTypeInsert");
              v46 = v201;
              v44 = v209;
              v43 = v218;
              v42 = v227;
              v35 = v235;
              v41 = v244;
              v54 = a2 + a1;
              v11 = v168;
              v40 = v171;
              v47 = 0x1E0CB3000;
              v39 = v173;
              v12 = ptr;
            }
            *((_QWORD *)v12 + v11) = v46;
            if (!v28)
            {
              v236 = v35;
              v245 = v41;
              v228 = v42;
              v210 = v44;
              v219 = v43;
              v202 = v46;
              v93 = v48;
              v94 = v49;
              v95 = v51;
              objc_msgSend(*(id *)(v47 + 1160), "currentHandler");
              v169 = v11;
              v96 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(*(id *)(v50 + 2368), "stringWithUTF8String:", "void _MPChangeDetailsSafeAddOperation(NSInteger, NSInteger, MPChangeDetailOperation *, size_t, MPChangeDetailOperationType, uint32_t, uint32_t)");
              v97 = v50;
              v98 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v96, "handleFailureInFunction:file:lineNumber:description:", v98, CFSTR("MPChangeDetails.m"), 647, v93);

              v50 = v97;
              v53 = CFSTR("Not enough operationCapacity");
              v52 = "MPChangeDetailOperation * _Nullable MPChangeDetailOperationGenerateEx(NSInteger, NSInteger, size_t *"
                    " _Nonnull, BOOL * _Nonnull, __strong MPChangeDetailOperationIsEqualBlock _Nonnull)";
              v51 = v95;
              v49 = v94;
              v48 = v93;
              v46 = v202;
              v44 = v210;
              v43 = v219;
              v42 = v228;
              v35 = v236;
              v41 = v245;
              v54 = a2 + a1;
              v11 = v169;
              v40 = v171;
              v47 = 0x1E0CB3000;
              v39 = v173;
              v12 = ptr;
            }
            v63 = v11 + 1;
            v11 += 2;
            *((_QWORD *)v12 + v63) = v38 & 0x7FFFFFFF | 0xC000000000000000;
            goto LABEL_101;
          }
          v37 += v39;
          v34 = v37;
          v38 += v40;
          v32 = v38;
          v28 = v38 < a2;
          v35 = 1;
          v29 = v37 < a1;
          if (v37 >= a1 && v38 >= a2)
            goto LABEL_110;
        }
        else
        {
          if ((uint64_t)v34 >= a1)
          {
LABEL_88:
            v229 = v35;
            v238 = v41;
            v221 = v42;
            v203 = v44;
            v212 = v43;
            v195 = v46;
            v58 = v49;
            v187 = v51;
            v59 = v53;
            objc_msgSend(*(id *)(v47 + 1160), "currentHandler");
            v162 = v11;
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(v50 + 2368), "stringWithUTF8String:", "void _MPChangeDetailsSafeAddOperation(NSInteger, NSInteger, MPChangeDetailOperation *, size_t, MPChangeDetailOperationType, uint32_t, uint32_t)");
            v61 = v50;
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v60, "handleFailureInFunction:file:lineNumber:description:", v62, CFSTR("MPChangeDetails.m"), 650, v58);

            v50 = v61;
            v53 = v59;
            v52 = "MPChangeDetailOperation * _Nullable MPChangeDetailOperationGenerateEx(NSInteger, NSInteger, size_t * _"
                  "Nonnull, BOOL * _Nonnull, __strong MPChangeDetailOperationIsEqualBlock _Nonnull)";
            v51 = v187;
            v49 = v58;
            v48 = CFSTR("Invalid operation type MPChangeDetailOperationTypeInsert");
            v46 = v195;
            v44 = v203;
            v43 = v212;
            v42 = v221;
            v35 = v229;
            v41 = v238;
            v54 = a2 + a1;
            v11 = v162;
            v40 = v171;
            v47 = 0x1E0CB3000;
            v39 = v173;
            v12 = ptr;
          }
LABEL_86:
          *((_QWORD *)v12 + v11++) = v38 & 0x7FFFFFFF | (v34 << 31) | 0x4000000000000000;
LABEL_101:
          ++v37;
LABEL_102:
          ++v38;
          v45 = v179;
LABEL_103:
          v34 = v37;
          v32 = v38;
          v28 = v38 < a2;
          v29 = v37 < a1;
          if (v37 >= a1 && v38 >= a2)
          {
            if ((v35 & 1) == 0)
              goto LABEL_39;
LABEL_110:
            v99 = 250;
            if (v54 < 5001)
              v99 = 500;
            if (v54 < 1100)
              v99 = 1100;
            v159 = v99;
            v30 = 1;
            if (!(v39 | v40))
            {
LABEL_195:
              v10 = v157;
              a4 = v158;
              goto LABEL_196;
            }
            v100 = v179;
            v177 = v179;
            v101 = v160;
            while (2)
            {
              v170 = v11;
              v172 = v40;
              v102 = v159;
              v174 = v39;
              if (v159 >= v39)
                v103 = v39;
              else
                v103 = v159;
              if (v159 >= v40)
                v102 = v40;
              v178 = v102;
              v180 = v100;
              v184 = v185;
              v161 = MEMORY[0x19403A624]();
              v104 = v103 + 2;
              v105 = malloc_type_calloc(v103 + 2, 8uLL, 0x2004093837F09uLL);
              v106 = v105;
              v176 = v103;
              if (v103)
              {
                v107 = v105 + 1;
                v108 = (_DWORD *)*v105;
                v109 = v177 << 31;
                v110 = v176;
                do
                {
                  if (v108)
                  {
                    v111 = v108[2] + 1;
                    ++v108[3];
                  }
                  else
                  {
                    v111 = 1;
                  }
                  v112 = malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
                  *(_QWORD *)v112 = v109 & 0x3FFFFFFF80000000 | 0x8000000000000000;
                  v112[2] = v111;
                  v112[3] = 1;
                  *((_QWORD *)v112 + 2) = v108;
                  v109 += 0x80000000;
                  v108 = v112;
                  *v107++ = v112;
                  --v110;
                }
                while (v110);
              }
              if (v178)
              {
                v220 = 0;
                v113 = v176 + 1;
                v246 = v176;
                v114 = v180;
                v115 = 1;
                while (1)
                {
                  context = (void *)MEMORY[0x19403A624]();
                  v237 = 0;
                  v116 = 0;
                  v182 = v115;
                  v211 = (v115 - 1) * v113;
                  v186 = v114 & 0x7FFFFFFF;
                  v183 = ((_DWORD)v115 - 1 + (_DWORD)v180) & 0x7FFFFFFF | 0xC000000000000000;
                  v194 = v114;
                  v117 = (v177 << 31) - 0x80000000;
                  v247 = v177;
                  do
                  {
                    v118 = (v246 + v116 + 1) % v104;
                    if (v116)
                    {
                      v119 = v106[(v220 + v116 - 1) % (uint64_t)v104];
                      if ((v237 & 1) == 0
                        && ((unsigned int (*)(unsigned int (**)(void), uint64_t, uint64_t))v185[2])(v184, v247, v194))
                      {
                        if (v119)
                        {
                          v120 = *(_DWORD *)(v119 + 8);
                          ++*(_DWORD *)(v119 + 12);
                        }
                        else
                        {
                          v120 = 0;
                        }
                        v129 = malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
                        *(_QWORD *)v129 = v186 | v117 & 0x3FFFFFFF80000000 | 0x4000000000000000;
                        v237 = 1;
                        goto LABEL_167;
                      }
                      v121 = v106[(v246 + v116) % v104];
                      if (v121)
                        v122 = *(_DWORD *)(v121 + 8);
                      else
                        v122 = 0;
                      v125 = v106[(v220 + v116) % v104];
                      if (v125)
                      {
                        v126 = *(_DWORD *)(v125 + 8);
                        if (v119)
                          goto LABEL_142;
LABEL_144:
                        v127 = 0;
                      }
                      else
                      {
                        v126 = 0;
                        if (!v119)
                          goto LABEL_144;
LABEL_142:
                        v127 = *(_DWORD *)(v119 + 8);
                      }
                      if (v126 >= v127)
                        v126 = v127;
                      if (v122 >= v126)
                        v122 = v126;
                      if (v121)
                      {
                        if (*(_DWORD *)(v121 + 8) == v122)
                        {
                          v120 = v122 + 1;
                          ++*(_DWORD *)(v121 + 12);
LABEL_162:
                          v129 = malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
                          *(_QWORD *)v129 = v117 & 0x3FFFFFFF80000000 | 0x8000000000000000;
                          v119 = v121;
                          goto LABEL_167;
                        }
                      }
                      else if (!v122)
                      {
                        v120 = 1;
                        goto LABEL_162;
                      }
                      if (v125)
                      {
                        v113 = v176 + 1;
                        if (*(_DWORD *)(v125 + 8) == v122)
                        {
                          v120 = v122 + 1;
                          ++*(_DWORD *)(v125 + 12);
                          goto LABEL_172;
                        }
LABEL_159:
                        if (v119)
                        {
                          v120 = *(_DWORD *)(v119 + 8) + 2;
                          ++*(_DWORD *)(v119 + 12);
                        }
                        else
                        {
                          v120 = 2;
                        }
                        v129 = malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
                        *(_QWORD *)v129 = v186 | v117 & 0x3FFFFFFF80000000 | 0x4000000000000000;
LABEL_167:
                        v113 = v176 + 1;
                      }
                      else
                      {
                        v113 = v176 + 1;
                        if (v122)
                          goto LABEL_159;
                        v120 = 1;
LABEL_172:
                        v129 = malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
                        *(_QWORD *)v129 = v183;
                        v119 = v125;
                      }
                      v129[2] = v120;
                      v129[3] = 1;
                      *((_QWORD *)v129 + 2) = v119;
                      _MPChangeDetailOperationNodeRelease((_DWORD *)v106[v118]);
                      v106[v118] = v129;
                      ++v247;
                      goto LABEL_169;
                    }
                    v123 = v106[v211 % v104];
                    if (v123)
                    {
                      v124 = *(_DWORD *)(v123 + 8) + 1;
                      ++*(_DWORD *)(v123 + 12);
                    }
                    else
                    {
                      v124 = 1;
                    }
                    v128 = malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
                    *(_QWORD *)v128 = v186 | 0xC000000000000000;
                    v128[2] = v124;
                    v128[3] = 1;
                    *((_QWORD *)v128 + 2) = v123;
                    _MPChangeDetailOperationNodeRelease((_DWORD *)v106[v118]);
                    v106[v118] = v128;
LABEL_169:
                    ++v116;
                    v117 += 0x80000000;
                  }
                  while (v113 != v116);
                  objc_autoreleasePoolPop(context);
                  v114 = v194 + 1;
                  v115 = v182 + 1;
                  v246 += v113;
                  v220 += v113;
                  if (v182 == v178)
                  {
                    v130 = (_DWORD *)v106[(v176 + v178 * v113) % v104];
                    if (v130)
                      ++v130[3];
                    v131 = (_DWORD **)v106;
                    v101 = v160;
                    v132 = (void *)v161;
                    do
                    {
                      v133 = *v131++;
                      _MPChangeDetailOperationNodeRelease(v133);
                      --v104;
                    }
                    while (v104);
                    goto LABEL_183;
                  }
                }
              }
              v130 = (_DWORD *)v106[v176];
              if (v130)
                ++v130[3];
              v134 = (_DWORD **)v106;
              v132 = (void *)v161;
              do
              {
                v135 = *v134++;
                _MPChangeDetailOperationNodeRelease(v135);
                --v104;
              }
              while (v104);
LABEL_183:
              free(v106);
              objc_autoreleasePoolPop(v132);

              v136 = ptr;
              if (ptr)
              {
                if (v130)
                  goto LABEL_185;
LABEL_193:
                objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
                v144 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MPChangeDetailOperation *_MPChangeDetailOperationsFromOperationList(MPChangeDetailOperation *, size_t, MPChangeDetailOperationNode *, size_t *)");
                v145 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v144, "handleFailureInFunction:file:lineNumber:description:", v145, CFSTR("MPChangeDetails.m"), 959, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("startNode"));

                v136 = ptr;
                if (!v101)
                  goto LABEL_194;
              }
              else
              {
                objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
                v142 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MPChangeDetailOperation *_MPChangeDetailOperationsFromOperationList(MPChangeDetailOperation *, size_t, MPChangeDetailOperationNode *, size_t *)");
                v143 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v142, "handleFailureInFunction:file:lineNumber:description:", v143, CFSTR("MPChangeDetails.m"), 958, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("existingOperations"));

                v136 = 0;
                if (!v130)
                  goto LABEL_193;
LABEL_185:
                if (!v101)
                {
LABEL_194:
                  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
                  v146 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MPChangeDetailOperation *_MPChangeDetailOperationsFromOperationList(MPChangeDetailOperation *, size_t, MPChangeDetailOperationNode *, size_t *)");
                  v147 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v146, "handleFailureInFunction:file:lineNumber:description:", v147, CFSTR("MPChangeDetails.m"), 960, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("operationCount"));

                  v136 = ptr;
                }
              }
              v137 = 0;
              v138 = v130;
              do
              {
                ++v137;
                v138 = (_DWORD *)*((_QWORD *)v138 + 2);
              }
              while (v138);
              v139 = malloc_type_realloc(v136, 8 * (v137 + v170), 0x100004000313F17uLL);
              v140 = 0;
              ptr = v139;
              v141 = v130;
              do
              {
                *((_QWORD *)v139 + v170 + v140) = *v141;
                v141 = (_QWORD *)v141[2];
                ++v140;
              }
              while (v137 != v140);
              *v101 = v137 + v170;
              _MPChangeDetailOperationNodeRelease(v130);
              v177 += v176;
              v39 = v174 - v176;
              v100 = v178 + v180;
              v40 = v172 - v178;
              v11 = v137 + v170;
              if (!((v174 - v176) | (v172 - v178)))
              {
                v30 = 1;
                goto LABEL_195;
              }
              continue;
            }
          }
        }
      }
    }
  }
LABEL_40:
  ptr = v12;
  v30 = 0;
  *v160 = v11;
LABEL_196:
  *a4 = v30;

  return ptr;
}

void sub_193C52370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_193C525B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193C5AEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *RadioLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!RadioLibraryCore_frameworkLibrary)
    RadioLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)RadioLibraryCore_frameworkLibrary;
  if (!RadioLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *RadioLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("MPRemoteRadioController.m"), 29, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void __getRadioRecentStationsControllerClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  RadioLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("RadioRecentStationsController");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getRadioRecentStationsControllerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getRadioRecentStationsControllerClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("MPRemoteRadioController.m"), 31, CFSTR("Unable to find class %s"), "RadioRecentStationsController");

    __break(1u);
  }
}

void __getRadioAvailabilityControllerClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  RadioLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("RadioAvailabilityController");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getRadioAvailabilityControllerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getRadioAvailabilityControllerClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("MPRemoteRadioController.m"), 30, CFSTR("Unable to find class %s"), "RadioAvailabilityController");

    __break(1u);
  }
}

void *MediaPlaybackCoreLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!MediaPlaybackCoreLibraryCore_frameworkLibrary)
    MediaPlaybackCoreLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)MediaPlaybackCoreLibraryCore_frameworkLibrary;
  if (!MediaPlaybackCoreLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *MediaPlaybackCoreLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("MPRemoteRadioController.m"), 24, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void sub_193C5D59C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193C5D9C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  __break(1u);
}

void sub_193C5DC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_193C5DD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v24;
  void *v25;
  void *v26;
  void **p_p;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;

  if (a2 == 2)
  {
    v24 = __cxa_begin_catch(a1);
    v25 = (void *)MEMORY[0x1E0C99DA0];
    v26 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a9);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v24 + 24))(&__p, v24, &a9);
    if (a21 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v26, "stringWithUTF8String:", p_p);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v28, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();

    if (a21 < 0)
      operator delete(__p);
    objc_exception_throw(v29);
  }
  if (a2 == 1)
  {
    v30 = __cxa_begin_catch(a1);
    v31 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v32, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_88c75_ZTSNSt3__113unordered_setIyNS_4hashIyEENS_8equal_toIyEENS_9allocatorIyEEEE128c69_ZTSNSt3__16vectorIPN6mlcore17ModelPropertyBaseENS_9allocatorIS3_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(_QWORD *)(a1 + 136) = v2;
    operator delete(v2);
  }
  return std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::~__hash_table(a1 + 88);
}

uint64_t __destroy_helper_block_ea8_80c75_ZTSNSt3__113unordered_setIxNS_4hashIxEENS_8equal_toIxEENS_9allocatorIxEEEE120c69_ZTSNSt3__16vectorIPN6mlcore17ModelPropertyBaseENS_9allocatorIS3_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  return std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::~__hash_table(a1 + 80);
}

void __destroy_helper_block_ea8_80c69_ZTSNSt3__16vectorIPN6mlcore17ModelPropertyBaseENS_9allocatorIS3_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
}

uint64_t __destroy_helper_block_ea8_80c129_ZTSNSt3__113unordered_setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_IS6_EEEE120c69_ZTSNSt3__16vectorIPN6mlcore17ModelPropertyBaseENS_9allocatorIS3_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 80);
}

_QWORD *__copy_helper_block_ea8_88c75_ZTSNSt3__113unordered_setIyNS_4hashIyEENS_8equal_toIyEENS_9allocatorIyEEEE128c69_ZTSNSt3__16vectorIPN6mlcore17ModelPropertyBaseENS_9allocatorIS3_EEEE(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = a1;
  std::unordered_set<unsigned long long>::unordered_set((uint64_t)(a1 + 11), a2 + 88);
  v3[16] = 0;
  v3[17] = 0;
  v3 += 16;
  v3[2] = 0;
  return std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(v3, *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
}

void sub_193C5E3AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_80c75_ZTSNSt3__113unordered_setIxNS_4hashIxEENS_8equal_toIxEENS_9allocatorIxEEEE120c69_ZTSNSt3__16vectorIPN6mlcore17ModelPropertyBaseENS_9allocatorIS3_EEEE(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = a1;
  std::unordered_set<long long>::unordered_set((uint64_t)(a1 + 10), a2 + 80);
  v3[15] = 0;
  v3[16] = 0;
  v3 += 15;
  v3[2] = 0;
  return std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(v3, *(const void **)(a2 + 120), *(_QWORD *)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3);
}

void sub_193C5E414(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_80c69_ZTSNSt3__16vectorIPN6mlcore17ModelPropertyBaseENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v2 = (_QWORD *)(a1 + 80);
  v2[2] = 0;
  return std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(v2, *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
}

_QWORD *__copy_helper_block_ea8_80c129_ZTSNSt3__113unordered_setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_IS6_EEEE120c69_ZTSNSt3__16vectorIPN6mlcore17ModelPropertyBaseENS_9allocatorIS3_EEEE(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = a1;
  std::unordered_set<std::string>::unordered_set((uint64_t)(a1 + 10), a2 + 80);
  v3[15] = 0;
  v3[16] = 0;
  v3 += 15;
  v3[2] = 0;
  return std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(v3, *(const void **)(a2 + 120), *(_QWORD *)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3);
}

void sub_193C5E498(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_193C60F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_193C6159C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,void *a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  *(_QWORD *)(v33 - 96) = &a29;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  v36 = *(void **)(v33 - 176);
  if (v36)
    operator delete(v36);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v33 - 128);
  *(_QWORD *)(v33 - 176) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 176));
  if (a2 == 2)
  {
    v37 = __cxa_begin_catch(a1);
    v38 = (void *)MEMORY[0x1E0C99DA0];
    v39 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a10);
    (*(void (**)(void *, char *))(*(_QWORD *)v37 + 24))(v37, &a10);
    if (*(char *)(v33 - 153) >= 0)
      v40 = v33 - 176;
    else
      v40 = *(_QWORD *)(v33 - 176);
    objc_msgSend(v39, "stringWithUTF8String:", v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v41, 0);
    v42 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v33 - 153) < 0)
      operator delete(*(void **)(v33 - 176));
    objc_exception_throw(v42);
  }
  if (a2 == 1)
  {
    v43 = __cxa_begin_catch(a1);
    v44 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v43 + 16))(v43));
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v45, 0);
    v46 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v46);
  }
  _Unwind_Resume(a1);
}

void sub_193C617F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193C6184C(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x193C61854);
  __clang_call_terminate(a1);
}

void sub_193C61A10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_193C62058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,void *a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  uint64_t v33;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  *(_QWORD *)(v33 - 96) = &a29;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  v36 = *(void **)(v33 - 176);
  if (v36)
    operator delete(v36);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v33 - 128);
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a2 == 2)
  {
    v37 = __cxa_begin_catch(a1);
    v38 = (void *)MEMORY[0x1E0C99DA0];
    v39 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&__p);
    (*(void (**)(void *, void **))(*(_QWORD *)v37 + 24))(v37, &__p);
    if (*(char *)(v33 - 153) >= 0)
      v40 = v33 - 176;
    else
      v40 = *(_QWORD *)(v33 - 176);
    objc_msgSend(v39, "stringWithUTF8String:", v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v41, 0);
    v42 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v33 - 153) < 0)
      operator delete(*(void **)(v33 - 176));
    objc_exception_throw(v42);
  }
  if (a2 == 1)
  {
    v43 = __cxa_begin_catch(a1);
    v44 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v43 + 16))(v43));
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v45, 0);
    v46 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v46);
  }
  _Unwind_Resume(a1);
}

void sub_193C622B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193C62308(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x193C62310);
  __clang_call_terminate(a1);
}

uint64_t std::__shared_ptr_emplace<mlcore::ComparisonPredicate<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<mlcore::ComparisonPredicate<std::string>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::unordered_set<unsigned long long>::unordered_set(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(a1, i[2], i[2]);
  return a1;
}

void sub_193C625A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    do
    {
      v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 16));
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          v2 = v7;
          if (v7 >= v9)
            v2 = v7 % v9;
        }
        else
        {
          v2 = (v9 - 1) & v7;
        }
        v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v2);
        if (v12)
        {
          for (i = *v12; i; i = *(unsigned __int8 **)i)
          {
            v14 = *((_QWORD *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v5 + 16))
                goto LABEL_44;
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9)
                  v14 %= v9;
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2)
                break;
            }
          }
        }
      }
      v15 = operator new(0x28uLL);
      *v15 = 0;
      v15[1] = v8;
      v16 = (std::string *)(v15 + 2);
      if ((char)v5[39] < 0)
      {
        std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)v5 + 2), *((_QWORD *)v5 + 3));
      }
      else
      {
        v17 = *((_OWORD *)v5 + 1);
        v15[4] = *((_QWORD *)v5 + 4);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v19 = *(float *)(a1 + 32);
      if (!v9 || (float)(v19 * (float)v9) < v18)
      {
        v20 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3)
          v20 = 1;
        v21 = v20 | (2 * v9);
        v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22)
          v23 = v22;
        else
          v23 = v21;
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v23);
        v9 = *(_QWORD *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v2 = v8 % v9;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v9 - 1) & v8;
        }
      }
      v24 = *(_QWORD *)a1;
      v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v25)
      {
        *v15 = *v25;
      }
      else
      {
        *v15 = *v6;
        *v6 = v15;
        *(_QWORD *)(v24 + 8 * v2) = v6;
        if (!*v15)
          goto LABEL_43;
        v26 = *(_QWORD *)(*v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v26 >= v9)
            v26 %= v9;
        }
        else
        {
          v26 &= v9 - 1;
        }
        v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
      }
      *v25 = v15;
LABEL_43:
      ++*(_QWORD *)(a1 + 24);
LABEL_44:
      v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  return a1;
}

void sub_193C62818(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x28uLL);
  *v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  v15[4] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v15 = *v23;
LABEL_38:
    *v23 = v15;
    goto LABEL_39;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    v24 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_193C62A74(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void sub_193C62D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193C64ADC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 104));
  _Unwind_Resume(a1);
}

uint64_t MPMusicPlayerPlayParameters.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  MPMusicPlayerPlayParameters_optional *v40;
  void *v41;
  void *v42;
  id v43;
  Class isa;
  _QWORD *v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  _OWORD v60[2];
  __int128 v61;
  __int128 v62;
  _QWORD *v63;

  type metadata accessor for KeyedDecodingContainer<MPMusicPlayerPlayParameters.DynamicCodingKey>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<MPMusicPlayerPlayParameters.DynamicCodingKey>, MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v52 - v7;
  v9 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
  v63 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MPMusicPlayerPlayParameters.DynamicCodingKey and conformance MPMusicPlayerPlayParameters.DynamicCodingKey();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
    goto LABEL_2;
  v52 = v5;
  v53 = a1;
  v10 = KeyedDecodingContainer.allKeys.getter();
  v11 = *(_QWORD *)(v10 + 16);
  v57 = v4;
  v54 = v10;
  if (!v11)
  {
LABEL_64:
    swift_bridgeObjectRelease();
    type metadata accessor for MPMusicPlayerPlayParameters();
    OUTLINED_FUNCTION_1();
    v39 = swift_bridgeObjectRetain();
    MPMusicPlayerPlayParameters.__allocating_init(dictionary:)(v40, (Swift::OpaquePointer)v39);
    v42 = v41;

    if (v42)
    {
      v43 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      swift_bridgeObjectRetain();
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v9 = objc_msgSend(v43, sel_initWithDictionary_, isa);

      v45 = v53;
      if (!v9)
        goto LABEL_75;
      OUTLINED_FUNCTION_19(v52);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v45);
      return (uint64_t)v9;
    }
    v47 = type metadata accessor for DecodingError();
    swift_allocError();
    v49 = v48;
    a1 = v53;
    v50 = v53[3];
    v51 = v53[4];
    __swift_project_boxed_opaque_existential_1(v53, v50);
    MEMORY[0x194037060](v50, v51);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v49, *MEMORY[0x1E0DEC458], v47);
    swift_willThrow();
    OUTLINED_FUNCTION_19(v52);
    v9 = v63;
LABEL_2:
    OUTLINED_FUNCTION_17();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return (uint64_t)v9;
  }
  v12 = (uint64_t *)(v10 + 40);
  v56 = v8;
  while (1)
  {
    v13 = *(v12 - 1);
    v14 = *v12;
    OUTLINED_FUNCTION_1();
    v15 = v63[2];
    v58 = (void *)v13;
    if (v15)
    {
      OUTLINED_FUNCTION_25();
      v16 = OUTLINED_FUNCTION_3(v13);
      if ((v17 & 1) != 0)
      {
        OUTLINED_FUNCTION_8(v16);
      }
      else
      {
        v61 = 0u;
        v62 = 0u;
      }
    }
    else
    {
      v61 = 0u;
      v62 = 0u;
      OUTLINED_FUNCTION_25();
    }
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_16();
    if (!v13)
    {
      *(_QWORD *)&v60[0] = v58;
      *((_QWORD *)&v60[0] + 1) = v14;
      v13 = MEMORY[0x1E0DEA968];
      OUTLINED_FUNCTION_11();
      if (v1)
      {

      }
      else
      {
        v18 = *((_QWORD *)&v61 + 1);
        if (*((_QWORD *)&v61 + 1))
        {
          *((_QWORD *)&v62 + 1) = v13;
          OUTLINED_FUNCTION_1();
          outlined init with take of Any(&v61, v60);
          v55 = v18;
          swift_bridgeObjectRetain_n();
          OUTLINED_FUNCTION_2();
          OUTLINED_FUNCTION_21();
          OUTLINED_FUNCTION_5();
          OUTLINED_FUNCTION_3((uint64_t)v58);
          OUTLINED_FUNCTION_10();
          if (v20)
            goto LABEL_70;
          v21 = v19;
          OUTLINED_FUNCTION_15();
          if (OUTLINED_FUNCTION_4())
          {
            OUTLINED_FUNCTION_3((uint64_t)v58);
            OUTLINED_FUNCTION_18();
            if (!v23)
              goto LABEL_76;
            v21 = v22;
          }
          v24 = v59;
          if ((v13 & 1) != 0)
          {
            OUTLINED_FUNCTION_7();
          }
          else
          {
            v59[(v21 >> 6) + 8] |= 1 << v21;
            v25 = (_QWORD *)(v24[6] + 16 * v21);
            *v25 = v58;
            v25[1] = v14;
            outlined init with take of Any(v60, (_OWORD *)(v24[7] + 32 * v21));
            v26 = v24[2];
            v20 = __OFADD__(v26, 1);
            v27 = v26 + 1;
            if (v20)
              goto LABEL_73;
            v24[2] = v27;
            OUTLINED_FUNCTION_2();
          }
          v13 = (uint64_t)v63;
          v63 = v24;
          OUTLINED_FUNCTION_9();
          OUTLINED_FUNCTION_17();
          OUTLINED_FUNCTION_27();
          swift_bridgeObjectRelease_n();
        }
      }
    }
    OUTLINED_FUNCTION_1();
    v1 = v58;
    if (v63[2])
    {
      OUTLINED_FUNCTION_2();
      v28 = OUTLINED_FUNCTION_3((uint64_t)v1);
      if ((v29 & 1) != 0)
      {
        OUTLINED_FUNCTION_8(v28);
      }
      else
      {
        v61 = 0u;
        v62 = 0u;
      }
    }
    else
    {
      v61 = 0u;
      v62 = 0u;
      OUTLINED_FUNCTION_2();
    }
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_16();
    if (v13)
      goto LABEL_31;
    v30 = (uint64_t)v58;
    *(_QWORD *)&v61 = v58;
    *((_QWORD *)&v61 + 1) = v14;
    OUTLINED_FUNCTION_11();
    if (v1)
    {

    }
    else if (LOBYTE(v60[0]) != 2)
    {
      *((_QWORD *)&v62 + 1) = MEMORY[0x1E0DEAFA0];
      LOBYTE(v61) = v60[0] & 1;
      OUTLINED_FUNCTION_1();
      outlined init with take of Any(&v61, v60);
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_21();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_3(v30);
      OUTLINED_FUNCTION_10();
      if (v20)
        goto LABEL_71;
      OUTLINED_FUNCTION_15();
      if (OUTLINED_FUNCTION_4())
      {
        OUTLINED_FUNCTION_3((uint64_t)v58);
        OUTLINED_FUNCTION_18();
        if (!v23)
          goto LABEL_76;
      }
      v36 = v59;
      if ((v30 & 1) != 0)
      {
        OUTLINED_FUNCTION_7();
      }
      else
      {
        OUTLINED_FUNCTION_0();
        if (v20)
          goto LABEL_74;
        v36[2] = v38;
        OUTLINED_FUNCTION_2();
      }
      v63 = v36;
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_27();
LABEL_31:
      v30 = (uint64_t)v58;
    }
    OUTLINED_FUNCTION_1();
    if (v63[2])
    {
      OUTLINED_FUNCTION_2();
      v31 = OUTLINED_FUNCTION_3(v30);
      if ((v32 & 1) != 0)
      {
        OUTLINED_FUNCTION_8(v31);
      }
      else
      {
        v61 = 0u;
        v62 = 0u;
      }
    }
    else
    {
      v61 = 0u;
      v62 = 0u;
      OUTLINED_FUNCTION_2();
    }
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_16();
    if (v30)
    {
      OUTLINED_FUNCTION_13();
      goto LABEL_59;
    }
    v33 = (uint64_t)v58;
    *(_QWORD *)&v61 = v58;
    *((_QWORD *)&v61 + 1) = v14;
    v34 = MEMORY[0x1E0DEB418];
    OUTLINED_FUNCTION_11();
    if (v1)
    {

      OUTLINED_FUNCTION_13();
      goto LABEL_59;
    }
    *((_QWORD *)&v62 + 1) = v34;
    *(_QWORD *)&v61 = *(_QWORD *)&v60[0];
    OUTLINED_FUNCTION_1();
    outlined init with take of Any(&v61, v60);
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_21();
    OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_3(v33);
    OUTLINED_FUNCTION_10();
    if (v20)
      break;
    OUTLINED_FUNCTION_15();
    if (OUTLINED_FUNCTION_4())
    {
      OUTLINED_FUNCTION_3((uint64_t)v58);
      OUTLINED_FUNCTION_18();
      if (!v23)
        goto LABEL_76;
    }
    v35 = v59;
    if ((v34 & 1) != 0)
    {
      OUTLINED_FUNCTION_7();
    }
    else
    {
      OUTLINED_FUNCTION_0();
      if (v20)
        goto LABEL_72;
      v35[2] = v37;
      OUTLINED_FUNCTION_2();
    }
    v63 = v35;
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_13();
LABEL_59:
    v12 += 2;
    if (!--v11)
      goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type MPMusicPlayerPlayParameters.DynamicCodingKey and conformance MPMusicPlayerPlayParameters.DynamicCodingKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MPMusicPlayerPlayParameters.DynamicCodingKey and conformance MPMusicPlayerPlayParameters.DynamicCodingKey;
  if (!lazy protocol witness table cache variable for type MPMusicPlayerPlayParameters.DynamicCodingKey and conformance MPMusicPlayerPlayParameters.DynamicCodingKey)
  {
    result = MEMORY[0x19403AB40](&protocol conformance descriptor for MPMusicPlayerPlayParameters.DynamicCodingKey, &unk_1E3149300);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MPMusicPlayerPlayParameters.DynamicCodingKey and conformance MPMusicPlayerPlayParameters.DynamicCodingKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MPMusicPlayerPlayParameters.DynamicCodingKey and conformance MPMusicPlayerPlayParameters.DynamicCodingKey;
  if (!lazy protocol witness table cache variable for type MPMusicPlayerPlayParameters.DynamicCodingKey and conformance MPMusicPlayerPlayParameters.DynamicCodingKey)
  {
    result = MEMORY[0x19403AB40](&protocol conformance descriptor for MPMusicPlayerPlayParameters.DynamicCodingKey, &unk_1E3149300);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MPMusicPlayerPlayParameters.DynamicCodingKey and conformance MPMusicPlayerPlayParameters.DynamicCodingKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MPMusicPlayerPlayParameters.DynamicCodingKey and conformance MPMusicPlayerPlayParameters.DynamicCodingKey;
  if (!lazy protocol witness table cache variable for type MPMusicPlayerPlayParameters.DynamicCodingKey and conformance MPMusicPlayerPlayParameters.DynamicCodingKey)
  {
    result = MEMORY[0x19403AB40](&protocol conformance descriptor for MPMusicPlayerPlayParameters.DynamicCodingKey, &unk_1E3149300);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MPMusicPlayerPlayParameters.DynamicCodingKey and conformance MPMusicPlayerPlayParameters.DynamicCodingKey);
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

void __swiftcall MPMusicPlayerPlayParameters.__allocating_init(dictionary:)(MPMusicPlayerPlayParameters_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  Class isa;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, isa);

}

uint64_t MPMusicPlayerPlayParameters.encode(to:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _BYTE *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  _BYTE v44[32];
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;

  v3 = v1;
  type metadata accessor for KeyedDecodingContainer<MPMusicPlayerPlayParameters.DynamicCodingKey>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<MPMusicPlayerPlayParameters.DynamicCodingKey>, MEMORY[0x1E0DED170]);
  v35 = v5;
  v29 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v27 - v7;
  v9 = objc_msgSend(v3, sel_dictionary);
  v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MPMusicPlayerPlayParameters.DynamicCodingKey and conformance MPMusicPlayerPlayParameters.DynamicCodingKey();
  v34 = v8;
  result = dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12 = 0;
  v13 = *(_QWORD *)(v10 + 64);
  v30 = v10 + 64;
  v33 = v10;
  v14 = 1 << *(_BYTE *)(v10 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v32 = v44;
  v31 = (unint64_t)(v14 + 63) >> 6;
  v28 = v31 - 1;
  if ((v15 & v13) == 0)
    goto LABEL_6;
LABEL_4:
  v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  v18 = v17 | (v12 << 6);
LABEL_5:
  v19 = *(_QWORD *)(v33 + 56);
  v20 = (_QWORD *)(*(_QWORD *)(v33 + 48) + 16 * v18);
  v21 = v20[1];
  *(_QWORD *)&v43 = *v20;
  *((_QWORD *)&v43 + 1) = v21;
  outlined init with copy of Any(v19 + 32 * v18, (uint64_t)v32);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of (key: String, value: Any)?((uint64_t)&v43, (uint64_t)&v45);
    v24 = v46;
    if (!v46)
    {
      OUTLINED_FUNCTION_26();
      return OUTLINED_FUNCTION_6();
    }
    v25 = v45;
    outlined init with take of Any(&v47, &v43);
    v42 = 0;
    OUTLINED_FUNCTION_14();
    if ((OUTLINED_FUNCTION_22() & 1) != 0)
    {
      v37 = v16;
      v36 = v12;
      v40 = v38;
      v41 = v39;
      v38 = v25;
      v39 = v24;
      OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_24();
      if (v2)
      {
        OUTLINED_FUNCTION_12();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_45:
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v43);
        OUTLINED_FUNCTION_26();
        return OUTLINED_FUNCTION_6();
      }
      v48 = 0;
      OUTLINED_FUNCTION_12();
      OUTLINED_FUNCTION_1();
      v42 = 1;
      swift_bridgeObjectRelease();
      v12 = v36;
      v16 = v37;
    }
    OUTLINED_FUNCTION_1();
    if ((v42 & 1) == 0)
    {
      OUTLINED_FUNCTION_14();
      if ((OUTLINED_FUNCTION_22() & 1) != 0)
      {
        LOBYTE(v38) = v40 & 1;
        v40 = v25;
        v41 = v24;
        OUTLINED_FUNCTION_1();
        OUTLINED_FUNCTION_23();
        OUTLINED_FUNCTION_24();
        v48 = v2;
        if (v2)
          goto LABEL_44;
LABEL_26:
        OUTLINED_FUNCTION_12();
        v42 = 1;
        goto LABEL_28;
      }
      if ((v42 & 1) == 0)
      {
        OUTLINED_FUNCTION_14();
        if ((OUTLINED_FUNCTION_22() & 1) == 0)
        {
          v40 = 0;
          LOBYTE(v41) = 1;
          goto LABEL_28;
        }
        v38 = v40;
        v40 = v25;
        v41 = v24;
        OUTLINED_FUNCTION_1();
        OUTLINED_FUNCTION_23();
        OUTLINED_FUNCTION_24();
        v48 = v2;
        if (v2)
        {
LABEL_44:
          OUTLINED_FUNCTION_12();
          OUTLINED_FUNCTION_9();
          goto LABEL_45;
        }
        goto LABEL_26;
      }
    }
LABEL_28:
    swift_bridgeObjectRelease();
    result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v43);
    if (v16)
      goto LABEL_4;
LABEL_6:
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_47;
    }
    if (v22 < v31)
    {
      v23 = *(_QWORD *)(v30 + 8 * v22);
      if (v23)
        goto LABEL_9;
      v12 += 2;
      if (v22 + 1 >= v31)
      {
        v12 = v22;
        goto LABEL_14;
      }
      v23 = *(_QWORD *)(v30 + 8 * v12);
      if (v23)
      {
        ++v22;
LABEL_9:
        v16 = (v23 - 1) & v23;
        v18 = __clz(__rbit64(v23)) + (v22 << 6);
        v12 = v22;
        goto LABEL_5;
      }
      if (v22 + 2 < v31)
        break;
    }
LABEL_14:
    v16 = 0;
    memset(v44, 0, sizeof(v44));
    v43 = 0u;
  }
  v23 = *(_QWORD *)(v30 + 8 * (v22 + 2));
  if (v23)
  {
    v22 += 2;
    goto LABEL_9;
  }
  v26 = v22 + 3;
  if (v22 + 3 >= v31)
  {
    v12 = v22 + 2;
    goto LABEL_14;
  }
  v23 = *(_QWORD *)(v30 + 8 * v26);
  if (v23)
  {
    v22 += 3;
    goto LABEL_9;
  }
  while (1)
  {
    v22 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v22 >= v31)
    {
      v12 = v28;
      goto LABEL_14;
    }
    v23 = *(_QWORD *)(v30 + 8 * v22);
    ++v26;
    if (v23)
      goto LABEL_9;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t MPMusicPlayerPlayParameters.DynamicCodingKey.intValue.getter()
{
  return 0;
}

uint64_t MPMusicPlayerPlayParameters.DynamicCodingKey.init(intValue:)()
{
  return 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MPMusicPlayerPlayParameters.DynamicCodingKey()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MPMusicPlayerPlayParameters.DynamicCodingKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MPMusicPlayerPlayParameters.DynamicCodingKey.init(stringValue:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance MPMusicPlayerPlayParameters.DynamicCodingKey()
{
  return MPMusicPlayerPlayParameters.DynamicCodingKey.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance MPMusicPlayerPlayParameters.DynamicCodingKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MPMusicPlayerPlayParameters.DynamicCodingKey.init(intValue:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MPMusicPlayerPlayParameters.DynamicCodingKey()
{
  lazy protocol witness table accessor for type MPMusicPlayerPlayParameters.DynamicCodingKey and conformance MPMusicPlayerPlayParameters.DynamicCodingKey();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MPMusicPlayerPlayParameters.DynamicCodingKey()
{
  lazy protocol witness table accessor for type MPMusicPlayerPlayParameters.DynamicCodingKey and conformance MPMusicPlayerPlayParameters.DynamicCodingKey();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance MPMusicPlayerPlayParameters@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = MPMusicPlayerPlayParameters.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MPMusicPlayerPlayParameters(_QWORD *a1)
{
  return MPMusicPlayerPlayParameters.encode(to:)(a1);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Any?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for Any?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Any?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Any?);
  }
}

unint64_t type metadata accessor for MPMusicPlayerPlayParameters()
{
  unint64_t result;

  result = lazy cache variable for type metadata for MPMusicPlayerPlayParameters;
  if (!lazy cache variable for type metadata for MPMusicPlayerPlayParameters)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MPMusicPlayerPlayParameters);
  }
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

void type metadata accessor for _NativeDictionary<String, Any>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _NativeDictionary<String, Any>)
  {
    v0 = type metadata accessor for _NativeDictionary();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _NativeDictionary<String, Any>);
  }
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void type metadata accessor for KeyedDecodingContainer<MPMusicPlayerPlayParameters.DynamicCodingKey>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type MPMusicPlayerPlayParameters.DynamicCodingKey and conformance MPMusicPlayerPlayParameters.DynamicCodingKey();
    v7 = a3(a1, &unk_1E3149300, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t outlined init with take of (key: String, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (key: String, value: Any)?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (key: String, value: Any)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: String, value: Any)?)
  {
    type metadata accessor for (key: String, value: Any)();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: String, value: Any)?);
  }
}

void type metadata accessor for (key: String, value: Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: String, value: Any))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: String, value: Any));
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for MPMusicPlayerPlayParameters.DynamicCodingKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MPMusicPlayerPlayParameters.DynamicCodingKey()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for MPMusicPlayerPlayParameters.DynamicCodingKey(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for MPMusicPlayerPlayParameters.DynamicCodingKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MPMusicPlayerPlayParameters.DynamicCodingKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MPMusicPlayerPlayParameters.DynamicCodingKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for MPMusicPlayerPlayParameters.DynamicCodingKey()
{
  return &unk_1E3149300;
}

_OWORD *OUTLINED_FUNCTION_0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v0 + 8 * (v2 >> 6) + 64) |= 1 << v2;
  v4 = (_QWORD *)(*(_QWORD *)(v0 + 48) + 16 * v2);
  *v4 = *(_QWORD *)(v3 - 200);
  v4[1] = v1;
  return outlined init with take of Any((_OWORD *)(v3 - 184), (_OWORD *)(*(_QWORD *)(v0 + 56) + 32 * v2));
}

uint64_t OUTLINED_FUNCTION_1()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_2()
{
  return swift_bridgeObjectRetain();
}

unint64_t OUTLINED_FUNCTION_3(uint64_t a1)
{
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(a1, v1);
}

BOOL OUTLINED_FUNCTION_4()
{
  Swift::Bool v0;
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v0, v1);
}

void OUTLINED_FUNCTION_5()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 192) = *(_QWORD *)(v0 - 72);
  *(_QWORD *)(v0 - 72) = 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_6()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 384) + 8))(*(_QWORD *)(v0 - 344), *(_QWORD *)(v0 - 336));
}

_OWORD *OUTLINED_FUNCTION_7()
{
  _OWORD *v0;
  uint64_t v1;

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v0);
  return outlined init with take of Any((_OWORD *)(v1 - 184), v0);
}

uint64_t OUTLINED_FUNCTION_8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return outlined init with copy of Any(*(_QWORD *)(v1 + 56) + 32 * a1, v2 - 128);
}

uint64_t OUTLINED_FUNCTION_9()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_11()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_12()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_13()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_14()
{
  uint64_t v0;

  return outlined init with copy of Any(v0 - 192, v0 - 248);
}

void OUTLINED_FUNCTION_15()
{
  type metadata accessor for _NativeDictionary<String, Any>();
}

uint64_t OUTLINED_FUNCTION_16()
{
  uint64_t v0;

  return outlined destroy of Any?(v0 - 128);
}

uint64_t OUTLINED_FUNCTION_17()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_19@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 8))(v1, *(_QWORD *)(v2 - 208));
}

uint64_t OUTLINED_FUNCTION_20()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_21()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_22()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_23()
{
  uint64_t v0;

  return v0 - 264;
}

uint64_t OUTLINED_FUNCTION_24()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_25()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_26()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_27()
{
  return swift_endAccess();
}

uint64_t ResourceBundleClass.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self();
}

void fd3fa4R8(int a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_193C674F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  int v21;
  int v22;

  v22 = -7 * v21 - 191875505 * (v21 ^ 1) + 8;
  *(&a21 + 16 * (_QWORD)&a21 - 144 * (((unint64_t)&a9 - 0x36F214C141B3E0AELL) / 9) - 0x6F214C141B3E10D1) = *((_BYTE *)*(&off_1E314D0B0 + v22 + 17) + 5) ^ *(_BYTE *)(a2 + 15) ^ 0xD1 ^ *((_BYTE *)*(&off_1E314D0B0 + v22 + 22) + 16) ^ *((_BYTE *)*(&off_1E314D0B0 + v22 + 12) + 12);
  return ((uint64_t (*)(void))((char *)&loc_193C67604 + *(int *)(a5 + 4 * v22)))();
}

void sub_193C67600()
{
  JUMPOUT(0x193C6758CLL);
}

uint64_t sub_193C67610()
{
  return 4294925273;
}

uint64_t sub_193C6AF54(mach_port_t a1, int a2, int *a3, uint64_t a4, int a5, _OWORD *a6, _QWORD *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  int v17;
  mach_port_t reply_port;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  mach_msg_header_t msg;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v30 = 1;
  v31 = a4;
  v32 = 16777472;
  v33 = a5;
  v34 = *MEMORY[0x1E0C804E8];
  v17 = *a3;
  v35 = a2;
  v36 = v17;
  v37 = a5;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B000000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v19 = mach_msg(&msg, 3, 0x40u, 0xDCu, reply_port, 0, 0);
  v20 = v19;
  if ((v19 - 268435458) <= 0xE && ((1 << (v19 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!(_DWORD)v19)
    {
      if (msg.msgh_id == 71)
      {
        v20 = 4294966988;
      }
      else if (msg.msgh_id == 1300)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          v20 = 4294966996;
          if (v30 == 2
            && msg.msgh_size == 212
            && !msg.msgh_remote_port
            && HIBYTE(v32) == 1
            && HIWORD(v35) << 16 == 1114112)
          {
            v21 = v33;
            if (v33 == v47)
            {
              v20 = 0;
              v22 = v34;
              *a3 = v38;
              v23 = v46;
              a6[6] = v45;
              a6[7] = v23;
              v24 = v44;
              a6[4] = v43;
              a6[5] = v24;
              v25 = v40;
              *a6 = v39;
              a6[1] = v25;
              v26 = v42;
              a6[2] = v41;
              a6[3] = v26;
              *a7 = v31;
              *a8 = v21;
              v27 = v49;
              *a9 = v48;
              *a10 = v27;
              *a11 = v50;
              *a12 = v22;
              return v20;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          v20 = 4294966996;
          if (HIDWORD(v31))
          {
            if (msg.msgh_remote_port)
              v20 = 4294966996;
            else
              v20 = HIDWORD(v31);
          }
        }
        else
        {
          v20 = 4294966996;
        }
      }
      else
      {
        v20 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v20;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v20;
}

uint64_t sub_193C6B1AC(mach_port_t a1, unsigned int a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  mach_port_t reply_port;
  uint64_t v9;
  uint64_t v10;
  mach_msg_header_t msg;
  uint64_t v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3[5];
  v19 = a3[4];
  v20 = v4;
  v5 = a3[7];
  v21 = a3[6];
  v22 = v5;
  v6 = a3[1];
  v15 = *a3;
  v16 = v6;
  v7 = a3[3];
  v17 = a3[2];
  v13 = *MEMORY[0x1E0C804E8];
  v14 = a2;
  v18 = v7;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B100000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v9 = mach_msg(&msg, 3, 0xA4u, 0x2Cu, reply_port, 0, 0);
  v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v10;
  }
  if ((_DWORD)v9)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v10;
  }
  if (msg.msgh_id == 71)
  {
    v10 = 4294966988;
LABEL_17:
    mach_msg_destroy(&msg);
    return v10;
  }
  if (msg.msgh_id != 1301)
  {
    v10 = 4294966995;
    goto LABEL_17;
  }
  v10 = 4294966996;
  if ((msg.msgh_bits & 0x80000000) != 0)
    goto LABEL_17;
  if (msg.msgh_size != 36)
    goto LABEL_17;
  if (msg.msgh_remote_port)
    goto LABEL_17;
  v10 = v14;
  if (v14)
    goto LABEL_17;
  return v10;
}

uint64_t sub_193C6B338(mach_port_t a1, int a2, int a3, int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, _QWORD *a9, _DWORD *a10)
{
  mach_port_t reply_port;
  uint64_t v13;
  uint64_t v14;
  int v15;
  mach_msg_header_t msg;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _BYTE v23[28];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v18 = 1;
  v19 = a6;
  v20 = 16777472;
  v21 = a7;
  v22 = *MEMORY[0x1E0C804E8];
  *(_DWORD *)v23 = a2;
  *(_DWORD *)&v23[4] = a3;
  *(_DWORD *)&v23[8] = a4;
  *(_OWORD *)&v23[12] = *a5;
  v24 = a7;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B200000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v13 = mach_msg(&msg, 3, 0x54u, 0x50u, reply_port, 0, 0);
  v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!(_DWORD)v13)
    {
      if (msg.msgh_id == 71)
      {
        v14 = 4294966988;
      }
      else if (msg.msgh_id == 1302)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          v14 = 4294966996;
          if (v18 == 1 && msg.msgh_size == 72 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            v15 = v21;
            if (v21 == *(_DWORD *)&v23[16])
            {
              v14 = 0;
              *a8 = *(_OWORD *)v23;
              *a9 = v19;
              *a10 = v15;
              return v14;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          v14 = 4294966996;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port)
              v14 = 4294966996;
            else
              v14 = HIDWORD(v19);
          }
        }
        else
        {
          v14 = 4294966996;
        }
      }
      else
      {
        v14 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v14;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v14;
}

uint64_t sub_193C6B524(mach_port_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_t reply_port;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v15;
  int v16;
  mach_msg_header_t msg;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B300000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v11 = mach_msg(&msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v11)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v12;
    }
    if (msg.msgh_id == 71)
    {
      v12 = 4294966988;
    }
    else if (msg.msgh_id == 1303)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 52)
        {
          if (!msg.msgh_remote_port)
          {
            v12 = v18;
            if (!v18)
            {
              v15 = v20;
              *a2 = v19;
              *a3 = v15;
              v16 = v22;
              *a4 = v21;
              *a5 = v16;
              return v12;
            }
            goto LABEL_23;
          }
        }
        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port)
            v13 = 1;
          else
            v13 = v18 == 0;
          if (v13)
            v12 = 4294966996;
          else
            v12 = v18;
          goto LABEL_23;
        }
      }
      v12 = 4294966996;
    }
    else
    {
      v12 = 4294966995;
    }
LABEL_23:
    mach_msg_destroy(&msg);
    return v12;
  }
  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

void sub_193C6B69C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_193C6B6E0(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((1888 * (**(_BYTE **)(a2 + 8) == 0)) ^ v2)) - 4))();
}

uint64_t sub_193C6B70C()
{
  uint64_t v0;
  int v1;
  unsigned int v2;

  v2 = v1 - ((2 * v1 - 1284700564) & 0x836DA670) + 460150382;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((986
                                          * (((2 * v2) & 0xEFEFCAD2 ^ 0x836D8250) + (v2 ^ 0x36413651) - 1677894912 != 334839913)) ^ 0x1FAu))
                            - 12))();
}

uint64_t sub_193C6B7BC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  unsigned int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((97 * (v5 ^ 0x8B3)) ^ 0x675) * ((a4 + a3 - 2012734825) > 7)) | v5))
                            - 4))();
}

uint64_t sub_193C6B820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((7 * (a6 - v7 + (unint64_t)(v8 - 565) - 2251 > 0x1F)) ^ v8))
                            - (v8
                             - 816)
                            + 821))();
}

uint64_t sub_193C6B85C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  unsigned int v9;

  return (*(uint64_t (**)(void))(v8 + 8 * ((11 * (((v9 < 0x20) ^ (a8 - 42)) & 1)) ^ a8)))();
}

uint64_t sub_193C6B8A4(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v13 = a4 + a3 + a7;
  v14 = v10 + v13;
  v15 = *(_OWORD *)(v14 - 31);
  v16 = v9 + v13;
  *(_OWORD *)(v16 - 15) = *(_OWORD *)(v14 - 15);
  *(_OWORD *)(v16 - 31) = v15;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8 * ((((v11 & 0xFFFFFFE0) != 32) * ((v12 - v7) ^ 0x5DF)) ^ (a5 + v12 + 770)))
                            - 8))();
}

void sub_193C6B900()
{
  JUMPOUT(0x193C6B8C8);
}

uint64_t sub_193C6B90C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  *(_DWORD *)(v5 + 1424) = v3 + ((v2 + v4 + 839) ^ 0x50BA76EA);
  *(_QWORD *)(*(_QWORD *)(a1 + 96) + 520) = *(_QWORD *)(a2 + 8) + 1;
  return 0;
}

void sub_193C6BADC(uint64_t a1)
{
  int v1;

  v1 = 241568881 * ((~(_DWORD)a1 & 0x9D92FD14 | a1 & 0x626D02EB) ^ 0x4B83F956);
  __asm { BR              X11 }
}

uint64_t sub_193C6BB9C@<X0>(int a1@<W8>)
{
  _DWORD *v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((3153 * (((*v1 == 0) ^ (a1 - 78)) & 1)) ^ a1))
                            - 8))();
}

uint64_t sub_193C6BBE8()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  int v3;
  unsigned int *v4;
  uint64_t v5;

  v5 = v2(*v4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1 + 8 * ((28 * (*v0 != 0)) ^ v3)) - 4))(v5);
}

uint64_t sub_193C6BC14()
{
  uint64_t v0;
  _DWORD *v1;
  uint64_t (*v2)(_QWORD);
  unsigned int *v3;
  uint64_t result;

  result = v2(*v3);
  *v1 = 0;
  *(_DWORD *)v0 = 0;
  *(_QWORD *)(v0 + 344) = 0;
  *(_QWORD *)(v0 + 352) = 0;
  *(_DWORD *)(v0 + 360) = 550622135;
  *(_DWORD *)(v0 + 56) = 101833161;
  return result;
}

uint64_t sub_193C6BC54()
{
  _DWORD *v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((28 * (*v0 != 0)) ^ v2)) - 4))();
}

void sub_193C6BC78(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 ^ (69008221 * ((-2 - ((a1 | 0xFC1C80D3) + (~(_DWORD)a1 | 0x3E37F2C))) ^ 0xD0412D26));
  __asm { BR              X9 }
}

uint64_t sub_193C6BD24@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((((*(_BYTE *)(v2 - 0x592F4E5EA75AA57ALL) & 1) == 0)
                                          * (((2 * (a1 ^ 0x2DD) - 1576087198) & 0x5DF12FB7) + 775)) ^ (2 * (a1 ^ 0x2DD))))
                            - 4))();
}

uint64_t sub_193C6BD7C@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v2
                                                              + 8
                                                              * (int)(((*(_DWORD *)(v3 - 0x592F4E5EA75AA582) != 773254902)
                                                                     * (((a2 - 1024976519) ^ 0xC2E8196B)
                                                                      + ((a2 - 1024976519) & 0x3D17E7EF)
                                                                      - 1309)) ^ (a2 - 449)))
                                                  - 8))(a1, *(_QWORD *)(v3 - 0x592F4E5EA75AA58ELL));
}

uint64_t sub_193C6BE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v13 = ((unint64_t)&a10 ^ 0xABABFCF76B036F99)
      + 0x7CFF376FFFFD0067
      + ((2 * (_QWORD)&a10) & 0x5757F9EED606DF30);
  a10 = v11 - 1;
  *(_BYTE *)(a2 + a10) = (v13 ^ 0xBA) * (v13 + 17);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v12 + 8
                                                          * ((1735 * (a10 == ((v10 + 38) | 0x121u) - 993)) ^ v10)))((v13 + 17), a2);
}

void sub_193C6BE90()
{
  JUMPOUT(0x193C6BE50);
}

void sub_193C6BE98()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 16) = -709277606;
}

void sub_193C6BFE8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) + 944348131 * ((2 * (a1 & 0x4CB3C068) - a1 - 1286848617) ^ 0x10559BD9);
  __asm { BR              X10 }
}

uint64_t sub_193C6C0B8@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, int a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v13 = 1178560073 * ((((2 * &a4) | 0x8DAA87A) - &a4 - 74273853) ^ 0xE3587655);
  a9 = v12;
  a6 = v11 - v13 - 676;
  a7 = 1077836234 - v13;
  a4 = &STACK[0x1EF0C0D0C0C764D6];
  a5 = &STACK[0x11E90ECB0B9030B9];
  v14 = (*(uint64_t (**)(unint64_t **))(a1 + 8 * (int)(v11 ^ 0x30D)))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10
                                                      + 8
                                                      * (int)((1747 * (*(_DWORD *)(v12 - 0x592F4E5EA75AA576) == v9)) ^ v11))
                                          - (v11 ^ 0x35FLL)))(v14);
}

uint64_t sub_193C6C19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  int v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * (((a11 != v11 + 4) * (((v13 - 1531) | 0x112) ^ 0x31D)) ^ v13))
                            - (v13 - 1257)
                            + 839))();
}

void sub_193C6C1DC(_DWORD *a1@<X8>)
{
  uint64_t v1;
  int v2;

  *a1 = v2;
  *(_DWORD *)(v1 + 20) = 1557843812;
}

uint64_t sub_193C6C298(uint64_t a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;

  v1 = 831981571
     * (((a1 ^ 0xC85C7209 | 0x88F4A97A) - (a1 ^ 0xC85C7209) + ((a1 ^ 0xC85C7209) & 0x770B5685)) ^ 0xD9090B57);
  v2 = *(_DWORD *)(a1 + 12) ^ v1;
  v3 = *((_DWORD *)*(&off_1E31525C0 + (v2 ^ 0x2C5)) + 85);
  v4 = *(_DWORD *)(a1 + 16) + v1 + 2130503246;
  v5 = v3 - 687987696 > v4;
  if (v4 < 0xD6FE2410 != v3 > 0x2901DBEF)
    v5 = v3 > 0x2901DBEF;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_1E31525C0 + (v2 ^ 0x2A4)) + 8 * ((47 * v5) ^ v2) - 12)
                            - 5 * (v2 ^ 0x3E1u)
                            + 1581))();
}

uint64_t sub_193C6C3A8()
{
  uint64_t v0;
  int v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v4 = ((v3 - 830) ^ 0x77216140) + v1;
  v5 = v4 < 0xCF22A175;
  v6 = v2 - 819814027 < v4;
  if (v2 > ((v3 - 853) ^ 0x30DD5C56u) != v5)
    v6 = v5;
  return (*(uint64_t (**)(void))(v0 + 8 * ((126 * v6) ^ v3)))();
}

uint64_t sub_193C6C418(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;

  v5 = *(_DWORD *)(v3 + 344);
  v6 = (*(_DWORD *)(a1 + 8) ^ v1) - 252634069;
  if (v5 > 0xC0C944FB != v6 < (v4 ^ 0x3F36B9F7u))
    v7 = v5 > 0xC0C944FB;
  else
    v7 = v5 + 1060551428 > v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1061 * !v7) ^ v4)) - 4))();
}

uint64_t sub_193C6C49C()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v4 = v2 + 1878674159;
  v5 = v4 < ((151 * (v1 ^ 0x95F) + 422416363) & 0xE6D26FFD) - 1103108372;
  v6 = v3 - 1103107640 < v4;
  if (v3 > 0x41C01637 != v5)
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((62 * !v6) ^ v1)) - 12))();
}

uint64_t sub_193C6C534(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _BOOL4 v7;

  v5 = *a1 + v1;
  v6 = *(_DWORD *)(v3 + 352);
  if (v6 > 0x16BB7C76 != (v5 - 2133146123) < 0xE9448389)
    v7 = v6 > 0x16BB7C76;
  else
    v7 = v6 - 381385847 > v5 - 2133146123;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1857 * ((((v4 + 1) ^ v7) & 1) == 0)) ^ v4)) - 4))();
}

uint64_t sub_193C6C5B0@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  unsigned int v2;
  int v3;
  int v4;
  _BOOL4 v5;
  int v6;

  if (v2 > 0xAE4B1079 != (v4 - 380947982) < 0x51B4EF86)
    v5 = (v4 - 380947982) < 0x51B4EF86;
  else
    v5 = v2 + 366 * (v3 ^ 0x2F1) + 1370811562 < v4 - 380947982;
  if (v5)
    v6 = a2;
  else
    v6 = a2 + 1;
  *(_DWORD *)(result + 4) = v6;
  return result;
}

void sub_193C6C618(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  _BOOL4 v5;

  v1 = 235795823 * (a1 ^ 0x94AD4959);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0x592F4E5EA75AA582) - 714812857;
  v3 = *(_DWORD *)(a1 + 8) + v1 - 1913206646;
  v4 = (v3 < 0x37BC13D) ^ (v2 < 0x37BC13D);
  v5 = v2 < v3;
  if (v4)
    v5 = v3 < 0x37BC13D;
  __asm { BR              X11 }
}

uint64_t sub_193C6C708()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ (49 * (v2 == 129651105))))
                            - (((v0 + 1763795653) & 0x96DE9EF6)
                             - 2123)
                            + 127))();
}

uint64_t sub_193C6C750@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((61
                                * (((a1 + 52) ^ (*(_DWORD *)(v1 - 0x592F4E5EA75AA57ELL) == a1 + 2034068049)) & 1)) ^ a1)))();
}

uint64_t sub_193C6C798()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  v6 = (v0 - 61) | 9;
  *(_BYTE *)(*(_QWORD *)(v3 - 0x592F4E5EA75AA58ELL) + (v5 + v2 + 2131247863 + v6)) = *(_BYTE *)(*(_QWORD *)(v3 - 0x592F4E5EA75AA58ELL) + (v2 - 2034068189));
  return (*(uint64_t (**)(void))(v4 + 8 * (((v2 - 1 != v1 + 139) * (v6 - 87)) | v6)))();
}

uint64_t sub_193C6C808@<X0>(int a1@<W8>)
{
  _QWORD *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;

  *(_BYTE *)(*v1 + (v8 + a1 + v5 + v4)) = *(_BYTE *)(*v1 + (v5 + v2));
  return (*(uint64_t (**)(void))(v7 + 8 * (((v5 - 1 != v3) * v6) | a1)))();
}

uint64_t sub_193C6C840()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((22 * ((*(_DWORD *)(v1 - 0x592F4E5EA75AA57ALL) & 1) == (v0 ^ 0xFFD) - 1835)) ^ v0 ^ 0xEBC))
                            - 12))();
}

uint64_t sub_193C6C88C@<X0>(int a1@<W8>, uint64_t a2, ...)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  va_list va;

  va_start(va, a2);
  v5 = v2 - 1354;
  v6 = (*(uint64_t (**)(_QWORD, char *, _QWORD, uint64_t))(v4 + 8 * (v5 ^ 0x12C)))(**(unsigned int **)(v4 + 8 * (v2 - 1659)), va, (((v5 ^ 0xDC) - 4413) & (a1 - 1971644596) ^ 0xEFFEFFFF)+ ((v2 ^ 0xDFFDE72A) & (2 * (a1 - 1971644596)))+ 268500993, 1) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((v6 | (8 * v6)) ^ v5)) - 12))();
}

uint64_t sub_193C6C91C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((((v2 ^ (*(_QWORD *)(v0 - 0x592F4E5EA75AA58ELL) == 0)) & 1)
                                          * (v2 ^ 0x15D)) ^ v2))
                            - 12))();
}

uint64_t sub_193C6C970()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  unsigned int v3;

  v3 = *(_DWORD *)(v0 - 0x592F4E5EA75AA57ELL)
     - ((2 * *(_DWORD *)(v0 - 0x592F4E5EA75AA57ELL) + 226830920) & 0xB67DD0C0)
     + 1644264836;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((3829
                                          * (((2 * v3) & 0xDFDFE3F6 ^ 0x965DC0C0) + (v3 ^ 0x34D1199B) + 1530724352 != 1261236731)) ^ v2 ^ 0x6DA))
                            - 8))();
}

uint64_t sub_193C6CA1C()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v0 ^ 0x56A ^ (76 * ((v2 + v1 + 269487621) < 8))))
                            - 39 * ((((v0 ^ 0x56A) - 588) | 0x70A) ^ 0x771u)
                            + 2254))();
}

uint64_t sub_193C6CA9C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (((((a3 - 1283) | 0x404) - 1550) * ((unint64_t)(a2 - v5 - v3) < 0x20)) ^ a3)))();
}

uint64_t sub_193C6CAD4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4;
  uint64_t v5;

  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5
                                                                       + 8
                                                                       * ((25
                                                                         * (((v4 < (a4 ^ 0xE9Au) - 2230) ^ (a4 - 1)) & 1)) ^ a4))
                                                           - 4))(a1, a2, (a4 - 750));
}

uint64_t sub_193C6CB14(int a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v8 = v5 + v4 + a1;
  v9 = a2 + v8;
  v10 = *(_OWORD *)(v9 - 31);
  v11 = v2 + v8;
  *(_OWORD *)(v11 - 15) = *(_OWORD *)(v9 - 15);
  *(_OWORD *)(v11 - 31) = v10;
  return (*(uint64_t (**)(void))(v7 + 8 * ((((v3 & 0xFFFFFFE0) == 32) * (v6 ^ 0x8E1)) ^ (v6 - 1858))))();
}

void sub_193C6CB6C()
{
  JUMPOUT(0x193C6CB38);
}

void sub_193C6CB78()
{
  uint64_t v0;

  *(_DWORD *)(v0 - 0x592F4E5EA75AA576) = 1557843845;
}

uint64_t sub_193C6CDA0(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  v1 = 3804331 * ((676526031 - (a1 | 0x2852F7CF) + (a1 | 0xD7AD0830)) ^ 0xA9782DC6);
  v2 = *(_DWORD *)(a1 + 16) ^ v1;
  v3 = *(_DWORD *)(a1 + 20) ^ v1;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) - 0x2D6CAD6C03423C37);
  v6 = v4 - 1558770207;
  v5 = v4 - 1558770207 < 0;
  v7 = 1558770207 - v4;
  if (!v5)
    v7 = v6;
  return (*(uint64_t (**)(void))((char *)*(&off_1E31525C0 + (v2 ^ 0x2FF))
                              + 8
                              * ((((v3 - 898433860) >= 4 * (unint64_t)v7) * ((v2 + 1592) ^ 0xDA0)) ^ v2)
                              - 12))();
}

uint64_t sub_193C6CE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3
                                                                                 + 8
                                                                                 * ((108
                                                                                   * (((v4 == 898433860) ^ (((v5 - 56) ^ 1) + 1)) & 1)) ^ v5))
                                                                     - 8))(a1, a2, a3, 797567713);
}

uint64_t sub_193C6CEB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v1
                                                                                       + 8
                                                                                       * ((381
                                                                                         * (((v3 - 485) | 2) == 163)) ^ ((v3 - 485) | 2))))(a1, 233531220, (v3 - 485) | 2u, ((v3 - 485) | 2u) + 483, 748569738, v2);
}

uint64_t sub_193C6CF30@<X0>(uint64_t a1@<X0>, int a2@<W3>, int a3@<W4>, int a4@<W5>, int a5@<W8>)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  char v8;

  *(_BYTE *)(*(_QWORD *)(a1 + 8) + (a4 + a5)) = ((a3 ^ v7) >> v8)
                                                            - ((a2 + 29 + ((a2 + 65) & 0xBF) - 6) & (2 * ((a3 ^ v7) >> v8)))
                                                            + 18;
  return (*(uint64_t (**)(void))(v5 + 8 * (a2 ^ (a4 - 1 == v6))))();
}

uint64_t sub_193C6CF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v5
                                                                                        + 8
                                                                                        * (int)((381
                                                                                               * (v7 + 8 == (_DWORD)a3 - 131)) ^ a3)))(a1, a2, a3, (a3 + 483), a5, v6);
}

uint64_t sub_193C6CFB0(uint64_t a1, int a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _BOOL4 v7;

  v7 = v3 > v6;
  if (v7 == a2 + 17767590 < (a3 ^ 0x225) - 1896185484)
    v7 = a2 + 17767590 < v5;
  return (*(uint64_t (**)(void))(v4 + 8 * ((v7 | (16 * v7)) ^ a3)))();
}

uint64_t sub_193C6D014@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W8>)
{
  int v4;
  _QWORD *v5;

  return sub_193C6CF30(a1, a3 + 483, *(_DWORD *)(*v5 + 4 * (a2 - 233531220)), v4, a4);
}

_DWORD *sub_193C6D044(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  *result = a4;
  return result;
}

void sub_193C6D04C(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD v7[2];
  uint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = 831981571 * ((a1 - 1647177002 - 2 * (a1 & 0x9DD212D6)) ^ 0x473C2F2);
  v2 = *(_DWORD *)(a1 + 48) - v1;
  v3 = *(_DWORD *)a1 - v1;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = 69008221 * ((1654477876 - (v7 | 0x629D5434) + (v7 | 0x9D62ABCB)) ^ 0x4EC0F9C1);
  v6 = v5 - 519623595 * (*(_DWORD *)(a1 + 24) + v1);
  v7[1] = v3 - v5 - 536502402;
  v9 = v5 ^ (v2 - 1291);
  v8 = v4;
  v12 = v6 + 3675184;
  v10 = &STACK[0x5094C4CA030E4734];
  v11 = &STACK[0x7104E48B8F7F78DB];
  ((void (*)(_DWORD *))((char *)*(&off_1E31525C0 + v2 - 1421) - 8))(v7);
  __asm { BR              X9 }
}

uint64_t sub_193C6D1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12, uint64_t a13, uint64_t a14, unsigned int a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;

  v25 = *(_QWORD *)(v19 + 32);
  v26 = *(_QWORD *)(v19 + 8);
  v27 = ((&a12 & 0x7E0D6876 | ~(&a12 | 0x7E0D6876)) ^ 0x185347AD) * v21;
  a18 = v23 - v27 + 1695025553;
  a15 = v27 + 1619760309 * v22 + ((v23 + 1330215050) & 0xB0B685DF) + 91853216;
  a13 = v26;
  a14 = a9;
  a16 = v25;
  a17 = a9;
  a12 = v27 + a11 * (v23 ^ 0x1A0D33EE) + 1473045444;
  v28 = sub_193CBC8F8((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24 + 8 * ((29 * (a19 != v20)) ^ v23)) - 4))(v28);
}

uint64_t sub_193C6D2C4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v2 + 8 * (v3 ^ 0x538)))(**(unsigned int **)(v2 + 8 * (v3 ^ 0x565)), v5, v6);
  *(_DWORD *)(v0 + 64) = v1;
  return result;
}

void QgPp5PNq(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  int v6;

  if (a3)
    v5 = a5 == 0;
  else
    v5 = 1;
  v6 = !v5;
  __asm { BR              X8 }
}

uint64_t sub_193C6D400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14)
{
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  a13 = -1501685844 - 1224239923 * ((&a13 & 0x27ACA78B | ~(&a13 | 0x27ACA78B)) ^ 0x2AE0A5A3);
  v16 = sub_193CBCC34(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15
                                                      + 8 * ((1110 * (a14 == ((v14 - 258018969) ^ 0x53BB679A))) ^ v14))
                                          - 8))(v16);
}

uint64_t sub_193C6D4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  a14 = (v16 - 236) ^ (831981571
                     * ((2 * (&a13 & 0x4E1686E0) - &a13 - 1310099169) ^ 0x2848A93B));
  a13 = &STACK[0x667A5DFFEA838F50];
  sub_193C8C02C((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17
                                                                                          + 8
                                                                                          * ((46 * (a15 != -1557818287)) ^ v16))
                                                                              - (((v16 + 537841401) | 0xD0902288) ^ v15)))(v18, v19, v20, v21, v22);
}

uint64_t sub_193C6D560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17)
{
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  void (*v26)(uint64_t *);
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;

  v24 = 4 * (v22 ^ 0x287);
  v25 = 1224239923 * (((&a14 | 0x11EA6E9C) - (&a14 & 0x11EA6E9C)) ^ 0xE359934B);
  a15 = a12;
  LODWORD(a14) = (v21 ^ 0xF3B7BFDF) + ((2 * v21) & 0xE76F7FBE) - v25 + 2121034427;
  LODWORD(a16) = (v24 - 247) ^ v25;
  v26 = (void (*)(uint64_t *))*(&off_1E31525C0 + v24 - 591);
  v26(&a14);
  v27 = 1224239923 * (((&a14 | 0x67B7CAED) + (~&a14 | 0x98483512)) ^ 0x9504373B);
  LODWORD(a14) = (HIDWORD(v20) ^ 0xFE3D3E9A) - v27 + ((v24 ^ 0xFC7A7E00) & (2 * HIDWORD(v20))) + 1944513536;
  LODWORD(a16) = (v24 - 247) ^ v27;
  a15 = a12;
  v26(&a14);
  v28 = 2 * &a14;
  v29 = 1224239923 * (((v28 | 0x6B05238) - &a14 - 56109340) ^ 0xF1EBD4CB);
  LODWORD(a14) = (v20 ^ 0xF275FFFB) + ((2 * v20) & 0xE4EBFFF6) - v29 + 2142120607;
  LODWORD(a16) = (v24 - 247) ^ v29;
  a15 = a12;
  v26(&a14);
  a17 = v24 - 1543737703 * (((&a14 | 0xAD062677) + (~&a14 | 0x52F9D988)) ^ 0xD3F2760A) - 663;
  a14 = v19;
  a16 = a12;
  ((void (*)(uint64_t *))((char *)*(&off_1E31525C0 + v24 - 681) - 4))(&a14);
  v30 = 1224239923 * (((v28 | 0x8F0578D0) - &a14 + 947733400) ^ 0x353141BF);
  LODWORD(a16) = (v24 - 247) ^ v30;
  a15 = a12;
  LODWORD(a14) = (v18 ^ 0x76B62BFF) + ((2 * v18) & 0xED6C57FE) - v30 - 76677477;
  v26(&a14);
  v31 = 69008221 * ((225459285 - (&a14 | 0xD703C55) + (&a14 | 0xF28FC3AA)) ^ 0x212D91A0);
  a14 = v17;
  HIDWORD(a15) = v31 + v24 - 63;
  a16 = a12;
  a17 = v31 ^ ((a10 ^ 0x6E05BAFE) - 168042688 + ((2 * a10) & 0xDC0B75FC));
  v32 = ((uint64_t (*)(uint64_t *))((char *)*(&off_1E31525C0 + v24 - 666) - 4))(&a14);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v23 + 8 * ((1806 * ((_DWORD)a15 == -1557818287)) ^ v24)) - 12))(v32);
}

uint64_t sub_193C6D8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, unint64_t *a15, unsigned int a16, int a17, unsigned int a18)
{
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;

  v21 = 944348131 * (&a13 ^ 0xA319A44E);
  a14 = 7711741 - v21;
  a13 = a11;
  a18 = v21 + v19 + 368399357;
  a16 = 1779005819 - v21;
  a15 = &STACK[0x59F8E2836308BDA1];
  v22 = sub_193CBD2A0((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20
                                                      + 8
                                                      * ((1721 * (a17 == v18 + ((v19 - 1929185101) & 0x72FD067C) - 612)) ^ v19))
                                          - 12))(v22);
}

uint64_t sub_193C6D998()
{
  void (*v0)(unint64_t **);
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  unint64_t *v11;
  unint64_t *v12;
  unsigned int v13;

  v13 = v4 - ((-95052247 - (&v11 | 0xFA559E29) + (&v11 | 0x5AA61D6)) ^ 0xA6B3C598) * v1 + 31;
  v11 = &STACK[0xCB258A928C465C1];
  v12 = v8;
  ((void (*)(unint64_t **))*(&off_1E31525C0 + (v4 ^ 0x300)))(&v11);
  v11 = v8;
  LODWORD(v12) = v4
               - 241568881
               * ((-1638172144
                 - (&v11 ^ 0x5D87D10E | 0x9E5B7A10)
                 + (&v11 ^ 0x5D87D10E | 0x61A485EF)) ^ 0xEA3250A3)
               - 367;
  sub_193C9B7D8((uint64_t)&v11);
  v5 = (v4 - 2103609544) & 0x7D6287F7;
  if (HIDWORD(v12) == (v5 ^ (v2 + 484)))
    v6 = v10;
  else
    v6 = HIDWORD(v12);
  LODWORD(v11) = (v4 + 173) ^ ((((&v11 | 0x2328ABA9)
                               - &v11
                               + (&v11 & 0xDCD75450)) ^ 0xF08AF9A3)
                             * v3);
  v12 = v8;
  v0(&v11);
  LODWORD(v11) = (v5 + 381) ^ (((&v11 - 518076391 - 2 * ((unint64_t)&v11 & 0xE11EC819)) ^ 0x32BC9A13)
                             * v3);
  v12 = v9;
  v0(&v11);
  return v6 ^ 0xA3259451;
}

uint64_t sub_193C6DB8C(uint64_t a1, uint64_t a2)
{
  return off_1E314D180[(1571 * (*(_DWORD *)(a2 + 4) == 642350294)) ^ 0x265u](4294925278);
}

uint64_t sub_193C6DBD0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(a2 + 96) + 468) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 12);
  return (*(uint64_t (**)(_QWORD))(v2 + 3240))(0);
}

uint64_t sub_193C6DC24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;

  *(_BYTE *)(a1 + (v6 + v4)) = *(_BYTE *)(v3 + (v6 + v4));
  return (*(uint64_t (**)(_QWORD))(v1 + 8 * ((1008 * (v6 - 1 == v2)) ^ v5)))(0);
}

void sub_193C6DC58(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)a1 ^ (69008221 * ((a1 & 0xF2B38CBF | ~(a1 | 0xF2B38CBF)) ^ 0xDEEE214A));
  v2 = *(_QWORD *)(a1 + 8);
  ((void (*)(char *, void (*)()))*(&off_1E31525C0 + v1 + 51))((char *)*(&off_1E31525C0 + v1 - 91) - 12, sub_193CBCCF0);
  __asm { BR              X10 }
}

uint64_t sub_193C6DD04()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  int v3;

  v3 = **(_QWORD **)(v1 + 8 * (int)(v2 ^ 0xD8)) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * (int)(((4 * v3) | (v3 << 6)) ^ v2)) - (v2 ^ 0xA9)))();
}

uint64_t sub_193C6DD54@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 ^ 0x64)))(v1);
}

uint64_t sub_193C6DD74(_DWORD *a1, uint64_t a2)
{
  return ((uint64_t (*)(void))off_1E314D180[(240 * ((*a1 + *(_DWORD *)(a2 + 4) - 1586263996) > 0xC8)) ^ 0x79u])();
}

uint64_t sub_193C6DDBC()
{
  return 4294925278;
}

uint64_t sub_193C6DDC4@<X0>(uint64_t a1@<X8>)
{
  int v1;

  return (*(uint64_t (**)(void))(a1 + 8 * ((472 * (v1 != 642350281)) ^ 0x613u)))();
}

uint64_t sub_193C6DDF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  *(_BYTE *)(a1 + (v3 - 943913716) + 4) = **(_BYTE **)(a2 + 8) + 43;
  v4 = *(_DWORD *)(a2 + 4) + 2014537194;
  v5 = v4 < 0x9E5CE2B3;
  v6 = v4 > 0x9E5CE2B4;
  if (v5)
    v6 = v5;
  return (*(uint64_t (**)(void))(a3 + 8 * ((85 * v6) ^ 0x613u)))();
}

void sub_193C6DE88()
{
  JUMPOUT(0x193C6DE28);
}

uint64_t sub_193C6DE90(_DWORD *a1)
{
  int v1;
  int v2;

  *((_BYTE *)a1 + ((v2 - 674665478) ^ 0x1074698Fu) + v1 + 4) = 43;
  *a1 = v1;
  return 0;
}

void sub_193C6DEC4(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  _BOOL4 v4;
  _BOOL4 v5;

  v1 = 460628867 * ((a1 & 0x73B15F3F | ~(a1 | 0x73B15F3F)) ^ 0xC0D822BD);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) - 0x7EC787B491C9387DLL) + 1926153069;
  v3 = *(_DWORD *)(a1 + 8) - v1 + 1439095894;
  v4 = v2 < 0xD159D54A;
  v5 = v2 > v3;
  if (v3 < 0xD159D54A != v4)
    v5 = v4;
  __asm { BR              X12 }
}

uint64_t sub_193C6DFA8(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((((*(unsigned __int8 *)(*(_QWORD *)(a1 + 16)
                                                                  + (v3 - 1586172382))
                                             - ((2
                                               * *(unsigned __int8 *)(*(_QWORD *)(a1 + 16)
                                                                    + (v3 - 1586172382))) & 0xCE)
                                             - 106521497) & 0x1F) == 29 * ((v1 - 9) ^ 0x5B1) - 991)
                                          * (v1 ^ 0x592)) ^ (v1 - 9)))
                            - 12))();
}

uint64_t sub_193C6E020()
{
  int v0;
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v4 = v2 - 519627694 + ((v3 + 409) | 0xB);
  v5 = v4 < 0x3F9233C9;
  v6 = v4 > v0 - 1006683435;
  if ((v0 - 1006683435) < 0x3F9233C9 != v5)
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)((1806 * !v6) ^ v3)) - (v3 ^ 0x3FFLL)))();
}

uint64_t sub_193C6E0A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v5 = *(char *)(v1 + (v3 + 1));
  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v2
                                                                      + 8
                                                                      * (((2
                                                                         * (((v5 >= 0) ^ (v4 - 28)) & 1)) & 0xFB | (4 * (((v5 >= 0) ^ (v4 - 28)) & 1))) ^ v4))
                                                          - 8))(a1, ((2 * v5) & 0x1FA) + (*(unsigned __int8 *)(v1 + (v3 + 1)) ^ 0x6EE97DFDu) - 1218445620, (v4 - 1094642716) & 0x413EEFFB);
}

uint64_t sub_193C6E140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  char v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((1551
                                          * (((((((a5 + 162) | 0x102) + 2147473060) ^ (v6 + 3) & 0x7F)
                                             + 2 * ((v6 + 3) & 0x3F)) & 0x7FFFDCFC) == 2147474496)) ^ a5))
                            - 8))();
}

uint64_t sub_193C6E1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _BOOL4 v12;
  _BOOL4 v13;

  v11 = v9 + a7 + 275355919;
  v12 = v11 < 0xEEF4872A;
  v13 = v11 > v7 + 1935773238;
  if ((v7 + 1935773238) < 0xEEF4872A != v12)
    v13 = v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (v10 ^ (548 * !v13))) - ((v10 + 505860644) & 0xE1D929FB) + 431))();
}

uint64_t sub_193C6E228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v12 = *(unsigned __int8 *)(v7 + (v10 + v9 + 2));
  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v8 + 8 * (v11 ^ (2269 * (a7 != 2147474496))))
                                                          - 8))(a1, (v12 ^ 0xA7DF7DDB) + 2120875758 + ((2 * v12) & 0x1B6), (v11 + 992));
}

uint64_t sub_193C6E2BC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;

  v12 = *(unsigned __int8 *)(v8 + 35 * (a8 ^ 0x695u) + a5 + v11) | (a2 << 8);
  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v9 + 8 * ((117 * (v10 - 1 == a6)) ^ a8)) - 12))(a1, ((v12 - 1232914688) ^ 0xE7DB7FDD) + 1047395564 + ((2 * (v12 - 1232914688)) & 0xCFB6FFBA));
}

uint64_t sub_193C6E338(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  _BOOL4 v11;

  v8 = a2 + v5 + v7 + v6 + 2072409444 + 1079248157;
  v9 = v3 + 1159457905;
  v10 = (v9 < 0xC0AEE565) ^ (v8 < 0xC0AEE565);
  v11 = v8 > v9;
  if (v10)
    v11 = v8 < 0xC0AEE565;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((181 * v11) ^ (a3 - 601))) - 8))();
}

uint64_t *sub_193C6E3B8@<X0>(uint64_t *result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = result[5];
  v7 = result[6];
  v9 = *result;
  *a3 = v5 - 567266922;
  *(_DWORD *)(v9 - 0x74FB28B159D008ECLL) = v4;
  *(_DWORD *)(v8 - 0x4B250544ABED059ALL) = a2;
  *(_QWORD *)(v7 - 0x4C318BAC66859819) = v3 + (v6 - 1511089023);
  *((_DWORD *)result + 6) = -1557818287;
  return result;
}

uint64_t sub_193C6E434(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;

  v1 = 831981571 * ((((2 * a1) | 0xFDCFEF62) - a1 - 2129131441) ^ 0xE7462795);
  v2 = *(_DWORD *)(a1 + 8) + v1;
  v3 = *(_DWORD *)(a1 + 12) - v1;
  v5 = v3 - 2074368200;
  v4 = v3 - 2074368200 < 0;
  LODWORD(v6) = 2074368200 - v3;
  if (v4)
    v6 = v6;
  else
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_1E31525C0 + (v2 ^ 0x7CC))
                                        + 8 * ((3916 * (v6 != ((2 * (_DWORD)v6) & 0xEC8B7A46))) ^ v2)
                                        - 12)
                            - 8))();
}

void sub_193C6E4E4(int a1@<W8>)
{
  uint64_t v1;
  int v2;

  **(_DWORD **)(v1 - 0x2D6CAD6C03423C33) = (v2 + 1984281891) ^ 0x5ADBF9A9;
  *(_DWORD *)(v1 - 0x2D6CAD6C03423C37) = a1 + 1;
}

void sub_193C6E53C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8) + 460628867 * ((-1228667218 - (a1 | 0xB6C406AE) + (a1 | 0x493BF951)) ^ 0x5AD7B2C);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unint64_t **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(unint64_t **)(v2 - 0x3DD47FB64BA505DALL);
  v11 = *(_QWORD *)a1;
  v10 = v1 - 1224239923 * ((&v6 + 2120399245 - 2 * (&v6 & 0x7E62B98D)) ^ 0x8CD1445A) - 363;
  v8 = v5;
  v9 = v2;
  v6 = v4;
  v7 = &STACK[0x2D6CAD6C03423C5B];
  ((void (*)(uint64_t *))((char *)*(&off_1E31525C0 + v1 - 465) - 4))(&v6);
  v6 = *(_QWORD *)(v2 - 0x3DD47FB64BA505E2);
  LODWORD(v7) = v1
              + 831981571 * ((((2 * &v6) | 0x9A92B64A) - &v6 + 850830555) ^ 0x54E88B01)
              - 154;
  v8 = &STACK[0x2D6CAD6C03423C6B];
  sub_193C6EA8C((uint64_t)&v6);
  v7 = v3;
  LODWORD(v8) = (944348131
               * ((2 * ((&v6 ^ 0xBDAA89DC) & 0x5E914CC4) - (&v6 ^ 0xBDAA89DC) - 1586580677) ^ 0xBFDD9EA9)) ^ (v1 + 591);
  sub_193CB5200((uint64_t)&v6);
  __asm { BR              X8 }
}

uint64_t sub_193C6E788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t), uint64_t a12)
{
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 - 104) = a12;
  *(_QWORD *)(v20 - 128) = v15;
  *(_QWORD *)(v20 - 120) = v16;
  *(_QWORD *)(v20 - 144) = v17;
  *(_QWORD *)(v20 - 136) = v15;
  *(_DWORD *)(v20 - 112) = v13
                         - 1224239923
                         * ((((v20 - 144) | 0x37EC59BA) - (v20 - 144) + ((v20 - 144) & 0xC813A640)) ^ 0xC55FA46D)
                         - 915;
  v21 = a11(v20 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18
                                                      + 8
                                                      * ((1012 * ((v19 + v12 - 1) > 0x7FFFFFFE)) ^ v14))
                                          - 12))(v21);
}

uint64_t sub_193C6E820()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  *(_DWORD *)(v7 - 120) = v2
                        + 69008221 * ((((v7 - 144) | 0x5000FFF4) - (v7 - 144) + ((v7 - 144) & 0xAFFF0008)) ^ 0x83A2ADFE)
                        - 36;
  *(_QWORD *)(v7 - 144) = v5;
  *(_QWORD *)(v7 - 136) = v3;
  *(_QWORD *)(v7 - 112) = v4;
  *(_QWORD *)(v7 - 128) = v3;
  ((void (*)(uint64_t))((char *)*(&off_1E31525C0 + v2 - 1018) - 4))(v7 - 144);
  v8 = 2078219279 * ((-1301543240 - ((v7 - 144) | 0xB26C06B8) + ((v7 - 144) | 0x4D93F947)) ^ 0x97696F33);
  *(_DWORD *)(v7 - 140) = -1960555130 - v8 + v0;
  *(_QWORD *)(v7 - 136) = v1;
  *(_DWORD *)(v7 - 128) = (v2 - 975) ^ v8;
  v9 = sub_193C79E84(v7 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v6 + 8 * ((60 * (*(_DWORD *)(v7 - 144) != -816281897)) ^ v2))
                                          - 12))(v9);
}

uint64_t sub_193C6E930()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1012 * ((v3 + v0 - 1) > 0x7FFFFFFE)) ^ v1)) - 12))();
}

uint64_t sub_193C6E968()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;

  v5 = *(_QWORD *)(v8 + 32);
  v6 = 831981571 * ((2 * ((v4 - 144) & 0x78E22948) - (v4 - 144) - 2028087625) ^ 0x1EBC0693);
  *(_DWORD *)(v4 - 136) = v0 - v6 + 1476;
  *(_DWORD *)(v4 - 132) = v6 + 2074368201;
  *(_QWORD *)(v4 - 144) = v10;
  sub_193C6E434(v4 - 144);
  *(_QWORD *)(v4 - 104) = v10;
  *(_QWORD *)(v4 - 144) = v3;
  *(_QWORD *)(v4 - 136) = v1;
  *(_DWORD *)(v4 - 112) = v0 - 1224239923 * ((v4 - 144) ^ 0xF2B3FDD7) - 363;
  *(_QWORD *)(v4 - 128) = v1;
  *(_QWORD *)(v4 - 120) = v2;
  v9(v4 - 144);
  *(_DWORD *)(v4 - 136) = v0 + 831981571 * ((((v4 - 144) | 0x4E688CAB) + (~(v4 - 144) | 0xB1977354)) ^ 0xD7C95C8E) - 154;
  *(_QWORD *)(v4 - 128) = v5;
  *(_QWORD *)(v4 - 144) = v1;
  return sub_193C6EA8C(v4 - 144);
}

uint64_t sub_193C6EA8C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) - 831981571 * ((2 * (a1 & 0x1F062D56) - a1 - 520498519) ^ 0x7958028D);
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_1E31525C0 + (v1 ^ 0x12E))
                                        + 8 * ((2444 * (*(_QWORD *)a1 != *(_QWORD *)(a1 + 16))) ^ v1)
                                        - 12)
                            - 12))();
}

uint64_t sub_193C6EB08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v4 = *(_DWORD *)(v2 - 0x2D6CAD6C03423C37);
  v5 = v4 - 1558770207;
  if (v4 - 1558770207 < 0)
    v5 = 1558770207 - v4;
  *(_DWORD *)(v1 - 0x2D6CAD6C03423C37) = v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * ((659
                                          * ((v3 ^ 0x7F5B32A9 ^ v5) - 352522242 + ((2 * v5) & 0xFEB667FE) != 1784161277)) ^ v3))
                            - 12))();
}

uint64_t sub_193C6EB98@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;

  *(_DWORD *)(*(_QWORD *)(v2 - 0x2D6CAD6C03423C33) + 4 * (v6 - 1784161278)) = *(_DWORD *)(*(_QWORD *)(v3 - 0x2D6CAD6C03423C33)
                                                                                            + 4 * (v6 - 1784161278));
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (((v6 - 1 != v1) * v4) ^ v5 ^ v4)) - 12))();
}

uint64_t sub_193C6EBF4@<X0>(uint64_t a1@<X8>)
{
  int v1;
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  int v5;
  int v6;

  *(_DWORD *)(*v2 + 4 * (v6 + v5)) = *(_DWORD *)(*v3 + 4 * (v6 + v5));
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((51 * (v6 - 1 != v1)) ^ v4)) - 12))();
}

void sub_193C6EC34(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_193C6EC9C()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1681 * (v0 != 642350281)) ^ 0x12Bu)) - 4))();
}

uint64_t sub_193C6ECD0@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  _DWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  int v12;

  v4 = v1 - (**(_BYTE **)(v3 + 8) == 0);
  *(_DWORD *)(*(_QWORD *)(v2 + 96) + 528) = 1091094518;
  *(_DWORD *)(*(_QWORD *)(v2 + 96) + 532) = 1558770207;
  *(_QWORD *)(*(_QWORD *)(v2 + 96) + 536) = *(_QWORD *)(v2 + 96) + 544;
  v5 = *(_QWORD *)(v3 + 8) + (*(_DWORD *)(v3 + 4) - v4);
  v6 = 831981571 * (v9 ^ 0x99A1D024);
  v10 = *(_QWORD *)(v2 + 96) + 0x2D6CAD6C03423E4BLL;
  v11 = v5;
  v9[0] = (v4 + 821978145) ^ v6;
  v9[1] = v6 + 416;
  (*(void (**)(_DWORD *))(a1 + 1920))(v9);
  v7 = v12;
  *(_QWORD *)(*(_QWORD *)(v2 + 96) + 512) = *(_QWORD *)(v3 + 8) + (*(_DWORD *)(v3 + 4) - v4);
  return v7 ^ 0x5EC77446u;
}

void sub_193C6EDF4(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  BOOL v5;

  v1 = 831981571 * ((-2 - ((~(_DWORD)a1 | 0xF33FFBC4) + (a1 | 0xCC0043B))) ^ 0x6A9E2BE0);
  v2 = *(_DWORD *)(a1 + 8) + v1;
  v3 = (unsigned __int16)(*(_WORD *)(a1 + 12) + v1);
  v5 = *(_QWORD *)a1 == 0x7DC79EF8DF9EA840 || v3 == 11553;
  __asm { BR              X8 }
}

uint64_t sub_193C6EEE0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3
                                                                        + 8
                                                                        * ((((v2 & 0x5AA0CBDB ^ 0x2EB) == 32)
                                                                          * ((v2 & 0x5AA0CBDB) - 662)) ^ ((v2 & 0x5AA0CBDB) + 1288)))
                                                            - 12))(a1, a2, 747);
}

uint64_t sub_193C6F088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v23 = **(unsigned int **)(v19 + 8 * ((v18 - 1285) ^ 0x294));
  v24 = v18 + 1309721767 + a18;
  *(_DWORD *)(v22 - 128) = v24 + 123;
  *(_DWORD *)(v22 - 124) = ((v18 + 1309721767) ^ 0xE0) - a18;
  *(_DWORD *)(v22 - 120) = a18;
  *(_QWORD *)(v21 + 16) = a18;
  *(_QWORD *)(v21 + 40) = v23 ^ a18;
  *(_DWORD *)(v22 - 148) = v24;
  *(_DWORD *)(v22 - 144) = (v18 - 1689053505) ^ a18;
  v25 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19 + 8 * ((v18 - 1285) ^ 0x2D2)) - 4))(v22 - 152);
  return (*(uint64_t (**)(uint64_t))(v20 + 8 * *(int *)(v22 - 152)))(v25);
}

uint64_t sub_193C6F154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  HIDWORD(a15) = v22;
  (*(void (**)(uint64_t, uint64_t))(v20 + 8 * (v23 - 492)))(a13, 2965982036);
  v24 = (*(uint64_t (**)(void))(v20 + 8 * SHIDWORD(a11)))();
  *v19 = v24;
  v19[1] = 1812433253 * (v24 ^ (v24 >> 30)) + 1;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 + 8 * (v23 - 252)) - 4))(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
}

uint64_t sub_193C6F1D0()
{
  unsigned int v0;
  unsigned int v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)(v4 + 4 * v1) = v1 + (v0 ^ (v0 >> 30)) * v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (((v1 > 0x26E) * v3) ^ v5)) - 4))();
}

uint64_t sub_193C6F200@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t (*a21)(uint64_t))
{
  _DWORD *v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v33;

  v27 = a1 + 297;
  v28 = (*(uint64_t (**)(uint64_t, _QWORD))(v23 + 8 * (a1 - 344)))(a5, 0);
  ((void (*)(uint64_t))v22)(v28);
  v33 = v22();
  v29 = 944348131 * ((v25 - 0x4D00E937F13BD95ALL - 2 * (v25 & 0xB2FF16C80EC426A6)) ^ 0x4CD9C2D7ADDD82E8);
  v21[1] = v33 + ((1664525 * (*v21 ^ (*v21 >> 30))) ^ v21[1]);
  v30 = v27 - 724643791 + 944348131 * ((v25 + 247735974 - 2 * (v25 & 0xEC426A6)) ^ 0xADDD82E8);
  *(_DWORD *)(v26 - 132) = v30 - 93;
  *(_DWORD *)(v26 - 148) = (v27 + 2104631672) ^ (944348131 * ((v25 + 247735974 - 2 * (v25 & 0xEC426A6)) ^ 0xADDD82E8));
  *(_DWORD *)(v26 - 144) = v30;
  *(_DWORD *)(v26 - 140) = 1 - 944348131 * ((v25 + 247735974 - 2 * (v25 & 0xEC426A6)) ^ 0xADDD82E8);
  *(_DWORD *)(v26 - 136) = (v27 - 724643907) ^ (944348131 * ((v25 + 247735974 - 2 * (v25 & 0xEC426A6)) ^ 0xADDD82E8));
  *(_QWORD *)(v25 + 24) = v29 + 623;
  *(_QWORD *)(v25 + 32) = v29 ^ 2;
  v31 = a21(v26 - 152);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24 + 8 * *(int *)(v26 - 152)) - 8))(v31);
}

uint64_t sub_193C6F330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27)
{
  _DWORD *v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  *v27 = v27[623];
  v34 = 944348131 * ((v30 - 0xAB4260EAD245C7ELL - 2 * (v30 & 0xF54BD9F152DBA382)) ^ 0xB6D0DEEF1C207CCLL);
  *(_QWORD *)(v30 + 24) = v34 + 3;
  *(_QWORD *)(v30 + 32) = (v31 + 1) ^ v34;
  *(_DWORD *)(v33 - 132) = (a27 ^ 0x7F) + 944348131 * ((v30 + 1390125954 - 2 * (v30 & 0x52DBA382)) ^ 0xF1C207CC);
  *(_DWORD *)(v33 - 148) = (v32 + 2104631672) ^ (944348131 * ((v30 + 1390125954 - 2 * (v30 & 0x52DBA382)) ^ 0xF1C207CC));
  *(_DWORD *)(v33 - 144) = a27 + 944348131 * ((v30 + 1390125954 - 2 * (v30 & 0x52DBA382)) ^ 0xF1C207CC);
  *(_DWORD *)(v33 - 140) = 1 - 944348131 * ((v30 + 1390125954 - 2 * (v30 & 0x52DBA382)) ^ 0xF1C207CC);
  *(_DWORD *)(v33 - 136) = a26 ^ (944348131 * ((v30 + 1390125954 - 2 * (v30 & 0x52DBA382)) ^ 0xF1C207CC));
  v35 = v28(v33 - 152);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v29 + 8 * *(int *)(v33 - 152)) - 8))(v35);
}

uint64_t sub_193C6F3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  int v22;
  uint64_t v23;
  int v24;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8 * ((966 * (v22 + v24 - 719 == (v24 ^ 0x2CE))) ^ (v24 - 297))))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t sub_193C6F4FC()
{
  _DWORD *v0;
  int v1;
  uint64_t v2;
  int v3;

  *v0 = v0[623];
  return (*(uint64_t (**)(void))(v2 + 8 * ((((v3 + 973) ^ 0xC61) * (v1 == 1)) ^ (v3 - 107))))();
}

uint64_t sub_193C6F534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unint64_t a24,unint64_t a25)
{
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;

  v31 = *(_DWORD *)(v25 + 4 * (v27 - 1));
  *(_DWORD *)(v25 + 4 * v27) = ((1566083941 * (v31 ^ (v31 >> 30))) ^ *(_DWORD *)(v25 + 4 * v27)) - v27;
  v32 = (v26 + 1328983177) ^ a25;
  *(_DWORD *)(v30 - 120) = v32 ^ 0x88;
  *(_DWORD *)(v30 - 116) = v32;
  v29[2] = a24;
  *v29 = (v27 + 1) ^ a25;
  *(_DWORD *)(v30 - 144) = a25;
  *(_DWORD *)(v30 - 128) = v32 ^ 0xEF;
  *(_DWORD *)(v30 - 124) = v26 - a25 + 2021363059;
  v33 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E31525C0 + (v26 ^ 0x2DE)) - 12))(v30 - 152);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v28 + 8 * *(int *)(v30 - 112)) - 8))(v33);
}

uint64_t sub_193C6F5E0()
{
  int v0;
  uint64_t v1;
  int v2;

  return (*(uint64_t (**)(void))(v1 + 8 * ((((v2 + 973) ^ 0xC61) * (v0 == 1)) ^ (v2 - 107))))();
}

uint64_t sub_193C6F60C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;

  v23 = a1 - 973;
  *v20 = 0x80000000;
  ((void (*)(uint64_t))*(&off_1E31525C0 + (int)(a1 & 0xF218D17A)))(a20);
  v24 = v20[1];
  v25 = v20[2];
  v26 = v20[398];
  v27 = *(_DWORD *)(v21 + 4 * (v25 & 1));
  *v20 = v20[397] ^ ((v24 & 0x7FFFFFFE | *v20 & 0x80000000) >> 1) ^ *(_DWORD *)(v21 + 4 * (v24 & 1));
  v20[1] = v26 ^ ((v25 & 0x7FFFFFFE | v24 & ((v23 + 196725343) & 0xF44636DE ^ 0x8000040C)) >> 1) ^ v27;
  return ((uint64_t (*)(void))(*(_QWORD *)(v22 + 8 * ((v23 + 318) ^ 0x23C)) - 4))();
}

uint64_t sub_193C6F728@<X0>(char a1@<W6>, char a2@<W7>, int a3@<W8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int *v9;
  uint64_t v10;

  v9 = (unsigned int *)(v5 + 4 * v4);
  v10 = v4 + 1;
  *v9 = *(_DWORD *)(v6 + 4 * (*(_DWORD *)(v5 + 4 * v10) & 1)) ^ v9[397] ^ ((*(_DWORD *)(v5 + 4 * v10) & 0x7FFFFFFE | v3 & 0x80000000) >> ((a3 + a1) & a2 ^ v8));
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((v10 == 227) | a3)) - 4))();
}

uint64_t sub_193C6F784()
{
  int v0;
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[227] = *(_DWORD *)(v2 + 4 * (v1[228] & ((v0 + 713) ^ 0x596))) ^ *v1 ^ ((v1[228] & 0x7FFFFFFE | v1[227] & 0x80000000) >> 1);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v0 + 945)) - 12))();
}

void sub_193C6F7E8()
{
  JUMPOUT(0x193C6F794);
}

uint64_t sub_193C6F7F0@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,unsigned int a23)
{
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v23[623] = *(_DWORD *)(v24 + 4 * (*v23 & 1)) ^ v23[396] ^ ((*v23 & 0x7FFFFFFE | v23[623] & 0x80000000) >> (((a1 - 23) | 0x4E) ^ v26));
  return (*(uint64_t (**)(void))(v25 + 8 * ((55 * (a23 > 0x26F)) ^ a1)))();
}

uint64_t sub_193C6F850@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12, unsigned int *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t (*a21)(uint64_t))
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v25 = a1 - 713;
  v26 = a1 + 2072421281;
  *a12 = 1;
  v27 = *a13;
  v28 = 944348131 * ((v21 - (v23 | v21) + a9) ^ 0x7EC3D5CFA1CC11B9);
  *(_QWORD *)(v23 + 24) = v28 + 5119;
  *(_QWORD *)(v23 + 32) = v27 ^ v28;
  *(_DWORD *)(v24 - 140) = 1 - v28;
  *(_DWORD *)(v24 - 136) = (v25 + 2072422143) ^ v28;
  *(_DWORD *)(v24 - 132) = (v26 ^ 0x76) + v28;
  *(_DWORD *)(v24 - 148) = (v25 + 2104631672) ^ v28;
  *(_DWORD *)(v24 - 144) = v26 + v28;
  v29 = a21(v24 - 152);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v22 + 8 * *(int *)(v24 - 152)) - 4))(v29);
}

void sub_193C6F924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _DWORD *a20)
{
  *a20 = 0;
  JUMPOUT(0x193C6F990);
}

void sub_193C6FA58()
{
  JUMPOUT(0x193C6F04CLL);
}

void sub_193C6FA60()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = v0;
}

void sub_193C6FAA4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unint64_t *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  **(_DWORD **)(a1 + 96) = *(_DWORD *)(a2 + 16);
  v3 = 235795823 * (((&v5 | 0xF12CEE69) + (~&v5 | 0xED31196)) ^ 0x6581A731);
  v6 = v3 ^ 0xDDB4597;
  v7 = v3 + 426523017;
  v5 = &STACK[0x3C058A92099E354D];
  sub_193C8F838((uint64_t)&v5);
  __asm { BR              X9 }
}

uint64_t sub_193C6FC38()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;

  v5 = v2 + 1109611446;
  if (v5 <= 0x40)
    v5 = 64;
  return (*(uint64_t (**)(void))(v3 + 8 * ((1023 * (v4 - v0 - v1 + v5 < 0xF)) ^ 0x1ECu)))();
}

uint64_t sub_193C6FCA4(int a1)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;

  v7 = v2 + v1;
  v8 = ((v3 + 886) ^ 0x213) + v7;
  if (v8 <= 0x40)
    v8 = v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((146 * (v6 - v7 < a1 + v8)) ^ 0x575u)) - 12))();
}

uint64_t sub_193C6FCF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,char a25)
{
  int v25;
  int v26;
  int v27;
  uint64_t v28;

  return (*(uint64_t (**)(void))(v28
                              + 8
                              * ((((unint64_t)(&a25 + 25 * (v27 ^ 0x23Cu) + a13 + v26 + v25 + 239) > 0xF)
                                * ((v27 + 355) ^ 0x579)) ^ v27)))();
}

uint64_t sub_193C6FD48@<X0>(int a1@<W8>)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;

  v8.i64[0] = 0x2424242424242424;
  v8.i64[1] = 0x2424242424242424;
  v9.i64[0] = 0x1313131313131313;
  v9.i64[1] = 0x1313131313131313;
  *(int8x16_t *)(v3 + (a1 + v1)) = vaddq_s8(vaddq_s8(*v7, v9), vmvnq_s8(vandq_s8(vaddq_s8(*v7, *v7), v8)));
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * (int)(((((v5 ^ v2) ^ 0x69 ^ (((v5 ^ v2 ^ 0x1FFFFFB7ELL) & (v4 + 1)) == 16)) & 1)
                                               * v2) ^ v5 ^ v2))
                            - 12))();
}

void sub_193C6FDC8()
{
  JUMPOUT(0x193C6FD84);
}

uint64_t sub_193C6FDD0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((((a1 - 643) | 0x12) ^ 0xE21) * (v1 == v2)) ^ a1)) - 12))();
}

uint64_t sub_193C6FE0C@<X0>(int a1@<W4>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  *(&a19 + ((v21 ^ 0xFFFFFC89) & (a2 + v19))) = *(_BYTE *)(v20 + v23 - 758818216)
                                                + (~(2 * *(_BYTE *)(v20 + v23 - 758818216)) | 0xDB)
                                                + 19;
  return (*(uint64_t (**)(void))(v22 + 8 * (int)((1811 * ((a1 + a2 + 1) > 0x3F)) ^ v21)))();
}

uint64_t sub_193C6FE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int32x4_t a43,int32x4_t a44,int32x4_t a45,int32x4_t a46)
{
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, __n128, __n128, __n128, __n128, __n128);
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  uint64_t v61;
  int v62;
  uint8x16_t v63;
  uint16x8_t v64;
  int8x16_t v65;
  int8x16_t v66;
  uint16x8_t v67;
  int8x16_t v68;
  int8x16_t v69;
  uint8x16_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint8x16_t v73;
  int8x16_t v76;
  int8x16_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  uint64_t v87;
  uint8x16_t v88;
  uint16x8_t v89;
  uint16x8_t v90;
  uint8x16_t v91;
  uint8x16_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  _DWORD *v103;
  int v104;
  int v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int8x16x4_t v113;
  int8x16x4_t v114;

  v108 = v47;
  v55 = (uint64_t (*)(uint64_t, __n128, __n128, __n128, __n128, __n128))(*(_QWORD *)(v48 + 8 * v46) - 4);
  v56 = (__n128)vdupq_n_s32(0x23259459u);
  v57.n128_u64[0] = 0x1212121212121212;
  v57.n128_u64[1] = 0x1212121212121212;
  v58 = (__n128)vdupq_n_s32(0xA3259451);
  HIDWORD(a21) = (v51 + 1068299443) & 0x2F06D27C;
  v112 = ((HIDWORD(a21) - 603) | 0x2F8u) ^ (unint64_t)(v53 - 405);
  v59 = (__n128)vdupq_n_s32(0x23259457u);
  v60.n128_u64[0] = 0x2424242424242424;
  v60.n128_u64[1] = 0x2424242424242424;
  HIDWORD(a19) = HIDWORD(a33);
  v61 = a35;
  v62 = BYTE4(a36) ^ 0x1C;
  HIDWORD(v109) = BYTE4(a36) ^ 0x1C;
  if (v62 == 2)
  {
    HIDWORD(v110) = a34;
    v111 = __PAIR64__(a35, HIDWORD(a34));
    v114 = vld4q_s8((const char *)&a24 + 4);
    v87 = HIDWORD(a35);
    LODWORD(v109) = HIDWORD(a35);
    v88 = (uint8x16_t)veorq_s8(v114.val[0], (int8x16_t)v57);
    v89 = vmovl_u8(*(uint8x8_t *)v88.i8);
    v90 = vmovl_high_u8(v88);
    v91 = (uint8x16_t)veorq_s8(v114.val[1], (int8x16_t)v57);
    _Q22 = vmovl_u8(*(uint8x8_t *)v91.i8);
    _Q21 = vmovl_high_u8(v91);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }
    v96 = (uint8x16_t)veorq_s8(v114.val[2], (int8x16_t)v57);
    v97 = vmovl_high_u8(v96);
    v98 = vmovl_u8(*(uint8x8_t *)v96.i8);
    v114.val[0] = veorq_s8(v114.val[3], (int8x16_t)v57);
    v114.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v114.val[0]);
    v114.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v114.val[1]);
    v114.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v114.val[1].i8);
    v114.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v114.val[0].i8);
    v114.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v114.val[0]);
    v114.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v114.val[0].i8);
    v99 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v98.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v89.i8), 0x18uLL)), v114.val[0]);
    v100 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v98, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v89), 0x18uLL)), v114.val[3]);
    v101 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v97.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v90.i8), 0x18uLL)), v114.val[1]);
    v102 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v97, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v90), 0x18uLL)), v114.val[2]);
    v114.val[0] = veorq_s8(vandq_s8((int8x16_t)v99, (int8x16_t)v56), (int8x16_t)(*(_OWORD *)v114.val & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    v114.val[3] = veorq_s8(vandq_s8((int8x16_t)v100, (int8x16_t)v56), (int8x16_t)(*(_OWORD *)&v114.val[3] & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    v114.val[1] = veorq_s8(vandq_s8((int8x16_t)v101, (int8x16_t)v56), (int8x16_t)(*(_OWORD *)&v114.val[1] & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    v114.val[2] = veorq_s8(vandq_s8((int8x16_t)v102, (int8x16_t)v56), (int8x16_t)(*(_OWORD *)&v114.val[2] & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    a45 = vaddq_s32(vsubq_s32(v101, vaddq_s32((int32x4_t)v114.val[1], (int32x4_t)v114.val[1])), (int32x4_t)v58);
    a46 = vaddq_s32(vsubq_s32(v102, vaddq_s32((int32x4_t)v114.val[2], (int32x4_t)v114.val[2])), (int32x4_t)v58);
    a43 = vaddq_s32(vsubq_s32(v99, vaddq_s32((int32x4_t)v114.val[0], (int32x4_t)v114.val[0])), (int32x4_t)v58);
    a44 = vaddq_s32(vsubq_s32(v100, vaddq_s32((int32x4_t)v114.val[3], (int32x4_t)v114.val[3])), (int32x4_t)v58);
    v103 = (_DWORD *)&a43 + v53 + 2043231676;
    v104 = *(v103 - 8) ^ *(v103 - 3);
    v105 = v104 + v52 - ((2 * v104) & 0x464B28A2);
    v106 = *(v103 - 16) ^ *((_DWORD *)&a43 + v112 + 2043231676);
    HIDWORD(v107) = v106 ^ v105 ^ 0x23259451;
    LODWORD(v107) = v106 ^ ~v105;
    *v103 = (v107 >> 31) + v52 - ((2 * (v107 >> 31)) & 0x464B28A2);
    LODWORD(v110) = HIDWORD(a12) - 945874216;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t (*)(uint64_t, __n128, __n128, __n128, __n128, __n128), uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 8 * ((2901 * (v54 == 2043231613)) ^ HIDWORD(a21))))(v87, v61, 671088640, 23484141, 1179330722, a6, 2080217225, a8, a9, a10, a11, a12, a13, v108, v109, v110, v111, v55, a19,
             v112,
             a21,
             v54 - 16,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42);
  }
  else if (v62 == 1)
  {
    v113 = vld4q_s8((const char *)&a24 + 4);
    v63 = (uint8x16_t)veorq_s8(v113.val[0], (int8x16_t)v57);
    v64 = vmovl_u8(*(uint8x8_t *)v63.i8);
    v65 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v64.i8);
    v66 = (int8x16_t)vmovl_high_u16(v64);
    v67 = vmovl_high_u8(v63);
    v68 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v67.i8);
    v69 = (int8x16_t)vmovl_high_u16(v67);
    v70 = (uint8x16_t)veorq_s8(v113.val[1], (int8x16_t)v57);
    v71 = vmovl_high_u8(v70);
    v72 = vmovl_u8(*(uint8x8_t *)v70.i8);
    v73 = (uint8x16_t)veorq_s8(v113.val[2], (int8x16_t)v57);
    _Q26 = (int8x16_t)vmovl_high_u8(v73);
    _Q25 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v73.i8);
    v76 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q25.i8, 0x10uLL);
    __asm { SHLL2           V25.4S, V25.8H, #0x10 }
    v81 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q26.i8, 0x10uLL);
    __asm { SHLL2           V26.4S, V26.8H, #0x10 }
    v113.val[0] = veorq_s8(v113.val[3], (int8x16_t)v57);
    v113.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v113.val[0]);
    v113.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v113.val[1]);
    v113.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v113.val[0].i8);
    v113.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v113.val[0]);
    v113.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v113.val[0].i8), 0x18uLL), v76), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v72.i8, 8uLL), v65));
    v113.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v113.val[3], 0x18uLL), _Q25), vorrq_s8((int8x16_t)vshll_high_n_u16(v72, 8uLL), v66));
    v113.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v113.val[1].i8), 0x18uLL), v81), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v71.i8, 8uLL), v68));
    v113.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v113.val[2], 0x18uLL), _Q26), vorrq_s8((int8x16_t)vshll_high_n_u16(v71, 8uLL), v69));
    v82 = (int32x4_t)veorq_s8(vandq_s8(v113.val[0], (int8x16_t)v59), (int8x16_t)(*(_OWORD *)&v65 & __PAIR128__(0xFFFFFF06FFFFFF06, 0xFFFFFF06FFFFFF06)));
    v83 = (int32x4_t)veorq_s8(vandq_s8(v113.val[3], (int8x16_t)v59), (int8x16_t)(*(_OWORD *)&v66 & __PAIR128__(0xFFFFFF06FFFFFF06, 0xFFFFFF06FFFFFF06)));
    v84 = (int32x4_t)veorq_s8(vandq_s8(v113.val[1], (int8x16_t)v59), (int8x16_t)(*(_OWORD *)&v68 & __PAIR128__(0xFFFFFF06FFFFFF06, 0xFFFFFF06FFFFFF06)));
    v85 = (int32x4_t)veorq_s8(vandq_s8(v113.val[2], (int8x16_t)v59), (int8x16_t)(*(_OWORD *)&v69 & __PAIR128__(0xFFFFFF06FFFFFF06, 0xFFFFFF06FFFFFF06)));
    a45 = vaddq_s32(vsubq_s32((int32x4_t)v113.val[1], vaddq_s32(v84, v84)), (int32x4_t)v58);
    a46 = vaddq_s32(vsubq_s32((int32x4_t)v113.val[2], vaddq_s32(v85, v85)), (int32x4_t)v58);
    a43 = vaddq_s32(vsubq_s32((int32x4_t)v113.val[0], vaddq_s32(v82, v82)), (int32x4_t)v58);
    a44 = vaddq_s32(vsubq_s32((int32x4_t)v113.val[3], vaddq_s32(v83, v83)), (int32x4_t)v58);
    return ((uint64_t (*)(__n128))(*(_QWORD *)(v48 + 8 * (int)((a6 + v51 - 83) | 0x16)) - 4))(v56);
  }
  else
  {
    HIDWORD(a33) = 2 * (HIDWORD(a33) ^ v50) + v50 - (v49 & (4 * (HIDWORD(a33) ^ v50)));
    LODWORD(a34) = 2 * (a34 ^ v50) + v50 - (v49 & (4 * (a34 ^ v50)));
    HIDWORD(a34) = 2 * (HIDWORD(a34) ^ v50) + v50 - (v49 & (4 * (HIDWORD(a34) ^ v50)));
    LODWORD(a35) = 2 * (a35 ^ v50) + v50 - (v49 & (4 * (a35 ^ v50)));
    return v55(3536149080, v56, v57, v58, v59, v60);
  }
}

uint64_t sub_193C70A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, unsigned int a16)
{
  uint64_t v16;
  int v17;
  _BOOL4 v18;

  if (a16 < 0xD6220894 != (a14 - 1461230804) < 0xD6220894)
    v18 = (a14 - 1461230804) < 0xD6220894;
  else
    v18 = a14 - 1461230804 > a16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v16
                                        + 8 * ((3607 * ((((a6 + v17 - 1389) ^ v18) & 1) == 0)) ^ (a6 + v17 - 205)))
                            - ((607 * (v17 ^ (v17 + 3))) ^ 0x715)))();
}

uint64_t sub_193C70B18(int a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (v5 ^ (3848 * (v4 + a1 + 63 >= (v4 + a1)))))
                            - ((v7 + v5 - 1821) ^ a4)))();
}

uint64_t sub_193C70B5C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return ((uint64_t (*)(void))(*(_QWORD *)(v16
                                        + 8
                                        * ((113 * (a13 + v14 - v15 >= ((v13 - 1755565022) & 0xF9EFFFEC ^ (a4 + 20)))) ^ v13))
                            - ((v13 - a6 - 42) ^ a4)))();
}

uint64_t sub_193C70BBC(int a1, unsigned int a2, double a3, int8x16_t a4, double a5, double a6, int8x16_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  int v12;
  int8x16_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;

  v17 = *(int8x16_t *)(v16 + a1 + v12 + ((v14 + a12) & a2) - 53);
  *v13 = vaddq_s8(vsubq_s8(v17, vandq_s8(vaddq_s8(v17, v17), a7)), a4);
  return (*(uint64_t (**)(void))(v15 + 8 * (a11 + v14 - 1039)))();
}

uint64_t sub_193C70C1C@<X0>(int a1@<W0>, int a2@<W5>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  *(_BYTE *)(v4 + a3) = *(_BYTE *)(v8 + (v3 + a1))
                      - (v9 & (2 * *(_BYTE *)(v8 + (v3 + a1))))
                      + 18;
  return (*(uint64_t (**)(void))(v7 + 8 * (((a3 != 63) * v6) ^ (a2 + v5 - 993))))();
}

uint64_t sub_193C70C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v13;
  int v14;
  uint64_t v15;
  _BOOL4 v16;

  v16 = v13 - 291587594 < (a13 + 223769058);
  if ((a13 + 223769058) < 0x1BD95F9E != v13 - 291587594 < (((v14 - 320) | 1) ^ 0x1BD95FD9u))
    v16 = (a13 + 223769058) < 0x1BD95F9E;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8 * ((14 * !v16) ^ v14)))(3659781109, 3536149080);
}

uint64_t sub_193C70CEC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;

  v38 = 831981571 * ((2 * ((v37 - 120) & 0x45B87FF8) - (v37 - 120) - 1169719294) ^ 0x23E65026);
  *(_QWORD *)(v37 - 112) = a10;
  *(_DWORD *)(v37 - 120) = (a13 + 1575576409 + (a4 ^ (v36 + 63)) - v36 + 2326) ^ v38;
  *(_DWORD *)(v37 - 116) = v38 + a4 + 152;
  sub_193CA900C(v37 - 120);
  v39 = a35 & 0x3F;
  *(&a26 + (v39 ^ 0x23)) = -110;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v35 + 8 * ((1752 * ((v39 ^ 0x23) > 0x37)) ^ a4))
                                          - 8))(3536149080);
}

uint64_t sub_193C70DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22)
{
  int v22;
  uint64_t v23;
  int v24;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v23
                                                     + 8
                                                     * ((((((a22 - 212) | 0x21) - a6 - 368) ^ (v24 - 24)) * (v22 == 63)) ^ a22)))(a1, -1528731557);
}

uint64_t sub_193C70E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (v5 ^ (233 * ((v4 ^ 0x1Cu) < 8))))
                            - (v5 ^ 0x93Cu ^ (unint64_t)(a4 - 173) ^ (v5 - 1713555766) & 0xF76EFBFE)))();
}

uint64_t sub_193C70E80@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  int v19;
  int v20;
  uint64_t v21;

  *(_QWORD *)(&a19 + a2 + a1) = 0x1212121212121212;
  return ((uint64_t (*)(void))(*(_QWORD *)(v21
                                        + 8
                                        * ((26 * (((v20 + 1011) ^ 0x55ALL) != ((v20 - 295) & v19))) | (v20 - 26)))
                            - 4))();
}

uint64_t sub_193C70EDC@<X0>(int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,char a21)
{
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  int v28;
  unsigned int v29;
  int v30;
  _BOOL4 v31;

  v27 = v21 < a3;
  v28 = *(unsigned __int8 *)(v26 + (v22 + a2));
  *(&a21 + (a4 + a1)) = v28 - ((v28 << (((v23 + 127) ^ 4) & 0xBD)) & 0x24) + 18;
  v29 = v22 + 1 + v24;
  v30 = v27 ^ (v29 < a3);
  v31 = v29 < v21;
  if (!v30)
    v27 = v31;
  return (*(uint64_t (**)(void))(v25 + 8 * ((14 * !v27) ^ v23)))();
}

uint64_t sub_193C70F64@<X0>(int a1@<W5>, int a2@<W8>)
{
  uint64_t v2;
  int v3;
  int v4;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * ((286 * ((a2 - 1528731557) < 0x38)) ^ (v4 + a1)))
                                          - 8 * (v4 ^ (v3 + 163))
                                          + 1804))(-1528731557);
}

uint64_t sub_193C70FAC@<X0>(uint64_t a1@<X0>, unsigned int a2@<W8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + a2;
  if ((unint64_t)(v4 + 1) > 0x38)
    v5 = v4 + 1;
  else
    v5 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (int)(((((v2 + 825459871) & 0xCECC76EF) + 3277)
                                               * (v5 - (unint64_t)a2 + 1528731557 > 7)) ^ v2))
                            - 12))();
}

uint64_t sub_193C71010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  uint64_t v19;
  int v20;
  uint64_t v21;

  *(_QWORD *)(&a19 + a2 + a1) = 0x1212121212121212;
  return (*(uint64_t (**)(void))(v21
                              + 8
                              * ((((v20 + 593186124) & 0xDCA4B6FF ^ 0x6FBLL) != (((v20 - 1) - 686) & v19)) ^ (v20 - 1))))();
}

uint64_t sub_193C71074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,int a39)
{
  uint64_t v39;
  int v40;
  uint64_t v42;
  unint64_t v43;

  if (BYTE4(a15) == 2)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39
                                                                          + 8
                                                                          * ((1802 * (a39 != 1497258463)) ^ ((int)a6 + v40 - 1489)))
                                                              - (v40 ^ (v40 - 286) ^ 0x126)))(a1, a2, a9);
  if (BYTE4(a15) == 1)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39
                                                                          + 8
                                                                          * (int)(((a39 == 1497258463)
                                                                                 * ((v40 - 732873037) & 0x9A62873B ^ 0x122)) ^ (a6 + v40 - 1496)))
                                                              - 4))(a1, a2, a9);
  v42 = (a6 + v40 + 236);
  v43 = ((unint64_t)&a23 ^ 0xFDD37FFFDFF6B900 ^ v42)
      + ((2 * (_QWORD)&a23) & 0xFBA6FFFFBFED7DB0)
      + 0x7E6FFEFE704F6021;
  a38 = (v43 ^ 0xBA) * (v43 + 17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 + 8 * (int)((3716 * (((((_DWORD)a6 + v40 + 289415441) | 0x800C1328) ^ (unint64_t)(a4 + 4)) == 91)) ^ v42)) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27);
}

void sub_193C71788()
{
  JUMPOUT(0x193C71754);
}

uint64_t sub_193C71794()
{
  return 0;
}

void sub_193C717D4(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 44) - 1224239923 * (((a1 | 0x1FD8AEE4) - a1 + (a1 & 0xE027511B)) ^ 0xED6B5333);
  __asm { BR              X16 }
}

uint64_t sub_193C71910()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v0 ^ ((16 * (v1 != 0xC0AF5D4F)) | ((v1 != 0xC0AF5D4F) << 7))))
                            - 4))();
}

uint64_t sub_193C71958@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v11 = v7 > 0xCAD84461;
  v12 = (v9 - 527061099);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(v3 + (v12 & (v5 ^ 0x650))) ^ *(_BYTE *)(v1 + v12) ^ *(_BYTE *)(v4 + (v12 & (v5 ^ 0x650))) ^ *(_BYTE *)((v12 & (v5 ^ 0x650)) + v2 + 1) ^ (23 * (v12 & (v5 ^ 0x50)));
  if (v11 == v9 + 364735284 < (v6 + 318))
    v11 = v9 + 364735284 < v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * (int)(((16 * v11) | (v11 << 7)) ^ v5)) - 4))();
}

uint64_t sub_193C71A00()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((367
                                          * (((881 * ((v0 + 1052055967) & 0xC14AE1FF ^ 0x1FC) + 1607924670) ^ v1)
                                           + ((2 * v1) & 0x3EF0BFDE ^ 0x50BA9E)
                                           + 2077734648 != 458233575)) ^ v0))
                            - 4))();
}

uint64_t sub_193C71A84(int a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((a1 + a2 + 1619501073 < ((a4 + 1717409285) & 0x99A2671D ^ 0x40D))
                                          * ((a4 - 829) ^ 0x3AA)) ^ a4))
                            - 12))();
}

uint64_t sub_193C71AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v7;
  uint64_t v8;

  return (*(uint64_t (**)(void))(v8
                              + 8 * (((49 * (a7 ^ 0x3B0) + 442 * (a7 ^ 0x3A7) - 210) * (v7 >> 4 == 167216639)) ^ a7)))();
}

uint64_t sub_193C71B38@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v18;
  unint64_t v19;
  int v21;

  v10 = (a1 + a2 + a3);
  v11 = v10 + v5;
  v12 = v10 + a5;
  v13 = (a1 + a2) & 0xF;
  v14 = v13 + v7 - v12;
  v15 = (v13 | v8) - v12;
  v16 = (v13 | v6) - v12;
  v18 = (unint64_t)(v11 - v12) >= 0x10 && v14 >= 0x10 && v15 >= 0x10;
  v19 = v16 + 1;
  v21 = !v18 || v19 < 0x10;
  return (*(uint64_t (**)(void))(v9 + 8 * (((((a4 - 879) | 0x400) ^ 0x4D4) * v21) ^ a4)))();
}

uint64_t sub_193C71BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v5;
  uint64_t v6;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v6
                                                                      + 8
                                                                      * ((279
                                                                        * ((((a5 - 454) ^ (v5 < ((a5 + 65) ^ 0x3A5u))) & 1) == 0)) ^ (a5 + 764))))(a1, a2, a3, 0);
}

uint64_t sub_193C71BE4@<X0>(int a1@<W4>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  int v56;
  int8x16_t v57;
  uint64_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16x4_t v62;
  int8x16x4_t v63;

  v62.val[1].i64[0] = ((_BYTE)v55 + 6) & 0xF;
  v62.val[1].i64[1] = ((_BYTE)v55 + 5) & 0xF;
  v62.val[2].i64[0] = ((_BYTE)v55 + 4) & 0xF;
  v62.val[2].i64[1] = ((_BYTE)v55 + 3) & 0xF;
  v62.val[3].i64[0] = ((_BYTE)v55 + 2) & 0xF;
  v62.val[3].i64[1] = ((_BYTE)v55 + 1) & 0xF;
  v57.i64[0] = 0x1717171717171717;
  v57.i64[1] = 0x1717171717171717;
  v58 = v55 + ((a1 - 534) ^ v54);
  v62.val[0].i64[0] = ((_BYTE)v55 + ((a1 - 22) ^ v54)) & 0xF;
  v62.val[0].i64[1] = ((_BYTE)v55 + 7) & 0xF;
  v59.i64[0] = vqtbl4q_s8(v62, (int8x16_t)xmmword_193EF83A0).u64[0];
  v63.val[0].i64[1] = ((_BYTE)v55 - 1) & 0xF;
  v63.val[1].i64[1] = ((_BYTE)v55 + 13) & 0xF;
  v63.val[2].i64[1] = (v55 + 11) & 0xF;
  v63.val[3].i64[1] = ((_BYTE)v55 + 9) & 0xF;
  v63.val[0].i64[0] = v55 & 0xF;
  v63.val[1].i64[0] = ((_BYTE)v55 + 14) & 0xF;
  v63.val[2].i64[0] = ((_BYTE)v55 + 12) & 0xF;
  v63.val[3].i64[0] = (v55 + 10) & 0xF;
  v59.i64[1] = vqtbl4q_s8(v63, (int8x16_t)xmmword_193EF83A0).u64[0];
  v60 = vrev64q_s8(vmulq_s8(v59, v57));
  *(int8x16_t *)(a2 - 15 + v58) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v52 + (v58 & 0xF) - 15), *(int8x16_t *)(v50 - 15 + v58)), veorq_s8(*(int8x16_t *)(v53 + (v58 & 0xF) - 15), *(int8x16_t *)((v58 & 0xF) + v51 - 14))), vextq_s8(v60, v60, 8uLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(a50 + 8 * ((125 * ((v56 & 0xFFFFFFF0) == 16)) ^ a1)) - 8))();
}

void sub_193C71D38()
{
  JUMPOUT(0x193C71CC0);
}

uint64_t sub_193C71D44(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;

  return (*(uint64_t (**)(void))(v7 + 8 * ((91 * (((v6 == a4) ^ (a6 + 95 + a6 + 2)) & 1)) ^ a6)))();
}

uint64_t sub_193C71D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;

  return (*(uint64_t (**)(void))(v8
                              + 8
                              * ((((((a7 | 0x204) ^ 0x3AD) & v7) != 0) * (((a7 | 0x204) ^ 0x20B) + 1063)) ^ (a7 | 0x204))))();
}

uint64_t sub_193C71DD0@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int8x16x4_t v66;

  *(_QWORD *)(v61 - 128) = a5 - 7;
  *(_QWORD *)(v61 - 120) = v53 - 7;
  *(_DWORD *)(v61 - 144) = v60 & 0xFFFFFFF8;
  *(_DWORD *)(v61 - 140) = v60;
  v62 = -8 - a4;
  v63 = v59 + a2 + a1;
  *(_DWORD *)(v61 - 136) = v63 + 1;
  *(_DWORD *)(v61 - 132) = -(v60 & 0xFFFFFFF8);
  *(_DWORD *)(v61 - 152) = (v58 - 301) | 0x620;
  v64 = (a2 + a1 + a3 + v62 + 8);
  v66.val[0].i64[0] = ((_BYTE)a2 + (_BYTE)a1 + (_BYTE)a3 + (_BYTE)v62 + 8) & 0xF;
  v66.val[0].i64[1] = ((_BYTE)v63 + 7 + (_BYTE)v62 + 8) & 0xF;
  v66.val[1].i64[0] = (v57 + (_BYTE)v62 + ((v58 - 45) ^ 7) + 8) & 0xF;
  v66.val[1].i64[1] = ((_BYTE)v63 + 5 + (_BYTE)v62 + 8) & 0xF;
  v66.val[2].i64[0] = ((_BYTE)v63 + 4 + (_BYTE)v62 + 8) & 0xF;
  v66.val[2].i64[1] = ((_BYTE)v63 + 3 + (_BYTE)v62 + 8) & 0xF;
  v66.val[3].i64[0] = ((_BYTE)v63 + 2 + (_BYTE)v62 + 8) & 0xF;
  v66.val[3].i64[1] = (*(_DWORD *)(v61 - 136) + (_BYTE)v62 + 8) & 0xF;
  *(int8x8_t *)(*(_QWORD *)(v61 - 128) + v64) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v55 + (v64 & 0xF) - 7), *(int8x8_t *)(*(_QWORD *)(v61 - 120) + v64)), veor_s8(*(int8x8_t *)(v56 + (v64 & 0xF) - 7), *(int8x8_t *)((v64 & 0xF) + v54 - 6))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v66, (int8x16_t)xmmword_193EF83B0), (int8x8_t)0x1717171717171717)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a53 + 8 * ((1322 * (*(_DWORD *)(v61 - 132) == v62)) ^ v58))
                                         - 12))((__n128)xmmword_193EF83B0);
}

void sub_193C71F44()
{
  JUMPOUT(0x193C71E3CLL);
}

uint64_t sub_193C71F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v4
                                                                                         + 8
                                                                                         * (int)((((*(_DWORD *)(v5 - 152)
                                                                                                  + 1206319044) & 0xB819059F ^ 0x449)
                                                                                                * (*(_DWORD *)(v5 - 140) != *(_DWORD *)(v5 - 144))) | *(_DWORD *)(v5 - 152)))
                                                                             - 12))(a1, a2, a3, a4, (*(_DWORD *)(v5 - 152) - 1187));
}

uint64_t sub_193C71F98@<X0>(int a1@<W5>, int a2@<W7>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  *(_BYTE *)(a3 + (v8 + a1 + 145)) = *(_BYTE *)(v5 + ((v8 + a1 + 145) & 0xFLL)) ^ *(_BYTE *)(v3 + (v8 + a1 + 145)) ^ *(_BYTE *)(v6 + (((_BYTE)v8 + (_BYTE)a1 - 111) & 0xF)) ^ *(_BYTE *)((((_BYTE)v8 + (_BYTE)a1 - 111) & 0xF) + v4 + 1) ^ (23 * ((v8 + a1 - 111) & 0xF));
  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * ((212 * (((a1 - 1 == v7) ^ (a2 - 6)) & 1)) ^ (a2 + 602)))
                            - 4))();
}

uint64_t sub_193C7200C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  int v53;

  v51 = *(_QWORD *)(v48 + 24);
  *(int8x16_t *)(v50 - 112) = veorq_s8(*(int8x16_t *)*(_QWORD *)(v48 + 16), (int8x16_t)xmmword_193EF83C0);
  if (a9)
    v52 = v51 == 0x2FF5F3CC565B97FLL;
  else
    v52 = 1;
  v53 = !v52;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 + 8 * (int)((1142 * v53) ^ a5)) - 12))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48);
}

uint64_t sub_193C72080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  _BOOL4 v49;

  v49 = (((_BYTE)a24 + 11) & 0xF) == 0 && (_DWORD)a24 != 294637861;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 + 8 * (int)(a5 ^ (1017 * v49))) - (((_DWORD)a5 + 1527702206) & 0xA4F11BFF) + 176))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47);
}

uint64_t sub_193C720E0@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,unsigned int a48,uint64_t a49,uint64_t a50)
{
  uint64_t v50;
  unsigned __int8 *v51;
  int v52;
  uint64_t v53;
  char v54;
  int v55;
  uint64_t v56;
  char *v57;
  int v58;
  char *v59;
  char *v60;
  int v61;
  unsigned int v62;
  unsigned __int8 v63;
  unint64_t v64;
  char *v65;
  int v66;
  int v67;
  int v68;
  char v69;
  int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  int v76;
  unsigned __int8 *v77;
  char *v78;
  unsigned int v79;
  uint64_t v80;
  char *v81;
  char *v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  int v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  int v131;
  char *v132;
  unsigned int v133;
  char *v134;
  uint64_t v135;
  unsigned int v136;
  char *v137;
  int v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  int v154;
  int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  int v159;
  int v160;
  int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  int v170;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  unsigned int v175;
  int v176;
  int v177;
  unsigned int v178;
  int v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  int v187;
  int v188;
  unsigned int v189;
  int v190;
  int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  unsigned int v207;
  unsigned int v208;
  int v209;
  int v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  int v220;
  int v221;
  uint64_t v222;
  int v223;
  int v224;
  int v225;
  unsigned int v226;
  int v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  unsigned int v233;
  unsigned int v234;
  int v235;
  char *v236;
  int v237;
  int v238;
  unint64_t v239;
  int v240;
  char *v241;
  int v242;
  int v243;
  int v244;
  int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  int v265;
  int v266;
  int v267;
  unsigned int v268;
  int v269;
  int v270;
  unsigned int v271;
  int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  unsigned int v279;
  int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int v298;
  unsigned int v299;
  unsigned int v300;
  int v301;
  unsigned int v302;
  int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  int v307;
  int v308;
  unsigned int v309;
  int v310;
  unsigned int v311;
  int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  unsigned int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  unsigned int v326;
  int v327;
  int v328;
  unsigned int v329;
  unsigned int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  unsigned int v336;
  int v337;
  int v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  int v343;
  int v344;
  unsigned int v345;
  int v346;
  unsigned int v347;
  int v348;
  unsigned int v349;
  int v350;
  int v351;
  unsigned int v352;
  int v353;
  int v354;
  unsigned int v355;
  unsigned int v356;
  uint64_t v357;
  char *v358;
  char *v359;
  unsigned int v360;
  int v361;
  int v362;
  char *v363;
  int v364;
  int v365;
  uint64_t v366;
  int v367;
  int v368;
  uint64_t v369;
  int v370;
  int v371;
  uint64_t v372;
  char *v373;
  unsigned int v374;
  unsigned int v375;
  unsigned int v376;
  char *v377;
  int v378;
  int v379;
  char *v380;
  unsigned int v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unsigned int v394;
  uint64_t v395;
  int v396;
  uint64_t v397;
  unsigned int v398;
  unsigned int v399;
  uint64_t v400;
  int v401;
  unsigned int v402;
  uint64_t v403;
  unsigned int v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  int v409;
  unsigned int v410;
  uint64_t v411;
  int v412;
  unsigned int v413;
  __int16 v414;
  uint64_t v415;
  unsigned int v416;
  unsigned int v417;
  unsigned int v418;
  uint64_t v419;
  unsigned int v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  int v424;
  uint64_t v425;
  int v426;
  unsigned int v427;
  unsigned __int8 v428;
  unsigned int v429;
  unsigned int v430;
  uint64_t v431;
  unsigned int v432;
  int v433;
  unsigned int v434;
  int v435;
  uint64_t v436;
  int v437;
  int v438;
  int v439;
  unsigned int v440;
  unsigned int v441;
  uint64_t v442;
  int v443;
  int v444;
  int v445;
  unsigned int v446;
  int v447;
  uint64_t v448;
  unsigned __int8 v449;
  unsigned int v450;
  unsigned int v451;
  unsigned int v452;
  uint64_t v453;
  unsigned int v454;
  unsigned int v455;
  int v456;
  unsigned int v457;
  uint64_t v458;
  unsigned int v459;
  int v460;
  unsigned int v461;
  int v462;
  uint64_t v463;
  unsigned int v464;
  int v465;
  unsigned int v466;
  unsigned int v467;
  uint64_t v468;
  int v469;
  unsigned int v470;
  unsigned int v471;
  int v472;
  uint64_t v473;
  int v474;
  unsigned int v475;
  int v476;
  int v477;
  uint64_t v478;
  int v479;
  int v480;
  int v481;
  int v482;
  unsigned int v483;
  uint64_t v484;
  int v485;
  unsigned int v486;
  int v487;
  unsigned int v488;
  unsigned int v489;
  int v490;
  uint64_t v491;
  int v492;
  int v493;
  int v494;
  unsigned int v495;
  int v496;
  uint64_t v497;
  unsigned int v498;
  int v499;
  unsigned int v500;
  unsigned int v501;
  uint64_t v502;
  int v503;
  unsigned int v504;
  int v505;
  int v506;
  uint64_t v507;
  unsigned int v508;
  int v509;
  unsigned int v510;
  int v511;
  uint64_t v512;
  unsigned int v513;
  int v514;
  unsigned int v515;
  unsigned int v516;
  uint64_t v517;
  int v518;
  int v519;
  int v520;
  int v521;
  uint64_t v522;
  unsigned int v523;
  int v524;
  unsigned int v525;
  uint64_t v526;
  int v527;
  unsigned int v528;
  int v529;
  unsigned int v530;
  char *v531;
  unsigned int v532;
  unsigned int v533;
  char *v534;
  int v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  unsigned int v540;
  unsigned int v541;
  int v542;
  unsigned int v543;
  int v544;
  int v545;
  unsigned int v546;
  int v547;
  int v548;
  unsigned int v549;
  int v550;
  unsigned int v551;
  unsigned int v552;
  int v553;
  int v554;
  unsigned int v555;
  int v556;
  int v557;
  int v558;
  int v559;
  int v560;
  int v561;

  v54 = *(_BYTE *)(v50 - 0x2FF5F3CC565B97DLL);
  v55 = (v52 + 836) | 5;
  *(_DWORD *)(v53 - 128) = v55;
  v56 = (v54 ^ v55 ^ 0xD2);
  v57 = (char *)*(&off_1E31525C0 + v52 - 182) - 8;
  v58 = (v57[v56] ^ 0x60) << 8;
  v59 = (char *)*(&off_1E31525C0 + (v52 ^ 0x6A)) - 8;
  v60 = (char *)*(&off_1E31525C0 + (v52 & 0x661A5825)) - 4;
  v61 = v60[*(unsigned __int8 *)(v50 - 0x2FF5F3CC565B972) ^ 0x49];
  v62 = v58 | ((v59[*v51 ^ 0xB1] ^ 0xBBBBBBBB) << 24);
  HIDWORD(v64) = ~v61;
  LODWORD(v64) = (v61 ^ 0x3C) << 24;
  v63 = v64 >> 26;
  v65 = (char *)*(&off_1E31525C0 + (v52 ^ 0x5B)) - 4;
  v66 = v59[*(unsigned __int8 *)(v50 - 0x2FF5F3CC565B973) ^ 0xB8];
  v67 = v60[*(unsigned __int8 *)(v50 - 0x2FF5F3CC565B976) ^ 0x6BLL];
  HIDWORD(v64) = ~v67;
  LODWORD(v64) = (v67 ^ 0x3C) << 24;
  v68 = ((v64 >> 26) ^ 0x53) << 16;
  v69 = v57[*(unsigned __int8 *)(v50 - 0x2FF5F3CC565B971) ^ 0x2ELL];
  v70 = v60[*(unsigned __int8 *)(v50 - 0x2FF5F3CC565B97ELL) ^ 0x47];
  HIDWORD(v64) = ~v70;
  LODWORD(v64) = (v70 ^ 0x3C) << 24;
  v71 = v62 & 0xFF00FF00 | (v65[*(unsigned __int8 *)(v50 - 0x2FF5F3CC565B97CLL) ^ 0xECLL] + 73) ^ 9 | (((v64 >> 26) ^ 0x1E) << 16);
  v72 = v57[*(unsigned __int8 *)(v50 - 0x2FF5F3CC565B979) ^ 0x30];
  LODWORD(v57) = v68 | ((v57[*(unsigned __int8 *)(v50 - 0x2FF5F3CC565B975) ^ 0x77] ^ 0xAF) << 8);
  LOBYTE(v68) = v65[*(unsigned __int8 *)(v50 - 0x2FF5F3CC565B970) ^ 0x36] + 73;
  LODWORD(v60) = v60[*(unsigned __int8 *)(v50 - 0x2FF5F3CC565B97ALL) ^ 0xCBLL];
  HIDWORD(v64) = ~(_DWORD)v60;
  LODWORD(v64) = (v60 ^ 0x3C) << 24;
  v73 = ((v65[*(unsigned __int8 *)(v50 - 0x2FF5F3CC565B978) ^ 0xA9] + 73) | ((v72 ^ 0x55) << 8)) & 0xFF00FFFF | (((v64 >> 26) ^ 0xBA) << 16);
  LODWORD(v57) = v57 & 0xFFFFFF00 | (v65[*(unsigned __int8 *)(v50 - 0x2FF5F3CC565B974) ^ 0xB5]
                                                                  + 73) ^ 0xA8;
  v74 = *(unsigned __int8 *)(v50 - 0x2FF5F3CC565B97BLL);
  v75 = v59[*(unsigned __int8 *)(v50 - 0x2FF5F3CC565B977) ^ 0xBFLL];
  v76 = v73 | ((v59[v74 ^ 0x35] ^ 0x74) << 24);
  *(_QWORD *)(v53 - 120) = a1;
  v77 = *(unsigned __int8 **)(v53 - 120);
  v78 = (char *)*(&off_1E31525C0 + (v52 ^ 0xEF)) - 8;
  v79 = v57 | ((v75 ^ 0x6D) << 24);
  v80 = (uint64_t)*(&off_1E31525C0 + v52 + 11);
  LODWORD(v57) = *(_DWORD *)&v78[4 * (v68 ^ 0xFD)] ^ 0xC0459F87 ^ *(_DWORD *)(v80 + 4 * (v63 ^ 0x61u));
  v81 = (char *)*(&off_1E31525C0 + (v52 & 0x4ED8A673)) - 4;
  LODWORD(v57) = ((_DWORD)v57 - ((2 * (_DWORD)v57) & 0xDC0C6B3C) + 1845900702) ^ *(_DWORD *)&v81[4
                                                                                               * (v66 ^ 0x96)];
  v82 = (char *)*(&off_1E31525C0 + v52 - 13) - 12;
  v540 = v71;
  v83 = *(_DWORD *)&v82[4 * (v69 ^ 0x9D)] ^ v71 ^ ((_DWORD)v57
                                                                  - ((2 * (_DWORD)v57) & 0x726D6464)
                                                                  - 1187597774);
  HIDWORD(v539) = v68 ^ 0x2A | ((v69 ^ 0xA5) << 8) | ((v63 ^ 0xFB) << 16) | ((v66 ^ 3) << 24);
  LODWORD(v57) = HIDWORD(v539) - ((2 * HIDWORD(v539)) & 0x2D6AFB36) - 1766490725;
  LODWORD(v539) = v76;
  v84 = v83 ^ v76;
  v85 = v83;
  v423 = v83;
  *(_DWORD *)(v53 - 176) = v84;
  v86 = v84 ^ 0x4D ^ v79;
  LODWORD(v59) = v84 ^ 0x4D;
  v428 = v84 ^ 0x4D;
  *(_DWORD *)(v53 - 168) = v86;
  v469 = ((unsigned __int16)(v86 ^ (WORD2(v539) - ((2 * WORD2(v539)) & 0xFB36) + 32155)) >> 8);
  v456 = ((v86 ^ v57) >> 16);
  v450 = v86 ^ v57;
  LODWORD(v57) = *(_DWORD *)&v82[4 * (v469 ^ 0x87)] ^ *(_DWORD *)(v80 + 4 * (v456 ^ 0xBu)) ^ 0x8DF4118C;
  v465 = v450;
  LODWORD(v57) = ((_DWORD)v57 - ((2 * (_DWORD)v57) & 0xE90E7872) - 192463815) ^ *(_DWORD *)&v78[4
                                                                                              * (v450 ^ 0xB2)];
  v461 = (v450 ^ 0x2C425032) >> 24;
  v87 = v85 ^ *(_DWORD *)&v81[4 * (v461 ^ 0x65)] ^ ((_DWORD)v57 - ((2 * (_DWORD)v57) & 0xDC0C6B3C) + 1845900702);
  v555 = (v84 ^ 0xBAF72DE4) - ((2 * (v84 ^ 0xBAF72DE4)) & 0x5A2548BC) + 756196446;
  HIDWORD(v538) = v79;
  v88 = v87 ^ 0x2D12A45E;
  *(_DWORD *)(v53 - 160) = v87;
  v89 = v87 ^ 0x2D12A45E ^ (v79 - ((2 * v79) & 0x5A2548BC) + 756196446);
  LODWORD(v57) = v89 ^ v450 ^ 0x2C425032;
  *(_DWORD *)(v53 - 132) = v89;
  v479 = BYTE2(v57);
  v482 = BYTE1(v57);
  v90 = *(_DWORD *)(v80 + 4 * (BYTE2(v57) ^ 0x2Eu)) ^ *(_DWORD *)&v82[4
                                                                      * (((unsigned __int16)(v87 ^ 0xA45E ^ (v79 - ((2 * v79) & 0x48BC) - 23458) ^ v450 ^ 0x5032) >> 8) ^ 0x9B)] ^ 0x8DF4118C;
  *(_DWORD *)(v53 - 248) = (v89 ^ v450 ^ 0x32);
  v91 = (v90 - ((2 * v90) & 0xE90E7872) - 192463815) ^ *(_DWORD *)&v78[4 * ((v89 ^ v450 ^ 0x32) ^ 0xD2)];
  v92 = v91 - ((2 * v91) & 0xDC0C6B3C);
  v93 = v57 ^ 0x93E72B3;
  *(_DWORD *)(v53 - 192) = v57 >> 24;
  v94 = (v92 + 1845900702) ^ *(_DWORD *)&v81[4 * ((v57 >> 24) ^ 0x69)];
  v95 = v94 ^ v59 ^ 0x5F5BFB00;
  LODWORD(v57) = v94 ^ v59;
  v508 = v94 ^ v59;
  LODWORD(v59) = v95 ^ v89;
  *(_DWORD *)(v53 - 152) = v95 ^ v89;
  v96 = ((v59 ^ 0xC5DDF6EA)
       - 2 * ((v59 ^ 0xC5DDF6EA) & 0x7D99D3FB ^ v59 & 1)
       + 2107233274) ^ v93 ^ 0x9547167F;
  v518 = BYTE2(v96);
  v529 = ((unsigned __int16)((((unsigned __int16)v59 ^ 0xF6EA)
                                             - 2
                                             * (((unsigned __int16)v59 ^ 0xF6EA) & 0xD3FB ^ v59 & 1)
                                             - 11270) ^ v93 ^ 0x167F) >> 8);
  v97 = *(_DWORD *)(v80 + 4 * (BYTE2(v96) ^ 0x89u)) ^ *(_DWORD *)&v82[4 * (v529 ^ 0x3A)] ^ 0x8DF4118C;
  v527 = (((v59 ^ 0xEA)
                          - 2 * ((v59 ^ 0xEA) & 0xFB ^ v59 & 1)
                          - 6) ^ v93);
  v98 = (v97 - ((2 * v97) & 0xE90E7872) - 192463815) ^ *(_DWORD *)&v78[4 * (v527 ^ 0xE4)];
  v541 = HIBYTE(v96);
  v99 = (v98 - ((2 * v98) & 0xDC0C6B3C) + 1845900702) ^ *(_DWORD *)&v81[4 * (HIBYTE(v96) ^ 0x1D)];
  v488 = v94 ^ v87;
  v558 = (v99 - ((2 * v99) & 0x4F8E93C2) + 667372001) ^ v94 ^ v87;
  v100 = v558 ^ 0x27C749E1 ^ v57;
  *(_DWORD *)(v53 - 224) = v558 ^ 0x27C749E1;
  *(_DWORD *)(v53 - 240) = v100;
  v101 = ((v100 ^ 0xFE25CD6D) - ((2 * (v100 ^ 0xFE25CD6D)) & 0xFB33A7F4) + 2107233274) ^ v93;
  v102 = ((unsigned __int16)(((v100 ^ 0xCD6D) - ((2 * (v100 ^ 0xCD6D)) & 0xA7F4) - 11270) ^ v93) >> 8);
  *(_DWORD *)(v53 - 200) = v102;
  v103 = *(_DWORD *)&v82[4 * (v102 ^ 0x6F)];
  *(_DWORD *)(v53 - 208) = BYTE2(v101);
  v104 = *(_DWORD *)(v80 + 4 * (BYTE2(v101) ^ 0xA8u)) ^ v103;
  v552 = HIBYTE(v101);
  v105 = ((v104 ^ 0x8DF4118C) - 2 * ((v104 ^ 0x8DF4118C) & 0x6E06359F ^ v104 & 1) + 1845900702) ^ *(_DWORD *)&v81[4 * (HIBYTE(v101) ^ 0x85)];
  v547 = v101;
  v106 = (v105 - ((2 * v105) & 0xE90E7872) - 192463815) ^ *(_DWORD *)&v78[4 * (v101 ^ 0x25)];
  v107 = (v106 - ((2 * v106) & 0xCB59AD52) - 441657687) ^ v95;
  v549 = v100 ^ v59;
  v108 = v107 ^ v100 ^ v59;
  v421 = v107;
  *(_DWORD *)(v53 - 136) = v108;
  LODWORD(v59) = v108 ^ 0x79565034;
  LODWORD(v57) = v108 ^ 0x79565034 ^ v101;
  v414 = v108 ^ 0x5034;
  *(_DWORD *)(v53 - 232) = v101;
  v454 = (v57 ^ 0xABFF11DD) >> 24;
  v439 = ((v57 ^ 0xABFF11DD) >> 16);
  v109 = *(_DWORD *)(v80 + 4 * (v439 ^ 0x89u)) ^ *(_DWORD *)&v81[4 * (v454 ^ 0x1D)];
  v443 = ((unsigned __int16)((unsigned __int16)v57 ^ 0x11DD) >> 8);
  v110 = ((v109 ^ 0x5AC49620) - 2 * ((v109 ^ 0x5AC49620) & 0x3936B237 ^ v109 & 5) - 1187597774) ^ *(_DWORD *)&v82[4 * (v443 ^ 0x3A)];
  *(_DWORD *)(v53 - 184) = v106 ^ v558 ^ 0x27C749E1;
  *(_DWORD *)(v53 - 256) = v57;
  v111 = v106 ^ v558 ^ 0x27C749E1 ^ *(_DWORD *)&v78[4 * (v57 ^ 0x46)] ^ (v110
                                                                                        - ((2 * v110) & 0xE90E7872)
                                                                                        - 192463815);
  v449 = BYTE2(v107) ^ 0x16;
  v112 = v111 ^ v107 ^ 0x7C166C11;
  v513 = v111;
  LODWORD(v57) = (v112 ^ v101) >> 24;
  *(_DWORD *)(v53 - 216) = (_DWORD)v57;
  v524 = (v112 ^ v101);
  LODWORD(v57) = *(_DWORD *)&v81[4 * (v57 ^ 0x9B)] ^ *(_DWORD *)&v78[4 * (v524 ^ 0x31)] ^ 0x9A8109A7;
  v500 = ((v112 ^ v101) >> 8) ^ 0x86839A;
  v503 = ((unsigned __int16)(v112 ^ v101) >> 8) ^ 0x9A;
  LODWORD(v57) = ((_DWORD)v57 - ((2 * (_DWORD)v57) & 0x726D6464) - 1187597774) ^ *(_DWORD *)&v82[4
                                                                                               * (((unsigned __int16)(v112 ^ v101) >> 8) ^ 0xA0)];
  v113 = (_DWORD)v57 - ((2 * (_DWORD)v57) & 0x6985477C);
  LODWORD(v57) = v112 ^ v101 ^ 0x161790E2;
  v494 = ((v112 ^ v101) >> 16);
  v114 = (v113 + 885171134) ^ *(_DWORD *)(v80 + 4 * (v494 ^ 0xAu));
  v398 = (v114 - ((2 * v114) & 0x94F114BC) - 898069922) ^ v111;
  v115 = v398 ^ 0x37FB10F4 ^ v112;
  v510 = v112 ^ v59;
  v485 = v112;
  v116 = v112 ^ v59 ^ 0xF28DD15B;
  *(_DWORD *)(v53 - 144) = v116;
  v117 = ((v115 ^ 0x5A137D54) - ((2 * (v115 ^ 0x5A137D54)) & 0x8FF24DB6) - 939972901) ^ v116;
  *(_DWORD *)(v53 - 140) = v117;
  v118 = v117 ^ 0x5ADAE547;
  v119 = ((v117 ^ 0xDD453D47) - 2 * ((v117 ^ 0x5ADAE547) & 2 ^ (v117 ^ 0xDD453D47) & 0x10940A4A) - 1869346232) ^ v57 ^ 0x479AB031;
  v544 = (((v117 ^ 0x47) - 2 * ((v117 ^ 0x47) & 2 ^ (v117 ^ 0x47) & 0x4A) + 72) ^ v57);
  v560 = ((unsigned __int16)(((v117 ^ 0x3D47)
                                             - 2 * ((v117 ^ 0xE547) & 2 ^ (v117 ^ 0x3D47) & 0xA4A)
                                             + 2632) ^ (unsigned __int16)v57 ^ 0xB031) >> 8);
  v120 = *(_DWORD *)&v82[4 * (v560 ^ 0x3A)] ^ *(_DWORD *)&v78[4 * (v544 ^ 0xAA)] ^ 0x4DB18E0B;
  v121 = (v120 - ((2 * v120) & 0x6985477C) + 885171134) ^ *(_DWORD *)(v80 + 4 * (BYTE2(v119) ^ 0x89u));
  LODWORD(v59) = (v121 - ((2 * v121) & 0xDC0C6B3C) + 1845900702) ^ *(_DWORD *)&v81[4 * (HIBYTE(v119) ^ 0x1D)];
  v122 = v59 ^ v112;
  LODWORD(v57) = ((v59 ^ v112 ^ 0xA6C48CD5)
                - ((2 * (v59 ^ v112 ^ 0xA6C48CD5)) & 0x21281490)
                - 1869346232) ^ v57;
  v123 = v57 >> 24;
  v124 = BYTE1(v57);
  v125 = v88 ^ v555;
  v126 = *(_DWORD *)&v81[4 * ((v57 >> 24) ^ 5)] ^ *(_DWORD *)&v82[4 * (BYTE1(v57) ^ 0x6F)] ^ 0xD73087AC;
  v520 = v57;
  v127 = (v126 - ((2 * v126) & 0xE90E7872) - 192463815) ^ *(_DWORD *)&v78[4 * (v57 ^ 0x25)];
  v128 = v127 - ((2 * v127) & 0x6985477C);
  v129 = BYTE2(v57);
  v130 = v398 ^ 0x37FB10F4 ^ v59;
  v131 = v130 ^ *(_DWORD *)(v80 + 4 * (BYTE2(v57) ^ 0xA8u)) ^ (v128 + 885171134);
  LODWORD(v57) = v117 ^ 0x5ADAE547 ^ v131 ^ v57;
  v533 = v117 ^ 0x5ADAE547 ^ v131;
  v556 = BYTE1(v57);
  v417 = v57 >> 24;
  LODWORD(v81) = *(_DWORD *)&v82[4 * (BYTE1(v57) ^ 0x44)] ^ *(_DWORD *)&v81[4 * ((v57 >> 24) ^ 0x47)] ^ 0xD73087AC;
  v426 = v57;
  LODWORD(v74) = ((_DWORD)v81 - ((2 * (_DWORD)v81) & 0xE90E7872) - 192463815) ^ *(_DWORD *)&v78[4
                                                                                              * (v57 ^ 0xD5)];
  v409 = BYTE2(v57);
  LODWORD(v74) = (v74 - ((2 * v74) & 0x6985477C) + 885171134) ^ *(_DWORD *)(v80 + 4 * (BYTE2(v57) ^ 0xCBu));
  v416 = v131;
  LODWORD(v538) = v131 ^ 0xF6EA3217 ^ (v74 - ((2 * v74) & 0xEC3A3F7C) + 1981620158);
  v412 = v131 ^ v122;
  HIDWORD(v537) = v131 ^ v122 ^ 0x55C152F3 ^ (v538 - ((2 * v538) & 0xE2C73BCE) + 1902353895);
  LODWORD(v537) = HIDWORD(v537) ^ v533 ^ 0x42632BF0 ^ 0x4662A266;
  HIDWORD(a42) = (v537 - 2 * (v537 & 0x72F9BABB ^ (HIDWORD(v537) ^ v533 ^ 0x42632BF0) & 1) + 1928968890) ^ v57;
  v132 = (char *)*(&off_1E31525C0 + (v52 ^ 0x77)) - 12;
  LODWORD(v57) = (((v130 ^ 0x1B9155BD) >> 16)
                - 267737359
                - ((2 * ((v130 ^ 0x1B9155BD) >> 16) + 9213016) & 0x88918A)) ^ *(_DWORD *)&v132[4 * (((v130 ^ 0x1B9155BD) >> 16) ^ 0x2D)];
  v133 = ((v129 ^ 0x89) - 267737358 + ((2 * (v129 ^ 0x89) + 88) & 0x18A ^ 0xFF776FFF)) ^ *(_DWORD *)&v132[4 * (v129 ^ 0xA4)];
  v134 = (char *)*(&off_1E31525C0 + (v52 ^ 0x8F)) - 4;
  LODWORD(v59) = ((_DWORD)v57 - ((2 * (_DWORD)v57) & 0x2BCA2216) - 1780150005) ^ *(_DWORD *)&v134[4
                                                                                                * (BYTE1(v130) ^ 0x47)];
  v535 = v52;
  v135 = (uint64_t)*(&off_1E31525C0 + (v52 ^ 0xAA));
  v136 = (v133 - ((2 * v133) & 0xA8FAF634) - 729973990) ^ *(_DWORD *)(v135 + 4 * (v123 ^ 0xCC));
  v137 = (char *)*(&off_1E31525C0 + v52 - 125) - 8;
  LODWORD(v57) = 181304767 * *(_DWORD *)&v137[4 * ((v118 ^ v122) ^ 0x53)];
  v138 = *(_DWORD *)&v137[4 * (v122 ^ 0x74)];
  LODWORD(v57) = *(_DWORD *)&v132[4 * (((v118 ^ v122) >> 16) ^ 0xAA)] ^ *(_DWORD *)(v135 + 4 * (((v118 ^ v122) >> 24) ^ 0x3E)) ^ ((((v118 ^ v122) >> 16) ^ 0x87) - 267737358 + ((2 * (((v118 ^ v122) >> 16) ^ 0x87) + 88) & 0x18A ^ 0xFF776FFF)) ^ ((_DWORD)v57 - 2 * (((_DWORD)v57 + 1211365548) & 0x547D7B1B ^ v57 & 1) - 1666092090);
  v139 = (181304767 * v138 - ((362609534 * v138 + 275247448) & 0x2BCA2216) + 1578699191) ^ *(_DWORD *)&v134[4 * (BYTE1(v122) ^ 0x5A)];
  v532 = v139 - ((2 * v139) & 0xA8FAF634);
  v523 = HIBYTE(v122) ^ 0xB2;
  v492 = BYTE2(v122);
  v546 = (BYTE2(v122) ^ 0x4C) - 267737358 + ((2 * (BYTE2(v122) ^ 0x4C) + 88) & 0x18A ^ 0xFF776FFF);
  v498 = v124 ^ 0xB0;
  v515 = v136 - ((2 * v136) & 0x2BCA2216);
  v505 = (_DWORD)v57 - ((2 * (_DWORD)v57) & 0x2BCA2216);
  v543 = ((_DWORD)v59 - ((2 * (_DWORD)v59) & 0xA8FAF634) - 729973990) ^ *(_DWORD *)(v135
                                                                                  + 4 * ((v130 ^ 0x1B9155BD) >> 24)) ^ (181304767 * *(_DWORD *)&v137[4 * (v130 ^ 0x7D)] - 936118100);
  v140 = *(_DWORD *)&v132[4 * (((v125 ^ 0xE9B45E6C) >> 16) ^ 0xF5)] ^ ((((v125 ^ 0xE9B45E6C) >> 16) ^ 0xD8)
                                                                                      - 267737358
                                                                                      + ((2
                                                                                        * (((v125 ^ 0xE9B45E6C) >> 16) ^ 0xD8)
                                                                                        + 88) & 0x18A ^ 0xFF776FFF));
  LODWORD(v57) = *(_DWORD *)(v53 - 132) ^ 0x31676F78;
  v141 = *(_DWORD *)&v132[4 * (BYTE2(v57) ^ 0x7B)] ^ ((BYTE2(v57) ^ 0x56)
                                                    - 267737358
                                                    + ((2 * (BYTE2(v57) ^ 0x56) + 88) & 0x18A ^ 0xFF776FFF));
  LODWORD(v57) = (v141 - ((2 * v141) & 0xA8FAF634) - 729973990) ^ *(_DWORD *)(v135 + 4 * (v57 >> 24));
  v142 = *(_DWORD *)&v132[4 * (v479 ^ 0x34)] ^ ((v479 ^ 0x19)
                                              - 267737358
                                              + ((2 * (v479 ^ 0x19) + 88) & 0x18A ^ 0xFF776FFF));
  v143 = (v142 - ((2 * v142) & 0x2BCA2216) - 1780150005) ^ *(_DWORD *)&v134[4 * (v482 ^ 5)];
  v480 = (_DWORD)v57 - ((2 * (_DWORD)v57) & 0x2BCA2216);
  v483 = v143 - ((2 * v143) & 0xA8FAF634);
  LODWORD(v57) = *(_DWORD *)&v137[4 * (*(_DWORD *)(v53 - 160) ^ 0xDF)];
  v144 = *(_DWORD *)(v53 - 160) ^ 0x5A18571F;
  LODWORD(v57) = *(_DWORD *)(v135 + 4 * HIBYTE(v144)) ^ ((BYTE2(v144) ^ 0xC1)
                                                         - 267737359
                                                         - ((2 * (BYTE2(v144) ^ 0xC1) + 9213016) & 0x88918A)) ^ *(_DWORD *)&v132[4 * (BYTE2(v144) ^ 0xEC)] ^ (181304767 * (_DWORD)v57 - ((362609534 * (_DWORD)v57 - 1872236200) & 0xA8FAF634) - 1666092090);
  v476 = (_DWORD)v57 - ((2 * (_DWORD)v57) & 0x2BCA2216);
  LODWORD(v57) = *(_DWORD *)(v135 + 4 * ((v125 ^ 0xE9B45E6C) >> 24)) ^ (v140 - ((2 * v140) & 0xA8FAF634) - 729973990);
  v420 = v125 ^ 0xAC;
  v471 = BYTE1(v125) ^ 0xB4;
  v474 = (_DWORD)v57 - ((2 * (_DWORD)v57) & 0x2BCA2216);
  LOWORD(v124) = v115 ^ 0x8EA4;
  v115 ^= 0x35C48CD5u;
  v145 = *(_DWORD *)&v132[4 * (BYTE2(v119) ^ 0xDE)] ^ ((BYTE2(v119) ^ 0xF3)
                                                     - 267737358
                                                     + ((2 * (BYTE2(v119) ^ 0xF3) + 88) & 0x18A ^ 0xFF776FFF));
  LODWORD(v57) = *(_DWORD *)&v132[4 * (BYTE2(v115) ^ 0xFE)] ^ ((BYTE2(v115) ^ 0xD3)
                                                             - 267737358
                                                             + ((2 * (BYTE2(v115) ^ 0xD3) + 88) & 0x18A ^ 0xFF776FFF));
  v146 = *(_DWORD *)&v137[4 * (v118 ^ 0xC5)];
  v147 = 181304767 * v146 - ((362609534 * v146 + 275247448) & 0x2BCA2216);
  v148 = (v145 - ((2 * v145) & 0xA8FAF634) - 729973990) ^ *(_DWORD *)(v135 + 4 * (HIBYTE(v119) ^ 0x36));
  v149 = *(_DWORD *)&v132[4 * (BYTE2(v398) ^ 0xD7)] ^ ((BYTE2(v398) ^ 0xFA)
                                                     - 267737358
                                                     + ((2 * (BYTE2(v398) ^ 0xFA) + 88) & 0x18A ^ 0xFF776FFF));
  LODWORD(v81) = (v149 - ((2 * v149) & 0x2BCA2216) - 1780150005) ^ *(_DWORD *)&v134[4
                                                                                  * (((unsigned __int16)(v398 ^ 0x10F4) >> 8) ^ 0x8B)];
  v459 = v148 - ((2 * v148) & 0x2BCA2216);
  v464 = (_DWORD)v81 - ((2 * (_DWORD)v81) & 0xA8FAF634);
  v150 = *(_DWORD *)(v53 - 140) ^ 0x38453D47;
  v151 = *(_DWORD *)&v134[4 * (BYTE1(v150) ^ 0x20)] ^ ((BYTE2(v150) ^ 0xD7)
                                                     - 267737358
                                                     + ((2 * (BYTE2(v150) ^ 0xD7) + 88) & 0x18A ^ 0xFF776FFF)) ^ *(_DWORD *)&v132[4 * (BYTE2(v150) ^ 0xFA)] ^ (v147 + 1578699191);
  LODWORD(v59) = ((_DWORD)v57 - ((2 * (_DWORD)v57) & 0xA8FAF634) - 729973990) ^ *(_DWORD *)(v135 + 4 * HIBYTE(v115)) ^ (181304767 * *(_DWORD *)&v137[4 * (v124 ^ 0x99)] - 936118100);
  v432 = BYTE1(v124) ^ 0x14;
  v405 = v398 ^ 0x57;
  v437 = (_DWORD)v59 - ((2 * (_DWORD)v59) & 0x2BCA2216);
  v452 = v151 - ((2 * v151) & 0xA8FAF634);
  v434 = v423 ^ 0x2BEAE26B;
  v152 = *(_DWORD *)&v132[4 * (((v423 ^ 0x2BEAE26B) >> 16) ^ 0xEC)] ^ ((((v423 ^ 0x2BEAE26B) >> 16) ^ 0xC1)
                                                                                      - 267737358
                                                                                      + ((2
                                                                                        * (((v423 ^ 0x2BEAE26B) >> 16) ^ 0xC1)
                                                                                        + 88) & 0x18A ^ 0xFF776FFF)) ^ (181304767 * *(_DWORD *)&v137[4 * (v423 ^ 0x1E)] - 936118100);
  v153 = (v152 - ((2 * v152) & 0x2BCA2216) - 1780150005) ^ *(_DWORD *)&v134[4 * (BYTE1(v423) ^ 8)];
  LODWORD(v59) = *(_DWORD *)&v132[4 * (v456 ^ 0x95)] ^ ((v456 ^ 0xB8)
                                                      - 267737358
                                                      + ((2 * (((v456 ^ 0xB8) + 44) & 0xC7 ^ (HIWORD(v450) | 0xFFFFFFFD))) ^ 0x889005));
  v154 = *(_DWORD *)&v137[4 * (v428 ^ 0x55)];
  v457 = v153 - ((2 * v153) & 0xA8FAF634);
  v408 = BYTE2(*(_DWORD *)(v53 - 168));
  v451 = (v408 ^ 0xA7) - 267737358 + ((2 * (v408 ^ 0xA7) + 88) & 0x18A ^ 0xFF776FFF);
  v155 = ((_DWORD)v59 - ((2 * (_DWORD)v59) & 0x2BCA2216) - 1780150005) ^ *(_DWORD *)&v134[4 * (v469 ^ 0xED)] ^ (181304767 * *(_DWORD *)&v137[4 * (v465 ^ 0xC1)] - 936118100);
  LODWORD(v74) = *(_DWORD *)(v53 - 176);
  v466 = v155 - ((2 * v155) & 0xA8FAF634);
  v156 = (181304767 * v154 - ((362609534 * v154 - 1872236200) & 0xA8FAF634) - 1666092090) ^ ((BYTE2(v74) ^ 0xBA)
                                                                                           - 267737358
                                                                                           + ((2 * (BYTE2(v74) ^ 0xBA)
                                                                                             + 88) & 0x18A ^ 0xFF776FFF)) ^ *(_DWORD *)(v135 + 4 * (BYTE3(v74) ^ 0x2F)) ^ *(_DWORD *)&v132[4 * (BYTE2(v74) ^ 0x97)];
  v429 = v156 - ((2 * v156) & 0x2BCA2216);
  v157 = BYTE2(*(_DWORD *)(v53 - 136));
  v158 = *(_DWORD *)&v132[4 * (v157 ^ 0x5E)] ^ ((v157 ^ 0x73)
                                              - 267737358
                                              + ((2 * (v157 ^ 0x73) + 88) & 0x18A ^ 0xFF776FFF));
  LODWORD(v59) = *(_DWORD *)&v132[4 * (BYTE2(*(_DWORD *)(v53 - 184)) ^ 0x56)] ^ ((BYTE2(*(_DWORD *)(v53 - 184)) ^ 0x7B)
                                                                                                - 267737359
                                                                                                - ((2 * (BYTE2(*(_DWORD *)(v53 - 184)) ^ 0x7B)
                                                                                                  + 9213016) & 0x88918A));
  v159 = (v158 - ((2 * v158) & 0x2BCA2216) - 1780150005) ^ *(_DWORD *)&v134[4 * (HIBYTE(v414) ^ 0x51)] ^ (181304767 * *(_DWORD *)&v137[4 * (v414 ^ 0xAE)] - 936118100);
  v160 = *(_DWORD *)&v137[4 * (v421 ^ 0xFB)];
  v161 = (181304767 * v160 - ((362609534 * v160 + 275247448) & 0x2BCA2216) + 1578699191) ^ *(_DWORD *)&v134[4 * (BYTE1(v421) ^ 0xEF)];
  LODWORD(v415) = v159 - ((2 * v159) & 0xA8FAF634);
  HIDWORD(v406) = v161 - ((2 * v161) & 0xA8FAF634);
  v162 = ((_DWORD)v59 - ((2 * (_DWORD)v59) & 0xA8FAF634) - 729973990) ^ *(_DWORD *)(v135
                                                                                  + 4
                                                                                  * (HIBYTE(*(_DWORD *)(v53 - 184)) ^ 0xD9u)) ^ (181304767 * *(_DWORD *)&v137[4 * (*(_DWORD *)(v53 - 184) ^ 0x79)] - 936118100);
  LODWORD(v59) = *(_DWORD *)&v132[4 * (v439 ^ 0x86)] ^ ((v439 ^ 0xAB)
                                                      - 267737358
                                                      + ((2 * (v439 ^ 0xAB) + 88) & 0x18A ^ 0xFF776FFF));
  LODWORD(v59) = ((_DWORD)v59 - ((2 * (_DWORD)v59) & 0xA8FAF634) - 729973990) ^ *(_DWORD *)(v135 + 4 * v454);
  v402 = v443 ^ 0xEE;
  v444 = (_DWORD)v59 - ((2 * (_DWORD)v59) & 0x2BCA2216);
  v440 = v162 - ((2 * v162) & 0x2BCA2216);
  v401 = v449;
  v470 = (v449 ^ 0x65) - 267737358 + ((2 * (v449 ^ 0x65) + 88) & 0x18A ^ 0xFF776FFF);
  v163 = *(_DWORD *)&v132[4 * (v409 ^ 0x8B)] ^ ((v409 ^ 0xA6)
                                              - 267737358
                                              + ((2 * (v409 ^ 0xA6) + 88) & 0x18A ^ 0xFF776FFF));
  v455 = (BYTE2(v533) ^ 0x8F) - 267737358 + ((2 * (BYTE2(v533) ^ 0x8F) + 88) & 0x18A ^ 0xFF776FFF);
  LODWORD(v59) = v417 ^ 0x22;
  v418 = HIBYTE(v398) ^ 0xDB;
  v446 = HIBYTE(v421) ^ 0xE8;
  LODWORD(v57) = *(_DWORD *)&v132[4 * (BYTE2(v416) ^ 0xE8)] ^ ((BYTE2(v416) ^ 0xC5)
                                                             - 267737358
                                                             + ((2 * (BYTE2(v416) ^ 0xC5) + 88) & 0x18A ^ 0xFF776FFF));
  v410 = ((unsigned __int16)(v118 ^ v122) >> 8) ^ 0x8E;
  LODWORD(v57) = (181304767 * *(_DWORD *)&v137[4 * (v416 ^ 0xCA)] - 936118100) ^ *(_DWORD *)(v135 + 4 * (HIBYTE(v416) ^ 0x8E)) ^ ((_DWORD)v57 - ((2 * (_DWORD)v57) & 0xA8FAF634) - 729973990);
  v422 = v131 ^ v122 ^ 0x44039AAA;
  LODWORD(v80) = (181304767 * *(_DWORD *)&v137[4 * (v412 ^ 0xDB)] - 936118100) ^ (((v412 ^ 0x44039AAAu) >> 16)
                                                                                                 - 267737358
                                                                                                 + ((2 * ((v412 ^ 0x44039AAAu) >> 16) + 88) & 0x18A ^ 0xFF776FFF)) ^ *(_DWORD *)&v132[4 * (((v412 ^ 0x44039AAAu) >> 16) ^ 0x2D)];
  HIDWORD(v415) = (_DWORD)v57 - ((2 * (_DWORD)v57) & 0x2BCA2216);
  LODWORD(v57) = (v80 - ((2 * v80) & 0x2BCA2216) - 1780150005) ^ *(_DWORD *)&v134[4
                                                                                * (((unsigned __int16)(v131 ^ v122) >> 8) ^ 0xC0)];
  v164 = *(_DWORD *)(v135 + 4 * v59) ^ (181304767 * *(_DWORD *)&v137[4 * (v426 ^ 0xFE)] - 936118100) ^ (v163 - ((2 * v163) & 0xA8FAF634) - 729973990);
  v427 = (_DWORD)v57 - ((2 * (_DWORD)v57) & 0xA8FAF634);
  v413 = v164 - ((2 * v164) & 0x2BCA2216);
  LODWORD(v57) = 181304767 * *(_DWORD *)&v137[4 * (v488 ^ 0xEC)];
  v165 = *(_DWORD *)&v132[4 * (v518 ^ 0x32)] ^ ((v518 ^ 0x1F)
                                              - 267737358
                                              + ((2 * (v518 ^ 0x1F) + 88) & 0x18A ^ 0xFF776FFF));
  LODWORD(v59) = *(_DWORD *)&v137[4 * (v508 ^ 0xE6)];
  LODWORD(v57) = *(_DWORD *)(v135 + 4 * (HIBYTE(v488) ^ 0xCA)) ^ ((BYTE2(v488) ^ 0x2F)
                                                                  - 267737358
                                                                  + ((2 * (BYTE2(v488) ^ 0x2F) + 88) & 0x18A ^ 0xFF776FFF)) ^ *(_DWORD *)&v132[4 * (BYTE2(v488) ^ 2)] ^ ((_DWORD)v57 - 2 * (((_DWORD)v57 + 1211365548) & 0x547D7B1B ^ v57 & 1) - 1666092090);
  v166 = (v165 - ((2 * v165) & 0x2BCA2216) - 1780150005) ^ *(_DWORD *)&v134[4 * (v529 ^ 0x8C)] ^ (181304767
                                                                                                * *(_DWORD *)&v137[4 * (v527 ^ 0xD9)]
                                                                                                - 936118100);
  LODWORD(v59) = *(_DWORD *)(v135 + 4 * ((v508 ^ 0x49A657C7) >> 24)) ^ ((((v508 ^ 0x49A657C7) >> 16) ^ 0x35)
                                                                        - 267737358
                                                                        + ((2
                                                                          * (((v508 ^ 0x49A657C7) >> 16) ^ 0x35)
                                                                          + 88) & 0x18A ^ 0xFF776FFF)) ^ *(_DWORD *)&v132[4 * (((v508 ^ 0x49A657C7) >> 16) ^ 0x18)] ^ (181304767 * (_DWORD)v59 - ((362609534 * (_DWORD)v59 - 1872236200) & 0xA8FAF634) - 1666092090);
  LODWORD(v80) = *(_DWORD *)&v132[4 * (((*(_DWORD *)(v53 - 152) ^ 0xFB20E095) >> 16) ^ 0x2D)] ^ (((*(_DWORD *)(v53 - 152) ^ 0xFB20E095) >> 16) - 267737358 + ((2 * ((*(_DWORD *)(v53 - 152) ^ 0xFB20E095) >> 16) + 88) & 0x18A ^ 0xFF776FFF));
  v530 = v541 ^ 0xAA;
  v542 = ((_DWORD)v57 - ((2 * (_DWORD)v57) & 0x2BCA2216) - 1780150005) ^ *(_DWORD *)&v134[4 * (BYTE1(v488) ^ 0x2E)];
  v528 = v166 - ((2 * v166) & 0xA8FAF634);
  v489 = BYTE1(v508) ^ 0xB9;
  LODWORD(v57) = (v80 - ((2 * v80) & 0xA8FAF634) - 729973990) ^ *(_DWORD *)(v135
                                                                          + 4
                                                                          * ((*(_DWORD *)(v53 - 152) ^ 0xFB20E095) >> 24)) ^ (181304767 * *(_DWORD *)&v137[4 * (*(_DWORD *)(v53 - 152) ^ 5)] - 936118100);
  v519 = (_DWORD)v59 - ((2 * (_DWORD)v59) & 0x2BCA2216);
  v509 = (_DWORD)v57 - ((2 * (_DWORD)v57) & 0x2BCA2216);
  v167 = *(_DWORD *)&v132[4 * (v494 ^ 0xC1)] ^ ((v494 ^ 0xEC)
                                              - 267737358
                                              + ((2 * (v494 ^ 0xEC) + 88) & 0x18A ^ 0xFF776FFF));
  LODWORD(v57) = (v167 - ((2 * v167) & 0x2BCA2216) - 1780150005) ^ *(_DWORD *)&v134[4
                                                                                  * ((v503 - ((2 * v500) & 0x166) + 179) ^ 0x54)] ^ (181304767 * *(_DWORD *)&v137[4 * (v524 ^ 0xE2)] - 936118100);
  v404 = BYTE1(v513) ^ 0x77;
  v168 = *(_DWORD *)&v137[4 * (*(_DWORD *)(v53 - 144) ^ 0xC8)];
  v169 = (181304767 * v168 - ((362609534 * v168 - 1872236200) & 0xA8FAF634) - 1666092090) ^ *(_DWORD *)(v135 + 4 * (HIBYTE(v510) ^ 0xF8));
  v525 = (_DWORD)v57 - ((2 * (_DWORD)v57) & 0xA8FAF634);
  v399 = v169 - ((2 * v169) & 0x2BCA2216);
  v495 = v485 ^ 0xEEA2BFA8;
  LODWORD(v59) = *(_DWORD *)&v132[4 * (((v485 ^ 0xEEA2BFA8) >> 16) ^ 0x86)] ^ ((((v485 ^ 0xEEA2BFA8) >> 16) ^ 0xAB)
                                                                                              - 267737358
                                                                                              + ((2
                                                                                                * (((v485 ^ 0xEEA2BFA8) >> 16) ^ 0xAB)
                                                                                                + 88) & 0x18A ^ 0xFF776FFF));
  LODWORD(v57) = (181304767 * *(_DWORD *)&v137[4 * (v485 ^ 0x68)] - 936118100) ^ *(_DWORD *)&v134[4 * (BYTE1(v485) ^ 0x55)] ^ ((_DWORD)v59 - ((2 * (_DWORD)v59) & 0x2BCA2216) - 1780150005);
  v486 = v513 ^ 0x231B9DB5;
  v396 = ((v513 ^ 0x231B9DB5) >> 16);
  HIDWORD(v397) = (_DWORD)v57 - ((2 * (_DWORD)v57) & 0xA8FAF634);
  v170 = BYTE2(v510);
  v501 = (BYTE2(v510) ^ 0xBB) - 267737358 + ((2 * (BYTE2(v510) ^ 0xBB) + 88) & 0x18A ^ 0xFF776FFF);
  v504 = (v396 ^ 0xC1) - 267737358 + ((2 * (v396 ^ 0xC1) + 88) & 0x18A ^ 0xFF776FFF);
  v171 = v558 ^ 0xB66586F5;
  v394 = v552 ^ 0x7B;
  LODWORD(v82) = *(_DWORD *)&v137[4 * (v547 ^ 0x74)];
  v172 = *(_DWORD *)&v137[4 * (*(_DWORD *)(v53 - 132) ^ 0xB8)];
  v173 = *(_DWORD *)&v137[4 * v420];
  v174 = *(_DWORD *)&v137[4 * v405];
  LODWORD(v80) = *(_DWORD *)&v137[4 * (v544 ^ 0xF0)];
  v175 = *(_DWORD *)(v53 - 168);
  LODWORD(v59) = *(_DWORD *)&v137[4 * (v175 ^ 0x57)];
  v176 = *(_DWORD *)&v137[4 * (*(_DWORD *)(v53 - 256) ^ 0xE0)];
  LODWORD(v74) = *(_DWORD *)&v137[4 * (v533 ^ 0x78)];
  LODWORD(v57) = *(_DWORD *)&v137[4 * (v513 ^ 0x75)];
  v177 = *(_DWORD *)&v137[4 * (v549 ^ 0xA8)];
  v178 = *(_DWORD *)(v53 - 240);
  v179 = *(_DWORD *)&v137[4 * (v178 ^ 0x2A)];
  v180 = *(_DWORD *)&v137[4 * (v558 ^ 0xCC)];
  v521 = 181304767 * *(_DWORD *)&v137[4 * (v520 ^ 0x60)] - 936118100;
  *(_DWORD *)(v53 - 256) = 181304767 * *(_DWORD *)&v137[4 * (*(_DWORD *)(v53 - 248) ^ 0xFB)] - 936118100;
  v553 = 181304767 * v172 - 936118100;
  v559 = 181304767 * v173 - 936118100;
  LODWORD(v406) = 181304767 * v174 - 936118100;
  v511 = 181304767 * v80 - 936118100;
  *(_DWORD *)(v53 - 248) = 181304767 * (_DWORD)v59 - 936118100;
  v548 = 181304767 * v176 - 936118100;
  v514 = 181304767 * v74 - 936118100;
  HIDWORD(v419) = 181304767 * (_DWORD)v57 - 936118100;
  LODWORD(v81) = 181304767 * v179 - 936118100;
  v545 = 181304767 * v180 - 936118100;
  v181 = (181304767 * (_DWORD)v82 - ((362609534 * (_DWORD)v82 - 1872236200) & 0xA8FAF634) - 1666092090) ^ *(_DWORD *)(v135 + 4 * v394);
  v182 = v549;
  LODWORD(v57) = *(_DWORD *)&v132[4 * BYTE2(v182)] ^ ((BYTE2(v182) ^ 0x2D)
                                                    - 267737358
                                                    + ((2 * (BYTE2(v182) ^ 0x2D) + 88) & 0x18A ^ 0xFF776FFF)) ^ (181304767 * v177 - 936118100);
  LODWORD(v57) = ((_DWORD)v57 - ((2 * (_DWORD)v57) & 0x2BCA2216) - 1780150005) ^ *(_DWORD *)&v134[4
                                                                                                * (BYTE1(v549) ^ 0x52)];
  LODWORD(v59) = *(_DWORD *)&v132[4 * (BYTE2(v171) ^ 0x3C)] ^ ((BYTE2(v171) ^ 0x11)
                                                             - 267737358
                                                             + ((2
                                                               * (((BYTE2(v171) ^ 0x11) + 44) & 0xC7 ^ (HIWORD(v171) | 0xFFFFFFFD))) ^ 0x889005));
  BYTE1(v179) = BYTE1(v178);
  v183 = ((BYTE2(v178) ^ 0x37) - 267737358 + ((2 * (BYTE2(v178) ^ 0x37) + 88) & 0x18A ^ 0xFF776FFF)) ^ *(_DWORD *)&v132[4 * (BYTE2(v178) ^ 0x1A)];
  v493 = *(_DWORD *)&v132[4 * (v492 ^ 0x61)];
  v424 = *(_DWORD *)&v132[4 * (v408 ^ 0x8A)];
  HIDWORD(v407) = *(_DWORD *)&v132[4 * (v401 ^ 0x48)];
  v184 = ((v81 ^ v183) - ((2 * (v81 ^ v183)) & 0xA8FAF634) - 729973990) ^ *(_DWORD *)(v135 + 4 * (HIBYTE(v178) ^ 0xF9));
  LODWORD(v395) = *(_DWORD *)&v132[4 * (((v533 ^ 0x42632BF0) >> 16) ^ 0xC1)];
  HIDWORD(v400) = *(_DWORD *)&v132[4 * (v396 ^ 0xEC)];
  v185 = v560 ^ 0x1A;
  LODWORD(v397) = *(_DWORD *)&v132[4 * (v170 ^ 0x96)];
  v186 = *(_DWORD *)(v53 - 208);
  *(_DWORD *)(v53 - 208) = *(_DWORD *)&v132[4 * (v186 ^ 0x1A)];
  LODWORD(v74) = ((*(_DWORD *)(v53 - 232) >> 15) & 0x58 ^ 0x48) + (v186 ^ 0x4C64A1B);
  *(_DWORD *)(v53 - 232) = v74 - 347841338 + ((2 * v74) & 0x18A ^ 0xFF776FFF);
  HIDWORD(v395) = *(_DWORD *)&v134[4 * v498];
  v499 = *(_DWORD *)&v134[4 * v410];
  v561 = *(_DWORD *)&v134[4 * (BYTE1(*(_DWORD *)(v53 - 132)) ^ 0x85)];
  LODWORD(v411) = *(_DWORD *)&v134[4 * (BYTE1(*(_DWORD *)(v53 - 160)) ^ 0xBD)];
  *(_DWORD *)(v53 - 160) = *(_DWORD *)&v134[4 * v471];
  HIDWORD(v393) = *(_DWORD *)&v134[4 * v185];
  LODWORD(v393) = *(_DWORD *)&v134[4 * v432];
  v550 = *(_DWORD *)&v134[4 * (BYTE1(v175) ^ 0xF5)];
  *(_DWORD *)(v53 - 176) = *(_DWORD *)&v134[4 * (BYTE1(*(_DWORD *)(v53 - 176)) ^ 0xD6)];
  v472 = *(_DWORD *)&v134[4 * v402];
  v433 = *(_DWORD *)&v134[4 * (BYTE1(*(_DWORD *)(v53 - 184)) ^ 0xD7)];
  LODWORD(v403) = *(_DWORD *)&v134[4 * (BYTE1(v533) ^ 0x76)];
  v187 = *(_DWORD *)&v134[4 * (BYTE1(v131) ^ 0x16)];
  HIDWORD(v392) = *(_DWORD *)&v134[4 * (v556 ^ 0xBE)];
  *(_DWORD *)(v53 - 184) = *(_DWORD *)&v134[4 * v489];
  *(_DWORD *)(v53 - 152) = *(_DWORD *)&v134[4 * (BYTE1(*(_DWORD *)(v53 - 152)) ^ 0x60)];
  v490 = *(_DWORD *)&v134[4 * v404];
  HIDWORD(v403) = *(_DWORD *)&v134[4 * (BYTE1(*(_DWORD *)(v53 - 144)) ^ 0x17)];
  *(_DWORD *)(v53 - 200) = *(_DWORD *)&v134[4 * (*(_DWORD *)(v53 - 200) ^ 0x84)];
  *(_DWORD *)(v53 - 240) = *(_DWORD *)&v134[4 * (BYTE1(v179) ^ 0x2E)];
  v188 = *(_DWORD *)&v134[4 * (BYTE1(*(_DWORD *)(v53 - 224)) ^ 0xC8)];
  LODWORD(v392) = *(_DWORD *)(v135 + 4 * v523);
  v516 = v515 - 1780150005;
  *(_DWORD *)(v53 - 192) = *(_DWORD *)(v135 + 4 * (*(_DWORD *)(v53 - 192) ^ 7u));
  HIDWORD(v391) = v505 - 1780150005;
  *(_DWORD *)(v53 - 224) = v480 - 1780150005;
  LODWORD(v407) = v476 - 1780150005;
  v557 = v474 - 1780150005;
  v506 = *(_DWORD *)(v135 + 4 * v418);
  LODWORD(v391) = v459 - 1780150005;
  HIDWORD(v390) = v437 - 1780150005;
  LODWORD(v419) = *(_DWORD *)(v135 + 4 * (HIBYTE(*(_DWORD *)(v53 - 140)) ^ 0x4Fu));
  LODWORD(v80) = HIBYTE(v434);
  v435 = *(_DWORD *)(v135 + 4 * (HIBYTE(v175) ^ 0xB8));
  *(_DWORD *)(v53 - 168) = *(_DWORD *)(v135 + 4 * v80);
  v438 = *(_DWORD *)(v135 + 4 * (v461 ^ 0x4B));
  v430 = v429 - 1780150005;
  v481 = v444 - 1780150005;
  v475 = v440 - 1780150005;
  LODWORD(v137) = HIDWORD(v415) - 1780150005;
  v189 = v413 - 1780150005;
  v462 = v519 - 1780150005;
  v460 = v509 - 1780150005;
  LODWORD(v400) = v399 - 1780150005;
  v445 = v181 - ((2 * v181) & 0x2BCA2216) - 1780150005;
  v477 = v184 - ((2 * v184) & 0x2BCA2216) - 1780150005;
  HIDWORD(v411) = *(_DWORD *)(v135 + 4 * (HIBYTE(*(_DWORD *)(v53 - 136)) ^ 0x9Du));
  LODWORD(v390) = *(_DWORD *)(v135 + 4 * v446);
  v190 = v188 ^ ((_DWORD)v59 - ((2 * (_DWORD)v59) & 0x2BCA2216) - 1780150005);
  v191 = *(_DWORD *)(v135 + 4 * (HIBYTE(v533) ^ 0xA6));
  v192 = *(_DWORD *)(v135 + 4 * HIBYTE(v422));
  v447 = *(_DWORD *)(v135 + 4 * v530);
  v193 = HIBYTE(v495);
  v496 = *(_DWORD *)(v135 + 4 * HIBYTE(v486));
  v487 = *(_DWORD *)(v135 + 4 * (*(_DWORD *)(v53 - 216) ^ 0x38u));
  *(_DWORD *)(v53 - 216) = *(_DWORD *)(v135 + 4 * v193);
  HIDWORD(v389) = *(_DWORD *)(v135 + 4 * (HIBYTE(v182) ^ 0x6F));
  LODWORD(v389) = *(_DWORD *)(v135 + 4 * HIBYTE(v171));
  HIDWORD(v415) = v483 - 729973990;
  v194 = v452 - 729973990;
  v441 = v457 - 729973990;
  HIDWORD(a17) = v466 - 729973990;
  v467 = v528 - 729973990;
  v195 = v525 - 729973990;
  v196 = (_DWORD)v57 - ((2 * (_DWORD)v57) & 0xA8FAF634) - 729973990;
  v197 = v190 - ((2 * v190) & 0xA8FAF634) - 729973990;
  v198 = v543 ^ v542 ^ 0x6285F181;
  v199 = v137 ^ v187 ^ v198;
  v200 = (uint64_t)*(&off_1E31525C0 + v535 - 73);
  v201 = (char *)*(&off_1E31525C0 + v535 - 90) - 8;
  v202 = (uint64_t)*(&off_1E31525C0 + v535 - 17);
  v203 = (char *)*(&off_1E31525C0 + (v535 & 0x582A0088)) - 12;
  v204 = (v203[*(unsigned __int8 *)(v53 - 109) ^ 0x41] ^ 0xE5) & 0xFF00FFFF | (((*(_BYTE *)(v202 + (*(unsigned __int8 *)(v53 - 111) ^ 0x40)) + 104) ^ 0x5A) << 16) | ((v201[*(unsigned __int8 *)(v53 - 110) ^ 0xBBLL] ^ 0xCC) << 8) | ((*(unsigned __int8 *)(v200 + (*(unsigned __int8 *)(v53 - 112) ^ 0x1ELL)) ^ (*(unsigned __int8 *)(v53 - 112) - ((2 * *(unsigned __int8 *)(v53 - 112)) & 0x78) + 60) ^ 0x84) << 24);
  v534 = v201;
  v536 = v200;
  v205 = v203[*(unsigned __int8 *)(v53 - 97) ^ 0x74] ^ 0x42 | (((*(_BYTE *)(v202 + (*(unsigned __int8 *)(v53 - 99) ^ 0xF3)) ^ 2)
                                                                                                  + 104) << 16) | ((v201[*(unsigned __int8 *)(v53 - 98) ^ 0x20] ^ 0x26) << 8) | ((*(unsigned __int8 *)(v200 + (*(unsigned __int8 *)(v53 - 100) ^ 0xF3)) ^ (*(unsigned __int8 *)(v53 - 100) + (~(2 * *(_BYTE *)(v53 - 100)) | 0xFFFFFF87) + 61) ^ 0x85) << 24);
  v531 = v203;
  v206 = v203[*(unsigned __int8 *)(v53 - 101) ^ 0xF2] ^ 0x6A | ((*(unsigned __int8 *)(v200 + (*(unsigned __int8 *)(v53 - 104) ^ 0xD3)) ^ (*(unsigned __int8 *)(v53 - 104) - ((2 * *(unsigned __int8 *)(v53 - 104)) & 0x78) + 60) ^ 0xE0) << 24) | ((v201[*(unsigned __int8 *)(v53 - 102) ^ 0xBELL] ^ 0x6E) << 8);
  v207 = (v203[*(unsigned __int8 *)(v53 - 105) ^ 0xE4] ^ 0xD3) & 0xFF00FFFF | ((*(unsigned __int8 *)(v200 + (*(unsigned __int8 *)(v53 - 108) ^ 0x3ELL)) ^ (*(unsigned __int8 *)(v53 - 108) - ((2 * *(unsigned __int8 *)(v53 - 108)) & 0x78) + 60) ^ 0xFFFFFFE1) << 24) | (((*(_BYTE *)(v202 + (*(unsigned __int8 *)(v53 - 107) ^ 0x27)) + 104) ^ 0x96) << 16) | ((v201[*(unsigned __int8 *)(v53 - 106) ^ 9] ^ 0xC9) << 8);
  v208 = v206 & 0xFF00FFFF | (((*(_BYTE *)(v202 + (*(unsigned __int8 *)(v53 - 103) ^ 0xE9)) + 104) ^ 0x8A) << 16);
  v209 = v199 ^ 0x2497E332;
  if ((v199 & 0x80) != 0)
    v210 = -128;
  else
    v210 = 128;
  *(_DWORD *)(v53 - 132) = v205 ^ 0xDD34ABB3;
  *(_DWORD *)(v53 - 136) = v204 ^ 0xCECB722;
  *(_DWORD *)(v53 - 140) = v207 ^ 0x9CFEAEF9;
  *(_DWORD *)(v53 - 144) = v208 ^ 0x84F68A69;
  HIDWORD(v526) = v189 ^ HIDWORD(v392);
  LODWORD(v526) = v191 ^ v403 ^ v455 ^ v395 ^ v514;
  HIDWORD(v522) = (v427 - 729973990) ^ v192;
  LODWORD(v522) = v521 ^ HIDWORD(v395) ^ v516;
  HIDWORD(v517) = HIDWORD(v391) ^ v499;
  LODWORD(v517) = v392 ^ v546 ^ v493 ^ (v532 - 729973990);
  HIDWORD(v512) = HIDWORD(v390) ^ v393;
  LODWORD(v512) = v391 ^ HIDWORD(v393) ^ v511;
  HIDWORD(v507) = (v464 - 729973990) ^ v506 ^ v406;
  LODWORD(v507) = v194 ^ v419;
  HIDWORD(v502) = v490 ^ v496 ^ v504 ^ HIDWORD(v400) ^ HIDWORD(v419);
  LODWORD(v502) = HIDWORD(v403) ^ v501 ^ v397 ^ v400;
  HIDWORD(v497) = (HIDWORD(v397) - 729973990) ^ *(_DWORD *)(v53 - 216);
  LODWORD(v497) = v195 ^ v487;
  HIDWORD(v491) = v475 ^ v433;
  LODWORD(v491) = v390 ^ v470 ^ HIDWORD(v407) ^ (HIDWORD(v406) - 729973990);
  HIDWORD(v484) = (v415 - 729973990) ^ HIDWORD(v411);
  LODWORD(v484) = v548 ^ v472 ^ v481;
  HIDWORD(v478) = v545 ^ v389 ^ v197;
  LODWORD(v478) = v477 ^ *(_DWORD *)(v53 - 240);
  HIDWORD(v473) = v196 ^ HIDWORD(v389);
  LODWORD(v473) = *(_DWORD *)(v53 - 200) ^ *(_DWORD *)(v53 - 232) ^ *(_DWORD *)(v53 - 208) ^ v445;
  HIDWORD(v468) = v467 ^ v447;
  LODWORD(v468) = *(_DWORD *)(v53 - 184) ^ v462;
  HIDWORD(v463) = v460 ^ *(_DWORD *)(v53 - 152);
  LODWORD(v463) = v407 ^ v411;
  HIDWORD(v458) = *(_DWORD *)(v53 - 224) ^ v561 ^ v553;
  LODWORD(v458) = v559 ^ *(_DWORD *)(v53 - 160) ^ v557;
  HIDWORD(v453) = *(_DWORD *)(v53 - 256) ^ *(_DWORD *)(v53 - 192) ^ HIDWORD(v415);
  LODWORD(v453) = v430 ^ *(_DWORD *)(v53 - 176);
  HIDWORD(v448) = v550 ^ v451 ^ v435 ^ v424 ^ *(_DWORD *)(v53 - 248);
  LODWORD(v448) = HIDWORD(a17) ^ v438;
  HIDWORD(v442) = v441 ^ *(_DWORD *)(v53 - 168);
  LODWORD(v442) = (v210 + v209) ^ v198;
  v211 = *(_DWORD *)(v53 - 128);
  HIDWORD(v436) = v211 ^ 0x4DA;
  LODWORD(v436) = v211 ^ 0x427;
  HIDWORD(v431) = v211 ^ 0x4C4;
  LODWORD(v431) = v211 ^ 0x45C;
  HIDWORD(v425) = v211 ^ 0x497;
  LODWORD(v425) = v211 ^ 0x40B;
  HIDWORD(a17) = v211 ^ 0x4E4;
  v212 = (((2 * v211) ^ 0xDD4) + 1854347937) ^ 0x6E872072u;
  *(_QWORD *)(v53 - 184) = v212;
  LOBYTE(v212) = *(_BYTE *)(v202 + (v77[v212] ^ 0xF3));
  *(_QWORD *)(v53 - 152) = 1;
  v213 = ((v212 ^ 2) + 104) << 16;
  v214 = v77[1] ^ 0x57;
  *(_QWORD *)(v53 - 160) = 10;
  v215 = v77[10] ^ 0xB6;
  v216 = ((*(_BYTE *)(v202 + v214) + 104) ^ 0xF6) << 16;
  *(_QWORD *)(v53 - 192) = 4;
  LODWORD(v215) = (v534[v215] ^ 0x43) << 8;
  v217 = v77[4];
  v218 = *(unsigned __int8 *)(v536 + (v217 ^ 0x9A));
  *(_QWORD *)(v53 - 224) = 7;
  LODWORD(v217) = v218 ^ (v217 - ((2 * v217) & 0x78) + 60) ^ 0xFFFFFFCF;
  v219 = v77[7] ^ 0xD6;
  *(_QWORD *)(v53 - 216) = 2;
  LODWORD(v217) = v531[v219] ^ 0x80 | ((_DWORD)v217 << 24);
  LODWORD(v219) = v534[v77[2]] ^ 0x51;
  *(_QWORD *)(v53 - 176) = 3;
  v220 = v216 | ((_DWORD)v219 << 8);
  LODWORD(v219) = v531[v77[3] ^ 0x74];
  *(_QWORD *)(v53 - 168) = 12;
  v221 = *(unsigned __int8 *)(v536 + (v77[12] ^ 0x6ELL)) ^ (v77[12] - ((2 * v77[12]) & 0x78) + 60) ^ 0x51;
  *(_QWORD *)(v53 - 200) = 0;
  v222 = *v77;
  v223 = v213 | (v221 << 24);
  v224 = *(unsigned __int8 *)(v536 + (v222 ^ 0x15));
  *(_QWORD *)(v53 - 256) = 8;
  v225 = v220 | v219 ^ 0x42 | ((v224 ^ ((_DWORD)v222 - ((2 * (_DWORD)v222) & 0x78) + 60) ^ 0xAE) << 24);
  v226 = *(unsigned __int8 *)(v536 + (v77[8] ^ 0x46)) ^ (v77[8] + (~(2 * v77[8]) | 0x87) + 61) ^ 0xFFFFFFE7;
  *(_QWORD *)(v53 - 208) = 14;
  LODWORD(v215) = v215 | (v226 << 24);
  v227 = v534[v77[14] ^ 0xD5] ^ 0xD9;
  *(_QWORD *)(v53 - 232) = 5;
  v228 = v223 | (v227 << 8);
  *(_QWORD *)(v53 - 248) = 11;
  LODWORD(v217) = v217 & 0xFF00FFFF | (((*(_BYTE *)(v202 + (v77[5] ^ 0x9DLL)) + 104) ^ 0xF7) << 16);
  LODWORD(v219) = v531[v77[11] ^ 0xC2] ^ 0x67 | v215;
  LOBYTE(v227) = *(_BYTE *)(v202 + (v77[9] ^ 0x3ELL));
  v229 = v77[6] ^ 0xA4;
  *(_QWORD *)(v53 - 240) = 15;
  LODWORD(v215) = v531[v77[15] ^ 0x47] ^ 0x42 | v228;
  v551 = v217 | ((v534[v229] ^ 0x89) << 8);
  v230 = (uint64_t)*(&off_1E31525C0 + (v211 ^ 0x4DA));
  v231 = v225 ^ v538 ^ 0x730032AA;
  LODWORD(v229) = *(_DWORD *)(v230 + 4 * (((unsigned __int16)(v551 ^ WORD2(v537)) >> 8) ^ 0x21u)) ^ ((((unsigned __int16)(v551 ^ WORD2(v537)) >> 8) ^ 0x4C) - 1369524706 - ((2 * (((v551 ^ HIDWORD(v537)) >> 8) ^ 0xB71C4C)) & 0x3C));
  v232 = (uint64_t)*(&off_1E31525C0 + *(_DWORD *)(v53 - 128) - 852);
  LODWORD(v229) = (v229 + 1413046585 - ((2 * v229) & 0xA872C272)) ^ *(_DWORD *)(v232
                                                                              + 4
                                                                              * ((v225 ^ v538) ^ 0xAAu));
  v233 = *(_DWORD *)(v230 + 4 * (((unsigned __int16)(WORD2(a42) ^ v215) >> 8) ^ 0xB6u)) ^ ((((unsigned __int16)(WORD2(a42) ^ v215) >> 8) ^ 0xDB) - 1369524706 - ((2 * (((HIDWORD(a42) ^ v215) >> 8) ^ 0x2409DB)) & 0x3C));
  v234 = v233 + 1794778827 - ((2 * v233) & 0xD5F44D96);
  v235 = v229 + 1794778827 - ((2 * v229) & 0xD5F44D96);
  v554 = v219 & 0xFF00FFFF | (((v227 + 104) ^ 0xDF) << 16);
  v236 = (char *)*(&off_1E31525C0 + *(_DWORD *)(v53 - 128) - 917) - 12;
  v237 = *(_DWORD *)&v236[4 * (((v554 ^ v537) >> 16) ^ 0x68)];
  HIDWORD(v239) = v237 ^ 0x689;
  LODWORD(v239) = v237 ^ 0xFA12E000;
  v238 = v239 >> 12;
  v240 = *(_DWORD *)&v236[4 * (BYTE2(v225) ^ BYTE2(v538))];
  HIDWORD(v239) = v240 ^ 0x689;
  LODWORD(v239) = v240 ^ 0xFA12E000;
  v241 = (char *)*(&off_1E31525C0 + (v211 ^ 0x427)) - 4;
  v242 = v234 ^ *(_DWORD *)&v241[4 * (((v551 ^ HIDWORD(v537)) >> 24) ^ 0xB7)] ^ (v239 >> 12);
  v243 = *(_DWORD *)&v236[4 * (((HIDWORD(a42) ^ v215) >> 16) ^ 9)];
  HIDWORD(v239) = v243 ^ 0x689;
  LODWORD(v239) = v243 ^ 0xFA12E000;
  v244 = *(_DWORD *)(v232 + 4 * ((v551 ^ BYTE4(v537)) ^ 0xFBu)) ^ ((unsigned __int16)(v554 ^ v537) >> 8) ^ *(_DWORD *)(v230 + 4 * (((unsigned __int16)(v554 ^ v537) >> 8) ^ 0x23u)) ^ 0xFA67D769 ^ (v239 >> 12);
  LODWORD(v217) = *(_DWORD *)&v236[4 * (((v551 ^ HIDWORD(v537)) >> 16) ^ 0x1C)];
  HIDWORD(v239) = v217 ^ 0x689;
  LODWORD(v239) = v217 ^ 0xFA12E000;
  LODWORD(v217) = *(_DWORD *)&v241[4 * (((v554 ^ v537) >> 24) ^ 0xF6)] ^ (BYTE1(v231)
                                                                                      - 1369524706
                                                                                      - ((v231 >> 7) & 0x3C)) ^ *(_DWORD *)(v230 + 4 * (BYTE1(v231) ^ 0x6Du)) ^ ((v239 >> 12) + 1794778827 - ((2 * (v239 >> 12)) & 0xD5F44D96));
  v245 = HIDWORD(v526) ^ v238 ^ *(_DWORD *)&v241[4 * (((HIDWORD(a42) ^ v215) >> 24) ^ 0x24)] ^ v235;
  v246 = v526 ^ *(_DWORD *)(v232 + 4 * ((BYTE4(a42) ^ v215) ^ 0xF5u)) ^ (v217
                                                                                          + 1413046585
                                                                                          - ((2 * v217) & 0xA872C272));
  LODWORD(v217) = HIDWORD(v522) ^ *(_DWORD *)(v232 + 4 * ((v219 ^ v537) ^ 0x5Fu)) ^ (v242 + 1413046585 - ((2 * v242) & 0xA872C272));
  v247 = v442 ^ *(_DWORD *)&v241[4 * HIBYTE(v231)] ^ (v244 + 1794778827 - ((2 * v244) & 0xD5F44D96));
  v248 = v245 ^ 0xF9388C2F;
  v249 = *(_DWORD *)&v236[4 * ((v245 ^ 0xF9388C2F) >> 16)];
  HIDWORD(v239) = v249 ^ 0x689;
  LODWORD(v239) = v249 ^ 0xFA12E000;
  v250 = v239 >> 12;
  v251 = *(_DWORD *)&v236[4 * (BYTE2(v246) ^ 0xE0)];
  HIDWORD(v239) = v251 ^ 0x689;
  LODWORD(v239) = v251 ^ 0xFA12E000;
  v252 = v239 >> 12;
  v253 = *(_DWORD *)&v236[4 * (BYTE2(v217) ^ 0x66)];
  HIDWORD(v239) = v253 ^ 0x689;
  LODWORD(v239) = v253 ^ 0xFA12E000;
  v254 = (v239 >> 12) ^ *(_DWORD *)(v230 + 4 * (BYTE1(v247) ^ 5u)) ^ ((BYTE1(v247) ^ 0x68)
                                                                      - 1369524706
                                                                      - 2
                                                                      * ((BYTE1(v247) ^ 0x68) & 0x1F ^ (v247 >> 8) & 1));
  v255 = (v250 + 1413046585 - ((2 * v250) & 0xA872C272)) ^ *(_DWORD *)(v232 + 4 * (v217 ^ 0xB6u));
  v256 = (v254 + 1413046585 - ((2 * v254) & 0xA872C272)) ^ *(_DWORD *)(v232 + 4 * (v245 ^ 0x61u));
  LODWORD(v219) = (((unsigned __int16)(v245 ^ 0x8C2F) >> 8)
                 - 1369524706
                 - (((v245 ^ 0xF9388C2F) >> 7) & 0x3C)) ^ 0xD678EAEF ^ *(_DWORD *)(v230
                                                                                 + 4
                                                                                 * (((unsigned __int16)(v245 ^ 0x8C2F) >> 8) ^ 0x6Du));
  v257 = *(_DWORD *)&v241[4 * (BYTE3(v217) ^ 0x43)] ^ 0xC8E07D75;
  LODWORD(v219) = v219 + v257 - 2 * (v219 & v257);
  v258 = *(_DWORD *)&v236[4 * (BYTE2(v247) ^ 0xBD)];
  HIDWORD(v239) = v258 ^ 0x689;
  LODWORD(v239) = v258 ^ 0xFA12E000;
  v259 = *(_DWORD *)&v241[4 * HIBYTE(v248)] ^ (v252 + 1794778827 - ((2 * v252) & 0xD5F44D96));
  v260 = (v259 + 1413046585 - ((2 * v259) & 0xA872C272)) ^ *(_DWORD *)(v232 + 4 * (v247 ^ 0xABu));
  v261 = *(_DWORD *)&v241[4 * (HIBYTE(v247) ^ 0x42)] ^ v543 ^ *(_DWORD *)(v230 + 4 * (BYTE1(v246) ^ 0x9Cu)) ^ ((BYTE1(v246) ^ 0xF1) - 1369524706 - ((2 * ((v246 >> 8) ^ 0x94E0F1)) & 0x3C)) ^ (v255 + 1794778827 - ((2 * v255) & 0xD5F44D96));
  v262 = v522 ^ *(_DWORD *)(v230 + 4 * (BYTE1(v217) ^ 0x39u)) ^ (v260 - 1369524706 - ((2 * v260) & 0x5CBD6C3C));
  v263 = HIDWORD(v517) ^ *(_DWORD *)&v241[4 * (HIBYTE(v246) ^ 0x94)] ^ (v256 + 1794778827 - ((2 * v256) & 0xD5F44D96));
  v264 = v517 ^ *(_DWORD *)(v232 + 4 * (v246 ^ 0x79u)) ^ ((v219 ^ (v239 >> 12))
                                                                           + 1413046585
                                                                           - ((2 * (v219 ^ (v239 >> 12))) & 0xA872C272));
  v265 = *(_DWORD *)&v236[4 * (BYTE2(v264) ^ 0x79)];
  HIDWORD(v239) = v265 ^ 0x689;
  LODWORD(v239) = v265 ^ 0xFA12E000;
  BYTE1(v260) = BYTE1(v263) ^ 0x68;
  v266 = ((v239 >> 12) + 1794778827 - ((2 * (v239 >> 12)) & 0xD5F44D96)) ^ *(_DWORD *)&v241[4
                                                                                          * ((v263 ^ 0x2261685E) >> 24)];
  v267 = ((BYTE1(v264) ^ 0xD0) - 1369524706 - 2 * ((BYTE1(v264) ^ 0xD0) & 0x1F ^ (v264 >> 8) & 1)) ^ *(_DWORD *)(v230 + 4 * (BYTE1(v264) ^ 0xBDu));
  v268 = (v267 + 1413046585 - ((2 * v267) & 0xA872C272)) ^ *(_DWORD *)(v232 + 4 * (v261 ^ 0x76u));
  LODWORD(v219) = ((BYTE1(v262) ^ 0xEC) - 1369524706 - ((2 * ((v262 >> 8) ^ 0xE5FEC)) & 0x3C)) ^ *(_DWORD *)(v230 + 4 * (BYTE1(v262) ^ 0x81u));
  v269 = *(_DWORD *)&v236[4 * (BYTE2(v262) ^ 0x5F)];
  HIDWORD(v239) = v269 ^ 0x689;
  LODWORD(v239) = v269 ^ 0xFA12E000;
  v270 = v239 >> 12;
  HIDWORD(v239) = *(_DWORD *)(v232 + 4 * (v263 ^ 0x5Eu)) ^ 0xBD2E46B1;
  LODWORD(v239) = HIDWORD(v239);
  LODWORD(v219) = (v239 >> 28) ^ __ROR4__(*(_DWORD *)&v241[4 * (HIBYTE(v264) ^ 6)] ^ 0x7462B151 ^ (v219+ 1794778827- ((2 * v219) & 0xD5F44D96)), 28);
  v271 = (v270 + 1794778827 - ((2 * v270) & 0xD5F44D96)) ^ *(_DWORD *)&v241[4 * (HIBYTE(v261) ^ 0xD2)];
  v272 = *(_DWORD *)&v236[4 * (BYTE2(v263) ^ 0x1B)];
  HIDWORD(v239) = v272 ^ 0x689;
  LODWORD(v239) = v272 ^ 0xFA12E000;
  v273 = v239 >> 12;
  v274 = (v271 + 1413046585 - ((2 * v271) & 0xA872C272)) ^ *(_DWORD *)(v232 + 4 * (v264 ^ 0x4Cu));
  v275 = BYTE1(v261);
  v276 = (BYTE1(v261) ^ 0xC0) - 1369524706 - ((v261 >> 7) & 0x3C);
  v277 = *(_DWORD *)&v236[4 * (BYTE2(v261) ^ 0xCC)];
  HIDWORD(v239) = v277 ^ 0x689;
  LODWORD(v239) = v277 ^ 0xFA12E000;
  v278 = HIDWORD(v390) ^ v393 ^ (v239 >> 12) ^ __ROR4__(v219 ^ 0x78071371, 4);
  LOBYTE(v217) = v262 ^ BYTE1(v217) ^ 0x54;
  v279 = v512 ^ *(_DWORD *)&v241[4 * (HIBYTE(v262) ^ 0xE)] ^ v273 ^ (v268 + 1794778827 - ((2 * v268) & 0xD5F44D96));
  v280 = BYTE1(v260);
  v281 = HIDWORD(v507) ^ *(_DWORD *)(v230 + 4 * (BYTE1(v260) ^ 0x6Du)) ^ (v274 - 1369524706 - ((2 * v274) & 0x5CBD6C3C));
  v282 = v194 ^ v419 ^ v276 ^ *(_DWORD *)(v232 + 4 * (v217 ^ 0xCAu)) ^ *(_DWORD *)(v230 + 4 * (v275 ^ 0xADu)) ^ (v266 + 1413046585 - ((2 * v266) & 0xA872C272));
  v283 = v280 ^ 0x4552953C ^ v281;
  LODWORD(v217) = *(_DWORD *)&v236[4 * BYTE2(v283)];
  HIDWORD(v239) = v217 ^ 0x689;
  LODWORD(v239) = v217 ^ 0xFA12E000;
  v284 = v239 >> 12;
  BYTE1(v217) = BYTE1(v278) ^ 0xE7;
  v285 = *(_DWORD *)&v236[4 * ((v278 ^ 0x99FEE750) >> 16)];
  HIDWORD(v239) = v285 ^ 0x689;
  LODWORD(v239) = v285 ^ 0xFA12E000;
  v286 = (BYTE1(v283) - 1369524706 - ((v283 >> 7) & 0x3C)) ^ *(_DWORD *)(v232 + 4 * (v279 ^ 0x72u)) ^ *(_DWORD *)(v230 + 4 * (BYTE1(v283) ^ 0x6Du)) ^ ((v239 >> 12) + 1413046585 - ((2 * (v239 >> 12)) & 0xA872C272));
  v287 = *(_DWORD *)&v236[4 * (BYTE2(v282) ^ 2)];
  HIDWORD(v239) = v287 ^ 0x689;
  LODWORD(v239) = v287 ^ 0xFA12E000;
  v288 = *(_DWORD *)&v241[4 * (HIBYTE(v279) ^ 0xA7)] ^ (v239 >> 12) ^ *(_DWORD *)(v232 + 4 * v283);
  v289 = *(_DWORD *)&v236[4 * (BYTE2(v279) ^ 0x3B)];
  HIDWORD(v239) = v289 ^ 0x689;
  LODWORD(v239) = v289 ^ 0xFA12E000;
  LODWORD(v219) = HIDWORD(v502) ^ ((BYTE1(v282) ^ 0xD9) - 1369524706 - ((2 * ((v282 >> 8) ^ 0x9802D9)) & 0x3C)) ^ *(_DWORD *)(v232 + 4 * (v278 ^ 0x1Eu)) ^ *(_DWORD *)(v230 + 4 * (BYTE1(v282) ^ 0xB4u)) ^ (v239 >> 12) ^ *(_DWORD *)&v241[4 * (HIBYTE(v281) ^ 0x61)];
  v290 = v502 ^ *(_DWORD *)&v241[4 * (HIBYTE(v282) ^ 0x98)] ^ (v286 + 1794778827 - ((2 * v286) & 0xD5F44D96));
  v291 = HIDWORD(v497) ^ *(_DWORD *)(v232 + 4 * (v282 ^ 0x3Du)) ^ *(_DWORD *)&v241[4 * ((v278 ^ 0x99FEE750) >> 24)] ^ ((BYTE1(v279) ^ 0x29) - 1369524706 - ((2 * ((v279 >> 8) ^ 0xA73B29)) & 0x3C)) ^ *(_DWORD *)(v230 + 4 * (BYTE1(v279) ^ 0x44u)) ^ v284;
  v292 = v497 ^ *(_DWORD *)(v230 + 4 * (((unsigned __int16)(v278 ^ 0xE750) >> 8) ^ 0x6Du)) ^ ((v288 ^ 0x3EC347F2) - 1369524706 - 2 * ((v288 ^ 0x3EC347F2) & 0x2E5EB61F ^ v288 & 1));
  v293 = *(_DWORD *)&v236[4 * (BYTE2(v219) ^ 0xBD)];
  HIDWORD(v239) = v293 ^ 0x689;
  LODWORD(v239) = v293 ^ 0xFA12E000;
  v294 = v239 >> 12;
  v295 = *(_DWORD *)&v236[4 * (BYTE2(v291) ^ 0x2B)];
  HIDWORD(v239) = v295 ^ 0x689;
  LODWORD(v239) = v295 ^ 0xFA12E000;
  v296 = BYTE1(v291) ^ 0xB8;
  v297 = v296 - 1369524706 - ((2 * ((v291 >> 8) ^ 0xEB2BB8)) & 0x3C);
  LOBYTE(v276) = v219 ^ 0x43;
  LODWORD(v217) = *(_DWORD *)(v232 + 4 * ((v292 ^ BYTE1(v217)) ^ 0x41u)) ^ (((unsigned __int16)(v219 ^ 0xB543) >> 8)
                                                                                             - 1369524706
                                                                                             - (((v219 ^ 0xE9C7B543) >> 7) & 0x3C)) ^ *(_DWORD *)(v230 + 4 * (((unsigned __int16)(v219 ^ 0xB543) >> 8) ^ 0x6Du)) ^ ((v239 >> 12) + 1413046585 - ((2 * (v239 >> 12)) & 0xA872C272));
  v298 = v217 + 1794778827 - ((2 * v217) & 0xD5F44D96);
  LODWORD(v217) = *(_DWORD *)&v236[4 * (BYTE2(v292) ^ 0x81)];
  HIDWORD(v239) = v217 ^ 0x689;
  LODWORD(v239) = v217 ^ 0xFA12E000;
  LODWORD(v217) = ((v239 >> 12) + 1794778827 - ((2 * (v239 >> 12)) & 0xD5F44D96)) ^ *(_DWORD *)&v241[4 * ((v219 ^ 0xE9C7B543) >> 24)];
  LODWORD(v217) = (v217 + 1413046585 - ((2 * v217) & 0xA872C272)) ^ *(_DWORD *)(v232
                                                                              + 4 * (v291 ^ 0xF7u));
  v299 = *(_DWORD *)(v232 + 4 * (v290 ^ 0xFCu)) ^ (v294 + 1413046585 - ((2 * v294) & 0xA872C272)) ^ ((BYTE1(v292) ^ 0xA0) - 1369524706 - ((v292 >> 7) & 0x3C)) ^ *(_DWORD *)(v230 + 4 * (BYTE1(v292) ^ 0xCDu));
  LODWORD(v219) = *(_DWORD *)&v236[4 * (BYTE2(v290) ^ 0xC6)];
  LODWORD(v239) = __ROR4__((v219 >> 12) ^ 0x2627C0C, 17) ^ 0xEE910136;
  HIDWORD(v239) = v239;
  v300 = HIDWORD(v491) ^ *(_DWORD *)(v230 + 4 * (BYTE1(v290) ^ 0x75u)) ^ (v217 - 1369524706 - ((2 * v217) & 0x5CBD6C3C));
  LODWORD(v217) = v491 ^ *(_DWORD *)&v241[4 * (HIBYTE(v291) ^ 0xEB)] ^ (v299 + 1794778827 - ((2 * v299) & 0xD5F44D96));
  v301 = HIDWORD(v484) ^ *(_DWORD *)&v241[4 * (HIBYTE(v290) ^ 0x5A)] ^ v298;
  v302 = v484 ^ v297 ^ *(_DWORD *)(v232 + 4 * v276) ^ *(_DWORD *)(v230 + 4 * (v296 ^ 0x6Du)) ^ *(_DWORD *)&v241[4 * (HIBYTE(v292) ^ 0x68)] ^ ((v239 >> 15) + ((_DWORD)v219 << 20));
  v303 = ((BYTE1(v300) ^ 0x9D) - 1369524706 - ((2 * ((v300 >> 8) ^ 0xC2489D)) & 0x3C)) ^ *(_DWORD *)(v230 + 4 * (BYTE1(v300) ^ 0xF0u));
  LODWORD(v219) = *(_DWORD *)&v236[4 * (BYTE2(v217) ^ 0x8F)];
  v304 = *(_DWORD *)(v232 + 4 * (v302 ^ 0x78u)) ^ ((_DWORD)v219 << 20) ^ (v219 >> 12);
  v305 = v301 ^ 0xCFB8D782;
  LODWORD(v219) = *(_DWORD *)&v236[4 * ((v301 ^ 0xCFB8D782) >> 16)];
  v306 = v304 ^ (v303 + 1413046585 - ((2 * v303) & 0xA872C272));
  HIDWORD(v239) = v219 ^ 0x689;
  LODWORD(v239) = v219 ^ 0xFA12E000;
  v307 = ((v239 >> 12) + 1413046585 - ((2 * (v239 >> 12)) & 0xA872C272)) ^ *(_DWORD *)(v232
                                                                                     + 4
                                                                                     * ((v300 ^ BYTE1(v290)) ^ 0x3Fu));
  v308 = (v306 ^ 0x689FA12E) + 1794778827 - 2 * ((v306 ^ 0x689FA12E) & 0x6AFA26DB ^ v306 & 0x10);
  v309 = v307 + 1794778827 - ((2 * v307) & 0xD5F44D96);
  v310 = BYTE1(v217) ^ 0xD9;
  v311 = v310 - 1369524706 - ((2 * ((v217 >> 8) ^ 0xC78FD9)) & 0x3C);
  LODWORD(v219) = *(_DWORD *)&v236[4 * (BYTE2(v300) ^ 0x48)];
  HIDWORD(v239) = v219 ^ 0x689;
  LODWORD(v239) = v219 ^ 0xFA12E000;
  v312 = ((BYTE1(v302) ^ 0x27) - 1369524706 - ((2 * ((v302 >> 8) ^ 0x70D827)) & 0x3C)) ^ *(_DWORD *)(v232 + 4 * (v301 ^ 0xCCu)) ^ *(_DWORD *)(v230 + 4 * (BYTE1(v302) ^ 0x4Au)) ^ ((v239 >> 12) + 1413046585 - ((2 * (v239 >> 12)) & 0xA872C272));
  LODWORD(v219) = *(_DWORD *)&v236[4 * (BYTE2(v302) ^ 0xD8)];
  HIDWORD(v239) = v219 ^ 0x689;
  LODWORD(v239) = v219 ^ 0xFA12E000;
  v313 = HIDWORD(v478) ^ (BYTE1(v305) - 1369524706 - ((v305 >> 7) & 0x3C)) ^ *(_DWORD *)(v232
                                                                                       + 4
                                                                                       * (v217 ^ 0x50u)) ^ *(_DWORD *)(v230 + 4 * (BYTE1(v305) ^ 0x6Du)) ^ (v239 >> 12) ^ *(_DWORD *)&v241[4 * (HIBYTE(v300) ^ 0xC2)];
  v314 = v478 ^ *(_DWORD *)&v241[4 * (BYTE3(v217) ^ 0xC7)] ^ (v312 + 1794778827 - ((2 * v312) & 0xD5F44D96));
  LODWORD(v217) = HIDWORD(v473) ^ *(_DWORD *)&v241[4 * HIBYTE(v305)] ^ v308;
  v315 = v473 ^ v311 ^ *(_DWORD *)(v230 + 4 * (v310 ^ 0x6Du)) ^ *(_DWORD *)&v241[4 * (HIBYTE(v302) ^ 0x70)] ^ v309;
  v316 = *(_DWORD *)&v236[4 * (BYTE2(v314) ^ 0xE6)];
  HIDWORD(v239) = v316 ^ 0x689;
  LODWORD(v239) = v316 ^ 0xFA12E000;
  v317 = v239 >> 12;
  v318 = *(_DWORD *)&v236[4 * (BYTE2(v217) ^ 0x1C)];
  HIDWORD(v239) = v318 ^ 0x689;
  LODWORD(v239) = v318 ^ 0xFA12E000;
  LODWORD(v219) = (((unsigned __int16)(v315 ^ 0xCCA2) >> 8)
                 - 1369524706
                 - (((v315 ^ 0x33C8CCA2) >> 7) & 0x3C)) ^ *(_DWORD *)(v230
                                                                    + 4
                                                                    * (((unsigned __int16)(v315 ^ 0xCCA2) >> 8) ^ 0x6Du));
  v319 = (v239 >> 12) ^ *(_DWORD *)(v230 + 4 * (BYTE1(v314) ^ 0xD9u)) ^ ((BYTE1(v314) ^ 0xB4)
                                                                         - 1369524706
                                                                         - ((2 * ((v314 >> 8) ^ 0x4FE6B4)) & 0x3C));
  v320 = (v319 + 1413046585 - ((2 * v319) & 0xA872C272)) ^ *(_DWORD *)(v232 + 4 * (v313 ^ 0x18u));
  LODWORD(v219) = (v219 + 1413046585 - ((2 * v219) & 0xA872C272)) ^ *(_DWORD *)(v232
                                                                              + 4 * (v217 ^ 0x3Au));
  LODWORD(v222) = *(_DWORD *)(v232 + 4 * (v315 ^ 0xA2u)) ^ (((unsigned __int16)(v313 ^ 0x5318) >> 8)
                                                                             - 1369524706
                                                                             - (((v313 ^ 0x27F05318) >> 7) & 0x3C)) ^ *(_DWORD *)(v230 + 4 * (((unsigned __int16)(v313 ^ 0x5318) >> 8) ^ 0x6Du)) ^ (v317 + 1413046585 - ((2 * v317) & 0xA872C272));
  v321 = *(_DWORD *)(v232 + 4 * (v314 ^ 0x96u));
  HIDWORD(v239) = v321 ^ 0x14396139;
  LODWORD(v239) = v321 ^ 0x40000000;
  HIDWORD(v239) = (v239 >> 29) ^ 0x6615DA09;
  LODWORD(v239) = HIDWORD(v239);
  v322 = (v239 >> 3) - 1369524706 - ((2 * (v239 >> 3)) & 0x5CBD6C3C);
  v323 = *(_DWORD *)&v236[4 * ((v313 ^ 0x27F05318) >> 16)];
  HIDWORD(v239) = v323 ^ 0x689;
  LODWORD(v239) = v323 ^ 0xFA12E000;
  v324 = v239 >> 12;
  v325 = *(_DWORD *)&v236[4 * ((v315 ^ 0x33C8CCA2) >> 16)];
  HIDWORD(v239) = v325 ^ 0x689;
  LODWORD(v239) = v325 ^ 0xFA12E000;
  v326 = HIDWORD(v468) ^ *(_DWORD *)&v241[4 * (HIBYTE(v315) ^ 0x17)] ^ (v320 + 1794778827 - ((2 * v320) & 0xD5F44D96));
  v327 = BYTE1(v217);
  v328 = v322 ^ *(_DWORD *)(v230 + 4 * (BYTE1(v217) ^ 0xD1u)) ^ (v239 >> 12);
  v329 = *(_DWORD *)&v241[4 * (HIBYTE(v313) ^ 3)] ^ v542 ^ (v328 + 1794778827 - ((2 * v328) & 0xD5F44D96));
  v330 = v468 ^ *(_DWORD *)&v241[4 * (HIBYTE(v314) ^ 0x4F)] ^ v324 ^ (v219 + 1794778827 - ((2 * v219) & 0xD5F44D96));
  LODWORD(v217) = HIDWORD(v463) ^ *(_DWORD *)&v241[4 * (BYTE3(v217) ^ 0x1B)] ^ (v222
                                                                              + 1794778827
                                                                              - ((2 * v222) & 0xD5F44D96));
  v331 = *(_DWORD *)&v236[4 * (BYTE2(v217) ^ 0x7E)];
  HIDWORD(v239) = v331 ^ 0x689;
  LODWORD(v239) = v331 ^ 0xFA12E000;
  v332 = v239 >> 12;
  v333 = *(_DWORD *)&v236[4 * (BYTE2(v330) ^ 1)];
  HIDWORD(v239) = v333 ^ 0x689;
  LODWORD(v239) = v333 ^ 0xFA12E000;
  v334 = ((v239 >> 12) + 1413046585 - ((2 * (v239 >> 12)) & 0xA872C272)) ^ *(_DWORD *)(v232
                                                                                     + 4
                                                                                     * (v326 ^ 0xC6u));
  v335 = ((BYTE1(v326) ^ 0x71) - 1369524706 - ((2 * ((v326 >> 8) ^ 0xF25B71)) & 0x3C)) ^ *(_DWORD *)(v230 + 4 * (BYTE1(v326) ^ 0x1Cu));
  v336 = (v335 + 1794778827 - ((2 * v335) & 0xD5F44D96)) ^ *(_DWORD *)&v241[4 * (HIBYTE(v330) ^ 0x1F)];
  LODWORD(v219) = *(_DWORD *)&v236[4 * (BYTE2(v326) ^ 0x5B)];
  HIDWORD(v239) = v219 ^ 0x689;
  LODWORD(v239) = v219 ^ 0xFA12E000;
  LODWORD(v219) = v239 >> 12;
  LODWORD(v222) = v327 ^ 0x73F4E0AF ^ v329;
  v337 = *(_DWORD *)&v236[4 * BYTE2(v222)];
  HIDWORD(v239) = v337 ^ 0x689;
  LODWORD(v239) = v337 ^ 0xFA12E000;
  v338 = v239 >> 12;
  HIDWORD(v239) = v332 ^ ((BYTE1(v330) ^ 0x81) - 1369524706 - ((v330 >> 7) & 0x3C)) ^ 0xD678EAEF ^ *(_DWORD *)(v230 + 4 * (BYTE1(v330) ^ 0xECu));
  LODWORD(v239) = HIDWORD(v239);
  LODWORD(v239) = (v239 >> 11) ^ __ROR4__(*(_DWORD *)&v241[4 * (HIBYTE(v326) ^ 0xF2)] ^ 0xC8E07D75, 11) ^ 0xD490839A;
  HIDWORD(v239) = v239;
  v339 = v407 ^ v411 ^ *(_DWORD *)(v232 + 4 * (v330 ^ 0xB8u)) ^ ((BYTE1(v217) ^ 0xAA)
                                                                                  - 1369524706
                                                                                  - ((2
                                                                                    * ((v217 >> 8) ^ 0x967EAA)) & 0x3C)) ^ *(_DWORD *)&v241[4 * (HIBYTE(v329) ^ 0x57)] ^ *(_DWORD *)(v230 + 4 * (BYTE1(v217) ^ 0xC7u)) ^ v219;
  v340 = HIDWORD(v458) ^ *(_DWORD *)&v241[4 * (BYTE3(v217) ^ 0x96)] ^ (BYTE1(v222) - 1369524706 - ((v329 >> 7) & 0x3C)) ^ *(_DWORD *)(v230 + 4 * (BYTE1(v222) ^ 0x6Du)) ^ (v334 + 1794778827 - ((2 * v334) & 0xD5F44D96));
  v341 = v458 ^ *(_DWORD *)(v232 + 4 * (v217 ^ 0x88u)) ^ v338 ^ (v336
                                                                                  + 1413046585
                                                                                  - ((2 * v336) & 0xA872C272));
  v342 = HIDWORD(v453) ^ *(_DWORD *)(v232 + 4 * v222) ^ ((v239 >> 21)
                                                                          + 1413046585
                                                                          - ((2 * (v239 >> 21)) & 0xA872C272));
  BYTE2(v217) = BYTE2(v341) ^ 0x4A;
  LODWORD(v222) = *(_DWORD *)&v236[4 * (BYTE2(v339) ^ 0x28)];
  HIDWORD(v239) = v222 ^ 0x689;
  LODWORD(v239) = v222 ^ 0xFA12E000;
  LODWORD(v222) = v239 >> 12;
  v343 = *(_DWORD *)(v230 + 4 * (BYTE1(v340) ^ 0x96u)) ^ ((BYTE1(v340) ^ 0xFB)
                                                          - 1369524706
                                                          - ((2 * ((v340 >> 8) ^ 0x3EA2FB)) & 0x3C));
  v344 = *(_DWORD *)&v236[4 * (BYTE2(v340) ^ 0xA2)];
  v345 = (v343 + 1413046585 - ((2 * v343) & 0xA872C272)) ^ *(_DWORD *)(v232 + 4 * (v341 ^ 0x75u));
  HIDWORD(v239) = v344 ^ 0x689;
  LODWORD(v239) = v344 ^ 0xFA12E000;
  v346 = (((unsigned __int16)(v341 ^ 0xF075) >> 8) - 1369524706 - (((v341 ^ 0xB54AF075) >> 7) & 0x3C)) ^ (v239 >> 12) ^ *(_DWORD *)(v230 + 4 * (((unsigned __int16)(v341 ^ 0xF075) >> 8) ^ 0x6Du));
  v347 = (v346 + 1794778827 - ((2 * v346) & 0xD5F44D96)) ^ *(_DWORD *)&v241[4 * (HIBYTE(v342) ^ 0xED)];
  v348 = *(_DWORD *)&v241[4 * (HIBYTE(v341) ^ 0x91)];
  LODWORD(v219) = *(_DWORD *)&v241[4 * (HIBYTE(v340) ^ 0x3E)];
  LODWORD(v241) = *(_DWORD *)&v241[4 * (HIBYTE(v339) ^ 0xF9)];
  v349 = v345 + 1794778827 - ((2 * v345) & 0xD5F44D96);
  v350 = *(_DWORD *)(v232 + 4 * (v342 ^ 0x8Fu));
  v351 = *(_DWORD *)(v232 + 4 * (v340 ^ 0x9Au));
  LODWORD(v232) = *(_DWORD *)(v232 + 4 * (v339 ^ 0x9Du));
  v352 = *(_DWORD *)&v236[4 * ((v342 ^ 0xC9AF1D8F) >> 16)];
  LODWORD(v217) = *(_DWORD *)&v236[4 * BYTE2(v217)];
  HIDWORD(v239) = v217 ^ 0x689;
  LODWORD(v239) = v217 ^ 0xFA12E000;
  LODWORD(v217) = (v339 >> 8) ^ 0xF92887;
  v353 = *(_DWORD *)(v230 + 4 * (((unsigned __int16)(v342 ^ 0x1D8F) >> 8) ^ 0x6Du));
  LODWORD(v230) = *(_DWORD *)(v230 + 4 * (v217 ^ 0x6Du));
  v354 = v217 - 1369524706 - ((2 * v217) & 0x3C);
  LODWORD(v217) = v453 ^ v351 ^ v222 ^ (((unsigned __int16)(v342 ^ 0x1D8F) >> 8)
                                      - 1369524706
                                      - (((v342 ^ 0xC9AF1D8F) >> 7) & 0x3C)) ^ v348 ^ v353;
  v355 = HIDWORD(v448) ^ v354 ^ v219 ^ v230 ^ v350 ^ (v239 >> 12);
  LODWORD(v236) = v448 ^ v232 ^ (v347 + 1413046585 - ((2 * v347) & 0xA872C272));
  v356 = HIDWORD(v442) ^ v241 ^ (v352 >> 12) ^ (v352 << 20);
  v357 = *(unsigned int *)(v53 - 128);
  v358 = (char *)*(&off_1E31525C0 + (int)v357 - 814) - 8;
  v359 = (char *)*(&off_1E31525C0 + SHIDWORD(v431)) - 4;
  LODWORD(v241) = *(_DWORD *)&v359[4 * (BYTE1(v217) ^ 0x36)];
  v360 = v356 ^ v349;
  v361 = *(_DWORD *)&v358[4 * (v236 ^ 7)] ^ *(_DWORD *)&v359[4
                                                                            * (((unsigned __int16)(v356 ^ v349) >> 8) ^ 0x82)] ^ 0x2EFEA6CB;
  v362 = *(_DWORD *)&v359[4 * ((unsigned __int16)((unsigned __int16)v236 ^ 0x6F07) >> 8)];
  LODWORD(v232) = *(_DWORD *)&v359[4 * (BYTE1(v355) ^ 0x68)];
  v363 = (char *)*(&off_1E31525C0 + (int)v357 - 965) - 8;
  v364 = *(_DWORD *)&v363[4 * ((v236 >> 24) ^ 0xEF)];
  LODWORD(v222) = *(_DWORD *)&v363[4 * (HIBYTE(v355) ^ 0x81)];
  v365 = *(_DWORD *)&v363[4 * (HIBYTE(v360) ^ 0xF5)];
  LODWORD(v359) = *(_DWORD *)&v363[4 * (BYTE3(v217) ^ 0xF)];
  v366 = (uint64_t)*(&off_1E31525C0 + (int)v431);
  LODWORD(v363) = *(_DWORD *)(v366 + 4 * (BYTE2(v360) ^ 0x23u));
  v367 = *(_DWORD *)(v366 + 4 * (BYTE2(v236) ^ 0x2Au));
  LODWORD(v236) = *(_DWORD *)(v366 + 4 * (BYTE2(v355) ^ 0xD1u));
  v368 = v222 ^ (v361 - 337079153 - ((2 * v361) & 0xD7D1291E));
  LODWORD(v222) = *(_DWORD *)(v366 + 4 * (BYTE2(v217) ^ 0x48u));
  v369 = *(unsigned int *)&v358[4 * (v217 ^ 0x2E)];
  LODWORD(v217) = v222 ^ (v368 - 690612296 - ((2 * v368) & 0xADAC2F70));
  v370 = *(_DWORD *)&v358[4 * (v355 ^ 0xC4)];
  v371 = *(_DWORD *)&v358[4 * (v360 ^ 0xF5)];
  v372 = *(_DWORD *)(v53 - 144) ^ HIDWORD(v538) ^ (v217 - ((2 * (_DWORD)v217) & 0xCE811D6) + 108267755);
  v373 = (char *)*(&off_1E31525C0 + SHIDWORD(v425)) - 8;
  *(_BYTE *)(*(_QWORD *)(v53 - 120) + *(_QWORD *)(v53 - 256)) = v373[BYTE3(v372) ^ 0xD7] ^ 0x7F;
  v374 = ((v363 ^ 0x317D3D82 ^ v362)
        - 337079153
        - ((2 * (v363 ^ 0x317D3D82 ^ v362)) & 0xD7D1291E)) ^ v359;
  v375 = (v374 - 917140239 - ((2 * v374) & 0x92AB19E2)) ^ v370;
  v376 = *(_DWORD *)(v53 - 140) ^ v539 ^ (v375 + 511454332 + (~(2 * v375) | 0xC307A709));
  v377 = (char *)*(&off_1E31525C0 + (int)v425) - 12;
  *(_BYTE *)(*(_QWORD *)(v53 - 120) + *(_QWORD *)(v53 - 224)) = (v377[v376 ^ 0xC7] + 118) ^ 0x5F;
  v378 = ((v369 ^ 0x1F839B49 ^ v367) - 337079153 - ((2 * (v369 ^ 0x1F839B49 ^ v367)) & 0xD7D1291E)) ^ v365;
  v379 = (v378 - ((2 * v378) & 0xCF565474) - 408212934) ^ v232;
  v380 = (char *)*(&off_1E31525C0 + SHIDWORD(a17)) - 4;
  LODWORD(v363) = v380[BYTE1(v376) ^ 0x13];
  v381 = *(_DWORD *)(v53 - 136) ^ v540 ^ (v379 - ((2 * v379) & 0x1CDC6B40) - 1905379936);
  HIDWORD(v239) = v363 ^ 0x20;
  LODWORD(v239) = ~(_DWORD)v363 << 24;
  *(_BYTE *)(*(_QWORD *)(v53 - 120) + 6) = (v239 >> 30) ^ 0x40;
  LODWORD(v359) = v380[BYTE1(v381)];
  HIDWORD(v239) = v359 ^ 0x20;
  LODWORD(v239) = ~(_DWORD)v359 << 24;
  LODWORD(v363) = v364 ^ v241;
  *(_BYTE *)(*(_QWORD *)(v53 - 120) + *(_QWORD *)(v53 - 216)) = (v239 >> 30) ^ 0x7E;
  v382 = (char *)*(&off_1E31525C0 + (int)v357 - 899) - 8;
  *(_BYTE *)(*(_QWORD *)(v53 - 120) + 9) = v382[BYTE2(v372) ^ 0xFBLL] ^ 0xF;
  v383 = (v363 ^ 0xC43BEB5) & 0x56D617BA;
  LODWORD(v359) = ((v363 ^ 0xC43BEB5) - 690612296 - 2 * (v383 ^ v363 & 2)) ^ v236;
  LODWORD(v359) = ((_DWORD)v359 - 917140239 - ((2 * (_DWORD)v359) & 0x92AB19E2)) ^ v371;
  LODWORD(v359) = *(_DWORD *)(v53 - 132) ^ HIDWORD(v539) ^ ((_DWORD)v359 - ((2 * (_DWORD)v359) & 0xBF6C5324) + 1605773714);
  *(_BYTE *)(*(_QWORD *)(v53 - 120) + *(_QWORD *)(v53 - 184)) = v382[BYTE2(v359) ^ 0xB8] ^ 0xDC;
  *(_BYTE *)(*(_QWORD *)(v53 - 120) + *(_QWORD *)(v53 - 248)) = (v377[v372 ^ 0x1BLL] + 118) ^ 0x7D;
  v384 = *(_QWORD *)(v53 - 120);
  *(_BYTE *)(v384 + *(_QWORD *)(v53 - 232)) = v382[BYTE2(v376) ^ 3] ^ 0xA2;
  v385 = *(_QWORD *)(v53 - 120);
  v386 = *(_QWORD *)(v53 - 200);
  *(_BYTE *)(v385 + *(_QWORD *)(v53 - 192)) = v373[HIBYTE(v376) ^ 0x6DLL] ^ 0x87;
  v387 = v380[BYTE1(v372) ^ 0x92];
  HIDWORD(v239) = v387 ^ 0x20;
  LODWORD(v239) = ~v387 << 24;
  *(_BYTE *)(v385 + *(_QWORD *)(v53 - 160)) = (v239 >> 30) ^ 0xD2;
  *(_BYTE *)(v385 + v386) = v373[HIBYTE(v381) ^ 0x53] ^ 0x6B;
  *(_BYTE *)(v385 + *(_QWORD *)(v53 - 176)) = (v377[v381 ^ 0x95] + 118) ^ 0xAF;
  *(_BYTE *)(v385 + *(_QWORD *)(v53 - 240)) = (v377[v359 ^ 0x64] + 118) ^ 0x27;
  *(_BYTE *)(v385 + *(_QWORD *)(v53 - 168)) = v373[(v359 >> 24) ^ 0x6ELL] ^ 0xFD;
  LODWORD(v373) = v380[BYTE1(v359) ^ 0x1FLL];
  HIDWORD(v239) = v373 ^ 0x20;
  LODWORD(v239) = ~(_DWORD)v373 << 24;
  *(_BYTE *)(v385 + *(_QWORD *)(v53 - 208)) = (v239 >> 30) ^ 0x58;
  *(_BYTE *)(v385 + *(_QWORD *)(v53 - 152)) = v382[BYTE2(v381) ^ 0xC8] ^ 0x8D;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a50 + 8 * ((2483 * ((((_DWORD)v386 + 1854349438 - ((2 * (_DWORD)v386 + 32) & 0xDD0E40FC) + 16) ^ 0x6E87207E) < a48)) ^ ((int)v357 - 519))) - 12))(109, 2460686818, v384, v383, v369, v357, v372, 3377827057, v389, v390, v391, v392, v393, v395, v397, v400, v403, v406, v407,
           v411,
           v415,
           v419,
           a16,
           a17,
           v425,
           v431,
           v436,
           v442,
           v448,
           v453,
           v458,
           v463,
           v468,
           v473,
           v478,
           v484,
           v491,
           v497,
           v502,
           v507,
           v512,
           v517,
           v522,
           v526,
           v531,
           v202,
           v534,
           v536,
           a42,
           v537,
           v538,
           v539);
}

void sub_193C76848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,int a58,int a59,int a60)
{
  uint64_t v60;

  *(_DWORD *)(v60 - 132) = a57 ^ 0x848472BE;
  *(_DWORD *)(v60 - 144) = a59 ^ 0xBD2D6944;
  *(_DWORD *)(v60 - 136) = a60 ^ 0xFA78FC58;
  *(_DWORD *)(v60 - 140) = a58 ^ 0xE720B367;
  JUMPOUT(0x193C74BF8);
}

uint64_t sub_193C7689C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,int a55,int a56,int a57)
{
  uint64_t v57;
  unsigned int v58;

  v58 = a24 - ((2 * a55) & 0x9335E0F4) + ((147 * (a57 ^ 0x5D9)) ^ 0x380B1B50);
  return ((uint64_t (*)(void))(*(_QWORD *)(v57
                                        + 8
                                        * ((((2 * v58) & 0xFB3F71F6 ^ 0x933560F4) + (v58 ^ 0x34054881) - 1879771178 == 227848401) ^ a57))
                            - 8))();
}

uint64_t sub_193C76964()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((124
                                          * ((((v0 ^ 0x3E) + 84) ^ (v2
                                                                                   + v1
                                                                                   + ((49 * (v0 ^ 0x83E)) ^ 0x82604300) < 8)) & 1)) ^ v0))
                            - 8))();
}

uint64_t sub_193C769F0(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;

  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((((a3 - 1571) ^ 0x65B ^ ((a3 - 1125) | 1)) * ((a1 + a7 - 16) > 0xFFFFFFEF)) ^ a3)))();
}

uint64_t sub_193C76A2C@<X0>(int a1@<W0>, int a2@<W5>, unint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BOOL4 v20;
  int v23;

  v9 = (v7 + v6 + a1);
  v10 = v9 + a3 + 1;
  v11 = ((_BYTE)v7 + (_BYTE)v6 + (_BYTE)a1) & 0xF;
  v12 = v11 - v9;
  v13 = v4 + v12;
  ++v11;
  v14 = v4 + v11;
  v15 = v5 + v12;
  v16 = v5 + v11;
  v17 = v3 + v12;
  v18 = v3 + v11;
  v20 = v14 > a3 && v13 < v10;
  if (v16 > a3 && v15 < v10)
    v20 = 1;
  v23 = v18 > a3 && v17 < v10 || v20;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (a2 ^ (2637 * (v23 ^ 1)))) - ((a2 + 755) ^ 0x53DLL)))();
}

uint64_t sub_193C76AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v8
                                                                       + 8
                                                                       * ((93
                                                                         * (v7 < ((283 * (a7 ^ 0x53B)) ^ 0x622u) - 1028)) ^ a7))
                                                           - 8))(a1, a2, 0);
}

uint64_t sub_193C76AF8@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W3>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16x4_t v65;
  int8x16x4_t v66;

  v65.val[1].i64[0] = ((_BYTE)a2 + 12) & 0xF;
  v65.val[1].i64[1] = ((_BYTE)a2 + 11) & 0xF;
  v65.val[2].i64[0] = ((_BYTE)a2 + 10) & 0xF;
  v65.val[2].i64[1] = ((_BYTE)a2 + 9) & 0xF;
  v65.val[3].i64[0] = ((_BYTE)a2 + 8) & 0xF;
  v65.val[3].i64[1] = ((_BYTE)a2 + 7) & 0xF;
  v66.val[0].i64[0] = ((_BYTE)a2 + 6) & 0xF;
  v66.val[0].i64[1] = ((_BYTE)a2 + 5) & 0xF;
  v58 = v57 + v56 + a1;
  v66.val[1].i64[0] = ((_BYTE)a2 + 4) & 0xF;
  v66.val[1].i64[1] = ((_BYTE)a2 + 3) & 0xF;
  v66.val[2].i64[0] = (a2 + 2) & 0xF;
  v66.val[2].i64[1] = (a2 + 1) & 0xF;
  v66.val[3].i64[0] = a2 & 0xF;
  v66.val[3].i64[1] = (a2 - 1) & 0xF;
  v59.i64[0] = 0x505050505050505;
  v59.i64[1] = 0x505050505050505;
  v60.i64[0] = 0x1212121212121212;
  v60.i64[1] = 0x1212121212121212;
  v65.val[0].i64[0] = v58 & 0xF;
  v65.val[0].i64[1] = ((_BYTE)a2 + 13) & 0xF;
  v61.i64[0] = vqtbl4q_s8(v65, (int8x16_t)xmmword_193EF83A0).u64[0];
  v61.i64[1] = vqtbl4q_s8(v66, (int8x16_t)xmmword_193EF83A0).u64[0];
  v62 = vrev64q_s8(veorq_s8(veorq_s8(*(int8x16_t *)(a4 - 15 + v58), *(int8x16_t *)(v53 + v65.val[0].i64[0] - 15)), veorq_s8(*(int8x16_t *)(v54 + v65.val[0].i64[0] - 15), *(int8x16_t *)(v52 + v65.val[0].i64[0] - 15))));
  v63 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v62, v62, 8uLL), v60), vmulq_s8(v61, v59)));
  *(int8x16_t *)(a4 - 15 + v58) = vextq_s8(v63, v63, 8uLL);
  return (*(uint64_t (**)(void))(a52 + 8 * ((425 * (a3 - (v55 & 0xFFFFFFF0) == 1028)) ^ a3)))();
}

void sub_193C76C60()
{
  JUMPOUT(0x193C76BE4);
}

uint64_t sub_193C76C68(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((((a4 - 114) ^ 0x4DD) * (v4 != a3)) ^ (a4 - 475))) - 4))();
}

uint64_t sub_193C76C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  char v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v8
                                                                                + 8
                                                                                * ((27
                                                                                  * ((v7 & 8) != ((a7 - 925) | 0x400)
                                                                                               - 1029)) ^ a7))
                                                                    - (a7 ^ 0x194u)
                                                                    + 554))(a1, a2, a3, (a2 - a3));
}

uint64_t sub_193C76CD8@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W5>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  int8x16x4_t v65;

  *(_DWORD *)(v60 - 120) = v59;
  *(_DWORD *)(v60 - 132) = v55 & 0xFFFFFFF8;
  *(_DWORD *)(v60 - 128) = v55;
  v61 = -8 - a2;
  v62 = v56 + v58 + v57;
  v63 = a1 + v58 + v57 - 569 + v61 + ((a3 - 53932667) & 0x336F27Du) + 8;
  v65.val[0].i64[0] = ((_BYTE)a1 + (_BYTE)v58 + (_BYTE)v57 - 57 + (_BYTE)v61 + (((_BYTE)a3 - 123) & 0x7D) + 8) & 0xF;
  v65.val[0].i64[1] = (v62 + 13 + (_BYTE)v61 + 8) & 0xF;
  v65.val[1].i64[0] = (v62 + 12 + (_BYTE)v61 + 8) & 0xF;
  v65.val[1].i64[1] = (v62 + 11 + (_BYTE)v61 + 8) & 0xF;
  v65.val[2].i64[0] = (v62 + 10 + (_BYTE)v61 + 8) & 0xF;
  v65.val[2].i64[1] = (v62 + 9 + (_BYTE)v61 + 8) & 0xF;
  v65.val[3].i64[0] = (v62 + 8 + (_BYTE)v61 + 8) & 0xF;
  v65.val[3].i64[1] = (v62 + 7 + (_BYTE)v61 + 8) & 0xF;
  *(int8x8_t *)(a4 - 7 + v63) = vrev64_s8(veor_s8(veor_s8(vrev64_s8(veor_s8(veor_s8(*(int8x8_t *)(a4 - 7 + v63), *(int8x8_t *)(v53 + (v63 & 0xF) - 7)), veor_s8(*(int8x8_t *)(v54 + (v63 & 0xF) - 7), *(int8x8_t *)(v52 + (v63 & 0xF) - 7)))), (int8x8_t)0x1212121212121212), vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v65, (int8x16_t)xmmword_193EF83B0), (int8x8_t)0x505050505050505)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a52 + 8 * ((99 * (-(v55 & 0xFFFFFFF8) == v61)) ^ a3)) - 4))((__n128)xmmword_193EF83B0);
}

void sub_193C76E44()
{
  JUMPOUT(0x193C76D4CLL);
}

uint64_t sub_193C76E4C(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((((a1 + 460) ^ 0x47A) * (*(_DWORD *)(v2 - 128) != *(_DWORD *)(v2 - 132))) ^ a1))
                            - (((a1 - 568) | 0x404) ^ 0x401)))();
}

uint64_t sub_193C76E90@<X0>(int a1@<W3>, int a2@<W4>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = (a1 - 227848402);
  *(_BYTE *)(a3 + v8) ^= *(_BYTE *)(v5 + (v8 & 0xF)) ^ *(_BYTE *)(v6 + (v8 & 0xF)) ^ *(_BYTE *)(v4 + (v8 & 0xF)) ^ (5 * (v8 & 0xF)) ^ 0x12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((126 * (a1 - 1 != v3)) ^ (a2 - 460))) - 4))();
}

void sub_193C76EF8()
{
  int v0;
  int v1;
  uint64_t v2;

  if (v0 == 1569335588)
    v1 = -1557818287;
  else
    v1 = 1557843849;
  *(_DWORD *)(v2 + 40) = v1;
}

void OowSGu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  int v8;

  if (a1)
    v5 = a2 == 0;
  else
    v5 = 1;
  v8 = !v5 && a4 != 0 && a5 != 0;
  __asm { BR              X9 }
}

uint64_t sub_193C76FE4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17, int a18)
{
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;

  *a4 = 0;
  *a5 = 0;
  a17 = -1501685844
      - 1224239923
      * ((-2 - ((&a17 ^ 0x5400 | 0x1FFB89CF) + (&a17 ^ 0x8198884 | 0xE0047630))) ^ 0x555DEAC);
  v21 = sub_193CBCC34(&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18 + 8 * ((83 * (a18 == v20)) ^ v19)) - 4))(v21);
}

uint64_t sub_193C7708C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, unsigned int a18, int a19, unsigned int a20)
{
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = 831981571 * ((2 * (&a17 & 0x4C83ACB0) - &a17 - 1283697848) ^ 0x2ADD836C);
  LODWORD(a17) = 1751760276 - v21;
  a18 = v21 ^ 0x4E459F21;
  a19 = v21 ^ 0x2DC;
  a20 = 1476476408 - v21;
  sub_193C6C298((uint64_t)&a17);
  HIDWORD(a10) = HIDWORD(a17);
  a17 = &STACK[0x667A5DFFEA838F68];
  a18 = (831981571 * ((&a17 - 608407000 - 2 * (&a17 & 0xDBBC7228)) ^ 0x421DA20C)) ^ 0x15E;
  sub_193C8C02C((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 + 8 * ((2991 * (a19 == -1557818287)) ^ 0x20Eu)) - 4))(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
}

uint64_t sub_193C771C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned int a20)
{
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;

  v25 = (((&a17 | 0x5A4DE0F8) - (&a17 & 0x5A4DE0F8)) ^ 0xA8FE1D2F) * v24;
  a18 = a14;
  LODWORD(a17) = (v22 ^ 0x7737BEDF) + ((2 * v22) & 0xEE6F7DBE) - v25 - 85169221;
  LODWORD(a19) = v25 ^ 0x23D;
  sub_193CB9200(&a17);
  v26 = 69008221 * ((&a17 & 0xC5CADCEF | ~(&a17 | 0xC5CADCEF)) ^ 0xE997711A);
  a19 = a14;
  a20 = ((v21 ^ 0x669DFB7E) - 43802944 + ((2 * v21) & 0xCD3BF6FC)) ^ v26;
  HIDWORD(a18) = v26 + 757;
  a17 = v20;
  v27 = sub_193C87DBC(&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v23 + 8 * ((1692 * ((_DWORD)a18 == -1557818287)) ^ 0x344u))
                                          - 12))(v27);
}

uint64_t sub_193C77340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned int a18, unint64_t *a19, unsigned int a20,int a21,unsigned int a22)
{
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;

  v25 = 944348131 * (((&a17 | 0x57A321AD) + (~&a17 | 0xA85CDE52)) ^ 0xF4BA85E2);
  a18 = 424942590 - v25;
  a19 = &STACK[0x59F8E2836308BDC9];
  a20 = (a11 ^ 0xFB5F7FFB) - v25 + 2 * a11 + 1856633215;
  a22 = v25 + v24 + 368399341;
  a17 = a14;
  v26 = sub_193CBD2A0((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v23
                                                      + 8
                                                      * ((61 * (a21 == (v24 ^ 0x393 ^ (v22 + 567) ^ v24 ^ 0x14A))) ^ v24))
                                          - 12))(v26);
}

uint64_t sub_193C77430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11)
{
  uint64_t v11;
  int v12;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11
                                                              + 8
                                                              * ((((v12 ^ 0x376) - 890) * (a11 < 0x52C2D74F)) ^ v12)))(a1, a2, a3);
}

uint64_t sub_193C774C4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, char a6, uint64_t a7, _BYTE *a8, uint64_t a9, char *a10, _BYTE *a11, _BYTE *a12, uint64_t a13)
{
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  void (*v16)(char **);
  int v17;
  char *v18;
  uint64_t v19;

  a10 = &a6 + a1;
  a11 = a8;
  LODWORD(a12) = v17
               - 944348131 * ((&a10 & 0xB3948569 | ~(&a10 | 0xB3948569)) ^ 0xEF72DED8)
               + 636;
  v16(&a10);
  LODWORD(a11) = v14
               + 3804331 * ((&a10 + 1817348999 - 2 * (&a10 & 0x6C528B87)) ^ 0x1287AE71)
               + 164;
  a10 = v18;
  a12 = a8;
  a13 = v13;
  ((void (*)(char **))*(&off_1E31525C0 + (int)(v14 - 909)))(&a10);
  LODWORD(a12) = v14
               - 944348131
               * ((1545691204 - (&a10 | 0x5C216044) + (&a10 | 0xA3DE9FBB)) ^ 0xC73BF5)
               - 78;
  a10 = a4;
  a11 = a8;
  v16(&a10);
  a10 = a8;
  LODWORD(a11) = v14
               - 241568881
               * (((&a10 | 0xB986271D) - &a10 + (&a10 & 0x4679D8E0)) ^ 0x6F97235F)
               - 476;
  v19 = sub_193C9B7D8((uint64_t)&a10);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15 + 8 * ((1960 * (HIDWORD(a11) == -1557818287)) ^ v14))
                                          - ((v14 + 1491547099) & 0x3C7 ^ 0x34CLL)))(v19);
}

uint64_t sub_193C77678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  unsigned int v17;
  int v18;
  uint64_t v19;

  return ((uint64_t (*)(void))(*(_QWORD *)(v19 + 8 * (((a17 == v18) * (v17 + 327)) ^ v17)) - 8))();
}

uint64_t sub_193C776A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  unsigned int v14;
  int v15;
  uint64_t v16;

  return ((uint64_t (*)(void))(*(_QWORD *)(v16 + 8
                                              * ((1420 * (((a14 == v15) ^ (v14 - 92)) & 1)) ^ v14))
                            - 8))();
}

uint64_t sub_193C776D8@<X0>(int a1@<W8>)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  _BOOL4 v5;

  v4 = (v1 - 929) | 0x865;
  v5 = ((uint64_t (*)(_QWORD, uint64_t))*(&off_1E31525C0 + (int)(v4 ^ 0x887)))(a1 ^ v2, 74971987) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)((v5 * (v4 - 1894)) ^ v4)) - (v4 ^ 0x869)))();
}

uint64_t sub_193C77740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  int v14;
  int v15;
  uint64_t v16;
  int v17;

  v17 = (a14 ^ v15) - (((a14 ^ v15) << ((v14 + 29) ^ 0x83)) & (v14 - 990757129)) + 1652106158;
  return (*(uint64_t (**)(void))(v16
                              + 8
                              * ((597
                                * (((2 * v17) & 0xFFF9396E ^ 0xC4F0014C) + (v17 ^ 0x1D85BF19) - 1080559762 != 1066701861)) ^ (v14 - 765))))();
}

uint64_t sub_193C777D8(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5
                                                               + 8
                                                               * (((((2 * (v4 ^ 0x209)) ^ 0x286D18FC) + v4 - 678239326)
                                                                 * ((v2 + v1 - 2147261623) < 8)) ^ v4))
                                                   - 12))(a1, v3);
}

uint64_t sub_193C7783C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;

  return (*(uint64_t (**)(void))(v6 + 8 * (int)(((v3 - a1 < (a3 ^ 0x136uLL)) * (v5 + (a3 ^ (v4 + 998)) + 262)) ^ a3)))();
}

uint64_t sub_193C7787C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  unsigned int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((a5 - 2126) * (v6 < 0x20)) ^ a5))
                            + 3616728600
                            - (a5 ^ (v5 + 2903))))();
}

uint64_t sub_193C778B8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v11 = v8 + v7 + v9;
  v12 = v4 + v11;
  v13 = *(_OWORD *)(v12 - 31);
  v14 = a1 + v11;
  *(_OWORD *)(v14 - 15) = *(_OWORD *)(v12 - 15);
  *(_OWORD *)(v14 - 31) = v13;
  return (*(uint64_t (**)(void))(v10 + 8 * ((((v6 & 0xFFFFFFE0) == 32) * ((v5 + a4 + 749) ^ 0x2D9)) ^ (v5 + a4 + 332))))();
}

void sub_193C77910()
{
  JUMPOUT(0x193C778D0);
}

uint64_t sub_193C7791C(uint64_t a1)
{
  int v1;
  int v2;
  _DWORD *v3;
  _QWORD *v4;
  int v5;
  void (*v7)(unsigned int *);
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  *v4 = a1;
  *v3 = v1;
  v5 = v2 - 858;
  v10 = (v2 - 391) ^ (69008221 * (&v10 ^ 0xD3A2520A));
  v11 = v9;
  v7(&v10);
  v11 = v8;
  v10 = (v5 + 467) ^ (69008221 * ((2 * (&v10 & 0x27084B18) - &v10 - 654854942) ^ 0xB55E6E8));
  v7(&v10);
  return 0;
}

uint64_t sub_193C77BD4(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)&unk_1E314D18C
                                        + 8 * ((46 * (*(_DWORD *)(a2 + 4) != 642350282)) ^ 0x82u)
                                        - 12)
                            - 12))();
}

uint64_t sub_193C77C14()
{
  return 4294925278;
}

uint64_t sub_193C77C1C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = (**(unsigned __int8 **)(a2 + 8) ^ 0xB63DDB3F) + 2 * (**(_BYTE **)(a2 + 8) & 0x3F) + 1575632631;
  return 0;
}

void sub_193C77C58(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20) - 1178560073 * ((-846133519 - (a1 | 0xCD9106F1) + (a1 | 0x326EF90E)) ^ 0xD55BDB66);
  __asm { BR              X10 }
}

void sub_193C77D40()
{
  uint64_t v0;
  int v1;

  *(_DWORD *)(v0 + 16) = v1 + 36;
}

void sub_193C782D0(uint64_t a1)
{
  __asm { BR              X8 }
}

void sub_193C783F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  _BOOL4 v10;

  v10 = ((**(unsigned __int8 **)(v8 + 80) - (*(unsigned __int8 *)(*(_QWORD *)(v6 + 1288) - 1) ^ 0x12)) ^ 0x95FDFFD6)
      + ((2 * (**(unsigned __int8 **)(v8 + 80) - (*(unsigned __int8 *)(*(_QWORD *)(v6 + 1288) - 1) ^ 0x12))) & 0x2BFBFFAC) == -1778516010
     && a6 != 3426238685;
  __asm { BR              X15 }
}

uint64_t sub_193C79618@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  *(_BYTE *)(v2 + (v4 + a1 + 440)) = *(_BYTE *)(a2 + (v4 + a1 + 440));
  return (*(uint64_t (**)(void))(v7 + 8 * ((343 * (a1 - 1 == v3)) ^ (v6 + v5 + 1562))))();
}

void knAHxS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X8 }
}

uint64_t sub_193C796C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14)
{
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  a13 = -1501685844
      - 1224239923
      * (((&a13 | 0x55D41B6E) - &a13 + (&a13 & 0xAA2BE490)) ^ 0xA767E6B9);
  v17 = sub_193CBCC34(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v16 + 8 * ((59 * (a14 != ((v15 + 174) ^ v14))) ^ 0x95u)) - 4))(v17);
}

uint64_t sub_193C79768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  a14 = (v15 + 176) ^ (831981571
                     * (((&a13 | 0x9F5B69C1) - &a13 + (&a13 & 0x60A49638)) ^ 0x6FAB9E5));
  a13 = &STACK[0x667A5DFFEA838F48];
  sub_193C8C02C((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17
                                                                                          + 8
                                                                                          * (((a15 == -1557818287)
                                                                                            * ((((v15 - 164) | 0x260)
                                                                                              + 1809093148) ^ (v16 + 1982))) ^ v15))
                                                                              - 4))(v18, v19, v20, v21, v22);
}

uint64_t sub_193C79828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  void (*v24)(uint64_t *);
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;

  v23 = 1224239923 * (((&a13 | 0x4AD05F07) + (~&a13 | 0xB52FA0F8)) ^ 0xB863A2D1);
  LODWORD(a15) = (v20 - 45) ^ v23;
  a14 = a10;
  LODWORD(a13) = (v19 ^ 0x7E747ABF) - v23 + ((((v20 - 488) | 0x2C) ^ 0xFCE8F5D0) & (2 * v19)) - 206589989;
  v24 = (void (*)(uint64_t *))*(&off_1E31525C0 + v20 - 389);
  v24(&a13);
  v25 = 1224239923 * ((((2 * &a13) | 0x897C0030) - &a13 - 1153302552) ^ 0xB60DFDCF);
  LODWORD(a15) = (v20 - 45) ^ v25;
  a14 = a10;
  LODWORD(a13) = (HIDWORD(v18) ^ 0x7A7D7B9F) + ((2 * HIDWORD(v18)) & 0xF4FAF73E) - v25 - 140071173;
  v24(&a13);
  v26 = 1224239923
      * ((-1195103741 - (&a13 | 0xB8C42A03) + (&a13 | 0x473BD5FC)) ^ 0xB588282B);
  a14 = a10;
  LODWORD(a13) = (v18 ^ 0x77366AFE) + ((2 * v18) & 0xEE6CD5FC) - v26 - 85082212;
  LODWORD(a15) = (v20 - 45) ^ v26;
  v24(&a13);
  v27 = 69008221 * ((&a13 & 0x4950D235 | ~(&a13 | 0x4950D235)) ^ 0x650D7FC0);
  a13 = v16;
  a16 = v27 ^ ((v17 ^ 0x7F6DBEBF) - 460072065 + ((2 * v17) & 0xFEDB7D7E));
  a15 = a10;
  HIDWORD(a14) = v27 + v20 + 139;
  v28 = ((uint64_t (*)(uint64_t *))((char *)*(&off_1E31525C0 + v20 - 464) - 4))(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v22 + 8 * ((2907 * ((_DWORD)a14 == v21)) ^ v20)) - 8))(v28);
}

uint64_t sub_193C79AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, unint64_t *a15, unsigned int a16, int a17, unsigned int a18)
{
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v22 = 944348131
      * (((&a13 | 0x2B611CE7) - &a13 + (&a13 & 0xD49EE318)) ^ 0x8878B8A9);
  a13 = a10;
  a16 = 1779005819 - v22;
  a18 = v22 + v19 + 368399559;
  a15 = &STACK[0x59F8E2836308BDB1];
  a14 = -281055949 - v22;
  v23 = sub_193CBD2A0((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * (((a17 == v20) * (v18 ^ 0x5B5)) ^ v19)) - 8))(v23);
}

uint64_t sub_193C79B64()
{
  void (*v0)(unint64_t **);
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  unint64_t *v7;
  int v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unsigned int v12;

  v12 = v3 - (((&v10 | 0x24D5E72) - (&v10 & 0x24D5E72)) ^ 0xA154FA3C) * v1 + 233;
  v10 = &STACK[0xCB258A928C465B9];
  v11 = v9;
  ((void (*)(unint64_t **))*(&off_1E31525C0 + v3 - 566))(&v10);
  v10 = v9;
  LODWORD(v11) = v3
               - 241568881 * ((&v10 - 1560688319 - 2 * (&v10 & 0xA2F9C941)) ^ 0x74E8CD03)
               - 165;
  sub_193C9B7D8((uint64_t)&v10);
  if (HIDWORD(v11) == v4 + (v3 ^ 0x2C4) - 174)
    v5 = v8;
  else
    v5 = HIDWORD(v11);
  LODWORD(v10) = (v3 + 375) ^ (((&v10 - 636786064 - 2 * (&v10 & 0xDA0B6A70)) ^ 0x9A9387A)
                             * v2);
  v11 = v9;
  v0(&v10);
  LODWORD(v10) = ((v3 ^ 0x2C4) + 819) ^ (((&v10 & 0x8B2451EB | ~(&v10 | 0x8B2451EB)) ^ 0xA779FC1E)
                                       * v2);
  v11 = v7;
  v0(&v10);
  return v5 ^ v4;
}

void sub_193C79D14(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 4) + 1224239923 * ((2 * (a1 & 0x188FD632) - a1 - 412079667) ^ 0x15C3D41A);
  v2 = *(_QWORD *)(a1 + 8);
  v4 = v1
     - 460628867
     * (((&v2 | 0xBC192923) - &v2 + (&v2 & 0x43E6D6D8)) ^ 0xF08FAB5E)
     + 1086;
  sub_193C9B954((uint64_t)&v2);
  __asm { BR              X8 }
}

void sub_193C79E18()
{
  _DWORD *v0;
  int v1;
  uint64_t v2;
  int v3;

  if ((*(_DWORD *)(v2 - 0x2D6CAD6C03423C37) - 1558770208) >= 0x7FFFFFFF)
    v3 = v1;
  else
    v3 = v1 + 2;
  *v0 = v3;
}

uint64_t sub_193C79E84(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  v1 = 2078219279 * (((a1 | 0x62FDDF9E) - (a1 & 0x62FDDF9E)) ^ 0xB80749EA);
  v2 = *(_DWORD *)(a1 + 16) ^ v1;
  v3 = *(_DWORD *)(a1 + 4) + v1;
  if (v3 < 0)
    v3 = -v3;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2D6CAD6C03423C37);
  v6 = v4 - 1558770207;
  v5 = v4 - 1558770207 < 0;
  v7 = 1558770207 - v4;
  if (!v5)
    v7 = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_1E31525C0 + v2 + 47)
                                        + 8 * ((1628 * (v3 >> 5 < v7)) ^ v2)
                                        - 12)
                            - 12))();
}

unsigned int *sub_193C79F38@<X0>(unsigned int *result@<X0>, char a2@<W8>)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;

  v4 = ((*(_DWORD *)(*(_QWORD *)(v2 - 0x2D6CAD6C03423C33) + 4 * v3) ^ 0x2C9E448Au) >> a2) ^ 0xAC84686E;
  v5 = (((2 * v4) & 0x200A30BC) - (v4 & 0x1925985E) - 916397280) ^ v4 & 0x1925985F;
  *result = ((v5 & 0xA8644940 ^ 0x2A000400) + (v5 ^ 0xC164EB6E) - ((v5 ^ 0xC164EB6E) & 0x28644940)) ^ 0x6D38C3D9;
  return result;
}

_DWORD *sub_193C79FEC(_DWORD *result)
{
  *result = -816281897;
  return result;
}

void sub_193C79FFC(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = 2078219279 * (((a1 | 0xB57CE5DD) - a1 + (a1 & 0x4A831A22)) ^ 0x6F8673A9);
  v2 = *(_DWORD *)(a1 + 16) ^ v1;
  v3 = *(_DWORD *)(a1 + 40) - v1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = 268847287
     * (((&v8 ^ 0x65FE17CA) + 646493074 - 2 * ((&v8 ^ 0x65FE17CA) & 0x2688B392)) ^ 0xBCDCB570);
  v11 = ((*(_DWORD *)(a1 + 60) ^ v1 ^ 0xAA15AD8D)
       + 1035992568
       + ((2 * (*(_DWORD *)(a1 + 60) ^ v1)) & 0xE7A7E6F2 ^ 0xA384A4E0)) ^ v7;
  v12 = v2 - v7 - 504207544;
  v14 = v5;
  v15 = v6;
  v13 = v3 + v7 + 1528365927;
  v9 = v4;
  v10 = v6;
  sub_193CBD43C((uint64_t)&v8);
  __asm { BR              X8 }
}

uint64_t sub_193C7A19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned int a12, char a13, int a14, unint64_t *a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;
  int v26;
  uint64_t v27;

  v25 = *(_BYTE *)(v17 + 20) - v23;
  v26 = ((&a11 - 2 * ((unint64_t)&a11 & 0xA26AE277) - 1570053513) ^ 0x5DC0F35F) * v21;
  a15 = &STACK[0x6EA31953C241E6C2];
  a16 = v22;
  a11 = v26 + v19 - 368;
  a12 = ((v24 ^ 0xB7F9A103) + 1071050495 + (v18 & 0xDC7FFFEE ^ 0x900CBDE8)) ^ v26;
  a13 = (v25 ^ 0xDB)
      - ((&a11 - 2 * ((unint64_t)&a11 & 0xA26AE277) + 119) ^ 0x5F) * v21
      + ((2 * v25) & 0xBF ^ (v19 + 6))
      + 108;
  v27 = ((uint64_t (*)(int *))(*(_QWORD *)(v16 + 8 * (v19 - 292)) - 12))(&a11);
  return (*(uint64_t (**)(uint64_t))(v20 + 8 * ((1774 * (a14 == -1557818287)) ^ v19)))(v27);
}

uint64_t sub_193C7A2A8()
{
  int v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((v0 - 238826479 + ((((v1 - 1938368557) & 0x738926FF) + 555) | 0x408u) < 0xFFFFFFFE)
                                * ((v1 - 1938368557) & 0x738926FF ^ 0x11A)) ^ (v1 - 1938368557) & 0x738926FFu)))();
}

uint64_t sub_193C7A300@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  a6 = v8 - 944348131 * ((2 * (&a4 & 0xEA0EEE0) - &a4 + 1902055708) ^ 0xD246B552) - 949;
  a4 = a1;
  a5 = a3;
  v10 = (*(uint64_t (**)(uint64_t *))(v7 + 8 * (v8 - 1748)))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9
                                                      + 8 * (((((v8 - 1286) ^ (a7 == -1557818287)) & 1) == 0) | v8))
                                          - 12))(v10);
}

uint64_t sub_193C7A398@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;

  v7 = a1;
  v6 = (v3 + 479) ^ (69008221
                   * ((((&v6 | 0x7540F08) ^ 0xFFFFFFFE) - (~&v6 | 0xF8ABF0F7)) ^ 0x2B09A2FD));
  result = ((uint64_t (*)(unsigned int *))(*(_QWORD *)(v4 + 8 * (v3 - 503)) - 8))(&v6);
  *(_DWORD *)(v1 + 56) = v2;
  return result;
}

void sub_193C7A478(uint64_t a1)
{
  int v1;
  _BOOL4 v4;

  v4 = *(_QWORD *)(a1 + 8) != 0x592F4E5EA75AA58ELL
    && *(_QWORD *)(a1 + 32) != 0x7104E48B8F7F78DBLL
    && *(_QWORD *)(a1 + 24) != 0x5094C4CA030E4728;
  v1 = *(_DWORD *)(a1 + 16) ^ (69008221 * ((~(_DWORD)a1 & 0xFA1A7A5E | a1 & 0x5E585A1) ^ 0x29B82854));
  __asm { BR              X9 }
}

uint64_t sub_193C7A578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  int v18;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v17
                                                                                         + 8
                                                                                         * ((2547
                                                                                           * (*(_DWORD *)(a17 - 0x592F4E5EA75AA576) == v18 - 1557818489)) ^ v18)))(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_193C7A5C8@<X0>(int a1@<W8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __n128 v18;
  __n128 v19;
  _BOOL4 v20;
  unsigned int v21;
  int v22;
  _BOOL4 v23;
  unsigned int v25;

  v17 = (2 * v14) ^ 0x23C;
  v25 = *(_DWORD *)(a14 - 0x592F4E5EA75AA57ELL) - 2110567698;
  *(_DWORD *)(v16 - 140) = 1460102101 * (*(_DWORD *)(a12 + 40) - a1)
                         - ((-1374763094 * (*(_DWORD *)(a12 + 40) - a1) + 1565959422) & (v17 - 1521219126))
                         + 22371143;
  v18.n128_u64[0] = 0x2424242424242424;
  v18.n128_u64[1] = 0x2424242424242424;
  v19.n128_u64[0] = 0x1212121212121212;
  v19.n128_u64[1] = 0x1212121212121212;
  v20 = v25 < 0xFB70B5CA;
  v21 = ((v17 + 1482293445) & 0xA7A5F777 ^ 0xF5F71B42) + 91855497;
  v22 = v20 ^ (v21 < 0xFB70B5CA);
  v23 = v21 < v25;
  if (!v22)
    v20 = v23;
  return ((uint64_t (*)(__n128, __n128, __n128, __n128, __n128, __n128))(*(_QWORD *)(v15
                                                                                             + 8
                                                                                             * ((v20
                                                                                               * (((v17 - 829327835) & 0x316E82DE)
                                                                                                - 161)) ^ v17))
                                                                                 - 4))(a2, a3, a4, a5, v18, v19);
}

uint64_t sub_193C7A840()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1 + 8 * v0))();
}

uint64_t sub_193C7B604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13)
{
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  _BOOL4 v17;

  *(_BYTE *)(*v16 + (v13 + a6)) = -110;
  v17 = v13 + 4030883 < a13 + 194183699;
  if (a13 > 0xF46CFDEC != v13 + 4030883 < ((v14 - 1584) ^ 0xB9302D9))
    v17 = a13 > 0xF46CFDEC;
  return (*(uint64_t (**)(void))(v15 + 8 * ((415 * !v17) ^ v14)))();
}

uint64_t sub_193C7B680@<X0>(unsigned int a1@<W2>, int a2@<W5>, unsigned int a3@<W8>)
{
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 v12;
  unsigned int v13;
  int v14;
  _BOOL4 v15;

  v12 = a1 > v8;
  *(_BYTE *)(*v11 + (v6 ^ (a2 - 53)) + v3) = 18;
  v13 = v3 + 1 + v4;
  v14 = v12 ^ (v13 < a3);
  v15 = v13 < v7;
  if (!v14)
    v12 = v15;
  return (*(uint64_t (**)(void))(v10 + 8 * ((!v12 * v9) ^ v5)))();
}

void sub_193C7B6D8(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  unsigned int v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;

  *(_QWORD *)(v6 - 0x7104E48B8F7F78DBLL) = *v3;
  *(_DWORD *)(v7 - 0x5094C4CA030E4728) = a3;
  *v3 = 0;
  *(_QWORD *)(v10 - 0x592F4E5EA75AA586) = 0x2E16EEF62E16EEF6;
  *v5 = 2034068188;
  v4 = ((*(_DWORD *)(v10 - 0x592F4E5EA75AA57ALL) & 0x42188B66 ^ 0x42088803)
      + (*(_DWORD *)(v10 - 0x592F4E5EA75AA57ALL) & 0xBDE77498 ^ 0x30472499)
      - 2) ^ 0xD218CAD2;
  *(_DWORD *)(v10 - 0x592F4E5EA75AA57ALL) = (((2 * v4) & 0x8EF1FA58) - v4 + 948372178) ^ 0x98D0649B;
  *v9 = *v8;
}

void sub_193C7B81C(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  char v8;
  int v9;
  int v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = 2078219279 * ((a1 & 0x58BF7D47 | ~(a1 | 0x58BF7D47)) ^ 0x7DBA14CC);
  v2 = *(_DWORD *)(a1 + 60) - v1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 24) + v1;
  v9 = 1091094518;
  v10 = 1558770207;
  v11 = &v20;
  v14 = 0x5CE8F21F4108C838;
  v15 = &v19;
  v16 = 1091094455;
  v17 = 1558770207;
  v18 = &v8;
  v12 = 0x5CE8F21F4108C838;
  v13 = &v21;
  if (v3 | v4)
    v6 = v5 == 965904468;
  else
    v6 = 1;
  v7 = !v6;
  __asm { BR              X9 }
}

uint64_t sub_193C7B96C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v4;

  v4 = *(_QWORD *)(v1 + 16) == 0x6B4820C8468F723ELL || *(_OWORD *)(v1 + 40) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1986 * (((-77 * (a1 ^ 0xC)) ^ v4) & 1)) ^ a1))
                            - 8))();
}

uint64_t sub_193C7B9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *(_QWORD *)(v11 + 32);
  *(_DWORD *)(v9 - 0x6B4820C8468F723ELL) = 0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 + 8 * (((((v8 - 1299) | 0x209) + ((v8 - 284042554) & 0x10EE222F) - 968) * (v13 != 0x2D6CAD6C03423C3BLL)) ^ v8)) - 8))(a1, a2, a3, a4, a5, a6, a7, a8, v10);
}

uint64_t sub_193C7BAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8
                                                                                         + 8
                                                                                         * (((v6
                                                                                            + 1278
                                                                                            + ((v6 - 258) | 0x600)
                                                                                            - 2606)
                                                                                           * (v7 == 0)) ^ (v6 + 1007))))(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_193C7BAE8@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;

  v18 = a1 + 199;
  v19 = ((2 * ((v17 - 144) & 0x174B2458) - (v17 - 144) - 390800474) ^ 0xA42259DB) * v9;
  *(_DWORD *)(v17 - 136) = (v10 + 25388373 + a1 + 199) ^ v19;
  *(_DWORD *)(v17 - 144) = v19 + a1 - 641;
  *(_QWORD *)(v17 - 128) = v14;
  *(_QWORD *)(v17 - 120) = v16;
  v20 = v9;
  ((void (*)(uint64_t))(*(_QWORD *)(v11 + 8 * (a1 ^ 0x7B8)) - 8))(v17 - 144);
  *(_QWORD *)(v17 - 136) = a8;
  *(_QWORD *)(v17 - 128) = v12;
  *(_DWORD *)(v17 - 144) = v18
                         - 1224239923
                         * ((-421827224 - ((v17 - 144) | 0xE6DB6D68) + ((v17 - 144) | 0x19249297)) ^ 0xEB976F40)
                         - 1395;
  ((void (*)(uint64_t))(*(_QWORD *)(v11 + 8 * (v18 - 1787)) - 12))(v17 - 144);
  *(_DWORD *)(v17 - 136) = v18 - (((v17 - 144) & 0x3C09DD3A | ~((v17 - 144) | 0x3C09DD3A)) ^ 0x8F60A0B8) * v20 - 1508;
  *(_QWORD *)(v17 - 112) = a9;
  *(_QWORD *)(v17 - 104) = a8;
  *(_QWORD *)(v17 - 144) = a3;
  *(_QWORD *)(v17 - 128) = a7;
  *(_QWORD *)(v17 - 120) = v12;
  v21 = (*(uint64_t (**)(uint64_t))(v11 + 8 * (v18 ^ 0x7A0)))(v17 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15 + 8 * (v18 ^ (4067 * (v13 != 0))))
                                          - ((v18 - 1858) | 8u)
                                          + 150))(v21);
}

uint64_t sub_193C7BD94()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  _DWORD *v10;

  v6 = 3804331 * ((-1976852128 - ((v5 - 144) | 0x8A2BA160) + ((v5 - 144) | 0x75D45E9F)) ^ 0xB017B69);
  *(_QWORD *)(v5 - 136) = v9;
  *(_QWORD *)(v5 - 120) = v4;
  *(_DWORD *)(v5 - 128) = (v1 - 1357) ^ v6;
  *(_DWORD *)(v5 - 124) = (((v1 - 1892677637) & 0x70CFF23F ^ 0xFBFA78FF) + v2) ^ v6;
  result = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * ((v1 - 1850) ^ 0x27)) - 4))(v5 - 144);
  *v10 = v8;
  *(_DWORD *)(v0 + 56) = -1557818287;
  return result;
}

void sub_193C7BF1C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24) - 69008221 * ((a1 - 1655620505 - 2 * (a1 & 0x9D513C67)) ^ 0x4EF36E6D);
  __asm { BR              X15 }
}

uint64_t sub_193C7C028@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;

  v15 = v13 + a9;
  if (v15 >= 0)
    v16 = v15;
  else
    v16 = -v15;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 + 8 * ((41 * (v16 < 0x83)) ^ v12)) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12);
}

uint64_t sub_193C7C054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_DWORD *a24)
{
  unsigned int v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned __int8 v28;
  BOOL v29;

  v27 = (v25 ^ 0x9B8) - 5;
  *a24 = 748569738;
  v28 = (v25 ^ 0xB8) - 37;
  v29 = v24 <= 0x2599F884 && (int)(v24 + 1516633862 + v27) < 1516636028;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v26 + 8 * ((15 * ((v28 ^ v29) & 1)) ^ v27)) - 4))(a1, 3664119675);
}

void sub_193C7C138()
{
  JUMPOUT(0x193C7C0E0);
}

void sub_193C7C140(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  *(_DWORD *)(a2 + v3) = v2;
}

void jEHf8Xzsv8K(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_193C7CE78@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void))(a1 + 208))();
  return 0;
}

uint64_t sub_193C7CE8C()
{
  return 4294925273;
}

void sub_193C7CE98()
{
  uint64_t v0;
  int v1;

  v0 = MEMORY[0x1E0C80A78]();
  v1 = *(_DWORD *)v0 + 1178560073 * (((v0 | 0x375468D4) - v0 + (v0 & 0xC8AB972B)) ^ 0xD0614ABC);
  __asm { BR              X14 }
}

uint64_t sub_193C7CFFC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  void (*v51)(uint64_t);
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  int v71;
  int v72;
  uint64_t v73;

  v63 = v38;
  v43 = &a34 + v37;
  v69 = &a36 + v37;
  v68 = &a28 + v37;
  v67 = &a24 + v37;
  v66 = &a30 + v37;
  v65 = &a20 + v37;
  v64 = &a22 + v37;
  v44 = &a26 + v37;
  v45 = v36 - 178;
  v46 = a1[1];
  v47 = a1[2];
  v48 = *(_QWORD *)(v47 - 0x3DD47FB64BA505DALL);
  v73 = a1[4];
  v72 = v36 - 1628;
  *(_QWORD *)(v42 - 104) = a2;
  *(_QWORD *)(v42 - 144) = v46;
  *(_QWORD *)(v42 - 136) = &a34 + v37;
  v49 = v46;
  v70 = &a34 + v37;
  *(_DWORD *)(v42 - 112) = v36
                         - 1628
                         - 1224239923 * (((v42 - 144) & 0xB40F1B73 | ~((v42 - 144) | 0xB40F1B73)) ^ 0xB943195B);
  v50 = (v36 - 1441) | 0x12;
  *(_QWORD *)(v42 - 128) = v48;
  *(_QWORD *)(v42 - 120) = v47;
  v51 = (void (*)(uint64_t))(*(_QWORD *)(v39 + 8 * (v36 - 1730)) - 4);
  v51(v42 - 144);
  v71 = 2 * (v42 - 144);
  HIDWORD(a10) = v45;
  *(_DWORD *)(v42 - 120) = v45 + 69008221 * (((v71 | 0x1F8B391E) - (v42 - 144) + 1882874737) ^ 0x5C67CE85) - 571;
  *(_QWORD *)(v42 - 136) = v43;
  *(_QWORD *)(v42 - 128) = v44;
  *(_QWORD *)(v42 - 112) = v47;
  *(_QWORD *)(v42 - 144) = v49;
  ((void (*)(uint64_t))((char *)*(&off_1E31525C0 + (v45 ^ 0x631)) - 4))(v42 - 144);
  *(_QWORD *)(v42 - 104) = v44;
  *(_QWORD *)(v42 - 144) = v49;
  *(_QWORD *)(v42 - 136) = v69;
  v52 = v72 - 1224239923 * ((v42 - 144) ^ 0xF2B3FDD7);
  *(_DWORD *)(v42 - 112) = v52;
  *(_QWORD *)(v42 - 128) = v70;
  *(_QWORD *)(v42 - 120) = v47;
  v51(v42 - 144);
  *(_DWORD *)(v42 - 112) = v72 - 1224239923 * (((v42 - 144) & 0x1E3B4773 | ~((v42 - 144) | 0x1E3B4773)) ^ 0x1377455B);
  *(_QWORD *)(v42 - 144) = v49;
  *(_QWORD *)(v42 - 136) = v68;
  *(_QWORD *)(v42 - 128) = v69;
  *(_QWORD *)(v42 - 120) = v47;
  *(_QWORD *)(v42 - 104) = v44;
  v51(v42 - 144);
  *(_DWORD *)(v42 - 112) = v52;
  *(_QWORD *)(v42 - 128) = v68;
  *(_QWORD *)(v42 - 120) = v47;
  *(_QWORD *)(v42 - 144) = v49;
  *(_QWORD *)(v42 - 136) = v67;
  *(_QWORD *)(v42 - 104) = v44;
  v51(v42 - 144);
  *(_QWORD *)(v42 - 128) = v67;
  *(_QWORD *)(v42 - 120) = v47;
  *(_DWORD *)(v42 - 112) = v72 - 1224239923 * (((v71 | 0x82F8D8E2) - (v42 - 144) - 1098673265) ^ 0xB3CF91A6);
  *(_QWORD *)(v42 - 104) = v44;
  *(_QWORD *)(v42 - 144) = v49;
  *(_QWORD *)(v42 - 136) = v66;
  v51(v42 - 144);
  *(_QWORD *)(v42 - 104) = v44;
  *(_DWORD *)(v42 - 112) = v72
                         - 1224239923
                         * ((-935179766 - ((v42 - 144) | 0xC8424A0A) + ((v42 - 144) | 0x37BDB5F5)) ^ 0xC50E4822);
  *(_QWORD *)(v42 - 144) = v49;
  *(_QWORD *)(v42 - 136) = v65;
  *(_QWORD *)(v42 - 128) = v66;
  *(_QWORD *)(v42 - 120) = v47;
  v51(v42 - 144);
  *(_QWORD *)(v42 - 144) = v49;
  *(_QWORD *)(v42 - 136) = v64;
  *(_DWORD *)(v42 - 112) = v72 - 1224239923 * ((2 * ((v42 - 144) & 0x2DDE4388) - (v42 - 144) - 769541008) ^ 0x209241A7);
  *(_QWORD *)(v42 - 104) = v44;
  *(_QWORD *)(v42 - 128) = v65;
  *(_QWORD *)(v42 - 120) = v47;
  v51(v42 - 144);
  *(_QWORD *)(v42 - 104) = v44;
  *(_DWORD *)(v42 - 112) = v72 - 1224239923 * ((2 * ((v42 - 144) & 0x1C34ACB8) - (v42 - 144) - 473214139) ^ 0x1178AE92);
  *(_QWORD *)(v42 - 128) = v64;
  *(_QWORD *)(v42 - 120) = v47;
  *(_QWORD *)(v42 - 144) = v49;
  *(_QWORD *)(v42 - 136) = v44;
  v51(v42 - 144);
  v53 = *(_QWORD *)(v47 - 0x3DD47FB64BA505E2);
  *(_DWORD *)(v42 - 136) = HIDWORD(a10)
                         + 831981571 * ((2 * ((v42 - 144) & 0x6B321A50) - (v42 - 144) + 349037995) ^ 0x8D6C358F)
                         - 1241;
  *(_QWORD *)(v42 - 128) = v40;
  *(_QWORD *)(v42 - 144) = v53;
  sub_193C6EA8C(v42 - 144);
  *(_QWORD *)(v42 - 136) = v73;
  *(_DWORD *)(v42 - 128) = (HIDWORD(a10) - 496) ^ (944348131
                                                 * (((v71 | 0x97C329E6) - (v42 - 144) + 874408717) ^ 0x68F830BD));
  sub_193CB5200(v42 - 144);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, char *, char *, char *, char *, uint64_t, char *))(*(_QWORD *)(v41 + 8 * ((((*(_DWORD *)(v42 - 144) - 1960555130) > 0x7FFFFFFE) * (v50 ^ (HIDWORD(a10) - 1306))) ^ HIDWORD(a10))) - 8))(v54, v55, v56, v57, v58, v59, v60, v61, v63, v44, v64, v65, v66, v67, v68, a10, v69);
}

uint64_t sub_193C7D4C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);

  v5 = 831981571 * ((-901662899 - ((v4 - 144) | 0xCA41B74D) + ((v4 - 144) | 0x35BE48B2)) ^ 0xAC1F9896);
  *(_DWORD *)(v4 - 136) = v3 - v5 + 450;
  *(_DWORD *)(v4 - 132) = v5 + 2074368201;
  *(_QWORD *)(v4 - 144) = v9;
  v6 = v0;
  sub_193C6E434(v4 - 144);
  *(_QWORD *)(v4 - 104) = v9;
  *(_QWORD *)(v4 - 144) = v6;
  *(_QWORD *)(v4 - 136) = v1;
  *(_QWORD *)(v4 - 128) = v1;
  *(_QWORD *)(v4 - 120) = v2;
  *(_DWORD *)(v4 - 112) = v3
                        - 1224239923
                        * ((((v4 - 144) | 0x52B49109) - (v4 - 144) + ((v4 - 144) & 0xAD4B6EF0)) ^ 0xA0076CDE)
                        - 1389;
  v10(v4 - 144);
  *(_DWORD *)(v4 - 136) = v3
                        + 239
                        + 831981571 * ((2 * ((v4 - 144) & 0x7CFDED98) - (v4 - 144) - 2097016224) ^ 0x1AA3C244)
                        - 1419;
  *(_QWORD *)(v4 - 144) = v1;
  *(_QWORD *)(v4 - 128) = v8;
  return sub_193C6EA8C(v4 - 144);
}

void W85xZa(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X8 }
}

uint64_t sub_193C7E30C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14)
{
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;

  a13 = -1501685844
      - 1224239923 * ((2 * (&a13 & 0x1A708000) - &a13 + 1703903225) ^ 0x973C822E);
  v17 = sub_193CBCC34(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v16 + 8 * ((1080 * (a14 == v14)) ^ v15)) - 8))(v17);
}

uint64_t sub_193C7E390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  a13 = &STACK[0x667A5DFFEA838F58];
  a14 = (831981571
       * ((((&a13 | 0xD33C85CA) ^ 0xFFFFFFFE) - (~&a13 | 0x2CC37A35)) ^ 0xB562AA11)) ^ 0x15E;
  sub_193C8C02C((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16
                                                                                          + 8
                                                                                          * ((7 * (a15 != v15)) ^ 0x3ABu))
                                                                              - 8))(v17, v18, v19, v20, v21);
}

uint64_t sub_193C7E438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  void (*v24)(uint64_t *);
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;

  v23 = 1224239923 * (((&a13 | 0x9C66014C) - (&a13 & 0x9C66014C)) ^ 0x6ED5FC9B);
  a14 = a12;
  LODWORD(a15) = (v21 - 503) ^ v23;
  LODWORD(a13) = (v19 ^ 0xFA242BDF) + ((2 * v19) & 0xF44857BE) - v23 + 2013265595;
  v24 = *(void (**)(uint64_t *))(v20 + 8 * (v21 - 847));
  v24(&a13);
  v25 = 2 * &a13;
  v26 = 1224239923 * (((v25 | 0x666FBE) - &a13 + 2144127009) ^ 0x7280CA08);
  LODWORD(a13) = ((2 * HIDWORD(v18)) & 0xECFE7F3E) - v26 + (HIDWORD(v18) ^ 0x767F3C33 ^ (20 * (v21 ^ 0x41B))) - 73078021;
  a14 = a12;
  LODWORD(a15) = (v21 - 503) ^ v26;
  v24(&a13);
  v27 = 1224239923 * ((1818656281 - (&a13 | 0x6C667E19) + (&a13 | 0x939981E6)) ^ 0x612A7C31);
  LODWORD(a15) = (v21 - 503) ^ v27;
  LODWORD(a13) = (v18 ^ 0x73AEEAFA) + ((2 * v18) & 0xE75DD5F4) - v27 - 25870432;
  a14 = a12;
  v24(&a13);
  a16 = v21 - 1543737703 * (((v25 | 0x52F0CB0E) - &a13 - 695756167) ^ 0x578C35FB) - 919;
  a15 = a12;
  a13 = v17;
  ((void (*)(uint64_t *))(*(_QWORD *)(v20 + 8 * (v21 - 937)) - 4))(&a13);
  v28 = 1224239923 * ((498251580 - (&a13 | 0x1DB2B73C) + (&a13 | 0xE24D48C3)) ^ 0x10FEB514);
  LODWORD(a15) = (v21 - 503) ^ v28;
  a14 = a12;
  LODWORD(a13) = (v16 ^ 0xFE7E3F9B) + ((2 * v16) & 0xFCFC7F36) - v28 + 1940253439;
  v29 = ((uint64_t (*)(uint64_t *))v24)(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v22 + 8 * ((848 * (HIDWORD(a13) == -1557818287)) ^ v21)) - 12))(v29);
}

uint64_t sub_193C7E708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, unint64_t *a15, unsigned int a16, int a17, unsigned int a18)
{
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;

  v21 = 944348131 * (&a13 ^ 0xA319A44E);
  a14 = -431327180 - v21;
  a18 = v21 + v19 + 368399101;
  a16 = 1779005819 - v21;
  a13 = a12;
  a15 = &STACK[0x59F8E2836308BDA9];
  v22 = sub_193CBD2A0((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20 + 8 * ((13 * (a17 == v18)) ^ v19))
                                          - ((v19 + 1129905083) & 0xBCA703BC ^ 0x3A0)))(v22);
}

uint64_t sub_193C7E7C8()
{
  void (*v0)(unint64_t **);
  int v1;
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unsigned int v13;

  v13 = v5 - (((&v11 | 0x8EBA56B1) - (&v11 & 0x8EBA56B1)) ^ 0x2DA3F2FF) * v1 - 225;
  v11 = &STACK[0xCB258A928C465B1];
  v12 = v9;
  (*(void (**)(unint64_t **))(v4 + 8 * (v5 & 0x2F3E023F)))(&v11);
  LODWORD(v12) = v5 - 241568881 * (&v11 ^ 0xD6110442) - 623;
  v11 = v9;
  sub_193C9B7D8((uint64_t)&v11);
  if (HIDWORD(v12) == v3 + (v5 ^ 0x798) - 940)
    v6 = v8;
  else
    v6 = HIDWORD(v12);
  LODWORD(v11) = (v5 - 83) ^ ((((&v11 | 0xEF4E43A) - (&v11 & 0xEF4E43A)) ^ 0xDD56B630) * v2);
  v12 = v9;
  v0(&v11);
  v12 = v10;
  LODWORD(v11) = ((v5 ^ 0x798) + 53) ^ (((2 * (&v11 & 0x5BD7AB0) - &v11 - 96303793) ^ 0x29E0D745)
                                      * v2);
  v0(&v11);
  return v6 ^ v3;
}

void sub_193C7E960(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_193C7E9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t v67;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *))(v67 + 15048))(a1, a2, a3, a4, a5, a6, 3948012400, 2147483652, a9, &a67, a11, &STACK[0x4C318BAC66859871]);
}

uint64_t sub_193C7EB1C()
{
  int v0;
  uint64_t v1;
  int v2;
  char v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((((v2 == 346954895) ^ (v3 + v0 - 30)) & 1) * (v0 - 985)) ^ v0))
                            - 12))();
}

uint64_t sub_193C7EB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  _BOOL4 v26;

  v23 = v19 ^ 0x46C7F90Fu;
  v24 = v22 + v19 + 931;
  v25 = v20 + ((v19 + 402154884) & 0xA13FADE9 ^ 0x32932F8D);
  v26 = a19 - 95316465 < v25;
  if ((a19 - 95316465) < 0x58DCA7ED != v25 < 0x58DCA7ED)
    v26 = v25 < 0x58DCA7ED;
  return ((uint64_t (*)(void))(*(_QWORD *)(v21 + 8 * ((19 * !v26) ^ v24)) - (v23 ^ 0x83C)))();
}

uint64_t sub_193C7EDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8 * (((*(_DWORD *)(v9 + 48 * (v11 + a7) + 36) == v11) * (v7 - 1974)) ^ v7))
                            - (v7 ^ v8)
                            + 1187508535))();
}

uint64_t sub_193C7EE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14, unint64_t a15, uint64_t a16, unint64_t a17)
{
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v21 = 460628867 * ((~((v20 - 160) | 0xE8344132) + ((v20 - 160) & 0xE8344132)) ^ 0x5B5D3CB0);
  STACK[0x2A0] = a17;
  STACK[0x2C0] = a12;
  STACK[0x290] = a14;
  STACK[0x2B8] = a13;
  STACK[0x2B0] = a15;
  *(_DWORD *)(v20 - 152) = v17 + ((v18 + 2006940350) & 0x886089FF ^ 0x5549754C) + v21;
  *(_DWORD *)(v20 - 132) = v18 - v21 + 242;
  v22 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(a5 + 8 * (v18 ^ 0x434)) - 12))(v20 - 160);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19
                                                      + 8
                                                      * ((792 * (*(_DWORD *)(v20 - 136) == v18 - 1557819480)) ^ v18))
                                          - 8))(v22);
}

uint64_t sub_193C7EF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9
                                                                                          + 8
                                                                                          * ((224
                                                                                            * (*(_DWORD *)(v8 + 48 * (v10 + a7)) == 1079485500)) ^ v12))
                                                                              - ((v11 + v12 - 2407) ^ (v11 + 118) ^ 0x8ELL)))(a1, a2, a3, a4, v7);
}

uint64_t sub_193C7EF88(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;

  if ((v4 + 106521493) <= 0x10 && ((1 << (v4 - 107)) & 0x14301) != 0)
    __asm { BR              X10 }
  return a4 ^ 0x5CDACF8Fu;
}

void OlrF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X8 }
}

uint64_t sub_193C7F6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  int v7;
  int v8;
  uint64_t v9;

  *a6 = 0;
  return (*(uint64_t (**)(void))(v9 + 8 * ((v7 + v8 + 822) ^ (214 * (a7 != 0)))))();
}

uint64_t sub_193C7F720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int a19, int a20)
{
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  *a7 = 0;
  v23 = (v21 + v20) | 0xC0;
  v24 = v21 + v20 + 131;
  a19 = v21
      - 1224239923 * ((((2 * &a19) | 0x6BA63674) - &a19 + 1244456134) ^ 0x4760E6ED)
      + 861747287;
  v25 = sub_193CBCC34(&a19);
  return (*(uint64_t (**)(uint64_t))(v22 + 8 * ((77 * (a20 != (v23 ^ 0xA32594B4))) ^ v24)))(v25);
}

uint64_t sub_193C7F7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t *a19, unsigned int a20,int a21)
{
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  a20 = (v21 + 121) ^ (831981571 * ((2 * (&a19 & 0x7F5ACB58) - &a19 + 10826916) ^ 0x9904E480));
  a19 = &STACK[0x667A5DFFEA838F88];
  sub_193C8C02C((uint64_t)&a19);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8 * (int)(((a21 == -1557818287) * (((v21 + 407627418) & 0xE7B41FEF ^ (v22 + 3177)) + ((v21 + 1342177579) | 0x2320DD45))) ^ v21)))(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11);
}

uint64_t sub_193C7F8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned int a22)
{
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  void (*v29)(uint64_t *);
  unsigned int v30;
  void (*v31)(uint64_t *);
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;

  v27 = v26 - 1330;
  v28 = 1224239923
      * (((&a19 | 0xBE766E0) - &a19 + (&a19 & 0xF4189918)) ^ 0xF9549B37);
  a20 = a18;
  LODWORD(a19) = ((((v26 + 1314898550) ^ 0x4E5FCEB7) + 1995777101) ^ v24)
               - v28
               + ((v24 << ((v26 + 118) ^ 0xE4)) & 0xEDEA573E)
               - 80806149;
  LODWORD(a21) = (v26 - 1330) ^ v28;
  v29 = (void (*)(uint64_t *))*(&off_1E31525C0 + (v26 ^ 0x78A));
  v29(&a19);
  v30 = 69008221
      * ((((&a19 | 0xADB9E9AE) ^ 0xFFFFFFFE) - (~&a19 | 0x52461651)) ^ 0x81E4445B);
  a19 = a11;
  HIDWORD(a20) = v26 - 1146 + v30;
  a21 = a18;
  a22 = v30 ^ ((v23 ^ 0xFD11DB3E) + 1726988032 + ((2 * v23) & 0xFA23B67C));
  v31 = (void (*)(uint64_t *))((char *)*(&off_1E31525C0 + (v26 ^ 0x7F5)) - 4);
  v31(&a19);
  v32 = 69008221 * ((&a19 & 0x3D2480C0 | ~(&a19 | 0x3D2480C0)) ^ 0x11792D35);
  a22 = v32 ^ ((v22 ^ 0xEDF3FA7E) + 1980604352 + ((2 * v22) & 0xDBE7F4FC));
  a21 = a18;
  a19 = a12;
  HIDWORD(a20) = v26 - 1146 + v32;
  v31(&a19);
  if (a13)
    v33 = 1914972827;
  else
    v33 = 1914972826;
  v34 = 1224239923
      * ((-1147172700 - (&a19 | 0xBB9F88A4) + (&a19 | 0x4460775B)) ^ 0xB6D38A8C);
  LODWORD(a19) = v33 - v34;
  LODWORD(a21) = v27 ^ v34;
  a20 = a18;
  v29(&a19);
  if (a14)
    v35 = 2054434817;
  else
    v35 = 2054434815;
  v36 = ((a14 != 0) ^ 0xF7AFFA9B) + v35;
  v37 = 1224239923 * (((&a19 | 0xF88F5D09) + (~&a19 | 0x770A2F6)) ^ 0xA3CA0DF);
  LODWORD(a21) = v27 ^ v37;
  a20 = a18;
  LODWORD(a19) = v36 - v37;
  v38 = ((uint64_t (*)(uint64_t *))v29)(&a19);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v25 + 8 * ((3643 * (HIDWORD(a19) == -1557818287)) ^ v26)) - 4))(v38);
}

uint64_t sub_193C7FBD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned int a20,unint64_t *a21,unsigned int a22,int a23,unsigned int a24)
{
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;

  v25 = 944348131 * (((&a19 | 0xB87F9240) - (&a19 & 0xB87F9240)) ^ 0x1B66360E);
  a19 = a18;
  a22 = 1779005819 - v25;
  a24 = v25 + a10 + 368398303;
  a20 = -1631634529 - v25;
  a21 = &STACK[0x59F8E2836308BDC9];
  v26 = sub_193CBD2A0((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24
                                                      + 8
                                                      * (((a23 != -1557818287) * (((a10 - 1677) | 0x20) - 168)) ^ a10))
                                          - ((a10 - 1440) ^ 0x1B6)))(v26);
}

uint64_t sub_193C7FCB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t *a19, unint64_t *a20,unint64_t *a21,unint64_t *a22)
{
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  LODWORD(a19) = v22 - 2078219279 * (&a19 ^ 0xDAFA9674) - 231789224;
  a21 = &STACK[0x11E90ECB0B9030F1];
  a22 = a15;
  a20 = &STACK[0x1EF0C0D0C0C7650E];
  sub_193CBC6B8((uint64_t)&a19);
  a19 = &STACK[0xCB258A928C46695];
  a20 = a15;
  LODWORD(a21) = v22
               - (((&a19 | 0xEA0CB542) - &a19 + (&a19 & 0x15F34AB8)) ^ 0x4915110C)
               * v23
               + 417;
  ((void (*)(unint64_t **))*(&off_1E31525C0 + v22 - 382))(&a19);
  LODWORD(a20) = v22
               - 241568881 * ((2 * (&a19 & 0x7BFE34B0) - &a19 + 67226447) ^ 0xD210CF0D)
               + 19;
  a19 = a15;
  v25 = sub_193C9B7D8((uint64_t)&a19);
  return (*(uint64_t (**)(uint64_t))(v24 + 8 * (((HIDWORD(a20) == -1557818287) * (v22 ^ 0x85E)) ^ v22)))(v25);
}

uint64_t sub_193C7FE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  int v17;
  uint64_t v18;

  return (*(uint64_t (**)(void))(v18 + 8 * ((a17 == (((v17 ^ 0x7E0) + 285) ^ 0xA325933E)) | v17)))();
}

uint64_t sub_193C7FE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v13;
  uint64_t v14;

  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * (v13 ^ (178 * (a13 != 0)))) - ((v13 - 1602) | 0x1A2u) + 422))();
}

uint64_t sub_193C7FE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int v16;
  uint64_t v17;

  return (*(uint64_t (**)(_QWORD))(v17 + 8 * (((a16 != 0) | (16 * (a16 != 0))) ^ (v16 - 780))))(0);
}

uint64_t sub_193C7FEA4@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  uint64_t v11;

  return (*(uint64_t (**)(void))(v11
                              + 8
                              * (int)((((((((a1 + 2008765561) & 0x8844AFCE) - 1934) | 0x1B2) + 64) ^ (((a1 + 2008765561) & 0x8844AFCE) - 85628828) & 0x51A91BF)
                                     * (a11 == -1557818287)) | (a1 + 2008765561) & 0x8844AFCE)))();
}

uint64_t sub_193C7FF14()
{
  unsigned int v0;
  int v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v3 = *(uint64_t (**)(void))(v2
                           + 8
                           * (((((uint64_t (*)(_QWORD, uint64_t))*(&off_1E31525C0 + v1 - 208))((173 * (v1 ^ 0x1B9) - 1557820190) ^ v0, 3209139829) != 0)* ((199 * (v1 ^ 0x1BB)) ^ 0x224)) ^ v1));
  return v3();
}

uint64_t sub_193C7FF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;

  v21 = (a18 ^ 0xA3259451) - (((a18 ^ 0xA3259451) << ((v18 + 83) ^ 0x53)) & 0xBE64E20E) + 1597141255;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 + 8 * ((3797 * (((2 * v21) & 0xCFDFFFAA ^ 0x8E44E20A) + (v21 ^ 0xB8DD8ED2) + 1610087083 != 1206385280)) ^ v18))
                                                                                                - 8))(a1, a2, a3, a4, a5, a6, v19);
}

uint64_t sub_193C8002C()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * ((1066 * (v1 + v0 + (v2 ^ 0x18100679u) > 7)) ^ v2 ^ 0x766)))();
}

uint64_t sub_193C80080(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((217 * ((((v2 + 994) ^ (v1 - a1 < ((4 * v2) ^ 0x4F0uLL))) & 1) == 0)) ^ v2)))();
}

uint64_t sub_193C800C4()
{
  unsigned int v0;
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((v0 < (((v1 | 0x40) + 890402440) & 0xCAED87ED ^ 0x3EC))
                                * ((v2 + (v1 | 0x40) - 1366) ^ (v2 + 28))) ^ (v1 | 0x40))))();
}

uint64_t sub_193C80114(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64_t v12;

  v8.i64[0] = 0x1212121212121212;
  v8.i64[1] = 0x1212121212121212;
  v9 = (v4 + v2);
  v10 = *(int8x16_t *)(v1 + v9 - 15);
  v11 = *(int8x16_t *)(v1 + v9 - 31);
  v12 = a1 + v9;
  *(int8x16_t *)(v12 - 15) = veorq_s8(v10, v8);
  *(int8x16_t *)(v12 - 31) = veorq_s8(v11, v8);
  return (*(uint64_t (**)(void))(v7
                              + 8 * ((904 * ((v5 ^ (v6 - 1374) ^ 0x682) == (v3 & 0xFFFFFFE0))) ^ (v5 - 1931532726))))();
}

uint64_t sub_193C8018C(uint64_t a1, unsigned int a2)
{
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (int)(((((a2 + 1381281619) & 0xADAB4B3E) - 295) * (v2 == v3)) | a2))
                            - (a2 ^ 0x6AELL)))();
}

uint64_t sub_193C801DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  char v5;
  uint64_t v6;

  return (*(uint64_t (**)(uint64_t))(v6
                                            + 8
                                            * (int)((((((a5 - 503234877) & 0x1DFEC5B8) + 474) ^ (a5 + 1254703771) & 0xB536BFFC)
                                                   * ((v5 & 0x18) != 0)) ^ a5)))(a1);
}

uint64_t sub_193C80230(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  *(int8x8_t *)(a1 - 7 + (v7 + v6 + v8 - v9)) = veor_s8(*(int8x8_t *)(v4 - 7 + (v7 + v6 + v8 - v9)), (int8x8_t)0x1212121212121212);
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((11 * (((a4 ^ 0xFFFFFC34) & v5) - v9 != 8)) ^ a4 ^ 0xB))
                            - (((a4 ^ 0xB) + 821276087) & 0xCF0C4FB5 ^ 0x13CLL)))();
}

void sub_193C802B0()
{
  JUMPOUT(0x193C80280);
}

uint64_t sub_193C802B8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return (*(uint64_t (**)(void))(v6 + 8 * (((v5 + 1310 + v5 + 1148 - 2448) * (v4 == a4)) ^ v5)))();
}

uint64_t sub_193C802EC@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;

  *(_BYTE *)(a1 + (a3 + v5)) = (a2 - 94) ^ *(_BYTE *)(v4 + (a3 + v5)) ^ 0x40;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((847 * (a3 - 1 == a4)) ^ a2)) - 8))();
}

uint64_t sub_193C80328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  uint64_t v15;

  *a7 = a1;
  return (*(uint64_t (**)(void))(v15
                              + 8 * ((((((v14 - 1312) | 0x80) + 1469) ^ 0xE42) * (a14 != 0)) ^ ((v14 - 1312) | 0x80))))();
}

uint64_t sub_193C80364()
{
  int v0;
  void (*v1)(unsigned int *);
  int v2;
  int v3;
  int v4;
  int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  *v6 = v3 ^ v2 ^ v8;
  v10 = (v3 - 910) ^ (((((2 * &v10) | 0x226A806C) - &v10 + 1858781130) ^ 0x4297123C) * v4);
  v11 = v7;
  v1(&v10);
  v11 = v9;
  v10 = (v3 - 910) ^ ((((&v10 | 0x1E27B88B) + (~&v10 | 0xE1D84774)) ^ 0xCD85EA80) * v4);
  v1(&v10);
  return v0 ^ 0xA3259451;
}

void bcn5Uck5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  BOOL v7;
  int v9;

  if (a3)
    v7 = a6 == 0;
  else
    v7 = 1;
  v9 = !v7 && a7 != 0;
  __asm { BR              X9 }
}

uint64_t sub_193C804DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6, _QWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int a19, int a20)
{
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  *a7 = 0;
  *a6 = 0;
  a19 = -1501685844 - 1224239923 * ((&a19 & 0x9DA108EB | ~(&a19 | 0x9DA108EB)) ^ 0x90ED0AC3);
  v23 = sub_193CBCC34(&a19);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v22 + 8 * ((3434 * (a20 == v21)) ^ v20)) - 4))(v23);
}

uint64_t sub_193C80570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t *a19, unsigned int a20,int a21)
{
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  a19 = &STACK[0x667A5DFFEA838F70];
  a20 = (831981571 * (((&a19 | 0xBF1AFAB) - (&a19 & 0xBF1AFAB)) ^ 0x92507F8F)) ^ 0x15E;
  sub_193C8C02C((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 + 8 * (((2 * (a21 == v21)) | (16 * (a21 == v21))) ^ 0x442u)) - 4))(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11);
}

uint64_t sub_193C80600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned int a22)
{
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;

  v28 = 1224239923 * ((52118291 - (&a19 | 0x31B4313) + (&a19 | 0xFCE4BCEC)) ^ 0xE57413B);
  a20 = a15;
  LODWORD(a19) = ((2 * v26) & 0xFE6FFD3E) - v28 + (v26 ^ 0xFF37FE9F) + 1928080379;
  LODWORD(a21) = v28 ^ 0x23D;
  sub_193CB9200(&a19);
  v29 = 1224239923 * (&a19 ^ 0xF2B3FDD7);
  a20 = a15;
  LODWORD(a21) = v29 ^ 0x23D;
  LODWORD(a19) = (HIDWORD(v25) ^ 0x7B2EBA9E) - v29 + ((2 * HIDWORD(v25)) & 0xF65D753C) - 151687172;
  sub_193CB9200(&a19);
  v30 = 1224239923 * ((652777243 - (&a19 | 0x26E8971B) + (&a19 | 0xD91768E4)) ^ 0x2BA49533);
  LODWORD(a21) = v30 ^ 0x23D;
  a20 = a15;
  LODWORD(a19) = (v25 ^ 0x7BB62ABA) + ((2 * v25) & 0xF76C5574) - v30 - 160563232;
  sub_193CB9200(&a19);
  a22 = 157 - 1543737703 * (&a19 ^ 0x7EF4507C);
  a19 = v24;
  a21 = a15;
  sub_193C8C160(&a19);
  v31 = 1224239923
      * (((&a19 | 0xD2679487) - &a19 + (&a19 & 0x2D986B78)) ^ 0x20D46950);
  LODWORD(a19) = (v23 ^ 0xFAEEBEBB) + ((2 * v23) & 0xF5DD7D76) - v31 + 1999989727;
  a20 = a15;
  LODWORD(a21) = v31 ^ 0x23D;
  sub_193CB9200(&a19);
  LODWORD(a21) = v29 ^ 0x23D;
  LODWORD(a19) = (v22 ^ 0x7FBC2E9E) + ((2 * v22) & 0x5D3C) - v29 - 228066308;
  a20 = a15;
  v32 = sub_193CB9200(&a19);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v27 + 8 * ((43 * (HIDWORD(a19) != -1557818287)) ^ 0x348u))
                                          - 12))(v32);
}

uint64_t sub_193C80924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int a21,unint64_t *a22,unsigned int a23,int a24,unsigned int a25)
{
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;

  v27 = 944348131
      * (((&a20 | 0x639BF4F6) - &a20 + (&a20 & 0x9C640B08)) ^ 0xC08250B8);
  a22 = &STACK[0x59F8E2836308BDE1];
  a20 = a16;
  a23 = 1779005819 - v27;
  a25 = v27 + a12 + 368399310;
  a21 = 1922238801 - v27;
  v28 = sub_193CBD2A0((uint64_t)&a20);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v26 + 8 * ((1913 * (a24 == v25 + (a12 ^ 0x7C4) - 1191)) ^ a12))
                                          - ((a12 - 935560172) & 0x37C384CA)
                                          + 1078))(v28);
}

uint64_t sub_193C80A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t *a18, unint64_t *a19, unint64_t *a20,unint64_t *a21,unint64_t *a22)
{
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  a19 = &STACK[0x750D723A758CEB56];
  LODWORD(a20) = v23
               + 3804331
               * (((&a19 | 0x4E6ED952) - &a19 + (&a19 & 0xB19126A8)) ^ 0x30BBFCA4)
               - 98;
  a21 = a18;
  a22 = &STACK[0x5594AEEE97C9A8CD];
  ((void (*)(unint64_t **))*(&off_1E31525C0 + (v23 ^ 0x4B3)))(&a19);
  LODWORD(a21) = v23
               - ((((&a19 | 0x412E6398) ^ 0xFFFFFFFE) - (~&a19 | 0xBED19C67)) ^ 0x1DC83829)
               * v22
               - 340;
  a19 = &STACK[0xCB258A928C46691];
  a20 = a18;
  ((void (*)(unint64_t **))*(&off_1E31525C0 + (v23 ^ 0x493)))(&a19);
  LODWORD(a20) = v23
               - 241568881 * ((2 * (&a19 & 0x59A62DB0) - &a19 + 643420749) ^ 0xF048D60F)
               - 738;
  a19 = a18;
  v26 = sub_193C9B7D8((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v25
                                                      + 8
                                                      * (int)(((HIDWORD(a20) == v24)
                                                             * (((v23 + 1264570052) & 0xB4A02FF7) - 548)) ^ v23))
                                          - 4))(v26);
}

uint64_t sub_193C80BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  int v17;
  int v18;
  uint64_t v19;

  return ((uint64_t (*)(void))(*(_QWORD *)(v19
                                        + 8 * (int)((((v17 + 533154643) & 0xE038B3D5 ^ 0x100) * (a17 == v18)) ^ v17))
                            - 4))();
}

uint64_t sub_193C80BE8@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((a8 != v8) * ((a1 - 972) ^ 0x7C3)) ^ a1))
                            - ((a1 - 972) | 0x443u)
                            + 1087))();
}

uint64_t sub_193C80C30()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  _BOOL4 v4;

  v4 = ((uint64_t (*)(_QWORD, uint64_t))*(&off_1E31525C0 + v1 - 869))(v0 ^ (v2 + 496) ^ (v1 - 567), 2235658180) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((v4 * (v1 ^ 0x4A7)) ^ v1)) - 4))();
}

uint64_t sub_193C80C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v18 = (a15 ^ v16) - ((2 * (a15 ^ v16)) & 0xC4F2475C) + 1652106158;
  return ((uint64_t (*)(void))(*(_QWORD *)(v17
                                        + 8
                                        * ((11
                                          * ((((v15 ^ 0x70) + 368) ^ (2 * v18) & 0xFFF9396E ^ 0xC4F0029C)
                                           + (v18 ^ 0x1D85BF19)
                                           - 1080559762 != 1066701861)) | v15))
                            - 8))();
}

uint64_t sub_193C80D1C(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v5
                                                     + 8
                                                     * ((395
                                                       * (v3 + v2 + (((v1 - 79) | 0x40) ^ 0x80036118) >= ((v1 + 3178208) | 0x920110AB) + 1842245149)) ^ v1)))(a1, v4);
}

uint64_t sub_193C80D84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v4
                                                     + 8
                                                     * ((49
                                                       * (v1 - a1 < (unint64_t)((6 * (v3 ^ 0x290)) ^ 0x9231956D)
                                                                  - 2452722123u)) ^ v3)))(a1, v2);
}

uint64_t sub_193C80DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  unsigned int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((v5 + ((a5 - 2112816219) | 0x102091C0) + 16) * (v6 < 0x20)) | a5))
                            - ((a5 - 2036467049) & 0x796201F7 ^ 0x11DLL)))();
}

uint64_t sub_193C80E34(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v10 = v7 + v6 + v8;
  v11 = v2 + v10;
  v12 = *(_OWORD *)(v11 - 31);
  v13 = a1 + v10;
  *(_OWORD *)(v13 - 15) = *(_OWORD *)(v11 - 15);
  *(_OWORD *)(v13 - 31) = v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((166 * ((v4 & 0xFFFFFFE0) != 32)) ^ (v3 + a2 + 356)))
                            - (a2 - v5)
                            + 1475))();
}

void sub_193C80E90()
{
  JUMPOUT(0x193C80E4CLL);
}

uint64_t sub_193C80E9C(uint64_t a1)
{
  __int16 v1;
  int v2;
  void (*v3)(unsigned int *);
  int v4;
  int v5;
  unsigned int v6;
  _WORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v6 = (v2 + 1195245607) & 0xB8C1FF6B;
  *v9 = a1;
  *v8 = v1 ^ 0x9732 ^ (v2 + 39) & 0xFF6B;
  v12 = (v6 + 126) ^ ((((&v12 | 0x52B1F01D) - (&v12 & 0x52B1F01D)) ^ 0x8113A217) * v4);
  v13 = v11;
  v3(&v12);
  v13 = v10;
  v12 = ((v6 ^ 0x721) - 97) ^ ((((&v12 | 0xB3653D75) - (&v12 & 0xB3653D75)) ^ 0x60C76F7F)
                             * v4);
  v3(&v12);
  return v5 ^ 0xA3259451;
}

void MaYVT0G(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  BOOL v7;
  int v9;

  if (a3)
    v7 = a7 == 0;
  else
    v7 = 1;
  v9 = !v7 && a6 != 0;
  __asm { BR              X8 }
}

uint64_t sub_193C81210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  *a6 = 0;
  *a7 = 0;
  a17 = -1501685844
      - 1224239923 * ((&a17 - 626087642 - 2 * ((unint64_t)&a17 & 0xDAAEA926)) ^ 0x281D54F1);
  v20 = sub_193CBCC34(&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19 + 8 * ((497 * (a18 == -1557818287)) ^ v18)) - 4))(v20);
}

uint64_t sub_193C812AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, int a18, int a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  a18 = (831981571 * ((&a17 - 648153285 - 2 * ((unint64_t)&a17 & 0xD95DF73B)) ^ 0x40FC271F)) ^ 0x15E;
  a17 = &STACK[0x667A5DFFEA838F78];
  sub_193C8C02C((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 + 8 * ((1405 * (a19 == -1557818287)) ^ 0x99u)) - 4))(v20, v21, v22, v23, v24, v25, v26, v27, a9);
}

uint64_t sub_193C81350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned int a20)
{
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;

  v27 = ((2 * (&a17 & 0x7F58BA18) - &a17 - 2136521245) ^ 0x7214B834) * v25;
  LODWORD(a19) = v27 ^ 0x23D;
  a18 = a16;
  LODWORD(a17) = (v24 ^ 0x7F6E6BBF) + ((2 * v24) & 0xFEDCD77E) - v27 - 222970149;
  sub_193CB9200(&a17);
  v28 = ((&a17 + 256935690 - 2 * (&a17 & 0xF50870A)) ^ 0xFDE37ADD) * v25;
  LODWORD(a17) = ((2 * HIDWORD(v23)) & 0xF5FCFDBE) - v28 + (HIDWORD(v23) ^ 0x7AFE7EDF) - 148526149;
  LODWORD(a19) = v28 ^ 0x23D;
  a18 = a16;
  sub_193CB9200(&a17);
  v29 = ((184667848 - (&a17 | 0xB01CEC8) + (&a17 | 0xF4FE3137)) ^ 0x64DCCE0) * v25;
  LODWORD(a19) = v29 ^ 0x23D;
  a18 = a16;
  LODWORD(a17) = (v23 ^ 0x7EAC7ABA) + ((2 * v23) & 0xFD58F574) - v29 - 210260000;
  sub_193CB9200(&a17);
  a20 = 157 - 1543737703 * ((&a17 & 0xB1928915 | ~(&a17 | 0xB1928915)) ^ 0x30992696);
  a19 = a16;
  a17 = v22;
  sub_193C8C160(&a17);
  v30 = ((&a17 - 948400106 - 2 * (&a17 & 0xC7789016)) ^ 0x35CB6DC1) * v25;
  a18 = a16;
  LODWORD(a19) = v30 ^ 0x23D;
  LODWORD(a17) = (v21 ^ 0x7F35BAFB) + ((2 * v21) & 0xFE6B75F6) - v30 - 219254881;
  sub_193CB9200(&a17);
  v31 = (((&a17 | 0xC32A0FA5) - (&a17 & 0xC32A0FA5)) ^ 0x3199F272) * v25;
  a18 = a16;
  LODWORD(a17) = (v20 ^ 0xFA2DAAFE) + ((2 * v20) & 0x155FC) - v31 + 2012643228;
  LODWORD(a19) = v31 ^ 0x23D;
  v32 = sub_193CB9200(&a17);
  return (*(uint64_t (**)(uint64_t))(v26 + 8 * ((167 * (HIDWORD(a17) == -1557818287)) ^ 0x13Eu)))(v32);
}

uint64_t sub_193C81694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned int a18, unint64_t *a19, unsigned int a20,int a21,unsigned int a22)
{
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;

  v25 = 944348131 * ((671224997 - (&a17 | 0x280214A5) + (&a17 | 0xD7FDEB5A)) ^ 0x74E44F14);
  a18 = 710390492 - v25;
  a19 = &STACK[0x59F8E2836308BDB9];
  a17 = a16;
  a20 = 1779005819 - v25;
  a22 = v25 + v23 + 368399859;
  v26 = sub_193CBD2A0((uint64_t)&a17);
  return (*(uint64_t (**)(uint64_t))(v24 + 8 * ((1200 * (a21 == (((v23 - 302) | 0x89) ^ (v22 + 119)))) ^ v23)))(v26);
}

uint64_t sub_193C81770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, unint64_t *a18, unint64_t *a19, unint64_t *a20)
{
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;

  v23 = v20 - 203;
  v24 = (v20 + 1878579392) & 0x9007273F;
  a17 = &STACK[0x750D723A758CEB46];
  a19 = a13;
  a20 = &STACK[0x5594AEEE97C9A8BD];
  LODWORD(a18) = v20
               - 203
               + 3804331 * (((&a17 | 0xCD1BCE40) - (&a17 & 0xCD1BCE40)) ^ 0xB3CEEBB6)
               + 978;
  ((void (*)(unint64_t **))*(&off_1E31525C0 + v20 - 298))(&a17);
  a17 = &STACK[0xCB258A928C46681];
  a18 = a13;
  LODWORD(a19) = v23 - ((&a17 & 0x3AED6294 | ~(&a17 | 0x3AED6294)) ^ 0x660B3925) * v21 + 736;
  ((void (*)(unint64_t **))*(&off_1E31525C0 + (v23 ^ 0x47)))(&a17);
  LODWORD(a18) = v23 - 241568881 * (&a17 ^ 0xD6110442) + 338;
  a17 = a13;
  v25 = sub_193C9B7D8((uint64_t)&a17);
  return (*(uint64_t (**)(uint64_t))(v22 + 8 * ((536 * (HIDWORD(a18) == (v24 ^ (v23 - 1557818116)))) ^ v23)))(v25);
}

uint64_t sub_193C818EC()
{
  void (*v1)(unsigned int *);
  int v2;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  if (v7 == 1557843949 || v7 == -1557818287)
    __asm { BR              X10 }
  v10 = v6;
  v9 = ((((&v9 | 0x3B030223) - &v9 + (&v9 & 0xC4FCFDD8)) ^ 0xE8A15029) * v2) ^ 0x3E1;
  v1(&v9);
  v10 = v8;
  v9 = (((&v9 & 0xF64D5265 | ~(&v9 | 0xF64D5265)) ^ 0xDA10FF90) * v2) ^ 0x3E1;
  v1(&v9);
  return v7 ^ 0xA3259451;
}

void sub_193C81E88(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 4) - 3804331 * ((2 * (a1 & 0x5C5A643E) - a1 - 1549427775) ^ 0xDD70BE37);
  v2 = *(_QWORD *)(a1 + 8);
  v4 = v1 - 460628867 * (((&v2 | 0xD5266795) + (~&v2 | 0x2AD9986A)) ^ 0x99B0E5E9) + 1167;
  sub_193C9B954((uint64_t)&v2);
  __asm { BR              X9 }
}

uint64_t sub_193C81FBC@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  _BOOL4 v7;

  v5 = (((v4 + v3) >> 4) & 0xFFFFF76 ^ 0x7EC9D10)
     + (((v4 + v3) >> 5) ^ 0x7C09B133)
     - 1193245121;
  v7 = v5 > 0x38E085F9 && v5 < v1 + 954238458;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((v2 - 111) ^ (1871 * v7)))
                            - ((5 * ((v2 - 111) ^ 0x27Eu) - 443) ^ (2 * ((v2 - 111) ^ 0x3F0u)))))();
}

uint64_t sub_193C82048@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (v2 ^ (13 * ((~v1 & 0x1F) == 0))))
                            - (((v2 ^ 0x659u) + 561) ^ 0x519)))();
}

uint64_t sub_193C82088@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;

  v6 = -948183562 - v1;
  if (*v4 + 588713441 >= 0)
    v6 = v1 - 948183424;
  *v4 = *v4 - 1199300155 + v6;
  **(_DWORD **)(v5 - 0x2D6CAD6C03423C33) = *(_DWORD *)(*(_QWORD *)(v5 - 0x2D6CAD6C03423C33) + 4
                                                                                                * (v1 - 2147483579));
  return (*(uint64_t (**)(void))(a1 + 8 * (((v2 + 2057159923 <= -90323655) * ((v3 ^ 0x12) - 748)) ^ v3)))();
}

void sub_193C82150()
{
  JUMPOUT(0x193C8211CLL);
}

void sub_193C82158()
{
  _DWORD *v0;

  *v0 = 1558770207;
}

void cp2g1b9ro(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  int v3;

  if (a1)
    v2 = a2 == 0;
  else
    v2 = 1;
  v3 = !v2;
  __asm { BR              X8 }
}

uint64_t sub_193C823EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int a15, int a16)
{
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  a15 = -1501685844
      - 1224239923 * (((&a15 | 0x53CD6E12) - (&a15 & 0x53CD6E12)) ^ 0xA17E93C5);
  v19 = sub_193CBCC34(&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v17 + 8 * ((686 * (a16 == v16)) ^ v18)) - 4))(v19);
}

uint64_t sub_193C82474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, unsigned int a16, int a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  a16 = (831981571 * ((((2 * &a15) | 0x99FC5E18) - &a15 - 1291726604) ^ 0xD55FFF28)) ^ 0x15E;
  a15 = &STACK[0x667A5DFFEA838F60];
  sub_193C8C02C((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 + 8 * ((947 * (a17 == ((v17 + 894) ^ 0x39E))) ^ 0x1CEu))
                                                                                                - 4))(v19, v20, v21, v22, v23, v24, v25);
}

uint64_t sub_193C82510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, unsigned int a18)
{
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  a18 = v22 - 1543737703 * (((&a15 | 0x1154C7C0) - (&a15 & 0x1154C7C0)) ^ 0x6FA097BC) - 769;
  a15 = v18;
  a17 = a13;
  v23 = ((uint64_t (*)(uint64_t *))(*(_QWORD *)(v21 + 8 * (int)(v22 - 787)) - 4))(&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19 + 8 * ((1383 * (a16 == v22 + v20 - 398951433)) ^ v22))
                                          - 4))(v23);
}

uint64_t sub_193C825B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, unint64_t *a17, int a18, int a19, int a20)
{
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;

  v23 = 944348131 * ((&a15 - 260015242 - 2 * ((unint64_t)&a15 & 0xF0807B76)) ^ 0x5399DF38);
  a15 = a13;
  a17 = &STACK[0x59F8E2836308BDB1];
  a16 = -1454035842 - v23;
  a18 = 1779005819 - v23;
  a20 = v23 + v22 + 368399251;
  v24 = sub_193CBD2A0((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20
                                                      + 8
                                                      * ((2573
                                                        * (a19 == (((v22 - 604) | 4) ^ ((v22 ^ (v21 + 1800)) - 398951235)))) ^ v22))
                                          - 4))(v24);
}

uint64_t sub_193C82690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, uint64_t a13, uint64_t a14, unint64_t *a15, unint64_t *a16, unsigned int a17)
{
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void (*v21)(unint64_t **);
  uint64_t v22;

  a15 = &STACK[0xCB258A928C46681];
  a16 = a12;
  a17 = v19
      + 525
      - 944348131
      * ((((&a15 | 0xD5B73F58) ^ 0xFFFFFFFE) - (~&a15 | 0x2A48C0A7)) ^ 0x895164E9);
  v21 = *(void (**)(unint64_t **))(v20 + 8 * (v19 ^ 0x172));
  v21(&a15);
  a17 = v19
      + 525
      - 944348131 * ((-791297011 - (&a15 | 0xD0D5C40D) + (&a15 | 0x2F2A3BF2)) ^ 0x8C339FBC);
  a16 = a12;
  a15 = &STACK[0xCB258A928C46669];
  v21(&a15);
  a15 = a12;
  LODWORD(a16) = v19
               - 241568881
               * ((-695974758 - (&a15 | 0xD684449A) + (&a15 | 0x297BBB65)) ^ 0xFF6ABF27)
               + 127;
  v22 = sub_193C9B7D8((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18 + 8 * ((19 * (HIDWORD(a16) == v17)) ^ v19))
                                          - ((v19 + 448792316) | 0xA02D1018)
                                          + 3136100438))(v22);
}

uint64_t sub_193C82810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  uint64_t v12;
  int v13;
  int v14;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * ((1485 * (a12 == (v14 ^ (v13 + 1120)) - 398951433)) ^ v14)) - 4))();
}

uint64_t sub_193C82848()
{
  _QWORD *v0;
  void (*v1)(int *);
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  v4 = (v3 - 16820296) & 0xBBEDBF5B;
  *v0 = v8 ^ 0x19C88C0B ^ v4;
  v9 = (v4 + 1158867847) ^ (69008221
                          * ((&v9 - 2116228362 - 2 * ((unint64_t)&v9 & 0x81DCEAF6)) ^ 0x527EB8FC));
  v10 = v6;
  v1(&v9);
  v10 = v7;
  v9 = (v4 + 1158867847) ^ (69008221 * (&v9 ^ 0xD3A2520A));
  v1(&v9);
  return v2 ^ 0xA3259451;
}

void sub_193C8295C(uint64_t a1)
{
  int v1;

  v1 = 831981571 * ((((2 * a1) | 0xACFEB304) - a1 + 696297086) ^ 0x4FDE89A6);
  __asm { BR              X9 }
}

uint64_t sub_193C829FC@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8 * (((((v2 == 1464328426) ^ v1) & 1) * (v1 ^ 0x45A)) ^ v1))
                            - 4))();
}

uint64_t sub_193C82A54@<X0>(uint64_t a1@<X8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * ((109 * ((((v1 ^ 0x708) - 1906) | 0x772) == 1883)) ^ ((v1 ^ 0x708) - 233)))
                            - 12))();
}

uint64_t sub_193C82B4C@<X0>(int a1@<W4>, int a2@<W6>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  int v5;

  return (*(uint64_t (**)(void))(a3 + 8 * (((v5 ^ v3 ^ a2 ^ ((v5 - 1387) | a1)) * (v4 == 0)) ^ v5)))();
}

uint64_t sub_193C82B7C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (((v2 + 176) * (v1 != 0)) ^ v2)) - 4))();
}

uint64_t sub_193C82BA0@<X0>(uint64_t a1@<X0>, int a2@<W7>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;

  v7 = (v6 ^ (v3 + 466)) + v4;
  v8 = v4 + 1;
  *(_DWORD *)(*(_QWORD *)(v5 - 0x2D6CAD6C03423C33) + 4 * v7) = a2;
  v9 = (v6 + 429) | 0x1B;
  *(_DWORD *)(v5 - 0x2D6CAD6C03423C37) = v8;
  if (v3 + v8 + 1 >= 0)
    v10 = v3 + v8 + 1;
  else
    v10 = ~(v3 + v8);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a3
                                                      + 8
                                                      * (int)((799
                                                             * ((int)((v10 ^ 0x5DF9F3DF)
                                                                    - 17891776
                                                                    + ((v10 << (v9 ^ 0x1A)) & 0xBBF3E7BE)
                                                                    + v3) >= 0)) ^ v9))
                                          - (v9 ^ 0xFFFFFFFFFFFFF9A2)
                                          - ((v9 - 971) | 0x203)))(a1);
}

uint64_t sub_193C82C8C@<X0>(int a1@<W3>, int a2@<W4>, unsigned int a3@<W5>, uint64_t a4@<X8>)
{
  int v4;
  _QWORD *v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(a4 + 8 * (((*(_DWORD *)(*v5 + 4 * a3) != v4) * a1) ^ a2)) - 12))();
}

void sub_193C82CB0()
{
  JUMPOUT(0x193C82C58);
}

uint64_t sub_193C82CC0(uint64_t result)
{
  *(_DWORD *)(result + 24) = -1590153320;
  return result;
}

void sub_193C82D04(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 36) ^ (235795823
                             * ((-2 - ((a1 ^ 0x29040430 | 0x96E8ABCB) + (a1 ^ 0x10C0A082 | 0x69175434))) ^ 0x52961214));
  __asm { BR              X10 }
}

uint64_t sub_193C82E20()
{
  int v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2 + 8 * (v0 ^ (30 * (v1 == 0x4C82E874)))))();
}

uint64_t sub_193C82E74()
{
  unsigned int v0;
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;

  v8 = v0 > 0x3315C04D;
  v9 = (v5 - 1461415967);
  *(_BYTE *)(*(_QWORD *)(v7 - 120) + v9) = *(_BYTE *)(v1 + v9) ^ (97 * ((v5 - 31) & 0xF)) ^ *((_BYTE *)*(&off_1E31525C0 + v2 - 1399)
                                                                                            + (v9 & 0xF)) ^ *((_BYTE *)*(&off_1E31525C0 + (v2 ^ 0x5D8)) + (v9 & 0xF) - 12) ^ *((_BYTE *)*(&off_1E31525C0 + (v2 ^ 0x5F4)) + (v9 & 0xF) - 4) ^ 0x12;
  if (v8 == v5 + 1976487828 < (v2 - 54 + v3))
    v8 = v5 + 1976487828 < v4;
  return (*(uint64_t (**)(void))(v6 + 8 * ((30 * !v8) ^ v2)))();
}

uint64_t sub_193C82F48()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((242
                                          * (((2 * v1) & 0x672DEDE4 ^ (59 * (v0 ^ 0x665)) ^ 0x105C5AD)
                                           + (v1 ^ 0x7F141E86)
                                           - 26249002
                                           + 1274 != (v0 ^ 0x665) + 839283883)) ^ v0))
                            - 12))();
}

uint64_t sub_193C82FC4(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;
  _BOOL4 v5;

  v5 = a3 + a2 + 41 * (v3 ^ 0x52Au) - 865533561 < ((v3 - 1258) ^ 0x13u);
  return (*(uint64_t (**)(void))(v4 + 8 * ((v5 | (2 * v5)) ^ v3)))();
}

uint64_t sub_193C83040(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((a6 + 213) * ((a4 + a7 + 1910) < 0xFFFFFFF0)) ^ a6))
                            - (a6 + 247)
                            + 270))();
}

uint64_t sub_193C83078(uint64_t a1, int a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BOOL4 v20;

  v11 = *(_QWORD *)(v10 - 120);
  v12 = a3 + a2 + ((227 * (v4 ^ 0x110)) ^ (a4 + 1860)) + v11;
  v13 = ((_BYTE)a3 + (_BYTE)a2 + ((-29 * (v4 ^ 0x10)) ^ (a4 + 68))) & 0xF;
  v14 = v13 + v6 - v12;
  v15 = (v13 | v7) - v12;
  v16 = v13 + v8 - v12;
  v20 = (unint64_t)(v5 - v11) > 0xF
     && v14 > 0xF
     && v15 > 0xF
     && v16 >= (unint64_t)(47 * (v4 ^ 0x13Bu)) - 1911;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (v20 ^ v4)) - 8))();
}

uint64_t sub_193C83100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7
                                                                                                  + 8 * (((((v6 ^ 0x21D) - 111) ^ 0xAF) * (v5 > 0xF)) ^ v6))
                                                                                      - 8))(a1, a2, a3, a4, a5, 0);
}

uint64_t sub_193C83134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16x4_t v59;
  int8x16x4_t v60;

  v59.val[1].i64[0] = ((_BYTE)a5 + 11) & 0xF;
  v59.val[1].i64[1] = ((_BYTE)a5 + 10) & 0xF;
  v59.val[2].i64[0] = ((_BYTE)a5 + 9) & 0xF;
  v59.val[2].i64[1] = ((_BYTE)a5 + 8) & 0xF;
  v59.val[3].i64[0] = ((_BYTE)a5 + 7) & 0xF;
  v59.val[3].i64[1] = ((_BYTE)a5 + 6) & 0xF;
  v60.val[0].i64[0] = ((_BYTE)a5 + 5) & 0xF;
  v60.val[0].i64[1] = ((_BYTE)a5 + 4) & 0xF;
  v60.val[1].i64[0] = ((_BYTE)a5 + 3) & 0xF;
  v60.val[1].i64[1] = ((_BYTE)a5 + 2) & 0xF;
  v60.val[2].i64[0] = ((_BYTE)a5 + 1) & 0xF;
  v60.val[2].i64[1] = a5 & 0xF;
  v60.val[3].i64[0] = ((_BYTE)a5 - 1) & 0xF;
  v60.val[3].i64[1] = ((_BYTE)a5 + 14) & 0xF;
  v53.i64[0] = 0xEFEFEFEFEFEFEFEFLL;
  v53.i64[1] = 0xEFEFEFEFEFEFEFEFLL;
  v54.i64[0] = 0x1212121212121212;
  v54.i64[1] = 0x1212121212121212;
  v59.val[0].i64[0] = ((_BYTE)a5 + (_BYTE)v47) & 0xF;
  v59.val[0].i64[1] = ((_BYTE)a5 + 12) & 0xF;
  v55.i64[0] = vqtbl4q_s8(v59, (int8x16_t)xmmword_193EF83A0).u64[0];
  v55.i64[1] = vqtbl4q_s8(v60, (int8x16_t)xmmword_193EF83A0).u64[0];
  v56 = vrev64q_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v46 - 15 + (a5 + v47)), *(int8x16_t *)(v48 + v59.val[0].i64[0] - 15)), veorq_s8(*(int8x16_t *)(v49 + v59.val[0].i64[0] - 15), *(int8x16_t *)(v50 + v59.val[0].i64[0] - 15))));
  v57 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v56, v56, 8uLL), v54), vmulq_s8(v55, v53)));
  *(int8x16_t *)(*(_QWORD *)(v52 - 120) - 15 + (a5 + v47)) = vextq_s8(v57, v57, 8uLL);
  return (*(uint64_t (**)(void))(a46 + 8 * ((2901 * ((a7 ^ 0xB57) - 2091 == (v51 & 0xFFFFFFF0))) ^ a7)))();
}

uint64_t sub_193C832A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((((v7 - 383683294) & 0x16DE87EF ^ 0x51E) * (v6 == a6)) ^ v7))
                            - 137 * (v7 ^ 0x839u)
                            + 266))();
}

uint64_t sub_193C832F8()
{
  unsigned int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (int)(((((v1 + 243) | 0x582) - 1715) * ((v0 >> 3) & 1)) ^ v1)) - 8))();
}

uint64_t sub_193C8332C@<X0>(char a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W5>, int a6@<W8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  char v54;
  uint64_t v55;
  int8x16x4_t v57;

  *(_DWORD *)(v50 - 152) = v49;
  *(_DWORD *)(v50 - 160) = v48;
  v51 = v48 & 0xFFFFFFF8;
  *(_QWORD *)(v50 - 136) = *(_QWORD *)(v50 - 120) - 7;
  *(_QWORD *)(v50 - 128) = v44 - 7;
  *(_DWORD *)(v50 - 168) = v51;
  *(_DWORD *)(v50 - 144) = 8 - v51;
  v52 = -a5;
  v53 = a3 + a2;
  v54 = v53 + a1;
  v55 = (a4 + v53 + 1926 + v52);
  v57.val[0].i64[0] = ((_BYTE)a4 + (_BYTE)v53 - 122 + (_BYTE)v52) & 0xF;
  v57.val[0].i64[1] = (v54 + (_BYTE)v52 + (a6 ^ 0xDD)) & 0xF;
  v57.val[1].i64[0] = (v54 + 5 + (_BYTE)v52) & 0xF;
  v57.val[1].i64[1] = (v54 + 4 + (_BYTE)v52) & 0xF;
  v57.val[2].i64[0] = (v54 + 3 + (_BYTE)v52) & 0xF;
  v57.val[2].i64[1] = (v54 + 2 + (_BYTE)v52) & 0xF;
  v57.val[3].i64[0] = (v54 + 1 + (_BYTE)v52) & 0xF;
  v57.val[3].i64[1] = (v54 + (_BYTE)v52) & 0xF;
  *(int8x8_t *)(*(_QWORD *)(v50 - 136) + v55) = vrev64_s8(veor_s8(veor_s8(vrev64_s8(veor_s8(veor_s8(*(int8x8_t *)(*(_QWORD *)(v50 - 128) + v55), *(int8x8_t *)(v45 + (v55 & 0xF) - 7)), veor_s8(*(int8x8_t *)(v46 + (v55 & 0xF) - 7), *(int8x8_t *)(v47 + (v55 & 0xF) - 7)))), (int8x8_t)0x1212121212121212), vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v57, (int8x16_t)xmmword_193EF83B0), (int8x8_t)0xEFEFEFEFEFEFEFEFLL)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a44 + 8 * ((59 * (*(_DWORD *)(v50 - 144) == v52)) ^ a6)) - 4))((__n128)xmmword_193EF83B0);
}

void sub_193C8348C()
{
  JUMPOUT(0x193C833ACLL);
}

uint64_t sub_193C83494(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((a3 + 71 + ((a3 - 2014397719) & 0x78114797) - 3129)
                                * (*(_DWORD *)(v4 - 160) == *(_DWORD *)(v4 - 168))) ^ a3)))();
}

uint64_t sub_193C834E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = (a8 + v10);
  *(_BYTE *)(*(_QWORD *)(v16 - 120) + v17) = *(_BYTE *)(v8 + v17) ^ *(_BYTE *)(v11 + (v17 & 0xF)) ^ *(_BYTE *)(v12 + (v17 & 0xF)) ^ *(_BYTE *)(v13 + (v17 & 0xF)) ^ -(v17 & 0xF | (16 * (v17 & 0xF))) ^ 0x12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * ((2074 * (a8 - 1 == v9 + 1285)) ^ (v14 - 1681)))
                            - ((v14 - 427204634) & 0x19769DDF ^ 0x549)))();
}

uint64_t sub_193C8356C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  char v43;

  v41 = *(_QWORD *)(v37 + 24);
  *(int8x16_t *)(v40 - 112) = veorq_s8(*(int8x16_t *)*(_QWORD *)(v37 + 40), (int8x16_t)xmmword_193EF83D0);
  if (*(_QWORD *)(v40 - 120))
    v42 = v41 == 0x2FF5F3CC565B97FLL;
  else
    v42 = 1;
  v43 = v42;
  HIDWORD(a12) = 2 * v39;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 + 8 * (int)((190 * (((a7 + 82) ^ v43) & 1)) ^ a7)) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37);
}

uint64_t sub_193C835F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  _BOOL4 v42;

  v39 = (HIDWORD(a12) & 0x5DF37FF4) + (v38 ^ 0xAEF9BFFA);
  v40 = (2 * ((_DWORD)a7 + 109)) ^ 0x8D2u;
  v42 = ((v39 + (_DWORD)a7 - 1202 - 149) & ((_DWORD)v40 - 919)) != 0 || v39 == -1359364102;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 8 * ((901 * v42) ^ ((int)a7 + 109))))(a1, a2, a3, v40, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37);
}

uint64_t sub_193C83660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,int a48)
{
  uint64_t v48;

  return (*(uint64_t (**)(void))(v48
                              + 8
                              * (a48 ^ (1532
                                      * ((((a11 - (a14 & 0x9D58ADDC) + 2132874747) << (((a48 + 103) | 0x85) + 122)) & 0xCEC6EFD0 ^ 0x8C40ADD0)
                                       + ((a11 - (a14 & 0x9D58ADDC) + 2132874747) ^ 0xA9CF2106)
                                       - 16936021 != 1717635987)))))();
}

uint64_t sub_193C8372C()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((3698 * (v2 + v1 + ((v0 + 175) ^ 0x989C8F9F) > 7)) ^ v0))
                            - ((v0 + 1897570007) & 0x8EE55BF7)
                            + 415))();
}

uint64_t sub_193C837BC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  char v8;
  uint64_t v9;
  _BOOL4 v11;

  v11 = (a8 + a1) < 0x10 && ((((3 * (a6 ^ 0x95)) ^ 1) + v8) & 0xFu) >= ((a8 + a1) & 0xFu);
  return (*(uint64_t (**)(void))(v9 + 8 * ((v11 * (a6 ^ 0x5A1)) ^ a6)))();
}

uint64_t sub_193C8380C(int a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL4 v23;
  int v26;

  v11 = (v8 + v7 + a1);
  v12 = *(_QWORD *)(v10 - 120);
  v13 = v11 + v12 + 1;
  v14 = ((_BYTE)v7 + 7) & 0xF;
  v15 = v14 - v11;
  v16 = v6 + v15;
  v17 = v14 + v6 + 1;
  v18 = v15 + v4 + ((a4 - 1562664647) & 0x5D245BFB) - 969;
  v19 = v14 + v4 + 3;
  v20 = v15 + v5 + 4;
  v21 = v14 + v5 + 5;
  v23 = v17 > v12 && v16 < v13;
  if (v19 > v12 && v18 < v13)
    v23 = 1;
  v26 = v21 > v12 && v20 < v13 || v23;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((78 * v26) ^ a4)) - 8))();
}

uint64_t sub_193C838B8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((((((a8 - 972536790) & 0x39F7BFEE) - 1554) ^ (a8 - 491)) * (a3 > 0xF)) ^ a8))
                            - 4))();
}

uint64_t sub_193C838FC(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int8x16_t v52;
  uint64_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16x4_t v57;
  int8x16x4_t v58;

  *(_DWORD *)(v51 - 136) = v49 + 13;
  *(_DWORD *)(v51 - 144) = v49 + 12;
  v57.val[1].i64[0] = ((_BYTE)v49 + 5) & 0xF;
  v57.val[1].i64[1] = ((_BYTE)v49 + 4) & 0xF;
  v57.val[2].i64[0] = ((_BYTE)v49 + 3) & 0xF;
  v57.val[2].i64[1] = ((_BYTE)v49 + 2) & 0xF;
  v57.val[3].i64[0] = ((_BYTE)v49 + 1) & 0xF;
  v57.val[3].i64[1] = v49 & 0xF;
  v52.i64[0] = 0x7777777777777777;
  v52.i64[1] = 0x7777777777777777;
  v53 = a1 + v50 + v49 - 155 + ((a5 + 522684607) & 0xE0D875FB);
  v57.val[0].i64[0] = ((_BYTE)a1 + (_BYTE)v50 + (_BYTE)v49 + 101 + (((_BYTE)a5 - 65) & 0xFB)) & 0xF;
  v57.val[0].i64[1] = ((_BYTE)v49 + 6) & 0xF;
  v54.i64[0] = vqtbl4q_s8(v57, (int8x16_t)xmmword_193EF83A0).u64[0];
  v58.val[0].i64[1] = ((_BYTE)v49 + 14) & 0xF;
  v58.val[1].i64[1] = *(_DWORD *)(v51 - 144) & 0xF;
  v58.val[2].i64[1] = ((_BYTE)v49 + 10) & 0xF;
  v58.val[3].i64[1] = ((_BYTE)v49 + 8) & 0xF;
  v58.val[0].i64[0] = ((_BYTE)v49 - 1) & 0xF;
  v58.val[1].i64[0] = *(_DWORD *)(v51 - 136) & 0xF;
  v58.val[2].i64[0] = ((_BYTE)v49 + 11) & 0xF;
  v58.val[3].i64[0] = (v49 + 9) & 0xF;
  v54.i64[1] = vqtbl4q_s8(v58, (int8x16_t)xmmword_193EF83A0).u64[0];
  v55 = vrev64q_s8(vmulq_s8(v54, v52));
  *(int8x16_t *)(*(_QWORD *)(v51 - 120) - 15 + v53) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v48 + (v53 & 0xF) - 15), *(int8x16_t *)(*(_QWORD *)(v51 - 120) - 15 + v53)), veorq_s8(*(int8x16_t *)((v53 & 0xF) + v46 - 13), *(int8x16_t *)((v53 & 0xF) + v47 - 11))), vextq_s8(v55, v55, 8uLL));
  return (*(uint64_t (**)(void))(a46 + 8 * ((1877 * ((a3 & 0xFFFFFFF0) == 16)) ^ a5)))();
}

void sub_193C83A78()
{
  JUMPOUT(0x193C83A08);
}

uint64_t sub_193C83A84@<X0>(int a1@<W3>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  int v47;
  unsigned __int8 v48;
  int v49;
  int v50;
  char *v51;
  char *v52;
  char v53;
  int v54;
  int v55;
  unsigned __int8 v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  unsigned __int8 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  char *v130;
  int v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  int v144;
  int v145;
  unsigned int v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  int v178;
  int v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  int v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  char *v189;
  uint64_t v190;
  int v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  int v196;
  char *v197;
  char *v198;
  char *v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;

  v43 = *(unsigned __int8 *)(v40 - 0x2FF5F3CC565B97ELL) ^ 0x85;
  *(_DWORD *)(v42 - 136) = a2;
  v44 = (uint64_t)*(&off_1E31525C0 + a1 - 927);
  LODWORD(v43) = *(unsigned __int8 *)(v44 + v43);
  HIDWORD(v45) = v43 ^ 0xF;
  LODWORD(v45) = (_DWORD)v43 << 24;
  LODWORD(v43) = (v45 >> 30) ^ 0x9F;
  v46 = (char *)*(&off_1E31525C0 + (a1 ^ 0x342)) - 8;
  v47 = v46[*(unsigned __int8 *)(v40 - 0x2FF5F3CC565B974) ^ 0xBFLL];
  HIDWORD(v45) = v47 ^ 9;
  LODWORD(v45) = v47 << 24;
  v48 = v45 >> 28;
  v49 = *(unsigned __int8 *)(v44 + (*(unsigned __int8 *)(v40 - 0x2FF5F3CC565B97ALL) ^ 0x6FLL));
  v50 = (_DWORD)v43 << ((a1 ^ 0x21) - 119);
  HIDWORD(v45) = v49 ^ 0xF;
  LODWORD(v45) = v49 << 24;
  v51 = (char *)*(&off_1E31525C0 + a1 - 856) - 4;
  LODWORD(v43) = v48 | ((v51[*(unsigned __int8 *)(v40 - 0x2FF5F3CC565B975) ^ 0xB7] ^ 0x97) << 8);
  v52 = (char *)*(&off_1E31525C0 + (a1 ^ 0x348)) - 8;
  v53 = v52[*(unsigned __int8 *)(v40 - 0x2FF5F3CC565B973) ^ 0xD8];
  v54 = (((v45 >> 30) ^ 0x68) << 16) | ((v51[*(unsigned __int8 *)(v40
                                                                                                  - 0x2FF5F3CC565B979) ^ 0xDFLL] ^ 0xB6) << 8);
  v55 = v46[*(unsigned __int8 *)(v40 - 0x2FF5F3CC565B970) ^ 0xBCLL];
  HIDWORD(v45) = v55 ^ 9;
  LODWORD(v45) = v55 << 24;
  v56 = v45 >> 28;
  v57 = v56 ^ 0x68;
  v58 = v46[*(unsigned __int8 *)(v40 - 0x2FF5F3CC565B978) ^ 0x98];
  HIDWORD(v45) = v58 ^ 9;
  LODWORD(v45) = v58 << 24;
  v59 = v54 & 0xFFFFFF00 | ((v52[*(unsigned __int8 *)(v40 - 0x2FF5F3CC565B97BLL) ^ 0xAFLL] ^ 0xB8) << 24) | (v45 >> 28);
  v60 = v50 | ((v51[*(unsigned __int8 *)(v40 - 0x2FF5F3CC565B97DLL) ^ 0x49] ^ 0x3C) << 8) | ((v52[*v41 ^ 0xFELL] ^ 0x61) << 24);
  LODWORD(v46) = v46[*(unsigned __int8 *)(v40 - 0x2FF5F3CC565B97CLL) ^ 0xD0];
  HIDWORD(v45) = v46 ^ 9;
  LODWORD(v45) = (_DWORD)v46 << 24;
  v61 = *(unsigned __int8 *)(v44 + (*(unsigned __int8 *)(v40 - 0x2FF5F3CC565B972) ^ 0xB6));
  LOBYTE(v46) = (v45 >> 28) ^ 0x3C;
  HIDWORD(v45) = v61 ^ 0xF;
  LODWORD(v45) = v61 << 24;
  v62 = v60 | v46;
  v63 = (v45 >> 30) ^ 0x21;
  LODWORD(v44) = *(unsigned __int8 *)(v44 + (*(unsigned __int8 *)(v40 - 0x2FF5F3CC565B976) ^ 0xC8));
  HIDWORD(v45) = v44 ^ 0xF;
  LODWORD(v45) = (_DWORD)v44 << 24;
  v64 = (((v51[*(unsigned __int8 *)(v40 - 0x2FF5F3CC565B971) ^ 0xC7] ^ 0x77) << 8) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)(v53 ^ 0x68u) << 24) | (v63 << 16) | v57) ^ 0x75F49EF4;
  v65 = ((unsigned __int16)((((v51[*(unsigned __int8 *)(v40 - 0x2FF5F3CC565B971) ^ 0xC7] ^ 0x77) << 8) | v57) ^ 0x9EF4) >> 8);
  v66 = v43 & 0xFF00FFFF | (((v45 >> 30) ^ 0x37) << 16) | ((v52[*(unsigned __int8 *)(v40 - 0x2FF5F3CC565B977) ^ 0x18] ^ 0x27) << 24);
  v67 = (uint64_t)*(&off_1E31525C0 + a1 - 732);
  LODWORD(v43) = *(_DWORD *)(v67 + 4 * (v53 ^ 0x77u));
  HIDWORD(v45) = ~(_DWORD)v43;
  LODWORD(v45) = v43 ^ 0xE1F40DE4;
  v68 = (uint64_t)*(&off_1E31525C0 + a1 - 693);
  v69 = (char *)*(&off_1E31525C0 + (a1 ^ 0x38C)) - 12;
  LODWORD(v57) = (v65 - ((2 * (v64 >> 8)) & 0x78) - 2114711236) ^ *(_DWORD *)(v68 + 4 * (v65 ^ 0xF5));
  LODWORD(v43) = (v45 >> 2) ^ *(_DWORD *)&v69[4 * (v63 ^ 0xDD)] ^ (v57
                                                                               - 1408562872
                                                                               + (~(2 * v57) | 0xA7E9ED6F)
                                                                               + 1);
  v70 = (char *)*(&off_1E31525C0 + a1 - 855) - 4;
  v238 = v62;
  v71 = *(_DWORD *)&v70[4 * (v56 ^ 0xD9)] ^ v62 ^ (v43 - ((2 * v43) & 0x4147298E) + 547591367);
  v72 = v59;
  LODWORD(v63) = v71 ^ v59;
  v236 = v66;
  v234 = v71 ^ v59 ^ 0x2789BBD4;
  v73 = v66 ^ 0xE6 ^ v234;
  v74 = *(_DWORD *)(v67 + 4 * (((v73 ^ v64) >> 24) ^ 0x21));
  HIDWORD(v45) = ~v74;
  LODWORD(v45) = v74 ^ 0xE1F40DE4;
  v75 = ((v45 >> 2) - ((2 * (v45 >> 2)) & 0x4147298E) + 547591367) ^ *(_DWORD *)&v70[4
                                                                                   * ((v73 ^ v64) ^ 0xDE)];
  HIDWORD(v232) = v73 ^ v64;
  v235 = v71;
  LODWORD(v232) = *(_DWORD *)(v68 + 4 * (((unsigned __int16)(v73 ^ v64) >> 8) ^ 0x1Eu)) ^ *(_DWORD *)&v69[4 * (((v73 ^ v64) >> 16) ^ 0x8F)] ^ v71 ^ ((((unsigned __int16)(v73 ^ v64) >> 8) ^ 0xEB) - ((2 * (((v73 ^ v64) >> 8) ^ 0x4BA6EB)) & 0x78) - 2114711236) ^ (v75 - ((2 * v75) & 0x58161290) - 1408562872);
  v76 = v232 ^ 0x76E748E2 ^ v63;
  v237 = v64;
  LODWORD(v63) = *(_DWORD *)(v67 + 4 * (((v76 ^ v64) >> 24) ^ 0xA2));
  HIDWORD(v45) = ~(_DWORD)v63;
  LODWORD(v45) = v63 ^ 0xE1F40DE4;
  v77 = v76 ^ v64 ^ 0xC84590C6;
  LODWORD(v63) = *(_DWORD *)(v68 + 4 * (BYTE1(v77) ^ 0xF5u)) ^ *(_DWORD *)&v69[4
                                                                               * (((v76 ^ v64) >> 16) ^ 0x6C)] ^ (BYTE1(v77) - ((v77 >> 7) & 0x78) - 2114711236) ^ ((v45 >> 2) - ((2 * (v45 >> 2)) & 0x58161290) - 1408562872);
  HIDWORD(v230) = v232 ^ 0x76E748E2 ^ *(_DWORD *)&v70[4 * ((v76 ^ v64) ^ 0x83)] ^ (v63
                                                                                                  - ((2 * v63) & 0x4147298E)
                                                                                                  + 547591367);
  LODWORD(v231) = v76 ^ v64;
  LODWORD(v63) = HIDWORD(v230) ^ 0x2789BBD4 ^ v76 ^ 0x8EDEEA78;
  v233 = v73;
  HIDWORD(v231) = v76;
  HIDWORD(v229) = v76 ^ v73;
  LODWORD(v230) = HIDWORD(v230) ^ 0x2789BBD4 ^ v76;
  v78 = v63 ^ v76 ^ v73;
  v79 = *(_DWORD *)(v67 + 4 * (((v78 ^ v77) >> 24) ^ 0x67));
  HIDWORD(v45) = ~v79;
  LODWORD(v45) = v79 ^ 0xE1F40DE4;
  v80 = (v45 >> 2) ^ *(_DWORD *)(v68 + 4 * (((unsigned __int16)(v78 ^ v77) >> 8) ^ 0x97u)) ^ ((((unsigned __int16)(v78 ^ v77) >> 8) ^ 0x62) - ((2 * (((v78 ^ v77) >> 8) ^ 0xD8B62)) & 0x78) - 2114711236);
  v81 = (v80 - ((2 * v80) & 0x4147298E) + 547591367) ^ *(_DWORD *)&v70[4 * ((v78 ^ v77) ^ 0xE1)];
  v82 = HIDWORD(v230) ^ 0x2789BBD4 ^ *(_DWORD *)&v69[4 * (((v78 ^ v77 ^ 0x2142BA5) >> 16) ^ 0xB6)] ^ (v81 - ((2 * v81) & 0x58161290) - 1408562872);
  v83 = v82 ^ v63;
  HIDWORD(v228) = v78 ^ v77;
  LODWORD(v229) = v78;
  LODWORD(v63) = v82 ^ v63 ^ 0x307C325C;
  LODWORD(v227) = v63 ^ v78 ^ 0x5EF1BA37;
  LODWORD(v43) = *(_DWORD *)(v67 + 4 * (((v227 ^ v78 ^ v77) >> 24) ^ 0xA4));
  HIDWORD(v45) = ~(_DWORD)v43;
  LODWORD(v45) = v43 ^ 0xE1F40DE4;
  LODWORD(v43) = ((v45 >> 2) - ((2 * (v45 >> 2)) & 0x4147298E) + 547591367) ^ *(_DWORD *)&v70[4
                                                                                            * ((v227 ^ v78 ^ v77) ^ 0x18)];
  v84 = v227 ^ v78 ^ v77 ^ 0xCEE37B5D;
  HIDWORD(v226) = v227 ^ v78 ^ v77;
  HIDWORD(v227) = v83;
  LODWORD(v228) = v82;
  LODWORD(v64) = *(_DWORD *)&v69[4 * (BYTE6(v226) ^ 0xCA)] ^ *(_DWORD *)(v68 + 4 * (BYTE1(v84) ^ 0xF5u)) ^ v82 ^ (BYTE1(v84) - ((v84 >> 7) & 0x78) - 2114711236) ^ 0x61A6531A ^ (v43 - ((2 * v43) & 0x58161290) - 1408562872);
  v85 = v64 ^ ((v78 ^ 0x5EF1BA37) - ((2 * (v78 ^ 0x5EF1BA37)) & 0xC34CA634) + 1638290202);
  v86 = *(_DWORD *)(v67 + 4 * (((v85 ^ v84) >> 24) ^ 0x70));
  HIDWORD(v45) = ~v86;
  LODWORD(v45) = v86 ^ 0xE1F40DE4;
  LODWORD(v63) = v63 - 2 * (v63 & 0x61A6531B ^ v83 & 1);
  v87 = ((v45 >> 2) - ((2 * (v45 >> 2)) & 0x58161290) - 1408562872) ^ *(_DWORD *)&v69[4
                                                                                    * (((v85 ^ v84 ^ 0xF3443494) >> 16) ^ 0xE4)];
  v88 = (v87 - ((2 * v87) & 0x4147298E) + 547591367) ^ *(_DWORD *)&v70[4 * ((v85 ^ v84) ^ 0x91)];
  LODWORD(v225) = v85 ^ v84;
  v89 = ((unsigned __int16)(v85 ^ v84 ^ 0xBBD4) >> 8);
  v90 = (v88 - ((2 * v88) & 0x3E82278) - 2114711236) ^ *(_DWORD *)(v68 + 4 * (v89 ^ 0xF5u));
  v91 = v64 ^ v89 ^ (v90 - ((2 * v90) & 0xC34CA634) + 1638290202);
  HIDWORD(v225) = v85;
  LODWORD(v226) = v64;
  LODWORD(v224) = v64 ^ (v63 + 1638290202);
  HIDWORD(v223) = v91 ^ v224;
  LODWORD(v63) = v91 ^ v224 ^ 0xE6F58988;
  v92 = v63 ^ v85;
  v93 = v63 ^ v85 ^ v225 ^ 0x1A89BBD4;
  v94 = *(_DWORD *)(v67 + 4 * (HIBYTE(v93) ^ 0x43));
  HIDWORD(v45) = ~v94;
  LODWORD(v45) = v94 ^ 0xE1F40DE4;
  *(_QWORD *)((char *)&v223 + 4) = __PAIR64__(v63 ^ v85, v93);
  v95 = *(_DWORD *)(v68 + 4 * (((unsigned __int16)(v93 ^ 0x7ABE) >> 8) ^ 0xF5u)) ^ *(_DWORD *)&v69[4 * (((v93 ^ 0x4D501F31) >> 16) ^ 0xE2)] ^ (((unsigned __int16)(v93 ^ 0x7ABE) >> 8) - (((v93 ^ 0x299B7ABE) >> 7) & 0x78) - 2114711236) ^ ((v45 >> 2) - ((2 * (v45 >> 2)) & 0x58161290) - 1408562872);
  HIDWORD(v224) = v91;
  v96 = v91 ^ *(_DWORD *)&v70[4 * (v93 ^ 0xFB)] ^ (v95 - ((2 * v95) & 0x4147298E) + 547591367);
  HIDWORD(v222) = v96 ^ v63;
  LODWORD(v63) = v96 ^ v63 ^ 0x5BF36347;
  LODWORD(v222) = v63 ^ v92;
  LODWORD(v43) = v63 ^ v92 ^ 0x2745D0FF;
  v97 = v43 ^ v93 ^ 0x299B7ABE;
  v98 = (((unsigned __int16)(v97 ^ 0x6B2B) >> 8) - (((v97 ^ 0x3DCC6B2B) >> 7) & 0x78) - 2114711236) ^ *(_DWORD *)(v68 + 4 * (((unsigned __int16)(v97 ^ 0x6B2B) >> 8) ^ 0xF5u));
  v99 = (v98 - ((2 * v98) & 0x4147298E) + 547591367) ^ *(_DWORD *)&v70[4 * (v97 ^ 0x6E)];
  HIDWORD(v221) = v97;
  v100 = *(_DWORD *)(v67 + 4 * (HIBYTE(v97) ^ 0x57));
  HIDWORD(v45) = ~v100;
  LODWORD(v45) = v100 ^ 0xE1F40DE4;
  LODWORD(v223) = v96;
  LODWORD(v221) = (v45 >> 2) ^ *(_DWORD *)&v69[4 * (((v97 ^ 0x516EF336) >> 16) ^ 0x8B)] ^ v96 ^ (v99 - ((2 * v99) & 0x58161290) - 1408562872);
  HIDWORD(v220) = v221 ^ 0x930000ED ^ v63;
  LODWORD(v220) = HIDWORD(v220) ^ 0x8D06EA22 ^ v43;
  v101 = v220 ^ v97 ^ 0x3DCC6B2B;
  v102 = *(_DWORD *)(v67 + 4 * (HIBYTE(v101) ^ 0x39));
  HIDWORD(v45) = ~v102;
  LODWORD(v45) = v102 ^ 0xE1F40DE4;
  HIDWORD(v219) = v101;
  v103 = *(_DWORD *)&v70[4 * (v101 ^ 4)] ^ *(_DWORD *)(v68
                                                                      + 4
                                                                      * (((unsigned __int16)(v101 ^ 0xAA41) >> 8) ^ 0xF5u)) ^ 0xA15785FB ^ (v45 >> 2);
  v104 = *(_DWORD *)&v69[4 * (((v101 ^ 0x9289BB39) >> 16) ^ 0x7E)] ^ v221 ^ 0x930000ED ^ ((unsigned __int16)(v101 ^ 0xAA41) >> 8) ^ 0xD5AAAFB5 ^ (v103 - ((2 * v103) & 0x58161290) - 1408562872);
  v105 = v104 ^ (v43 - ((2 * v43) & 0xAB555F6A) - 710234187);
  v106 = v105 ^ v101 ^ 0x53DEAA41;
  LODWORD(v67) = *(_DWORD *)(v67 + 4 * (HIBYTE(v106) ^ 0x44));
  HIDWORD(v45) = ~(_DWORD)v67;
  LODWORD(v45) = v67 ^ 0xE1F40DE4;
  LODWORD(v63) = *(_DWORD *)(v68 + 4 * (BYTE1(v106) ^ 0xFDu)) ^ *(_DWORD *)&v70[4
                                                                                * ((v105 ^ v101 ^ 0x41) ^ 0xC4)] ^ ((BYTE1(v106) ^ 8) - 2114711236 + (~(2 * ((v106 >> 8) ^ 0x2E3F08)) | 0xFFFFFF87) + 1) ^ ((v45 >> 2) - ((2 * (v45 >> 2)) & 0x4147298E) + 547591367);
  HIDWORD(v218) = v106 ^ 0x6641E092;
  LODWORD(v63) = (v63 - ((2 * v63) & 0x58161290) - 1408562872) ^ *(_DWORD *)&v69[4 * (BYTE2(v106) ^ 0x16)];
  LODWORD(v65) = v63 - ((2 * v63) & 0xAB555F6A);
  v107 = v105 ^ 0x626A2240;
  v108 = (uint64_t)*(&off_1E31525C0 + a1 - 790);
  v109 = *(unsigned __int8 *)(v108 + (*(unsigned __int8 *)(v42 - 109) ^ 0xA5));
  HIDWORD(v45) = v109 ^ 0x28;
  LODWORD(v45) = (v109 ^ 0x40) << 24;
  v216 = v108;
  v217 = (char *)*(&off_1E31525C0 + a1 - 854) - 12;
  v214 = (char *)*(&off_1E31525C0 + (a1 ^ 0x3CC)) - 12;
  v215 = (char *)*(&off_1E31525C0 + (a1 ^ 0x3C5)) - 12;
  LODWORD(v52) = (((((v45 >> 30) ^ 0xDB) >> 2) | (((v45 >> 30) ^ 0xDB) << 6)) | ((v215[*(unsigned __int8 *)(v42 - 111) ^ 0x7ALL] ^ 0xA0) << 16) | ((v214[*(unsigned __int8 *)(v42 - 112) ^ 0x78] ^ 0xED) << 24) | (((v217[*(unsigned __int8 *)(v42 - 110) ^ 0x5DLL] + (*(_BYTE *)(v42 - 110) ^ 0x52) + 104) ^ 0x5D) << 8)) ^ 0xFFEA3345;
  v110 = ((*(unsigned __int8 *)(v108 + (*(unsigned __int8 *)(v42 - 101) ^ 0x60)) ^ 0xA3) & 0xFFFF00FF | ((v215[*(unsigned __int8 *)(v42 - 103) ^ 5] ^ 0xF1) << 16) | (((v217[*(unsigned __int8 *)(v42 - 102) ^ 4] + (*(_BYTE *)(v42 - 102) ^ 0xB) + 104) ^ 0x33) << 8) | ((v214[*(unsigned __int8 *)(v42 - 104) ^ 0x1CLL] ^ 0x18) << 24)) ^ 0x93C5D20B;
  v111 = ((*(unsigned __int8 *)(v108 + (*(unsigned __int8 *)(v42 - 105) ^ 0x28)) ^ 0x62) & 0xFFFF00FF | ((((*(_BYTE *)(v42 - 106) ^ 0xAC) + v217[*(unsigned __int8 *)(v42 - 106) ^ 0xA3] + 104) ^ 0xF6) << 8) | ((v214[*(unsigned __int8 *)(v42 - 108) ^ 0xB2] ^ 0xFFFFFFEF) << 24) | ((v215[*(unsigned __int8 *)(v42 - 107) ^ 0x27] ^ 0x95) << 16)) ^ 0x67C0A1EC;
  v112 = ((*(unsigned __int8 *)(v108 + (*(unsigned __int8 *)(v42 - 97) ^ 0x7BLL)) ^ 0x17) & 0xFFFF00FF | ((((*(_BYTE *)(v42 - 98) ^ 0xD0) + v217[*(unsigned __int8 *)(v42 - 98) ^ 0xDFLL] + 104) ^ 0xE4) << 8) | ((v215[*(unsigned __int8 *)(v42 - 99) ^ 0xAALL] ^ 0xC3) << 16) | ((v214[*(unsigned __int8 *)(v42 - 100) ^ 0x45] ^ 0xD7) << 24)) ^ 0xD511399F;
  HIDWORD(v213) = *(_DWORD *)(v42 - 136) + 1359364102;
  LODWORD(v69) = (HIDWORD(v220) ^ 0x8D06EA22) - ((2 * (HIDWORD(v220) ^ 0x8D06EA22)) & 0xAB555F6A) - 710234187;
  HIDWORD(v212) = (a1 ^ 0x421) & 0xFAC6C0F7;
  LODWORD(v212) = a1 ^ 0x3E5;
  HIDWORD(v211) = a1 ^ 0x304;
  LODWORD(v211) = v104 ^ v69;
  HIDWORD(v210) = a1 ^ 0x3A7;
  LODWORD(v210) = a1 ^ 0x3C9;
  HIDWORD(v209) = a1 ^ 0x3B7;
  LODWORD(v219) = v104;
  HIDWORD(v208) = (v65 - 710234187) ^ v104;
  LODWORD(v209) = a1 ^ 0x332;
  LODWORD(v208) = a1 ^ 0x37A;
  HIDWORD(v207) = a1 ^ 0x3CA;
  LODWORD(v207) = a1 ^ 0x39D;
  *(_DWORD *)(v42 - 128) = a1 ^ 0x421;
  HIDWORD(v206) = a1 ^ 0x3DA;
  LODWORD(v218) = v107;
  LODWORD(v213) = v69 ^ 0x3DC8BA5D ^ (v65 - 710234187);
  LODWORD(v206) = v213 ^ v107;
  v113 = *(_DWORD *)(v42 - 128) - 1772;
  *(_QWORD *)(v42 - 208) = 7;
  v114 = *(unsigned __int8 **)(v42 - 120);
  v115 = v114[7];
  v116 = (v113 - 162888063) ^ 0xF64A8710;
  *(_QWORD *)(v42 - 176) = v116;
  LODWORD(v115) = *(unsigned __int8 *)(v108 + (v115 ^ 0x41));
  v117 = v114[v116] ^ 0x60;
  *(_QWORD *)(v42 - 168) = 8;
  LODWORD(v117) = v214[v117];
  v118 = v114[8];
  *(_QWORD *)(v42 - 136) = 1;
  LODWORD(v57) = v214[v118 ^ 0xC1] ^ 0xD8;
  v119 = v215[v114[1] ^ 0x66] ^ 0x4C;
  *(_QWORD *)(v42 - 144) = 15;
  v120 = v114[15] ^ 0xE9;
  *(_QWORD *)(v42 - 160) = 11;
  LODWORD(v68) = v119 << 16;
  v121 = *(unsigned __int8 *)(v108 + v120) ^ 0xB5;
  LODWORD(v120) = v121 | ((v117 ^ 0x6C) << 24);
  LODWORD(v117) = *(unsigned __int8 *)(v108 + (v114[11] ^ 0xC3));
  *(_QWORD *)(v42 - 184) = 0;
  LODWORD(v68) = v68 | ((v214[*v114 ^ 0x30] ^ 0x5C) << 24);
  *(_QWORD *)(v42 - 152) = 2;
  LODWORD(v68) = v68 & 0xFFFF00FF | (((v217[v114[2] ^ 0xC0] + (v114[2] ^ 0xCF) + 104) ^ 0xF9) << 8);
  *(_QWORD *)(v42 - 256) = 4;
  *(_QWORD *)(v42 - 240) = 5;
  *(_QWORD *)(v42 - 224) = 9;
  LODWORD(v108) = v117 ^ 0x7F | ((_DWORD)v57 << 24) | ((v215[v114[9] ^ 0x5DLL] ^ 0x9F) << 16);
  *(_DWORD *)(v42 - 212) = -162887916;
  *(_QWORD *)(v42 - 192) = 10;
  LODWORD(v108) = v108 & 0xFFFF00FF | (((v217[v114[10] ^ 0xD5] + (v114[10] ^ 0xDA) + 104) ^ 0xCF) << 8);
  *(_QWORD *)(v42 - 200) = 14;
  LODWORD(v57) = (v217[v114[14] ^ 0xE4] + (v114[14] ^ 0xEB) - 24) << 8;
  *(_QWORD *)(v42 - 232) = 3;
  LODWORD(v69) = *(unsigned __int8 *)(v216 + (v114[3] ^ 0xDCLL)) ^ 0xA1;
  *(_QWORD *)(v42 - 248) = 13;
  LODWORD(v70) = v57 | ((v215[v114[13] ^ 0x92] ^ 0xA2) << 16);
  LODWORD(v115) = v115 ^ 0x65;
  LODWORD(v117) = ((v215[v114[5] ^ 0xA9] ^ 0x71) << 16) | (((v217[v114[6] ^ 0x4FLL]
                                                                                               + (v114[6] ^ 0x40)
                                                                                               + 104) ^ 0xB7) << 8) | v115 | ((v214[v114[4] ^ 0xFCLL] ^ 0xE2) << 24);
  LODWORD(v117) = v117 - 2 * (v117 & 0x5E791857 ^ v115 & 2) - 562489259;
  LODWORD(v115) = v52 ^ v238 ^ ((v69 | v68)
                                            + 1179880060
                                            - 2 * ((v69 | v68) & 0x46538A7E ^ v69 & 2));
  LODWORD(v69) = v111 ^ v72 ^ v117;
  v122 = v112 ^ v237 ^ ((v70 | v120)
                      + 1822982182
                      - 2 * ((v70 | v120) & 0x6CA8803E ^ v121 & 0x18));
  LODWORD(v108) = v110 ^ v236 ^ (v108 - ((2 * v108) & 0x54F8D764) + 712797106);
  v123 = (uint64_t)*(&off_1E31525C0 + (a1 ^ 0x304));
  v124 = *(_DWORD *)(v123 + 4 * (BYTE3(v108) ^ 0x3F));
  HIDWORD(v45) = ~v124;
  LODWORD(v45) = v124 ^ 0x61849936;
  v125 = (uint64_t)*(&off_1E31525C0 + SHIDWORD(v212));
  LODWORD(v117) = (v45 >> 1) ^ *(_DWORD *)(v125 + 4 * (BYTE2(v122) ^ 0x34u)) ^ ((BYTE2(v122) ^ 0x68)
                                                                                - 18667836
                                                                                - ((2 * (HIWORD(v122) ^ 0xB768)) & 0x188));
  v126 = (uint64_t)*(&off_1E31525C0 + (a1 ^ 0x3E5));
  LODWORD(v57) = *(_DWORD *)(v126 + 4 * (v108 ^ 0xC6u)) ^ ((BYTE2(v115) ^ 0xD5)
                                                                            - 18667836
                                                                            - ((2 * (WORD1(v115) ^ 0x6CD5)) & 0x188)) ^ *(_DWORD *)(v125 + 4 * (BYTE2(v115) ^ 0x89u)) ^ ((v108 ^ 0xAB) - 1215420892 + ((2 * (v108 ^ 0xAB) + 254) & 0x348 ^ 0xCFE37BFF));
  LODWORD(v68) = *(_DWORD *)(v125 + 4 * (BYTE2(v69) ^ 0x8Cu)) ^ *(_DWORD *)(v126
                                                                            + 4 * (v122 ^ 0xB6u)) ^ ((v122 ^ 0xDB) - 1215420892 + ((2 * (v122 ^ 0xDB) + 254) & 0x348 ^ 0xCFE37BFF)) ^ ((BYTE2(v69) ^ 0xD0) - 18667836 - ((2 * ((v69 >> 16) ^ 0xC8D0)) & 0x188));
  LODWORD(v70) = *(_DWORD *)(v123 + 4 * ((v69 >> 24) ^ 0xC8));
  HIDWORD(v45) = ~(_DWORD)v70;
  LODWORD(v45) = v70 ^ 0x61849936;
  v127 = ((BYTE2(v108) ^ 0xAD) - 18667836 - 2 * ((WORD1(v108) ^ 0x3FAD) & 0xD4 ^ WORD1(v108) & 0x10)) ^ *(_DWORD *)(v126 + 4 * (v115 ^ 0x1Cu)) ^ ((v115 ^ 0x71) - 1215420892 + ((2 * (v115 ^ 0x71) + 254) & 0x348 ^ 0xCFE37BFF)) ^ (v45 >> 1) ^ *(_DWORD *)(v125 + 4 * (BYTE2(v108) ^ 0xF1u));
  LODWORD(v120) = *(_DWORD *)(v123 + 4 * (BYTE3(v115) ^ 0x6C));
  HIDWORD(v45) = ~(_DWORD)v120;
  LODWORD(v45) = v120 ^ 0x61849936;
  LODWORD(v120) = v45 >> 1;
  LODWORD(v70) = v127 + 2010924829 - ((2 * v127) & 0xEFB88E3A);
  v128 = *(_DWORD *)(v123 + 4 * (HIBYTE(v122) ^ 0xB7));
  HIDWORD(v45) = ~v128;
  LODWORD(v45) = v128 ^ 0x61849936;
  v129 = (v69 ^ 0x10) - 1215420893 - ((2 * (v69 ^ 0x10) + 842892542) & 0x301C8748);
  v130 = (char *)*(&off_1E31525C0 + *(_DWORD *)(v42 - 128) - 1846) - 8;
  LODWORD(v64) = *(_DWORD *)&v130[4 * (BYTE1(v115) ^ 0xDE)] ^ v233 ^ *(_DWORD *)(v126
                                                                               + 4 * (v69 ^ 0x7Du)) ^ (v117 + 2010924829 - ((2 * v117) & 0xEFB88E3A));
  LODWORD(v115) = (v57 + 2010924829 - ((2 * v57) & 0xEFB88E3A)) ^ *(_DWORD *)&v130[4 * (BYTE1(v69) ^ 0x2F)] ^ (v45 >> 1);
  LODWORD(v117) = v115 - ((2 * v115) & 0xF0300420);
  LODWORD(v69) = *(_DWORD *)&v130[4 * (BYTE1(v122) ^ 0x66)];
  LODWORD(v115) = *(_DWORD *)&v130[4 * (BYTE1(v108) ^ 0x29)] ^ v235 ^ v120 ^ (v68 + 2010924829 - ((2 * v68) & 0xEFB88E3A));
  LOWORD(v122) = v64 ^ v129;
  LODWORD(v69) = v69 ^ v234 ^ v70;
  LODWORD(v120) = *(_DWORD *)(v123 + 4 * ((v64 ^ ~v129) >> 24));
  HIDWORD(v45) = ~(_DWORD)v120;
  LODWORD(v45) = v120 ^ 0x61849936;
  LODWORD(v120) = v45 >> 1;
  LODWORD(v57) = ((v64 ^ v129) >> 16) ^ 0x49;
  LODWORD(v68) = v57 - 18667836 - ((2 * (((v64 ^ v129) >> 16) ^ 0xFF49)) & 0x188);
  v131 = *(_DWORD *)(v123 + 4 * (BYTE3(v115) ^ 0x91));
  HIDWORD(v45) = ~v131;
  LODWORD(v45) = v131 ^ 0x61849936;
  v132 = v45 >> 1;
  LODWORD(v64) = *(_DWORD *)(v123 + 4 * ((v69 >> 24) ^ 0xA3));
  HIDWORD(v45) = ~(_DWORD)v64;
  LODWORD(v45) = v64 ^ 0x61849936;
  v133 = v132 ^ *(_DWORD *)(v125 + 4 * (BYTE2(v69) ^ 0xF0u)) ^ ((BYTE2(v69) ^ 0xAC)
                                                                - 18667836
                                                                - ((2 * ((v69 >> 16) ^ 0xA3AC)) & 0x188));
  LODWORD(v68) = (v45 >> 1) ^ *(_DWORD *)(v125 + 4 * (v57 ^ 0x5C)) ^ *(_DWORD *)(v126
                                                                                               + 4
                                                                                               * (v115 ^ 0x7Bu)) ^ v68 ^ ((v115 ^ 0x16) - 1215420892 + ((2 * (v115 ^ 0x16) + 254) & 0x348 ^ 0xCFE37BFF));
  LODWORD(v117) = (v117 + 2014839312) ^ HIDWORD(v232);
  v134 = (v133 + 2010924829 - ((2 * v133) & 0xEFB88E3A)) ^ *(_DWORD *)&v130[4 * (BYTE1(v122) ^ 0x2C)];
  LODWORD(v120) = v120 ^ *(_DWORD *)(v126 + 4 * (v69 ^ 3u)) ^ ((v69 ^ 0x6E)
                                                                                - 1215420893
                                                                                - ((2 * (v69 ^ 0x6E)
                                                                                  + 842892542) & 0x301C8748)) ^ *(_DWORD *)(v125 + 4 * (BYTE2(v117) ^ 0x7Du)) ^ ((BYTE2(v117) ^ 0x21) - 18667836 - ((v117 >> 15) & 0x188));
  v135 = *(_DWORD *)(v125 + 4 * (BYTE2(v115) ^ 0x2Eu)) ^ ((BYTE2(v115) ^ 0x72)
                                                          - 18667836
                                                          - ((2 * (WORD1(v115) ^ 0x9172)) & 0x188));
  LODWORD(v57) = *(_DWORD *)(v123 + 4 * (BYTE3(v117) ^ 0x16));
  HIDWORD(v45) = ~(_DWORD)v57;
  LODWORD(v45) = v57 ^ 0x61849936;
  v136 = ((v122 ^ 0xFC) - 1215420893 - ((2 * (v122 ^ 0xFC) + 842892542) & 0x301C8748)) ^ *(_DWORD *)&v130[4 * (BYTE1(v69) ^ 0xBD)] ^ *(_DWORD *)(v126 + 4 * (v122 ^ 0x91u)) ^ (v135 + 2010924829 - ((2 * v135) & 0xEFB88E3A)) ^ (v45 >> 1);
  LODWORD(v69) = ((v117 ^ 0x5D) - 1726037377) ^ v232 ^ *(_DWORD *)(v126
                                                                                  + 4
                                                                                  * (v117 ^ 0x30u)) ^ (v134 + 510616484 - ((2 * v134) & 0x3CDEC748));
  LODWORD(v115) = *(_DWORD *)&v130[4 * (BYTE1(v115) ^ 0x57)] ^ HIDWORD(v229) ^ (v120
                                                                              + 2010924829
                                                                              - ((2 * v120) & 0xEFB88E3A));
  v137 = (v136 - ((2 * v136) & 0x213C6414) + 278802954) ^ v231;
  LODWORD(v68) = *(_DWORD *)&v130[4 * (BYTE1(v117) ^ 0x99)] ^ HIDWORD(v231) ^ (v68
                                                                             + 2010924829
                                                                             - ((2 * v68) & 0xEFB88E3A));
  LODWORD(v117) = *(_DWORD *)(v123 + 4 * (HIBYTE(v137) ^ 0xFD));
  HIDWORD(v45) = ~(_DWORD)v117;
  LODWORD(v45) = v117 ^ 0x61849936;
  LODWORD(v120) = ((v68 ^ 0xA1)
                 - 1215420892
                 + ((2 * (v68 ^ 0xA1) + 254) & 0x348 ^ 0xCFE37BFF)) ^ *(_DWORD *)(v126
                                                                                                 + 4
                                                                                                 * (v68 ^ 0xCCu));
  v138 = *(_DWORD *)(v125 + 4 * (BYTE2(v69) ^ 0xDBu)) ^ ((BYTE2(v69) ^ 0x87)
                                                         - 18667836
                                                         - ((2 * ((v69 >> 16) ^ 0x3A87)) & 0x188)) ^ (v45 >> 1);
  LODWORD(v120) = (v120 + 2010924829 - ((2 * v120) & 0xEFB88E3A)) ^ *(_DWORD *)&v130[4 * (BYTE1(v69) ^ 0xDE)];
  LODWORD(v117) = ((v69 ^ 0x9E)
                 - 1215420892
                 + ((2 * (v69 ^ 0x9E) + 254) & 0x348 ^ 0xCFE37BFF)) ^ *(_DWORD *)(v126
                                                                                                 + 4
                                                                                                 * (v69 ^ 0xF3u));
  LODWORD(v108) = *(_DWORD *)(v123 + 4 * (BYTE3(v115) ^ 0x37));
  v139 = (v138 + 2010924829 - ((2 * v138) & 0xEFB88E3A)) ^ *(_DWORD *)&v130[4 * (BYTE1(v68) ^ 0x57)];
  HIDWORD(v45) = ~(_DWORD)v108;
  LODWORD(v45) = v108 ^ 0x61849936;
  v140 = v45 >> 1;
  LODWORD(v69) = *(_DWORD *)(v123 + 4 * ((v69 >> 24) ^ 0x3A));
  LODWORD(v57) = ((v115 ^ 0x740CBC3A) >> 16);
  LODWORD(v70) = v57 - 18667836 - (((v115 ^ 0x740CBC3A) >> 15) & 0x188);
  HIDWORD(v45) = ~(_DWORD)v69;
  LODWORD(v45) = v69 ^ 0x61849936;
  LODWORD(v69) = BYTE2(v68) ^ *(_DWORD *)(v125 + 4 * (BYTE2(v68) ^ 0xF6u)) ^ *(_DWORD *)&v130[4
                                                                                              * ((unsigned __int16)(v115 ^ 0xBC3A) >> 8)] ^ 0x893F6173 ^ (v45 >> 1);
  LODWORD(v69) = ((v137 ^ 0x1A) - 1726037377) ^ HIDWORD(v230) ^ *(_DWORD *)(v126
                                                                                           + 4
                                                                                           * (v137 ^ 0x77u)) ^ ((_DWORD)v69 + 510616484 - ((2 * (_DWORD)v69) & 0x3CDEC748));
  LODWORD(v68) = *(_DWORD *)(v123 + 4 * (BYTE3(v68) ^ 0x7C));
  LODWORD(v115) = ((v115 ^ 0x3A) - 1726037377) ^ HIDWORD(v228) ^ *(_DWORD *)(v126
                                                                                            + 4
                                                                                            * (v115 ^ 0x57u)) ^ (v139 + 510616484 - ((2 * v139) & 0x3CDEC748));
  HIDWORD(v45) = ~(_DWORD)v68;
  LODWORD(v45) = v68 ^ 0x61849936;
  v141 = *(_DWORD *)(v125 + 4 * (BYTE2(v137) ^ 0x18u)) ^ v229 ^ BYTE2(v137) ^ v140 ^ (v120
                                                                                      - 18667836
                                                                                      - ((2 * v120) & 0xFDC64D88));
  v142 = *(_DWORD *)&v130[4 * (BYTE1(v137) ^ 0xD2)] ^ v230 ^ v70 ^ *(_DWORD *)(v125
                                                                                           + 4
                                                                                           * (v57 ^ 0x5C)) ^ (v45 >> 1) ^ (v117 + 2010924829 - ((2 * v117) & 0xEFB88E3A));
  LODWORD(v68) = v141 ^ 0xFA64A587;
  LODWORD(v117) = ((v141 ^ 0x87)
                 - 1215420892
                 + ((2 * (v141 ^ 0x87) + 254) & 0x348 ^ 0xCFE37BFF)) ^ *(_DWORD *)(v126
                                                                                                  + 4 * (v141 ^ 0xEAu));
  LODWORD(v120) = *(_DWORD *)(v123 + 4 * ((v69 >> 24) ^ 0x5B));
  v143 = v117 + 2010924829 - ((2 * v117) & 0xEFB88E3A);
  HIDWORD(v45) = ~(_DWORD)v120;
  LODWORD(v45) = v120 ^ 0x61849936;
  LODWORD(v117) = (v45 >> 1) ^ *(_DWORD *)(v126 + 4 * (v115 ^ 0x1Fu));
  LODWORD(v120) = *(_DWORD *)(v123 + 4 * (BYTE3(v115) ^ 0x28));
  HIDWORD(v45) = ~(_DWORD)v120;
  LODWORD(v45) = v120 ^ 0x61849936;
  LODWORD(v120) = v45 >> 1;
  LODWORD(v117) = v117 ^ ((v115 ^ 0x72)
                        - 1215420892
                        + ((2 * (v115 ^ 0x72) + 254) & 0x348 ^ 0xCFE37BFF));
  v144 = *(_DWORD *)(v123 + 4 * (HIBYTE(v141) ^ 0xB9));
  HIDWORD(v45) = ~v144;
  LODWORD(v45) = v144 ^ 0x61849936;
  v145 = v45 >> 1;
  LODWORD(v57) = *(_DWORD *)(v123 + 4 * (HIBYTE(v142) ^ 0xB4));
  HIDWORD(v45) = ~(_DWORD)v57;
  LODWORD(v45) = v57 ^ 0x61849936;
  v146 = v145 ^ *(_DWORD *)(v126 + 4 * (v142 ^ 0x8Bu)) ^ ((v142 ^ 0xE6)
                                                                           - 1215420892
                                                                           + ((2 * (v142 ^ 0xE6) + 254) & 0x348 ^ 0xCFE37BFF));
  LODWORD(v64) = BYTE2(v69) ^ 0x95;
  v147 = v64 - 18667836 - ((2 * ((v69 >> 16) ^ 0x5B95)) & 0x188);
  v148 = v69;
  v149 = (v69 ^ 0xF4) - 1215420892 + ((2 * (v69 ^ 0xF4) + 254) & 0x348 ^ 0xCFE37BFF);
  LODWORD(v108) = ((BYTE2(v115) ^ 0x14) - 18667836 - 2 * ((WORD1(v115) ^ 0x2814) & 0xCD ^ WORD1(v115) & 9)) ^ v227 ^ *(_DWORD *)&v130[4 * (BYTE1(v69) ^ 0x1F)] ^ (v146 + 2010924829 - ((2 * v146) & 0xEFB88E3A)) ^ *(_DWORD *)(v125 + 4 * (BYTE2(v115) ^ 0x48u));
  LODWORD(v69) = *(_DWORD *)&v130[4 * ((unsigned __int16)(v141 ^ 0xA587) >> 8)] ^ v228 ^ ((BYTE2(v142) ^ 0x59) - 18667836 - ((2 * (HIWORD(v142) ^ 0xB459)) & 0x188)) ^ *(_DWORD *)(v125 + 4 * (BYTE2(v142) ^ 5u)) ^ (v117 + 2010924829 - ((2 * v117) & 0xEFB88E3A));
  LODWORD(v68) = (BYTE2(v68) - 18667836 - ((v68 >> 15) & 0x188)) ^ HIDWORD(v227) ^ *(_DWORD *)(v126 + 4 * (v148 ^ 0x99u)) ^ v149 ^ ((v45 >> 1) + 2010924829 - ((2 * (v45 >> 1)) & 0xEFB88E3A)) ^ *(_DWORD *)(v125 + 4 * (BYTE2(v68) ^ 0x5Cu)) ^ *(_DWORD *)&v130[4 * (BYTE1(v115) ^ 0x12)];
  LODWORD(v115) = *(_DWORD *)&v130[4 * (BYTE1(v142) ^ 0x34)] ^ HIDWORD(v226) ^ v147 ^ *(_DWORD *)(v125
                                                                                                + 4
                                                                                                * (v64 ^ 0x5C)) ^ v143 ^ v120;
  LODWORD(v116) = *(_DWORD *)(v123 + 4 * (BYTE3(v115) ^ 0xEB));
  HIDWORD(v45) = ~(_DWORD)v116;
  LODWORD(v45) = v116 ^ 0x61849936;
  v150 = (v45 >> 1) + 2010924829 - ((2 * (v45 >> 1)) & 0xEFB88E3A);
  LODWORD(v117) = ((BYTE2(v68) ^ 0x81) - 18667836 - ((2 * (WORD1(v68) ^ 0x1481)) & 0x188)) ^ *(_DWORD *)(v125 + 4 * (BYTE2(v68) ^ 0xDDu));
  v151 = ((v68 ^ 0x51) - 1215420892 + ((2 * (v68 ^ 0x51) + 254) & 0x348 ^ 0xCFE37BFF)) ^ *(_DWORD *)(v126 + 4 * (v68 ^ 0x3Cu));
  LODWORD(v57) = *(_DWORD *)(v125 + 4 * (BYTE2(v108) ^ 0xDBu)) ^ ((BYTE2(v108) ^ 0x87)
                                                                  - 18667836
                                                                  - ((2 * (WORD1(v108) ^ 0x7787)) & 0x188));
  v152 = *(_DWORD *)(v123 + 4 * (BYTE3(v68) ^ 0x14));
  HIDWORD(v45) = ~v152;
  LODWORD(v45) = v152 ^ 0x61849936;
  v153 = v45 >> 1;
  v154 = *(_DWORD *)(v123 + 4 * ((v69 >> 24) ^ 0x9A));
  HIDWORD(v45) = ~v154;
  LODWORD(v45) = v154 ^ 0x61849936;
  LODWORD(v116) = *(_DWORD *)(v125 + 4 * (((v115 ^ 0xA87CE98B) >> 16) ^ 0x5Cu)) ^ ((v115 ^ 0xA87CE98B) >> 16) ^ (v151 - 18667836 - ((2 * v151) & 0xFDC64D88));
  LODWORD(v117) = ((v115 ^ 0x8B)
                 - 1215420893
                 - ((2 * (v115 ^ 0x8B) + 842892542) & 0x301C8748)) ^ *(_DWORD *)&v130[4 * (BYTE1(v108) ^ 0xDE)] ^ *(_DWORD *)(v126 + 4 * (v115 ^ 0xE6u)) ^ (v117 + 2010924829 - ((2 * v117) & 0xEFB88E3A)) ^ (v45 >> 1);
  v155 = *(_DWORD *)(v123 + 4 * (BYTE3(v108) ^ 0x77));
  HIDWORD(v45) = ~v155;
  LODWORD(v45) = v155 ^ 0x61849936;
  v156 = *(_DWORD *)&v130[4 * (BYTE1(v68) ^ 0x34)] ^ v225 ^ ((BYTE2(v69) ^ 0xE9)
                                                           - 18667836
                                                           - ((2 * ((v69 >> 16) ^ 0x9AE9)) & 0x188)) ^ *(_DWORD *)(v125 + 4 * (BYTE2(v69) ^ 0xB5u)) ^ ((v108 ^ 0x9E) - 1215420893 - ((2 * (v108 ^ 0x9E) + 842892542) & 0x301C8748)) ^ v150 ^ *(_DWORD *)(v126 + 4 * (v108 ^ 0xF3u));
  v157 = *(_DWORD *)&v130[4 * (BYTE1(v115) ^ 0xB)] ^ v224 ^ ((v69 ^ 0xA8)
                                                           - 1215420892
                                                           + ((2 * (v69 ^ 0xA8) + 254) & 0x348 ^ 0xCFE37BFF)) ^ *(_DWORD *)(v126 + 4 * (v69 ^ 0xC5u)) ^ v153 ^ (v57 + 2010924829 - ((2 * v57) & 0xEFB88E3A));
  LODWORD(v69) = *(_DWORD *)&v130[4 * (BYTE1(v69) ^ 0x2D)] ^ HIDWORD(v225) ^ (v45 >> 1) ^ (v116
                                                                                         + 2010924829
                                                                                         - ((2 * v116) & 0xEFB88E3A));
  BYTE1(v115) = BYTE1(v157) ^ 0x65;
  LODWORD(v116) = ((v157 ^ 0x2E0E654A) >> 16);
  v158 = *(_DWORD *)(v123 + 4 * (HIBYTE(v157) ^ 0x6D));
  LODWORD(v68) = v116 - 18667836 - (((v157 ^ 0x2E0E654A) >> 15) & 0x188);
  HIDWORD(v45) = ~v158;
  LODWORD(v45) = v158 ^ 0x61849936;
  LODWORD(v120) = v45 >> 1;
  v159 = (v117 + 1638290202 - ((2 * v117) & 0xC34CA634)) ^ v226;
  LODWORD(v117) = *(_DWORD *)(v125 + 4 * (v116 ^ 0x5C));
  LODWORD(v116) = *(_DWORD *)(v123 + 4 * (HIBYTE(v159) ^ 0xFD));
  LODWORD(v117) = v117 ^ (~(_DWORD)v116 << 31) ^ (v116 >> 1) ^ v68 ^ 0x30C24C9B;
  LODWORD(v116) = ((v157 ^ 0x4A)
                 - 1215420892
                 + ((2 * (v157 ^ 0x4A) + 254) & 0x348 ^ 0xCFE37BFF)) ^ *(_DWORD *)(v126
                                                                                                  + 4 * (v157 ^ 0x27u));
  LODWORD(v68) = v117 + 2010924829 - ((2 * v117) & 0xEFB88E3A);
  LODWORD(v117) = *(_DWORD *)(v123 + 4 * ((v69 >> 24) ^ 0xAE));
  HIDWORD(v45) = ~(_DWORD)v117;
  LODWORD(v45) = v117 ^ 0x61849936;
  LODWORD(v117) = (v45 >> 1) ^ *(_DWORD *)&v130[4 * (BYTE1(v159) ^ 0xA4)] ^ (v116
                                                                           + 2010924829
                                                                           - ((2 * v116) & 0xEFB88E3A));
  LODWORD(v116) = *(_DWORD *)(v125 + 4 * (BYTE2(v69) ^ 0x3Au)) ^ v120 ^ *(_DWORD *)(v126
                                                                                    + 4
                                                                                    * (v159 ^ 0x4Du)) ^ ((v159 ^ 0x20) - 1215420892 + ((2 * (v159 ^ 0x20) + 254) & 0x348 ^ 0xCFE37BFF)) ^ ((BYTE2(v69) ^ 0x66) - 18667836 - 2 * (((v69 >> 16) ^ 0xAE66) & 0xDC ^ (v69 >> 16) & 0x18));
  v160 = (v156 ^ 2) - 1215420892 + ((2 * (v156 ^ 2) + 254) & 0x348 ^ 0xCFE37BFF);
  LODWORD(v115) = ((v69 ^ 0xB3)
                 - ((2 * (v69 ^ 0xB3) + 842892542) & 0x2238863A)
                 + 284887452) ^ *(_DWORD *)&v130[4 * BYTE1(v115)];
  LODWORD(v115) = (v115 + 510616484 - ((2 * v115) & 0x3CDEC748)) ^ *(_DWORD *)(v126
                                                                             + 4 * (v69 ^ 0xDEu));
  v161 = *(_DWORD *)(v125 + 4 * (BYTE2(v159) ^ 0x40u)) ^ ((BYTE2(v159) ^ 0x1C)
                                                          - 18667836
                                                          - ((2 * (HIWORD(v159) ^ 0xFD1C)) & 0x188));
  v162 = v161 ^ v115 ^ 0x431D28D3;
  LODWORD(v115) = v115 ^ 0x6500C283;
  v163 = v161 ^ 0xD9E215AF ^ -(v161 ^ 0xD9E215AF) ^ (v162 + v115 + 1);
  v164 = *(_DWORD *)(v123 + 4 * ((v156 ^ 0x3F162902u) >> 24));
  v165 = v163 + v115;
  HIDWORD(v45) = ~v164;
  LODWORD(v45) = v164 ^ 0x61849936;
  LODWORD(v115) = ((v156 ^ 0x3F162902u) >> 16) ^ DWORD2(v223) ^ *(_DWORD *)(v125
                                                                                           + 4
                                                                                           * (((v156 ^ 0x3F162902u) >> 16) ^ 0x5Cu)) ^ (v117 - 18667836 - ((2 * v117) & 0xFDC64D88));
  v166 = (v45 >> 1) ^ DWORD1(v223) ^ v165;
  LODWORD(v120) = *(_DWORD *)(v126 + 4 * (v156 ^ 0x6Fu));
  v167 = *(_DWORD *)&v130[4 * (BYTE1(v156) ^ 0xCB)] ^ HIDWORD(v223) ^ (v116 + 2010924829 - ((2 * v116) & 0xEFB88E3A));
  LODWORD(v69) = *(_DWORD *)&v130[4 * (BYTE1(v69) ^ 0x7C)] ^ HIDWORD(v224) ^ v160 ^ v120 ^ v68;
  LODWORD(v117) = ((BYTE2(v69) ^ 0xE9) - 18667836 - ((2 * ((v69 >> 16) ^ 0xB8E9)) & 0x188)) ^ *(_DWORD *)(v125 + 4 * (BYTE2(v69) ^ 0xB5u));
  v168 = v117 + 2010924829 - ((2 * v117) & 0xEFB88E3A);
  LODWORD(v116) = *(_DWORD *)(v123 + 4 * (BYTE3(v115) ^ 0x9D));
  HIDWORD(v45) = ~(_DWORD)v116;
  LODWORD(v45) = v116 ^ 0x61849936;
  LODWORD(v116) = v45 >> 1;
  LODWORD(v108) = *(_DWORD *)(v123 + 4 * (HIBYTE(v167) ^ 0x61));
  HIDWORD(v45) = ~(_DWORD)v108;
  LODWORD(v45) = v108 ^ 0x61849936;
  v169 = *(_DWORD *)(v126 + 4 * (v69 ^ 0xC5u)) ^ *(_DWORD *)(v125 + 4 * (BYTE2(v115) ^ 0x28u)) ^ ((v69 ^ 0xA8) - 1215420892 + ((2 * (v69 ^ 0xA8) + 254) & 0x348 ^ 0xCFE37BFF)) ^ (v45 >> 1) ^ ((BYTE2(v115) ^ 0x74) - 18667836 - 2 * ((WORD1(v115) ^ 0x9D74) & 0xCC ^ WORD1(v115) & 8));
  LODWORD(v116) = v116 ^ ((BYTE2(v166) ^ 0xE6) - 18667836 - ((2 * (HIWORD(v166) ^ 0xB0E6)) & 0x188)) ^ *(_DWORD *)(v125 + 4 * (BYTE2(v166) ^ 0xBAu));
  v170 = *(_DWORD *)(v123 + 4 * ((v69 >> 24) ^ 0xB8));
  HIDWORD(v45) = ~v170;
  LODWORD(v45) = v170 ^ 0x61849936;
  v171 = v45 >> 1;
  v172 = v167;
  LODWORD(v64) = (v167 ^ 0x85)
               - 1215420892
               + ((2 * (v167 ^ 0x85) + 254) & 0x348 ^ 0xCFE37BFF);
  LODWORD(v108) = *(_DWORD *)(v123 + 4 * (HIBYTE(v166) ^ 0xB0));
  HIDWORD(v45) = ~(_DWORD)v108;
  LODWORD(v45) = v108 ^ 0x61849936;
  LODWORD(v57) = *(_DWORD *)&v130[4 * (BYTE1(v167) ^ 0x8F)];
  v173 = ((BYTE2(v167) ^ 8) - 18667836 - ((v167 >> 15) & 0x188)) ^ *(_DWORD *)(v125 + 4 * (BYTE2(v167) ^ 0x54u)) ^ *(_DWORD *)(v126 + 4 * (v166 ^ 0x29u)) ^ ((v166 ^ 0x44) - 1215420892 + ((2 * (v166 ^ 0x44) + 254) & 0x348 ^ 0xCFE37BFF)) ^ v171;
  v174 = *(_DWORD *)&v130[4 * (BYTE1(v166) ^ 0xDD)] ^ HIDWORD(v222) ^ (v169 + 2010924829 - ((2 * v169) & 0xEFB88E3A));
  v175 = *(_DWORD *)&v130[4 * (BYTE1(v115) ^ 0xBD)] ^ v223 ^ (v173 + 2010924829 - ((2 * v173) & 0xEFB88E3A));
  LODWORD(v117) = *(_DWORD *)&v130[4 * (BYTE1(v69) ^ 0x2D)];
  LODWORD(v69) = v57 ^ v97 ^ *(_DWORD *)(v126 + 4 * (v115 ^ 0xB4u)) ^ ((v115 ^ 0xD9)
                                                                                        - 1215420892
                                                                                        + ((2
                                                                                          * (v115 ^ 0xD9)
                                                                                          + 254) & 0x348 ^ 0xCFE37BFF)) ^ (v45 >> 1) ^ v168;
  LODWORD(v68) = v64 ^ v222 ^ *(_DWORD *)(v126 + 4 * (v172 ^ 0xE8u)) ^ v117 ^ (v116
                                                                               + 2010924829
                                                                               - ((2 * v116) & 0xEFB88E3A));
  LODWORD(v108) = BYTE2(v175);
  LODWORD(v115) = *(_DWORD *)(v123 + 4 * ((v69 >> 24) ^ 0x18));
  LODWORD(v117) = ((BYTE2(v68) ^ 0x66) - 18667836 - 2 * ((WORD1(v68) ^ 0xAE66) & 0xD5 ^ WORD1(v68) & 0x11)) ^ *(_DWORD *)(v125 + 4 * (BYTE2(v68) ^ 0x3Au));
  HIDWORD(v45) = ~(_DWORD)v115;
  LODWORD(v45) = v115 ^ 0x61849936;
  LODWORD(v115) = ((v45 >> 1) - 18667836 - ((2 * (v45 >> 1)) & 0xFDC64D88)) ^ *(_DWORD *)(v125
                                                                                        + 4 * (BYTE2(v175) ^ 0x40u));
  v176 = *(_DWORD *)(v123 + 4 * (HIBYTE(v175) ^ 0xEF));
  HIDWORD(v45) = ~v176;
  LODWORD(v45) = v176 ^ 0x61849936;
  LODWORD(v116) = (v45 >> 1) ^ *(_DWORD *)(v126 + 4 * (v69 ^ 0x90u)) ^ ((v69 ^ 0xFD)
                                                                                         - 1215420892
                                                                                         + ((2
                                                                                           * (v69 ^ 0xFD)
                                                                                           + 254) & 0x348 ^ 0xCFE37BFF));
  v177 = *(_DWORD *)(v126 + 4 * (v174 ^ 0x27u)) ^ ((v174 ^ 0x4A)
                                                                    - 1215420892
                                                                    + ((2 * (v174 ^ 0x4A) + 254) & 0x348 ^ 0xCFE37BFF));
  LODWORD(v57) = *(_DWORD *)(v123 + 4 * (BYTE3(v68) ^ 0xAE));
  HIDWORD(v45) = ~(_DWORD)v57;
  LODWORD(v45) = v57 ^ 0x61849936;
  v178 = (v45 >> 1) ^ *(_DWORD *)(v125 + 4 * (BYTE2(v69) ^ 0xFu)) ^ (v177 - 18667836 - ((2 * v177) & 0xFDC64D88));
  v179 = *(_DWORD *)(v123 + 4 * (HIBYTE(v174) ^ 0xDC));
  HIDWORD(v45) = ~v179;
  LODWORD(v45) = v179 ^ 0x61849936;
  v180 = v115 + 2010924829 - ((2 * v115) & 0xEFB88E3A);
  LODWORD(v115) = ((BYTE2(v174) ^ 0xE) - 18667836 - ((2 * (HIWORD(v174) ^ 0xDC0E)) & 0x188)) ^ v221 ^ *(_DWORD *)&v130[4 * (BYTE1(v68) ^ 0x7C)] ^ *(_DWORD *)(v125 + 4 * (BYTE2(v174) ^ 0x52u)) ^ (v116 + 2010924829 - ((2 * v116) & 0xEFB88E3A));
  LODWORD(v120) = *(_DWORD *)&v130[4 * (BYTE1(v174) ^ 0x65)];
  v181 = *(_DWORD *)&v130[4 * (BYTE1(v69) ^ 0x1B)] ^ HIDWORD(v220) ^ *(_DWORD *)(v126
                                                                               + 4 * (v175 ^ 0x4Du)) ^ ((v175 ^ 0x20) - 1215420892 + ((2 * (v175 ^ 0x20) + 254) & 0x348 ^ 0xCFE37BFF)) ^ (v45 >> 1) ^ (v117 + 2010924829 - ((2 * v117) & 0xEFB88E3A));
  LODWORD(v116) = v69 >> 16;
  LODWORD(v69) = ((v68 ^ 0xB3)
                - 1215420892
                + ((2 * (v68 ^ 0xB3) + 254) & 0x348 ^ 0xCFE37BFF)) ^ HIDWORD(v219) ^ v120 ^ *(_DWORD *)(v126 + 4 * (v68 ^ 0xDEu)) ^ v180;
  LOBYTE(v68) = ((v68 ^ 0xB3) + 36 + ~((2 * (v68 ^ 0xB3) - 2) & 0x48)) ^ BYTE4(v219) ^ v120 ^ *(_BYTE *)(v126 + 4 * (v68 ^ 0xDEu)) ^ v180 ^ BYTE2(v175);
  v182 = *(_DWORD *)&v130[4 * (BYTE1(v175) ^ 0xA4)] ^ v220 ^ (v178 + 2010924829 - ((2 * v178) & 0xEFB88E3A));
  LODWORD(v70) = v69 ^ v108 ^ 0x7641388B;
  LODWORD(v117) = *(_DWORD *)(v123 + 4 * (v70 >> 24));
  HIDWORD(v45) = ~(_DWORD)v117;
  LODWORD(v45) = v117 ^ 0x61849936;
  v183 = v45 >> 1;
  LODWORD(v117) = *(_DWORD *)(v123 + 4 * ((v115 ^ 0xF7E9CFA8) >> 24));
  HIDWORD(v45) = ~(_DWORD)v117;
  LODWORD(v45) = v117 ^ 0x61849936;
  v184 = v45 >> 1;
  LODWORD(v120) = (BYTE2(v70) - 18667836 - ((v70 >> 15) & 0x188)) ^ *(_DWORD *)(v125
                                                                                            + 4 * (BYTE2(v70) ^ 0x5Cu));
  LODWORD(v108) = *(_DWORD *)(v123 + 4 * (HIBYTE(v182) ^ 0xE7));
  HIDWORD(v45) = ~(_DWORD)v108;
  LODWORD(v45) = v108 ^ 0x61849936;
  LODWORD(v108) = v45 >> 1;
  LODWORD(v116) = v183 ^ *(_DWORD *)(v126 + 4 * ((v182 ^ v116) ^ 0x18u)) ^ (((v115 ^ 0xF7E9CFA8) >> 16)
                                                                                             - 18667836
                                                                                             - (((v115 ^ 0xF7E9CFA8) >> 15) & 0x188)) ^ *(_DWORD *)(v125 + 4 * (((v115 ^ 0xF7E9CFA8) >> 16) ^ 0x5Cu)) ^ (((v182 ^ v116) ^ 0x75) - 1215420892 + ((2 * ((v182 ^ v116) ^ 0x75) + 254) & 0x348 ^ 0xCFE37BFF));
  LODWORD(v116) = (v116 + 2010924829 - ((2 * v116) & 0xEFB88E3A)) ^ *(_DWORD *)&v130[4 * (BYTE1(v181) ^ 0xEC)];
  v185 = (v70 - 1215420892 + ((2 * v70 + 254) & 0x348 ^ 0xCFE37BFF)) ^ *(_DWORD *)(v126 + 4 * (v68 ^ 0xE6u));
  LODWORD(v68) = *(_DWORD *)(v123 + 4 * (HIBYTE(v181) ^ 0x57));
  HIDWORD(v45) = ~(_DWORD)v68;
  LODWORD(v45) = v68 ^ 0x61849936;
  v186 = v184 ^ *(_DWORD *)(v125 + 4 * (BYTE2(v181) ^ 0xA7u)) ^ ((BYTE2(v181) ^ 0xFB)
                                                                 - 18667836
                                                                 - ((2 * (HIWORD(v181) ^ 0x57FB)) & 0x188)) ^ v185;
  v187 = (v186 + 2010924829 - ((2 * v186) & 0xEFB88E3A)) ^ *(_DWORD *)&v130[4 * (BYTE1(v182) ^ 0x6D)];
  LODWORD(v123) = *(_DWORD *)&v130[4 * (BYTE1(v115) ^ 0x2D)];
  LODWORD(v117) = ((v115 ^ 0xA8)
                 - 1215420892
                 + ((2 * (v115 ^ 0xA8) + 254) & 0x348 ^ 0xCFE37BFF)) ^ *(_DWORD *)(v126
                                                                                                  + 4 * (v115 ^ 0xC5u)) ^ ((BYTE2(v182) ^ 0x31) - 18667836 - ((v182 >> 15) & 0x188)) ^ *(_DWORD *)(v125 + 4 * (BYTE2(v182) ^ 0x6Du));
  LODWORD(v115) = v211 ^ *(_DWORD *)&v130[4 * (BYTE1(v69) ^ 0xDA)] ^ ((v117 ^ (v45 >> 1))
                                                                    + 2010924829
                                                                    - ((2 * (v117 ^ (v45 >> 1))) & 0xEFB88E3A));
  LODWORD(v69) = (v187 - 710234187 - ((2 * v187) & 0xAB555F6A)) ^ v219;
  LODWORD(v125) = (v116 + 1216276499 - ((2 * v116) & 0x90FDD026)) ^ HIDWORD(v218);
  v188 = v123 ^ v107 ^ ((v181 ^ 0x2F)
                      - 1215420892
                      + ((2 * (v181 ^ 0x2F) + 254) & 0x348 ^ 0xCFE37BFF)) ^ v108 ^ *(_DWORD *)(v126 + 4 * (v181 ^ 0x42u)) ^ (v120 + 2010924829 - ((2 * v120) & 0xEFB88E3A));
  BYTE2(v182) = BYTE2(v115) ^ 0x8C;
  v189 = (char *)*(&off_1E31525C0 + (int)v210) - 12;
  v190 = (uint64_t)*(&off_1E31525C0 + (int)v209);
  LODWORD(v116) = (*(_DWORD *)(v190 + 4 * (BYTE2(v69) ^ 0x9Eu)) - 1456318381) ^ (*(_DWORD *)&v189[4 * (v188 ^ 0xC9)]
                                                                                 - 1460127522);
  v191 = *(_DWORD *)&v189[4 * (v115 ^ 0xC8)];
  v192 = (char *)*(&off_1E31525C0 + SHIDWORD(v209)) - 8;
  LODWORD(v117) = (*(_DWORD *)(v190 + 4 * (BYTE2(v188) ^ 0x38u)) - 1456318381) ^ (*(_DWORD *)&v192[4 * ((v115 ^ 0x898C5DC8) >> 24)]
                                                                                  - 1440358412) ^ (*(_DWORD *)&v189[4 * (v69 ^ 0xA2)]
                                                                                                 - 1460127522);
  v193 = v125 ^ 0x351D74B9;
  LODWORD(v68) = *(_DWORD *)&v189[4 * (v125 ^ 0xB9)];
  LODWORD(v123) = *(_DWORD *)&v192[4 * ((v69 >> 24) ^ 0xE7)];
  LODWORD(v189) = *(_DWORD *)&v192[4 * (HIBYTE(v188) ^ 0xB8)];
  LODWORD(v125) = *(_DWORD *)&v192[4 * (BYTE3(v125) ^ 0x65)];
  v194 = (char *)*(&off_1E31525C0 + SHIDWORD(v210)) - 12;
  LODWORD(v115) = (v116 + 381839544 - ((2 * v116) & 0x2D84D170)) ^ *(_DWORD *)&v194[4 * (BYTE1(v115) ^ 0x61)] ^ (v125 - 1440358412);
  v195 = *(unsigned int *)&v194[4 * (BYTE1(v188) ^ 0xE9)];
  v196 = v117 + 381839544 - ((2 * v117) & 0x2D84D170);
  LODWORD(v117) = *(_DWORD *)(v190 + 4 * BYTE2(v182));
  LODWORD(v130) = *(_DWORD *)&v194[4 * BYTE1(v193)] ^ v213 ^ v196;
  LODWORD(v115) = v213 ^ v107 ^ HIDWORD(v218) ^ (v115 + 1216276499 - ((2 * v115) & 0x90FDD026));
  LODWORD(v69) = *(_DWORD *)&v194[4 * (BYTE1(v69) ^ 0xA0)] ^ v213 ^ v107 ^ (v191
                                                                          - 2
                                                                          * ((v191 + 150485214) & 0x16C268B9 ^ v191 & 1)
                                                                          - 1078287978) ^ ((_DWORD)v189 - 1440358412) ^ (*(_DWORD *)(v190 + 4 * BYTE2(v193)) - 1456318381);
  v197 = (char *)*(&off_1E31525C0 + (int)v208) - 8;
  v114[6] = v197[BYTE1(v130) ^ 0x99] ^ 0x5F;
  v198 = (char *)*(&off_1E31525C0 + SHIDWORD(v207)) - 8;
  v114[*(_QWORD *)(v42 - 248)] = (v198[BYTE2(v115) ^ 0xADLL] + 31) ^ 0xC5;
  v199 = (char *)*(&off_1E31525C0 + (int)v207) - 4;
  v114[*(_QWORD *)(v42 - 208)] = v199[v130 ^ 0xFCLL] ^ 0x2B;
  v114[*(_QWORD *)(v42 - 224)] = (v198[BYTE2(v69) ^ 0x8CLL] + 31) ^ 0x47;
  v200 = (uint64_t)*(&off_1E31525C0 + SHIDWORD(v206));
  v114[*(_QWORD *)(v42 - 256)] = (*(_BYTE *)(v200 + ((v130 >> 24) ^ 0xDELL)) - 70) ^ 0x1B;
  v201 = v198[BYTE2(v130) ^ 0x15];
  v202 = (v201 + 31) ^ 0xDAu;
  v114[*(_QWORD *)(v42 - 240)] = ((v201 + ((v201 + 31) ^ 0xDA) + 32) ^ 0xFE) + v201 + 31;
  v203 = v123 & 3;
  LODWORD(v68) = HIDWORD(v208) ^ (v117 - 1456318381) ^ v195 ^ (v68 - 1460127522) ^ (v123
                                                                                  - 2
                                                                                  * ((v123 + 170254324) & 0x16C268BB ^ v203)
                                                                                  - 1058518868);
  v114[*(_QWORD *)(v42 - 232)] = v199[v68 ^ 5] ^ 0xD9;
  v114[*(_QWORD *)(v42 - 176)] = (*(_BYTE *)(v200 + (BYTE3(v115) ^ 0x4ELL)) - 70) ^ 0xE6;
  v114[*(_QWORD *)(v42 - 168)] = (*(_BYTE *)(v200 + ((v69 >> 24) ^ 0x9CLL)) - 70) ^ 0xB8;
  v204 = *(_QWORD *)(v42 - 184);
  v114[v204] = (*(_BYTE *)(v200 + (BYTE3(v68) ^ 0x67)) - 70) ^ 0x91;
  v114[*(_QWORD *)(v42 - 160)] = v199[v69 ^ 0xF2] ^ 0xD3;
  v114[*(_QWORD *)(v42 - 192)] = v197[BYTE1(v69) ^ 0x1ELL] ^ 0xFC;
  v114[*(_QWORD *)(v42 - 152)] = v197[BYTE1(v68) ^ 0x33] ^ 0xE5;
  v114[*(_QWORD *)(v42 - 200)] = v197[BYTE1(v115) ^ 0xBCLL] ^ 0x2B;
  v114[*(_QWORD *)(v42 - 144)] = v199[v115 ^ 0x9FLL] ^ 0x2B;
  v114[*(_QWORD *)(v42 - 136)] = (v198[BYTE2(v68) ^ 0xDLL] + 31) ^ 0x8E;
  LODWORD(v117) = (((_DWORD)v204 - 162887900 - 2 * (((_DWORD)v204 + 16) & 0x764A8717 ^ *(_DWORD *)(v42 - 212) & 3)) ^ 0xF64A8714) < HIDWORD(v213);
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a40 + 8 * (int)((v117 | (16 * v117)) ^ (*(_DWORD *)(v42 - 128) - 570))) - 4))(HIDWORD(v208), v195, 43, v203, v202, v193, 2854608884, HIDWORD(v218), a3, a4, a5, a6, v206, v207, v208, v209, v210, v211, v212,
           v213,
           v214,
           v215,
           v216,
           v217,
           v218,
           v219,
           v220,
           v221,
           v222,
           v223,
           *((_QWORD *)&v223 + 1),
           v224,
           v225,
           v226,
           v227,
           v228,
           v229,
           v230,
           v231,
           v232);
}

void sub_193C86C6C()
{
  JUMPOUT(0x193C848E4);
}

uint64_t sub_193C86CA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;

  return (*(uint64_t (**)(void))(v9 + 8 * ((((((a8 + 614) | 0x486) + 589) ^ (a8 + 268)) * (a3 != v8)) ^ a8)))();
}

uint64_t sub_193C86CD0(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((958 * ((((v3 - 898900432) & 0x359427AF ^ 0x78F) & a3) != ((v3 + 1597) ^ 0x7E4))) ^ v3)))();
}

uint64_t sub_193C86D20(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  char v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  char v58;
  uint64_t v59;
  int8x16x4_t v61;

  *(_DWORD *)(v55 - 128) = v53;
  v56 = (v50 & 7) - v52 - a2 - v50 + 8;
  v57 = v52 + v50;
  v58 = v52 + v50 + v51;
  v59 = (v57 + a1 - v54);
  v61.val[0].i64[0] = ((_BYTE)v57 + (_BYTE)a1 - (_BYTE)v54) & 0xF;
  v61.val[0].i64[1] = (v58 - 37 - (_BYTE)v54) & 0xF;
  v61.val[1].i64[0] = (v58 - 38 - (_BYTE)v54) & 0xF;
  v61.val[1].i64[1] = (v58 - 39 - (_BYTE)v54) & 0xF;
  v61.val[2].i64[0] = (v58 - (_BYTE)v54 + (((_BYTE)a6 - 6) & 0xF9)) & 0xF;
  v61.val[2].i64[1] = (v58 - 41 - (_BYTE)v54) & 0xF;
  v61.val[3].i64[0] = (v58 - 42 - (_BYTE)v54) & 0xF;
  v61.val[3].i64[1] = (v49 - (_BYTE)v54) & 0xF;
  *(int8x8_t *)(*(_QWORD *)(v55 - 120) - 7 + v59) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v48 + (v59 & 0xF) - 7), *(int8x8_t *)(*(_QWORD *)(v55 - 120) - 7 + v59)), veor_s8(*(int8x8_t *)((v59 & 0xF) + v46 - 5), *(int8x8_t *)((v59 & 0xF) + v47 - 3))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v61, (int8x16_t)xmmword_193EF83B0), (int8x8_t)0x7777777777777777)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a46 + 8 * ((4052 * (-v54 == v56)) ^ a6)) - 4))((__n128)xmmword_193EF83B0);
}

void sub_193C86E64()
{
  JUMPOUT(0x193C86D94);
}

uint64_t sub_193C86E8C@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v1 ^ (3641 * (a1 == 0))))
                            - ((v1 + 175) ^ 0x78FLL)))();
}

uint64_t sub_193C86EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = (a5 - 1717637737);
  *(_BYTE *)(*(_QWORD *)(v12 - 120) + v13) ^= *(_BYTE *)(v10 + (v13 & 0xF)) ^ *(_BYTE *)((v13 & 0xF) + v8 + 2) ^ *(_BYTE *)((v13 & 0xF) + v9 + 4) ^ (119 * (v13 & 0xF));
  return (*(uint64_t (**)(void))(v11 + 8 * ((11 * (a5 - 1 == v7)) ^ (a7 - 1783))))();
}

void sub_193C86F28()
{
  int v0;
  int v1;
  uint64_t v2;

  if (v0 == 1068478527)
    v1 = -1557818287;
  else
    v1 = 1557843849;
  *(_DWORD *)(v2 + 32) = v1;
}

void Mib5yocT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  int v12;

  if (a2)
    v8 = a3 == 0;
  else
    v8 = 1;
  v12 = !v8 && a6 != 0 && a7 != 0 && a8 != 0;
  __asm { BR              X9 }
}

uint64_t sub_193C8702C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned int a22,int a23)
{
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v28;

  *a6 = 0;
  *a7 = 0;
  a22 = -1501685844
      - 1224239923
      * (((&a22 | 0x794560F6) - &a22 + (&a22 & 0x86BA9F08)) ^ 0x8BF69D21);
  v28 = v23;
  v26 = sub_193CBCC34(&a22);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v28 + 8 * (((4 * (a23 == v25)) | (8 * (a23 == v25))) ^ v24))
                                          - 4))(v26);
}

uint64_t sub_193C870E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t *a22,unsigned int a23,int a24,unsigned int a25)
{
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v26 = 831981571 * (((&a22 | 0x4B3A2118) - (&a22 & 0x4B3A2118)) ^ 0xD29BF13C);
  a24 = v26 ^ 0x2DC;
  a25 = 1476476408 - v26;
  LODWORD(a22) = 1751760276 - v26;
  a23 = v26 ^ 0x4E459F21;
  sub_193C6C298((uint64_t)&a22);
  if (HIDWORD(a22) < 0x52C2D74F)
    v27 = 1;
  else
    v27 = 2;
  HIDWORD(a12) = HIDWORD(a22);
  LODWORD(a13) = v27;
  a23 = (831981571 * ((-97185235 - (&a22 | 0xFA35122D) + (&a22 | 0x5CAEDD2)) ^ 0x9C6B3DF6)) ^ 0x15E;
  a22 = &STACK[0x667A5DFFEA838FA0];
  sub_193C8C02C((uint64_t)&a22);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a15 + 8 * ((1356 * (a24 == -1557818287)) ^ 0xA7u)) - 4))(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, v25, a12, a13, a14, a15);
}

uint64_t sub_193C87240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned int a25)
{
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  void (*v33)(uint64_t *);
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;

  v32 = 1224239923 * (&a22 ^ 0xF2B3FDD7);
  LODWORD(a22) = (v29 ^ 0xFAAC7FDF) + ((2 * v29) & 0xF558FFBE) - v32 + 2004331195;
  a23 = a21;
  LODWORD(a24) = (v30 - 436) ^ v32;
  v33 = (void (*)(uint64_t *))*(&off_1E31525C0 + v30 - 780);
  v33(&a22);
  a25 = v30 - 1543737703 * ((2 * (&a22 & 0x2123C1C0) - &a22 - 555991493) ^ 0xA0286E47) - 852;
  a22 = v28;
  a24 = a21;
  ((void (*)(uint64_t *))((char *)*(&off_1E31525C0 + (v30 ^ 0x37A)) - 4))(&a22);
  v34 = 1224239923 * ((2 * (&a22 & 0xA755028) - &a22 + 1972023249) ^ 0x87395206);
  LODWORD(a24) = (v30 - 436) ^ v34;
  a23 = a21;
  LODWORD(a22) = ((2 * v27) & 0xED4BFD36) - v34 + (v27 ^ 0xF6A5FE3C ^ (v30 - 842)) + 2071866367;
  v33(&a22);
  v35 = 69008221 * ((2 * (&a22 & 0x181C2120) - &a22 - 404496677) ^ 0x34418CD1);
  a24 = a21;
  HIDWORD(a23) = v35 + v30 - 252;
  a25 = v35 ^ ((v26 ^ 0x7F1DDE7F) - 454837313 + ((2 * v26) & 0xFE3BBCFE));
  a22 = v25;
  v36 = ((uint64_t (*)(uint64_t *))((char *)*(&off_1E31525C0 + v30 - 855) - 4))(&a22);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a15 + 8 * ((1388 * ((_DWORD)a23 == v31)) ^ v30)) - 12))(v36);
}

uint64_t sub_193C87478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,unint64_t *a24,int a25,int a26,int a27)
{
  int v27;
  int v28;
  int v29;
  uint64_t v30;

  v29 = 944348131 * ((&a22 - 1934956406 - 2 * ((unint64_t)&a22 & 0x8CAAE88A)) ^ 0x2FB34CC4);
  a22 = a21;
  a24 = &STACK[0x59F8E2836308BDE9];
  a23 = -1526172622 - v29;
  a27 = v29 + v27 + 368399168;
  a25 = (((2 * a13) & 4 | a13) ^ 0x6B9BFB7A) - v29 - 26378752;
  v30 = sub_193CBD2A0((uint64_t)&a22);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a15
                                                      + 8 * (((a26 == v28) * (((v27 ^ 0x725) - 1069) ^ 0x49C)) ^ v27))
                                          - 12))(v30);
}

uint64_t sub_193C87568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unint64_t *a23,unsigned int a24,uint64_t a25,unint64_t *a26)
{
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  a25 = a20;
  a26 = &STACK[0x5594AEEE97C9A8CD];
  a24 = v27
      + 3804331 * ((541251859 - (&a23 | 0x2042D913) + (&a23 | 0xDFBD26EC)) ^ 0xA168031A)
      - 143;
  a23 = &STACK[0x750D723A758CEB76];
  v28 = v26;
  v29 = ((uint64_t (*)(unint64_t **))*(&off_1E31525C0 + v27 - 1216))(&a23);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v28 + 8 * ((((v27 ^ 0x6C3) - 25) * (a13 < 0x52C2D74F)) ^ v27))
                                          - 8))(v29);
}

uint64_t sub_193C8766C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _BYTE *a19, int a20,char a21,uint64_t a22,char *a23,_BYTE *a24,unsigned int a25)
{
  int v25;
  char *v26;
  int v27;
  char *v28;
  void (*v29)(char **);
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;

  v31 = (v27 + 660252291) & 0xD8A556BF;
  a23 = &a21 + v30;
  a24 = a19;
  a25 = v27
      - (((&a23 ^ 0xC4F7EA53 | 0x770500D8) - ((&a23 ^ 0xC4F7EA53) & 0x770500D8)) ^ 0x10EB4EC5)
      * v25
      - 385;
  v29(&a23);
  a25 = v31
      + 316
      - ((((&a23 | 0xDCA60AF4) ^ 0xFFFFFFFE) - (~&a23 | 0x2359F50B)) ^ 0x80405145) * v25;
  a23 = v28;
  a24 = a19;
  v29(&a23);
  a23 = v26;
  a24 = a19;
  a25 = v31 + 316 - ((&a23 + 2052919811 - 2 * (&a23 & 0x7A5D1203)) ^ 0xD944B64D) * v25;
  v29(&a23);
  a23 = a19;
  LODWORD(a24) = v31 - 241568881 * (&a23 ^ 0xD6110442) - 82;
  v32 = sub_193C9B7D8((uint64_t)&a23);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a15
                                                      + 8
                                                      * (int)(((HIDWORD(a24) == -1557818287) * (((v31 - 71) | 0x21) - 84)) ^ v31))
                                          - ((v31 - 1504475674) & 0x59AC7BF3 ^ 0x3FDLL)))(v32);
}

uint64_t sub_193C87808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  uint64_t v17;
  int v18;
  int v19;

  return ((uint64_t (*)(void))(*(_QWORD *)(v17 + 8 * ((998 * (a17 != v19)) ^ v18)) - ((v18 ^ 0x3E6u) + 474) + 997))();
}

uint64_t sub_193C87838@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, int a11, int a12)
{
  uint64_t v12;
  _BYTE *v13;
  int v14;

  *v13 = a9 ^ 0x51;
  return ((uint64_t (*)(void))(*(_QWORD *)(v12
                                        + 8
                                        * (((a12 != v14 + (a1 ^ 0x1E6) - 1009)
                                          * (((a1 - 1429316240) & 0x5531A67F) - 1452)) ^ a1))
                            - 12))();
}

uint64_t sub_193C8789C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  unsigned int v15;
  unsigned int v16;
  int v17;
  _BOOL4 v18;

  v18 = ((uint64_t (*)(_QWORD, uint64_t))*(&off_1E31525C0 + (v16 ^ 0x6E5)))(((((v16 - 1511) | 0x3D1) ^ (v17 - 372)) + ((v16 - 1286) | 0x224)) ^ v15, 1644418179) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(a15 + 8 * ((29 * v18) ^ v16)) - 8))();
}

uint64_t sub_193C87910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  int v19;
  int v20;
  unsigned int v21;

  v21 = (a19 ^ v20) - (((a19 ^ v20) << (((v19 - 57) & 0x9F) + 117)) & 0xC4F2475C) + 1652106158;
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * ((21
                                * (((2 * v21) & 0xFFF9396E ^ 0xC4F0014C)
                                 + (v21 ^ (((v19 + 221) | 0x218) + 495302911))
                                 - 1080559762 != 1066701861)) ^ v19)))();
}

uint64_t sub_193C879C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  int v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(a8
                                        + 8
                                        * ((2478 * (v10 + v8 - 2147261623 >= (((v9 ^ 0xF7) - 1532188378) ^ 0xA4ACAAA9))) ^ v9))
                            - 4))();
}

uint64_t sub_193C87A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  return ((uint64_t (*)(void))(v11
                            + *(_QWORD *)(a8
                                        + 8 * ((((v10 + 1898) ^ 0x812) * ((unint64_t)(v9 - a1) < 0x20)) ^ v10))
                            - (v10
                             - v8
                             - 212)
                            - 8))();
}

uint64_t sub_193C87A74(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  int v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * ((481 * (v9 >= ((v8 + (a2 ^ v10) + 1046) ^ 0x49D))) ^ a2)) - 12))();
}

uint64_t sub_193C87AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v15 = (v11 + v10);
  v16 = *(_OWORD *)(v9 + v15 - 15);
  v17 = *(_OWORD *)(v9 + v15 - 31);
  v18 = a1 + v15;
  *(_OWORD *)(v18 - 15) = v16;
  *(_OWORD *)(v18 - 31) = v17;
  return ((uint64_t (*)(void))(*(_QWORD *)(a8
                                        + 8
                                        * ((586 * ((v13 ^ (v14 + 317) ^ 0x900) == (v12 & 0xFFFFFFE0))) ^ (v8 + v13 + 333)))
                            - 8))();
}

uint64_t sub_193C87B14(uint64_t a1)
{
  int v1;
  int v2;
  void (*v3)(unsigned int *);
  int v4;
  int v5;
  _DWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v5 = (v1 - 1321) | 0x300;
  *v8 = a1;
  *v7 = v2;
  v11 = (v5 - 16) ^ (69008221 * ((2 * (&v11 & 0x6AA5F38) - &v11 - 111828796) ^ 0x2AF7F2CE));
  v12 = v9;
  v3(&v11);
  v11 = (((v5 - 696052490) & 0x297CE7BF) + 826) ^ (69008221 * (&v11 ^ 0xD3A2520A));
  v12 = v10;
  v3(&v11);
  return v4 ^ 0xA3259451;
}

void sub_193C87DBC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 12) - 69008221 * ((-2 - ((~(_DWORD)a1 | 0x2A929A22) + (a1 | 0xD56D65DD))) ^ 0xF930C828);
  __asm { BR              X11 }
}

uint64_t sub_193C87EA8@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((((a1 + 468) | 4) - 808) * (v1 == 0)) ^ a1)) - 4))();
}

uint64_t sub_193C87EDC@<X0>(uint64_t (*a1)(uint64_t *)@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;

  v4 = 3804331 * (((&v6 | 0x2FF08CFF) + (~&v6 | 0xD00F7300)) ^ 0x5125A908);
  v9 = 0x1C4110BE041F984CLL;
  v10 = (v1 + 465) ^ v4;
  v6 = v3;
  v7 = v4 ^ 0xB4EEC679;
  v8 = v4 ^ 0x470A4E5B;
  result = a1(&v6);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(v3 - 0x592F4E5EA75AA576);
  return result;
}

void IPaI1oem5iL(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_193C88800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14)
{
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  a13 = -1501685844
      - 1224239923 * ((((2 * &a13) | 0x57790EF4) - &a13 + 1413707910) ^ 0x590F7AAD);
  v16 = sub_193CBCC34(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15
                                                      + 8 * ((1340 * (a14 == ((v14 - 1507359903) ^ 0x502110F))) ^ v14))
                                          - 4))(v16);
}

uint64_t sub_193C8888C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  a13 = &STACK[0x667A5DFFEA838F58];
  a14 = (831981571 * ((((2 * &a13) | 0x6EB41400) - &a13 - 928647680) ^ 0xAEFBDA24)) ^ 0x15E;
  sub_193C8C02C((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16
                                                                                          + 8
                                                                                          * ((552 * (a15 == v15)) ^ 0x1FDu))
                                                                              - 4))(v17, v18, v19, v20, v21);
}

uint64_t sub_193C8891C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14, uint64_t a15, int a16)
{
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;

  v21 = (((&a13 | 0xF0A8A8D3) + (~&a13 | 0xF57572C)) ^ 0x21B5505) * v20;
  a15 = a12;
  a13 = (v16 ^ 0x77F46EBA) - v21 + ((2 * v16) & 0xEFE8DD74) - 97535008;
  a16 = v21 ^ 0x23D;
  v22 = (*(uint64_t (**)(unsigned int *))(v18 + 1832))(&a13);
  return (*(uint64_t (**)(uint64_t))(v19 + 8 * ((2399 * (a14 == v17)) ^ 0x16Au)))(v22);
}

uint64_t sub_193C889EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, unint64_t *a15, unsigned int a16, int a17, unsigned int a18)
{
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  v22 = 944348131
      * (((&a13 | 0x808DCC0) - &a13 + (&a13 & 0xF7F72338)) ^ 0xAB11788E);
  a13 = a12;
  a15 = &STACK[0x59F8E2836308BDA1];
  a14 = -824009839 - v22;
  a16 = 1779005819 - v22;
  a18 = v22 + v21 + 368399815;
  v23 = sub_193CBD2A0((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t))(v19 + 8 * (((a17 == v18) * (v20 + 1266)) ^ v21)))(v23);
}

uint64_t sub_193C88AA8()
{
  void (*v0)(unint64_t **);
  unsigned int v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unint64_t *v8;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unsigned int v13;

  v13 = v4
      - ((-50448051 - (&v11 ^ 0x3FA452D0 | 0xFCFE394D) + (&v11 ^ 0x3FA452D0 | 0x301C6B2)) ^ 0x9FBC302C)
      * v5
      + 489;
  v11 = &STACK[0xCB258A928C465B9];
  v12 = v8;
  (*(void (**)(unint64_t **))(v2 + 8 * (v4 - 310)))(&v11);
  LODWORD(v12) = v4
               - 241568881 * (((&v11 | 0xA6DEC391) - (&v11 & 0xA6DEC391)) ^ 0x70CFC7D3)
               + 91;
  v11 = v8;
  sub_193C9B7D8((uint64_t)&v11);
  if (HIDWORD(v12) == v1 + v4 + 147 - 509)
    v6 = v9;
  else
    v6 = HIDWORD(v12);
  v12 = v8;
  LODWORD(v11) = (v4 + 631) ^ (((((2 * &v11) | 0x6D7F8A62) - &v11 - 918537521) ^ 0xE51D973B)
                             * v3);
  v0(&v11);
  v12 = v10;
  LODWORD(v11) = (v4 + 631) ^ ((&v11 ^ 0xD3A2520A) * v3);
  v0(&v11);
  return v6 ^ v1;
}

void sub_193C88C48(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  unsigned int v12;
  _QWORD v13[2];
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  unint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  char v33;
  char v34;
  char v35;
  unint64_t *v37;
  int v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = 235795823 * (((a1 | 0x13AF364F) - (a1 & 0x13AF364F)) ^ 0x87027F16);
  v3 = *(_DWORD *)(a1 + 44) + v2;
  v4 = (v3 - 571695354) & 0x221367E8;
  v5 = 235795823
     * (((&v37 | 0x8C6845DB) - &v37 + (&v37 & 0x7397BA20)) ^ 0x18C50C82);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 24) + v2;
  v20 = 235795823 * (((a1 | 0x56D36B6F13AF364FLL) - (a1 & 0x56D36B6F13AF364FLL)) ^ 0x5E63D19187027F16);
  v8 = v6 ^ v2;
  v38 = v5 ^ 0xDDB4597;
  v39 = v3 + v5 + 426522968;
  v26 = &STACK[0x3C058A92099E3739];
  v37 = &STACK[0x3C058A92099E3739];
  sub_193C8F838((uint64_t)&v37);
  v9 = v7;
  v10 = v3;
  v11 = (char *)*(&off_1E31525C0 + (v3 ^ 0x49)) - 12;
  v27 = v4 + *(_QWORD *)&v11[8 * v10] - 1832;
  v19 = v8 + 828752424;
  v18 = v8 - 2139206159;
  v16 = v8 - 2079465495;
  v15 = v8 + 1790591051;
  v13[1] = (char *)&v13[-182587691] + 4;
  v31 = v10 ^ 0x7F4;
  v28 = v10;
  v29 = 145 * (v10 ^ 0x34);
  v14 = v10 ^ 0xF4;
  v17 = v10 ^ 0xF4u;
  v30 = v17;
  v24 = vdupq_n_s32(0xA3259451);
  v25 = vdupq_n_s32(0x23259459u);
  v23 = vdupq_n_s32(0x23259457u);
  v21 = a1;
  v22 = *(_QWORD *)(a1 + 32);
  v12 = v9 - ((2 * v9 + 419414746) & 0xA5541190) + 1596582453;
  v32 = (HIBYTE(v12) ^ 0xD2) - 2 * ((HIBYTE(v12) ^ 0xD2) & ((v4 + 114) ^ 8) ^ HIBYTE(v12) & ((v4 ^ 0xA1) - 121)) + 18;
  v33 = (BYTE2(v12) ^ 0xAA) - 2 * ((BYTE2(v12) ^ 0xAA) & 0x17 ^ BYTE2(v12) & 5) + 18;
  v34 = (((unsigned __int16)(v9 - ((2 * v9 - 15654) & 0x1190) - 5579) >> 8) ^ 8) - ((v12 >> 7) & 0x24) + 18;
  v35 = (v9 - ((2 * v9 - 38) & 0x90) + 53) ^ 0xDA;
  __asm { BR              X9 }
}

uint64_t sub_193C89028@<X0>(int a1@<W1>, uint64_t a2@<X4>, uint64_t a3@<X6>, int a4@<W8>)
{
  int v4;
  char v5;
  int v6;
  uint64_t v7;
  unsigned int v8;

  v8 = 25 * (v4 ^ 0x69C);
  *(_BYTE *)(a2 + (v8 ^ (a1 + 1158)) + v6) = v5;
  *(_BYTE *)(a2 + (a4 - 1423195965)) = *(_BYTE *)(a3 + 1);
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (int)(v8 ^ 0x7DF)) - (v8 ^ 0x2D1)))();
}

uint64_t sub_193C8A37C@<X0>(uint64_t a1@<X4>, uint64_t a2@<X6>, int a3@<W8>)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  *(_BYTE *)(a1 + (v6 + a3 + 1)) = *(_BYTE *)(a2
                                                          + (((v4 - 1823481944) & 0x6CB01DB3 ^ 0xFFFFFFCELL) & (v5 + 4222968255)));
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (v4 ^ (1997 * ((v3 & 0xFFFFFFFC) == 71999040)))) - 4))();
}

uint64_t sub_193C8A3EC@<X0>(uint64_t a1@<X4>, uint64_t a2@<X6>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t (*a22)(uint64_t))
{
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v25 = (v22 - 15323234) & 0xE9CDBD;
  *(_BYTE *)(a1 + (a3 + 2)) = *(_BYTE *)(a2 + ((v25 + 4294967246) & (v23 + 2)));
  v26 = 831981571 * ((259816040 - ((v24 - 160) | 0xF7C7A68) + ((v24 - 160) | 0xF0838597)) ^ 0x692255B3);
  *(_QWORD *)(v24 - 152) = a21;
  *(_DWORD *)(v24 - 160) = v26 ^ 0x6C6C5A2F;
  *(_DWORD *)(v24 - 156) = v26 + v25 + 174;
  v27 = sub_193CA900C(v24 - 160);
  return a22(v27);
}

uint64_t sub_193C8A494@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6)
{
  int v6;
  uint64_t v7;
  _BOOL4 v8;
  unsigned int v9;
  int v10;
  _BOOL4 v11;

  v8 = a6 < 0x85BFF9C9;
  v9 = v6 - 1051 + a1 + 1100666876;
  v10 = v8 ^ (v9 < 0x85BFF9C9);
  v11 = v9 < a6;
  if (!v10)
    v8 = v11;
  return (*(uint64_t (**)(void))(v7 + 8 * ((2 * v8) | (4 * v8) | v6)))();
}

uint64_t sub_193C8A4F4@<X0>(unsigned int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, char a6@<W7>, int a7@<W8>)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;

  v13 = a3 < a1;
  *(_BYTE *)(a5 + (a4 ^ v10) + v7) = *(_BYTE *)(v12 + (a7 + v9))
                                   + (a6 | ~(2 * *(_BYTE *)(v12 + (a7 + v9))))
                                   + 19;
  if (v13 == a2 + a7 + 23 < a1)
    v13 = a2 + a7 + 23 < a3;
  return (*(uint64_t (**)(void))(v11 + 8 * ((2 * v13) | (4 * v13) | v8)))();
}

uint64_t sub_193C8A55C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v34;

  v34 = a4 ^ 0x69Bu;
  v28 = (a4 - 5) | 0x20;
  v29 = 831981571 * ((-562816871 - ((v27 - 160) | 0xDE741899) + ((v27 - 160) | 0x218BE766)) ^ 0xB82A3742);
  *(_DWORD *)(v27 - 160) = v29 ^ a12;
  *(_DWORD *)(v27 - 156) = v29 + a4 + 201;
  *(_QWORD *)(v27 - 152) = a26;
  v30 = sub_193CA900C(v27 - 160);
  v31 = v28 ^ 0x12 ^ STACK[0x2AC] & 0x3F;
  *((_BYTE *)&STACK[0x268] + v31) = -110;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v26 + 8 * ((1143 * (v31 > 0x37)) ^ a4)) - v34 + 1673))(v30);
}

uint64_t sub_193C8A66C@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8 * (int)(((a1 == v1 - 1614) * ((v1 + 97850450) & 0xFA2AE77F ^ 0x20B)) ^ v1))
                            - 4))();
}

uint64_t sub_193C8A6C4()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((46 * ((v0 ^ v1 ^ 0x26E ^ 0x2Du) > 7)) ^ v1)) - 8))();
}

uint64_t sub_193C8A6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a5 + v5 - 1460701812) = v9;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v8
                                                      + 8
                                                      * ((511 * (((((v7 - 575) | 0x11u) + 522) ^ 0x233) != (v6 & 0x38))) ^ (((v7 - 575) | 0x11) + 714)))
                                          - 12))(-1460701812);
}

uint64_t sub_193C8A75C()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((488 * (v0 - 1460701812 < ((v2 + 1184073126) & 0xB96C7B6F) - 271)) ^ (v2 + 1135)))
                            - 12))();
}

uint64_t sub_193C8A7B8()
{
  int v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = v1;
  v5 = v2 + v1;
  if ((unint64_t)(v5 + 1) > 0x38)
    v6 = v5 + 1;
  else
    v6 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((15
                                          * (v6 - v4 + 1460701812 < (unint64_t)((19 * (v0 ^ 0x16E)) ^ 0x33Au)
                                                                  - 41)) ^ v0))
                            - 12))();
}

uint64_t sub_193C8A828@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)(a3 + v4 + (a1 ^ v5)) = v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (int)((((v3 & 0xFFFFFFFFFFFFFFF8) == 8) * v7) ^ a1)) - 4))();
}

uint64_t sub_193C8A864@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  *(_QWORD *)(v2 + (a1 ^ v3)) = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (int)(((v1 == 0) * v5) ^ a1)) - 4))();
}

uint64_t sub_193C8A890()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((1512 * (v0 == v1)) ^ v2)) - 12))();
}

uint64_t sub_193C8A8C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  *(_BYTE *)(a5 + v5 + v7) = v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * (((2 * ((unint64_t)(v5 + 1 + v7) < 0x38)) | (8
                                                                                            * ((unint64_t)(v5 + 1 + v7) < 0x38))) ^ (v6 + 1135)))
                            - 12))();
}

void sub_193C8A8F4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, int a11, char a12)
{
  char v12;
  int v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  char v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  char v23;
  char v24;
  unint64_t v25;

  v13 = LOBYTE(STACK[0x2C8]) ^ 0x1C;
  if (v13 == 1)
  {
    v20 = STACK[0x2AC];
    v21 = STACK[0x2A8];
    v22 = (8 * LODWORD(STACK[0x2AC])) ^ 0x18;
    v23 = ~(2 * v22);
    v14 = (a3 - 46) | 0x60;
    v24 = v14 + v22;
    LOBYTE(v22) = (LODWORD(STACK[0x2AC]) >> 5) ^ 0x21;
    LOBYTE(STACK[0x2A0]) = v24 + (v23 | 0xDF) - 80;
    v18 = 36;
    LOBYTE(STACK[0x2A1]) = v22 - ((v20 >> 4) & 0x24) + 18;
    LOBYTE(STACK[0x2A2]) = ((v20 >> 13) ^ 0xE5) - ((v20 >> 12) & 0x24) + 18;
    LOBYTE(STACK[0x2A3]) = ((v20 >> 21) ^ 0x4B) - ((2 * ((v20 >> 21) ^ 0x4B)) & 0x24) + 18;
    HIDWORD(v25) = v21 ^ 2;
    LODWORD(v25) = v20 ^ 0x60000000;
    LOBYTE(STACK[0x2A4]) = (v25 >> 29) - ((2 * (v25 >> 29)) & 0x24) + 18;
    LOBYTE(STACK[0x2A5]) = ((v21 >> 5) ^ 7) - 2 * (((v21 >> 5) ^ 7) & v12 ^ (v21 >> 5) & 8) + 18;
    LOBYTE(STACK[0x2A6]) = ((v21 >> 13) ^ 0xAE) - ((2 * ((v21 >> 13) ^ 0xAE)) & 0x24) + 18;
    v17 = v21 >> 21;
    v19 = (v21 >> 21) ^ 0x69;
  }
  else
  {
    if (v13 != 2)
      goto LABEL_6;
    v14 = 7 * a12;
    v17 = STACK[0x2A8];
    v15 = STACK[0x2AC];
    LOBYTE(STACK[0x2A0]) = ((7 * a12 + 6) ^ (LODWORD(STACK[0x2A8]) >> 21))
                         + (a8 | ~(LODWORD(STACK[0x2A8]) >> 20))
                         + 19;
    LOBYTE(STACK[0x2A1]) = ((v17 >> 13) ^ 0xAE) - ((2 * ((v17 >> 13) ^ 0xAE)) & 0x24) + 18;
    HIDWORD(v16) = v17 ^ 2;
    LODWORD(v16) = v15 ^ 0x60000000;
    LOBYTE(STACK[0x2A2]) = ((v17 >> 5) ^ 7) - ((2 * ((v17 >> 5) ^ 7)) & 0x24) + 18;
    LOBYTE(STACK[0x2A3]) = (v16 >> 29) - ((2 * (v16 >> 29)) & 0x24) + 18;
    LOBYTE(STACK[0x2A4]) = ((v15 >> 21) ^ 0x4B) + (a8 | ~(2 * ((v15 >> 21) ^ 0x4B))) + 19;
    LOBYTE(STACK[0x2A5]) = ((v15 >> 13) ^ 0xE5) - ((v15 >> 12) & 0x24) + 18;
    LOBYTE(STACK[0x2A6]) = ((v15 >> 5) ^ 0x21) - ((v15 >> 4) & 0x24) + 18;
    LOBYTE(v17) = (8 * v15) ^ 0x18;
    v18 = 32;
    v19 = v17;
  }
  LOBYTE(STACK[0x2A7]) = v19 + ((v14 - 50) ^ 0x23) - (v18 & (2 * v17));
LABEL_6:
  JUMPOUT(0x193C895B4);
}

uint64_t sub_193C8AAFC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((((v2 - 549) ^ 0x72) * (v1 != v0)) ^ v2)) - 8))();
}

uint64_t sub_193C8AB40@<X0>(uint64_t a1@<X4>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;
  int v6;
  uint64_t v7;

  *(_BYTE *)(a1 + v2 + v3) = v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * ((14 * (v6 & ~(a2 ^ v5 ^ ((unint64_t)(v2 + 1 + v3) < 0x40)))) ^ (a2 + 516)))
                            - 8))();
}

void sub_193C8AB80()
{
  JUMPOUT(0x193C895B0);
}

uint64_t sub_193C8AB9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;

  if (a30 == 2)
    return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v35
                                                                 + 8
                                                                 * ((111 * (LODWORD(STACK[0x2C4]) != 1497258463)) ^ (a3 + 1289)))
                                                     - ((a3 - 41) | 0x532u)
                                                     + 1334))(a1, a13);
  if (a30 == 1)
    return ((uint64_t (*)(void))(*(_QWORD *)(v35 + 8 * ((3467 * (LODWORD(STACK[0x2C4]) != 1497258463)) ^ (a3 + 1289)))
                              - (((a3 - 39) | 0x530u) ^ 0x53ELL)))();
  v37 = (4 * a3) ^ 0x434u;
  v38 = ((v37 - 0x80C12B4C0100F35) ^ (unint64_t)&a35)
      + ((2 * (_QWORD)&a35) & 0xEFE7DA967FDFEB70)
      + 0x7B7F3AF5FB7E7C45;
  LOBYTE(STACK[0x2C3]) = (v38 ^ 0xBA) * (v38 + 17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v35
                                                      + 8
                                                      * (int)((308 * (((v37 - 1215) ^ 0x31) == 91)) ^ v37))
                                          - 12))(a17);
}

void sub_193C8AEE8()
{
  JUMPOUT(0x193C8AEBCLL);
}

uint64_t sub_193C8AEF4@<X0>(uint64_t *a1@<X0>, int a2@<W3>, int a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  v4 = a1[2];
  v5 = *a1;
  *(_QWORD *)(v3 - 176) = 0x1212121212121212;
  *(_QWORD *)(v3 - 168) = 0x1212121212121212;
  v6 = ((((v3 - 160) | 0x6EDEB25E) - ((v3 - 160) & 0x6EDEB25E)) ^ 0xFA73FB07) * a2;
  *(_DWORD *)(v3 - 152) = v6 + 1334526211;
  *(_QWORD *)(v3 - 160) = v4;
  *(_QWORD *)(v3 - 144) = v3 - 196;
  *(_QWORD *)(v3 - 136) = v5;
  *(_QWORD *)(v3 - 120) = v3 - 176;
  *(_DWORD *)(v3 - 124) = (a3 + 1878) ^ v6;
  result = ((uint64_t (*)(uint64_t))((char *)*(&off_1E31525C0 + (a3 ^ 0xB1)) - 12))(v3 - 160);
  *((_DWORD *)a1 + 10) = *(_DWORD *)(v3 - 128);
  return result;
}

void sub_193C8AFD8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 32) + 1543737703 * ((150514792 - (a1 | 0x8F8AC68) + (a1 | 0xF7075397)) ^ 0x89F303EB);
  __asm { BR              X15 }
}

uint64_t sub_193C8B110@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  _BOOL4 v16;

  v14 = v12 - 1166142784;
  *(_DWORD *)(a9 + 4 * (v9 + a1)) = *(_DWORD *)(*(_QWORD *)(v11 - 0x2D6CAD6C03423C33) + 4 * (v9 + a1));
  v16 = v9 + 1815991129 < 981340864 && v9 + 1815991129 >= v14;
  return ((uint64_t (*)(void))(*(_QWORD *)(v13 + 8 * ((1418 * v16) ^ (v10 - 634))) - 4))();
}

uint64_t sub_193C8B194()
{
  int v0;
  int v1;
  unsigned int v2;
  uint64_t v3;
  _BOOL4 v4;

  if (v2 > 0x1D0149E8 != v0 + 348026543 < -486623721)
    v4 = v2 > 0x1D0149E8;
  else
    v4 = v0 + 348026543 < (int)((((v1 + 371) | 0xC) ^ 0x62FEBEBB) + v2);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((122 * v4) ^ v1)) - 4))();
}

uint64_t sub_193C8B220@<X0>(int a1@<W0>, int a2@<W5>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _BOOL4 v19;
  int v20;
  int v21;
  _BOOL4 v22;

  v19 = v17 > v16;
  *(_DWORD *)(a11 + 4 * (((v12 + 383) ^ (a3 + 1948)) + v11)) = a2 + 1638;
  v20 = v11 + 1 + v14;
  v21 = v19 ^ (v20 < v13);
  v22 = v20 < v15;
  if (!v21)
    v19 = v22;
  return ((uint64_t (*)(void))(*(_QWORD *)(v18 + 8 * ((v19 * a1) ^ v12)) - 4))();
}

uint64_t sub_193C8B27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 + 8 * (v4 ^ (394 * (v3 != 0)))) - 4))(a1, a2, a3);
}

uint64_t sub_193C8B2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  _BOOL4 v24;

  v21 = (*(_DWORD *)(*(_QWORD *)(a10 + 8) - 0x3DD47FB64BA505D2) - 1892503891) * (*a16 ^ ((v17 ^ 0x51C) + 748569486));
  v22 = 69008221 * ((((v20 - 128) | 0xBBF431BB) - (v20 - 128) + ((v20 - 128) & 0x440BCE40)) ^ 0x685663B1);
  *(_DWORD *)(v20 - 112) = ((v21 ^ 0xBFDE2EF6) + 1366941600 + ((2 * v21) & 0x7FBC5DEC)) ^ v22;
  *(_QWORD *)(v20 - 120) = a12;
  *(_QWORD *)(v20 - 104) = a11;
  *(_DWORD *)(v20 - 128) = v22 + v17 - 455;
  *(_DWORD *)(v20 - 124) = 1558770207 - v22;
  v23 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E31525C0 + v17 - 1465) - 8))(v20 - 128);
  v24 = (int)(v16 + 1411480577 + v19) > 1411480830;
  if (v16 > 0x2BDE8302)
    v24 = 1;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18 + 8 * ((3404 * !v24) ^ v17)) - 4))(v23);
}

void sub_193C8B448()
{
  JUMPOUT(0x193C8B2FCLL);
}

uint64_t sub_193C8B450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t a10, uint64_t a11)
{
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  v15 = 3804331 * ((v14 + 1452796601 - 2 * ((v14 - 128) & 0x5697EB39)) ^ 0x2842CECF);
  *(_QWORD *)(v14 - 120) = a11;
  *(_DWORD *)(v14 - 128) = v13 - v15 + 376;
  *(_DWORD *)(v14 - 124) = (((32 * v11) ^ 0x3EEAE4EF) - 409108486 + ((v11 << (((v13 + 81) ^ 0xFB) + 80)) & 0x7DD5C9C0)) ^ v15;
  sub_193C8EA0C(v14 - 128);
  return (*(uint64_t (**)(void))(v12 + 8 * ((433 * ((*a9 - 1558770208) > 0x7FFFFFFE)) ^ v13)))();
}

uint64_t sub_193C8B518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v16 - 112) = &STACK[0x2D6CAD6C03423C5B];
  *(_DWORD *)(v16 - 120) = v14 + 831981571 * ((v16 - 128) ^ 0x99A1D024) + 9;
  *(_QWORD *)(v16 - 128) = a12;
  sub_193C6EA8C(v16 - 128);
  *(_DWORD *)(v16 - 104) = (v14 - 52) ^ (69008221
                                       * ((((v16 - 128) | 0xF08CD861) + (~(v16 - 128) | 0xF73279E)) ^ 0x232E8A6A));
  *(_QWORD *)(v16 - 112) = a12;
  *(_QWORD *)(v16 - 128) = v15;
  v17 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E31525C0 + (v14 ^ 0x175)) - 4))(v16 - 128);
  return (*(uint64_t (**)(uint64_t))(v13
                                            + 8
                                            * ((((*(_DWORD *)(v16 - 120) - 609386684) < 0xE8CD8542)
                                              * (v12 ^ (v14 + 882) ^ 0x4F0)) ^ v14)))(v17);
}

uint64_t sub_193C8B620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  int v16;
  uint64_t v17;
  int v18;

  if (a16 - 1558770207 >= 0)
    v18 = a16 - 1558770207;
  else
    v18 = ~(a16 - 1558770208);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v17
                                                               + 8
                                                               * ((3831
                                                                 * ((int)((v16 ^ 0x218)
                                                                        + (v18 ^ 0xFDF9F39F)
                                                                        + ((2 * v18) & 0xFBF3E73E)
                                                                        + 33948850) >= 0)) ^ v16 ^ 0x218))
                                                   - 731 * (v16 ^ 0x5B4u)
                                                   + 1454))(472035198, 2402918904);
}

uint64_t sub_193C8B6DC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11
                                        + 8 * (((*(_DWORD *)(v9 + 4 * a6) != ((a5 + v10) & a1) + a8) * v8) ^ a5))
                            - 8))();
}

void sub_193C8B708()
{
  JUMPOUT(0x193C8B6ACLL);
}

uint64_t sub_193C8B71C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;

  v19 = (v12 - 1318160686) & 0x4E91856D;
  v20 = 3804331 * ((((2 * (v18 - 128)) | 0x5ABE4F06) - (v18 - 128) - 761210755) ^ 0x538A0275);
  *(_QWORD *)(v18 - 128) = v16;
  *(_DWORD *)(v18 - 120) = v20 + v12 + 1061;
  *(_DWORD *)(v18 - 116) = v14 - v20 + (v19 ^ 0x33E2A987);
  sub_193CB3714(v18 - 128);
  *(_DWORD *)(v18 - 104) = (v19 - 52) ^ (69008221
                                       * ((2 * ((v18 - 128) & 0x473259F0) - (v18 - 128) - 1194482164) ^ 0x6B6FF406));
  *(_QWORD *)(v18 - 128) = v15;
  *(_QWORD *)(v18 - 112) = a12;
  v21 = v17(v18 - 128);
  return (*(uint64_t (**)(uint64_t))(v13
                                            + 8
                                            * ((1529
                                              * ((v19 ^ 0x5F2u) - 609387899 + *(_DWORD *)(v18 - 120) < ((731 * (v19 ^ 0x14F)) ^ 0xE8CD80F4))) ^ v19)))(v21);
}

uint64_t sub_193C8B850()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)(v6 - 104) = (v0 - 934) ^ (((~((v6 - 128) | 0x2B9E6B0B) + ((v6 - 128) & 0x2B9E6B0B)) ^ 0x7C3C6FE) * v2);
  *(_QWORD *)(v6 - 128) = v3;
  *(_QWORD *)(v6 - 112) = v4;
  v7 = v5(v6 - 128);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1
                                                      + 8
                                                      * (((*(_DWORD *)(v6 - 120) <= 0x245280BBu) * ((v0 + 78) ^ 0x562)) ^ v0))
                                          - 8))(v7);
}

uint64_t sub_193C8B8E8()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 - 120) = v3;
  *(_QWORD *)(v5 - 112) = v4;
  *(_DWORD *)(v5 - 128) = ((v0 ^ 0x1DD) - 863) ^ (268847287
                                                * ((-261043508 - ((v5 - 128) | 0xF070CACC) + ((v5 - 128) | 0xF8F3533)) ^ 0xF025241B));
  v6 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E31525C0 + (v0 ^ 0x509)) - 4))(v5 - 128);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1
                                                      + 8
                                                      * (int)((((((v0 ^ 0x1DD) + 415219855) & 0xE7403FAD) - 721)
                                                             * (v2 == 715901410)) ^ v0 ^ 0x1DD))
                                          - (((v0 ^ 0x1DDu) + 61) ^ 0x505)))(v6);
}

uint64_t sub_193C8B9BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 - 128) = v15;
  *(_QWORD *)(v17 - 112) = a12;
  *(_DWORD *)(v17 - 104) = (v12 - 1012) ^ (((~((v17 - 128) | 0xAAD5428C) + ((v17 - 128) & 0xAAD5428C)) ^ 0x8688EF79)
                                         * v14);
  v18 = v16(v17 - 128);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v13
                                                      + 8
                                                      * (((*(_DWORD *)(v17 - 120) > 0x245280BCu) * ((v12 ^ 0x440) + 660)) ^ v12))
                                          - 8))(v18);
}

uint64_t sub_193C8BA54()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)(v2 - 112) = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v2 - 128) = v1;
  *(_DWORD *)(v2 - 120) = v0
                        + 831981571
                        * ((((v2 - 128) ^ 0xA16FC9ED) & 0xF0BA43E2 | ~((v2 - 128) ^ 0xA16FC9ED | 0xF0BA43E2)) ^ 0x378BA5D4)
                        - 1296;
  return sub_193C6EA8C(v2 - 128);
}

void sub_193C8BB14(_DWORD *a1)
{
  unsigned int v1;
  _DWORD v2[10];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = *a1 + 1543737703 * (a1 ^ 0x7EF4507C);
  v2[0] = v1
        - 1224239923 * ((-830449236 - (v2 | 0xCE8059AC) + (v2 | 0x317FA653)) ^ 0xC3CC5B84)
        - 1501686629;
  sub_193CBCC34(v2);
  __asm { BR              X8 }
}

uint64_t sub_193C8BC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  a13 = &STACK[0x667A5DFFEA838F48];
  a14 = (v16 - 435) ^ (831981571
                     * (((&a13 | 0xCBA6942) - &a13 + (&a13 & 0xF34596B8)) ^ 0x951BB966));
  sub_193C8C02C((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17
                                                                                          + 8
                                                                                          * ((44 * (a15 == v15)) ^ v16))
                                                                              - ((v16 - 23) ^ 0x2F2)))(v18, v19, v20, v21, v22);
}

uint64_t sub_193C8BCAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14, uint64_t a15, int a16)
{
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;

  v23 = (((&a13 ^ 0xB66C2914 | 0xC275213A) - ((&a13 ^ 0xB66C2914) & 0xC275213A)) ^ 0x86AAF5F9)
      * v21;
  a13 = (((*(_DWORD *)(v16 + 8) + v20) * (v18 + 816685651) - 1329336323) ^ 0x7B7EEFDF)
      - v23
      + ((2 * ((*(_DWORD *)(v16 + 8) + v20) * (v18 + 816685651) - 1329336323)) & 0xF6FDDFBE)
      - 156943685;
  a15 = a10;
  a16 = (v18 - 189) ^ v23;
  v24 = (*(uint64_t (**)(unsigned int *))(v19 + 8 * (v18 ^ 0x21F)))(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v22 + 8 * ((489 * (a14 == v17)) ^ v18)) - 4))(v24);
}

uint64_t sub_193C8BD9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, unint64_t *a15, unsigned int a16, int a17, int a18)
{
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;

  v21 = 944348131 * (((&a13 | 0x93D4E324) - (&a13 & 0x93D4E324)) ^ 0x30CD476A);
  a15 = &STACK[0x59F8E2836308BDB1];
  a14 = 393668540 - v21;
  a16 = 1779005819 - v21;
  a18 = v21 + 368399415 + v19;
  a13 = a10;
  v22 = sub_193CBD2A0((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20 + 8 * ((1313 * (a17 == v18)) ^ v19))
                                          - ((v19 - 746) | 0x301u)
                                          + 781))(v22);
}

uint64_t sub_193C8BE68()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  void (*v5)(unint64_t **);
  int v6;
  int v7;
  uint64_t result;
  unint64_t *v9;
  int v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  unsigned int v14;

  v12 = &STACK[0xCB258A928C465B9];
  v13 = v11;
  v14 = v2
      - ((470807635 - (&v12 ^ 0x89DB907E | 0x1C0FF453) + (&v12 ^ 0x89DB907E | 0xE3F00BAC)) ^ 0xC9323F9C)
      * v6
      + 89;
  (*(void (**)(unint64_t **))(v4 + 8 * (v2 - 710)))(&v12);
  LODWORD(v13) = v2
               - 241568881
               * (((&v12 | 0x2504E9B8) - &v12 + (&v12 & 0xDAFB1640)) ^ 0xF315EDFA)
               - 309;
  v12 = v11;
  sub_193C9B7D8((uint64_t)&v12);
  if (HIDWORD(v13) == v1 + v2 + 23 - 785)
    v7 = v10;
  else
    v7 = HIDWORD(v13);
  LODWORD(v12) = (v2 + 231) ^ (((2 * (&v12 & 0x5F849EB8) - &v12 - 1602526912) ^ 0x73D9334A)
                             * v3);
  v13 = v11;
  v5(&v12);
  v13 = v9;
  LODWORD(v12) = (v2 + 231) ^ ((((&v12 | 0x7E649EEA) - (&v12 & 0x7E649EEA)) ^ 0xADC6CCE0)
                             * v3);
  result = ((uint64_t (*)(unint64_t **))v5)(&v12);
  *(_DWORD *)(v0 + 4) = v7;
  return result;
}

void sub_193C8C02C(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 8) ^ (831981571
                            * (((a1 ^ 0x8A003497) - 575953088 - 2 * ((a1 ^ 0x8A003497) & 0xDDABA740)) ^ 0xCE0A43F3));
  v2 = *(_QWORD *)((char *)*(&off_1E31525C0 + (v1 ^ 0x126))
                 + 8
                 * ((688
                   * (((uint64_t (*)(uint64_t, uint64_t))*(&off_1E31525C0 + v1 - 124))(32, 0x101004023FF3BD5) != 0)) ^ v1)- 12)- 8;
  __asm { BR              X8 }
}

uint64_t sub_193C8C0E0(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0x2E16EEF62E16EEF6;
  *(_QWORD *)(result + 16) = 0xA1444008793D6ADCLL;
  *(_DWORD *)(result + 24) = -1557818287;
  *(_QWORD *)(v2 - 0x667A5DFFEA838F40) = result + 0x592F4E5EA75AA58ELL;
  *((_DWORD *)v1 + 3) = -1557818287;
  return result;
}

void sub_193C8C160(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24) + 1543737703 * (((a1 | 0xC7921CD6) - (a1 & 0xC7921CD6)) ^ 0xB9664CAA);
  __asm { BR              X10 }
}

uint64_t sub_193C8C238()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 | (4 * (v2 == 0)) | (32 * (v2 == 0))))
                            - ((v0 - 781884113) & 0x2E9A97DA)
                            + 1486))();
}

uint64_t sub_193C8C284@<X0>(uint64_t (*a1)(uint64_t *)@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;

  v4 = 3804331 * ((((2 * &v6) | 0x4F3D1860) - &v6 + 1482781648) ^ 0xD94BA9C6);
  v6 = v3;
  v10 = (v1 - 954) ^ v4;
  v9 = 0x1C4110BE041F984CLL;
  v7 = v4 ^ 0xB439F1B5;
  v8 = v4 ^ 0x470A4E5B;
  result = a1(&v6);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(v3 - 0x592F4E5EA75AA576);
  return result;
}

void Ejwmn62s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  int v6;

  if (a4)
    v5 = a5 == 0;
  else
    v5 = 1;
  v6 = v5;
  __asm { BR              X9 }
}

uint64_t sub_193C8C8DC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int a15, int a16)
{
  uint64_t v16;
  uint64_t v17;

  *a4 = 0;
  *a5 = 0;
  a15 = -1501685844
      - 1224239923
      * (((&a15 | 0xFCE32FAD) - &a15 + (&a15 & 0x31CD050)) ^ 0xE50D27A);
  v17 = sub_193CBCC34(&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v16 + 8 * ((404 * (a16 == -1557818287)) ^ 0x26Fu)) - 8))(v17);
}

uint64_t sub_193C8C978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, unsigned int a16, int a17)
{
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  a15 = &STACK[0x667A5DFFEA838F68];
  a16 = (831981571
       * ((2 * ((&a15 ^ 0xE6D44A74) & 0x2E286DC8) - (&a15 ^ 0xE6D44A74) - 774401482) ^ 0xAEA20866)) ^ 0x15E;
  sub_193C8C02C((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 + 8 * ((1538 * (a17 == -1557818287)) ^ v18))
                                                                                                - 8))(v19, v20, v21, v22, v23, v24, v25);
}

uint64_t sub_193C8CA24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned int a18)
{
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;

  v24 = (((&a15 | 0x52020C33) - (&a15 & 0x52020C33)) ^ 0xA0B1F1E4) * v21;
  a16 = a14;
  LODWORD(a15) = (v20 ^ 0x7B243EBA) + ((2 * v20) & 0xF6487D74) - v24 - 151000096;
  LODWORD(a17) = v24 ^ 0x23D;
  (*(void (**)(uint64_t *))(v23 + 1832))(&a15);
  v25 = 69008221 * ((&a15 - 1560919096 - 2 * (&a15 & 0xA2F643C8)) ^ 0x715411C2);
  a15 = v18;
  a18 = ((v19 ^ 0x6E6BDA3E) + 623 + ((2 * v19) & 0xDCD7B47C) - 174735983) ^ v25;
  a17 = a14;
  HIDWORD(a16) = v25 + 757;
  v26 = ((uint64_t (*)(uint64_t *))(*(_QWORD *)(v23 + 1232) - 4))(&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v22 + 8 * ((1287 * ((_DWORD)a16 == -1557818287)) ^ 0x32Bu))
                                          - 4))(v26);
}

uint64_t sub_193C8CB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16, unint64_t *a17, unsigned int a18, int a19, unsigned int a20)
{
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v23 = 944348131
      * ((-508839385 - (&a15 ^ 0xCF5F08AA | 0xE1ABBA27) + (&a15 ^ 0xCF5F08AA | 0x1E5445D8)) ^ 0x7212E93C);
  a15 = a14;
  a20 = v23 + v22 + 368399366;
  a18 = 1779005819 - v23;
  a16 = 2002283823 - v23;
  a17 = &STACK[0x59F8E2836308BDB1];
  v24 = sub_193CBD2A0((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * (((a19 == v20) * (v22 + 859)) ^ v22))
                                          - ((v22 + 308) ^ 0x45BLL)))(v24);
}

uint64_t sub_193C8CC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, uint64_t a13, uint64_t a14, unint64_t *a15, unint64_t *a16, unint64_t *a17, unint64_t *a18)
{
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  a16 = &STACK[0x1EF0C0D0C0C764E6];
  a17 = &STACK[0x11E90ECB0B9030B9];
  a18 = a12;
  LODWORD(a15) = v18
               - 2078219279 * (((&a15 | 0xF7E52AE4) - (&a15 & 0xF7E52AE4)) ^ 0x2D1FBC90)
               - 231789909;
  sub_193CBC6B8((uint64_t)&a15);
  LODWORD(a17) = v18
               - ((((2 * &a15) | 0xCEB34AEA) - &a15 + 413555339) ^ 0x4440013B) * v19
               - 268;
  a15 = &STACK[0xCB258A928C46679];
  a16 = a12;
  (*(void (**)(unint64_t **))(v21 + 8 * (int)(v18 - 1067)))(&a15);
  LODWORD(a16) = v18
               - 241568881 * ((&a15 + 1485145545 - 2 * (&a15 & 0x588585C9)) ^ 0x8E94818B)
               - 666;
  a15 = a12;
  v22 = sub_193C9B7D8((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20
                                                      + 8 * (((HIDWORD(a16) == -1557818287) * (v18 ^ 0x6F1)) ^ v18))
                                          - 8))(v22);
}

uint64_t sub_193C8CDE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  int v14;
  int v15;
  uint64_t v16;

  return ((uint64_t (*)(void))(*(_QWORD *)(v16
                                        + 8
                                        * (((a14 == v14) * ((v15 - 308) ^ 0x894 ^ (v15 + 458729630) & 0x1BF7)) ^ v15))
                            - 8))();
}

uint64_t sub_193C8CE24@<X0>(int a1@<W8>, uint64_t a2, int a3, int a4)
{
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8 * (((((a1 - 1525) | 0x2B) ^ (a1 + 2028946314) & 0x37DF ^ 0x690) * (a4 != v4)) ^ a1)))();
}

uint64_t sub_193C8CE74()
{
  int v0;
  int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;

  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(v4 + 8 * (int)(v2 - 893)))(v0 ^ (v1 + 809) ^ (v2 - 4129908) & 0x1033F, 2089196818) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((487 * v5) ^ v2)) - 8))();
}

uint64_t sub_193C8CED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;

  v14 = (a11 ^ v12) - (((a11 ^ v12) << ((v11 - 96) & 0x4B ^ 0x4A)) & 0xBE64E20E) + 1597141255;
  return ((uint64_t (*)(void))(*(_QWORD *)(v13
                                        + 8
                                        * ((2011
                                          * (((2 * v14) & 0xCFDFFFAA ^ (v11 - 1908089429))
                                           + (v14 ^ 0xB8DD8ED2)
                                           + 1610087083 == 1206385280)) ^ (v11 - 140)))
                            - 4))();
}

uint64_t sub_193C8CF84(uint64_t a1)
{
  int v1;
  int v2;
  _DWORD *v3;
  _QWORD *v4;
  void (*v5)(unsigned int *);
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  *v4 = a1;
  *v3 = v1;
  v7 = (v2 - 975) | 0x26B;
  v10 = (v2 + 14) ^ (69008221 * (((&v10 | 0xE40C7591) + (~&v10 | 0x1BF38A6E)) ^ 0x37AE279A));
  v11 = v8;
  v5(&v10);
  v10 = (v7 + 370) ^ (69008221
                    * (((&v10 | 0xDD199E6F) - &v10 + (&v10 & 0x22E66190)) ^ 0xEBBCC65));
  v11 = v9;
  v5(&v10);
  return 0;
}

void sub_193C8D3D8(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 + 241568881 * (((_DWORD)a1 - 348976960 - 2 * (a1 & 0xEB3308C0)) ^ 0x3D220C82);
  __asm { BR              X8 }
}

uint64_t sub_193C8D484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17, int a18)
{
  uint64_t v18;
  int v19;
  uint64_t v20;

  a17 = v19
      - 1224239923 * ((1406064801 - (&a17 | 0x53CED8A1) + (&a17 | 0xAC31275E)) ^ 0x5E82DA89)
      - 1501686685;
  v20 = sub_193CBCC34(&a17);
  return (*(uint64_t (**)(uint64_t))(v18 + 8 * ((1956 * (a18 == -1557818287)) ^ v19)))(v20);
}

uint64_t sub_193C8D508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, unsigned int a18, int a19)
{
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  a18 = (v21 - 491) ^ (831981571
                     * (((&a17 ^ 0xE7ABB374 | 0x8FB7293D)
                       - ((&a17 ^ 0xE7ABB374) & 0x8FB7293D)) ^ 0xF1BD4A6D));
  a17 = &STACK[0x667A5DFFEA838F70];
  sub_193C8C02C((uint64_t)&a17);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 8 * (((a19 == v19) * (((v21 + 273) | 0x221) ^ 0x141)) ^ v21)))(v22, v23, v24, v25, v26, v27, v28, v29, a9);
}

uint64_t sub_193C8D5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned int a18, uint64_t a19, unsigned int a20)
{
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  void (*v26)(uint64_t *);
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v29 = v20[4];
  v30 = v20[5];
  v24 = v20[1];
  v25 = 2 * &a17;
  a20 = v23 - 1502 - 1543737703 * (((v25 | 0xB4DA42AA) - &a17 + 630382251) ^ 0xA4997129);
  a19 = a15;
  a17 = v24;
  v26 = (void (*)(uint64_t *))(*(_QWORD *)(v22 + 8 * (v23 - 1520)) - 4);
  v26(&a17);
  a20 = v23 - 1502 - 1543737703 * (((v25 | 0xDD864E96) - &a17 + 289200309) ^ 0x90377737);
  a17 = v29;
  a19 = a15;
  v26(&a17);
  a17 = a15;
  a19 = v30;
  a18 = v23 + 268847287 * (((v25 | 0x8BDE90C4) - &a17 - 1173309538) ^ 0xBA45594A) + 314;
  v27 = ((uint64_t (*)(uint64_t *))(*(_QWORD *)(v22 + 8 * (v23 - 1501)) - 12))(&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * ((253 * (a20 == v23 - 1557819946)) ^ v23)) - 4))(v27);
}

uint64_t sub_193C8D718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned int a18, unint64_t *a19, unsigned int a20,int a21,int a22)
{
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  v26 = 944348131 * (((~&a17 & 0x2447FF3E) - (~&a17 | 0x2447FF3F)) ^ 0x875E5B71);
  a19 = &STACK[0x59F8E2836308BDB9];
  a17 = a15;
  a22 = v26 + 368398518 + v25;
  a20 = 1779005819 - v26;
  a18 = -2100643820 - v26;
  v27 = sub_193CBD2A0((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v23
                                                      + 8 * (((a21 == v22) * (((v25 - 1141) | 0x21) ^ 0xCD4)) ^ v25))
                                          - (v24 ^ 0x34D)))(v27);
}

uint64_t sub_193C8D7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, unint64_t *a18, unsigned int a19)
{
  uint64_t v19;
  uint64_t v20;
  int v21;
  void (*v22)(unint64_t **);
  uint64_t v23;

  a19 = v21 + 300 - 944348131 * ((&a17 - 1969872142 - 2 * (&a17 & 0x8A9622F2)) ^ 0x298F86BC);
  a17 = &STACK[0xCB258A928C46681];
  a18 = a13;
  v22 = *(void (**)(unint64_t **))(v20 + 8 * (v21 - 499));
  v22(&a17);
  a19 = v21
      + 300
      - 944348131
      * ((2 * ((&a17 ^ 0x3914D0E4) & 0x182157E8) - (&a17 ^ 0x3914D0E4) + 1742645268) ^ 0xFDD3DCBE);
  a17 = &STACK[0xCB258A928C46691];
  a18 = a13;
  v22(&a17);
  LODWORD(a18) = v21
               - 241568881
               * ((2 * ((&a17 ^ 0x1C56176) & 0x570860) - (&a17 ^ 0x1C56176) - 5703778) ^ 0x287C92AA)
               - 98;
  a17 = a13;
  v23 = sub_193C9B7D8((uint64_t)&a17);
  return (*(uint64_t (**)(uint64_t))(v19 + 8 * (((HIDWORD(a18) == v21 - 1557818838) * (v21 + 2434)) ^ v21)))(v23);
}

uint64_t sub_193C8D95C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  int v17;
  int v18;
  uint64_t v19;
  BOOL v20;

  v20 = a17 == ((v17 + 459074011) & 0xE4A3174B ^ (v18 + 711));
  return (*(uint64_t (**)(void))(v19
                              + 8
                              * (((v20 ^ (v17 + 87)) & 1 | (4
                                                                           * ((v20 ^ (v17 + 87)) & 1))) ^ v17)))();
}

uint64_t sub_193C8D9B8@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int *v2;
  int v3;
  uint64_t result;
  void (*v6)(unsigned int *);
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  *v2 = v8 ^ v3;
  v11 = v7;
  v10 = (a1 + 152) ^ (69008221
                    * ((((2 * &v10) | 0x9F183F7C) - &v10 + 812900418) ^ 0x1C2E4DB4));
  v6(&v10);
  v11 = v9;
  v10 = (a1 + 152) ^ (69008221 * ((2 * (&v10 & 0x13B8F378) - &v10 - 330888063) ^ 0x3FE55E8B));
  result = ((uint64_t (*)(unsigned int *))v6)(&v10);
  *(_DWORD *)(v1 + 24) = -1557818287;
  return result;
}

void ha0dkchaters6()
{
  _DWORD v0[10];
  uint64_t v1;

  v1 = *MEMORY[0x1E0C80C00];
  v0[0] = -1501685844
        - 1224239923 * ((v0 - 1339534873 - 2 * ((unint64_t)v0 & 0xB02851E7)) ^ 0x429BAC30);
  sub_193CBCC34(v0);
  __asm { BR              X8 }
}

uint64_t sub_193C8DB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t *a19, unsigned int a20,int a21,unsigned int a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;

  v27 = 831981571 * (((&a19 | 0x4152C461) - (&a19 & 0x4152C461)) ^ 0xD8F31445);
  a21 = v27 ^ 0x2DC;
  a22 = 1476476410 - v27;
  a20 = v27 ^ 0x4E459F1D;
  LODWORD(a19) = 1751760282 - v27;
  v40 = v22;
  ((void (*)(unint64_t **))(*(_QWORD *)(v23 + 1056) - 4))(&a19);
  if (v25)
    v28 = HIDWORD(a19) >= 0x52C2D74F;
  else
    v28 = 0;
  v30 = !v28 || v24 == 0;
  HIDWORD(a11) = v30;
  a20 = (831981571 * (((&a19 | 0xB6A7C491) + (~&a19 | 0x49583B6E)) ^ 0x2F0614B4)) ^ 0x15E;
  a19 = &STACK[0x667A5DFFEA838F78];
  sub_193C8C02C((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 + 8 * ((805 * (a21 == -1557818287)) ^ 0x56Fu)) - 4))(v31, v32, v33, v34, v35, v36, v37, v38, v25, v24, a11, v26);
}

uint64_t sub_193C8DCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned int a22)
{
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v27 = ((&a19 - 1627466681 - 2 * (&a19 & 0x9EFED447)) ^ 0x6C4D2990) * v26;
  LODWORD(a21) = v27 ^ 0x23D;
  LODWORD(a19) = ((2 * v25) & 0xE55C5D3E) + (v25 ^ 0x72AE2E9F) - v27 - 9044997;
  a20 = a16;
  (*(void (**)(uint64_t *))(v22 + 1832))(&a19);
  v28 = (((&a19 | 0xED8A91B0) - &a19 + (&a19 & 0x12756E48)) ^ 0x3E28C3BA)
      * v23;
  HIDWORD(a20) = v28 + 757;
  a19 = a12;
  a22 = ((v24 ^ 0xEF59FE3E) + 1957141504 + ((2 * v24) & 0xDEB3FC7C)) ^ v28;
  a21 = a16;
  sub_193C87DBC((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a13 + 8 * (((16 * ((_DWORD)a20 != -1557818287)) | (32 * ((_DWORD)a20 != -1557818287))) ^ 0x55Fu)) - 4))(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10, a11, a12, a13);
}

uint64_t sub_193C8DE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned int a20,unint64_t *a21,unsigned int a22,int a23,unsigned int a24)
{
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;

  v27 = 944348131 * (&a19 ^ 0xA319A44E);
  a19 = a16;
  a21 = &STACK[0x59F8E2836308BDC9];
  a24 = v27 + v25 + 368399926;
  a22 = (v24 ^ 0xFA8DFB7B) - v27 + 2 * v24 + ((v25 + 1140) ^ 0xD28) + 1870362040;
  a20 = 1307210854 - v27;
  v28 = sub_193CBD2A0((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a13 + 8 * ((1466 * (a23 == v26)) ^ v25)) - 8))(v28);
}

uint64_t sub_193C8DF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  uint64_t v12;
  int v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * (v13 ^ (311 * (a12 ^ 1))))
                            - ((v13 - 586634824) & 0x22F74EFB ^ 0xFFLL)))();
}

void sub_193C8DFAC()
{
  int v0;
  int v1;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;

  LODWORD(v6) = v1
              + 3804331
              * (((&v5 | 0xED20C5D1) - &v5 + (&v5 & 0x12DF3A28)) ^ 0x93F5E027)
              - 1026;
  v5 = &STACK[0x750D723A758CEA96];
  v7 = v4;
  v8 = &STACK[0x5594AEEE97C9A7ED];
  ((void (*)(unint64_t **))*(&off_1E31525C0 + (v1 ^ 0x853)))(&v5);
  LODWORD(v7) = v1
              - 1868
              - ((((2 * &v5) | 0x10CCD0DC) - &v5 + 2006554514) ^ 0x2B7FCC20) * v0
              + 600;
  v6 = v4;
  ((void (*)(unint64_t **))*(&off_1E31525C0 + ((v1 - 1868) ^ 0xCF)))(&v5);
  v5 = v4;
  LODWORD(v6) = v1
              - 1868
              - 241568881 * ((2 * (&v5 & 0xB673CE8) - &v5 + 1956168471) ^ 0xA289C755)
              + 202;
  sub_193C9B7D8((uint64_t)&v5);
  __asm { BR              X9 }
}

uint64_t sub_193C8E14C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v8;
  int v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((2058 * (a8 == ((v9 + 1140) ^ a1))) ^ v9)) - 8))();
}

uint64_t sub_193C8E178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  return ((uint64_t (*)(void))(*(_QWORD *)(v19 + 8 * ((2025 * ((a19 != v22) & ~v21)) ^ v20)) - 8))();
}

uint64_t sub_193C8E1B4@<X0>(int a1@<W8>, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;
  uint64_t v8;

  v8 = ((uint64_t (*)(_QWORD, uint64_t))*(&off_1E31525C0 + v7 - 25))(v6 ^ a1 ^ v7 ^ 0x594u, 600474268);
  *a3 = v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(a6 + 8 * ((509 * (v8 != 0)) ^ v7)) - 8))();
}

uint64_t sub_193C8E214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  _BOOL4 v24;

  v22 = 2 * (v19 ^ 0x10E);
  v23 = (a19 ^ v21) - ((2 * (a19 ^ v21)) & 0xC4F2475C) + 1652106158;
  v24 = ((2 * v23) & 0xFFF9396E ^ 0xC4F0014C) - 1080559762 + (v23 ^ (((v22 - 777) | 0x1A) + 495304222)) == 1066701861;
  return ((uint64_t (*)(void))(*(_QWORD *)(v20 + 8 * (((4 * v24) | (16 * v24)) ^ v22)) - 8))();
}

void sub_193C8E2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int a19, uint64_t a20)
{
  unsigned int v20;
  int v21;
  int v22;
  void (*v23)(unsigned int *);
  int v24;

  v24 = 107 * (v21 ^ 0xF6);
  *a9 = (v20 >> ((107 * (v21 ^ 0xF6)) ^ 0x6A)) ^ 0x5192CA2;
  a19 = (v24 - 398) ^ (((((2 * &a19) | 0x9C33F310) - &a19 + 837158520) ^ 0x1DBBAB82) * v22);
  a20 = a15;
  v23(&a19);
  a20 = a16;
  a19 = (v24 - 398) ^ (69008221
                     * ((-577592243 - (&a19 | 0xDD92A44D) + (&a19 | 0x226D5BB2)) ^ 0xF1CF09B8));
  v23(&a19);
  JUMPOUT(0x193C8E6F4);
}

uint64_t sub_193C8E734(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  _BOOL4 v5;

  v2 = *(_DWORD *)(*(_QWORD *)a1 - 0x2D6CAD6C03423C37) + 2079603014;
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0x2D6CAD6C03423C37) + 2079603014;
  v4 = (v2 < 1490889573) ^ (v3 < 1490889573);
  v5 = v2 > v3;
  if (v4)
    v5 = v2 < 1490889573;
  v1 = *(_DWORD *)(a1 + 24) ^ (69008221 * ((a1 - 1382558880 - 2 * (a1 & 0xAD97D360)) ^ 0x7E35816A));
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_1E31525C0 + v1 - 161) + 8 * ((1776 * !v5) ^ v1) - 12) - 12))();
}

uint64_t sub_193C8E808(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;

  v5 = v3 + 246305787;
  v6 = v5 < -342407654;
  v7 = v4 + 246305787 < v5;
  if (v4 + 246305787 < -342407654 != v6)
    v7 = v6;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * (v2 ^ (85 * !v7)))
                                                   - ((v2 + 291) ^ 0x230)))(a1, 609386683);
}

uint64_t sub_193C8E874@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v5 = v4 ^ 0x56C;
  v6 = (v4 ^ 0x23170FDD) + v3;
  v7 = -1177426882 - v3;
  if (v6 < 0)
    v7 = v3;
  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 8 * ((4070 * (v5 - 1558772080 + v7 >= 0)) ^ v5)))(a1, (a2 + 1));
}

uint64_t sub_193C8E8FC(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int v7;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1
                                                     + 8
                                                     * (int)(((((v4 + 784853679) & 0xD1380F19 ^ (v2 + 265) ^ *(_DWORD *)(*v5 + 4 * v7)) <= (*(_DWORD *)(*v6 + 4 * v7) ^ v2))
                                                            * ((v4 + 972648493) & 0xC6068ABE ^ 0xD6D)) ^ v4)))(a1, v3);
}

uint64_t sub_193C8E974(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)(((((v5 + 868340673) & 0xCC3E2B1B) - 179) * (v4 < a3)) ^ v5))
                            - ((26 * (v5 ^ 0x274u)) ^ 0x758)))();
}

uint64_t sub_193C8E9C4@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v2;
  int v3;
  int v4;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 8 * ((4070 * (v3 + v4 - 1558772080 >= 0)) ^ v3)))(a1, (a2 + 1));
}

uint64_t sub_193C8E9F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 8) = 1218773368 - v1;
  return result;
}

void sub_193C8EA0C(uint64_t a1)
{
  int v1;

  v1 = 3804331 * ((-2 - ((a1 | 0xD3EE21B) + (~(_DWORD)a1 | 0xF2C11DE4))) ^ 0x8C143812);
  __asm { BR              X14 }
}

uint64_t sub_193C8EACC@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  int v8;
  unsigned int v9;

  v5 = 944348131 * (((&v7 | 0x112D008D) + (~&v7 | 0xEED2FF72)) ^ 0xB234A4C2);
  v7 = v3;
  v8 = v1 - v5 + 821;
  v9 = v5 - v2 - ((1292945874 - v4) & 0xC3DEA0F8) + ((4 * (v1 ^ 0x2BE)) ^ 0x8877B711);
  return ((uint64_t (*)(uint64_t *))(*(_QWORD *)(a1 + 8 * (v1 - 424)) - 8))(&v7);
}

void gLg1CWr7p()
{
  _DWORD v0[10];
  uint64_t v1;

  v1 = *MEMORY[0x1E0C80C00];
  v0[0] = -1501685844
        - 1224239923
        * ((((v0 | 0x9AA476EE) ^ 0xFFFFFFFE) - (~v0 | 0x655B8911)) ^ 0x97E874C6);
  sub_193CBCC34(v0);
  __asm { BR              X8 }
}

uint64_t sub_193C8ECF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, int a18, int a19, unsigned int a20)
{
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v22 = 831981571 * (&a17 ^ 0x99A1D024);
  LODWORD(a17) = 1751760276 - v22;
  a20 = 1476476408 - v22;
  a18 = v22 ^ 0x4E459F21;
  a19 = v22 ^ 0x2DC;
  ((void (*)(unint64_t **))(*(_QWORD *)(v21 + 1056) - 4))(&a17);
  if (HIDWORD(a17) < 0x52C2D74F)
    v23 = 1;
  else
    v23 = 2;
  LODWORD(a9) = v23;
  a17 = &STACK[0x667A5DFFEA838F60];
  a18 = v22 ^ 0x15E;
  sub_193C8C02C((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 + 8 * ((3847 * (a19 == -1557818287)) ^ 0x606u)) - 12))(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

uint64_t sub_193C8EDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int a21)
{
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  void (*v29)(uint64_t *);
  unsigned int v30;
  uint64_t v31;

  v27 = ((143855056 - (&a18 | 0x8930DD0) + (&a18 | 0xF76CF22F)) ^ 0x5DF0FF8) * v21;
  LODWORD(a20) = v27 ^ 0x23D;
  LODWORD(a18) = (v24 ^ 0x7AA72EBF) + ((2 * v24) & 0xF54E5D7E) - v27 - 142804005;
  a19 = a14;
  (*(void (**)(uint64_t *))(v26 + 1832))(&a18);
  v28 = 69008221 * ((-1000198546 - (&a18 | 0xC4622E6E) + (&a18 | 0x3B9DD191)) ^ 0xE83F839B);
  a21 = (((2 * v23) & 0xCDC3357E) + (v23 ^ 0xE6E19ABF) + 2099249023) ^ v28;
  a18 = v22;
  HIDWORD(a19) = v28 + 757;
  a20 = a14;
  v29 = (void (*)(uint64_t *))(*(_QWORD *)(v26 + 1232) - 4);
  v29(&a18);
  v30 = 69008221 * ((&a18 & 0xD9C46ECE | ~(&a18 | 0xD9C46ECE)) ^ 0xF599C33B);
  a21 = v30 ^ ((a11 ^ 0xF5A9DE3E) + 1851243520 + ((2 * a11) & 0xEB53BC7C));
  HIDWORD(a19) = v30 + 757;
  a20 = a14;
  a18 = a12;
  v31 = ((uint64_t (*)(uint64_t *))v29)(&a18);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v25 + 8 * ((3575 * ((_DWORD)a19 == -1557818287)) ^ 0x4A5u))
                                          - 4))(v31);
}

uint64_t sub_193C8EFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned int a18, unint64_t *a19, unsigned int a20,int a21,unsigned int a22)
{
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;

  v25 = 944348131
      * ((((&a17 | 0x14040F8C) ^ 0xFFFFFFFE) - (~&a17 | 0xEBFBF073)) ^ 0x48E2543D);
  a18 = -1172208721 - v25;
  a19 = &STACK[0x59F8E2836308BDB1];
  a22 = v25 + v23 + 368398988;
  a20 = (((2 * a9) & 4 | a9) ^ 0x6E1F7F7A) - v25 + ((v23 - 993001964) & 0xFFF6F ^ 0xFBE9F829);
  a17 = a13;
  v26 = sub_193CBD2A0((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24 + 8 * ((421 * (a21 == ((v23 + 353) ^ (v22 - 506)))) ^ v23))
                                          - 4))(v26);
}

uint64_t sub_193C8F0E4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * (v1 | (2 * (v3 >= 0x52C2D74F))))
                                          - ((v1 ^ 2u)
                                           - 106)
                                          + 441))(a1);
}

uint64_t sub_193C8F164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void (*v24)(uint64_t *);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  LODWORD(a18) = v20
               + 3804331 * ((&a17 - 1140239273 - 2 * (&a17 & 0xBC095457)) ^ 0xC2DC71A1)
               + 644;
  a17 = v26;
  a19 = a12;
  a20 = v22;
  (*(void (**)(uint64_t *))(v27 + 8 * (v20 - 429)))(&a17);
  a17 = v21;
  a18 = a12;
  LODWORD(a19) = v20
               - (((&a17 | 0x6F66D283) - (&a17 & 0x6F66D283)) ^ 0xCC7F76CD) * v23
               + 402;
  v24(&a17);
  LODWORD(a18) = v20
               - 241568881 * ((&a17 + 967614028 - 2 * (&a17 & 0x39AC9E4C)) ^ 0xEFBD9A0E)
               + 4;
  a17 = a12;
  v28 = sub_193C9B7D8((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v25 + 8
                                                            * (((HIDWORD(a18) == -1557818287) * (v20 + 174)) ^ v20))
                                          - 4))(v28);
}

uint64_t sub_193C8F2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  int v15;
  int v16;
  uint64_t v17;

  return ((uint64_t (*)(void))(*(_QWORD *)(v17
                                        + 8 * ((1601 * (a15 == ((v16 + 748221420) & 0xD3670EF7 ^ (v15 - 861)))) ^ v16))
                            - 4))();
}

uint64_t sub_193C8F33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  unsigned int v17;
  int v18;
  uint64_t v19;

  return ((uint64_t (*)(void))(*(_QWORD *)(v19
                                        + 8 * (((2 * ((a17 ^ v17) > a11)) | (4 * ((a17 ^ v17) > a11))) ^ (v18 + 722)))
                            - ((v18 + 833336812) & 0xCE544CF7 ^ 0x4A9)))();
}

uint64_t sub_193C8F394@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  unsigned int v3;

  v3 = v1 - ((v1 << (((a1 + 46) ^ 0x64) + 92)) & 0x836DA670) + 1102500664;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((969
                                          * (((2 * v3) & 0xEFEFCAD2 ^ 0x836D8250) + (v3 ^ 0x36413651) - 1677894912 != 334839913)) ^ (a1 - 722)))
                            - 4))();
}

uint64_t sub_193C8F428()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4
                                                      + 8
                                                      * (((v1 + v0 - 2012734825 >= (v3 - 1181))
                                                        * ((773 * ((v3 - 725) ^ 0x1D3)) ^ 0xA47)) ^ (v3 - 725)))
                                          - 4))(v2);
}

uint64_t sub_193C8F498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BOOL4 v15;

  v15 = v11 - a11 >= (unint64_t)(v13 - 1288) - 999;
  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v14 + 8 * (((4 * v15) | (16 * v15)) ^ v13)) - 8))(v12, (v13 - 1631735200) & 0xFFEEC5B8);
}

uint64_t sub_193C8F4E4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (a4 | (32 * (v4 >= ((a4 + 1752195000) & 0x978F9DDA) - 378)))) - 12))();
}

uint64_t sub_193C8F51C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v19 = a3 - v11 - 402;
  v20 = v15 + v14 + v16;
  v21 = v12 + v20;
  v22 = *(_OWORD *)(v21 - 31);
  v23 = a11 + v20;
  *(_OWORD *)(v23 - 15) = *(_OWORD *)(v21 - 15);
  *(_OWORD *)(v23 - 31) = v22;
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v18
                                                     + 8
                                                     * ((((v13 & 0xFFFFFFE0) == 32) * (v19 - v17 + 1703)) ^ (v11 + v19 + 889)))
                                         - 12))((v19 - v17 - 582));
}

void sub_193C8F584()
{
  JUMPOUT(0x193C8F53CLL);
}

uint64_t sub_193C8F590(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (a1 ^ (1466 * (v1 != v2))))
                            - ((a1 + 346737750) ^ 0x14AACAB2u)
                            - ((a1 + 346737750) & 0xEB5535EF)
                            + 2216))();
}

uint64_t sub_193C8F5D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v9
                                                     + 8
                                                     * ((381 * (((((v4 + a4 + v7 + 128) | 0x112) - 386) & v5) == 0)) ^ a4))
                                         - 12))((v6 - v8));
}

uint64_t sub_193C8F614(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;

  *(_QWORD *)(a11 - 7 + (v14 + v13 + v16 - v17)) = *(_QWORD *)(v11
                                                                           - 7
                                                                           + (v14 + v13 + v16 - v17));
  return (*(uint64_t (**)(_QWORD))(v18 + 8 * ((55 * (a3 - (v12 & 0xFFFFFFF8) - 402 == -v17)) ^ a3)))(v15 - (v12 & 0xFFFFFFF8));
}

uint64_t sub_193C8F674(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)(a2 + (v5 + a5)) = *(_QWORD *)(v6 + (v5 + a5));
  return (*(uint64_t (**)(void))(v8 + 8 * (((v7 == a5) * a4) ^ a3)))();
}

uint64_t sub_193C8F69C()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((((v0 == v2) ^ (v1 + 62)) & 1 | (16
                                                                                           * (((v0 == v2) ^ (v1 + 62)) & 1))) ^ v1))
                            - ((v1 - 559105605) & 0xBFFFC5AB ^ 0x9EAC812CLL)))();
}

uint64_t sub_193C8F6FC@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(a6 + (a1 - 334839914)) = *(_BYTE *)(v7 + (a1 - 334839914));
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((941 * (a1 - 1 != a3)) ^ (v6 + a2 + 441)))
                            - ((a2 - 350962563) & 0x763EC6FF)
                            + 1185))();
}

uint64_t sub_193C8F75C()
{
  void (*v0)(unsigned int *);
  int v1;
  int v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v7 = v4;
  v6 = (v1 - 196) ^ (69008221 * (&v6 ^ 0xD3A2520A));
  v0(&v6);
  v7 = v5;
  v6 = ((v1 ^ 0x2A3) - 549) ^ (69008221
                             * ((&v6 & 0x87B6BE4F | ~(&v6 | 0x87B6BE4F)) ^ 0xABEB13BA));
  v0(&v6);
  return v2 ^ 0xA3259451;
}

uint64_t sub_193C8F838(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;

  v1 = *(_QWORD *)result;
  v2 = *(_DWORD *)(result + 8) ^ (235795823 * ((2 * (result & 0x2C7AE860) - result + 1401231263) ^ 0xC7285EC6));
  *(_DWORD *)(v1 - 0x3C058A92099E3471) = ((v2 & 0x1FF ^ 0x30028F)
                                          + (v2 & 0x1F7 ^ 0x1F485170)
                                          - ((v2 & 0x1FF ^ 0x30028F) & 0x2003F7)) ^ 0xE3656FF1;
  *(_QWORD *)(v1 - 0x3C058A92099E3491) = 0x697CA423ED35C0E2;
  *(_DWORD *)(v1 - 0x3C058A92099E3475) = 1497258463;
  v3 = v2 ^ 0x95;
  if (v3 == 1)
  {
    v4 = 1497258479;
    goto LABEL_5;
  }
  if (v3 == 2)
  {
    *(_DWORD *)(v1 - 0x3C058A92099E3479) = -357255395;
    v4 = 1497258483;
LABEL_5:
    *(_QWORD *)(v1 - 0x3C058A92099E3489) = 0xC6ABFD644E2375ECLL;
    *(_QWORD *)(v1 - 0x3C058A92099E3481) = 0x3954029BB1DC8A13;
    *(_DWORD *)(v1 - 0x3C058A92099E3475) = v4;
  }
  *(_DWORD *)(result + 16) = -134733442;
  return result;
}

void sub_193C8F9B8(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_193C8F9FC(uint64_t a1)
{
  uint64_t v1;
  int v3;
  unsigned int v4;
  uint64_t v5;

  v3 = (*(uint64_t (**)(void))(v1 + 1352))();
  if (v3 == 16)
    v4 = -42029;
  else
    v4 = -42030;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  (*(void (**)(uint64_t))(v1 + 208))(a1);
  return v5;
}

void sub_193C8FA58(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = 1543737703 * ((~(_DWORD)a1 & 0xF7DF4D8D | a1 & 0x820B272) ^ 0x892B1DF1);
  v2 = *(_DWORD *)(a1 + 24) - v1;
  v3 = (*(_BYTE *)(a1 + 4) ^ v1);
  ((void (*)(char *, void (*)()))*(&off_1E31525C0 + v2 - 67))((char *)*(&off_1E31525C0 + (v2 ^ 0x129)) - 8, sub_193CBCE14);
  v5 = *(_QWORD *)*(&off_1E31525C0 + v2 - 55);
  v4 = (69008221 * ((&v4 & 0x30B7E06B | ~(&v4 | 0x30B7E06B)) ^ 0x1CEA4D9E)) ^ (v2 - 118);
  sub_193C6DC58((uint64_t)&v4);
  __asm { BR              X8 }
}

uint64_t sub_193C8FBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, unsigned int a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  a16 = 53 - 113 * ((~&a16 & 0x4F | &a16 & 0xB0) ^ 0xD);
  a17 = (v17 + 231) ^ (241568881 * ((~&a16 & 0xE81FE94F | &a16 & 0x17E016B0) ^ 0x3E0EED0D));
  sub_193C6BADC((uint64_t)&a16);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 + 8 * (((**(_DWORD **)(v19 + 8 * (v17 ^ 0x116)) == 0) * ((3 * (v17 ^ 0x142)) ^ (((v17 ^ 0xBD) - 398) | 0x186) ^ 0x99E)) ^ v17 ^ 0xBD)) - 8))(v20, v21, v22, v23, v24, v25, v26, v27);
}

uint64_t sub_193C8FC78@<X0>(int a1@<W8>)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t (*v13)(uint64_t, _BYTE *, _DWORD *);
  int v14;
  unsigned int v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  _BYTE v22[30];
  _BYTE v23[140];

  v8 = *(unsigned int **)(v6 + 8 * (a1 - 151));
  v9 = *v8;
  v10 = *(_QWORD **)(v6 + 8 * (a1 ^ 0x10D));
  v11 = (_BYTE *)*v10;
  v22[0] = *(_BYTE *)*v10 - 1;
  v22[1] = v11[1] - 1;
  v22[2] = v11[2] - 1;
  v22[3] = v11[3] - 1;
  v22[4] = v11[4] - 1;
  v22[5] = v11[5] - 1;
  v22[6] = v11[6] - 1;
  v22[7] = v11[7] - 1;
  v22[8] = v11[8] - 1;
  v22[9] = v11[9] - 1;
  v22[10] = v11[10] - 1;
  v22[11] = v11[11] - 1;
  v22[12] = v11[12] - 1;
  v22[13] = v11[13] - 1;
  v22[14] = v11[14] - 1;
  v22[15] = v11[15] - 1;
  v22[16] = v11[16] - 1;
  v22[17] = v11[17] - 1;
  v22[18] = v11[18] - 1;
  v22[19] = v11[19] - 1;
  v22[20] = v11[20] - 1;
  v22[21] = v11[21] - 1;
  v12 = (_BYTE *)*v10;
  v22[22] = v12[22] - 1;
  v22[23] = v12[23] - 1;
  v22[24] = v12[24] - 1;
  v22[25] = v12[25] - 1;
  v22[26] = v12[26] - 1;
  v22[27] = v12[27] - 1;
  v22[28] = v12[28] - 1;
  v22[29] = v12[29] - 1;
  v13 = *(uint64_t (**)(uint64_t, _BYTE *, _DWORD *))(v6 + 8 * (a1 ^ 0x1CA));
  v14 = v13(v9, v22, v2);
  v15 = ((2 * v14) & 0x7D7DAD72) + (v14 ^ 0xBEBED6B9);
  if (v15 != -1094789447)
  {
    if (v15 == -1094788345)
    {
      v16 = *v8;
      v17 = *(_BYTE **)(*(_QWORD *)(v6 + 8 * (v4 - 103)) - 4);
      v23[0] = *v17 - 59;
      v23[1] = v17[1] - 59;
      v23[2] = v17[2] - 59;
      v23[3] = v17[3] - 59;
      v23[4] = v17[4] - 59;
      v23[5] = v17[5] - 59;
      v23[6] = v17[6] - 59;
      v23[7] = v17[7] - 59;
      v23[8] = v17[8] - 59;
      v23[9] = v17[9] - 59;
      v23[10] = v17[10] - 59;
      v23[11] = v17[11] - 59;
      v23[12] = v17[12] - 59;
      v23[13] = v17[13] - 59;
      v23[14] = v17[14] - 59;
      v23[15] = v17[15] - 59;
      v23[16] = v17[16] - 59;
      v23[17] = v17[17] - 59;
      v23[18] = v17[18] - 59;
      v23[19] = v17[19] - 59;
      v18 = v13(v16, v23, v2);
      v19 = (2 * v18) & 0x7DFDDBB4;
      v15 = (v18 ^ 0x3EFEEDDA) - 12888514;
    }
    else
    {
      v19 = 2138795359;
    }
    __asm { BR              X8 }
  }
  *(_DWORD *)(v7 + 352) |= (v4 + 115) ^ 0x19C;
  *(_DWORD *)(v7 + 52) = 101833161;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _DWORD *))(v6 + 8 * (v4 - 184)))(*v2, v7 + 340, v7 + 344, v7 + 348, v3);
  v21 = *(_QWORD *)(v1 + 8);
  *(_DWORD *)(*(_QWORD *)(v1 + 16) - 0x3078A7FBB527317DLL) = *v2;
  *(_DWORD *)(v21 - 0x5A93D1B978544B93) = *v3
                                          - ((((v4 - 220665656) & 0xD271737) + 457140703) & (2 * *v3))
                                          - 1918913151;
  *(_DWORD *)v1 = -1557818287;
  return result;
}

void sub_193C900BC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 32) + 1224239923 * (a1 ^ 0xF2B3FDD7);
  __asm { BR              X14 }
}

void sub_193C901BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)(a3 + v3) = 1558770207;
}

void Mt76Vq80ux(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v6;
  int v7;

  if (a5)
    v6 = a6 == 0;
  else
    v6 = 1;
  v7 = !v6;
  __asm { BR              X9 }
}

uint64_t sub_193C91074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _DWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17, int a18)
{
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;

  *a5 = 0;
  *a6 = 0;
  a17 = -1501685844
      - 1224239923
      * ((-1402685523 - (&a17 | 0xAC64B7AD) + (&a17 | 0x539B4852)) ^ 0xA128B585);
  v20 = sub_193CBCC34(&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18 + 8 * ((218 * (a18 == -1557818287)) ^ v19)) - 8))(v20);
}

uint64_t sub_193C91118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, unsigned int a18, int a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  a17 = &STACK[0x667A5DFFEA838F58];
  a18 = (831981571 * (&a17 ^ 0x99A1D024)) ^ 0x15E;
  sub_193C8C02C((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 + 8 * ((8 * (a19 == -1557818287)) | 0x125u)) - 8))(v20, v21, v22, v23, v24, v25, v26, v27, a9);
}

uint64_t sub_193C91194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17, int a18, uint64_t a19, int a20)
{
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;

  v26 = ((2 * (&a17 & 0x7E2A7168) - &a17 + 30772887) ^ 0xF3667340) * v25;
  a17 = (v23 ^ 0x7FAD3ADB) + ((2 * v23) & 0xFF5A75B6) - v26 - 227086401;
  a19 = a12;
  a20 = v26 ^ 0x23D;
  sub_193CB9200(&a17);
  v27 = (((&a17 ^ 0xC02D5742) & 0x72453EF5 | ~(&a17 ^ 0xC02D5742 | 0x72453EF5)) ^ 0xBF246B9F)
      * v25;
  a19 = a12;
  a20 = v27 ^ 0x23D;
  a17 = ((2 * HIDWORD(v22)) & 0xE56E773E) - v27 + (HIDWORD(v22) ^ 0x72B73B9F) - 9638149;
  sub_193CB9200(&a17);
  v28 = (((&a17 | 0x39CE9707) - &a17 + (&a17 & 0xC63168F8)) ^ 0xCB7D6AD0)
      * v25;
  a20 = v28 ^ 0x23D;
  a17 = (v22 ^ 0x72F4BEFF) + ((2 * v22) & 0xE5E97DFE) - v28 - 13669477;
  a19 = a12;
  sub_193CB9200(&a17);
  v29 = ((&a17 & 0xA27E77EF | ~(&a17 | 0xA27E77EF)) ^ 0xAF3275C7) * v25;
  a17 = (v21 ^ 0xF27C3EFB) + ((2 * v21) & 0xE4F87DF6) - v29 + 2141711263;
  a20 = v29 ^ 0x23D;
  a19 = a12;
  sub_193CB9200(&a17);
  v30 = ((420191406 - (&a17 | 0x190B9CAE) + (&a17 | 0xE6F46351)) ^ 0x14479E86) * v25;
  a20 = v30 ^ 0x23D;
  a19 = a12;
  a17 = (v20 ^ 0x7E3E7E9F) + ((2 * v20) & 0xFC7CFD3E) - v30 - 203052037;
  v31 = sub_193CB9200(&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24 + 8 * ((2089 * (a18 == -1557818287)) ^ 0x135u)) - 8))(v31);
}

uint64_t sub_193C91474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned int a18, unint64_t *a19, unsigned int a20,int a21,unsigned int a22)
{
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;

  v24 = 944348131 * ((2 * (&a17 & 0x55A70918) - &a17 - 1437010207) ^ 0x94152AF);
  a17 = a12;
  a22 = v24 + 368400177;
  a20 = 1779005819 - v24;
  a18 = 312965373 - v24;
  a19 = &STACK[0x59F8E2836308BDB9];
  v25 = sub_193CBD2A0((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v22 + 8 * ((1225 * (a21 == v23)) ^ 0x135u)) - 8))(v25);
}

uint64_t sub_193C91560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, unint64_t *a18, unint64_t *a19, unint64_t *a20)
{
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  a19 = &STACK[0x11E90ECB0B9030D9];
  a20 = a13;
  LODWORD(a17) = v20
               - 2078219279 * (((&a17 | 0x6286FFFD) - (&a17 & 0x6286FFFD)) ^ 0xB87C6989)
               - 231789856;
  a18 = &STACK[0x1EF0C0D0C0C76506];
  sub_193CBC6B8((uint64_t)&a17);
  a17 = &STACK[0xCB258A928C46691];
  a18 = a13;
  LODWORD(a19) = v20
               - (((&a17 ^ 0x78B0352D) - 666857254 - 2 * ((&a17 ^ 0x78B0352D) & 0xD84090DA)) ^ 0x3E901B9)
               * v21
               - 215;
  ((void (*)(unint64_t **))*(&off_1E31525C0 + (v20 ^ 0x41E)))(&a17);
  a17 = a13;
  LODWORD(a18) = v20
               - 241568881 * ((2 * (&a17 & 0x7CDA6F00) - &a17 - 2094690053) ^ 0x553494B9)
               - 613;
  v23 = sub_193C9B7D8((uint64_t)&a17);
  return (*(uint64_t (**)(uint64_t))(v22 + 8 * (((HIDWORD(a18) == -1557818287) * (v20 ^ 0x878)) ^ v20)))(v23);
}

uint64_t sub_193C916E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  int v17;
  int v18;
  uint64_t v19;

  return (*(uint64_t (**)(void))(v19 + 8 * (((a17 == v17 + v18 - 7 - 1059) * ((v18 - 757) ^ 0xC40)) ^ v18)))();
}

uint64_t sub_193C9171C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  int v8;
  uint64_t v9;

  return (*(uint64_t (**)(void))(v9
                              + 8
                              * (((a8 == v8 + ((a1 + 37379866) & 0xFDC59DF7) - 309) * (((a1 - 35) | 0x2A) ^ 0x423)) ^ a1)))();
}

uint64_t sub_193C91778()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  BOOL v4;

  v4 = ((uint64_t (*)(_QWORD, uint64_t))*(&off_1E31525C0 + (v2 ^ 0x4C8)))(v0 ^ (v1 + 2217) ^ (317 * (v2 ^ 0x42Du)), 2405151471) == 0;
  return (*(uint64_t (**)(void))(v3 + 8 * ((3516 * (((v2 + 11) ^ v4) & 1)) ^ v2)))();
}

uint64_t sub_193C917EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;

  v18 = (a15 ^ v17) - (((a15 ^ v17) << (((v15 + 85) | 0x2A) - 41)) & 0xBE64E20E) + 1597141255;
  return ((uint64_t (*)(void))(*(_QWORD *)(v16
                                        + 8
                                        * ((124
                                          * (((2 * v18) & 0xCFDFFFAA ^ 0x8E44E20A) + (v18 ^ 0xB8DD8ED2) + 1610087083 == 1206385280)) ^ v15))
                            - 4))();
}

uint64_t sub_193C91880(uint64_t a1)
{
  int v1;
  int v2;
  _QWORD *v3;
  void (*v4)(int *);
  int v5;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v5 = (v2 - 1033) | 0x114;
  *v3 = a1;
  *v7 = v1;
  v11 = v9;
  v10 = (v5 + 684) ^ (69008221
                    * ((&v10 - 2094401390 - 2 * ((unint64_t)&v10 & 0x8329F892)) ^ 0x508BAA98));
  v4(&v10);
  v11 = v8;
  v10 = ((v5 ^ 0x10) + 700) ^ (69008221 * (&v10 ^ 0xD3A2520A));
  v4(&v10);
  return 0;
}

void sub_193C91CD8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) - 268847287 * ((((2 * a1) | 0x834EB920) - a1 - 1101487248) ^ 0xBE0D4DB8);
  __asm { BR              X10 }
}

uint64_t sub_193C91DA4@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)(((*(_QWORD *)(v1 + 16) == 0) * (((a1 + 403202953) & 0xE7F79DF9) - 2274)) ^ (a1 + 403202953) & 0xE7F79DF9))
                            - 8))();
}

uint64_t sub_193C91E30@<X0>(int a1@<W8>)
{
  uint64_t (*v1)(uint64_t *);
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v12 = 0x1C4110BE041F984CLL;
  v7 = (((&v9 | 0x17A8D685) - (&v9 & 0x17A8D685)) ^ 0x697DF373) * v2;
  v13 = (v4 - 1058) ^ v7;
  v10 = v7 ^ a1;
  v11 = v7 ^ v3;
  v9 = v6;
  result = v1(&v9);
  *(_DWORD *)(v5 + 24) = *(_DWORD *)(v6 - 0x592F4E5EA75AA576);
  return result;
}

void sub_193C920FC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) ^ (3804331 * ((-2 - ((a1 | 0x7F5042C2) + (~(_DWORD)a1 | 0x80AFBD3D))) ^ 0xFE7A98CB));
  __asm { BR              X10 }
}

uint64_t sub_193C921D8(_QWORD *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL4 v5;

  v5 = *(_DWORD *)(*a1 + v3) != (v4 ^ 0x9CC) + v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((v5 | (4 * v5)) ^ v4)) - (((v4 - 1301) | 0xEAu) ^ 0x4EBLL)))();
}

uint64_t sub_193C9221C()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((((((v3 ^ 0xA317090E) + v2) * (v0 - 1558770207)) & 0x80000000) == 0)
                                          * (v3 - 1240)) ^ v3))
                            - 12))();
}

uint64_t sub_193C92260@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v5 = v2;
  v6 = v2;
  v8 = v3
     - 1049
     + 1224239923 * ((1165911753 - (&v5 | 0x457E66C9) + (&v5 | 0xBA819936)) ^ 0x483264E1)
     + 1053;
  v7 = a1;
  return (*(uint64_t (**)(uint64_t *))(v1 + 8 * (v3 - 1121)))(&v5);
}

void sub_193C923B0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void (*v5)(char *, void (*)());
  int v6;
  _BYTE v7[8];

  v2 = (unint64_t)&v7[qword_1EE2CD918 ^ qword_1EE2CD920];
  v3 = 45734839 * v2 + 0x73B7B1CCCB247C39;
  v4 = 45734839 * (v2 ^ 0x8C484E3334DB83C7);
  qword_1EE2CD920 = v3;
  v5 = (void (*)(char *, void (*)()))*(&off_1E31525C0
                                                + ((-73 * (v3 ^ 0xC7 ^ v4)) ^ byte_193F085C0[byte_193F04DF0[(-73 * (v3 ^ 0xC7 ^ v4))] ^ 1])
                                                + 31);
  v6 = byte_193F04CF0[(-73 * ((v4 - v3) ^ 0xC7))];
  qword_1EE2CD918 = v4;
  v5((char *)*(&off_1E31525C0 + ((-73 * ((v4 - v3) ^ 0xC7)) ^ byte_193F084C0[v6 ^ 1]) - 144) - 12, sub_193CBCCF0);
  __asm { BR              X9 }
}

uint64_t sub_193C924CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((93 * (**(_QWORD **)(v1 + 936) != 0)) ^ 0x214u)) - 8))();
}

uint64_t sub_193C924F8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(v1 + 1608))(v0);
}

void hqRB2RyoIJ(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  int v3;

  if (a1)
    v2 = a2 == 0;
  else
    v2 = 1;
  v3 = v2;
  __asm { BR              X9 }
}

uint64_t sub_193C925B0(_QWORD *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int a15, int a16)
{
  int v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = 0;
  *a2 = 0;
  a15 = -1501685844 - 1224239923 * ((&a15 & 0xFF380D6F | ~(&a15 | 0xFF380D6F)) ^ 0xF2740F47);
  v18 = sub_193CBCC34(&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v17 + 8 * ((2644 * (a16 == v16)) ^ 0x2E7)) - 8))(v18);
}

uint64_t sub_193C92648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, unsigned int a16, int a17)
{
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  a15 = &STACK[0x667A5DFFEA838F50];
  a16 = (831981571
       * (((&a15 | 0xAA3663CB) - &a15 + (&a15 & 0x55C99C30)) ^ 0x3397B3EF)) ^ 0x15E;
  sub_193C8C02C((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20
                                                                                                - 3502510884
                                                                                                + *(_QWORD *)(v18 + 8 * ((1348 * (a17 == v17)) ^ v19))))(v21, v22, v23, v24, v25, v26, v27);
}

uint64_t sub_193C926EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16, unint64_t *a17, unsigned int a18, int a19, unsigned int a20)
{
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v22 = 944348131 * (&a15 ^ 0xA319A44E);
  a16 = -2008445736 - v22;
  a15 = a11;
  a17 = &STACK[0x59F8E2836308BDB1];
  a20 = v22 + 368400177;
  a18 = 1779005819 - v22;
  v23 = sub_193CBD2A0((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * ((240 * (((a19 == v20) ^ 0xE7) & 1)) ^ 0x772u))
                                          - 12))(v23);
}

uint64_t sub_193C927B0()
{
  unsigned int v0;
  int v1;
  void (*v2)(unsigned int *);
  int v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v6 = (v1 + 250) ^ (69008221
                   * (((&v6 | 0xFEF3D794) - &v6 + (&v6 & 0x10C2868)) ^ 0x2D51859E));
  v7 = v5;
  v2(&v6);
  return v3 ^ v0;
}

void sub_193C92F04(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) - 944348131 * ((a1 & 0x11C449C8 | ~(a1 | 0x11C449C8)) ^ 0x4D221279);
  __asm { BR              X8 }
}

uint64_t sub_193C92F9C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  _BOOL4 v3;

  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8 * (v0 - 762)))(200, 2354554103) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1107 * v3) ^ v0)) - 12))();
}

uint64_t sub_193C92FDC(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 8 * (v2 - 863)))(a1, 0);
  if ((_DWORD)result == 16)
  {
    v3 = -2004158311;
    goto LABEL_7;
  }
  if ((_DWORD)result == 12)
  {
LABEL_7:
    result = (*(uint64_t (**)(uint64_t))(v4 + 8 * (v2 ^ 0x3C6)))(a1);
    goto LABEL_8;
  }
  if ((_DWORD)result)
  {
    v3 = 1427028734;
    goto LABEL_7;
  }
  *v5 = a1;
  v3 = 752425176;
LABEL_8:
  *v1 = -1982603117 * v3 + 932297720;
  return result;
}

void sub_193C9306C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)a1 ^ (2078219279 * (((a1 | 0x2CA10C87) - (a1 & 0x2CA10C87)) ^ 0xF65B9AF3));
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2D6CAD6C03423C37) - 1558770207 >= 0)
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2D6CAD6C03423C37) - 1558770207;
  else
    v3 = 1558770207 - *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2D6CAD6C03423C37);
  v2 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v2 - 0x2D6CAD6C03423C37) - 1558770207 >= 0)
    v4 = *(_DWORD *)(v2 - 0x2D6CAD6C03423C37) - 1558770207;
  else
    v4 = 1558770207 - *(_DWORD *)(v2 - 0x2D6CAD6C03423C37);
  v7 = *(_QWORD *)(a1 + 8);
  v6[1] = v1
        - 1224239923
        * (((v6 | 0x6E08A56D) - v6 + (v6 & 0x91F75A90)) ^ 0x9CBB58BA)
        - 387;
  sub_193C79D14((uint64_t)v6);
  if (v3 >= v4)
    v5 = v4;
  else
    v5 = v3;
  __asm { BR              X15 }
}

uint64_t sub_193C931FC()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  _BOOL4 v5;

  v5 = v2 - 735105671 > 1837067100 || v2 - 735105671 < v3 - 310417195 + v1 - 659;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((v5 * (v1 ^ 0x8DD)) ^ v1)) - 8))();
}

uint64_t sub_193C9324C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  _BOOL4 v18;

  v13 = v3 ^ 0xE;
  v14 = 4 * (v9 + v7);
  v15 = v2 + v11 + (*(_DWORD *)(*(_QWORD *)(v12 - 0x2D6CAD6C03423C33) + v14) ^ v8);
  *(_DWORD *)(*(_QWORD *)(a1 - 0x2D6CAD6C03423C33) + v14) = v15
                                                            + v8
                                                            - (((v13 + 1318650549) & 0xB166FABD ^ (v10 + 648)) & (2 * v15));
  v16 = v9 + 1 + v4;
  v18 = v16 <= v5 && v16 >= v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((14 * v18) ^ v13)) - 8))();
}

uint64_t sub_193C93324()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  _BOOL4 v5;

  v5 = v2 - 1704409976 <= 867762795 && v2 - 1704409976 >= v3 - 1279720852;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * (int)((v5 * ((v1 + 1839454879) & 0x925C23FF ^ 0x10C)) ^ v1))
                            - ((v1 + 1389915982) & 0xAD278EEF)
                            + 186))();
}

uint64_t sub_193C933A0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((50 * (((v1 == 0x23887870F81ED702) ^ (v2 - 1)) & 1)) ^ v2))
                            - 8))();
}

uint64_t sub_193C933E0()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((((v2 + v3 - 1) > 0x7FFFFFFE)
                                          * ((68 * ((v1 + 1036) ^ 0x4D7)) ^ 0x153)) ^ (v1 + 20)))
                            - 4))();
}

uint64_t sub_193C9367C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((2286
                                          * (*(_DWORD *)(*(_QWORD *)(a1 - 0x2D6CAD6C03423C33)
                                                       + 4 * (v3 + v5 - 1)) == v4)) ^ v2 ^ 0x189))
                            - (((v2 ^ 0x189) - 1077657859) & 0x403BC4F7)
                            + 1230))();
}

uint64_t sub_193C936E4()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * (v2 ^ (((v4 + v3 - 2) < 0x7FFFFFFF) * v1))) - 4))();
}

uint64_t sub_193C9372C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((2286 * (*(_DWORD *)(v2 + 4 * (v3 + v5 - 1)) == v4)) ^ v1))
                            - ((v1 - 1077657859) & 0x403BC4F7)
                            + 1230))();
}

void sub_193C93778(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  *(_DWORD *)(a1 - 0x2D6CAD6C03423C37) = (((v3 + v2) * (v1 - 1337067773)) ^ 0xDDFFF35F)
                                         + 2129198784
                                         + ((2 * (v3 + v2) * (v1 - 1337067773)) & 0xBBFFE6BE);
}

uint64_t sub_193C938D8(uint64_t a1, uint64_t a2)
{
  int v2;
  char *v3;
  int v4;
  _BYTE v6[8];

  qword_1EE2CD928 = 45734839 * ((unint64_t)&v6[qword_1EE2CD918 - qword_1EE2CD928] ^ 0x8C484E3334DB83C7);
  qword_1EE2CD918 = qword_1EE2CD928;
  v2 = *(_DWORD *)(a2 + 4);
  v3 = (char *)*(&off_1E31525C0
               + ((-73 * ((2 * qword_1EE2CD928) ^ 0xC7)) ^ byte_193F087C0[byte_193F04FF0[(-73 * ((2 * qword_1EE2CD928) ^ 0xC7))] ^ 0x2D])
               + 83)
     - 12;
  if (v2 == 642350284)
    __asm { BR              X17 }
  if (v2 == 642350291)
  {
    v4 = **(unsigned __int8 **)(a2 + 8) - 9;
    __asm { BR              X3 }
  }
  return 4294925278;
}

void sub_193C93FCC()
{
  unint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = qword_1EE2CD950 ^ (unint64_t)&v2 ^ qword_1EE2CD918;
  qword_1EE2CD950 = (45734839 * v0) ^ 0x8C484E3334DB83C7;
  qword_1EE2CD918 = 45734839 * (v0 ^ 0x8C484E3334DB83C7);
  *(_DWORD *)*(&off_1E31525C0
             + ((-73 * ((qword_1EE2CD918 + qword_1EE2CD950) ^ 0xC7)) ^ byte_193F085C0[~byte_193F04DF0[(-73 * ((qword_1EE2CD918 + qword_1EE2CD950) ^ 0xC7))]])
             - 139) = -1557818287;
  v1 = ((uint64_t (*)(uint64_t, uint64_t))*(&off_1E31525C0
                                                  + ((-73
                                                                                   * ((qword_1EE2CD918 - qword_1EE2CD950) ^ 0xC7)) ^ byte_193F084C0[byte_193F04CF0[(-73 * ((qword_1EE2CD918 - qword_1EE2CD950) ^ 0xC7))] ^ 0xF4])
                                                  + 122))(512, 1509315540);
  *(_QWORD *)*(&off_1E31525C0
             + ((-73 * ((qword_1EE2CD918 - qword_1EE2CD950) ^ 0xC7)) ^ byte_193F084C0[byte_193F04CF0[(-73 * ((qword_1EE2CD918 - qword_1EE2CD950) ^ 0xC7))] ^ 0x68])
             - 1) = v1;
  __asm { BR              X8 }
}

void sub_193C9416C()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

void zxcm2Qme0x(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X8 }
}

uint64_t sub_193C9B254(uint64_t a1, int a2)
{
  uint64_t v2;
  BOOL v3;
  int v4;

  if (a1)
    v3 = a2 == 0;
  else
    v3 = 0;
  v4 = v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((46 * v4) ^ 0x2C5u)) - 8))();
}

uint64_t sub_193C9B284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14)
{
  int v14;
  uint64_t v15;
  uint64_t v16;

  a13 = -1501685844
      - 1224239923
      * (((&a13 ^ 0x756251C1) & 0xA483E257 | ~(&a13 ^ 0x756251C1 | 0xA483E257)) ^ 0xDCADB1BE);
  v16 = sub_193CBCC34(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15 + 8 * ((3000 * (a14 == v14)) ^ 0x2EB)) - 8))(v16);
}

uint64_t sub_193C9B314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  a13 = &STACK[0x667A5DFFEA838F58];
  a14 = (v17 - 364) ^ (831981571 * ((&a13 & 0x3C346C9 | ~(&a13 | 0x3C346C9)) ^ 0x659D6912));
  sub_193C8C02C((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16
                                                                                          + 8
                                                                                          * (int)(((a15 != v15)
                                                                                                 * (((v17 - 1902899621) ^ 0x8E9416C0)
                                                                                                  - 1988)) | v17))
                                                                              - 8))(v18, v19, v20, v21, v22);
}

uint64_t sub_193C9B3B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, unsigned int a17)
{
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;

  v23 = 69008221
      * ((((&a13 | 0xD827338E) ^ 0xFFFFFFFE) - (~&a13 | 0x27D8CC71)) ^ 0xF47A9E7B);
  a15 = v23 + v22 - 1264;
  a16 = a12;
  a17 = v23 ^ ((v18 ^ 0x6633DEFE) - 36848832 + ((2 * v18) & 0xCC67BDFC));
  a13 = v17;
  v24 = ((uint64_t (*)(uint64_t *))(*(_QWORD *)(v20 + 8 * (v22 ^ 0x77F)) - 4))(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * ((3823 * (a14 == v19)) ^ v22))
                                          - (v22 - 1274)
                                          + 743))(v24);
}

uint64_t sub_193C9B488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, unint64_t *a15, unsigned int a16, int a17, unsigned int a18)
{
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;

  v21 = 944348131
      * (((&a13 | 0xFD9FA0A9) - &a13 + (&a13 & 0x2605F50)) ^ 0x5E8604E7);
  a14 = -1914395672 - v21;
  a15 = &STACK[0x59F8E2836308BDA1];
  a13 = a12;
  a16 = 1779005819 - v21;
  a18 = v21 + v20 + 368398156;
  v22 = sub_193CBD2A0((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19
                                                      + 8 * (((a17 == v18) * (((v20 - 1338) | 0x40) - 732)) ^ v20))
                                          - (((v20 - 1509) | 0x42Bu) ^ 0x62FLL)))(v22);
}

uint64_t sub_193C9B564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, unint64_t *a14, uint64_t a15, unsigned int a16)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  a16 = v16 - 944348131 * (((&a14 | 0x3FA89C91) + (~&a14 | 0xC057636E)) ^ 0x9CB138DE) - 728;
  a14 = &STACK[0xCB258A928C46669];
  a15 = a10;
  v19 = (*(uint64_t (**)(unint64_t **))(v17 + 8 * (v16 - 1527)))(&a14);
  return (*(uint64_t (**)(uint64_t))(v18
                                            + 8
                                            * ((3894 * (a12 == (((v16 - 1945896231) | 0x2901021) ^ 0x2DB18574))) ^ v16)))(v19);
}

uint64_t sub_193C9B620()
{
  uint64_t v0;
  void (*v1)(uint64_t *);
  unsigned int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v13 = v4
      + 1178560073 * ((137222380 - (&v11 | 0x82DD8EC) + (&v11 | 0xF7D22713)) ^ 0x10E7057B)
      + v6
      + 1173;
  v14 = v0;
  v11 = 0x2D9DBEAE76CB3A64;
  v12 = v8;
  ((void (*)(uint64_t *))(*(_QWORD *)(v3 + 8 * (v6 ^ (v5 + 685))) - 4))(&v11);
  v11 = v8;
  LODWORD(v12) = v4
               + v6
               - 241568881 * ((2 * (&v11 & 0x62B46D00) - &v11 + 491492089) ^ 0xCB5A96BB);
  sub_193C9B7D8((uint64_t)&v11);
  v12 = v8;
  LODWORD(v11) = (v4 + v6 + 540) ^ (69008221
                                  * ((((&v11 | 0x3D5496BC) ^ 0xFFFFFFFE)
                                    - (~&v11 | 0xC2AB6943)) ^ 0x11093B49));
  v1(&v11);
  v12 = v10;
  LODWORD(v11) = (3 * (v6 ^ (v5 + 897)) + 246) ^ (69008221 * (&v11 ^ 0xD3A2520A));
  v1(&v11);
  return v9 ^ v2;
}

uint64_t sub_193C9B7D8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) + 241568881 * ((-720613086 - (a1 | 0xD50C5122) + (a1 | 0x2AF3AEDD)) ^ 0xFCE2AA9F);
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_1E31525C0 + (v1 ^ 0x1BD))
                                        + 8 * ((19 * (*(_QWORD *)a1 != 0x592F4E5EA75AA58ELL)) ^ v1)
                                        - 12)
                            - 4))();
}

uint64_t sub_193C9B874()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8 * ((2213 * (*(_DWORD *)(v2 - 0x592F4E5EA75AA576) == -1557818287)) ^ v0))
                            - 4))();
}

uint64_t sub_193C9B8B4()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v3 = *(_DWORD *)(v2 - 0x592F4E5EA75AA57ELL) + 1995816318;
  v4 = *(_DWORD *)(v2 - 0x592F4E5EA75AA582) - 1038337692;
  v5 = v4 < 0xF033285A;
  v6 = v3 < v4;
  if (v3 < 0xF033285A != v5)
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((2248 * v6) ^ v0)) - 4))();
}

uint64_t sub_193C9B940@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  _DWORD *v2;

  *v2 = a2;
  *(_DWORD *)(result + 12) = 1557843812;
  return result;
}

uint64_t sub_193C9B954(uint64_t a1)
{
  int v1;
  signed int v2;

  v1 = (*(_DWORD *)(a1 + 12) + 460628867 * ((((2 * a1) | 0x5510E07A) - a1 - 713584701) ^ 0x661EF240) - 1347871634) & 0x5056DDFF;
  v2 = (v1 ^ 0xA3170C1A) + *(_DWORD *)(*(_QWORD *)a1 - 0x2D6CAD6C03423C37);
  if (v2 < 0)
    v2 = -v2;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_1E31525C0 + v1 - 387)
                                        + 8
                                        * ((((v2 ^ 0xF9FFFFEF) + 100663312 + ((2 * v2) & 0xF3FFFFDE) < 0x7FFFFFFF)
                                          * ((v1 + 1426) ^ 0x45A)) ^ v1)
                                        - 12)
                            - 12))();
}

uint64_t sub_193C9BA58()
{
  unsigned int v0;
  _QWORD *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((1654 * (*(_DWORD *)(*v1 + 4 * v2) == 748569738)) ^ v0))
                            - (v3 ^ 0x781)))();
}

uint64_t sub_193C9BA98()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(*(_QWORD *)(v3 + 8 * v2)
                                        - 12
                                        + 8 * ((((v1 - 1) < 0x7FFFFFFF) * ((v0 + 1426) ^ 0x45A)) ^ v0))
                            - 12))();
}

uint64_t sub_193C9BAD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 8) = v1;
  return result;
}

void sub_193C9BADC()
{
  uint64_t v0;
  int v1;
  BOOL v2;
  char v3;

  v0 = MEMORY[0x1E0C80A78]();
  if (*(_QWORD *)(v0 + 16))
    v2 = *(_QWORD *)(v0 + 32) == 0x59F8E2836308BD99;
  else
    v2 = 1;
  v3 = v2;
  v1 = *(_DWORD *)(v0 + 4) ^ (831981571
                            * ((((2 * (v0 ^ 0xB5147B70)) | 0x1CFF4874) - (v0 ^ 0xB5147B70) - 243246138) ^ 0x22CA0F6E));
  __asm { BR              X9 }
}

uint64_t sub_193C9BC48@<X0>(int a1@<W8>)
{
  unint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  STACK[0x300] = v1;
  v6 = a1 & 0xB5E02FF;
  LOBYTE(STACK[0x19C4]) = (103 * ((2 * ((v5 + 64) & 0xF8) - (v5 + 64)) ^ 0x7C)) ^ 0x62;
  STACK[0x19C8] = (unint64_t)&STACK[0x5A93D1B978544EBF];
  STACK[0x19D0] = (unint64_t)&STACK[0x3078A7FBB52736E9];
  *(_DWORD *)(v5 - 168) = 1543737703 * ((2 * ((v5 - 192) & 0x1C486AF8) - (v5 - 192) + 1672975616) ^ 0x1D43C57C)
                        + (a1 & 0xB5E02FF)
                        - 344;
  v7 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4 + 8 * (a1 & 0xB5E02FF ^ 0x2E2u)) - 8))(v5 - 192);
  v8 = *(_DWORD *)(v5 - 192);
  LODWORD(STACK[0x484]) = v8;
  LODWORD(STACK[0x2B4]) = v2 - 694;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3
                                                      + 8
                                                      * ((2716 * (v8 == ((v6 + 1353) ^ 0x20E ^ (v2 - 694)))) ^ v6))
                                          - 8))(v7);
}

uint64_t sub_193C9BD50()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  STACK[0x2A0] = (unint64_t)&STACK[0x7EC787B491C93C79];
  STACK[0x298] = (unint64_t)&STACK[0x74FB28B159D00E34];
  STACK[0x290] = (unint64_t)&STACK[0x4B250544ABED0A62];
  STACK[0x288] = (unint64_t)&STACK[0x4C318BAC66859C69];
  v5 = 831981571 * ((v4 - 192) ^ 0x99A1D024);
  *(_DWORD *)(v4 - 184) = v0 - v5 - 1270;
  *(_WORD *)(v4 - 180) = 11557 - v5;
  *(_QWORD *)(v1 + 216) = &STACK[0x7DC79EF8DF9EACA4];
  v6 = (*(uint64_t (**)(uint64_t))(v3 + 8 * (int)(v0 - 1893)))(v4 - 192);
  v7 = LOBYTE(STACK[0x467]);
  v8 = (LOBYTE(STACK[0x464]) << 24) | (LOBYTE(STACK[0x465]) << 16) | v7 | (LOBYTE(STACK[0x466]) << ((v0 + 6) ^ 0xC2));
  LODWORD(STACK[0x4D4]) = v8 - 2 * (v8 & 0x2D2DE2FA ^ v7 & 0x18) - 1389501726;
  v9 = *(_QWORD *)(v2 + 8 * ((37 * ((STACK[0x32C] & (((v0 - 1794) | 0x508) ^ 0x5C2)) != 0)) ^ v0));
  STACK[0x218] = *(_QWORD *)(v3 + 8 * (int)(v0 - 1962));
  STACK[0x210] = *(_QWORD *)(v3 + 8 * (v0 ^ 0x7AC));
  STACK[0x200] = *(_QWORD *)(v3 + 8 * (v0 ^ 0x7D8)) - 4;
  STACK[0x208] = *(_QWORD *)(v3 + 8 * (int)(v0 - 1963)) - 4;
  return ((uint64_t (*)(uint64_t))(v9 - 8))(v6);
}

void sub_193C9C0A4(char a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  char *v11;
  _QWORD v12[89];
  int v13;
  char *v14;
  char *v15;
  int v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  int v22;

  v5 = v2 + 4;
  if ((a1 & 0x20) == 0)
    v5 = v2 + 1;
  v20 = v5;
  v6 = v19;
  if (v1 > -640831377)
  {
    if (v1 == -640831376 || v1 == 16673369)
      goto LABEL_15;
    v7 = -41527734;
  }
  else
  {
    if (v1 == -1724801802 || v1 == -1225254277)
      goto LABEL_15;
    v7 = -957405876;
  }
  if (v1 != v7)
  {
    if ((a1 & 2) != 0)
      v8 = 550622137;
    else
      v8 = 550622136;
    v22 = v8;
    v13 = 176939518;
    v16 = 306926177;
    v11 = (char *)&v12[0xF9128AC66F308C5BLL] + v12[75] + 4;
    v14 = v11 + 2048;
    v17 = v11 + 2176;
    v18 = v11;
    v15 = v11 + 2304;
    __asm { BR              X10 }
  }
LABEL_15:
  v9 = (v19 - 1473);
  v10 = v19 - 1279;
  *(_OWORD *)(v4 + 576) = xmmword_193EF83E0;
  __asm { BR              X8 }
}

uint64_t sub_193C9C1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,int a50,uint64_t a51,unint64_t a52)
{
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;

  STACK[0x18F0] = 0xB90FE60175AAC30ELL;
  STACK[0x18E8] = 0x52B1C3D719379072;
  v55 = v52 + 626;
  v56 = STACK[0x3A0];
  LODWORD(STACK[0x4D0]) = STACK[0x3A0];
  v57 = 831981571 * ((((v54 - 192) | 0x6255C7D7) + (~(v54 - 192) | 0x9DAA3828)) ^ 0xFBF417F2);
  STACK[0x19F8] = (unint64_t)&STACK[0x17480891380B5FA0];
  *(_DWORD *)(v54 - 144) = v57 + v52 + 1473 + 11;
  STACK[0x19E0] = (unint64_t)&STACK[0x18E8];
  STACK[0x19E8] = a52;
  *(_DWORD *)(v54 - 168) = -831981571 * ((((v54 - 192) | 0x6255C7D7) + (~(v54 - 192) | 0x9DAA3828)) ^ 0xFBF417F2)
                         + 745927817 * a50
                         + 1041964771;
  *(_DWORD *)(v54 - 192) = v57 + v56 + 446877731;
  STACK[0x19C8] = (unint64_t)&STACK[0x2FF5F3CC565BF4F];
  STACK[0x19D0] = (unint64_t)&STACK[0x744FE2F5CBE27AB4];
  v58 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E31525C0 + ((v52 + 1473) ^ 0x5FB)) - 8))(v54 - 192);
  v59 = *(_DWORD *)(v54 - 128);
  LODWORD(STACK[0x484]) = v59;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v53 + 8 * ((378 * (v59 == -1557818287)) ^ v55)) - 8))(v58);
}

uint64_t sub_193C9C378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t (*a28)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t *, _QWORD, _QWORD, unint64_t *),uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,int a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned int *a68;
  uint64_t (*a69)(_QWORD, _QWORD, _QWORD);
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;

  if (v69 == 550622143 || v69 == 550622140)
  {
    LOBYTE(STACK[0x5EF]) = LOBYTE(STACK[0x18F7]) ^ 0x12;
    LOBYTE(STACK[0x5EE]) = LOBYTE(STACK[0x18F6]) ^ 0x12;
    LOBYTE(STACK[0x5ED]) = LOBYTE(STACK[0x18F5]) ^ 0x12;
    LOBYTE(STACK[0x5EC]) = LOBYTE(STACK[0x18F4]) ^ 0x12;
    LOBYTE(STACK[0x5EB]) = LOBYTE(STACK[0x18F3]) ^ 0x12;
    LOBYTE(STACK[0x5EA]) = LOBYTE(STACK[0x18F2]) ^ 0x12;
    LOBYTE(STACK[0x5E9]) = LOBYTE(STACK[0x18F1]) ^ 0x12;
    LOBYTE(STACK[0x5E8]) = LOBYTE(STACK[0x18F0]) ^ 0x12;
    LOBYTE(STACK[0x5E7]) = LOBYTE(STACK[0x18EF]) ^ 0x12;
    LOBYTE(STACK[0x5E6]) = LOBYTE(STACK[0x18EE]) ^ 0x12;
    LOBYTE(STACK[0x5E5]) = LOBYTE(STACK[0x18ED]) ^ 0x12;
    LOBYTE(STACK[0x5E4]) = LOBYTE(STACK[0x18EC]) ^ 0x12;
    LOBYTE(STACK[0x5E3]) = LOBYTE(STACK[0x18EB]) ^ 0x12;
    LOBYTE(STACK[0x5E2]) = LOBYTE(STACK[0x18EA]) ^ 0x12;
    LOBYTE(STACK[0x5E1]) = LOBYTE(STACK[0x18E9]) ^ 0x12;
    LOBYTE(STACK[0x5E0]) = LOBYTE(STACK[0x18E8]) ^ 0x12;
  }
  v72 = STACK[0x300] + 676;
  v73 = a28(LODWORD(STACK[0x56C]), ((STACK[0x300] - 847) ^ 0xDF2E2E32) + v69, a42 ^ 0xEFC5E18F, LODWORD(STACK[0x4D4]) ^ 0xAD2DE2E2, &STACK[0x5E0], *(_QWORD *)(v71 + 328), LODWORD(STACK[0x45C]), &STACK[0x1900]);
  v74 = ((2 * v73) & 0x3C97E5F6) + (v73 ^ 0x1E4BF2FB);
  v75 = a69(*a68, *(_QWORD *)(v71 + 328), LODWORD(STACK[0x45C]));
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v70 + 8 * ((227 * (v74 == 508293883)) ^ v72)) - 12))(v75);
}

uint64_t sub_193C9C534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unint64_t a25,uint64_t (*a26)(uint64_t),uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,unint64_t a47)
{
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v53;
  unint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  int v58;

  if (v48 == 550622140 || v48 == 550622143)
  {
    v52 = STACK[0x300] - 849;
    LOBYTE(STACK[0x5FF]) = LOBYTE(STACK[0x190F]) - ((LOBYTE(STACK[0x190F]) << ((STACK[0x300] - 81) ^ 0x78)) & 0x24) + 18;
    LOBYTE(STACK[0x5FE]) = LOBYTE(STACK[0x190E]) - ((2 * LOBYTE(STACK[0x190E])) & 0x24) + 18;
    LOBYTE(STACK[0x5FD]) = LOBYTE(STACK[0x190D]) - ((2 * LOBYTE(STACK[0x190D])) & 0x24) + 18;
    LOBYTE(STACK[0x5FC]) = LOBYTE(STACK[0x190C]) - ((2 * LOBYTE(STACK[0x190C])) & 0x24) + 18;
    LOBYTE(STACK[0x5FB]) = LOBYTE(STACK[0x190B]) - ((2 * LOBYTE(STACK[0x190B])) & 0x24) + 18;
    LOBYTE(STACK[0x5FA]) = LOBYTE(STACK[0x190A]) - ((2 * LOBYTE(STACK[0x190A])) & 0x24) + 18;
    LOBYTE(STACK[0x5F9]) = LOBYTE(STACK[0x1909]) - ((2 * LOBYTE(STACK[0x1909])) & 0x24) + 18;
    LOBYTE(STACK[0x5F8]) = LOBYTE(STACK[0x1908]) - ((2 * LOBYTE(STACK[0x1908])) & 0x24) + 18;
    LOBYTE(STACK[0x5F7]) = LOBYTE(STACK[0x1907]) - ((2 * LOBYTE(STACK[0x1907])) & 0x24) + 18;
    LOBYTE(STACK[0x5F6]) = LOBYTE(STACK[0x1906]) - ((2 * LOBYTE(STACK[0x1906])) & 0x24) + 18;
    LOBYTE(STACK[0x5F5]) = LOBYTE(STACK[0x1905]) - ((2 * LOBYTE(STACK[0x1905])) & 0x24) + 18;
    LOBYTE(STACK[0x5F4]) = LOBYTE(STACK[0x1904]) - ((2 * LOBYTE(STACK[0x1904])) & 0x24) + 18;
    LOBYTE(STACK[0x5F3]) = LOBYTE(STACK[0x1903]) - ((2 * LOBYTE(STACK[0x1903])) & 0x24) + 18;
    LOBYTE(STACK[0x5F2]) = LOBYTE(STACK[0x1902]) - ((2 * LOBYTE(STACK[0x1902])) & 0x24) + 18;
    LOBYTE(STACK[0x5F1]) = LOBYTE(STACK[0x1901]) - ((2 * LOBYTE(STACK[0x1901])) & 0x24) + 18;
    v48 = STACK[0x4D0];
    v53 = LOBYTE(STACK[0x1900]) - ((2 * LOBYTE(STACK[0x1900])) & 0x24) + 18;
  }
  else
  {
    v52 = STACK[0x300] ^ 0x7B3;
    LOBYTE(STACK[0x5FF]) = STACK[0x18F7];
    LODWORD(STACK[0x5FB]) = STACK[0x18F3];
    STACK[0x5F3] = STACK[0x18EB];
    LOWORD(STACK[0x5F1]) = STACK[0x18E9];
    v53 = STACK[0x18E8];
  }
  LOBYTE(STACK[0x5F0]) = v53;
  v54 = *(_QWORD *)(v50 + 248);
  v55 = LODWORD(STACK[0x54C]) - ((LODWORD(STACK[0x54C]) << ((v52 ^ 2) - 122)) & 0xB38CBDE8) + 1506172660;
  v56 = 2078219279 * ((2 * ((v51 - 192) & 0x38E74D90) - (v51 - 192) + 1192800879) ^ 0x9DE2241B);
  LOBYTE(STACK[0x19D4]) = 15 * ((2 * ((v51 + 64) & 0x90) - (v51 + 64) + 111) ^ 0x1B) + 5;
  *(_DWORD *)(v51 - 132) = v55 ^ v56;
  *(_DWORD *)(v51 - 152) = v56 + v48 - 311798940 + 1482;
  *(_DWORD *)(v51 - 176) = (v52 - 119) ^ v56;
  STACK[0x19C0] = a47;
  STACK[0x19C8] = (unint64_t)&STACK[0x5F0];
  STACK[0x19D8] = v47;
  STACK[0x19E0] = a25;
  STACK[0x19F0] = v54;
  v57 = a26(v51 - 192);
  v58 = *(_DWORD *)(v51 - 136);
  LODWORD(STACK[0x484]) = v58;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v49 + 8 * ((7 * (v58 == -1557818287)) ^ v52))
                                          - (v52 + 2)
                                          + 631))(v57);
}

uint64_t sub_193C9C898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,int a50)
{
  int v50;
  int v51;
  uint64_t v52;

  return ((uint64_t (*)(void))(*(_QWORD *)(v52
                                        + 8
                                        * ((((LODWORD(STACK[0x30C]) ^ v51) != a50 - 1329454214) * (v50 ^ 0x4CD)) ^ v50))
                            - 8))();
}

void sub_193C9C8E0()
{
  int v0;
  uint64_t v1;

  LODWORD(STACK[0x484]) = 1557843471;
  *(_DWORD *)(v1 - 192) = -2024874565 - 1543737703 * ((v1 - 192) ^ 0x7EF4507C) + ((v0 + 421974912) & 0xE6D92FCE);
  sub_193CBCB50(v1 - 192);
  JUMPOUT(0x193C9D22CLL);
}

void sub_193C9C90C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned int *a67;
  void (*a68)(_QWORD, _QWORD, _QWORD);
  uint64_t v68;

  a68(*a67, *(_QWORD *)(v68 + 248), LODWORD(STACK[0x54C]));
  JUMPOUT(0x193C9D1F4);
}

uint64_t sub_193C9C924()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = ((uint64_t (*)(void))STACK[0x218])();
  LODWORD(STACK[0x3EC]) = v2;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * (((((v1 + 55) | 0xB6) - 1699) * v0) ^ (v1 + 578)))
                                          - 4))(v4);
}

void sub_193C9C964()
{
  int v0;

  LODWORD(STACK[0x484]) = v0;
  JUMPOUT(0x193C9C970);
}

uint64_t sub_193C9C9A8@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  LODWORD(STACK[0x3EC]) = v1;
  STACK[0x338] = STACK[0x2F8];
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((60 * (*(_DWORD *)STACK[0x208] == ((a1 + 1226807440) & 0xB6E067D7) - 707)) ^ a1))
                            - 8))();
}

uint64_t sub_193C9CA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t a71;
  unint64_t a72;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;

  LODWORD(STACK[0x2F0]) = v73;
  v77 = v72 + 1122;
  v78 = v72 + 87939780;
  *(_QWORD *)(v75 + 488) = 0;
  v79 = 1543737703 * ((~((v76 - 192) | 0xABD7622F) + ((v76 - 192) & 0xABD7622F)) ^ 0x2ADCCDAC);
  *(_DWORD *)(v76 - 192) = v77 - v79 - 1145;
  *(_DWORD *)(v76 - 184) = v79 ^ 0xBC293074;
  v80 = (v78 & 0xFAC227FE) + 327;
  STACK[0x19D0] = 0x194C577FB27ED9DDLL;
  STACK[0x19D8] = a71;
  STACK[0x19E0] = a72;
  v81 = ((uint64_t (*)(uint64_t))STACK[0x210])(v76 - 192);
  return (*(uint64_t (**)(uint64_t))(v74 + 8 * ((112 * (*(_DWORD *)(v76 - 188) == v80 - 1557820028)) ^ v77)))(v81);
}

uint64_t sub_193C9CAE8()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((((LODWORD(STACK[0x508]) - 642352330) < 0xFFFFF7FF)
                                          * (((v0 ^ 0x73B) + 980) ^ 0x5D2)) ^ v0))
                            - 4))();
}

uint64_t sub_193C9CB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned int *a67;
  void (*a68)(_QWORD, unint64_t *, uint64_t);
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  _BOOL4 v72;

  a68(*a67, &STACK[0x338], 2048);
  v72 = ((uint64_t (*)(_QWORD, unint64_t *, _QWORD, uint64_t))*(&off_1E31525C0 + v71 - 297))(*a67, &STACK[0x440], LODWORD(STACK[0x508]) + (v68 ^ (v69 + 966)), 1) == (v71 ^ 0x1F6);
  return ((uint64_t (*)(void))(*(_QWORD *)(v70 + 8 * ((1762 * v72) ^ v71)) - 12))();
}

uint64_t sub_193C9CBC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;

  STACK[0x338] = *(_QWORD *)(v7 + 176);
  v9 = LODWORD(STACK[0x508]) - ((2 * LODWORD(STACK[0x508]) - 1284700562) & 0xC4F2475C) + 1009755877;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((2393
                                          * (((v9 << ((((v8 ^ 8) - 40) & 0xEF) + 59)) & 0xFFF9396E ^ 0xC4F0014C)
                                           + (v9 ^ 0x1D85BF19)
                                           - 1080559762 != a6)) ^ ((((v8 ^ 0x708) - 299237684) & 0x11D5FFFF) - 980)))
                            - 12))();
}

uint64_t sub_193C9CCAC()
{
  int v0;
  int v1;
  unsigned int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((45 * ((v1 + v0 - 2147261623) > 7)) ^ v2)) - 8))();
}

uint64_t sub_193C9CD00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((23
                                          * ((((unint64_t)(v1 - a1) < 0x20) ^ (3 * (v2 ^ 0x6C) + 1)) & 1)) ^ v2 ^ 0x1A7))
                            - 4))();
}

uint64_t sub_193C9CD48()
{
  unsigned int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (int)((41 * (v0 > 0x1F)) | (v1 + 2000282290) & 0x88C61C7C)) - 4))();
}

uint64_t sub_193C9CDA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v7 = v4 - 2147261624 + v3;
  v8 = v1 + v7;
  v9 = *(_OWORD *)(v8 - 31);
  v10 = a1 + v7;
  *(_OWORD *)(v10 - 15) = *(_OWORD *)(v8 - 15);
  *(_OWORD *)(v10 - 31) = v9;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((((v2 & 0xFFFFFFE0) == 32) * (v5 ^ 0x5C4)) ^ (v5 + 362))) - 12))();
}

void sub_193C9CDFC()
{
  JUMPOUT(0x193C9CDBCLL);
}

uint64_t sub_193C9CE08()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((((v2 ^ 0x273) - 869) ^ 0xE22 ^ (494 * (v2 ^ 0x5C9))) * (v0 == v1)) ^ v2 ^ 0x273))
                            - 8))();
}

uint64_t sub_193C9CE4C(int a1)
{
  char v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((369 * ((v1 & 0x18) == ((a1 + 374) ^ 0x70E ^ (a1 - 1551510654) & 0x5C7A2AED))) ^ a1))
                            - 4))();
}

uint64_t sub_193C9CE9C@<X0>(int a1@<W3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = v5 - 1080559762 + v4 - v6 + ((v7 + 609) ^ (a1 + 805));
  *(_QWORD *)(a2 - 7 + v9) = *(_QWORD *)(v2 - 7 + v9);
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((2022 * (v6 - (v3 & 0xFFFFFFF8) == -8)) ^ v7)) - 8))();
}

void sub_193C9CF00()
{
  JUMPOUT(0x193C9CECCLL);
}

uint64_t sub_193C9CF0C(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)((((v2 + 496509625) & 0xE267DDEB ^ 0x7D9) * (v1 == a1)) ^ v2))
                            - 4))();
}

uint64_t sub_193C9CF4C@<X0>(int a1@<W3>, int a2@<W5>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  *(_BYTE *)(a3 + (v4 + a1)) = *(_BYTE *)(v3 + (v4 + a1));
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((v4 - 1 == a2) * v6) ^ (v5 - 135))) - 4))();
}

uint64_t sub_193C9CF80()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((122 * (STACK[0x578] == 0)) ^ (v0 + 244))) - 8))();
}

uint64_t sub_193C9CFBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  LODWORD(STACK[0x3EC]) = v5;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v6
                                                                                          + 8
                                                                                          * (((((v4 + 55) | 0xB6) - 1699)
                                                                                            * v3) ^ (v4 + 578)))
                                                                              - 4))(a1, a2, a3, STACK[0x300]);
}

uint64_t sub_193C9CFEC@<X0>(int a1@<W8>)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  LODWORD(STACK[0x3D8]) = STACK[0x2C8];
  LODWORD(STACK[0x4CC]) = STACK[0x2E0];
  v4[8] = STACK[0x2D0];
  v4[10] = STACK[0x2E8];
  v4[5] = STACK[0x2D8];
  v4[35] = v2;
  LODWORD(STACK[0x38C]) = 2;
  v4[19] = 0;
  LODWORD(STACK[0x528]) = 0;
  LODWORD(STACK[0x35C]) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)((15 * ((v1 >> 1) & 1)) ^ a1)) - 4))();
}

uint64_t sub_193C9D068@<X0>(uint64_t a1@<X5>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  char *v34;
  int v35;
  uint64_t v36;

  *(_DWORD *)(STACK[0x208] + 360) = 550622137;
  v29 = ((uint64_t (*)(_QWORD, uint64_t, unint64_t *, unint64_t, _QWORD, uint64_t, unint64_t *, unint64_t *))*(&off_1E31525C0 + ((6 * (a2 ^ 0x640)) ^ 0x583)))(LODWORD(STACK[0x2F0]), 2, &STACK[0x38C], STACK[0x338], (v23 - 642350281), a1, &STACK[0x428], &STACK[0x528]);
  v31 = STACK[0x300];
  v32 = ((2 * v29) & 0xD7FBF7FE) + (v29 ^ 0x6BFDFBFF);
  LODWORD(STACK[0x460]) = v32 - 48613494;
  if (v32 == 1811807231)
  {
    LODWORD(STACK[0x3A4]) = 1464451865;
    v27[29] = v27[19];
    LODWORD(STACK[0x52C]) = (LODWORD(STACK[0x528]) ^ 0xE6EDFFCF)
                          + 1062960378
                          + ((((v31 - 1444) | 0x680) - 841221896) & (2 * LODWORD(STACK[0x528])));
    v27[33] = STACK[0x2E8];
    STACK[0x320] = v24;
    v34 = (char *)&STACK[0x600] + STACK[0x258] - 0x376BA9CC867BA324;
    v27[50] = v34 + 2432;
    v27[44] = v34 + 2560;
    *((_QWORD *)v34 + 304) = 0x6370646600;
    v34[2440] = 1;
    JUMPOUT(0x193C9D3E0);
  }
  if (v32 == 2080242690)
  {
    LODWORD(STACK[0x3EC]) = 1557843817;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v26
                                                                                 + 8
                                                                                 * ((v27[19] == 0) ^ ((int)v31 - 520))))(v29, v27[19], v30, v31);
  }
  else
  {
    v35 = 1178560073 * ((((v28 - 192) | 0xCE0A706D) - (v28 - 192) + ((v28 - 192) & 0x31F58F90)) ^ 0x293F5205);
    *(_QWORD *)(v25 + 224) = a23;
    *(_DWORD *)(v28 - 192) = v31 - v35 + 594;
    *(_DWORD *)(v28 - 188) = v32 - v35 - ((2 * (v32 - 48613494) + 768579822) & 0x464B28A2) + 925341778;
    v36 = sub_193CB2E70((_DWORD *)(v28 - 192));
    return (*(uint64_t (**)(uint64_t))(v26 + 8 * (int)((v27[19] == 0) ^ (STACK[0x300] - 520))))(v36);
  }
}

uint64_t sub_193C9D17C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((3976 * (*(_QWORD *)(v2 + 328) == 0)) ^ (((v0 | 0x401) ^ 0xCB) + 468)))
                            - ((127 * ((v0 | 0x401) ^ 0x504u)) ^ 0x27FLL)))();
}

void sub_193C9D1D4()
{
  JUMPOUT(0x193C9D1ECLL);
}

uint64_t sub_193C9D270()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = (v0 + 572);
  LODWORD(STACK[0x3D8]) = STACK[0x2C8];
  LODWORD(STACK[0x4CC]) = STACK[0x2E0];
  v5[8] = STACK[0x2D0];
  v5[10] = STACK[0x2E8];
  v5[5] = STACK[0x2D8];
  *(_DWORD *)(v1 + 52) = v6 - 528 + *(_DWORD *)(v1 + 52) - 750;
  LODWORD(STACK[0x4D0]) = *(_DWORD *)(v1 + 360);
  STACK[0x258] = v2 + v6 - 1279;
  v5[35] = v2 + v6 - 1279;
  LODWORD(STACK[0x484]) = v3;
  LODWORD(STACK[0x2E0]) = STACK[0x4CC];
  LODWORD(STACK[0x2C8]) = STACK[0x3D8];
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (int)(((v5[1] == 0) * (v6 + 2017)) ^ v6)) - 12))();
}

void sub_193C9D2B0(int a1@<W8>, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;

  LODWORD(STACK[0x3D8]) = STACK[0x2C8];
  LODWORD(STACK[0x4CC]) = STACK[0x2E0];
  v3[8] = STACK[0x2D0];
  v3[10] = STACK[0x2E8];
  v3[5] = STACK[0x2D8];
  v4 = (v2 ^ 0xC06) + STACK[0x258];
  LODWORD(STACK[0x3EC]) = a1;
  v5 = (((v2 ^ 0x769) + 731) ^ 0xFFFFFFFFFFFFF34ALL) + v4;
  STACK[0x258] = v5;
  v3[35] = v5;
  LODWORD(STACK[0x484]) = a1;
  LODWORD(STACK[0x2E0]) = STACK[0x4CC];
  LODWORD(STACK[0x2C8]) = STACK[0x3D8];
  v6 = (char *)&a2 + STACK[0x258] - 0x376BA9CC867B9D24;
  STACK[0x2D0] = (unint64_t)(v6 + 2048);
  STACK[0x2E8] = (unint64_t)(v6 + 2176);
  STACK[0x2F8] = (unint64_t)v6;
  STACK[0x2D8] = (unint64_t)(v6 + 2304);
  JUMPOUT(0x193C9C970);
}

void sub_193C9D300()
{
  LODWORD(STACK[0x460]) = 1763193737;
  JUMPOUT(0x193C9D318);
}

uint64_t sub_193C9D488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a65;
  char *a66;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v71 = (v66 - 755);
  STACK[0x220] = (v71 ^ 0x2C7) + (unint64_t)&STACK[0x568] % 0x25;
  STACK[0x2F0] = *(_QWORD *)(v69 + 368);
  a66 = (char *)&a9
      + v67
      + ((16 * ((&a9 - 0x376BA9CC867B9D24) + (_BYTE)v67) + 16) & 0x20)
      - 0x376BA9CC867B9D14;
  STACK[0x2A8] = 2078219279
               * ((-2 - ((~(v70 - 192) | 0x16CAD830D6695E77) + ((v70 - 192) | 0xE93527CF2996A188))) ^ 0xE428909A0C93C803);
  LODWORD(STACK[0x2D8]) = 42 * (a4 ^ 0x5D7);
  LODWORD(STACK[0x2D0]) = a4 + 1998278406;
  a65 = a4 ^ 0x564;
  *(int32x4_t *)&STACK[0x260] = vdupq_n_s32(0x65E8CC84u);
  *(int32x4_t *)&STACK[0x270] = vdupq_n_s32(0x7FFFFFFEu);
  *(int32x4_t *)&STACK[0x230] = vdupq_n_s32(0x65E8CC83u);
  *(int32x4_t *)&STACK[0x240] = vdupq_n_s32(0xCBD19906);
  v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 8 * (int)(((((((_DWORD)v71 - 333) | 0x440) ^ 0x5EA) == 32) * ((2 * v71) ^ 0x23)) ^ v71));
  STACK[0x2E8] = (unint64_t)*(&off_1E31525C0 + (int)v71 - 509);
  STACK[0x2E0] = (unint64_t)*(&off_1E31525C0 + (int)(v71 ^ 0x2A1));
  return v72(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61);
}

uint64_t sub_193C9D634()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);

  LODWORD(STACK[0x18F8]) = 1709755523;
  LODWORD(STACK[0x18FC]) = -52396964;
  v5 = *(_DWORD **)(v3 + 8 * (v0 - 1278));
  STACK[0x2B8] = (unint64_t)v5;
  LODWORD(STACK[0x568]) = *v5;
  v6 = *(unsigned int **)(v3 + 8 * (v0 ^ 0x590));
  STACK[0x2C0] = (unint64_t)v6;
  v7 = *v6;
  v8 = STACK[0x2A8];
  v9 = ((v0 + 559721905) & 0x717FBF41) + STACK[0x2A8];
  v10 = (v0 - 1689052984) ^ STACK[0x2A8];
  *(_DWORD *)(v4 - 188) = v0 + 559721905 + STACK[0x2A8];
  *(_DWORD *)(v4 - 184) = v10;
  *(_DWORD *)(v4 - 168) = v9;
  *(_DWORD *)(v4 - 164) = v0 + 559721905 - v8 - 60;
  *(_QWORD *)(v1 + 232) = v8;
  *(_QWORD *)(v1 + 256) = v7 ^ v8;
  *(_DWORD *)(v4 - 160) = v8;
  v11 = ((uint64_t (*)(uint64_t))STACK[0x200])(v4 - 192);
  v12 = (uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * *(int *)(v4 - 192)) - 12);
  STACK[0x2F8] = *(_QWORD *)(v3 + 8 * (v0 - 1466)) - 12;
  return v12(v11);
}

uint64_t sub_193C9D704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a66;
  uint64_t (*a70)(unint64_t, uint64_t);
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int v74;

  v73 = STACK[0x300] - 1223;
  STACK[0x2F0] = a70(STACK[0x220], 2965982036);
  v74 = (*(uint64_t (**)(void))(v72 + 8 * a66))();
  *v70 = v74;
  v70[1] = 1812433253 * (v74 ^ (v74 >> 30)) + 1;
  return (*(uint64_t (**)(void))(v71 + 8 * ((880 * ((((v73 - 129) | 0x421) ^ 0x6CCu) <= 1)) ^ v73)))();
}

uint64_t sub_193C9D788@<X0>(char a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  _BYTE *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;

  v6 = v2 ^ 0xC2;
  v7 = STACK[0x2C8];
  v8 = (_BYTE *)(v3 + (LODWORD(STACK[0x2C8]) - 2120701450));
  v9 = 1086434125
     * ((*(_DWORD *)(*(_QWORD *)STACK[0x2E0] + (*(_DWORD *)STACK[0x2E8] & 0x35163D24)) ^ v8) & ((v6 ^ 0x7BB) + 2147482920));
  v10 = 1086434125 * (v9 ^ HIWORD(v9));
  v11 = v10 >> (((v6 - 115) & 0xFEu) + 32);
  LOBYTE(v11) = *((_BYTE *)*(&off_1E31525C0 + (v6 ^ 0x5D8)) + v11 - 4) ^ ((v1 ^ 0x5F103D1Du) >> a1) ^ *((_BYTE *)*(&off_1E31525C0 + (int)(v6 & 0xBA8742F2)) + v11 - 12) ^ *((_BYTE *)*(&off_1E31525C0 + v6 - 1285) + v11 + 5) ^ v10 ^ (-85 * v11);
  *v8 = v11;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((250 * (v7 - (v11 != 0) != v4)) ^ v6)) - 12))();
}

void sub_193C9E3F8()
{
  int v0;

  LODWORD(STACK[0x2C8]) = v0;
  JUMPOUT(0x193C9D5D8);
}

uint64_t sub_193C9E404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t (*a65)(void);
  unint64_t v65;
  uint64_t v66;

  STACK[0x350] = v65;
  *(_QWORD *)(v66 + 368) = STACK[0x2F0];
  return a65();
}

uint64_t sub_193C9E42C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,int a59,int a60,unint64_t a61,unint64_t a62,char *a63)
{
  unsigned int a66;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  char v73;

  v70 = v69[29];
  v71 = v69[44];
  v69[57] = *(_QWORD *)(v68 + 8 * (a4 - 1423));
  a62 = ((unint64_t)&STACK[0x360] ^ 0xFDBFE1EFFBDEFFEELL)
      + v67
      + (((_QWORD)&STACK[0x360] << ((a4 + 101) ^ 0x2Eu)) & 0xFB7FC3DFF7BDFFD0);
  a63 = (char *)&a9 - 0x376BA9CC867B9CBDLL;
  a61 = a62 + 17;
  LODWORD(STACK[0x240]) = a4 - 1529220717;
  LODWORD(STACK[0x230]) = a4 ^ 0x5C1;
  a66 = (a4 + 83004868) & 0xFB0D6E7D;
  a59 = (a4 - 1076844143) & 0x402F57AF;
  a60 = a59 ^ 0x19E;
  v69[35] = v66 + 112;
  v69[18] = v70;
  if (v70)
    v72 = v71 == 0;
  else
    v72 = 1;
  v73 = v72;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v68
                                                                                + 8
                                                                                * (((((a4 + 51) ^ v73) & 1)
                                                                                  * (a4 + 2367)) ^ (a4 + 357)))
                                                                    - 8))(v71, 746, 513, (__n128)0);
}

uint64_t sub_193C9E55C(uint64_t a1, __n128 a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;

  v6 = (char *)&STACK[0x600] + v3 - 0x376BA9CC867BA324;
  *(_DWORD *)v6 = 243461564;
  *((_QWORD *)v6 + 1) = 0;
  *((_DWORD *)v6 + 4) = 338172470;
  *((_DWORD *)v6 + 6) = 642350281;
  *((_DWORD *)v6 + 10) = 642350281;
  *((_QWORD *)v6 + 4) = 0;
  STACK[0x310] = (unint64_t)(v6 + 40);
  *((_QWORD *)v6 + 6) = 0;
  STACK[0x368] = (unint64_t)(v6 + 48);
  *((_DWORD *)v6 + 14) = 642350281;
  *((_QWORD *)v6 + 8) = 0;
  STACK[0x348] = (unint64_t)(v6 + 64);
  *((_DWORD *)v6 + 18) = 642350281;
  v5[36] = v6 + 72;
  v5[37] = v6 + 56;
  *((_QWORD *)v6 + 10) = 0;
  v5[28] = v6 + 80;
  v6[88] = 113;
  *(_DWORD *)a1 = 243461564;
  *(__n128 *)(a1 + 4) = a2;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 642350281;
  *(_DWORD *)(a1 + 28) = 943913716;
  STACK[0x228] = a1 + 28;
  *(__n128 *)(a1 + 436) = a2;
  *(__n128 *)(a1 + 452) = a2;
  *(_QWORD *)(a1 + 468) = 0;
  *(_DWORD *)(a1 + 232) = 943913716;
  STACK[0x220] = a1 + 232;
  *(_QWORD *)(a1 + 1128) = 0x1212121212121212;
  *(_QWORD *)(a1 + 1136) = 0x1212121212121212;
  *(_QWORD *)(a1 + 1144) = 303174162;
  *(__n128 *)(a1 + 1152) = a2;
  *(__n128 *)(a1 + 1168) = a2;
  *(__n128 *)(a1 + 1184) = a2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((79 * ((((v2 - 1149) | 0xAu) ^ 0x58ALL) != 32)) ^ (v2 - 75))) - 4))();
}

uint64_t sub_193C9E69C@<X0>(uint64_t (*a1)(void)@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  STACK[0x258] = v2 - 112;
  *(_QWORD *)(v3 + 280) = v2 - 112;
  STACK[0x2F8] = (unint64_t)*(&off_1E31525C0 + ((v1 - 357) ^ 0x50F)) - 12;
  return a1();
}

uint64_t sub_193C9E6D4(uint64_t a1, __n128 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;

  STACK[0x258] = v4;
  *(_DWORD *)(a1 + 1424) = 1353938824;
  *(_DWORD *)(a1 + 1428) = 141396923;
  *(_QWORD *)(a1 + 1432) = v3;
  *(_QWORD *)(a1 + 1440) = v3;
  *(_DWORD *)(a1 + 1448) = v5;
  *(__n128 *)(a1 + 1452) = a2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (v2 ^ 2 | 2)) - (((v2 ^ 2u) - 1069) ^ 0x5FLL)))();
}

uint64_t sub_193C9E730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(__n128 *)(a1 + v4) = a3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (v3 | (2 * (v4 != 1500)))) - (a2 ^ v5)))();
}

uint64_t sub_193C9E754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  _DWORD *v72;
  _BOOL4 v74;
  uint64_t v75;

  v69 = (a9 + 507);
  *(_QWORD *)(a1 + 1516) = v62;
  *(_QWORD *)(a1 + 1524) = v62;
  *(_DWORD *)(a1 + 1532) = v63;
  *(_QWORD *)(v65 + 96) = a1;
  *(_DWORD *)(a1 + 476) = 376798310;
  STACK[0x2D0] = *(_QWORD *)(v66 + 8 * a9) - 8;
  v70 = v67[35];
  STACK[0x2E8] = (unint64_t)&STACK[0x600] + v70 + v69 - 0x376BA9CC867BA57ALL;
  STACK[0x2A8] = v70;
  STACK[0x260] = v70 + 432;
  STACK[0x2E0] = v67[18];
  STACK[0x270] = v65;
  v71 = a9 + 265;
  v67[35] = STACK[0x260];
  LODWORD(STACK[0x548]) = -106521497;
  LODWORD(STACK[0x4C8]) = 642350281;
  v67[24] = 0;
  LODWORD(STACK[0x3FC]) = 1586172382;
  v72 = (_DWORD *)STACK[0x2E8];
  *v72 = v68 + 2137;
  LODWORD(STACK[0x2C8]) = -1236190148;
  LODWORD(STACK[0x2F0]) = -923583145;
  LODWORD(STACK[0x2F8]) = ((v69 - 242) ^ 0xD4BE832C) + 391575882;
  LODWORD(STACK[0x2B8]) = -429502;
  v74 = *v72 != v68 + v71 + 1781 || (_DWORD)a8 + 1 != (_DWORD)a8 + v71 + 1474 - 1830;
  v75 = *(_QWORD *)(v66 + 8 * (int)((v74 * a2) ^ v71));
  LODWORD(STACK[0x2C0]) = -1686053110;
  LODWORD(STACK[0x2D8]) = v64;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v75 - 12))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62);
}

uint64_t sub_193C9E8E4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * (v9 ^ ((v8 == a8) * a6))) - (((v9 - 414) | a3) - 1090) + 835))();
}

uint64_t sub_193C9E918(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  _BOOL4 v6;

  v6 = (((((v3 - 1777) | a3) ^ 0xD9B681A3) + v4) & ((19 * (v3 ^ 0x7AA)) ^ 0xFFFFFD65)) - LODWORD(STACK[0x2D8]) == -642350281;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((4 * v6) | (32 * v6)) ^ v3)) - 8))();
}

uint64_t sub_193C9E978()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((50 * (v0 == ((((v1 - 110) | 0x80) + v3) ^ (v1 - 1642343323) & 0x61E42FD3))) ^ v1)))();
}

uint64_t sub_193C9E9C4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  _BOOL4 v6;

  v6 = LODWORD(STACK[0x3FC]) - v2 != ((v0 + 579352866) & 0xDD77C6EF) + 943821418 || v1 == v4 + 9 * (v0 ^ 0x25B) + 391;
  return (*(uint64_t (**)(void))(v3 + 8 * ((50 * v6) ^ v0)))();
}

uint64_t sub_193C9EA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;

  v13 = (_DWORD *)STACK[0x2E8];
  *v13 = v9 - 1;
  v14 = &v13[6 * (v9 - 780377674)];
  v15 = v14[2];
  STACK[0x2E0] = *((_QWORD *)v14 + 2);
  LODWORD(STACK[0x3FC]) = v14[6];
  return ((uint64_t (*)(void))(*(_QWORD *)(v11
                                        + 8
                                        * (int)(((*(_DWORD *)(v10 + (v15 + a7) * (uint64_t)v12 + 36) != a8)
                                               * ((((97 * (v8 ^ 0x2B9) - 1710) | 0x140) ^ 0xFFFFFFC9)
                                                + ((97 * (v8 ^ 0x2B9) - 975) | 0x44))) ^ (97 * (v8 ^ 0x2B9))))
                            - 4))();
}

uint64_t sub_193C9EB00()
{
  int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  _BOOL4 v5;

  v3 = LODWORD(STACK[0x3FC]) + ((v0 - 1870811619) & 0x6F824FFF ^ 0x681E3C5E);
  v4 = (v1 - 1604332977 < (((v0 + 697) | 0xC3) ^ 0xC6A949DB)) ^ (v3 < 0xC6A94F18);
  v5 = v3 < v1 - 1604332977;
  if (v4)
    v5 = v1 - 1604332977 < (((v0 + 697) | 0xC3) ^ 0xC6A949DB);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((26 * !v5) ^ v0)) - 12))();
}

uint64_t sub_193C9EB94@<X0>(int a1@<W6>, int a2@<W8>)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * (int)(((*(_DWORD *)(v4
                                                            + (((4 * v3) ^ 0x1A68 ^ (a1 - 356)) + v2) * (uint64_t)v6
                                                            + 36) == a2)
                                               * ((v3 + 2026038555) & 0x873D14FF ^ 0xCF)) ^ v3))
                            - 4))();
}

uint64_t sub_193C9EC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _BOOL4 v13;

  v13 = v8 != ((v9 + 1020823273) & 0xC3277F3F ^ 0xA3259356) || v10 == a8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((956 * v13) ^ v9)) - 12))();
}

uint64_t sub_193C9EC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8
                                        * ((28
                                          * ((((v7 - 1577) ^ ((*(_DWORD *)(v9 + (v8 + a7) * (uint64_t)v11 + 40) & 8) == (v7 ^ 0x707))) & 1) == 0)) ^ v7))
                            - 4))();
}

uint64_t sub_193C9ECAC@<X0>(int a1@<W7>, int a2@<W8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  _BOOL4 v8;
  int v9;

  v6 = *(_DWORD *)(v3 + v2 * (uint64_t)v5 + 36);
  v8 = v6 - 1742707527 > ((((a2 + 324) | 0x140) + 1223898841) ^ (a2 + 1577)) || v6 - 1742707527 < SLODWORD(STACK[0x2F0]);
  v9 = !v8;
  if (v6 == a1)
    v9 = 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((41 * v9) ^ a2)) - 12))();
}

uint64_t sub_193C9ED18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;

  v8 = v5 - 510;
  if (v6)
    v9 = -1557818287;
  else
    v9 = a5 + 7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((818 * (v9 == -1557818287)) ^ v8))
                            - (v8 + 1126)
                            + 1470))();
}

uint64_t sub_193C9F594(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  _BOOL4 v13;

  v13 = *(_DWORD *)STACK[0x2E8] != v11 + v8 + 1781 || v9 != a8 + v8 + 1474 - 1830;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((v13 * a2) ^ v8)) - 12))();
}

uint64_t sub_193C9F5E4()
{
  STACK[0x4A8] = STACK[0x2A8];
  return ((uint64_t (*)(void))STACK[0x2D0])();
}

uint64_t sub_193C9F600(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((((STACK[0x240] & 0x5B2608FB) + 1547) * (v5 == v4)) ^ (a4 - 574)))
                            - 8))();
}

void sub_193C9F634(int a1@<W8>)
{
  uint64_t v1;
  unint64_t *v2;

  v2 = (unint64_t *)STACK[0x368];
  STACK[0x270] = STACK[0x228];
  STACK[0x2E0] = *v2;
  STACK[0x2D0] = *(_QWORD *)(v1 + 8 * a1);
  JUMPOUT(0x193C9E7E8);
}

uint64_t sub_193C9F6D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,int a61,char a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a67;
  uint64_t v67;
  uint64_t v68;

  *(_QWORD *)(a67 + 1560) = **(_QWORD **)(v68 + 224);
  *(_DWORD *)(a67 + 1552) = **(_DWORD **)(v68 + 288);
  *(_QWORD *)(*(_QWORD *)(a64 + 96) + 488) = *(_QWORD *)(a64 + 8);
  *(_DWORD *)(*(_QWORD *)(a64 + 96) + 480) = *(_DWORD *)a64;
  *(_BYTE *)(a63 + STACK[0x258]) = (a62 ^ 0xBA) * a60;
  return ((uint64_t (*)(void))(*(_QWORD *)(v67 + 8 * (a4 - 599)) - 12))();
}

uint64_t sub_193C9F770@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  STACK[0x360] = 104 - a1;
  v4 = *(uint64_t (**)(void))(v3 + 456);
  STACK[0x258] = v2 - 112;
  *(_QWORD *)(v3 + 280) = v2 - 112;
  STACK[0x2F8] = (unint64_t)*(&off_1E31525C0 + ((v1 - 357) ^ 0x50F)) - 12;
  return v4();
}

uint64_t sub_193C9F7B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a65;
  int v65;
  int v66;
  uint64_t v67;

  return (*(uint64_t (**)(void))(v67 + 8 * ((215 * (v66 == v65 + a65 - 524)) ^ (a4 - 1224))))();
}

uint64_t sub_193C9F7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a65;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;

  v67 = v66[44];
  STACK[0x330] = v67;
  v66[56] = 0;
  LODWORD(STACK[0x50C]) = 642350281;
  v66[12] = 0;
  LODWORD(STACK[0x430]) = 642350281;
  v66[21] = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v65 + 8
                                              * (((v67 == 0) * ((a65 ^ 0x7C6) + 741 * (a65 ^ 0x20E) - 2947)) ^ a65))
                            - 8))();
}

uint64_t sub_193C9F84C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 8 * ((((v1 + 21 + *(_BYTE *)(a1 + 32) - *((_BYTE *)*(&off_1E31525C0 + (v1 ^ 0x54B)) - 12)) == 187) * (((v1 - 234096107) & 0xDF403FF) - 592)) ^ (v1 + 730))))(2124643789, 4060871189, 234095615, 0xB08B39B78E8D5CC7, 1216, 1850, 2170324601, 1188);
}

uint64_t sub_193C9F8F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, int a6)
{
  unsigned int v6;
  int v7;
  uint64_t v8;

  return (*(uint64_t (**)(void))(v8 + 8 * (((v7 != ((((v6 + 43) | a5) + 97) & 0x7F)) * a6) ^ v6)))();
}

void sub_193C9F920()
{
  JUMPOUT(0x193C9F8B8);
}

uint64_t sub_193C9F930(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59)
{
  unint64_t v59;
  int v60;
  int v61;
  uint64_t v62;

  STACK[0x2A8] = v59;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v62 + 8 * ((a59 * (v61 == v60)) ^ (a4 - 1419))) - 12))(18);
}

uint64_t sub_193C9F98C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,int a59)
{
  int v59;
  char v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;

  v64 = (*(unsigned __int8 *)(STACK[0x438] + 1516) ^ a1)
      - (((a59 + 52) ^ 0x3C) * v60 + *(_BYTE *)STACK[0x4E0] - 88);
  return ((uint64_t (*)(void))(*(_QWORD *)(v63 + 8 * ((((v61 & (2 * v64)) + (v64 ^ v59) == v59) * v62) ^ (a59 - 1740)))
                            - (a59 - 321)
                            + 1470))();
}

uint64_t sub_193C9F9FC@<X0>(uint64_t a1@<X8>)
{
  int v1;
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (((a1 + (v1 ^ v3) == 82) * v7) ^ v1)) - (((v1 ^ v4) * v5) ^ v2)))();
}

uint64_t sub_193C9FA34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  v5 = v3 + 491;
  v6 = (*(_BYTE *)(a3 + a2) + ((v5 - 72) ^ 0x3E) - *(_BYTE *)*(&off_1E31525C0 + v5 - 1282)) == 152;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4
                                                                        + 8
                                                                        * ((((v5 - 1) ^ v6) & 1 | (2 * (((v5 - 1) ^ v6) & 1))) ^ (v5 + 454)))
                                                            - 8))(a1, 1438, 162);
}

uint64_t sub_193C9FB10(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;

  return (*(uint64_t (**)(void))(v10
                              + 8
                              * (((v9 == (((v8 + a7) & (a1 + 1)) + ((v8 + a7 + a1) | 2) - 105)) * a8) ^ v8)))();
}

void sub_193C9FB44()
{
  JUMPOUT(0x193C9FAC8);
}

uint64_t sub_193C9FB50@<X0>(char a1@<W2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  int v5;

  v5 = (((((v3 + 56) | 0x24) - 55) & 0xDA ^ a1)
                       + ((((v3 + 56) | 0x24) - 55) & 0xDA)
                       - 118
                       + *(_BYTE *)(a3 + a2)
                       - *((_BYTE *)*(&off_1E31525C0 + ((((v3 - 1480) | 0x524) - 252254007) & 0xF0917DA) - 1288) - 12)) == 152;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((8 * v5) | (v5 << 6)) ^ (((((v3 - 1480) | 0x524) - 252254007) & 0xF0917DA)
                                                                   + 352)))
                            - 12))();
}

uint64_t sub_193C9FC18(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, unint64_t a6)
{
  int v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (v6 ^ a2 ^ ((v7 != 43) * a5)))
                            - (((((v6 ^ a2) + 1078) | 0x140u) - 1224) ^ a6)))();
}

void sub_193C9FC4C()
{
  JUMPOUT(0x193C9FBD4);
}

uint64_t sub_193C9FC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t (*a70)(uint64_t, uint64_t);
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v73 = (v70 - 863869554) & 0x337D9B1F;
  v74 = a70(1576, 2940923044);
  *(_QWORD *)(v72 + 168) = v74;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 8 * ((((v73 ^ 1 ^ (v74 == 0)) & 1) * (v73 - 53)) | v73)))(v74, v75, v76, v77, v78, v79, v80, v81, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58);
}

uint64_t sub_193C9FD14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t (*a70)(uint64_t, uint64_t);
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  STACK[0x2A8] = v70;
  v74 = a70(1576, 3012117910);
  *(_QWORD *)(v73 + 392) = v74;
  return ((uint64_t (*)(void))(*(_QWORD *)(v72 + 8 * (((((v71 - 121) | 0x40) - 1459) * (v74 == 0)) ^ v71)) - 8))();
}

uint64_t sub_193C9FD60()
{
  int v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((v0 != ((v1 - 870) | 0x82) + 1878925098) * ((149 * ((v1 - 832) ^ 0x287)) ^ 0x7B5)) | (v1 - 832))))();
}

uint64_t sub_193C9FDC4@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (a1 ^ (13 * (v2 == v1))))
                            - ((((a1 - 2076228506) & 0x7BC0B6EE) + 4) ^ (a1 - 1195))))();
}

uint64_t sub_193C9FE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,unint64_t a56,unint64_t a57)
{
  unint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t);

  v62 = 1543737703 * ((2 * (v58 & 0x2E688FC0) - v58 + 1368879163) ^ 0x2F632047);
  STACK[0x19D0] = v57;
  STACK[0x19D8] = a56;
  STACK[0x19E0] = a57;
  *(_DWORD *)(v61 - 192) = v60 - v62 - 58;
  *(_DWORD *)(v61 - 184) = v62 ^ 0xBC293073;
  v63 = ((uint64_t (*)(uint64_t))STACK[0x210])(v61 - 192);
  v64 = (uint64_t (*)(uint64_t))(*(_QWORD *)(v59
                                                    + 8
                                                    * (((*(_DWORD *)(v61 - 188) == (v60 ^ 0x2D9) - 1557818350)
                                                      * ((v60 - 679) ^ 0x26)) | v60))
                                        - 4);
  STACK[0x2F0] = (unint64_t)*(&off_1E31525C0 + (v60 ^ 0x232u)) - 4;
  return v64(v63);
}

uint64_t sub_193C9FF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,unint64_t a56,unint64_t a57)
{
  unint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;

  STACK[0x2F0] = v57;
  v61 = 1543737703 * ((v60 + 2096514469 - 2 * ((v60 - 192) & 0x7CF64665)) ^ 0x2021619);
  STACK[0x19D8] = a56;
  STACK[0x19E0] = a57;
  STACK[0x19D0] = 0x194C577FB27ED9DDLL;
  *(_DWORD *)(v60 - 192) = v58 - v61 - 58;
  *(_DWORD *)(v60 - 184) = v61 ^ 0xBC293071;
  v62 = ((uint64_t (*)(uint64_t))STACK[0x210])(v60 - 192);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v59
                                                      + 8
                                                      * (((*(_DWORD *)(v60 - 188) == ((v58 + 956625497) & 0xC6FB0AFF ^ 0xA325946E))
                                                        * (v58 ^ 0x2FF)) | v58))
                                          - 4))(v62);
}

uint64_t sub_193CA001C()
{
  unint64_t v0;
  int v1;
  int v2;
  int v3;
  uint64_t v4;

  STACK[0x2F0] = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (((v3 ^ 0x866) * (v2 == v1)) ^ v3)) - 4))();
}

uint64_t sub_193CA006C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;
  int v58;
  int v59;
  _QWORD *v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;

  v65 = ((952184280 - (v58 | 0x38C12DD8) + (v58 | 0xC73ED227)) ^ 0xB9CA825B) * v61;
  v60[29] = v57;
  v60[30] = a56;
  v60[31] = a57;
  *(_DWORD *)(v64 - 184) = v65 ^ 0xBC293071;
  *(_DWORD *)(v64 - 192) = v62 - v65 - 58;
  v66 = ((uint64_t (*)(uint64_t))STACK[0x210])(v64 - 192);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v63
                                                      + 8
                                                      * ((25
                                                        * (*(_DWORD *)(v64 - 188) == v59
                                                                                   + ((v62 - 1048897575) & 0x3E84E57F)
                                                                                   - 63)) ^ v62))
                                          - (v62 - 679)
                                          + 59))(v66);
}

uint64_t sub_193CA014C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  int v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t);
  int v51;
  int v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  int v60;

  v58 = (((v48 | 0x8562E86F) - v48 + (v48 & 0x7A9D1790)) ^ 0xFB96B813) * v54;
  v53[31] = a48;
  *(_DWORD *)(v57 - 192) = v52 - v58 + 621;
  *(_DWORD *)(v57 - 184) = a1 ^ v58;
  v53[29] = v49;
  v53[30] = a47;
  v59 = v50(v57 - 192);
  v60 = *(_DWORD *)(v57 - 188);
  *(_QWORD *)(v56 + 336) = STACK[0x2F0];
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v55 + 8 * (((v60 == v51) * (39 * (v52 ^ 0x19) - 1042)) ^ v52)) - 12))(v59, 746, 513, STACK[0x300], 1557843848, 4010, 3475842940, 819124355, (__n128)0);
}

void sub_193CA0218()
{
  JUMPOUT(0x193CA0234);
}

uint64_t sub_193CA0258()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 336) = STACK[0x2F0];
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((13 * (STACK[0x3F0] == 0)) ^ (v0 + 1138))) - 12))();
}

uint64_t sub_193CA0C6C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((565 * (*(_QWORD *)(v2 + 448) != 0)) ^ (v0 - 25))) - 4))();
}

uint64_t sub_193CA0CA0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((167 * (*(_QWORD *)(v2 + 168) == 0)) ^ (v0 + 105))) - 8))();
}

uint64_t sub_193CA0CC8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  ((void (*)(void))STACK[0x218])();
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((443 * (*(_QWORD *)(v2 + 392) != 0)) ^ (v0 + 731))) - 8))();
}

uint64_t sub_193CA0CF8()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = ((uint64_t (*)(void))STACK[0x218])();
  return (*(uint64_t (**)(uint64_t))(v3 + 8 * (((v1 + 856) * (v2 == v0)) ^ (v1 - 1224))))(v4);
}

uint64_t sub_193CA0D20()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  ((void (*)(void))STACK[0x218])();
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((565 * (*(_QWORD *)(v2 + 448) != 0)) ^ (v0 - 25))) - 4))();
}

uint64_t sub_193CA0D5C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  ((void (*)(void))STACK[0x218])();
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((167 * (*(_QWORD *)(v2 + 168) == 0)) ^ (v0 + 105))) - 8))();
}

uint64_t sub_193CA0D8C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((443 * (*(_QWORD *)(v2 + 392) != 0)) ^ (v0 + 731))) - 8))();
}

uint64_t sub_193CA0DB4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * (((v1 + 856) * (v2 == v0)) ^ (v1 - 1224))))();
}

uint64_t sub_193CA0DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,unint64_t a48)
{
  int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;

  LODWORD(STACK[0x3A4]) = 1464451585;
  LODWORD(STACK[0x564]) = 128;
  v52 = v50[44];
  v53 = v50[33];
  STACK[0x1A00] = v50[50];
  STACK[0x19C8] = 0;
  STACK[0x19D0] = a48;
  v54 = 2078219279 * ((((v51 - 192) | 0x5E547D4C) - (v51 - 192) + ((v51 - 192) & 0xA1AB82B0)) ^ 0x84AEEB38);
  STACK[0x19C0] = v52 + 0x2D6CAD6C03423E4BLL;
  *(_DWORD *)(v51 - 168) = 965904596 - v54;
  *(_DWORD *)(v51 - 132) = v54 + v48 + 269;
  STACK[0x19E0] = v52 + 0x2D6CAD6C03423F5BLL;
  STACK[0x19E8] = 0;
  STACK[0x19F0] = v53;
  v55 = ((uint64_t (*)(uint64_t))STACK[0x2F8])(v51 - 192);
  return (*(uint64_t (**)(uint64_t))(v49
                                            + 8
                                            * (((*(_DWORD *)(v51 - 136) == ((v48 + 1224) ^ LODWORD(STACK[0x2B4])))
                                              * ((11 * (v48 ^ 0x11F)) ^ 0x136)) ^ v48)))(v55);
}

uint64_t sub_193CA0EE8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((v0 - STACK[0x320] < (unint64_t)(39 * (v1 ^ 0x138u)) - 241) * (v1 + 1446)) ^ v1)))();
}

uint64_t sub_193CA0F34@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(a1 + v2 - 148640272) = *(_BYTE *)(v4 + v2 - 148640272)
                                  - ((2 * *(_BYTE *)(v4 + v2 - 148640272)) & 0x24)
                                  + 18;
  return (*(uint64_t (**)(void))(v5 + 8 * (((v2 - 1 != v3) * ((v1 + 440) ^ 0x402)) ^ v1)))();
}

uint64_t sub_193CA0F80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;

  v5 = v3 + 127 - v1;
  v6 = vrev64q_s8(*(int8x16_t *)(v5 - 15));
  v7 = vextq_s8(v6, v6, 8uLL);
  v8 = vrev64q_s8(*(int8x16_t *)(v5 - 31));
  v9 = vextq_s8(v8, v8, 8uLL);
  v10 = a1 + 127 - v1;
  v11.i64[0] = 0x2424242424242424;
  v11.i64[1] = 0x2424242424242424;
  v12.i64[0] = 0x1212121212121212;
  v12.i64[1] = 0x1212121212121212;
  v13 = vrev64q_s8(vaddq_s8(vsubq_s8(v7, vandq_s8(vaddq_s8(v7, v7), v11)), v12));
  *(int8x16_t *)(v10 - 15) = vextq_s8(v13, v13, 8uLL);
  v14 = vrev64q_s8(vaddq_s8(vsubq_s8(v9, vandq_s8(vaddq_s8(v9, v9), v11)), v12));
  *(int8x16_t *)(v10 - 31) = vextq_s8(v14, v14, 8uLL);
  return (*(uint64_t (**)(void))(v4 + 8 * (((v1 != 96) * (v2 - 227)) | v2)))();
}

uint64_t sub_193CA100C()
{
  int v0;
  uint64_t v1;

  LODWORD(STACK[0x3EC]) = -1557818287;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((43
                                * ((((v0 + 1) ^ ((*(_DWORD *)(STACK[0x208] + 360) - 550622137) < 0xFFFFFFFE)) & 1) == 0)) ^ v0)))();
}

uint64_t sub_193CA105C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,unint64_t a29)
{
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  int v37;
  int v38;
  char *v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v41;
  uint64_t v42;

  v34 = STACK[0x460];
  v35 = STACK[0x300];
  if (LODWORD(STACK[0x460]) == 1763193737)
  {
    v37 = (v35 - 1409489453) & 0x540315E6;
    v38 = v35 - 591;
    v39 = (char *)&STACK[0x600] + v30 + ((v35 - 488) ^ 0xC89456337984565ELL);
    STACK[0x340] = (unint64_t)v39;
    LODWORD(STACK[0x570]) = 85583387;
    v32[35] = v30 - 192;
    v32[3] = 0;
    LODWORD(STACK[0x4EC]) = 642350281;
    v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 + 8 * (((v39 != (char *)-248) * (v37 ^ 0x75C)) ^ v38)) - 8);
    STACK[0x2D0] = v32[5];
    STACK[0x2E8] = (unint64_t)(v39 + 228);
    STACK[0x2F0] = (unint64_t)v39;
    return v40(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else if (v34 == 2031629196)
  {
    LODWORD(STACK[0x3EC]) = v29 - 31;
    return (*(uint64_t (**)(void))(v31 + 8 * ((v32[19] == 0) ^ ((int)v35 - 520))))();
  }
  else
  {
    v41 = 1178560073 * ((2 * ((v33 - 192) & 0x711B3750) - (v33 - 192) - 1897609047) ^ 0x69D1EAC1);
    STACK[0x19C8] = a29;
    *(_DWORD *)(v33 - 192) = v35 - v41 + 594;
    *(_DWORD *)(v33 - 188) = v34 - v41 - ((2 * v34 + 768579822) & 0x464B28A2) + 973955272;
    v42 = sub_193CB2E70((_DWORD *)(v33 - 192));
    return (*(uint64_t (**)(uint64_t))(v31 + 8 * (int)((v32[19] == 0) ^ (STACK[0x300] - 520))))(v42);
  }
}

uint64_t sub_193CA1940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v70 = ((uint64_t (*)(uint64_t))STACK[0x218])(a66);
  *(_QWORD *)(v69 + 280) = STACK[0x2A8] - 1824;
  LODWORD(STACK[0x3EC]) = v67;
  return (*(uint64_t (**)(uint64_t))(v68 + 8 * ((*(_QWORD *)(v69 + 152) == 0) ^ (v66 - 520))))(v70);
}

uint64_t sub_193CA1998@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 280) = a1 - 16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((v1 == -1557818287) * (((v2 - 802) | 0x50A) + 49)) ^ v2)) - 12))();
}

uint64_t sub_193CA19DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;

  LODWORD(STACK[0x5A0]) = a17;
  return ((uint64_t (*)(void))(*(_QWORD *)(v18 + 8 * ((1099 * (*(_QWORD *)(v19 + 112) != 0)) ^ (v17 - 1088))) - 8))();
}

void sub_193CA3EC0()
{
  JUMPOUT(0x193CA1D6CLL);
}

uint64_t sub_193CA3FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, unsigned int a18)
{
  uint64_t v18;
  unint64_t v19;

  v19 = STACK[0x390];
  STACK[0x580] -= 32;
  *(_BYTE *)(v19 + 335) = (a18 + 67) ^ *(_BYTE *)(a13 + 335) ^ 0xCD ^ *((_BYTE *)*(&off_1E31525C0 + (int)(a18 - 673)) + 3) ^ *((_BYTE *)*(&off_1E31525C0 + (a18 ^ 0x30E)) + 13) ^ *((_BYTE *)*(&off_1E31525C0 + (int)(a18 - 702)) + 10) ^ 0x8E;
  return ((uint64_t (*)(void))(*(_QWORD *)(v18 + 8 * a18) - 4))();
}

void sub_193CA4060()
{
  JUMPOUT(0x193CA3FE8);
}

uint64_t sub_193CA4068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)(a5 + 280) += (v5 + 46) ^ 0xFFFFFFFFFFFFFA3ALL;
  return (*(uint64_t (**)(void))(v6 + 8 * ((52 * (((_BYTE)v5 + 36) & 1)) ^ v5)))();
}

uint64_t sub_193CA40A4@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;

  v4 = *(_BYTE **)(v1 + 256);
  v3[12] = ((((a1 | 0x50Au) - 760610049) >> 24) ^ 0xD2)
         - 2 * (((((a1 | 0x50Au) - 760610049) >> 24) ^ 0xD2) & 0x1A ^ (((a1 | 0x50Au) - 760610049) >> 24) & 8)
         + 18;
  v3[13] = ((((a1 | 0x50Au) - 760610049) >> 16) ^ 0xAA)
         - 2 * (((((a1 | 0x50Au) - 760610049) >> 16) ^ 0xAA) & 0x17 ^ (((a1 | 0x50Au) - 760610049) >> 16) & 5)
         + 18;
  v3[14] = (((unsigned __int16)((a1 | 0x50A) + 767) >> 8) ^ 8) - ((((a1 | 0x50Au) - 760610049) >> 7) & 0x24) + 18;
  v3[15] = ((a1 | 0xA) - 1) ^ 0xDA;
  v4[16] ^= *v3 ^ 0x12;
  v4[17] ^= v3[1] ^ 0x12;
  v4[18] ^= v3[2] ^ 0x12;
  v4[19] ^= v3[3] ^ 0x12;
  v4[20] ^= v3[4] ^ 0x12;
  v4[21] ^= v3[5] ^ 0x12;
  v4[22] ^= v3[6] ^ 0x12;
  v4[23] ^= v3[7] ^ 0x12;
  v4[24] ^= v3[8] ^ 0x12;
  v4[25] ^= v3[9] ^ 0x12;
  v4[26] ^= v3[10] ^ 0x12;
  v4[27] ^= v3[11] ^ 0x12;
  v4[28] ^= v3[12] ^ 0x12;
  v4[29] ^= v3[13] ^ 0x12;
  v4[30] ^= v3[14] ^ 0x12;
  v4[31] ^= v3[15] ^ 0x12;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2
                                                                                          + 8
                                                                                          * (((a1 | 0x50A) - 673) ^ 3))
                                                                              - 4))(23, 5, 36, 218, 18);
}

void sub_193CA42D4()
{
  JUMPOUT(0x193CA40F4);
}

uint64_t sub_193CA42DC()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((23
                                          * (((((((v0 + 1241) | 8) ^ 0xB2F) + 611) ^ (LODWORD(STACK[0x574]) == 642350281)) & 1) == 0)) ^ ((v0 + 1241) | 8)))
                            - 4))();
}

uint64_t sub_193CA4350@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((*(unsigned __int8 *)(v2 + (v1 + v4 - 1 - 1)) != (((a1 - 95) | 0xA0) ^ 0xBA))
                                          * (a1 - 645)) ^ a1))
                            - 4))();
}

uint64_t sub_193CA43A0@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((23 * ((((((a1 + 1249) ^ 0xB2F) + 611) ^ (v3 + v1 == 1)) & 1) == 0)) ^ (a1 + 1249)))
                            - 4))();
}

uint64_t sub_193CA43E0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  LODWORD(STACK[0x574]) = 642350281;
  v2 = (v0 + 137);
  v3 = STACK[0x490];
  v4 = ((unint64_t)&STACK[0x530] ^ 0x67FFCCC774FFAD5FLL)
     - 0x120044144080502
     + ((v2 ^ 0xCFFF998EE9FF5CE0) & (2 * (_QWORD)&STACK[0x530]));
  STACK[0x530] = 335;
  *(_BYTE *)(v3 + 335) = ((v4 - 93) ^ 0xBA) * (v4 - 76);
  return (*(uint64_t (**)(void))(v1 + 8 * (int)((502 * (STACK[0x530] == 0)) ^ v2)))();
}

void sub_193CA48F0()
{
  JUMPOUT(0x193CA48B8);
}

uint64_t sub_193CA48FC()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  v3 = ((uint64_t (*)(void))STACK[0x218])();
  LODWORD(STACK[0x5A0]) = v2;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1
                                                      + 8
                                                      * (((v2 == ((v0 + 1123) ^ LODWORD(STACK[0x2B4])))
                                                        * (((v0 - 159) | 0x502) ^ 0x73D)) ^ v0))
                                          - 12))(v3);
}

uint64_t sub_193CA4944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a65;
  int a67;
  int a68;
  unint64_t a69;
  int v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  unint64_t v74;

  v71 = STACK[0x300];
  v72 = STACK[0x2F0];
  v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v70 + 8 * (v69 - 1469)) - 8);
  v74 = STACK[0x2D0];
  STACK[0x258] = STACK[0x2D0] + 49;
  STACK[0x240] = v72 + 49;
  STACK[0x230] = v74 + 29;
  STACK[0x228] = v72 + 29;
  STACK[0x220] = v74 + 9;
  a69 = v72 + 9;
  STACK[0x2E0] = (unint64_t)&a9 - 0x376BA9CC867B9CE4;
  STACK[0x2A8] = ((unint64_t)&STACK[0x408] ^ 0x73E1EFFFF98F9FDELL)
               - 0x42808C44010187DELL
               + ((2 * (_QWORD)&STACK[0x408]) & 0xE7C3DFFFF31F3FB0);
  LODWORD(STACK[0x2C8]) = v71 - 1146;
  LODWORD(STACK[0x2D8]) = v71 - 762400243;
  *(int32x4_t *)&STACK[0x260] = vdupq_n_s32(0xA3259451);
  *(int32x4_t *)&STACK[0x270] = vdupq_n_s32(0x23259457u);
  a68 = v71 ^ 0x555;
  a67 = v71 ^ 0x5FF;
  a65 = v71 - 75764717;
  a63 = 159 * (v71 ^ 0x5C9);
  STACK[0x2C0] = ((_DWORD)v71 - 1957670507) & 0x74AFA8B8;
  LODWORD(STACK[0x2B8]) = v71 + 1661741236;
  return v73(a1, a2, a3, v71, a5, 4073998838, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           (int)v71);
}

uint64_t sub_193CA4964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;

  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 + 8 * ((1099 * (*(_QWORD *)(v10 + 112) != 0)) ^ (v8 - 1088))) - 8))(*(_QWORD *)(v10 + 112), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_193CA4990(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v6;

  *(_BYTE *)(a1 + (v5 - 1261236732)) = *(_BYTE *)(a4 + (v5 - 1261236732));
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((2045 * (v5 - 1 == ((v4 + 1398938078) & 0xAC9DE5FF ^ (a2 + 600)))) ^ (v4 - 516)))
                            - 4))();
}

uint64_t sub_193CA49F0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * (int)(((((a4 + 1416934705) & 0xAB8B478F) + 3431) * (v4 & 1)) ^ (a4 + 558)))
                            - 8))();
}

uint64_t sub_193CA4A2C()
{
  int v0;
  uint64_t v1;
  int v2;

  return (*(uint64_t (**)(void))(v1 + 8 * (((((2 * v2) ^ 0xDC) - 1140) * ((v0 ^ 0xA3259451) < 0x201)) ^ v2)))();
}

uint64_t sub_193CA4A68()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((1592
                                * ((5 * v0) + (unint64_t)(3 * (v3 ^ 0x365u)) - 1478 == v1 - 642350281)) ^ v3)))();
}

uint64_t sub_193CA4AB0()
{
  unint64_t v0;
  uint64_t v1;
  int v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  void (*v12)(uint64_t);
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t);
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;

  v8 = v6 + 831;
  v3[31] = 0x5CE8F21F4108C7F6;
  v3[32] = v3 + 33;
  v9 = (unint64_t)v3 + 0x2D6CAD6C03423D33;
  v3[65] = 0x5CE8F21F4108C7F6;
  STACK[0x2F8] = v0;
  v3[66] = v3 + 67;
  STACK[0x270] = (unint64_t)v3 + 0x2D6CAD6C03423E43;
  v3[99] = 0x5CE8F21F4108C7F6;
  v3[100] = v3 + 101;
  STACK[0x2A8] = (unint64_t)v3 + 0x2D6CAD6C03423F53;
  v3[133] = 0x5CE8F21F4108C7F6;
  v3[134] = v3 + 135;
  STACK[0x2C0] = (unint64_t)v3 + 0x2D6CAD6C03424063;
  v3[167] = 0x5CE8F21F4108C7F6;
  v3[168] = v3 + 169;
  STACK[0x2C8] = (unint64_t)v3 + 0x2D6CAD6C03424173;
  v10 = *(_QWORD *)(v1 + 24) + 4;
  STACK[0x260] = v10;
  LODWORD(STACK[0x2D8]) = 2 * v4;
  LODWORD(STACK[0x2B8]) = v2;
  v11 = 460628867 * ((v7 - 1683903536 - 2 * ((v7 - 192) & 0x9BA1AC90)) ^ 0xD7372EED);
  *(_DWORD *)(v7 - 192) = v6 + 513 + v11;
  *(_DWORD *)(v7 - 184) = ((v4 ^ 0x9C3A61AE) - 67764354 + ((2 * v4) & 0x7E3FEBFE ^ 0x460B28A2)) ^ v11;
  STACK[0x19D0] = v10;
  STACK[0x19D8] = v9;
  v12 = (void (*)(uint64_t))((char *)*(&off_1E31525C0 + v6 - 470) - 8);
  STACK[0x2E0] = (unint64_t)v12;
  v12(v7 - 192);
  v13 = 460628867 * (((v7 - 192) & 0xF9C3DAD5 | ~((v7 - 192) | 0xF9C3DAD5)) ^ 0x4AAAA757);
  v14 = v6 + 513;
  LODWORD(STACK[0x258]) = v6 + 513;
  *(_DWORD *)(v7 - 192) = v6 + 513 + v13;
  *(_DWORD *)(v7 - 184) = (((2 * v4) & 0xF7AFFFFA ^ 0x460B28A2) + ((v6 + 1492281633) ^ v4) + 1061025152) ^ v13;
  v15 = STACK[0x2F8];
  v16 = STACK[0x260] + STACK[0x2F8];
  v17 = STACK[0x270];
  STACK[0x19D0] = v16;
  STACK[0x19D8] = v17;
  ((void (*)(uint64_t))STACK[0x2E0])(v7 - 192);
  v18 = 460628867 * ((v7 - 828698416 - 2 * ((v7 - 192) & 0xCE9B1190)) ^ 0x820D93ED);
  *(_DWORD *)(v7 - 184) = ((v4 ^ 0x58B069AE) + 1065351038 + (STACK[0x2D8] & 0xF72BFBFE ^ 0x460B28A2)) ^ v18;
  *(_DWORD *)(v7 - 192) = v14 + v18;
  v19 = v16 + v15;
  v20 = STACK[0x2A8];
  STACK[0x19D0] = v19;
  STACK[0x19D8] = v20;
  v21 = (void (*)(uint64_t))STACK[0x2E0];
  ((void (*)(uint64_t))STACK[0x2E0])(v7 - 192);
  v22 = v19 + v15;
  STACK[0x2A8] = v19 + v15;
  LODWORD(v15) = STACK[0x2D8];
  v23 = 460628867 * ((((v7 - 192) | 0xDB3E7A1F) - (v7 - 192) + ((v7 - 192) & 0x24C185E0)) ^ 0x97A8F862);
  v24 = STACK[0x2C0];
  STACK[0x19D0] = v22;
  STACK[0x19D8] = v24;
  LODWORD(v19) = STACK[0x258];
  *(_DWORD *)(v7 - 192) = LODWORD(STACK[0x258]) + v23;
  *(_DWORD *)(v7 - 184) = ((v4 ^ 0x9852612C) + (v15 & 0x76EFEAFA ^ 0x464B28A2) - 6422528) ^ v23;
  v21(v7 - 192);
  v25 = 460628867 * ((((v7 - 192) | 0xE3103062) - (v7 - 192) + ((v7 - 192) & 0x1CEFCF98)) ^ 0xAF86B21F);
  *(_DWORD *)(v7 - 192) = v19 + v25;
  *(_DWORD *)(v7 - 184) = ((v4 ^ 0x9CB86B2E) - 76024322 + (v15 & 0x7F3BFEFE ^ 0x460B28A2)) ^ v25;
  STACK[0x19D0] = STACK[0x2A8] + STACK[0x2F8];
  STACK[0x19D8] = STACK[0x2C8];
  v21(v7 - 192);
  v26 = STACK[0x3A8];
  v27 = (LODWORD(STACK[0x2B8]) - 642350281);
  STACK[0x538] = v27;
  return (*(uint64_t (**)(unint64_t))(v5
                                                     + 8 * ((228 * ((_DWORD)v27 != (v8 ^ 0x26D) - 1959)) ^ (v8 + 570))))(v26);
}

uint64_t sub_193CA4F3C@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v5 = ((unint64_t)&STACK[0x538] ^ 0x77BFFC7F8D7963FDLL)
     - 0x240458420168014DLL
     + ((2 * (_QWORD)&STACK[0x538]) & 0xEF7FF8FF1AF2C7F0);
  v6 = v2 - 1;
  *(_QWORD *)(v4 + 424) = v6;
  *(_BYTE *)(a1 + v6) = ((a2 + 56) & 0xEA ^ (v5 + 80) ^ 0x70) * (v5 + 97);
  return (*(uint64_t (**)(void))(v3 + 8 * ((4003 * (*(_QWORD *)(v4 + 424) == 0)) ^ a2)))();
}

void sub_193CA4FD8()
{
  JUMPOUT(0x193CA4F98);
}

uint64_t sub_193CA4FE0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  ((void (*)(void))STACK[0x218])();
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1099 * (*(_QWORD *)(v2 + 112) != 0)) ^ (v0 - 1088))) - 8))();
}

uint64_t sub_193CA5010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = ((uint64_t (*)(void))STACK[0x218])();
  *(_QWORD *)(v19 + 280) -= 16;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18
                                                      + 8
                                                      * (int)(((a17 == -1557818287)
                                                             * (((((v17 + 1324983836) & 0xB10657FB) - 802) | 0x50A) + 49)) ^ (v17 + 1324983836) & 0xB10657FB))
                                          - 12))(v20);
}

uint64_t sub_193CA5084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,unint64_t a50)
{
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;

  v57 = 235795823 * ((2 * ((v56 - 192) & 0x16580530) - (v56 - 192) + 1772616394) ^ 0xFD0AB393);
  STACK[0x19C8] = 0;
  STACK[0x19D0] = v52;
  STACK[0x19E0] = a50;
  STACK[0x19F0] = 0;
  STACK[0x19F8] = v53;
  *(_DWORD *)(v56 - 152) = v54 - v57 - 159;
  *(_DWORD *)(v56 - 148) = v57 ^ v50;
  STACK[0x19C0] = v51;
  v58 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E31525C0 + (v54 ^ 0x3A3)) - 8))(v56 - 192);
  v59 = *(_DWORD *)(v56 - 168);
  LODWORD(STACK[0x5A4]) = v59;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v55
                                                      + 8
                                                      * (((v59 == v54 - 1557819281) * ((v54 + 488) ^ 0x31C)) ^ v54))
                                          - 12))(v58);
}

void sub_193CA5154()
{
  JUMPOUT(0x193CA5168);
}

void sub_193CA52D8()
{
  int v0;

  LODWORD(STACK[0x59C]) = v0;
  JUMPOUT(0x193CA531CLL);
}

uint64_t sub_193CA5398()
{
  unsigned int v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  STACK[0x2F8] = v3;
  v5 = LODWORD(STACK[0x2C8]) | 3;
  v6 = STACK[0x31C];
  *(_DWORD *)(*(_QWORD *)(v4 + 568) + 4 * ((v6 + v0) >> ((LOBYTE(STACK[0x2C8]) | 3) - 81))) = v1;
  LODWORD(STACK[0x31C]) = v6 + 4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8 * ((185 * (((v5 - 869003908) & 0x33CBF130 ^ v0) + v6 + 4 < 0x40)) ^ v5))
                            - 4))();
}

void sub_193CA6A70()
{
  JUMPOUT(0x193CA6A9CLL);
}

uint64_t sub_193CA6AAC@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;

  v10 = v7 + v3;
  v11 = *(_DWORD *)(a1 + 4 * (v7 + v3 - 8)) ^ *(_DWORD *)(a1 + 4 * (v7 + v3 - 3));
  v12 = v11 + v8 - ((v11 << (v1 - 7)) & v4);
  v13 = *(_DWORD *)(a1 + 4 * (v10 - 16)) ^ *(_DWORD *)(a1 + 4 * (v10 - 14));
  HIDWORD(v14) = v13 ^ v5 ^ v12;
  LODWORD(v14) = v13 ^ ~v12;
  *(_DWORD *)(a1 + 4 * (v2 + v7)) = (v14 >> 31) + v8 - (v4 & (2 * (v14 >> 31)));
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((((v2 + 1 + v7) < 0x50) * v6) ^ v1)) - 4))();
}

uint64_t sub_193CA6B38()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((3741 * ((v1 + 1287597944) > 0x13)) ^ (v0 + 1752)))
                            - 8))();
}

void sub_193CA6C24()
{
  JUMPOUT(0x193CA6B78);
}

uint64_t sub_193CA6C3C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((41 * ((a4 + 1 + v5) > 0x27)) ^ v4)) - 8))();
}

uint64_t sub_193CA6D08(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v5 + 8 * ((1852 * ((a2 + 1 + v4) > 0x3B)) ^ v3))
                                          - 8))(a3);
}

uint64_t sub_193CA6DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((26 * ((a5 + 1 + v6) > 0x4F)) ^ v5)) - 8))();
}

void sub_193CA6EBC(char a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  LODWORD(STACK[0x434]) = v1;
  LODWORD(STACK[0x3DC]) = v4;
  LODWORD(STACK[0x384]) = v2;
  LODWORD(STACK[0x4A4]) = v3;
  LODWORD(STACK[0x31C]) = v7 + 80;
  v10 = *(_QWORD *)(v9 + 552);
  v11 = *(_DWORD *)(v10 - 0x3C058A92099E3479);
  LODWORD(STACK[0x414]) = v5;
  *(_DWORD *)(v10 - 0x3C058A92099E3479) = (v11 ^ v6)
                                          + (v5 ^ v6)
                                          + v6
                                          - ((((v11 ^ v6) + (v5 ^ v6)) << ((78 * (a1 ^ 0x7C)) ^ 0xCB)) & v8);
  JUMPOUT(0x193CA6F50);
}

uint64_t sub_193CA702C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v69;
  unint64_t v70;
  unint64_t v71;

  v66 = *(_QWORD *)(v65 + 56);
  v67 = *(unsigned __int8 *)(v66 - 0x3C058A92099E3471) ^ 0x1C;
  if (v67 == 2)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 + 8 * ((61 * (*(_DWORD *)(v66 - 0x3C058A92099E3475) == 1497258463)) ^ (a4 - 622))) - ((a4 - 280) ^ 0x4B6)))(a1, 3720750209, a64, 1944889708, a5, a6, 2262164908, 2032802403);
  if (v67 == 1)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 + 8 * (int)(((*(_DWORD *)(v66 - 0x3C058A92099E3475) == 1497258463) * (((STACK[0x300] - 1094) | 1) ^ 0x194)) ^ (STACK[0x300] + 95))) - 8))(a1, a2, a64, 3113152424, 2995438258, a6, 2262164908, 2032802403);
  v69 = 7 * (a4 ^ 0x553);
  v70 = STACK[0x2A8];
  v71 = STACK[0x300];
  *(_QWORD *)(v65 + 120) = 91;
  *(_BYTE *)(v66 - 0x3C058A92099E3476) = (v70 ^ ((v69 ^ 0xE5) - 16)) * (v70 + 17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 + 8 * ((97 * (*(_QWORD *)(v65 + 120) != 0)) ^ v69)) - 4))(a1, a2, a64, v71, 2995438258, a6, 2262164908, 2032802403);
}

void sub_193CA784C()
{
  JUMPOUT(0x193CA780CLL);
}

uint64_t sub_193CA7854()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_193CA7884@<X0>(int a1@<W1>, unsigned int a2@<W3>, uint64_t a3@<X8>)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _BOOL4 v11;
  _BOOL4 v12;

  v7 = 5 * (v4 ^ 0x41F);
  v8 = *(_QWORD *)(v6 + 360);
  v9 = *(_DWORD *)(a3 - 0x3C058A92099E3489 + ((a1 + 574217087) & 0xFFFFFFFC));
  *(_BYTE *)(v8 + (a1 + 574217087)) = ((v9 >> (((v7 - 89) | 0xC2) + 78)) ^ 0x29)
                                                  - ((2 * (v9 >> (((v7 - 89) | 0xC2) + 78))) & 0x24)
                                                  + 18;
  *(_BYTE *)(v8 + (a1 + 574217088)) = (BYTE2(v9) ^ 0x66) - ((2 * (BYTE2(v9) ^ 0x66)) & 0x24) + 18;
  *(_BYTE *)(v8 + (a1 + 574217089)) = (BYTE1(v9) ^ 0x56) - ((2 * (BYTE1(v9) ^ 0x56)) & 0x24) + 18;
  *(_BYTE *)(v8 + (a1 + 574217090)) = ~(_BYTE)v9;
  v10 = *v3 + 447631245;
  v11 = v10 < a2;
  v12 = v10 > 0x73ECA970;
  if (a2 > 0x73ECA970 != v11)
    v12 = v11;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((2003 * v12) ^ v7)) - 4))();
}

void sub_193CA7988()
{
  JUMPOUT(0x193CA78B0);
}

uint64_t sub_193CA7990(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;

  v7 = ((a4 - 1557819769) ^ LODWORD(STACK[0x59C])) + (v4 ^ 0xA3259451);
  *(_DWORD *)(STACK[0x208] + 52) = ((v7 % 0x2710) ^ 0x91FD6E75) + 2130444192 + ((2 * (v7 % 0x2710)) & 0x5CEA);
  v8 = STACK[0x5A4];
  *(_QWORD *)(v6 + 280) -= 1616;
  LODWORD(STACK[0x3EC]) = v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((31 * (v8 != -1557818287)) ^ (a4 - 795))) - 4))();
}

uint64_t sub_193CA7A30(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v4 + 8 * ((*(_QWORD *)(v5 + 152) == 0) ^ (a4 - 520))))();
}

uint64_t sub_193CA7A64(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 280) -= 1616;
  LODWORD(STACK[0x3EC]) = 1557843814;
  return (*(uint64_t (**)(void))(v4 + 8 * ((*(_QWORD *)(v5 + 152) == 0) ^ (a4 - 520))))();
}

uint64_t sub_193CA7AC0@<X0>(uint64_t a1@<X1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,unsigned int *a61,uint64_t (*a62)(_QWORD, uint64_t, _QWORD))
{
  int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;

  v64 = (a2 + 1684967432) & 0x9B916EF7;
  v65 = a62(*a61, a1, LODWORD(STACK[0x528]));
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v63 + 8 * (int)((1861 * (LODWORD(STACK[0x3EC]) != v62)) ^ v64))
                                          - ((((v64 + 381) | 0xBF) - 528) ^ 0x2EBLL)))(v65);
}

uint64_t sub_193CA7BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,int a50,uint64_t a51,uint64_t a52)
{
  int v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;

  v57 = STACK[0x4D0];
  v58 = 69008221 * (((((v56 - 192) | 0xD70DA702) ^ 0xFFFFFFFE) - (~(v56 - 192) | 0x28F258FD)) ^ 0xFB500AF7);
  v54[28] = a52;
  *(_DWORD *)(v56 - 152) = v58 + 569425277 * a50 + ((v52 + 667) | 0x40) - 1547873339;
  *(_DWORD *)(v56 - 176) = (v52 - 549) ^ v58;
  *(_DWORD *)(v56 - 188) = v57 - v58 - 89624671;
  v54[30] = a42;
  v54[31] = a43;
  v59 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E31525C0 + (v52 ^ 0x2A7)) - 8))(v56 - 192);
  v60 = *(_DWORD *)(v56 - 192);
  LODWORD(STACK[0x484]) = v60;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v55 + 8 * ((2572 * (v60 == v53)) ^ v52)) - 12))(v59);
}

uint64_t sub_193CA7CCC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 328) = *(_QWORD *)(v2 + 8);
  LODWORD(STACK[0x45C]) = STACK[0x3C4];
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((1010
                                * ((STACK[0x4D0] & 0xFFFFFFFE) == ((((v0 - 1811565828) & 0x6BFA4DED) + 1357447702) & 0xAF16FAEF ^ 0x20D1D49D ^ (494 * ((v0 - 1811565828) & 0x6BFA4DED ^ 0x5EA))))) ^ (v0 - 1811565828) & 0x6BFA4DED)))();
}

uint64_t sub_193CA7D6C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  int v46;
  int v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;

  v53 = *(_QWORD *)(v51 + 328);
  v54 = STACK[0x3C4];
  v55 = 831981571 * ((((2 * (v52 - 192)) | 0xE506EE72) - (v52 - 192) + 226265287) ^ 0x6B22A71D);
  v48[31] = a46;
  v48[32] = a1;
  *(_DWORD *)(v52 - 168) = v55 + 1619760309 * v46 + 502004788;
  *(_DWORD *)(v52 - 192) = v55 + 437073029 * v54 + 1473045444;
  *(_DWORD *)(v52 - 144) = v47 - v55 + 1695026701;
  v48[28] = a45;
  v48[29] = v53;
  v56 = sub_193CBC8F8(v52 - 192);
  v57 = *(_DWORD *)(v52 - 140);
  LODWORD(STACK[0x484]) = v57;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v49
                                                      + 8
                                                      * ((1049 * (v57 == v50 + ((v47 + 403) | 0x148) - 1482)) ^ v47))
                                          - 12))(v56);
}

uint64_t sub_193CA7E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,int a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t a65;
  unint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;

  v70 = STACK[0x45C];
  v71 = 235795823 * ((2 * ((v69 - 192) & 0x79F49EB8) - (v69 - 192) - 2046074556) ^ 0x12A6281D);
  v72 = *(_DWORD *)(STACK[0x208] + 52) - v71 + 1652994174;
  STACK[0x19D0] = (unint64_t)&STACK[0x5E0];
  STACK[0x19C0] = a65;
  STACK[0x19E0] = v65;
  *(_DWORD *)(v69 - 184) = v72;
  *(_DWORD *)(v69 - 148) = v66 - v71 - 702;
  *(_DWORD *)(v69 - 168) = (a42 ^ 0x1428BE74) - v71 + ((2 * a42) & 0xF7DABFF6 ^ 0xD78A8316) + 2006105752;
  *(_DWORD *)(v69 - 164) = ((v70 ^ 0x6FB3BDF3)
                          - 1845601299
                          + ((v70 << ((-57 * ((v66 - 21) & 0xEF ^ 0xCD)) ^ 0x70)) & 0xDF677BE6)) ^ v71;
  v73 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E31525C0 + (v66 ^ 0x296)) - 8))(v69 - 192);
  v74 = *(_DWORD *)(v69 - 152);
  LODWORD(STACK[0x484]) = v74;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v67 + 8 * ((493 * (v74 == v68)) ^ v66)) - 12))(v73);
}

uint64_t sub_193CA7FD0()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((226 * (v0 - 550622137 < ((v1 + 89) ^ 0xFFFFFA34))) ^ v1)) - 8))();
}

uint64_t sub_193CA8008@<X0>(int a1@<W8>, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t (*a21)(uint64_t, _QWORD, _QWORD, uint64_t, unint64_t *, uint64_t, uint64_t, unint64_t *),uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,int a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,unint64_t a58,uint64_t a59,uint64_t a60,unsigned int *a61,void (*a62)(_QWORD, uint64_t, uint64_t))
{
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  char *v77;
  int v78;
  int v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  int v89;

  v71 = *(unsigned int *)STACK[0x208];
  v72 = (*(_DWORD *)(STACK[0x208] + 52) - 284782101);
  a2 = &STACK[0x488];
  a3 = &STACK[0x54C];
  v73 = a21(v71, (a1 + v62 + 2), a35 ^ 0xEFC5E18F, v72, &STACK[0x5E0], v63, v64, &STACK[0x1900]);
  v75 = STACK[0x300];
  v76 = (v65 ^ v73 ^ 0xBF5FFF2B) + ((2 * v73) & 0x7EBFF5C2) + 1391155072;
  if (v76 == 575361636)
    return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v67
                                                                 + 8
                                                                 * (int)(((v75 - 1437)
                                                                        * ((LODWORD(STACK[0x2C8])
                                                                                        - 176939518) > 2)) ^ (v75 - 176)))
                                                     - 4))(v73, v74);
  if (v76 != 306926177)
  {
    v78 = 1178560073 * ((((v70 - 192) | 0x86A04B52) - ((v70 - 192) & 0x86A04B52)) ^ 0x6195693A);
    STACK[0x19C8] = a20;
    LODWORD(STACK[0x2E0]) = v76;
    *(_DWORD *)(v70 - 192) = v75 - v78 + 594;
    *(_DWORD *)(v70 - 188) = v76 - v78 - ((2 * v76 + 1533631294) & 0x464B28A2) - 1864744464;
    sub_193CB2E70((_DWORD *)(v70 - 192));
    v77 = (char *)&a2 + STACK[0x258] - 0x376BA9CC867B9D24;
    STACK[0x2D0] = (unint64_t)(v77 + 2048);
    STACK[0x2E8] = (unint64_t)(v77 + 2176);
    STACK[0x2F8] = (unint64_t)v77;
    STACK[0x2D8] = (unint64_t)(v77 + 2304);
    JUMPOUT(0x193C9C970);
  }
  v80 = v75 - 1139;
  v81 = v64;
  v82 = STACK[0x300];
  a62(*a61, v63, v81);
  *(_QWORD *)(v69 + 328) = 0;
  LODWORD(STACK[0x45C]) = 0;
  v83 = *(_DWORD *)(STACK[0x208] + 52);
  v84 = (v66 & 0x6DFF3FB6 ^ 0x4D8B0316) + ((v82 + 1497004170) ^ a35 & 0x7FFFFFFF) + 1302461800;
  v85 = LODWORD(STACK[0x54C]) ^ 0x5BFCF6FD;
  v86 = (2 * LODWORD(STACK[0x54C])) & 0xB7F9EDFA;
  v87 = 831981571 * ((v70 - 192) ^ 0x99A1D024);
  STACK[0x19C8] = *(_QWORD *)(v69 + 248);
  *(_DWORD *)(v70 - 176) = v87 + v83 - 207081682;
  *(_DWORD *)(v70 - 192) = v84 ^ v87;
  *(_DWORD *)(v70 - 152) = v82 - v87 - 1397;
  *(_DWORD *)(v70 - 144) = v87 + v85 + v86 - 1264631812;
  STACK[0x19E0] = (unint64_t)&STACK[0x1900];
  STACK[0x19D8] = a58;
  v88 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E31525C0 + (int)(v82 ^ 0x5E3)) - 8))(v70 - 192);
  v89 = *(_DWORD *)(v70 - 148);
  LODWORD(STACK[0x484]) = v89;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v67 + 8 * ((1042 * (v89 == v68)) ^ v80)) - 8))(v88);
}

void sub_193CA80A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  LODWORD(STACK[0x484]) = a5 + 54;
  JUMPOUT(0x193CA80ACLL);
}

uint64_t sub_193CA80F4@<X0>(int a1@<W8>)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = STACK[0x35C];
  v1[85] = STACK[0x3A4];
  v1[86] = STACK[0x370];
  v1[87] = STACK[0x3B4];
  v1[88] = STACK[0x388];
  return (*(uint64_t (**)(void))(v2 + 8 * ((*(_QWORD *)(v3 + 152) == 0) ^ ((a1 ^ 0x77A) - 520))))();
}

void sub_193CA8158()
{
  JUMPOUT(0x193CA8164);
}

void sub_193CA8254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;

  LODWORD(STACK[0x2E0]) = 575361636;
  LODWORD(STACK[0x484]) = a5 - 31;
  v9 = (char *)&a9 + STACK[0x258] - 0x376BA9CC867B9D24;
  STACK[0x2D0] = (unint64_t)(v9 + 2048);
  STACK[0x2E8] = (unint64_t)(v9 + 2176);
  STACK[0x2F8] = (unint64_t)v9;
  STACK[0x2D8] = (unint64_t)(v9 + 2304);
  JUMPOUT(0x193C9C970);
}

uint64_t sub_193CA8270()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((15 * (((((v0 + 759) ^ 0xD0B) - 1484) & v1) != 550622136)) ^ (v0 + 759)))
                            - 12))();
}

uint64_t sub_193CA82AC()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;

  v3 = STACK[0x484];
  LODWORD(STACK[0x2E0]) = 575361636;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1036 * (v3 == (v0 ^ 0x725 ^ (v2 + 621)))) ^ (v0 - 731))) - 12))();
}

void sub_193CA83C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void (*a44)(uint64_t),unint64_t a45,unint64_t a46)
{
  int v46;
  uint64_t v47;

  *(_DWORD *)(v47 - 192) = v46
                         + 731
                         + -2024874565
                         - 1543737703
                         * ((((v47 - 192) ^ 0x348B6EB) - 924065536 - 2 * (((v47 - 192) ^ 0x348B6EB) & 0xC8EBE100)) ^ 0xB5570797);
  sub_193CBCB50((_DWORD *)(v47 - 192));
  LODWORD(STACK[0x2C8]) = LODWORD(STACK[0x2C8]) + v46 + 731 - 1481;
  *(_DWORD *)(v47 - 168) = 1543737703 * ((~(v47 - 192) & 0x28B43227 | (v47 - 192) & 0xD74BCDD8) ^ 0x5640625B)
                         + v46
                         - 460;
  STACK[0x19C8] = a45;
  STACK[0x19D0] = a46;
  LOBYTE(STACK[0x19C4]) = (103 * ((~(v47 + 64) & 0x27 | (v47 + 64) & 0xD8) ^ 0x5B)) ^ 0x63;
  a44(v47 - 192);
  JUMPOUT(0x193CA80A8);
}

uint64_t sub_193CA8608()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (int)(((((57 * ((STACK[0x300] - 547) ^ 0x3BD) - 1484) & v0) != 550622136)
                                               * ((((STACK[0x300] - 547) ^ 0x3BD) + 2235) ^ 0x8CE)) ^ (STACK[0x300] - 547)))
                            - 4))();
}

uint64_t sub_193CA8658(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  LODWORD(STACK[0x484]) = v2 + 54;
  v5 = *(_QWORD *)(v4 + 248);
  v6 = LODWORD(STACK[0x54C]);
  *(_QWORD *)(v4 + 304) = v6;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v3
                                                               + 8
                                                               * ((3222
                                                                 * ((_DWORD)v6 != ((v1 + 1650018341) & 0x9DA6B7B9 ^ 0x5A9))) ^ (v1 - 206)))
                                                   - 12))(a1, v5);
}

uint64_t sub_193CA881C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = (v2 + 1576654929) & 0xA20627A7;
  v6 = ((unint64_t)&STACK[0x4C0] ^ 0xFF7FFECFE4B7A8FFLL)
     + 0x42DECBB9FFD00001
     + ((v5 ^ 0xFEFFFD9FC96F5450) & (2 * (_QWORD)&STACK[0x4C0]));
  v7 = a2 + (((_DWORD)v5 - 1366) | 0x4B0u) - 1277;
  *(_QWORD *)(v4 + 304) = v7;
  *(_BYTE *)(a1 + v7) = (v6 ^ 0xBA) * (v6 + 17);
  return (*(uint64_t (**)(void))(v3 + 8 * (int)((11 * (*(_QWORD *)(v4 + 304) != 0)) ^ v5)))();
}

void sub_193CA88C8()
{
  JUMPOUT(0x193CA8890);
}

void sub_193CA88D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned int *a67;
  void (*a68)(_QWORD, uint64_t, _QWORD);

  a68(*a67, a2, 0);
  JUMPOUT(0x193CA8900);
}

uint64_t sub_193CA89C8()
{
  int v0;
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(STACK[0x208] + 56);
  *(_DWORD *)(STACK[0x208] + 56) = v2 + 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((((v2 - 101833166) < 0xFFFFFFFA) * (v0 ^ 0x7F7)) ^ (v0 - 201)))
                            - 12))();
}

void sub_193CA8A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void (*a44)(uint64_t),unint64_t a45)
{
  int v45;
  unint64_t v46;
  uint64_t v47;
  int v48;

  v48 = v45 ^ 0xCB;
  *(_DWORD *)(v47 - 192) = -2024874565
                         - 1543737703
                         * ((((v47 - 192) ^ 0x2B15E3B3) - 2094765727 - 2 * (((v47 - 192) ^ 0x2B15E3B3) & 0x83246961)) ^ 0xD6C5DAAE)
                         + (v45 ^ 0xCB)
                         + 201;
  sub_193CBCB50((_DWORD *)(v47 - 192));
  LOBYTE(STACK[0x19C4]) = (103 * ((((v47 + 64) | 0x1B) - ((v47 + 64) & 0x1B)) ^ 0x67)) ^ 0x63;
  STACK[0x19C8] = a45;
  STACK[0x19D0] = v46;
  *(_DWORD *)(v47 - 168) = 1543737703 * ((((v47 - 192) | 0x305C5E1B) - ((v47 - 192) & 0x305C5E1B)) ^ 0x4EA80E67)
                         + v48
                         - 990;
  a44(v47 - 192);
  JUMPOUT(0x193C9D190);
}

void sub_193CA8AE0(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24) ^ (3804331 * (((a1 | 0x16831F20) - (a1 | 0xE97CE0DF) - 377691937) ^ 0x68563AD6));
  __asm { BR              X9 }
}

uint64_t sub_193CA8BD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;

  v14 = (*(_DWORD *)(a1 + 12) ^ v13) + *(_DWORD *)(v9 - 0x592F4E5EA75AA57ELL) - 1191857747;
  v15 = 235795823 * (((&a5 | 0x17AD28A5) + (~&a5 | 0xE852D75A)) ^ 0x830061FD);
  a8 = v9;
  a5 = 129651105 - v15;
  a6 = (v8 + 1082) ^ v15;
  a7 = v14 - v15 - 62419497;
  v16 = ((uint64_t (*)(unsigned int *))(*(_QWORD *)(a2 + 8 * (v8 ^ 0x41F)) - 8))(&a5);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v12
                                                      + 8
                                                      * ((394 * (*v10 != (((v8 ^ 0x18A) + 1063) ^ (v11 + 2331)))) ^ v8))
                                          - 4))(v16);
}

uint64_t sub_193CA8CC0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)((((v2 + 2034811449) & 0x86B737F9 ^ (v2 + 1879186994) & 0x8FFDDFFE ^ 0x461)
                                     * (*(_QWORD *)(v0 + 16) == 0x1C4110BE041F984CLL)) ^ v2)))();
}

uint64_t sub_193CA8D30()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((207 * (v1 != 1191857755)) ^ v0))
                            - (((v0 - 1900) | 0x514u) ^ 0x51ALL)))();
}

void sub_193CA8D6C()
{
  _DWORD *v0;

  *v0 = 1557843848;
}

uint64_t sub_193CA900C(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v1 = 831981571 * ((a1 & 0x847A176C | ~(a1 | 0x847A176C)) ^ 0xE22438B7);
  v2 = *(_DWORD *)(a1 + 4) - v1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (*(_DWORD *)a1 ^ v1) - 1819040299;
  v5 = v4
     + (*(_DWORD *)(v3 - 0x3C058A92099E348DLL) ^ 0x697CA423)
     - ((2 * (v4 + (*(_DWORD *)(v3 - 0x3C058A92099E348DLL) ^ 0x697CA423))) & 0xD2F94846)
     + 1769776163;
  *(_DWORD *)(v3 - 0x3C058A92099E348DLL) = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_1E31525C0 + v2 - 103)
                                        + 8 * ((2035 * ((v5 ^ 0x697CA423) < v4)) ^ v2)
                                        - 12)
                            - 4))();
}

void sub_193CA90D0(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0x3C058A92099E3491) = (*(_DWORD *)(a1 - 0x3C058A92099E3491) ^ 0xED35C0E2)
                                         - 315244318
                                         - ((2 * (*(_DWORD *)(a1 - 0x3C058A92099E3491) ^ 0xED35C0E2) + 2) & 0xDA6B81C4)
                                         + 1;
}

uint64_t sub_193CA9118(_DWORD *a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = 1224239923 * (((a1 | 0x1AEAD958) - (_DWORD)a1 + (a1 & 0xE51526A7)) ^ 0xE859248F);
  v3 = a1[5] - v2;
  v4 = *a1 ^ v2;
  v8[1] = v3 - 1178560073 * ((v8 & 0xAA03BB0 | ~(v8 | 0xAA03BB0)) ^ 0x126AE627) - 1347953141;
  result = MPMusicPlayerPlayParameters.DynamicCodingKey.init(stringValue:)(v8);
  if (v4 > 2015347885)
  {
    if (v4 == 2015347886)
    {
      v6 = 2;
    }
    else
    {
      if (v4 != 2015347887)
        goto LABEL_11;
      v6 = 1;
    }
LABEL_10:
    v7 = *(_QWORD *)((char *)*(&off_1E31525C0 + (int)(v3 + 1882357584))
                   + 8
                   * (int)((476
                          * (((v3 + 33) ^ (((uint64_t (*)(_QWORD, uint64_t))*(&off_1E31525C0 + (int)(v3 ^ 0x8FCD81CA)))((*((_DWORD *)*(&off_1E31525C0+ (int)(v3 + 1882357597))+ 6 * v6+ 3)- 642350281), 3511634213) == 0)) & 1)) ^ (v3 + 1882359735))- 12);
    __asm { BR              X9 }
  }
  if (v4 == -1994406738)
  {
    v6 = 3;
    goto LABEL_10;
  }
  if (v4 == 2015347883)
  {
    v6 = 0;
    goto LABEL_10;
  }
LABEL_11:
  a1[6] = 1557843949;
  return result;
}

void sub_193CA96E8(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 24) - 1224239923 * ((-223099009 - (a1 | 0xF2B3C77F) + (a1 | 0xD4C3880)) ^ 0xFFFFC557);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2D6CAD6C03423C37) - 1558770207 >= 0)
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2D6CAD6C03423C37) - 1558770207;
  else
    v3 = 1558770207 - *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2D6CAD6C03423C37);
  v2 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v2 - 0x2D6CAD6C03423C37) - 1558770207 >= 0)
    v4 = *(_DWORD *)(v2 - 0x2D6CAD6C03423C37) - 1558770207;
  else
    v4 = 1558770207 - *(_DWORD *)(v2 - 0x2D6CAD6C03423C37);
  v7 = *(_QWORD *)(a1 + 8);
  v6[1] = v1
        - 1224239923 * ((-1738171368 - (v6 | 0x98659C18) + (v6 | 0x679A63E7)) ^ 0x95299E30)
        - 420;
  sub_193C79D14((uint64_t)v6);
  if (v3 >= v4)
    v5 = v4;
  else
    v5 = v3;
  __asm { BR              X13 }
}

uint64_t sub_193CA98A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BOOL4 v23;

  v20 = 7 * (v13 ^ 0x441);
  v21 = 4 * (v17 + v14);
  v22 = v16
      + 1019039619
      + (*(_DWORD *)(*(_QWORD *)(v19 - 0x2D6CAD6C03423C33) + v21) ^ v18)
      + (*(_DWORD *)(*(_QWORD *)(a9 - 0x2D6CAD6C03423C33) + v21) ^ (v18 + (v20 ^ 0x656) - 677));
  *(_DWORD *)(*(_QWORD *)(a11 - 0x2D6CAD6C03423C33) + v21) = v22 + v18 - (v15 & (2 * v22));
  v23 = v17 + 1414214580 < (int)(v12 + 1900731338);
  if (v12 > 0xEB52435 != v17 + 1414214580 < -246752310)
    v23 = v12 > 0xEB52435;
  return (*(uint64_t (**)(void))(v11 + 8 * ((7 * v23) ^ v20)))();
}

uint64_t sub_193CA99D8()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  _BOOL4 v5;

  v5 = v3 - 1727484594 > 906515812 || v3 - 1727484594 < (int)(v2 - 1240969102 + ((v1 + 1869720154) & 0x908E57F3));
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((2654 * v5) ^ v1)) - (v1 - 329) + 340))();
}

uint64_t sub_193CA9A44(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  _BOOL4 v20;

  v14 = a2 ^ 0x4C9;
  v15 = a2 - 638;
  v16 = 4 * (v8 + v11 + 6 * v14 - 348);
  v17 = v3 + v10 + (*(_DWORD *)(*(_QWORD *)(v13 - 0x2D6CAD6C03423C33) + v16) ^ v12);
  *(_DWORD *)(*(_QWORD *)(v7 - 0x2D6CAD6C03423C33) + v16) = v17 + v12 - (v9 & (2 * v17));
  v18 = v11 + 1 + v4;
  v20 = v18 <= v5 && v18 >= v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((208 * v20) ^ v15)) - 8))();
}

uint64_t sub_193CA9B10()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  BOOL v4;

  v4 = v2 - 185846593 < (int)(v3 + 300670166);
  if (v3 > (v1 ^ 0x18Fu) + 1846813270 != v2 - 185846593 < -1846813482)
    v4 = v3 > (v1 ^ 0x18Fu) + 1846813270;
  return (*(uint64_t (**)(void))(v0 + 8 * ((46 * ((v1 ^ 0x55 ^ v4) & 1)) ^ v1)))();
}

uint64_t sub_193CA9B8C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (int)((((((v2 + 1474795052) & 0xA8186DF3) - 1056) ^ (v2 + 50))
                                     * (v1 == 0x9BC21A3CBD4F83)) ^ v2)))();
}

void sub_193CA9BD8()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  *(_DWORD *)(v0 - 0x2D6CAD6C03423C37) = (((v2 + v1) * (v3 - 1337067773)) ^ 0xFDECFABF)
                                         + 1593571168
                                         + ((2 * (v2 + v1) * (v3 - 1337067773)) & 0xFBD9F57E);
}

void sub_193CA9D90(uint64_t a1)
{
  int v1;
  BOOL v2;
  int v3;

  v1 = 268847287 * ((a1 - 2 * (a1 & 0x4542390B) + 1161967883) ^ 0xBAE82823);
  if (*(_QWORD *)(a1 + 24))
    v2 = (*(_DWORD *)(a1 + 4) ^ v1) == 773254902;
  else
    v2 = 1;
  v3 = !v2;
  __asm { BR              X8 }
}

uint64_t sub_193CA9E50()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  _BOOL4 v3;

  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8 * (v0 ^ 0x70)))(32, 0x101004023FF3BD5) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((795 * v3) ^ v0)) - ((v0 + 748189036) & 0xD3678B77) + 370))();
}

uint64_t sub_193CA9EB0()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((4 * (((v1 == v0) ^ (v3 + 1)) & 1)) & 0xF7 | (8 * (((v1 == v0) ^ (v3 + 1)) & 1))) ^ v3))
                            - 8))();
}

uint64_t sub_193CA9F0C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  char v4;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  v11 = v2 - 773254903;
  v12 = v2 - 1;
  v13 = *(unsigned __int8 *)(v7 + v11);
  if (v13 == 18)
    __asm { BR              X11 }
  if (v13 == 146)
  {
    v14 = -1557818287;
    v15 = *(_QWORD *)(v3 + 16);
    v16 = (*(_BYTE *)(v3 + 8) + v4);
    *(_QWORD *)result = v7;
    *(_DWORD *)(result + 8) = v6;
    *(_DWORD *)(result + 12) = v12;
    if (v16 == 75)
      v17 = -1589362677;
    else
      v17 = -1589362678;
    *(_DWORD *)(result + 16) = 2034068188;
    *(_DWORD *)(result + 20) = v17;
    *(_DWORD *)(result + 24) = -1557818287;
    *(_QWORD *)(v15 - 0x6EA31953C241E6BALL) = a2;
  }
  else
  {
    result = (*(uint64_t (**)(void))(v9 + 8 * (v8 ^ 0x88)))();
    v14 = 1557843848;
  }
  *(_DWORD *)(v3 + 12) = v14;
  return result;
}

uint64_t sub_193CA9FF0(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))((char *)off_1E314D180[((*(_DWORD *)(a2 + 4) != 642350294) | (4 * (*(_DWORD *)(a2 + 4) != 642350294))) ^ 0x529u]
                                          - 4))(4294925278);
}

uint64_t sub_193CAA038@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(a2 + 96) + 448) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 12);
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v2 + 15456) - 4))(0);
}

void sub_193CAA0A8()
{
  JUMPOUT(0x193CAA078);
}

void tbttItCTp3MZ(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_193CAA0F8@<X0>(unsigned int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BOOL4 v3;

  v3 = (*(uint64_t (**)(_QWORD, uint64_t))(a2 + 1808))(a1, 1252601147) == 0;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * ((27 * v3) | 0xC0u)) - 8))(4294925268);
}

uint64_t sub_193CAA134@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = 0;
  *v1 = a1;
  return result;
}

void sub_193CAA148(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_193CAA1BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W8>)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5
                                                                                + 8
                                                                                * ((216
                                                                                  * (((a5 - 642350281) ^ 0x5FFDBF3E7FD2BCEFLL)
                                                                                   + ((2 * (a5 - 642350281)) & 0xFFA579DE)
                                                                                   - 0x5FFDBF3D9EEA9AD8 == 3773309463)) ^ 0x577u)))(a1, a2, a3, a4, 1600460563);
}

uint64_t sub_193CAA25C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v11 = *(unsigned __int8 *)(v8 + v9 - 0x48B243EBB599686FLL) - *(unsigned __int8 *)(v7 + v9 - 0x48B243EBB599686FLL);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10
                                                      + 8
                                                      * ((572
                                                        * (((v11 << (a5 + v6 - 99 + 31)) & 0xBFF7A01E) + (v11 ^ v5) == v5)) ^ v6))
                                          - 8))(4294925278);
}

uint64_t sub_193CAA2D8()
{
  unint64_t v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;

  v5 = v2 < v0;
  if (v5 == v3 - 0x48B243EAD4B14657 < v0)
    v5 = v3 - 0x48B243EAD4B14657 < v2;
  return (*(uint64_t (**)(void))(v4 + 8 * (((v1 - 90) * !v5) ^ (v1 + 1093))))();
}

uint64_t sub_193CAA344@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * ((11
                                                        * (a1 == (v1 ^ 0xA09AE8FD)
                                                               + ((v1 + 1445230189) & 0xA9DB8977)
                                                               - 2052156948)) ^ v1))
                                          - 8))(4294925278);
}

uint64_t sub_193CAA3A0()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((1382
                                * ((((*v0 - 42) << (v1 - 22)) & ((v1 + 1103) ^ 0x2BFBFACA)) + ((*v0 - 42) ^ 0x95FDFFD6) == -1778516010)) ^ v1)))();
}

uint64_t sub_193CAA408()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;

  v5 = (((v3 + 779) | 0x144) ^ 0xFFFFFA1C) + *(unsigned __int8 *)(v2 + 1);
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((7 * ((v1 & (2 * v5)) + (v5 ^ v0) != v0 + 3 * ((v3 - 7) ^ 0xA1) - 1299)) | (v3 - 7))))();
}

uint64_t sub_193CAA470()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((115
                                          * ((((v3 - 1624460052) & 0x60D34717 ^ (v1 - 241)) & (2
                                                                                             * (*(unsigned __int8 *)(v2 + 2)
                                                                                              - 72)))
                                           + ((*(unsigned __int8 *)(v2 + 2) - 72) ^ v0) == v0
                                                                                         + ((v3 - 425783061) & 0x1960EF67)
                                                                                         - 1382)) ^ v3))
                            - 4))();
}

uint64_t sub_193CAA4F0()
{
  int v0;
  uint64_t v1;
  unsigned int v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((1399
                                * (((v2 ^ 0x471 ^ v3) & (2 * (*(unsigned __int8 *)(v1 + 3) - 134)))
                                 + ((*(unsigned __int8 *)(v1 + 3) - 134) ^ v0) == v0)) ^ v2)))();
}

uint64_t sub_193CAA538()
{
  int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((939
                                * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 4) - 247)))
                                 + ((*(unsigned __int8 *)(v2 + 4) - 247) ^ v0) == v0 + 691 * (v3 ^ 0x115) - 1382)) ^ v3)))();
}

uint64_t sub_193CAA58C()
{
  int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((679
                                * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 5) - 13)))
                                 + ((*(unsigned __int8 *)(v2 + 5) - 13) ^ v0) == (((v3 + 1001) | 0x13) ^ (v0 - 1297)))) ^ v3)))();
}

uint64_t sub_193CAA5E0()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((v1 & (2 * (*(unsigned __int8 *)(v2 + 6) - 1)))
                                           + ((*(unsigned __int8 *)(v2 + 6) - 1) ^ v0) == v0)
                                          * ((v3 ^ 0x404) + 611)) ^ v3))
                            - 4))();
}

uint64_t sub_193CAA62C()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1733
                                * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 7) - 1)))
                                 + ((*(unsigned __int8 *)(v2 + 7) - 1) ^ (v0 + v3 - 1382)) == v0)) ^ v4)))();
}

uint64_t sub_193CAA670()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((773
                                * ((((*(unsigned __int8 *)(v2 + 8) - 4) << (((v3 - 23) | 0x66) ^ 0x67)) & v1)
                                 + ((*(unsigned __int8 *)(v2 + 8) - 4) ^ v0) == v0)) ^ v3)))();
}

uint64_t sub_193CAA6C4(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(*(_QWORD *)(v4 + 96) + 1428) = 141396939;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((452 * (*(_DWORD *)(a2 + 4) == ((((v2 + 960) ^ 0x1B1) + 346) ^ 0x26497A12))) ^ (v2 + 960)))
                            - 4))();
}

uint64_t sub_193CAA720(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((3416
                                          * ((v3 & (2 * (**(unsigned __int8 **)(a2 + 8) - 42)))
                                           + ((**(unsigned __int8 **)(a2 + 8) - 42) ^ v2) == v2
                                                                                           + ((v4 - 1196) | 1)
                                                                                           + 843
                                                                                           - 1030)) ^ v4))
                            - 4))();
}

uint64_t sub_193CAA76C()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((v1 & (2 * (*(unsigned __int8 *)(v2 + 1) - 134)))
                                 + ((*(unsigned __int8 *)(v2 + 1) - 134) ^ v0) == v0)
                                * ((((v3 + 1189) | 6) - 352) ^ 0x14C)) ^ v3)))();
}

uint64_t sub_193CAA7AC()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((537
                                          * (((v3 ^ 0x160 ^ (v1 - 1026)) & (2 * (*(unsigned __int8 *)(v2 + 2) - 72)))
                                           + ((*(unsigned __int8 *)(v2 + 2) - 72) ^ v0) == v0)) | v3))
                            - ((v3 - 1333) | 0x8Au)
                            + 183))();
}

uint64_t sub_193CAA800()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((804
                                * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 3) - 134)))
                                 + ((*(unsigned __int8 *)(v3 + 3) - 134) ^ (v0 + (v2 ^ 0x4BD) - 1030)) == v0)) ^ v2)))();
}

uint64_t sub_193CAA840()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((114
                                * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 4) - 247)))
                                 + ((*(unsigned __int8 *)(v3 + 4) - 247) ^ v0) == v0 + ((v2 + 839) | 4) - 1030)) ^ v2)))();
}

uint64_t sub_193CAA880()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((v1 & (2 * (*(unsigned __int8 *)(v3 + 5) - 13)))
                                 + ((*(unsigned __int8 *)(v3 + 5) - 13) ^ v0) == v0)
                                * (((v2 + 1195) ^ 0x160) + 672)) ^ v2)))();
}

uint64_t sub_193CAA8BC()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;

  v5 = *(unsigned __int8 *)(v2 + 6) + ((v3 - 352) ^ 0xFFFFFBF9);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((922 * ((v1 & (2 * v5)) + (v5 ^ v0) == v0)) ^ v3)) - 4))();
}

uint64_t sub_193CAA8FC()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((3083
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 7) - 1)))
                                           + (v2 ^ (v0 - 1030) ^ (*(unsigned __int8 *)(v3 + 7) - 1)) == v0)) ^ v4))
                            - 4))();
}

uint64_t sub_193CAA938()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((v1 & (2 * (*(unsigned __int8 *)(v2 + 8) - 5)))
                                           + ((*(unsigned __int8 *)(v2 + 8) - 5) ^ v0) == v0)
                                          * ((v3 ^ 0x160) + 2462)) ^ v3))
                            - 4))();
}

uint64_t sub_193CAA974(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(*(_QWORD *)(v4 + 96) + 1428) = 141396943;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((433 * (*(_DWORD *)(a2 + 4) == ((v2 - 1236735816) & 0x49B71747) + 642349260)) ^ (v2 + 209)))
                            - 4))();
}

uint64_t sub_193CAA9E0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;

  v6 = **(unsigned __int8 **)(a2 + 8) - 42;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((878 * ((v3 & (2 * v6)) + (v6 ^ v2) == v2)) ^ v4))
                            - ((v4 + 66947313) & 0xFC0277DF ^ 0x4DBLL)))();
}

uint64_t sub_193CAAA38()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v5 = v2 + 209 + *(unsigned __int8 *)(v3 + 1) - 1373;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((3149 * ((v1 & (2 * v5)) + (v5 ^ v0) == v0)) ^ v2)) - 12))();
}

uint64_t sub_193CAAA74()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((511
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 2) - 72)))
                                           + (v2 ^ 0xD1 ^ (v0 - 1237) ^ (*(unsigned __int8 *)(v3 + 2) - 72)) == v0)) ^ v2))
                            - 12))();
}

uint64_t sub_193CAAAB8()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((3205
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 3) - 134)))
                                           + ((*(unsigned __int8 *)(v3 + 3) - 134) ^ v0) == v0 + v2 + 209 - 1239)) ^ v2))
                            - 12))();
}

uint64_t sub_193CAAAF8()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((3243
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 4) - 247)))
                                           + ((v2 - 2086692615) & 0x7C6067D7 ^ v4 ^ (*(unsigned __int8 *)(v3 + 4) - 247)) == v0)) ^ v2))
                            - 12))();
}

uint64_t sub_193CAAB48()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((3365
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 5) - 13)))
                                           + ((*(unsigned __int8 *)(v3 + 5) - 13) ^ v0) == v0)) ^ v2))
                            - ((v2 + 1657580249) & 0x9D3355F7)
                            + 1227))();
}

uint64_t sub_193CAAB98()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((986
                                          * ((((*(unsigned __int8 *)(v3 + 6) - 1) << (v2 - 5)) & v1)
                                           + ((*(unsigned __int8 *)(v3 + 6) - 1) ^ v0) == v0)) ^ v2))
                            - 12))();
}

uint64_t sub_193CAABD8()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((v1 & (2 * (*(unsigned __int8 *)(v3 + 7) - 1)))
                                           + ((*(unsigned __int8 *)(v3 + 7) - 1) ^ v0) == v0)
                                          * ((v2 - 9) ^ 0x18)) ^ v2))
                            - 12))();
}

uint64_t sub_193CAAC1C()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((2043
                                          * ((((*(unsigned __int8 *)(v2 + 8) - 11) << (-79 * (v3 ^ 0xFA) + 42)) & v1)
                                           + ((*(unsigned __int8 *)(v2 + 8) - 11) ^ v0) != v0)) ^ v3))
                            - 12))();
}

uint64_t sub_193CAAC68()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * (int)(((v0 == ((v1 + 45) | 0xFFFFFFCB) + 83)
                                                             * ((v1 + 1720814091) & 0x996E77DD ^ 0x761)) ^ v1))
                                          - 4))(4294925278);
}

void sub_193CAB5C0()
{
  JUMPOUT(0x193CAB5DCLL);
}

void sub_193CAB848()
{
  JUMPOUT(0x193CAB74CLL);
}

uint64_t sub_193CAB858@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;

  v18 = a2 ^ v14;
  v19 = (a3 ^ v14)
      + v10
      + ((a4 ^ v14) & (a5 ^ (((v11 - 1459) | 0x810) - 694574912)) | (a5 ^ v14) & (a2 ^ v14))
      + *(_DWORD *)(v7 + 4 * (v9 + v15))
      + (*(_DWORD *)(v8 + 4 * (*(_BYTE *)(a6 + v9 + v15) - 106)) ^ v16);
  v20 = (v19 + v14 - (v13 & (2 * v19))) ^ v14;
  v21 = ((v20 << (*(_BYTE *)(v6 + v9 + v15) - 114)) | (v20 >> (114 - *(_BYTE *)(v6 + v9 + v15)))) + v18;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12
                                                                       + 8 * ((3495 * (v9 + 1 == v17 + 16)) ^ v11))
                                                           - 8))(a1, v21 + v14 - (v13 & (2 * v21)), a5);
}

uint64_t sub_193CAB938@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W4>, int a4@<W5>, int a5@<W7>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;

  v18 = (((v8 - 1098) | 0x142) ^ (v14 - 838) ^ a5)
      + v11
      + *(_DWORD *)(v7 + 4 * (v10 + v15))
      + (((a4 ^ a2) + v14 - (v13 & (2 * (a4 ^ a2)))) ^ a3)
      + (*(_DWORD *)(v9 + 4 * (*(_BYTE *)(a6 + v10 + v15) - 106)) ^ v16);
  v19 = (v18 + v14 - (v13 & (2 * v18))) ^ v14;
  v20 = ((v19 << (*(_BYTE *)(v6 + v10 + v15) - 114)) | (v19 >> (114 - *(_BYTE *)(v6 + v10 + v15)))) + (a2 ^ v14);
  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v12 + 8 * ((479 * (v10 + 1 == v17 + 32)) ^ v8)) - 8))(a1, v20 + v14 - (v13 & (2 * v20)));
}

uint64_t sub_193CABA0C@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W5>, int a4@<W6>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  v18 = a2 ^ (v13 + a4 - 1354);
  v19 = (v10 ^ v13)
      + v9
      + *(_DWORD *)(v6 + 4 * (v8 + v14))
      + (((v17 ^ 0xD699A912 | v18) + v13 - (v12 & (2 * (v17 ^ 0xD699A912 | v18)))) ^ a3)
      + (*(_DWORD *)(v7 + 4 * (*(_BYTE *)(a5 + v8 + v14) - 106)) ^ v15);
  v20 = (v19 + v13 - (v12 & (2 * v19))) ^ v13;
  v21 = ((v20 << (*(_BYTE *)(v5 + v8 + v14) - 114)) | (v20 >> (114 - *(_BYTE *)(v5 + v8 + v14)))) + v18;
  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v11 + 8 * ((v8 + 1 == v16 + 48) ^ a4)) - 4))(a1, v21 + v13 - (v12 & (2 * v21)));
}

void sub_193CABAD8()
{
  JUMPOUT(0x193CAC020);
}

uint64_t sub_193CABCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  return (*(uint64_t (**)(void))(v6 + 8 * (((8 * (a5 + 1 != v7 + 4)) | (32 * (a5 + 1 != v7 + 4))) ^ v5)))();
}

uint64_t sub_193CABDB0()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v2 + 8 * ((1680 * (v1 + 1 == v3 + 24)) ^ v0)))();
}

uint64_t sub_193CABE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;

  return (*(uint64_t (**)(void))(v7 + 8 * ((982 * (a6 + 1 != v8 + 44)) ^ v6)))();
}

uint64_t sub_193CABF24()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v2 + 8 * ((37 * (v1 + 1 == v3 + 64)) | v0)))();
}

void sub_193CABFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  int v17;
  int v18;
  int v19;
  uint64_t v20;

  *(_DWORD *)(v20 - 132) = (a5 ^ v19) + (a17 ^ v19) + v19 - ((v17 ^ (v18 - 252)) & (2 * ((a5 ^ v19) + (a17 ^ v19))));
  JUMPOUT(0x193CAC01CLL);
}

uint64_t sub_193CAC09C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int a19, unsigned int a20)
{
  uint64_t v20;
  int v21;
  _BOOL4 v22;

  if (a20 < a19 != a15 - 1119404740 < ((v21 + a4 + 734) | 1u) - 308022119)
    v22 = a15 - 1119404740 < ((v21 + a4 + 734) | 1u) - 308022119;
  else
    v22 = a15 - 1119404740 > a20;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v20 + 8 * ((3696 * !v22) ^ (v21 + a4 + 1513))) - 8))(a1, 3483583650);
}

uint64_t sub_193CAC128(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  int v19;
  uint64_t v20;

  return ((uint64_t (*)(void))(*(_QWORD *)(v20
                                        + 8
                                        * (((a2 + v19 + 63 < ((a18 | 0xA010C80E) ^ 0x6F39AD6D) + v19) * (a5 - 2176)) | a19))
                            - 8))();
}

uint64_t sub_193CAC180(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;

  v18 = a14 + v15 - (unint64_t)(v14 + a2) > 0xF;
  return ((uint64_t (*)(void))(*(_QWORD *)(v16 + 8 * (a5 | (32 * v18) | (v18 << 6)))
                            - ((a5 - v17 - 1966) ^ 0xFFFFFFFFFFFFFFF6)
                            - ((a5 + 9043898) | 0xA010E185)))();
}

uint64_t sub_193CAC1DC(int8x16_t a1, double a2, double a3, double a4, int8x16_t a5, uint64_t a6, int a7, unint64_t a8, int a9, uint64_t a10, int a11)
{
  int v11;
  int8x16_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  *v12 = vaddq_s8(vsubq_s8(*(int8x16_t *)(v15 + (v11 + a7)), vandq_s8(vaddq_s8(*(int8x16_t *)(v15 + (v11 + a7)), *(int8x16_t *)(v15 + (v11 + a7))), a5)), a1);
  return (*(uint64_t (**)(void))(v14 + 8 * ((((v13 ^ (a9 + 36) ^ a8) == 64) * a11) ^ (v16 + v13 + 555))))();
}

uint64_t sub_193CAC238@<X0>(int a1@<W1>, int a2@<W3>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  *(_BYTE *)(v5 + a3) = *(_BYTE *)(v8 + (v3 + a1))
                      - (v6 & (2 * *(_BYTE *)(v8 + (v3 + a1))))
                      + 18;
  return (*(uint64_t (**)(void))(v7 + 8 * (((a3 == 63) * ((v4 ^ (a2 + 36)) + 283)) ^ (v9 + v4 + 1375))))();
}

uint64_t sub_193CAC288@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((1788 * (a1 - 1613569350 < ((v1 - 1543618256) & 0xBB66D7DD) - 677)) ^ (v3 + v1 + 534)))
                            - 12))();
}

uint64_t sub_193CAC2D8@<X0>(unsigned int a1@<W8>)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v4 = 56;
  if ((unint64_t)a1 - 1613569349 > 0x38)
    v4 = a1 - 1613569349;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)(((v4 - (unint64_t)a1 + 1613569350 >= ((v1 - v3 - 507) ^ 0xA09AE9C7uLL))
                                               * (((v1 + 1556435005) & 0xA33AADE5) + 1461)) ^ v1))
                            - 12))();
}

uint64_t sub_193CAC354()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = (v1 - 7);
  *(_QWORD *)(v2 + v4 - 220 - 733 + (v5 ^ 0x224)) = 0x1212121212121212;
  return (*(uint64_t (**)(void))(v3 + 8 * (int)((505 * (((v5 ^ 0xFFFFFFFFFFFFFF01) & v0) != 8)) ^ v5)))();
}

uint64_t sub_193CAC3B0(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)(v3 + (v1 ^ 0x224) + v5) = a1;
  return (*(uint64_t (**)(void))(v6 + 8 * (int)(((v2 != v5) * v4) ^ v1)))();
}

uint64_t sub_193CAC3DC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v2 ^ (37 * (v0 == v1))))
                            - ((((v2 - 308614878) ^ 0x4D000230u) - 12) ^ (v2 - 308614878) & 0xB2FFFDCF)))();
}

void sub_193CAC430(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  char v5;
  int v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  char v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;

  v6 = *(unsigned __int8 *)(v4 - 124) ^ 0x1C;
  if (v6 == 1)
  {
    v14 = *(_DWORD *)(v4 - 156);
    v13 = *(_DWORD *)(v4 - 152);
    *(_BYTE *)(v4 - 164) = ((v5 + a4 + 54) ^ (8 * v13)) - ((2 * ((v5 + a4 + 54) ^ (8 * v13))) & 0x20) + 18;
    v11 = 36;
    *(_BYTE *)(v4 - 163) = ((v13 >> 5) ^ 0x21) - ((v13 >> 4) & 0x24) + 18;
    *(_BYTE *)(v4 - 162) = ((v13 >> 13) ^ 0xE5) - ((v13 >> 12) & 0x24) + 18;
    v7 = v5 + a4 + 52;
    *(_BYTE *)(v4 - 161) = ((v13 >> 21) ^ 0x4B) - 2 * (((v13 >> 21) ^ 0x4B) & 0x16 ^ (v13 >> 21) & 4) + 18;
    HIDWORD(v15) = v14 ^ 2;
    LODWORD(v15) = v13 ^ 0x60000000;
    *(_BYTE *)(v4 - 160) = (v15 >> 29) - ((2 * (v15 >> 29)) & 0x24) + 18;
    *(_BYTE *)(v4 - 159) = ((v14 >> 5) ^ 7) - 2 * (((v14 >> 5) ^ 7) & 0x1A ^ (v14 >> 5) & 8) + 18;
    *(_BYTE *)(v4 - 158) = ((v14 >> 13) ^ 0xAE) - 2 * (((v14 >> 13) ^ 0xAE) & 0x13 ^ ((v14 & 0x2000) != 0)) + 18;
    v10 = v14 >> 21;
    v12 = (v14 >> 21) ^ 0x69;
  }
  else
  {
    if (v6 != 2)
      goto LABEL_6;
    v7 = a4 ^ (a4 + 10);
    v8 = *(_DWORD *)(v4 - 156);
    v10 = *(_DWORD *)(v4 - 152);
    *(_BYTE *)(v4 - 164) = ((v8 >> 21) ^ 0x69) - ((v8 >> 21 << (v7 - 21)) & 0x24) + 18;
    *(_BYTE *)(v4 - 163) = ((v8 >> 13) ^ 0xAE) - ((2 * ((v8 >> 13) ^ 0xAE)) & 0x24) + 18;
    *(_BYTE *)(v4 - 162) = ((v8 >> 5) ^ 7) - ((2 * ((v8 >> 5) ^ 7)) & 0x24) + 18;
    HIDWORD(v9) = v8 ^ 2;
    LODWORD(v9) = v10 ^ 0x60000000;
    *(_BYTE *)(v4 - 161) = (v9 >> 29) - ((2 * (v9 >> 29)) & 0x24) + 18;
    *(_BYTE *)(v4 - 160) = ((v10 >> 21) ^ 0x4B) - ((2 * ((v10 >> 21) ^ 0x4B)) & 0x24) + 18;
    *(_BYTE *)(v4 - 159) = ((v10 >> 13) ^ 0xE5) - ((v10 >> 12) & 0x24) + 18;
    *(_BYTE *)(v4 - 158) = ((v10 >> 5) ^ 0x21) - ((v10 >> 4) & 0x24) + 18;
    LOBYTE(v10) = (8 * v10) ^ 0x18;
    v11 = 32;
    v12 = v10;
  }
  *(_BYTE *)(v4 - 157) = v7 - v5 - 52 + v12 - (v11 & (2 * v10)) + 67;
LABEL_6:
  JUMPOUT(0x193CAB514);
}

uint64_t sub_193CAC864(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL4 v12;
  _BOOL4 v13;

  v10 = (v7 + v4);
  v11 = *(_DWORD *)(v9 - 220 + v10 + 72);
  *(_BYTE *)(a1 + v10) = (HIBYTE(v11) ^ 0x29) - ((HIBYTE(v11) << ((v6 ^ (a4 + 94)) + 50)) & 0x24) + 18;
  *(_BYTE *)(a1 + (v10 + 1)) = (BYTE2(v11) ^ 0x66) - ((2 * (BYTE2(v11) ^ 0x66)) & 0x24) + 18;
  *(_BYTE *)(a1 + (v10 + 2)) = (BYTE1(v11) ^ 0x56) - ((2 * (BYTE1(v11) ^ 0x56)) & 0x24) + 18;
  *(_BYTE *)(a1 + (v10 + 3)) = ~(_BYTE)v11;
  LODWORD(v10) = *(_DWORD *)(v9 - 128) + 7978524;
  v12 = v10 < v5;
  v13 = v7 + 4333987 < v10;
  if (v7 + 4333987 < v5 != v12)
    v13 = v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((14 * v13) ^ v6)) - 8))();
}

void sub_193CACA08()
{
  JUMPOUT(0x193CAC9D0);
}

void sub_193CACA10(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)a1 - 460628867 * ((a1 + 481402216 - 2 * (a1 & 0x1CB19D68)) ^ 0x50271F15);
  v2 = *(_QWORD *)(a1 + 8);
  ((void (*)(char *, void (*)()))*(&off_1E31525C0 + (v1 ^ 0x54)))((char *)*(&off_1E31525C0 + v1 - 98) - 12, sub_193CBCCF0);
  __asm { BR              X10 }
}

uint64_t sub_193CACACC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return (*(uint64_t (**)(void))(v0 + 8 * (((**(_QWORD **)(v1 + 8 * (v2 ^ 0xC1)) == 0) * ((v2 ^ 0x283) + 76)) ^ v2)))();
}

uint64_t sub_193CACB10@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 - 420)))(v1);
}

void XpqjnD(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  int v11;

  if (a5)
    v8 = a6 == 0;
  else
    v8 = 1;
  v11 = v8 || a7 == 0 || a8 == 0;
  __asm { BR              X9 }
}

uint64_t sub_193CACBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _DWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int a21,int a22)
{
  uint64_t v22;
  uint64_t v23;

  *a5 = 0;
  *a6 = 0;
  a21 = -1501685844
      - 1224239923 * (((&a21 | 0xD3A9E9FD) + (~&a21 | 0x2C561602)) ^ 0x211A142B);
  v23 = sub_193CBCC34(&a21);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v22 + 8 * ((902 * (a22 == -1557818287)) ^ 0x511u)) - 4))(v23);
}

uint64_t sub_193CACC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t *a21,unsigned int a22,int a23)
{
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  a21 = &STACK[0x667A5DFFEA838F70];
  a22 = (v25 - 947) ^ (831981571
                     * ((((&a21 | 0xEE66A0B4) ^ 0xFFFFFFFE) - (~&a21 | 0x11995F4B)) ^ 0x88388F6F));
  sub_193C8C02C((uint64_t)&a21);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 + 8 * (((a23 == v24) * (v25 + 2091)) ^ v25)) - 4))(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13);
}

uint64_t sub_193CACD00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  void (*v32)(unint64_t *);
  int v33;
  void (*v34)(unint64_t *);
  unint64_t v35;
  uint64_t v36;

  v30 = v29 - 491;
  v31 = 1224239923 * (((v23 | 0x800B2921) + (~(_DWORD)v23 | 0x7FF4D6DE)) ^ 0x72B8D4F7);
  LODWORD(a21) = (v28 ^ 0xFBE56EFA) + ((2 * v28) & 0xF7CADDF4) - v31 + 1983822752;
  LODWORD(a23) = (v30 - 233) ^ v31;
  a22 = a15;
  v32 = (void (*)(unint64_t *))*(&off_1E31525C0 + v30 - 577);
  v32(&a21);
  v33 = 1224239923 * ((((v23 | 0xD243629E) ^ 0xFFFFFFFE) - (~(_DWORD)v23 | 0x2DBC9D61)) ^ 0xDF0F60B6);
  LODWORD(a23) = (v30 - 233) ^ v33;
  a22 = a15;
  LODWORD(a21) = (v27 ^ 0xF63D6ABB) - v33 + ((v27 << (((v30 - 37) | 0x10) - 16)) & 0xEC7AD576) + 2078719967;
  v32(&a21);
  LODWORD(a22) = (v30 - 686) ^ (831981571 * ((((2 * v23) | 0x643424D2) - v23 - 840569449) ^ 0xABBBC24D));
  a23 = a15;
  a21 = (831981571 * ((((2 * v23) | 0xCBB4EB6C643424D2) - v23 + 0x1A258A49CDE5ED97) ^ 0x342A34F6ABBBC24DLL)) ^ ((v26 ^ 0xEF3FFFFFFF5ED9EELL) + 0x5FFFE8633FB7F780 + ((2 * v26) & 0xDE7FFFFFFEBDB3DCLL));
  v34 = (void (*)(unint64_t *))((char *)*(&off_1E31525C0 + (v30 ^ 0x309)) - 8);
  v34(&a21);
  v35 = 831981571 * ((((2 * v23) | 0x824D994A11707FB6) - v23 - 0x4126CCA508B83FDBLL) ^ 0x90D68DE59119EFFFLL);
  LODWORD(a22) = (v30 - 686) ^ v35;
  a21 = v35 ^ ((v25 ^ 0xEF7FEDFFFF1EF3FFLL) + 0x5FBFFA633FF7DD6FLL + ((2 * v25) & 0xDEFFDBFFFE3DE7FELL));
  a23 = a15;
  v36 = ((uint64_t (*)(unint64_t *))v34)(&a21);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24 + 8 * ((67 * (HIDWORD(a22) != -1557818287)) ^ v30)) - 12))(v36);
}

uint64_t sub_193CACFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned int a22,unint64_t *a23,unsigned int a24,int a25,unsigned int a26)
{
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;

  v29 = 944348131 * (&a21 ^ 0xA319A44E);
  a21 = a15;
  a22 = -1256168727 - v29;
  a23 = &STACK[0x59F8E2836308BDE9];
  a26 = v29 + v27 + 368398880;
  a24 = 1779005820 - v29;
  v30 = sub_193CBD2A0((uint64_t)&a21);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v28 + 8 * (((a25 == v26) * (v27 ^ 0x2AE)) ^ (v27 - 428)))
                                          - ((2 * ((v27 - 428) ^ 0x3B6u)) ^ 0x1AALL)))(v30);
}

uint64_t sub_193CAD094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t *a19, uint64_t a20,unint64_t *a21,unint64_t *a22,unint64_t *a23,unint64_t *a24)
{
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  LODWORD(a21) = v25 - 2078219279 * (&a21 ^ 0xDAFA9674) - 231789212;
  a22 = &STACK[0x1EF0C0D0C0C76516];
  a23 = &STACK[0x11E90ECB0B903109];
  a24 = a19;
  sub_193CBC6B8((uint64_t)&a21);
  a21 = &STACK[0x750D723A758CEB66];
  LODWORD(a22) = v25
               + 3804331 * (((&a21 | 0x9CE2AA35) - (&a21 & 0x9CE2AA35)) ^ 0xE2378FC3)
               + 671;
  a23 = a19;
  a24 = &STACK[0x5594AEEE97C9A8D5];
  ((void (*)(unint64_t **))*(&off_1E31525C0 + (v25 ^ 0x1B2)))(&a21);
  LODWORD(a23) = v25
               - ((((2 * &a21) | 0xEE7E85BA) - &a21 - 2000634589) ^ 0xD426E693) * v24
               + 429;
  a21 = &STACK[0xCB258A928C46681];
  a22 = a19;
  ((void (*)(unint64_t **))*(&off_1E31525C0 + v25 - 370))(&a21);
  a21 = a19;
  LODWORD(a22) = v25
               - 241568881 * ((&a21 + 910469 - 2 * (&a21 & 0xDE485)) ^ 0xD61CE0C7)
               + 31;
  v27 = sub_193C9B7D8((uint64_t)&a21);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v26
                                                      + 8
                                                      * ((((((v25 - 532450865) ^ 0xE04372B5 ^ (HIDWORD(a22) == -1557818287)) & 1) == 0)
                                                        * ((v25 - 532450865) & 0x1FBC8FEF ^ 0x303)) ^ v25))
                                          - 4))(v27);
}

uint64_t sub_193CAD2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  int v15;
  uint64_t v16;

  return ((uint64_t (*)(void))(*(_QWORD *)(v16 + 8 * ((1333 * (a15 == a8 + v15 + 421 - 869)) ^ v15))
                            - (((v15 - 56) | 0x10u) ^ 0x19CLL)))();
}

uint64_t sub_193CAD2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  int v17;
  uint64_t v18;
  unsigned int v19;

  v19 = ((28 * (v17 ^ 0x188)) ^ 0x6279226E) + (a17 ^ a8) - ((2 * (a17 ^ a8)) & 0xC4F2475C);
  return ((uint64_t (*)(void))(*(_QWORD *)(v18
                                        + 8
                                        * ((1766
                                          * (((2 * v19) & 0xFFF9396E ^ 0xC4F0014C) + (v19 ^ 0x1D85BF19) - 1080559762 != 1066701861)) ^ v17))
                            - 12))();
}

uint64_t sub_193CAD37C()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((2879
                                          * ((((v1 + v0 - 2147261623) < 8) ^ v2 ^ 0xA7) & 1)) ^ v2 ^ 0x27B))
                            - ((((v2 ^ 0x27B) - 183) | 0xA9u) ^ 0x3A1)))();
}

uint64_t sub_193CAD3F8(unsigned int a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (int)(a1 ^ (22 * ((unint64_t)(v1 - v3) < 0x20))))
                            - (a1 ^ 0x9E7051C6 ^ (a1 - v2 - 542))))();
}

uint64_t sub_193CAD444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v5;
  uint64_t v6;

  return (*(uint64_t (**)(_QWORD))(v6
                                           + 8
                                           * (int)((((((a5 - 1860456838) & 0x6EE44FFF) - 1636807474) ^ 0x9E705223)
                                                  * (v5 > 0x1F)) ^ a5)))(0);
}

uint64_t sub_193CAD490(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v9 = (v6 + v3);
  v10 = *(_OWORD *)(v2 + v9 - 15);
  v11 = *(_OWORD *)(v2 + v9 - 31);
  v12 = v7 + v9;
  *(_OWORD *)(v12 - 15) = v10;
  *(_OWORD *)(v12 - 31) = v11;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((120 * ((a2 ^ 0x9E7055B1) - 1974 != (v5 & 0xFFFFFFE0))) ^ (v4 + a2 + 1553)))
                            - 4))();
}

uint64_t sub_193CAD4FC(int a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((((a4 - 1558) ^ 0xE16) * (v4 == a1)) ^ a4)) - 4))();
}

uint64_t sub_193CAD524(uint64_t a1)
{
  char v1;
  int v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v4
                                                    + 8
                                                    * ((3997 * ((v1 & 0x18) == (v3 ^ 0x9E7053A7) + 1636806041)) ^ v3 ^ 0x6DF)))(a1, (v2 - a1));
}

uint64_t sub_193CAD56C(int a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 - 7 + v9 + v8 + v6 - a1 + ((a4 - 1025) ^ (v5 - 408))) = *(_QWORD *)(v4
                                                                                                  - 7
                                                                                                  + v9
                                                                                                  + v8
                                                                                                  + v6
                                                                                                  - a1
                                                                                                  + ((a4 - 1025) ^ (v5 - 408)));
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((592 * (a1 - (v7 & 0xFFFFFFF8) == -8)) ^ a4)) - 4))();
}

void sub_193CAD5C8()
{
  JUMPOUT(0x193CAD5A0);
}

uint64_t sub_193CAD5D4(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v6 + 8 * (v4 | (547 * (v5 != a3))))
                                                           - (v4 - v3 - 9)
                                                           - ((v4 + 1789530688) & 0x9555EDE7 ^ 0xFFFFFFFF618FAC65)))(a1, a2, (v4 - v3 - 9));
}

uint64_t sub_193CAD628(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v7 + (a2 + v5)) = *(_BYTE *)(v4 + (a2 + v5));
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((23 * (a2 - 1 == v3)) ^ (a3 + v6)))
                            - ((a3 - 343116905) & 0x76033BC1)
                            + 436))();
}

uint64_t sub_193CAD678@<X0>(int a1@<W7>, unsigned int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  int v15;
  uint64_t v16;

  *a7 = (a2 >> 2) ^ 0x28C96514;
  return ((uint64_t (*)(void))(*(_QWORD *)(v16 + 8 * ((1012 * (a15 != ((v15 + 421) ^ (a1 + 739)))) ^ v15)) - 4))();
}

uint64_t sub_193CAD6C4@<X0>(int a1@<W7>, int a2@<W8>)
{
  int v2;
  unsigned __int8 v3;
  uint64_t v4;
  BOOL v5;

  v5 = ((uint64_t (*)(_QWORD, uint64_t))*(&off_1E31525C0 + (v2 ^ 0x122)))(a2 ^ (a1 - 209) ^ (87 * (v2 ^ 0x1D7u)), 51302153) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((1539 * ((v3 ^ v5) & 1)) ^ v2)) - 4))();
}

uint64_t sub_193CAD738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21)
{
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;

  v24 = (v21 ^ 0x611) + 288 + (a21 ^ v22) - ((2 * (a21 ^ v22)) & 0xBE64E20E) + 1597140519;
  return ((uint64_t (*)(void))(*(_QWORD *)(v23
                                        + 8
                                        * ((3958
                                          * (((2 * v24) & 0xCFDFFFAA ^ 0x8E44E20A) + (v24 ^ 0xB8DD8ED2) + 1610087083 != 1206385280)) ^ v21))
                            - 8))();
}

uint64_t sub_193CAD7C8()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((2792
                                          * (v2 + v1 + 403701803 >= ((v0 - 1636806769) ^ (v0 - 1636806777)))) ^ v0))
                            - 12))();
}

uint64_t sub_193CAD834(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((46
                                          * (v2 - a1 < (a2 ^ (v3 + 1948) ^ 0xFFFFFFFF618FAF4DLL)
                                                     + (a2 ^ 0x463u))) ^ a2))
                            - 4))();
}

uint64_t sub_193CAD880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * ((1653 * (v5 >= (a5 ^ (v6 + 827) ^ (v6 + 1656) ^ (3 * (a5 ^ 0x275u))))) ^ a5))
                            - 12))();
}

uint64_t sub_193CAD8C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;

  v12 = v8 + v7 + a4;
  v13.i64[0] = 0x1212121212121212;
  v13.i64[1] = 0x1212121212121212;
  v14 = v4 + v12;
  v15 = a1 + v12;
  v16 = veorq_s8(*(int8x16_t *)(v14 - 31), v13);
  *(int8x16_t *)(v15 - 15) = veorq_s8(*(int8x16_t *)(v14 - 15), v13);
  *(int8x16_t *)(v15 - 31) = v16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((866 * ((v6 & 0xFFFFFFE0) == 32)) ^ (v5 + v9 + 21)))
                            - (v9 ^ (v10 + 3304) ^ 0x851)))();
}

void sub_193CAD934()
{
  JUMPOUT(0x193CAD8E0);
}

uint64_t sub_193CAD940(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (a4 ^ (205 * (v4 == v5))))
                            - ((23 * (a4 ^ 0x80Eu) - 1257) ^ a4 ^ 0xAB9u)))();
}

uint64_t sub_193CAD980()
{
  char v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v1 ^ (22 * ((v0 & 0x18) != 0))))
                            - ((v1 - 343) ^ (v2 + 1688) ^ 0x9E70526BLL)))();
}

uint64_t sub_193CAD9C0(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  *(int8x8_t *)(a1 - 7 + (v4 + v3 - v6)) = veor_s8(*(int8x8_t *)(v2 - 7 + (v4 + v3 - v6)), (int8x8_t)0x1212121212121212);
  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8 * ((26 * (((3 * (a2 ^ 0x110)) ^ 0x1C3) + v6 == (v5 & 0xFFFFFFF8))) ^ a2))
                            - 12))();
}

uint64_t sub_193CADA24(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (a4 ^ (811 * (v4 != v5))))
                            - (v6
                             + (a4 ^ 0x61Au)
                             - 704)
                            + 2658161243))();
}

uint64_t sub_193CADA60@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  *(_BYTE *)(a1 + (v6 + v4)) = *(_BYTE *)(v3 + (v6 + v4)) ^ 0x12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8 * ((115 * (v6 + ((v5 + a2 + 1458) | 0x90) - 2002 == a3)) ^ (v5 + a2 + 41)))
                            - 12))();
}

uint64_t sub_193CADAB0(uint64_t a1)
{
  int v1;
  int v2;
  void (*v3)(unsigned int *);
  int v4;
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;

  v4 = 79 * ((v1 - 1553) ^ 0x1CB);
  *v6 = a1;
  *v7 = (v2 + v1 - 1553 - 448) ^ v10;
  v12 = v9;
  v11 = (v4 + 124) ^ (69008221
                    * ((((2 * &v11) | 0x41C85662) - &v11 - 551824177) ^ 0xF346793B));
  v3(&v11);
  v12 = v8;
  v11 = (v4 + 124) ^ (69008221 * (((&v11 | 0x2862F702) - (&v11 & 0x2862F702)) ^ 0xFBC0A508));
  v3(&v11);
  return 0;
}

void sub_193CADBDC(_DWORD *a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD v13[3];
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unsigned int v22;
  int32x4_t v23;
  int32x4_t v24;
  int v25;
  int32x4_t v26;
  uint64_t *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  char v38;
  char v39;
  char v40;
  int v41;
  uint64_t v42;
  unint64_t *v43;
  int v44;
  unsigned int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = 831981571 * ((((2 * (_DWORD)a1) | 0x95463872) - (_DWORD)a1 + 895280071) ^ 0x5302CC1D);
  v3 = a1[10] + v2;
  v33 = *a1 ^ v2;
  v4 = a1[12];
  v15 = 831981571
      * ((((2 * (_QWORD)a1) | 0x48126E2F95463872) - (_QWORD)a1 + 0x5BF6C8E8355CE3C7) ^ 0x75F976575302CC1DLL);
  v5 = v4 - v2;
  v6 = 235795823 * (&v43 ^ 0x94AD4959);
  v44 = v6 ^ 0xDDB4597;
  v45 = v3 + v6 + 426522932;
  v21 = &STACK[0x3C058A92099E35D9];
  v43 = &STACK[0x3C058A92099E35D9];
  sub_193C8F838((uint64_t)&v43);
  v7 = v33;
  v8 = a1;
  v9 = (char *)*(&off_1E31525C0 + (int)(v3 ^ 0x2D)) - 12;
  v20 = *(_QWORD *)&v9[8 * v3] - 8;
  v31 = v5 + 2104757406;
  v14 = v5 + (v3 ^ 0x91FF091D);
  v17 = v5 - 1853214846;
  v16 = v5 + 1540367154;
  v27 = &v42;
  v13[2] = (char *)&v13[-19886550] + 2;
  v13[1] = &STACK[0x97B90BF];
  v18 = 239 * (v3 ^ 0x56);
  v26 = vdupq_n_s32(0xA3259451);
  v29 = v3 - 1400947594;
  v30 = v3 + 1888656262;
  v23 = vdupq_n_s32(0x23259457u);
  v24 = vdupq_n_s32(0x23259459u);
  v36 = (v3 + 1888656262) & 0x8F6D67ED;
  v22 = ((v3 + 1645048746) & 0x9DF28F7E) - 809;
  v28 = v3;
  v25 = v3 ^ 0x12;
  v35 = v3 ^ 0x12;
  v34 = v35;
  v19 = v8;
  v10 = *((_QWORD *)v8 + 1);
  v11 = v7 - (((v7 << (((v3 ^ 0x6F) - 42) ^ 0x11)) - 155400838) & 0xA5541190) - 838308987;
  v37 = (HIBYTE(v11) ^ 0xD2)
      - 2 * ((HIBYTE(v11) ^ 0xD2) & 0x1A ^ HIBYTE(v11) & ((((v3 ^ 0x6F) - 26) | 0x90) ^ 0x38))
      + 18;
  v38 = (BYTE2(v11) ^ 0xAA) - 2 * ((BYTE2(v11) ^ 0xAA) & 0x17 ^ BYTE2(v11) & 5) + 18;
  v39 = (BYTE1(v11) ^ 8) - ((v11 >> 7) & 0x24) + 18;
  v40 = (v7 - ((((_BYTE)v7 << (((v3 ^ 0x6F) - 42) ^ 0x11)) + 122) & 0x90) - 123) ^ 0xDA;
  v12 = *(_QWORD *)&v9[8
                     * ((119 * (((2 * v41) & 0x64 ^ 0x44) + (v41 & 0x3F ^ 0xFF7F7FD1) + 8421330 > 0xFFFFFFBF)) ^ v3 ^ 0x26F)]
      - 8;
  v32 = v10;
  __asm { BR              X15 }
}

uint64_t sub_193CAE034@<X0>(int a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W8>)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BOOL4 v10;

  *(_BYTE *)(a3 + (a5 + v8)) = *(_BYTE *)(a4 + ((5 * (v5 ^ a1)) ^ a2) + v6);
  v10 = ((v6 + 1) & 0xFFFFFFFC) != v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((v10 | (2 * v10)) ^ v5)) - 8))();
}

uint64_t sub_193CAE080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t (*a18)(uint64_t), uint64_t a19)
{
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v21 = 831981571 * ((2 * ((v20 - 168) & 0x2CD69C30) - (v20 - 168) + 1395221454) ^ 0xCA88B3EA);
  *(_QWORD *)(v20 - 160) = a19;
  *(_DWORD *)(v20 - 168) = v21 ^ 0x6C6C5A2F;
  *(_DWORD *)(v20 - 164) = v21 + v19 + 138;
  v22 = sub_193CA900C(v20 - 168);
  return a18(v22);
}

uint64_t sub_193CAE0EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, int a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,int a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,int a54)
{
  uint64_t v54;

  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))(v54
                                                                                        + 8
                                                                                        * ((2502
                                                                                          * (a13
                                                                                           + ((2 * ((a17 - 654) & a54)) ^ 0x46)
                                                                                           + ((a17 - 654) & a54 ^ 0x5D64BF5Cu) < 0xFFFFFFC0)) ^ (a34 + 79))))(a1, 3153304711, &a45, a4, 36, 9);
}

uint64_t sub_193CAE18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;

  v34 = v32 - 1566883710;
  if (v34 <= 0x40)
    v34 = 64;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 + 8 * (int)((((((HIDWORD(a15) - 2085475358) ^ 0x83B22A7A) + 2541) ^ (HIDWORD(a15) - 2085475358) & 0x7C4DD95F) * (1566883710 - v30 - v31 + v34 > 0xE)) ^ HIDWORD(a15))) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30);
}

uint64_t sub_193CAE21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  _BOOL4 v37;

  v35 = v31 + v30 - 1566883710;
  if (v35 <= 0x40)
    v36 = 64;
  else
    v36 = v35;
  v37 = !__CFADD__(v35 - 1, v33 + v36);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 + 8 * ((((v32 ^ 0x638) - 746) * v37) ^ v32)) - ((v32 - 1226) | 0x804u) + 2055))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30);
}

uint64_t sub_193CAE288@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  int v31;
  uint64_t v32;
  int v33;
  int8x16_t *v34;
  uint64_t v35;
  int8x16_t v36;
  int8x16_t v37;

  v37.i64[0] = 0x1313131313131313;
  v37.i64[1] = 0x1313131313131313;
  *(int8x16_t *)(a3 + (a9 - 90216287)) = vaddq_s8(vaddq_s8(*v34, v37), vmvnq_s8(vandq_s8(vaddq_s8(*v34, *v34), v36)));
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 + 8 * (((((v32 + 1) & 0x1FFFFFFF0) == 16) * (v31 ^ v33)) ^ v31)) - 12))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31);
}

void sub_193CAE2F8()
{
  JUMPOUT(0x193CAE2B8);
}

uint64_t sub_193CAE304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,unsigned int a32)
{
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;

  v37 = v35 + 8421391;
  if (v37 <= 0x40)
    v37 = 64;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v36
                                                                                                 + 8
                                                                                                 * (((-v33 - 8421391 - v34 + v37 < (v32 ^ 0x91Fu)) * (v32 ^ 0x914)) | v32)))(1552108636, 3153304711, a3, -1552108636, a5, a6, a32);
}

uint64_t sub_193CAE398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  _BOOL4 v11;

  v8 = v3 ^ 0xAC8;
  v9 = v5 + v4;
  v10 = v9 + (((v8 - 973) | 0x684) ^ 0x808680);
  if (v10 <= 0x40)
    v10 = 64;
  v11 = __CFADD__(v9 + ((v8 - 973) ^ 0x808005), v6 + v10);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 8 * ((1944 * v11) ^ v8)) - 4))(a1, a2, a3, -1552108636);
}

uint64_t sub_193CAE420@<X0>(uint64_t a1@<X2>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,arg35_193CAE420 a35)
{
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;

  *(_OWORD *)(a1 + (a2 + v37)) = *(_OWORD *)&a35.arr[4];
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v38 + 8 * ((397 * (((v36 + 1) & 0x1FFFFFFF0) == 16)) ^ v35))
                                          - ((v35 - 2130732886) & 0x7F006560 ^ 0x44CLL)))(2164234410);
}

void sub_193CAE488()
{
  JUMPOUT(0x193CAE448);
}

uint64_t sub_193CAE494()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)(((v2 + 591 + ((v2 - 1038) ^ 0xFFFFFB4B)) * (v0 == v1)) | v2))
                            - 4))();
}

uint64_t sub_193CAE4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27,uint64_t a28,uint64_t a29,uint64_t a30,unint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52,int a53,int a54,int a55,uint64_t a56,unsigned __int8 a57)
{
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v63;
  _BOOL4 v65;
  _BOOL4 v68;

  v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *))((((v57 + 1166) | 0x130u) ^ 0xFFFFFFFFFFFFFA04)
                                                                  + *(_QWORD *)(v58 + 8 * v57));
  v63 = a57 ^ 0x1Cu;
  if ((_DWORD)v63 == 2)
  {
    v68 = (unint64_t)&a43 >= a31 || v61 >= (unint64_t)&a51;
    return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v58 + 8 * (((a7 + 610) * v68) ^ (a7 + 339)))
                                            - (6 * a27)
                                            + 414))(23484141);
  }
  else if ((_DWORD)v63 == 1)
  {
    v65 = (unint64_t)&a43 >= a31 || v61 >= (unint64_t)&a51;
    return ((uint64_t (*)(_QWORD, uint64_t))(*(_QWORD *)(v58 + 8
                                                                      * ((v65 * ((a7 + 793) ^ 0x88F)) ^ (a7 + 793)))
                                                    - 4))((a7 + 793), 1525324606);
  }
  else
  {
    a52 = 2 * (a52 ^ v59) + v59 - (v60 & (4 * (a52 ^ v59)));
    a53 = 2 * (a53 ^ v59) + v59 - (v60 & (4 * (a53 ^ v59)));
    a54 = 2 * (a54 ^ v59) + v59 - (v60 & (4 * (a54 ^ v59)));
    a55 = 2 * (a55 ^ v59) + v59 - (v60 & (4 * (a55 ^ v59)));
    return v62(v63, a2, a3, &a43);
  }
}

uint64_t sub_193CAF2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,unsigned __int8 a33,unsigned int a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39)
{
  uint64_t v39;
  BOOL v40;

  if (a34 < 0x8E104397 != a39 + 1241768030 < (a32 & 0x5380C7B5 ^ 0x8E104716))
    v40 = a39 + 1241768030 < (a32 & 0x5380C7B5 ^ 0x8E104716);
  else
    v40 = a39 + 1241768030 > a34;
  return (*(uint64_t (**)(void))(v39 + 8 * ((116 * ((a33 ^ v40) & 1)) ^ (a7 + 79))))();
}

uint64_t sub_193CAF370(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,int a40)
{
  int v40;
  uint64_t v41;

  return ((uint64_t (*)(void))(*(_QWORD *)(v41
                                        + 8
                                        * (((a2 + v40 + 63 >= (a2 + v40 + a40 - 15 - 954)) * (a40 - 911)) ^ a40))
                            - 4))();
}

uint64_t sub_193CAF3B8(uint64_t a1, int a2, int8x16_t *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,int a40)
{
  int v40;
  uint64_t v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;

  *a3 = vaddq_s8(vsubq_s8(*(int8x16_t *)(v41 + (v40 + a2)), vandq_s8(vaddq_s8(*(int8x16_t *)(v41 + (v40 + a2)), *(int8x16_t *)(v41 + (v40 + a2))), v43)), v44);
  return ((uint64_t (*)(void))(*(_QWORD *)(v42 + 8 * ((((((a40 - 963) | a6) ^ 0x1FLL) == 64) * a8) ^ (a40 - 44))) - 4))();
}

uint64_t sub_193CAF41C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5)
{
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  *(_BYTE *)(a3 + v6) = *(_BYTE *)(v10 + (v5 + a2))
                      - ((*(_BYTE *)(v10 + (v5 + a2)) << (((v7 + v12) & v8) - 14)) & a5)
                      + 18;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * (((v6 != 63) * v9) ^ v7)) - 4))();
}

uint64_t sub_193CAF46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37)
{
  uint64_t v37;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37
                                                                        + 8
                                                                        * ((325
                                                                          * (a37 - 1552108577 >= ((a7 + 94) ^ 0xFFFFFF48))) ^ (a7 + 1662)))
                                                            - 4))(a1, a2, a3);
}

void sub_193CAF4D8()
{
  JUMPOUT(0x193CAE62CLL);
}

uint64_t sub_193CAF500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int a15)
{
  int v15;
  int v16;
  uint64_t v17;
  _BOOL4 v18;
  unsigned int v19;
  int v20;
  _BOOL4 v21;

  v18 = a15 < 0xA226667B;
  v19 = ((v16 - 1141) | 0x10) + v15 + 1578762982;
  v20 = v18 ^ (v19 < 0xA226667B);
  v21 = v19 < a15;
  if (!v20)
    v18 = v21;
  return ((uint64_t (*)(void))(*(_QWORD *)(v17 + 8 * ((27 * !v18) ^ v16)) - 12))();
}

uint64_t sub_193CAF578@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, int a5@<W4>, char a6@<W5>, char a7@<W7>, int a8@<W8>)
{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  unsigned int v15;
  int v16;
  _BOOL4 v17;

  v14 = a4 < v11;
  *(_BYTE *)(a3 + (a8 + v10)) = *(_BYTE *)(v12 + (v8 + a2))
                                            + (v9 ^ a6)
                                            + (a7 | ~(2 * *(_BYTE *)(v12 + (v8 + a2))));
  v15 = a1 + v8 + 29;
  v16 = v14 ^ (v15 < v11);
  v17 = v15 < a4;
  if (!v16)
    v14 = v17;
  return ((uint64_t (*)(void))(*(_QWORD *)(v13 + 8 * ((!v14 * a5) ^ v9)) - 12))();
}

uint64_t sub_193CAF5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,char a52)
{
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;

  v55 = 831981571 * ((~((v54 - 168) | 0x4B65DE01) + ((v54 - 168) & 0x4B65DE01)) ^ 0x2D3BF1DA);
  *(_QWORD *)(v54 - 160) = a20;
  *(_DWORD *)(v54 - 168) = v55 ^ a15;
  *(_DWORD *)(v54 - 164) = v55 + v53 + 195;
  v56 = sub_193CA900C(v54 - 168);
  v57 = a52 & 0x3F;
  *(&a43 + (v57 ^ 0x23)) = -110;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v52
                                                               + 8
                                                               * ((((v57 ^ 0x23) > 0x37)
                                                                 * ((v53 + 57) ^ 0x44B)) ^ v53))
                                                   - 4))(v56, 3153304711);
}

uint64_t sub_193CAF6CC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (int)(((((v2 + 817041283) & 0xCF4CF07C) + 2708) * (a1 != 63)) ^ (v2 + 501)))
                            - ((137 * ((v2 + 501) ^ 0x200u)) ^ 0x91DLL)))();
}

uint64_t sub_193CAF728()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((88 * ((v0 ^ 0x1Cu) < ((((v1 - 1091566882) & 0x410FF45D) + 200) ^ 0x115u))) ^ v1))
                            - 8))();
}

uint64_t sub_193CAF778@<X0>(unsigned int a1@<W8>, uint64_t a2, uint64_t a3)
{
  char v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a3 + a1 + ((v4 + 244) ^ 0xFFFFFFFFF684725BLL)) = v6;
  return (*(uint64_t (**)(void))(v5 + 8 * ((715 * ((v3 & 0x38) == 8)) ^ v4)))();
}

uint64_t sub_193CAF7C4@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 + (a2 ^ v3)) = v7;
  return (*(uint64_t (**)(void))(v6 + 8 * (((v4 == 0) * a1) ^ v2)))();
}

uint64_t sub_193CAF7EC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((((v2 == v1) ^ ((a1 ^ 0xD) + 1)) & 1)
                                          * (((a1 - 529) | 0x55) - 53)) | a1))
                            - 4))();
}

uint64_t sub_193CAF83C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;

  *(_BYTE *)(v3 + v5 + a3 - 1) = v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((((unint64_t)(v3 + v5) < 0x40) * v6) ^ (v4 + 444))) - 4))();
}

void sub_193CAF874()
{
  JUMPOUT(0x193CAE620);
}

uint64_t sub_193CAF89C()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((3127 * ((v0 - 159092662) < 0x38)) ^ (v1 + 1103)))
                            - 65 * (v1 ^ 0x48u)
                            + 1881))();
}

uint64_t sub_193CAF8EC@<X0>(int a1@<W7>, int a2@<W8>)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v5 = v2 + v3;
  if (v5 <= 0x38)
    v5 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((((v5 - v2 + 159092662 < 8) ^ (a2 - 4)) & 1) * a1) ^ a2))
                            - 8))();
}

uint64_t sub_193CAF940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(a11 + v12) = v15;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * ((247 * ((v11 & 0xFFFFFFFFFFFFFFF8) == 8)) ^ (v13 | 0x124)))
                            - (((v13 | 0x124u) - 217) ^ 0x4A0)))();
}

uint64_t sub_193CAF98C(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *v6 = v9;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (((v7 == 0) * a1) ^ v4)) - (v5 ^ a4)))();
}

uint64_t sub_193CAF9B4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((((v0 == v1) ^ (v2 - 79)) & 1) * ((v2 - 1103) ^ 0x5C)) | v2))
                            - 4))();
}

uint64_t sub_193CAF9F0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;

  *(_BYTE *)(a2 + v3 + a1 - 1) = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((((unint64_t)(a2 + v3) > 0x37) * v4) ^ (v2 + 372))) - 4))();
}

void sub_193CAFA20()
{
  JUMPOUT(0x193CAE620);
}

uint64_t sub_193CAFC40@<X0>(uint64_t a1@<X2>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,char a36)
{
  int v36;
  uint64_t v37;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(v37
                                                                                + 8
                                                                                * ((766
                                                                                  * ((v36 & 0xFFFFFFFC) == ((4 * a2) ^ 0x27C) + 1552108375 + ((a2 - 178) | 0x54))) ^ a2))
                                                                    - 8))(161, 2742858737, a1, &a36);
}

uint64_t sub_193CAFCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,__int16 a54,char a55,char a56,int a57)
{
  uint64_t v57;
  unint64_t v59;

  if (a34 == 2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v57
                                                       + 8
                                                       * (((a57 == 1497258463) * (((32 * a7) ^ 0xE60) - 1201)) | (a7 + 1131))))(a17, 235795823);
  if (a34 == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57
                                                                + 8
                                                                * (((a57 != 1497258463) * ((a7 + 1146) ^ 0x610)) ^ (a7 + 1146))))(a1, 235795823, a17);
  v59 = ((unint64_t)&a41 ^ 0xDCFFFF7FFFE7FF7DLL)
      + 0x333BF1FB777DC083
      + (((_QWORD)&a41 << ((a7 - 97) ^ 0xF5u)) & 0xB9FFFEFFFFCFFEF0);
  a56 = ((a7 - 97) ^ 0xDC ^ v59 ^ 0x92) * (v59 + 17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 + 8 * (a7 + 671)) - 8))(a1, 235795823, a17);
}

void sub_193CAFFD8()
{
  JUMPOUT(0x193CAFFA4);
}

uint64_t sub_193CAFFE0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,char a55,uint64_t a56,int a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;

  v66 = *(_QWORD *)(a16 + 24);
  a61 = 0x1212121212121212;
  a62 = 0x1212121212121212;
  v67 = ((((v65 - 168) | 0xE3085F3B) + (~(v65 - 168) | 0x1CF7A0C4)) ^ 0x77A51663) * a2;
  *(_DWORD *)(v65 - 160) = v67 + 1334526211;
  *(_DWORD *)(v65 - 132) = (v63 + 1887) ^ v67;
  *(_QWORD *)(v65 - 128) = &a61;
  *(_QWORD *)(v65 - 168) = &a55;
  *(_QWORD *)(v65 - 152) = &a58;
  *(_QWORD *)(v65 - 144) = v66;
  v68 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E31525C0 + (v63 ^ 0xA8)) - 12))(v65 - 168);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v62
                                                      + 8
                                                      * ((1009
                                                        * (*(_DWORD *)(v65 - 136) == v64 + ((v63 + 608) | 0x130) - 952)) ^ v63))
                                          - 12))(v68);
}

uint64_t sub_193CB00D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BOOL4 v9;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 32) + v0 - 0x22E7991F0F256EF7)
     - *(unsigned __int8 *)(v5 + v0 - 0x22E7991F0F256EF7);
  v7 = v0 + 1;
  v9 = (v6 ^ 0xFBDFDFFD) + 1950039232 + (((5 * (v4 ^ 0x3A9)) ^ 0xF7BFBFAF) & (2 * v6)) == 1880825021 && v7 != v2 + 16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((97 * v9) ^ v4)) - 12))();
}

uint64_t sub_193CB0168@<X0>(int a1@<W8>)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v4 = 69008221
     * ((((2 * (v3 - 168)) | 0x300FE49A5336E7C0) - (v3 - 168) - 0x1807F24D299B73E0) ^ 0x4A9BB4AEFA3921EALL);
  v5 = a1 + 1705280883 - v4;
  *(_DWORD *)(v3 - 168) = v4 + a1 - 1017209884;
  *(_DWORD *)(v3 - 164) = v5;
  *(_DWORD *)(v3 - 160) = v4;
  *(_DWORD *)(v3 - 136) = v5 - 25;
  *(_DWORD *)(v3 - 132) = ((a1 + 1705280883) ^ 0x28) - v4;
  *(_QWORD *)(v3 - 152) = v4 + 1880825021;
  *(_QWORD *)(v3 - 144) = v4 + v1;
  v6 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E31525C0 + (a1 ^ 0xE2)) - 12))(v3 - 168);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * *(int *)(v3 - 156)) - 12))(v6);
}

void sub_193CB0244()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 44) = -1557818287;
}

void U4HBs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  int v8;

  if (a1)
    v5 = a2 == 0;
  else
    v5 = 1;
  v8 = v5 || a4 == 0 || a5 == 0;
  __asm { BR              X9 }
}

uint64_t sub_193CB0318(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17, int a18)
{
  int v18;
  uint64_t v19;
  uint64_t v20;

  *a4 = 0;
  *a5 = 0;
  a17 = -1501685844
      - 1224239923 * (((&a17 | 0x2F4EC595) + (~&a17 | 0xD0B13A6A)) ^ 0xDDFD3843);
  v20 = sub_193CBCC34(&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19 + 8 * ((3592 * (a18 == v18)) ^ 0x60Au)) - 4))(v20);
}

uint64_t sub_193CB03A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, unsigned int a18, int a19, unsigned int a20)
{
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v24 = 831981571 * ((1719020359 - (&a17 | 0x66762B47) + (&a17 | 0x9989D4B8)) ^ 0x28049C);
  LODWORD(a17) = 1751760276 - v24;
  a20 = 1476476408 - v24;
  a18 = v24 ^ 0x4E459F21;
  a19 = v24 ^ 0x2DC;
  sub_193C6C298((uint64_t)&a17);
  a18 = (831981571 * (((&a17 | 0x623690E7) + (~&a17 | 0x9DC96F18)) ^ 0xFB9740C2)) ^ 0x15E;
  a17 = &STACK[0x667A5DFFEA838F78];
  sub_193C8C02C((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 + 8 * (((a19 == -1557818287) * ((v22 + 517068865) ^ 0x1ED1D1DD)) ^ v22)) - 4))(v25, v26, v27, v28, v29, v30, v31, v32, v20, v23);
}

uint64_t sub_193CB050C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned int a20)
{
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;

  v26 = 1224239923
      * (((&a17 | 0x798342E2) - &a17 + (&a17 & 0x867CBD18)) ^ 0x8B30BF35);
  LODWORD(a17) = ((2 * v23) & 0xEE5CFFF4) + (v23 ^ 0x772E7FFA) - v26 + (v25 ^ 0xFAF5A9A3);
  a18 = a16;
  LODWORD(a19) = (v25 - 198) ^ v26;
  ((void (*)(uint64_t *))*(&off_1E31525C0 + (int)(v25 - 542)))(&a17);
  v27 = 69008221 * ((2 * (&a17 & 0xB01A4D0) - &a17 + 1962826540) ^ 0xA75C0926);
  a19 = a16;
  a17 = v21;
  HIDWORD(a18) = v27 + v25 - 14;
  a20 = v27 ^ ((v22 ^ 0xFFFBBEFE) + 1678105408 + ((2 * v22) & 0xFFF77DFC));
  v28 = ((uint64_t (*)(uint64_t *))((char *)*(&off_1E31525C0 + (v25 ^ 0x399)) - 4))(&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24 + 8 * ((3012 * ((_DWORD)a18 == v20)) ^ v25)) - 4))(v28);
}

uint64_t sub_193CB067C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int a19, unint64_t *a20,unsigned int a21,int a22,unsigned int a23)
{
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;

  v26 = 944348131 * (&a18 ^ 0xA319A44E);
  a19 = -1119189988 - v26;
  a21 = (a12 ^ 0xFACB7B7F) - v26 + (a12 << ((5 * (v25 ^ 1)) ^ 0xB)) + 1866333691;
  a23 = v26 + v25 + 368399406;
  a18 = a17;
  a20 = &STACK[0x59F8E2836308BDB9];
  v27 = sub_193CBD2A0((uint64_t)&a18);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24
                                                      + 8
                                                      * ((63 * (a22 == (((v25 ^ 0x301) + 641) ^ (v23 + 641)))) ^ v25))
                                          - 4))(v27);
}

uint64_t sub_193CB075C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11)
{
  unsigned int v11;
  uint64_t v12;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * ((((v11 - 1345637588) & 0xEFE ^ 0x4BE) * (a11 < 0x5E8ED59)) ^ v11))
                            - 4))();
}

uint64_t sub_193CB07FC@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, int a7, char a8, uint64_t a9, uint64_t a10, char *a11, _BYTE *a12, _BYTE *a13, uint64_t a14)
{
  uint64_t v14;
  int v15;
  int v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char **);
  uint64_t v21;

  a11 = &a8 + a1;
  a12 = a6;
  LODWORD(a13) = v15
               - ((-519239077 - (&a11 | 0xE10D0A5B) + (&a11 | 0x1EF2F5A4)) ^ 0xBDEB51EA)
               * v16
               + 208;
  v20(&a11);
  LODWORD(a12) = v15
               + 555
               + 3804331 * ((2 * (&a11 & 0x736FE030) - &a11 + 210771914) ^ 0x72453A3C)
               - 105;
  a11 = v19;
  a13 = a6;
  a14 = v14;
  ((void (*)(char **))*(&off_1E31525C0 + v15 - 623))(&a11);
  LODWORD(a13) = v15
               + 555
               - ((&a11 + 1827793867 - 2 * (&a11 & 0x6CF1EBCB)) ^ 0xCFE84F85) * v16
               - 347;
  a11 = v17;
  a12 = a6;
  v20(&a11);
  LODWORD(a12) = v15
               + 555
               - 241568881
               * ((346969252 - (&a11 | 0x14AE54A4) + (&a11 | 0xEB51AB5B)) ^ 0x3D40AF19)
               - 745;
  a11 = a6;
  v21 = sub_193C9B7D8((uint64_t)&a11);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18
                                                      + 8
                                                      * ((786
                                                        * (HIDWORD(a12) == ((v15 + 882840704) & 0x2BFF ^ 0xA3259752))) ^ (v15 + 555)))
                                          - 8))(v21);
}

uint64_t sub_193CB09B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  int v16;
  uint64_t v17;
  unsigned int v18;

  return ((uint64_t (*)(void))(*(_QWORD *)(v17
                                        + 8
                                        * ((95 * (a16 == ((v16 + ((v18 - 1196) | 0x301) + 1321) ^ (v18 + 894)))) ^ v18))
                            - 8))();
}

uint64_t sub_193CB09F4@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8 * (((((a8 == v8) ^ (a1 - 1)) & 1) * (a1 - 2004)) ^ a1))
                            - 4))();
}

uint64_t sub_193CB0A30@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v3 = (a1 - 1321);
  v4 = (819
      * (((uint64_t (*)(_QWORD, uint64_t))*(&off_1E31525C0 + a1 - 1866))(v1 ^ 0xA3259451, 1812636846) != 0)) ^ (a1 - 894);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * v4) - (v3 ^ 0x30B)))();
}

uint64_t sub_193CB0AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;

  v19 = (a15 ^ v16) - (((a15 ^ v16) << ((((v15 & (v17 | 0xE2)) - 39) & 0xEE) + 83)) & 0xC4F2475C) + 1652106158;
  return (*(uint64_t (**)(void))(v18
                              + 8
                              * ((359
                                * (((786 * (v15 & (v17 | 0x1E2) ^ 0x4E5) - 446408) & (2 * v19) ^ 0xC4F0014C)
                                 + (v19 ^ 0x1D85BF19)
                                 - 1080559762 != 1066701861)) ^ v15 & (v17 | 0x1E2))))();
}

uint64_t sub_193CB0B64()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v1 ^ (122 * ((v2 + v0 - 2147261623) < 8))))
                            - ((79 * (((v1 + 9452819) | 0x1E419802) ^ 0x1ED1DE42u)) ^ 0x2C3)))();
}

uint64_t sub_193CB0BE0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((v2 + 427) ^ (v3 + 1883) ^ (v3 + 2936))
                                          * ((unint64_t)(v1 - a1) > 0x1F)) ^ v2))
                            - 8))();
}

uint64_t sub_193CB0C18(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (a4 ^ (188 * (v4 < 0x20))))
                            - ((((a4 + 536214233) & 0xFEDBDEFF) - 517068608) ^ (a4 + 657))))();
}

uint64_t sub_193CB0C6C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v8 = v4 + v3 + 1630635261 + v5;
  v9 = v1 + v8;
  v10 = *(_OWORD *)(v9 - 31);
  v11 = a1 + v8;
  *(_OWORD *)(v11 - 15) = *(_OWORD *)(v9 - 15);
  *(_OWORD *)(v11 - 31) = v10;
  return (*(uint64_t (**)(void))(v7 + 8 * ((896 * ((v2 & 0xFFFFFFE0) == 32)) ^ (v6 + v5 - 39))))();
}

void sub_193CB0CC8()
{
  JUMPOUT(0x193CB0C88);
}

uint64_t sub_193CB0CD4(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  void (*v4)(unsigned int *);
  int v5;
  int v6;
  _QWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v6 = (v1 - 1198) | 0x303;
  *v8 = a1;
  *v9 = v2;
  v12 = (v6 + 222) ^ ((((&v12 | 0x14B55937) + (~&v12 | 0xEB4AA6C8)) ^ 0xC7170B3C) * v5);
  v13 = v10;
  v4(&v12);
  v12 = (((v6 + 1457192092) & 0xA925066A) - 553) ^ (((117335635
                                                    - (&v12 | 0x6FE6653)
                                                    + (&v12 | 0xF90199AC)) ^ 0x2AA3CBA6)
                                                  * v5);
  v13 = v11;
  v4(&v12);
  return v3 ^ 0xA3259451;
}

void sub_193CB0FAC(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1
     + 1224239923 * (((a1 | 0xA81C68C2) - (_DWORD)a1 + (a1 & 0x57E3973D)) ^ 0x5AAF9515)
     - 410;
  __asm { BR              X5 }
}

uint64_t sub_193CB113C@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W3>, int a4@<W4>, int a5@<W8>)
{
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * (((((((v5 + 380) | 0xC) + a1 + a5) | a2) ^ a3) * (a4 != 31)) ^ ((v5 + 380) | 0xC)))
                            - ((((v5 + 380) | 0xC) + a1) & (a5 + 1522))
                            + 1640))();
}

void sub_193CB11A4()
{
  JUMPOUT(0x193CB1104);
}

uint64_t sub_193CB11AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  *(_DWORD *)(a10 - 0x3DD47FB64BA505D2) = -1855432697 - v16;
  v23 = 831981571 * (((((v22 - 136) | 0x6D168F8) ^ 0xFFFFFFFE) - (~(v22 - 136) | 0xF92E9707)) ^ 0x608F4723);
  *(_QWORD *)(v22 - 136) = v19;
  *(_DWORD *)(v22 - 128) = v21 - v23 + 320;
  *(_DWORD *)(v22 - 124) = v23 + 2074368201;
  sub_193C6E434(v22 - 136);
  v24 = 3804331 * ((v22 - 136) ^ 0x7ED525F6);
  *(_QWORD *)(v22 - 136) = v19;
  *(_DWORD *)(v22 - 128) = v24 + v21 + 702;
  *(_DWORD *)(v22 - 124) = ((v17 << 6) & 0xFFBCFF40)
                         - v24
                         + ((v21 - 1128) | 0x70)
                         + ((v17 << ((v21 - 38) ^ 0x4B)) ^ 0xFFDE7FBB)
                         + 1588588660;
  sub_193CB3714(v22 - 136);
  *(_DWORD *)(v22 - 128) = v21
                         + 831981571
                         * ((((v22 - 136) | 0x3614D1A1) - (v22 - 136) + ((v22 - 136) & 0xC9EB2E58)) ^ 0xAFB50185)
                         - 1310;
  *(_QWORD *)(v22 - 120) = &STACK[0x2D6CAD6C03423C7B];
  *(_QWORD *)(v22 - 136) = a16;
  sub_193C6EA8C(v22 - 136);
  *(_DWORD *)(v22 - 112) = (v21 - 1371) ^ (69008221
                                         * ((137905069 - ((v22 - 136) | 0x83843AD) + ((v22 - 136) | 0xF7C7BC52)) ^ 0x2465EE58));
  *(_QWORD *)(v22 - 136) = v19;
  *(_QWORD *)(v22 - 120) = a16;
  v25 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20 + 8 * (v21 - 1596)) - 4))(v22 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18
                                                      + 8 * ((247 * (*(_DWORD *)(v22 - 128) > 0x245280BBu)) ^ v21))
                                          - 8))(v25);
}

uint64_t sub_193CB13DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 - 136) = v16;
  *(_DWORD *)(v18 - 128) = v17 + 831981571 * ((v18 - 136) ^ 0x99A1D024) - 504;
  *(_QWORD *)(v18 - 120) = a15;
  v19 = sub_193C6EA8C(v18 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15
                                                      + 8
                                                      * ((1556
                                                        * (a10 >= (int)((v17 + 1997632173) & 0x88EE8F5E ^ (v17 + 525)))) ^ v17))
                                          - 4))(v19);
}

uint64_t sub_193CB1464@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((7
                                          * (((((a1 << (((v4 - 89) | 0x60) ^ 0x60)) ^ 0x2D90A00)
                                             + v2
                                             - 2
                                             * (((a1 << (((v4 - 89) | 0x60) ^ 0x60)) ^ 0x2D90A00) & 0x16C850C ^ (a1 << (((v4 - 89) | 0x60) ^ 0x60)) & 0xC)) ^ v2) > v1)) ^ v4))
                            - 4))();
}

uint64_t sub_193CB14C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  *(_QWORD *)(v20 - 136) = a16;
  *(_QWORD *)(v20 - 120) = a12;
  *(_DWORD *)(v20 - 128) = v16
                         + 831981571 * ((((2 * (v20 - 136)) | 0x7ACF21C) - (v20 - 136) - 64387342) ^ 0x9A77A92A)
                         - 267;
  sub_193C6EA8C(v20 - 136);
  v21 = 3804331 * (((v20 - 136) & 0xD3775B3D | ~((v20 - 136) | 0xD3775B3D)) ^ 0x525D8134);
  *(_QWORD *)(v20 - 136) = v17;
  *(_DWORD *)(v20 - 128) = v21 + v16 + 1745;
  *(_DWORD *)(v20 - 124) = 1586393772 - v21;
  sub_193CB3714(v20 - 136);
  *(_QWORD *)(v20 - 120) = a16;
  *(_QWORD *)(v20 - 136) = v17;
  *(_DWORD *)(v20 - 112) = (v16 - 328) ^ (69008221
                                        * ((-1244150035 - ((v20 - 136) | 0xB5D7C6ED) + ((v20 - 136) | 0x4A283912)) ^ 0x998A6B18));
  v22 = v18(v20 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19
                                                      + 8
                                                      * (((8 * (*(_DWORD *)(v20 - 128) <= 0x245280BBu)) | (16 * (*(_DWORD *)(v20 - 128) <= 0x245280BBu))) ^ (v16 + 1546)))
                                          - 8))(v22);
}

uint64_t sub_193CB195C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  uint64_t v12;
  int v13;
  _BOOL4 v14;

  v14 = ((v13 + 526911176) & 0xE097F671 ^ 0x1DFF5CBD)
      + (a12 ^ 0xF6F7B7FD)
      + ((((v13 - 1063) | 0x4CE) ^ 0xEDEF6A34) & (2 * a12))
      - 351737563 < 0x7FFFFFFE;
  return (*(uint64_t (**)(void))(v12 + 8 * ((v14 | (16 * v14)) ^ v13)))();
}

void sub_193CB2270(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 40) + 235795823 * (((a1 | 0xBFD03985) - a1 + (a1 & 0x402FC67A)) ^ 0x2B7D70DC);
  __asm { BR              X10 }
}

uint64_t sub_193CB239C()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v5;

  v5 = (*(_DWORD *)(v2 + 44) ^ v0) != ((v1 + 1202) ^ 0x519E26E) && *(_OWORD *)(v2 + 48) != 0;
  return (*(uint64_t (**)(void))(v3 + 8 * ((22 * v5) ^ v1)))();
}

uint64_t sub_193CB23E4()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  _BOOL4 v4;

  v4 = *(_QWORD *)(v1 + 32) == 0x47074892D335C271 || *(_OWORD *)v1 == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v0 | (8 * v4))) - ((167 * (v0 ^ 0x7F0u)) ^ 0x347)))();
}

uint64_t sub_193CB2438(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v3
                                                               + 8
                                                               * ((((v2 ^ 0x33D) - 1222) * (v1 != 0)) ^ v2 ^ 0x33D))
                                                   - ((39 * (v2 ^ 0x7DAu)) ^ 0x72DLL)))(a1, 831981571);
}

uint64_t sub_193CB255C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  void (*v32)(uint64_t);
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v43)(uint64_t);
  uint64_t v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;

  v29 = v22 + 609;
  v30 = (v22 - 712) | 0x4E9;
  v31 = 460628867 * ((v28 + 1270465137 - 2 * ((v28 - 144) & 0x4BB9C301)) ^ 0x72F417C);
  *(_DWORD *)(v28 - 136) = (v23 + 905709817 + v30) ^ v31;
  *(_DWORD *)(v28 - 144) = v31 + v29 - 669;
  *(_QWORD *)(v28 - 128) = v20;
  *(_QWORD *)(v28 - 120) = v27;
  v46 = a1 + v21;
  ((void (*)(uint64_t))(*(_QWORD *)(v25 + 8 * (v29 ^ 0x79C)) - 8))(v28 - 144);
  v47 = v24;
  *(_DWORD *)(v28 - 144) = v30
                         - 1160
                         - 1224239923
                         * ((-773802395 - ((v28 - 144) | 0xD1E0B665) + ((v28 - 144) | 0x2E1F499A)) ^ 0xDCACB44D);
  *(_QWORD *)(v28 - 136) = a19;
  *(_QWORD *)(v28 - 128) = a18;
  v45 = (void (*)(uint64_t))(*(_QWORD *)(v25 + 8 * (v30 - 1552)) - 12);
  v45(v28 - 144);
  HIDWORD(v44) = v30 - 131;
  *(_DWORD *)(v28 - 112) = v30
                         - 131
                         - 1543737703 * ((((v28 - 144) | 0x7DD3FFD5) + (~(v28 - 144) | 0x822C002A)) ^ 0x327AFA8);
  *(_QWORD *)(v28 - 144) = v27;
  *(_QWORD *)(v28 - 136) = a19;
  *(_QWORD *)(v28 - 128) = a20;
  *(_QWORD *)(v28 - 120) = a18;
  v43 = (void (*)(uint64_t))(*(_QWORD *)(v25 + 8 * (v30 ^ 0x602)) - 8);
  v43(v28 - 144);
  LODWORD(v44) = v30 - 1636;
  *(_DWORD *)(v28 - 112) = v30
                         - 1636
                         - 1224239923 * (((v28 - 144) & 0xCC537CBC | ~((v28 - 144) | 0xCC537CBC)) ^ 0xC11F7E94);
  *(_QWORD *)(v28 - 128) = v24;
  *(_QWORD *)(v28 - 120) = a19;
  *(_QWORD *)(v28 - 104) = a20;
  *(_QWORD *)(v28 - 144) = a18;
  *(_QWORD *)(v28 - 136) = a20;
  v32 = (void (*)(uint64_t))(*(_QWORD *)(v25 + 8 * (v30 ^ 0x6F6)) - 4);
  v32(v28 - 144);
  HIDWORD(a4) = v30 - 8;
  *(_DWORD *)(v28 - 144) = v30
                         - 8
                         - 1178560073
                         * ((-1376580985 - ((v28 - 144) | 0xADF30A87) + ((v28 - 144) | 0x520CF578)) ^ 0xB539D710);
  *(_QWORD *)(v28 - 112) = a10;
  *(_QWORD *)(v28 - 104) = a20;
  *(_QWORD *)(v28 - 128) = a19;
  *(_QWORD *)(v28 - 120) = a20;
  *(_QWORD *)(v28 - 136) = a18;
  v33 = (void (*)(uint64_t))((char *)*(&off_1E31525C0 + (v30 ^ 0x606)) - 12);
  v33(v28 - 144);
  *(_DWORD *)(v28 - 144) = v30
                         - 1160
                         - 1224239923 * ((2 * ((v28 - 144) & 0x7177D8F0) - (v28 - 144) - 1903679731) ^ 0x7C3BDADA);
  *(_QWORD *)(v28 - 136) = a19;
  *(_QWORD *)(v28 - 128) = a14;
  v45(v28 - 144);
  *(_QWORD *)(v28 - 128) = a11;
  *(_QWORD *)(v28 - 120) = a14;
  *(_DWORD *)(v28 - 112) = v30 - 131 - 1543737703 * ((v28 - 990734532 - 2 * ((v28 - 144) & 0xC4F297CC)) ^ 0xBA06C7B0);
  *(_QWORD *)(v28 - 144) = v27;
  *(_QWORD *)(v28 - 136) = a19;
  v43(v28 - 144);
  *(_QWORD *)(v28 - 128) = v47;
  *(_QWORD *)(v28 - 120) = a19;
  *(_QWORD *)(v28 - 104) = a11;
  *(_DWORD *)(v28 - 112) = v30
                         - 1636
                         - 1224239923 * ((2 * ((v28 - 144) & 0x56C8E78) - (v28 - 144) - 91000446) ^ 0x8208C55);
  *(_QWORD *)(v28 - 144) = a14;
  *(_QWORD *)(v28 - 136) = a11;
  v32(v28 - 144);
  *(_DWORD *)(v28 - 144) = v30
                         - 8
                         - 1178560073
                         * ((((v28 - 144) | 0xFC2D453B) - (v28 - 144) + ((v28 - 144) & 0x3D2BAC0)) ^ 0x1B186753);
  *(_QWORD *)(v28 - 136) = a14;
  *(_QWORD *)(v28 - 128) = a19;
  *(_QWORD *)(v28 - 120) = a11;
  *(_QWORD *)(v28 - 112) = a12;
  *(_QWORD *)(v28 - 104) = a11;
  v33(v28 - 144);
  *(_DWORD *)(v28 - 144) = (v30 - 1400) ^ (268847287
                                         * ((((v28 - 144) ^ 0xDA23F5E6) & 0x6BA430D2 | ~((v28 - 144) ^ 0xDA23F5E6 | 0x6BA430D2)) ^ 0xB1D22BE3));
  *(_QWORD *)(v28 - 136) = a11;
  *(_QWORD *)(v28 - 128) = a20;
  ((void (*)(uint64_t))((char *)*(&off_1E31525C0 + (v30 ^ 0x6ED)) - 4))(v28 - 144);
  *(_QWORD *)(v28 - 136) = a11;
  *(_DWORD *)(v28 - 140) = v30
                         - 1224239923
                         * ((((v28 - 144) | 0x2A41DB03) - (v28 - 144) + ((v28 - 144) & 0xD5BE24F8)) ^ 0xD8F226D4)
                         - 922;
  sub_193C79D14(v28 - 144);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), _QWORD, uint64_t, void (*)(uint64_t), _QWORD, void (*)(uint64_t), uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 + 8 * ((3606 * (*(_DWORD *)(v28 - 144) == ((v30 - 934) ^ 0x4FB20BBF))) ^ v30)) - (v30 - 934) + 831))(v34, v35, v36, v37, v38, v39, v40, v41, a2, a3, a4, v43, *(&off_1E31525C0 + (v30 ^ 0x678)), v44, v45, (v30 - 934), v32, a11, a12,
           v46,
           a14);
}

uint64_t sub_193CB2AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(uint64_t), uint64_t a14, uint64_t a15, uint64_t a16, void (*a17)(uint64_t), uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void (*v29)(uint64_t);
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *(_DWORD *)(v34 - 128) = (v30 - 621) ^ (3804331
                                        * ((((v34 - 144) | 0x1679A06) - ((v34 - 144) & 0x1679A06)) ^ 0x7FB2BFF0));
  *(_QWORD *)(v34 - 144) = v31;
  *(_QWORD *)(v34 - 136) = v33;
  v29(v34 - 144);
  *(_QWORD *)(v34 - 104) = v31;
  *(_QWORD *)(v34 - 128) = a29;
  *(_QWORD *)(v34 - 120) = a26;
  *(_QWORD *)(v34 - 144) = v33;
  *(_QWORD *)(v34 - 136) = v31;
  *(_DWORD *)(v34 - 112) = v30
                         - 702
                         - 1224239923 * (((v34 - 144) & 0x1A910DF3 | ~((v34 - 144) | 0x1A910DF3)) ^ 0x17DD0FDB);
  a17(v34 - 144);
  *(_QWORD *)(v34 - 104) = a20;
  *(_DWORD *)(v34 - 112) = v30
                         - 702
                         - 1224239923
                         * ((((v34 - 144) | 0xD642D674) - (v34 - 144) + ((v34 - 144) & 0x29BD2988)) ^ 0x24F12BA3);
  *(_QWORD *)(v34 - 128) = v31;
  *(_QWORD *)(v34 - 120) = a26;
  *(_QWORD *)(v34 - 144) = v33;
  *(_QWORD *)(v34 - 136) = v31;
  a17(v34 - 144);
  *(_DWORD *)(v34 - 144) = v30
                         - 235795823 * ((((v34 - 144) | 0x93F0069D) - ((v34 - 144) & 0x93F0069D)) ^ 0x75D4FC4)
                         + 2138962525;
  *(_QWORD *)(v34 - 136) = a25;
  *(_QWORD *)(v34 - 128) = v31;
  sub_193CBD034(v34 - 144);
  *(_DWORD *)(v34 - 128) = (v30 - 621) ^ (3804331 * ((v34 - 1102073519 - 2 * ((v34 - 144) & 0xBE4FB1E1)) ^ 0xC09A9417));
  *(_QWORD *)(v34 - 144) = v31;
  *(_QWORD *)(v34 - 136) = a27;
  a13(v34 - 144);
  *(_QWORD *)(v34 - 128) = a27;
  *(_DWORD *)(v34 - 136) = v30
                         + 831981571
                         * ((((v34 - 144) | 0x16D4FBA6) - (v34 - 144) + ((v34 - 144) & 0xE92B0458)) ^ 0x8F752B82)
                         - 493;
  *(_QWORD *)(v34 - 144) = v31;
  v35 = sub_193C6EA8C(v34 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v32
                                                      + 8
                                                      * (int)((((v30 + 2136505210) & 0x80A785FB ^ ((v30 ^ 0x7FA) - 54))
                                                             * (a24 == 0)) ^ (v30 + 1483)))
                                          - 12))(v35);
}

uint64_t sub_193CB2D0C()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v5 = ((((v4 - 144) | 0xC31AA24E) - ((v4 - 144) & 0xC31AA24E)) ^ 0x57B7EB17) * v2;
  *(_QWORD *)(v4 - 136) = v3;
  *(_QWORD *)(v4 - 120) = v7;
  *(_DWORD *)(v4 - 140) = v9 + v5 + ((v0 - 374) ^ 0x588482D5);
  *(_DWORD *)(v4 - 128) = v0 - v5 - 111;
  result = ((uint64_t (*)(uint64_t))((char *)*(&off_1E31525C0 + (v0 ^ 0x485)) - 12))(v4 - 144);
  *(_DWORD *)(v8 - 0x47074892D335C271) = v9;
  *(_DWORD *)(v1 + 24) = -1557818287;
  return result;
}

uint64_t sub_193CB2E70(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;

  v1 = 1178560073 * (((_DWORD)a1 + 218862975 - 2 * (a1 & 0xD0B957F)) ^ 0xEA3EB717);
  v2 = *a1 + v1;
  return (*(uint64_t (**)(void))((char *)*(&off_1E31525C0 + (int)(v2 ^ 0x864))
                              + 8
                              * (int)(((((a1[1] + v1) ^ 0xA3259451) - 1 < 0x63)
                                     * ((((v2 - 2010) | 0x201) ^ 0xFFFFFFA8) + v2 - 1497)) ^ v2)
                              - 12))();
}

uint64_t sub_193CB2F0C@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  int v2;

  *(_DWORD *)(*(_QWORD *)(result + 8) - 0x7DFAB6946AB5A151) = (a2 ^ 0x5CDA6BAE)
                                                              - (((v2 + 74008922) & 0xFB96BC7E ^ 0x464B20BE) & (2 * (a2 ^ 0x5CDA6BAE) + 2147398450))
                                                              - 1557860886;
  return result;
}

void sub_193CB2FC8(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  _BOOL4 v5;

  v1 = 1543737703 * ((1016161312 - (a1 | 0x3C916420) + (a1 | 0xC36E9BDF)) ^ 0xBD9ACBA3);
  v2 = *a1 + v1;
  v3 = a1[2] ^ v1;
  v5 = (v3 & 0x30000000) == 0x10000000 || (v3 & 0x3F000000) == 1006632960;
  __asm { BR              X11 }
}

uint64_t sub_193CB30AC@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unsigned int a4, unint64_t *a5, char a6, int a7, int a8, unint64_t *a9, unint64_t *a10, uint64_t a11)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v15 = *(_QWORD *)(v12 + 16);
  v16 = 1224239923 * ((2 * (&a4 & 0x6302E8F8) - &a4 + 486348549) ^ 0xEE4EEAD2);
  a5 = &STACK[0x4C77195BAB83CDD6];
  a7 = v16 + v14 - 1882358148;
  a4 = ((v11 ^ 0xCAB6CCCC) + ((v14 + 1158868232) & 0xBAED12FF) + ((2 * v11) & 0xEF3FF97C ^ 0x6A126064) - 8403658) ^ v16;
  a10 = &STACK[0x511ACEB18A637026];
  a11 = v15;
  a6 = (51 * ((2 * (&a4 & 0xF8) - &a4 + 5) ^ 0xD2)) ^ 0x66;
  a9 = &STACK[0x68BA91653782632B];
  v17 = ((uint64_t (*)(unsigned int *))(*(_QWORD *)(a1 + 8 * (v14 ^ 0x2AE)) - 4))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v13 + 8 * ((397 * (a8 == -1557818287)) ^ v14)) - 4))(v17);
}

uint64_t sub_193CB31F4()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * (v2 | (2
                                               * ((((((v2 + 1295326820) & 0xB2CADFFF) + 964) ^ (v1 == 1006632960)) & 1) == 0))))
                            - 4))();
}

uint64_t sub_193CB3238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  int v10;
  uint64_t v11;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((50 * (a10 + 4 >= a10)) ^ v10)) - ((v10 - 714) | 0xA4u) + 690))();
}

uint64_t sub_193CB32AC()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v0 ^ (3017 * (v1 != 0x29F83432)))) - 4))();
}

uint64_t sub_193CB3300@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  _BOOL4 v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;

  *(_BYTE *)(a1 + (v8 - 1243297555)) = *(_BYTE *)(v1 + (v8 - 1243297555));
  v10 = v4 > v6;
  v11 = (v2 ^ 0x8E00725F) + v8;
  v12 = v10 ^ (v11 < v3);
  v13 = v11 < v5;
  if (!v12)
    v10 = v13;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((v10 * v7) ^ v2)) - 4))();
}

uint64_t sub_193CB3360()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((v0 - 550) ^ (1568
                                                       * (((((v0 - 550) ^ 0x3AE) + 1139826508) ^ (2 * v1) & 0x6BF766EC)
                                                        + (v1 ^ 0x1C038744)
                                                        - 344010820 != 561677106))))
                            - 4))();
}

uint64_t sub_193CB33CC()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v3
                                                     + 8
                                                     * ((800
                                                       * (v2 + v0 - 905687926 >= ((v1 - 1827839779) & 0x6CF29FBB ^ 0x1BDu))) ^ (v1 + 915)))
                                         - 8))((v1 + 404));
}

uint64_t sub_193CB3434(uint64_t a1, int a2)
{
  char v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4 + 8 * (((3 * (v3 ^ 0x124) - 346) * (((a2 - (v2 & 3)) & 0xFFFFFFFC) > a2 + 3)) ^ v3)))();
}

uint64_t sub_193CB3478@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)(a1 - 3 + v3 + ((v5 + 762) ^ v2)) = *(_DWORD *)(v1 - 3 + v3 + ((v5 + 762) ^ v2));
  return (*(uint64_t (**)(void))(v6 + 8 * ((1044 * (v4 != 4)) ^ (v5 + 42))))();
}

uint64_t sub_193CB34C4(uint64_t a1, int a2, int a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_DWORD *)(a1 + (v5 - a4 + a3)) = *(_DWORD *)(v6 + (v5 - a4 + a3));
  return (*(uint64_t (**)(void))(v8 + 8 * (((a4 + 4 != v7) * a5) ^ a2)))();
}

uint64_t sub_193CB34F0@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>, uint8x8_t a3@<D0>)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  a3.i32[0] = *(_DWORD *)(a2 + a1 + 1);
  *(_DWORD *)(a2 - 3 + v4 + ((v5 + 748) ^ v3)) = vmovn_s16((int16x8_t)vmovl_u8(a3)).u32[0];
  return (*(uint64_t (**)(void))(v7 + 8 * ((100 * (v6 == 4)) ^ v5)))();
}

uint64_t sub_193CB353C(uint64_t a1, int a2, int a3, int a4, int16x8_t a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  *(_DWORD *)(a1 + (v5 - a3 + a2)) = vmovn_s16(a5).u32[0];
  return (*(uint64_t (**)(void))(v8 + 8 * (((a3 + 4 == v7) * a4) ^ v6)))();
}

uint64_t sub_193CB3568()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v2 ^ (21 * (v0 == v1))))
                            - (((v2 ^ 0x607u) - 412) ^ (v2 - 915))))();
}

uint64_t sub_193CB359C@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = ((a1 - 404) ^ (v4 + 1391)) + v5;
  *(_BYTE *)(a2 + v7) = *(_BYTE *)(v2 + v7);
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((404 * (v5 - 1 != v3)) ^ (a1 + 10))) - 4))();
}

uint64_t sub_193CB35DC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2 + 8 * ((832 * (*(_QWORD *)(v1 + 24) != 0x633D6E450055D885)) ^ v0)))();
}

uint64_t sub_193CB360C@<X0>(uint64_t a1@<X8>, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(a1 - 0x633D6E450055D885) = a2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8 * ((1133 * (*(_QWORD *)(v3 + 32) != 0x3630D01404169E0BLL)) ^ v2 ^ 0x3B4))
                            - 4))();
}

void sub_193CB3668(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 - 0x3630D01404169E0BLL) = v2;
  *(_DWORD *)(v1 + 4) = -1557818287;
}

void sub_193CB3714(uint64_t a1)
{
  int v1;

  v1 = 3804331 * ((a1 - 881405234 - 2 * (a1 & 0xCB76D2CE)) ^ 0xB5A3F738);
  __asm { BR              X14 }
}

uint64_t sub_193CB37C0@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  int v8;
  unsigned int v9;

  v5 = 944348131 * (((&v7 | 0xD4AD68BB) + (~&v7 | 0x2B529744)) ^ 0x77B4CCF4);
  v8 = v1 - v5 - 656;
  v9 = v2 - ((v4 + 1122179754) & 0xC3DEA0F8) + v5 + ((v1 + 330) ^ 0x360D4E3);
  v7 = v3;
  return ((uint64_t (*)(uint64_t *))(*(_QWORD *)(a1 + 8 * (v1 ^ 0x793)) - 8))(&v7);
}

void sub_193CB390C(uint64_t a1)
{
  int v1;
  _BOOL4 v3;

  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2D6CAD6C03423C37) != 1558770207
    && *(_DWORD *)(*(_QWORD *)a1 - 0x2D6CAD6C03423C37) != 1558770207;
  v1 = *(_DWORD *)(a1 + 16) + 460628867 * ((-2 - ((a1 | 0x675F0E27) + (~(_DWORD)a1 | 0x98A0F1D8))) ^ 0xD43673A5);
  __asm { BR              X13 }
}

uint64_t sub_193CB3A04@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((((((v3 + 202) | 0x205) - 1036076998) & 0x3DC143F8 ^ 0xFFFFFD43) + v2 + a1 >= 0x7FFFFF7D)
                                          * (((((v3 + 202) | 0x205) - 771) | 0x34) ^ 0x325)) ^ ((v3 + 202) | 0x205)))
                            - 4))();
}

uint64_t sub_193CB3A74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8 * (v4 ^ (329 * (v3 < 1)))))(329, a2);
}

uint64_t sub_193CB3ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _BOOL4 v18;

  v18 = v15 > -448105339;
  *(_DWORD *)(a12 + 4 * (v17 - 1261969334)) = v13;
  if (v18 == v17 + 1333619653 < (v14 ^ 0x1AB58948))
    v18 = v17 + 1333619653 < v16;
  return (*(uint64_t (**)(void))(v12 + 8 * (((2 * v18) | (8 * v18)) ^ v14)))();
}

uint64_t sub_193CB3B3C()
{
  uint64_t v0;
  int v1;
  int v2;

  return (*(uint64_t (**)(void))(v0 + 8 * (((((19 * (v1 ^ 0x23A)) ^ 0x453) + 1339) * (v2 == 0)) ^ v1 ^ 0x143)))();
}

uint64_t sub_193CB3B78()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8 * ((((((v2 - 1971175857) & 0x757DC71D) - 719) ^ 0x579) * (v1 > 0)) ^ v2))
                            - 8))();
}

uint64_t sub_193CB3BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12
                                        + 8
                                        * (((*(_DWORD *)(a12 + 4 * (v15 + v16 + 1540)) == v14)
                                          * ((v13 + 719) ^ 0x7C6)) ^ (v13 - 670)))
                            - (v13 - 670)
                            + 144))();
}

uint64_t sub_193CB3C28()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((57 * (v4 + v2 + 1539 < ((v1 - 30515426) & 0x1D1A37F ^ v3))) ^ v1))
                            - (v1 + 1389)
                            + 1533))();
}

uint64_t sub_193CB3C78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((*(_DWORD *)(a1 + 4 * (v4 + v5 + 1540)) == v2)
                                          * ((v3 + 719) ^ 0x7C6)) ^ (v3 - 670)))
                            - (v3 - 670)
                            + 144))();
}

uint64_t sub_193CB3CB8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 - 112) = v4;
  *(_DWORD *)(v2 - 116) = v1
                        - 694
                        - 1224239923
                        * ((-435976862 - ((v2 - 120) | 0xE6038562) + ((v2 - 120) | 0x19FC7A9D)) ^ 0xEB4F874A);
  sub_193C79D14(v2 - 120);
  *(_QWORD *)(v2 - 112) = v5;
  *(_DWORD *)(v2 - 116) = v1 - 694 - 1224239923 * ((v2 + 2090759470 - 2 * ((v2 - 120) & 0x7C9E75A6)) ^ 0x8E2D8871);
  sub_193C79D14(v2 - 120);
  *(_QWORD *)(v2 - 104) = v5;
  *(_DWORD *)(v2 - 112) = v1 + 831981571 * ((((v2 - 120) | 0xADB0904B) - ((v2 - 120) & 0xADB0904B)) ^ 0x3411406F) - 1199;
  *(_QWORD *)(v2 - 120) = v0;
  return sub_193C6EA8C(v2 - 120);
}

void sub_193CB40A4(uint64_t a1)
{
  int v1;
  int v2;
  _BYTE v3[4];
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8) + 944348131 * ((((2 * a1) | 0x23956760) - a1 + 1848986704) ^ 0x32D317FE);
  v2 = *(_DWORD *)(*(_QWORD *)a1 - 0x2D6CAD6C03423C37);
  v5 = *(_QWORD *)a1;
  v4 = v1 - 1224239923 * (v3 ^ 0xF2B3FDD7) - 521;
  sub_193C79D14((uint64_t)v3);
  __asm { BR              X9 }
}

uint64_t sub_193CB41B4@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * ((45 * (((v3 - v2) & 0x1F ^ 0x1C) == ((v1 - 510) ^ 0x75B) - 1025)) ^ (v1 - 510)))
                            - (((v1 - 1335) | 0x502u) ^ 0x52FLL)))();
}

uint64_t sub_193CB4230@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((3435
                                * (((v2 + 789156838) & 0xD0F66BFB ^ 0x984F5123)
                                 + (v3 ^ 0x77FBAFBF)
                                 - 273351296
                                 + (v1 & 0xEFF75F7E) < 0x7FFFFFFF)) ^ v2)))();
}

uint64_t sub_193CB42B4@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)(*(_QWORD *)(v6 - 0x2D6CAD6C03423C33) + 4 * (v1 - 632269358 + v2)) = *(_DWORD *)(*(_QWORD *)(v6 - 0x2D6CAD6C03423C33)
                                                                                                + 4
                                                                                                * (v4 + v2 + 413));
  return (*(uint64_t (**)(void))(a1 + 8 * ((2018 * (v4 + v2 + 412 >= 25 * (v5 ^ 0x3ACu) + v3)) ^ v5)))();
}

void sub_193CB4320()
{
  JUMPOUT(0x193CB42E8);
}

uint64_t sub_193CB4328@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((3233
                                * ((int)((v3 ^ 0x5EFE5EDD) - 509626380 + (v1 & 0xBDFCBDBA) - 1084102354) > (int)((v2 - 1965215145) & 0x7522CDBD ^ 0xFFFFFAC7))) ^ v2)))();
}

uint64_t sub_193CB43CC@<X0>(int a1@<W2>, int a2@<W4>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  int v5;
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;

  v10 = *(_DWORD *)(*(_QWORD *)(v9 - 0x2D6CAD6C03423C33) + 4 * (v7 + v8)) ^ v5;
  *(_DWORD *)(*(_QWORD *)(v9 - 0x2D6CAD6C03423C33) + 4 * (v3 + v4)) = ((v10 >> (32 - v6)) | a2 ^ v5)
                                                                        + v5
                                                                        - ((2 * ((v10 >> (32 - v6)) | a2 ^ v5)) & 0x593C8914);
  return (*(uint64_t (**)(void))(a3 + 8 * ((27 * (v7 + v8 > 0)) ^ ((a1 - 1303) | 0x502))))();
}

void sub_193CB4478()
{
  JUMPOUT(0x193CB4418);
}

uint64_t sub_193CB4484@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((4058
                                * (v1 + 1107362577 < v2 + ((v3 - 964682172) & 0x397FDAF7) + ((v3 - 679) | 0x48u) + 364)) ^ v3)))();
}

uint64_t sub_193CB44EC@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;

  *(_DWORD *)(*(_QWORD *)(v4 - 0x2D6CAD6C03423C33) + 4 * (v2 + v1 + 1367)) = 748569738;
  return (*(uint64_t (**)(void))(a1 + 8 * ((1785 * ((v2 + v1 + 1366) > 0x7FFFFFFE)) ^ (v3 - 1034))))();
}

uint64_t sub_193CB4550@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  _QWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;

  v8 = v2 + v7;
  *(_DWORD *)(*v4 + 4 * (v8 + 1367)) = v3;
  return (*(uint64_t (**)(void))(a2 + 8 * (((v8 + 1366 > v6) * a1) ^ v5)))();
}

void sub_193CB4588()
{
  int v0;
  int v1;
  int v2;
  int v3;
  _DWORD *v4;
  int v5;

  v5 = -137890476 - v0;
  if (*v4 + 588713441 < 0)
    v5 = v1;
  *v4 += v2 + ((v3 + 861) | 0x108) + v5;
}

void jmoibFLZ(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  int v4;

  if (a2)
    v3 = a3 == 0;
  else
    v3 = 1;
  v4 = !v3;
  __asm { BR              X9 }
}

uint64_t sub_193CB4750(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int a15, int a16)
{
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;

  *a2 = 0;
  *a3 = 0;
  a15 = -1501685844
      - 1224239923
      * ((-68329684 - (&a15 ^ 0xB1AF625F | 0xFBED5F2C) + (&a15 ^ 0xB1AF625F | 0x412A0D3)) ^ 0x470E3F5B);
  v19 = sub_193CBCC34(&a15);
  return (*(uint64_t (**)(uint64_t))(v17 + 8 * ((1204 * (a16 == ((v16 + 560) ^ 0x2D0))) ^ v18)))(v19);
}

uint64_t sub_193CB47F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, unsigned int a16, int a17)
{
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  a16 = (v18 - 370) ^ (831981571
                     * ((2 * (&a15 & 0x107C4020) - &a15 - 276578337) ^ 0x76226FFB));
  a15 = &STACK[0x667A5DFFEA838F60];
  sub_193C8C02C((uint64_t)&a15);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v17
                                                                                                  + 8 * (((a17 != -1557818287) * ((v18 + 219276045) ^ 0xD11E483 ^ (29 * (v18 ^ 0x2DD)))) | v18)))(v19, v20, v21, v22, v23, v24, v25);
}

uint64_t sub_193CB48C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int a15, int a16, uint64_t a17, int a18)
{
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v24 = ((&a15 - 881139323 - 2 * ((unint64_t)&a15 & 0xCB7AE185)) ^ 0x39C91C52) * v23;
  a18 = (v21 + 196) ^ v24;
  a15 = ((2 * v18) & 0xF5CDDF3E) - v24 + ((((v21 - 310399354) & 0x8052F7) - 85529432) ^ v18) + 2000501499;
  a17 = a13;
  v25 = (*(uint64_t (**)(unsigned int *))(v22 + 8 * (v21 ^ 0x19C)))(&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20 + 8 * ((1799 * (a16 == v19)) ^ v21)) - 4))(v25);
}

uint64_t sub_193CB49A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16, unint64_t *a17, unsigned int a18, int a19, unsigned int a20)
{
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;

  v23 = 944348131 * ((&a15 & 0xCEA48844 | ~(&a15 | 0xCEA48844)) ^ 0x9242D3F5);
  a20 = v23 + v22 + 368399800;
  a18 = 1779005819 - v23;
  a15 = a13;
  a16 = 1903074945 - v23;
  a17 = &STACK[0x59F8E2836308BDA9];
  v24 = sub_193CBD2A0((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * (((a19 == v20) * ((v22 ^ 0x38E) - 754)) ^ v22))
                                          - 113 * (v22 ^ 0x171u)
                                          + 900))(v24);
}

uint64_t sub_193CB4A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, unint64_t *a16, unint64_t *a17, unint64_t *a18)
{
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;

  a17 = &STACK[0x11E90ECB0B9030C9];
  a18 = a11;
  LODWORD(a15) = v20
               - 2078219279
               * (((&a15 | 0x1A280CD4) - &a15 + (&a15 & 0xE5D7F328)) ^ 0xC0D29AA0)
               - 231789694;
  a16 = &STACK[0x1EF0C0D0C0C764FE];
  sub_193CBC6B8((uint64_t)&a15);
  LODWORD(a17) = v20
               - ((939049812 - (&a15 | 0x37F8C354) + (&a15 | 0xC8073CAB)) ^ 0x6B1E98E5)
               * v18
               - 53;
  a15 = &STACK[0xCB258A928C46661];
  a16 = a11;
  ((void (*)(unint64_t **))*(&off_1E31525C0 + (v20 ^ 0x3BC)))(&a15);
  a15 = a11;
  LODWORD(a16) = v20
               - 241568881 * ((&a15 + 1039693903 - 2 * (&a15 & 0x3DF8784F)) ^ 0xEBE97C0D)
               - 451;
  v21 = sub_193C9B7D8((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19 + 8
                                                            * ((1059 * (HIDWORD(a16) == (v20 ^ 0xA32597D9))) ^ v20))
                                          - 4))(v21);
}

uint64_t sub_193CB4C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  unsigned int v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * (((a11 == v11) * (v13 + 2035)) ^ v13)) - (v13 + 959) + 1859))();
}

uint64_t sub_193CB4C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  uint64_t v15;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v15 + 8 * (((a14 != 0) * ((v14 - 1074) ^ 0x3D1)) ^ v14))
                                         - (v14 ^ 0x5A9u)
                                         + 742))(0);
}

uint64_t sub_193CB4C80@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v6;
  uint64_t v7;

  return (*(uint64_t (**)(void))(v7
                              + 8
                              * (int)((((((a1 - 622) | 0x308) ^ 0xFFFFFDFB) + ((a1 - 750) | 0x388)) * (a6 == v6)) ^ a1)))();
}

uint64_t sub_193CB4CC0()
{
  int v0;
  int *v1;
  int v2;
  void (*v3)(int *);
  int v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  *v1 = (v0 - 527) ^ (v2 + 215) ^ v7;
  v4 = 253 * ((v0 - 527) ^ 0x17A);
  v10 = v6;
  v9 = (v0 + 89) ^ (69008221 * ((&v9 - 1791554738 - 2 * ((unint64_t)&v9 & 0x95370B4E)) ^ 0x46955944));
  v3(&v9);
  v9 = (v4 + 234) ^ (69008221 * ((&v9 & 0x2755208B | ~(&v9 | 0x2755208B)) ^ 0xB088D7E));
  v10 = v8;
  v3(&v9);
  return v2 ^ 0xA3259451;
}

void sub_193CB5200(uint64_t a1)
{
  int v1;
  signed int v2;

  v1 = ((*(_DWORD *)(a1 + 16) ^ (944348131 * ((-2 - ((a1 | 0x128ABCF6) + (~(_DWORD)a1 | 0xED754309))) ^ 0xE6CE747)))
      - 547425985) & 0x20A10FF9;
  v2 = (v1 ^ 0xA3170899) + *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2D6CAD6C03423C37);
  if (v2 < 0)
    v2 = -v2;
  __asm { BR              X10 }
}

uint64_t sub_193CB534C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6, unsigned int a7)
{
  int v7;
  _QWORD *v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((*(_DWORD *)(*v8 + 4 * a7) != v7) * (a6 - 944)) ^ a6))
                            - ((a6 + a4) & a5)
                            + 1392))();
}

void sub_193CB5380()
{
  JUMPOUT(0x193CB5308);
}

_DWORD *sub_193CB5388(_DWORD *result)
{
  *result = 1960555129;
  return result;
}

void PjPfaWZz()
{
  unsigned int v0;
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  v0 = -1501685844 - 1224239923 * (((&v0 | 0x18CFFF2D) - (&v0 & 0x18CFFF2D)) ^ 0xEA7C02FA);
  sub_193CBCC34(&v0);
  __asm { BR              X8 }
}

uint64_t sub_193CB54E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  a13 = &STACK[0x667A5DFFEA838F58];
  a14 = (831981571 * ((((2 * &a13) | 0x8A84ED08) - &a13 + 985500028) ^ 0x5CE3A6A0)) ^ 0x15E;
  sub_193C8C02C((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17
                                                                                          + 8
                                                                                          * ((807 * (a15 == v15)) ^ v16))
                                                                              - 4))(v18, v19, v20, v21, v22);
}

uint64_t sub_193CB556C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14, uint64_t a15, int a16)
{
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;

  v21 = ((2 * (&a13 & 0x731091C8) - &a13 + 217017904) ^ 0xFE5C93E7) * v20;
  a15 = a12;
  a16 = v21 ^ 0x23D;
  a13 = (v16 ^ 0xFE67BA9B) - v21 + ((2 * v16) & 0xFCCF7536) + 1941729279;
  v22 = (*(uint64_t (**)(unsigned int *))(v18 + 1832))(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19 + 8 * ((1709 * (a14 == v17)) ^ 0x307u)) - 12))(v22);
}

uint64_t sub_193CB5644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, unint64_t *a15, unsigned int a16, int a17, unsigned int a18)
{
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v22 = 944348131 * (&a13 ^ 0xA319A44E);
  a14 = -1158338523 - v22;
  a13 = a12;
  a15 = &STACK[0x59F8E2836308BDA1];
  a16 = 1779005819 - v22;
  a18 = v22 + v20 + 368399402;
  v23 = sub_193CBD2A0((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * ((1204 * (a17 == v18)) ^ v20)) - v19 + 427))(v23);
}

uint64_t sub_193CB56E8()
{
  void (*v0)(unint64_t **);
  unsigned int v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unint64_t *v9;
  int v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  unsigned int v14;

  v6 = (v4 - 809512784) & 0x5FF;
  v14 = v4
      - (((&v12 | 0xA582D8B3) - &v12 + (&v12 & 0x5A7D2748)) ^ 0x69B7CFD) * v5
      + 76;
  v12 = &STACK[0xCB258A928C465B9];
  v13 = v9;
  (*(void (**)(unint64_t **))(v3 + 8 * (v4 ^ 0x333u)))(&v12);
  v12 = v9;
  LODWORD(v13) = v4 - 241568881 * (&v12 ^ 0xD6110442) - 322;
  sub_193C9B7D8((uint64_t)&v12);
  if (HIDWORD(v13) == v1 + v6 - 439)
    v7 = v10;
  else
    v7 = HIDWORD(v13);
  v13 = v9;
  LODWORD(v12) = (v4 + 218) ^ (((&v12 & 0x4085F34F | ~(&v12 | 0x4085F34F)) ^ 0x6CD85EBA) * v2);
  v0(&v12);
  LODWORD(v12) = (v6 + 554) ^ (((349256907 - (&v12 | 0x14D13CCB) + (&v12 | 0xEB2EC334)) ^ 0x388C913E)
                             * v2);
  v13 = v11;
  v0(&v12);
  return v7 ^ v1;
}

uint64_t sub_193CB5894(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)&unk_1E314D18C
                                        + 8 * ((45 * (*(_DWORD *)(a2 + 4) == 642350282)) ^ 0x252u)
                                        - 12)
                            - 8))();
}

uint64_t sub_193CB58D4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 88) = (((**(_BYTE **)(a2 + 8) != 0) | (2 * (**(_BYTE **)(a2 + 8) != 0))) ^ 0x75) - 4;
  return 0;
}

uint64_t sub_193CB5904()
{
  return 4294925278;
}

void sub_193CB590C(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 ^ (268847287 * (((a1 | 0xE34F1B4D) - (a1 & 0xE34F1B4D)) ^ 0x1CE50A65));
  __asm { BR              X10 }
}

uint64_t sub_193CB59C4(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((*(_DWORD *)(*(_QWORD *)(a1 + 8) + v3) == (((v4 - 1867) | 0x41) ^ (v2 + 335)))
                                          * (((v4 - 1059) | 0x24) - 911)) ^ v4))
                            - 8))();
}

uint64_t sub_193CB5A10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  _DWORD *v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v6 = v2
     + 831981571
     * (((&v5 | 0x7093CAF4) - &v5 + (&v5 & 0x8F6C3508)) ^ 0xE9321AD0)
     - 27;
  v7 = v1;
  v5 = a1;
  result = sub_193C6EA8C((uint64_t)&v5);
  *v3 = -1177426882 - *v3;
  return result;
}

void Y2Zxt()
{
  _DWORD v0[10];
  uint64_t v1;

  v1 = *MEMORY[0x1E0C80C00];
  v0[0] = -1501685844 - 1224239923 * ((v0 & 0xEEACB3BA | ~(v0 | 0xEEACB3BA)) ^ 0xE3E0B192);
  sub_193CBCC34(v0);
  __asm { BR              X8 }
}

uint64_t sub_193CB5C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  a13 = &STACK[0x667A5DFFEA838F58];
  a14 = (831981571 * ((((2 * &a13) | 0x4CC6C9A4) - &a13 + 1503435566) ^ 0x3FC2B4F6)) ^ 0x15E;
  sub_193C8C02C((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16
                                                                                          + 8
                                                                                          * ((622 * (a15 == -1557818287)) ^ v15))
                                                                              - 12))(v17, v18, v19, v20, v21);
}

uint64_t sub_193CB5D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;

  v23 = ((&a13 + 1740522351 - 2 * (&a13 & 0x67BE436F)) ^ 0x950DBEB8) * v19;
  LODWORD(a15) = (v22 - 1182) ^ v23;
  a14 = a12;
  LODWORD(a13) = (v18 ^ 0xFE25EFBB) + ((2 * v18) & 0xFC4BDF76) - v23 + 1946041055;
  ((void (*)(uint64_t *))*(&off_1E31525C0 + (int)(v22 - 1526)))(&a13);
  v24 = 69008221 * ((&a13 & 0xD56BD1C1 | ~(&a13 | 0xD56BD1C1)) ^ 0xF9367C34);
  a15 = a12;
  a13 = v16;
  HIDWORD(a14) = v24 + v22 - 998;
  a16 = ((v17 ^ 0x766FFF3E) - 309224704 + ((v17 << ((v22 ^ 0x29) + 15)) & 0xECDFFE7C)) ^ v24;
  v25 = ((uint64_t (*)(uint64_t *))((char *)*(&off_1E31525C0 + (v22 & 0x1BE)) - 4))(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * ((494 * ((_DWORD)a14 == v20)) ^ v22)) - 4))(v25);
}

uint64_t sub_193CB5E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, unint64_t *a15, unsigned int a16, int a17, unsigned int a18)
{
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;

  v21 = 944348131 * ((-1909643635 - (&a13 | 0x8E2D268D) + (&a13 | 0x71D2D972)) ^ 0xD2CB7D3C);
  a14 = -558858440 - v21;
  a15 = &STACK[0x59F8E2836308BDA9];
  a18 = v21 + v19 + 368399935;
  a16 = 1779005819 - v21;
  a13 = a12;
  v22 = sub_193CBD2A0((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20
                                                      + 8
                                                      * (((((v19 - 23) ^ (a17 == v18)) & 1)
                                                        * (v19 - 122)) ^ (v19 + 1457)))
                                          - 4))(v22);
}

uint64_t sub_193CB5F78()
{
  void (*v0)(unint64_t **);
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  int v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unsigned int v12;

  v12 = v1 - ((&v10 & 0xDFF419A5 | ~(&v10 | 0xDFF419A5)) ^ 0x83124214) * v2 - 904;
  v10 = &STACK[0xCB258A928C465B1];
  v11 = v8;
  ((void (*)(unint64_t **))*(&off_1E31525C0 + v1 - 1703))(&v10);
  v10 = v8;
  LODWORD(v11) = v1
               - 241568881 * ((((2 * &v10) | 0x3A2324D2) - &v10 + 1659792791) ^ 0x4B00962B)
               - 1302;
  sub_193C9B7D8((uint64_t)&v10);
  if (HIDWORD(v11) == v4 + (v1 ^ 0x629) - 242)
    v5 = v7;
  else
    v5 = HIDWORD(v11);
  LODWORD(v10) = (v1 - 762) ^ ((((&v10 ^ 0x5805001 | 0x1A7589FE)
                               + (&v10 ^ 0xA0581FC | 0xE58A7601)) ^ 0xDC2783F6)
                             * v3);
  v11 = v8;
  v0(&v10);
  LODWORD(v10) = ((v1 ^ 0x629) + 751) ^ (((((&v10 | 0xB021BE6E) ^ 0xFFFFFFFE)
                                         - (~&v10 | 0x4FDE4191)) ^ 0x9C7C139B)
                                       * v3);
  v11 = v9;
  v0(&v10);
  return v5 ^ v4;
}

void lCUad()
{
  _DWORD v0[10];
  uint64_t v1;

  v1 = *MEMORY[0x1E0C80C00];
  v0[0] = -1501685844 - 1224239923 * (v0 ^ 0xF2B3FDD7);
  sub_193CBCC34(v0);
  __asm { BR              X8 }
}

uint64_t sub_193CB61F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  a13 = &STACK[0x667A5DFFEA838F50];
  a14 = (831981571 * ((&a13 & 0x2F2785F7 | ~(&a13 | 0x2F2785F7)) ^ 0x4979AA2C)) ^ 0x15E;
  sub_193C8C02C((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17
                                                                                          + 8
                                                                                          * ((1501 * (a15 == v15)) ^ v16))
                                                                              - 8))(v18, v19, v20, v21, v22);
}

uint64_t sub_193CB627C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;

  v23 = 2 * &a13;
  v24 = (((v23 | 0x6CE003BC) - &a13 - 913310174) ^ 0xC4C3FC09) * v20;
  LODWORD(a15) = v24 ^ 0x23D;
  a14 = a11;
  LODWORD(a13) = (v18 ^ 0x772C7BFF) - v24 + ((2 * v18) & 0xEE58F7FE) - 84431205;
  (*(void (**)(uint64_t *))(v21 + 1832))(&a13);
  v25 = 69008221 * (((v23 | 0xE0D83988) - &a13 + 261350204) ^ 0x23CE4ECE);
  a16 = v25 ^ ((v17 ^ 0xFDF7DABE) + 1711914880 + ((2 * v17) & 0xFBEFB57C));
  a13 = v16;
  HIDWORD(a14) = v25 + 757;
  a15 = a11;
  v26 = ((uint64_t (*)(uint64_t *))(*(_QWORD *)(v21 + 1232) - 4))(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v22 + 8 * ((1440 * ((_DWORD)a14 == v19)) ^ 0x2B9u)) - 12))(v26);
}

uint64_t sub_193CB63DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, unint64_t *a15, unsigned int a16, int a17, unsigned int a18)
{
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;

  v21 = 944348131 * (((~&a13 & 0xB337F558) - (~&a13 | 0xB337F559)) ^ 0x102E5117);
  a18 = v21 + v20 + 368399480;
  a16 = 1779005820 - v21;
  a13 = a11;
  a15 = &STACK[0x59F8E2836308BDA1];
  a14 = 1307210854 - v21;
  v22 = sub_193CBD2A0((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19
                                                      + 8
                                                      * ((v20 - 8) | (8
                                                                    * (a17 != ((v20 + 2011593028) & 0x881986BB ^ (v18 + 663))))))
                                          - ((v20 + 1539205310) & 0xA44197BA ^ 0x33ELL)))(v22);
}

uint64_t sub_193CB64DC()
{
  void (*v0)(unint64_t **);
  int v1;
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unint64_t *v7;
  unint64_t *v8;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  unsigned int v12;

  v12 = v1 - (((&v10 | 0x402CF5D1) + (~&v10 | 0xBFD30A2E)) ^ 0xE335519E) * v2 + 154;
  v10 = &STACK[0xCB258A928C465C1];
  v11 = v7;
  (*(void (**)(unint64_t **))(v4 + 8 * (v1 - 645)))(&v10);
  v10 = v7;
  LODWORD(v11) = v1
               - 241568881 * ((((2 * &v10) | 0x2CE604E4) - &v10 - 376636018) ^ 0xC0620630)
               - 244;
  sub_193C9B7D8((uint64_t)&v10);
  if (HIDWORD(v11) == ((v1 + 121) ^ (v3 + 786)))
    v5 = v9;
  else
    v5 = HIDWORD(v11);
  LODWORD(v10) = (v1 + 296) ^ (69008221
                             * (((&v10 | 0x5FFC03B3) - (&v10 & 0x5FFC03B3)) ^ 0x8C5E51B9));
  v11 = v7;
  v0(&v10);
  v11 = v8;
  LODWORD(v10) = (v1 + 296) ^ (69008221 * (&v10 ^ 0xD3A2520A));
  v0(&v10);
  return v5 ^ v3;
}

void sub_193CB666C(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;

  v1 = 460628867 * (((a1 | 0xB9F12765) - (_DWORD)a1 + (a1 & 0x460ED89A)) ^ 0xF567A518);
  v2 = *a1 - v1;
  LOBYTE(v1) = (a1[2] ^ v1) - 991295102 < 0xFFFFFEFF;
  __asm { BR              X9 }
}

uint64_t sub_193CB6714@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * ((((v1 ^ 0x211) + ((v1 - 1618279185) & 0x6074FBEB) - 745) * (v2 != 991294845)) ^ v1))
                            - 12))();
}

uint64_t sub_193CB677C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 8 * ((v2 - 891573769) & 0x352456DB)) - 8))(a1, 1497138809);
}

uint64_t sub_193CB6838@<X0>(int a1@<W3>, int a2@<W4>, int a3@<W5>, int a4@<W6>, int a5@<W7>, uint64_t a6@<X8>)
{
  int v6;
  _QWORD *v7;
  int v8;
  int v9;
  char v10;
  int v11;
  int v12;
  int v13;

  v13 = (v12 + a1) & a2;
  *(_DWORD *)(*v7 + 4 * ((v13 ^ a3) + v6)) = v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(a6
                                        + 8
                                        * (((((v9 == 0) ^ (3 * (v13 ^ v10))) & 1)
                                          * (((v13 ^ a4) * a5) ^ v11)) ^ v13))
                            - 8))();
}

void sub_193CB68A0()
{
  JUMPOUT(0x193CB67F0);
}

uint64_t sub_193CB68A8(uint64_t result)
{
  *(_DWORD *)(result + 4) = 1568236805;
  return result;
}

void sub_193CB6A9C(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 - 69008221 * (((_DWORD)a1 - 2 * (a1 & 0x90A0864D) - 1868528051) ^ 0x4302D447);
  __asm { BR              X13 }
}

uint64_t sub_193CB6B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  _BOOL4 v9;

  v7 = (v6 - 1587123459);
  v9 = v3 + 1149073630 > ((v5 - 38) ^ 0xA) + 560359925 || v3 + 1149073630 < (int)v7;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4
                                                                                         + 8
                                                                                         * ((2537 * v9) ^ (v5 - 38)))
                                                                             - 4))(0x55F9EC3874D1DF3FLL, 3789433465, a3, (a3 + 985505836), v7);
}

uint64_t sub_193CB6C98@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, _QWORD *a5@<X6>, unsigned int a6@<W7>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unint64_t v20;
  _BOOL4 v21;

  v19 = (v15 - 46879174) & 0x2CB51BF;
  v20 = a1
      - 0x55F9EC3874D1E58FLL
      + (*(_DWORD *)(v8 + 4 * v10) ^ v11)
      + a6
      * (unint64_t)(((v19 - 2) | 8) ^ (v11 + 253) ^ *(_DWORD *)(*a5 + 4 * (v14 + (((v19 - 131) | v18) ^ a2))))
      + 1616;
  *(_DWORD *)(v8 + 4 * v10) = v20 + v11 - ((2 * v20) & 0x593C8914);
  if (a3 > v17 != v13 < v9)
    v21 = a3 > v17;
  else
    v21 = v13 < a4;
  return ((uint64_t (*)(unint64_t))(*(_QWORD *)(v7 + 8 * (v19 ^ (v21 * v16))) - 4))((HIDWORD(v20) ^ a7) + v12 + ((2 * HIDWORD(v20)) & 0x1EFEFFE7ELL));
}

void sub_193CB6D88()
{
  JUMPOUT(0x193CB6C44);
}

uint64_t sub_193CB6D94(uint64_t a1)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8 * (((((v1 - 2140) | 0x484) - 1431) * (a1 == 0x55F9EC3874D1DF3FLL)) ^ v1))
                            - ((v1 - 2309) | 0x620u)
                            + 1695))();
}

uint64_t sub_193CB6DE8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  _BOOL4 v8;
  int v9;
  _BOOL4 v10;

  v7 = *v6 + 1321141968;
  v8 = v4 + 1321141968 < a4 + (a4 ^ 0x2BA7F271) - 654;
  v9 = v8 ^ (v7 < 732428527);
  v10 = v4 + 1321141968 > v7;
  if (!v9)
    v8 = v10;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((4 * v8) | (16 * v8)) ^ a4)) - 12))();
}

void sub_193CB6E5C()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

uint64_t sub_193CB6E80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  _BOOL4 v9;

  v6 = (a3 - 948) | 0x450;
  v7 = v6 - 567 + v3 + 1985002271;
  v9 = v7 > 1396289878 || v7 < (int)((v6 ^ 0xD339B707) + v5);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 + 8 * ((224 * v9) ^ v6)) - 8))(a1, 1396289878, 1041, a2, 2574379670, 1720588279, 1701, 808);
}

uint64_t sub_193CB6F40(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;

  v17 = (v15 - 1608) | a3;
  v18 = a1 - 0x55F9EC3874D1E58FLL + (*(_DWORD *)(v8 + 4 * v10) ^ v11) + ((v17 + a5) & a6 ^ a7) * a8;
  *(_DWORD *)(v8 + 4 * v10) = v18 + v11 - ((2 * v18) & 0x593C8914);
  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * ((((HIDWORD(v18) ^ v12) + v13 + ((2 * HIDWORD(v18)) & 0x1EFA3BE7ELL) != v16)
                                          * v14) ^ v17))
                            - 4))();
}

void jEGq2i0LF()
{
  _DWORD v0[10];
  uint64_t v1;

  v1 = *MEMORY[0x1E0C80C00];
  v0[0] = -1501685844 - 1224239923 * (((v0 | 0x3290BA9F) + (~v0 | 0xCD6F4560)) ^ 0xC0234749);
  sub_193CBCC34(v0);
  __asm { BR              X8 }
}

uint64_t sub_193CB70A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  a14 = (831981571 * ((&a13 - 451918858 - 2 * (&a13 & 0xE51043F6)) ^ 0x7CB193D2)) ^ 0x15E;
  a13 = &STACK[0x667A5DFFEA838F48];
  sub_193C8C02C((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16
                                                                                + 8
                                                                                * ((1415 * (a15 == -1557818287)) ^ v15)))(v17, v18, v19, v20, v21);
}

uint64_t sub_193CB7134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15, int a16)
{
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;

  v22 = 1224239923 * (v21 ^ 0xF2B3FDD7);
  LODWORD(a15) = v22 ^ 0x23D;
  LODWORD(a13) = (v19 ^ 0xFE65AFFB) + ((2 * v19) & 0xFCCB5FF6) - v22 + 1941863071;
  a14 = a10;
  sub_193CB9200(&a13);
  v23 = 831981571 * ((((2 * v21) | 0xFD928697A762DC90) - v21 + 0x136BCB42C4E91B8) ^ 0x2F39020B4A10BE6CLL);
  a15 = a10;
  a13 = v23 ^ ((v18 ^ 0xFF3FFCF37F5EF9FELL) + 0x4FFFEB6FBFB7D770 + ((2 * v18) & 0xFE7FF9E6FEBDF3FCLL));
  LODWORD(a14) = v23 ^ 0x78;
  sub_193CB8F00(&a13);
  a13 = v17;
  a15 = a10;
  a16 = 157 - 1543737703 * ((((v21 | 0xAE3E9404) ^ 0xFFFFFFFE) - (~(_DWORD)v21 | 0x51C16BFB)) ^ 0x2F353B87);
  sub_193C8C160((uint64_t)&a13);
  v24 = 1224239923 * ((v21 - 2048805903 - 2 * (v21 & 0x85E1B3F1)) ^ 0x77524E26);
  a14 = a10;
  LODWORD(a15) = v24 ^ 0x23D;
  LODWORD(a13) = (v16 ^ 0x7A25FADA) + ((2 * v16) & 0xF44BF5B4) - v24 - 134336576;
  v25 = sub_193CB9200(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20 + 8 * ((4 * (HIDWORD(a13) == -1557818287)) ^ 0x7F0u)) - 8))(v25);
}

uint64_t sub_193CB7394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, unint64_t *a15, unsigned int a16, int a17, unsigned int a18)
{
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;

  v21 = 944348131 * ((&a13 & 0x2DB252B | ~(&a13 | 0x2DB252B)) ^ 0x5E3D7E9A);
  a14 = -848911311 - v21;
  a16 = 1779005819 - v21;
  a18 = v21 + v20 + 368398145;
  a13 = a10;
  a15 = &STACK[0x59F8E2836308BDB1];
  v22 = sub_193CBD2A0((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19 + 8 * (((a17 == v18) * (v20 + 2024)) ^ v20)) - 8))(v22);
}

uint64_t sub_193CB7454()
{
  void (*v0)(unint64_t **);
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unint64_t *v8;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unsigned int v13;

  v5 = (v4 - 2046979077) & 0x4FE;
  v11 = &STACK[0xCB258A928C465B9];
  v12 = v10;
  v13 = v4
      - ((-439246502 - (&v11 | 0xE5D1A15A) + (&v11 | 0x1A2E5EA5)) ^ 0xB937FAEB) * v1
      - 1181;
  ((void (*)(unint64_t **))*(&off_1E31525C0 + v4 - 1980))(&v11);
  v11 = v10;
  LODWORD(v12) = v4
               - 241568881 * ((2 * (&v11 & 0x6FE21900) - &v11 - 1877088514) ^ 0x460CE2BC)
               - 1579;
  sub_193C9B7D8((uint64_t)&v11);
  if (HIDWORD(v12) == (v5 ^ (v3 + 106)))
    v6 = v9;
  else
    v6 = HIDWORD(v12);
  v12 = v10;
  LODWORD(v11) = (v4 - 1039) ^ ((&v11 ^ 0xD3A2520A) * v2);
  v0(&v11);
  v12 = v8;
  LODWORD(v11) = (v5 + 759) ^ ((((&v11 | 0x47036ACD) - (&v11 & 0x47036ACD)) ^ 0x94A138C7)
                             * v2);
  v0(&v11);
  return v6 ^ 0xA3259451;
}

void df35957c4e0()
{
  _DWORD v0[10];
  uint64_t v1;

  v1 = *MEMORY[0x1E0C80C00];
  v0[0] = -1501685844 - 1224239923 * (((v0 | 0xAFEE53DD) - (v0 & 0xAFEE53DD)) ^ 0x5D5DAE0A);
  sub_193CBCC34(v0);
  __asm { BR              X8 }
}

uint64_t sub_193CB76D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  a13 = &STACK[0x667A5DFFEA838F48];
  a14 = (831981571 * ((&a13 & 0x5961D94C | ~(&a13 | 0x5961D94C)) ^ 0x3F3FF697)) ^ 0x15E;
  sub_193C8C02C((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16
                                                                                + 8 * ((3863 * (a15 == v15)) ^ 0x682u)))(v17, v18, v19, v20, v21);
}

uint64_t sub_193CB7770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14, uint64_t a15, int a16)
{
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;

  v22 = (((&a13 | 0x8CE20325) - &a13 + (&a13 & 0x731DFCD8)) ^ 0x7E51FEF2)
      * v21;
  a15 = a10;
  a13 = (v16 ^ 0x77B76EBE) + ((2 * v16) & 0xEF6EDD7C) - v22 - 93537316;
  a16 = v22 ^ 0x23D;
  v23 = (*(uint64_t (**)(unsigned int *))(v20 + 1832))(&a13);
  return (*(uint64_t (**)(uint64_t))(v18 + 8 * ((379 * (a14 == v17)) ^ v19)))(v23);
}

uint64_t sub_193CB782C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, unint64_t *a15, unsigned int a16, int a17, unsigned int a18)
{
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;

  v21 = 944348131 * ((2 * (&a13 & 0xF2F6850) - &a13 + 1892718509) ^ 0xD3C933E3);
  a15 = &STACK[0x59F8E2836308BDB1];
  a13 = a10;
  a14 = -1810297541 - v21;
  a18 = v21 + v20 + 368398952;
  a16 = 1779005819 - v21;
  v22 = sub_193CBD2A0((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19
                                                      + 8
                                                      * ((3104 * (a17 == v18 + ((v20 - 1225) | 0x682) - 1666)) ^ v20))
                                          - 8))(v22);
}

uint64_t sub_193CB7904@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6, uint64_t a7, unsigned int a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  a8 = v11 - ((&a6 & 0x79402D5B | ~(&a6 | 0x79402D5B)) ^ 0x25A676EA) * v8 - 374;
  a6 = &STACK[0xCB258A928C46669];
  a7 = a1;
  (*(void (**)(unint64_t **))(v10 + 8 * (v11 - 1173)))(&a6);
  LODWORD(a7) = v11
              - 241568881
              * (((&a6 | 0xF3333FC9) - &a6 + (&a6 & 0xCCCC030)) ^ 0x25223B8B)
              - 772;
  a6 = a5;
  v12 = sub_193C9B7D8((uint64_t)&a6);
  return (*(uint64_t (**)(uint64_t))(v9 + 8 * (int)((461 * (a5 != 0)) ^ (v11 + 366113534) & 0xEA2D8EBA)))(v12);
}

uint64_t sub_193CB7A24@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t (*v8)(unsigned int *);
  int v9;
  uint64_t v10;

  a7 = a1;
  a6 = (v9 - 1480141296) ^ (69008221
                          * ((&a6 & 0xFFED06DD | ~(&a6 | 0xFFED06DD)) ^ 0xD3B0AB28));
  v10 = v8(&a6);
  return (*(uint64_t (**)(uint64_t))(v7
                                            + 8
                                            * (((a3 == 0) * (((v9 - 1480141521) | 0x10) ^ 0x2E8)) ^ (v9 - 1480141545))))(v10);
}

uint64_t sub_193CB7AB8@<X0>(uint64_t a1@<X8>)
{
  int v1;
  unsigned int v2;
  void (*v3)(unsigned int *);
  int v4;
  unsigned int v6;
  uint64_t v7;

  v6 = (v1 + 209) ^ (69008221
                   * ((-2 - ((&v6 ^ 0x45008420 | 0x87C7B1B) + (&v6 ^ 0x8146A10 | 0xF78384E4))) ^ 0x614943C5));
  v7 = a1;
  v3(&v6);
  return v4 ^ v2;
}

void Fc3vhtJDvr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  int v6;

  if (a4)
    v5 = a5 == 0;
  else
    v5 = 1;
  v6 = v5;
  __asm { BR              X9 }
}

uint64_t sub_193CB7C30(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int a19, int a20)
{
  int v20;
  uint64_t v21;
  uint64_t v22;

  *a4 = 0;
  *a5 = 0;
  a19 = -1501685844 - 1224239923 * (&a19 ^ 0xF2B3FDD7);
  v22 = sub_193CBCC34(&a19);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * ((588 * (a20 == v20)) | 0x510u)) - 12))(v22);
}

uint64_t sub_193CB7CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t *a19, unsigned int a20,int a21,unsigned int a22)
{
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v26 = 831981571 * ((&a19 - 2078071562 - 2 * (&a19 & 0x842324F6)) ^ 0x1D82F4D2);
  a21 = v26 ^ 0x2DC;
  a22 = 1476476408 - v26;
  LODWORD(a19) = 1751760276 - v26;
  a20 = v26 ^ 0x4E459F21;
  sub_193C6C298((uint64_t)&a19);
  HIDWORD(a12) = HIDWORD(a19);
  a20 = (831981571 * ((&a19 + 315434249 - 2 * (&a19 & 0x12CD2509)) ^ 0x8B6CF52D)) ^ 0x15E;
  a19 = &STACK[0x667A5DFFEA838F78];
  sub_193C8C02C((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 + 8 * ((3549 * (a21 == -1557818287)) ^ v23)) - 12))(v27, v28, v29, v30, v31, v32, v33, v34, a9, v25, v22, a12);
}

uint64_t sub_193CB7DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned int a22)
{
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v28 = ((((2 * &a19) | 0x2EF610F2) - &a19 + 1753544583) ^ 0x65C8F5AE) * v27;
  a20 = a16;
  LODWORD(a21) = v28 ^ 0x23D;
  LODWORD(a19) = (v25 ^ 0x7EA43F9B) - v28 + ((2 * v25) & 0xFD487F36) - 209720577;
  sub_193CB9200(&a19);
  v29 = 69008221 * (((&a19 | 0x1A08536) - (&a19 & 0x1A08536)) ^ 0xD202D73C);
  a21 = a16;
  a19 = v23;
  a22 = v29 ^ ((v24 ^ 0x7409FA3E) - 268984320 + ((2 * v24) & 0xE813F47C));
  HIDWORD(a20) = v29 + 757;
  sub_193C87DBC((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 + 8 * ((1985 * ((_DWORD)a20 == v22)) ^ 0x1F7u)) - 12))(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12, a13);
}

uint64_t sub_193CB7F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned int a20,unint64_t *a21,unsigned int a22,int a23,unsigned int a24)
{
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;

  v27 = 944348131 * (&a19 ^ 0xA319A44E);
  a20 = 2047841351 - v27;
  a22 = (a13 ^ 0xEF3BF9FB) - v27 + 2 * a13 + 2060287871;
  a24 = v27 + v25 + 368399674;
  a21 = &STACK[0x59F8E2836308BDE1];
  a19 = a16;
  v28 = sub_193CBD2A0((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v26
                                                      + 8
                                                      * (((a23 == ((v25 + 947530223) & 0x8FF ^ (v24 + 2150)))
                                                        * (((v25 - 231) | 0x400) - 191)) ^ v25))
                                          - 12))(v28);
}

uint64_t sub_193CB8034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13)
{
  unsigned int v13;
  uint64_t v14;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14
                                                                                          + 8
                                                                                          * (((v13 ^ 0x905)
                                                                                            * (a13 < 0x52C2D74F)) ^ v13))
                                                                              - 8))(a1, a2, a3, a4, a5);
}

uint64_t sub_193CB80C4@<X0>(uint64_t a1@<X8>, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9, uint64_t a10, uint64_t a11, _BYTE *a12, char *a13, _BYTE *a14, _BYTE *a15, uint64_t a16)
{
  int v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char **);
  uint64_t v22;

  a13 = &a9 + a1;
  a14 = a12;
  LODWORD(a15) = v18
               - 944348131 * (((&a13 | 0x574F1A57) - (&a13 & 0x574F1A57)) ^ 0xF456BE19)
               - 1427;
  v21(&a13);
  LODWORD(a14) = v18
               - 1791
               + 3804331 * (((&a13 | 0xA2D7240) - (&a13 & 0xA2D7240)) ^ 0x74F857B6)
               + 606;
  a13 = v17;
  a15 = a12;
  a16 = v19;
  ((void (*)(char **))*(&off_1E31525C0 + ((v18 - 1791) ^ 0x1F3)))(&a13);
  LODWORD(a15) = v18
               - 1791
               - 944348131
               * (((&a13 ^ 0xDAD0EF41 | 0x49E81A93)
                 - (&a13 ^ 0xDAD0EF41)
                 + ((&a13 ^ 0xDAD0EF41) & 0xB617E568)) ^ 0x3021519C)
               + 364;
  a13 = a2;
  a14 = a12;
  v21(&a13);
  LODWORD(a14) = v18
               - 1791
               - 241568881
               * ((((&a13 | 0xCE444526) ^ 0xFFFFFFFE) - (~&a13 | 0x31BBBAD9)) ^ 0xE7AABE9B)
               - 34;
  a13 = a12;
  v22 = sub_193C9B7D8((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20
                                                      + 8
                                                      * ((2264 * (HIDWORD(a14) == v16 + v18 - 1775 - 503)) ^ (v18 - 1791)))
                                          - ((v18 - 1851) ^ 0x1AFLL)))(v22);
}

uint64_t sub_193CB8280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  int v15;
  uint64_t v16;
  int v17;

  return ((uint64_t (*)(void))(*(_QWORD *)(v16
                                        + 8 * (((a15 != ((v17 + 1877) ^ (v15 + 2304))) * ((v17 ^ 0x5C) - 427)) ^ v17))
                            - 4))();
}

uint64_t sub_193CB82B8@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;
  _BOOL4 v10;

  v10 = a8 == ((a1 - 1817) ^ (v8 + 357));
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((2 * v10) | (4 * v10)) ^ a1))
                            - ((a1 - 1801) ^ 0x1FBLL)))();
}

uint64_t sub_193CB82FC()
{
  int v0;
  unsigned int v1;
  int v2;
  uint64_t v3;
  _BOOL4 v4;

  v4 = ((uint64_t (*)(_QWORD, uint64_t))*(&off_1E31525C0 + v2 - 261))(v0 ^ v1, 1523128792) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((v4 * ((v2 + 1295) ^ (v2 + 529))) ^ v2)) - 4))();
}

uint64_t sub_193CB8350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v18 = (a15 ^ v15) - ((2 * (a15 ^ v15)) & 0xC4F2475C) + 1652106158;
  return (*(uint64_t (**)(void))(v17
                              + 8
                              * ((1136
                                * (((v18 << (((v16 + 95) & 0xFC) - 83)) & 0xFFF9396E ^ 0xC4F0014C)
                                 + (v18 ^ 0x1D85BF19)
                                 - 1080559762 != 1066701861)) ^ v16)))();
}

uint64_t sub_193CB83EC()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8 * ((59 * (v1 + v0 - 2147261623 >= ((v2 - 39602323) ^ 0xFDA3BFC9))) ^ v2))
                            - (v2 - 1324)
                            + 796))();
}

uint64_t sub_193CB845C(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (a2 ^ (1401 * ((unint64_t)(v2 - a1) > 0x1F))))
                            - (((a2 - 1937764520) | 0x7123AD41u)
                             - v3)
                            + 768))();
}

uint64_t sub_193CB84A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  char v5;
  unsigned int v6;
  char v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v8
                                                              + 8
                                                              * ((2817
                                                                * (((v6 < 0x20) ^ (v7
                                                                                                  + (a5 ^ (v5 + 16))
                                                                                                  + 9)) & 1)) ^ a5))
                                                  - 8))(a1, 0);
}

uint64_t sub_193CB84E0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v7 = (v2 + v4 + 952);
  v8 = *(_OWORD *)(v1 + v7 - 15);
  v9 = *(_OWORD *)(v1 + v7 - 31);
  v10 = a1 + v7;
  *(_OWORD *)(v10 - 15) = v8;
  *(_OWORD *)(v10 - 31) = v9;
  return (*(uint64_t (**)(void))(v6 + 8 * ((3743 * (((v5 + 36) | 0x90) - 440 == (v3 & 0xFFFFFFE0))) ^ (v5 + 1464))))();
}

uint64_t sub_193CB8544(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  _QWORD *v6;
  _DWORD *v7;
  void (*v8)(unsigned int *);
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v4 = (v3 - 1819616769) & 0x6C7523FF;
  *v6 = a1;
  *v7 = v1;
  v12 = v10;
  v11 = (v4 + 490) ^ (69008221 * ((((2 * &v11) | 0x63EAADE) - &v11 - 52385135) ^ 0xD0BD0765));
  v8(&v11);
  v11 = (v4 + 490) ^ (69008221 * (((&v11 | 0x9079EDF0) - (&v11 & 0x9079EDF0)) ^ 0x43DBBFFA));
  v12 = v9;
  v8(&v11);
  return v2 ^ 0xA3259451;
}

void sub_193CB87D8(uint64_t a1)
{
  unint64_t v2;
  char v3;

  v2 = (unint64_t)&v3 ^ qword_1EE2CDA38 ^ qword_1EE2CD918;
  qword_1EE2CDA38 = 45734839 * v2 + 0xC009E7C5B757041;
  qword_1EE2CD918 = 45734839 * (v2 ^ 0x8C484E3334DB83C7);
  ((void (*)(char *, void (*)()))*(&off_1E31525C0
                                            + ((-73
                                                                             * (qword_1EE2CDA38 ^ 0xC7 ^ qword_1EE2CD918)) ^ byte_193F04EF0[byte_193F002D0[(-73 * (qword_1EE2CDA38 ^ 0xC7 ^ qword_1EE2CD918))] ^ 0xD2])
                                            + 198))((char *)*(&off_1E31525C0+ ((-73 * ((qword_1EE2CD918 - qword_1EE2CDA38) ^ 0xC7)) ^ byte_193F003D0[byte_193EFC070[(-73 * ((qword_1EE2CD918 - qword_1EE2CDA38) ^ 0xC7))] ^ 9])- 55)- 12, sub_193CBCCF0);
  __asm { BR              X11 }
}

uint64_t sub_193CB8900()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((107 * (**(_QWORD **)(v2 + 936) == 0)) ^ v0)) - 12))();
}

uint64_t sub_193CB8950@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 ^ 0x1D7)))(v1);
}

void sub_193CB8970(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) - 3804331 * (((a1 | 0x51A664) - (a1 & 0x51A664)) ^ 0x7E848392);
  __asm { BR              X10 }
}

uint64_t sub_193CB8A38@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, int a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v13 = 1178560073 * (&a4 ^ 0xE7352268);
  a4 = &STACK[0x1EF0C0D0C0C764DE];
  a5 = &STACK[0x11E90ECB0B9030B1];
  a9 = v12;
  a6 = v11 - v13 - 918;
  a7 = 1067655418 - v13;
  v14 = (*(uint64_t (**)(unint64_t **))(a1 + 8 * (v11 - 999)))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10
                                                      + 8
                                                      * ((3541 * (*(_DWORD *)(v12 - 0x592F4E5EA75AA576) == v9 + v11)) ^ v11))
                                          - 12))(v14);
}

uint64_t sub_193CB8AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  int v10;
  uint64_t v11;
  int v12;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((115 * (a10 == ((v12 - 1176) | 0x444) + v10)) ^ v12)) - 4))();
}

uint64_t sub_193CB8B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;

  *(_BYTE *)(v11 + (v14 + v12)) = *(_BYTE *)(a11 + (v14 + v12)) ^ 0x12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v16
                                        + 8
                                        * (((v14 + 1 + v12 >= (a10 ^ (((v17 - 809473194) & 0x303F9455u) + v15))) * v13) ^ v17))
                            - 4))();
}

void sub_193CB8BA4(_DWORD *a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *v3;
  *(_QWORD *)(v3[3] - 0x5594AEEE97C9A88DLL) = v1;
  *(_DWORD *)(v4 - 0x750D723A758CEB2ALL) = v2;
  *((_DWORD *)v3 + 3) = *a1;
}

uint64_t sub_193CB8C10(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;

  v1 = 235795823 * ((2 * (a1 & 0x125A82D6) - a1 - 307921623) ^ 0x79083470);
  v2 = *(_DWORD *)(a1 + 16) + v1;
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2D6CAD6C03423C37);
  v4 = *(_DWORD *)(a1 + 4) - v1;
  v5 = v3 - 1558770207;
  if (v3 - 1558770207 < 0)
    v5 = 1558770207 - v3;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_1E31525C0 + (v2 ^ 0x432))
                                        + 8
                                        * ((3112 * ((v4 - 1570662193) >= 4 * (unint64_t)v5)) ^ v2)
                                        - 12)
                            - 12))();
}

uint64_t sub_193CB8CDC(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1
                                                               + 8
                                                               * ((37 * ((((v3 + 760) ^ (v2 == 1570662193)) & 1) == 0)) ^ v3))
                                                   - 12))(a1, 2410950552);
}

uint64_t sub_193CB8D1C()
{
  uint64_t v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((60 * (((((v1 + 1689218701) & 0x9B508E7A) - 291) ^ 0x307) != 32)) ^ (v1 - 1063)))
                            - 8))();
}

uint64_t sub_193CB8DA8@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W3>, int a4@<W4>, int a5@<W8>)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  char v8;

  *(_BYTE *)(*(_QWORD *)(a1 + 24) + (a4 + a5)) = (a3 ^ v7) >> v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((776 * (((a4 - 1 == v6) ^ (5 * (a2 ^ 0xD5))) & 1)) ^ a2))
                            - 12))();
}

uint64_t sub_193CB8DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  int v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((60 * (v7 + 8 != ((((a6 + 1689219764) & 0x9B508E7A) - 291) ^ 0x307))) ^ a6))
                            - 8))();
}

uint64_t sub_193CB8E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  _BOOL4 v8;

  v8 = v3 > 0x230E6E03;
  if (v8 == v7 + 197469615 < -588148228)
    v8 = v7 + 197469615 < v6;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4
                                                                                         + 8 * (int)(a3 ^ (1153 * v8)))
                                                                             - ((((_DWORD)a3 + 281) | 0xAu) ^ 0x442)))(a1, ((_DWORD)a3 + 281) | 0xAu, a3, 748569738, v5);
}

uint64_t sub_193CB8EC4@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W8>)
{
  int v3;
  _QWORD *v4;
  int v5;

  return sub_193CB8DA8(a1, (a2 - 741) | 0x408u, *(_DWORD *)(*v4 + 4 * (int)((((a2 - 741) | 0x408) ^ 0xAED397F9) + v5)), v3, a3);
}

_DWORD *sub_193CB8EF8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

void sub_193CB8F00(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) ^ (831981571 * ((~(_DWORD)a1 & 0xE26CEAFC | a1 & 0x1D931503) ^ 0x7BCD3AD8));
  __asm { BR              X10 }
}

uint64_t sub_193CB8FBC@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unsigned int a4, int a5, unint64_t *a6, int a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v10 = 3804331 * ((2 * (&a3 & 0x352A9290) - &a3 - 891982483) ^ 0xB400489B);
  a3 = v8;
  a6 = &STACK[0x1C4110BE041F984C];
  a4 = v10 ^ 0xB44A1FA9;
  a5 = v10 ^ 0x470A4E63;
  a7 = (v7 + 1182) ^ v10;
  v11 = ((uint64_t (*)(uint64_t *))(*(_QWORD *)(a1 + 8 * (v7 ^ 0xD4)) - 4))(&a3);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9
                                                      + 8
                                                      * ((2155 * (*(_DWORD *)(v8 - 0x592F4E5EA75AA576) == -1557818287)) ^ v7))
                                          - 12))(v11);
}

void sub_193CB9098(_DWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _BYTE *v4;

  v3 = (*(_QWORD *)v1 ^ v2)
     - ((2 * (*(_QWORD *)v1 ^ v2) + 0x61802F3981D25D24) & 0xC9A3CBA96DF25B56)
     - 0x6A6E028E881DA3C3;
  *v4 = (HIBYTE(v3) ^ 0xE4) + (~(2 * HIBYTE(v3)) | 0xDB) + 19;
  v4[1] = (BYTE6(v3) ^ 0xD1) - ((2 * (BYTE6(v3) ^ 0xD1)) & 0x24) + 18;
  v4[2] = (BYTE5(v3) ^ 0xE5) + (~(2 * BYTE5(v3)) | 0xDB) + 19;
  v4[3] = (BYTE4(v3) ^ 0xD4) - ((2 * (BYTE4(v3) ^ 0xD4)) & 0x24) + 18;
  v4[4] = (BYTE3(v3) ^ 0xB6) - ((2 * (BYTE3(v3) ^ 0xB6)) & 0x24) + 18;
  v4[5] = (BYTE2(v3) ^ 0xF9) - 2 * ((BYTE2(v3) ^ 0xF9) & 0x16 ^ BYTE2(v3) & 4) + 18;
  v4[6] = (BYTE1(v3) ^ 0x2D) + (~(2 * BYTE1(v3)) | 0xDB) + 19;
  v4[7] = v3 ^ 0xB9;
  *(_DWORD *)(v1 + 12) = *a1;
}

void sub_193CB9200(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) ^ (1224239923 * ((((2 * a1) | 0x124C8F9E) - a1 - 153503695) ^ 0xFB95BA18));
  __asm { BR              X10 }
}

uint64_t sub_193CB92D4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unsigned int a4, int a5, unint64_t *a6, int a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v10 = 3804331 * ((2 * (&a3 & 0x6E54BB78) - &a3 - 1851046783) ^ 0xEF7E6177);
  a6 = &STACK[0x1C4110BE041F984C];
  a3 = v8;
  a7 = (v7 + 729) ^ v10;
  a4 = v10 ^ 0xB44A1FA9;
  a5 = v10 ^ 0x470A4E5F;
  v11 = ((uint64_t (*)(uint64_t *))(*(_QWORD *)(a1 + 8 * (v7 - 401)) - 4))(&a3);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9
                                                      + 8
                                                      * ((109 * (*(_DWORD *)(v8 - 0x592F4E5EA75AA576) == -1557818287)) ^ v7))
                                          - 12))(v11);
}

void sub_193CB93AC(_DWORD *a1@<X8>)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  _BYTE *v4;

  v3 = *v1 + v2 - ((2 * (*v1 + v2) + 465021644) & 0xA5541190) + 1619385902;
  *v4 = (HIBYTE(v3) ^ 0xD2) - 2 * ((HIBYTE(v3) ^ 0xD2) & 0x1A ^ HIBYTE(v3) & 8) + 18;
  v4[1] = (BYTE2(v3) ^ 0xAA) - 2 * ((BYTE2(v3) ^ 0xAA) & 0x17 ^ BYTE2(v3) & 5) + 18;
  v4[2] = (BYTE1(v3) ^ 8) - ((v3 >> 7) & 0x24) + 18;
  v4[3] = v3 ^ 0xDA;
  v1[1] = *a1;
}

void sub_193CB9498(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) + 1178560073 * ((2 * (a1 & 0xDA2E353F) - a1 + 634505920) ^ 0xC2E4E8A8);
  __asm { BR              X8 }
}

uint64_t sub_193CB9550()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((292
                                          * (*(_DWORD *)(v2 - 0x592F4E5EA75AA576) == (((v1 - 68) | 0x510) ^ 0xA325912A))) ^ v1))
                            - 4))();
}

uint64_t sub_193CB95A4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v3 = *(_DWORD *)(v1 - 0x592F4E5EA75AA57ELL) - 817168350;
  v4 = *(_DWORD *)(v1 - 0x592F4E5EA75AA582) + (v2 ^ 0x1A71797B);
  v5 = v3 < v2 + 1216898427;
  v6 = v3 > v4;
  if (v5 != v4 < 0x48886AF6)
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((v6 | (4 * v6)) ^ v2)) - 8))();
}

uint64_t sub_193CB9638(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;

  v9 = *(_QWORD *)(v7 - 0x592F4E5EA75AA58ELL);
  v10 = *(unsigned __int8 *)(v9 + (v6 - 2034068185)) ^ 0x12;
  v11 = ((*(unsigned __int8 *)(v9 + (v6 - 2034068188)) ^ 0x12) << 24) | ((*(unsigned __int8 *)(v9 + v6 - 2034068535 + ((14 * (a4 ^ 0x3FC)) ^ 0x409u) + 173) ^ 0x12) << 16) | ((*(unsigned __int8 *)(v9 + (v6 - 2034068186)) ^ 0x12) << 8) | v10;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((123
                                          * (((v11 + v5 - 2 * (v11 & 0x23259459 ^ v10 & 8)) & 0xFFFFFF ^ 0x259451)
                                           - (v8
                                            + *(_DWORD *)(a1 + 20)) == -1061380210)) ^ a4))
                            - 12))();
}

uint64_t sub_193CB9714(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((((a6 & 0x40000000) != (a3 ^ 0x4A6)) * (((a3 - 251635183) & 0xEFFA7CF) - 1554)) ^ a3))
                            - 12))();
}

uint64_t sub_193CB97D4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((((((a3 ^ 0x5C5) - 189) | 9) + 2183) * (v5 != v4)) ^ a3 ^ 0x5C5))
                            - ((a3 ^ 0x5C5u)
                             - 180)
                            + 163))();
}

uint64_t sub_193CB9810@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  int v2;

  *a2 = v2;
  *(_DWORD *)(result + 24) = 1557843812;
  return result;
}

void sub_193CB9990(uint64_t a1, uint64_t a2)
{
  __asm { BR              X8 }
}

uint64_t sub_193CB9A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2 + 8 * ((680 * (**(_BYTE **)(a2 + 8) == 0)) ^ 0x438)))();
}

uint64_t sub_193CB9A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44)
{
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;

  *(_QWORD *)(*(_QWORD *)(a16 + 96) + 504) = v44 + 1;
  *(_DWORD *)(*(_QWORD *)(a16 + 96) + 496) = a18 - 1;
  v47 = 235795823 * ((v46 - 160) ^ 0x94AD4959);
  *(_DWORD *)(v46 - 152) = v47 ^ 0xDDB4597;
  *(_DWORD *)(v46 - 148) = v47 + 426523017;
  *(_QWORD *)(v46 - 160) = &STACK[0x3C058A92099E359D];
  v48 = sub_193C8F838(v46 - 160);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v45
                                                      + 8
                                                      * ((400
                                                        * (a18
                                                         - 1707619585
                                                         + ((2 * a44) & 0x6E ^ 0x46)
                                                         + (a44 & 0x3F ^ 0x3F7EB7D4u) > 0xFFFFFFBF)) ^ 0x2E5u))
                                          - 4))(v48);
}

uint64_t sub_193CB9C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  int v18;
  int v19;
  uint64_t v20;
  _BOOL4 v21;

  v21 = v18 - 634509907 < (a18 - 152835699);
  if ((a18 - 152835699) < 0x1D2D6657 != (v18 - 634509907) < 0x1D2D6657)
    v21 = (a18 - 152835699) < 0x1D2D6657;
  return ((uint64_t (*)(void))(*(_QWORD *)(v20 + 8 * ((v21 * ((v19 + 1505) ^ 0x966)) | v19)) - 12))();
}

uint64_t sub_193CB9CB0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v50;
  uint64_t v51;
  int v53;

  v53 = a2 ^ 0x9A0;
  v47 = (a2 - 277057127) & 0xFCDBBF0B;
  v48 = 831981571 * ((((v46 - 160) | 0xB674E6E3) - (v46 - 160) + ((v46 - 160) & 0x498B1918)) ^ 0x2FD536C7);
  *(_QWORD *)(v46 - 152) = a15;
  *(_DWORD *)(v46 - 160) = (a18 + 1176690017) ^ v48;
  *(_DWORD *)(v46 - 156) = v48 + a2 - 2182;
  v50 = sub_193CA900C(v46 - 160);
  v51 = a45 & 0x3F;
  *(&a36 + (v51 ^ 0x23)) = -110;
  return ((uint64_t (*)(uint64_t))(3965204994
                                          - v47
                                          + *(_QWORD *)(v45
                                                      + 8 * ((229 * ((v51 ^ 0x23) > v53 - 142)) ^ a2))))(v50);
}

uint64_t sub_193CB9DD0(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v3
                                                               + 8
                                                               * (((((v2 ^ 0x81) + 1962) ^ 0x240) * (v1 != 63)) ^ v2))
                                                   - 4))(a1, -436000386);
}

uint64_t sub_193CB9E10(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * (int)(((a4 + ((v5 - 310495684) & 0xFED9FBDF) + 2984) * ((v4 ^ 0x1Cu) < 8)) ^ v5))
                            - ((v5 - 310495684) ^ 0xED7E3E22)))();
}

uint64_t sub_193CB9E68@<X0>(uint64_t a1@<X1>, int a2@<W3>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,char a30)
{
  int v30;
  char v31;
  uint64_t v32;

  *(_QWORD *)(&a30 + a3 + a1) = 0x1212121212121212;
  return ((uint64_t (*)(void))(*(_QWORD *)(v32
                                        + 8
                                        * ((2497 * (((a2 + v30 - 883) ^ 0xCDLL) == (v31 & 0x38))) ^ (a2 + v30 - 894)))
                            - 12))();
}

uint64_t sub_193CB9EC4@<X0>(unsigned int a1@<W0>, int a2@<W2>, uint64_t a3@<X6>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,char a31)
{
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  _BOOL4 v37;
  unsigned int v38;
  int v39;
  _BOOL4 v40;

  v37 = v32 < a1;
  v38 = ((37 * (v35 ^ 0x3C5)) ^ (v33 + 1822)) + v31;
  *(&a31 + (a4 + v34)) = *(_BYTE *)(a3 + (v31 + a2))
                                     - ((2 * *(_BYTE *)(a3 + (v31 + a2))) & 0x24)
                                     + 18;
  v39 = v37 ^ (v38 < a1);
  v40 = v38 < v32;
  if (!v39)
    v37 = v40;
  return ((uint64_t (*)(void))(*(_QWORD *)(v36 + 8 * ((v37 | (2 * v37)) ^ v35)) - 12))();
}

uint64_t sub_193CB9F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((1161 * (((v6 ^ (a5 + 197) ^ (v7 == v5)) & 1) == 0)) ^ v6))
                            - ((v6 - 129) ^ 0x40)))();
}

uint64_t sub_193CB9F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int32x4_t a47,int32x4_t a48,int32x4_t a49,int32x4_t a50)
{
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t (*v57)(__n128, __n128, __n128, __n128, __n128);
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  uint8x16_t v66;
  uint16x8_t v67;
  int8x16_t v68;
  int8x16_t v69;
  uint16x8_t v70;
  int8x16_t v71;
  int8x16_t v72;
  uint8x16_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint8x16_t v76;
  int8x16_t v79;
  int8x16_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  uint64_t v90;
  uint8x16_t v91;
  uint16x8_t v92;
  uint16x8_t v93;
  uint8x16_t v94;
  uint8x16_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  _DWORD *v106;
  int v107;
  int v108;
  int v109;
  int v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int8x16x4_t v118;
  int8x16x4_t v119;

  v57 = *(uint64_t (**)(__n128, __n128, __n128, __n128, __n128))(v54 + 8 * v50);
  HIDWORD(v114) = ((a5 + v50 + 1010 - 1078) ^ 0x11C57C33) + HIDWORD(a17);
  v58.n128_u64[0] = 0x1212121212121212;
  v58.n128_u64[1] = 0x1212121212121212;
  v59 = (__n128)vdupq_n_s32(0x23259459u);
  v60 = (__n128)vdupq_n_s32(0xA3259451);
  v117 = v55 - 16;
  v61.n128_u64[0] = 0x2424242424242424;
  v61.n128_u64[1] = 0x2424242424242424;
  v62 = (__n128)vdupq_n_s32(0x23259457u);
  HIDWORD(a28) = 206;
  LODWORD(a27) = 70;
  HIDWORD(a26) = 37;
  v63 = HIDWORD(a43);
  v64 = a44;
  LODWORD(v114) = BYTE4(a46) ^ 0x1C;
  v65 = BYTE4(a46) ^ 0x1C;
  if (v65 == 2)
  {
    v115 = __PAIR64__(a45, HIDWORD(a44));
    v116 = *(_QWORD *)(v54 + 8 * v50);
    v119 = vld4q_s8((const char *)&a34 + 4);
    v90 = HIDWORD(a45);
    HIDWORD(a20) = HIDWORD(a45);
    v91 = (uint8x16_t)veorq_s8(v119.val[0], (int8x16_t)v58);
    v92 = vmovl_u8(*(uint8x8_t *)v91.i8);
    v93 = vmovl_high_u8(v91);
    v94 = (uint8x16_t)veorq_s8(v119.val[1], (int8x16_t)v58);
    _Q22 = vmovl_u8(*(uint8x8_t *)v94.i8);
    _Q21 = vmovl_high_u8(v94);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }
    v99 = (uint8x16_t)veorq_s8(v119.val[2], (int8x16_t)v58);
    v100 = vmovl_high_u8(v99);
    v101 = vmovl_u8(*(uint8x8_t *)v99.i8);
    v119.val[0] = veorq_s8(v119.val[3], (int8x16_t)v58);
    v119.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v119.val[0]);
    v119.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v119.val[1]);
    v119.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v119.val[1].i8);
    v119.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v119.val[0].i8);
    v119.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v119.val[0]);
    v119.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v119.val[0].i8);
    v102 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v101.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v92.i8), 0x18uLL)), v119.val[0]);
    v103 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v101, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v92), 0x18uLL)), v119.val[3]);
    v104 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v100.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v93.i8), 0x18uLL)), v119.val[1]);
    v105 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v100, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v93), 0x18uLL)), v119.val[2]);
    v119.val[0] = veorq_s8(vandq_s8((int8x16_t)v102, (int8x16_t)v59), (int8x16_t)(*(_OWORD *)v119.val & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    v119.val[3] = veorq_s8(vandq_s8((int8x16_t)v103, (int8x16_t)v59), (int8x16_t)(*(_OWORD *)&v119.val[3] & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    v119.val[1] = veorq_s8(vandq_s8((int8x16_t)v104, (int8x16_t)v59), (int8x16_t)(*(_OWORD *)&v119.val[1] & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    v119.val[2] = veorq_s8(vandq_s8((int8x16_t)v105, (int8x16_t)v59), (int8x16_t)(*(_OWORD *)&v119.val[2] & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    a49 = vaddq_s32(vsubq_s32(v104, vaddq_s32((int32x4_t)v119.val[1], (int32x4_t)v119.val[1])), (int32x4_t)v60);
    a50 = vaddq_s32(vsubq_s32(v105, vaddq_s32((int32x4_t)v119.val[2], (int32x4_t)v119.val[2])), (int32x4_t)v60);
    a47 = vaddq_s32(vsubq_s32(v102, vaddq_s32((int32x4_t)v119.val[0], (int32x4_t)v119.val[0])), (int32x4_t)v60);
    a48 = vaddq_s32(vsubq_s32(v103, vaddq_s32((int32x4_t)v119.val[3], (int32x4_t)v119.val[3])), (int32x4_t)v60);
    v106 = (_DWORD *)&a47 + v52 + 2073681704;
    v107 = *(v106 - 8) ^ *(v106 - 3);
    v108 = v107 + v51 - ((2 * v107) & 0x464B28A2);
    v109 = *(v106 - 16) ^ *(v106 - 14);
    HIDWORD(v111) = v109 ^ 0x23259451 ^ v108;
    LODWORD(v111) = v109 ^ ~v108;
    v110 = v111 >> 31;
    v112 = (2 * v110) & 0x464B28A2;
    v113 = (v110 + v51 - v112);
    *v106 = v113;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 8 * (int)((v55 != 2073681641) | (4 * (v55 != 2073681641)) | a5 ^ (a5 - 218))))(v113, v112, v117, a4, a5, a6, v90, 1179330722, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             v114,
             __PAIR64__(v64, v63),
             v115,
             v116,
             a26,
             a27,
             a28,
             v117,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46);
  }
  else if (v65 == 1)
  {
    v118 = vld4q_s8((const char *)&a34 + 4);
    v66 = (uint8x16_t)veorq_s8(v118.val[0], (int8x16_t)v58);
    v67 = vmovl_u8(*(uint8x8_t *)v66.i8);
    v68 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v67.i8);
    v69 = (int8x16_t)vmovl_high_u16(v67);
    v70 = vmovl_high_u8(v66);
    v71 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v70.i8);
    v72 = (int8x16_t)vmovl_high_u16(v70);
    v73 = (uint8x16_t)veorq_s8(v118.val[1], (int8x16_t)v58);
    v74 = vmovl_high_u8(v73);
    v75 = vmovl_u8(*(uint8x8_t *)v73.i8);
    v76 = (uint8x16_t)veorq_s8(v118.val[2], (int8x16_t)v58);
    _Q26 = (int8x16_t)vmovl_high_u8(v76);
    _Q25 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v76.i8);
    v79 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q25.i8, 0x10uLL);
    __asm { SHLL2           V25.4S, V25.8H, #0x10 }
    v84 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q26.i8, 0x10uLL);
    __asm { SHLL2           V26.4S, V26.8H, #0x10 }
    v118.val[0] = veorq_s8(v118.val[3], (int8x16_t)v58);
    v118.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v118.val[0]);
    v118.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v118.val[1]);
    v118.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v118.val[0].i8);
    v118.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v118.val[0]);
    v118.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v118.val[0].i8), 0x18uLL), v79), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v75.i8, 8uLL), v68));
    v118.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v118.val[3], 0x18uLL), _Q25), vorrq_s8((int8x16_t)vshll_high_n_u16(v75, 8uLL), v69));
    v118.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v118.val[1].i8), 0x18uLL), v84), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v74.i8, 8uLL), v71));
    v118.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v118.val[2], 0x18uLL), _Q26), vorrq_s8((int8x16_t)vshll_high_n_u16(v74, 8uLL), v72));
    v85 = (int32x4_t)veorq_s8(vandq_s8(v118.val[0], (int8x16_t)v62), (int8x16_t)(*(_OWORD *)&v68 & __PAIR128__(0xFFFFFF06FFFFFF06, 0xFFFFFF06FFFFFF06)));
    v86 = (int32x4_t)veorq_s8(vandq_s8(v118.val[3], (int8x16_t)v62), (int8x16_t)(*(_OWORD *)&v69 & __PAIR128__(0xFFFFFF06FFFFFF06, 0xFFFFFF06FFFFFF06)));
    v87 = (int32x4_t)veorq_s8(vandq_s8(v118.val[1], (int8x16_t)v62), (int8x16_t)(*(_OWORD *)&v71 & __PAIR128__(0xFFFFFF06FFFFFF06, 0xFFFFFF06FFFFFF06)));
    v88 = (int32x4_t)veorq_s8(vandq_s8(v118.val[2], (int8x16_t)v62), (int8x16_t)(*(_OWORD *)&v72 & __PAIR128__(0xFFFFFF06FFFFFF06, 0xFFFFFF06FFFFFF06)));
    a49 = vaddq_s32(vsubq_s32((int32x4_t)v118.val[1], vaddq_s32(v87, v87)), (int32x4_t)v60);
    a50 = vaddq_s32(vsubq_s32((int32x4_t)v118.val[2], vaddq_s32(v88, v88)), (int32x4_t)v60);
    a47 = vaddq_s32(vsubq_s32((int32x4_t)v118.val[0], vaddq_s32(v85, v85)), (int32x4_t)v60);
    a48 = vaddq_s32(vsubq_s32((int32x4_t)v118.val[3], vaddq_s32(v86, v86)), (int32x4_t)v60);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t (**)(int, int, int, int, int, int, int, int, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 + 10504) - 8))(0x193F04B80, *(_QWORD *)(v54 + 10504) - 8, 1329, &off_1E31525C0, 1313, 3274201870, 0x193F039E0, 0x193EFAA40, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             v114,
             __PAIR64__(a44, HIDWORD(a43)),
             __PAIR64__(a45, HIDWORD(a44)),
             v57,
             a26,
             a27,
             a28,
             v117,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46);
  }
  else
  {
    HIDWORD(a43) = 2 * (HIDWORD(a43) ^ v56) + v56 - (v53 & (4 * (HIDWORD(a43) ^ v56)));
    LODWORD(a44) = 2 * (a44 ^ v56) + v56 - (v53 & (4 * (a44 ^ v56)));
    HIDWORD(a44) = 2 * (HIDWORD(a44) ^ v56) + v56 - (v53 & (4 * (HIDWORD(a44) ^ v56)));
    LODWORD(a45) = 2 * (a45 ^ v56) + v56 - (v53 & (4 * (a45 ^ v56)));
    return v57(v58, v59, v60, v61, v62);
  }
}

uint64_t sub_193CBAE3C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,int a22,unsigned int a23)
{
  uint64_t v23;
  unsigned int v24;
  _BOOL4 v25;
  _BOOL4 v26;
  _BOOL4 v27;

  v24 = (a5 ^ (a5 - 2029) ^ 0xE0E78A8E) + a19;
  v25 = v24 < a6;
  v26 = v24 > a23;
  if (a23 < a6 != v25)
    v27 = v25;
  else
    v27 = v26;
  return ((uint64_t (*)(void))(*(_QWORD *)(v23
                                        + 8
                                        * ((3021 * ((((225 * (a5 ^ (a5 + 4))) ^ v27) & 1) == 0)) ^ (a4 + a5 - 195)))
                            - 4))();
}

uint64_t sub_193CBAEE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * (int)((((v6 - 42011097) & 0xEED93BCB ^ (a5 + 130))
                                               * (v5 + a3 + 63 >= (v5 + a3))) ^ v6))
                            - 12))();
}

uint64_t sub_193CBAF34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  return ((uint64_t (*)(void))(*(_QWORD *)(v21
                                        + 8
                                        * ((158
                                          * (~a18
                                           + v19
                                           - (unint64_t)(v18 - 794262196 + ((v20 - 293996716) & 0xFDDE3A9E)) > 0xF)) ^ v20))
                            + 3965204994
                            - (a5 + v20 - 2071)
                            - 4))();
}

uint64_t sub_193CBAFAC(int8x16_t a1, double a2, double a3, int8x16_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  int8x16_t *v12;
  int v13;
  uint64_t v14;
  int8x16_t v15;

  v15 = *(int8x16_t *)(a11 + v11 + ((a8 + v13 - 1028) ^ (a7 + 12)));
  *v12 = vaddq_s8(vsubq_s8(v15, vandq_s8(vaddq_s8(v15, v15), a4)), a1);
  return (*(uint64_t (**)(void))(v14 + 8 * (a8 + v13 + 628)))();
}

uint64_t sub_193CBB008@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W3>, int a4@<W4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  int v11;

  *(_BYTE *)(v7 + a6) = *(_BYTE *)(a5 + (v6 + a2))
                      - (v9 & (2 * *(_BYTE *)(a5 + (v6 + a2))))
                      + 18;
  return (*(uint64_t (**)(void))(v10
                              + 8 * (((a6 + 1 != (v8 ^ (a4 + 4)) * v11 + 12) * a1) ^ (a3 + v8 + 655))))();
}

uint64_t sub_193CBB05C@<X0>(uint64_t a1@<X0>, int a2@<W3>, int a3@<W8>)
{
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v3
                                                               + 8
                                                               * ((857 * (a3 - 436000386 < ((a2 + v4 + 1101) ^ 0x8BDu))) ^ (a2 + v4 - 24)))
                                                   - 4))(a1, -436000386);
}

uint64_t sub_193CBB0AC@<X0>(unsigned int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = a1;
  v4 = a1 - 0x10655108BLL + ((v1 - 871888509) | 0x20502802u);
  if (v4 <= 0x38)
    v4 = 56;
  return (*(uint64_t (**)(void))(v2 + 8 * (((8 * (v4 - v3 + 436000386 < 8)) | (16 * (v4 - v3 + 436000386 < 8))) ^ v1)))();
}

uint64_t sub_193CBB118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,char a35)
{
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  *(_QWORD *)(&a35 + v37 + a2) = 0x1212121212121212;
  return ((uint64_t (*)(void))(*(_QWORD *)(v38
                                        + 8
                                        * ((35 * ((((v36 - 1594) ^ 0xFFFFFFFFFFFFFDB3) & v35) != 8)) ^ (v36 - 1594)))
                            - (((v36 - 2149) | 0x400u) ^ 0x428)))();
}

uint64_t sub_193CBB180(double a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(double *)(v3 + v6) = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((v4 != v6) * v5) ^ v1)) - (v2 ^ 0x428)))();
}

uint64_t sub_193CBB1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((669 * (((v5 == v6) ^ ((v7 ^ (a5 + 32)) + 1)) & 1)) | v7))
                            - 4))();
}

void sub_193CBB1E0()
{
  JUMPOUT(0x193CBA2B8);
}

uint64_t sub_193CBB640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47)
{
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  _BOOL4 v54;

  v53 = *(_DWORD *)(&a35 + ((v51 + v47) & 0xFFFFFFFC) + 72);
  *(_BYTE *)(a2 + (v51 + v47)) = ((((v49 - 112) & 0x6E) + 31) ^ HIBYTE(v53)) - ((v53 >> 23) & 0x24) + 18;
  *(_BYTE *)(a2 + (v51 + v47 + 1)) = (BYTE2(v53) ^ 0x66) - ((2 * (BYTE2(v53) ^ 0x66)) & 0x24) + 18;
  *(_BYTE *)(a2 + (v51 + v47 + 2)) = (BYTE1(v53) ^ 0x56) - ((2 * (BYTE1(v53) ^ 0x56)) & 0x24) + 18;
  *(_BYTE *)(a2 + (v51 + v47 + 3)) = ~(_BYTE)v53;
  v54 = v51 + 87807962 < (a47 + 186245674);
  if (v51 + 87807962 < v48 != a47 + 186245674 < v48)
    v54 = a47 + 186245674 < v48;
  return ((uint64_t (*)(void))(*(_QWORD *)(v52 + 8 * ((!v54 * v50) ^ v49)) - 4))();
}

void sub_193CBB7BC()
{
  JUMPOUT(0x193CBB78CLL);
}

uint64_t sub_193CBB7C8@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, int a7@<W8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;

  *(_DWORD *)(&a46 + a29) = 1630969094;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 8 * (int)((((a7 + 1773472720) & 0x964AF977) - 1928) ^ (a7 + 75))))(1540116379, &a46 + a29, a1, a2, a3, a4, a5, a6, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24);
}

uint64_t sub_193CBB860(int a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return (*(uint64_t (**)(void))(v6 + 8 * (((v5 != a1) * (a4 + ((v4 - 1472192821) | 0x4418120A) - 960)) ^ v4)))();
}

uint64_t sub_193CBB8AC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  int v34;
  uint64_t v35;
  _BOOL4 v36;

  v36 = a34 - 1369986723 < (a6 - 426164622);
  if ((a34 - 1369986723) < 0xCE2BB3B != (a6 - 426164622) < 0xCE2BB3B)
    v36 = (a6 - 426164622) < 0xCE2BB3B;
  return ((uint64_t (*)(void))(*(_QWORD *)(v35 + 8 * (v36 | (2 * v36) | (a4 + v34 + 1292)))
                            - (((a4 + v34 - 24) | 0x2C5u)
                             - 1413)
                            + 348))();
}

uint64_t sub_193CBBAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  v16 = v14 ^ (a5 + 352);
  v17 = 460628867 * ((620100799 - ((v15 - 160) | 0x24F5FCBF) + ((v15 - 160) | 0xDB0A0340)) ^ 0x979C813D);
  *(_DWORD *)(v15 - 132) = v14 - v17 + 1083;
  *(_QWORD *)(v15 - 160) = a12;
  *(_QWORD *)(v15 - 144) = a7;
  *(_QWORD *)(v15 - 120) = a11;
  *(_QWORD *)(v15 - 112) = a10;
  *(_QWORD *)(v15 - 128) = a13;
  *(_DWORD *)(v15 - 152) = v17 + a6 + 1430879275;
  ((void (*)(uint64_t))((char *)*(&off_1E31525C0 + (v14 ^ 0x1FD)) - 12))(v15 - 160);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v13
                                                      + 8
                                                      * (((*(_DWORD *)(v15 - 136) == v16 - 1228055993) * (v14 + 2025)) ^ v14))
                                          - 4))(1540116379);
}

uint64_t sub_193CBBC18(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;

  v11 = *(_DWORD *)(v5 + 48 * (v6 + v7 + ((v10 + 15) ^ (a5 + 347)) + a4 - 1080)) == 601476385;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8 * ((v11 | (16 * v11)) ^ (v10 + 15))))(a1, v9);
}

uint64_t sub_193CBBC70@<X0>(int a1@<W3>, int a2@<W8>)
{
  int v3;

  if ((a2 + 106521493) <= 0x10 && ((1 << (a2 - 107)) & 0x14301) != 0)
    __asm { BR              X10 }
  return v3 ^ 0x5CDACF8Fu;
}

void sub_193CBC120(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_193CBC170@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  *(_DWORD *)(*(_QWORD *)(a2 + 96) + 24) = v3;
  v4 = *(_DWORD *)(a1 + 4) - ((2 * *(_DWORD *)(a1 + 4) - 1284700562) & 0xC4F2475C) + 1009755877;
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v2
                                                     + 8
                                                     * ((15
                                                       * (((2 * v4) & 0xFFF9396E ^ 0xC4F0014C)
                                                        + (v4 ^ 0x1D85BF19)
                                                        - 1080559762 != 1066701861)) ^ 0x161u))
                                         - 8))(0);
}

uint64_t sub_193CBC224(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((13
                                          * ((((v5 + v4 - 2147261623) < 8) ^ (a3 + 107)) & 1)) ^ a3))
                            - 4))();
}

uint64_t sub_193CBC28C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((a3 - 1203) ^ (16 * ((unint64_t)(v4 - a1 - 4) > 0x1F))))
                            - 12))();
}

uint64_t sub_193CBC2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v6;
  unsigned int v7;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((126 * (v7 >= ((a5 - 16) ^ (v6 + 2686) ^ (v6 + 2831)))) ^ (a5 + 382))))();
}

uint64_t sub_193CBC2F8@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  __int128 v6;
  uint64_t v7;

  v6 = *(_OWORD *)(v3 + (v5 - 1066701862) - 31);
  v7 = a2 + (v5 - 1066701862);
  *(_OWORD *)(v7 - 15) = *(_OWORD *)(v3 + (v5 - 1066701862) - 15);
  *(_OWORD *)(v7 - 31) = v6;
  return (*(uint64_t (**)(void))(v2
                              + 8 * ((3900 * (((a1 - 1283464574) ^ 0x161) == (v4 & 0xFFFFFFE0))) ^ (a1 - 1283462994))))();
}

uint64_t sub_193CBC364(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v3
                                                     + 8
                                                     * (((((v4 == a3) ^ (a2 - 2)) & 1) * (a2 ^ 0x856)) ^ a2))
                                         - 12))(0);
}

uint64_t sub_193CBC398(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v6;
  int v7;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v5 + 8 * ((426 * (((a5 - 551) & v6) == a5 - 575)) ^ a5)))((a5 - 398), (v7 - a3));
}

uint64_t sub_193CBC3CC@<X0>(unsigned int a1@<W0>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)(a3 - 7 + (v6 + v7 + v8 - a2)) = *(_QWORD *)(v4 - 7 + (v6 + v7 + v8 - a2));
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)((79 * (a2 - (v5 & 0xFFFFFFF8) == -8)) ^ a1)) - (a1 ^ 0xBDLL)))();
}

void sub_193CBC42C()
{
  JUMPOUT(0x193CBC404);
}

uint64_t sub_193CBC438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;

  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5
                                                                               + 8
                                                                               * (int)((((v8 + 1341913419) & 0xFC841FFF ^ v6)
                                                                                      * (v7 == a5)) ^ v8))
                                                                   - 4))(0, a2, a3, (v8 - 935));
}

uint64_t sub_193CBC480@<X0>(int a1@<W1>, int a2@<W3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;

  *(_BYTE *)(a3 + (a1 - 1066701862)) = *(_BYTE *)(v5 + (a1 - 1066701862));
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v3 + 8 * ((140 * (a1 - 1 != v4)) ^ (a2 - 140)))
                                         - ((a2 - 140) ^ (v6 + 3182))
                                         + 1283464883))(0);
}

void sub_193CBC4D4()
{
  JUMPOUT(0x193CBC498);
}

void sub_193CBC4DC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_193CBC53C()
{
  return 4294925278;
}

uint64_t sub_193CBC6B8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  _QWORD v7[2];
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)a1 + 2078219279 * ((-2 - ((a1 | 0xC3B1469C) + (~(_DWORD)a1 | 0x3C4EB963))) ^ 0xE6B42F17);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = 1178560073 * ((-1105027970 - (v7 | 0xBE229C7E) + (v7 | 0x41DD6381)) ^ 0xA6E841E9);
  v11 = *(_QWORD *)(a1 + 24);
  v2 += 231788884;
  v7[0] = v4;
  v7[1] = v3;
  v8 = v2 - v5 + 81;
  v9 = 1067655418 - v5;
  result = ((uint64_t (*)(_QWORD *))*(&off_1E31525C0 + v2))(v7);
  *(_DWORD *)(a1 + 4) = v10;
  return result;
}

uint64_t XtCqEf5X(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = qword_1EE2CD958 - (_QWORD)&v6 + qword_1EE2CD918;
  qword_1EE2CD958 = (45734839 * v4) ^ 0x8C484E3334DB83C7;
  qword_1EE2CD918 = 45734839 * (v4 ^ 0x8C484E3334DB83C7);
  v7 = 841 - 241568881 * (&v7 ^ 0xD6110442);
  v11 = a2;
  v12 = a3;
  v8 = a1;
  v9 = a4;
  ((void (*)(unsigned int *))((char *)*(&off_1E31525C0
                                                 + ((-73
                                                                    * ((qword_1EE2CD918 - ((-73 * v4) ^ 0xC7)) ^ 0xC7)) ^ byte_193EFC170[byte_193F086C0[(-73 * ((qword_1EE2CD918 - ((-73 * v4) ^ 0xC7)) ^ 0xC7))] ^ 0x78])
                                                 - 150)
                                       - 4))(&v7);
  return v10 ^ 0xA3259451;
}

uint64_t sub_193CBC8F8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = 831981571 * (a1 ^ 0x99A1D024);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = 159032397 * (*(_DWORD *)a1 - v2) - 435294708;
  v7 = *(_DWORD *)(a1 + 48) - 1695027324 + v2;
  v8 = 235795823 * ((((2 * &v10) | 0xC44E1AA2) - &v10 + 500757167) ^ 0x768A4408);
  v10 = *(_QWORD *)(a1 + 16);
  v15 = v8 ^ (v7 + 1799);
  v11 = v8 + (v6 ^ 0xEFAB5AFB) + ((2 * v6) & 0xDF56B5F6) + 1608508920;
  v16 = v3;
  v12 = v4;
  v13 = v5;
  result = ((uint64_t (*)(uint64_t *))((char *)*(&off_1E31525C0 + v7) - 12))(&v10);
  *(_DWORD *)(a1 + 52) = v14;
  return result;
}

uint64_t sub_193CBCA38(uint64_t result)
{
  unint64_t v1;
  int v2;
  int v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;

  v1 = 944348131
     * ((-2 - ((~result | 0xB1D055B9B9A436EDLL) + (result | 0x4E2FAA46465BC912))) ^ 0x4FF681A61ABD92A3);
  v2 = *(_DWORD *)(result + 16) ^ v1;
  v3 = *(_DWORD *)(result + 12) + v1;
  v4 = *(_QWORD *)(result + 24) - v1;
  v5 = *(_DWORD *)(result + 8) - v1;
  v6 = *(_QWORD *)(result + 32) ^ v1;
  v7 = *(_DWORD *)(result + 20) - v1;
  v8 = v6 == v4;
  v9 = v6 > v4;
  if ((v3 & 1) != 0)
    v8 = v9;
  if (v8)
    v2 = v5;
  *(_DWORD *)result = v2 ^ v7;
  return result;
}

uint64_t sub_193CBCAD8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  _BOOL4 v5;
  BOOL v6;
  uint64_t v7;

  v1 = 69008221 * (result ^ 0x529C46E3D3A2520ALL);
  v2 = *(_QWORD *)(result + 16);
  v3 = *(_QWORD *)(result + 24);
  v4 = v2 - v1 >= (unint64_t)(v3 - v1);
  v5 = v2 != v3;
  if (((*(_DWORD *)(result + 8) ^ v1) & 1) != 0)
    v5 = v4;
  v6 = !v5;
  v7 = 32;
  if (!v6)
    v7 = 4;
  *(_DWORD *)(result + 12) = (*(_DWORD *)(result + v7) + v1) ^ (*(_DWORD *)(result + 36) + v1);
  return result;
}

void sub_193CBCB50(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *a1
     + 1543737703 * (((a1 | 0xD0339121) - (a1 & 0xD0339121)) ^ 0xAEC7C15D)
     + 2024873263;
  v3 = *(_QWORD *)*(&off_1E31525C0
                  + (int)(*a1
                        + 1543737703
                        * (((a1 | 0xD0339121) - (a1 & 0xD0339121)) ^ 0xAEC7C15D)
                        + 2024873319));
  v2 = v1 + 460628867 * ((&v2 & 0x65264F10 | ~(&v2 | 0x65264F10)) ^ 0xD64F3292);
  sub_193CACA10((uint64_t)&v2);
}

uint64_t sub_193CBCC34(_DWORD *a1)
{
  unsigned int v2;
  uint64_t result;
  int v4;

  v2 = *a1 + 1224239923 * ((a1 & 0x361BC713 | ~(a1 | 0x361BC713)) ^ 0x3B57C53B);
  result = ((uint64_t (*)(char *, char *))*(&off_1E31525C0 + (int)(v2 ^ 0xA67E174C)))((char *)*(&off_1E31525C0 + (int)(v2 + 1501685970)) - 4, (char *)*(&off_1E31525C0 + (int)(v2 + 1501685915)) - 4);
  v4 = *(_DWORD *)*(&off_1E31525C0 + (int)(v2 ^ 0xA67E17E0));
  if ((_DWORD)result)
    v4 = 1557843695;
  a1[1] = v4;
  return result;
}

void sub_193CBCCF0()
{
  uint64_t v0;
  char v1;
  _BYTE v2[8];
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = qword_1EE2CD918 - qword_1EE2CD9E0 - (_QWORD)&v1;
  qword_1EE2CD9E0 = 45734839 * v0 + 0xC009E7C5B757041;
  qword_1EE2CD918 = 45734839 * (v0 ^ 0x8C484E3334DB83C7);
  v4 = 944348131 * ((v2 - 9490976 - 2 * (v2 & 0xFF6F2DE0)) ^ 0x5C7689AE) + 988;
  v3 = (uint64_t)*(&off_1E31525C0
                + ((-73 * ((qword_1EE2CD918 + qword_1EE2CD9E0) ^ 0xC7)) ^ byte_193F084C0[byte_193F04CF0[(-73 * ((qword_1EE2CD918 + qword_1EE2CD9E0) ^ 0xC7))] ^ 0x96])
                - 31);
  sub_193C92F04((uint64_t)v2);
}

void sub_193CBCE14()
{
  uint64_t v0;
  char v1;
  _BYTE v2[4];
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = qword_1EE2CD918 - qword_1EE2CD960 - (_QWORD)&v1;
  qword_1EE2CD960 = 45734839 * v0 - 0x73B7B1CCCB247C39;
  qword_1EE2CD918 = 45734839 * (v0 ^ 0x8C484E3334DB83C7);
  v5 = 944348131 * (((v2 | 0xDB8CBB1B) - (v2 & 0xDB8CBB1B)) ^ 0x78951F55) + 988;
  v4 = (uint64_t)*(&off_1E31525C0
                + ((-73 * ((qword_1EE2CD918 + qword_1EE2CD960) ^ 0xC7)) ^ byte_193F085C0[byte_193F04DF0[(-73 * ((qword_1EE2CD918 + qword_1EE2CD960) ^ 0xC7))] ^ 3])
                + 110);
  sub_193C92F04((uint64_t)v2);
  v4 = (uint64_t)*(&off_1E31525C0
                + ((-73 * (qword_1EE2CD960 ^ 0xC7 ^ qword_1EE2CD918)) ^ byte_193F087C0[byte_193F04FF0[(-73 * (qword_1EE2CD960 ^ 0xC7 ^ qword_1EE2CD918))] ^ 0xC4])
                - 5);
  v5 = 944348131 * ((v2 & 0x9D6474E5 | ~(v2 | 0x9D6474E5)) ^ 0xC1822F54) + 988;
  sub_193C92F04((uint64_t)v2);
  v2[0] = 52 - 113 * (((v2 | 0xA0) - (v2 | 0x5F) + 95) ^ 0xE2);
  v3 = (241568881 * (((v2 | 0x119A46A0) - (v2 | 0xEE65B95F) - 295323297) ^ 0xC78B42E2)) ^ 0x20A;
  sub_193C6BADC((uint64_t)v2);
}

uint64_t sub_193CBD034(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _QWORD v5[2];
  unsigned int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)a1 + 235795823 * (a1 ^ 0x94AD4959) - 2138963325;
  v6 = v3 - 460628867 * ((2 * (v5 & 0x54A7CF70) - v5 + 727199886) ^ 0x67CEB2F3) + 787;
  v5[0] = v2;
  v5[1] = v1;
  return ((uint64_t (*)(_QWORD *))((char *)*(&off_1E31525C0 + v3) - 8))(v5);
}

uint64_t sub_193CBD104(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_193CBD11C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 24);
  return 0;
}

uint64_t VLxCLgDpiF(int a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;
  _DWORD v5[3];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = (qword_1EE2CD918 ^ qword_1EE2CD9D8) - (_QWORD)&v4;
  qword_1EE2CD9D8 = (45734839 * v1) ^ 0x8C484E3334DB83C7;
  qword_1EE2CD918 = 45734839 * (v1 ^ 0x8C484E3334DB83C7);
  v2 = v5 | 0x664F1BC1;
  v5[2] = -1543737703 * ((v5 & 0x664F1BC1 | ~v2) ^ 0xE744B442) + 633478021 * a1 + 288006799;
  v5[0] = 785 - 1543737703 * ((v5 & 0x664F1BC1 | ~v2) ^ 0xE744B442);
  ((void (*)(_DWORD *))((char *)*(&off_1E31525C0
                                           + ((-73
                                                                            * ((qword_1EE2CD918 + qword_1EE2CD9D8) ^ 0xC7)) ^ byte_193F003D0[byte_193EFC070[(-73 * ((qword_1EE2CD918 + qword_1EE2CD9D8) ^ 0xC7))] ^ 0xE0])
                                           + 119)
                                 - 12))(v5);
  return v5[1] ^ 0xA3259451;
}

uint64_t sub_193CBD288(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_193CBD2A0(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t result;
  _DWORD v11[4];
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = 944348131 * ((-2 - ((a1 | 0xD8AFC5C0) + (~(_DWORD)a1 | 0x27503A3F))) ^ 0x84499E71);
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 8) + v2 - ((2 * (*(_DWORD *)(a1 + 8) + v2) + 1138657672) & 0xDF8BC31E);
  v6 = 831981571 * ((v11 + 350079729 - 2 * ((unint64_t)v11 & 0x14DDCAF1)) ^ 0x8D7C1AD5);
  v7 = *(_DWORD *)(a1 + 32) - v2 - 368400040;
  v8 = *(_DWORD *)(a1 + 32) - v2 - 368398695;
  v9 = v2 + *(_DWORD *)(a1 + 24) - v6 - 449551604;
  v11[2] = v5 + v6 - 1850399149;
  v11[0] = v9;
  v11[1] = v6 ^ v8;
  v14 = v4;
  v12 = v3;
  result = ((uint64_t (*)(_DWORD *))((char *)*(&off_1E31525C0 + v7) - 8))(v11);
  *(_DWORD *)(a1 + 28) = v13;
  return result;
}

uint64_t sub_193CBD404(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 88) = 113;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_193CBD424(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_193CBD43C(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = 268847287 * ((a1 + 2122967827 - 2 * (a1 & 0x7E89EB13)) ^ 0x8123FA3B);
  v3 = *(_DWORD *)(a1 + 28) + v2;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = 1224239923 * (&v10 ^ 0xF2B3FDD7);
  v11 = (*(_DWORD *)(a1 + 24) ^ v2) - v8 - 537141324;
  v10 = v7;
  v16 = v3 + v8 + 504208059;
  v13 = v6;
  v14 = v5;
  v12 = v4;
  result = ((uint64_t (*)(uint64_t *))*(&off_1E31525C0 + (int)(v3 ^ 0xE1F269FC)))(&v10);
  *(_DWORD *)a1 = v15;
  return result;
}

uint64_t sub_193CBD54C(uint64_t result)
{
  unint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  int v11;

  v1 = 2078219279
     * (((result | 0x5DFD0C27FF7F2588) - result + (result & 0xA202F3D80080DA77)) ^ 0xAF1F448D2585B3FCLL);
  v2 = *(_DWORD *)(result + 32) - v1;
  v3 = *(_DWORD *)(result + 4) - v1;
  v4 = *(_QWORD *)(result + 16);
  v5 = v4 ^ v1;
  v6 = *(_DWORD *)(result + 24) - v1;
  v7 = *(_DWORD *)(result + 28) + v1;
  v8 = *(_QWORD *)(result + 40);
  v9 = v4 == v8;
  v10 = v5 > (v8 ^ v1);
  if ((v2 & 1) == 0)
    v10 = v9;
  if (v10)
    v11 = v3;
  else
    v11 = v7;
  *(_DWORD *)result = v11 ^ v6;
  return result;
}

uint64_t sub_193CBD5F4(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;
  int v6;
  BOOL v7;
  uint64_t v8;

  v1 = 235795823 * (((result | 0xBF727C87EDA4C4C9) - result + (result & 0x408D8378125B3B36)) ^ 0xB7C2C67979098D90);
  v2 = *(_QWORD *)(result + 16) ^ v1;
  v3 = *(_QWORD *)result ^ v1;
  v4 = (uint64_t)v2 < (uint64_t)v3;
  v5 = v2 < v3;
  v6 = v4;
  if (((*(_DWORD *)(result + 8) - (_DWORD)v1) & 1) != 0)
    v5 = v6;
  v7 = !v5;
  v8 = 24;
  if (!v7)
    v8 = 36;
  *(_DWORD *)(result + 40) = *(_DWORD *)(result + 32) ^ v1 ^ *(_DWORD *)(result + v8) ^ v1;
  return result;
}

_BYTE *sub_193CBD69C(_BYTE *result, char a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = -(int)result & 7;
  if (v3 > a3)
    LODWORD(v3) = a3;
  switch((int)v3)
  {
    case 1:
      goto LABEL_10;
    case 2:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_7;
    case 5:
      goto LABEL_6;
    case 6:
      goto LABEL_5;
    case 7:
      *result++ = a2;
LABEL_5:
      *result++ = a2;
LABEL_6:
      *result++ = a2;
LABEL_7:
      *result++ = a2;
LABEL_8:
      *result++ = a2;
LABEL_9:
      *result++ = a2;
LABEL_10:
      *result++ = a2;
      break;
    default:
      break;
  }
  v4 = a3 - v3;
  v6 = v4;
  v5 = v4 & 7;
  switch(v6)
  {
    case 0uLL:
      return result;
    case 1uLL:
      goto LABEL_20;
    case 2uLL:
      goto LABEL_19;
    case 3uLL:
      goto LABEL_18;
    case 4uLL:
      goto LABEL_17;
    case 5uLL:
      goto LABEL_16;
    case 6uLL:
      goto LABEL_15;
    case 7uLL:
      *result++ = a2;
LABEL_15:
      *result++ = a2;
LABEL_16:
      *result++ = a2;
LABEL_17:
      *result++ = a2;
LABEL_18:
      *result++ = a2;
LABEL_19:
      *result++ = a2;
LABEL_20:
      *result = a2;
      break;
    default:
      result = (_BYTE *)((uint64_t (*)(void))((char *)&loc_193CBD72C + 4 * byte_193F050F7[(v5 >> 3) & 7]))();
      break;
  }
  return result;
}

void sub_193CBF0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void _handleATCStartupCompletedNotification(uint64_t a1, void *a2)
{
  id v2;
  dispatch_time_t v3;
  id v4;
  _QWORD block[4];
  id v6;

  v2 = a2;
  v3 = dispatch_time(0, 2000000000);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___handleATCStartupCompletedNotification_block_invoke;
  block[3] = &unk_1E3163508;
  v6 = v2;
  v4 = v2;
  dispatch_after(v3, MEMORY[0x1E0C80D38], block);

}

uint64_t ___handleATCStartupCompletedNotification_block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = os_log_create("com.apple.amp.mediaplayer", "Download");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_193B9B000, v2, OS_LOG_TYPE_DEFAULT, "Handling atc startup notification", v4, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "_prefectchAllATDownloads");
}

void sub_193CC609C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

__n128 __Block_byref_object_copy__307(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__308(uint64_t a1)
{
  return std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](a1 + 48);
}

_QWORD *std::shared_ptr<mlcore::QueryResult>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<mlcore::LocalizedSearchQueryResult>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

_QWORD *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E3149E70;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E3149E70;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x19403A1A4);
}

_QWORD *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E3149E70;
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::LocalizedSearchQueryResult>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_193CC65A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3149E70;
  return std::__function::__value_func<void ()(std::shared_ptr<mlcore::LocalizedSearchQueryResult>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v2 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v12 = v2;
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_193CC6734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6mlcore11LibraryView12performQueryINS_20LocalizedSearchQueryEEEvNSt3__110shared_ptrIT_EENS4_INS_11TransactionEEENS3_8functionIFvNS4_INS5_6ResultEEEEEEEUlNS4_INS_11QueryResultEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::LocalizedSearchQuery>(std::shared_ptr<mlcore::LocalizedSearchQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::LocalizedSearchQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2))
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x19403A1A4);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E31484D8, MEMORY[0x1E0DE42D0]);
}

void sub_193CC6F0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

_QWORD *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E3149EC8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E3149EC8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3149EC8;
  return std::__function::__value_func<void ()(std::shared_ptr<mlcore::LocalizedSearchQueryResult>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6mlcore11LibraryView12performQueryINS_5QueryEEEvNSt3__110shared_ptrIT_EENS4_INS_11TransactionEEENS3_8functionIFvNS4_INS5_6ResultEEEEEEEUlNS4_INS_11QueryResultEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::Query>(std::shared_ptr<mlcore::Query>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::Query::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::target_type()
{
}

id MPCreateImageWithDrawing(void *a1, double a2, double a3, double a4)
{
  void (**v7)(id, CGContext *, double, double, double, double);
  double v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  double v13;
  CGColorSpace *DeviceRGB;
  CGContext *v15;
  size_t Width;
  size_t Height;
  CGImage *Image;
  void *v19;

  v7 = a1;
  v8 = fabs(a4);
  if (v8 < 2.22044605e-16)
  {
    objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "scale");
    a4 = v10;

    v8 = fabs(a4);
  }
  v11 = a4;
  if (v8 < 2.22044605e-16)
  {
    objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "scale");
    v11 = v13;

  }
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v15 = CGBitmapContextCreate(0, vcvtpd_u64_f64(a2 * v11), vcvtpd_u64_f64(a3 * v11), 8uLL, 0, DeviceRGB, 0x2002u);
  CGContextSetInterpolationQuality(v15, kCGInterpolationHigh);
  CGContextSetFillColorSpace(v15, DeviceRGB);
  CGColorSpaceRelease(DeviceRGB);
  Width = CGBitmapContextGetWidth(v15);
  Height = CGBitmapContextGetHeight(v15);
  if (v7)
    v7[2](v7, v15, *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), (double)Width, (double)Height);
  Image = CGBitmapContextCreateImage(v15);
  objc_msgSend(MEMORY[0x1E0DC3870], "imageWithCGImage:scale:orientation:", Image, 0, a4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  CGImageRelease(Image);
  CGContextRelease(v15);

  return v19;
}

uint64_t __Block_byref_object_copy__395(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x19403A810](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__396(uint64_t a1)
{

}

void sub_193CC8D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAVPlayerViewControllerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!AVKitLibraryCore_frameworkLibrary)
    AVKitLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!AVKitLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AVKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MPMoviePlayerController.m"), 29, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("AVPlayerViewController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAVPlayerViewControllerClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MPMoviePlayerController.m"), 30, CFSTR("Unable to find class %s"), "AVPlayerViewController");

LABEL_8:
    __break(1u);
  }
  getAVPlayerViewControllerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void MPStoreGetClientToken(void *a1)
{
  MPStoreGetClientTokenForIdentity(0, 0, a1);
}

void MPStoreGetClientTokenForIdentity(void *a1, char a2, void *a3)
{
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v5 = a3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MPStoreGetClientTokenForIdentity_block_invoke;
  v7[3] = &unk_1E3153238;
  v8 = v5;
  v6 = v5;
  MPStoreGetClientTokenStatusForIdentity(a1, a2, v7);

}

void MPStoreGetClientTokenStatusForIdentity(void *a1, char a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  char v11;

  v5 = a1;
  v6 = a3;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0DDC100], "activeAccount");
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(MEMORY[0x1E0DDC108], "defaultIdentityStore");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MPStoreGetClientTokenStatusForIdentity_block_invoke;
  v9[3] = &unk_1E3153260;
  v10 = v6;
  v11 = a2;
  v8 = v6;
  objc_msgSend(v7, "getPropertiesForUserIdentity:completionHandler:", v5, v9);

}

void sub_193CCE26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193CCE33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193CD02B8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 160));
  _Unwind_Resume(a1);
}

void sub_193CD1480(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_193CD151C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1161(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1162(uint64_t a1)
{

}

void sub_193CD2600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL MPHasNominalAmountBeenPlayedForElapsedTime(double a1, double a2, double a3)
{
  double v3;
  double v4;

  v3 = a1 - a2;
  v4 = (a3 - a2) * 0.05;
  if (v4 > 5.0)
    v4 = 5.0;
  return v3 >= v4;
}

BOOL MPShouldIncrementPlayCountForElapsedTime(double a1, double a2, double a3)
{
  double v3;
  double v4;
  _BOOL4 v5;
  double v6;

  v3 = a3 - a2;
  v4 = a3 - a1;
  v5 = v4 <= 10.0;
  if (v3 >= 1200.0)
    v5 = v4 <= 60.0;
  v6 = -v3;
  if (v3 >= 0.0)
    v6 = v3;
  return v6 > 2.22044605e-16 && v5;
}

BOOL MPStoreItemMetadataItemKindIsContainerKind(void *a1)
{
  _BOOL8 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t i;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("album"), 0x1E3165E30, 0x1E3165E50, CFSTR("playlist"), CFSTR("brand"), 0x1E3165ED0, 0x1E31660B0) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v3 = 1;
    v4 = 5;
    while (v3 != 6)
    {
      if (objc_msgSend(a1, "isEqualToString:", *((_QWORD *)&v8 + v3++)))
      {
        v4 = v3 - 2;
        break;
      }
    }
    v2 = v4 < 5;
  }
  for (i = 40; i != -8; i -= 8)

  return v2;
}

void MPStoreItemMetadataItemKindGetPlayabilityInformation(void *a1, BOOL *a2, BOOL *a3)
{
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t i;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("song"), 0x1E3166070, 0x1E3165FF0, CFSTR("uploadedAudio"), CFSTR("uploadedVideo"), 0x1E3166090, 0x1E3165FD0) & 1) == 0)
  {
    v8 = 0;
    while (v8 != 5)
    {
      v9 = v8 + 1;
      v10 = objc_msgSend(a1, "isEqualToString:", *((_QWORD *)&v12 + v8 + 1));
      v8 = v9;
      if ((v10 & 1) != 0)
      {
        v7 = (unint64_t)(v9 - 1) < 5;
        v6 = (v9 & 0x7FFFFFFFFFFFFFFELL) == 2;
        if (a2)
          goto LABEL_10;
        goto LABEL_11;
      }
    }
    v7 = 0;
    v6 = 0;
    if (!a2)
      goto LABEL_11;
    goto LABEL_10;
  }
  v6 = 0;
  v7 = 1;
  if (a2)
LABEL_10:
    *a2 = v7;
LABEL_11:
  if (a3)
    *a3 = v6;
  for (i = 40; i != -8; i -= 8)

}

id MPStoreItemMetadataNumberNormalizeStoreIDValue(void *a1)
{
  id v1;
  id v2;
  void *v3;

  v1 = a1;
  if (_NSIsNSNumber())
  {
    v2 = v1;
  }
  else
  {
    if ((_NSIsNSString() & 1) == 0 && (objc_opt_respondsToSelector() & 1) == 0)
    {
      v3 = 0;
      goto LABEL_7;
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v1, "longLongValue"));
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  v3 = v2;
LABEL_7:

  return v3;
}

id MPStoreItemMetadataYearFromReleaseDate(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (void *)objc_msgSend(v2, "component:fromDate:", 4, v1);

    if (v3)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v3);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

const __CFString *MPShuffleTypeDescription(uint64_t a1)
{
  if (a1 > 1)
  {
    if (a1 != 2)
    {
      if (a1 == 1000)
        return CFSTR("MPShuffleTypeUserDefault");
      return CFSTR("<MPShuffleTypeUnknown>");
    }
    return CFSTR("MPShuffleTypeCollections");
  }
  else
  {
    if (a1)
    {
      if (a1 == 1)
        return CFSTR("MPShuffleTypeItems");
      return CFSTR("<MPShuffleTypeUnknown>");
    }
    return CFSTR("MPShuffleTypeOff");
  }
}

const __CFString *MPRepeatTypeDescription(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("<MPRepeatTypeUnknown>");
  else
    return off_1E3153800[a1];
}

const __CFString *MPNSStringFromQueueLoadAction(uint64_t a1)
{
  const __CFString *v1;
  const __CFString *v2;

  v1 = CFSTR("PrepareToPlay");
  v2 = CFSTR("None");
  if (a1)
    v2 = 0;
  if (a1 != 10)
    v1 = v2;
  if (a1 == 20)
    return CFSTR("Play");
  else
    return v1;
}

const __CFString *MPNSStringForMPActiveRouteType(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("Proactive");
  else
    return CFSTR("User Selected");
}

void sub_193CD7AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193CD8FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193CD9A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_193CDA0D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_193CDA8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,id location)
{
  uint64_t v47;

  _Block_object_dispose((const void *)(v47 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_193CDAE28(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2337(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2338(uint64_t a1)
{

}

void sub_193CDB5B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_193CDB658(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

_QWORD *__Block_byref_object_copy__2440(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__2441(uint64_t a1)
{
  std::__tree<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::__map_value_compare<long long,std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>>>::destroy(*(_QWORD **)(a1 + 56));
}

uint64_t __Block_byref_object_copy__64(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t __Block_byref_object_copy__67(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__68(uint64_t a1)
{

}

void sub_193CDC69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;
  uint64_t v56;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a44);

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v56 - 248);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v56 - 232);

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_120c54_ZTSNSt3__110shared_ptrIN6mlcore17EntityQueryResultEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(result + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(result + 128) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_120c54_ZTSNSt3__110shared_ptrIN6mlcore17EntityQueryResultEEE(uint64_t a1)
{
  return std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](a1 + 120);
}

uint64_t mlcore::Entity::valueForProperty<int>(uint64_t a1, ModelPropertyBase *a2)
{
  _QWORD *v4;
  void *exception;
  std::logic_error *v7;
  std::string v8;

  if (!mlcore::PropertyCache::hasValueForProperty((mlcore::PropertyCache *)(a1 + 8), a2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19403A144](exception, "faulting not implemented yet");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v4 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::find<mlcore::ModelProperty<long long> *>((_QWORD *)(a1 + 136), (unint64_t)a2);
  if (!v4)
  {
    v7 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr, ModelPropertyBase *))(*(_QWORD *)a2 + 40))(&v8, a2);
    std::logic_error::logic_error(v7, &v8);
    v7->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
    __cxa_throw(v7, (struct type_info *)off_1E31484E0, MEMORY[0x1E0DE42E0]);
  }
  return *((unsigned int *)v4 + 6);
}

void sub_193CDCAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_193CDCB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::__map_value_compare<long long,std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD v13[2];
  char v14;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v9 <= a2)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v10 = (uint64_t *)operator new(0x38uLL);
    v13[1] = v6;
    v11 = *a3;
    v10[5] = 0;
    v10[6] = 0;
    v10[4] = v11;
    v14 = 1;
    std::__tree<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::__map_value_compare<long long,std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>>>::__insert_node_at(a1, (uint64_t)v8, v7, v10);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13);
    return v10;
  }
  return (uint64_t *)v8;
}

void sub_193CDCEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<mlcore::UnaryPredicate<int>,std::allocator<mlcore::UnaryPredicate<int>>,mlcore::ModelProperty<int> *&,mlcore::UnaryOperator,void>(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = operator new(0x30uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E314A758;
  result = mlcore::UnaryPredicate<int>::UnaryPredicate();
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_193CDCF88(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  v6 = (char *)operator new(0x98uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_1E314A608;
  v10 = *a3;
  *a3 = 0u;
  MEMORY[0x194038E78](v6 + 24, a2, &v10);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *a1 = v6 + 24;
  a1[1] = v6;
}

void sub_193CDD0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<std::vector<mlcore::PropertyCache>>::shared_ptr[abi:ne180100]<std::vector<mlcore::PropertyCache>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  void **v6;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E314AC98;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  std::unique_ptr<std::vector<mlcore::PropertyCache>>::reset[abi:ne180100](&v6);
  return a1;
}

void sub_193CDD154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::vector<mlcore::PropertyCache>>::reset[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::valueForProperty(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  std::logic_error *exception;
  std::string v6;

  v3 = std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::find<mlcore::ModelProperty<long long> *>((_QWORD *)(a1 + 168), a2);
  if (!v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr, unint64_t))(*(_QWORD *)a2 + 40))(&v6, a2);
    std::logic_error::logic_error(exception, &v6);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E31484E0, MEMORY[0x1E0DE42E0]);
  }
  return v3[3];
}

void sub_193CDD204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t std::vector<mlcore::PropertyCache>::__push_back_slow_path<mlcore::PropertyCache const&>(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v14;
  unint64_t v15;
  _BYTE v16[24];
  _QWORD *v17;

  v1 = 0x84BDA12F684BDA13 * ((uint64_t)(a1[1] - *a1) >> 3);
  v2 = v1 + 1;
  if (v1 + 1 > 0x12F684BDA12F684)
    std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
  v4 = a1 + 2;
  if (0x97B425ED097B426 * ((uint64_t)(a1[2] - *a1) >> 3) > v2)
    v2 = 0x97B425ED097B426 * ((uint64_t)(a1[2] - *a1) >> 3);
  if (0x84BDA12F684BDA13 * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x97B425ED097B42)
    v5 = 0x12F684BDA12F684;
  else
    v5 = v2;
  v17 = v4;
  if (v5)
    v5 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::PropertyCache>>(v5);
  else
    v6 = 0;
  v15 = v5;
  *(_QWORD *)v16 = v5 + 216 * v1;
  *(_QWORD *)&v16[16] = v5 + 216 * v6;
  mlcore::PropertyCache::PropertyCache();
  *(_QWORD *)&v16[8] = *(_QWORD *)v16 + 216;
  v8 = *a1;
  v7 = a1[1];
  for (i = 216; v7 + i - 216 != v8; i -= 216)
    mlcore::PropertyCache::PropertyCache();
  v10 = a1[2];
  v11 = *(_OWORD *)&v16[8];
  v14 = *(_QWORD *)&v16[8];
  v12 = *(_OWORD *)a1;
  *a1 = *(_QWORD *)v16 + i - 216;
  *(_OWORD *)v16 = v12;
  *(_OWORD *)(a1 + 1) = v11;
  *(_QWORD *)&v16[16] = v10;
  v15 = v12;
  std::__split_buffer<mlcore::PropertyCache>::~__split_buffer((uint64_t)&v15);
  return v14;
}

void sub_193CDD398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<mlcore::PropertyCache>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::EntityQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A8A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::EntityQueryResult>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A8A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::EntityQueryResult>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::vector<mlcore::Section>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 25) < 0)
          operator delete(*(v4 - 6));
        v4 -= 6;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<mlcore::Section>,mlcore::Section*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 25) < 0)
        operator delete(*(void **)(v3 - 48));
      v3 -= 48;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::Section>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void std::__shared_ptr_emplace<std::vector<mlcore::Section>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AC28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<mlcore::Section>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AC28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

void std::__shared_ptr_emplace<std::vector<mlcore::Section>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<mlcore::Section>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::PropertyCache>>(unint64_t a1)
{
  if (a1 >= 0x12F684BDA12F685)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(216 * a1);
}

void ***std::unique_ptr<std::vector<mlcore::PropertyCache>>::reset[abi:ne180100](void ***result)
{
  void **v1;
  void **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = v1;
    std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x19403A1A4);
  }
  return result;
}

void std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 216;
      v7 = v4 - 216;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 216;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_pointer<std::vector<mlcore::PropertyCache> *,std::shared_ptr<std::vector<mlcore::PropertyCache>>::__shared_ptr_default_delete<std::vector<mlcore::PropertyCache>,std::vector<mlcore::PropertyCache>>,std::allocator<std::vector<mlcore::PropertyCache>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_pointer<std::vector<mlcore::PropertyCache> *,std::shared_ptr<std::vector<mlcore::PropertyCache>>::__shared_ptr_default_delete<std::vector<mlcore::PropertyCache>,std::vector<mlcore::PropertyCache>>,std::allocator<std::vector<mlcore::PropertyCache>>>::__on_zero_shared(uint64_t result)
{
  void **v1;

  if (*(_QWORD *)(result + 24))
  {
    v1 = *(void ***)(result + 24);
    std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](&v1);
    JUMPOUT(0x19403A1A4);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::vector<mlcore::PropertyCache> *,std::shared_ptr<std::vector<mlcore::PropertyCache>>::__shared_ptr_default_delete<std::vector<mlcore::PropertyCache>,std::vector<mlcore::PropertyCache>>,std::allocator<std::vector<mlcore::PropertyCache>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x8000000193F0BC9FLL))
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_emplace<mlcore::EntityQuery>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::EntityQuery>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::EntityQuery>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::UnaryPredicate<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::UnaryPredicate<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A758;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

void std::unique_ptr<std::__tree_node<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 40);
    operator delete(v1);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

char *std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<long long>,std::allocator<mlcore::ComparisonPredicate<long long>>,mlcore::ModelProperty<long long> *&,mlcore::ComparisonOperator,long long const&,void>(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = operator new(0x48uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E314A950;
  result = mlcore::ComparisonPredicate<long long>::ComparisonPredicate();
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_193CDDAF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::__unordered_map_hasher<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::hash<mlcore::ModelProperty<long long> *>,std::equal_to<mlcore::ModelProperty<long long> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<long long> *,std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>,std::equal_to<mlcore::ModelProperty<long long> *>,std::hash<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<long long> *,long long>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> * const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v23)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = a1 + 4;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v31 = *(_QWORD **)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v32)
  {
    *i = *v32;
LABEL_72:
    *v32 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v31[v3] = a1 + 4;
  if (*i)
  {
    v33 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_193CDDF10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *mlcore::PropertyCacheBase<mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  *a1 = &off_1E3149BC0;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void mlcore::PropertyCacheBase<mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  *a1 = &off_1E3149BC0;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x19403A1A4);
}

_QWORD *mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  *a1 = &off_1E3149BE0;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::~__hash_table((uint64_t)(a1 + 6));
  *a1 = &off_1E3149BC0;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void mlcore::PropertyCacheBase<std::string,mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  *a1 = &off_1E3149BE0;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::__unordered_map_hasher<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::hash<mlcore::ModelProperty<std::string> *>,std::equal_to<mlcore::ModelProperty<std::string> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<std::string> *,std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>,std::equal_to<mlcore::ModelProperty<std::string> *>,std::hash<mlcore::ModelProperty<std::string> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<std::string> *,std::string>>>::~__hash_table((uint64_t)(a1 + 6));
  *a1 = &off_1E3149BC0;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::__unordered_map_hasher<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<mediaplatform::Data> *,std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>,std::equal_to<mlcore::ModelProperty<mediaplatform::Data> *>,std::hash<mlcore::ModelProperty<mediaplatform::Data> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<mediaplatform::Data> *,mediaplatform::Data>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x19403A1A4);
}

void mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(a1);
  JUMPOUT(0x19403A1A4);
}

_QWORD *mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  *a1 = &off_1E3149C20;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::~__hash_table((uint64_t)(a1 + 16));
  return mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(a1);
}

void mlcore::PropertyCacheBase<int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  *a1 = &off_1E3149C20;
  std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::~__hash_table((uint64_t)(a1 + 16));
  mlcore::PropertyCacheBase<double,std::string,mediaplatform::Data>::~PropertyCacheBase(a1);
  JUMPOUT(0x19403A1A4);
}

void mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(_QWORD *a1)
{
  mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(a1);
  JUMPOUT(0x19403A1A4);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

_QWORD *std::shared_ptr<std::vector<mlcore::Section>>::shared_ptr[abi:ne180100]<std::vector<mlcore::Section>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  void **v6;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E314ACD0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  std::unique_ptr<std::vector<mlcore::Section>>::reset[abi:ne180100](&v6);
  return a1;
}

void sub_193CDE19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::vector<mlcore::Section>>::reset[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_193CDE238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_193CDE2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193CDE5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)(v30 + 8) = v31;
  if (a14 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);

  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

std::vector<std::string>::pointer std::vector<std::string>::__push_back_slow_path<std::string const&>(std::vector<std::string> *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  std::allocator<std::string> *p_end_cap;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::__split_buffer<std::string>::pointer end;
  __int128 v11;
  std::vector<std::string>::pointer v12;
  std::__split_buffer<std::string> __v;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3)
    v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7)
  {
    v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  end = v9 + v2;
  __v.__first_ = v9;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v9[v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v11 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
  v12 = a1->__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v12;
}

void sub_193CDE830(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

_QWORD *__copy_helper_block_ea8_32c75_ZTSNSt3__110shared_ptrINS_6vectorIN6mlcore7SectionENS_9allocatorIS3_EEEEEE48c107_ZTSNSt3__110shared_ptrINS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c75_ZTSNSt3__110shared_ptrINS_6vectorIN6mlcore7SectionENS_9allocatorIS3_EEEEEE48c107_ZTSNSt3__110shared_ptrINS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 32;
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<mlcore::Section>,std::reverse_iterator<mlcore::Section*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      v3 += 48;
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AC60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AC60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t __copy_helper_block_ea8_64c82_ZTSNSt3__110shared_ptrINS_6vectorIN6mlcore13PropertyCacheENS_9allocatorIS3_EEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 72) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_64c82_ZTSNSt3__110shared_ptrINS_6vectorIN6mlcore13PropertyCacheENS_9allocatorIS3_EEEEEE(uint64_t a1)
{
  return std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](a1 + 64);
}

void sub_193CDEAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ***std::unique_ptr<std::vector<mlcore::Section>>::reset[abi:ne180100](void ***result)
{
  void **v1;
  void **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = v1;
    std::vector<mlcore::Section>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x19403A1A4);
  }
  return result;
}

void std::__shared_ptr_pointer<std::vector<mlcore::Section> *,std::shared_ptr<std::vector<mlcore::Section>>::__shared_ptr_default_delete<std::vector<mlcore::Section>,std::vector<mlcore::Section>>,std::allocator<std::vector<mlcore::Section>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_pointer<std::vector<mlcore::Section> *,std::shared_ptr<std::vector<mlcore::Section>>::__shared_ptr_default_delete<std::vector<mlcore::Section>,std::vector<mlcore::Section>>,std::allocator<std::vector<mlcore::Section>>>::__on_zero_shared(uint64_t result)
{
  void **v1;

  if (*(_QWORD *)(result + 24))
  {
    v1 = *(void ***)(result + 24);
    std::vector<mlcore::Section>::__destroy_vector::operator()[abi:ne180100](&v1);
    JUMPOUT(0x19403A1A4);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::vector<mlcore::Section> *,std::shared_ptr<std::vector<mlcore::Section>>::__shared_ptr_default_delete<std::vector<mlcore::Section>,std::vector<mlcore::Section>>,std::allocator<std::vector<mlcore::Section>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x8000000193F097D7))
    return a1 + 24;
  else
    return 0;
}

void sub_193CE0C0C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 112));
  objc_destroyWeak((id *)(v5 - 104));
  _Unwind_Resume(a1);
}

void sub_193CE1330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  id *v22;
  id *v23;
  uint64_t v24;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  _Block_object_dispose(&a22, 8);
  objc_destroyWeak((id *)(v24 - 72));
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2805(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2806(uint64_t a1)
{

}

void sub_193CE338C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3218(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3219(uint64_t a1)
{

}

BOOL MPPCompoundPredicateReadFrom(void *a1, void *a2)
{
  id v3;
  _BYTE *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  MPPMediaPredicate *v18;
  _BOOL8 v19;

  v3 = a1;
  v4 = a2;
  v5 = (int *)MEMORY[0x1E0D82BF0];
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&v4[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v4[*MEMORY[0x1E0D82BD8]])
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (v4[*v7])
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v5;
        v13 = *(_QWORD *)&v4[v12];
        if (v13 == -1 || v13 >= *(_QWORD *)&v4[*v6])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v13);
        *(_QWORD *)&v4[v12] = v13 + 1;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        if (v10++ >= 9)
        {
          LODWORD(v11) = 0;
          v16 = v4[*v7];
          goto LABEL_14;
        }
      }
      v4[*v7] = 1;
LABEL_12:
      v16 = v4[*v7];
      if (v4[*v7])
        LODWORD(v11) = 0;
LABEL_14:
      if (v16 || (v11 & 7) == 4)
        break;
      if ((v11 & 0x7FFF8) == 8)
      {
        v18 = objc_alloc_init(MPPMediaPredicate);
        objc_msgSend(v3, "addPredicates:", v18);
        if (!PBReaderPlaceMark() || !MPPMediaPredicateReadFrom(v18, v4))
        {

LABEL_27:
          v19 = 0;
          goto LABEL_25;
        }
        PBReaderRecallMark();

      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&v4[*v5] < *(_QWORD *)&v4[*v6]);
  }
  v19 = v4[*v7] == 0;
LABEL_25:

  return v19;
}

void sub_193CEB420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4468(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4469(uint64_t a1)
{

}

void sub_193CEDEB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4571(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4572(uint64_t a1)
{

}

void sub_193CEF058(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_193CEFDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193CF35D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193CF4F5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_193CF5068(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193CF5238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_193CF5384(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193CF5400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193CF56E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  std::__shared_weak_count *v24;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void **p_p;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;

  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v27);

  _Block_object_dispose(&a23, 8);
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100](&__p);

  if (a2 == 2)
  {
    v28 = __cxa_begin_catch(a1);
    v29 = (void *)MEMORY[0x1E0C99DA0];
    v30 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a23);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v28 + 24))(&__p, v28, &a23);
    if (a14 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v30, "stringWithUTF8String:", p_p);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v32, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();

    if (a14 < 0)
      operator delete(__p);
    objc_exception_throw(v33);
  }
  if (a2 == 1)
  {
    v34 = __cxa_begin_catch(a1);
    v35 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v34 + 16))(v34));
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v36, 0);
    v37 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v37);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__4988(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__4989(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_193CF5ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<mlcore::LocalizedSearchScope>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_193CF5CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a13);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::LocalizedSearchScope>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A9C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::LocalizedSearchScope>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A9C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::LocalizedSearchScope>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 72);
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::vector<std::shared_ptr<mlcore::LocalizedSearchScope>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int64x2_t v24;
  uint64_t v25;
  void *v26;

  v4 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    v10 = (v4 - *a1) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
    v12 = v5 - (_QWORD)*a1;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v13);
    v16 = &v14[16 * v10];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v21 = *a1;
    v20 = a1[1];
    if (v20 == *a1)
    {
      v24 = vdupq_n_s64((unint64_t)v20);
      v22 = &v14[16 * v10];
    }
    else
    {
      v22 = &v14[16 * v10];
      do
      {
        v23 = *((_OWORD *)v20 - 1);
        v20 -= 16;
        *((_OWORD *)v22 - 1) = v23;
        v22 -= 16;
        *(_QWORD *)v20 = 0;
        *((_QWORD *)v20 + 1) = 0;
      }
      while (v20 != v21);
      v24 = *(int64x2_t *)a1;
    }
    v9 = v16 + 16;
    *a1 = v22;
    a1[1] = v16 + 16;
    a1[2] = &v14[16 * v15];
    v25 = v24.i64[1];
    v26 = (void *)v24.i64[0];
    while ((void *)v25 != v26)
      v25 = std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v25 - 16);
    if (v26)
      operator delete(v26);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v4 = *(_QWORD *)a2;
    *((_QWORD *)v4 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v4 + 16;
  }
  a1[1] = v9;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

void sub_193CF7A38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193CF92DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193CF9490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_193CF961C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193CF97D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5461(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5462(uint64_t a1)
{

}

void sub_193CFB0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193CFB25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_193CFB3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193CFB59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5654(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5655(uint64_t a1)
{

}

void sub_193CFDFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5956(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5957(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy__6014(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6015(uint64_t a1)
{

}

__CFString *NSStringFromMPObjectDatabaseErrorCode(uint64_t a1)
{
  __CFString *v1;

  if (!a1)
    return CFSTR("Unknown");
  if (a1 == 1)
  {
    v1 = CFSTR("MissingPropertySetMapping");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UnknownCode/%lld"), a1);
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

id MPPCreateFoundationObjectFromPredicateValue(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = a1;
  switch(objc_msgSend(v1, "type"))
  {
    case 1u:
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v1, "integerPredicateValue"));
      v2 = objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    case 2u:
      v4 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v1, "doublePredicateValue");
      objc_msgSend(v4, "numberWithDouble:");
      v2 = objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    case 3u:
      v5 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v1, "floatPredicateValue");
      objc_msgSend(v5, "numberWithFloat:");
      v2 = objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    case 4u:
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v1, "BOOLPredicateValue"));
      v2 = objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    case 5u:
      objc_msgSend(v1, "stringPredicateValue");
      v2 = objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    case 6u:
      objc_msgSend(v1, "bytesPredicateValue");
      v2 = objc_claimAutoreleasedReturnValue();
LABEL_9:
      v3 = (void *)v2;
      break;
    default:
      v3 = 0;
      break;
  }
  v6 = (void *)objc_msgSend(v3, "copy");

  return v6;
}

MPPMediaPredicateValue *MPPCreatePredicateValueFromFoundationObject(void *a1)
{
  id v1;
  MPPMediaPredicateValue *v2;
  id v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v1 = a1;
  v2 = objc_alloc_init(MPPMediaPredicateValue);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v3 = objc_retainAutorelease(v1);
    v4 = *(char *)objc_msgSend(v3, "objCType");
    if (v4 <= 80)
    {
      if ((v4 - 66) >= 2 && v4 != 73 && v4 != 76)
        goto LABEL_17;
    }
    else
    {
      v5 = (v4 - 83);
      if (v5 > 0x20)
      {
LABEL_19:
        if (v4 != 81)
          goto LABEL_17;
        -[MPPMediaPredicateValue setType:](v2, "setType:", 1);
        v6 = objc_msgSend(v3, "unsignedLongLongValue");
        goto LABEL_16;
      }
      if (((1 << (v4 - 83)) & 0x142410001) == 0)
      {
        if (v5 == 17)
        {
          -[MPPMediaPredicateValue setType:](v2, "setType:", 2);
          objc_msgSend(v3, "doubleValue");
          -[MPPMediaPredicateValue setDoublePredicateValue:](v2, "setDoublePredicateValue:");
          goto LABEL_17;
        }
        if (v5 == 19)
        {
          -[MPPMediaPredicateValue setType:](v2, "setType:", 3);
          objc_msgSend(v3, "floatValue");
          -[MPPMediaPredicateValue setFloatPredicateValue:](v2, "setFloatPredicateValue:");
LABEL_17:

          goto LABEL_18;
        }
        goto LABEL_19;
      }
    }
    -[MPPMediaPredicateValue setType:](v2, "setType:", 1);
    v6 = objc_msgSend(v3, "longLongValue");
LABEL_16:
    -[MPPMediaPredicateValue setIntegerPredicateValue:](v2, "setIntegerPredicateValue:", v6);
    goto LABEL_17;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[MPPMediaPredicateValue setType:](v2, "setType:", 5);
    -[MPPMediaPredicateValue setStringPredicateValue:](v2, "setStringPredicateValue:", v1);
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[MPPMediaPredicateValue setType:](v2, "setType:", 6);
      -[MPPMediaPredicateValue setBytesPredicateValue:](v2, "setBytesPredicateValue:", v1);
    }
  }
LABEL_18:

  return v2;
}

id MPPCreateMediaPredicateFromProtocolPredicateAndLibrary(void *a1, void *a2)
{
  id v3;
  id v4;
  objc_class *v5;
  void *v6;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "hasType")
    && objc_msgSend(v3, "type") - 1 <= 4
    && (v5 = (objc_class *)objc_opt_class()) != 0)
  {
    v6 = (void *)objc_msgSend([v5 alloc], "initWithProtobufferDecodableObject:library:", v3, v4);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_193D01410(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193D01A94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_193D01E70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193D02088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_193D020F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193D0238C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void MPVolumeSettingsAlertHide(void)
{
  void *v0;
  void *v1;
  id v2;

  if ((__UIApplicationLinkedOnOrAfter() & 1) == 0)
  {
    v0 = (void *)_volumeSettingsController;
    if (_volumeSettingsController)
    {
      _volumeSettingsController = 0;
      v2 = v0;

      objc_msgSend(v2, "dismissAlertController");
      v1 = (void *)_alertWindow;
      _alertWindow = 0;

    }
  }
}

void MPVolumeSettingsAlertShow(void)
{
  id v0;
  uint64_t v1;
  void *v2;
  void *v3;
  MPVolumeSettingsController *v4;
  void *v5;
  id v6;

  if ((__UIApplicationLinkedOnOrAfter() & 1) == 0 && !_alertWindow)
  {
    objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    v0 = objc_alloc(MEMORY[0x1E0DC3F98]);
    objc_msgSend(v6, "bounds");
    v1 = objc_msgSend(v0, "initWithFrame:");
    v2 = (void *)_alertWindow;
    _alertWindow = v1;

    objc_msgSend(MEMORY[0x1E0DC3658], "clearColor");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)_alertWindow, "setBackgroundColor:", v3);

    v4 = -[MPVolumeSettingsController initWithAudioCategory:]([MPVolumeSettingsController alloc], "initWithAudioCategory:", 0);
    v5 = (void *)_volumeSettingsController;
    _volumeSettingsController = (uint64_t)v4;

    objc_msgSend((id)_volumeSettingsController, "presentAlertControllerInWindow:", _alertWindow);
  }
}

BOOL MPVolumeSettingsAlertIsVisible(void)
{
  return _volumeSettingsController != 0;
}

void sub_193D07DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v34;
  void *v35;
  void *v36;
  void **p_p;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;

  if (a2 == 2)
  {
    v34 = __cxa_begin_catch(a1);
    v35 = (void *)MEMORY[0x1E0C99DA0];
    v36 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a15);
    (*(void (**)(void ***__return_ptr, void *, void **))(*(_QWORD *)v34 + 24))(&__p, v34, &a15);
    if (a30 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v36, "stringWithUTF8String:", p_p);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v38, 0);
    v39 = (id)objc_claimAutoreleasedReturnValue();

    if (a30 < 0)
      operator delete(__p);
    objc_exception_throw(v39);
  }
  if (a2 == 1)
  {
    v40 = __cxa_begin_catch(a1);
    v41 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40));
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v42, 0);
    v43 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v43);
  }
  _Unwind_Resume(a1);
}

void sub_193D08140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v24;
  void *v25;
  void *v26;
  void **p_p;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    v24 = __cxa_begin_catch(a1);
    v25 = (void *)MEMORY[0x1E0C99DA0];
    v26 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a9);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v24 + 24))(&__p, v24, &a9);
    if (a21 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v26, "stringWithUTF8String:", p_p);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v28, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();

    if (a21 < 0)
      operator delete(__p);
    objc_exception_throw(v29);
  }
  if (a2 == 1)
  {
    v30 = __cxa_begin_catch(a1);
    v31 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v32, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v33);
  }

  _Unwind_Resume(a1);
}

void sub_193D08344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;
  void **p_p;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;

  if (a2 == 2)
  {
    v21 = __cxa_begin_catch(exception_object);
    v22 = (void *)MEMORY[0x1E0C99DA0];
    v23 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a9);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v21 + 24))(&__p, v21, &a9);
    if (a21 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v23, "stringWithUTF8String:", p_p);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v25, 0);
    v26 = (id)objc_claimAutoreleasedReturnValue();

    if (a21 < 0)
      operator delete(__p);
    objc_exception_throw(v26);
  }
  if (a2 == 1)
  {
    v27 = __cxa_begin_catch(exception_object);
    v28 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v27 + 16))(v27));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v29, 0);
    v30 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_193D08638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v27;
  void *v28;
  void *v29;
  void **p_p;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;

  if (a2 == 2)
  {
    v27 = __cxa_begin_catch(a1);
    v28 = (void *)MEMORY[0x1E0C99DA0];
    v29 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a9);
    (*(void (**)(void ***__return_ptr, void *, void **))(*(_QWORD *)v27 + 24))(&__p, v27, &a9);
    if (a24 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v29, "stringWithUTF8String:", p_p);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v31, 0);
    v32 = (id)objc_claimAutoreleasedReturnValue();

    if (a24 < 0)
      operator delete(__p);
    objc_exception_throw(v32);
  }
  if (a2 == 1)
  {
    v33 = __cxa_begin_catch(a1);
    v34 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33));
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v35, 0);
    v36 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v36);
  }
  _Unwind_Resume(a1);
}

void sub_193D08A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v24;
  void *v25;
  void *v26;
  void **p_p;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;

  if (a2 == 2)
  {
    v24 = __cxa_begin_catch(a1);
    v25 = (void *)MEMORY[0x1E0C99DA0];
    v26 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a9);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v24 + 24))(&__p, v24, &a9);
    if (a21 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v26, "stringWithUTF8String:", p_p);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v28, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();

    if (a21 < 0)
      operator delete(__p);
    objc_exception_throw(v29);
  }
  if (a2 == 1)
  {
    v30 = __cxa_begin_catch(a1);
    v31 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v32, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v33);
  }
  _Unwind_Resume(a1);
}

void sub_193D08B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193D08BD8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_193D08D14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193D08EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  void *v27;
  void *v28;
  void *v29;
  void **p_p;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;

  if (a2 == 2)
  {
    v27 = __cxa_begin_catch(a1);
    v28 = (void *)MEMORY[0x1E0C99DA0];
    v29 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a11);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v27 + 24))(&__p, v27, &a11);
    if (a23 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v29, "stringWithUTF8String:", p_p);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v31, 0);
    v32 = (id)objc_claimAutoreleasedReturnValue();

    if (a23 < 0)
      operator delete(__p);
    objc_exception_throw(v32);
  }
  if (a2 == 1)
  {
    v33 = __cxa_begin_catch(a1);
    v34 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33));
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v35, 0);
    v36 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v36);
  }
  _Unwind_Resume(a1);
}

void sub_193D0914C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193D0A114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void **__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v22;
  void *v23;
  void *v24;
  void **p_p;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;

  if (a2 == 2)
  {
    v22 = __cxa_begin_catch(a1);
    v23 = (void *)MEMORY[0x1E0C99DA0];
    v24 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a20);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v22 + 24))(&__p, v22, &a20);
    if (a19 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v24, "stringWithUTF8String:", p_p);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v26, 0);
    v27 = (id)objc_claimAutoreleasedReturnValue();

    if (a19 < 0)
      operator delete(__p);
    objc_exception_throw(v27);
  }
  if (a2 == 1)
  {
    v28 = __cxa_begin_catch(a1);
    v29 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28));
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v30, 0);
    v31 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v31);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<long long,unsigned long>,std::__map_value_compare<long long,std::__value_type<long long,unsigned long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,unsigned long>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,unsigned long>,std::__map_value_compare<long long,std::__value_type<long long,unsigned long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,unsigned long>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,unsigned long>,std::__map_value_compare<long long,std::__value_type<long long,unsigned long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,unsigned long>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<long long,unsigned long>,std::__map_value_compare<long long,std::__value_type<long long,unsigned long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,unsigned long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::vector<mlcore::PropertyCache>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E31484E0, MEMORY[0x1E0DE42E0]);
}

void sub_193D0A5A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void sub_193D0A634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_193D0A6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_193D0B6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D0D148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_193D0D96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8481(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8482(uint64_t a1)
{

}

void sub_193D0EEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D0F4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  id *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  objc_destroyWeak(v10);
  objc_destroyWeak((id *)(v11 - 136));
  _Unwind_Resume(a1);
}

void sub_193D0F7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D0FDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  _Block_object_dispose(&a49, 8);
  _Block_object_dispose((const void *)(v49 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_193D108F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193D11F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a69;

  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Unwind_Resume(a1);
}

void sub_193D1386C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8917(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8918(uint64_t a1)
{

}

void sub_193D151CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void _MPServerObjectDatabaseMetadataImportEnumerateObjects(void *a1, _QWORD *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, void *a8)
{
  id v15;
  id v16;
  uint64_t (**v17)(id, void *, void *, void *, id, id, _QWORD, id *);
  BOOL v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  BOOL v40;
  int v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  _QWORD v51[4];
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint64_t (**v59)(id, void *, void *, void *, id, id, _QWORD, id *);
  BOOL v60;
  id v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[128];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v15 = a1;
  v50 = a3;
  v16 = a4;
  v49 = a5;
  v48 = a6;
  v17 = a8;
  v18 = a2 != 0;
  if (v16)
  {
    v19 = v16;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 10);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v20 = v19;
  if (_NSIsNSArray())
  {
    v47 = v15;
    v21 = v15;
    v22 = v21;
    v46 = v16;
    if (a2)
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v21, "count"));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v23 = 0;
    }
    v65 = 0u;
    v66 = 0u;
    v64 = 0u;
    v63 = 0u;
    v30 = v22;
    v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v63, v67, 16);
    if (v31)
    {
      v32 = v31;
      v33 = 0;
      v34 = *(_QWORD *)v64;
      do
      {
        for (i = 0; i != v32; ++i)
        {
          if (*(_QWORD *)v64 != v34)
            objc_enumerationMutation(v30);
          v36 = v33 + i;
          v37 = *(_QWORD *)(*((_QWORD *)&v63 + 1) + 8 * i);
          if (a2)
          {
            v62 = 0;
            _MPServerObjectDatabaseMetadataImportEnumerateObjects(v37, &v62, v50, v20, v49, v48, v36, v17);
            v38 = v62;
            objc_msgSend(v23, "addObject:", v38);

          }
          else
          {
            _MPServerObjectDatabaseMetadataImportEnumerateObjects(v37, 0, v50, v20, v49, v48, v36, v17);
          }
        }
        v33 += i;
        v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v63, v67, 16);
      }
      while (v32);
    }

    if (a2)
      *a2 = objc_retainAutorelease(v23);

LABEL_36:
    v16 = v46;
    v15 = v47;
    goto LABEL_37;
  }
  if (_NSIsNSDictionary())
  {
    v24 = v15;
    v25 = v24;
    v47 = v15;
    if (a2)
    {
      v26 = (void *)MEMORY[0x1E0C99E08];
      v27 = objc_msgSend(v24, "count");
      v28 = v26;
      v18 = a2 != 0;
      objc_msgSend(v28, "dictionaryWithCapacity:", v27);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v29 = 0;
    }
    objc_msgSend(v25, "objectForKeyedSubscript:", v50, v16);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v39, "length") && (unint64_t)objc_msgSend(v25, "count") >= 3)
    {
      v40 = v18;
      v61 = 0;
      v41 = v17[2](v17, v39, v25, v20, v49, v48, a7, &v61);
      v42 = v61;
      objc_msgSend(v29, "setObject:forKeyedSubscript:", v42, CFSTR("🌚_identifierSet"));
      if (v41)
        objc_msgSend(v29, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("🌚_didImportObject"));
      v18 = v40;
    }
    else
    {
      v42 = 0;
    }
    v51[0] = MEMORY[0x1E0C809B0];
    v51[1] = 3221225472;
    v51[2] = ___MPServerObjectDatabaseMetadataImportEnumerateObjects_block_invoke;
    v51[3] = &unk_1E3154948;
    v43 = v29;
    v52 = v43;
    v53 = v20;
    v60 = v18;
    v54 = v50;
    v55 = v39;
    v56 = v49;
    v44 = v42;
    v57 = v44;
    v58 = v48;
    v59 = v17;
    v45 = v39;
    objc_msgSend(v25, "enumerateKeysAndObjectsUsingBlock:", v51);
    if (a2)
      *a2 = objc_retainAutorelease(v43);

    goto LABEL_36;
  }
  if (a2)
    *a2 = objc_retainAutorelease(v15);
LABEL_37:

}

void sub_193D16AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9313(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__9314(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 48);
}

void ___ZL26_MPMLCopyLanguageResourcesv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  void *__p[2];
  char v12;
  void *v13[2];
  uint64_t v14;
  void **v15;

  v5 = a2;
  v6 = objc_retainAutorelease(a3);
  std::string::basic_string[abi:ne180100]<0>(v13, (char *)objc_msgSend(v6, "UTF8String"));
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = objc_retainAutorelease(v5);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v8, "UTF8String"));
  v15 = __p;
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7 + 48, (unsigned __int8 *)__p, (__int128 **)&v15);
  v10 = v9 + 40;
  if ((char)v9[63] < 0)
    operator delete(*(void **)v10);
  *(_OWORD *)v10 = *(_OWORD *)v13;
  *((_QWORD *)v10 + 2) = v14;
  HIBYTE(v14) = 0;
  LOBYTE(v13[0]) = 0;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v13[0]);
  }

}

void sub_193D18538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void ___ZL26_MPMLCopyLanguageResourcesv_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  void *__p[2];
  char v12;
  void *v13[2];
  uint64_t v14;
  void **v15;

  v5 = a2;
  v6 = objc_retainAutorelease(a3);
  std::string::basic_string[abi:ne180100]<0>(v13, (char *)objc_msgSend(v6, "UTF8String"));
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = objc_retainAutorelease(v5);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v8, "UTF8String"));
  v15 = __p;
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7 + 48, (unsigned __int8 *)__p, (__int128 **)&v15);
  v10 = v9 + 40;
  if ((char)v9[63] < 0)
    operator delete(*(void **)v10);
  *(_OWORD *)v10 = *(_OWORD *)v13;
  *((_QWORD *)v10 + 2) = v14;
  HIBYTE(v14) = 0;
  LOBYTE(v13[0]) = 0;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v13[0]);
  }

}

void sub_193D18668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void std::vector<mlcore::LocalizedSectionHeader>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void **)(v4 - 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
        v6 = (void **)(v4 - 48);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
        v4 -= 56;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void mlcore::LocalizedSectionHeader::~LocalizedSectionHeader(mlcore::LocalizedSectionHeader *this)
{
  void **v2;

  v2 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void mlcore::LocalizedSectionsInfo::~LocalizedSectionsInfo(void **this)
{
  void **v2;

  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<mlcore::LocalizedSectionHeader>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void mlcore::LanguageResources::~LanguageResources(void **this)
{
  void **v2;

  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  v2 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<mlcore::LocalizedSectionHeader>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unsigned __int8 **v36;
  unint64_t v37;
  void *v39;
  _QWORD v40[2];
  char v41;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x40uLL);
  v40[0] = v16;
  v40[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v8;
  v17 = *a3;
  v18 = **a3;
  v16[4] = *((_QWORD *)*a3 + 2);
  *((_OWORD *)v16 + 1) = v18;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = 0;
  v16[6] = 0;
  v16[7] = 0;
  v16[5] = 0;
  v41 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = *(void **)a1;
          *(_QWORD *)a1 = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v15;
          if (*v15)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v15;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v28;
                    goto LABEL_55;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v35);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_55:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v39 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v39)
          operator delete(v39);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v36 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  i = (unsigned __int8 *)v40[0];
  if (v36)
  {
    *(_QWORD *)v40[0] = *v36;
LABEL_72:
    *v36 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v40[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v15;
  if (*(_QWORD *)i)
  {
    v37 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9)
        v37 %= v9;
    }
    else
    {
      v37 &= v9 - 1;
    }
    v36 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_72;
  }
LABEL_73:
  v40[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v40);
  return i;
}

void sub_193D18CD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;

  v1 = *(char *)(a1 + 23);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = v1 < 0;
  if (v1 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (!v3)
    v2 = *(unsigned __int8 *)(a1 + 23);
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      v34 = 0x9DDFEA08EB382D69;
      v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      v50 = v46 + v48;
      v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      v53 = v47 + v2 + v46 + v44;
      v54 = v53 + v43;
      v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      v57 = v56 + v45 + v48;
      v58 = __ROR8__(v57, 44);
      v59 = v57 + v49;
      v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      v62 = *v4;
      v61 = v4 + 4;
      v63 = v62 - 0x4B6D499041670D8DLL * v43;
      v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v65 = *(v61 - 3);
        v66 = v63 + v54 + v50 + v65;
        v67 = v61[2];
        v68 = v61[3];
        v69 = v61[1];
        v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        v70 = v52 + v59;
        v71 = *(v61 - 2);
        v72 = *(v61 - 1);
        v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        v74 = v73 + v59 + v72;
        v75 = v73 + v65 + v71;
        v54 = v75 + v72;
        v76 = __ROR8__(v75, 44) + v73;
        v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        v55 = v76 + __ROR8__(v74 + v77, 21);
        v78 = v63 + v60 + *v61;
        v59 = v78 + v69 + v67 + v68;
        v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        v52 = v77;
        v64 += 64;
      }
      while (v64);
      v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      v9 = (char *)v4 + v2;
      v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      v12 = v4[1];
      v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      v16 = v4 + 2;
      v14 = v4[2];
      v15 = v16[1];
      v17 = __ROR8__(v13 + v15, 52);
      v18 = __ROR8__(v13, 37);
      v19 = v13 + v12;
      v20 = __ROR8__(v19, 7);
      v21 = v19 + v14;
      v22 = v20 + v18;
      v23 = *((_QWORD *)v9 - 4) + v14;
      v24 = v11 + v15;
      v25 = __ROR8__(v24 + v23, 52);
      v26 = v22 + v17;
      v27 = __ROR8__(v23, 37);
      v28 = *((_QWORD *)v9 - 3) + v23;
      v29 = __ROR8__(v28, 7);
      v30 = v26 + __ROR8__(v21, 31);
      v31 = v28 + v10;
      v32 = v31 + v24;
      v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      v34 = 0x9AE16A3B2F90404FLL;
      v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      v36 = v4[1];
      v37 = 0xB492B66FBE98F273 * *v4;
      v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      v5 = *v4;
      v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      v82 = *(_DWORD *)v4;
      v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

void sub_193D193BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;
  void **p_p;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;

  if (a2 == 2)
  {
    v22 = __cxa_begin_catch(exception_object);
    v23 = (void *)MEMORY[0x1E0C99DA0];
    v24 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a10);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v22 + 24))(&__p, v22, &a10);
    if (a22 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v24, "stringWithUTF8String:", p_p);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v26, 0);
    v27 = (id)objc_claimAutoreleasedReturnValue();

    if (a22 < 0)
      operator delete(__p);
    objc_exception_throw(v27);
  }
  if (a2 == 1)
  {
    v28 = __cxa_begin_catch(exception_object);
    v29 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28));
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v30, 0);
    v31 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_193D19850(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_193D1A028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9635(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9636(uint64_t a1)
{

}

Class __getHMHomeManagerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!HomeKitLibraryCore_frameworkLibrary)
    HomeKitLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!HomeKitLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *HomeKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MPHomeManagerObserver.m"), 20, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("HMHomeManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getHMHomeManagerClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MPHomeManagerObserver.m"), 21, CFSTR("Unable to find class %s"), "HMHomeManager");

LABEL_8:
    __break(1u);
  }
  getHMHomeManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

__CFString *NSStringFromMPPlaybackContextSupplementalReason(unint64_t a1)
{
  if (a1 < 4)
    return off_1E3154A68[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UnknownReason-%ld"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void sub_193D1D150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_193D1DEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9987(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9988(uint64_t a1)
{

}

uint64_t _MPContentTasteBestIDFromIdentifiers(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = a1;
  objc_msgSend(v1, "universalStore");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "adamID");

  if (!v3)
  {
    objc_msgSend(v1, "universalStore");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v4, "purchasedAdamID");

    if (!v3)
    {
      objc_msgSend(v1, "universalStore");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = objc_msgSend(v5, "subscriptionAdamID");

    }
  }

  return v3;
}

uint64_t MPContentTasteContentTypeFromMPModelObject(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v2 = 3;
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v2 = 4;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v2 = 7;
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v2 = 5;
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v2 = 6;
            else
              v2 = 0;
          }
        }
      }
    }
  }

  return v2;
}

BOOL MPModelTVEpisodeIsRestricted(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  _BOOL8 v4;

  v1 = a1;
  if (objc_msgSend(v1, "hasLoadedValueForKey:", CFSTR("MPModelPropertyTVEpisodeExplicitRating")))
  {
    +[MPRestrictionsMonitor sharedRestrictionsMonitor](MPRestrictionsMonitor, "sharedRestrictionsMonitor");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "maximumTVShowRating");

    v4 = objc_msgSend(v1, "explicitRating") > v3;
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

_DWORD *_MSV_XXH_XXH32_update_10929(_DWORD *result, char *__src, size_t __n)
{
  int v3;
  char *v4;
  _DWORD *v5;
  int v6;
  unsigned int v7;
  _BOOL4 v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;

  if (__src)
  {
    v3 = __n;
    v4 = __src;
    v5 = result;
    v6 = result[1];
    v7 = *result + __n;
    v9 = __n > 0xF || v7 > 0xF;
    *result = v7;
    result[1] = v6 | v9;
    v10 = result[10];
    if (v10 + __n <= 0xF)
    {
      result = memcpy((char *)result + v10 + 24, __src, __n);
      LODWORD(v11) = v5[10] + v3;
LABEL_18:
      v5[10] = v11;
      return result;
    }
    v12 = &__src[__n];
    if ((_DWORD)v10)
    {
      result = memcpy((char *)result + v10 + 24, __src, (16 - v10));
      HIDWORD(v13) = v5[2] - 2048144777 * v5[6];
      LODWORD(v13) = HIDWORD(v13);
      v14 = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[3] - 2048144777 * v5[7];
      LODWORD(v13) = HIDWORD(v13);
      v5[2] = v14;
      v5[3] = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[4] - 2048144777 * v5[8];
      LODWORD(v13) = HIDWORD(v13);
      v5[4] = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[5] - 2048144777 * v5[9];
      LODWORD(v13) = HIDWORD(v13);
      v5[5] = -1640531535 * (v13 >> 19);
      v4 += (16 - v5[10]);
      v5[10] = 0;
    }
    if (v4 <= v12 - 16)
    {
      v15 = v5[2];
      v16 = v5[3];
      v17 = v5[4];
      v18 = v5[5];
      do
      {
        HIDWORD(v19) = v15 - 2048144777 * *(_DWORD *)v4;
        LODWORD(v19) = HIDWORD(v19);
        v15 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v16 - 2048144777 * *((_DWORD *)v4 + 1);
        LODWORD(v19) = HIDWORD(v19);
        v16 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v17 - 2048144777 * *((_DWORD *)v4 + 2);
        LODWORD(v19) = HIDWORD(v19);
        v17 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v18 - 2048144777 * *((_DWORD *)v4 + 3);
        LODWORD(v19) = HIDWORD(v19);
        v18 = -1640531535 * (v19 >> 19);
        v4 += 16;
      }
      while (v4 <= v12 - 16);
      v5[2] = v15;
      v5[3] = v16;
      v5[4] = v17;
      v5[5] = v18;
    }
    if (v4 < v12)
    {
      v11 = v12 - v4;
      result = memcpy(v5 + 6, v4, v11);
      goto LABEL_18;
    }
  }
  return result;
}

char *_MSV_XXH_XXH64_update_10930(char *result, char *__src, size_t __n)
{
  int v3;
  char *v4;
  char *v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (__src)
  {
    v3 = __n;
    v4 = __src;
    v5 = result;
    *(_QWORD *)result += __n;
    v6 = *((unsigned int *)result + 18);
    if (v6 + __n <= 0x1F)
    {
      result = (char *)memcpy(&result[v6 + 40], __src, __n);
      LODWORD(v7) = *((_DWORD *)v5 + 18) + v3;
LABEL_12:
      *((_DWORD *)v5 + 18) = v7;
      return result;
    }
    v8 = &__src[__n];
    if ((_DWORD)v6)
    {
      result = (char *)memcpy(&result[v6 + 40], __src, (32 - v6));
      v9 = __ROR8__(*((_QWORD *)v5 + 2) - 0x3D4D51C2D82B14B1 * *((_QWORD *)v5 + 6), 33);
      *((_QWORD *)v5 + 1) = 0x9E3779B185EBCA87
                          * __ROR8__(*((_QWORD *)v5 + 1) - 0x3D4D51C2D82B14B1 * *((_QWORD *)v5 + 5), 33);
      *((_QWORD *)v5 + 2) = 0x9E3779B185EBCA87 * v9;
      v10 = 0x9E3779B185EBCA87 * __ROR8__(*((_QWORD *)v5 + 4) - 0x3D4D51C2D82B14B1 * *((_QWORD *)v5 + 8), 33);
      *((_QWORD *)v5 + 3) = 0x9E3779B185EBCA87
                          * __ROR8__(*((_QWORD *)v5 + 3) - 0x3D4D51C2D82B14B1 * *((_QWORD *)v5 + 7), 33);
      *((_QWORD *)v5 + 4) = v10;
      v4 += (32 - *((_DWORD *)v5 + 18));
      *((_DWORD *)v5 + 18) = 0;
    }
    if (v4 + 32 <= v8)
    {
      v11 = *((_QWORD *)v5 + 1);
      v12 = *((_QWORD *)v5 + 2);
      v14 = *((_QWORD *)v5 + 3);
      v13 = *((_QWORD *)v5 + 4);
      do
      {
        v11 = 0x9E3779B185EBCA87 * __ROR8__(v11 - 0x3D4D51C2D82B14B1 * *(_QWORD *)v4, 33);
        v12 = 0x9E3779B185EBCA87 * __ROR8__(v12 - 0x3D4D51C2D82B14B1 * *((_QWORD *)v4 + 1), 33);
        v14 = 0x9E3779B185EBCA87 * __ROR8__(v14 - 0x3D4D51C2D82B14B1 * *((_QWORD *)v4 + 2), 33);
        v13 = 0x9E3779B185EBCA87 * __ROR8__(v13 - 0x3D4D51C2D82B14B1 * *((_QWORD *)v4 + 3), 33);
        v4 += 32;
      }
      while (v4 <= v8 - 32);
      *((_QWORD *)v5 + 1) = v11;
      *((_QWORD *)v5 + 2) = v12;
      *((_QWORD *)v5 + 3) = v14;
      *((_QWORD *)v5 + 4) = v13;
    }
    if (v4 < v8)
    {
      v7 = v8 - v4;
      result = (char *)memcpy(v5 + 40, v4, v7);
      goto LABEL_12;
    }
  }
  return result;
}

void sub_193D2904C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _MPMediaItemPropertyIsPersistentIDProperty(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;

  v1 = (void *)MEMORY[0x1E0C99E60];
  v2 = a1;
  objc_msgSend(v1, "setWithObjects:", CFSTR("persistentID"), CFSTR("albumPID"), CFSTR("artistPID"), CFSTR("albumArtistPID"), CFSTR("genrePID"), CFSTR("composerPID"), CFSTR("podcastPID"), CFSTR("playlistPersistentID"), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "containsObject:", v2);

  return v4;
}

uint64_t __Block_byref_object_copy__11247(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11248(uint64_t a1)
{

}

const __CFString *_NSStringFromMPMediaGrouping(unint64_t a1)
{
  if (a1 > 0x16)
    return CFSTR("(unknown grouping type)");
  else
    return off_1E3155020[a1];
}

id _MPTitlePropertyForPidProperty(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = _MPTitlePropertyForPidProperty_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&_MPTitlePropertyForPidProperty_onceToken, &__block_literal_global_576);
  objc_msgSend((id)_MPTitlePropertyForPidProperty___pidPropertyToAlbumMappings, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_193D2D130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193D2D1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_193D2D2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_193D2D45C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193D2D6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

void sub_193D2DA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_193D2E5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_193D2E8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_193D2E998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_193D2EA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_193D2EBD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_193D2ED2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_193D2F1F8(_Unwind_Exception *a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  va_list va;
  uint64_t v36;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v34 = va_arg(va1, _QWORD);
  v36 = va_arg(va1, _QWORD);

  _Block_object_dispose(va1, 8);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)va);

  if (a2 == 2)
  {
    v24 = __cxa_begin_catch(a1);
    v25 = (void *)MEMORY[0x1E0C99DA0];
    v26 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)va1);
    (*(void (**)(void *, char *))(*(_QWORD *)v24 + 24))(v24, va1);
    if (*(char *)(v21 - 105) >= 0)
      v27 = v21 - 128;
    else
      v27 = *(_QWORD *)(v21 - 128);
    objc_msgSend(v26, "stringWithUTF8String:", v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v28, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v21 - 105) < 0)
      operator delete(*(void **)(v21 - 128));
    objc_exception_throw(v29);
  }
  if (a2 == 1)
  {
    v30 = __cxa_begin_catch(a1);
    v31 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v32, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v33);
  }

  _Unwind_Resume(a1);
}

void sub_193D2F520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193D2F578(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193D2F75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11546(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11547(uint64_t a1)
{

}

void sub_193D2FBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;

  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Block_object_dispose(&a11, 8);

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v31 - 96);
  if (a2 == 2)
  {
    v34 = __cxa_begin_catch(a1);
    v35 = (void *)MEMORY[0x1E0C99DA0];
    v36 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a11);
    (*(void (**)(void *, char *))(*(_QWORD *)v34 + 24))(v34, &a11);
    if (*(char *)(v31 - 105) >= 0)
      v37 = v31 - 128;
    else
      v37 = *(_QWORD *)(v31 - 128);
    objc_msgSend(v36, "stringWithUTF8String:", v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v38, 0);
    v39 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v31 - 105) < 0)
      operator delete(*(void **)(v31 - 128));
    objc_exception_throw(v39);
  }
  if (a2 == 1)
  {
    v40 = __cxa_begin_catch(a1);
    v41 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40));
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v42, 0);
    v43 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v43);
  }

  _Unwind_Resume(a1);
}

void sub_193D30018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void **a15)
{
  void *v15;

  a15 = (void **)&a10;
  std::vector<mlcore::PropertyCache>::__destroy_vector::operator()[abi:ne180100](&a15);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_193D30524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, void **__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35)
{
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v41;
  void *v42;
  void *v43;
  void **p_p;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;

  _Block_object_dispose(&__p, 8);
  _Block_object_dispose(&a10, 8);

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  if (a2 == 2)
  {
    v41 = __cxa_begin_catch(a1);
    v42 = (void *)MEMORY[0x1E0C99DA0];
    v43 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a10);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v41 + 24))(&__p, v41, &a10);
    if (a24 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v43, "stringWithUTF8String:", p_p);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v45, 0);
    v46 = (id)objc_claimAutoreleasedReturnValue();

    if (a24 < 0)
      operator delete(__p);
    objc_exception_throw(v46);
  }
  if (a2 == 1)
  {
    v47 = __cxa_begin_catch(a1);
    v48 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v47 + 16))(v47));
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v49, 0);
    v50 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v50);
  }

  _Unwind_Resume(a1);
}

void sub_193D30900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_193D30E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11626(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11627(uint64_t a1)
{

}

void sub_193D32738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D32C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D33354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D34E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D380D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  id *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12018(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12019(uint64_t a1)
{

}

void sub_193D3AB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_193D3BBE8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v23;
  void *v24;
  void *v25;
  void *p_p;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  MEMORY[0x194038D7C](&STACK[0x5D8]);

  if (a2 == 2)
  {
    v23 = __cxa_begin_catch(a1);
    v24 = (void *)MEMORY[0x1E0C99DA0];
    v25 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&STACK[0x5D8]);
    (*(void (**)(void **__return_ptr, void *, unint64_t *))(*(_QWORD *)v23 + 24))(&__p, v23, &STACK[0x5D8]);
    if (a14 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    objc_msgSend(v25, "stringWithUTF8String:", p_p);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v27, 0);
    v28 = (id)objc_claimAutoreleasedReturnValue();

    if (a14 < 0)
      operator delete(__p);
    objc_exception_throw(v28);
  }
  if (a2 == 1)
  {
    v29 = __cxa_begin_catch(a1);
    v30 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v29 + 16))(v29));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v31, 0);
    v32 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v32);
  }

  _Unwind_Resume(a1);
}

uint64_t MPArtworkSortSizes(void *a1, const char *a2)
{
  return objc_msgSend(a1, "sortedArrayUsingComparator:", &__block_literal_global_373);
}

double CGRectSubRectWithNormalizedRect(double a1, double a2, double a3, double a4, double a5)
{
  return a3 * a5;
}

double CGRectNormalizedRectFromSubRect(double a1, double a2, double a3, double a4, double a5)
{
  return a5 / a3;
}

BOOL MPPConditionalPredicateReadFrom(void *a1, void *a2)
{
  char *v3;
  _BYTE *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  int v18;
  MPPMediaPredicate *v19;
  uint64_t v20;
  _BOOL8 v21;

  v3 = a1;
  v4 = a2;
  v5 = (int *)MEMORY[0x1E0D82BF0];
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&v4[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v4[*MEMORY[0x1E0D82BD8]])
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (v4[*v7])
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v5;
        v13 = *(_QWORD *)&v4[v12];
        if (v13 == -1 || v13 >= *(_QWORD *)&v4[*v6])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v13);
        *(_QWORD *)&v4[v12] = v13 + 1;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        if (v10++ >= 9)
        {
          LODWORD(v11) = 0;
          v16 = v4[*v7];
          goto LABEL_14;
        }
      }
      v4[*v7] = 1;
LABEL_12:
      v16 = v4[*v7];
      if (v4[*v7])
        LODWORD(v11) = 0;
LABEL_14:
      if (v16 || (v11 & 7) == 4)
        break;
      v18 = (unsigned __int16)(v11 >> 3);
      switch(v18)
      {
        case 3:
          v19 = objc_alloc_init(MPPMediaPredicate);
          v20 = 16;
          break;
        case 2:
          v19 = objc_alloc_init(MPPMediaPredicate);
          v20 = 24;
          break;
        case 1:
          v19 = objc_alloc_init(MPPMediaPredicate);
          v20 = 8;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_32;
          continue;
      }
      objc_storeStrong((id *)&v3[v20], v19);
      if (!PBReaderPlaceMark() || (MPPMediaPredicateReadFrom(v19, v4) & 1) == 0)
      {

LABEL_32:
        v21 = 0;
        goto LABEL_30;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)&v4[*v5] < *(_QWORD *)&v4[*v6]);
  }
  v21 = v4[*v7] == 0;
LABEL_30:

  return v21;
}

__CFString *NSStringFromMPMediaType(uint64_t a1)
{
  return _NSStringFromMPMediaType(a1, CFSTR(" | "));
}

__CFString *_NSStringFromMPMediaType(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t i;
  uint64_t j;
  __CFString *v7;

  v3 = a2;
  if (a1 == -1)
  {
    v7 = CFSTR("anyMedia");
  }
  else
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    for (i = 0; i != 6; ++i)
    {
      if ((_NSStringFromMPMediaType_types1[i] & ~a1) == 0)
      {
        objc_msgSend(v4, "addObject:", _NSStringFromMPMediaType_strings1[i]);
        if (!i)
          break;
      }
    }
    for (j = 0; j != 7; ++j)
    {
      if ((_NSStringFromMPMediaType_types2[j] & ~a1) == 0)
      {
        objc_msgSend(v4, "addObject:", _NSStringFromMPMediaType_strings2[j]);
        if (!j)
          break;
      }
    }
    objc_msgSend(v4, "componentsJoinedByString:", v3);
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  return v7;
}

void sub_193D422D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  void *v39;

  _Unwind_Resume(a1);
}

void sub_193D42D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;
  uint64_t v43;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v42);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  if (a2 == 2)
  {
    v46 = __cxa_begin_catch(a1);
    v47 = (void *)MEMORY[0x1E0C99DA0];
    v48 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)(v43 - 184));
    (*(void (**)(void *, uint64_t))(*(_QWORD *)v46 + 24))(v46, v43 - 184);
    if (*(char *)(v43 - 105) >= 0)
      v49 = v43 - 128;
    else
      v49 = *(_QWORD *)(v43 - 128);
    objc_msgSend(v48, "stringWithUTF8String:", v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v50, 0);
    v51 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v43 - 105) < 0)
      operator delete(*(void **)(v43 - 128));
    objc_exception_throw(v51);
  }
  if (a2 == 1)
  {
    v52 = __cxa_begin_catch(a1);
    v53 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52));
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v54, 0);
    v55 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v55);
  }
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mlcore::AggregateFunctionQuery,std::allocator<mlcore::AggregateFunctionQuery>,mlcore::EntityClass *,mlcore::AggregateFunctionQuery::AggregateFunction,decltype(nullptr),std::shared_ptr<mlcore::Predicate> &,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v10 = operator new(0x60uLL);
  v11 = v10;
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E314A9F8;
  v12 = v10 + 3;
  v18 = a4;
  v19 = a5;
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  MEMORY[0x194039310](v10 + 3, a2, a3, 0, &v18, 0);
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *a1 = v12;
  a1[1] = v11;
}

void sub_193D431B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_193D4328C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void sub_193D43C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,void **__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;
  void *v56;
  void *v57;
  void *v58;
  void **p_p;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;

  *(_QWORD *)(v53 - 144) = &a20;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 144));
  *(_QWORD *)(v53 - 144) = &__p;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 144));
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  if (a2 == 2)
  {
    v56 = __cxa_begin_catch(a1);
    v57 = (void *)MEMORY[0x1E0C99DA0];
    v58 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)(v53 - 144));
    (*(void (**)(void ***__return_ptr, void *, uint64_t))(*(_QWORD *)v56 + 24))(&__p, v56, v53 - 144);
    if (a42 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v58, "stringWithUTF8String:", p_p);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v60, 0);
    v61 = (id)objc_claimAutoreleasedReturnValue();

    if (a42 < 0)
      operator delete(__p);
    objc_exception_throw(v61);
  }
  if (a2 == 1)
  {
    v62 = __cxa_begin_catch(a1);
    v63 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v62 + 16))(v62));
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v63, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v64, 0);
    v65 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v65);
  }
  _Unwind_Resume(a1);
}

void sub_193D43EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193D43F30(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x193D43F38);
  __clang_call_terminate(a1);
}

void sub_193D44000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void sub_193D44384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v10 - 120);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<int>,std::allocator<mlcore::ComparisonPredicate<int>>,mlcore::ModelProperty<int> *&,mlcore::ComparisonOperator &,int const&,mlcore::ComparisonOptions &,void>(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = operator new(0x48uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E314A918;
  result = mlcore::ComparisonPredicate<int>::ComparisonPredicate();
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_193D444A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    if (a4 >> 60)
      std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[2 * v7];
    while (a2 != a3)
    {
      *result = *a2;
      v8 = a2[1];
      result[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      result += 2;
    }
    v6[1] = result;
  }
  return result;
}

void sub_193D44564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_193D449EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  void *v27;
  uint64_t v28;

  a27 = (void **)&a20;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100](&a27);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v28 - 88);
  a27 = (void **)(v28 - 128);
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100](&a27);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v28 - 104);

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c45_ZTSNSt3__110shared_ptrIN6mlcore9PredicateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c45_ZTSNSt3__110shared_ptrIN6mlcore9PredicateEEE(uint64_t a1)
{
  return std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](a1 + 40);
}

void sub_193D44BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

void sub_193D44D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_193D44D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193D44E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::AggregateFunctionQuery>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A9F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::AggregateFunctionQuery>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A9F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::AggregateFunctionQuery>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t __copy_helper_block_ea8_48c45_ZTSNSt3__110shared_ptrIN6mlcore9PredicateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_48c45_ZTSNSt3__110shared_ptrIN6mlcore9PredicateEEE(uint64_t a1)
{
  return std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](a1 + 48);
}

void sub_193D450C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  void *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mlcore::AggregateFunctionQuery,std::allocator<mlcore::AggregateFunctionQuery>,mlcore::EntityClass *,mlcore::AggregateFunctionQuery::AggregateFunction,decltype(nullptr),std::shared_ptr<mlcore::Predicate>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  v8 = (char *)operator new(0x60uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *(_QWORD *)v8 = &off_1E314A9F8;
  v12 = *a4;
  *a4 = 0u;
  MEMORY[0x194039310](v8 + 24, a2, a3, 0, &v12, 0);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v8 + 24;
  a1[1] = v8;
}

void sub_193D451FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_193D45620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a28);

  _Unwind_Resume(a1);
}

void sub_193D45814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZZ56__MPModelLibraryKeepLocalStatusRequestOperation_execute_EUb_EUb0_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZZ56__MPModelLibraryKeepLocalStatusRequestOperation_execute_EUb_EUb0_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E314A550;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ56__MPModelLibraryKeepLocalStatusRequestOperation_execute_EUb_EUb0_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEPNS0_6__baseISA_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E314A550;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZ56__MPModelLibraryKeepLocalStatusRequestOperation_execute_EUb_EUb0_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEEclES8_S9_(mlcore *a1, int8x8_t *a2)
{
  ModelPropertyBase *HasNonPurgeableAsset;
  int v5;
  mlcore *v6;
  ModelPropertyBase *v7;
  int v8;
  MPIdentifierSet *v9;
  void *v10;
  void *v11;
  MPIdentifierSet *v12;
  void *v13;
  id v14;
  void **v15;
  void *v16;
  id v17;
  id v18;
  MPIdentifierSet *v19;
  _QWORD v20[6];

  HasNonPurgeableAsset = (ModelPropertyBase *)mlcore::ItemPropertyHasNonPurgeableAsset(a1);
  MPMediaLibraryPropertyCacheValueForProperty(HasNonPurgeableAsset, a2);
  v17 = (id)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v17, "BOOLValue");

  if (v5)
  {
    ++**((_QWORD **)a1 + 1);
    ++**((_QWORD **)a1 + 2);
  }
  else
  {
    v7 = (ModelPropertyBase *)mlcore::ItemPropertyKeepLocalStatus(v6);
    MPMediaLibraryPropertyCacheValueForProperty(v7, a2);
    v18 = (id)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v18, "intValue");

    if (v8 >= 1)
      ++**((_QWORD **)a1 + 2);
    v9 = [MPIdentifierSet alloc];
    objc_msgSend(CFSTR("LibraryKeepLocal-"), "stringByAppendingString:", **((_QWORD **)a1 + 3));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[MPModelSongKind identityKind](MPModelSongKind, "identityKind");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = ___ZZZZ56__MPModelLibraryKeepLocalStatusRequestOperation_execute_EUb_EUb0_ENK3__0clERKN6mlcore13PropertyCacheERb_block_invoke;
    v20[3] = &__block_descriptor_48_e49_v16__0__MPIdentifierSet_MPMutableIdentifierSet__8ls32l8;
    v20[4] = *((_QWORD *)a1 + 3);
    v20[5] = a2;
    v19 = -[MPIdentifierSet initWithSource:modelKind:block:](v9, "initWithSource:modelKind:block:", v10, v11, v20);

    v12 = v19;
    if (v19)
    {
      v13 = (void *)**((_QWORD **)a1 + 4);
      if (!v13)
      {
        v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v15 = (void **)*((_QWORD *)a1 + 4);
        v16 = *v15;
        *v15 = v14;

        v13 = (void *)**((_QWORD **)a1 + 4);
      }
      objc_msgSend(v13, "addObject:", v19);
      v12 = v19;
    }

  }
}

void sub_193D45A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ56__MPModelLibraryKeepLocalStatusRequestOperation_execute_EUb_EUb0_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZZ56-[MPModelLibraryKeepLocalStatusRequestOperation execute]EUb_EUb0_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ56__MPModelLibraryKeepLocalStatusRequestOperation_execute_EUb_EUb0_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE11target_typeEv()
{
  return &_ZTIZZZ56__MPModelLibraryKeepLocalStatusRequestOperation_execute_EUb_EUb0_E3__0;
}

void ___ZZZZ56__MPModelLibraryKeepLocalStatusRequestOperation_execute_EUb_EUb0_ENK3__0clERKN6mlcore13PropertyCacheERb_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[5];
  _QWORD v9[5];

  v3 = a2;
  v4 = MEMORY[0x1E0C809B0];
  v5 = *(_QWORD *)(a1 + 40);
  v6 = **(_QWORD **)(a1 + 32);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZZZZ56__MPModelLibraryKeepLocalStatusRequestOperation_execute_EUb_EUb0_ENK3__0clERKN6mlcore13PropertyCacheERb_block_invoke_2;
  v9[3] = &__block_descriptor_40_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v9[4] = v5;
  v7 = v3;
  objc_msgSend(v3, "setLibraryIdentifiersWithDatabaseID:block:", v6, v9);
  v8[0] = v4;
  v8[1] = 3221225472;
  v8[2] = ___ZZZZ56__MPModelLibraryKeepLocalStatusRequestOperation_execute_EUb_EUb0_ENK3__0clERKN6mlcore13PropertyCacheERb_block_invoke_3;
  v8[3] = &__block_descriptor_40_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v8[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(v7, "setUniversalStoreIdentifiersWithBlock:", v8);

}

void sub_193D45B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZZZZ56__MPModelLibraryKeepLocalStatusRequestOperation_execute_EUb_EUb0_ENK3__0clERKN6mlcore13PropertyCacheERb_block_invoke_2(uint64_t a1, void *a2)
{
  ModelPropertyBase *v3;
  void *v4;
  mlcore *v5;

  v5 = a2;
  v3 = (ModelPropertyBase *)mlcore::ItemPropertyPersistentID(v5);
  MPMediaLibraryPropertyCacheValueForProperty(v3, *(int8x8_t **)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[mlcore setPersistentID:](v5, "setPersistentID:", objc_msgSend(v4, "longLongValue"));

}

void sub_193D45BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZZZZ56__MPModelLibraryKeepLocalStatusRequestOperation_execute_EUb_EUb0_ENK3__0clERKN6mlcore13PropertyCacheERb_block_invoke_3(uint64_t a1, void *a2)
{
  ModelPropertyBase *v3;
  void *v4;
  mlcore *v5;
  ModelPropertyBase *v6;
  void *v7;
  mlcore *v8;

  v8 = a2;
  v3 = (ModelPropertyBase *)mlcore::ItemPropertyStoreID(v8);
  MPMediaLibraryPropertyCacheValueForProperty(v3, *(int8x8_t **)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[mlcore setAdamID:](v8, "setAdamID:", objc_msgSend(v4, "longLongValue"));

  v6 = (ModelPropertyBase *)mlcore::ItemPropertySubscriptionStoreItemID(v5);
  MPMediaLibraryPropertyCacheValueForProperty(v6, *(int8x8_t **)(a1 + 32));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[mlcore setSubscriptionAdamID:](v8, "setSubscriptionAdamID:", objc_msgSend(v7, "longLongValue"));

}

void sub_193D45CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::PropertiesQuery>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::PropertiesQuery>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A800;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

void sub_193D48D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_193D48EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_193D49658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193D49808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193D4A14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_193D4A62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193D4A9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193D4AB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193D4AD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193D4AF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class __getSKCloudServiceControllerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!StoreKitLibraryCore_frameworkLibrary)
    StoreKitLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!StoreKitLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *StoreKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MPMediaLibrary.m"), 73, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("SKCloudServiceController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSKCloudServiceControllerClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MPMediaLibrary.m"), 74, CFSTR("Unable to find class %s"), "SKCloudServiceController");

LABEL_8:
    __break(1u);
  }
  getSKCloudServiceControllerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __Block_byref_object_copy__13969(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13970(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy__289(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x19403A810](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__290(uint64_t a1)
{

}

void sub_193D4CE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D4D1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MPShuffleTypeForMPMusicShuffleMode(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 3)
    return 1000;
  else
    return a1 - 1;
}

unint64_t MPMusicShuffleModeForMPShuffleType(unint64_t a1)
{
  if (a1 < 3)
    return a1 + 1;
  else
    return 0;
}

uint64_t MPRepeatTypeForMPMusicRepeatMode(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 3)
    return 3;
  else
    return a1 - 1;
}

unint64_t MPMusicRepeatModeForMPRepeatType(unint64_t a1)
{
  if (a1 < 3)
    return a1 + 1;
  else
    return 0;
}

void sub_193D4EC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14411(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14412(uint64_t a1)
{

}

_DWORD *_MSV_XXH_XXH32_update_15155(_DWORD *result, char *__src, size_t __n)
{
  int v3;
  char *v4;
  _DWORD *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;

  if (__src)
  {
    v3 = __n;
    v4 = __src;
    v5 = result;
    v6 = result[1];
    v7 = *result + __n;
    *result = v7;
    result[1] = v6 | (v7 > 0xF);
    v8 = result[10];
    if (v8 + __n <= 0xF)
    {
      result = memcpy((char *)result + v8 + 24, __src, __n);
      LODWORD(v9) = v5[10] + v3;
LABEL_12:
      v5[10] = v9;
      return result;
    }
    v10 = &__src[__n];
    if ((_DWORD)v8)
    {
      result = memcpy((char *)result + v8 + 24, __src, (16 - v8));
      HIDWORD(v11) = v5[2] - 2048144777 * v5[6];
      LODWORD(v11) = HIDWORD(v11);
      v12 = -1640531535 * (v11 >> 19);
      HIDWORD(v11) = v5[3] - 2048144777 * v5[7];
      LODWORD(v11) = HIDWORD(v11);
      v5[2] = v12;
      v5[3] = -1640531535 * (v11 >> 19);
      HIDWORD(v11) = v5[4] - 2048144777 * v5[8];
      LODWORD(v11) = HIDWORD(v11);
      v5[4] = -1640531535 * (v11 >> 19);
      HIDWORD(v11) = v5[5] - 2048144777 * v5[9];
      LODWORD(v11) = HIDWORD(v11);
      v5[5] = -1640531535 * (v11 >> 19);
      v4 += (16 - v5[10]);
      v5[10] = 0;
    }
    if (v4 <= v10 - 16)
    {
      v13 = v5[2];
      v14 = v5[3];
      v15 = v5[4];
      v16 = v5[5];
      do
      {
        HIDWORD(v17) = v13 - 2048144777 * *(_DWORD *)v4;
        LODWORD(v17) = HIDWORD(v17);
        v13 = -1640531535 * (v17 >> 19);
        HIDWORD(v17) = v14 - 2048144777 * *((_DWORD *)v4 + 1);
        LODWORD(v17) = HIDWORD(v17);
        v14 = -1640531535 * (v17 >> 19);
        HIDWORD(v17) = v15 - 2048144777 * *((_DWORD *)v4 + 2);
        LODWORD(v17) = HIDWORD(v17);
        v15 = -1640531535 * (v17 >> 19);
        HIDWORD(v17) = v16 - 2048144777 * *((_DWORD *)v4 + 3);
        LODWORD(v17) = HIDWORD(v17);
        v16 = -1640531535 * (v17 >> 19);
        v4 += 16;
      }
      while (v4 <= v10 - 16);
      v5[2] = v13;
      v5[3] = v14;
      v5[4] = v15;
      v5[5] = v16;
    }
    if (v4 < v10)
    {
      v9 = v10 - v4;
      result = memcpy(v5 + 6, v4, v9);
      goto LABEL_12;
    }
  }
  return result;
}

unint64_t _MSV_XXH_XXH64_digest(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;

  if (*a1 < 0x20uLL)
    v1 = a1[3] + 0x27D4EB2F165667C5;
  else
    v1 = 0x85EBCA77C2B2AE63
       - 0x61C8864E7A143579
       * ((0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579
         * ((0x85EBCA77C2B2AE63
           - 0x61C8864E7A143579
           * ((0x85EBCA77C2B2AE63
             - 0x61C8864E7A143579
             * ((__ROR8__(a1[2], 57) + __ROR8__(a1[1], 63) + __ROR8__(a1[3], 52) + __ROR8__(a1[4], 46)) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[1], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[2], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[3], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[4], 33)));
  v2 = v1 + *a1;
  v3 = a1 + 5;
  v4 = *a1 & 0x1FLL;
  if (v4 >= 8)
  {
    do
    {
      v5 = *v3++;
      v2 = 0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579 * __ROR8__((0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * v5, 33)) ^ v2, 37);
      v4 -= 8;
    }
    while (v4 > 7);
  }
  if (v4 >= 4)
  {
    v6 = *(_DWORD *)v3;
    v3 = (uint64_t *)((char *)v3 + 4);
    v2 = 0x165667B19E3779F9 - 0x3D4D51C2D82B14B1 * __ROR8__((0x9E3779B185EBCA87 * v6) ^ v2, 41);
    v4 -= 4;
  }
  for (; v4; --v4)
  {
    v7 = *(unsigned __int8 *)v3;
    v3 = (uint64_t *)((char *)v3 + 1);
    v2 = 0x9E3779B185EBCA87 * __ROR8__((0x27D4EB2F165667C5 * v7) ^ v2, 53);
  }
  v8 = 0x165667B19E3779F9
     * ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) ^ ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) >> 29));
  return v8 ^ HIDWORD(v8);
}

void sub_193D5FD20(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_193D6056C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_193D60E60(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 168));
  _Unwind_Resume(a1);
}

void sub_193D616C4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16197(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16198(uint64_t a1)
{

}

void sub_193D61DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193D62180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193D6313C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void getCARSessionLimitUserInterfacesChangedNotification()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getCARSessionLimitUserInterfacesChangedNotificationSymbolLoc_ptr;
  v8 = getCARSessionLimitUserInterfacesChangedNotificationSymbolLoc_ptr;
  if (!getCARSessionLimitUserInterfacesChangedNotificationSymbolLoc_ptr)
  {
    v1 = CarKitLibrary();
    v0 = (id *)dlsym(v1, "CARSessionLimitUserInterfacesChangedNotification");
    v6[3] = (uint64_t)v0;
    getCARSessionLimitUserInterfacesChangedNotificationSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getCARSessionLimitUserInterfacesChangedNotification(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MPPlayableContentManager.m"), 37, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_193D6467C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *CarKitLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!CarKitLibraryCore_frameworkLibrary)
    CarKitLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)CarKitLibraryCore_frameworkLibrary;
  if (!CarKitLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CarKitLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("MPPlayableContentManager.m"), 35, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void _MPBeginLoadingContentCallback(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  const void *Error;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;

  v7 = a4;
  objc_msgSend(a3, "dataSource");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    _MPCreateFoundationIndexPath(a1, a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_alloc(MEMORY[0x1E0D4D048]);
    v11 = MEMORY[0x1E0C809B0];
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = ___MPBeginLoadingContentCallback_block_invoke;
    v20[3] = &unk_1E315F0A8;
    v12 = v7;
    v21 = v12;
    v16[0] = v11;
    v16[1] = 3221225472;
    v16[2] = ___MPBeginLoadingContentCallback_block_invoke_204;
    v16[3] = &unk_1E315B3A8;
    v17 = v9;
    v18 = (id)objc_msgSend(v10, "initWithTimeout:interruptionHandler:", v20, 5.0);
    v19 = v12;
    v13 = v18;
    v14 = v9;
    objc_msgSend(v8, "beginLoadingChildItemsAtIndexPath:completionHandler:", v14, v16);

  }
  else
  {
    Error = (const void *)MRMediaRemoteCreateError();
    (*((void (**)(id, const void *))v7 + 2))(v7, Error);
    CFRelease(Error);
  }

}

void *_MPCopyNowPlayingIdentifiersCallback(void *a1)
{
  id v1;
  void *Copy;
  const __CFAllocator *v3;
  const __CFArray *v4;

  v1 = a1;
  objc_msgSend(v1, "nowPlayingIdentifiers");
  Copy = (void *)objc_claimAutoreleasedReturnValue();

  if (Copy)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    objc_msgSend(v1, "nowPlayingIdentifiers");
    v4 = (const __CFArray *)objc_claimAutoreleasedReturnValue();
    Copy = CFArrayCreateCopy(v3, v4);

  }
  return Copy;
}

uint64_t _MPGetSupportsPlaybackProgressCallback(uint64_t a1, unint64_t a2, void *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;

  objc_msgSend(a3, "dataSource");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    _MPCreateFoundationIndexPath(a1, a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v5, "childItemsDisplayPlaybackProgressAtIndexPath:", v6);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t _MPGetChildContentItemsCountCallback(uint64_t a1, unint64_t a2, void *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;

  objc_msgSend(a3, "dataSource");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    _MPCreateFoundationIndexPath(a1, a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v5, "numberOfChildItemsAtIndexPath:", v6);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

CFArrayRef _MPCopyChildContentItemsCallback(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  CFArrayRef Copy;
  void *v20;
  void *v21;

  v9 = a5;
  objc_msgSend(v9, "dataSource");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v10)
    goto LABEL_12;
  _MPCreateFoundationIndexPath(a1, a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend(v11, "length") >= 5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFArrayRef _MPCopyChildContentItemsCallback(MRMediaRemoteIndexPath, CFRange, void *)");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "handleFailureInFunction:file:lineNumber:description:", v21, CFSTR("MPPlayableContentManager.m"), 668, CFSTR("Hierarchy depth has exceeded the limit of %d"), 5);

  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", a4);
  if (a4 >= 1)
  {
    v13 = a3 + a4;
    do
    {
      objc_msgSend(v11, "indexPathByAddingIndex:", a3);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "contentItemAtIndexPath:", v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = v15;
      if (v15)
      {
        objc_msgSend(v12, "addObject:", objc_msgSend(objc_retainAutorelease(v15), "_mediaRemoteContentItem"));
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "addObject:", v17);

      }
      ++a3;
    }
    while (a3 < v13);
  }
  objc_msgSend(v9, "_markContentItemsAsSentToMediaRemote:", v12);

  if (v12)
  {
    Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)v12);

  }
  else
  {
LABEL_12:
    Copy = 0;
  }

  return Copy;
}

void _MPInitiatePlaybackCallback(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  MPPlayableContentCallbackContext *v8;
  id v9;
  uint64_t v10;
  id v11;
  MPPlayableContentCallbackContext *v12;
  MPPlayableContentCallbackContext *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  MPPlayableContentCallbackContext *v18;
  _QWORD v19[4];
  id v20;
  MPPlayableContentCallbackContext *v21;

  v5 = a3;
  objc_msgSend(v5, "delegate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    _MPCreateFoundationIndexPath(a1, a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[MPPlayableContentCallbackContext initWithIndexPath:]([MPPlayableContentCallbackContext alloc], "initWithIndexPath:", v7);
    v9 = objc_alloc(MEMORY[0x1E0D4D048]);
    v10 = MEMORY[0x1E0C809B0];
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = ___MPInitiatePlaybackCallback_block_invoke;
    v19[3] = &unk_1E3156F20;
    v11 = v5;
    v20 = v11;
    v12 = v8;
    v21 = v12;
    v15[0] = v10;
    v15[1] = 3221225472;
    v15[2] = ___MPInitiatePlaybackCallback_block_invoke_214;
    v15[3] = &unk_1E3163728;
    v16 = (id)objc_msgSend(v9, "initWithTimeout:interruptionHandler:", v19, 30.0);
    v17 = v11;
    v18 = v12;
    v13 = v12;
    v14 = v16;
    objc_msgSend(v6, "playableContentManager:initiatePlaybackOfContentItemAtIndexPath:completionHandler:", v17, v7, v15);

  }
}

void _MPContentItemsForIdentifiersCallback(const __CFArray *a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD, _QWORD, _QWORD);
  CFIndex Count;
  id v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  CFIndex i;
  id v13;
  NSObject *v14;
  void *v15;
  const void *ValueAtIndex;
  id v17;
  const void *Error;
  void (**v19)(_QWORD, _QWORD, _QWORD);
  id v20;
  void *v21;
  _QWORD block[4];
  id v23;
  void (**v24)(_QWORD, _QWORD, _QWORD);
  uint64_t *v25;
  _QWORD v26[4];
  id v27;
  id v28;
  id v29;
  NSObject *v30;
  uint64_t *v31;
  _QWORD v32[4];
  NSObject *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t);
  id v40;

  v5 = a3;
  v6 = (void (**)(_QWORD, _QWORD, _QWORD))v5;
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", Count);
    v8 = a2;
    objc_msgSend(v8, "dataSource");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9 && (objc_opt_respondsToSelector() & 1) != 0)
    {
      v19 = v6;
      v20 = objc_alloc_init(MEMORY[0x1E0CB3740]);
      v35 = 0;
      v36 = &v35;
      v37 = 0x3032000000;
      v38 = __Block_byref_object_copy__16505;
      v39 = __Block_byref_object_dispose__16506;
      v40 = 0;
      v10 = dispatch_group_create();
      v11 = MEMORY[0x1E0C809B0];
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          if (v36[5])
            break;
          dispatch_group_enter(v10);
          v13 = objc_alloc(MEMORY[0x1E0D4D048]);
          v32[0] = v11;
          v32[1] = 3221225472;
          v32[2] = ___MPContentItemsForIdentifiersCallback_block_invoke;
          v32[3] = &unk_1E3156F48;
          v34 = &v35;
          v14 = v10;
          v33 = v14;
          v15 = (void *)objc_msgSend(v13, "initWithTimeout:interruptionHandler:", v32, 5.0);
          ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          v26[0] = v11;
          v26[1] = 3221225472;
          v26[2] = ___MPContentItemsForIdentifiersCallback_block_invoke_222;
          v26[3] = &unk_1E3156F70;
          v17 = v15;
          v27 = v17;
          v31 = &v35;
          v28 = v20;
          v29 = v21;
          v30 = v14;
          objc_msgSend(v9, "contentItemForIdentifier:completionHandler:", ValueAtIndex, v26);

        }
      }
      block[0] = v11;
      block[1] = 3221225472;
      block[2] = ___MPContentItemsForIdentifiersCallback_block_invoke_2;
      block[3] = &unk_1E315E160;
      v25 = &v35;
      v6 = v19;
      v24 = v19;
      v23 = v21;
      dispatch_group_notify(v10, MEMORY[0x1E0C80D38], block);

      _Block_object_dispose(&v35, 8);
    }
    else
    {
      Error = (const void *)MRMediaRemoteCreateError();
      ((void (**)(_QWORD, _QWORD, const void *))v6)[2](v6, 0, Error);
      CFRelease(Error);
    }

  }
  else
  {
    (*((void (**)(id, _QWORD, _QWORD))v5 + 2))(v5, 0, 0);
  }

}

void sub_193D65418(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16505(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16506(uint64_t a1)
{

}

id _MPCreateFoundationIndexPath(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = MEMORY[0x1E0C80A78](a1, a2);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)&v5[8 * v7] = *(_QWORD *)(v3 + 8 * v7);
      ++v7;
    }
    while (a2 > v7);
  }
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36B0]), "initWithIndexes:length:", v5, a2);
}

void __getCARSessionStatusClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  CarKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CARSessionStatus");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCARSessionStatusClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCARSessionStatusClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("MPPlayableContentManager.m"), 36, CFSTR("Unable to find class %s"), "CARSessionStatus");

    __break(1u);
  }
}

void sub_193D6676C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16651(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16652(uint64_t a1)
{

}

void sub_193D6791C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_193D67A58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193D67AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_193D67B78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193D67C34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193D67CC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193D67DEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193D67ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_193D67FB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193D6804C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193D68094(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193D680F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193D68178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_193D685C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193D69854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_193D6ADA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D6AF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _MPAVRoutingViewControllerRoutesContainsSplitterCapableRoute(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (_MPAVRoutingViewControllerRoutesContainsSplitterCapableRoute_onceToken != -1)
    dispatch_once(&_MPAVRoutingViewControllerRoutesContainsSplitterCapableRoute_onceToken, &__block_literal_global_17427);
  if (_MPAVRoutingViewControllerRoutesContainsSplitterCapableRoute___supportsWirelessSplitting)
  {
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    if (v3)
    {
      v4 = *(_QWORD *)v8;
      while (2)
      {
        for (i = 0; i != v3; ++i)
        {
          if (*(_QWORD *)v8 != v4)
            objc_enumerationMutation(v2);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * i), "isSplitterCapable", (_QWORD)v7) & 1) != 0)
          {
            v3 = 1;
            goto LABEL_14;
          }
        }
        v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
        if (v3)
          continue;
        break;
      }
    }
LABEL_14:

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

Class __getCARSessionStatusClass_block_invoke_17507(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!CarKitLibraryCore_frameworkLibrary_17508)
    CarKitLibraryCore_frameworkLibrary_17508 = _sl_dlopen();
  if (!CarKitLibraryCore_frameworkLibrary_17508)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CarKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MPAVRoutingViewController.m"), 50, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("CARSessionStatus");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCARSessionStatusClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MPAVRoutingViewController.m"), 51, CFSTR("Unable to find class %s"), "CARSessionStatus");

LABEL_8:
    __break(1u);
  }
  getCARSessionStatusClass_softClass_17506 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_193D6F278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;
  id *v23;
  id *v24;
  uint64_t v25;

  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v25 - 88));
  _Unwind_Resume(a1);
}

void sub_193D6F418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D6FC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17846(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17847(uint64_t a1)
{

}

void sub_193D72340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D72760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18398(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18399(uint64_t a1)
{

}

void sub_193D7A5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void sub_193D7A7AC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  uint64_t v7;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  va_list va;

  va_start(va, a6);

  if (a2 == 2)
  {
    v10 = __cxa_begin_catch(a1);
    v11 = (void *)MEMORY[0x1E0C99DA0];
    v12 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)va);
    (*(void (**)(void *, char *))(*(_QWORD *)v10 + 24))(v10, va);
    if (*(char *)(v7 - 49) >= 0)
      v13 = v7 - 72;
    else
      v13 = *(_QWORD *)(v7 - 72);
    objc_msgSend(v12, "stringWithUTF8String:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v14, 0);
    v15 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v7 - 49) < 0)
      operator delete(*(void **)(v7 - 72));
    objc_exception_throw(v15);
  }
  if (a2 == 1)
  {
    v16 = __cxa_begin_catch(a1);
    v17 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v16 + 16))(v16));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v18, 0);
    v19 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v19);
  }
  _Unwind_Resume(a1);
}

void sub_193D7AAE0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  uint64_t v7;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  va_list va;

  va_start(va, a6);

  if (a2 == 2)
  {
    v10 = __cxa_begin_catch(a1);
    v11 = (void *)MEMORY[0x1E0C99DA0];
    v12 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)va);
    (*(void (**)(void *, char *))(*(_QWORD *)v10 + 24))(v10, va);
    if (*(char *)(v7 - 49) >= 0)
      v13 = v7 - 72;
    else
      v13 = *(_QWORD *)(v7 - 72);
    objc_msgSend(v12, "stringWithUTF8String:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v14, 0);
    v15 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v7 - 49) < 0)
      operator delete(*(void **)(v7 - 72));
    objc_exception_throw(v15);
  }
  if (a2 == 1)
  {
    v16 = __cxa_begin_catch(a1);
    v17 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v16 + 16))(v16));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v18, 0);
    v19 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v19);
  }
  _Unwind_Resume(a1);
}

void sub_193D7AF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v24;
  void *v25;
  void *v26;
  void **p_p;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    v24 = __cxa_begin_catch(a1);
    v25 = (void *)MEMORY[0x1E0C99DA0];
    v26 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a9);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v24 + 24))(&__p, v24, &a9);
    if (a21 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v26, "stringWithUTF8String:", p_p);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v28, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();

    if (a21 < 0)
      operator delete(__p);
    objc_exception_throw(v29);
  }
  if (a2 == 1)
  {
    v30 = __cxa_begin_catch(a1);
    v31 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v32, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v33);
  }

  _Unwind_Resume(a1);
}

void sub_193D7B320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  void *v26;
  void *v29;
  void *v30;
  void *v31;
  void **p_p;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;

  if (a2 == 2)
  {
    v29 = __cxa_begin_catch(a1);
    v30 = (void *)MEMORY[0x1E0C99DA0];
    v31 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a13);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v29 + 24))(&__p, v29, &a13);
    if (a25 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v31, "stringWithUTF8String:", p_p);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v33, 0);
    v34 = (id)objc_claimAutoreleasedReturnValue();

    if (a25 < 0)
      operator delete(__p);
    objc_exception_throw(v34);
  }
  if (a2 == 1)
  {
    v35 = __cxa_begin_catch(a1);
    v36 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v35 + 16))(v35));
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v37, 0);
    v38 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v38);
  }

  _Unwind_Resume(a1);
}

void sub_193D7B780(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  __break(1u);
}

void sub_193D7B928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_193D7BACC()
{
  __break(1u);
}

void sub_193D7BC3C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193D7BEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;
  void *v21;
  void *v22;
  void *v23;
  void **p_p;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;

  if (a2 == 2)
  {
    v21 = __cxa_begin_catch(a1);
    v22 = (void *)MEMORY[0x1E0C99DA0];
    v23 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a18);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v21 + 24))(&__p, v21, &a18);
    if (a17 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v23, "stringWithUTF8String:", p_p);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v25, 0);
    v26 = (id)objc_claimAutoreleasedReturnValue();

    if (a17 < 0)
      operator delete(__p);
    objc_exception_throw(v26);
  }
  if (a2 == 1)
  {
    v27 = __cxa_begin_catch(a1);
    v28 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v27 + 16))(v27));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v29, 0);
    v30 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v30);
  }

  _Unwind_Resume(a1);
}

void sub_193D7C2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v24;
  void *v25;
  void *v26;
  void **p_p;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;

  if (a2 == 2)
  {
    v24 = __cxa_begin_catch(a1);
    v25 = (void *)MEMORY[0x1E0C99DA0];
    v26 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a9);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v24 + 24))(&__p, v24, &a9);
    if (a21 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v26, "stringWithUTF8String:", p_p);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v28, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();

    if (a21 < 0)
      operator delete(__p);
    objc_exception_throw(v29);
  }
  if (a2 == 1)
  {
    v30 = __cxa_begin_catch(a1);
    v31 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v32, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v33);
  }
  _Unwind_Resume(a1);
}

void sub_193D7C460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193D7C4AC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_193D7C584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v24;
  void *v25;
  void *v26;
  void **p_p;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;

  if (a2 == 2)
  {
    v24 = __cxa_begin_catch(a1);
    v25 = (void *)MEMORY[0x1E0C99DA0];
    v26 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a9);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v24 + 24))(&__p, v24, &a9);
    if (a21 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v26, "stringWithUTF8String:", p_p);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v28, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();

    if (a21 < 0)
      operator delete(__p);
    objc_exception_throw(v29);
  }
  if (a2 == 1)
  {
    v30 = __cxa_begin_catch(a1);
    v31 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v32, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v33);
  }
  _Unwind_Resume(a1);
}

void sub_193D7C834(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193D7C8CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193D7DF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  void *v24;
  void *v25;
  void *v28;
  void *v29;
  void *v30;
  void **p_p;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;

  if (a2 == 2)
  {
    v28 = __cxa_begin_catch(a1);
    v29 = (void *)MEMORY[0x1E0C99DA0];
    v30 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a24);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v28 + 24))(&__p, v28, &a24);
    if (a23 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v30, "stringWithUTF8String:", p_p);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v32, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();

    if (a23 < 0)
      operator delete(__p);
    objc_exception_throw(v33);
  }
  if (a2 == 1)
  {
    v34 = __cxa_begin_catch(a1);
    v35 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v34 + 16))(v34));
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v36, 0);
    v37 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v37);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::map<long long,std::shared_ptr<mlcore::EntityQueryResult>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314ABF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<long long,std::shared_ptr<mlcore::EntityQueryResult>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314ABF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

void std::__shared_ptr_emplace<std::map<long long,std::shared_ptr<mlcore::EntityQueryResult>>>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::__map_value_compare<long long,std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>>>::destroy(*(_QWORD **)(a1 + 32));
}

uint64_t MPAVMRRouteDiscoveryModeFromDiscoveryMode(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3)
    return result;
  else
    return 0;
}

uint64_t MPRouteDiscoveryModeFromMRDiscoveryMode(int a1)
{
  uint64_t v1;

  v1 = (a1 - 1);
  if (v1 < 3)
    return v1 + 1;
  else
    return 0;
}

__CFString *MPRouteDiscoveryModeDescription(unint64_t a1)
{
  if (a1 > 3)
    return 0;
  else
    return off_1E3157558[a1];
}

void sub_193D7F998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D7FDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19541(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19542(uint64_t a1)
{

}

void sub_193D803A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D80FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D811C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D812C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D8144C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193D81ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D824B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_193D82764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_193D85478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D85544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D855F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_193D859F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_193D85B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_193D85D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_193D85EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_193D86070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_193D86218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_193D863C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_193D87CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D881A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D88898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v37 - 160), 8);
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_193D88EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_193D89630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

void sub_193D89840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D8993C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D89A10(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_193D89AE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_193D89BC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_193D8A058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_193D8A32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D8A7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D8AC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D8B074(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_193D8B088(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x193D8AFFCLL);
}

void sub_193D8B4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D8C2EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20164(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20165(uint64_t a1)
{

}

void sub_193D8D640(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void MPFetchArtworkForAddedMediaItems(void *a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  char v8;
  NSObject *v9;
  _BOOL4 v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  id obj;
  _QWORD v17[5];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  void *v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  obj = a1;
  v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v1)
  {
    v3 = v1;
    v4 = *(_QWORD *)v19;
    *(_QWORD *)&v2 = 134218242;
    v15 = v2;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v19 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        objc_msgSend(v6, "artworkCatalog", v15);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "setDestinationScale:", 0.0);
        objc_msgSend(v7, "setFittingSize:", 1.79769313e308, 1.79769313e308);
        v8 = objc_msgSend(v7, "hasImageOnDisk");
        v9 = os_log_create("com.apple.amp.mediaplayer", "SDKLibrary");
        v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        if ((v8 & 1) != 0)
        {
          if (v10)
          {
            v11 = objc_msgSend(v6, "persistentID");
            objc_msgSend(v6, "title");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v15;
            v23 = v11;
            v24 = 2112;
            v25 = v12;
            _os_log_impl(&dword_193B9B000, v9, OS_LOG_TYPE_DEFAULT, "Skipping artwork fetch for %lld - %@", buf, 0x16u);

          }
        }
        else
        {
          if (v10)
          {
            v13 = objc_msgSend(v6, "persistentID");
            objc_msgSend(v6, "title");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v15;
            v23 = v13;
            v24 = 2112;
            v25 = v14;
            _os_log_impl(&dword_193B9B000, v9, OS_LOG_TYPE_DEFAULT, "Requesting artwork for %lld - %@", buf, 0x16u);

          }
          objc_msgSend(v6, "artworkCatalog");
          v9 = objc_claimAutoreleasedReturnValue();
          v17[0] = MEMORY[0x1E0C809B0];
          v17[1] = 3221225472;
          v17[2] = __MPFetchArtworkForAddedMediaItems_block_invoke;
          v17[3] = &unk_1E3158178;
          v17[4] = v6;
          -[NSObject requestImageWithCompletion:](v9, "requestImageWithCompletion:", v17);
        }

      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    }
    while (v3);
  }

}

id MPTrackCloudPropertiesToAggregate()
{
  if (MPTrackCloudPropertiesToAggregate_onceToken != -1)
    dispatch_once(&MPTrackCloudPropertiesToAggregate_onceToken, &__block_literal_global_628);
  return (id)MPTrackCloudPropertiesToAggregate___trackPropertiesToAggregate;
}

id MPML3CollectionClassFromGroupingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return 0;
  else
    return (id)objc_opt_class();
}

void sub_193D94488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20533(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20534(uint64_t a1)
{

}

id ML3CollectionStoreIDPropertyForGroupingType(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = a1 - 1;
  if ((unint64_t)(a1 - 1) <= 0x14 && ((0x1FFC1Fu >> v1) & 1) != 0)
    v2 = **((id **)&unk_1E31584A8 + v1);
  else
    v2 = 0;
  return v2;
}

const __CFString *MPNSStringForMPMediaEntityLikedState(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("Unknown");
  else
    return off_1E31585A0[a1 - 1];
}

void sub_193D9727C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193D9842C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, _Unwind_Exception *exception_object, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_193D986E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_193D9881C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_193D98ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;
  void **p_p;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;

  if (a2 == 2)
  {
    v22 = __cxa_begin_catch(exception_object);
    v23 = (void *)MEMORY[0x1E0C99DA0];
    v24 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a10);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v22 + 24))(&__p, v22, &a10);
    if (a22 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v24, "stringWithUTF8String:", p_p);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v26, 0);
    v27 = (id)objc_claimAutoreleasedReturnValue();

    if (a22 < 0)
      operator delete(__p);
    objc_exception_throw(v27);
  }
  if (a2 == 1)
  {
    v28 = __cxa_begin_catch(exception_object);
    v29 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28));
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v30, 0);
    v31 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_193D98C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mlcore::EntityCache,std::allocator<mlcore::EntityCache>,std::shared_ptr<mlcore::DeviceLibraryView>,void>(_QWORD *a1, __int128 *a2)
{
  char *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v4 = (char *)operator new(0xF0uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_1E314A5D0;
  v7 = *a2;
  *a2 = 0u;
  mlcore::EntityCache::EntityCache();
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v7 + 1) + 16))(*((_QWORD *)&v7 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_193D98E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::EntityCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A5D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::EntityCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A5D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::EntityCache>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t __Block_byref_object_copy__21409(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21410(uint64_t a1)
{

}

void sub_193D99084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_193D991E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_193D99378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_193D994BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_193D995FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_193D99A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_193D99B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193D99C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193D99CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193D99D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193D99E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193D99F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193D9A47C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_193D9A92C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_193D9AD94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_193D9B04C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193D9B1AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193D9B3B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193D9B570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193D9B804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193D9C310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
  void *v51;
  void *v52;
  void *v53;
  void *v56;
  void *v57;
  void *v58;
  void **p_p;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;

  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  a45 = &a51;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](a9);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&__p);

  if (a2 == 2)
  {
    v56 = __cxa_begin_catch(a1);
    v57 = (void *)MEMORY[0x1E0C99DA0];
    v58 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a51);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v56 + 24))(&__p, v56, &a51);
    if (a17 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v58, "stringWithUTF8String:", p_p);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v60, 0);
    v61 = (id)objc_claimAutoreleasedReturnValue();

    if (a17 < 0)
      operator delete(__p);
    objc_exception_throw(v61);
  }
  if (a2 == 1)
  {
    v62 = __cxa_begin_catch(a1);
    v63 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v62 + 16))(v62));
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v63, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v64, 0);
    v65 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v65);
  }
  _Unwind_Resume(a1);
}

void sub_193D9CC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v18);
  *(_QWORD *)(v21 - 88) = v17;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));

  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<mlcore::LocalizedSearchScope>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    if (a4 >> 60)
      std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[2 * v7];
    while (a2 != a3)
    {
      *result = *a2;
      v8 = a2[1];
      result[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      result += 2;
    }
    v6[1] = result;
  }
  return result;
}

void sub_193D9CD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_56c89_ZTSNSt3__16vectorINS_10shared_ptrIN6mlcore20LocalizedSearchScopeEEENS_9allocatorIS4_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = (_QWORD *)(a1 + 56);
  v2[2] = 0;
  return std::vector<std::shared_ptr<mlcore::LocalizedSearchScope>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*>(v2, *(_QWORD **)(a2 + 56), *(_QWORD **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4);
}

void __destroy_helper_block_ea8_56c89_ZTSNSt3__16vectorINS_10shared_ptrIN6mlcore20LocalizedSearchScopeEEENS_9allocatorIS4_EEEE(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 56);
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_193D9D040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a15);

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_56c89_ZTSNSt3__16vectorINS_10shared_ptrIN6mlcore20LocalizedSearchScopeEEENS_9allocatorIS4_EEEE80c63_ZTSNSt3__110shared_ptrIN6mlcore26LocalizedSearchQueryResultEEE(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  a1[7] = 0;
  a1[8] = 0;
  v3 = a1 + 7;
  a1[9] = 0;
  result = std::vector<std::shared_ptr<mlcore::LocalizedSearchScope>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::LocalizedSearchScope>*,std::shared_ptr<mlcore::LocalizedSearchScope>*>(a1 + 7, *(_QWORD **)(a2 + 56), *(_QWORD **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4);
  v5 = *(_QWORD *)(a2 + 88);
  v3[3] = *(_QWORD *)(a2 + 80);
  v3[4] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_ea8_56c89_ZTSNSt3__16vectorINS_10shared_ptrIN6mlcore20LocalizedSearchScopeEEENS_9allocatorIS4_EEEE80c63_ZTSNSt3__110shared_ptrIN6mlcore26LocalizedSearchQueryResultEEE(uint64_t a1)
{
  void **v1;
  void **v2;

  v1 = (void **)(a1 + 56);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](a1 + 80);
  v2 = v1;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t __copy_helper_block_ea8_40c57_ZTSNSt3__110shared_ptrIN6mlcore20LocalizedSearchQueryEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c57_ZTSNSt3__110shared_ptrIN6mlcore20LocalizedSearchQueryEEE(uint64_t a1)
{
  return std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](a1 + 40);
}

void std::__shared_ptr_emplace<mlcore::LocalizedSearchQuery>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A988;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::LocalizedSearchQuery>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A988;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::LocalizedSearchQuery>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_193D9D998(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193D9E17C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193D9F128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_193D9F3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193D9F7C4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 248));
  _Unwind_Resume(a1);
}

void sub_193D9FD30(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

void sub_193DA1A40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

const __CFString *MPAVRouteSubtypeDescription(unint64_t a1)
{
  if (a1 > 0x1B)
    return CFSTR("Undefined");
  else
    return off_1E3158A20[a1];
}

const __CFString *MPAVRouteTypeDescription(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("Undefined");
  else
    return off_1E3158B00[a1];
}

void sub_193DA5C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 232), 8);
  _Unwind_Resume(a1);
}

void sub_193DA5DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_193DA65A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_193DA6D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&STACK[0x240], 8);
  _Unwind_Resume(a1);
}

void sub_193DA6FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23061(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23062(uint64_t a1)
{

}

void sub_193DA7258(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

BOOL MPModelMovieIsRestricted(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  _BOOL8 v4;

  v1 = a1;
  if (objc_msgSend(v1, "hasLoadedValueForKey:", CFSTR("MPModelPropertyMovieExplicitRating")))
  {
    +[MPRestrictionsMonitor sharedRestrictionsMonitor](MPRestrictionsMonitor, "sharedRestrictionsMonitor");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "maximumMovieRating");

    v4 = objc_msgSend(v1, "explicitRating") > v3;
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

const __CFString *NSStringFromMPModelRadioStationType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9)
    return CFSTR("Unknown");
  else
    return off_1E3158D98[a1 - 1];
}

const __CFString *NSStringFromMPModelRadioStationSubtype(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Unknown");
  if (a1 == 1)
    v1 = CFSTR("Episode");
  if (a1 == 2)
    return CFSTR("Broadcast");
  else
    return v1;
}

void sub_193DAE0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;
  uint64_t v26;
  void *v29;
  void *v30;
  void *v31;
  void **p_p;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v26 - 48);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  if (a2 == 2)
  {
    v29 = __cxa_begin_catch(a1);
    v30 = (void *)MEMORY[0x1E0C99DA0];
    v31 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a11);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v29 + 24))(&__p, v29, &a11);
    if (a24 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v31, "stringWithUTF8String:", p_p);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v33, 0);
    v34 = (id)objc_claimAutoreleasedReturnValue();

    if (a24 < 0)
      operator delete(__p);
    objc_exception_throw(v34);
  }
  if (a2 == 1)
  {
    v35 = __cxa_begin_catch(a1);
    v36 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v35 + 16))(v35));
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v37, 0);
    v38 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v38);
  }
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<mlcore::UnaryPredicate<long long>,std::allocator<mlcore::UnaryPredicate<long long>>,mlcore::ModelProperty<long long> *&,mlcore::UnaryOperator,void>(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = operator new(0x30uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E314A790;
  result = mlcore::UnaryPredicate<long long>::UnaryPredicate();
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_193DAE3B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_193DAE4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::UnaryPredicate<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::UnaryPredicate<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

void sub_193DB6CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24972(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24973(uint64_t a1)
{

}

void sub_193DB8B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193DB8E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193DB911C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  id *v23;
  uint64_t v24;

  objc_destroyWeak(v23);
  _Block_object_dispose(&a23, 8);
  objc_destroyWeak((id *)(v24 - 112));
  _Unwind_Resume(a1);
}

void sub_193DB9428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193DB9614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_193DB9764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193DBA2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193DBA7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__25410(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__25411(uint64_t a1)
{

}

id MPTranslatorUtilitiesTransformMillisecondsToSeconds(void *a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  double v6;
  double v7;
  void *v8;

  _MPKeyPathValueTransformFirstNonnullKeyPath(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    v4 = (void *)MEMORY[0x1E0CB37E8];
    v5 = v2;
    if ((_NSIsNSNumber() & 1) != 0
      || (_NSIsNSString() & 1) != 0
      || (v6 = 0.0, (objc_opt_respondsToSelector() & 1) != 0))
    {
      objc_msgSend(v5, "doubleValue");
      v6 = v7;
    }

    objc_msgSend(v4, "numberWithDouble:", v6 / 1000.0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

id MPMediaKitEntityTranslatorTransformArtwork(void *a1, void *a2)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  _MPKeyPathValueTransformFirstNonnullKeyPath(a1, a2);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  if (_NSIsNSArray())
  {
    v3 = objc_msgSend(objc_alloc(MEMORY[0x1E0DDC070]), "initWithArtworkResponseArray:", v2);
  }
  else
  {
    if (!_NSIsNSDictionary())
    {
LABEL_8:

      v5 = 0;
      goto LABEL_9;
    }
    v3 = objc_msgSend(objc_alloc(MEMORY[0x1E0DDC070]), "initWithArtworkResponseDictionary:", v2);
  }
  v4 = (void *)v3;
  if (!v3)
    goto LABEL_8;
  +[MPStoreArtworkRequestToken tokenWithImageArtworkInfo:](MPStoreArtworkRequestToken, "tokenWithImageArtworkInfo:", v3);
  v5 = (id)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
LABEL_9:
    v6 = 0;
    goto LABEL_10;
  }
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MPMediaKitEntityTranslatorTransformArtwork_block_invoke;
  v9[3] = &unk_1E3161198;
  v5 = v5;
  v10 = v5;
  v6 = (void *)MEMORY[0x19403A810](v9);

LABEL_10:
  v7 = (void *)MEMORY[0x19403A810](v6);

  return v7;
}

id _MPMediaKitDateFromString(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (_MPMediaKitDateFromString_sOnceToken != -1)
    dispatch_once(&_MPMediaKitDateFromString_sOnceToken, &__block_literal_global_154_25653);
  if (_NSIsNSString())
  {
    objc_msgSend((id)_MPMediaKitDateFromString_mediaKitDateFormatter, "dateFromString:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id _MPMediaKitDateAndTimeFromString(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (_MPMediaKitDateAndTimeFromString_sOnceToken != -1)
    dispatch_once(&_MPMediaKitDateAndTimeFromString_sOnceToken, &__block_literal_global_305);
  if (_NSIsNSString())
  {
    objc_msgSend((id)_MPMediaKitDateAndTimeFromString_mediaKitDateAndTimeFormatter, "dateFromString:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id _MPMediaKitCalendar()
{
  if (_MPMediaKitCalendar_sOnceToken != -1)
    dispatch_once(&_MPMediaKitCalendar_sOnceToken, &__block_literal_global_157_25739);
  return (id)_MPMediaKitCalendar_sGMTCalendar;
}

void sub_193DC229C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193DC4978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__26041(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26042(uint64_t a1)
{

}

BOOL MPPSearchStringPredicateReadFrom(void *a1, void *a2)
{
  _QWORD *v3;
  _BYTE *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  int v18;
  uint64_t v19;
  void *v20;
  _BOOL8 v21;

  v3 = a1;
  v4 = a2;
  v5 = (int *)MEMORY[0x1E0D82BF0];
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&v4[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v4[*MEMORY[0x1E0D82BD8]])
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (v4[*v7])
        goto LABEL_26;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v5;
        v13 = *(_QWORD *)&v4[v12];
        if (v13 == -1 || v13 >= *(_QWORD *)&v4[*v6])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v13);
        *(_QWORD *)&v4[v12] = v13 + 1;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        if (v10++ >= 9)
        {
          LODWORD(v11) = 0;
          v16 = v4[*v7];
          goto LABEL_14;
        }
      }
      v4[*v7] = 1;
LABEL_12:
      v16 = v4[*v7];
      if (v4[*v7])
        LODWORD(v11) = 0;
LABEL_14:
      if (v16 || (v11 & 7) == 4)
        goto LABEL_26;
      v18 = (unsigned __int16)(v11 >> 3);
      if (v18 == 2)
        break;
      if (v18 == 1)
      {
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = (void *)v3[2];
        v3[2] = v19;
LABEL_23:

        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        v21 = 0;
        goto LABEL_27;
      }
LABEL_25:
      if (*(_QWORD *)&v4[*v5] >= *(_QWORD *)&v4[*v6])
        goto LABEL_26;
    }
    PBReaderReadString();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v20)
      objc_msgSend(v3, "addProperties:", v20);
    goto LABEL_23;
  }
LABEL_26:
  v21 = v4[*v7] == 0;
LABEL_27:

  return v21;
}

void sub_193DC629C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__26192(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26193(uint64_t a1)
{

}

void sub_193DC8B2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id _MPKeyPathValueTransformFirstKeyPath(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a2;
  objc_msgSend(a1, "firstObject");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForKeyPath:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id _MPKeyPathValueTransformFirstNonnullKeyPath(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    while (2)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(v4, "valueForKeyPath:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v9), (_QWORD)v13);
        v10 = objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          v11 = (void *)v10;
          goto LABEL_11;
        }
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v7)
        continue;
      break;
    }
  }
  v11 = 0;
LABEL_11:

  return v11;
}

uint64_t _MPKeyPathValueTransformConstantYES()
{
  return MEMORY[0x1E0C9AAB0];
}

uint64_t _MPKeyPathValueTransformHasNonnullValue(void *a1, void *a2)
{
  void *v2;
  _BOOL8 v3;

  _MPKeyPathValueTransformFirstNonnullKeyPath(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v3);
}

id MPAVGetBatteryLevelFromRouteDescription(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = **((id **)&unk_1E315A8F0 + a2);
  if (!v4)
  {
    v13[0] = &unk_1E31E4B28;
    v13[1] = &unk_1E31E4B40;
    v14[0] = CFSTR("BTDetails_BatteryLevelLeft");
    v14[1] = CFSTR("BTDetails_BatteryLevelRight");
    v13[2] = &unk_1E31E4B58;
    v13[3] = &unk_1E31E4B70;
    v14[2] = CFSTR("BTDetails_BatteryLevelCase");
    v14[3] = CFSTR("BTDetails_BatteryLevelSingle");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKey:", v6);
    v4 = (id)objc_claimAutoreleasedReturnValue();

    if (!v4)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *MPAVGetRouteDescriptionKey(MPAVBatteryLevelType)");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("MPAVBatteryLevel.m"), 134, CFSTR("unable to find route description key for battery level"));

      v4 = 0;
    }
  }
  objc_msgSend(v3, "objectForKey:", v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSNumber *MPAVGetBatteryLevelFromRouteDescription(NSDictionary *__strong, MPAVBatteryLevelType)");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("MPAVBatteryLevel.m"), 142, CFSTR("battery level value is not a number"));

    }
  }

  return v7;
}

uint64_t __Block_byref_object_copy__26598(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26599(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

void sub_193DC9DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;
  id *v18;

  objc_destroyWeak(v18);

  _Unwind_Resume(a1);
}

void sub_193DCA078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;
  uint64_t v32;
  void *v34;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  v34 = *(void **)(v32 - 104);
  if (v34)
  {
    *(_QWORD *)(v32 - 96) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__48(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__49(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_193DCA320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_193DCA3D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_193DCA480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193DCA784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;
  void *v27;
  void *v28;
  void *v29;
  void **p_p;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v24 - 112);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v24 - 128);
  if (a2 == 2)
  {
    v27 = __cxa_begin_catch(a1);
    v28 = (void *)MEMORY[0x1E0C99DA0];
    v29 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)(v24 - 112));
    (*(void (**)(void ***__return_ptr, void *, uint64_t))(*(_QWORD *)v27 + 24))(&__p, v27, v24 - 112);
    if (a14 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v29, "stringWithUTF8String:", p_p);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v31, 0);
    v32 = (id)objc_claimAutoreleasedReturnValue();

    if (a14 < 0)
      operator delete(__p);
    objc_exception_throw(v32);
  }
  if (a2 == 1)
  {
    v33 = __cxa_begin_catch(a1);
    v34 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33));
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v35, 0);
    v36 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v36);
  }
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<mlcore::InPredicate<long long>,std::allocator<mlcore::InPredicate<long long>>,mlcore::ModelProperty<long long> *&,std::vector<long long> const&,void>(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = operator new(0x68uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E314A6B0;
  result = mlcore::InPredicate<long long>::InPredicate();
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_193DCABE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_193DCACE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::InPredicate<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A6B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::InPredicate<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A6B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

void sub_193DCC560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void **__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,void *a50,void *a51)
{
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v59;
  void *v60;
  void *v61;
  void **p_p;
  void *v63;
  id v64;
  void *v65;
  void *v66;
  void *v67;
  id v68;

  if (a2 == 2)
  {
    v59 = __cxa_begin_catch(a1);
    v60 = (void *)MEMORY[0x1E0C99DA0];
    v61 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)(v57 - 240));
    (*(void (**)(void ***__return_ptr, void *, uint64_t))(*(_QWORD *)v59 + 24))(&__p, v59, v57 - 240);
    if (a47 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v61, "stringWithUTF8String:", p_p);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v63, 0);
    v64 = (id)objc_claimAutoreleasedReturnValue();

    if (a47 < 0)
      operator delete(__p);
    objc_exception_throw(v64);
  }
  if (a2 == 1)
  {
    v65 = __cxa_begin_catch(a1);
    v66 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v65 + 16))(v65));
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v66, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v67, 0);
    v68 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v68);
  }

  _Unwind_Resume(a1);
}

void sub_193DCCC8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_end_catch();

  JUMPOUT(0x193DCCCFCLL);
}

void sub_193DCCCE8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_193DCD1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27,void *a28,void *a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;

  v36 = *(_QWORD **)(v34 - 120);
  if (v36 == v33)
  {
    v37 = 4;
    v36 = (_QWORD *)(v34 - 144);
  }
  else
  {
    if (!v36)
      goto LABEL_6;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_6:
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v34 - 160);

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v34 - 112);
  operator delete(v31);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a21);

  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mlcore::PropertiesQuery,std::allocator<mlcore::PropertiesQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate> &,void>(_QWORD *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v8 = operator new(0x80uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E314A800;
  v10 = v8 + 3;
  v16 = a3;
  v17 = a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  MEMORY[0x194038F80](v8 + 3, a2, &v16);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *a1 = v10;
  a1[1] = v9;
}

void sub_193DCD3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 24;
      v7 = v4 - 24;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_193DCD860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  void *v44;

  _Unwind_Resume(a1);
}

void sub_193DCDD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  void *v44;
  void *v45;
  unint64_t *p_shared_owners;
  unint64_t v48;

  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))a37->__on_zero_shared)(a37);
      std::__shared_weak_count::__release_weak(a37);
    }
  }

  MEMORY[0x194038D7C](&a44);
  _Unwind_Resume(a1);
}

void sub_193DCE064(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::AnyInPredicate<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::AnyInPredicate<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A720;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::AnyInPredicate<long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_193DD14D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193DD3AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t _CloudClientAuthenticationDidChangeCallback(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_cloudClientAuthenticationDidChange");
}

uint64_t __Block_byref_object_copy__27820(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__27821(uint64_t a1)
{

}

os_log_t _MPLogCategoryDefault()
{
  return os_log_create("com.apple.amp.mediaplayer", "Default");
}

os_log_t _MPLogCategoryAssistant()
{
  return os_log_create("com.apple.amp.mediaplayer", "Assistant");
}

os_log_t _MPLogCategoryAssistant_Oversize()
{
  return os_log_create("com.apple.amp.mediaplayer", "Assistant_Oversize");
}

os_log_t _MPLogCategoryInternalSettings()
{
  return os_log_create("com.apple.amp.mediaplayer", "InternalSettings");
}

os_log_t _MPLogCategoryInternalSettings_Oversize()
{
  return os_log_create("com.apple.amp.mediaplayer", "InternalSettings_Oversize");
}

os_log_t _MPLogCategoryLibrary()
{
  return os_log_create("com.apple.amp.mediaplayer", "Library");
}

os_log_t _MPLogCategoryRemoteControl()
{
  return os_log_create("com.apple.amp.mediaplayer", "RemoteControl");
}

os_log_t _MPLogCategoryFavoriting()
{
  return os_log_create("com.apple.amp.mediaplayer", "Favoriting");
}

void sub_193DD9450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193DD9774(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26,id a27,id a28,id a29,id a30,id a31,id a32)
{
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;

  _Block_object_dispose(&a14, 8);
  if (a2 == 2)
  {
    v38 = __cxa_begin_catch(a1);
    v39 = (void *)MEMORY[0x1E0C99DA0];
    v40 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a14);
    (*(void (**)(void *, char *))(*(_QWORD *)v38 + 24))(v38, &a14);
    if (*(char *)(v35 - 121) >= 0)
      v41 = v35 - 144;
    else
      v41 = *(_QWORD *)(v35 - 144);
    objc_msgSend(v40, "stringWithUTF8String:", v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v42, 0);
    v43 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v35 - 121) < 0)
      operator delete(*(void **)(v35 - 144));
    objc_exception_throw(v43);
  }
  if (a2 == 1)
  {
    v44 = __cxa_begin_catch(a1);
    v45 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v44 + 16))(v44));
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v46, 0);
    v47 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v47);
  }
  _Unwind_Resume(a1);
}

void sub_193DD9A34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193DD9DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_193DD9EA8()
{
  void *v0;

  JUMPOUT(0x193DD9EB0);
}

void sub_193DDA390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52)
{
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v59;

  _Block_object_dispose(&a45, 8);
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v57 - 248), 8);
  v59 = *(void **)(v57 - 200);
  if (v59)
  {
    *(_QWORD *)(v57 - 192) = v59;
    operator delete(v59);
  }

  _Block_object_dispose((const void *)(v57 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_193DDA4D0()
{
  JUMPOUT(0x193DDA4BCLL);
}

void sub_193DDA4D8()
{
  JUMPOUT(0x193DDA4C0);
}

void sub_193DDA4E0()
{
  JUMPOUT(0x193DDA4C4);
}

void sub_193DDA740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,void *a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;

  _Unwind_Resume(a1);
}

void sub_193DDA804()
{
  JUMPOUT(0x193DDA7F8);
}

void sub_193DDAA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_193DDAC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_193DDADE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__28901(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__28902(uint64_t a1)
{

}

__n128 __Block_byref_object_copy__42(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__43(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

__n128 __Block_byref_object_copy__44(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__45(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_193DDB2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_193DDB448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193DDB598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  void *v21;
  char *v22;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void **p_p;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;

  v25 = a21;
  if (a21 == v22)
  {
    v26 = 4;
    v25 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  if (a2 == 2)
  {
    v27 = __cxa_begin_catch(a1);
    v28 = (void *)MEMORY[0x1E0C99DA0];
    v29 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a18);
    (*(void (**)(void ***__return_ptr, void *, char *))(*(_QWORD *)v27 + 24))(&__p, v27, &a18);
    if (a15 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v29, "stringWithUTF8String:", p_p);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v31, 0);
    v32 = (id)objc_claimAutoreleasedReturnValue();

    if (a15 < 0)
      operator delete(__p);
    objc_exception_throw(v32);
  }
  if (a2 == 1)
  {
    v33 = __cxa_begin_catch(a1);
    v34 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33));
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v35, 0);
    v36 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v36);
  }
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZ88__MPModelLibraryPlaylistEditChangeRequestOperation__loadUpdatedTrackListWithCompletion__EUb_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

_QWORD *_ZNKSt3__110__function6__funcIZZ88__MPModelLibraryPlaylistEditChangeRequestOperation__loadUpdatedTrackListWithCompletion__EUb_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E314A0D8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZ88__MPModelLibraryPlaylistEditChangeRequestOperation__loadUpdatedTrackListWithCompletion__EUb_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEPNS0_6__baseISA_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E314A0D8;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZZ88__MPModelLibraryPlaylistEditChangeRequestOperation__loadUpdatedTrackListWithCompletion__EUb_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEEclES8_S9_(id **a1, int8x8_t *a2)
{
  ModelPropertyBase *v4;
  ModelPropertyBase *v5;
  void *v6;
  mlcore *v7;

  v4 = (ModelPropertyBase *)mlcore::PlaylistItemPropertyItemPersistentID((mlcore *)a1);
  MPMediaLibraryPropertyCacheValueForProperty(v4, a2);
  v7 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v5 = (ModelPropertyBase *)mlcore::PlaylistItemPropertyPersistentID(v7);
  MPMediaLibraryPropertyCacheValueForProperty(v5, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*a1[1], "setObject:forKey:", v7, v6);

}

void sub_193DDB840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZ88__MPModelLibraryPlaylistEditChangeRequestOperation__loadUpdatedTrackListWithCompletion__EUb_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZ88-[MPModelLibraryPlaylistEditChangeRequestOperation _loadUpdatedTrackListWithCompletion:]EUb_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ88__MPModelLibraryPlaylistEditChangeRequestOperation__loadUpdatedTrackListWithCompletion__EUb_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE11target_typeEv()
{
  return &_ZTIZZ88__MPModelLibraryPlaylistEditChangeRequestOperation__loadUpdatedTrackListWithCompletion__EUb_E3__0;
}

void sub_193DDB964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193DDBA68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_193DDBF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  _Unwind_Resume(a1);
}

void sub_193DDC0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_193DDC5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_193DDC7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193DDC858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193DDD720(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,void *a22,void *a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;

  _Block_object_dispose((const void *)(v33 - 200), 8);
  _Block_object_dispose(&a24, 8);

  if (a2 == 2)
  {
    v35 = __cxa_begin_catch(a1);
    v36 = (void *)MEMORY[0x1E0C99DA0];
    v37 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a24);
    (*(void (**)(void *, char *))(*(_QWORD *)v35 + 24))(v35, &a24);
    if (*(char *)(v33 - 177) >= 0)
      v38 = v33 - 200;
    else
      v38 = *(_QWORD *)(v33 - 200);
    objc_msgSend(v37, "stringWithUTF8String:", v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v39, 0);
    v40 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v33 - 177) < 0)
      operator delete(*(void **)(v33 - 200));
    objc_exception_throw(v40);
  }
  if (a2 == 1)
  {
    v41 = __cxa_begin_catch(a1);
    v42 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41));
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v43, 0);
    v44 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v44);
  }
  _Unwind_Resume(a1);
}

void sub_193DDDD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_193DDDF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_193DDE724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_193DDE820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193DDE8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193DDE9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193DDEAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_193DE0150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__29050(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__29051(uint64_t a1)
{

}

void sub_193DE0848(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193DE08F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193DE0BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193DE0C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193DE1200(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 96));
  objc_destroyWeak((id *)(v5 - 88));
  _Unwind_Resume(a1);
}

void sub_193DE1DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193DE2158(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_193DE2444(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__29301(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__29302(uint64_t a1)
{

}

uint64_t _MPModelObject_c_getterIMP(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForModelKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "BOOLValue");
  return v6;
}

uint64_t _MPModelObject_i_getterIMP(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForModelKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "intValue");
  return v6;
}

uint64_t _MPModelObject_s_getterIMP(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForModelKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "shortValue");
  return v6;
}

uint64_t _MPModelObject_l_getterIMP(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForModelKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "longValue");
  return v6;
}

uint64_t _MPModelObject_C_getterIMP(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForModelKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "unsignedCharValue");
  return v6;
}

uint64_t _MPModelObject_I_getterIMP(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForModelKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "unsignedIntValue");
  return v6;
}

uint64_t _MPModelObject_S_getterIMP(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForModelKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "unsignedShortValue");
  return v6;
}

uint64_t _MPModelObject_L_getterIMP(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForModelKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "unsignedLongValue");
  return v6;
}

void _MPModelObject_c_setterIMP(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setValue:forModelKey:", v6, v7);

}

void _MPModelObject_i_setterIMP(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setValue:forModelKey:", v6, v7);

}

void _MPModelObject_s_setterIMP(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setValue:forModelKey:", v6, v7);

}

void _MPModelObject_l_setterIMP(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setValue:forModelKey:", v6, v7);

}

void _MPModelObject_C_setterIMP(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setValue:forModelKey:", v6, v7);

}

void _MPModelObject_I_setterIMP(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setValue:forModelKey:", v6, v7);

}

void _MPModelObject_S_setterIMP(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setValue:forModelKey:", v6, v7);

}

void _MPModelObject_L_setterIMP(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a1;
  objc_msgSend((id)objc_opt_class(), "_modelKeyForPropertySelector:", a2);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setValue:forModelKey:", v6, v7);

}

void MPModelPropertyMappingMissing(void *a1, void *a2, void *a3)
{
  id v5;
  NSString *v6;
  SEL v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("__%@__MAPPING_MISSING__"), v10);
  v6 = (NSString *)objc_claimAutoreleasedReturnValue();
  v7 = NSSelectorFromString(v6);

  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MPModelPropertyMappingMissing(__unsafe_unretained Class _Nonnull, NSString *__strong _Nonnull, NSString *__strong _Nonnull)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("MPModelObject.m"), 684, CFSTR("Unknown property %@:%@ / missing property mapping: %@"), a1, v10, v5);

  }
  objc_msgSend(a1, "performSelector:", v7);

}

void sub_193DE68D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id location)
{
  id *v37;

  objc_destroyWeak(v37);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _MPToMRNowPlayingInfoDictionary(void *a1, void *a2)
{
  id v3;
  objc_class *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  _QWORD v12[4];
  id v13;
  id v14;

  v3 = a2;
  v4 = (objc_class *)MEMORY[0x1E0C99E08];
  v5 = a1;
  v6 = (void *)objc_msgSend([v4 alloc], "initWithCapacity:", objc_msgSend(v5, "count"));
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___MPToMRNowPlayingInfoDictionary_block_invoke;
  v12[3] = &unk_1E315EFE8;
  v13 = v3;
  v7 = v6;
  v14 = v7;
  v8 = v3;
  objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", v12);

  v9 = v14;
  v10 = v7;

  return v10;
}

id _MPNowPlayingInfoPropertyToMRMediaRemoteNowPlayingInfoPropertyMapping()
{
  if (_MPNowPlayingInfoPropertyToMRMediaRemoteNowPlayingInfoPropertyMapping___once != -1)
    dispatch_once(&_MPNowPlayingInfoPropertyToMRMediaRemoteNowPlayingInfoPropertyMapping___once, &__block_literal_global_145_30053);
  return (id)_MPNowPlayingInfoPropertyToMRMediaRemoteNowPlayingInfoPropertyMapping___propertyMapping;
}

uint64_t __Block_byref_object_copy__30054(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__30055(uint64_t a1)
{

}

id _MPNowPlayingInfoPropertyForMRMediaRemoteNowPlayingInfoProperty(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = _MPNowPlayingInfoPropertyForMRMediaRemoteNowPlayingInfoProperty___once;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&_MPNowPlayingInfoPropertyForMRMediaRemoteNowPlayingInfoProperty___once, &__block_literal_global_31);
  objc_msgSend((id)_MPNowPlayingInfoPropertyForMRMediaRemoteNowPlayingInfoProperty___reversePropertyMapping, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id MPNowPlayingInfoDictionaryToMRNowPlayingInfoDictionary(void *a1)
{
  return _MPToMRNowPlayingInfoDictionary(a1, 0);
}

uint64_t _MPModelLibraryRemovalSupportedOptionsForIndividualItemProperties(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;

  v7 = a3;
  v8 = a4;
  v9 = v8;
  if (a2)
    v10 = 2;
  else
    v10 = 0;
  if ((unint64_t)(a1 - 1) <= 1)
  {
    v11 = objc_msgSend(v8, "isRedownloadable");
LABEL_7:
    v10 |= v11;
    goto LABEL_8;
  }
  v12 = objc_msgSend(v7, "isNonPurgeable");
  v11 = objc_msgSend(v9, "isRedownloadable");
  if (v12)
    goto LABEL_7;
LABEL_8:

  return v10;
}

__CFString *NSStringFromMPRemoteCommandHandlerDialogActionType(unint64_t a1)
{
  if (a1 < 3)
    return off_1E315BF40[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown/%ld"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void sub_193DEB3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193DEC9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__30496(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__30497(uint64_t a1)
{

}

id _NSStringFromMPMediaLibraryArtworkType(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = 0;
  v2 = _MPMediaLibraryArtworkTypeDescriptions;
  while (1)
  {
    v3 = *v2;
    v2 += 2;
    if (v3 == a1)
      break;
    if (++v1 == 6)
      return 0;
  }
  return (id)_MPMediaLibraryArtworkTypeDescriptions[2 * v1 + 1];
}

void sub_193DF3AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193DF3D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193DF4768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193DF4B58(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__31509(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__31510(uint64_t a1)
{

}

id _MPServerObjectDatabaseMediaKitParentChildTypesForChildKey(void *a1)
{
  id v1;
  void *v2;
  const __CFString *v3;
  const __CFString *v4;
  void *v5;

  v1 = a1;
  if (!objc_msgSend(v1, "isEqualToString:", CFSTR("MPModelChildSongAlbum")))
  {
    if (objc_msgSend(v1, "isEqualToString:", CFSTR("MPModelChildSongArtists")))
    {
      v2 = (void *)MEMORY[0x1E0D4D0B8];
      v3 = CFSTR("songs");
LABEL_11:
      v4 = CFSTR("artists");
      goto LABEL_12;
    }
    if (objc_msgSend(v1, "isEqualToString:", CFSTR("MPModelChildAlbumSongs")))
    {
      v2 = (void *)MEMORY[0x1E0D4D0B8];
      v3 = CFSTR("albums");
    }
    else
    {
      if (objc_msgSend(v1, "isEqualToString:", CFSTR("MPModelChildAlbumArtists")))
      {
        v2 = (void *)MEMORY[0x1E0D4D0B8];
        v3 = CFSTR("albums");
        goto LABEL_11;
      }
      if (objc_msgSend(v1, "isEqualToString:", CFSTR("MPModelChildAlbumRecordLabels")))
      {
        v2 = (void *)MEMORY[0x1E0D4D0B8];
        v3 = CFSTR("albums");
        v4 = CFSTR("record-labels");
        goto LABEL_12;
      }
      if (objc_msgSend(v1, "isEqualToString:", CFSTR("MPModelChildArtistAlbums")))
      {
        v2 = (void *)MEMORY[0x1E0D4D0B8];
        v3 = CFSTR("artists");
        goto LABEL_3;
      }
      if (!objc_msgSend(v1, "isEqualToString:", CFSTR("MPModelChildPlaylistEntries")))
      {
        if (objc_msgSend(v1, "isEqualToString:", CFSTR("MPModelChildRadioStationEvents")))
        {
          v2 = (void *)MEMORY[0x1E0D4D0B8];
          v3 = CFSTR("stations");
          v4 = CFSTR("station-events");
          goto LABEL_12;
        }
        if (!objc_msgSend(v1, "isEqualToString:", CFSTR("MPModelChildCreditsArtistRelatedArtist")))
        {
          v5 = 0;
          goto LABEL_13;
        }
        v2 = (void *)MEMORY[0x1E0D4D0B8];
        v3 = CFSTR("credit-artists");
        goto LABEL_11;
      }
      v2 = (void *)MEMORY[0x1E0D4D0B8];
      v3 = CFSTR("playlists");
    }
    v4 = CFSTR("songs");
    goto LABEL_12;
  }
  v2 = (void *)MEMORY[0x1E0D4D0B8];
  v3 = CFSTR("songs");
LABEL_3:
  v4 = CFSTR("albums");
LABEL_12:
  objc_msgSend(v2, "pairWithFirst:second:", v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_13:

  return v5;
}

void sub_193DFDA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_193DFDCC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__32073(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__32074(uint64_t a1)
{

}

Class __getSSRentalCheckinRequestClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!StoreServicesLibraryCore_frameworkLibrary)
    StoreServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!StoreServicesLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *StoreServicesLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MPHomeSharingRentalTracker.m"), 23, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("SSRentalCheckinRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSSRentalCheckinRequestClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MPHomeSharingRentalTracker.m"), 24, CFSTR("Unable to find class %s"), "SSRentalCheckinRequest");

LABEL_8:
    __break(1u);
  }
  getSSRentalCheckinRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id getSSAuthorizationRequestClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSSAuthorizationRequestClass_softClass;
  v7 = getSSAuthorizationRequestClass_softClass;
  if (!getSSAuthorizationRequestClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSSAuthorizationRequestClass_block_invoke;
    v3[3] = &unk_1E31639A0;
    v3[4] = &v4;
    __getSSAuthorizationRequestClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_193E01060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSSAuthorizationRequestClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!StoreServicesLibraryCore_frameworkLibrary_32390)
    StoreServicesLibraryCore_frameworkLibrary_32390 = _sl_dlopen();
  if (!StoreServicesLibraryCore_frameworkLibrary_32390)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *StoreServicesLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MPHomeSharingErrorResolver.m"), 26, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("SSAuthorizationRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSSAuthorizationRequestClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MPHomeSharingErrorResolver.m"), 27, CFSTR("Unable to find class %s"), "SSAuthorizationRequest");

LABEL_8:
    __break(1u);
  }
  getSSAuthorizationRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_193E01AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _serializeBlocksOnMainQueue(void *a1)
{
  id v1;
  void (**v2)(_QWORD, _QWORD, _QWORD);
  _QWORD v3[4];
  id v4;

  v1 = a1;
  dispatch_assert_queue_V2(MEMORY[0x1E0C80D38]);
  objc_msgSend(v1, "firstObject");
  v2 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    objc_msgSend(v1, "removeObjectAtIndex:", 0);
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___serializeBlocksOnMainQueue_block_invoke;
    v3[3] = &unk_1E3163508;
    v4 = v1;
    ((void (**)(_QWORD, uint64_t, _QWORD *))v2)[2](v2, 1, v3);

  }
}

void ___serializeBlocksOnMainQueue_block_invoke(uint64_t a1)
{
  id v1;

  v1 = *(id *)(a1 + 32);
  msv_dispatch_on_main_queue();

}

uint64_t ___serializeBlocksOnMainQueue_block_invoke_2(uint64_t a1)
{
  return _serializeBlocksOnMainQueue(*(_QWORD *)(a1 + 32));
}

uint64_t MRMediaRemoteCommandHandlerStatusFromMPRemoteCommandHandlerStatus(uint64_t result)
{
  if (result <= 999)
  {
    if (result <= 119)
    {
      switch(result)
      {
        case 0:
          return result;
        case 100:
          return 1;
        case 110:
          return 10;
      }
    }
    else if (result > 403)
    {
      if (result == 404 || result == 555)
        return result;
    }
    else if (result == 120)
    {
      return 20;
    }
    return 2;
  }
  switch(result)
  {
    case 1000:
      result = 100;
      break;
    case 1001:
      result = 101;
      break;
    case 1002:
      result = 102;
      break;
    case 1003:
      result = 103;
      break;
    case 1004:
      result = 104;
      break;
    case 1005:
      result = 105;
      break;
    case 1006:
      result = 106;
      break;
    case 1007:
      result = 107;
      break;
    case 1008:
      result = 108;
      break;
    case 1009:
      result = 4;
      break;
    default:
      if (result == 1401)
      {
        result = 401;
      }
      else
      {
        if (result != 1501)
          return 2;
        result = 501;
      }
      break;
  }
  return result;
}

uint64_t MPRemoteCommandHandlerStatusFromMRMediaRemoteCommandHandlerStatus(int a1)
{
  uint64_t result;

  if (a1 <= 400)
  {
    switch(a1)
    {
      case 'd':
        result = 1000;
        break;
      case 'e':
        result = 1001;
        break;
      case 'f':
        result = 1002;
        break;
      case 'g':
        result = 1003;
        break;
      case 'h':
        result = 1004;
        break;
      case 'i':
        result = 1005;
        break;
      case 'j':
        result = 1006;
        break;
      case 'k':
        result = 1007;
        break;
      case 'l':
        result = 1008;
        break;
      default:
        result = 0;
        switch(a1)
        {
          case 0:
          case 3:
            return result;
          case 1:
            result = 100;
            break;
          case 2:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
            return 200;
          case 4:
            result = 1009;
            break;
          case 10:
            result = 110;
            break;
          default:
            if (a1 != 20)
              return 200;
            result = 120;
            break;
        }
        break;
    }
  }
  else
  {
    if (a1 > 500)
    {
      if (a1 == 501)
        return 1501;
      if (a1 == 555)
        return 555;
    }
    else
    {
      if (a1 == 401)
        return 1401;
      if (a1 == 404)
        return 404;
    }
    return 200;
  }
  return result;
}

MPRemoteCommandStatus *MPRemoteCommandStatusFromMRSendCommandResultStatus(void *a1)
{
  id v1;
  MPRemoteCommandStatus *v2;

  v1 = a1;
  v2 = -[MPRemoteCommandStatus initWithMediaRemoteType:]([MPRemoteCommandStatus alloc], "initWithMediaRemoteType:", v1);

  return v2;
}

void sub_193E03D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

Class __getSSRentalCheckoutRequestClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!StoreServicesLibraryCore_frameworkLibrary_33027)
    StoreServicesLibraryCore_frameworkLibrary_33027 = _sl_dlopen();
  if (!StoreServicesLibraryCore_frameworkLibrary_33027)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *StoreServicesLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MPHomeSharingRentalErrorResolver.m"), 28, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("SSRentalCheckoutRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSSRentalCheckoutRequestClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MPHomeSharingRentalErrorResolver.m"), 29, CFSTR("Unable to find class %s"), "SSRentalCheckoutRequest");

LABEL_8:
    __break(1u);
  }
  getSSRentalCheckoutRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_193E04720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  void *v32;
  void *v33;
  uint64_t v34;
  void *v37;
  void *v38;
  void *v39;
  void **p_p;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v34 - 160);

  if (a2 == 2)
  {
    v37 = __cxa_begin_catch(a1);
    v38 = (void *)MEMORY[0x1E0C99DA0];
    v39 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)(v34 - 144));
    (*(void (**)(void ***__return_ptr, void *, uint64_t))(*(_QWORD *)v37 + 24))(&__p, v37, v34 - 144);
    if (a14 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v39, "stringWithUTF8String:", p_p);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v41, 0);
    v42 = (id)objc_claimAutoreleasedReturnValue();

    if (a14 < 0)
      operator delete(__p);
    objc_exception_throw(v42);
  }
  if (a2 == 1)
  {
    v43 = __cxa_begin_catch(a1);
    v44 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v43 + 16))(v43));
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v45, 0);
    v46 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v46);
  }

  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<long long>,std::allocator<mlcore::ComparisonPredicate<long long>>,mlcore::ModelProperty<long long> *&,mlcore::ComparisonOperator &,long long const&,mlcore::ComparisonOptions &,void>(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = operator new(0x48uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E314A950;
  result = mlcore::ComparisonPredicate<long long>::ComparisonPredicate();
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_193E04BD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_193E04CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_193E04DE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193E04E5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__CFString *MPNSStringForFavoriteEntityChangeRequestAction(unint64_t a1)
{
  if (a1 < 4)
    return off_1E315CB30[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown FavoriteEntityChangeRequestAction=%d"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void sub_193E05C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,void *a27,void *a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  uint64_t v35;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  *(_QWORD *)(v35 - 96) = &a31;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 96));
  v38 = *(void **)(v35 - 176);
  if (v38)
    operator delete(v38);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v35 - 128);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a2 == 2)
  {
    v39 = __cxa_begin_catch(a1);
    v40 = (void *)MEMORY[0x1E0C99DA0];
    v41 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&__p);
    (*(void (**)(void *, void **))(*(_QWORD *)v39 + 24))(v39, &__p);
    if (*(char *)(v35 - 153) >= 0)
      v42 = v35 - 176;
    else
      v42 = *(_QWORD *)(v35 - 176);
    objc_msgSend(v41, "stringWithUTF8String:", v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v43, 0);
    v44 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v35 - 153) < 0)
      operator delete(*(void **)(v35 - 176));
    objc_exception_throw(v44);
  }
  if (a2 == 1)
  {
    v45 = __cxa_begin_catch(a1);
    v46 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45));
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v47, 0);
    v48 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v48);
  }
  _Unwind_Resume(a1);
}

void sub_193E05EF8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193E05F44(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_193E06554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,void *a27,void *a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  uint64_t v35;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  *(_QWORD *)(v35 - 96) = &a31;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 96));
  v38 = *(void **)(v35 - 176);
  if (v38)
    operator delete(v38);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v35 - 128);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a2 == 2)
  {
    v39 = __cxa_begin_catch(a1);
    v40 = (void *)MEMORY[0x1E0C99DA0];
    v41 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&__p);
    (*(void (**)(void *, void **))(*(_QWORD *)v39 + 24))(v39, &__p);
    if (*(char *)(v35 - 153) >= 0)
      v42 = v35 - 176;
    else
      v42 = *(_QWORD *)(v35 - 176);
    objc_msgSend(v41, "stringWithUTF8String:", v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v43, 0);
    v44 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v35 - 153) < 0)
      operator delete(*(void **)(v35 - 176));
    objc_exception_throw(v44);
  }
  if (a2 == 1)
  {
    v45 = __cxa_begin_catch(a1);
    v46 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45));
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v47, 0);
    v48 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v48);
  }
  _Unwind_Resume(a1);
}

void sub_193E067B8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193E06804(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(_QWORD *result, uint64_t *a2, unint64_t a3)
{
  _QWORD *v4;
  std::string *v5;
  std::string *v6;
  __int128 v7;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  if (a3)
  {
    v4 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a3);
    v5 = (std::string *)v4[1];
    v11 = v5;
    v10 = v5;
    v8[0] = v4 + 2;
    v8[1] = &v10;
    v8[2] = &v11;
    v9 = 0;
    if (a2)
    {
      v6 = v5;
      do
      {
        if (*((char *)a2 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)a2[2], a2[3]);
          v6 = v11;
        }
        else
        {
          v7 = *((_OWORD *)a2 + 1);
          v6->__r_.__value_.__r.__words[2] = a2[4];
          *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
        }
        a2 = (uint64_t *)*a2;
        v11 = ++v6;
      }
      while (a2);
    }
    else
    {
      v6 = v5;
    }
    v9 = 1;
    result = (_QWORD *)std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
    v4[1] = v6;
  }
  return result;
}

void sub_193E068EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<mlcore::InPredicate<std::string>,std::allocator<mlcore::InPredicate<std::string>>,mlcore::ModelProperty<std::string> *&,std::vector<std::string> const&,void>(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = operator new(0x68uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E314A640;
  result = mlcore::InPredicate<std::string>::InPredicate();
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_193E0696C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<std::string>,std::allocator<mlcore::ComparisonPredicate<std::string>>,mlcore::ModelProperty<std::string> *&,mlcore::ComparisonOperator,std::string const&,void>(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = operator new(0x58uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E314A8E0;
  result = mlcore::ComparisonPredicate<std::string>::ComparisonPredicate();
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_193E069F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mlcore::PropertiesQuery,std::allocator<mlcore::PropertiesQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  v6 = (char *)operator new(0x80uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_1E314A800;
  v10 = *a3;
  *a3 = 0u;
  MEMORY[0x194038F80](v6 + 24, a2, &v10);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *a1 = v6 + 24;
  a1[1] = v6;
}

void sub_193E06AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_193E06C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = a2;
  v12[2] = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_193E06ED8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_193E07518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,void *a27,void *a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  uint64_t v35;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  *(_QWORD *)(v35 - 96) = &a31;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 96));
  v38 = *(void **)(v35 - 176);
  if (v38)
    operator delete(v38);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v35 - 128);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a2 == 2)
  {
    v39 = __cxa_begin_catch(a1);
    v40 = (void *)MEMORY[0x1E0C99DA0];
    v41 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&__p);
    (*(void (**)(void *, void **))(*(_QWORD *)v39 + 24))(v39, &__p);
    if (*(char *)(v35 - 153) >= 0)
      v42 = v35 - 176;
    else
      v42 = *(_QWORD *)(v35 - 176);
    objc_msgSend(v41, "stringWithUTF8String:", v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v43, 0);
    v44 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v35 - 153) < 0)
      operator delete(*(void **)(v35 - 176));
    objc_exception_throw(v44);
  }
  if (a2 == 1)
  {
    v45 = __cxa_begin_catch(a1);
    v46 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45));
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v47, 0);
    v48 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v48);
  }
  _Unwind_Resume(a1);
}

void sub_193E07784(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193E077D0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::vector<mlcore::ModelPropertyBase *>::push_back[abi:ne180100](void **a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = ((char *)v5 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v10);
    else
      v11 = 0;
    v12 = (_QWORD *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    *v12 = *a2;
    v6 = v12 + 1;
    v15 = (char *)*a1;
    v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v12 = v16;
      }
      while (v14 != v15);
      v14 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (void *)v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
}

_QWORD *std::vector<mlcore::SortDescriptor>::vector[abi:ne180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
    v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[6 * v7];
    v8 = 24 * a3;
    v9 = (uint64_t *)(a2 + 8);
    v10 = MEMORY[0x1E0D4AF48] + 16;
    do
    {
      *(_QWORD *)v6 = v10;
      v11 = *v9;
      v6[4] = *((_DWORD *)v9 + 2);
      *((_QWORD *)v6 + 1) = v11;
      v6 += 6;
      v9 += 3;
      v8 -= 24;
    }
    while (v8);
    a1[1] = v6;
  }
  return a1;
}

void sub_193E07980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_193E07B38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_193E082DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *__p,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  void *v39;
  uint64_t v40;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;

  if (__p)
    operator delete(__p);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  operator delete(v39);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v40 - 224);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v40 - 208);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v40 - 192);
  v43 = *(void **)(v40 - 168);
  if (v43)
  {
    *(_QWORD *)(v40 - 160) = v43;
    operator delete(v43);
  }
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v40 - 144);
  if (a2 == 2)
  {
    v44 = __cxa_begin_catch(a1);
    v45 = (void *)MEMORY[0x1E0C99DA0];
    v46 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)(v40 - 112));
    (*(void (**)(void *, uint64_t))(*(_QWORD *)v44 + 24))(v44, v40 - 112);
    if (*(char *)(v40 - 145) >= 0)
      v47 = v40 - 168;
    else
      v47 = *(_QWORD *)(v40 - 168);
    objc_msgSend(v46, "stringWithUTF8String:", v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v48, 0);
    v49 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v40 - 145) < 0)
      operator delete(*(void **)(v40 - 168));
    objc_exception_throw(v49);
  }
  if (a2 == 1)
  {
    v50 = __cxa_begin_catch(a1);
    v51 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v50 + 16))(v50));
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v52, 0);
    v53 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v53);
  }
  _Unwind_Resume(a1);
}

void sub_193E08B64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31)
{
  __break(1u);
}

void sub_193E08DC4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193E08E1C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;
  std::string *v7;
  std::string *v8;
  __int128 v9;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = (std::string *)v6[1];
    v12 = v7;
    v13 = v7;
    v10[0] = v6 + 2;
    v10[1] = &v12;
    v10[2] = &v13;
    v11 = 0;
    if (a2 == a3)
    {
      v8 = v7;
    }
    else
    {
      v8 = v7;
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
          v8 = v13;
        }
        else
        {
          v9 = *a2;
          v8->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
        }
        a2 = (__int128 *)((char *)a2 + 24);
        v13 = ++v8;
      }
      while (a2 != a3);
    }
    v11 = 1;
    result = (_QWORD *)std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    v6[1] = v8;
  }
  return result;
}

void sub_193E08F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_193E090E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_193E095C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30)
{
  __break(1u);
}

void sub_193E097F4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193E0984C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_193E09A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__33486(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x19403A810](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__33487(uint64_t a1)
{

}

void sub_193E0A0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,void *a27,char a28)
{
  uint64_t v28;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  v31 = *(void **)(v28 - 128);
  if (v31)
    operator delete(v31);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v28 - 80);
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a2 == 2)
  {
    v32 = __cxa_begin_catch(a1);
    v33 = (void *)MEMORY[0x1E0C99DA0];
    v34 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&__p);
    (*(void (**)(void *, void **))(*(_QWORD *)v32 + 24))(v32, &__p);
    if (*(char *)(v28 - 105) >= 0)
      v35 = v28 - 128;
    else
      v35 = *(_QWORD *)(v28 - 128);
    objc_msgSend(v34, "stringWithUTF8String:", v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v36, 0);
    v37 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v28 - 105) < 0)
      operator delete(*(void **)(v28 - 128));
    objc_exception_throw(v37);
  }
  if (a2 == 1)
  {
    v38 = __cxa_begin_catch(a1);
    v39 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38));
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v40, 0);
    v41 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v41);
  }
  _Unwind_Resume(a1);
}

void sub_193E0A2D8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193E0A4E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb21_E4__13NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb21_E4__13NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E314A028;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb21_E4__13NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEPNS0_6__baseISA_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E314A028;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb21_E4__13NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEEclES8_S9_(uint64_t a1, int8x8_t *a2, uint64_t a3)
{
  ModelPropertyBase *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  mlcore *v13;
  ModelPropertyBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t i;
  void *v31;
  void *v32;
  void *v33;
  int v34;
  mlcore *v35;
  ModelPropertyBase *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  id obj;
  void *v52;
  mlcore::Entity *v53;
  std::__shared_weak_count *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  mlcore::Entity *v59[2];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[128];
  uint64_t v68;

  v44 = a3;
  v68 = *MEMORY[0x1E0C80C00];
  v4 = (ModelPropertyBase *)mlcore::ArtistPropertyCloudUniversalLibraryID((mlcore *)a1);
  MPMediaLibraryPropertyCacheValueForProperty(v4, a2);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v52, "length"))
    goto LABEL_50;
  if (!objc_msgSend(**(id **)(a1 + 8), "count"))
  {
    if (!objc_msgSend(**(id **)(a1 + 40), "count"))
      goto LABEL_50;
    v22 = (void *)objc_msgSend(**(id **)(a1 + 40), "copy");
    v61 = 0u;
    v62 = 0u;
    *(_OWORD *)v59 = 0u;
    v60 = 0u;
    obj = v22;
    v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v59, v67, 16);
    if (!v23)
      goto LABEL_49;
    v47 = *(_QWORD *)v60;
LABEL_23:
    v24 = 0;
    v46 = v23;
    while (1)
    {
      if (*(_QWORD *)v60 != v47)
        objc_enumerationMutation(obj);
      v25 = (void *)*((_QWORD *)v59[1] + v24);
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      objc_msgSend(v25, "allKeys", v44);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v55, &v63, 16);
      v48 = v25;
      v49 = v24;
      if (v27)
      {
        v28 = *(_QWORD *)v56;
        v29 = 1;
        do
        {
          for (i = 0; i != v27; ++i)
          {
            if (*(_QWORD *)v56 != v28)
              objc_enumerationMutation(v26);
            v31 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * i);
            objc_msgSend(v31, "personalizedStore");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "cloudArtistID");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            v34 = objc_msgSend(v33, "isEqualToString:", v52);

            if (v34)
            {
              v36 = (ModelPropertyBase *)mlcore::ArtistPropertyPersistentID(v35);
              MPMediaLibraryPropertyCacheValueForProperty(v36, a2);
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              v38 = objc_msgSend(v37, "longLongValue");

              v39 = MEMORY[0x194039F64]();
              (*(void (**)(mlcore::Entity **__return_ptr, uint64_t, uint64_t, int8x8_t *))(*(_QWORD *)v39 + 48))(&v53, v39, v38, a2);
              if (v53)
              {
                objc_msgSend(**(id **)(a1 + 16), "identifiersForPropertyCache:context:", mlcore::Entity::propertyCache(v53), **(_QWORD **)(a1 + 24));
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(**(id **)(a1 + 32), "setLibraryIdentifierSet:forIdentifierSet:", v40, v31);

              }
              v41 = v54;
              if (v54)
              {
                p_shared_owners = (unint64_t *)&v54->__shared_owners_;
                do
                  v43 = __ldaxr(p_shared_owners);
                while (__stlxr(v43 - 1, p_shared_owners));
                if (!v43)
                {
                  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                  std::__shared_weak_count::__release_weak(v41);
                }
              }
            }
            else
            {
              v29 = 0;
            }
          }
          v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v55, &v63, 16);
        }
        while (v27);

        if ((v29 & 1) == 0)
          goto LABEL_46;
      }
      else
      {

      }
      objc_msgSend(**(id **)(a1 + 40), "removeObjectIdenticalTo:", v48);
LABEL_46:
      if (!objc_msgSend(**(id **)(a1 + 40), "count"))
        goto LABEL_49;
      v24 = v49 + 1;
      if (v49 + 1 == v46)
      {
        v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v59, v67, 16);
        if (!v23)
          goto LABEL_49;
        goto LABEL_23;
      }
    }
  }
  v5 = (void *)objc_msgSend(**(id **)(a1 + 8), "copy");
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  obj = v5;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v63, v67, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v64;
LABEL_5:
    v8 = 0;
    while (1)
    {
      if (*(_QWORD *)v64 != v7)
        objc_enumerationMutation(obj);
      v9 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * v8);
      objc_msgSend(v9, "personalizedStore", v44);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "cloudArtistID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "isEqualToString:", v52);

      if (v12)
      {
        v14 = (ModelPropertyBase *)mlcore::ArtistPropertyPersistentID(v13);
        MPMediaLibraryPropertyCacheValueForProperty(v14, a2);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "longLongValue");

        v17 = MEMORY[0x194039F64]();
        (*(void (**)(mlcore::Entity **__return_ptr, uint64_t, uint64_t, int8x8_t *))(*(_QWORD *)v17 + 48))(v59, v17, v16, a2);
        if (v59[0])
        {
          objc_msgSend(**(id **)(a1 + 16), "identifiersForPropertyCache:context:", mlcore::Entity::propertyCache(v59[0]), **(_QWORD **)(a1 + 24));
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(**(id **)(a1 + 32), "setLibraryIdentifierSet:forIdentifierSet:", v18, v9);
          objc_msgSend(**(id **)(a1 + 8), "removeObjectIdenticalTo:", v9);

        }
        v19 = (std::__shared_weak_count *)v59[1];
        if (v59[1])
        {
          v20 = (unint64_t *)((char *)v59[1] + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      if (!objc_msgSend(**(id **)(a1 + 8), "count"))
        break;
      if (++v8 == v6)
      {
        v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v63, v67, 16);
        if (v6)
          goto LABEL_5;
        break;
      }
    }
  }
LABEL_49:

LABEL_50:
  if (!objc_msgSend(**(id **)(a1 + 8), "count", v44) && !objc_msgSend(**(id **)(a1 + 40), "count")
    || objc_msgSend(**(id **)(a1 + 48), "isCancelled"))
  {
    *v45 = 1;
  }

}

void sub_193E0AB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb21_E4__13NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZ48-[MPStoreLibraryMappingRequestOperation execute]EUb21_E4$_13"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb21_E4__13NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE11target_typeEv()
{
  return &_ZTIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb21_E4__13;
}

char *std::vector<long long>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<long long,void *> *>,std::__hash_const_iterator<std::__hash_node<long long,void *> *>>(char *result, _QWORD *a2, unint64_t a3)
{
  char *v4;
  _QWORD *i;

  if (a3)
  {
    v4 = result;
    result = std::vector<mlcore::ModelPropertyBase *>::__vallocate[abi:ne180100](result, a3);
    for (i = (_QWORD *)*((_QWORD *)v4 + 1); a2; a2 = (_QWORD *)*a2)
      *i++ = a2[2];
    *((_QWORD *)v4 + 1) = i;
  }
  return result;
}

void sub_193E0AD04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_193E0AED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb19_EUb20_E4__12NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb19_EUb20_E4__12NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E314A340;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb19_EUb20_E4__12NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEPNS0_6__baseISA_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E314A340;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb19_EUb20_E4__12NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEEclES8_S9_(uint64_t a1, int8x8_t *a2, _BYTE *a3)
{
  ModelPropertyBase *v4;
  void *v5;
  mlcore *v6;
  ModelPropertyBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  void *v12;
  void *v13;
  mlcore *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  ModelPropertyBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  void *v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  void *v34;
  void *v35;
  int v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  void *v42;
  mlcore *v43;
  ModelPropertyBase *v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  _BOOL4 v48;
  uint64_t v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  NSObject *v54;
  __int128 v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id obj;
  char v62;
  id v63;
  uint64_t v64;
  void *v65;
  void *v66;
  int8x8_t *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  mlcore::Entity *v73[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE buf[22];
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  void *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[128];
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v4 = (ModelPropertyBase *)mlcore::ArtistPropertyStoreID((mlcore *)a1);
  v67 = a2;
  MPMediaLibraryPropertyCacheValueForProperty(v4, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = objc_msgSend(v5, "longLongValue");

  v7 = (ModelPropertyBase *)mlcore::ArtistPropertyGroupingKey(v6);
  MPMediaLibraryPropertyCacheValueForProperty(v7, v67);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v68)
    goto LABEL_67;
  if (!objc_msgSend(**(id **)(a1 + 8), "count"))
  {
    if (!objc_msgSend(**(id **)(a1 + 40), "count"))
      goto LABEL_67;
    v27 = (void *)objc_msgSend(**(id **)(a1 + 40), "copy");
    v75 = 0u;
    v76 = 0u;
    *(_OWORD *)v73 = 0u;
    v74 = 0u;
    obj = v27;
    v28 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v73, v86, 16);
    if (!v28)
      goto LABEL_66;
    v58 = *(_QWORD *)v74;
    *(_QWORD *)&v29 = 138543362;
    v55 = v29;
LABEL_25:
    v59 = 0;
    v57 = v28;
    while (1)
    {
      if (*(_QWORD *)v74 != v58)
        objc_enumerationMutation(obj);
      v30 = (void *)*((_QWORD *)v73[1] + v59);
      v69 = 0u;
      v70 = 0u;
      v71 = 0u;
      v72 = 0u;
      v65 = v30;
      objc_msgSend(v30, "allKeys", v55);
      v63 = (id)objc_claimAutoreleasedReturnValue();
      v31 = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &v69, &v82, 16);
      if (v31)
      {
        v64 = *(_QWORD *)v70;
        v62 = 1;
        do
        {
          for (i = 0; i != v31; ++i)
          {
            if (*(_QWORD *)v70 != v64)
              objc_enumerationMutation(v63);
            v33 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * i);
            objc_msgSend(v65, "objectForKey:", v33);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0C99E38], "null");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            if (v34 == v35 && v66 == 0)
              v37 = 1;
            else
              v37 = objc_msgSend(v34, "isEqualToData:");

            objc_msgSend(v33, "universalStore");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v38, "adamID") == v68)
            {
              v39 = 1;
            }
            else
            {
              objc_msgSend(v33, "universalStore");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v40, "formerAdamIDs");
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v68);
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              v39 = objc_msgSend(v41, "containsObject:", v42);

            }
            v44 = (ModelPropertyBase *)mlcore::ArtistPropertyPersistentID(v43);
            MPMediaLibraryPropertyCacheValueForProperty(v44, v67);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            v46 = objc_msgSend(v45, "longLongValue");

            LODWORD(v45) = v39 & v37;
            v47 = os_log_create("com.apple.amp.mediaplayer", "Default_Oversize");
            v48 = os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v45 == 1)
            {
              if (v48)
              {
                *(_DWORD *)buf = 134218754;
                *(_QWORD *)&buf[4] = v68;
                *(_WORD *)&buf[12] = 2114;
                *(_QWORD *)&buf[14] = v66;
                v78 = 2048;
                v79 = v46;
                v80 = 2114;
                v81 = v34;
                _os_log_impl(&dword_193B9B000, v47, OS_LOG_TYPE_DEFAULT, "[LibraryMappingOperation] Personalizing artist with adamID=%lld, requestGroupingKey=%{public}@, matched to entity with pid=%lld groupingKey=%{public}@", buf, 0x2Au);
              }

              v49 = MEMORY[0x194039F64]();
              (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, int8x8_t *))(*(_QWORD *)v49 + 48))(buf, v49, v46, v67);
              if (*(_QWORD *)buf)
              {
                objc_msgSend(**(id **)(a1 + 16), "identifiersForPropertyCache:context:", mlcore::Entity::propertyCache(*(mlcore::Entity **)buf), **(_QWORD **)(a1 + 24));
                v50 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(**(id **)(a1 + 32), "setLibraryIdentifierSet:forIdentifierSet:", v50, v33);

              }
              v51 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v52 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v53 = __ldaxr(v52);
                while (__stlxr(v53 - 1, v52));
                if (!v53)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
            }
            else
            {
              if (v48)
              {
                *(_DWORD *)buf = 134218754;
                *(_QWORD *)&buf[4] = v68;
                *(_WORD *)&buf[12] = 2114;
                *(_QWORD *)&buf[14] = v66;
                v78 = 2048;
                v79 = v46;
                v80 = 2114;
                v81 = v34;
                _os_log_impl(&dword_193B9B000, v47, OS_LOG_TYPE_DEFAULT, "[LibraryMappingOperation] Personalizing artist with adamID=%lld, requestGroupingKey=%{public}@, DID NOT match to entity with pid=%lld groupingKey=%{public}@", buf, 0x2Au);
              }

              v62 = 0;
            }

          }
          v31 = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &v69, &v82, 16);
        }
        while (v31);

        if ((v62 & 1) == 0)
          goto LABEL_63;
      }
      else
      {

      }
      objc_msgSend(**(id **)(a1 + 40), "removeObjectIdenticalTo:", v65);
      v54 = os_log_create("com.apple.amp.mediaplayer", "Default_Oversize");
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = v55;
        *(_QWORD *)&buf[4] = v65;
        _os_log_impl(&dword_193B9B000, v54, OS_LOG_TYPE_DEFAULT, "[LibraryMappingOperation] All identifiers matched for request=%{public}@", buf, 0xCu);
      }

LABEL_63:
      if (!objc_msgSend(**(id **)(a1 + 40), "count"))
        goto LABEL_66;
      if (++v59 == v57)
      {
        v28 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v73, v86, 16);
        if (!v28)
          goto LABEL_66;
        goto LABEL_25;
      }
    }
  }
  v8 = (void *)objc_msgSend(**(id **)(a1 + 8), "copy");
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  obj = v8;
  v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v82, v86, 16);
  if (!v9)
    goto LABEL_66;
  v10 = *(_QWORD *)v83;
  do
  {
    for (j = 0; j != v9; ++j)
    {
      if (*(_QWORD *)v83 != v10)
        objc_enumerationMutation(obj);
      v12 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * j);
      objc_msgSend(v12, "universalStore");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v13, "adamID") == v68)
      {

      }
      else
      {
        objc_msgSend(v12, "universalStore");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "formerAdamIDs");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v68);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v16, "containsObject:", v17);

        if (!v18)
          goto LABEL_18;
      }
      v19 = (ModelPropertyBase *)mlcore::ArtistPropertyPersistentID(v14);
      MPMediaLibraryPropertyCacheValueForProperty(v19, v67);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v20, "longLongValue");

      v22 = MEMORY[0x194039F64]();
      (*(void (**)(mlcore::Entity **__return_ptr, uint64_t, uint64_t, int8x8_t *))(*(_QWORD *)v22 + 48))(v73, v22, v21, v67);
      if (v73[0])
      {
        objc_msgSend(**(id **)(a1 + 16), "identifiersForPropertyCache:context:", mlcore::Entity::propertyCache(v73[0]), **(_QWORD **)(a1 + 24));
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(**(id **)(a1 + 32), "setLibraryIdentifierSet:forIdentifierSet:", v23, v12);
        objc_msgSend(**(id **)(a1 + 8), "removeObjectIdenticalTo:", v12);

      }
      v24 = (std::__shared_weak_count *)v73[1];
      if (v73[1])
      {
        v25 = (unint64_t *)((char *)v73[1] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
LABEL_18:
      if (!objc_msgSend(**(id **)(a1 + 8), "count"))
        goto LABEL_66;
    }
    v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v82, v86, 16);
  }
  while (v9);
LABEL_66:

LABEL_67:
  if (!objc_msgSend(**(id **)(a1 + 8), "count") && !objc_msgSend(**(id **)(a1 + 40), "count")
    || objc_msgSend(**(id **)(a1 + 48), "isCancelled"))
  {
    *a3 = 1;
  }

}

void sub_193E0B780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{

  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb19_EUb20_E4__12NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZZ48-[MPStoreLibraryMappingRequestOperation execute]EUb19_EUb20_E4$_12"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb19_EUb20_E4__12NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE11target_typeEv()
{
  return &_ZTIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb19_EUb20_E4__12;
}

void _ZNSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb18_E4__11NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb18_E4__11NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E3149FD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb18_E4__11NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEPNS0_6__baseISA_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E3149FD0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb18_E4__11NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEEclES8_S9_(uint64_t a1, int8x8_t *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  mlcore *v14;
  ModelPropertyBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  id obj;
  mlcore::Entity *v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v23 = a3;
  v33 = *MEMORY[0x1E0C80C00];
  MPMediaLibraryPropertyCacheValueForProperty(**(ModelPropertyBase ***)(a1 + 8), a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "length"))
  {
    v6 = (void *)objc_msgSend(**(id **)(a1 + 16), "copy");
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    obj = v6;
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v29;
LABEL_4:
      v9 = 0;
      while (1)
      {
        if (*(_QWORD *)v29 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * v9);
        objc_msgSend(v10, "universalStore", v23);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "universalCloudLibraryID");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "isEqualToString:", v5);

        if (v13)
        {
          v15 = (ModelPropertyBase *)mlcore::AlbumPropertyPersistentID(v14);
          MPMediaLibraryPropertyCacheValueForProperty(v15, a2);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v16, "longLongValue");

          v18 = MEMORY[0x194039F1C]();
          (*(void (**)(mlcore::Entity **__return_ptr, uint64_t, uint64_t, int8x8_t *))(*(_QWORD *)v18 + 48))(&v26, v18, v17, a2);
          if (v26)
          {
            objc_msgSend(**(id **)(a1 + 24), "identifiersForPropertyCache:context:", mlcore::Entity::propertyCache(v26), **(_QWORD **)(a1 + 32));
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(**(id **)(a1 + 40), "setLibraryIdentifierSet:forIdentifierSet:", v19, v10);
            objc_msgSend(**(id **)(a1 + 16), "removeObjectIdenticalTo:", v10);

          }
          v20 = v27;
          if (v27)
          {
            p_shared_owners = (unint64_t *)&v27->__shared_owners_;
            do
              v22 = __ldaxr(p_shared_owners);
            while (__stlxr(v22 - 1, p_shared_owners));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
        }
        if (!objc_msgSend(**(id **)(a1 + 16), "count"))
          break;
        if (++v9 == v7)
        {
          v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
          if (v7)
            goto LABEL_4;
          break;
        }
      }
    }

  }
  if (!objc_msgSend(**(id **)(a1 + 16), "count", v23) || objc_msgSend(**(id **)(a1 + 48), "isCancelled"))
    *v24 = 1;

}

void sub_193E0BC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb18_E4__11NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZ48-[MPStoreLibraryMappingRequestOperation execute]EUb18_E4$_11"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb18_E4__11NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE11target_typeEv()
{
  return &_ZTIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb18_E4__11;
}

void sub_193E0C038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  void *v16;
  uint64_t v17;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v17 - 112);

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_88c69_ZTSNSt3__16vectorIPN6mlcore17ModelPropertyBaseENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v2 = (_QWORD *)(a1 + 88);
  v2[2] = 0;
  return std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(v2, *(const void **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3);
}

void __destroy_helper_block_ea8_88c69_ZTSNSt3__16vectorIPN6mlcore17ModelPropertyBaseENS_9allocatorIS3_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb16_EUb17_E4__10NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb16_EUb17_E4__10NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E314A2E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb16_EUb17_E4__10NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEPNS0_6__baseISA_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E314A2E8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb16_EUb17_E4__10NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEEclES8_S9_(uint64_t a1, int8x8_t *a2, _BYTE *a3)
{
  ModelPropertyBase *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  mlcore *v13;
  ModelPropertyBase *v14;
  void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int8x8_t *v21;
  id obj;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  _BYTE v30[24];
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  _BYTE v35[24];
  __int128 v36;
  __int128 v37;
  int v38;
  int v39;
  uint64_t v40;
  mlcore::Entity *v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v5 = (ModelPropertyBase *)mlcore::ItemPropertyStoreCloudAlbumID((mlcore *)a1);
  v21 = a2;
  MPMediaLibraryPropertyCacheValueForProperty(v5, a2);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v24, "length"))
  {
    v6 = (void *)objc_msgSend(**(id **)(a1 + 8), "copy");
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    obj = v6;
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
    if (v7)
    {
      v23 = *(_QWORD *)v44;
LABEL_4:
      v8 = 0;
      while (1)
      {
        if (*(_QWORD *)v44 != v23)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * v8);
        objc_msgSend(v9, "universalStore");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "universalCloudLibraryID");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "isEqualToString:", v24);

        if (v12)
        {
          v14 = (ModelPropertyBase *)mlcore::ItemPropertyAlbumPersistentID(v13);
          MPMediaLibraryPropertyCacheValueForProperty(v14, v21);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "longLongValue");

          MEMORY[0x194039F1C]();
          v39 = 0;
          *(_OWORD *)&v35[8] = 0u;
          v33 = 1065353216;
          *(_OWORD *)&v30[8] = 0u;
          v28 = 1065353216;
          v26 = 0u;
          v27 = 0u;
          v29 = 0u;
          *(_OWORD *)v30 = 0u;
          *(_DWORD *)&v30[16] = 1065353216;
          v31 = 0u;
          v32 = 0u;
          v34 = 0u;
          *(_OWORD *)v35 = 0u;
          *(_DWORD *)&v35[16] = 1065353216;
          v36 = 0u;
          v37 = 0u;
          v38 = 1065353216;
          v25 = MEMORY[0x1E0D4AF40] + 16;
          v40 = MEMORY[0x1E0D4AF40] + 56;
          mlcore::EntityCache::entityForClassAndPersistentID();
          mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(&v25);
          if (v41)
          {
            objc_msgSend(**(id **)(a1 + 24), "identifiersForPropertyCache:context:", mlcore::Entity::propertyCache(v41), **(_QWORD **)(a1 + 32));
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(**(id **)(a1 + 40), "setLibraryIdentifierSet:forIdentifierSet:", v16, v9);
            objc_msgSend(**(id **)(a1 + 8), "removeObjectIdenticalTo:", v9);

          }
          v17 = v42;
          if (v42)
          {
            p_shared_owners = (unint64_t *)&v42->__shared_owners_;
            do
              v19 = __ldaxr(p_shared_owners);
            while (__stlxr(v19 - 1, p_shared_owners));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
        }
        if (!objc_msgSend(**(id **)(a1 + 8), "count"))
          break;
        if (++v8 == v7)
        {
          v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
          if (v7)
            goto LABEL_4;
          break;
        }
      }
    }

  }
  if (!objc_msgSend(**(id **)(a1 + 8), "count") || objc_msgSend(**(id **)(a1 + 48), "isCancelled"))
    *a3 = 1;

}

void sub_193E0C4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17)
{

  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb16_EUb17_E4__10NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZZ48-[MPStoreLibraryMappingRequestOperation execute]EUb16_EUb17_E4$_10"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb16_EUb17_E4__10NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE11target_typeEv()
{
  return &_ZTIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb16_EUb17_E4__10;
}

void _ZNSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb15_E3__9NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb15_E3__9NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E3149F78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb15_E3__9NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEPNS0_6__baseISA_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E3149F78;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb15_E3__9NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEEclES8_S9_(uint64_t a1, int8x8_t *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  mlcore *v14;
  ModelPropertyBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  id obj;
  mlcore::Entity *v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v23 = a3;
  v33 = *MEMORY[0x1E0C80C00];
  MPMediaLibraryPropertyCacheValueForProperty(**(ModelPropertyBase ***)(a1 + 8), a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "length"))
  {
    v6 = (void *)objc_msgSend(**(id **)(a1 + 16), "copy");
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    obj = v6;
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v29;
LABEL_4:
      v9 = 0;
      while (1)
      {
        if (*(_QWORD *)v29 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * v9);
        objc_msgSend(v10, "personalizedStore", v23);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "cloudAlbumID");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "isEqualToString:", v5);

        if (v13)
        {
          v15 = (ModelPropertyBase *)mlcore::AlbumPropertyPersistentID(v14);
          MPMediaLibraryPropertyCacheValueForProperty(v15, a2);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v16, "longLongValue");

          v18 = MEMORY[0x194039F1C]();
          (*(void (**)(mlcore::Entity **__return_ptr, uint64_t, uint64_t, int8x8_t *))(*(_QWORD *)v18 + 48))(&v26, v18, v17, a2);
          if (v26)
          {
            objc_msgSend(**(id **)(a1 + 24), "identifiersForPropertyCache:context:", mlcore::Entity::propertyCache(v26), **(_QWORD **)(a1 + 32));
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(**(id **)(a1 + 40), "setLibraryIdentifierSet:forIdentifierSet:", v19, v10);
            objc_msgSend(**(id **)(a1 + 16), "removeObjectIdenticalTo:", v10);

          }
          v20 = v27;
          if (v27)
          {
            p_shared_owners = (unint64_t *)&v27->__shared_owners_;
            do
              v22 = __ldaxr(p_shared_owners);
            while (__stlxr(v22 - 1, p_shared_owners));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
        }
        if (!objc_msgSend(**(id **)(a1 + 16), "count"))
          break;
        if (++v9 == v7)
        {
          v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
          if (v7)
            goto LABEL_4;
          break;
        }
      }
    }

  }
  if (!objc_msgSend(**(id **)(a1 + 16), "count", v23) || objc_msgSend(**(id **)(a1 + 48), "isCancelled"))
    *v24 = 1;

}

void sub_193E0C8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb15_E3__9NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZ48-[MPStoreLibraryMappingRequestOperation execute]EUb15_E3$_9"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb15_E3__9NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE11target_typeEv()
{
  return &_ZTIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb15_E3__9;
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

_QWORD *__copy_helper_block_ea8_88c89_ZTSNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEE112c69_ZTSNSt3__16vectorIPN6mlcore17ModelPropertyBaseENS_9allocatorIS3_EEEE(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = a1;
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 11, *(__int128 **)(a2 + 88), *(__int128 **)(a2 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3));
  v3[14] = 0;
  v3[15] = 0;
  v3 += 14;
  v3[2] = 0;
  return std::vector<mlcore::ModelPropertyBase *>::__init_with_size[abi:ne180100]<mlcore::ModelPropertyBase **,mlcore::ModelPropertyBase **>(v3, *(const void **)(a2 + 112), *(_QWORD *)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
}

void sub_193E0CA90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_88c89_ZTSNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEE112c69_ZTSNSt3__16vectorIPN6mlcore17ModelPropertyBaseENS_9allocatorIS3_EEEE(uint64_t a1)
{
  void *v2;
  void **v3;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  v3 = (void **)(a1 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void sub_193E0CD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  void *v16;
  uint64_t v17;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v17 - 112);

  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb13_EUb14_E3__8NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb13_EUb14_E3__8NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E314A290;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb13_EUb14_E3__8NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEPNS0_6__baseISA_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E314A290;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb13_EUb14_E3__8NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEEclES8_S9_(uint64_t a1, int8x8_t *a2, _BYTE *a3)
{
  ModelPropertyBase *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  mlcore *v13;
  ModelPropertyBase *v14;
  void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int8x8_t *v21;
  id obj;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  _BYTE v30[24];
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  _BYTE v35[24];
  __int128 v36;
  __int128 v37;
  int v38;
  int v39;
  uint64_t v40;
  mlcore::Entity *v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v5 = (ModelPropertyBase *)mlcore::ItemPropertyStoreCloudAlbumID((mlcore *)a1);
  v21 = a2;
  MPMediaLibraryPropertyCacheValueForProperty(v5, a2);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v24, "length"))
  {
    v6 = (void *)objc_msgSend(**(id **)(a1 + 8), "copy");
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    obj = v6;
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
    if (v7)
    {
      v23 = *(_QWORD *)v44;
LABEL_4:
      v8 = 0;
      while (1)
      {
        if (*(_QWORD *)v44 != v23)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * v8);
        objc_msgSend(v9, "personalizedStore");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "cloudAlbumID");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "isEqualToString:", v24);

        if (v12)
        {
          v14 = (ModelPropertyBase *)mlcore::ItemPropertyAlbumPersistentID(v13);
          MPMediaLibraryPropertyCacheValueForProperty(v14, v21);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "longLongValue");

          MEMORY[0x194039F1C]();
          v39 = 0;
          *(_OWORD *)&v35[8] = 0u;
          v33 = 1065353216;
          *(_OWORD *)&v30[8] = 0u;
          v28 = 1065353216;
          v26 = 0u;
          v27 = 0u;
          v29 = 0u;
          *(_OWORD *)v30 = 0u;
          *(_DWORD *)&v30[16] = 1065353216;
          v31 = 0u;
          v32 = 0u;
          v34 = 0u;
          *(_OWORD *)v35 = 0u;
          *(_DWORD *)&v35[16] = 1065353216;
          v36 = 0u;
          v37 = 0u;
          v38 = 1065353216;
          v25 = MEMORY[0x1E0D4AF40] + 16;
          v40 = MEMORY[0x1E0D4AF40] + 56;
          mlcore::EntityCache::entityForClassAndPersistentID();
          mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(&v25);
          if (v41)
          {
            objc_msgSend(**(id **)(a1 + 24), "identifiersForPropertyCache:context:", mlcore::Entity::propertyCache(v41), **(_QWORD **)(a1 + 32));
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(**(id **)(a1 + 40), "setLibraryIdentifierSet:forIdentifierSet:", v16, v9);
            objc_msgSend(**(id **)(a1 + 8), "removeObjectIdenticalTo:", v9);

          }
          v17 = v42;
          if (v42)
          {
            p_shared_owners = (unint64_t *)&v42->__shared_owners_;
            do
              v19 = __ldaxr(p_shared_owners);
            while (__stlxr(v19 - 1, p_shared_owners));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
        }
        if (!objc_msgSend(**(id **)(a1 + 8), "count"))
          break;
        if (++v8 == v7)
        {
          v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
          if (v7)
            goto LABEL_4;
          break;
        }
      }
    }

  }
  if (!objc_msgSend(**(id **)(a1 + 8), "count") || objc_msgSend(**(id **)(a1 + 48), "isCancelled"))
    *a3 = 1;

}

void sub_193E0D1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17)
{

  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb13_EUb14_E3__8NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZZ48-[MPStoreLibraryMappingRequestOperation execute]EUb13_EUb14_E3$_8"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb13_EUb14_E3__8NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE11target_typeEv()
{
  return &_ZTIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb13_EUb14_E3__8;
}

void sub_193E0D5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  void *v16;
  uint64_t v17;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](v17 - 112);

  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb11_EUb12_E3__7NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb11_EUb12_E3__7NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E314A238;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb11_EUb12_E3__7NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEPNS0_6__baseISA_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E314A238;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb11_EUb12_E3__7NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEEclES8_S9_(uint64_t a1, int8x8_t *a2, uint64_t a3)
{
  ModelPropertyBase *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  mlcore *v14;
  ModelPropertyBase *v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;
  void *v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  _BYTE *v26;
  void *v27;
  id obj;
  int8x8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  _BYTE v38[24];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  _BYTE v43[24];
  __int128 v44;
  __int128 v45;
  int v46;
  int v47;
  uint64_t v48;
  mlcore::Entity *v49;
  std::__shared_weak_count *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  uint64_t v56;

  v25 = a3;
  v56 = *MEMORY[0x1E0C80C00];
  v5 = (ModelPropertyBase *)mlcore::ItemPropertyStorePlaylistID((mlcore *)a1);
  v29 = a2;
  MPMediaLibraryPropertyCacheValueForProperty(v5, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "longLongValue");

  if (v7)
  {
    v32 = v7;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    obj = (id)objc_msgSend(**(id **)(a1 + 8), "copy");
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
    if (!v8)
      goto LABEL_24;
    v30 = *(_QWORD *)v52;
    while (1)
    {
      v9 = 0;
      v31 = v8;
      do
      {
        if (*(_QWORD *)v52 != v30)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * v9);
        objc_msgSend(v10, "universalStore", v25);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v11, "adamID") != v32)
        {
          objc_msgSend(v10, "universalStore");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v12, "subscriptionAdamID") != v32)
          {
            objc_msgSend(v10, "universalStore");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v13, "purchasedAdamID") != v32)
            {
              objc_msgSend(v10, "universalStore");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "formerAdamIDs");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v32);
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              v23 = objc_msgSend(v21, "containsObject:", v22);

              if ((v23 & 1) == 0)
                goto LABEL_21;
              goto LABEL_13;
            }

          }
        }

LABEL_13:
        v15 = (ModelPropertyBase *)mlcore::ItemPropertyAlbumPersistentID(v14);
        MPMediaLibraryPropertyCacheValueForProperty(v15, v29);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "longLongValue");

        MEMORY[0x194039F1C]();
        v47 = 0;
        *(_OWORD *)&v43[8] = 0u;
        v41 = 1065353216;
        *(_OWORD *)&v38[8] = 0u;
        v36 = 1065353216;
        v34 = 0u;
        v35 = 0u;
        v37 = 0u;
        *(_OWORD *)v38 = 0u;
        *(_DWORD *)&v38[16] = 1065353216;
        v39 = 0u;
        v40 = 0u;
        v42 = 0u;
        *(_OWORD *)v43 = 0u;
        *(_DWORD *)&v43[16] = 1065353216;
        v44 = 0u;
        v45 = 0u;
        v46 = 1065353216;
        v33 = MEMORY[0x1E0D4AF40] + 16;
        v48 = MEMORY[0x1E0D4AF40] + 56;
        mlcore::EntityCache::entityForClassAndPersistentID();
        mlcore::PropertyCacheBase<long long,int,double,std::string,mediaplatform::Data>::~PropertyCacheBase(&v33);
        if (v49)
        {
          objc_msgSend(**(id **)(a1 + 24), "identifiersForPropertyCache:context:", mlcore::Entity::propertyCache(v49), **(_QWORD **)(a1 + 32));
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(**(id **)(a1 + 40), "setLibraryIdentifierSet:forIdentifierSet:", v17, v10);
          objc_msgSend(**(id **)(a1 + 8), "removeObjectIdenticalTo:", v10);

        }
        v18 = v50;
        if (v50)
        {
          p_shared_owners = (unint64_t *)&v50->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
LABEL_21:
        if (!objc_msgSend(**(id **)(a1 + 8), "count"))
          goto LABEL_24;
        ++v9;
      }
      while (v9 != v31);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
      if (!v8)
      {
LABEL_24:

        break;
      }
    }
  }
  result = objc_msgSend(**(id **)(a1 + 8), "count", v25);
  if (!result || (result = objc_msgSend(**(id **)(a1 + 48), "isCancelled"), (_DWORD)result))
    *v26 = 1;
  return result;
}

void sub_193E0DAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb11_EUb12_E3__7NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZZ48-[MPStoreLibraryMappingRequestOperation execute]EUb11_EUb12_E3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb11_EUb12_E3__7NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE11target_typeEv()
{
  return &_ZTIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb11_EUb12_E3__7;
}

void _ZNSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb10_E3__6NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb10_E3__6NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E3149F20;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb10_E3__6NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEPNS0_6__baseISA_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E3149F20;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb10_E3__6NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEEclES8_S9_(uint64_t a1, int8x8_t *a2, uint64_t a3)
{
  ModelPropertyBase *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;
  _BYTE *v17;
  id obj;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v16 = a3;
  v24 = *MEMORY[0x1E0C80C00];
  v5 = (ModelPropertyBase *)mlcore::PlaylistPropertyCloudUniversalLibraryID((mlcore *)a1);
  MPMediaLibraryPropertyCacheValueForProperty(v5, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "length"))
  {
    v7 = (void *)objc_msgSend(**(id **)(a1 + 8), "copy");
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    obj = v7;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v20;
LABEL_4:
      v10 = 0;
      while (1)
      {
        if (*(_QWORD *)v20 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v10);
        objc_msgSend(v11, "universalStore", v16);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "universalCloudLibraryID");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "isEqualToString:", v6);

        if (v14)
        {
          objc_msgSend(**(id **)(a1 + 16), "identifiersForPropertyCache:context:", a2, **(_QWORD **)(a1 + 24));
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(**(id **)(a1 + 32), "setLibraryIdentifierSet:forIdentifierSet:", v15, v11);
          objc_msgSend(**(id **)(a1 + 8), "removeObjectIdenticalTo:", v11);

        }
        if (!objc_msgSend(**(id **)(a1 + 8), "count"))
          break;
        if (v8 == ++v10)
        {
          v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
          if (v8)
            goto LABEL_4;
          break;
        }
      }
    }

  }
  if (!objc_msgSend(**(id **)(a1 + 8), "count", v16) || objc_msgSend(**(id **)(a1 + 40), "isCancelled"))
    *v17 = 1;

}

void sub_193E0DE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb10_E3__6NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZ48-[MPStoreLibraryMappingRequestOperation execute]EUb10_E3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb10_E3__6NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE11target_typeEv()
{
  return &_ZTIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb10_E3__6;
}

void sub_193E0E09C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb8_EUb9_E3__5NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb8_EUb9_E3__5NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E314A4A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb8_EUb9_E3__5NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEPNS0_6__baseISA_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E314A4A0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb8_EUb9_E3__5NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEEclES8_S9_(uint64_t a1, int8x8_t *a2, _BYTE *a3)
{
  ModelPropertyBase *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  _BOOL4 v15;
  void *v16;
  uint64_t result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = (ModelPropertyBase *)mlcore::PlaylistPropertyStoreCloudID((mlcore *)a1);
  MPMediaLibraryPropertyCacheValueForProperty(v5, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "longLongValue");

  if (v7)
  {
    v8 = (void *)objc_msgSend(**(id **)(a1 + 8), "copy");
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v9 = v8;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v20;
LABEL_4:
      v12 = 0;
      while (1)
      {
        if (*(_QWORD *)v20 != v11)
          objc_enumerationMutation(v9);
        v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v12);
        objc_msgSend(v13, "personalizedStore");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = v7 == objc_msgSend(v14, "cloudID");

        if (v15)
        {
          objc_msgSend(**(id **)(a1 + 16), "identifiersForPropertyCache:context:", a2, **(_QWORD **)(a1 + 24));
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(**(id **)(a1 + 32), "setLibraryIdentifierSet:forIdentifierSet:", v16, v13);
          objc_msgSend(**(id **)(a1 + 8), "removeObjectIdenticalTo:", v13);

        }
        if (!objc_msgSend(**(id **)(a1 + 8), "count"))
          break;
        if (v10 == ++v12)
        {
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
          if (v10)
            goto LABEL_4;
          break;
        }
      }
    }

  }
  result = objc_msgSend(**(id **)(a1 + 8), "count");
  if (!result || (result = objc_msgSend(**(id **)(a1 + 40), "isCancelled"), (_DWORD)result))
    *a3 = 1;
  return result;
}

void sub_193E0E364(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb8_EUb9_E3__5NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZZ48-[MPStoreLibraryMappingRequestOperation execute]EUb8_EUb9_E3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb8_EUb9_E3__5NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE11target_typeEv()
{
  return &_ZTIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb8_EUb9_E3__5;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb6_EUb7_E3__4NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb6_EUb7_E3__4NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E314A448;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb6_EUb7_E3__4NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEPNS0_6__baseISA_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E314A448;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb6_EUb7_E3__4NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEEclES8_S9_(uint64_t a1, int8x8_t *a2, uint64_t a3)
{
  ModelPropertyBase *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;
  _BYTE *v17;
  id obj;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v16 = a3;
  v24 = *MEMORY[0x1E0C80C00];
  v5 = (ModelPropertyBase *)mlcore::PlaylistPropertyCloudGlobalID((mlcore *)a1);
  MPMediaLibraryPropertyCacheValueForProperty(v5, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "length"))
  {
    v7 = (void *)objc_msgSend(**(id **)(a1 + 8), "copy");
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    obj = v7;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v20;
LABEL_4:
      v10 = 0;
      while (1)
      {
        if (*(_QWORD *)v20 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v10);
        objc_msgSend(v11, "universalStore", v16);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "globalPlaylistID");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "isEqualToString:", v6);

        if (v14)
        {
          objc_msgSend(**(id **)(a1 + 16), "identifiersForPropertyCache:context:", a2, **(_QWORD **)(a1 + 24));
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(**(id **)(a1 + 32), "setLibraryIdentifierSet:forIdentifierSet:", v15, v11);
          objc_msgSend(**(id **)(a1 + 8), "removeObjectIdenticalTo:", v11);

        }
        if (!objc_msgSend(**(id **)(a1 + 8), "count"))
          break;
        if (v8 == ++v10)
        {
          v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
          if (v8)
            goto LABEL_4;
          break;
        }
      }
    }

  }
  if (!objc_msgSend(**(id **)(a1 + 8), "count", v16) || objc_msgSend(**(id **)(a1 + 40), "isCancelled"))
    *v17 = 1;

}

void sub_193E0E6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb6_EUb7_E3__4NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZZ48-[MPStoreLibraryMappingRequestOperation execute]EUb6_EUb7_E3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb6_EUb7_E3__4NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE11target_typeEv()
{
  return &_ZTIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb6_EUb7_E3__4;
}

void _ZNSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb5_E3__3NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb5_E3__3NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E314A080;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb5_E3__3NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEPNS0_6__baseISA_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E314A080;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb5_E3__3NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEEclES8_S9_(uint64_t a1, int8x8_t *a2, uint64_t a3)
{
  ModelPropertyBase *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;
  _BYTE *v17;
  id obj;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v16 = a3;
  v24 = *MEMORY[0x1E0C80C00];
  v5 = (ModelPropertyBase *)mlcore::ItemPropertyStoreCloudUniversalLibraryID((mlcore *)a1);
  MPMediaLibraryPropertyCacheValueForProperty(v5, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "length"))
  {
    v7 = (void *)objc_msgSend(**(id **)(a1 + 8), "copy");
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    obj = v7;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v20;
LABEL_4:
      v10 = 0;
      while (1)
      {
        if (*(_QWORD *)v20 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v10);
        objc_msgSend(v11, "universalStore", v16);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "universalCloudLibraryID");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "isEqualToString:", v6);

        if (v14)
        {
          objc_msgSend(**(id **)(a1 + 16), "identifiersForPropertyCache:context:", a2, **(_QWORD **)(a1 + 24));
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(**(id **)(a1 + 32), "setLibraryIdentifierSet:forIdentifierSet:", v15, v11);
          objc_msgSend(**(id **)(a1 + 8), "removeObjectIdenticalTo:", v11);

        }
        if (!objc_msgSend(**(id **)(a1 + 8), "count"))
          break;
        if (v8 == ++v10)
        {
          v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
          if (v8)
            goto LABEL_4;
          break;
        }
      }
    }

  }
  if (!objc_msgSend(**(id **)(a1 + 8), "count", v16) || objc_msgSend(**(id **)(a1 + 40), "isCancelled"))
    *v17 = 1;

}

void sub_193E0E9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb5_E3__3NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZ48-[MPStoreLibraryMappingRequestOperation execute]EUb5_E3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb5_E3__3NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE11target_typeEv()
{
  return &_ZTIZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb5_E3__3;
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A8E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPredicate<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A8E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

void std::__shared_ptr_emplace<mlcore::InPredicate<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::InPredicate<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A640;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::InPredicate<std::string>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_193E0ECB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb3_EUb4_E3__2NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb3_EUb4_E3__2NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E314A3F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb3_EUb4_E3__2NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEPNS0_6__baseISA_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E314A3F0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb3_EUb4_E3__2NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEEclES8_S9_(uint64_t a1, int8x8_t *a2, _BYTE *a3)
{
  ModelPropertyBase *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  _BOOL4 v15;
  void *v16;
  uint64_t result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = (ModelPropertyBase *)mlcore::ItemPropertyStoreCloudID((mlcore *)a1);
  MPMediaLibraryPropertyCacheValueForProperty(v5, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "longLongValue");

  if (v7)
  {
    v8 = (void *)objc_msgSend(**(id **)(a1 + 8), "copy");
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v9 = v8;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v20;
LABEL_4:
      v12 = 0;
      while (1)
      {
        if (*(_QWORD *)v20 != v11)
          objc_enumerationMutation(v9);
        v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v12);
        objc_msgSend(v13, "personalizedStore");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = v7 == objc_msgSend(v14, "cloudID");

        if (v15)
        {
          objc_msgSend(**(id **)(a1 + 16), "identifiersForPropertyCache:context:", a2, **(_QWORD **)(a1 + 24));
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(**(id **)(a1 + 32), "setLibraryIdentifierSet:forIdentifierSet:", v16, v13);
          objc_msgSend(**(id **)(a1 + 8), "removeObjectIdenticalTo:", v13);

        }
        if (!objc_msgSend(**(id **)(a1 + 8), "count"))
          break;
        if (v10 == ++v12)
        {
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
          if (v10)
            goto LABEL_4;
          break;
        }
      }
    }

  }
  result = objc_msgSend(**(id **)(a1 + 8), "count");
  if (!result || (result = objc_msgSend(**(id **)(a1 + 40), "isCancelled"), (_DWORD)result))
    *a3 = 1;
  return result;
}

void sub_193E0EF78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb3_EUb4_E3__2NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZZ48-[MPStoreLibraryMappingRequestOperation execute]EUb3_EUb4_E3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb3_EUb4_E3__2NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE11target_typeEv()
{
  return &_ZTIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb3_EUb4_E3__2;
}

void sub_193E0F1AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb1_EUb2_E3__1NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb1_EUb2_E3__1NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E314A398;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb1_EUb2_E3__1NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEPNS0_6__baseISA_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E314A398;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb1_EUb2_E3__1NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEEclES8_S9_(uint64_t a1, int8x8_t *a2, uint64_t a3)
{
  ModelPropertyBase *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  void *v21;
  id obj;
  int8x8_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v19 = a3;
  v31 = *MEMORY[0x1E0C80C00];
  v5 = (ModelPropertyBase *)mlcore::ItemPropertyStoreID((mlcore *)a1);
  v23 = a2;
  MPMediaLibraryPropertyCacheValueForProperty(v5, a2);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v21, "longLongValue");
  if (v6)
  {
    v7 = (void *)objc_msgSend(**(id **)(a1 + 8), "copy");
    v25 = v6;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    obj = v7;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    if (!v8)
      goto LABEL_18;
    v24 = *(_QWORD *)v27;
    while (1)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v27 != v24)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v9);
        objc_msgSend(v10, "universalStore", v19);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (v25 == objc_msgSend(v11, "adamID"))
          goto LABEL_10;
        objc_msgSend(v10, "universalStore");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (v25 == objc_msgSend(v12, "purchasedAdamID"))
        {

LABEL_10:
LABEL_11:
          objc_msgSend(**(id **)(a1 + 16), "identifiersForPropertyCache:context:", v23, **(_QWORD **)(a1 + 24));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(**(id **)(a1 + 32), "setLibraryIdentifierSet:forIdentifierSet:", v13, v10);
          objc_msgSend(**(id **)(a1 + 8), "removeObjectIdenticalTo:", v10);

          goto LABEL_12;
        }
        objc_msgSend(v10, "universalStore");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "formerAdamIDs");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v25);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v15, "containsObject:", v16);

        if ((v17 & 1) != 0)
          goto LABEL_11;
LABEL_12:
        if (!objc_msgSend(**(id **)(a1 + 8), "count"))
          goto LABEL_18;
        ++v9;
      }
      while (v8 != v9);
      v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      v8 = v18;
      if (!v18)
      {
LABEL_18:

        break;
      }
    }
  }
  if (!objc_msgSend(**(id **)(a1 + 8), "count", v19) || objc_msgSend(**(id **)(a1 + 40), "isCancelled"))
    *v20 = 1;

}

void sub_193E0F518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{

  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb1_EUb2_E3__1NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZZ48-[MPStoreLibraryMappingRequestOperation execute]EUb1_EUb2_E3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb1_EUb2_E3__1NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE11target_typeEv()
{
  return &_ZTIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb1_EUb2_E3__1;
}

void _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb_EUb0_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb_EUb0_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E314A4F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb_EUb0_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE7__cloneEPNS0_6__baseISA_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E314A4F8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb_EUb0_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEEclES8_S9_(uint64_t a1, int8x8_t *a2, _BYTE *a3)
{
  ModelPropertyBase *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  id obj;
  int8x8_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = (ModelPropertyBase *)mlcore::ItemPropertySubscriptionStoreItemID((mlcore *)a1);
  v23 = a2;
  MPMediaLibraryPropertyCacheValueForProperty(v5, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "longLongValue");

  if (v7)
  {
    v25 = v7;
    v8 = (void *)objc_msgSend(**(id **)(a1 + 8), "copy");
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    obj = v8;
    v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    if (!v9)
      goto LABEL_18;
    v24 = *(_QWORD *)v27;
    while (1)
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v27 != v24)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v10);
        objc_msgSend(v11, "universalStore");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (v25 == objc_msgSend(v12, "adamID"))
          goto LABEL_10;
        objc_msgSend(v11, "universalStore");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (v25 == objc_msgSend(v13, "subscriptionAdamID"))
        {

LABEL_10:
LABEL_11:
          objc_msgSend(**(id **)(a1 + 16), "identifiersForPropertyCache:context:", v23, **(_QWORD **)(a1 + 24));
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(**(id **)(a1 + 32), "setLibraryIdentifierSet:forIdentifierSet:", v14, v11);
          objc_msgSend(**(id **)(a1 + 8), "removeObjectIdenticalTo:", v11);

          goto LABEL_12;
        }
        objc_msgSend(v11, "universalStore");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "formerAdamIDs");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v25);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v16, "containsObject:", v17);

        if ((v18 & 1) != 0)
          goto LABEL_11;
LABEL_12:
        if (!objc_msgSend(**(id **)(a1 + 8), "count"))
          goto LABEL_18;
        ++v10;
      }
      while (v9 != v10);
      v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      v9 = v19;
      if (!v19)
      {
LABEL_18:

        break;
      }
    }
  }
  result = objc_msgSend(**(id **)(a1 + 8), "count");
  if (!result || (result = objc_msgSend(**(id **)(a1 + 40), "isCancelled"), (_DWORD)result))
    *a3 = 1;
  return result;
}

void sub_193E0F8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb_EUb0_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZZ48-[MPStoreLibraryMappingRequestOperation execute]EUb_EUb0_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb_EUb0_E3__0NS_9allocatorIS2_EEFvRKN6mlcore13PropertyCacheERbEE11target_typeEv()
{
  return &_ZTIZZZ48__MPStoreLibraryMappingRequestOperation_execute_EUb_EUb0_E3__0;
}

uint64_t __Block_byref_object_copy__33688(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__33689(uint64_t a1)
{

}

__CFString *NSStringFromMPModelGenericObjectType(unint64_t a1)
{
  if (a1 < 0x16)
    return off_1E315CD20[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UnknownGenericObjectType-%ld"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

double MPProcessInfoSystemWallClockUptime()
{
  __darwin_time_t tv_sec;
  __darwin_suseconds_t tv_usec;
  int v2;
  double result;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  timeval v7;
  int v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v8 = 0x1500000001;
  v7.tv_sec = 0;
  *(_QWORD *)&v7.tv_usec = 0;
  gettimeofday(&v7, 0);
  tv_sec = v7.tv_sec;
  tv_usec = v7.tv_usec;
  v5 = 0;
  v6 = 0;
  v4 = 16;
  v2 = sysctl(v8, 2u, &v5, &v4, 0, 0);
  result = 0.0;
  if (v2 != -1)
  {
    if (v5)
      return (double)tv_usec / 1000000.0 + (double)tv_sec - ((double)(int)v6 / 1000000.0 + (double)v5);
  }
  return result;
}

void MPUIApplicationOpenURL(void *a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(id, _QWORD);
  void *v7;
  id v8;

  v8 = a1;
  v5 = a2;
  v6 = a3;
  MPUIApplication();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v7, "openURL:options:completionHandler:", v8, v5, v6);
  else
    v6[2](v6, 0);

}

void sub_193E12F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__34138(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__34139(uint64_t a1)
{

}

void sub_193E13278(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_193E13600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

void sub_193E13ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193E13C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _MPChangeDetailOperationNodeRelease(_DWORD *a1)
{
  _DWORD *v1;
  int v2;
  int v3;
  _DWORD *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = v1[3];
      if (!v2)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPChangeDetailOperationNodeRelease(MPChangeDetailOperationNode *)");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("MPChangeDetails.m"), 593, CFSTR("Overrelease of Operation"));

        v2 = v1[3];
      }
      v3 = v2 - 1;
      v1[3] = v3;
      if (v3)
        break;
      v4 = (_DWORD *)*((_QWORD *)v1 + 2);
      free(v1);
      v1 = v4;
    }
    while (v4);
  }
}

void *MPChangeDetailOperationGenerate(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  char v5;

  return MPChangeDetailOperationGenerateEx(a1, a2, a3, &v5, a4);
}

uint64_t MPChangeDetailOperationMaximumSegmentCount(uint64_t a1)
{
  uint64_t v1;

  v1 = 250;
  if (a1 < 5001)
    v1 = 500;
  if (a1 >= 1100)
    return v1;
  else
    return 1100;
}

uint64_t MPChangeDetailOperationMaximumElementCount()
{
  return 100000;
}

void MPChangeDetailOperationDescription(uint64_t a1)
{
  __asm { BR              X11 }
}

id sub_193E13E20(unint64_t a1)
{
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<MPChangeDetailOperation type=replace previousIndex=%d finalIndex=%d>"), (a1 >> 31) & 0x7FFFFFFF, a1 & 0x7FFFFFFF);
  return (id)objc_claimAutoreleasedReturnValue();
}

id MPChangeDetailOperationsCopyDescription(uint64_t *a1, uint64_t a2)
{
  void *i;
  uint64_t v5;
  void *v6;
  void *v7;

  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR("<MPChangeDetailOperations {\n"));
  for (i = (void *)objc_claimAutoreleasedReturnValue(); a2; --a2)
  {
    objc_msgSend(i, "appendString:", CFSTR("\t"));
    v5 = *a1++;
    MPChangeDetailOperationDescription(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(i, "appendString:", v6);

    objc_msgSend(i, "appendString:", CFSTR(",\n"));
  }
  objc_msgSend(i, "appendString:", CFSTR("}>"));
  v7 = (void *)objc_msgSend(i, "copy");

  return v7;
}

__CFString *MPStoreModelObjectContentItemIDForIdentifierSet(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  __CFString *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v1 = a1;
  objc_msgSend(v1, "library");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "persistentID");

  if (!v3)
  {
    objc_msgSend(v1, "universalStore");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "universalCloudLibraryID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v6, "length"))
    {
      v4 = v6;
LABEL_19:

      goto LABEL_20;
    }
    objc_msgSend(v1, "radio");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "stationStringID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v8, "length"))
    {
      v4 = v8;
LABEL_18:

      goto LABEL_19;
    }
    objc_msgSend(v1, "universalStore");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "globalPlaylistID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v10, "length"))
    {
      v11 = v10;
    }
    else
    {
      objc_msgSend(v1, "personalizedStore");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "cloudID");

      if (v13)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%llu"), v13);
      }
      else
      {
        objc_msgSend(v1, "universalStore");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "adamID");

        if (!v15)
        {
          objc_msgSend(v1, "universalStore");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v16, "subscriptionAdamID");

          if (!v15)
          {
            objc_msgSend(v1, "universalStore");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v15 = objc_msgSend(v17, "purchasedAdamID");

            if (!v15)
            {
              objc_msgSend(v1, "radio");
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v19, "stationHash");
              v20 = (void *)objc_claimAutoreleasedReturnValue();

              if (objc_msgSend(v20, "length"))
              {
                v4 = v20;
              }
              else
              {
                objc_msgSend(v1, "universalStore");
                v21 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v21, "informalMediaClipID");
                v22 = (void *)objc_claimAutoreleasedReturnValue();

                if (objc_msgSend(v22, "length"))
                {
                  v23 = v22;
                  v4 = v22;
                }
                else
                {
                  v23 = v22;
                  objc_msgSend(v1, "universalStore");
                  v24 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v24, "informalStaticAssetID");
                  v25 = (void *)objc_claimAutoreleasedReturnValue();

                  if (objc_msgSend(v25, "length"))
                    v4 = v25;
                  else
                    v4 = CFSTR("<unknown-store-id>");

                }
              }

              goto LABEL_17;
            }
          }
        }
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lli"), v15);
      }
      v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    v4 = v11;
LABEL_17:

    goto LABEL_18;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lli"), v3);
  v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_20:

  return v4;
}

void sub_193E15E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193E160D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193E16DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193E17F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193E18AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _ML3TrackPropertiesFromMPMediaItemProperties(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  _QWORD v6[4];
  id v7;

  if (!a1)
    return 0;
  v1 = (void *)MEMORY[0x1E0C99E08];
  v2 = a1;
  objc_msgSend(v1, "dictionaryWithCapacity:", objc_msgSend(v2, "count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ML3TrackPropertiesFromMPMediaItemProperties_block_invoke;
  v6[3] = &unk_1E315D4F0;
  v4 = v3;
  v7 = v4;
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v6);

  return v4;
}

id _ML3CollectionPropertiesFromMPMediaItemColectionProperties(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  _QWORD v7[4];
  id v8;
  id v9;

  if (!a1)
    return 0;
  v1 = (void *)MEMORY[0x1E0C99E08];
  v2 = a1;
  objc_msgSend(v1, "dictionaryWithCapacity:", objc_msgSend(v2, "count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = ML3CollectionEntityClassForGroupingType();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ML3CollectionPropertiesFromMPMediaItemColectionProperties_block_invoke;
  v7[3] = &unk_1E315D518;
  v9 = v4;
  v5 = v3;
  v8 = v5;
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v7);

  return v5;
}

void __MPCloudControllerReceivedRemoteNotification(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  NSObject *v7;
  int v8;
  id v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x19403A624]();
  v6 = a2;
  v7 = os_log_create("com.apple.amp.mediaplayer", "CloudController");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138543618;
    v9 = v6;
    v10 = 2112;
    v11 = a3;
    _os_log_impl(&dword_193B9B000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ - Received notification [%@]", (uint8_t *)&v8, 0x16u);
  }

  if (objc_msgSend(a3, "isEqualToString:", *MEMORY[0x1E0DDBC98]))
  {
    objc_msgSend(v6, "canShowCloudDownloadButtonsDidChangeNotification:", 0);
  }
  else if (objc_msgSend(a3, "isEqualToString:", *MEMORY[0x1E0DDBCA0]))
  {
    objc_msgSend(v6, "canShowCloudTracksDidChangeNotification:", 0);
  }
  else if (objc_msgSend(a3, "isEqualToString:", *MEMORY[0x1E0DDBCB0]))
  {
    objc_msgSend(v6, "isCellularDataRestrictedDidChangeNotification:", 0);
  }
  else if (objc_msgSend(a3, "isEqualToString:", *MEMORY[0x1E0DDBCA8])
         || objc_msgSend(a3, "isEqualToString:", *MEMORY[0x1E0DDBCB8]))
  {
    objc_msgSend(v6, "hasProperNetworkConditionsToShowCloudMediaDidChangeNotification:", 0);
  }
  else if ((objc_msgSend(a3, "isEqualToString:", *MEMORY[0x1E0DDBCE0]) & 1) != 0
         || objc_msgSend(a3, "isEqualToString:", *MEMORY[0x1E0DDBCF8]))
  {
    objc_msgSend(v6, "authenticatedDidChangeNotification:", 0);
  }
  else if (objc_msgSend(a3, "isEqualToString:", *MEMORY[0x1E0DDBCD0]))
  {
    objc_msgSend(v6, "enableICMLErrorReasonChange:", 0);
  }

  objc_autoreleasePoolPop(v5);
}

void sub_193E1B548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__34908(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__34909(uint64_t a1)
{

}

uint64_t MPCloudControllerGetSagaOnDiskDatabaseRevisionForUserIdentity(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(MEMORY[0x1E0D51270], "musicLibraryForUserAccount:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "sagaOnDiskDatabaseRevision");

  return v2;
}

void sub_193E1BB54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_193E1BBFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193E1BDB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_193E1BF9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_193E1C030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193E1C958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193E1CB80(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_193E1CCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_193E1CDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_193E1DAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x19403A810](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy__35271(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__35272(uint64_t a1)
{

}

void sub_193E1E3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_193E1E514(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193E1E594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193E1E634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)MPStoreLibraryPersonalizationResponse;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_193E1EB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,void *a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50)
{
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;

  _Block_object_dispose(&a43, 8);
  if (__p)
  {
    a50 = (uint64_t)__p;
    operator delete(__p);
  }

  _Block_object_dispose((const void *)(v55 - 208), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__35426(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__35427(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_193E1F2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_193E1F420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_193E1F564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_193E1F64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_193E1F718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_193E1F7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_193E1F910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__165(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__166(uint64_t a1)
{

}

void sub_193E1FBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_193E1FF9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_193E20158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193E201FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_193E21E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__36113(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x19403A810](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__36114(uint64_t a1)
{

}

uint64_t MPClientRadioControllerGetXPCInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE2F2080);
}

id MPServiceRadioControllerGetXPCInterface()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3117B8);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", objc_opt_class());
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v1, sel_serviceRadioControllerGetRadioAvailabilityWithCompletionHandler_, 1, 1);

  v2 = (void *)MEMORY[0x1E0C99E60];
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  objc_msgSend(v2, "setWithObjects:", v3, v4, objc_opt_class(), 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v5, sel_serviceRadioControllerGetRecentStationGroupsWithCompletionHandler_, 0, 1);

  return v0;
}

void sub_193E228A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__36431(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__36432(uint64_t a1)
{

}

id MusicURLQueryItemLanguageWithURLBag(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "stringForBagKey:", *MEMORY[0x1E0DDBE88]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (_NSIsNSString() && objc_msgSend(v1, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("l"), v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id MusicURLComponentsWithURLBag(void *a1, int a2)
{
  __CFString *v3;
  __CFString *v4;
  NSObject *v5;
  __CFString *v6;
  __CFString *v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  int v12;
  __CFString *v13;
  __int16 v14;
  NSObject *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "dictionaryForBagKey:", *MEMORY[0x1E0DDBE90]);
  v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    -[__CFString objectForKey:](v3, "objectForKey:", CFSTR("ampMusicAPIDomains"));
    v5 = objc_claimAutoreleasedReturnValue();
    if ((_NSIsNSDictionary() & 1) != 0)
    {
      v6 = CFSTR("default");
      if (a2)
        v6 = CFSTR("listenNow");
      v7 = v6;
      -[NSObject objectForKey:](v5, "objectForKey:", v7);
      v8 = objc_claimAutoreleasedReturnValue();
      if ((_NSIsNSString() & 1) != 0)
      {
        v9 = (void *)objc_opt_new();
        objc_msgSend(v9, "setScheme:", CFSTR("https"));
        objc_msgSend(v9, "setHost:", v8);
      }
      else
      {
        v10 = os_log_create("com.apple.amp.mediaplayer", "Default");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          v12 = 138543618;
          v13 = v7;
          v14 = 2114;
          v15 = v5;
          _os_log_impl(&dword_193B9B000, v10, OS_LOG_TYPE_ERROR, "No host found for API domain requested (%{public}@): %{public}@", (uint8_t *)&v12, 0x16u);
        }

        v9 = 0;
      }

    }
    else
    {
      v8 = os_log_create("com.apple.amp.mediaplayer", "Default");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v12 = 138543362;
        v13 = v4;
        _os_log_impl(&dword_193B9B000, v8, OS_LOG_TYPE_ERROR, "No domains in music common dictionary of bag, can't generate URL: %{public}@", (uint8_t *)&v12, 0xCu);
      }
      v9 = 0;
    }

  }
  else
  {
    v5 = os_log_create("com.apple.amp.mediaplayer", "Default");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_193B9B000, v5, OS_LOG_TYPE_ERROR, "No music subscription dictionary in bag, can't get subscription properties to generate URL", (uint8_t *)&v12, 2u);
    }
    v9 = 0;
  }

  return v9;
}

id MusicURLWithPathUsingURLBag(void *a1, void *a2, int a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;

  v5 = (void *)MEMORY[0x1E0C99E98];
  v6 = a1;
  MusicURLComponentsWithURLBag(a2, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "URL");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "URLWithString:relativeToURL:", v6, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_193E27860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__37063(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__37064(uint64_t a1)
{

}

BOOL MPFloatEqualToFloat(double a1, double a2)
{
  return vabdd_f64(a2, a1) < 0.00000011920929;
}

BOOL MPFloatGreaterThanOrEqualToFloat(double a1, double a2)
{
  return vabdd_f64(a2, a1) < 0.00000011920929 || a1 > a2;
}

BOOL MPFloatLessThanOrEqualToFloat(double a1, double a2)
{
  return vabdd_f64(a2, a1) < 0.00000011920929 || a1 < a2;
}

double MPFloatGetSafeScaleForValue(double result)
{
  void *v1;
  double v2;
  double v3;

  if (vabdd_f64(0.0, result) < 0.00000011920929)
  {
    objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "scale");
    v3 = v2;

    return v3;
  }
  return result;
}

double MPFloatFloorForScale(double a1, double a2)
{
  double SafeScaleForValue;

  SafeScaleForValue = MPFloatGetSafeScaleForValue(a2);
  return floor(SafeScaleForValue * a1) / SafeScaleForValue;
}

double MPFloatRoundForScale(double a1, double a2)
{
  double SafeScaleForValue;

  SafeScaleForValue = MPFloatGetSafeScaleForValue(a2);
  return round(SafeScaleForValue * a1) / SafeScaleForValue;
}

double MPFloatCeilForScale(double a1, double a2)
{
  double SafeScaleForValue;

  SafeScaleForValue = MPFloatGetSafeScaleForValue(a2);
  return ceil(SafeScaleForValue * a1) / SafeScaleForValue;
}

CGFloat MPRectByApplyingUserInterfaceLayoutDirectionInRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  void *v16;
  uint64_t v17;
  double MaxX;
  double v19;
  double v20;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;

  MPUIApplication();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "userInterfaceLayoutDirection");

  if (v17 == 1)
  {
    v22.origin.x = a5;
    v22.origin.y = a6;
    v22.size.width = a7;
    v22.size.height = a8;
    MaxX = CGRectGetMaxX(v22);
    v23.origin.x = a1;
    v23.origin.y = a2;
    v23.size.width = a3;
    v23.size.height = a4;
    v19 = MaxX - CGRectGetMinX(v23);
    v24.origin.x = a1;
    v24.origin.y = a2;
    v24.size.width = a3;
    v24.size.height = a4;
    v20 = v19 - CGRectGetWidth(v24);
    v25.origin.x = a1;
    v25.origin.y = a2;
    v25.size.width = a3;
    v25.size.height = a4;
    CGRectGetMinY(v25);
    v26.origin.x = a1;
    v26.origin.y = a2;
    v26.size.width = a3;
    v26.size.height = a4;
    CGRectGetWidth(v26);
    v27.origin.x = a1;
    v27.origin.y = a2;
    v27.size.width = a3;
    v27.size.height = a4;
    CGRectGetHeight(v27);
    return v20;
  }
  return a1;
}

CGFloat MPRectByRemovingUserInterfaceLayoutDirectionInRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  void *v16;
  uint64_t v17;
  double MaxX;
  double v19;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  MPUIApplication();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "userInterfaceLayoutDirection");

  if (v17 == 1)
  {
    v21.origin.x = a5;
    v21.origin.y = a6;
    v21.size.width = a7;
    v21.size.height = a8;
    MaxX = CGRectGetMaxX(v21);
    v22.origin.x = a1;
    v22.origin.y = a2;
    v22.size.width = a3;
    v22.size.height = a4;
    v19 = MaxX - CGRectGetMaxX(v22);
    v23.origin.x = a1;
    v23.origin.y = a2;
    v23.size.width = a3;
    v23.size.height = a4;
    CGRectGetMinY(v23);
    v24.origin.x = a1;
    v24.origin.y = a2;
    v24.size.width = a3;
    v24.size.height = a4;
    CGRectGetWidth(v24);
    v25.origin.x = a1;
    v25.origin.y = a2;
    v25.size.width = a3;
    v25.size.height = a4;
    CGRectGetHeight(v25);
    return v19;
  }
  return a1;
}

void sub_193E2B308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193E2B56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__37724(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__37725(uint64_t a1)
{

}

void sub_193E2DC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193E2DD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193E2DEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__38631(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__38632(uint64_t a1)
{

}

void sub_193E36FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193E37FDC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  void *v68;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  id v76;
  void *v77;
  void *v78;
  void *v79;
  id v80;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a68);
  if (a2 == 2)
  {
    v71 = __cxa_begin_catch(a1);
    v72 = (void *)MEMORY[0x1E0C99DA0];
    v73 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&__p);
    (*(void (**)(void **__return_ptr, void *, void **))(*(_QWORD *)v71 + 24))(&a20, v71, &__p);
    if (a25 >= 0)
      v74 = &a20;
    else
      v74 = a20;
    objc_msgSend(v73, "stringWithUTF8String:", v74);
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v72, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v75, 0);
    v76 = (id)objc_claimAutoreleasedReturnValue();

    if (a25 < 0)
      operator delete(a20);
    objc_exception_throw(v76);
  }
  if (a2 == 1)
  {
    v77 = __cxa_begin_catch(a1);
    v78 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v77 + 16))(v77));
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v78, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v79, 0);
    v80 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v80);
  }

  _Unwind_Resume(a1);
}

void sub_193E385E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v24;
  void *v25;
  void *v26;
  void **p_p;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    v24 = __cxa_begin_catch(a1);
    v25 = (void *)MEMORY[0x1E0C99DA0];
    v26 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a9);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v24 + 24))(&__p, v24, &a9);
    if (a21 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v26, "stringWithUTF8String:", p_p);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v28, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();

    if (a21 < 0)
      operator delete(__p);
    objc_exception_throw(v29);
  }
  if (a2 == 1)
  {
    v30 = __cxa_begin_catch(a1);
    v31 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v32, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v33);
  }

  _Unwind_Resume(a1);
}

void sub_193E388A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v28;
  void *v29;
  void *v30;
  void **p_p;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;

  if (a2 == 2)
  {
    v28 = __cxa_begin_catch(a1);
    v29 = (void *)MEMORY[0x1E0C99DA0];
    v30 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a9);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v28 + 24))(&__p, v28, &a9);
    if (a21 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v30, "stringWithUTF8String:", p_p);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v32, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();

    if (a21 < 0)
      operator delete(__p);
    objc_exception_throw(v33);
  }
  if (a2 == 1)
  {
    v34 = __cxa_begin_catch(a1);
    v35 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v34 + 16))(v34));
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v36, 0);
    v37 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v37);
  }

  _Unwind_Resume(a1);
}

void sub_193E38B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void sub_193E38C1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_193E38CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)MPModelLibraryDownloadQueueResponse;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_193E38DDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193E38F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_193E39010(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_193E390EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_193E391A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_193E394A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

id MPTranslatorUtilitiesTransformIsExplicit(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  _BOOL8 v4;
  void *v5;

  v2 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("contentRatingsBySystem.riaa.value"));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v4 = ((_NSIsNSNumber() & 1) != 0 || (_NSIsNSString() & 1) != 0 || (objc_opt_respondsToSelector() & 1) != 0)
    && objc_msgSend(v3, "longLongValue") > 499;

  objc_msgSend(v2, "numberWithInt:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id _MPStorePlatformDateFromString(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (_MPStorePlatformDateFromString_sOnceToken != -1)
    dispatch_once(&_MPStorePlatformDateFromString_sOnceToken, &__block_literal_global_141_39558);
  if (_NSIsNSString())
  {
    objc_msgSend((id)_MPStorePlatformDateFromString_storePlatformReleaseDateFormatter, "dateFromString:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id _MPStorePlatformCalendar()
{
  if (_MPStorePlatformCalendar_sOnceToken != -1)
    dispatch_once(&_MPStorePlatformCalendar_sOnceToken, &__block_literal_global_148_39557);
  return (id)_MPStorePlatformCalendar_sGMTCalendar;
}

uint64_t __Block_byref_object_copy__39886(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__39887(uint64_t a1)
{

}

void sub_193E3F004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__40061(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__40062(uint64_t a1)
{

}

void sub_193E3FA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193E4120C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getRadioModelClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!RadioLibraryCore_frameworkLibrary_40506)
    RadioLibraryCore_frameworkLibrary_40506 = _sl_dlopen();
  if (!RadioLibraryCore_frameworkLibrary_40506)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *RadioLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MPRadioLibrary.m"), 16, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("RadioModel");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getRadioModelClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MPRadioLibrary.m"), 17, CFSTR("Unable to find class %s"), "RadioModel");

LABEL_8:
    __break(1u);
  }
  getRadioModelClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t MPRepeatTypeToMediaRemoteRepeatMode(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 2;
  else
    v1 = 1;
  if (a1 == 2)
    return 3;
  else
    return v1;
}

uint64_t MPShuffleTypeToMediaRemoteShuffleMode(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 3;
  else
    v1 = 1;
  if (a1 == 2)
    return 2;
  else
    return v1;
}

uint64_t MPSleepTimerStopModeFromMediaRemoteSleepTimerStopMode(int a1)
{
  uint64_t v1;

  v1 = (a1 - 1);
  if (v1 < 3)
    return v1 + 1;
  else
    return 0;
}

uint64_t MPSleepTimerStopModeToMediaRemoteSleepTimerStopMode(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 3)
    return 0;
  return result;
}

uint64_t MPNowPlayingPlaybackStateToMediaRemotePlaybackState(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 1;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 2;
      break;
    case 2:
      result = 3;
      break;
    case 3:
      result = 4;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t MPNowPlayingPlaybackStateFromMediaRemotePlaybackState(int a1)
{
  if ((a1 - 1) > 4)
    return 0;
  else
    return qword_193F0BDF0[a1 - 1];
}

uint64_t MPRepeatTypeFromNSString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  int v10;

  v1 = a1;
  v2 = v1;
  if (v1 != CFSTR("Off"))
  {
    v3 = -[__CFString isEqual:](v1, "isEqual:", CFSTR("Off"));

    if ((v3 & 1) == 0)
    {
      v5 = v2;
      if (v5 == CFSTR("One")
        || (v6 = v5, v7 = -[__CFString isEqual:](v5, "isEqual:", CFSTR("One")), v6, (v7 & 1) != 0))
      {
        v4 = 1;
        goto LABEL_10;
      }
      v8 = v6;
      if (v8 == CFSTR("All")
        || (v9 = v8, v10 = -[__CFString isEqual:](v8, "isEqual:", CFSTR("All")), v9, v10))
      {
        v4 = 2;
        goto LABEL_10;
      }
    }
  }
  v4 = 0;
LABEL_10:

  return v4;
}

uint64_t MPShuffleTypeFromNSString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  int v10;

  v1 = a1;
  v2 = v1;
  if (v1 != CFSTR("Off"))
  {
    v3 = -[__CFString isEqual:](v1, "isEqual:", CFSTR("Off"));

    if ((v3 & 1) == 0)
    {
      v5 = v2;
      if (v5 == CFSTR("Songs")
        || (v6 = v5, v7 = -[__CFString isEqual:](v5, "isEqual:", CFSTR("Songs")), v6, (v7 & 1) != 0))
      {
        v4 = 1;
        goto LABEL_10;
      }
      v8 = v6;
      if (v8 == CFSTR("Albums")
        || (v9 = v8, v10 = -[__CFString isEqual:](v8, "isEqual:", CFSTR("Albums")), v9, v10))
      {
        v4 = 2;
        goto LABEL_10;
      }
    }
  }
  v4 = 0;
LABEL_10:

  return v4;
}

uint64_t MPQueueEndActionFromNSString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  int v13;

  v1 = a1;
  v2 = v1;
  if (v1 != CFSTR("Clear"))
  {
    v3 = -[__CFString isEqual:](v1, "isEqual:", CFSTR("Clear"));

    if ((v3 & 1) == 0)
    {
      v5 = v2;
      if (v5 == CFSTR("None")
        || (v6 = v5, v7 = -[__CFString isEqual:](v5, "isEqual:", CFSTR("None")), v6, (v7 & 1) != 0))
      {
        v4 = 1;
        goto LABEL_13;
      }
      v8 = v6;
      if (v8 == CFSTR("Reset")
        || (v9 = v8, v10 = -[__CFString isEqual:](v8, "isEqual:", CFSTR("Reset")), v9, (v10 & 1) != 0))
      {
        v4 = 2;
        goto LABEL_13;
      }
      v11 = v9;
      if (v11 == CFSTR("AutoPlay")
        || (v12 = v11, v13 = -[__CFString isEqual:](v11, "isEqual:", CFSTR("AutoPlay")), v12, v13))
      {
        v4 = 3;
        goto LABEL_13;
      }
    }
  }
  v4 = 0;
LABEL_13:

  return v4;
}

id MPMediaRemoteCommandOptionsForFeedbackOrPurchaseCommandEvent(void *a1, BOOL *a2)
{
  void (**v3)(id, _QWORD);
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  const __CFString *v15;
  void *v16;
  void **v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  uint64_t v22;
  void *v23;
  _QWORD v24[3];
  _QWORD v25[4];

  v25[3] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v3[2](v3, *MEMORY[0x1E0D4CB88]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v4, "longLongValue"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }
  if (objc_msgSend(v5, "longLongValue"))
  {
    v6 = v4;
  }
  else
  {
    v3[2](v3, *MEMORY[0x1E0D4CB90]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v6, "longLongValue"));
      v7 = objc_claimAutoreleasedReturnValue();

      v5 = (void *)v7;
    }
  }
  v3[2](v3, *MEMORY[0x1E0D4CAE0]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v8, "longLongValue"));
    v9 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v9 = 0;
  }
  v3[2](v3, *MEMORY[0x1E0D4CAD8]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v11 = v10;
  else
    v11 = 0;
  if (v9 | (unint64_t)v11)
  {
    v12 = &unk_1E31E4D80;
    v13 = *MEMORY[0x1E0D4CD10];
    v24[0] = *MEMORY[0x1E0D4CD28];
    v24[1] = v13;
    if (v5)
      v14 = v5;
    else
      v14 = &unk_1E31E4D80;
    if (v9)
      v12 = (void *)v9;
    v25[0] = v14;
    v25[1] = v12;
    v24[2] = *MEMORY[0x1E0D4CD08];
    if (v11)
      v15 = (const __CFString *)v11;
    else
      v15 = &stru_1E3163D10;
    v25[2] = v15;
    v16 = (void *)MEMORY[0x1E0C99D80];
    v17 = (void **)v25;
    v18 = v24;
    v19 = 3;
  }
  else
  {
    if (!v5)
    {
      v20 = 0;
      if (!a2)
        goto LABEL_28;
      goto LABEL_27;
    }
    v22 = *MEMORY[0x1E0D4CD28];
    v23 = v5;
    v16 = (void *)MEMORY[0x1E0C99D80];
    v17 = &v23;
    v18 = &v22;
    v19 = 1;
  }
  objc_msgSend(v16, "dictionaryWithObjects:forKeys:count:", v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2)
LABEL_27:
    *a2 = (v9 | (unint64_t)v11) != 0;
LABEL_28:

  return v20;
}

uint64_t MPChangeLanguageOptionSettingFromMediaRemote(int a1)
{
  if (a1 == 1)
    return 1;
  else
    return 2 * (a1 == 2);
}

uint64_t MPChangeLanguageOptionSettingToMediaRemote(uint64_t a1)
{
  if (a1 == 1)
    return 1;
  else
    return 2 * (a1 == 2);
}

uint64_t MPSystemAppPlaybackQueueTypeFromMediaRemote(int a1)
{
  if ((a1 - 1) > 7)
    return 0;
  else
    return qword_193F0BE18[a1 - 1];
}

uint64_t MPSystemAppPlaybackQueueTypeToMediaRemote(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
    return 0;
  else
    return dword_193F0BE58[a1 - 1];
}

uint64_t MPPlaybackQueueInsertionPositionFromMediaRemote(int a1)
{
  uint64_t v1;

  v1 = (a1 - 1);
  if (v1 < 3)
    return v1 + 1;
  else
    return 0;
}

uint64_t MPPlaybackQueueInsertionPositionToMediaRemote(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3)
    return result;
  else
    return 0;
}

BOOL MPNowPlayingInfoLanguageOptionTypeToMRLanguageOptionType(uint64_t a1)
{
  return a1 == 1;
}

BOOL MPNowPlayingInfoLanguageOptionTypeFromMRLanguageOptionType(int a1)
{
  return a1 == 1;
}

__CFArray *MRLanguageOptionGroupsFromMPNowPlayingLanguageOptionGroups(void *a1)
{
  id v1;
  const __CFAllocator *v2;
  CFIndex v3;
  __CFArray *Mutable;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = objc_msgSend(v1, "count");
  Mutable = CFArrayCreateMutable(v2, v3, MEMORY[0x1E0C9B378]);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = v1;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v12;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v5);
        CFArrayAppendValue(Mutable, (const void *)objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v9++), "mrLanguageOptionGroup", (_QWORD)v11));
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v7);
  }

  return Mutable;
}

__CFArray *MRLanguageOptionsFromMPNowPlayingLanguageOptions(void *a1)
{
  id v1;
  const __CFAllocator *v2;
  CFIndex v3;
  __CFArray *Mutable;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = objc_msgSend(v1, "count");
  Mutable = CFArrayCreateMutable(v2, v3, MEMORY[0x1E0C9B378]);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = v1;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v12;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v5);
        CFArrayAppendValue(Mutable, (const void *)objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v9++), "mrLanguageOption", (_QWORD)v11));
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v7);
  }

  return Mutable;
}

void sub_193E446AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__41153(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__41154(uint64_t a1)
{

}

void sub_193E48F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193E48FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__41747(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__41748(uint64_t a1)
{

}

void sub_193E4B954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

void sub_193E4BD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193E4BF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__42040(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__42041(uint64_t a1)
{

}

void sub_193E4C4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__42185(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__42186(uint64_t a1)
{

}

BOOL MPPPropertyPredicateReadFrom(void *a1, void *a2)
{
  id v3;
  _BYTE *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  int v18;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  MPPMediaPredicateValue *v27;
  _BOOL8 v28;

  v3 = a1;
  v4 = a2;
  v5 = (int *)MEMORY[0x1E0D82BF0];
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&v4[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v4[*MEMORY[0x1E0D82BD8]])
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (v4[*v7])
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v5;
        v13 = *(_QWORD *)&v4[v12];
        if (v13 == -1 || v13 >= *(_QWORD *)&v4[*v6])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v13);
        *(_QWORD *)&v4[v12] = v13 + 1;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v15 = v10++ >= 9;
        if (v15)
        {
          LODWORD(v11) = 0;
          v16 = v4[*v7];
          goto LABEL_14;
        }
      }
      v4[*v7] = 1;
LABEL_12:
      v16 = v4[*v7];
      if (v4[*v7])
        LODWORD(v11) = 0;
LABEL_14:
      if (v16 || (v11 & 7) == 4)
        break;
      v18 = (unsigned __int16)(v11 >> 3);
      switch(v18)
      {
        case 3:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *((_BYTE *)v3 + 32) |= 1u;
          while (1)
          {
            v24 = *v5;
            v25 = *(_QWORD *)&v4[v24];
            if (v25 == -1 || v25 >= *(_QWORD *)&v4[*v6])
              break;
            v26 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v25);
            *(_QWORD *)&v4[v24] = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if ((v26 & 0x80) == 0)
              goto LABEL_35;
            v21 += 7;
            v15 = v22++ >= 9;
            if (v15)
            {
              LODWORD(v23) = 0;
              goto LABEL_37;
            }
          }
          v4[*v7] = 1;
LABEL_35:
          if (v4[*v7])
            LODWORD(v23) = 0;
LABEL_37:
          *((_DWORD *)v3 + 2) = v23;
          break;
        case 2:
          v27 = objc_alloc_init(MPPMediaPredicateValue);
          objc_storeStrong((id *)v3 + 3, v27);
          if (!PBReaderPlaceMark() || !MPPMediaPredicateValueReadFrom(v27, v4))
          {

LABEL_42:
            v28 = 0;
            goto LABEL_40;
          }
          PBReaderRecallMark();

          break;
        case 1:
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = (void *)*((_QWORD *)v3 + 2);
          *((_QWORD *)v3 + 2) = v19;

          break;
        default:
          if (!PBReaderSkipValueWithTag())
            goto LABEL_42;
          break;
      }
    }
    while (*(_QWORD *)&v4[*v5] < *(_QWORD *)&v4[*v6]);
  }
  v28 = v4[*v7] == 0;
LABEL_40:

  return v28;
}

void sub_193E4E394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193E4E438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__42613(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__42614(uint64_t a1)
{

}

id MPTVOutScreen()
{
  void *v0;
  id v1;
  uint64_t v2;
  void *i;
  void *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  objc_msgSend(MEMORY[0x1E0DC3BF8], "screens", 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (id)objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v1)
  {
    v2 = *(_QWORD *)v7;
    while (2)
    {
      for (i = 0; i != v1; i = (char *)i + 1)
      {
        if (*(_QWORD *)v7 != v2)
          objc_enumerationMutation(v0);
        v4 = *(void **)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)i);
        if (!objc_msgSend(v4, "_isWorkspaceCapable"))
        {
          v1 = v4;
          goto LABEL_11;
        }
      }
      v1 = (id)objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      if (v1)
        continue;
      break;
    }
  }
LABEL_11:

  return v1;
}

BOOL MPTVOutCapabledAndPreferred()
{
  void *v0;
  _BOOL8 v1;

  MPTVOutScreen();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0 != 0;

  return v1;
}

void sub_193E51798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_193E5190C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_193E519D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193E51AC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193E51CAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_193E51D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)MPModelLibrarySearchResponse;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_193E51E0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193E51E8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_193E51FB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_193E52010(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193E520F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v24;
  void *v25;
  void *v26;
  void **p_p;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;

  if (a2 == 2)
  {
    v24 = __cxa_begin_catch(a1);
    v25 = (void *)MEMORY[0x1E0C99DA0];
    v26 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a9);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v24 + 24))(&__p, v24, &a9);
    if (a21 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v26, "stringWithUTF8String:", p_p);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v28, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();

    if (a21 < 0)
      operator delete(__p);
    objc_exception_throw(v29);
  }
  if (a2 == 1)
  {
    v30 = __cxa_begin_catch(a1);
    v31 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v32, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v33);
  }
  _Unwind_Resume(a1);
}

void sub_193E5248C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v30;
  void *v31;
  void *v32;
  void **p_p;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;

  v27 = v24;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  if (a2 == 2)
  {
    v30 = __cxa_begin_catch(a1);
    v31 = (void *)MEMORY[0x1E0C99DA0];
    v32 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a9);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v30 + 24))(&__p, v30, &a9);
    if (a21 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v32, "stringWithUTF8String:", p_p);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v34, 0);
    v35 = (id)objc_claimAutoreleasedReturnValue();

    if (a21 < 0)
      operator delete(__p);
    objc_exception_throw(v35);
  }
  if (a2 == 1)
  {
    v36 = __cxa_begin_catch(a1);
    v37 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v36 + 16))(v36));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v38, 0);
    v39 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v39);
  }

  _Unwind_Resume(a1);
}

void sub_193E52AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;
  void *v30;
  void *v31;
  void *v32;
  void **p_p;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;

  if (a2 == 2)
  {
    v30 = __cxa_begin_catch(a1);
    v31 = (void *)MEMORY[0x1E0C99DA0];
    v32 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a9);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v30 + 24))(&__p, v30, &a9);
    if (a21 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v32, "stringWithUTF8String:", p_p);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v34, 0);
    v35 = (id)objc_claimAutoreleasedReturnValue();

    if (a21 < 0)
      operator delete(__p);
    objc_exception_throw(v35);
  }
  if (a2 == 1)
  {
    v36 = __cxa_begin_catch(a1);
    v37 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v36 + 16))(v36));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v38, 0);
    v39 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v39);
  }

  _Unwind_Resume(a1);
}

void sub_193E52E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v24;
  void *v25;
  void *v26;
  void **p_p;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;

  if (a2 == 2)
  {
    v24 = __cxa_begin_catch(a1);
    v25 = (void *)MEMORY[0x1E0C99DA0];
    v26 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a9);
    (*(void (**)(void ***__return_ptr, void *, uint64_t *))(*(_QWORD *)v24 + 24))(&__p, v24, &a9);
    if (a21 >= 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    objc_msgSend(v26, "stringWithUTF8String:", p_p);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v28, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();

    if (a21 < 0)
      operator delete(__p);
    objc_exception_throw(v29);
  }
  if (a2 == 1)
  {
    v30 = __cxa_begin_catch(a1);
    v31 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v32, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v33);
  }
  _Unwind_Resume(a1);
}

void sub_193E53180(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  uint64_t v10;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  va_list va;

  va_start(va, a8);

  if (a2 == 2)
  {
    v13 = __cxa_begin_catch(a1);
    v14 = (void *)MEMORY[0x1E0C99DA0];
    v15 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)va);
    (*(void (**)(void *, char *))(*(_QWORD *)v13 + 24))(v13, va);
    if (*(char *)(v10 - 49) >= 0)
      v16 = v10 - 72;
    else
      v16 = *(_QWORD *)(v10 - 72);
    objc_msgSend(v15, "stringWithUTF8String:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v17, 0);
    v18 = (id)objc_claimAutoreleasedReturnValue();

    if (*(char *)(v10 - 49) < 0)
      operator delete(*(void **)(v10 - 72));
    objc_exception_throw(v18);
  }
  if (a2 == 1)
  {
    v19 = __cxa_begin_catch(a1);
    v20 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v21, 0);
    v22 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v22);
  }

  _Unwind_Resume(a1);
}

void sub_193E53640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193E53728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

uint64_t std::allocate_shared[abi:ne180100]<mlcore::InPredicate<int>,std::allocator<mlcore::InPredicate<int>>,mlcore::ModelProperty<int> *&,std::vector<int> const&,void>(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = operator new(0x68uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E314A678;
  result = mlcore::InPredicate<int>::InPredicate();
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_193E537DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t **std::map<unsigned long,std::shared_ptr<mlcore::Predicate>>::map[abi:ne180100](uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = &a2[3 * a3];
    v8 = (uint64_t *)(a1 + 1);
    while (1)
    {
      v9 = v4;
      if (v8 == v4)
        goto LABEL_9;
      v10 = v6;
      v11 = v4;
      if (v6)
      {
        do
        {
          v9 = v10;
          v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      v13 = *v5;
      if (v9[4] < *v5)
      {
LABEL_9:
        v14 = (uint64_t **)(v6 ? v9 : v4);
        v15 = (uint64_t **)(v6 ? v9 + 1 : v4);
      }
      else
      {
        v14 = (uint64_t **)v4;
        v15 = (uint64_t **)v4;
        if (v6)
        {
          v15 = (uint64_t **)v4;
          while (1)
          {
            while (1)
            {
              v14 = (uint64_t **)v6;
              v23 = v6[4];
              if (v13 >= v23)
                break;
              v6 = *v14;
              v15 = v14;
              if (!*v14)
                goto LABEL_16;
            }
            if (v23 >= v13)
              break;
            v15 = v14 + 1;
            v6 = v14[1];
            if (!v6)
              goto LABEL_16;
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        v16 = (uint64_t *)operator new(0x38uLL);
        v17 = v16;
        v18 = v5[1];
        v16[4] = *v5;
        v16[5] = v18;
        v19 = v5[2];
        v16[6] = v19;
        if (v19)
        {
          v20 = (unint64_t *)(v19 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        *v16 = 0;
        v16[1] = 0;
        v16[2] = (uint64_t)v14;
        *v15 = v16;
        v22 = (uint64_t *)**a1;
        if (v22)
        {
          *a1 = v22;
          v17 = *v15;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v17);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      v5 += 3;
      if (v5 == v7)
        break;
      v8 = *a1;
      v6 = a1[1];
    }
  }
  return a1;
}

void sub_193E53974(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::__map_value_compare<long long,std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::InPredicate<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::InPredicate<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A678;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

void sub_193E53A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_193E53E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char *__p,char *a26,int a27,__int16 a28,char a29,char a30)
{
  void *v32;
  void *v33;
  void *v34;
  void **p_p;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;

  if (__p)
  {
    a26 = __p;
    operator delete(__p);
  }
  __p = &a11;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a2 == 2)
  {
    v32 = __cxa_begin_catch(a1);
    v33 = (void *)MEMORY[0x1E0C99DA0];
    v34 = (void *)MEMORY[0x1E0CB3940];
    mediaplatform::FormatOptions::FormatOptions((mediaplatform::FormatOptions *)&a11);
    (*(void (**)(char **__return_ptr, void *, char *))(*(_QWORD *)v32 + 24))(&__p, v32, &a11);
    if (a30 >= 0)
      p_p = (void **)&__p;
    else
      p_p = (void **)__p;
    objc_msgSend(v34, "stringWithUTF8String:", p_p);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "exceptionWithName:reason:userInfo:", CFSTR("MediaPlatform"), v36, 0);
    v37 = (id)objc_claimAutoreleasedReturnValue();

    if (a30 < 0)
      operator delete(__p);
    objc_exception_throw(v37);
  }
  if (a2 == 1)
  {
    v38 = __cxa_begin_catch(a1);
    v39 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38));
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v40, 0);
    v41 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v41);
  }
  _Unwind_Resume(a1);
}

void sub_193E54014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193E54388(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  __break(1u);
}

void sub_193E54564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_193E545B8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x193E545C0);
  __clang_call_terminate(a1);
}

void sub_193E54640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_193E546C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_193E54C30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_193E54D84()
{
  JUMPOUT(0x193E54D48);
}

void std::__shared_ptr_emplace<mlcore::ExistsPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A7C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ExistsPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A7C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::ExistsPredicate>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::Query>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AAA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Query>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AAA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::Query>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPropertyPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AA30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::ComparisonPropertyPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AA30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::ComparisonPropertyPredicate>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_193E54FBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ___ZL41_MPMLInitPropertyPlaylistEntryReactionMapv_block_invoke_4(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "date");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E550D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id _MPMLDateFromStoredInt64(void *a1)
{
  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", (double)(uint64_t)a1);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

void ___ZL41_MPMLInitPropertyPlaylistEntryReactionMapv_block_invoke_3(void *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  BOOL v26;
  id v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  mlcore *v31;
  mlcore *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void (***v38)(_QWORD, uint64_t *, uint64_t *, _BYTE *);
  std::__shared_weak_count *v39;
  void **v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  mlcore *v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  void *v63;
  void **v64;
  std::__shared_weak_count *v65;
  void **v66;
  std::__shared_weak_count *v67;
  _QWORD v68[3];
  mlcore *v69;
  std::__shared_weak_count *v70;
  id v71;
  int64x2_t v72;
  char *v73;
  void *__p[2];
  char *v75;
  void (***v76)(_QWORD, uint64_t *, uint64_t *, _BYTE *);
  std::__shared_weak_count *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 dsema;
  int64x2_t *v83;
  std::__shared_weak_count *v84;
  int v85;
  _BYTE v86[24];
  _BYTE *v87;
  id v88;
  _BYTE v89[128];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  objc_msgSend(v5, "scopedContainers");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "reverseObjectEnumerator");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v78, v89, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v79;
LABEL_3:
    v10 = 0;
    while (1)
    {
      if (*(_QWORD *)v79 != v9)
        objc_enumerationMutation(v7);
      v11 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * v10);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        break;
      if (v8 == ++v10)
      {
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v78, v89, 16);
        if (v8)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    v14 = v11;

    if (!v14)
      goto LABEL_10;
  }
  else
  {
LABEL_9:

LABEL_10:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyPlaylistEntryReactionMap()_block_invoke_3");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 2524, CFSTR("Attempted to query playlist reactions without scoping to a playlist entry."));

    v14 = 0;
  }
  objc_msgSend(v5, "modelKind");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "identityKind");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  +[MPModelPlaylistEntryReactionKind identityKind](MPModelPlaylistEntryReactionKind, "identityKind");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v16, "isEqual:", v17);

  if ((v18 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyPlaylistEntryReactionMap()_block_invoke_3");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v62, "handleFailureInFunction:file:lineNumber:description:", v63, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 2527, CFSTR("Must have PlaylistEntryReaction kind to generate PlaylistEntryReaction entity query."));

  }
  v19 = (std::__shared_weak_count *)a2[1];
  v76 = (void (***)(_QWORD, uint64_t *, uint64_t *, _BYTE *))*a2;
  v77 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  objc_msgSend(v15, "applyToView:withContext:", &v76, v5);
  v22 = v77;
  if (v77)
  {
    v23 = (unint64_t *)&v77->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  objc_msgSend(v5, "filterText");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "length") == 0;

  if (!v26)
  {
    objc_msgSend(v5, "filterText");
    v27 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&v72, (char *)objc_msgSend(v27, "UTF8String"));
    if (SHIBYTE(v75) < 0)
      operator delete(__p[0]);
    *(int64x2_t *)__p = v72;
    v75 = v73;
    HIBYTE(v73) = 0;
    v72.i8[0] = 0;

  }
  objc_msgSend(v14, "identifiers");
  v71 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v71, "library");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend(v28, "persistentID");

  v30 = (std::__shared_weak_count *)operator new(0x100uLL);
  v30->__shared_owners_ = 0;
  v30->__shared_weak_owners_ = 0;
  v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A6E8;
  v31 = (mlcore *)mlcore::PlaylistItem::PlaylistItem((mlcore::PlaylistItem *)&v30[1]);
  v69 = v31;
  v70 = v30;
  if (!v29 && v71)
  {
    +[MPMediaLibrary logDatabaseAccess](MPMediaLibrary, "logDatabaseAccess");
    v72 = 0uLL;
    v73 = 0;
    v88 = v71;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v88, 1);
    v32 = (mlcore *)objc_claimAutoreleasedReturnValue();
    v33 = mlcore::PlaylistItemPropertyPersistentID(v32);
    _MPMLInsertPredicatesForIdentifierSet(&v72, v32, 0, 0, v33, 0, 0, 0, 0, 0);

    v34 = MEMORY[0x194038ED8]();
    memset(v68, 0, sizeof(v68));
    std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v68, v72.i64[0], (_QWORD *)v72.i64[1], (v72.i64[1] - v72.i64[0]) >> 4);
    mlcore::CreateAndPredicate();
    std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v83, v34, &dsema);
    v35 = (std::__shared_weak_count *)*((_QWORD *)&dsema + 1);
    if (*((_QWORD *)&dsema + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&dsema + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v64 = (void **)v68;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100](&v64);
    *(_QWORD *)&dsema = dispatch_semaphore_create(0);
    v38 = (void (***)(_QWORD, uint64_t *, uint64_t *, _BYTE *))*a2;
    v40 = (void **)v83;
    v39 = v84;
    v66 = (void **)v83;
    v67 = v84;
    if (v84)
    {
      v41 = (unint64_t *)&v84->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v87 = 0;
    v43 = operator new(0x20uLL);
    *v43 = &off_1E314A1E0;
    v43[1] = &v71;
    v43[2] = &v69;
    v43[3] = &dsema;
    v87 = v43;
    mlcore::LibraryView::performQuery<mlcore::EntityQuery>(v38, (uint64_t)v40, v39, (uint64_t)v86);
    v44 = v87;
    if (v87 == v86)
    {
      v45 = 4;
      v44 = v86;
    }
    else
    {
      if (!v87)
        goto LABEL_41;
      v45 = 5;
    }
    (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_41:
    if (v39)
    {
      v46 = (unint64_t *)&v39->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    dispatch_semaphore_wait((dispatch_semaphore_t)dsema, 0xFFFFFFFFFFFFFFFFLL);

    v48 = v84;
    if (v84)
    {
      v49 = (unint64_t *)&v84->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v83 = &v72;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  }
  mlcore::PlaylistItemReactionPropertyContainerItemPersistentID(v31);
  objc_msgSend(v71, "library");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v72.i64[0] = objc_msgSend(v51, "persistentID");
  std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<long long>,std::allocator<mlcore::ComparisonPredicate<long long>>,mlcore::ModelProperty<long long> *&,mlcore::ComparisonOperator,long long const&,void>((uint64_t *)&v64);

  v52 = MEMORY[0x19403925C]();
  v53 = v65;
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::ComparisonPredicate<long long>> &,void>(a3, v52, (uint64_t)v64, v65);
  mlcore::PlaylistItemReactionPropertyDate(v54);
  mlcore::SortDescriptor::SortDescriptor();
  v72 = 0uLL;
  v73 = 0;
  *(_QWORD *)&dsema = &v72;
  BYTE8(dsema) = 0;
  v55 = operator new(0x18uLL);
  v73 = (char *)(v55 + 3);
  v56 = v84;
  *v55 = MEMORY[0x1E0D4AF48] + 16;
  v55[1] = v56;
  *((_DWORD *)v55 + 4) = v85;
  v72.i64[0] = (uint64_t)v55;
  v72.i64[1] = (uint64_t)(v55 + 3);
  mlcore::PropertiesQuery::setSortDescriptors();
  *(_QWORD *)&dsema = &v72;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&dsema);
  if (v53)
  {
    v57 = (unint64_t *)&v53->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v59 = v70;
  if (v70)
  {
    v60 = (unint64_t *)&v70->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }

  if (SHIBYTE(v75) < 0)
    operator delete(__p[0]);

}

void sub_193E55848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;

  _Unwind_Resume(a1);
}

void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(void (***a1)(_QWORD, uint64_t *, uint64_t *, _BYTE *), uint64_t a2, std::__shared_weak_count *a3, uint64_t a4)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _BYTE v38[24];
  _BYTE *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::LocalizedSearchQueryResult>)>::__value_func[abi:ne180100]((uint64_t)v34, a4);
  v32 = a2;
  v33 = a3;
  if (a3)
  {
    v9 = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v30 = 0;
  v31 = 0;
  v11 = (uint64_t)v35;
  if (!v35)
    goto LABEL_10;
  if (v35 != v34)
  {
    v11 = (*(uint64_t (**)(void))(*v35 + 16))();
LABEL_10:
    v37 = (_QWORD *)v11;
    goto LABEL_12;
  }
  v37 = v36;
  (*(void (**)(_QWORD *, _QWORD *))(v34[0] + 24))(v34, v36);
LABEL_12:
  v39 = 0;
  v12 = operator new(0x28uLL);
  v13 = v12;
  *v12 = &off_1E3149E18;
  if (!v37)
  {
    v14 = v12 + 4;
    goto LABEL_16;
  }
  if (v37 != v36)
  {
    v14 = &v37;
    v12[4] = v37;
LABEL_16:
    *v14 = 0;
    goto LABEL_18;
  }
  v12[4] = v12 + 1;
  (*(void (**)(_QWORD *))(v36[0] + 24))(v36);
LABEL_18:
  v39 = v13;
  (**a1)(a1, &v32, &v30, v38);
  v15 = v39;
  if (v39 == v38)
  {
    v16 = 4;
    v15 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_23;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_23:
  v17 = v37;
  if (v37 == v36)
  {
    v18 = 4;
    v17 = v36;
    goto LABEL_27;
  }
  if (v37)
  {
    v18 = 5;
LABEL_27:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  v19 = v31;
  if (v31)
  {
    v20 = (unint64_t *)&v31->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v33;
  if (v33)
  {
    v23 = (unint64_t *)&v33->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v35;
  if (v35 == v34)
  {
    v26 = 4;
    v25 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_43;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_43:
  if (a3)
  {
    v27 = (unint64_t *)&a3->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_193E55D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::ComparisonPredicate<long long>> &,void>(_QWORD *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v8 = operator new(0x98uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E314A608;
  v10 = v8 + 3;
  v16 = a3;
  v17 = a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  MEMORY[0x194038E78](v8 + 3, a2, &v16);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *a1 = v10;
  a1[1] = v9;
}

void sub_193E55EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E3149E18;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E3149E18;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x19403A1A4);
}

_QWORD *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E3149E18;
  std::__function::__value_func<void ()(std::shared_ptr<mlcore::LocalizedSearchQueryResult>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_193E56020(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3149E18;
  return std::__function::__value_func<void ()(std::shared_ptr<mlcore::LocalizedSearchQueryResult>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v2 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v12 = v2;
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_193E561AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6mlcore11LibraryView12performQueryINS_11EntityQueryEEEvNSt3__110shared_ptrIT_EENS4_INS_11TransactionEEENS3_8functionIFvNS4_INS5_6ResultEEEEEEEUlNS4_INS_11QueryResultEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1},std::allocator<void mlcore::LibraryView::performQuery<mlcore::EntityQuery>(std::shared_ptr<mlcore::EntityQuery>,std::shared_ptr<mlcore::Transaction>,std::function<void ()(std::shared_ptr<mlcore::EntityQuery::Result>)>)::{lambda(std::shared_ptr<mlcore::QueryResult>)#1}>,void ()(std::shared_ptr<mlcore::QueryResult>)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZL41_MPMLInitPropertyPlaylistEntryReactionMapvEUb1_E3__7NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZL41_MPMLInitPropertyPlaylistEntryReactionMapvEUb1_E3__7NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E314A1E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZL41_MPMLInitPropertyPlaylistEntryReactionMapvEUb1_E3__7NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEE7__cloneEPNS0_6__baseIS9_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E314A1E0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZL41_MPMLInitPropertyPlaylistEntryReactionMapvEUb1_E3__7NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEEclEOS8_(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  mlcore::EntityQueryResult *v4;
  __int128 v5;
  void *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 lpsrc;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *(mlcore::EntityQueryResult **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (mlcore::EntityQueryResult::entityCount(v4))
  {
    mlcore::EntityQueryResult::entityAtIndex(v4);
    v5 = 0uLL;
    if ((_QWORD)lpsrc)
    {
      v6 = __dynamic_cast((const void *)lpsrc, MEMORY[0x1E0D4AF20], MEMORY[0x1E0D4AF08], 0);
      v5 = 0uLL;
      if (v6)
      {
        *(_QWORD *)&v5 = v6;
        *((_QWORD *)&v5 + 1) = *((_QWORD *)&lpsrc + 1);
        if (*((_QWORD *)&lpsrc + 1))
        {
          v7 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
      }
    }
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(std::__shared_weak_count **)(v9 + 8);
    *(_OWORD *)v9 = v5;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (*((_QWORD *)&lpsrc + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&lpsrc + 1) + 16))(*((_QWORD *)&lpsrc + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&lpsrc + 1));
      }
    }
  }
  else
  {
    v15 = os_log_create("com.apple.amp.mediaplayer", "Library");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = **(_QWORD **)(a1 + 8);
      LODWORD(lpsrc) = 138543362;
      *(_QWORD *)((char *)&lpsrc + 4) = v16;
      _os_log_impl(&dword_193B9B000, v15, OS_LOG_TYPE_ERROR, "Did not find playlist entry for identifiers: %{public}@", (uint8_t *)&lpsrc, 0xCu);
    }

  }
  dispatch_semaphore_signal(**(dispatch_semaphore_t **)(a1 + 24));
  if (v3)
  {
    v17 = (unint64_t *)&v3->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_193E564D4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZZL41_MPMLInitPropertyPlaylistEntryReactionMapvEUb1_E3__7NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZL41_MPMLInitPropertyPlaylistEntryReactionMapvEUb1_E3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZL41_MPMLInitPropertyPlaylistEntryReactionMapvEUb1_E3__7NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEE11target_typeEv()
{
  return &_ZTIZZL41_MPMLInitPropertyPlaylistEntryReactionMapvEUb1_E3__7;
}

void std::__shared_ptr_emplace<mlcore::PlaylistItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A6E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::PlaylistItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A6E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::PlaylistItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ___ZL41_MPMLInitPropertyPlaylistEntryReactionMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v10 = a5;
  objc_msgSend(a2, "mediaLibrary");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "uniqueIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZL41_MPMLInitPropertyPlaylistEntryReactionMapv_block_invoke_2;
  v11[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v11[4] = a3;
  v11[5] = a4;
  objc_msgSend(v10, "setLibraryIdentifiersWithDatabaseID:block:", v9, v11);

}

void sub_193E56654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZL41_MPMLInitPropertyPlaylistEntryReactionMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E56724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL34_MPMLInitPropertyPlaylistAuthorMapv_block_invoke_4(void *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  BOOL v26;
  id v27;
  void *v28;
  uint64_t v29;
  mlcore *v30;
  mlcore *v31;
  mlcore *v32;
  mlcore *v33;
  mlcore *v34;
  mlcore *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void (***v41)(_QWORD, uint64_t *, uint64_t *, _BYTE *);
  std::__shared_weak_count *v42;
  void **v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  mlcore *v57;
  mlcore *v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  void *v70;
  int64x2_t *v71;
  std::__shared_weak_count *v72;
  void **v73;
  void **v74;
  std::__shared_weak_count *v75;
  void **v76;
  std::__shared_weak_count *v77;
  _QWORD v78[3];
  uint64_t v79;
  std::__shared_weak_count *v80;
  id v81;
  void *__p[2];
  uint64_t v83;
  void (***v84)(_QWORD, uint64_t *, uint64_t *, _BYTE *);
  std::__shared_weak_count *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 dsema;
  int64x2_t v91;
  uint64_t v92;
  _BYTE v93[24];
  _BYTE *v94;
  id v95;
  _BYTE v96[128];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  objc_msgSend(v5, "scopedContainers");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "reverseObjectEnumerator");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v86, v96, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v87;
LABEL_3:
    v10 = 0;
    while (1)
    {
      if (*(_QWORD *)v87 != v9)
        objc_enumerationMutation(v7);
      v11 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * v10);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        break;
      if (v8 == ++v10)
      {
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v86, v96, 16);
        if (v8)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    v14 = v11;

    if (!v14)
      goto LABEL_10;
  }
  else
  {
LABEL_9:

LABEL_10:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyPlaylistAuthorMap()_block_invoke_4");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 2443, CFSTR("Attempted to query playlist authors without scoping to a playlist."));

    v14 = 0;
  }
  objc_msgSend(v5, "modelKind");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "identityKind");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  +[MPModelPlaylistAuthorKind identityKind](MPModelPlaylistAuthorKind, "identityKind");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v16, "isEqual:", v17);

  if ((v18 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyPlaylistAuthorMap()_block_invoke_4");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v69, "handleFailureInFunction:file:lineNumber:description:", v70, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 2446, CFSTR("Must have PlaylistAuthor kind to generate PlaylistAuthor entity query."));

  }
  v19 = (std::__shared_weak_count *)a2[1];
  v84 = (void (***)(_QWORD, uint64_t *, uint64_t *, _BYTE *))*a2;
  v85 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  objc_msgSend(v15, "applyToView:withContext:", &v84, v5);
  v22 = v85;
  if (v85)
  {
    v23 = (unint64_t *)&v85->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  objc_msgSend(v5, "filterText");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "length") == 0;

  if (!v26)
  {
    objc_msgSend(v5, "filterText");
    v27 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&v91, (char *)objc_msgSend(v27, "UTF8String"));
    if (SHIBYTE(v83) < 0)
      operator delete(__p[0]);
    *(int64x2_t *)__p = v91;
    v83 = v92;
    HIBYTE(v92) = 0;
    v91.i8[0] = 0;

  }
  objc_msgSend(v14, "identifiers");
  v81 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v81, "library");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend(v28, "persistentID");

  v30 = (mlcore *)std::allocate_shared[abi:ne180100]<mlcore::Playlist,std::allocator<mlcore::Playlist>,long long &,void>(&v79);
  if (!v29 && v81)
  {
    +[MPMediaLibrary logDatabaseAccess](MPMediaLibrary, "logDatabaseAccess");
    v91 = 0uLL;
    v92 = 0;
    v95 = v81;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v95, 1);
    v31 = (mlcore *)objc_claimAutoreleasedReturnValue();
    v32 = (mlcore *)mlcore::PlaylistPropertyPersistentID(v31);
    v33 = (mlcore *)mlcore::PlaylistPropertyStoreCloudID(v32);
    v34 = (mlcore *)mlcore::PlaylistPropertyCloudGlobalID(v33);
    v35 = (mlcore *)mlcore::PlaylistPropertySyncID(v34);
    v36 = mlcore::PlaylistPropertyCloudUniversalLibraryID(v35);
    _MPMLInsertPredicatesForIdentifierSet(&v91, v31, 0, 0, (uint64_t)v32, (uint64_t)v33, (uint64_t)v34, (uint64_t)v35, v36, 0);

    v37 = MEMORY[0x194039FE8]();
    memset(v78, 0, sizeof(v78));
    std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v78, v91.i64[0], (_QWORD *)v91.i64[1], (v91.i64[1] - v91.i64[0]) >> 4);
    mlcore::CreateAndPredicate();
    std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&v71, v37, &dsema);
    v38 = (std::__shared_weak_count *)*((_QWORD *)&dsema + 1);
    if (*((_QWORD *)&dsema + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&dsema + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v74 = (void **)v78;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100](&v74);
    *(_QWORD *)&dsema = dispatch_semaphore_create(0);
    v41 = (void (***)(_QWORD, uint64_t *, uint64_t *, _BYTE *))*a2;
    v43 = (void **)v71;
    v42 = v72;
    v76 = (void **)v71;
    v77 = v72;
    if (v72)
    {
      v44 = (unint64_t *)&v72->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v94 = 0;
    v46 = operator new(0x20uLL);
    *v46 = &off_1E314A188;
    v46[1] = &v81;
    v46[2] = &v79;
    v46[3] = &dsema;
    v94 = v46;
    mlcore::LibraryView::performQuery<mlcore::EntityQuery>(v41, (uint64_t)v43, v42, (uint64_t)v93);
    v47 = v94;
    if (v94 == v93)
    {
      v48 = 4;
      v47 = v93;
    }
    else
    {
      if (!v94)
        goto LABEL_41;
      v48 = 5;
    }
    (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_41:
    if (v42)
    {
      v49 = (unint64_t *)&v42->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    dispatch_semaphore_wait((dispatch_semaphore_t)dsema, 0xFFFFFFFFFFFFFFFFLL);

    v51 = v72;
    if (v72)
    {
      v52 = (unint64_t *)&v72->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v71 = &v91;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  }
  mlcore::PlaylistAuthorPropertyContainerPersistentID(v30);
  objc_msgSend(v81, "library");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v91.i64[0] = objc_msgSend(v54, "persistentID");
  std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<long long>,std::allocator<mlcore::ComparisonPredicate<long long>>,mlcore::ModelProperty<long long> *&,mlcore::ComparisonOperator,long long const&,void>((uint64_t *)&v74);

  v55 = MEMORY[0x194038F14]();
  v56 = v75;
  std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::ComparisonPredicate<long long>> &,void>(a3, v55, (uint64_t)v74, v75);
  mlcore::PlaylistAuthorPropertyRole(v57);
  v58 = (mlcore *)mlcore::SortDescriptor::SortDescriptor();
  mlcore::PlaylistAuthorPropertyPosition(v58);
  mlcore::SortDescriptor::SortDescriptor();
  v71 = 0;
  v72 = 0;
  v73 = 0;
  *(_QWORD *)&dsema = &v71;
  BYTE8(dsema) = 0;
  v59 = (void **)operator new(0x30uLL);
  v60 = 0;
  v71 = (int64x2_t *)v59;
  v73 = v59 + 6;
  v61 = MEMORY[0x1E0D4AF48] + 16;
  do
  {
    v62 = &v59[v60];
    v63 = v91.i64[v60 + 1];
    *v62 = (void *)v61;
    v62[1] = (void *)v63;
    *((_DWORD *)v62 + 4) = *(_DWORD *)((char *)&v91 + v60 * 8 + 16);
    v60 += 3;
  }
  while (v60 != 6);
  v72 = (std::__shared_weak_count *)(v59 + 6);
  mlcore::PropertiesQuery::setSortDescriptors();
  *(_QWORD *)&dsema = &v71;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&dsema);
  if (v56)
  {
    v64 = (unint64_t *)&v56->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v66 = v80;
  if (v80)
  {
    v67 = (unint64_t *)&v80->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }

  if (SHIBYTE(v83) < 0)
    operator delete(__p[0]);

}

void sub_193E56EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;

  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<mlcore::Playlist,std::allocator<mlcore::Playlist>,long long &,void>(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = operator new(0x110uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E314AB80;
  result = mlcore::Playlist::Playlist((mlcore::Playlist *)(v2 + 3));
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_193E57114(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZL34_MPMLInitPropertyPlaylistAuthorMapvEUb0_E3__6NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZL34_MPMLInitPropertyPlaylistAuthorMapvEUb0_E3__6NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E314A188;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZL34_MPMLInitPropertyPlaylistAuthorMapvEUb0_E3__6NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEE7__cloneEPNS0_6__baseIS9_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E314A188;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZL34_MPMLInitPropertyPlaylistAuthorMapvEUb0_E3__6NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEEclEOS8_(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  mlcore::EntityQueryResult *v4;
  void *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *lpsrc;
  std::__shared_weak_count *v18;
  uint8_t buf[24];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *(mlcore::EntityQueryResult **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (mlcore::EntityQueryResult::entityCount(v4))
  {
    mlcore::EntityQueryResult::entityAtIndex(v4);
    if (lpsrc && (v5 = __dynamic_cast(lpsrc, MEMORY[0x1E0D4AF20], MEMORY[0x1E0D4AF28], 0)) != 0)
    {
      *(_QWORD *)buf = v5;
      *(_QWORD *)&buf[8] = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
    }
    else
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
    }
    std::shared_ptr<mlcore::LocalizedSearchScope>::operator=[abi:ne180100](*(_QWORD *)(a1 + 16), (__int128 *)buf);
    v8 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v18)
    {
      v11 = (unint64_t *)&v18->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)())v18->__on_zero_shared)();
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    v13 = os_log_create("com.apple.amp.mediaplayer", "Library");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = **(_QWORD **)(a1 + 8);
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl(&dword_193B9B000, v13, OS_LOG_TYPE_ERROR, "Did not find playlist for identifiers: %{public}@", buf, 0xCu);
    }

  }
  dispatch_semaphore_signal(**(dispatch_semaphore_t **)(a1 + 24));
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_193E57398(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZZL34_MPMLInitPropertyPlaylistAuthorMapvEUb0_E3__6NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZL34_MPMLInitPropertyPlaylistAuthorMapvEUb0_E3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZL34_MPMLInitPropertyPlaylistAuthorMapvEUb0_E3__6NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEE11target_typeEv()
{
  return &_ZTIZZL34_MPMLInitPropertyPlaylistAuthorMapvEUb0_E3__6;
}

void std::__shared_ptr_emplace<mlcore::Playlist>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AB80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Playlist>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AB80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::Playlist>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ___ZL34_MPMLInitPropertyPlaylistAuthorMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[6];
  _QWORD v14[6];

  v12 = a2;
  v8 = a5;
  objc_msgSend(v12, "mediaLibrary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "uniqueIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = ___ZL34_MPMLInitPropertyPlaylistAuthorMapv_block_invoke_2;
  v14[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v14[4] = a3;
  v14[5] = a4;
  objc_msgSend(v8, "setLibraryIdentifiersWithDatabaseID:block:", v10, v14);

  v13[0] = v11;
  v13[1] = 3221225472;
  v13[2] = ___ZL34_MPMLInitPropertyPlaylistAuthorMapv_block_invoke_3;
  v13[3] = &__block_descriptor_48_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v13[4] = a3;
  v13[5] = a4;
  objc_msgSend(v8, "setUniversalStoreIdentifiersWithBlock:", v13);

}

void sub_193E57560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void ___ZL34_MPMLInitPropertyPlaylistAuthorMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E57634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL34_MPMLInitPropertyPlaylistAuthorMapv_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "socialProfileID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setSocialProfileID:", v6);

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E5770C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id ___ZL32_MPMLInitPropertySocialPersonMapv_block_invoke_8(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v15[4];
  id v16;
  void *__p[2];
  char v18;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "imageURL");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v18 < 0)
    operator delete(__p[0]);
  if (objc_msgSend(v8, "length"))
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = ___ZL32_MPMLInitPropertySocialPersonMapv_block_invoke_9;
    v15[3] = &unk_1E3161198;
    v16 = v8;
    v9 = (void *)MEMORY[0x19403A810](v15);
    v13 = (void *)MEMORY[0x19403A810](v9, v10, v11, v12);

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void sub_193E57844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_193E579C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t ___ZL32_MPMLInitPropertySocialPersonMapv_block_invoke_7()
{
  return MEMORY[0x1E0C9AAA0];
}

uint64_t ___ZL32_MPMLInitPropertySocialPersonMapv_block_invoke_6()
{
  return MEMORY[0x1E0C9AAA0];
}

uint64_t ___ZL32_MPMLInitPropertySocialPersonMapv_block_invoke_4()
{
  return 0;
}

void ___ZL32_MPMLInitPropertySocialPersonMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[6];
  _QWORD v14[6];

  v12 = a2;
  v8 = a5;
  objc_msgSend(v12, "mediaLibrary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "uniqueIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = ___ZL32_MPMLInitPropertySocialPersonMapv_block_invoke_2;
  v14[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v14[4] = a3;
  v14[5] = a4;
  objc_msgSend(v8, "setLibraryIdentifiersWithDatabaseID:block:", v10, v14);

  v13[0] = v11;
  v13[1] = 3221225472;
  v13[2] = ___ZL32_MPMLInitPropertySocialPersonMapv_block_invoke_3;
  v13[3] = &__block_descriptor_48_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v13[4] = a3;
  v13[5] = a4;
  objc_msgSend(v8, "setUniversalStoreIdentifiersWithBlock:", v13);

}

void sub_193E57B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void ___ZL32_MPMLInitPropertySocialPersonMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E57BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL32_MPMLInitPropertySocialPersonMapv_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "socialProfileID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setSocialProfileID:", v6);

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E57CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id ___ZL33_MPMLInitPropertyTVShowCreatorMapv_block_invoke_6(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  unsigned __int8 *v12;
  void *v13;
  unsigned __int8 *v14;
  void *v15;
  void *v16;
  void *v17;
  void *__p[2];
  char v20;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "artistPID");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "longLongValue");

  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "artistAvailableArtworkToken");
  v10 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v10 + 5), a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "artistFetchableArtworkToken");
  v12 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v12)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v12 + 5), a4);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "artistFetchableArtworkSourceType");
  v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20 < 0)
    operator delete(__p[0]);
  objc_msgSend(v6, "mediaLibrary");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  _MPMLTranslatorCreateArtworkCatalogBlock(v9, 0, 7, 4, v11, v13, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

void sub_193E57EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v17;

  _Unwind_Resume(a1);
}

id ___ZL33_MPMLInitPropertyTVShowCreatorMapv_block_invoke_5(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193E5802C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL33_MPMLInitPropertyTVShowCreatorMapv_block_invoke_4(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  _QWORD *v15;
  char v16;
  _BYTE v17[48];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(v13, "hasName");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)v13))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  mlcore::SortDescriptor::SortDescriptor();
  std::string::basic_string[abi:ne180100]<0>(__p, "nameOrder");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = a3;
  v16 = 0;
  v6 = (char *)operator new(0x30uLL);
  v7 = 0;
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 48;
  v8 = MEMORY[0x1E0D4AF48] + 16;
  do
  {
    v9 = &v6[v7];
    v10 = *(_QWORD *)&v17[v7 + 8];
    *(_QWORD *)v9 = v8;
    *((_QWORD *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = *(_DWORD *)&v17[v7 + 16];
    v7 += 24;
  }
  while (v7 != 48);
  a3[1] = v6 + 48;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);

}

void sub_193E581D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void **a22)
{
  void *v22;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void ___ZL33_MPMLInitPropertyTVShowCreatorMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[6];
  _QWORD v14[6];

  v12 = a2;
  v8 = a5;
  objc_msgSend(v12, "mediaLibrary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "uniqueIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = ___ZL33_MPMLInitPropertyTVShowCreatorMapv_block_invoke_2;
  v14[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v14[4] = a3;
  v14[5] = a4;
  objc_msgSend(v8, "setLibraryIdentifiersWithDatabaseID:block:", v10, v14);

  v13[0] = v11;
  v13[1] = 3221225472;
  v13[2] = ___ZL33_MPMLInitPropertyTVShowCreatorMapv_block_invoke_3;
  v13[3] = &__block_descriptor_48_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v13[4] = a3;
  v13[5] = a4;
  objc_msgSend(v8, "setUniversalStoreIdentifiersWithBlock:", v13);

}

void sub_193E58318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void ___ZL33_MPMLInitPropertyTVShowCreatorMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E583EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL33_MPMLInitPropertyTVShowCreatorMapv_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAdamID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E584C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL26_MPMLInitPropertyTVShowMapv_block_invoke_10(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "canonicalID");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193E58594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ___ZL26_MPMLInitPropertyTVShowMapv_block_invoke_9()
{
  return 0;
}

id ___ZL26_MPMLInitPropertyTVShowMapv_block_invoke_8(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  void *v15;
  unsigned __int8 *v16;
  void *v17;
  unsigned __int8 *v18;
  void *v19;
  void *v20;
  void *v21;
  void *__p[2];
  char v24;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "longLongValue");

  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "mediaType");
  v10 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v10 + 5), a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "unsignedIntValue");

  if (v24 < 0)
    operator delete(__p[0]);
  v13 = MPMediaTypeForMLMediaType(v12);
  std::string::basic_string[abi:ne180100]<0>(__p, "availableArtworkToken");
  v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fetchableArtworkToken");
  v16 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v16)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v16 + 5), a4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fetchableArtworkSourceType");
  v18 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v18)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v18 + 5), a4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  objc_msgSend(v6, "mediaLibrary");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  _MPMLTranslatorCreateArtworkCatalogBlock(v9, v13, 0, 1, v15, v17, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

void sub_193E58828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v17;

  _Unwind_Resume(a1);
}

id ___ZL26_MPMLInitPropertyTVShowMapv_block_invoke_7(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193E58968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL26_MPMLInitPropertyTVShowMapv_block_invoke_6(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  _QWORD *v15;
  char v16;
  _BYTE v17[48];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(v13, "hasName");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)v13))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  mlcore::SortDescriptor::SortDescriptor();
  std::string::basic_string[abi:ne180100]<0>(__p, "nameOrder");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = a3;
  v16 = 0;
  v6 = (char *)operator new(0x30uLL);
  v7 = 0;
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 48;
  v8 = MEMORY[0x1E0D4AF48] + 16;
  do
  {
    v9 = &v6[v7];
    v10 = *(_QWORD *)&v17[v7 + 8];
    *(_QWORD *)v9 = v8;
    *((_QWORD *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = *(_DWORD *)&v17[v7 + 16];
    v7 += 24;
  }
  while (v7 != 48);
  a3[1] = v6 + 48;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);

}

void sub_193E58B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void **a22)
{
  void *v22;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void ___ZL26_MPMLInitPropertyTVShowMapv_block_invoke_5(void *a1@<X1>, int64x2_t *a2@<X8>)
{
  mlcore *v3;
  uint64_t v4;
  mlcore *v5;

  v5 = a1;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  a2->i64[0] = 0;
  v3 = (mlcore *)mlcore::ItemArtistPropertyStoreID(v5);
  v4 = mlcore::ItemArtistPropertyPersistentID(v3);
  _MPMLInsertPredicatesForIdentifierSet(a2, v5, (uint64_t)v3, 0, v4, 0, 0, 0, 0, 0);

}

void sub_193E58BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12)
{
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);

  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *,std::string&,void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  std::string __p;

  v5 = operator new(0x48uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E314A838;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  mlcore::SearchPredicate::SearchPredicate();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = v5 + 3;
  a1[1] = v5;
}

void sub_193E58C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count *v14;
  void *v16;

  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::SearchPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::SearchPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A838;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::SearchPredicate>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ___ZL26_MPMLInitPropertyTVShowMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[6];
  _QWORD v14[6];

  v12 = a2;
  v8 = a5;
  objc_msgSend(v12, "mediaLibrary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "uniqueIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = ___ZL26_MPMLInitPropertyTVShowMapv_block_invoke_2;
  v14[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v14[4] = a3;
  v14[5] = a4;
  objc_msgSend(v8, "setLibraryIdentifiersWithDatabaseID:block:", v10, v14);

  v13[0] = v11;
  v13[1] = 3221225472;
  v13[2] = ___ZL26_MPMLInitPropertyTVShowMapv_block_invoke_3;
  v13[3] = &__block_descriptor_48_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v13[4] = a3;
  v13[5] = a4;
  objc_msgSend(v8, "setUniversalStoreIdentifiersWithBlock:", v13);

}

void sub_193E58E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void ___ZL26_MPMLInitPropertyTVShowMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E58ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL26_MPMLInitPropertyTVShowMapv_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAdamID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E58FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyTVSeasonMapv_block_invoke_13(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  void *v15;
  unsigned __int8 *v16;
  void *v17;
  unsigned __int8 *v18;
  void *v19;
  void *v20;
  void *v21;
  void *__p[2];
  char v24;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "longLongValue");

  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "mediaType");
  v10 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v10 + 5), a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "unsignedIntValue");

  if (v24 < 0)
    operator delete(__p[0]);
  v13 = MPMediaTypeForMLMediaType(v12);
  std::string::basic_string[abi:ne180100]<0>(__p, "availableArtworkToken");
  v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fetchableArtworkToken");
  v16 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v16)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v16 + 5), a4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fetchableArtworkSourceType");
  v18 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v18)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v18 + 5), a4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  objc_msgSend(v6, "mediaLibrary");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  _MPMLTranslatorCreateArtworkCatalogBlock(v9, v13, 0, 1, v15, v17, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

void sub_193E59250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v17;

  _Unwind_Resume(a1);
}

void sub_193E593B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyTVSeasonMapv_block_invoke_11(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "representativeItemExplicit");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "numberWithBool:", objc_msgSend(v9, "BOOLValue") ^ 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 < 0)
    operator delete(__p[0]);

  return v10;
}

void sub_193E594A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ___ZL28_MPMLInitPropertyTVSeasonMapv_block_invoke_10()
{
  return MEMORY[0x1E0C9AAA0];
}

uint64_t ___ZL28_MPMLInitPropertyTVSeasonMapv_block_invoke_9()
{
  return MEMORY[0x1E0C9AAB0];
}

uint64_t ___ZL28_MPMLInitPropertyTVSeasonMapv_block_invoke_8()
{
  return MEMORY[0x1E0C9AAB0];
}

id ___ZL28_MPMLInitPropertyTVSeasonMapv_block_invoke_7(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "downloadedDate");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E595A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyTVSeasonMapv_block_invoke_6(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "libraryAdded");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E59690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL28_MPMLInitPropertyTVSeasonMapv_block_invoke_5(void *a1@<X1>, int64x2_t *a2@<X8>)
{
  mlcore *v3;
  mlcore *v4;
  uint64_t v5;
  mlcore *v6;

  v6 = a1;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  a2->i64[0] = 0;
  v3 = (mlcore *)mlcore::AlbumPropertyStoreID(v6);
  v4 = (mlcore *)mlcore::AlbumPropertyPersistentID(v3);
  v5 = mlcore::AlbumPropertySyncID(v4);
  _MPMLInsertPredicatesForIdentifierSet(a2, v6, (uint64_t)v3, 0, (uint64_t)v4, 0, 0, v5, 0, 0);

}

void sub_193E59744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12)
{
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::TVShow>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AB10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::TVShow>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AB10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::TVShow>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ___ZL28_MPMLInitPropertyTVSeasonMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[6];
  _QWORD v14[6];

  v12 = a2;
  v8 = a5;
  objc_msgSend(v12, "mediaLibrary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "uniqueIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = ___ZL28_MPMLInitPropertyTVSeasonMapv_block_invoke_2;
  v14[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v14[4] = a3;
  v14[5] = a4;
  objc_msgSend(v8, "setLibraryIdentifiersWithDatabaseID:block:", v10, v14);

  v13[0] = v11;
  v13[1] = 3221225472;
  v13[2] = ___ZL28_MPMLInitPropertyTVSeasonMapv_block_invoke_3;
  v13[3] = &__block_descriptor_48_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v13[4] = a3;
  v13[5] = a4;
  objc_msgSend(v8, "setUniversalStoreIdentifiersWithBlock:", v13);

}

void sub_193E598A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void ___ZL28_MPMLInitPropertyTVSeasonMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E59974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL28_MPMLInitPropertyTVSeasonMapv_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAdamID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E59A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_10_515(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocalConstraints");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "numberWithUnsignedInteger:", (int)objc_msgSend(v9, "intValue"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 < 0)
    operator delete(__p[0]);

  return v10;
}

void sub_193E59B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_9_513(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocalStatusReason");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "numberWithUnsignedInteger:", (int)objc_msgSend(v9, "intValue"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 < 0)
    operator delete(__p[0]);

  return v10;
}

void sub_193E59C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_8_511(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *__p[2];
  char v15;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocalStatus");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "intValue") + 1;
  if (v10 >= 7)
    v11 = 0;
  else
    v11 = v10 - 1;
  objc_msgSend(v7, "numberWithInteger:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15 < 0)
    operator delete(__p[0]);

  return v12;
}

void sub_193E59D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_7_509(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  void *__p[2];
  char v15;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocal");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "intValue") + 2;
  if (v10 > 4)
    v11 = 0;
  else
    v11 = qword_193F0C8F0[v10];
  objc_msgSend(v7, "numberWithInteger:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15 < 0)
    operator delete(__p[0]);

  return v12;
}

void sub_193E59E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_6_507(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  void *v13;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(v17, "hasNonPurgeableAsset");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)v17);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "BOOLValue");
  if ((v10 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "isStoreRedownloadable");
    v12 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (!v12)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v12 + 5), a4);
    a4 = (int8x8_t *)objc_claimAutoreleasedReturnValue();
    v11 = -[int8x8_t BOOLValue](a4, "BOOLValue");
  }
  objc_msgSend(v7, "numberWithBool:", v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v10 & 1) == 0)
  {

    if (v16 < 0)
      operator delete(__p[0]);
  }

  if (v18 < 0)
    operator delete(v17[0]);

  return v13;
}

void sub_193E59F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;

  if (a14 < 0)
    operator delete(__p);

  if (a20 < 0)
    operator delete(a15);

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_5_505(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "downloadedDate");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E5A0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_4_503(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "dateReleased");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E5A190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_3_501(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "datePlayed");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E5A278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_2_499(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "libraryAdded");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E5A360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_497(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  void *v15;
  unsigned __int8 *v16;
  void *v17;
  unsigned __int8 *v18;
  void *v19;
  void *v20;
  void *v21;
  void *__p[2];
  char v24;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "longLongValue");

  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "mediaType");
  v10 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v10 + 5), a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "unsignedIntValue");

  if (v24 < 0)
    operator delete(__p[0]);
  v13 = MPMediaTypeForMLMediaType(v12);
  std::string::basic_string[abi:ne180100]<0>(__p, "availableArtworkToken");
  v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fetchableArtworkToken");
  v16 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v16)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v16 + 5), a4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fetchableArtworkSourceType");
  v18 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v18)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v18 + 5), a4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  objc_msgSend(v6, "mediaLibrary");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  _MPMLTranslatorCreateArtworkCatalogBlock(v9, v13, 0, 2, v15, v17, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

void sub_193E5A5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v17;

  _Unwind_Resume(a1);
}

void sub_193E5A76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_11(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "trackNumber");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13 < 0)
    operator delete(__p[0]);
  if (!objc_msgSend(v8, "integerValue"))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "sortID");
    v9 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (!v9)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v9 + 5), a4);
    v10 = objc_claimAutoreleasedReturnValue();

    if (v13 < 0)
      operator delete(__p[0]);
    v8 = (void *)v10;
  }

  return v8;
}

void sub_193E5A89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_10(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  _QWORD *v17;
  char v18;
  _BYTE v19[72];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(v15, "sortID");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)v15))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  std::string::basic_string[abi:ne180100]<0>(v13, "subOrder");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)v13))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  std::string::basic_string[abi:ne180100]<0>(__p, "trackNumber");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v17 = a3;
  v18 = 0;
  v6 = (char *)operator new(0x48uLL);
  v7 = 0;
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 72;
  v8 = MEMORY[0x1E0D4AF48] + 16;
  do
  {
    v9 = &v6[v7];
    v10 = *(_QWORD *)&v19[v7 + 8];
    *(_QWORD *)v9 = v8;
    *((_QWORD *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = *(_DWORD *)&v19[v7 + 16];
    v7 += 24;
  }
  while (v7 != 72);
  a3[1] = v6 + 72;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);

}

void sub_193E5AADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void **a28)
{
  void *v28;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a28);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_9(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *__p[2];
  char v12;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "time");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)objc_msgSend(v8, "longLongValue") / 1000.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_193E5AC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_8(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "title");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193E5ACE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_7(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "titleOrder");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v10 = a3;
  v11 = 0;
  v6 = operator new(0x18uLL);
  a3[2] = v6 + 3;
  v7 = v12;
  *v6 = MEMORY[0x1E0D4AF48] + 16;
  v6[1] = v7;
  *((_DWORD *)v6 + 4) = v13;
  *a3 = v6;
  a3[1] = v6 + 3;
  if (v9 < 0)
    operator delete(__p[0]);

}

void sub_193E5AE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
  void *v16;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a16);
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_6(void *a1@<X1>, int64x2_t *a2@<X8>)
{
  mlcore *v3;
  mlcore *v4;
  mlcore *v5;
  mlcore *v6;
  mlcore *v7;
  mlcore *v8;
  uint64_t v9;
  mlcore *v10;

  v10 = a1;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  a2->i64[0] = 0;
  v3 = (mlcore *)mlcore::ItemPropertyStoreID(v10);
  v4 = (mlcore *)mlcore::ItemPropertySubscriptionStoreItemID(v3);
  v5 = (mlcore *)mlcore::ItemPropertyPersistentID(v4);
  v6 = (mlcore *)mlcore::ItemPropertyStoreCloudID(v5);
  v7 = (mlcore *)mlcore::ItemPropertySyncID(v6);
  v8 = (mlcore *)mlcore::ItemPropertyStoreCloudUniversalLibraryID(v7);
  v9 = mlcore::ItemPropertyStoreCloudAlbumID(v8);
  _MPMLInsertPredicatesForIdentifierSet(a2, v10, (uint64_t)v3, (uint64_t)v4, (uint64_t)v5, (uint64_t)v6, 0, (uint64_t)v7, (uint64_t)v8, v9);

}

void sub_193E5AEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12)
{
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);

  _Unwind_Resume(a1);
}

void ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_5(uint64_t a1, void *a2, uint64_t *a3)
{
  void *v4;
  void *v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  mlcore *v13;
  mlcore *v14;
  mlcore *v15;
  mlcore *v16;
  mlcore *v17;
  mlcore *v18;
  mlcore *v19;
  uint64_t v20;
  void *v21;
  BOOL v22;
  id v23;
  mlcore *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  int64x2_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void **v64;
  uint64_t v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t *v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t **v102;
  uint64_t *v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t *v106;
  _QWORD *v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  const void *v119;
  __int128 v120;
  _OWORD *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  _QWORD *v128;
  _QWORD *v129;
  char *v130;
  __int128 v131;
  _OWORD *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  __int128 v137;
  int64x2_t v138;
  char *v139;
  uint64_t *v140;
  uint64_t *v141;
  BOOL v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  int64x2_t v157;
  uint64_t v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t *v163;
  uint64_t *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  void *v168;
  void *v169;
  void *v170;
  id v171;
  void *obj;
  id obja[2];
  id objb[2];
  _QWORD v175[3];
  std::__shared_weak_count *v176;
  _QWORD v177[3];
  __int128 v178;
  __int128 v179;
  void *v180[2];
  _BYTE *v181;
  uint64_t v182;
  int64x2_t v183;
  char *v184;
  uint64_t *v185;
  _QWORD *v186[2];
  void *__p;
  uint64_t v188;
  _QWORD *v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  int64x2_t v199;
  unint64_t v200;
  int64x2_t *v201;
  int64x2_t v202;
  unint64_t v203;
  unint64_t *v204;
  _BYTE v205[128];
  uint64_t *v206;
  _QWORD *v207[5];

  v207[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v199 = 0uLL;
  v200 = 0;
  v171 = a2;
  objc_msgSend(v171, "modelKind");
  v170 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v170, "identityKind");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[MPModelTVEpisodeKind identityKind](MPModelTVEpisodeKind, "identityKind");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "isEqual:", v5);

  if ((v6 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v168 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyTVEpisodeMap()_block_invoke_5");
    v169 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v168, "handleFailureInFunction:file:lineNumber:description:", v169, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 2822, CFSTR("Must have TV Episode kind to generate TV Episode entity query."));

  }
  v7 = (std::__shared_weak_count *)a3[1];
  v197 = *a3;
  v198 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  objc_msgSend(v170, "applyToView:withContext:", &v197, v171);
  v10 = v198;
  if (v198)
  {
    v11 = (unint64_t *)&v198->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  objc_msgSend(v171, "allowedEntityIdentifiers");
  v13 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v14 = (mlcore *)mlcore::ItemPropertyStoreID(v13);
  v15 = (mlcore *)mlcore::ItemPropertySubscriptionStoreItemID(v14);
  v16 = (mlcore *)mlcore::ItemPropertyPersistentID(v15);
  v17 = (mlcore *)mlcore::ItemPropertyStoreCloudID(v16);
  v18 = (mlcore *)mlcore::ItemPropertySyncID(v17);
  v19 = (mlcore *)mlcore::ItemPropertyStoreCloudUniversalLibraryID(v18);
  v20 = mlcore::ItemPropertyStoreCloudAlbumID(v19);
  _MPMLInsertPredicatesForIdentifierSet(&v199, v13, (uint64_t)v14, (uint64_t)v15, (uint64_t)v16, (uint64_t)v17, 0, (uint64_t)v18, (uint64_t)v19, v20);

  objc_msgSend(v171, "filterText");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "length") == 0;

  if (!v22)
  {
    objc_msgSend(v171, "filterText");
    v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v23, "UTF8String"));

    v25 = mlcore::ItemPropertyTitle(v24);
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *,std::string&,void>(&v185, v25, (uint64_t)&__p);
    v27 = v185;
    v26 = v186[0];
    v206 = v185;
    v207[0] = v186[0];
    v185 = 0;
    v186[0] = 0;
    v195 = 0;
    v196 = 0;
    v194 = 0;
    v201 = (int64x2_t *)&v194;
    v202.i8[0] = 0;
    v28 = operator new(0x10uLL);
    v194 = v28;
    v195 = v28;
    v196 = v28 + 2;
    *v28 = v27;
    v28[1] = v26;
    if (v26)
    {
      v29 = v26 + 1;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v195 = v28 + 2;
    mlcore::CreateOrPredicate();
    v31 = v199.i64[1];
    if (v199.i64[1] >= v200)
    {
      v32 = (v199.i64[1] - v199.i64[0]) >> 4;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 60)
        std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
      v34 = v200 - v199.i64[0];
      if ((uint64_t)(v200 - v199.i64[0]) >> 3 > v33)
        v33 = v34 >> 3;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
        v35 = 0xFFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      v204 = &v200;
      v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v35);
      v38 = &v36[16 * v32];
      *(_OWORD *)v38 = *(_OWORD *)v180;
      v180[0] = 0;
      v180[1] = 0;
      v39 = (_QWORD *)v199.i64[1];
      v40 = v199.i64[0];
      if (v199.i64[1] == v199.i64[0])
      {
        v43 = vdupq_n_s64(v199.u64[1]);
        v41 = (uint64_t)&v36[16 * v32];
      }
      else
      {
        v41 = (uint64_t)&v36[16 * v32];
        do
        {
          v42 = *((_OWORD *)v39 - 1);
          v39 -= 2;
          *(_OWORD *)(v41 - 16) = v42;
          v41 -= 16;
          *v39 = 0;
          v39[1] = 0;
        }
        while (v39 != (_QWORD *)v40);
        v43 = v199;
      }
      v44 = (uint64_t)(v38 + 16);
      v199.i64[0] = v41;
      v199.i64[1] = (uint64_t)(v38 + 16);
      v202 = v43;
      v45 = v200;
      v200 = (unint64_t)&v36[16 * v37];
      v203 = v45;
      v201 = (int64x2_t *)v43.i64[0];
      std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v201);
      v199.i64[1] = v44;
      if (v180[1])
      {
        v46 = (unint64_t *)((char *)v180[1] + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          (*(void (**)(void *))(*(_QWORD *)v180[1] + 16))(v180[1]);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v180[1]);
        }
      }
    }
    else
    {
      *(_OWORD *)v199.i64[1] = *(_OWORD *)v180;
      v180[0] = 0;
      v180[1] = 0;
      v199.i64[1] = v31 + 16;
    }
    v201 = (int64x2_t *)&v194;
    std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
    v48 = (std::__shared_weak_count *)v207[0];
    if (v207[0])
    {
      v49 = v207[0] + 1;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = (std::__shared_weak_count *)v186[0];
    if (v186[0])
    {
      v52 = v186[0] + 1;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (SHIBYTE(v189) < 0)
      operator delete(__p);
  }
  v207[0] = 0;
  v207[1] = 0;
  v206 = (uint64_t *)v207;
  v190 = 0u;
  v191 = 0u;
  v192 = 0u;
  v193 = 0u;
  objc_msgSend(v171, "scopedContainers");
  obj = (void *)objc_claimAutoreleasedReturnValue();
  v54 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v190, v205, 16);
  if (v54)
  {
    v55 = *(_QWORD *)v191;
    do
    {
      v56 = 0;
      do
      {
        if (*(_QWORD *)v191 != v55)
          objc_enumerationMutation(obj);
        objc_msgSend(*(id *)(*((_QWORD *)&v190 + 1) + 8 * v56), "identifiers");
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "library");
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        v59 = objc_msgSend(v58, "persistentID");

        objc_msgSend(v57, "universalStore");
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        v61 = objc_msgSend(v60, "adamID");

        objc_msgSend(v57, "universalStore");
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        v63 = objc_msgSend(v62, "subscriptionAdamID");

        v64 = (void **)objc_opt_class();
        v201 = (int64x2_t *)v64;
        if (v64 == (void **)objc_opt_class())
        {
          if (v59)
          {
            v66 = std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::__emplace_unique_key_args<objc_class * {__strong},std::piecewise_construct_t const&,std::tuple<objc_class * const {__strong}&>,std::tuple<>>(&v206, (unint64_t)v64, (id *)&v201);
            __p = (void *)mlcore::ItemPropertyAlbumPersistentID((mlcore *)v66);
            v67 = std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> *&&>,std::tuple<>>(v66 + 5, (unint64_t)__p, (uint64_t *)&__p);
            v68 = v67;
            v70 = (uint64_t *)v67[6];
            v69 = v67[7];
            if ((unint64_t)v70 >= v69)
            {
              v71 = (uint64_t *)v67[5];
              v72 = v70 - v71;
              v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v74 = v69 - (_QWORD)v71;
              if (v74 >> 2 > v73)
                v73 = v74 >> 2;
              v75 = (unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8;
              v76 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v75)
                v76 = v73;
              if (v76)
              {
                v76 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v76);
                v71 = (uint64_t *)v68[5];
                v70 = (uint64_t *)v68[6];
              }
              else
              {
                v77 = 0;
              }
              v97 = (uint64_t *)(v76 + 8 * v72);
              *v97 = v59;
              v81 = v97 + 1;
              while (v70 != v71)
              {
                v98 = *--v70;
                *--v97 = v98;
              }
LABEL_91:
              v68[5] = (uint64_t)v97;
              v68[6] = (uint64_t)v81;
              v68[7] = v76 + 8 * v77;
              if (v71)
                operator delete(v71);
LABEL_93:
              v68[6] = (uint64_t)v81;
              goto LABEL_94;
            }
LABEL_65:
            *v70 = v59;
            v81 = v70 + 1;
            goto LABEL_93;
          }
          if (v61)
          {
            v82 = std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::__emplace_unique_key_args<objc_class * {__strong},std::piecewise_construct_t const&,std::tuple<objc_class * const {__strong}&>,std::tuple<>>(&v206, (unint64_t)v64, (id *)&v201);
            __p = (void *)mlcore::ItemPropertyStorePlaylistID((mlcore *)v82);
            v83 = std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> *&&>,std::tuple<>>(v82 + 5, (unint64_t)__p, (uint64_t *)&__p);
            v84 = v83;
            v86 = (uint64_t *)v83[6];
            v85 = v83[7];
            if ((unint64_t)v86 >= v85)
            {
              v91 = (uint64_t *)v83[5];
              v92 = v86 - v91;
              v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v94 = v85 - (_QWORD)v91;
              if (v94 >> 2 > v93)
                v93 = v94 >> 2;
              v75 = (unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8;
              v95 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v75)
                v95 = v93;
              if (v95)
              {
                v95 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v95);
                v91 = (uint64_t *)v84[5];
                v86 = (uint64_t *)v84[6];
              }
              else
              {
                v96 = 0;
              }
              v100 = (uint64_t *)(v95 + 8 * v92);
              *v100 = v61;
              v87 = v100 + 1;
              while (v86 != v91)
              {
                v101 = *--v86;
                *--v100 = v101;
              }
              v84[5] = (uint64_t)v100;
              v84[6] = (uint64_t)v87;
              v84[7] = v95 + 8 * v96;
              if (v91)
                operator delete(v91);
            }
            else
            {
              *v86 = v61;
              v87 = v86 + 1;
            }
            v84[6] = (uint64_t)v87;
          }
          if (v63)
          {
            v102 = std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::__emplace_unique_key_args<objc_class * {__strong},std::piecewise_construct_t const&,std::tuple<objc_class * const {__strong}&>,std::tuple<>>(&v206, (unint64_t)v201, (id *)&v201);
            __p = (void *)mlcore::ItemPropertyStorePlaylistID((mlcore *)v102);
            v103 = std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> *&&>,std::tuple<>>(v102 + 5, (unint64_t)__p, (uint64_t *)&__p);
            v104 = v103;
            v106 = (uint64_t *)v103[6];
            v105 = v103[7];
            if ((unint64_t)v106 >= v105)
            {
              v108 = (uint64_t *)v103[5];
              v109 = v106 - v108;
              v110 = v109 + 1;
              if ((unint64_t)(v109 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v111 = v105 - (_QWORD)v108;
              if (v111 >> 2 > v110)
                v110 = v111 >> 2;
              v75 = (unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8;
              v112 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v75)
                v112 = v110;
              if (v112)
              {
                v112 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v112);
                v108 = (uint64_t *)v104[5];
                v106 = (uint64_t *)v104[6];
              }
              else
              {
                v113 = 0;
              }
              v114 = (uint64_t *)(v112 + 8 * v109);
              *v114 = v63;
              v107 = v114 + 1;
              while (v106 != v108)
              {
                v115 = *--v106;
                *--v114 = v115;
              }
              v104[5] = (uint64_t)v114;
              v104[6] = (uint64_t)v107;
              v104[7] = v112 + 8 * v113;
              if (v108)
                operator delete(v108);
            }
            else
            {
              *v106 = v63;
              v107 = v106 + 1;
            }
            v104[6] = (uint64_t)v107;
          }
        }
        else
        {
          if (v64 == (void **)objc_opt_class())
          {
            if (!v59)
              goto LABEL_94;
            v78 = std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::__emplace_unique_key_args<objc_class * {__strong},std::piecewise_construct_t const&,std::tuple<objc_class * const {__strong}&>,std::tuple<>>(&v206, (unint64_t)v64, (id *)&v201);
            __p = (void *)mlcore::ItemPropertyItemArtistPersistentID((mlcore *)v78);
            v79 = std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> *&&>,std::tuple<>>(v78 + 5, (unint64_t)__p, (uint64_t *)&__p);
            v68 = v79;
            v70 = (uint64_t *)v79[6];
            v80 = v79[7];
            if ((unint64_t)v70 >= v80)
            {
              v71 = (uint64_t *)v79[5];
              v88 = v70 - v71;
              v89 = v88 + 1;
              if ((unint64_t)(v88 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v90 = v80 - (_QWORD)v71;
              if (v90 >> 2 > v89)
                v89 = v90 >> 2;
              v75 = (unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8;
              v76 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v75)
                v76 = v89;
              if (v76)
              {
                v76 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v76);
                v71 = (uint64_t *)v68[5];
                v70 = (uint64_t *)v68[6];
              }
              else
              {
                v77 = 0;
              }
              v97 = (uint64_t *)(v76 + 8 * v88);
              *v97 = v59;
              v81 = v97 + 1;
              while (v70 != v71)
              {
                v99 = *--v70;
                *--v97 = v99;
              }
              goto LABEL_91;
            }
            goto LABEL_65;
          }
          v65 = objc_opt_class();
          if (v65 == objc_opt_class())
            __assert_rtn("_MPMLInitPropertyTVEpisodeMap_block_invoke_5", "MPMediaLibraryTranslatorSchema.mm", 2862, "0");
        }
LABEL_94:

        ++v56;
      }
      while (v56 != v54);
      v116 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v190, v205, 16);
      v54 = v116;
    }
    while (v116);
  }

  v117 = v206;
  if (v206 != (uint64_t *)v207)
  {
    while (1)
    {
      std::pair<objc_class * const {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long>>,std::vector<std::pair<mlcore::ModelProperty<long long> const,std::allocator<long long>>>>>::pair[abi:ne180100](&__p, (id *)v117 + 4);
      std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>::map[abi:ne180100]((uint64_t)&v185, &v188);
      v183 = 0uLL;
      v184 = 0;
      v118 = v185;
      if (v185 != (uint64_t *)v186)
        break;
      v144 = 0;
      v143 = 0;
LABEL_159:
      memset(v177, 0, sizeof(v177));
      std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v177, v143, v144, (v144 - v143) >> 4);
      mlcore::CreateOrPredicate();
      v145 = v199.i64[1];
      if (v199.i64[1] >= v200)
      {
        v146 = (v199.i64[1] - v199.i64[0]) >> 4;
        v147 = v146 + 1;
        if ((unint64_t)(v146 + 1) >> 60)
          std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
        v148 = v200 - v199.i64[0];
        if ((uint64_t)(v200 - v199.i64[0]) >> 3 > v147)
          v147 = v148 >> 3;
        if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF0)
          v149 = 0xFFFFFFFFFFFFFFFLL;
        else
          v149 = v147;
        v204 = &v200;
        v150 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v149);
        v152 = &v150[16 * v146];
        *(_OWORD *)v152 = *(_OWORD *)v180;
        v180[0] = 0;
        v180[1] = 0;
        v153 = (_QWORD *)v199.i64[1];
        v154 = v199.i64[0];
        if (v199.i64[1] == v199.i64[0])
        {
          v157 = vdupq_n_s64(v199.u64[1]);
          v155 = (uint64_t)&v150[16 * v146];
        }
        else
        {
          v155 = (uint64_t)&v150[16 * v146];
          do
          {
            v156 = *((_OWORD *)v153 - 1);
            v153 -= 2;
            *(_OWORD *)(v155 - 16) = v156;
            v155 -= 16;
            *v153 = 0;
            v153[1] = 0;
          }
          while (v153 != (_QWORD *)v154);
          v157 = v199;
        }
        v158 = (uint64_t)(v152 + 16);
        v199.i64[0] = v155;
        v199.i64[1] = (uint64_t)(v152 + 16);
        v202 = v157;
        v159 = v200;
        v200 = (unint64_t)&v150[16 * v151];
        v203 = v159;
        v201 = (int64x2_t *)v157.i64[0];
        std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v201);
        v160 = (std::__shared_weak_count *)v180[1];
        v199.i64[1] = v158;
        if (v180[1])
        {
          v161 = (unint64_t *)((char *)v180[1] + 8);
          do
            v162 = __ldaxr(v161);
          while (__stlxr(v162 - 1, v161));
          if (!v162)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
        }
      }
      else
      {
        *(_OWORD *)v199.i64[1] = *(_OWORD *)v180;
        v180[0] = 0;
        v180[1] = 0;
        v199.i64[1] = v145 + 16;
      }
      v201 = (int64x2_t *)v177;
      std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
      v201 = &v183;
      std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
      std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::destroy(v186[0]);
      std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::destroy(v189);

      v163 = (uint64_t *)v117[1];
      if (v163)
      {
        do
        {
          v164 = v163;
          v163 = (uint64_t *)*v163;
        }
        while (v163);
      }
      else
      {
        do
        {
          v164 = (uint64_t *)v117[2];
          v142 = *v164 == (_QWORD)v117;
          v117 = v164;
        }
        while (!v142);
      }
      v117 = v164;
      if (v164 == (uint64_t *)v207)
        goto LABEL_183;
    }
    while (1)
    {
      v119 = (const void *)v118[5];
      v180[0] = (void *)v118[4];
      v181 = 0;
      v182 = 0;
      v180[1] = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&v180[1], v119, v118[6], (v118[6] - (uint64_t)v119) >> 3);
      if ((_BYTE *)(v181 - (char *)v180[1]) == (_BYTE *)8)
      {
        std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<long long>,std::allocator<mlcore::ComparisonPredicate<long long>>,mlcore::ModelProperty<long long> *&,mlcore::ComparisonOperator,long long const&,void>((uint64_t *)&v178);
        v120 = v178;
        v179 = v178;
        v178 = 0uLL;
        v121 = (_OWORD *)v183.i64[1];
        if (v183.i64[1] >= (unint64_t)v184)
        {
          *(_OWORD *)obja = v120;
          v122 = (v183.i64[1] - v183.i64[0]) >> 4;
          if ((unint64_t)(v122 + 1) >> 60)
            std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
          v123 = (uint64_t)&v184[-v183.i64[0]] >> 3;
          if (v123 <= v122 + 1)
            v123 = v122 + 1;
          if ((unint64_t)&v184[-v183.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
            v124 = 0xFFFFFFFFFFFFFFFLL;
          else
            v124 = v123;
          v204 = (unint64_t *)&v184;
          v125 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v124);
          v127 = &v125[16 * v122];
          *(_OWORD *)v127 = *(_OWORD *)obja;
          v179 = 0uLL;
          v128 = (_QWORD *)v183.i64[1];
          v129 = (_QWORD *)v183.i64[0];
          if (v183.i64[1] != v183.i64[0])
          {
            v130 = &v125[16 * v122];
            do
            {
              v131 = *((_OWORD *)v128 - 1);
              v128 -= 2;
              *((_OWORD *)v130 - 1) = v131;
              v130 -= 16;
              *v128 = 0;
              v128[1] = 0;
            }
            while (v128 != v129);
            goto LABEL_146;
          }
          goto LABEL_147;
        }
      }
      else
      {
        std::allocate_shared[abi:ne180100]<mlcore::InPredicate<long long>,std::allocator<mlcore::InPredicate<long long>>,mlcore::ModelProperty<long long> *&,std::vector<long long> const&,void>((uint64_t *)&v178);
        v120 = v178;
        v179 = v178;
        v178 = 0uLL;
        v121 = (_OWORD *)v183.i64[1];
        if (v183.i64[1] >= (unint64_t)v184)
        {
          *(_OWORD *)objb = v120;
          v133 = (v183.i64[1] - v183.i64[0]) >> 4;
          if ((unint64_t)(v133 + 1) >> 60)
            std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
          v134 = (uint64_t)&v184[-v183.i64[0]] >> 3;
          if (v134 <= v133 + 1)
            v134 = v133 + 1;
          if ((unint64_t)&v184[-v183.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
            v135 = 0xFFFFFFFFFFFFFFFLL;
          else
            v135 = v134;
          v204 = (unint64_t *)&v184;
          v125 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v135);
          v127 = &v125[16 * v133];
          *(_OWORD *)v127 = *(_OWORD *)objb;
          v179 = 0uLL;
          v128 = (_QWORD *)v183.i64[1];
          v136 = (_QWORD *)v183.i64[0];
          if (v183.i64[1] != v183.i64[0])
          {
            v130 = &v125[16 * v133];
            do
            {
              v137 = *((_OWORD *)v128 - 1);
              v128 -= 2;
              *((_OWORD *)v130 - 1) = v137;
              v130 -= 16;
              *v128 = 0;
              v128[1] = 0;
            }
            while (v128 != v136);
LABEL_146:
            v138 = v183;
LABEL_148:
            v132 = v127 + 16;
            v183.i64[0] = (uint64_t)v130;
            v183.i64[1] = (uint64_t)(v127 + 16);
            v202 = v138;
            v139 = v184;
            v184 = &v125[16 * v126];
            v203 = (unint64_t)v139;
            v201 = (int64x2_t *)v138.i64[0];
            std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v201);
            goto LABEL_149;
          }
LABEL_147:
          v138 = vdupq_n_s64((unint64_t)v128);
          v130 = v127;
          goto LABEL_148;
        }
      }
      *v121 = v120;
      v132 = v121 + 1;
      v179 = 0uLL;
LABEL_149:
      v183.i64[1] = (uint64_t)v132;
      if (v180[1])
      {
        v181 = v180[1];
        operator delete(v180[1]);
      }
      v140 = (uint64_t *)v118[1];
      if (v140)
      {
        do
        {
          v141 = v140;
          v140 = (uint64_t *)*v140;
        }
        while (v140);
      }
      else
      {
        do
        {
          v141 = (uint64_t *)v118[2];
          v142 = *v141 == (_QWORD)v118;
          v118 = v141;
        }
        while (!v142);
      }
      v118 = v141;
      if (v141 == (uint64_t *)v186)
      {
        v144 = (char *)v183.i64[1];
        v143 = (char *)v183.i64[0];
        goto LABEL_159;
      }
    }
  }
LABEL_183:
  memset(v175, 0, sizeof(v175));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v175, v199.i64[0], (_QWORD *)v199.i64[1], (v199.i64[1] - v199.i64[0]) >> 4);
  mlcore::CreateAndPredicate();
  mlcore::EntityQuery::tvEpisodesQuery();
  v165 = v176;
  if (v176)
  {
    v166 = (unint64_t *)&v176->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v201 = (int64x2_t *)v175;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
  std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::destroy(v207[0]);

  v201 = &v199;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);

}

void sub_193E5BD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *v63;
  void *v64;

  __p = &a60;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::__emplace_unique_key_args<objc_class * {__strong},std::piecewise_construct_t const&,std::tuple<objc_class * const {__strong}&>,std::tuple<>>(uint64_t **a1, unint64_t a2, id *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x40uLL);
    v10 = (uint64_t *)*a3;
    v7[7] = 0;
    v7[6] = 0;
    v7[4] = v10;
    v7[5] = (uint64_t *)(v7 + 6);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> *&&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x40uLL);
    v9[4] = *a3;
    v9[5] = 0;
    v9[6] = 0;
    v9[7] = 0;
    std::__tree<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::__map_value_compare<long long,std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

_QWORD *std::pair<objc_class * const {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long>>,std::vector<std::pair<mlcore::ModelProperty<long long> const,std::allocator<long long>>>>>::pair[abi:ne180100](_QWORD *a1, id *a2)
{
  _QWORD *v3;

  v3 = a2 + 1;
  *a1 = *a2;
  std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>::map[abi:ne180100]((uint64_t)(a1 + 1), v3);
  return a1;
}

void sub_193E5C168(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

uint64_t std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(uint64_t **)(a1 + 8);
      v7 = v3;
      if (*(_QWORD **)a1 == v3)
        goto LABEL_8;
      v8 = *(_QWORD **)(a1 + 8);
      v9 = v3;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      v11 = v5[4];
      if (v7[4] < v11)
      {
LABEL_8:
        if (v6)
          v12 = (uint64_t **)v7;
        else
          v12 = (uint64_t **)v3;
        if (v6)
          v13 = (uint64_t **)(v7 + 1);
        else
          v13 = (uint64_t **)v3;
      }
      else
      {
        v12 = (uint64_t **)v3;
        v13 = (uint64_t **)v3;
        if (v6)
        {
          v13 = (uint64_t **)v3;
          while (1)
          {
            while (1)
            {
              v12 = (uint64_t **)v6;
              v18 = v6[4];
              if (v11 >= v18)
                break;
              v6 = *v12;
              v13 = v12;
              if (!*v12)
                goto LABEL_15;
            }
            if (v18 >= v11)
              break;
            v13 = v12 + 1;
            v6 = v12[1];
            if (!v6)
              goto LABEL_15;
          }
        }
      }
      if (!*v13)
      {
LABEL_15:
        v14 = (uint64_t *)operator new(0x40uLL);
        v15 = v5[4];
        v14[5] = 0;
        v14[4] = v15;
        v14[6] = 0;
        v14[7] = 0;
        std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v14 + 5, (const void *)v5[5], v5[6], (uint64_t)(v5[6] - v5[5]) >> 3);
        std::__tree<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::__map_value_compare<long long,std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::shared_ptr<mlcore::EntityQueryResult>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }
      v16 = (_QWORD *)v5[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v5[2];
          v10 = *v17 == (_QWORD)v5;
          v5 = v17;
        }
        while (!v10);
      }
      v5 = v17;
    }
    while (v17 != v4);
  }
  return a1;
}

void sub_193E5C300(_Unwind_Exception *a1)
{
  void *v1;
  _QWORD **v2;

  operator delete(v1);
  std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::destroy(*a1);
    std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];

  v13 = a2;
  v8 = a5;
  objc_msgSend(v13, "mediaLibrary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "uniqueIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_2;
  v16[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v16[4] = a3;
  v16[5] = a4;
  objc_msgSend(v8, "setLibraryIdentifiersWithDatabaseID:block:", v10, v16);

  objc_msgSend(v13, "personID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v12, "length"))
  {
    v15[0] = v11;
    v15[1] = 3221225472;
    v15[2] = ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_3;
    v15[3] = &__block_descriptor_48_e45_v16__0___MPMutablePersonalStoreIdentifiers__8l;
    v15[4] = a3;
    v15[5] = a4;
    objc_msgSend(v8, "setPersonalStoreIdentifiersWithPersonID:block:", v12, v15);
  }
  v14[0] = v11;
  v14[1] = 3221225472;
  v14[2] = ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_4;
  v14[3] = &__block_descriptor_48_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v14[4] = a3;
  v14[5] = a4;
  objc_msgSend(v8, "setUniversalStoreIdentifiersWithBlock:", v14);

}

void sub_193E5C4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E5C580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  void *v9;
  void *__p[2];
  char v11;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "cloudID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setCloudID:", objc_msgSend(v6, "unsignedLongLongValue"));

  if (v11 < 0)
    operator delete(__p[0]);
  v7 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeCloudAlbumID");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v7, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), *(int8x8_t **)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setCloudAlbumID:", v9);

  if (v11 < 0)
    operator delete(__p[0]);

}

void sub_193E5C6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL29_MPMLInitPropertyTVEpisodeMapv_block_invoke_4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  void *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  void *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  void *v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  void *v18;
  void *__p[2];
  char v20;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "cloudUniversalLibraryID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setUniversalCloudLibraryID:", v6);

  if (v20 < 0)
    operator delete(__p[0]);
  v7 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "subscriptionStoreID");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v7, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), *(int8x8_t **)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setSubscriptionAdamID:", objc_msgSend(v9, "longLongValue"));

  if (v20 < 0)
    operator delete(__p[0]);
  v10 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeID");
  v11 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v10, (unsigned __int8 *)__p);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v11 + 5), *(int8x8_t **)(a1 + 40));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAdamID:", objc_msgSend(v12, "longLongValue"));

  if (v20 < 0)
    operator delete(__p[0]);
  objc_msgSend(v3, "setPurchasedAdamID:", objc_msgSend(v3, "adamID"));
  v13 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "reportingStoreItemID");
  v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v13, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), *(int8x8_t **)(a1 + 40));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setReportingAdamID:", objc_msgSend(v15, "longLongValue"));

  if (v20 < 0)
    operator delete(__p[0]);
  v16 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "assetStoreItemID");
  v17 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v16, (unsigned __int8 *)__p);
  if (!v17)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v17 + 5), *(int8x8_t **)(a1 + 40));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAssetAdamID:", objc_msgSend(v18, "longLongValue"));

  if (v20 < 0)
    operator delete(__p[0]);

}

void sub_193E5C968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_23()
{
  return 0;
}

id ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_22(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocalConstraints");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "numberWithUnsignedInteger:", (int)objc_msgSend(v9, "intValue"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 < 0)
    operator delete(__p[0]);

  return v10;
}

void sub_193E5CA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_21(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocalStatusReason");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "numberWithUnsignedInteger:", (int)objc_msgSend(v9, "intValue"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 < 0)
    operator delete(__p[0]);

  return v10;
}

void sub_193E5CB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_20(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *__p[2];
  char v15;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocalStatus");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "intValue") + 1;
  if (v10 >= 7)
    v11 = 0;
  else
    v11 = v10 - 1;
  objc_msgSend(v7, "numberWithInteger:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15 < 0)
    operator delete(__p[0]);

  return v12;
}

void sub_193E5CC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_19(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  void *__p[2];
  char v15;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocal");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "intValue") + 2;
  if (v10 > 4)
    v11 = 0;
  else
    v11 = qword_193F0C8F0[v10];
  objc_msgSend(v7, "numberWithInteger:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15 < 0)
    operator delete(__p[0]);

  return v12;
}

void sub_193E5CD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_18(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  void *v13;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(v17, "hasNonPurgeableAsset");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)v17);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "BOOLValue");
  if ((v10 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "isStoreRedownloadable");
    v12 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (!v12)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v12 + 5), a4);
    a4 = (int8x8_t *)objc_claimAutoreleasedReturnValue();
    v11 = -[int8x8_t BOOLValue](a4, "BOOLValue");
  }
  objc_msgSend(v7, "numberWithBool:", v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v10 & 1) == 0)
  {

    if (v16 < 0)
      operator delete(__p[0]);
  }

  if (v18 < 0)
    operator delete(v17[0]);

  return v13;
}

void sub_193E5CEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;

  if (a14 < 0)
    operator delete(__p);

  if (a20 < 0)
    operator delete(a15);

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_17(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "datePlayed");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E5CFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_16(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "downloadedDate");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E5D0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_15(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "libraryAdded");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E5D1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_14()
{
  return 0;
}

id ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_13(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *__p[2];
  char v12;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "time");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)objc_msgSend(v8, "longLongValue") / 1000.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_193E5D2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_12()
{
  return 0;
}

id ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_11(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  void *v15;
  unsigned __int8 *v16;
  void *v17;
  unsigned __int8 *v18;
  void *v19;
  void *v20;
  void *v21;
  void *__p[2];
  char v24;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "longLongValue");

  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "mediaType");
  v10 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v10 + 5), a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "unsignedIntValue");

  if (v24 < 0)
    operator delete(__p[0]);
  v13 = MPMediaTypeForMLMediaType(v12);
  std::string::basic_string[abi:ne180100]<0>(__p, "availableArtworkToken");
  v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fetchableArtworkToken");
  v16 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v16)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v16 + 5), a4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fetchableArtworkSourceType");
  v18 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v18)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v18 + 5), a4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  objc_msgSend(v6, "mediaLibrary");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  _MPMLTranslatorCreateArtworkCatalogBlock(v9, v13, 0, 1, v15, v17, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

void sub_193E5D570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v17;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_10(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "dateReleased");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E5D6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_9(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *__p[2];
  char v14;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "movieInfoPlist");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14 < 0)
    operator delete(__p[0]);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v8, "length"))
  {
    v9 = (void *)MEMORY[0x1E0CB38B0];
    objc_msgSend(v8, "dataUsingEncoding:", 4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "propertyListWithData:options:format:error:", v10, 0, 0, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v11 = (void *)MEMORY[0x1E0C9AA70];
  }

  return v11;
}

void sub_193E5D810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_8(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "title");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193E5D8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_7(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "titleOrder");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v10 = a3;
  v11 = 0;
  v6 = operator new(0x18uLL);
  a3[2] = v6 + 3;
  v7 = v12;
  *v6 = MEMORY[0x1E0D4AF48] + 16;
  v6[1] = v7;
  *((_DWORD *)v6 + 4) = v13;
  *a3 = v6;
  a3[1] = v6 + 3;
  if (v9 < 0)
    operator delete(__p[0]);

}

void sub_193E5DA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
  void *v16;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a16);
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_6(void *a1@<X1>, int64x2_t *a2@<X8>)
{
  mlcore *v3;
  mlcore *v4;
  mlcore *v5;
  mlcore *v6;
  mlcore *v7;
  mlcore *v8;
  uint64_t v9;
  mlcore *v10;

  v10 = a1;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  a2->i64[0] = 0;
  v3 = (mlcore *)mlcore::ItemPropertyStoreID(v10);
  v4 = (mlcore *)mlcore::ItemPropertySubscriptionStoreItemID(v3);
  v5 = (mlcore *)mlcore::ItemPropertyPersistentID(v4);
  v6 = (mlcore *)mlcore::ItemPropertyStoreCloudID(v5);
  v7 = (mlcore *)mlcore::ItemPropertySyncID(v6);
  v8 = (mlcore *)mlcore::ItemPropertyStoreCloudUniversalLibraryID(v7);
  v9 = mlcore::ItemPropertyStoreCloudAlbumID(v8);
  _MPMLInsertPredicatesForIdentifierSet(a2, v10, (uint64_t)v3, (uint64_t)v4, (uint64_t)v5, (uint64_t)v6, 0, (uint64_t)v7, (uint64_t)v8, v9);

}

void sub_193E5DAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12)
{
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyMovieMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];

  v13 = a2;
  v8 = a5;
  objc_msgSend(v13, "mediaLibrary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "uniqueIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_2;
  v16[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v16[4] = a3;
  v16[5] = a4;
  objc_msgSend(v8, "setLibraryIdentifiersWithDatabaseID:block:", v10, v16);

  objc_msgSend(v13, "personID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v12, "length"))
  {
    v15[0] = v11;
    v15[1] = 3221225472;
    v15[2] = ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_3;
    v15[3] = &__block_descriptor_48_e45_v16__0___MPMutablePersonalStoreIdentifiers__8l;
    v15[4] = a3;
    v15[5] = a4;
    objc_msgSend(v8, "setPersonalStoreIdentifiersWithPersonID:block:", v12, v15);
  }
  v14[0] = v11;
  v14[1] = 3221225472;
  v14[2] = ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_4;
  v14[3] = &__block_descriptor_48_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v14[4] = a3;
  v14[5] = a4;
  objc_msgSend(v8, "setUniversalStoreIdentifiersWithBlock:", v14);

}

void sub_193E5DC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E5DD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  void *v9;
  void *__p[2];
  char v11;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "cloudID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setCloudID:", objc_msgSend(v6, "unsignedLongLongValue"));

  if (v11 < 0)
    operator delete(__p[0]);
  v7 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeCloudAlbumID");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v7, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), *(int8x8_t **)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setCloudAlbumID:", v9);

  if (v11 < 0)
    operator delete(__p[0]);

}

void sub_193E5DE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyMovieMapv_block_invoke_4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  void *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  void *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  void *v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  void *v18;
  void *__p[2];
  char v20;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "cloudUniversalLibraryID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setUniversalCloudLibraryID:", v6);

  if (v20 < 0)
    operator delete(__p[0]);
  v7 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "subscriptionStoreID");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v7, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), *(int8x8_t **)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setSubscriptionAdamID:", objc_msgSend(v9, "longLongValue"));

  if (v20 < 0)
    operator delete(__p[0]);
  v10 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeID");
  v11 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v10, (unsigned __int8 *)__p);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v11 + 5), *(int8x8_t **)(a1 + 40));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAdamID:", objc_msgSend(v12, "longLongValue"));

  if (v20 < 0)
    operator delete(__p[0]);
  objc_msgSend(v3, "setPurchasedAdamID:", objc_msgSend(v3, "adamID"));
  v13 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "reportingStoreItemID");
  v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v13, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), *(int8x8_t **)(a1 + 40));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setReportingAdamID:", objc_msgSend(v15, "longLongValue"));

  if (v20 < 0)
    operator delete(__p[0]);
  v16 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "assetStoreItemID");
  v17 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v16, (unsigned __int8 *)__p);
  if (!v17)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v17 + 5), *(int8x8_t **)(a1 + 40));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAssetAdamID:", objc_msgSend(v18, "longLongValue"));

  if (v20 < 0)
    operator delete(__p[0]);

}

void sub_193E5E118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL40_MPMLInitPropertyPodcastEpisodeAuthorMapv_block_invoke_5(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193E5E214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL40_MPMLInitPropertyPodcastEpisodeAuthorMapv_block_invoke_4(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  _QWORD *v15;
  char v16;
  _BYTE v17[48];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(v13, "hasName");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)v13))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  mlcore::SortDescriptor::SortDescriptor();
  std::string::basic_string[abi:ne180100]<0>(__p, "nameOrder");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = a3;
  v16 = 0;
  v6 = (char *)operator new(0x30uLL);
  v7 = 0;
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 48;
  v8 = MEMORY[0x1E0D4AF48] + 16;
  do
  {
    v9 = &v6[v7];
    v10 = *(_QWORD *)&v17[v7 + 8];
    *(_QWORD *)v9 = v8;
    *((_QWORD *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = *(_DWORD *)&v17[v7 + 16];
    v7 += 24;
  }
  while (v7 != 48);
  a3[1] = v6 + 48;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);

}

void sub_193E5E3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void **a22)
{
  void *v22;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void ___ZL40_MPMLInitPropertyPodcastEpisodeAuthorMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[6];
  _QWORD v14[6];

  v12 = a2;
  v8 = a5;
  objc_msgSend(v12, "mediaLibrary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "uniqueIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = ___ZL40_MPMLInitPropertyPodcastEpisodeAuthorMapv_block_invoke_2;
  v14[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v14[4] = a3;
  v14[5] = a4;
  objc_msgSend(v8, "setLibraryIdentifiersWithDatabaseID:block:", v10, v14);

  v13[0] = v11;
  v13[1] = 3221225472;
  v13[2] = ___ZL40_MPMLInitPropertyPodcastEpisodeAuthorMapv_block_invoke_3;
  v13[3] = &__block_descriptor_48_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v13[4] = a3;
  v13[5] = a4;
  objc_msgSend(v8, "setUniversalStoreIdentifiersWithBlock:", v13);

}

void sub_193E5E500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void ___ZL40_MPMLInitPropertyPodcastEpisodeAuthorMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E5E5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL40_MPMLInitPropertyPodcastEpisodeAuthorMapv_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAdamID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E5E6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL34_MPMLInitPropertyPodcastEpisodeMapv_block_invoke_11(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "datePlayed");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E5E798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL34_MPMLInitPropertyPodcastEpisodeMapv_block_invoke_10(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  float v10;
  void *v11;
  void *__p[2];
  char v14;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "userRating");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14 < 0)
    operator delete(__p[0]);
  v9 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v8, "floatValue");
  objc_msgSend(v9, "numberWithDouble:", v10 / 100.0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

void sub_193E5E898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL34_MPMLInitPropertyPodcastEpisodeMapv_block_invoke_9(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "dateReleased");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateComponentsFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E5E97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id _MPMLDateComponentsFromStoredInt64(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", (double)a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "components:fromDate:", 3145982, v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

void sub_193E5EA34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id ___ZL34_MPMLInitPropertyPodcastEpisodeMapv_block_invoke_8(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *__p[2];
  char v12;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "time");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)objc_msgSend(v8, "longLongValue") / 1000.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_193E5EB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL34_MPMLInitPropertyPodcastEpisodeMapv_block_invoke_7(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "title");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193E5EBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL34_MPMLInitPropertyPodcastEpisodeMapv_block_invoke_6(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "titleOrder");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v10 = a3;
  v11 = 0;
  v6 = operator new(0x18uLL);
  a3[2] = v6 + 3;
  v7 = v12;
  *v6 = MEMORY[0x1E0D4AF48] + 16;
  v6[1] = v7;
  *((_DWORD *)v6 + 4) = v13;
  *a3 = v6;
  a3[1] = v6 + 3;
  if (v9 < 0)
    operator delete(__p[0]);

}

void sub_193E5ED0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
  void *v16;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a16);
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL34_MPMLInitPropertyPodcastEpisodeMapv_block_invoke_5(void *a1@<X1>, int64x2_t *a2@<X8>)
{
  mlcore *v3;
  mlcore *v4;
  uint64_t v5;
  mlcore *v6;

  v6 = a1;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  a2->i64[0] = 0;
  v3 = (mlcore *)mlcore::ItemPropertyStoreID(v6);
  v4 = (mlcore *)mlcore::ItemPropertyPersistentID(v3);
  v5 = mlcore::ItemPropertySyncID(v4);
  _MPMLInsertPredicatesForIdentifierSet(a2, v6, (uint64_t)v3, 0, (uint64_t)v4, 0, 0, v5, 0, 0);

}

void sub_193E5EDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12)
{
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);

  _Unwind_Resume(a1);
}

void ___ZL34_MPMLInitPropertyPodcastEpisodeMapv_block_invoke_4(uint64_t a1, void *a2, uint64_t *a3)
{
  void *v4;
  void *v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  mlcore *v13;
  mlcore *v14;
  mlcore *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  _QWORD **v58;
  _QWORD *v59;
  __int128 v60;
  _OWORD *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  _QWORD *v69;
  char *v70;
  __int128 v71;
  _OWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  __int128 v77;
  int64x2_t v78;
  char *v79;
  _QWORD *v80;
  _QWORD **v81;
  BOOL v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  int64x2_t v97;
  uint64_t v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  void *v109;
  void *v110;
  id v111;
  __int128 v112;
  __int128 v113;
  _QWORD v114[3];
  std::__shared_weak_count *v115;
  _QWORD v116[3];
  __int128 v117;
  __int128 v118;
  void *__p[2];
  _BYTE *v120;
  uint64_t v121;
  int64x2_t v122;
  char *v123;
  _QWORD **v124;
  _QWORD *v125[2];
  id v126;
  _QWORD v127[3];
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t *v132;
  _QWORD *v133[2];
  uint64_t v134;
  std::__shared_weak_count *v135;
  int64x2_t v136;
  unint64_t v137;
  int64x2_t *v138;
  int64x2_t v139;
  unint64_t v140;
  unint64_t *v141;
  _BYTE v142[128];
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v136 = 0uLL;
  v137 = 0;
  v111 = a2;
  objc_msgSend(v111, "modelKind");
  v110 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v110, "identityKind");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[MPModelPodcastEpisodeKind identityKind](MPModelPodcastEpisodeKind, "identityKind");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "isEqual:", v5);

  if ((v6 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyPodcastEpisodeMap()_block_invoke_4");
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v108, "handleFailureInFunction:file:lineNumber:description:", v109, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 3476, CFSTR("Must have Podcast Episode kind to generate Podcast Episode entity query."));

  }
  v7 = (std::__shared_weak_count *)a3[1];
  v134 = *a3;
  v135 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  objc_msgSend(v110, "applyToView:withContext:", &v134, v111);
  v10 = v135;
  if (v135)
  {
    v11 = (unint64_t *)&v135->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  objc_msgSend(v111, "allowedEntityIdentifiers");
  v13 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v14 = (mlcore *)mlcore::ItemPropertyStoreID(v13);
  v15 = (mlcore *)mlcore::ItemPropertyPersistentID(v14);
  v16 = mlcore::ItemPropertySyncID(v15);
  _MPMLInsertPredicatesForIdentifierSet(&v136, v13, (uint64_t)v14, 0, (uint64_t)v15, 0, 0, v16, 0, 0);

  v133[0] = 0;
  v133[1] = 0;
  v132 = (uint64_t *)v133;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v131 = 0u;
  objc_msgSend(v111, "scopedContainers");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v128, v142, 16);
  if (v18)
  {
    v19 = *(_QWORD *)v129;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v129 != v19)
          objc_enumerationMutation(v17);
        objc_msgSend(*(id *)(*((_QWORD *)&v128 + 1) + 8 * i), "identifiers");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "library");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = objc_msgSend(v22, "persistentID");

        objc_msgSend(v21, "universalStore");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = objc_msgSend(v24, "adamID");

        v26 = (void **)objc_opt_class();
        v138 = (int64x2_t *)v26;
        if (v26 == (void **)objc_opt_class())
        {
          if (v23)
          {
            v28 = std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::__emplace_unique_key_args<objc_class * {__strong},std::piecewise_construct_t const&,std::tuple<objc_class * const {__strong}&>,std::tuple<>>(&v132, (unint64_t)v26, (id *)&v138);
            v126 = (id)mlcore::ItemPropertyAlbumPersistentID((mlcore *)v28);
            v29 = std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> *&&>,std::tuple<>>(v28 + 5, (unint64_t)v126, (uint64_t *)&v126);
            v30 = v29;
            v32 = (uint64_t *)v29[6];
            v31 = v29[7];
            if ((unint64_t)v32 >= v31)
            {
              v40 = (uint64_t *)v29[5];
              v41 = v32 - v40;
              v42 = v41 + 1;
              if ((unint64_t)(v41 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v43 = v31 - (_QWORD)v40;
              if (v43 >> 2 > v42)
                v42 = v43 >> 2;
              v44 = (unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8;
              v45 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v44)
                v45 = v42;
              if (v45)
              {
                v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v45);
                v40 = (uint64_t *)v30[5];
                v32 = (uint64_t *)v30[6];
              }
              else
              {
                v46 = 0;
              }
              v53 = (uint64_t *)(v45 + 8 * v41);
              *v53 = v23;
              v33 = v53 + 1;
              while (v32 != v40)
              {
                v54 = *--v32;
                *--v53 = v54;
              }
              v30[5] = (uint64_t)v53;
              v30[6] = (uint64_t)v33;
              v30[7] = v45 + 8 * v46;
              if (v40)
                operator delete(v40);
            }
            else
            {
              *v32 = v23;
              v33 = v32 + 1;
            }
            v30[6] = (uint64_t)v33;
          }
          else if (v25)
          {
            v34 = std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::__emplace_unique_key_args<objc_class * {__strong},std::piecewise_construct_t const&,std::tuple<objc_class * const {__strong}&>,std::tuple<>>(&v132, (unint64_t)v26, (id *)&v138);
            v126 = (id)mlcore::ItemPropertyStorePlaylistID((mlcore *)v34);
            v35 = std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::__emplace_unique_key_args<mlcore::ModelProperty<long long> *,std::piecewise_construct_t const&,std::tuple<mlcore::ModelProperty<long long> *&&>,std::tuple<>>(v34 + 5, (unint64_t)v126, (uint64_t *)&v126);
            v36 = v35;
            v38 = (uint64_t *)v35[6];
            v37 = v35[7];
            if ((unint64_t)v38 >= v37)
            {
              v47 = (uint64_t *)v35[5];
              v48 = v38 - v47;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 61)
                std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
              v50 = v37 - (_QWORD)v47;
              if (v50 >> 2 > v49)
                v49 = v50 >> 2;
              v44 = (unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8;
              v51 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v44)
                v51 = v49;
              if (v51)
              {
                v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v51);
                v47 = (uint64_t *)v36[5];
                v38 = (uint64_t *)v36[6];
              }
              else
              {
                v52 = 0;
              }
              v55 = (uint64_t *)(v51 + 8 * v48);
              *v55 = v25;
              v39 = v55 + 1;
              while (v38 != v47)
              {
                v56 = *--v38;
                *--v55 = v56;
              }
              v36[5] = (uint64_t)v55;
              v36[6] = (uint64_t)v39;
              v36[7] = v51 + 8 * v52;
              if (v47)
                operator delete(v47);
            }
            else
            {
              *v38 = v25;
              v39 = v38 + 1;
            }
            v36[6] = (uint64_t)v39;
          }
        }
        else
        {
          v27 = objc_opt_class();
          if (v27 == objc_opt_class())
            __assert_rtn("_MPMLInitPropertyPodcastEpisodeMap_block_invoke_4", "MPMediaLibraryTranslatorSchema.mm", 3500, "0");
        }

      }
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v128, v142, 16);
    }
    while (v18);
  }

  v57 = v132;
  if (v132 != (uint64_t *)v133)
  {
    while (1)
    {
      std::pair<objc_class * const {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long>>,std::vector<std::pair<mlcore::ModelProperty<long long> const,std::allocator<long long>>>>>::pair[abi:ne180100](&v126, (id *)v57 + 4);
      std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>::map[abi:ne180100]((uint64_t)&v124, v127);
      v122 = 0uLL;
      v123 = 0;
      v58 = v124;
      if (v124 != v125)
        break;
      v84 = 0;
      v83 = 0;
LABEL_93:
      memset(v116, 0, sizeof(v116));
      std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v116, v83, v84, (v84 - v83) >> 4);
      mlcore::CreateOrPredicate();
      v85 = v136.i64[1];
      if (v136.i64[1] >= v137)
      {
        v86 = (v136.i64[1] - v136.i64[0]) >> 4;
        v87 = v86 + 1;
        if ((unint64_t)(v86 + 1) >> 60)
          std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
        v88 = v137 - v136.i64[0];
        if ((uint64_t)(v137 - v136.i64[0]) >> 3 > v87)
          v87 = v88 >> 3;
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0)
          v89 = 0xFFFFFFFFFFFFFFFLL;
        else
          v89 = v87;
        v141 = &v137;
        v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v89);
        v92 = &v90[16 * v86];
        *(_OWORD *)v92 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        v93 = (_QWORD *)v136.i64[1];
        v94 = v136.i64[0];
        if (v136.i64[1] == v136.i64[0])
        {
          v97 = vdupq_n_s64(v136.u64[1]);
          v95 = (uint64_t)&v90[16 * v86];
        }
        else
        {
          v95 = (uint64_t)&v90[16 * v86];
          do
          {
            v96 = *((_OWORD *)v93 - 1);
            v93 -= 2;
            *(_OWORD *)(v95 - 16) = v96;
            v95 -= 16;
            *v93 = 0;
            v93[1] = 0;
          }
          while (v93 != (_QWORD *)v94);
          v97 = v136;
        }
        v98 = (uint64_t)(v92 + 16);
        v136.i64[0] = v95;
        v136.i64[1] = (uint64_t)(v92 + 16);
        v139 = v97;
        v99 = v137;
        v137 = (unint64_t)&v90[16 * v91];
        v140 = v99;
        v138 = (int64x2_t *)v97.i64[0];
        std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v138);
        v100 = (std::__shared_weak_count *)__p[1];
        v136.i64[1] = v98;
        if (__p[1])
        {
          v101 = (unint64_t *)((char *)__p[1] + 8);
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
      }
      else
      {
        *(_OWORD *)v136.i64[1] = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        v136.i64[1] = v85 + 16;
      }
      v138 = (int64x2_t *)v116;
      std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
      v138 = &v122;
      std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
      std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::destroy(v125[0]);
      std::__tree<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::__map_value_compare<mlcore::ModelProperty<long long> *,std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>,std::less<mlcore::ModelProperty<long long> *>,true>,std::allocator<std::__value_type<mlcore::ModelProperty<long long> *,std::vector<long long>>>>::destroy((_QWORD *)v127[1]);

      v103 = (uint64_t *)v57[1];
      if (v103)
      {
        do
        {
          v104 = v103;
          v103 = (uint64_t *)*v103;
        }
        while (v103);
      }
      else
      {
        do
        {
          v104 = (uint64_t *)v57[2];
          v82 = *v104 == (_QWORD)v57;
          v57 = v104;
        }
        while (!v82);
      }
      v57 = v104;
      if (v104 == (uint64_t *)v133)
        goto LABEL_117;
    }
    while (1)
    {
      v59 = v58[5];
      __p[0] = v58[4];
      v120 = 0;
      v121 = 0;
      __p[1] = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&__p[1], v59, (uint64_t)v58[6], v58[6] - v59);
      if ((_BYTE *)(v120 - (char *)__p[1]) == (_BYTE *)8)
      {
        std::allocate_shared[abi:ne180100]<mlcore::ComparisonPredicate<long long>,std::allocator<mlcore::ComparisonPredicate<long long>>,mlcore::ModelProperty<long long> *&,mlcore::ComparisonOperator,long long const&,void>((uint64_t *)&v117);
        v60 = v117;
        v118 = v117;
        v117 = 0uLL;
        v61 = (_OWORD *)v122.i64[1];
        if (v122.i64[1] >= (unint64_t)v123)
        {
          v112 = v60;
          v62 = (v122.i64[1] - v122.i64[0]) >> 4;
          if ((unint64_t)(v62 + 1) >> 60)
            std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
          v63 = (uint64_t)&v123[-v122.i64[0]] >> 3;
          if (v63 <= v62 + 1)
            v63 = v62 + 1;
          if ((unint64_t)&v123[-v122.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
            v64 = 0xFFFFFFFFFFFFFFFLL;
          else
            v64 = v63;
          v141 = (unint64_t *)&v123;
          v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v64);
          v67 = &v65[16 * v62];
          *(_OWORD *)v67 = v112;
          v118 = 0uLL;
          v68 = (_QWORD *)v122.i64[1];
          v69 = (_QWORD *)v122.i64[0];
          if (v122.i64[1] != v122.i64[0])
          {
            v70 = &v65[16 * v62];
            do
            {
              v71 = *((_OWORD *)v68 - 1);
              v68 -= 2;
              *((_OWORD *)v70 - 1) = v71;
              v70 -= 16;
              *v68 = 0;
              v68[1] = 0;
            }
            while (v68 != v69);
            goto LABEL_80;
          }
          goto LABEL_81;
        }
      }
      else
      {
        std::allocate_shared[abi:ne180100]<mlcore::InPredicate<long long>,std::allocator<mlcore::InPredicate<long long>>,mlcore::ModelProperty<long long> *&,std::vector<long long> const&,void>((uint64_t *)&v117);
        v60 = v117;
        v118 = v117;
        v117 = 0uLL;
        v61 = (_OWORD *)v122.i64[1];
        if (v122.i64[1] >= (unint64_t)v123)
        {
          v113 = v60;
          v73 = (v122.i64[1] - v122.i64[0]) >> 4;
          if ((unint64_t)(v73 + 1) >> 60)
            std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
          v74 = (uint64_t)&v123[-v122.i64[0]] >> 3;
          if (v74 <= v73 + 1)
            v74 = v73 + 1;
          if ((unint64_t)&v123[-v122.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
            v75 = 0xFFFFFFFFFFFFFFFLL;
          else
            v75 = v74;
          v141 = (unint64_t *)&v123;
          v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<mlcore::LocalizedSearchScope>>>(v75);
          v67 = &v65[16 * v73];
          *(_OWORD *)v67 = v113;
          v118 = 0uLL;
          v68 = (_QWORD *)v122.i64[1];
          v76 = (_QWORD *)v122.i64[0];
          if (v122.i64[1] != v122.i64[0])
          {
            v70 = &v65[16 * v73];
            do
            {
              v77 = *((_OWORD *)v68 - 1);
              v68 -= 2;
              *((_OWORD *)v70 - 1) = v77;
              v70 -= 16;
              *v68 = 0;
              v68[1] = 0;
            }
            while (v68 != v76);
LABEL_80:
            v78 = v122;
LABEL_82:
            v72 = v67 + 16;
            v122.i64[0] = (uint64_t)v70;
            v122.i64[1] = (uint64_t)(v67 + 16);
            v139 = v78;
            v79 = v123;
            v123 = &v65[16 * v66];
            v140 = (unint64_t)v79;
            v138 = (int64x2_t *)v78.i64[0];
            std::__split_buffer<std::shared_ptr<mlcore::Predicate>>::~__split_buffer((uint64_t)&v138);
            goto LABEL_83;
          }
LABEL_81:
          v78 = vdupq_n_s64((unint64_t)v68);
          v70 = v67;
          goto LABEL_82;
        }
      }
      *v61 = v60;
      v72 = v61 + 1;
      v118 = 0uLL;
LABEL_83:
      v122.i64[1] = (uint64_t)v72;
      if (__p[1])
      {
        v120 = __p[1];
        operator delete(__p[1]);
      }
      v80 = v58[1];
      if (v80)
      {
        do
        {
          v81 = (_QWORD **)v80;
          v80 = (_QWORD *)*v80;
        }
        while (v80);
      }
      else
      {
        do
        {
          v81 = (_QWORD **)v58[2];
          v82 = *v81 == v58;
          v58 = v81;
        }
        while (!v82);
      }
      v58 = v81;
      if (v81 == v125)
      {
        v84 = (char *)v122.i64[1];
        v83 = (char *)v122.i64[0];
        goto LABEL_93;
      }
    }
  }
LABEL_117:
  memset(v114, 0, sizeof(v114));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v114, v136.i64[0], (_QWORD *)v136.i64[1], (v136.i64[1] - v136.i64[0]) >> 4);
  mlcore::CreateAndPredicate();
  mlcore::EntityQuery::podcastEpisodesQuery();
  v105 = v115;
  if (v115)
  {
    v106 = (unint64_t *)&v115->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v138 = (int64x2_t *)v114;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
  std::__tree<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::__map_value_compare<objc_class * {__strong},std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>,std::less<objc_class * {__strong}>,true>,std::allocator<std::__value_type<objc_class * {__strong},std::map<mlcore::ModelProperty<long long> *,std::vector<long long>,std::less<mlcore::ModelProperty<long long> *>,std::allocator<std::pair<mlcore::ModelProperty<long long> * const,std::vector<long long>>>>>>>::destroy(v133[0]);

  v138 = &v136;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);

}

void sub_193E5F7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *v63;
  void *v64;

  a41 = &a59;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);

  _Unwind_Resume(a1);
}

void ___ZL34_MPMLInitPropertyPodcastEpisodeMapv_block_invoke(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4, void *a5)
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  void *v14;
  void *__p[2];
  char v16;
  _QWORD v17[6];
  _QWORD v18[6];

  v8 = a2;
  v9 = a5;
  objc_msgSend(v8, "mediaLibrary");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "uniqueIdentifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = ___ZL34_MPMLInitPropertyPodcastEpisodeMapv_block_invoke_2;
  v18[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v18[4] = a3;
  v18[5] = a4;
  objc_msgSend(v9, "setLibraryIdentifiersWithDatabaseID:block:", v11, v18);

  v17[0] = v12;
  v17[1] = 3221225472;
  v17[2] = ___ZL34_MPMLInitPropertyPodcastEpisodeMapv_block_invoke_3;
  v17[3] = &__block_descriptor_48_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v17[4] = a3;
  v17[5] = a4;
  objc_msgSend(v9, "setUniversalStoreIdentifiersWithBlock:", v17);
  std::string::basic_string[abi:ne180100]<0>(__p, "externalGUID");
  v13 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v13)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v13 + 5), a4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setVendorID:", v14);

  if (v16 < 0)
    operator delete(__p[0]);

}

void sub_193E5FAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL34_MPMLInitPropertyPodcastEpisodeMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E5FBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL34_MPMLInitPropertyPodcastEpisodeMapv_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAdamID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E5FCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL33_MPMLInitPropertyPodcastAuthorMapv_block_invoke_5(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193E5FD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL33_MPMLInitPropertyPodcastAuthorMapv_block_invoke_4(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  _QWORD *v15;
  char v16;
  _BYTE v17[48];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(v13, "hasName");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)v13))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  mlcore::SortDescriptor::SortDescriptor();
  std::string::basic_string[abi:ne180100]<0>(__p, "nameOrder");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = a3;
  v16 = 0;
  v6 = (char *)operator new(0x30uLL);
  v7 = 0;
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 48;
  v8 = MEMORY[0x1E0D4AF48] + 16;
  do
  {
    v9 = &v6[v7];
    v10 = *(_QWORD *)&v17[v7 + 8];
    *(_QWORD *)v9 = v8;
    *((_QWORD *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = *(_DWORD *)&v17[v7 + 16];
    v7 += 24;
  }
  while (v7 != 48);
  a3[1] = v6 + 48;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);

}

void sub_193E5FF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void **a22)
{
  void *v22;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void ___ZL33_MPMLInitPropertyPodcastAuthorMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[6];
  _QWORD v14[6];

  v12 = a2;
  v8 = a5;
  objc_msgSend(v12, "mediaLibrary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "uniqueIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = ___ZL33_MPMLInitPropertyPodcastAuthorMapv_block_invoke_2;
  v14[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v14[4] = a3;
  v14[5] = a4;
  objc_msgSend(v8, "setLibraryIdentifiersWithDatabaseID:block:", v10, v14);

  v13[0] = v11;
  v13[1] = 3221225472;
  v13[2] = ___ZL33_MPMLInitPropertyPodcastAuthorMapv_block_invoke_3;
  v13[3] = &__block_descriptor_48_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v13[4] = a3;
  v13[5] = a4;
  objc_msgSend(v8, "setUniversalStoreIdentifiersWithBlock:", v13);

}

void sub_193E60060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void ___ZL33_MPMLInitPropertyPodcastAuthorMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E60134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL33_MPMLInitPropertyPodcastAuthorMapv_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAdamID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E60210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL27_MPMLInitPropertyPodcastMapv_block_invoke_8(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  void *v15;
  unsigned __int8 *v16;
  void *v17;
  unsigned __int8 *v18;
  void *v19;
  void *v20;
  void *v21;
  void *__p[2];
  char v24;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "longLongValue");

  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "mediaType");
  v10 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v10 + 5), a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "unsignedIntValue");

  if (v24 < 0)
    operator delete(__p[0]);
  v13 = MPMediaTypeForMLMediaType(v12);
  std::string::basic_string[abi:ne180100]<0>(__p, "availableArtworkToken");
  v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fetchableArtworkToken");
  v16 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v16)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v16 + 5), a4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fetchableArtworkSourceType");
  v18 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v18)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v18 + 5), a4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  objc_msgSend(v6, "mediaLibrary");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  _MPMLTranslatorCreateArtworkCatalogBlock(v9, v13, 0, 1, v15, v17, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

void sub_193E604AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v17;

  _Unwind_Resume(a1);
}

id ___ZL27_MPMLInitPropertyPodcastMapv_block_invoke_7(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "feedURL");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)v8;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (v9)
      goto LABEL_4;
LABEL_6:
    v10 = 0;
    goto LABEL_7;
  }
  if (!v8)
    goto LABEL_6;
LABEL_4:
  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v10;
}

void sub_193E60618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id ___ZL27_MPMLInitPropertyPodcastMapv_block_invoke_6(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "title");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193E606E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL27_MPMLInitPropertyPodcastMapv_block_invoke_5(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  _QWORD *v15;
  char v16;
  _BYTE v17[48];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(v13, "hasTitle");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)v13))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  mlcore::SortDescriptor::SortDescriptor();
  std::string::basic_string[abi:ne180100]<0>(__p, "titleOrder");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = a3;
  v16 = 0;
  v6 = (char *)operator new(0x30uLL);
  v7 = 0;
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 48;
  v8 = MEMORY[0x1E0D4AF48] + 16;
  do
  {
    v9 = &v6[v7];
    v10 = *(_QWORD *)&v17[v7 + 8];
    *(_QWORD *)v9 = v8;
    *((_QWORD *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = *(_DWORD *)&v17[v7 + 16];
    v7 += 24;
  }
  while (v7 != 48);
  a3[1] = v6 + 48;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);

}

void sub_193E60884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void **a22)
{
  void *v22;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void ___ZL27_MPMLInitPropertyPodcastMapv_block_invoke_4(void *a1@<X1>, int64x2_t *a2@<X8>)
{
  mlcore *v3;
  uint64_t v4;
  mlcore *v5;

  v5 = a1;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  a2->i64[0] = 0;
  v3 = (mlcore *)mlcore::AlbumPropertyPersistentID(v5);
  v4 = mlcore::AlbumPropertySyncID(v3);
  _MPMLInsertPredicatesForIdentifierSet(a2, v5, 0, 0, (uint64_t)v3, 0, 0, v4, 0, 0);

}

void sub_193E6094C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12)
{
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);

  _Unwind_Resume(a1);
}

void ___ZL27_MPMLInitPropertyPodcastMapv_block_invoke_3(uint64_t a1, void *a2, uint64_t *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  mlcore *v15;
  mlcore *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  void *v22;
  _QWORD v23[3];
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  int64x2_t v27;
  uint64_t v28;
  int64x2_t *v29;

  v4 = a2;
  v27 = 0uLL;
  v28 = 0;
  objc_msgSend(v4, "modelKind");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "identityKind");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[MPModelPodcastKind identityKind](MPModelPodcastKind, "identityKind");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "isEqual:", v7);

  if ((v8 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyPodcastMap()_block_invoke_3");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 3351, CFSTR("Must have podcast kind to generate podcast entity query."));

  }
  v9 = (std::__shared_weak_count *)a3[1];
  v25 = *a3;
  v26 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  objc_msgSend(v5, "applyToView:withContext:", &v25, v4);
  v12 = v26;
  if (v26)
  {
    v13 = (unint64_t *)&v26->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  objc_msgSend(v4, "allowedEntityIdentifiers");
  v15 = (mlcore *)objc_claimAutoreleasedReturnValue();
  v16 = (mlcore *)mlcore::AlbumPropertyPersistentID(v15);
  v17 = mlcore::AlbumPropertySyncID(v16);
  _MPMLInsertPredicatesForIdentifierSet(&v27, v15, 0, 0, (uint64_t)v16, 0, 0, v17, 0, 0);

  memset(v23, 0, sizeof(v23));
  std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v23, v27.i64[0], (_QWORD *)v27.i64[1], (v27.i64[1] - v27.i64[0]) >> 4);
  mlcore::CreateAndPredicate();
  mlcore::EntityQuery::podcastsQuery();
  v18 = v24;
  if (v24)
  {
    v19 = (unint64_t *)&v24->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v29 = (int64x2_t *)v23;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);

  v29 = &v27;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);

}

void sub_193E60BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 72) = &a19;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 72));

  _Unwind_Resume(a1);
}

void ___ZL27_MPMLInitPropertyPodcastMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v10 = a5;
  objc_msgSend(a2, "mediaLibrary");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "uniqueIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZL27_MPMLInitPropertyPodcastMapv_block_invoke_2;
  v11[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v11[4] = a3;
  v11[5] = a4;
  objc_msgSend(v10, "setLibraryIdentifiersWithDatabaseID:block:", v9, v11);

}

void sub_193E60CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZL27_MPMLInitPropertyPodcastMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E60DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL36_MPMLInitPropertyPlaybackPositionMapv_block_invoke_8(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "cloudKVSPlayCount");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193E60E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL36_MPMLInitPropertyPlaybackPositionMapv_block_invoke_7(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "cloudKVSHasBeenPlayed");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193E60F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ___ZL33_MPMLInitPropertyPlaylistEntryMapv_block_invoke_12(uint64_t a1, void *a2, uint64_t a3, int8x8_t *a4)
{
  id v6;
  ModelPropertyBase **v7;
  void *v8;
  ModelPropertyBase **v9;
  void *v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  void **v15;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v15 = __p;
  v7 = (ModelPropertyBase **)std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (unsigned __int8 *)__p, (__int128 **)&v15);
  MPMediaLibraryPropertyCacheValueForProperty(v7[5], a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "mediaType");
  v15 = __p;
  v9 = (ModelPropertyBase **)std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (unsigned __int8 *)__p, (__int128 **)&v15);
  MPMediaLibraryPropertyCacheValueForProperty(v9[5], a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14 < 0)
    operator delete(__p[0]);
  if (objc_msgSend(v8, "longLongValue"))
    v11 = (objc_msgSend(v10, "intValue") >> 11) & 1;
  else
    v11 = 0;

  return v11;
}

void sub_193E61060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_193E610A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x193E61094);
}

uint64_t ___ZL33_MPMLInitPropertyPlaylistEntryMapv_block_invoke_11(uint64_t a1, void *a2, uint64_t a3, int8x8_t *a4)
{
  id v6;
  ModelPropertyBase **v7;
  void *v8;
  ModelPropertyBase **v9;
  void *v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  void **v15;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v15 = __p;
  v7 = (ModelPropertyBase **)std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (unsigned __int8 *)__p, (__int128 **)&v15);
  MPMediaLibraryPropertyCacheValueForProperty(v7[5], a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "mediaType");
  v15 = __p;
  v9 = (ModelPropertyBase **)std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (unsigned __int8 *)__p, (__int128 **)&v15);
  MPMediaLibraryPropertyCacheValueForProperty(v9[5], a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14 < 0)
    operator delete(__p[0]);
  if (objc_msgSend(v8, "longLongValue"))
    v11 = (objc_msgSend(v10, "intValue") >> 9) & 1;
  else
    v11 = 0;

  return v11;
}

void sub_193E611C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_193E61200(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x193E611F4);
}

BOOL ___ZL33_MPMLInitPropertyPlaylistEntryMapv_block_invoke_10(uint64_t a1, void *a2, uint64_t a3, int8x8_t *a4)
{
  id v6;
  ModelPropertyBase **v7;
  void *v8;
  ModelPropertyBase **v9;
  void *v10;
  _BOOL8 v11;
  void *__p[2];
  char v14;
  void **v15;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v15 = __p;
  v7 = (ModelPropertyBase **)std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (unsigned __int8 *)__p, (__int128 **)&v15);
  MPMediaLibraryPropertyCacheValueForProperty(v7[5], a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "mediaType");
  v15 = __p;
  v9 = (ModelPropertyBase **)std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (unsigned __int8 *)__p, (__int128 **)&v15);
  MPMediaLibraryPropertyCacheValueForProperty(v9[5], a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14 < 0)
    operator delete(__p[0]);
  if (objc_msgSend(v8, "longLongValue"))
    v11 = (objc_msgSend(v10, "intValue") & 0x408) != 0;
  else
    v11 = 0;

  return v11;
}

void sub_193E61328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_193E61368(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x193E6135CLL);
}

id ___ZL33_MPMLInitPropertyPlaylistEntryMapv_block_invoke_9(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  unsigned __int8 *v9;
  void *v10;
  id v11;
  void *v12;
  void *__p[2];
  char v15;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "position");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "positionUUID");
  v9 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v9 + 5), a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15 < 0)
    operator delete(__p[0]);
  if (objc_msgSend(v10, "length"))
  {
    v11 = v10;
  }
  else
  {
    objc_msgSend(v8, "stringValue");
    v11 = (id)objc_claimAutoreleasedReturnValue();
  }
  v12 = v11;

  return v12;
}

void sub_193E61494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_193E614D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x193E614C8);
}

id ___ZL33_MPMLInitPropertyPlaylistEntryMapv_block_invoke_8(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  unsigned __int8 *v9;
  void *v10;
  id v11;
  void *v12;
  void *__p[2];
  char v15;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "persistentID");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "UUID");
  v9 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v9 + 5), a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15 < 0)
    operator delete(__p[0]);
  if (objc_msgSend(v10, "length"))
  {
    v11 = v10;
  }
  else
  {
    objc_msgSend(v8, "stringValue");
    v11 = (id)objc_claimAutoreleasedReturnValue();
  }
  v12 = v11;

  return v12;
}

void sub_193E61600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_193E61640(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x193E61634);
}

id ___ZL33_MPMLInitPropertyPlaylistEntryMapv_block_invoke_7(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "position");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193E616EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ___ZL33_MPMLInitPropertyPlaylistEntryMapv_block_invoke_6()
{
  return 0;
}

void ___ZL33_MPMLInitPropertyPlaylistEntryMapv_block_invoke_5(void *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  BOOL v20;
  id v21;
  void *v22;
  mlcore *v23;
  mlcore *v24;
  mlcore *v25;
  mlcore *v26;
  mlcore *v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *end;
  unint64_t *p_size;
  unint64_t v32;
  void *v33;
  mlcore *v34;
  mlcore *IsSmart;
  mlcore *IsDynamic;
  uint64_t IsSourceRemote;
  _QWORD *v38;
  void (***v39)(_QWORD, uint64_t *, uint64_t *, _BYTE *);
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t jj;
  void *v50;
  void *v51;
  BOOL v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  std::string::size_type size;
  std::string::size_type v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  mlcore *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t *v72;
  unint64_t v73;
  mlcore *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  std::vector<std::string>::pointer v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _BOOL4 v83;
  unint64_t *v84;
  unint64_t v85;
  mlcore *v86;
  uint64_t v87;
  ModelPropertyBase *v88;
  mlcore *v89;
  uint64_t v90;
  ModelPropertyBase *v91;
  mlcore *v92;
  uint64_t v93;
  ModelPropertyBase *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t j;
  void *v107;
  void *v108;
  BOOL v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  std::__shared_weak_count *v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  mlcore *v124;
  _OWORD *v125;
  char v126;
  uint64_t v127;
  char v128;
  __int128 v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t k;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t m;
  void *v143;
  void *v144;
  BOOL v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  std::__shared_weak_count *v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  BOOL v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  void *v160;
  BOOL v161;
  id v162;
  std::vector<std::string>::pointer v163;
  __int128 v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  std::string *v169;
  __int128 v170;
  std::string *v171;
  mlcore *v172;
  mlcore *v173;
  _OWORD *v174;
  char v175;
  uint64_t v176;
  char v177;
  __int128 v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t n;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  _OWORD *v190;
  char v191;
  uint64_t v192;
  char v193;
  __int128 v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t ii;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  id v212;
  id v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  _OWORD *v219;
  _OWORD *v220;
  _OWORD *v221;
  std::__shared_weak_count *v222;
  __int128 v223;
  __int128 v224;
  _OWORD *v225;
  _OWORD *v226;
  _OWORD *v227;
  std::string *v228;
  std::string *v229;
  void *v230[2];
  std::string::size_type v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  _OWORD *v236;
  _OWORD *v237;
  _OWORD *v238;
  std::__shared_weak_count *v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  void *p_v;
  std::__shared_weak_count *v245;
  std::__shared_weak_count *v246;
  std::string v247;
  void *v248;
  std::__shared_weak_count *v249;
  void *v250;
  std::__shared_weak_count *v251;
  void *v252;
  void *v253;
  _QWORD *v254;
  _QWORD v255[3];
  void *v256;
  std::__shared_weak_count *v257;
  id v258;
  std::string __p;
  void (***v260)(_QWORD, uint64_t *, uint64_t *, _BYTE *);
  std::__shared_weak_count *v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  _BYTE v266[128];
  _BYTE v267[128];
  std::vector<std::string> dsema;
  _BYTE v269[128];
  _BYTE v270[24];
  _BYTE *v271;
  id v272;
  _BYTE v273[128];
  std::__split_buffer<std::string> __v;
  uint64_t v275;

  v275 = *MEMORY[0x1E0C80C00];
  v262 = 0u;
  v263 = 0u;
  v264 = 0u;
  v265 = 0u;
  v214 = a1;
  objc_msgSend(v214, "scopedContainers");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "reverseObjectEnumerator");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v262, v273, 16);
  if (!v6)
    goto LABEL_9;
  v7 = *(_QWORD *)v263;
  while (2)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)v263 != v7)
        objc_enumerationMutation(v5);
      v9 = *(void **)(*((_QWORD *)&v262 + 1) + 8 * i);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v212 = v9;

        if (!v212)
          goto LABEL_39;
        objc_msgSend(v214, "modelKind");
        v211 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v211, "identityKind");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        +[MPModelPlaylistEntryKind identityKind](MPModelPlaylistEntryKind, "identityKind");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v10, "isEqual:", v11);

        if ((v12 & 1) == 0)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v209 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyPlaylistEntryMap()_block_invoke_5");
          v210 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v209, "handleFailureInFunction:file:lineNumber:description:", v210, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 2192, CFSTR("Must have PlaylistEntry kind to generate PlaylistEntry entity query."));

        }
        v13 = (std::__shared_weak_count *)a2[1];
        v260 = (void (***)(_QWORD, uint64_t *, uint64_t *, _BYTE *))*a2;
        v261 = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }
        objc_msgSend(v211, "applyToView:withContext:", &v260, v214);
        v16 = v261;
        if (v261)
        {
          v17 = (unint64_t *)&v261->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        objc_msgSend(v214, "filterText");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = objc_msgSend(v19, "length") == 0;

        if (!v20)
        {
          objc_msgSend(v214, "filterText");
          v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          std::string::basic_string[abi:ne180100]<0>(&__v, (char *)objc_msgSend(v21, "UTF8String"));
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&__v.__first_;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
          HIBYTE(__v.__end_) = 0;
          LOBYTE(__v.__first_) = 0;

        }
        objc_msgSend(v212, "identifiers");
        v258 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v258, "library");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "persistentID");

        std::allocate_shared[abi:ne180100]<mlcore::Playlist,std::allocator<mlcore::Playlist>,long long &,void>((uint64_t *)&v256);
        if (!v258)
        {
          v83 = 0;
          goto LABEL_101;
        }
        +[MPMediaLibrary logDatabaseAccess](MPMediaLibrary, "logDatabaseAccess");
        memset(&__v, 0, 24);
        v272 = v258;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v272, 1);
        v23 = (mlcore *)objc_claimAutoreleasedReturnValue();
        v24 = (mlcore *)mlcore::PlaylistPropertyPersistentID(v23);
        v25 = (mlcore *)mlcore::PlaylistPropertyStoreCloudID(v24);
        v26 = (mlcore *)mlcore::PlaylistPropertyCloudGlobalID(v25);
        v27 = (mlcore *)mlcore::PlaylistPropertySyncID(v26);
        v28 = mlcore::PlaylistPropertyCloudUniversalLibraryID(v27);
        _MPMLInsertPredicatesForIdentifierSet((int64x2_t *)&__v, v23, 0, 0, (uint64_t)v24, (uint64_t)v25, (uint64_t)v26, (uint64_t)v27, v28, 0);

        v29 = MEMORY[0x194039FE8]();
        memset(v255, 0, sizeof(v255));
        std::vector<std::shared_ptr<mlcore::Predicate>>::__init_with_size[abi:ne180100]<std::shared_ptr<mlcore::Predicate>*,std::shared_ptr<mlcore::Predicate>*>(v255, __v.__first_->__r_.__value_.__r.__words, __v.__begin_->__r_.__value_.__r.__words, ((char *)__v.__begin_ - (char *)__v.__first_) >> 4);
        mlcore::CreateAndPredicate();
        std::allocate_shared[abi:ne180100]<mlcore::EntityQuery,std::allocator<mlcore::EntityQuery>,mlcore::EntityClass *,std::shared_ptr<mlcore::Predicate>,void>(&p_v, v29, (__int128 *)&dsema);
        end = (std::__shared_weak_count *)dsema.__end_;
        if (dsema.__end_)
        {
          p_size = &dsema.__end_->__r_.__value_.__l.__size_;
          do
            v32 = __ldaxr(p_size);
          while (__stlxr(v32 - 1, p_size));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
            std::__shared_weak_count::__release_weak(end);
          }
        }
        v230[0] = v255;
        std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)v230);
        v33 = p_v;
        IsSmart = (mlcore *)mlcore::PlaylistPropertyIsSmart(v34);
        IsDynamic = (mlcore *)mlcore::PlaylistPropertySmartIsDynamic(IsSmart);
        IsSourceRemote = mlcore::PlaylistPropertyIsSourceRemote(IsDynamic);
        v253 = 0;
        v252 = 0;
        v254 = 0;
        v38 = operator new(0x18uLL);
        v254 = v38 + 3;
        *v38 = IsSmart;
        v38[1] = IsDynamic;
        v38[2] = IsSourceRemote;
        v252 = v38;
        v253 = v38 + 3;
        mlcore::PropertiesQuery::setPropertiesToFetch();
        if (v252)
        {
          v253 = v252;
          operator delete(v252);
        }
        dsema.__begin_ = (std::vector<std::string>::pointer)dispatch_semaphore_create(0);
        v39 = (void (***)(_QWORD, uint64_t *, uint64_t *, _BYTE *))*a2;
        v40 = v245;
        v250 = v33;
        v251 = v245;
        if (v245)
        {
          v41 = (unint64_t *)&v245->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        v271 = 0;
        v43 = operator new(0x20uLL);
        *v43 = &off_1E314A130;
        v43[1] = &v258;
        v43[2] = &v256;
        v43[3] = &dsema;
        v271 = v43;
        mlcore::LibraryView::performQuery<mlcore::EntityQuery>(v39, (uint64_t)v33, v40, (uint64_t)v270);
        v44 = v271;
        if (v271 == v270)
        {
          v45 = 4;
          v44 = v270;
        }
        else
        {
          if (!v271)
            goto LABEL_85;
          v45 = 5;
        }
        (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_85:
        if (v40)
        {
          v84 = (unint64_t *)&v40->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        v86 = (mlcore *)dispatch_semaphore_wait((dispatch_semaphore_t)dsema.__begin_, 0xFFFFFFFFFFFFFFFFLL);
        v87 = (uint64_t)v256;
        v88 = (ModelPropertyBase *)mlcore::PlaylistPropertySmartIsDynamic(v86);
        v89 = (mlcore *)mlcore::Entity::valueForProperty<int>(v87, v88);
        if ((_DWORD)v89)
        {
          v83 = 1;
        }
        else
        {
          v90 = (uint64_t)v256;
          v91 = (ModelPropertyBase *)mlcore::PlaylistPropertyIsSmart(v89);
          v92 = (mlcore *)mlcore::Entity::valueForProperty<int>(v90, v91);
          if ((_DWORD)v92)
          {
            v93 = (uint64_t)v256;
            v94 = (ModelPropertyBase *)mlcore::PlaylistPropertyIsSourceRemote(v92);
            v83 = mlcore::Entity::valueForProperty<int>(v93, v94) == 2;
          }
          else
          {
            v83 = 0;
          }
        }

        v95 = v245;
        if (v245)
        {
          v96 = (unint64_t *)&v245->__shared_owners_;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        p_v = &__v;
        std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_v);
LABEL_101:
        v248 = v256;
        v249 = v257;
        if (v257)
        {
          v98 = (unint64_t *)&v257->__shared_owners_;
          do
            v99 = __ldxr(v98);
          while (__stxr(v99 + 1, v98));
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v247, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          v247 = __p;
        mlcore::EntityQuery::playlistItemsQuery();
        if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v247.__r_.__value_.__l.__data_);
        v100 = v249;
        if (!v249)
          goto LABEL_113;
        v101 = (unint64_t *)&v249->__shared_owners_;
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
          if (v83)
            goto LABEL_114;
        }
        else
        {
LABEL_113:
          if (v83)
          {
LABEL_114:
            p_v = 0;
            v245 = 0;
            v246 = 0;
            v240 = 0u;
            v241 = 0u;
            v242 = 0u;
            v243 = 0u;
            objc_msgSend(v214, "allowedEntityIdentifiers");
            v103 = (void *)objc_claimAutoreleasedReturnValue();
            v104 = objc_msgSend(v103, "countByEnumeratingWithState:objects:count:", &v240, v269, 16);
            if (v104)
            {
              v105 = *(_QWORD *)v241;
              do
              {
                for (j = 0; j != v104; ++j)
                {
                  if (*(_QWORD *)v241 != v105)
                    objc_enumerationMutation(v103);
                  v107 = *(void **)(*((_QWORD *)&v240 + 1) + 8 * j);
                  objc_msgSend(v107, "library");
                  v108 = (void *)objc_claimAutoreleasedReturnValue();
                  v109 = objc_msgSend(v108, "persistentID") == 0;

                  if (!v109)
                  {
                    objc_msgSend(v107, "library");
                    v110 = (void *)objc_claimAutoreleasedReturnValue();
                    v111 = objc_msgSend(v110, "persistentID");

                    v112 = v111 & 0x7FFFFFFFFFFFFFFFLL;
                    v113 = &v245->__vftable;
                    if (v245 >= v246)
                    {
                      v115 = p_v;
                      v116 = ((char *)v245 - (_BYTE *)p_v) >> 3;
                      v117 = v116 + 1;
                      if ((unint64_t)(v116 + 1) >> 61)
                        std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
                      v118 = (char *)v246 - (_BYTE *)p_v;
                      if (((char *)v246 - (_BYTE *)p_v) >> 2 > v117)
                        v117 = v118 >> 2;
                      if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
                        v119 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v119 = v117;
                      if (v119)
                      {
                        v119 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v119);
                        v115 = p_v;
                        v113 = &v245->__vftable;
                      }
                      else
                      {
                        v120 = 0;
                      }
                      v121 = (uint64_t *)(v119 + 8 * v116);
                      *v121 = v112;
                      v114 = (std::__shared_weak_count *)(v121 + 1);
                      while (v113 != v115)
                      {
                        v122 = *--v113;
                        *--v121 = v122;
                      }
                      p_v = v121;
                      v245 = v114;
                      v246 = (std::__shared_weak_count *)(v119 + 8 * v120);
                      if (v115)
                        operator delete(v115);
                    }
                    else
                    {
                      v245->__vftable = (std::__shared_weak_count_vtbl *)v112;
                      v114 = (std::__shared_weak_count *)(v113 + 1);
                    }
                    v245 = v114;
                  }
                }
                v104 = objc_msgSend(v103, "countByEnumeratingWithState:objects:count:", &v240, v269, 16);
              }
              while (v104);
            }

            v123 = v245;
            if (v245 == p_v)
              goto LABEL_238;
            v124 = (mlcore *)mlcore::Query::predicate(*(mlcore::Query **)a3);
            mlcore::ItemPropertyPersistentID(v124);
            std::allocate_shared[abi:ne180100]<mlcore::InPredicate<long long>,std::allocator<mlcore::InPredicate<long long>>,mlcore::ModelProperty<long long> *&,std::vector<long long> const&,void>((uint64_t *)v230);
            *(_OWORD *)&__v.__end_ = *(_OWORD *)v230;
            v230[0] = 0;
            v230[1] = 0;
            v237 = 0;
            v238 = 0;
            v236 = 0;
            dsema.__begin_ = (std::vector<std::string>::pointer)&v236;
            LOBYTE(dsema.__end_) = 0;
            v125 = operator new(0x20uLL);
            v126 = 0;
            v127 = 0;
            v236 = v125;
            v237 = v125;
            v238 = v125 + 2;
            do
            {
              v128 = v126;
              v129 = *((_OWORD *)&__v.__first_ + v127);
              *v125 = v129;
              if (*((_QWORD *)&v129 + 1))
              {
                v130 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
                do
                  v131 = __ldxr(v130);
                while (__stxr(v131 + 1, v130));
              }
              ++v125;
              v126 = 1;
              v127 = 1;
            }
            while ((v128 & 1) == 0);
            v237 = v125;
            mlcore::CreateAndPredicate();
            mlcore::Query::setPredicate();
            v132 = v239;
            if (v239)
            {
              v133 = (unint64_t *)&v239->__shared_owners_;
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
            dsema.__begin_ = (std::vector<std::string>::pointer)&v236;
            std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&dsema);
            for (k = 16; k != -16; k -= 16)
              std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&__v + k);
            v136 = (std::__shared_weak_count *)v230[1];
            if (v230[1])
            {
              v137 = (unint64_t *)((char *)v230[1] + 8);
              do
                v138 = __ldaxr(v137);
              while (__stlxr(v138 - 1, v137));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                std::__shared_weak_count::__release_weak(v136);
              }
            }
LABEL_237:
            v123 = (std::__shared_weak_count *)p_v;
LABEL_238:
            if (v123)
            {
              v245 = v123;
              operator delete(v123);
            }
            v204 = v257;
            if (v257)
            {
              v205 = (unint64_t *)&v257->__shared_owners_;
              do
                v206 = __ldaxr(v205);
              while (__stlxr(v206 - 1, v205));
              if (!v206)
              {
                ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                std::__shared_weak_count::__release_weak(v204);
              }
            }

            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);

            goto LABEL_248;
          }
        }
        p_v = 0;
        v245 = 0;
        v246 = 0;
        memset(&dsema, 0, sizeof(dsema));
        v232 = 0u;
        v233 = 0u;
        v234 = 0u;
        v235 = 0u;
        objc_msgSend(v214, "allowedEntityIdentifiers");
        v139 = (void *)objc_claimAutoreleasedReturnValue();
        v140 = objc_msgSend(v139, "countByEnumeratingWithState:objects:count:", &v232, v267, 16);
        if (v140)
        {
          v141 = *(_QWORD *)v233;
          do
          {
            for (m = 0; m != v140; ++m)
            {
              if (*(_QWORD *)v233 != v141)
                objc_enumerationMutation(v139);
              v143 = *(void **)(*((_QWORD *)&v232 + 1) + 8 * m);
              objc_msgSend(v143, "library");
              v144 = (void *)objc_claimAutoreleasedReturnValue();
              v145 = objc_msgSend(v144, "persistentID") == 0;

              if (!v145)
              {
                objc_msgSend(v143, "library");
                v146 = (void *)objc_claimAutoreleasedReturnValue();
                v147 = objc_msgSend(v146, "persistentID");
                v148 = v147;
                v149 = &v245->__vftable;
                if (v245 >= v246)
                {
                  v151 = p_v;
                  v152 = ((char *)v245 - (_BYTE *)p_v) >> 3;
                  v153 = v152 + 1;
                  if ((unint64_t)(v152 + 1) >> 61)
                    std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
                  v154 = (char *)v246 - (_BYTE *)p_v;
                  if (((char *)v246 - (_BYTE *)p_v) >> 2 > v153)
                    v153 = v154 >> 2;
                  v155 = (unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8;
                  v156 = 0x1FFFFFFFFFFFFFFFLL;
                  if (!v155)
                    v156 = v153;
                  if (v156)
                  {
                    v156 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v156);
                    v151 = p_v;
                    v149 = &v245->__vftable;
                  }
                  else
                  {
                    v157 = 0;
                  }
                  v158 = (uint64_t *)(v156 + 8 * v152);
                  *v158 = v148;
                  v150 = (std::__shared_weak_count *)(v158 + 1);
                  while (v149 != v151)
                  {
                    v159 = *--v149;
                    *--v158 = v159;
                  }
                  p_v = v158;
                  v245 = v150;
                  v246 = (std::__shared_weak_count *)(v156 + 8 * v157);
                  if (v151)
                    operator delete(v151);
                }
                else
                {
                  v245->__vftable = (std::__shared_weak_count_vtbl *)v147;
                  v150 = (std::__shared_weak_count *)(v149 + 1);
                }
                v245 = v150;

              }
              objc_msgSend(v143, "containerUniqueID");
              v160 = (void *)objc_claimAutoreleasedReturnValue();
              v161 = objc_msgSend(v160, "length") == 0;

              if (!v161)
              {
                objc_msgSend(v143, "containerUniqueID");
                v162 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                std::string::basic_string[abi:ne180100]<0>(v230, (char *)objc_msgSend(v162, "UTF8String"));
                v163 = dsema.__end_;
                if (dsema.__end_ >= dsema.__end_cap_.__value_)
                {
                  v165 = 0xAAAAAAAAAAAAAAABLL * (((char *)dsema.__end_ - (char *)dsema.__begin_) >> 3);
                  v166 = v165 + 1;
                  if (v165 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * (((char *)dsema.__end_cap_.__value_ - (char *)dsema.__begin_) >> 3) > v166)
                    v166 = 0x5555555555555556 * (((char *)dsema.__end_cap_.__value_ - (char *)dsema.__begin_) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)dsema.__end_cap_.__value_ - (char *)dsema.__begin_) >> 3) >= 0x555555555555555)
                    v167 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v167 = v166;
                  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&dsema.__end_cap_;
                  if (v167)
                    v167 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v167);
                  else
                    v168 = 0;
                  v169 = (std::string *)(v167 + 24 * v165);
                  __v.__first_ = (std::__split_buffer<std::string>::pointer)v167;
                  __v.__begin_ = v169;
                  __v.__end_cap_.__value_ = (std::string *)(v167 + 24 * v168);
                  v170 = *(_OWORD *)v230;
                  v169->__r_.__value_.__r.__words[2] = v231;
                  *(_OWORD *)&v169->__r_.__value_.__l.__data_ = v170;
                  v230[1] = 0;
                  v231 = 0;
                  v230[0] = 0;
                  __v.__end_ = v169 + 1;
                  std::vector<std::string>::__swap_out_circular_buffer(&dsema, &__v);
                  v171 = dsema.__end_;
                  std::__split_buffer<std::string>::~__split_buffer(&__v);
                  dsema.__end_ = v171;
                  if (SHIBYTE(v231) < 0)
                    operator delete(v230[0]);
                }
                else
                {
                  v164 = *(_OWORD *)v230;
                  dsema.__end_->__r_.__value_.__r.__words[2] = v231;
                  *(_OWORD *)&v163->__r_.__value_.__l.__data_ = v164;
                  v230[1] = 0;
                  v231 = 0;
                  v230[0] = 0;
                  dsema.__end_ = v163 + 1;
                }

              }
            }
            v140 = objc_msgSend(v139, "countByEnumeratingWithState:objects:count:", &v232, v267, 16);
          }
          while (v140);
        }

        if (v245 != p_v || dsema.__end_ != dsema.__begin_)
        {
          mlcore::PlaylistItemPropertyPersistentID(v172);
          v173 = (mlcore *)std::allocate_shared[abi:ne180100]<mlcore::InPredicate<long long>,std::allocator<mlcore::InPredicate<long long>>,mlcore::ModelProperty<long long> *&,std::vector<long long> const&,void>((uint64_t *)&v224);
          *(_OWORD *)&__v.__first_ = v224;
          v224 = 0uLL;
          mlcore::PlaylistItemPropertyOccurrenceID(v173);
          std::allocate_shared[abi:ne180100]<mlcore::InPredicate<std::string>,std::allocator<mlcore::InPredicate<std::string>>,mlcore::ModelProperty<std::string> *&,std::vector<std::string> const&,void>((uint64_t *)&v223);
          *(_OWORD *)&__v.__end_ = v223;
          v223 = 0uLL;
          v226 = 0;
          v227 = 0;
          v225 = 0;
          v230[0] = &v225;
          LOBYTE(v230[1]) = 0;
          v174 = operator new(0x20uLL);
          v175 = 0;
          v176 = 0;
          v225 = v174;
          v226 = v174;
          v227 = v174 + 2;
          do
          {
            v177 = v175;
            v178 = *((_OWORD *)&__v.__first_ + v176);
            *v174 = v178;
            if (*((_QWORD *)&v178 + 1))
            {
              v179 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
              do
                v180 = __ldxr(v179);
              while (__stxr(v180 + 1, v179));
            }
            ++v174;
            v175 = 1;
            v176 = 1;
          }
          while ((v177 & 1) == 0);
          v226 = v174;
          mlcore::CreateOrPredicate();
          v230[0] = &v225;
          std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)v230);
          for (n = 16; n != -16; n -= 16)
            std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&__v + n);
          v182 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
          if (*((_QWORD *)&v223 + 1))
          {
            v183 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
            do
              v184 = __ldaxr(v183);
            while (__stlxr(v184 - 1, v183));
            if (!v184)
            {
              ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
              std::__shared_weak_count::__release_weak(v182);
            }
          }
          v185 = (std::__shared_weak_count *)*((_QWORD *)&v224 + 1);
          if (*((_QWORD *)&v224 + 1))
          {
            v186 = (unint64_t *)(*((_QWORD *)&v224 + 1) + 8);
            do
              v187 = __ldaxr(v186);
            while (__stlxr(v187 - 1, v186));
            if (!v187)
            {
              ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
              std::__shared_weak_count::__release_weak(v185);
            }
          }
          mlcore::Query::predicate(*(mlcore::Query **)a3);
          __v.__end_ = v228;
          __v.__end_cap_.__value_ = v229;
          if (v229)
          {
            v188 = &v229->__r_.__value_.__l.__size_;
            do
              v189 = __ldxr(v188);
            while (__stxr(v189 + 1, v188));
          }
          v219 = 0;
          v220 = 0;
          v221 = 0;
          v230[0] = &v219;
          LOBYTE(v230[1]) = 0;
          v190 = operator new(0x20uLL);
          v191 = 0;
          v192 = 0;
          v219 = v190;
          v220 = v190;
          v221 = v190 + 2;
          do
          {
            v193 = v191;
            v194 = *((_OWORD *)&__v.__first_ + v192);
            *v190 = v194;
            if (*((_QWORD *)&v194 + 1))
            {
              v195 = (unint64_t *)(*((_QWORD *)&v194 + 1) + 8);
              do
                v196 = __ldxr(v195);
              while (__stxr(v196 + 1, v195));
            }
            ++v190;
            v191 = 1;
            v192 = 1;
          }
          while ((v193 & 1) == 0);
          v220 = v190;
          mlcore::CreateAndPredicate();
          mlcore::Query::setPredicate();
          v197 = v222;
          if (v222)
          {
            v198 = (unint64_t *)&v222->__shared_owners_;
            do
              v199 = __ldaxr(v198);
            while (__stlxr(v199 - 1, v198));
            if (!v199)
            {
              ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
              std::__shared_weak_count::__release_weak(v197);
            }
          }
          v230[0] = &v219;
          std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)v230);
          for (ii = 16; ii != -16; ii -= 16)
            std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100]((uint64_t)&__v + ii);
          v201 = (std::__shared_weak_count *)v229;
          if (v229)
          {
            v202 = &v229->__r_.__value_.__l.__size_;
            do
              v203 = __ldaxr(v202);
            while (__stlxr(v203 - 1, v202));
            if (!v203)
            {
              ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
              std::__shared_weak_count::__release_weak(v201);
            }
          }
        }
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&dsema;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        goto LABEL_237;
      }
    }
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v262, v273, 16);
    if (v6)
      continue;
    break;
  }
LABEL_9:

LABEL_39:
  memset(&__v, 0, 24);
  memset(&__p, 0, sizeof(__p));
  v215 = 0u;
  v216 = 0u;
  v217 = 0u;
  v218 = 0u;
  objc_msgSend(v214, "allowedEntityIdentifiers");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v215, v266, 16);
  if (v47)
  {
    v48 = *(_QWORD *)v216;
    do
    {
      for (jj = 0; jj != v47; ++jj)
      {
        if (*(_QWORD *)v216 != v48)
          objc_enumerationMutation(v46);
        v50 = *(void **)(*((_QWORD *)&v215 + 1) + 8 * jj);
        objc_msgSend(v50, "library");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        v52 = objc_msgSend(v51, "containedPersistentID") == 0;

        if (!v52)
        {
          objc_msgSend(v50, "library");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          v54 = objc_msgSend(v53, "persistentID");
          v55 = v54;
          size = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v58 = (void *)__p.__r_.__value_.__r.__words[0];
            v59 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
            v60 = v59 + 1;
            if ((unint64_t)(v59 + 1) >> 61)
              std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
            v61 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
            if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2 > v60)
              v60 = v61 >> 2;
            if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
              v62 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v62 = v60;
            if (v62)
            {
              v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::ModelPropertyBase *>>(v62);
              size = __p.__r_.__value_.__l.__size_;
              v58 = (void *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              v63 = 0;
            }
            v64 = (uint64_t *)(v62 + 8 * v59);
            *v64 = v55;
            v57 = (std::string::size_type)(v64 + 1);
            while ((void *)size != v58)
            {
              v65 = *(_QWORD *)(size - 8);
              size -= 8;
              *--v64 = v65;
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
            __p.__r_.__value_.__l.__size_ = v57;
            __p.__r_.__value_.__r.__words[2] = v62 + 8 * v63;
            if (v58)
              operator delete(v58);
          }
          else
          {
            *(_QWORD *)__p.__r_.__value_.__l.__size_ = v54;
            v57 = size + 8;
          }
          __p.__r_.__value_.__l.__size_ = v57;

        }
      }
      v47 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v215, v266, 16);
    }
    while (v47);
  }

  if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v207 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyPlaylistEntryMap()_block_invoke_5");
    v208 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v207, "handleFailureInFunction:file:lineNumber:description:", v208, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 2271, CFSTR("Attempted to query playlist entries without scoping to a playlist or allowed identifiers"));

  }
  mlcore::PlaylistItemPropertyPersistentID(v66);
  v67 = std::allocate_shared[abi:ne180100]<mlcore::InPredicate<long long>,std::allocator<mlcore::InPredicate<long long>>,mlcore::ModelProperty<long long> *&,std::vector<long long> const&,void>((uint64_t *)&v256);
  v68 = MEMORY[0x194038ED8](v67);
  v69 = operator new(0x98uLL);
  v70 = v69;
  v69[1] = 0;
  v69[2] = 0;
  *v69 = &off_1E314A608;
  v71 = v69 + 3;
  p_v = v256;
  v245 = v257;
  if (v257)
  {
    v72 = (unint64_t *)&v257->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = (mlcore *)MEMORY[0x194038E78](v69 + 3, v68, &p_v);
  v75 = v245;
  if (v245)
  {
    v76 = (unint64_t *)&v245->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  *(_QWORD *)a3 = v71;
  *(_QWORD *)(a3 + 8) = v70;
  mlcore::PlaylistItemPropertyPosition(v74);
  mlcore::SortDescriptor::SortDescriptor();
  p_v = 0;
  v245 = 0;
  v246 = 0;
  v230[0] = &p_v;
  LOBYTE(v230[1]) = 0;
  v78 = operator new(0x18uLL);
  v246 = (std::__shared_weak_count *)(v78 + 3);
  v79 = dsema.__end_;
  *v78 = MEMORY[0x1E0D4AF48] + 16;
  v78[1] = v79;
  *((_DWORD *)v78 + 4) = dsema.__end_cap_.__value_;
  p_v = v78;
  v245 = (std::__shared_weak_count *)(v78 + 3);
  mlcore::PropertiesQuery::setSortDescriptors();
  v230[0] = &p_v;
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)v230);
  v80 = v257;
  if (v257)
  {
    v81 = (unint64_t *)&v257->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_248:

}

void sub_193E62AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZL33_MPMLInitPropertyPlaylistEntryMapvEUb_E3__5NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEED0Ev()
{
  JUMPOUT(0x19403A1A4);
}

__n128 _ZNKSt3__110__function6__funcIZZL33_MPMLInitPropertyPlaylistEntryMapvEUb_E3__5NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E314A130;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZL33_MPMLInitPropertyPlaylistEntryMapvEUb_E3__5NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEE7__cloneEPNS0_6__baseIS9_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E314A130;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZL33_MPMLInitPropertyPlaylistEntryMapvEUb_E3__5NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEEclEOS8_(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  mlcore::EntityQueryResult *v4;
  void *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *lpsrc;
  std::__shared_weak_count *v18;
  uint8_t buf[24];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *(mlcore::EntityQueryResult **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (mlcore::EntityQueryResult::entityCount(v4))
  {
    mlcore::EntityQueryResult::entityAtIndex(v4);
    if (lpsrc && (v5 = __dynamic_cast(lpsrc, MEMORY[0x1E0D4AF20], MEMORY[0x1E0D4AF28], 0)) != 0)
    {
      *(_QWORD *)buf = v5;
      *(_QWORD *)&buf[8] = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
    }
    else
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
    }
    std::shared_ptr<mlcore::LocalizedSearchScope>::operator=[abi:ne180100](*(_QWORD *)(a1 + 16), (__int128 *)buf);
    v8 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v18)
    {
      v11 = (unint64_t *)&v18->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)())v18->__on_zero_shared)();
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    v13 = os_log_create("com.apple.amp.mediaplayer", "Library");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = **(_QWORD **)(a1 + 8);
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl(&dword_193B9B000, v13, OS_LOG_TYPE_ERROR, "Did not find playlist for identifiers: %{public}@", buf, 0xCu);
    }

  }
  dispatch_semaphore_signal(**(dispatch_semaphore_t **)(a1 + 24));
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_193E631F0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZZL33_MPMLInitPropertyPlaylistEntryMapvEUb_E3__5NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZL33_MPMLInitPropertyPlaylistEntryMapvEUb_E3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZL33_MPMLInitPropertyPlaylistEntryMapvEUb_E3__5NS_9allocatorIS2_EEFvNS_10shared_ptrIN6mlcore17EntityQueryResultEEEEE11target_typeEv()
{
  return &_ZTIZZL33_MPMLInitPropertyPlaylistEntryMapvEUb_E3__5;
}

void ___ZL33_MPMLInitPropertyPlaylistEntryMapv_block_invoke(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4, void *a5)
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  unsigned __int8 *v14;
  void *v15;
  unsigned __int8 *v16;
  void *v17;
  unsigned __int8 *v18;
  void *v19;
  uint64_t quot;
  uint64_t v21;
  char *v22;
  lldiv_t v23;
  uint64_t v24;
  const UInt8 *v25;
  __CFString *v26;
  void *__p[2];
  char v28;
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  void *v32[2];
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a5;
  objc_msgSend(v8, "mediaLibrary");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "uniqueIdentifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = MEMORY[0x1E0C809B0];
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = ___ZL33_MPMLInitPropertyPlaylistEntryMapv_block_invoke_2;
  v31[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v31[4] = a3;
  v31[5] = a4;
  objc_msgSend(v9, "setLibraryIdentifiersWithDatabaseID:block:", v11, v31);

  objc_msgSend(v8, "personID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v13, "length"))
  {
    v30[0] = v12;
    v30[1] = 3221225472;
    v30[2] = ___ZL33_MPMLInitPropertyPlaylistEntryMapv_block_invoke_3;
    v30[3] = &__block_descriptor_48_e45_v16__0___MPMutablePersonalStoreIdentifiers__8l;
    v30[4] = a3;
    v30[5] = a4;
    objc_msgSend(v9, "setPersonalStoreIdentifiersWithPersonID:block:", v13, v30);
  }
  v29[0] = v12;
  v29[1] = 3221225472;
  v29[2] = ___ZL33_MPMLInitPropertyPlaylistEntryMapv_block_invoke_4;
  v29[3] = &__block_descriptor_48_e46_v16__0___MPMutableUniversalStoreIdentifiers__8l;
  v29[4] = a3;
  v29[5] = a4;
  objc_msgSend(v9, "setUniversalStoreIdentifiersWithBlock:", v29);
  std::string::basic_string[abi:ne180100]<0>(v32, "occurrenceID");
  v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)v32);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setContainerUniqueID:", v15);

  if (v33 < 0)
    operator delete(v32[0]);
  std::string::basic_string[abi:ne180100]<0>(v32, "excludeFromShuffle");
  v16 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)v32);
  if (!v16)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v16 + 5), a4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setShouldExcludeFromShuffle:", objc_msgSend(v17, "BOOLValue"));

  if (v33 < 0)
    operator delete(v32[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v18 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v18)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v18 + 5), a4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  quot = objc_msgSend(v19, "longLongValue");
  v21 = quot;
  v22 = (char *)&v34 + 1;
  do
  {
    v23 = lldiv(quot, 10);
    quot = v23.quot;
    if (v23.rem >= 0)
      LOBYTE(v24) = v23.rem;
    else
      v24 = -v23.rem;
    *(v22 - 2) = v24 + 48;
    v25 = (const UInt8 *)(v22 - 2);
    --v22;
  }
  while (v23.quot);
  if (v21 < 0)
  {
    *(v22 - 2) = 45;
    v25 = (const UInt8 *)(v22 - 2);
  }
  v26 = (__CFString *)CFStringCreateWithBytes(0, v25, (char *)&v34 - (char *)v25, 0x8000100u, 0);
  objc_msgSend(v9, "setHandoffCorrelationID:", v26);

  if (v28 < 0)
    operator delete(__p[0]);

}

void sub_193E63580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL33_MPMLInitPropertyPlaylistEntryMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  void *v9;
  void *__p[2];
  char v11;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v11 < 0)
    operator delete(__p[0]);
  v7 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "itemPid");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v7, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), *(int8x8_t **)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setContainedPersistentID:", objc_msgSend(v9, "longLongValue"));

  if (v11 < 0)
    operator delete(__p[0]);

}

void sub_193E63744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL33_MPMLInitPropertyPlaylistEntryMapv_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  void *v9;
  void *__p[2];
  char v11;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "cloudID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setCloudID:", objc_msgSend(v6, "unsignedLongLongValue"));

  if (v11 < 0)
    operator delete(__p[0]);
  v7 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeCloudAlbumID");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v7, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), *(int8x8_t **)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setCloudAlbumID:", v9);

  if (v11 < 0)
    operator delete(__p[0]);

}

void sub_193E63890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL33_MPMLInitPropertyPlaylistEntryMapv_block_invoke_4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  void *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  void *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  void *v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  void *v18;
  void *__p[2];
  char v20;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "cloudUniversalLibraryID");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setUniversalCloudLibraryID:", v6);

  if (v20 < 0)
    operator delete(__p[0]);
  v7 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "subscriptionStoreID");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v7, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), *(int8x8_t **)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setSubscriptionAdamID:", objc_msgSend(v9, "longLongValue"));

  if (v20 < 0)
    operator delete(__p[0]);
  v10 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeID");
  v11 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v10, (unsigned __int8 *)__p);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v11 + 5), *(int8x8_t **)(a1 + 40));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAdamID:", objc_msgSend(v12, "longLongValue"));

  if (v20 < 0)
    operator delete(__p[0]);
  objc_msgSend(v3, "setPurchasedAdamID:", objc_msgSend(v3, "adamID"));
  v13 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "reportingStoreItemID");
  v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v13, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), *(int8x8_t **)(a1 + 40));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setReportingAdamID:", objc_msgSend(v15, "longLongValue"));

  if (v20 < 0)
    operator delete(__p[0]);
  v16 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "assetStoreItemID");
  v17 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v16, (unsigned __int8 *)__p);
  if (!v17)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v17 + 5), *(int8x8_t **)(a1 + 40));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAssetAdamID:", objc_msgSend(v18, "longLongValue"));

  if (v20 < 0)
    operator delete(__p[0]);

}

void sub_193E63B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyGenreMapv_block_invoke_8(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "libraryAdded");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E63C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyGenreMapv_block_invoke_6(_QWORD *a1@<X1>, void *a2@<X2>, unint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  id v7;
  unsigned __int8 *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  v7 = objc_retainAutorelease(a2);
  std::string::basic_string[abi:ne180100]<0>(v14, (char *)objc_msgSend(v7, "UTF8String"));
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = *((_QWORD *)v8 + 5);
  if (v13 < 0)
    operator delete(__p[0]);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9) != 3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyGenreMap()_block_invoke_6");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 2113, CFSTR("The base property key for Genre's property[name] is not a string and thus cannot be used to create a SearchPredicate"));

  }
  if (a3 <= 1)
  {
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *&,std::string&,mediaplatform::UnicodeSearch::MatchType,void>(__p, v9, (uint64_t)v14);
    *a4 = *(_OWORD *)__p;
  }
  if (v15 < 0)
    operator delete(v14[0]);

}

void sub_193E63DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;

  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *&,std::string&,mediaplatform::UnicodeSearch::MatchType,void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  std::string __p;

  v5 = operator new(0x48uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E314A838;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  mlcore::SearchPredicate::SearchPredicate();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = v5 + 3;
  a1[1] = v5;
}

void sub_193E63F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count *v14;
  void *v16;

  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyGenreMapv_block_invoke_5(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  _QWORD *v15;
  char v16;
  _BYTE v17[48];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(v13, "hasName");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)v13))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  mlcore::SortDescriptor::SortDescriptor();
  std::string::basic_string[abi:ne180100]<0>(__p, "nameOrder");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = a3;
  v16 = 0;
  v6 = (char *)operator new(0x30uLL);
  v7 = 0;
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 48;
  v8 = MEMORY[0x1E0D4AF48] + 16;
  do
  {
    v9 = &v6[v7];
    v10 = *(_QWORD *)&v17[v7 + 8];
    *(_QWORD *)v9 = v8;
    *((_QWORD *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = *(_DWORD *)&v17[v7 + 16];
    v7 += 24;
  }
  while (v7 != 48);
  a3[1] = v6 + 48;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);

}

void sub_193E640B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void **a22)
{
  void *v22;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyGenreMapv_block_invoke_4(void *a1@<X1>, int64x2_t *a2@<X8>)
{
  uint64_t v3;
  mlcore *v4;

  v4 = a1;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  a2->i64[0] = 0;
  v3 = mlcore::GenrePropertyPersistentID(v4);
  _MPMLInsertPredicatesForIdentifierSet(a2, v4, 0, 0, v3, 0, 0, 0, 0, 0);

}

void sub_193E64174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12)
{
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyComposerMapv_block_invoke_7(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "libraryAdded");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E64244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyComposerMapv_block_invoke_6(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193E64310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL28_MPMLInitPropertyComposerMapv_block_invoke_5(_QWORD *a1@<X1>, void *a2@<X2>, unint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  id v7;
  unsigned __int8 *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  v7 = objc_retainAutorelease(a2);
  std::string::basic_string[abi:ne180100]<0>(v14, (char *)objc_msgSend(v7, "UTF8String"));
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = *((_QWORD *)v8 + 5);
  if (v13 < 0)
    operator delete(__p[0]);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9) != 3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyComposerMap()_block_invoke_5");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 1974, CFSTR("The base property key for Composer's property[name] is not a string and thus cannot be used to create a SearchPredicate"));

  }
  if (a3 <= 1)
  {
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *&,std::string&,mediaplatform::UnicodeSearch::MatchType,void>(__p, v9, (uint64_t)v14);
    *a4 = *(_OWORD *)__p;
  }
  if (v15 < 0)
    operator delete(v14[0]);

}

void sub_193E644A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;

  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL28_MPMLInitPropertyComposerMapv_block_invoke_4(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  _QWORD *v15;
  char v16;
  _BYTE v17[48];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(v13, "hasName");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)v13))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  mlcore::SortDescriptor::SortDescriptor();
  std::string::basic_string[abi:ne180100]<0>(__p, "nameOrder");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = a3;
  v16 = 0;
  v6 = (char *)operator new(0x30uLL);
  v7 = 0;
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 48;
  v8 = MEMORY[0x1E0D4AF48] + 16;
  do
  {
    v9 = &v6[v7];
    v10 = *(_QWORD *)&v17[v7 + 8];
    *(_QWORD *)v9 = v8;
    *((_QWORD *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = *(_DWORD *)&v17[v7 + 16];
    v7 += 24;
  }
  while (v7 != 48);
  a3[1] = v6 + 48;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);

}

void sub_193E64688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void **a22)
{
  void *v22;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void ___ZL28_MPMLInitPropertyComposerMapv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v10 = a5;
  objc_msgSend(a2, "mediaLibrary");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "uniqueIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZL28_MPMLInitPropertyComposerMapv_block_invoke_2;
  v11[3] = &__block_descriptor_48_e44_v16__0___MPMutableLocalLibraryIdentifiers__8l;
  v11[4] = a3;
  v11[5] = a4;
  objc_msgSend(v10, "setLibraryIdentifiersWithDatabaseID:block:", v9, v11);

}

void sub_193E64788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZL28_MPMLInitPropertyComposerMapv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  void *v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "pid");
  v5 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v5 + 5), *(int8x8_t **)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPersistentID:", objc_msgSend(v6, "longLongValue"));

  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_193E64858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL30_MPMLInitPropertyItemArtistMapv_block_invoke_7(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  unsigned __int8 *v12;
  void *v13;
  unsigned __int8 *v14;
  void *v15;
  void *v16;
  void *v17;
  void *__p[2];
  char v20;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "artistPID");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "longLongValue");

  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "artistAvailableArtworkToken");
  v10 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v10 + 5), a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "artistFetchableArtworkToken");
  v12 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v12)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v12 + 5), a4);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "artistFetchableArtworkSourceType");
  v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20 < 0)
    operator delete(__p[0]);
  objc_msgSend(v6, "mediaLibrary");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  _MPMLTranslatorCreateArtworkCatalogBlock(v9, 0, 7, 4, v11, v13, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

void sub_193E64AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v17;

  _Unwind_Resume(a1);
}

void ___ZL30_MPMLInitPropertyItemArtistMapv_block_invoke_5(_QWORD *a1@<X1>, void *a2@<X2>, unint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  id v7;
  unsigned __int8 *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  v7 = objc_retainAutorelease(a2);
  std::string::basic_string[abi:ne180100]<0>(v14, (char *)objc_msgSend(v7, "UTF8String"));
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = *((_QWORD *)v8 + 5);
  if (v13 < 0)
    operator delete(__p[0]);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9) != 3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyItemArtistMap()_block_invoke_5");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 1876, CFSTR("The base property key for Artist's property[name] is not a string and thus cannot be used to create a SearchPredicate"));

  }
  if (a3 <= 1)
  {
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *&,std::string&,mediaplatform::UnicodeSearch::MatchType,void>(__p, v9, (uint64_t)v14);
    *a4 = *(_OWORD *)__p;
  }
  if (v15 < 0)
    operator delete(v14[0]);

}

void sub_193E64CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;

  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL30_MPMLInitPropertyItemArtistMapv_block_invoke_4(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  _QWORD *v15;
  char v16;
  _BYTE v17[48];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(v13, "hasName");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)v13))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  mlcore::SortDescriptor::SortDescriptor();
  std::string::basic_string[abi:ne180100]<0>(__p, "nameOrder");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = a3;
  v16 = 0;
  v6 = (char *)operator new(0x30uLL);
  v7 = 0;
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 48;
  v8 = MEMORY[0x1E0D4AF48] + 16;
  do
  {
    v9 = &v6[v7];
    v10 = *(_QWORD *)&v17[v7 + 8];
    *(_QWORD *)v9 = v8;
    *((_QWORD *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = *(_DWORD *)&v17[v7 + 16];
    v7 += 24;
  }
  while (v7 != 48);
  a3[1] = v6 + 48;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);

}

void sub_193E64EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void **a22)
{
  void *v22;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

id ___ZL26_MPMLInitPropertyArtistMapv_block_invoke_15(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  int v9;
  unsigned __int8 *v10;
  void *v11;
  uint64_t v12;
  _BOOL8 v14;
  void *v15;
  void *__p[2];
  char v18;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "likedState");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "intValue");

  if (v18 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "libraryItemCount");
  v10 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v10 + 5), a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "longLongValue");

  if (v18 < 0)
    operator delete(__p[0]);
  v14 = v9 == 2 || v12 > 0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

void sub_193E65024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL26_MPMLInitPropertyArtistMapv_block_invoke_14(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "likedStateChangedDate");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E65120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL26_MPMLInitPropertyArtistMapv_block_invoke_13(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  int v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "likedState");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "intValue");

  if (v13 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v9 == 3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E65214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL26_MPMLInitPropertyArtistMapv_block_invoke_12(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  int v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "likedState");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "intValue");

  if (v13 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v9 == 2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E65308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL26_MPMLInitPropertyArtistMapv_block_invoke_11(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "libraryAdded");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E653F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL26_MPMLInitPropertyArtistMapv_block_invoke_10(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  unsigned __int8 *v12;
  void *v13;
  unsigned __int8 *v14;
  void *v15;
  void *v16;
  void *v17;
  void *__p[2];
  char v20;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "artistPID");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "longLongValue");

  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "artistAvailableArtworkToken");
  v10 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v10 + 5), a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "artistFetchableArtworkToken");
  v12 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v12)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v12 + 5), a4);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "artistFetchableArtworkSourceType");
  v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20 < 0)
    operator delete(__p[0]);
  objc_msgSend(v6, "mediaLibrary");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  _MPMLTranslatorCreateArtworkCatalogBlock(v9, 0, 7, 4, v11, v13, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

void sub_193E65618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v17;

  _Unwind_Resume(a1);
}

void ___ZL26_MPMLInitPropertyArtistMapv_block_invoke_8(_QWORD *a1@<X1>, void *a2@<X2>, unint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  id v7;
  unsigned __int8 *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  v7 = objc_retainAutorelease(a2);
  std::string::basic_string[abi:ne180100]<0>(v14, (char *)objc_msgSend(v7, "UTF8String"));
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = *((_QWORD *)v8 + 5);
  if (v13 < 0)
    operator delete(__p[0]);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9) != 3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyArtistMap()_block_invoke_8");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 1767, CFSTR("The base property key for Artist's property[name] is not a string and thus cannot be used to create a SearchPredicate"));

  }
  if (a3 <= 1)
  {
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *&,std::string&,mediaplatform::UnicodeSearch::MatchType,void>(__p, v9, (uint64_t)v14);
    *a4 = *(_OWORD *)__p;
  }
  if (v15 < 0)
    operator delete(v14[0]);

}

void sub_193E65828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;

  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL26_MPMLInitPropertyArtistMapv_block_invoke_7(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  _QWORD *v15;
  char v16;
  _BYTE v17[48];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(v13, "hasName");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)v13))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  mlcore::SortDescriptor::SortDescriptor();
  std::string::basic_string[abi:ne180100]<0>(__p, "nameOrder");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = a3;
  v16 = 0;
  v6 = (char *)operator new(0x30uLL);
  v7 = 0;
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 48;
  v8 = MEMORY[0x1E0D4AF48] + 16;
  do
  {
    v9 = &v6[v7];
    v10 = *(_QWORD *)&v17[v7 + 8];
    *(_QWORD *)v9 = v8;
    *((_QWORD *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = *(_DWORD *)&v17[v7 + 16];
    v7 += 24;
  }
  while (v7 != 48);
  a3[1] = v6 + 48;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);

}

void sub_193E65A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void **a22)
{
  void *v22;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void ___ZL26_MPMLInitPropertyArtistMapv_block_invoke_6(void *a1@<X1>, int64x2_t *a2@<X8>)
{
  mlcore *v3;
  uint64_t v4;
  mlcore *v5;

  v5 = a1;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  a2->i64[0] = 0;
  v3 = (mlcore *)mlcore::ArtistPropertyStoreID(v5);
  v4 = mlcore::ArtistPropertyPersistentID(v3);
  _MPMLInsertPredicatesForIdentifierSet(a2, v5, (uint64_t)v3, 0, v4, 0, 0, 0, 0, 0);

}

void sub_193E65AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12)
{
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_29(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "collaborationInvitationURLExpirationDate");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E65BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_28(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *__p[2];
  char v12;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "invitationURL");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 < 0)
    operator delete(__p[0]);
  if (objc_msgSend(v8, "length"))
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_193E65CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_27(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  int v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "favoriteSongsPlaylist");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "intValue");

  if (v13 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v9 == 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E65DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_26(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "likedStateChangedDate");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E65E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_15(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "datePlayedLocal");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E65F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_14(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "dateModified");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateComponentsFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E6605C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_13(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "downloadedDate");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E66144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_12(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "libraryAdded");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E6622C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_10_291()
{
  return 0;
}

uint64_t ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_9_289()
{
  return 0;
}

uint64_t ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_8_287()
{
  return 0;
}

uint64_t ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_7_285()
{
  return 0;
}

uint64_t ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_6_283()
{
  return 0;
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_4_279(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;

  v2 = a2;
  objc_msgSend(v2, "mediaLibrary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_5_281;
  v7[3] = &unk_1E3160188;
  v8 = v3;
  v4 = v3;
  v5 = (void *)MEMORY[0x19403A810](v7);

  return v5;
}

void sub_193E6631C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_5_281(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v6 = *(void **)(a1 + 32);
  objc_msgSend(a2, "identifiers");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "library");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "playlistWithPersistentID:", objc_msgSend(v8, "persistentID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "tiledArtworkCatalogWithRows:columns:", a3, a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E663BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_3_277(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  unsigned __int8 *v12;
  void *v13;
  unsigned __int8 *v14;
  void *v15;
  void *v16;
  void *v17;
  void *__p[2];
  char v20;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "playlistPID");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "longLongValue");

  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "availableArtworkToken");
  v10 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v10 + 5), a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fetchableArtworkToken");
  v12 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v12)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v12 + 5), a4);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fetchableArtworkSourceType");
  v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20 < 0)
    operator delete(__p[0]);
  objc_msgSend(v6, "mediaLibrary");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  _MPMLTranslatorCreateArtworkCatalogBlock(v9, 1, 1, 5, v11, v13, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

void sub_193E665D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v17;

  _Unwind_Resume(a1);
}

uint64_t ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_2_274()
{
  return 0;
}

id ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_271(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *__p[2];
  char v12;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "shareURL");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 < 0)
    operator delete(__p[0]);
  if (objc_msgSend(v8, "length"))
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_193E66740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_8(_QWORD *a1@<X1>, void *a2@<X2>, unint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  id v7;
  unsigned __int8 *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  v7 = objc_retainAutorelease(a2);
  std::string::basic_string[abi:ne180100]<0>(v14, (char *)objc_msgSend(v7, "UTF8String"));
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = *((_QWORD *)v8 + 5);
  if (v13 < 0)
    operator delete(__p[0]);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9) != 3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyPlaylistMap()_block_invoke_8");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 1335, CFSTR("The base property key for Playlist's property[name] is not a string and thus cannot be used to create a SearchPredicate"));

  }
  if (a3 <= 1)
  {
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *&,std::string&,mediaplatform::UnicodeSearch::MatchType,void>(__p, v9, (uint64_t)v14);
    *a4 = *(_OWORD *)__p;
  }
  if (v15 < 0)
    operator delete(v14[0]);

}

void sub_193E668E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;

  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_7(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "nameOrder");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v10 = a3;
  v11 = 0;
  v6 = operator new(0x18uLL);
  a3[2] = v6 + 3;
  v7 = v12;
  *v6 = MEMORY[0x1E0D4AF48] + 16;
  v6[1] = v7;
  *((_DWORD *)v6 + 4) = v13;
  *a3 = v6;
  a3[1] = v6 + 3;
  if (v9 < 0)
    operator delete(__p[0]);

}

void sub_193E66A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
  void *v16;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a16);
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL28_MPMLInitPropertyPlaylistMapv_block_invoke_6(void *a1@<X1>, int64x2_t *a2@<X8>)
{
  mlcore *v3;
  mlcore *v4;
  mlcore *v5;
  mlcore *v6;
  uint64_t v7;
  mlcore *v8;

  v8 = a1;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  a2->i64[0] = 0;
  v3 = (mlcore *)mlcore::PlaylistPropertyPersistentID(v8);
  v4 = (mlcore *)mlcore::PlaylistPropertyStoreCloudID(v3);
  v5 = (mlcore *)mlcore::PlaylistPropertyCloudGlobalID(v4);
  v6 = (mlcore *)mlcore::PlaylistPropertySyncID(v5);
  v7 = mlcore::PlaylistPropertyCloudUniversalLibraryID(v6);
  _MPMLInsertPredicatesForIdentifierSet(a2, v8, 0, 0, (uint64_t)v3, (uint64_t)v4, (uint64_t)v5, (uint64_t)v6, v7, 0);

}

void sub_193E66B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12)
{
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_33(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "likedStateChangedDate");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E66BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_32(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  int v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "likedState");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "intValue");

  if (v13 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v9 == 3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E66CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_31(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  int v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "likedState");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "intValue");

  if (v13 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v9 == 2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E66DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_30()
{
  return 0;
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_29(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  int v8;
  unsigned __int8 *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *__p[2];
  char v19;

  v6 = a2;
  +[MPCloudController sharedCloudController](MPCloudController, "sharedCloudController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isEnhancedAudioAvailable");

  if (v8)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "hlsAudioCapability");
    v9 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (!v9)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v9 + 5), a4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "integerValue");

    if (v19 < 0)
      operator delete(__p[0]);
    v12 = (v11 >> 2) & 8 | (16 * (v11 & 3)) | (v11 >> 1) & 2 | (v11 >> 2) & 4;
  }
  else
  {
    v12 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "masteredForiTunes");
  v13 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v13)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v13 + 5), a4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "BOOLValue");

  if (v19 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v12 | v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

void sub_193E66F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_27(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  MPMediaLibraryAlbumAppData *v10;
  MPMediaLibraryAlbumAppData *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[4];
  MPMediaLibraryAlbumAppData *v19;
  void *__p[2];
  char v21;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "appData");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v21 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v8, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
    v10 = -[MPMediaLibraryAlbumAppData initWithAppDataDictionary:]([MPMediaLibraryAlbumAppData alloc], "initWithAppDataDictionary:", v9);
  else
    v10 = 0;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_28;
  v18[3] = &unk_1E3160008;
  v19 = v10;
  v11 = v10;
  v12 = (void *)MEMORY[0x19403A810](v18);
  v16 = (void *)MEMORY[0x19403A810](v12, v13, v14, v15);

  return v16;
}

void sub_193E67128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_28(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "songPopularityForIdentifiers:");
  return (id)objc_claimAutoreleasedReturnValue();
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_26(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocalConstraints");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "numberWithUnsignedInteger:", (int)objc_msgSend(v9, "intValue"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 < 0)
    operator delete(__p[0]);

  return v10;
}

void sub_193E6723C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_25(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocalStatusReason");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "numberWithUnsignedInteger:", (int)objc_msgSend(v9, "intValue"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 < 0)
    operator delete(__p[0]);

  return v10;
}

void sub_193E67328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_24(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *__p[2];
  char v15;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocalStatus");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "intValue") + 1;
  if (v10 >= 7)
    v11 = 0;
  else
    v11 = v10 - 1;
  objc_msgSend(v7, "numberWithInteger:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15 < 0)
    operator delete(__p[0]);

  return v12;
}

void sub_193E67420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_23(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  void *__p[2];
  char v15;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocal");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "intValue") + 2;
  if (v10 > 4)
    v11 = 0;
  else
    v11 = qword_193F0C8F0[v10];
  objc_msgSend(v7, "numberWithInteger:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15 < 0)
    operator delete(__p[0]);

  return v12;
}

void sub_193E67528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_22(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "representativeItemExplicit");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "numberWithBool:", objc_msgSend(v9, "BOOLValue") ^ 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 < 0)
    operator delete(__p[0]);

  return v10;
}

void sub_193E67614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_21(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "datePlayedLocal");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E676F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_20()
{
  return MEMORY[0x1E0C9AAB0];
}

uint64_t ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_19()
{
  return MEMORY[0x1E0C9AAA0];
}

uint64_t ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_18()
{
  return MEMORY[0x1E0C9AAB0];
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_16(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "downloadedDate");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E67804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_15(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "libraryAdded");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E678EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_14(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "dateReleased");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateComponentsFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E679D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_13(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  void *v15;
  unsigned __int8 *v16;
  void *v17;
  unsigned __int8 *v18;
  void *v19;
  void *v20;
  void *v21;
  void *__p[2];
  char v24;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "itemPID");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "longLongValue");

  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "mediaType");
  v10 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v10 + 5), a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "unsignedIntValue");

  if (v24 < 0)
    operator delete(__p[0]);
  v13 = MPMediaTypeForMLMediaType(v12);
  std::string::basic_string[abi:ne180100]<0>(__p, "availableArtworkToken");
  v14 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v14 + 5), a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fetchableArtworkToken");
  v16 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v16)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v16 + 5), a4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fetchableArtworkSourceType");
  v18 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v18)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v18 + 5), a4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24 < 0)
    operator delete(__p[0]);
  objc_msgSend(v6, "mediaLibrary");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  _MPMLTranslatorCreateArtworkCatalogBlock(v9, v13, 0, 1, v15, v17, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

void sub_193E67C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v17;

  _Unwind_Resume(a1);
}

uint64_t ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_12()
{
  return 0;
}

uint64_t ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_11()
{
  return 0;
}

id ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_10(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "isPreOrder");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193E67DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_8(_QWORD *a1@<X1>, void *a2@<X2>, unint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  id v7;
  unsigned __int8 *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  v7 = objc_retainAutorelease(a2);
  std::string::basic_string[abi:ne180100]<0>(v14, (char *)objc_msgSend(v7, "UTF8String"));
  std::string::basic_string[abi:ne180100]<0>(__p, "title");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = *((_QWORD *)v8 + 5);
  if (v13 < 0)
    operator delete(__p[0]);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9) != 3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertyAlbumMap()_block_invoke_8");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 986, CFSTR("The base property key for Album's property[name] is not a string and thus cannot be used to create a SearchPredicate"));

  }
  if (a3 <= 1)
  {
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *&,std::string&,mediaplatform::UnicodeSearch::MatchType,void>(__p, v9, (uint64_t)v14);
    *a4 = *(_OWORD *)__p;
  }
  if (v15 < 0)
    operator delete(v14[0]);

}

void sub_193E67F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;

  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_7(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  _QWORD *v15;
  char v16;
  _BYTE v17[48];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(v13, "hasTitle");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)v13))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  mlcore::SortDescriptor::SortDescriptor();
  std::string::basic_string[abi:ne180100]<0>(__p, "titleOrder");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = a3;
  v16 = 0;
  v6 = (char *)operator new(0x30uLL);
  v7 = 0;
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 48;
  v8 = MEMORY[0x1E0D4AF48] + 16;
  do
  {
    v9 = &v6[v7];
    v10 = *(_QWORD *)&v17[v7 + 8];
    *(_QWORD *)v9 = v8;
    *((_QWORD *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = *(_DWORD *)&v17[v7 + 16];
    v7 += 24;
  }
  while (v7 != 48);
  a3[1] = v6 + 48;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);

}

void sub_193E68138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void **a22)
{
  void *v22;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void ___ZL25_MPMLInitPropertyAlbumMapv_block_invoke_6(void *a1@<X1>, int64x2_t *a2@<X8>)
{
  mlcore *v3;
  mlcore *v4;
  uint64_t v5;
  mlcore *v6;

  v6 = a1;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  a2->i64[0] = 0;
  v3 = (mlcore *)mlcore::AlbumPropertyStoreID(v6);
  v4 = (mlcore *)mlcore::AlbumPropertyPersistentID(v3);
  v5 = mlcore::AlbumPropertySyncID(v4);
  _MPMLInsertPredicatesForIdentifierSet(a2, v6, (uint64_t)v3, 0, (uint64_t)v4, 0, 0, v5, 0, 0);

}

void sub_193E68210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12)
{
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::Composer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AB48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Composer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AB48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::Composer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::Genre>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AA68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Genre>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AA68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::Genre>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<mlcore::Artist>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AAD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::Artist>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314AAD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

uint64_t std::__shared_ptr_emplace<mlcore::Artist>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

id ___ZL30_MPMLInitPropertyStoreAssetMapv_block_invoke_4(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  int v9;
  unsigned __int8 *v10;
  void *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *__p[2];
  char v20;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "cloudAssetAvailable");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "BOOLValue");

  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cloudStatus");
  v10 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v10 + 5), a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "integerValue");

  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "storeCloudID");
  v13 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v13)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v13 + 5), a4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "longLongValue");

  if (v20 < 0)
    operator delete(__p[0]);
  if (v15 > 0)
    v16 = (v12 == 0) & ~v9;
  else
    v16 = 0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

void sub_193E684B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyFileAssetMapv_block_invoke_2_161(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  unint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *__p[2];
  char v19;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "hlsTraits");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "integerValue");

  if (v19 < 0)
    operator delete(__p[0]);
  +[MPCloudController sharedCloudController](MPCloudController, "sharedCloudController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isEnhancedAudioAvailable");

  if (v11)
    v12 = (v9 >> 2) & 8 | (16 * (v9 & 3)) | (v9 >> 1) & 2 | (v9 >> 2) & 4;
  else
    v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "masteredForiTunes");
  v13 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v13)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v13 + 5), a4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "BOOLValue");

  if (v19 < 0)
    operator delete(__p[0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v12 | v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

void sub_193E68680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id ___ZL29_MPMLInitPropertyFileAssetMapv_block_invoke_158(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "hasNonPurgeableAsset");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193E6876C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_32(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "likedStateChangedDate");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E68844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_28(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(__p, "keepLocalStatusReason");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v8 + 5), a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "numberWithUnsignedInteger:", (int)objc_msgSend(v9, "intValue"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 < 0)
    operator delete(__p[0]);

  return v10;
}

void sub_193E68934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_24(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "datePlayed");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E68A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_23(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "downloadedDate");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E68B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_22(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v13;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "libraryAdded");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "longLongValue");

  if (v13 < 0)
    operator delete(__p[0]);
  _MPMLDateFromStoredInt64(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_193E68BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id ___ZL24_MPMLInitPropertySongMapv_block_invoke_15(uint64_t a1, void *a2, _QWORD *a3, int8x8_t *a4)
{
  id v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;

  v6 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "classicalMovement");
  v7 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MPMediaLibraryPropertyCacheValueForProperty(*((ModelPropertyBase **)v7 + 5), a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);

  return v8;
}

void sub_193E68CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL24_MPMLInitPropertySongMapv_block_invoke_14(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "classicalMovementNumber");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v10 = a3;
  v11 = 0;
  v6 = operator new(0x18uLL);
  a3[2] = v6 + 3;
  v7 = v12;
  *v6 = MEMORY[0x1E0D4AF48] + 16;
  v6[1] = v7;
  *((_DWORD *)v6 + 4) = v13;
  *a3 = v6;
  a3[1] = v6 + 3;
  if (v9 < 0)
    operator delete(__p[0]);

}

void sub_193E68DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
  void *v16;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a16);
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL24_MPMLInitPropertySongMapv_block_invoke_12(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  _QWORD *v15;
  char v16;
  _BYTE v17[48];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(v13, "hasTrackNumber");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)v13))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  mlcore::SortDescriptor::SortDescriptor();
  std::string::basic_string[abi:ne180100]<0>(__p, "trackNumber");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = a3;
  v16 = 0;
  v6 = (char *)operator new(0x30uLL);
  v7 = 0;
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 48;
  v8 = MEMORY[0x1E0D4AF48] + 16;
  do
  {
    v9 = &v6[v7];
    v10 = *(_QWORD *)&v17[v7 + 8];
    *(_QWORD *)v9 = v8;
    *((_QWORD *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = *(_DWORD *)&v17[v7 + 16];
    v7 += 24;
  }
  while (v7 != 48);
  a3[1] = v6 + 48;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);

}

void sub_193E68F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void **a22)
{
  void *v22;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void ___ZL24_MPMLInitPropertySongMapv_block_invoke_10(_QWORD *a1@<X1>, void *a2@<X2>, unint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  id v7;
  unsigned __int8 *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  v7 = objc_retainAutorelease(a2);
  std::string::basic_string[abi:ne180100]<0>(v14, (char *)objc_msgSend(v7, "UTF8String"));
  std::string::basic_string[abi:ne180100]<0>(__p, "title");
  v8 = std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = *((_QWORD *)v8 + 5);
  if (v13 < 0)
    operator delete(__p[0]);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9) != 3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MPMLInitPropertySongMap()_block_invoke_10");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MPMediaLibraryTranslatorSchema.mm"), 399, CFSTR("The base property key for Song's property[title] is not a string and thus cannot be used to create a SearchPredicate"));

  }
  if (a3 <= 1)
  {
    std::allocate_shared[abi:ne180100]<mlcore::SearchPredicate,std::allocator<mlcore::SearchPredicate>,mlcore::ModelProperty<std::string> *&,std::string&,mediaplatform::UnicodeSearch::MatchType,void>(__p, v9, (uint64_t)v14);
    *a4 = *(_OWORD *)__p;
  }
  if (v15 < 0)
    operator delete(v14[0]);

}

void sub_193E69168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;

  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL24_MPMLInitPropertySongMapv_block_invoke_9(_QWORD *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "titleOrder");
  if (!std::__hash_table<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlcore::ModelPropertyBase *>>>::find<std::string>(a1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "_MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering");
  mlcore::SortDescriptor::SortDescriptor();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v10 = a3;
  v11 = 0;
  v6 = operator new(0x18uLL);
  a3[2] = v6 + 3;
  v7 = v12;
  *v6 = MEMORY[0x1E0D4AF48] + 16;
  v6[1] = v7;
  *((_DWORD *)v6 + 4) = v13;
  *a3 = v6;
  a3[1] = v6 + 3;
  if (v9 < 0)
    operator delete(__p[0]);

}

void sub_193E692D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
  void *v16;

  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a16);
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t ___ZL24_MPMLInitPropertySongMapv_block_invoke_7()
{
  return MEMORY[0x1E0C9AAA0];
}

void ___ZL24_MPMLInitPropertySongMapv_block_invoke_6(void *a1@<X1>, int64x2_t *a2@<X8>)
{
  mlcore *v3;
  mlcore *v4;
  mlcore *v5;
  mlcore *v6;
  mlcore *v7;
  mlcore *v8;
  uint64_t v9;
  mlcore *v10;

  v10 = a1;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  a2->i64[0] = 0;
  v3 = (mlcore *)mlcore::ItemPropertyStoreID(v10);
  v4 = (mlcore *)mlcore::ItemPropertySubscriptionStoreItemID(v3);
  v5 = (mlcore *)mlcore::ItemPropertyPersistentID(v4);
  v6 = (mlcore *)mlcore::ItemPropertyStoreCloudID(v5);
  v7 = (mlcore *)mlcore::ItemPropertySyncID(v6);
  v8 = (mlcore *)mlcore::ItemPropertyStoreCloudUniversalLibraryID(v7);
  v9 = mlcore::ItemPropertyStoreCloudAlbumID(v8);
  _MPMLInsertPredicatesForIdentifierSet(a2, v10, (uint64_t)v3, (uint64_t)v4, (uint64_t)v5, (uint64_t)v6, 0, (uint64_t)v7, (uint64_t)v8, v9);

}

void sub_193E693C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12)
{
  std::vector<std::shared_ptr<mlcore::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlcore::MultiEntityQuery>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlcore::MultiEntityQuery>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314A870;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

void sub_193E69870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193E69BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193E6B60C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_193E6DF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193E6E0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193E6E250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193E6E91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  uint64_t v11;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v11 - 248));
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__44550(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__44551(uint64_t a1)
{

}

void sub_193E71D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__44758(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__44759(uint64_t a1)
{

}

void sub_193E75738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__45147(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__45148(uint64_t a1)
{

}

void sub_193E758C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__45293(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__45294(uint64_t a1)
{

}

void sub_193E77CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__45369(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__45370(uint64_t a1)
{

}

id MPStoreContentReporterURLOperation(void *a1, char a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  char v16;

  v5 = a1;
  v6 = a3;
  v7 = objc_alloc(MEMORY[0x1E0DDBEE8]);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __MPStoreContentReporterURLOperation_block_invoke;
  v12[3] = &unk_1E3162060;
  v13 = 0;
  v14 = v5;
  v16 = a2;
  v15 = v6;
  v8 = v6;
  v9 = v5;
  v10 = (void *)objc_msgSend(v7, "initWithStartHandler:", v12);

  return v10;
}

uint64_t __Block_byref_object_copy__46029(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__46030(uint64_t a1)
{

}

void sub_193E7DA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193E7DBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193E7DD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _findSettingWithKeyPath(void *a1)
{
  __CFString *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = CFSTR("root.music.allowExplicitContent");
  v3 = a1;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  objc_msgSend(v3, "settings");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v24;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v24 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        objc_msgSend(v9, "keyPath");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("root.music.allowExplicitContent"));

        if ((v11 & 1) != 0)
        {
          v16 = v9;
          goto LABEL_19;
        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
      if (v6)
        continue;
      break;
    }
  }

  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  objc_msgSend(v3, "groups", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v20;
LABEL_11:
    v15 = 0;
    while (1)
    {
      if (*(_QWORD *)v20 != v14)
        objc_enumerationMutation(v4);
      _findSettingWithKeyPath(*(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v15));
      v16 = (id)objc_claimAutoreleasedReturnValue();
      if (v16)
        break;
      if (v13 == ++v15)
      {
        v13 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
        if (v13)
          goto LABEL_11;
        goto LABEL_17;
      }
    }
LABEL_19:
    v17 = v16;
  }
  else
  {
LABEL_17:
    v17 = 0;
  }

  return v17;
}

uint64_t _isValidSetting(void *a1, const __CFString *a2)
{
  id v3;
  __CFString *v4;
  void *v5;
  char v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  void *v12;
  __CFString *v13;
  int v15;
  const __CFString *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = CFSTR("root.music.allowExplicitContent");
  if (!v3)
  {
    v8 = os_log_create("com.apple.amp.mediaplayer", "Preferences");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v15) = 0;
      v9 = "_isValidSetting() setting=nil";
      v10 = v8;
      v11 = 2;
LABEL_15:
      _os_log_impl(&dword_193B9B000, v10, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v15, v11);
    }
LABEL_16:
    v7 = 0;
LABEL_17:

    goto LABEL_18;
  }
  objc_msgSend(v3, "keyPath");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isEqualToString:", CFSTR("root.music.allowExplicitContent"));

  if ((v6 & 1) == 0)
  {
    v8 = os_log_create("com.apple.amp.mediaplayer", "Preferences");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v3, "keyPath");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = CFSTR("root.music.allowExplicitContent");
      v17 = 2114;
      v18 = (uint64_t)v12;
      _os_log_impl(&dword_193B9B000, v8, OS_LOG_TYPE_ERROR, "_isValidSetting() invalid setting.keypath. Expected:%{public}@ Found:%{public}@", (uint8_t *)&v15, 0x16u);

    }
    goto LABEL_16;
  }
  if (!objc_msgSend(v3, "valueClass"))
  {
    v8 = os_log_create("com.apple.amp.mediaplayer", "Preferences");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(v3, "keyPath");
      v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v13;
      _os_log_impl(&dword_193B9B000, v8, OS_LOG_TYPE_DEBUG, "_isValidSetting() setting with keypath=%{public}@ valueClass=nil. Returning isValid=YES", (uint8_t *)&v15, 0xCu);

    }
    v7 = 1;
    goto LABEL_17;
  }
  objc_msgSend(v3, "valueClass");
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v8 = os_log_create("com.apple.amp.mediaplayer", "Preferences");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v15 = 138543618;
      v16 = a2;
      v17 = 2114;
      v18 = objc_msgSend(v3, "valueClass");
      v9 = "_isValidSetting() invalid setting.valueClass. Expected:%{public}@ Found:%{public}@";
      v10 = v8;
      v11 = 22;
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  v7 = 1;
LABEL_18:

  return v7;
}

uint64_t __Block_byref_object_copy__46319(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__46320(uint64_t a1)
{

}

BOOL MPPPersistentIDsPredicateReadFrom(void *a1, void *a2)
{
  _BYTE *v3;
  _BYTE *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  int v17;
  int v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  _BOOL8 v38;

  v3 = a1;
  v4 = a2;
  v5 = (int *)MEMORY[0x1E0D82BF0];
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&v4[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v4[*MEMORY[0x1E0D82BD8]])
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (v4[*v7])
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v5;
        v13 = *(_QWORD *)&v4[v12];
        if (v13 == -1 || v13 >= *(_QWORD *)&v4[*v6])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v13);
        *(_QWORD *)&v4[v12] = v13 + 1;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v15 = v10++ >= 9;
        if (v15)
        {
          LODWORD(v11) = 0;
          v16 = v4[*v7];
          goto LABEL_14;
        }
      }
      v4[*v7] = 1;
LABEL_12:
      v16 = v4[*v7];
      if (v4[*v7])
        LODWORD(v11) = 0;
LABEL_14:
      v17 = v11 & 7;
      if (v16 || v17 == 4)
        break;
      v19 = (unsigned __int16)(v11 >> 3);
      if (v19 == 2)
      {
        if (v17 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_59;
          while (*(_QWORD *)&v4[*v5] < *(_QWORD *)&v4[*v6] && !v4[*v7])
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            while (1)
            {
              v29 = *v5;
              v30 = *(_QWORD *)&v4[v29];
              if (v30 == -1 || v30 >= *(_QWORD *)&v4[*v6])
                break;
              v31 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v30);
              *(_QWORD *)&v4[v29] = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v15 = v27++ >= 9;
                if (!v15)
                  continue;
              }
              goto LABEL_39;
            }
            v4[*v7] = 1;
LABEL_39:
            PBRepeatedInt64Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (1)
          {
            v35 = *v5;
            v36 = *(_QWORD *)&v4[v35];
            if (v36 == -1 || v36 >= *(_QWORD *)&v4[*v6])
              break;
            v37 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v36);
            *(_QWORD *)&v4[v35] = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v15 = v33++ >= 9;
              if (!v15)
                continue;
            }
            goto LABEL_55;
          }
          v4[*v7] = 1;
LABEL_55:
          PBRepeatedInt64Add();
        }
      }
      else if (v19 == 1)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v3[36] |= 1u;
        while (1)
        {
          v23 = *v5;
          v24 = *(_QWORD *)&v4[v23];
          if (v24 == -1 || v24 >= *(_QWORD *)&v4[*v6])
            break;
          v25 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v24);
          *(_QWORD *)&v4[v23] = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0)
            goto LABEL_43;
          v20 += 7;
          v15 = v21++ >= 9;
          if (v15)
          {
            v22 = 0;
            goto LABEL_45;
          }
        }
        v4[*v7] = 1;
LABEL_43:
        if (v4[*v7])
          v22 = 0;
LABEL_45:
        v3[32] = v22 != 0;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_59:
        v38 = 0;
        goto LABEL_58;
      }
    }
    while (*(_QWORD *)&v4[*v5] < *(_QWORD *)&v4[*v6]);
  }
  v38 = v4[*v7] == 0;
LABEL_58:

  return v38;
}

BOOL MPPMediaPredicateValueReadFrom(void *a1, void *a2)
{
  _DWORD *v3;
  _BYTE *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  _BOOL8 v50;

  v3 = a1;
  v4 = a2;
  v5 = (int *)MEMORY[0x1E0D82BF0];
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&v4[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v4[*MEMORY[0x1E0D82BD8]])
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (v4[*v7])
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v5;
        v13 = *(_QWORD *)&v4[v12];
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)&v4[*v6])
          break;
        v15 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v13);
        *(_QWORD *)&v4[v12] = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v16 = v10++ >= 9;
        if (v16)
        {
          LODWORD(v11) = 0;
          v17 = v4[*v7];
          goto LABEL_14;
        }
      }
      v4[*v7] = 1;
LABEL_12:
      v17 = v4[*v7];
      if (v4[*v7])
        LODWORD(v11) = 0;
LABEL_14:
      if (v17 || (v11 & 7) == 4)
        break;
      switch((unsigned __int16)(v11 >> 3))
      {
        case 1u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (1)
          {
            v22 = *v5;
            v23 = *(_QWORD *)&v4[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v4[*v6])
              break;
            v25 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v23);
            *(_QWORD *)&v4[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              goto LABEL_52;
            v19 += 7;
            v16 = v20++ >= 9;
            if (v16)
            {
              LODWORD(v21) = 0;
              goto LABEL_54;
            }
          }
          v4[*v7] = 1;
LABEL_52:
          if (v4[*v7])
            LODWORD(v21) = 0;
LABEL_54:
          v3[12] = v21;
          continue;
        case 2u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *((_BYTE *)v3 + 56) |= 2u;
          while (2)
          {
            v29 = *v5;
            v30 = *(_QWORD *)&v4[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v4[*v6])
            {
              v4[*v7] = 1;
            }
            else
            {
              v32 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v30);
              *(_QWORD *)&v4[v29] = v31;
              v28 |= (unint64_t)(v32 & 0x7F) << v26;
              if (v32 < 0)
              {
                v26 += 7;
                v16 = v27++ >= 9;
                if (v16)
                {
                  v28 = 0;
                  goto LABEL_58;
                }
                continue;
              }
            }
            break;
          }
          if (v4[*v7])
            v28 = 0;
LABEL_58:
          *((_QWORD *)v3 + 2) = v28;
          continue;
        case 3u:
          *((_BYTE *)v3 + 56) |= 1u;
          v33 = *v5;
          v34 = *(_QWORD *)&v4[v33];
          if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)&v4[*v6])
          {
            v35 = *(_QWORD *)(*(_QWORD *)&v4[*v8] + v34);
            *(_QWORD *)&v4[v33] = v34 + 8;
          }
          else
          {
            v4[*v7] = 1;
            v35 = 0;
          }
          *((_QWORD *)v3 + 1) = v35;
          continue;
        case 4u:
          *((_BYTE *)v3 + 56) |= 4u;
          v36 = *v5;
          v37 = *(_QWORD *)&v4[v36];
          if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= *(_QWORD *)&v4[*v6])
          {
            v38 = *(_DWORD *)(*(_QWORD *)&v4[*v8] + v37);
            *(_QWORD *)&v4[v36] = v37 + 4;
          }
          else
          {
            v4[*v7] = 1;
            v38 = 0;
          }
          v3[8] = v38;
          continue;
        case 5u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          *((_BYTE *)v3 + 56) |= 8u;
          break;
        case 6u:
          PBReaderReadString();
          v46 = objc_claimAutoreleasedReturnValue();
          v47 = 10;
          goto LABEL_50;
        case 7u:
          PBReaderReadData();
          v46 = objc_claimAutoreleasedReturnValue();
          v47 = 6;
LABEL_50:
          v48 = *(void **)&v3[v47];
          *(_QWORD *)&v3[v47] = v46;

          continue;
        default:
          if (PBReaderSkipValueWithTag())
            continue;
          v50 = 0;
          goto LABEL_69;
      }
      while (1)
      {
        v42 = *v5;
        v43 = *(_QWORD *)&v4[v42];
        v44 = v43 + 1;
        if (v43 == -1 || v44 > *(_QWORD *)&v4[*v6])
          break;
        v45 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v43);
        *(_QWORD *)&v4[v42] = v44;
        v41 |= (unint64_t)(v45 & 0x7F) << v39;
        if ((v45 & 0x80) == 0)
          goto LABEL_60;
        v39 += 7;
        v16 = v40++ >= 9;
        if (v16)
        {
          v41 = 0;
          goto LABEL_62;
        }
      }
      v4[*v7] = 1;
LABEL_60:
      if (v4[*v7])
        v41 = 0;
LABEL_62:
      *((_BYTE *)v3 + 52) = v41 != 0;
    }
    while (*(_QWORD *)&v4[*v5] < *(_QWORD *)&v4[*v6]);
  }
  v50 = v4[*v7] == 0;
LABEL_69:

  return v50;
}

void sub_193E83564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  uint64_t v22;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v22 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__47057(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__47058(uint64_t a1)
{

}

void sub_193E843F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  id *v16;
  id *v17;
  id *v18;
  id *v19;
  uint64_t v20;
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak((id *)(v20 - 200));
  objc_destroyWeak((id *)(v20 - 192));
  _Block_object_dispose((const void *)(v20 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_193E847E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  id *v24;
  id *v25;
  id *v26;
  uint64_t v27;

  _Block_object_dispose(&a24, 8);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v27 - 200));
  objc_destroyWeak((id *)(v27 - 192));
  _Block_object_dispose((const void *)(v27 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_193E8493C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__75(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x19403A810](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__76(uint64_t a1)
{

}

void sub_193E85970(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29)
{
  __break(1u);
}

void sub_193E85B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_193E85BEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_193E85DB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_193E85EC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__136(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__137(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::__unordered_map_hasher<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::hash<mlcore::ModelProperty<int> *>,std::equal_to<mlcore::ModelProperty<int> *>,true>,std::__unordered_map_equal<mlcore::ModelProperty<int> *,std::__hash_value_type<mlcore::ModelProperty<int> *,int>,std::equal_to<mlcore::ModelProperty<int> *>,std::hash<mlcore::ModelProperty<int> *>,true>,std::allocator<std::__hash_value_type<mlcore::ModelProperty<int> *,int>>>::~__hash_table(a1 + 48);
}

uint64_t __Block_byref_object_copy__132(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__133(uint64_t a1)
{

}

void sub_193E86108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,mlcore::ModelPropertyBase *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314ABB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,mlcore::ModelPropertyBase *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E314ABB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19403A1A4);
}

void std::vector<std::shared_ptr<mlcore::Predicate>>::__move_range(uint64_t a1, _QWORD *a2, unint64_t a3, char *a4)
{
  char *v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v5 = *(char **)(a1 + 8);
  v6 = (_QWORD *)((char *)a2 + v5 - a4);
  v7 = v5;
  if ((unint64_t)v6 < a3)
  {
    v8 = (char *)a2 + v5 - a4;
    v7 = *(char **)(a1 + 8);
    do
    {
      *(_OWORD *)v7 = *(_OWORD *)v8;
      v7 += 16;
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v8 + 1) = 0;
      v8 += 16;
    }
    while ((unint64_t)v8 < a3);
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (v5 != a4)
  {
    do
    {
      v9 = *((_OWORD *)v6 - 1);
      v6 -= 2;
      *v6 = 0;
      v6[1] = 0;
      v10 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
      *((_OWORD *)v5 - 1) = v9;
      v5 -= 16;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    while (v6 != a2);
  }
}

uint64_t std::vector<std::shared_ptr<mlcore::Predicate>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

__n128 __Block_byref_object_copy__47284(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__47285(uint64_t a1)
{
  return std::shared_ptr<mlcore::DeviceLibraryView>::~shared_ptr[abi:ne180100](a1 + 48);
}

__n128 __Block_byref_object_copy__109(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__110(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<mlcore::MultiSortDescriptor>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_193E867DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  a25 = (void **)(v30 - 128);
  std::vector<mlcore::SortDescriptor>::__destroy_vector::operator()[abi:ne180100](&a25);

  _Unwind_Resume(a1);
}

void std::vector<mlcore::MultiSortDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 56;
      v7 = v4 - 56;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 56;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::MultiSortDescriptor>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a1);
}

void std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,mlcore::ModelPropertyBase *>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,mlcore::ModelPropertyBase *>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,mlcore::ModelPropertyBase *>>>::__node_insert_multi(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  _BOOL8 v11;
  unint64_t v12;
  unint64_t v13;
  int8x8_t prime;
  void *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  _QWORD *i;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint8x8_t v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _BOOL4 v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;

  v4 = a2[2];
  v5 = HIDWORD(v4);
  v6 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
  a2[1] = v7;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v10 = *(float *)(a1 + 32);
  if (!v8 || (float)(v10 * (float)v8) < v9)
  {
    v11 = 1;
    if (v8 >= 3)
      v11 = (v8 & (v8 - 1)) != 0;
    v12 = v11 | (2 * v8);
    v13 = vcvtps_u32_f32(v9 / v10);
    if (v12 <= v13)
      prime = (int8x8_t)v13;
    else
      prime = (int8x8_t)v12;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_92;
    if (*(_QWORD *)&prime >= v8)
      goto LABEL_43;
    v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
    {
      v21 = std::__next_prime(v21);
    }
    else
    {
      v23 = 1 << -(char)__clz(v21 - 1);
      if (v21 >= 2)
        v21 = v23;
    }
    if (*(_QWORD *)&prime <= v21)
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime >= v8)
    {
      v8 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_92:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = operator new(8 * *(_QWORD *)&prime);
      v16 = *(void **)a1;
      *(_QWORD *)a1 = v15;
      if (v16)
        operator delete(v16);
      v17 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17++) = 0;
      while (*(_QWORD *)&prime != v17);
      v18 = *(_QWORD **)(a1 + 16);
      if (v18)
      {
        v19 = v18[1];
        v20 = (uint8x8_t)vcnt_s8(prime);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          if (v19 >= *(_QWORD *)&prime)
            v19 %= *(_QWORD *)&prime;
        }
        else
        {
          v19 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = a1 + 16;
        for (i = (_QWORD *)*v18; *v18; i = (_QWORD *)*v18)
        {
          v25 = i[1];
          if (v20.u32[0] > 1uLL)
          {
            if (v25 >= *(_QWORD *)&prime)
              v25 %= *(_QWORD *)&prime;
          }
          else
          {
            v25 &= *(_QWORD *)&prime - 1;
          }
          if (v25 == v19)
          {
            v18 = i;
          }
          else
          {
            v26 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v25))
            {
              do
              {
                v27 = v26;
                v26 = (_QWORD *)*v26;
              }
              while (v26 && i[2] == v26[2]);
              *v18 = v26;
              *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v25);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v25) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v18;
              v18 = i;
              v19 = v25;
            }
          }
        }
      }
      v8 = (unint64_t)prime;
    }
    else
    {
      v39 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v39)
        operator delete(v39);
      v8 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v28.i16[0] = vaddlv_u8(v28);
  if (v28.u32[0] > 1uLL)
  {
    v29 = v7;
    if (v8 <= v7)
      v29 = v7 % v8;
  }
  else
  {
    v29 = (v8 - 1) & v7;
  }
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
  if (v30)
  {
    v31 = 0;
    do
    {
      v32 = v30;
      v30 = (_QWORD *)*v30;
      if (!v30)
        break;
      v33 = v30[1];
      if (v28.u32[0] > 1uLL)
      {
        v34 = v30[1];
        if (v33 >= v8)
          v34 = v33 % v8;
      }
      else
      {
        v34 = v33 & (v8 - 1);
      }
      if (v34 != v29)
        break;
      v35 = v33 == v7 && v30[2] == a2[2];
      v36 = v31 & !v35;
      v31 |= v35;
    }
    while (v36 != 1);
  }
  else
  {
    v32 = 0;
  }
  v37 = a2[1];
  if (v28.u32[0] > 1uLL)
  {
    if (v37 >= v8)
      v37 %= v8;
  }
  else
  {
    v37 &= v8 - 1;
  }
  if (!v32)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = a1 + 16;
    if (!*a2)
      goto LABEL_79;
    v38 = *(_QWORD *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v38 >= v8)
        v38 %= v8;
    }
    else
    {
      v38 &= v8 - 1;
    }
LABEL_78:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = a2;
    goto LABEL_79;
  }
  *a2 = *v32;
  *v32 = a2;
  if (*a2)
  {
    v38 = *(_QWORD *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v38 >= v8)
        v38 %= v8;
    }
    else
    {
      v38 &= v8 - 1;
    }
    if (v38 != v37)
      goto LABEL_78;
  }
LABEL_79:
  ++*(_QWORD *)(a1 + 24);
}

uint64_t std::vector<mlcore::MultiSortDescriptor>::__push_back_slow_path<mlcore::MultiSortDescriptor const&>(int64x2_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  int64x2_t *v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  char *v20;
  _DWORD *v22;
  int64x2_t v23;
  char *v24;
  uint64_t *v25;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1->i64[1] - a1->i64[0]) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492)
    std::vector<mlcore::ModelPropertyBase *>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 1;
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[1].i64[0] - a1->i64[0]) >> 3)) >= 0x249249249249249)
    v7 = 0x492492492492492;
  else
    v7 = v3;
  v25 = (uint64_t *)v6;
  if (v7)
  {
    v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<mlcore::MultiSortDescriptor>>(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = &v9[14 * v2];
  v22 = v9;
  v23.i64[0] = (uint64_t)v10;
  v23.i64[1] = (uint64_t)v10;
  v24 = (char *)&v9[14 * v8];
  v11 = MEMORY[0x1E0D4AF50];
  *v10 = MEMORY[0x1E0D4AF50] + 16;
  std::unordered_map<mlcore::EntityClass *,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)(v10 + 1), a2 + 8);
  v9[14 * v2 + 12] = *(_DWORD *)(a2 + 48);
  v13 = a1->i64[0];
  v12 = a1->u64[1];
  v14 = v23.i64[1];
  v15 = v23.i64[0];
  if (v12 == a1->i64[0])
  {
    v18 = vdupq_n_s64(v12);
  }
  else
  {
    v16 = 0;
    v17 = v11 + 16;
    do
    {
      *(_QWORD *)(v15 + v16 - 56) = v17;
      std::__hash_table<std::__hash_value_type<mlcore::EntityClass *,mlcore::ModelPropertyBase *>,std::__unordered_map_hasher<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,mlcore::ModelPropertyBase *>,std::hash<mlcore::EntityClass *>,std::equal_to<mlcore::EntityClass *>,true>,std::__unordered_map_equal<mlcore::EntityClass *,std::__hash_value_type<mlcore::EntityClass *,mlcore::ModelPropertyBase *>,std::equal_to<mlcore::EntityClass *>,std::hash<mlcore::EntityClass *>,true>,std::allocator<std::__hash_value_type<mlcore::EntityClass *,mlcore::ModelPropertyBase *>>>::__hash_table(v15 + v16 - 48, (uint64_t *)(v12 + v16 - 48));
      *(_DWORD *)(v15 + v16 - 8) = *(_DWORD *)(v12 + v16 - 8);
      v16 -= 56;
    }
    while (v12 + v16 != v13);
    v15 += v16;
    v18 = *a1;
  }
  v19 = v14 + 56;
  a1->i64[0] = v15;
  a1->i64[1] = v19;
  v23 = v18;
  v20 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v24;
  v24 = v20;
  v22 = (_DWORD *)v18.i64[0];
  std::__split_buffer<mlcore::MultiSortDescriptor>::~__split_buffer((uint64_t)&v22);
  return v19;
}

void sub_193E86FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<mlcore::MultiSortDescriptor>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<std::unordered_map<std::string,mlcore::ModelPropertyBase *>,std::allocator<std::unordered_map<std::string,mlcore::ModelPropertyBase *>>,std::unordered_map<std::string,mlcore::ModelPropertyBase *> const&,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0x40uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E314ABB8;
  result = std::unordered_map<std::string,mlcore::ModelPropertyBase *>::unordered_map((uint64_t)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_193E87028(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_193E87218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id MPContainerUniqueIDPrefix(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = a1;
  objc_msgSend(v1, "universalStore");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "subscriptionAdamID");

  if (!v3)
  {
    objc_msgSend(v1, "universalStore");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "adamID");

  }
  objc_msgSend(v1, "universalStore");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "universalCloudLibraryID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "universalStore");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "purchasedAdamID");
  objc_msgSend(v1, "library");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "persistentID");
  ML3ContainerItemOccurrencePrefix();
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

uint64_t __Block_byref_object_copy__48769(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

