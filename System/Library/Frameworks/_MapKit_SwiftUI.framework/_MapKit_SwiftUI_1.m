uint64_t sub_21C59EE40(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x22077F9A0](&unk_21C5E9100, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21C59EE84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t WeakValue;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  v2 = type metadata accessor for MapSizingInformation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289850);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v16 - v10;
  WeakValue = AGGraphGetWeakValue();
  if (!WeakValue)
    goto LABEL_4;
  sub_21C531B18(WeakValue, (uint64_t)v11, &qword_255289850);
  sub_21C52DB08((uint64_t)v11, (uint64_t)v9, &qword_255289850);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    sub_21C524980((uint64_t)v9, &qword_255289850);
LABEL_4:
    v13 = sub_21C5E2F80();
    v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
    v14(v5, 1, 1, v13);
    sub_21C524980((uint64_t)v5, &qword_255289860);
    v14(v5, 1, 1, v13);
    *(_QWORD *)&v5[*(int *)(v2 + 20)] = 0x3FF0000000000000;
    v9 = v5;
  }
  return sub_21C5A0C20((uint64_t)v9, a1);
}

uint64_t sub_21C59F018@<X0>(uint64_t a1@<X8>)
{
  uint64_t WeakValue;
  _BYTE *v3;
  _BYTE v5[16];
  _BYTE v6[16];

  __swift_instantiateConcreteTypeFromMangledName(&qword_255288140);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    sub_21C531B18(WeakValue, (uint64_t)v6, &qword_255288140);
    sub_21C52DB08((uint64_t)v6, (uint64_t)v5, &qword_255288140);
    if ((v5[8] & 1) == 0)
    {
      v3 = v5;
      return sub_21C531764((uint64_t)v3, a1);
    }
    sub_21C524980((uint64_t)v5, &qword_255288140);
  }
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v3 = v6;
  return sub_21C531764((uint64_t)v3, a1);
}

BOOL sub_21C59F0C8(double a1, double a2)
{
  uint64_t v3;
  _BOOL8 result;
  BOOL v6;
  uint64_t v8;

  v3 = *(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL;
  result = 0;
  if ((*(_QWORD *)&a1 & 0x7FF0000000000000) != 0x7FF0000000000000 || v3 == 0)
  {
    v6 = (*(_QWORD *)&a1 & 0x7FF0000000000000) == 0x7FF0000000000000 && v3 == 0;
    if (!v6 && (*(_QWORD *)&a2 & 0x7FF0000000000000) != 0x7FF0000000000000)
    {
      v8 = sub_21C5E2D40();
      return (double)sub_21C5E2D40() != a2 || (double)v8 != a1;
    }
  }
  return result;
}

uint64_t sub_21C59F154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t result;
  double v19;
  _BYTE v21[8];

  v0 = sub_21C5E33F4();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289860);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for MapSizingInformation();
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_21C59F018((uint64_t)v21);
  v10 = (void *)MEMORY[0x22077FAFC](v21);
  sub_21C5317A0((uint64_t)v21);
  if (!v10)
    goto LABEL_6;
  v11 = objc_msgSend(v10, sel_superview);
  if (!v11)
  {

LABEL_6:
    *(double *)&result = 0.0;
    return result;
  }
  v12 = v11;
  objc_msgSend(v10, sel_frame);
  objc_msgSend(v12, sel_convertRect_toView_, 0);
  v14 = v13;

  sub_21C59EE84((uint64_t)v9);
  sub_21C531B18((uint64_t)v9, (uint64_t)v6, &qword_255289860);
  v15 = sub_21C5E2F80();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v6, 1, v15) == 1)
  {
    sub_21C524980((uint64_t)v6, &qword_255289860);
    v17 = 0.0;
  }
  else
  {
    sub_21C5E343C();
    sub_21C5E2F74();
    v17 = v19;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v15);
  }

  sub_21C59F5F8((uint64_t)v9);
  *(double *)&result = v17 - v14;
  return result;
}

void __swiftcall MapProxy.camera(framing:)(_MapKit_SwiftUI::MapCamera *__return_ptr retstr, __C::MKCoordinateRegion framing)
{
  double longitudeDelta;
  double latitudeDelta;
  double longitude;
  double latitude;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  id v24;
  void *v25;
  double v26;
  Swift::Double v27;
  double v28;
  Swift::Double v29;
  double v30;
  Swift::Double v31;
  double v32;
  Swift::Double v33;
  double v34;
  Swift::Double v35;
  uint64_t v36;

  longitudeDelta = framing.span.longitudeDelta;
  latitudeDelta = framing.span.latitudeDelta;
  longitude = framing.center.longitude;
  latitude = framing.center.latitude;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289860);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MapSizingInformation();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C59EE84((uint64_t)v12);
  sub_21C531B18((uint64_t)v12, (uint64_t)v9, &qword_255289860);
  v13 = sub_21C5E2F80();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13) == 1)
  {
    sub_21C524980((uint64_t)v9, &qword_255289860);
    v15 = 0.0;
    v16 = 0.0;
  }
  else
  {
    sub_21C5E2F5C();
    v16 = v17;
    v15 = v18;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v13);
  }
  v19 = sub_21C59F5F8((uint64_t)v12);
  v20 = MEMORY[0x22077F520](v19, latitude, longitude, latitudeDelta, longitudeDelta);
  v24 = objc_msgSend((id)objc_opt_self(), sel__cameraLookingAtMapRect_forViewSize_, v20, v21, v22, v23, v16, v15);
  if (v24)
  {
    v25 = v24;
    objc_msgSend(v24, sel_centerCoordinate);
    v27 = v26;
    v29 = v28;
    objc_msgSend(v25, sel_centerCoordinateDistance);
    v31 = v30;
    objc_msgSend(v25, sel_heading);
    v33 = v32;
    objc_msgSend(v25, sel_pitch);
    v35 = v34;

    retstr->centerCoordinate.latitude = v27;
    retstr->centerCoordinate.longitude = v29;
    retstr->distance = v31;
    retstr->heading = v33;
    retstr->pitch = v35;
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for MapSizingInformation()
{
  uint64_t result;

  result = qword_255289B30;
  if (!qword_255289B30)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21C59F5F8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MapSizingInformation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void __swiftcall MapProxy.camera(framing:)(_MapKit_SwiftUI::MapCamera *__return_ptr retstr, __C::MKMapRect framing)
{
  double height;
  double width;
  double y;
  double x;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;
  void *v20;
  double v21;
  Swift::Double v22;
  double v23;
  Swift::Double v24;
  double v25;
  Swift::Double v26;
  double v27;
  Swift::Double v28;
  double v29;
  Swift::Double v30;
  uint64_t v31;

  height = framing.size.height;
  width = framing.size.width;
  y = framing.origin.y;
  x = framing.origin.x;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289860);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MapSizingInformation();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C59EE84((uint64_t)v12);
  sub_21C531B18((uint64_t)v12, (uint64_t)v9, &qword_255289860);
  v13 = sub_21C5E2F80();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13) == 1)
  {
    sub_21C524980((uint64_t)v9, &qword_255289860);
    v15 = 0.0;
    v16 = 0.0;
  }
  else
  {
    sub_21C5E2F5C();
    v16 = v17;
    v15 = v18;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v13);
  }
  sub_21C59F5F8((uint64_t)v12);
  v19 = objc_msgSend((id)objc_opt_self(), sel__cameraLookingAtMapRect_forViewSize_, x, y, width, height, v16, v15);
  if (v19)
  {
    v20 = v19;
    objc_msgSend(v19, sel_centerCoordinate);
    v22 = v21;
    v24 = v23;
    objc_msgSend(v20, sel_centerCoordinateDistance);
    v26 = v25;
    objc_msgSend(v20, sel_heading);
    v28 = v27;
    objc_msgSend(v20, sel_pitch);
    v30 = v29;

    retstr->centerCoordinate.latitude = v22;
    retstr->centerCoordinate.longitude = v24;
    retstr->distance = v26;
    retstr->heading = v28;
    retstr->pitch = v30;
  }
  else
  {
    __break(1u);
  }
}

void __swiftcall MapProxy.camera(framing:allowPitch:)(_MapKit_SwiftUI::MapCamera *__return_ptr retstr, MKMapItem framing, Swift::Bool allowPitch)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  objc_class *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;
  double v20;
  Swift::Double v21;
  double v22;
  Swift::Double v23;
  double v24;
  Swift::Double v25;
  double v26;
  Swift::Double v27;
  double v28;
  Swift::Double v29;
  uint64_t v30;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289860);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MapSizingInformation();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = framing.super.isa;
  sub_21C59EE84((uint64_t)v11);
  sub_21C531B18((uint64_t)v11, (uint64_t)v8, &qword_255289860);
  v13 = sub_21C5E2F80();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, v13) == 1)
  {
    sub_21C524980((uint64_t)v8, &qword_255289860);
    v15 = 0.0;
    v16 = 0.0;
  }
  else
  {
    sub_21C5E2F5C();
    v16 = v17;
    v15 = v18;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v13);
  }
  sub_21C59F5F8((uint64_t)v11);
  v19 = objc_msgSend((id)objc_opt_self(), sel_cameraLookingAtMapItem_forViewSize_allowPitch_, v12, allowPitch, v16, v15);
  objc_msgSend(v19, sel_centerCoordinate);
  v21 = v20;
  v23 = v22;
  objc_msgSend(v19, sel_centerCoordinateDistance);
  v25 = v24;
  objc_msgSend(v19, sel_heading);
  v27 = v26;
  objc_msgSend(v19, sel_pitch);
  v29 = v28;

  retstr->centerCoordinate.latitude = v21;
  retstr->centerCoordinate.longitude = v23;
  retstr->distance = v25;
  retstr->heading = v27;
  retstr->pitch = v29;
}

uint64_t MapProxy.convert<A>(_:from:)(uint64_t a1, double a2, double a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  char v18;
  id v19;
  double v20;
  CLLocationDegrees v21;
  double v22;
  CLLocationDegrees v23;
  _BOOL4 v24;
  uint64_t v26;
  int v27;
  int v28;
  CLLocationCoordinate2D v29;

  v7 = sub_21C5E304C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  v13 = *((_DWORD *)v3 + 2);
  v12 = *((_DWORD *)v3 + 3);
  sub_21C59F018((uint64_t)&v26);
  v14 = (void *)MEMORY[0x22077FAFC](&v26);
  sub_21C5317A0((uint64_t)&v26);
  if (!v14)
    return 0;
  v26 = v11;
  v27 = v13;
  v28 = v12;
  v15 = sub_21C59FBDC(a2, a3, a1, sub_21C59FBD4, 0);
  v17 = v16;
  sub_21C5E3430();
  v18 = sub_21C5E3034();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v19 = 0;
  if ((v18 & 1) != 0)
    v19 = v14;
  objc_msgSend(v14, sel_convertPoint_toCoordinateFromView_, v19, v15, v17);
  v21 = v20;
  v23 = v22;

  v29.latitude = v21;
  v29.longitude = v23;
  v24 = CLLocationCoordinate2DIsValid(v29);

  if (v24)
    return *(_QWORD *)&v21;
  else
    return 0;
}

double sub_21C59FBD4(double a1, double a2)
{
  return a1 + a2;
}

double sub_21C59FBDC(double a1, double a2, uint64_t a3, double (*a4)(double, double), uint64_t a5)
{
  int *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  double v21;
  char v22;
  double v23;
  double (*v24)(double, double);
  int v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  char v31;
  char v32;
  uint64_t v33;
  void (*v34)(double, double);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double (*v39)(double, double);
  __n128 v40;
  int v41;
  unint64_t v42;
  int v43;

  v38 = a5;
  v39 = a4;
  v8 = type metadata accessor for MapSizingInformation();
  MEMORY[0x24BDAC7A8](v8);
  v37 = (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_21C5E304C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = ((uint64_t (*)(uint64_t))MEMORY[0x24BDAC7A8])(v10);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v36 - v16;
  v18 = *v5;
  v15.n128_u64[0] = *(_QWORD *)(v5 + 1);
  v40 = v15;
  v19 = v5[3];
  sub_21C5E3430();
  if ((sub_21C5E3040() & 1) == 0)
  {
    v41 = v18;
    v42 = v40.n128_u64[0];
    v43 = v19;
    v20 = sub_21C59F154();
    if ((v22 & 1) == 0)
    {
      v23 = v21;
      v24 = v39;
      a1 = v39(a1, *(double *)&v20);
      a2 = v24(a2, v23);
    }
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v10);
  v25 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  v26 = *(void (**)(char *, uint64_t))(v11 + 8);
  if (v25 == *MEMORY[0x24BDECDE0])
  {
    v26(v14, v10);
    v27 = v37;
    sub_21C59EE84(v37);
    v28 = sub_21C5A08B8();
    v30 = v29;
    v32 = v31;
    v33 = sub_21C59F5F8(v27);
    if ((v32 & 1) == 0)
    {
      v34 = (void (*)(double, double))v39;
      a1 = ((double (*)(uint64_t, double, double))v39)(v33, a1, *(double *)&v28);
      v34(a2, v30);
    }
    v14 = v17;
  }
  else
  {
    v26(v17, v10);
  }
  v26(v14, v10);
  return a1;
}

uint64_t MapProxy.convert<A>(_:to:)(uint64_t a1, double a2, double a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  void *v14;
  char v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v23;
  int v24;
  int v25;

  v7 = sub_21C5E304C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  v12 = *((_DWORD *)v3 + 2);
  v13 = *((_DWORD *)v3 + 3);
  sub_21C59F018((uint64_t)&v23);
  v14 = (void *)MEMORY[0x22077FAFC](&v23);
  sub_21C5317A0((uint64_t)&v23);
  if (v14)
  {
    sub_21C5E3430();
    v15 = sub_21C5E3034();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    if ((v15 & 1) != 0)
      v16 = v14;
    else
      v16 = 0;
    objc_msgSend(v14, sel_convertCoordinate_toPointToView_, v16, a2, a3);
    v18 = v17;
    v20 = v19;

    if (sub_21C59F0C8(v18, v20))
    {
      v23 = v11;
      v24 = v12;
      v25 = v13;
      v21 = sub_21C59FBDC(v18, v20, a1, sub_21C59FFC4, 0);

      return *(_QWORD *)&v21;
    }

  }
  return 0;
}

double sub_21C59FFC4(double a1, double a2)
{
  return a1 - a2;
}

uint64_t sub_21C59FFCC()
{
  return swift_getOpaqueTypeConformance2();
}

_QWORD *sub_21C5A0000(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t sub_21C5A002C()
{
  return swift_release();
}

_QWORD *sub_21C5A0034(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_21C5A006C(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MapContentList(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MapContentList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for MapReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapReader);
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for MapProxy()
{
  return &type metadata for MapProxy;
}

uint64_t sub_21C5A0148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_255289858);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_255289878);
  sub_21C59EE40((unint64_t *)&unk_255289880, &qword_255289878);
  v0 = sub_21C5E3424();
  sub_21C59EE40(&qword_255289868, &qword_255289858);
  v1 = MEMORY[0x24BDEFF58];
  MEMORY[0x22077F9A0](MEMORY[0x24BDEFF58], v0);
  v2 = sub_21C5E3424();
  return MEMORY[0x22077F9A0](v1, v2);
}

uint64_t type metadata accessor for MapPreferencePromise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapPreferencePromise);
}

uint64_t *sub_21C5A0220(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_21C5E2F80();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289860);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_21C5A0308(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_21C5E2F80();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

char *sub_21C5A0370(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_21C5E2F80();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289860);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_21C5A042C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;

  v6 = sub_21C5E2F80();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289860);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_21C5A0534(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_21C5E2F80();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289860);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_21C5A05F0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;

  v6 = sub_21C5E2F80();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289860);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

uint64_t sub_21C5A06F8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5A0704(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289860);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_21C5A0744()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5A0750(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289860);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_21C5A0794()
{
  unint64_t v0;

  sub_21C5A0808();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_21C5A0808()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255289B40[0])
  {
    sub_21C5E2F80();
    v0 = sub_21C5E3BB0();
    if (!v1)
      atomic_store(v0, qword_255289B40);
  }
}

uint64_t sub_21C5A085C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for MapReaderPreferenceKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapReaderPreferenceKey);
}

uint64_t sub_21C5A0870()
{
  return sub_21C59EE40(&qword_255289868, &qword_255289858);
}

uint64_t sub_21C5A0894()
{
  return sub_21C59EE40((unint64_t *)&unk_255289880, &qword_255289878);
}

uint64_t sub_21C5A08B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  double v15;
  double v16;
  void (*v17)(char *, uint64_t);
  uint64_t result;
  double v19;
  double v20;
  uint64_t v21;

  v1 = sub_21C5E33F4();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289860);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v21 - v9;
  if ((sub_21C5E3040() & 1) != 0)
    goto LABEL_7;
  sub_21C531B18(v0, (uint64_t)v10, &qword_255289860);
  v11 = sub_21C5E2F80();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11) == 1)
  {
    v14 = (uint64_t)v10;
LABEL_6:
    sub_21C524980(v14, &qword_255289860);
LABEL_7:
    *(double *)&result = 0.0;
    return result;
  }
  sub_21C5E2F68();
  v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v12 + 8);
  v17(v10, v11);
  sub_21C531B18(v0, (uint64_t)v8, &qword_255289860);
  if (v13(v8, 1, v11) == 1)
  {
    v14 = (uint64_t)v8;
    goto LABEL_6;
  }
  sub_21C5E343C();
  sub_21C5E2F74();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v17(v8, v11);
  *(double *)&result = v20 - v16;
  return result;
}

uint64_t sub_21C5A0AB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t sub_21C5A0AD4(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t, __n128);
  uint64_t v16;
  uint64_t v18;

  v7 = sub_21C5E3BB0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v18 - v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 32);
  v15(v10, a1, v7, v12);
  v16 = *(_QWORD *)(a4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v10, 1, a4) == 1)
  {
    a2();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v14, v10, a4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, a4);
  }
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v15)(a1, v14, v7);
}

uint64_t sub_21C5A0C08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21C5A0AB8(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_21C5A0C10(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  return sub_21C5A0AD4(a1, a2, a3, *(_QWORD *)(a4 + 16));
}

uint64_t sub_21C5A0C20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MapSizingInformation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21C5A0C64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289BC8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_21C5A0CDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_255289BC8) - 8) + 80);
  return sub_21C59ECF4(a1, *(uint64_t (**)(_QWORD *))(v2 + 32), *(_QWORD *)(v2 + 40), v2 + ((v5 + 48) & ~v5), a2);
}

void static MapStyle.StandardEmphasis.weatherStandard.getter(_QWORD *a1@<X8>)
{
  *a1 = *MEMORY[0x24BDDB010];
}

void static MapStyle.StandardEmphasis.weatherWind.getter(_QWORD *a1@<X8>)
{
  *a1 = *MEMORY[0x24BDDB018];
}

ValueMetadata *type metadata accessor for DynamicViewContentOffsetTraitKey()
{
  return &type metadata for DynamicViewContentOffsetTraitKey;
}

void sub_21C5A0D80(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t sub_21C5A0D90()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void sub_21C5A0E14(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  id v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  double v73;
  double v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  char v81;

  v3 = v2;
  sub_21C5AB764(a1, (uint64_t)&v76);
  if (v81)
  {
    if (v81 == 1)
    {
      v5 = v76;
      v6 = v77;
      v7 = v78;
      v8 = v79;
      objc_msgSend(v2, sel_visibleMapRect);
      if (v5 != v12 || v6 != v9 || v7 != v10 || v8 != v11)
      {
        if (qword_2552878E0 != -1)
          swift_once();
        v16 = sub_21C5E2E18();
        __swift_project_value_buffer(v16, (uint64_t)qword_255293A40);
        v17 = sub_21C5E2E00();
        v18 = sub_21C5E3B2C();
        if (os_log_type_enabled(v17, v18))
        {
          v19 = (uint8_t *)swift_slowAlloc();
          v20 = swift_slowAlloc();
          *(_DWORD *)v19 = 136380675;
          v75 = v20;
          type metadata accessor for MKMapRect(0);
          v21 = sub_21C5E3970();
          sub_21C53083C(v21, v22, &v75);
          sub_21C5E3BC8();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_21C51F000, v17, v18, "model -> mapview %{private}s", v19, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x22077FA6C](v20, -1, -1);
          MEMORY[0x22077FA6C](v19, -1, -1);
        }

        objc_msgSend(v3, sel_setVisibleMapRect_animated_, a2 & 1, v5, v6, v7, v8);
        return;
      }
      if (qword_2552878E0 != -1)
        swift_once();
      v70 = sub_21C5E2E18();
      __swift_project_value_buffer(v70, (uint64_t)qword_255293A40);
      v58 = sub_21C5E2E00();
      v59 = sub_21C5E3B2C();
      if (!os_log_type_enabled(v58, v59))
      {
LABEL_58:

        return;
      }
      v60 = (uint8_t *)swift_slowAlloc();
      v61 = swift_slowAlloc();
      *(_DWORD *)v60 = 136380675;
      v75 = v61;
      type metadata accessor for MKMapRect(0);
LABEL_57:
      v71 = sub_21C5E3970();
      sub_21C53083C(v71, v72, &v75);
      sub_21C5E3BC8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21C51F000, v58, v59, "model == mapview %{private}s", v60, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22077FA6C](v61, -1, -1);
      MEMORY[0x22077FA6C](v60, -1, -1);
      goto LABEL_58;
    }
    v49 = v76;
    v50 = v77;
    v51 = v78;
    v52 = v79;
    objc_msgSend(v2, sel_region);
    if (vabdd_f64(v49, v56) < 0.00000000999999994
      && vabdd_f64(v50, v53) < 0.00000000999999994
      && vabdd_f64(v51, v54) < 0.00000000999999994
      && vabdd_f64(v52, v55) < 0.00000000999999994)
    {
      if (qword_2552878E0 != -1)
        swift_once();
      v57 = sub_21C5E2E18();
      __swift_project_value_buffer(v57, (uint64_t)qword_255293A40);
      v58 = sub_21C5E2E00();
      v59 = sub_21C5E3B2C();
      if (!os_log_type_enabled(v58, v59))
        goto LABEL_58;
      v60 = (uint8_t *)swift_slowAlloc();
      v61 = swift_slowAlloc();
      *(_DWORD *)v60 = 136380675;
      v75 = v61;
      type metadata accessor for MKCoordinateRegion(0);
      goto LABEL_57;
    }
    if (qword_2552878E0 != -1)
      swift_once();
    v62 = sub_21C5E2E18();
    __swift_project_value_buffer(v62, (uint64_t)qword_255293A40);
    v63 = sub_21C5E2E00();
    v64 = sub_21C5E3B2C();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc();
      v66 = swift_slowAlloc();
      *(_DWORD *)v65 = 136380675;
      v75 = v66;
      type metadata accessor for MKCoordinateRegion(0);
      v67 = sub_21C5E3970();
      sub_21C53083C(v67, v68, &v75);
      sub_21C5E3BC8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21C51F000, v63, v64, "model -> mapview %{private}s", v65, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22077FA6C](v66, -1, -1);
      MEMORY[0x22077FA6C](v65, -1, -1);
    }

    objc_msgSend(v3, sel_setRegion_animated_, a2 & 1, v49, v50, v51, v52);
  }
  else
  {
    v23 = v76;
    v24 = v79;
    v73 = v77;
    v74 = v78;
    v25 = v80;
    v26 = objc_msgSend(v2, sel_camera);
    objc_msgSend(v26, sel_centerCoordinate);
    v28 = v27;
    v30 = v29;
    objc_msgSend(v26, sel_centerCoordinateDistance);
    v32 = v31;
    objc_msgSend(v26, sel_heading);
    v34 = v33;
    objc_msgSend(v26, sel_pitch);
    v36 = v35;

    if (v23 == v28 && v73 == v30 && v24 == v34 && v25 == v36 && v74 == v32)
    {
      if (qword_2552878E0 != -1)
        swift_once();
      v69 = sub_21C5E2E18();
      __swift_project_value_buffer(v69, (uint64_t)qword_255293A40);
      v58 = sub_21C5E2E00();
      v59 = sub_21C5E3B2C();
      if (!os_log_type_enabled(v58, v59))
        goto LABEL_58;
      v60 = (uint8_t *)swift_slowAlloc();
      v61 = swift_slowAlloc();
      v75 = v61;
      *(_DWORD *)v60 = 136380675;
      goto LABEL_57;
    }
    if (qword_2552878E0 != -1)
      swift_once();
    v41 = sub_21C5E2E18();
    __swift_project_value_buffer(v41, (uint64_t)qword_255293A40);
    v42 = sub_21C5E2E00();
    v43 = sub_21C5E3B2C();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc();
      v45 = swift_slowAlloc();
      v75 = v45;
      *(_DWORD *)v44 = 136380675;
      v46 = sub_21C5E3970();
      sub_21C53083C(v46, v47, &v75);
      sub_21C5E3BC8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21C51F000, v42, v43, "model -> mapview %{private}s", v44, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22077FA6C](v45, -1, -1);
      MEMORY[0x22077FA6C](v44, -1, -1);
    }

    v48 = objc_msgSend((id)objc_opt_self(), sel_cameraLookingAtCenterCoordinate_fromDistance_pitch_heading_, v23, v73, v74, v25, v24);
    objc_msgSend(v3, sel_setCamera_animated_, v48, a2 & 1);

  }
}

uint64_t sub_21C5A16CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  int v5;

  v2 = v1 + *(int *)(a1 + 68);
  v3 = *(_QWORD *)v2;
  v4 = *(_BYTE *)(v2 + 8);
  sub_21C531A90(*(_QWORD *)v2, v4);
  v5 = sub_21C52FE24(v3, v4);
  sub_21C531A84(v3, v4);
  return v5 & 0xFFFFFF01;
}

uint64_t sub_21C5A1728(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v2 = v1 + *(int *)(a1 + 76);
  v3 = *(_QWORD *)v2;
  v4 = *(_BYTE *)(v2 + 8);
  sub_21C531A90(*(_QWORD *)v2, v4);
  v5 = sub_21C52D7BC(v3, v4);
  sub_21C531A84(v3, v4);
  return v5;
}

uint64_t sub_21C5A1784@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v43;
  __int128 v45;
  uint64_t v46;

  v13 = *a1;
  v38 = a1[2];
  v39 = a1[1];
  v36 = a1[4];
  v37 = a1[3];
  v35 = a1[5];
  v40 = *a2;
  v41 = a1[6];
  v14 = *(_QWORD *)a4;
  v15 = *(_QWORD *)(a4 + 8);
  v34 = *(_BYTE *)(a4 + 16);
  v16 = (int *)type metadata accessor for _MapView(0, a6, a7, a8);
  v17 = (char *)a9 + v16[11];
  v18 = type metadata accessor for _DefaultAnnotatedMapContent(0, a6, a7, a8);
  v43 = v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = v16[12];
  if (qword_2552878F0 != -1)
    swift_once();
  *(_QWORD *)((char *)a9 + v19) = qword_25528AC78;
  v20 = v16[13];
  *((_BYTE *)a9 + v20) = 0;
  v21 = (_QWORD *)((char *)a9 + v16[14]);
  v21[1] = 0;
  v21[2] = 0;
  *v21 = 0;
  v22 = (_QWORD *)((char *)a9 + v16[15]);
  *v22 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255289DB0);
  swift_storeEnumTagMultiPayload();
  v23 = (_QWORD *)((char *)a9 + v16[16]);
  *v23 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2552897E0);
  swift_storeEnumTagMultiPayload();
  v24 = (char *)a9 + v16[17];
  *(_QWORD *)v24 = swift_getKeyPath();
  v24[8] = 0;
  v25 = (_QWORD *)((char *)a9 + v16[18]);
  *v25 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255289DC0);
  swift_storeEnumTagMultiPayload();
  v26 = (char *)a9 + v16[19];
  *(_QWORD *)v26 = swift_getKeyPath();
  v26[8] = 0;
  *a9 = v13;
  a9[1] = v39;
  a9[2] = v38;
  a9[3] = v37;
  a9[4] = v36;
  a9[5] = v35;
  a9[6] = v41;
  *(_QWORD *)((char *)a9 + v19) = v40;
  *((_BYTE *)a9 + v20) = a3 & 1;
  if (v15)
  {
    sub_21C5E3A9C();
    swift_retain();
    swift_retain();
    v27 = sub_21C5E3A90();
    v28 = swift_allocObject();
    v29 = MEMORY[0x24BEE6930];
    *(_QWORD *)(v28 + 16) = v27;
    *(_QWORD *)(v28 + 24) = v29;
    *(_QWORD *)(v28 + 32) = v14;
    *(_QWORD *)(v28 + 40) = v15;
    *(_BYTE *)(v28 + 48) = v34;
    swift_retain();
    swift_retain();
    v30 = sub_21C5E3A90();
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = v30;
    *(_QWORD *)(v31 + 24) = v29;
    *(_QWORD *)(v31 + 32) = v14;
    *(_QWORD *)(v31 + 40) = v15;
    *(_BYTE *)(v31 + 48) = v34;
    type metadata accessor for MKUserTrackingMode(0);
    sub_21C5E37E4();
    sub_21C5ABF20(v14, v15);
    sub_21C5ABF20(*v21, v21[1]);
    *(_OWORD *)v21 = v45;
    v21[2] = v46;
  }
  v32 = sub_21C5E3BB0();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 40))(v43, a5, v32);
}

_QWORD *sub_21C5A1AE0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289DA8);
  result = MEMORY[0x22077ECE0](&v4, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_21C5A1B2C()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_255289DA8);
  return sub_21C5E37CC();
}

_QWORD *sub_21C5A1B8C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  void (*v47)(char *, __n128);
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[7];

  v2 = v1;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v51 = *(_QWORD *)(a1 + 32);
  v52 = v4;
  v6 = type metadata accessor for _DefaultAnnotatedMapContent(255, v5, v4, v51);
  v7 = sub_21C5E3BB0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v49 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v44 - v11;
  v13 = sub_21C5E3BB0();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v44 - v16;
  v54 = a1;
  v18 = (char *)v2 + *(int *)(a1 + 44);
  v47 = *(void (**)(char *, __n128))(v8 + 16);
  v48 = v18;
  v47(v12, v15);
  v19 = *(_QWORD *)(v6 - 8);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v20 = v46(v12, 1, v6);
  v53 = v5;
  v50 = v14;
  v45 = v8;
  if (v20 == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v17, 1, 1, v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, &v12[*(int *)(v6 + 56)], v13);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v12, v6);
  }
  v21 = v13;
  v22 = v49;
  ((void (*)(char *, char *, uint64_t))v47)(v49, v48, v7);
  if (v46(v22, 1, v6) == 1)
  {
    v23 = 0;
    v24 = 0;
    v25 = v53;
    v26 = v50;
    v27 = v45;
  }
  else
  {
    v28 = (uint64_t *)&v22[*(int *)(v6 + 60)];
    v23 = *v28;
    v24 = v28[1];
    sub_21C531AAC(*v28);
    v27 = v19;
    v7 = v6;
    v25 = v53;
    v26 = v50;
  }
  (*(void (**)(char *, uint64_t))(v27 + 8))(v22, v7);
  type metadata accessor for MapViewCoordinator(0, v25, v52, v51);
  v29 = sub_21C5AB6E4((uint64_t)v17, v23, v24);
  sub_21C531A9C(v23);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v21);
  v30 = (uint64_t *)((char *)v2 + *(int *)(v54 + 56));
  v31 = *v30;
  v32 = v30[1];
  v33 = v30[2];
  sub_21C5AB738(*v30, v32);
  v34 = (_QWORD *)((char *)v29 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v29) + 0x70));
  v35 = *v34;
  v36 = v34[1];
  *v34 = v31;
  v34[1] = v32;
  v34[2] = v33;
  sub_21C5ABF20(v35, v36);
  v37 = v2[1];
  v38 = v2[2];
  v39 = v2[3];
  v40 = v2[4];
  v41 = v2[5];
  v42 = v2[6];
  v55[0] = *v2;
  v55[1] = v37;
  v55[2] = v38;
  v55[3] = v39;
  v55[4] = v40;
  v55[5] = v41;
  v55[6] = v42;
  sub_21C56C0C0(v55[0], v37);
  sub_21C5A49E8((uint64_t)v55);
  return v29;
}

uint64_t sub_21C5A1E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22077F9A0](&unk_21C5E9418, a3);
  return sub_21C5E33C4();
}

uint64_t sub_21C5A1ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22077F9A0](&unk_21C5E9418, a3);
  return sub_21C5E3370();
}

void sub_21C5A1F30(uint64_t a1)
{
  MEMORY[0x22077F9A0](&unk_21C5E9418, a1);
  sub_21C5E33B8();
  __break(1u);
}

uint64_t sub_21C5A1F60(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v18;
  void *v19;
  _QWORD *v20;

  v19 = a1;
  v5 = sub_21C5E328C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x22077F9A0](&unk_21C5E9418, a3, v7);
  v10 = sub_21C5E3544();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v18 - v12;
  sub_21C5E3538();
  v14 = sub_21C5E2EB4();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  if (v14)
  {
    sub_21C5E3538();
    v15 = sub_21C5E2EA8();
    swift_release();
    LOBYTE(v14) = v15 ^ 1;
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_21C5E3520();
  v16 = v20;
  sub_21C5E352C();
  sub_21C5A20EC(v19, v16, (uint64_t)v9, v14 & 1, a3);

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_21C5A20EC(void *a1, _QWORD *a2, uint64_t a3, char a4, uint64_t a5)
{
  __int128 *v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(void);
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  void (*v41)(__int128 *__return_ptr, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void *v73;
  _OWORD v74[2];
  __int16 v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90[8];

  v9 = *(_QWORD *)(a5 + 16);
  v65 = type metadata accessor for _DefaultAnnotatedMapContent(255, v9, *(_QWORD *)(a5 + 24), *(_QWORD *)(a5 + 32));
  v64 = sub_21C5E3BB0();
  v70 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64);
  v68 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v63 = (char *)&v61 - v13;
  v61 = v9;
  v67 = sub_21C5E3BB0();
  v66 = *(_QWORD *)(v67 - 8);
  *(_QWORD *)&v14 = MEMORY[0x24BDAC7A8](v67).n128_u64[0];
  v71 = (char *)&v61 - v15;
  v73 = a1;
  v69 = a2;
  objc_msgSend(a1, sel_setDelegate_, a2, v14);
  v16 = *((_QWORD *)v5 + 6);
  v17 = v5[1];
  v82 = *v5;
  v83 = v17;
  v84 = v5[2];
  v85 = v16;
  sub_21C56D41C((uint64_t)v74);
  sub_21C5AB764((uint64_t)v74, (uint64_t)v90);
  sub_21C5A0E14((uint64_t)v90, a4);
  v72 = a5;
  sub_21C5A25F8(a1, a4, a5);
  v18 = *(int *)(a5 + 48);
  v62 = v5;
  *(_QWORD *)&v82 = *(_QWORD *)((char *)v5 + v18);
  sub_21C5A26E4(a1, (unint64_t *)&v82);
  sub_21C5AB7A0();
  sub_21C5E3298();
  v19 = v82;
  v20 = v83;
  v22 = v86;
  v21 = v87;
  v74[0] = v82;
  v74[1] = v83;
  v75 = v84;
  v76 = *((_QWORD *)&v84 + 1);
  v77 = v85;
  v78 = v86;
  v79 = v87;
  v80 = v88;
  v81 = v89;
  v23 = v73;
  sub_21C5AB9D8(v73, (uint64_t)v74);
  v24 = v62;
  v25 = v64;
  v26 = v20;
  v27 = v65;
  sub_21C5319E4(v19, *((uint64_t *)&v19 + 1), v26);
  v28 = v22;
  v29 = v63;
  v30 = v21;
  v31 = v70;
  v32 = v72;
  sub_21C531A18(v28, v30);
  sub_21C5A276C(v23, v32);
  v33 = *(void (**)(void))(v31 + 16);
  ((void (*)(char *, char *, uint64_t))v33)(v29, (char *)v24 + *(int *)(v32 + 44), v25);
  v34 = *(_QWORD *)(v27 - 8);
  v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
  if (v35(v29, 1, v27) == 1)
  {
    v36 = v66;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v25);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v71, 1, 1);
    v37 = v67;
  }
  else
  {
    v38 = &v29[*(int *)(v27 + 56)];
    v36 = v66;
    v39 = v29;
    v37 = v67;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v71, v38, v67);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v39, v27);
  }
  v40 = v68;
  v33();
  if (v35(v40, 1, v27) == 1)
  {
    v41 = 0;
    v42 = v25;
    v43 = 0;
    v34 = v70;
  }
  else
  {
    v44 = (uint64_t *)&v40[*(int *)(v27 + 60)];
    v41 = (void (*)(__int128 *__return_ptr, uint64_t))*v44;
    v43 = v44[1];
    sub_21C531AAC(*v44);
    v42 = v27;
  }
  v45 = (uint64_t)v71;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v40, v42);
  v46 = v69;
  sub_21C5A3BAC(v73, v45, v41, v43);
  sub_21C531A9C((uint64_t)v41);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v45, v37);
  v47 = v24[1];
  v48 = v24[2];
  v49 = v24[3];
  v50 = v24[4];
  v51 = v24[5];
  v52 = v24[6];
  *(_QWORD *)&v82 = *v24;
  *((_QWORD *)&v82 + 1) = v47;
  *(_QWORD *)&v83 = v48;
  *((_QWORD *)&v83 + 1) = v49;
  *(_QWORD *)&v84 = v50;
  *((_QWORD *)&v84 + 1) = v51;
  v85 = v52;
  sub_21C56C0C0(v82, v47);
  sub_21C5A49E8((uint64_t)&v82);
  v53 = (_QWORD *)((char *)v24 + *(int *)(v72 + 56));
  v54 = *v53;
  v55 = v53[1];
  v56 = v53[2];
  sub_21C5AB738(*v53, v55);
  v57 = (_QWORD *)((char *)v46 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v46) + 0x70));
  v58 = *v57;
  v59 = v57[1];
  *v57 = v54;
  v57[1] = v55;
  v57[2] = v56;
  return sub_21C5ABF20(v58, v59);
}

_QWORD *sub_21C5A25D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = sub_21C5A1B8C(a1);
  *a2 = result;
  return result;
}

id sub_21C5A25F8(void *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  result = objc_msgSend(a1, sel_setShowsUserLocation_, *(unsigned __int8 *)(v4 + *(int *)(a3 + 52)));
  v9 = (uint64_t *)(v4 + *(int *)(a3 + 56));
  v10 = v9[1];
  if (v10)
  {
    v15 = *v9;
    v16 = v9[2];
    swift_retain();
    swift_retain();
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289D90);
    MEMORY[0x22077ECE0](&v17, v11);
    swift_release();
    swift_release();
    if (v17 == 1)
      v12 = 1;
    else
      v12 = 2 * (v17 == 2);
    if ((_DWORD)v12 != 2 || *(_QWORD *)(v4 + 8) >> 62 == 0)
      v14 = v12;
    else
      v14 = 1;
    return objc_msgSend(a1, sel_setUserTrackingMode_animated_, v14, a2 & 1, v15, v10, v16);
  }
  return result;
}

id sub_21C5A26E4(void *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  objc_msgSend(a1, sel_setScrollEnabled_, *a2 & 1);
  objc_msgSend(a1, sel_setZoomEnabled_, (v4 >> 1) & 1);
  if (*(_QWORD *)(v2 + 8) >> 62)
    v5 = 0;
  else
    v5 = (v4 >> 2) & 1;
  if (*(_QWORD *)(v2 + 8) >> 62)
    v6 = 0;
  else
    v6 = (v4 >> 3) & 1;
  objc_msgSend(a1, sel_setRotateEnabled_, v5);
  return objc_msgSend(a1, sel_setPitchEnabled_, v6);
}

id sub_21C5A276C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unsigned int (*v78)(char *, uint64_t, uint64_t);
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  _BYTE *v94;
  char v95;
  uint64_t v96;
  void (*v97)(_QWORD, _QWORD, _QWORD);
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  char *v102;
  char v103;
  void (*v104)(char *, uint64_t);
  void (*v105)(char *, uint64_t);
  uint64_t v106;
  void (*v107)(char *, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  unsigned int (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _WORD *v127;
  uint64_t v128;
  char v129;
  char v130;
  void (*v131)(char *, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _WORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  uint64_t v141;
  unsigned int (*v142)(uint64_t, uint64_t, uint64_t);
  uint64_t v143;
  _BYTE *v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  int *v148;
  _BYTE *v149;
  uint64_t v150;
  _BYTE *v151;
  char *v152;
  char v153;
  uint64_t v154;
  void (*v155)(uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  _QWORD *v172;
  uint64_t v173;
  void (*v174)(char *, uint64_t);
  uint64_t v175;
  _BYTE *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  _WORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  uint64_t v188;
  uint64_t v189;
  _BYTE *v190;
  uint64_t v191;
  _BYTE *v192;
  _WORD *v193;
  uint64_t v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  void (*v206)(uint64_t, uint64_t);
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  int *v211;
  id v212;

  v212 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289500);
  MEMORY[0x24BDAC7A8](v4);
  v191 = (uint64_t)&v166 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v189 = (uint64_t)&v166 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v185 = (uint64_t)&v166 - v9;
  v203 = type metadata accessor for MapUserLocationButtonConfig(0);
  v184 = *(_QWORD *)(v203 - 8);
  MEMORY[0x24BDAC7A8](v203);
  v192 = (char *)&v166 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v190 = (char *)&v166 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v187 = (char *)&v166 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289508);
  MEMORY[0x24BDAC7A8](v15);
  v181 = (uint64_t)&v166 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v178 = (uint64_t)&v166 - v18;
  v199 = type metadata accessor for MapCompassConfig(0);
  v177 = *(_QWORD *)(v199 - 8);
  MEMORY[0x24BDAC7A8](v199);
  v182 = (_WORD *)((char *)&v166 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v20);
  v193 = (_WORD *)((char *)&v166 - v21);
  v180 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v208 = (char *)&v166 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v205 = (char *)&v166 - v25;
  v202 = sub_21C5E31A8();
  v174 = *(void (**)(char *, uint64_t))(v202 - 8);
  MEMORY[0x24BDAC7A8](v202);
  v188 = (uint64_t)&v166 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v200 = (char *)&v166 - v28;
  MEMORY[0x24BDAC7A8](v29);
  v173 = (uint64_t)&v166 - v30;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289510);
  MEMORY[0x24BDAC7A8](v31);
  v175 = (uint64_t)&v166 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33);
  v172 = (uint64_t *)((char *)&v166 - v34);
  MEMORY[0x24BDAC7A8](v35);
  v168 = (uint64_t)&v166 - v36;
  v197 = type metadata accessor for MapPitchToggleConfig(0);
  v194 = *(_QWORD *)(v197 - 8);
  MEMORY[0x24BDAC7A8](v197);
  v176 = (char *)&v166 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v38);
  v195 = (char *)&v166 - v39;
  MEMORY[0x24BDAC7A8](v40);
  v171 = (char *)&v166 - v41;
  v42 = sub_21C5E2E78();
  v209 = *(_QWORD *)(v42 - 8);
  v210 = v42;
  MEMORY[0x24BDAC7A8](v42);
  v201 = (char *)&v166 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289518);
  MEMORY[0x24BDAC7A8](v44);
  v207 = (uint64_t)&v166 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v46);
  v48 = (char *)&v166 - v47;
  v49 = type metadata accessor for MapScaleViewConfig(0);
  v50 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v52 = (char *)&v166 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v53);
  v55 = (char *)&v166 - v54;
  v56 = type metadata accessor for MapControlsConfig();
  MEMORY[0x24BDAC7A8](v56);
  v186 = (uint64_t)&v166 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v58);
  v183 = (uint64_t)&v166 - v59;
  MEMORY[0x24BDAC7A8](v60);
  v179 = (char *)&v166 - v61;
  MEMORY[0x24BDAC7A8](v62);
  v198 = (uint64_t)&v166 - v63;
  MEMORY[0x24BDAC7A8](v64);
  v196 = (uint64_t)&v166 - v65;
  MEMORY[0x24BDAC7A8](v66);
  v170 = (uint64_t)&v166 - v67;
  MEMORY[0x24BDAC7A8](v68);
  v169 = (uint64_t)&v166 - v69;
  MEMORY[0x24BDAC7A8](v70);
  v167 = (uint64_t)&v166 - v71;
  MEMORY[0x24BDAC7A8](v72);
  v74 = (char *)&v166 - v73;
  MEMORY[0x24BDAC7A8](v75);
  v77 = (char *)&v166 - v76;
  v204 = a2;
  sub_21C52FFFC((uint64_t)&v166 - v76);
  v211 = (int *)v56;
  sub_21C531B18((uint64_t)&v77[*(int *)(v56 + 20)], (uint64_t)v48, &qword_255289518);
  v78 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
  if (v78(v48, 1, v49) == 1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v209 + 104))(&v55[*(int *)(v49 + 28)], *MEMORY[0x24BDEB498], v210);
    v55[2] = 0;
    *(_WORD *)v55 = 512;
    sub_21C524980((uint64_t)v48, &qword_255289518);
  }
  else
  {
    sub_21C52AAD4((uint64_t)v48, (uint64_t)v55, type metadata accessor for MapScaleViewConfig);
  }
  sub_21C52A88C((uint64_t)v77, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
  v79 = sub_21C5A1728(v204);
  if (*v55 == 1)
    __asm { BR              X9 }
  sub_21C52A88C((uint64_t)v55, type metadata accessor for MapScaleViewConfig);
  objc_msgSend(v212, sel__setScaleVisibility_, 1);
  sub_21C52FFFC((uint64_t)v74);
  v80 = v207;
  sub_21C531B18((uint64_t)&v74[v211[5]], v207, &qword_255289518);
  if (v78((char *)v80, 1, v49) == 1)
  {
    v82 = v209;
    v81 = v210;
    (*(void (**)(char *, _QWORD, uint64_t))(v209 + 104))(&v52[*(int *)(v49 + 28)], *MEMORY[0x24BDEB498], v210);
    v52[2] = 0;
    *(_WORD *)v52 = 512;
    sub_21C524980(v80, &qword_255289518);
  }
  else
  {
    sub_21C52AAD4(v80, (uint64_t)v52, type metadata accessor for MapScaleViewConfig);
    v82 = v209;
    v81 = v210;
  }
  v83 = (uint64_t)v201;
  sub_21C52A88C((uint64_t)v74, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
  v84 = v204;
  v207 = v2 + *(int *)(v204 + 64);
  sub_21C52D1D4(v83);
  v85 = sub_21C59A5D0(v83);
  v206 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
  v206(v83, v81);
  v86 = (uint64_t)v52;
  v87 = v2;
  v88 = v84;
  sub_21C52A88C(v86, type metadata accessor for MapScaleViewConfig);
  v89 = v212;
  objc_msgSend(v212, sel__setScaleControlSize_, v85);
  v90 = v167;
  sub_21C52FFFC(v167);
  v91 = v168;
  sub_21C531B18(v90, v168, &qword_255289510);
  v92 = v82;
  v93 = (int *)v197;
  v194 = *(_QWORD *)(v194 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v194)(v91, 1, v197) == 1)
  {
    v94 = v171;
    sub_21C5E319C();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v92 + 104))(&v94[v93[7]], *MEMORY[0x24BDEB498], v81);
    v94[1] = 2;
    *(_QWORD *)&v94[v93[8]] = 0;
    *v94 = 0;
    sub_21C524980(v91, &qword_255289510);
  }
  else
  {
    v94 = v171;
    sub_21C52AAD4(v91, (uint64_t)v171, type metadata accessor for MapPitchToggleConfig);
  }
  sub_21C52A88C(v90, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
  v95 = sub_21C5A1728(v88);
  if (*v94 == 1)
    __asm { BR              X9 }
  sub_21C52A88C((uint64_t)v94, type metadata accessor for MapPitchToggleConfig);
  objc_msgSend(v89, sel_setPitchButtonVisibility_, 1);
  v96 = v169;
  sub_21C52FFFC(v169);
  v97 = (void (*)(_QWORD, _QWORD, _QWORD))v172;
  sub_21C531B18(v96, (uint64_t)v172, &qword_255289510);
  if (((unsigned int (*)(_QWORD, uint64_t, int *))v194)(v97, 1, v93) == 1)
  {
    v98 = v195;
    sub_21C5E319C();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v209 + 104))(&v98[v93[7]], *MEMORY[0x24BDEB498], v81);
    v98[1] = 2;
    *(_QWORD *)&v98[v93[8]] = 0;
    *v98 = 0;
    sub_21C524980((uint64_t)v97, &qword_255289510);
  }
  else
  {
    v98 = v195;
    sub_21C52AAD4((uint64_t)v97, (uint64_t)v195, type metadata accessor for MapPitchToggleConfig);
  }
  sub_21C52A88C(v96, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
  v99 = v173;
  v171 = (_BYTE *)(v87 + *(int *)(v88 + 60));
  sub_21C52D1A8(v173);
  v100 = (uint64_t)v98;
  v101 = &v98[v93[6]];
  v102 = v200;
  sub_21C5E319C();
  v103 = sub_21C5E3178();
  v104 = v174;
  v195 = (_BYTE *)v87;
  v105 = (void (*)(char *, uint64_t))*((_QWORD *)v174 + 1);
  v106 = v202;
  v105(v102, v202);
  v107 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v104 + 2);
  if ((v103 & 1) != 0)
    v108 = v99;
  else
    v108 = (uint64_t)v101;
  v172 = (_QWORD *)*((_QWORD *)v104 + 2);
  v107(v102, v108, v106);
  v109 = sub_21C5DE8D0(v102, 1u);
  v110 = v106;
  v111 = v197;
  v174 = v105;
  v105((char *)v99, v110);
  v112 = (uint64_t)v195;
  sub_21C52A88C(v100, type metadata accessor for MapPitchToggleConfig);
  v113 = v212;
  objc_msgSend(v212, sel__setPitchButtonBackgroundStyle_, v109);
  v114 = v170;
  sub_21C52FFFC(v170);
  v115 = v175;
  sub_21C531B18(v114, v175, &qword_255289510);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v194)(v115, 1, v111) == 1)
  {
    v116 = v176;
    sub_21C5E319C();
    v117 = v210;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v209 + 104))(&v116[*(int *)(v111 + 28)], *MEMORY[0x24BDEB498], v210);
    v116[1] = 2;
    *(_QWORD *)&v116[*(int *)(v111 + 32)] = 0;
    *v116 = 0;
    sub_21C524980(v115, &qword_255289510);
    v118 = v180;
  }
  else
  {
    v116 = v176;
    sub_21C52AAD4(v115, (uint64_t)v176, type metadata accessor for MapPitchToggleConfig);
    v118 = v180;
    v117 = v210;
  }
  sub_21C52A88C(v114, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
  sub_21C52D1D4(v83);
  v119 = sub_21C52BB74(v83);
  v206(v83, v117);
  sub_21C52A88C((uint64_t)v116, type metadata accessor for MapPitchToggleConfig);
  objc_msgSend(v113, sel__setPitchButtonControlSize_, v119);
  v120 = *(void (**)(char *, uint64_t, uint64_t))(v118 + 16);
  v120(v205, v112, v88);
  v121 = v196;
  sub_21C52FFFC(v196);
  v122 = v178;
  sub_21C531B18(v121 + v211[7], v178, &qword_255289508);
  v123 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v177 + 48);
  v124 = v199;
  if (v123(v122, 1, v199) == 1)
  {
    v125 = *(int *)(v124 + 24);
    v126 = v122;
    v127 = v193;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v209 + 104))((uint64_t)v193 + v125, *MEMORY[0x24BDEB498], v117);
    *v127 = 512;
    sub_21C524980(v126, &qword_255289508);
  }
  else
  {
    v128 = v122;
    v127 = v193;
    sub_21C52AAD4(v128, (uint64_t)v193, type metadata accessor for MapCompassConfig);
  }
  sub_21C52A88C(v196, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
  sub_21C5A1728(v88);
  if (*(_BYTE *)v127 == 1)
  {
    v129 = sub_21C5E2E54();
    v127 = v193;
    v130 = v129 ^ 1;
  }
  else
  {
    v130 = 0;
  }
  sub_21C52A88C((uint64_t)v127, type metadata accessor for MapCompassConfig);
  v131 = *(void (**)(char *, uint64_t))(v118 + 8);
  v131(v205, v88);
  objc_msgSend(v113, sel_setShowsCompass_, v130 & 1);
  v132 = v198;
  sub_21C52FFFC(v198);
  v133 = v181;
  sub_21C531B18(v132 + v211[7], v181, &qword_255289508);
  v134 = v199;
  if (v123(v133, 1, v199) == 1)
  {
    v135 = v182;
    v136 = v210;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v209 + 104))((uint64_t)v182 + *(int *)(v134 + 24), *MEMORY[0x24BDEB498], v210);
    *v135 = 512;
    sub_21C524980(v133, &qword_255289508);
    v137 = (uint64_t)v179;
  }
  else
  {
    v135 = v182;
    sub_21C52AAD4(v133, (uint64_t)v182, type metadata accessor for MapCompassConfig);
    v137 = (uint64_t)v179;
    v136 = v210;
  }
  sub_21C52A88C(v198, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
  sub_21C52D1D4(v83);
  v138 = (uint64_t)v135;
  v139 = sub_21C5AC594(v83);
  v206(v83, v136);
  sub_21C52A88C(v138, type metadata accessor for MapCompassConfig);
  v140 = v212;
  objc_msgSend(v212, sel_setCompassViewSize_, v139);
  v120(v208, v112, v88);
  sub_21C52FFFC(v137);
  v141 = v185;
  sub_21C531B18(v137 + v211[6], v185, &qword_255289500);
  v142 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v184 + 48);
  v143 = v203;
  if (v142(v141, 1, v203) == 1)
  {
    v144 = v187;
    sub_21C5E319C();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v209 + 104))(&v144[*(int *)(v143 + 28)], *MEMORY[0x24BDEB498], v136);
    v144[1] = 2;
    *(_QWORD *)&v144[*(int *)(v143 + 32)] = 0;
    *v144 = 0;
    sub_21C524980(v141, &qword_255289500);
  }
  else
  {
    v144 = v187;
    sub_21C52AAD4(v141, (uint64_t)v187, type metadata accessor for MapUserLocationButtonConfig);
  }
  sub_21C52A88C(v137, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
  sub_21C5A1728(v88);
  if (*v144 == 1)
    v145 = sub_21C5E2E54() ^ 1;
  else
    v145 = 0;
  sub_21C52A88C((uint64_t)v144, type metadata accessor for MapUserLocationButtonConfig);
  v131(v208, v88);
  objc_msgSend(v140, sel_setShowsUserTrackingButton_, v145 & 1);
  v146 = v183;
  sub_21C52FFFC(v183);
  v147 = v189;
  sub_21C531B18(v146 + v211[6], v189, &qword_255289500);
  v148 = (int *)v203;
  if (v142(v147, 1, v203) == 1)
  {
    v149 = v190;
    sub_21C5E319C();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v209 + 104))(&v149[v148[7]], *MEMORY[0x24BDEB498], v210);
    v149[1] = 2;
    *(_QWORD *)&v149[v148[8]] = 0;
    *v149 = 0;
    sub_21C524980(v147, &qword_255289500);
  }
  else
  {
    v149 = v190;
    sub_21C52AAD4(v147, (uint64_t)v190, type metadata accessor for MapUserLocationButtonConfig);
  }
  sub_21C52A88C(v146, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
  v150 = v188;
  sub_21C52D1A8(v188);
  v151 = &v149[v148[6]];
  v152 = v200;
  sub_21C5E319C();
  v153 = sub_21C5E3178();
  v154 = v202;
  v155 = (void (*)(uint64_t, uint64_t))v174;
  v174(v152, v202);
  if ((v153 & 1) != 0)
    v156 = v150;
  else
    v156 = (uint64_t)v151;
  ((void (*)(char *, uint64_t, uint64_t))v172)(v152, v156, v154);
  v157 = sub_21C5DE8D0(v152, 1u);
  v155(v150, v154);
  sub_21C52A88C((uint64_t)v149, type metadata accessor for MapUserLocationButtonConfig);
  objc_msgSend(v212, sel__setUserTrackingButtonBackgroundStyle_, v157);
  v158 = v186;
  sub_21C52FFFC(v186);
  v159 = v191;
  sub_21C531B18(v158 + v211[6], v191, &qword_255289500);
  if (v142(v159, 1, (uint64_t)v148) == 1)
  {
    v160 = v192;
    sub_21C5E319C();
    v161 = v210;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v209 + 104))(&v160[v148[7]], *MEMORY[0x24BDEB498], v210);
    v160[1] = 2;
    *(_QWORD *)&v160[v148[8]] = 0;
    *v160 = 0;
    sub_21C524980(v159, &qword_255289500);
  }
  else
  {
    v160 = v192;
    sub_21C52AAD4(v159, (uint64_t)v192, type metadata accessor for MapUserLocationButtonConfig);
    v161 = v210;
  }
  v162 = (uint64_t)v201;
  sub_21C52A88C(v158, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
  sub_21C52D1D4(v162);
  v163 = sub_21C5D2B84(v162);
  v206(v162, v161);
  sub_21C52A88C((uint64_t)v160, type metadata accessor for MapUserLocationButtonConfig);
  v164 = v212;
  objc_msgSend(v212, sel__setUserTrackingControlSize_, v163);
  sub_21C5A16CC(v88);
  LOBYTE(v163) = sub_21C5E2E54();
  sub_21C5A16CC(v88);
  objc_msgSend(v164, sel__setShowsAppleLogo_force_, (v163 & 1) == 0, (sub_21C5E2E54() & 1) == 0);
  return objc_msgSend(v164, sel_setShowsAttribution_, sub_21C5A16CC(v88) & 1);
}

void sub_21C5A3B84()
{
  JUMPOUT(0x21C5A2EB8);
}

void sub_21C5A3B98()
{
  JUMPOUT(0x21C5A312CLL);
}

uint64_t sub_21C5A3BAC(void *a1, uint64_t a2, void (*a3)(__int128 *__return_ptr, uint64_t), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t AssociatedConformanceWitness;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void (*v69)(__int128 *__return_ptr, uint64_t);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  char *v78;
  void (*v79)(uint64_t (*)(_QWORD, _QWORD, _QWORD), char *, uint64_t);
  uint64_t v80;
  void (*v81)(__int128 *__return_ptr, char *);
  _QWORD *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t *v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  void *v93;
  char *v94;
  id v95;
  char *v96;
  void *v97;
  void (*v98)(uint64_t (*)(_QWORD, _QWORD, _QWORD), char *, uint64_t);
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t AssociatedTypeWitness;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  void (*v110)(char *, char *, uint64_t);
  uint64_t (*v111)(char *, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  void (*v125)(__int128 *__return_ptr, char *);
  void *v126;
  _QWORD *v127;
  uint64_t v128[4];
  uint64_t v129;
  uint64_t v130;

  v119 = a4;
  v125 = (void (*)(__int128 *__return_ptr, char *))a3;
  v126 = a1;
  v6 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x60);
  v7 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x50);
  v116 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x58);
  v114 = *(_QWORD *)(*(_QWORD *)(v116 + 8) + 8);
  v8 = *(_QWORD *)(v114 + 8);
  swift_getAssociatedTypeWitness();
  v106 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v120 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v115 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v118 = (char *)&v98 - v11;
  v12 = swift_checkMetadataState();
  v122 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v109 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v104 = (char *)&v98 - v15;
  v108 = v16;
  v17 = sub_21C5E3BB0();
  MEMORY[0x24BDAC7A8](v17);
  v121 = (char *)&v98 - v18;
  v112 = v8;
  v124 = swift_getAssociatedTypeWitness();
  v103 = *(_QWORD *)(v124 - 8);
  MEMORY[0x24BDAC7A8](v124);
  v123 = (char *)&v98 - v19;
  v20 = sub_21C5E3BB0();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v117 = (char *)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v98 - v24;
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v98 - v27;
  v29 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v32 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)&v98 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)&v98 - v34;
  v37 = MEMORY[0x24BDAC7A8](v36);
  v39 = (char *)&v98 - v38;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16))(v28, a2, v20, v37);
  v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v40(v28, 1, v7) == 1)
  {
    v41 = v7;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v28, v20);
LABEL_7:
    v48 = (uint64_t)v117;
    v49 = v127;
    sub_21C5A5328(v126);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v48, 1, 1, v41);
    sub_21C5A4AF0(v48);
    v50 = (_QWORD *)((char *)v49 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v49) + 0x80));
    v51 = *v50;
    *v50 = 0;
    v50[1] = 0;
    return sub_21C531A9C(v51);
  }
  v111 = v32;
  v101 = v35;
  v42 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  v42(v39, v28, v7);
  if (!v125)
  {
    v47 = v39;
    v41 = v7;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v47, v7);
    goto LABEL_7;
  }
  v99 = v39;
  v100 = v29;
  sub_21C5A4A70((uint64_t)v25);
  v43 = v7;
  if (v40(v25, 1, v7) == 1)
  {
    v44 = *(void (**)(char *, uint64_t))(v21 + 8);
    v45 = v119;
    swift_retain();
    v44(v25, v20);
    v46 = v100;
LABEL_12:
    v77 = (uint64_t)v117;
    v78 = v99;
    v79 = *(void (**)(uint64_t (*)(_QWORD, _QWORD, _QWORD), char *, uint64_t))(v46 + 16);
    v79((uint64_t (*)(_QWORD, _QWORD, _QWORD))v111, v99, v43);
    v80 = sub_21C5E3A78();
    v81 = v125;
    v82 = v127;
    sub_21C5A5524(v126, v80, v125, v45);
    swift_bridgeObjectRelease();
    v79((uint64_t (*)(_QWORD, _QWORD, _QWORD))v77, v78, v43);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v77, 0, 1, v43);
    sub_21C5A4AF0(v77);
    v83 = (_QWORD *)((char *)v82 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v82) + 0x80));
    v84 = *v83;
    *v83 = (uint64_t)v81;
    v83[1] = v45;
    swift_retain();
    sub_21C531A9C(v84);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v78, v43);
    v51 = (uint64_t)v81;
    return sub_21C531A9C(v51);
  }
  v52 = v101;
  v42(v101, v25, v7);
  v45 = v119;
  swift_retain();
  if (sub_21C5E3AFC() < 1)
  {
    v46 = v100;
    (*(void (**)(char *, uint64_t))(v100 + 8))(v52, v43);
    goto LABEL_12;
  }
  v53 = v108;
  v130 = sub_21C5E38BC();
  v55 = type metadata accessor for AnnotationBridge(0, v53, v106, v54);
  v56 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v114 = v55;
  v113 = AssociatedConformanceWitness;
  v129 = sub_21C5E38B0();
  v98 = *(void (**)(uint64_t (*)(_QWORD, _QWORD, _QWORD), char *, uint64_t))(v100 + 16);
  v98((uint64_t (*)(_QWORD, _QWORD, _QWORD))v111, v99, v43);
  sub_21C5E39A0();
  v58 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v127) + 0x88);
  v107 = v43;
  v59 = swift_getAssociatedConformanceWitness();
  v60 = v121;
  v112 = v59;
  sub_21C5E3BBC();
  v61 = v122;
  v111 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v122 + 48);
  v62 = v111(v60, 1, v53);
  v63 = v118;
  v64 = (uint64_t)v104;
  if (v62 != 1)
  {
    v102 = (char *)v127 + v58;
    v110 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
    v86 = v114;
    v110(v104, v60, v53);
    while (1)
    {
      sub_21C5E3C7C();
      v89 = (_QWORD *)((char *)v127 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v127) + 0x88));
      swift_beginAccess();
      v90 = *v89;
      swift_bridgeObjectRetain();
      MEMORY[0x22077EE30](v128, v63, v90, v56, v86, v113);
      swift_bridgeObjectRelease();
      v91 = *(void (**)(char *, uint64_t))(v120 + 8);
      v91(v63, v56);
      v92 = v56;
      v93 = (void *)v128[0];
      if (v128[0])
      {
        sub_21C5ABACC(v128[0], v64, (void (*)(__int128 *__return_ptr, uint64_t))v125, v119, v126);
        v94 = v115;
        sub_21C5E3C7C();
        v128[0] = (uint64_t)v93;
        sub_21C5E3904();
        v95 = v93;
        sub_21C5E391C();
        sub_21C5E3C7C();
        swift_beginAccess();
        sub_21C5E38C8();
        v96 = v94;
        v63 = v118;
        v91(v96, v92);
        v97 = (void *)v128[3];
        swift_endAccess();

        (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v64, v53);
      }
      else
      {
        v87 = v122;
        (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v109, v64, v53);
        sub_21C5E3A6C();
        sub_21C5E3A54();
        (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v64, v53);
      }
      v56 = v92;
      v88 = v121;
      sub_21C5E3BBC();
      if (v111(v88, 1, v53) == 1)
        break;
      v110((char *)v64, v88, v53);
    }
  }
  (*(void (**)(char *, uint64_t))(v103 + 8))(v123, v124);
  v66 = v126;
  v65 = v127;
  sub_21C5A5328(v126);
  sub_21C5A4BA8(v129);
  v67 = v119;
  v68 = v66;
  v69 = (void (*)(__int128 *__return_ptr, uint64_t))v125;
  sub_21C5A5524(v68, v130, v125, v119);
  swift_bridgeObjectRelease();
  v70 = (uint64_t)v117;
  v71 = v99;
  v72 = v107;
  v98((uint64_t (*)(_QWORD, _QWORD, _QWORD))v117, v99, v107);
  v73 = v100;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v100 + 56))(v70, 0, 1, v72);
  sub_21C5A4AF0(v70);
  sub_21C531AAC((uint64_t)v69);
  v74 = (_QWORD *)((char *)v65 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v65) + 0x80));
  v75 = *v74;
  *v74 = (uint64_t)v69;
  v74[1] = v67;
  sub_21C531A9C(v75);
  v76 = *(void (**)(char *, uint64_t))(v73 + 8);
  v76(v101, v72);
  v76(v71, v72);
  v51 = (uint64_t)v69;
  return sub_21C531A9C(v51);
}

uint64_t sub_21C5A45F4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;

  v3 = *MEMORY[0x24BEE4EA0] & *v1;
  v4 = (char *)v1 + *(_QWORD *)(v3 + 0x60);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_21C5A4668(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;

  v3 = *MEMORY[0x24BEE4EA0] & *v1;
  v4 = (char *)v1 + *(_QWORD *)(v3 + 0x60);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

id sub_21C5A46E4()
{
  _QWORD *v0;
  id result;
  double v2;
  double *v3;
  double v4;

  result = objc_msgSend(v0, sel_coordinate);
  v3 = (double *)((char *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0x68));
  if (vabdd_f64(v4, *v3) >= 0.00000000999999994 || vabdd_f64(v2, v3[1]) >= 0.00000000999999994)
    return objc_msgSend(v0, sel_setCoordinate_);
  return result;
}

id sub_21C5A4760(uint64_t a1)
{
  _QWORD *v1;
  char v2;
  char *v3;

  v2 = *(_BYTE *)(a1 + 16);
  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x68);
  *(_OWORD *)v3 = *(_OWORD *)a1;
  v3[16] = v2;
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(a1 + 24);
  swift_release();
  return sub_21C5A46E4();
}

double sub_21C5A47B0()
{
  return sub_21C5A47D0();
}

double sub_21C5A47D0()
{
  _QWORD *v0;

  return *(double *)((char *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0x70));
}

void sub_21C5A47F4(double a1, double a2)
{
  sub_21C5A4814(a1, a2);
}

void sub_21C5A4814(double a1, double a2)
{
  _QWORD *v2;
  double *v3;

  v3 = (double *)((char *)v2 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v2) + 0x70));
  *v3 = a1;
  v3[1] = a2;
}

void sub_21C5A4838()
{
  sub_21C5ABEF4();
}

id sub_21C5A4854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for AnnotationBridge(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t sub_21C5A48A0(char *a1)
{
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)a1) + 0x50) - 8) + 8))(&a1[*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)a1) + 0x60)]);
  return swift_release();
}

uint64_t type metadata accessor for AnnotationBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnnotationBridge);
}

uint64_t sub_21C5A490C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21C5E3BB0();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_21C5A49A8@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x68));
  v3 = *v2;
  v4 = v2[1];
  v5 = v2[2];
  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  v9 = v2[6];
  *a1 = *v2;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  return sub_21C5ABF50(v3, v4);
}

uint64_t sub_21C5A49E8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x68);
  v5 = *(_QWORD *)v3;
  v4 = *((_QWORD *)v3 + 1);
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a1;
  *((_OWORD *)v3 + 1) = v6;
  *((_OWORD *)v3 + 2) = *(_OWORD *)(a1 + 32);
  *((_QWORD *)v3 + 6) = v2;
  return sub_21C5ABEE0(v5, v4);
}

uint64_t sub_21C5A4A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v3) + 0x70));
  v5 = *v4;
  v6 = v4[1];
  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  return sub_21C5ABF20(v5, v6);
}

uint64_t sub_21C5A4A70@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  char *v3;
  uint64_t v4;

  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x78);
  swift_beginAccess();
  v4 = sub_21C5E3BB0();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_21C5A4AF0(uint64_t a1)
{
  _QWORD *v1;
  char *v3;
  uint64_t v4;

  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x78);
  swift_beginAccess();
  v4 = sub_21C5E3BB0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t sub_21C5A4B78(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)v2 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v2) + 0x80));
  v4 = *v3;
  *v3 = a1;
  v3[1] = a2;
  return sub_21C531A9C(v4);
}

uint64_t sub_21C5A4BA8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;

  v3 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x88));
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

void *sub_21C5A4C08(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  void (*v11)(uint64_t *__return_ptr, char *);
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void (*v21)(void *, uint64_t *);
  void *v22;
  id v23;
  void (*v24)(void *, uint64_t *);
  void *v25;
  void (*v26)(void *, uint64_t *);
  double v27;
  uint64_t v29;
  void (*v30)(void *, uint64_t *);
  uint64_t v31;
  uint64_t v32;
  char v33;
  void (*v34)(void *, uint64_t *);
  uint64_t v35;

  v3 = *MEMORY[0x24BEE4EA0];
  v4 = *MEMORY[0x24BEE4EA0] & *v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v29 - v7;
  type metadata accessor for AnnotationBridge(0, AssociatedTypeWitness, *(_QWORD *)(v4 + 96), v9);
  v10 = (_QWORD *)swift_dynamicCastClass();
  if (!v10)
    return 0;
  v11 = *(void (**)(uint64_t *__return_ptr, char *))((char *)v1 + *(_QWORD *)(v4 + 128));
  if (!v11)
    return 0;
  v12 = v10;
  v13 = *v10 & v3;
  v14 = (char *)v10 + *(_QWORD *)(v13 + 96);
  swift_beginAccess();
  (*(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(v13 + 80) - 8) + 16))(v8, v14);
  sub_21C531AAC((uint64_t)v11);
  swift_unknownObjectRetain();
  v11(&v31, v8);
  v16 = v31;
  v15 = v32;
  v17 = v35;
  v30 = v34;
  if (v33 == 2)
  {
    v22 = (void *)sub_21C5E3940();
    v23 = objc_msgSend(a1, sel_dequeueReusableAnnotationViewWithIdentifier_forAnnotation_, v22, v12);

    type metadata accessor for SwiftUIAnnotationView();
    v18 = (void *)swift_dynamicCastClass();
    if (!v18)
    {
      sub_21C531A9C((uint64_t)v11);

      swift_unknownObjectRelease();
      swift_release();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
      return v18;
    }
    v31 = v16;
    v32 = v15;
    v33 = 2;
    v24 = v30;
    v34 = v30;
    v35 = v17;
    swift_retain();
    v24(v18, &v31);
    sub_21C531A9C((uint64_t)v11);
    swift_unknownObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
    swift_release();
    goto LABEL_15;
  }
  if (v33 == 1)
  {
    v25 = (void *)sub_21C5E3940();
    v20 = objc_msgSend(a1, sel_dequeueReusableAnnotationViewWithIdentifier_forAnnotation_, v25, v12);

    objc_opt_self();
    v18 = (void *)swift_dynamicCastObjCClass();
    if (v18)
    {
      v31 = v16;
      v32 = v15;
      v33 = 1;
      v26 = v30;
      v34 = v30;
      v35 = v17;
      swift_retain();
      v26(v18, &v31);
      swift_release();
      LODWORD(v27) = 1148846080;
      objc_msgSend(v18, sel_setDisplayPriority_, v27);
      goto LABEL_14;
    }
  }
  else
  {
    v18 = 0;
    if (v33)
      goto LABEL_14;
    v19 = (void *)sub_21C5E3940();
    v20 = objc_msgSend(a1, sel_dequeueReusableAnnotationViewWithIdentifier_forAnnotation_, v19, v12);

    objc_opt_self();
    v18 = (void *)swift_dynamicCastObjCClass();
    if (v18)
    {
      v31 = v16;
      v32 = v15;
      v33 = 0;
      v21 = v30;
      v34 = v30;
      v35 = v17;
      swift_retain();
      v21(v18, &v31);
      swift_release();
      goto LABEL_14;
    }
  }

LABEL_14:
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  sub_21C531A9C((uint64_t)v11);
  swift_unknownObjectRelease();
  swift_release();
  if (v18)
LABEL_15:
    objc_msgSend(v18, sel_setEnabled_, 0);
  return v18;
}

id sub_21C5A501C(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  void *v6;

  v4 = a3;
  swift_unknownObjectRetain();
  v5 = a1;
  v6 = sub_21C5A4C08(v4);

  swift_unknownObjectRelease();
  return v6;
}

uint64_t sub_21C5A5080(void *a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  result = sub_21C5A49A8(&v5);
  v3 = v6;
  if ((~v6 & 0xF000000000000007) != 0)
  {
    v4 = v5;
    sub_21C56D55C(a1);
    return sub_21C5ABEE0(v4, v3);
  }
  return result;
}

void sub_21C5A5128(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  sub_21C5A5080(v4);

}

void sub_21C5A517C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;

  v6 = a3;
  v7 = a1;
  sub_21C5ABF64(a4);

}

void sub_21C5A51D4()
{
  sub_21C5AC02C();
}

id sub_21C5A51F4()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for MapViewCoordinator(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0x50), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0x58), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0x60));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t sub_21C5A5244(_QWORD *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t *v4;
  char *v5;
  uint64_t v6;

  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v3 = (char *)a1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *a1) + 0x68);
  sub_21C5ABEE0(*(_QWORD *)v3, *((_QWORD *)v3 + 1));
  v4 = (_QWORD *)((char *)a1 + *(_QWORD *)((*v2 & *a1) + 0x70));
  sub_21C5ABF20(*v4, v4[1]);
  v5 = (char *)a1 + *(_QWORD *)((*v2 & *a1) + 0x78);
  v6 = sub_21C5E3BB0();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  sub_21C531A9C(*(_QWORD *)((char *)a1 + *(_QWORD *)((*v2 & *a1) + 0x80)));
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for MapViewCoordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapViewCoordinator);
}

uint64_t sub_21C5A5328(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v3 = *MEMORY[0x24BEE4EA0] & *v1;
  v4 = (_QWORD *)((char *)v1 + *(_QWORD *)(v3 + 0x88));
  swift_beginAccess();
  v5 = *v4;
  v6 = *(_QWORD *)(v3 + 96);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnnotationBridge(0, AssociatedTypeWitness, v6, v8);
  swift_getAssociatedConformanceWitness();
  v12 = v5;
  v9 = sub_21C5E38EC();
  swift_bridgeObjectRetain();
  MEMORY[0x22077F9A0](MEMORY[0x24BEE03C0], v9);
  sub_21C5E3A78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_255288C00);
  sub_21C5E3D30();
  swift_bridgeObjectRelease();
  v10 = (void *)sub_21C5E39D0();
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_removeAnnotations_, v10, v12);

  swift_beginAccess();
  sub_21C5E3904();
  sub_21C5E38F8();
  return swift_endAccess();
}

void sub_21C5A5524(void *a1, uint64_t a2, void (*a3)(__int128 *__return_ptr, char *), uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t AssociatedTypeWitness;
  void (*v35)(__int128 *__return_ptr, char *);
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  char v39;
  __int128 v40;
  __int128 v41;
  char v42;
  __int128 v43;
  uint64_t v44;

  v35 = a3;
  v36 = a4;
  v7 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v8 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x60);
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v33 = (char *)&v26 - v9;
  v10 = swift_checkMetadataState();
  v11 = *(_QWORD *)(v10 - 8);
  v27 = *(_QWORD *)(v11 + 64);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v26 - v13;
  if (MEMORY[0x22077EF68](a2, v10, v12) >= 1)
  {
    v28 = a1;
    v37 = type metadata accessor for AnnotationBridge(0, v10, v8, v15);
    v44 = sub_21C5E38BC();
    v16 = swift_bridgeObjectRetain();
    if (MEMORY[0x22077EF80](v16, v10))
    {
      v31 = a2;
      v32 = v8;
      v17 = 0;
      v30 = (char *)v4 + *(_QWORD *)((*v7 & *v4) + 0x88);
      v29 = v11;
      do
      {
        v18 = sub_21C5E3A30();
        sub_21C5E39F4();
        if ((v18 & 1) != 0)
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v14, a2+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v17, v10);
          v19 = v17 + 1;
          if (__OFADD__(v17, 1))
            goto LABEL_11;
        }
        else
        {
          v24 = sub_21C5E3C88();
          if (v27 != 8)
          {
            __break(1u);
            return;
          }
          *(_QWORD *)&v41 = v24;
          (*(void (**)(char *, __int128 *, uint64_t))(v11 + 16))(v14, &v41, v10);
          swift_unknownObjectRelease();
          v19 = v17 + 1;
          if (__OFADD__(v17, 1))
          {
LABEL_11:
            __break(1u);
            break;
          }
        }
        v35(&v41, v14);
        v38 = v41;
        v39 = v42;
        v40 = v43;
        v22 = sub_21C5ABE98((uint64_t)v14, (uint64_t *)&v38, v20, v21);
        sub_21C5E3C7C();
        *(_QWORD *)&v38 = v22;
        swift_beginAccess();
        swift_getAssociatedConformanceWitness();
        sub_21C5E3904();
        v23 = v22;
        v11 = v29;
        sub_21C5E391C();
        swift_endAccess();
        *(_QWORD *)&v41 = v23;
        a2 = v31;
        sub_21C5E3A6C();
        sub_21C5E3A54();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
        ++v17;
      }
      while (v19 != MEMORY[0x22077EF80](a2, v10));
    }
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_255288C00);
    sub_21C5E3D30();
    swift_bridgeObjectRelease();
    v25 = (void *)sub_21C5E39D0();
    swift_bridgeObjectRelease();
    objc_msgSend(v28, sel_addAnnotations_, v25);

  }
}

id sub_21C5A5A34()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _SwiftUIMKMapView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for _SwiftUIMKMapView()
{
  return objc_opt_self();
}

void sub_21C5A5A84(uint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  type metadata accessor for _DefaultAnnotatedMapContent(255, a1[2], a1[3], a1[4]);
  sub_21C5E3BB0();
  if (v1 <= 0x3F)
  {
    sub_21C52E784(319, (unint64_t *)&unk_2552897B0, (void (*)(uint64_t))MEMORY[0x24BDEDCA8]);
    if (v2 <= 0x3F)
    {
      sub_21C52E784(319, (unint64_t *)&qword_255289D70, (void (*)(uint64_t))MEMORY[0x24BDEB4A0]);
      if (v3 <= 0x3F)
      {
        sub_21C52E784(319, &qword_2552897C0, (void (*)(uint64_t))type metadata accessor for MapControlsConfig);
        if (v4 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

unint64_t sub_21C5A5BB8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  size_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  void *v59;
  const void *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  __int128 *v69;
  __int128 v70;
  _QWORD *v71;
  _QWORD *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  _QWORD *v77;
  _QWORD *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _BYTE *v100;
  _BYTE *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _BYTE *v110;
  unsigned __int8 *v111;
  unsigned int v112;
  unint64_t v113;
  _WORD *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char v118;
  size_t v120;
  uint64_t v121;
  unint64_t __n;
  uint64_t v123;
  uint64_t v124;
  size_t v125;
  uint64_t v126;
  size_t v127;
  size_t v128;
  size_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  size_t v143;
  int v144;
  unsigned int v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v159;

  v148 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v148 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v159 = v5;
  v6 = v5 | 7;
  v149 = *(_DWORD *)(v4 + 84);
  v147 = v4;
  v7 = *(_QWORD *)(v4 + 64);
  if (v149)
    v8 = v7;
  else
    v8 = v7 + 1;
  v153 = sub_21C5E31A8();
  v9 = *(_QWORD *)(v153 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  if (v11 <= 8)
    v12 = 8;
  else
    v12 = *(_QWORD *)(v9 + 64);
  v157 = v12;
  v13 = sub_21C5E2E78();
  v14 = v10 | 7;
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = *(_DWORD *)(v15 + 84);
  v155 = v15;
  v156 = v13;
  v18 = *(_QWORD *)(v15 + 64);
  if (v18 <= 8)
    v19 = 8;
  else
    v19 = v18;
  v20 = v10 | 7 | v16;
  if (*(_DWORD *)(v9 + 84) <= v17)
    v21 = v17;
  else
    v21 = *(_DWORD *)(v9 + 84);
  if (v21 <= 0x7FFFFFFE)
    v21 = 2147483646;
  v154 = v21;
  v151 = v10 + 2;
  v152 = v9;
  v22 = v18 + 7;
  v23 = ((v18
        + 7
        + ((v11 + v16 + (v151 & ~(unint64_t)v10)) & ~(unint64_t)v16)) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v24 = ((v16 + 3) & ~(unint64_t)v16) + v18;
  v25 = ((v16 + 2) & ~(unint64_t)v16) + v18;
  if (v25
     + ((v23
       + v16
       + ((v24 + v20 + ((v23 + v16) & ~(unint64_t)v16)) & ~v20)) & ~(unint64_t)v16)
     + 6 <= 8)
    v26 = 8;
  else
    v26 = v25
        + ((v23
          + v16
          + ((v24 + v20 + ((v23 + v16) & ~(unint64_t)v16)) & ~v20)) & ~(unint64_t)v16)
        + 6;
  v27 = v6 | v10 | (unint64_t)v16;
  if (v27 == 7 && ((v10 | v16 | v5) & 0x100000) == 0)
  {
    v142 = (v5 + 89) & ~(unint64_t)v5;
    v129 = v8 + 7;
    if (((v26
         + 8
         + ((v20
           + 9
           + ((v19
             + 8
             + ((v157
               + (v16 | 7)
               + 1
               + ((v10
                 + 40
                 + ((v5 + 56) & ~v6)
                 + ((v8 + 7 + v142) & 0xFFFFFFFFFFFFFFF8)
                 + 16) & ~v14)) & ~(v16 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~v20)) & 0xFFFFFFFFFFFFFFF8)
       + 9 <= 0x18)
    {
      __n = ((v8 + 7 + v142) & 0xFFFFFFFFFFFFFFF8) + 16;
      v123 = v16;
      v140 = v10 + 40;
      v143 = v8;
      v131 = v16 | 7;
      v132 = v157 + v131 + 1;
      v133 = v19 + 8;
      v134 = v20 + 9;
      v135 = v10 | 7 | v16;
      v136 = v19;
      v124 = v10;
      v125 = v24 + v20;
      v120 = v24;
      v121 = v16 + 3;
      v144 = *(_DWORD *)(v9 + 84);
      v128 = v23;
      v141 = v11 + v16;
      v130 = v22;
      v137 = v23 + v16;
      v145 = v17;
      v138 = v26 + 8;
      v126 = v16 + 2;
      v127 = v25;
      v146 = v26;
      v139 = ~v6;
      v29 = *a2;
      v28 = a2[1];
      v30 = a2[2];
      v31 = a2[3];
      v33 = a2[4];
      v32 = a2[5];
      v34 = a2[6];
      sub_21C56C0C0(*a2, v28);
      *a1 = v29;
      a1[1] = v28;
      a1[2] = v30;
      a1[3] = v31;
      a1[4] = v33;
      a1[5] = v32;
      a1[6] = v34;
      v35 = (char *)(((unint64_t)a1 + (v5 | 7) + 56) & v139);
      v36 = (uint64_t *)(((unint64_t)a2 + (v159 | 7) + 56) & v139);
      v37 = ((unint64_t)v36 + 79) & 0xFFFFFFFFFFFFFFF8;
      if (v149 < 0)
      {
        v38 = ~v159;
        if ((*(unsigned int (**)(unint64_t))(v147 + 48))((v159 + v37 + 17) & ~v159) <= 1)
        {
LABEL_25:
          v150 = (_QWORD *)(((unint64_t)a1 + (v159 | 7) + 56) & v139);
          v40 = *v36;
          v41 = v36[1];
          v42 = v36[2];
          v43 = v36[3];
          v44 = v36[4];
          v45 = v36[5];
          v46 = v36[6];
          sub_21C56C0C0(*v36, v41);
          *v150 = v40;
          v150[1] = v41;
          v150[2] = v42;
          v150[3] = v43;
          v150[4] = v44;
          v150[5] = v45;
          v150[6] = v46;
          v47 = ((unint64_t)v150 + 63) & 0xFFFFFFFFFFFFFFF8;
          v48 = ((unint64_t)v36 + 63) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v47 = *(_QWORD *)v48;
          *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
          v49 = ((unint64_t)v150 + 79) & 0xFFFFFFFFFFFFFFF8;
          if (*(_QWORD *)(v37 + 8) < 0xFFFFFFFFuLL)
          {
            v58 = *(_OWORD *)v37;
            *(_BYTE *)(v49 + 16) = *(_BYTE *)(v37 + 16);
            *(_OWORD *)v49 = v58;
          }
          else
          {
            *(_QWORD *)v49 = *(_QWORD *)v37;
            *(_QWORD *)(v49 + 8) = *(_QWORD *)(v37 + 8);
            *(_BYTE *)(v49 + 16) = *(_BYTE *)(v37 + 16);
            swift_retain();
            swift_retain();
          }
          v59 = (void *)((v159 + 17 + v49) & v38);
          v60 = (const void *)((v159 + 17 + v37) & v38);
          v54 = v135;
          v53 = v136;
          v55 = v134;
          v56 = v157;
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v147 + 48))(v60, 1, v148))
          {
            memcpy(v59, v60, v143);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v147 + 16))(v59, v60, v148);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v147 + 56))(v59, 0, 1, v148);
          }
          v61 = ((unint64_t)v59 + v129) & 0xFFFFFFFFFFFFFFF8;
          v62 = ((unint64_t)v60 + v129) & 0xFFFFFFFFFFFFFFF8;
          if (*(_QWORD *)v62 < 0xFFFFFFFFuLL)
          {
            *(_OWORD *)v61 = *(_OWORD *)v62;
          }
          else
          {
            v63 = *(_QWORD *)(v62 + 8);
            *(_QWORD *)v61 = *(_QWORD *)v62;
            *(_QWORD *)(v61 + 8) = v63;
            swift_retain();
          }
          v57 = (v159 + 89) & ~v159;
          v35 = (char *)(((unint64_t)a1 + (v159 | 7) + 56) & v139);
          v52 = a1;
LABEL_38:
          v64 = ~v14;
          v65 = ((v57 + v143 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
          v66 = &v35[v65];
          v67 = (char *)v36 + v65;
          *(_QWORD *)v66 = *(uint64_t *)((char *)v36 + v65);
          v66[8] = *((_BYTE *)v36 + v65 + 8);
          v68 = (uint64_t)&v35[v65 + 16];
          v69 = (__int128 *)(v67 + 16);
          if (*((_QWORD *)v67 + 3) < 0xFFFFFFFFuLL)
          {
            v70 = *v69;
            *(_QWORD *)(v68 + 16) = *((_QWORD *)v67 + 4);
            *(_OWORD *)v68 = v70;
          }
          else
          {
            *(_QWORD *)v68 = *(_QWORD *)v69;
            *(_QWORD *)(v68 + 8) = *((_QWORD *)v67 + 3);
            *(_QWORD *)(v68 + 16) = *((_QWORD *)v67 + 4);
            swift_retain();
            swift_retain();
          }
          v71 = (_QWORD *)((unint64_t)&v66[v140] & v64);
          v72 = (_QWORD *)((unint64_t)&v67[v140] & v64);
          v73 = *((unsigned __int8 *)v72 + v56);
          if (v73 >= 2)
          {
            if (v56 <= 3)
              v74 = v56;
            else
              v74 = 4;
            __asm { BR              X12 }
          }
          v75 = ~v131;
          if (v73 == 1)
          {
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v152 + 16))(v71, v72, v153);
            v76 = 1;
          }
          else
          {
            *v71 = *v72;
            swift_retain();
            v76 = 0;
          }
          *((_BYTE *)v71 + v56) = v76;
          v77 = (_QWORD *)(((unint64_t)v71 + v132) & v75);
          v78 = (_QWORD *)(((unint64_t)v72 + v132) & v75);
          v79 = *((unsigned __int8 *)v78 + v53);
          if (v79 >= 2)
          {
            if (v53 <= 3)
              v80 = v53;
            else
              v80 = 4;
            __asm { BR              X12 }
          }
          v81 = ~v54;
          if (v79 == 1)
          {
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v155 + 16))(v77, v78, v156);
            v82 = 1;
          }
          else
          {
            *v77 = *v78;
            swift_retain();
            v82 = 0;
          }
          *((_BYTE *)v77 + v53) = v82;
          v83 = ((unint64_t)v77 + v133) & 0xFFFFFFFFFFFFFFF8;
          v84 = ((unint64_t)v78 + v133) & 0xFFFFFFFFFFFFFFF8;
          v85 = *(_QWORD *)v84;
          v86 = *(_BYTE *)(v84 + 8);
          sub_21C531A90(*(_QWORD *)v84, v86);
          *(_QWORD *)v83 = v85;
          *(_BYTE *)(v83 + 8) = v86;
          v87 = (v55 + v83) & v81;
          v88 = (v55 + v84) & v81;
          v89 = *(unsigned __int8 *)(v88 + v146);
          if (v89 >= 2)
          {
            if (v146 <= 3)
              v90 = v146;
            else
              v90 = 4;
            __asm { BR              X12 }
          }
          if (v89 != 1)
          {
            *(_QWORD *)v87 = *(_QWORD *)v88;
            *(_BYTE *)(v87 + v146) = 0;
            swift_retain();
LABEL_99:
            v51 = (unint64_t)v52;
            v115 = (v138 + v87) & 0xFFFFFFFFFFFFFFF8;
            v116 = (v138 + v88) & 0xFFFFFFFFFFFFFFF8;
            v117 = *(_QWORD *)v116;
            v118 = *(_BYTE *)(v116 + 8);
            sub_21C531A90(*(_QWORD *)v116, v118);
            *(_QWORD *)v115 = v117;
            *(_BYTE *)(v115 + 8) = v118;
            return v51;
          }
          v91 = ~v124;
          v92 = ~v123;
          v93 = (v151 + v88) & ~v124;
          if (v144 == v154)
          {
            if (!(*(unsigned int (**)(unint64_t))(v152 + 48))((v151 + v88) & ~v124))
              goto LABEL_69;
          }
          else
          {
            v94 = (v141 + v93) & v92;
            if (v145 == v154)
            {
              if (!(*(unsigned int (**)(unint64_t))(v155 + 48))((v141 + v93) & v92))
              {
LABEL_69:
                v94 = (v141 + v93) & v92;
                v95 = (_QWORD *)((v130 + v94) & 0xFFFFFFFFFFFFFFF8);
LABEL_73:
                *(_BYTE *)v87 = *(_BYTE *)v88;
                *(_BYTE *)(v87 | 1) = *(_BYTE *)(v88 | 1);
                v97 = (v151 + v87) & v91;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v152 + 16))(v97, v93, v153);
                v98 = (v141 + v97) & v92;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v155 + 16))(v98, v94, v156);
                v99 = v130 + v98;
                v91 = ~v124;
                *(_QWORD *)(v99 & 0xFFFFFFFFFFFFF8) = *v95;
                swift_retain();
                goto LABEL_75;
              }
            }
            else
            {
              v95 = (_QWORD *)((v130 + v94) & 0xFFFFFFFFFFFFFFF8);
              v96 = *v95;
              if (*v95 >= 0xFFFFFFFFuLL)
                LODWORD(v96) = -1;
              if ((v96 + 1) < 2)
                goto LABEL_73;
            }
          }
          memcpy((void *)v87, (const void *)v88, v128);
LABEL_75:
          v100 = (_BYTE *)((v137 + v87) & v92);
          v101 = (_BYTE *)((v137 + v88) & v92);
          if (v145 > 0xFE)
          {
            if (!(*(unsigned int (**)(unint64_t))(v155 + 48))((unint64_t)&v101[v121] & v92))
              goto LABEL_77;
          }
          else if (*v101 < 2u)
          {
LABEL_77:
            *v100 = *v101;
            *(_BYTE *)(((v137 + v87) & v92) + 1) = *(_BYTE *)(((v137 + v88) & v92) + 1);
            *(_BYTE *)(((v137 + v87) & v92) + 2) = *(_BYTE *)(((v137 + v88) & v92) + 2);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v155 + 16))((unint64_t)&v100[v121] & v92, (unint64_t)&v101[v121] & v92, v156);
            goto LABEL_80;
          }
          memcpy(v100, v101, v120);
LABEL_80:
          v102 = (unint64_t)&v100[v125] & v81;
          v103 = (unint64_t)&v101[v125] & v81;
          v104 = (v151 + v103) & v91;
          if (v144 == v154)
          {
            if (!(*(unsigned int (**)(unint64_t))(v152 + 48))((v151 + v103) & v91))
              goto LABEL_85;
          }
          else
          {
            v105 = (v141 + v104) & v92;
            if (v145 == v154)
            {
              if (!(*(unsigned int (**)(unint64_t))(v155 + 48))((v141 + v104) & v92))
              {
LABEL_85:
                v105 = (v141 + v104) & v92;
                v106 = (_QWORD *)((v130 + v105) & 0xFFFFFFFFFFFFFFF8);
LABEL_89:
                *(_BYTE *)v102 = *(_BYTE *)v103;
                *(_BYTE *)(v102 | 1) = *(_BYTE *)(v103 | 1);
                v108 = (v151 + v102) & v91;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v152 + 16))(v108, v104, v153);
                v109 = (v141 + v108) & v92;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v155 + 16))(v109, v105, v156);
                *(_QWORD *)((v130 + v109) & 0xFFFFFFFFFFFFF8) = *v106;
                swift_retain();
                goto LABEL_91;
              }
            }
            else
            {
              v106 = (_QWORD *)((v130 + v105) & 0xFFFFFFFFFFFFFFF8);
              v107 = *v106;
              if (*v106 >= 0xFFFFFFFFuLL)
                LODWORD(v107) = -1;
              if ((v107 + 1) < 2)
                goto LABEL_89;
            }
          }
          memcpy((void *)v102, (const void *)v103, v128);
LABEL_91:
          v110 = (_BYTE *)((v137 + v102) & v92);
          v111 = (unsigned __int8 *)((v137 + v103) & v92);
          if (v145 > 0xFE)
          {
            v113 = (unint64_t)&v111[v126] & v92;
            if (!(*(unsigned int (**)(unint64_t))(v155 + 48))(v113))
            {
              LOBYTE(v112) = *v111;
              goto LABEL_97;
            }
          }
          else
          {
            v112 = *v111;
            if (v112 <= 1)
            {
              v113 = (unint64_t)&v111[v126] & v92;
LABEL_97:
              *v110 = v112;
              v110[1] = v111[1];
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v155 + 16))((unint64_t)&v110[v126] & v92, v113, v156);
              goto LABEL_98;
            }
          }
          memcpy(v110, v111, v127);
LABEL_98:
          v114 = &v110[v127];
          *v114 = *(_WORD *)&v111[v127];
          v114[1] = *(_WORD *)&v111[v127 + 2];
          v114[2] = *(_WORD *)&v111[v127 + 4];
          *(_BYTE *)(v87 + v146) = 1;
          goto LABEL_99;
        }
      }
      else
      {
        v38 = ~v159;
        v39 = *(_QWORD *)(v37 + 8);
        if (v39 >= 0xFFFFFFFF)
          LODWORD(v39) = -1;
        if ((v39 + 1) < 2)
          goto LABEL_25;
      }
      v52 = a1;
      memcpy(v35, v36, __n);
      v54 = v135;
      v53 = v136;
      v55 = v134;
      v56 = v157;
      v57 = (v159 + 89) & ~v159;
      goto LABEL_38;
    }
  }
  v50 = *a2;
  *a1 = *a2;
  v51 = v50 + ((v27 + 16) & ~v27);
  swift_retain();
  return v51;
}

uint64_t sub_21C5A67E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unint64_t v58;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  sub_21C56C124(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (a1 + (v6 | 7) + 56) & ~(v6 | 7);
  v8 = *(_DWORD *)(v5 + 84);
  v9 = ~v6;
  v10 = *(_QWORD *)(v5 + 64);
  v11 = (v7 + 79) & 0xFFFFFFFFFFFFFFF8;
  if (v8 < 0)
  {
    if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v5 + 48))((v6 + v11 + 17) & v9, *(unsigned int *)(v5 + 84), v4) > 1)goto LABEL_16;
    goto LABEL_7;
  }
  v12 = *(_QWORD *)(v11 + 8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  if ((v12 + 1) < 2)
  {
LABEL_7:
    sub_21C56C124(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
    if (*(_QWORD *)(v11 + 8) >= 0xFFFFFFFFuLL)
    {
      swift_release();
      swift_release();
    }
    v13 = (v6 + v11 + 17) & v9;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4))
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v13, v4);
    if (v8)
      v14 = v10;
    else
      v14 = v10 + 1;
    if (*(_QWORD *)((v14 + v13 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
      swift_release();
  }
LABEL_16:
  if (v8)
    v15 = v10;
  else
    v15 = v10 + 1;
  v16 = v7 + ((v15 + ((v6 + 89) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8);
  v17 = v16 + 16;
  if (*(_QWORD *)(v16 + 40) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
  }
  v70 = sub_21C5E31A8();
  v18 = *(_QWORD *)(v70 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = v19 | 7;
  v21 = (v17 + (v19 | 7) + 40) & ~(v19 | 7);
  v22 = *(_QWORD *)(v18 + 64);
  if (v22 <= 8)
    v23 = 8;
  else
    v23 = *(_QWORD *)(v18 + 64);
  v24 = *(unsigned __int8 *)(v21 + v23);
  if (v24 >= 2)
  {
    if (v23 <= 3)
      v25 = v23;
    else
      v25 = 4;
    __asm { BR              X12 }
  }
  if (v24 == 1)
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v70);
  else
    swift_release();
  v71 = sub_21C5E2E78();
  v26 = *(_QWORD *)(v71 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = (v23 + v21 + (v27 | 7) + 1) & ~(v27 | 7);
  v29 = *(_QWORD *)(v26 + 64);
  if (v29 <= 8)
    v30 = 8;
  else
    v30 = *(_QWORD *)(v26 + 64);
  v31 = *(unsigned __int8 *)(v28 + v30);
  if (v31 >= 2)
  {
    if (v30 <= 3)
      v32 = v30;
    else
      v32 = 4;
    __asm { BR              X12 }
  }
  if (v31 == 1)
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v71);
  else
    swift_release();
  v33 = (v30 + v28 + 8) & 0xFFFFFFFFFFFFFFF8;
  sub_21C531A84(*(_QWORD *)v33, *(_BYTE *)(v33 + 8));
  v34 = v20 | v27;
  v35 = ((v20 | v27) + v33 + 9) & ~(v20 | v27);
  v68 = v22;
  v69 = v18;
  v36 = *(unsigned int *)(v18 + 84);
  v37 = *(unsigned int *)(v26 + 84);
  if (v36 <= v37)
    v38 = *(_DWORD *)(v26 + 84);
  else
    v38 = v36;
  if (v38 <= 0x7FFFFFFE)
    v39 = 2147483646;
  else
    v39 = v38;
  v40 = v19 + 2;
  v41 = v29 + 7;
  v66 = v27 + 3;
  v42 = (v27 + 2) & ~v27;
  v43 = ((v29 + 7 + ((((v19 + 2) & ~v19) + v22 + v27) & ~v27)) & 0xFFFFFFFFFFFFFFF8) + v27 + 8;
  v44 = ((v27 + 3) & ~v27) + v29 + v34;
  if (v29 + v42 + ((v43 + ((v44 + (v43 & ~v27)) & ~v34)) & ~v27) + 6 <= 8)
    v45 = 8;
  else
    v45 = v29 + v42 + ((v43 + ((v44 + (v43 & ~v27)) & ~v34)) & ~v27) + 6;
  v46 = *(unsigned __int8 *)(v35 + v45);
  if (v46 >= 2)
  {
    if (v45 <= 3)
      v47 = v45;
    else
      v47 = 4;
    __asm { BR              X12 }
  }
  if (v46 != 1)
  {
    swift_release();
    return sub_21C531A84(*(_QWORD *)((v35 + v45 + 8) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v35 + v45 + 8) & 0xFFFFFFFFFFFFFFF8) + 8));
  }
  v48 = ~v19;
  v49 = (v40 + v35) & ~v19;
  v67 = ~v27;
  v65 = v27 + 2;
  v60 = v29 + 7;
  v61 = v48;
  v64 = v39;
  v62 = ((v27 + 3) & ~v27) + v29 + v34;
  v63 = v40;
  if ((_DWORD)v36 == v39)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v49, v36, v70))
      goto LABEL_69;
LABEL_64:
    v50 = (v68 + v27 + v49) & v67;
LABEL_68:
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v49, v70);
    (*(void (**)(unint64_t, uint64_t))(v26 + 8))(v50, v71);
    swift_release();
    goto LABEL_69;
  }
  v50 = (v68 + v27 + v49) & ~v27;
  if ((_DWORD)v37 == v39)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v26 + 48))((v68 + v27 + v49) & ~v27, v37, v71))
    {
      goto LABEL_69;
    }
    goto LABEL_64;
  }
  v51 = *(_QWORD *)((v41 + v50) & 0xFFFFFFFFFFFFFFF8);
  if (v51 >= 0xFFFFFFFF)
    LODWORD(v51) = -1;
  if ((v51 + 1) < 2)
    goto LABEL_68;
LABEL_69:
  v52 = (unsigned __int8 *)((v43 + v35) & v67);
  if (v37 <= 0xFE)
  {
    if (*v52 >= 2u)
      goto LABEL_72;
    goto LABEL_71;
  }
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v26 + 48))((unint64_t)&v52[v66] & v67, v37, v71))LABEL_71:(*(void (**)(unint64_t, uint64_t))(v26 + 8))((unint64_t)&v52[v66] & v67, v71);
LABEL_72:
  v53 = (unint64_t)&v52[v62] & ~v34;
  v54 = (v63 + v53) & v61;
  if ((_DWORD)v36 == v64)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v69 + 48))((v63 + v53) & v61, v36, v70))
      goto LABEL_84;
LABEL_79:
    v55 = (v68 + v27 + v54) & v67;
LABEL_83:
    (*(void (**)(unint64_t, uint64_t))(v69 + 8))(v54, v70);
    (*(void (**)(unint64_t, uint64_t))(v26 + 8))(v55, v71);
    swift_release();
    goto LABEL_84;
  }
  v55 = (v68 + v27 + v54) & v67;
  if ((_DWORD)v37 == v64)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v26 + 48))((v68 + v27 + v54) & v67, v37, v71))
    {
      goto LABEL_84;
    }
    goto LABEL_79;
  }
  v56 = *(_QWORD *)((v60 + v55) & 0xFFFFFFFFFFFFFFF8);
  if (v56 >= 0xFFFFFFFF)
    LODWORD(v56) = -1;
  if ((v56 + 1) < 2)
    goto LABEL_83;
LABEL_84:
  v57 = (unsigned __int8 *)((v43 + v53) & v67);
  if (v37 > 0xFE)
  {
    v58 = (unint64_t)&v57[v65] & v67;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v26 + 48))(v58, v37, v71))
      goto LABEL_88;
  }
  else if (*v57 <= 1u)
  {
    v58 = (unint64_t)&v57[v65] & v67;
LABEL_88:
    (*(void (**)(unint64_t, uint64_t))(v26 + 8))(v58, v71);
  }
  return sub_21C531A84(*(_QWORD *)((v35 + v45 + 8) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v35 + v45 + 8) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t *sub_21C5A6F00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  size_t v34;
  __int128 v35;
  void *v36;
  const void *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  __int128 *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  size_t v80;
  size_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  unsigned __int8 *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  unsigned __int8 *v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  size_t v112;
  _WORD *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  size_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  size_t v126;
  size_t v127;
  size_t __n;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *__src;
  unint64_t __srca;
  unint64_t __srcb;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  _BYTE *v145;
  unint64_t v146;
  uint64_t v147;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  v12 = a2[6];
  sub_21C56C0C0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v15 | 7) + 56;
  v137 = a1;
  v17 = (_QWORD *)(((unint64_t)a1 + v16) & ~(v15 | 7));
  v18 = (uint64_t *)(((unint64_t)a2 + v16) & ~(v15 | 7));
  v19 = *(_DWORD *)(v14 + 84);
  v20 = (v15 + 89) & ~v15;
  v21 = *(void **)(v14 + 64);
  v22 = ((unint64_t)v18 + 79) & 0xFFFFFFFFFFFFFFF8;
  if (v19 < 0)
  {
    if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v14 + 48))((v15 + v22 + 17) & ~v15, *(unsigned int *)(v14 + 84), v13) <= 1)
    {
LABEL_5:
      v132 = ~v15;
      __src = v21;
      v138 = v14;
      v140 = v19;
      v142 = v13;
      v24 = *v18;
      v25 = v18[1];
      v26 = v18[2];
      v27 = v18[3];
      v146 = ((unint64_t)v18 + 79) & 0xFFFFFFFFFFFFFFF8;
      v29 = v18[4];
      v28 = v18[5];
      v30 = v18[6];
      sub_21C56C0C0(*v18, v25);
      *v17 = v24;
      v17[1] = v25;
      v17[2] = v26;
      v17[3] = v27;
      v17[4] = v29;
      v17[5] = v28;
      v17[6] = v30;
      v31 = ((unint64_t)v17 + 63) & 0xFFFFFFFFFFFFFFF8;
      v32 = ((unint64_t)v18 + 63) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
      v33 = ((unint64_t)v17 + 79) & 0xFFFFFFFFFFFFFFF8;
      if (*(_QWORD *)(v146 + 8) < 0xFFFFFFFFuLL)
      {
        v35 = *(_OWORD *)v146;
        *(_BYTE *)(v33 + 16) = *(_BYTE *)(v146 + 16);
        *(_OWORD *)v33 = v35;
      }
      else
      {
        *(_QWORD *)v33 = *(_QWORD *)v146;
        *(_QWORD *)(v33 + 8) = *(_QWORD *)(v146 + 8);
        *(_BYTE *)(v33 + 16) = *(_BYTE *)(v146 + 16);
        swift_retain();
        swift_retain();
      }
      v20 = (v15 + 89) & ~v15;
      v36 = (void *)((v15 + 17 + v33) & v132);
      v37 = (const void *)((v15 + 17 + v146) & v132);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v138 + 48))(v37, 1, v142))
      {
        if (v140)
          v34 = (size_t)__src;
        else
          v34 = (size_t)__src + 1;
        memcpy(v36, v37, v34);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v138 + 16))(v36, v37, v142);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v138 + 56))(v36, 0, 1, v142);
        if (v140)
          v34 = (size_t)__src;
        else
          v34 = (size_t)__src + 1;
      }
      v38 = ((unint64_t)v36 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
      v39 = ((unint64_t)v37 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (*(_QWORD *)v39 < 0xFFFFFFFFuLL)
      {
        *(_OWORD *)v38 = *(_OWORD *)v39;
      }
      else
      {
        v40 = *(_QWORD *)(v39 + 8);
        *(_QWORD *)v38 = *(_QWORD *)v39;
        *(_QWORD *)(v38 + 8) = v40;
        swift_retain();
      }
      goto LABEL_24;
    }
  }
  else
  {
    v23 = *(_QWORD *)(v22 + 8);
    if (v23 >= 0xFFFFFFFF)
      LODWORD(v23) = -1;
    if ((v23 + 1) < 2)
      goto LABEL_5;
  }
  if (v19)
    v34 = (size_t)v21;
  else
    v34 = (size_t)v21 + 1;
  memcpy(v17, v18, ((v34 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
LABEL_24:
  v41 = ((v20 + v34 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v42 = (char *)v17 + v41;
  v43 = (char *)v18 + v41;
  *(_QWORD *)v42 = *(uint64_t *)((char *)v18 + v41);
  v42[8] = *((_BYTE *)v18 + v41 + 8);
  v44 = (uint64_t)v17 + v41 + 16;
  v45 = (__int128 *)(v43 + 16);
  if (*((_QWORD *)v43 + 3) < 0xFFFFFFFFuLL)
  {
    v46 = *v45;
    *(_QWORD *)(v44 + 16) = *((_QWORD *)v43 + 4);
    *(_OWORD *)v44 = v46;
  }
  else
  {
    *(_QWORD *)v44 = *(_QWORD *)v45;
    *(_QWORD *)(v44 + 8) = *((_QWORD *)v43 + 3);
    *(_QWORD *)(v44 + 16) = *((_QWORD *)v43 + 4);
    swift_retain();
    swift_retain();
  }
  v139 = sub_21C5E31A8();
  v47 = *(_QWORD *)(v139 - 8);
  v48 = *(unsigned __int8 *)(v47 + 80) | 7;
  v49 = (_QWORD *)((unint64_t)&v42[v48 + 40] & ~v48);
  v50 = (_QWORD *)((unint64_t)&v43[v48 + 40] & ~v48);
  v143 = *(_QWORD *)(v47 + 64);
  if (v143 <= 8)
    v51 = 8;
  else
    v51 = *(_QWORD *)(v47 + 64);
  v52 = *((unsigned __int8 *)v50 + v51);
  if (v52 >= 2)
  {
    if (v51 <= 3)
      v53 = v51;
    else
      v53 = 4;
    __asm { BR              X12 }
  }
  __srca = *(unsigned __int8 *)(v47 + 80);
  if (v52 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v47 + 16))(v49, v50, v139);
    v54 = 1;
  }
  else
  {
    *v49 = *v50;
    swift_retain();
    v54 = 0;
  }
  *((_BYTE *)v49 + v51) = v54;
  v147 = sub_21C5E2E78();
  v55 = *(_QWORD *)(v147 - 8);
  v56 = *(unsigned __int8 *)(v55 + 80);
  v57 = v51 + 1 + (v56 | 7);
  v58 = (_QWORD *)(((unint64_t)v49 + v57) & ~(v56 | 7));
  v59 = (_QWORD *)(((unint64_t)v50 + v57) & ~(v56 | 7));
  v60 = *(_QWORD *)(v55 + 64);
  if (v60 <= 8)
    v61 = 8;
  else
    v61 = *(_QWORD *)(v55 + 64);
  v62 = *((unsigned __int8 *)v59 + v61);
  if (v62 >= 2)
  {
    if (v61 <= 3)
      v63 = v61;
    else
      v63 = 4;
    __asm { BR              X12 }
  }
  if (v62 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v55 + 16))(v58, v59, v147);
    v64 = 1;
  }
  else
  {
    *v58 = *v59;
    swift_retain();
    v64 = 0;
  }
  *((_BYTE *)v58 + v61) = v64;
  v65 = ((unint64_t)v58 + v61 + 8) & 0xFFFFFFFFFFFFFFF8;
  v66 = ((unint64_t)v59 + v61 + 8) & 0xFFFFFFFFFFFFFFF8;
  v67 = *(_QWORD *)v66;
  v68 = *(_BYTE *)(v66 + 8);
  sub_21C531A90(*(_QWORD *)v66, v68);
  *(_QWORD *)v65 = v67;
  *(_BYTE *)(v65 + 8) = v68;
  v69 = v48 | v56;
  v70 = (v48 | v56) + 9;
  v71 = (v70 + v65) & ~(v48 | v56);
  v72 = (v70 + v66) & ~(v48 | v56);
  v131 = v47;
  v73 = *(unsigned int *)(v47 + 84);
  v74 = *(unsigned int *)(v55 + 84);
  if (v73 <= v74)
    v75 = *(_DWORD *)(v55 + 84);
  else
    v75 = v73;
  if (v75 <= 0x7FFFFFFE)
    v76 = 2147483646;
  else
    v76 = v75;
  v77 = __srca;
  v141 = (char *)(__srca + 2);
  v78 = v60 + 7;
  v79 = ((v60 + 7 + ((((__srca + 2) & ~__srca) + v143 + v56) & ~v56)) & 0xFFFFFFFFFFFFFFF8) + 8;
  v80 = ((v56 + 3) & ~v56) + v60;
  v81 = ((v56 + 2) & ~v56) + v60;
  v82 = v79 + v56;
  if (v81 + ((v79 + v56 + ((v80 + v69 + ((v79 + v56) & ~v56)) & ~v69)) & ~v56) + 6 <= 8)
    v83 = 8;
  else
    v83 = v81 + ((v79 + v56 + ((v80 + v69 + ((v79 + v56) & ~v56)) & ~v69)) & ~v56) + 6;
  v84 = *(unsigned __int8 *)(v72 + v83);
  if (v84 >= 2)
  {
    if (v83 <= 3)
      v85 = v83;
    else
      v85 = 4;
    __asm { BR              X12 }
  }
  v145 = (_BYTE *)v71;
  if (v84 == 1)
  {
    v122 = v80;
    v123 = v56 + 2;
    v124 = v56 + 3;
    v127 = v80 + v69;
    __n = v79;
    v126 = v81;
    v86 = ~v56;
    __srcb = v72;
    v129 = v78;
    v130 = ~v77;
    v87 = (unint64_t)&v141[v72] & ~v77;
    v125 = v76;
    v133 = v55;
    if ((_DWORD)v73 == v76)
    {
      v88 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v131 + 48))(v87, v73, v139);
    }
    else
    {
      v90 = (v143 + v56 + v87) & v86;
      if ((_DWORD)v74 != v76)
      {
        v91 = *(_QWORD *)((v78 + v90) & 0xFFFFFFFFFFFFFFF8);
        if (v91 >= 0xFFFFFFFF)
          LODWORD(v91) = -1;
        if ((v91 + 1) < 2)
        {
          v119 = v143 + v56;
          v120 = (v143 + v56 + v87) & v86;
          v121 = (_QWORD *)((v78 + v90) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_75;
        }
LABEL_76:
        v92 = __srcb;
        memcpy((void *)v71, (const void *)__srcb, __n);
LABEL_77:
        v95 = ~v69;
        v96 = (_BYTE *)((unint64_t)&v145[v82] & v86);
        v97 = (unsigned __int8 *)((v82 + v92) & v86);
        if (v74 > 0xFE)
        {
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v133 + 48))((unint64_t)&v97[v124] & v86, v74, v147))goto LABEL_79;
        }
        else if (*v97 < 2u)
        {
LABEL_79:
          *v96 = *v97;
          *(_BYTE *)(((unint64_t)&v145[v82] & v86) + 1) = v97[1];
          *(_BYTE *)(((unint64_t)&v145[v82] & v86) + 2) = v97[2];
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v133 + 16))((unint64_t)&v96[v124] & v86, (unint64_t)&v97[v124] & v86, v147);
          goto LABEL_82;
        }
        memcpy(v96, v97, v122);
LABEL_82:
        v98 = (unint64_t)&v96[v127] & v95;
        v99 = (unint64_t)&v97[v127] & v95;
        v100 = (unint64_t)&v141[v99] & v130;
        if ((_DWORD)v73 == v125)
        {
          v101 = v143;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v131 + 48))((unint64_t)&v141[v99] & v130, v73, v139))goto LABEL_87;
        }
        else
        {
          v101 = v143;
          v102 = v143 + v56;
          v103 = (v143 + v56 + v100) & v86;
          if ((_DWORD)v74 == v125)
          {
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v133 + 48))(v103, v74, v147))
            {
LABEL_87:
              v102 = v101 + v56;
              v104 = (v101 + v56 + v100) & v86;
              v144 = (_QWORD *)((v129 + v104) & 0xFFFFFFFFFFFFFFF8);
LABEL_92:
              *(_BYTE *)v98 = *(_BYTE *)v99;
              *(_BYTE *)(v98 | 1) = *(_BYTE *)(v99 | 1);
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v131 + 16))((unint64_t)&v141[v98] & v130, v100, v139);
              v106 = (v102 + ((unint64_t)&v141[v98] & v130)) & v86;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v133 + 16))(v106, v104, v147);
              *(_QWORD *)((v129 + v106) & 0xFFFFFFFFFFFFF8) = *v144;
              swift_retain();
              goto LABEL_94;
            }
          }
          else
          {
            v105 = *(_QWORD *)((v129 + v103) & 0xFFFFFFFFFFFFFFF8);
            if (v105 >= 0xFFFFFFFF)
              LODWORD(v105) = -1;
            if ((v105 + 1) < 2)
            {
              v104 = (v143 + v56 + v100) & v86;
              v144 = (_QWORD *)((v129 + v103) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_92;
            }
          }
        }
        memcpy((void *)v98, (const void *)v99, __n);
LABEL_94:
        v107 = (_BYTE *)((v82 + v98) & v86);
        v108 = (unsigned __int8 *)((v82 + v99) & v86);
        if (v74 > 0xFE)
        {
          v111 = (unint64_t)&v108[v123] & v86;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v133 + 48))(v111, v74, v147))
          {
            LOBYTE(v109) = *v108;
            v110 = v123;
            goto LABEL_100;
          }
        }
        else
        {
          v109 = *v108;
          if (v109 <= 1)
          {
            v110 = v123;
            v111 = (unint64_t)&v108[v123] & v86;
LABEL_100:
            *v107 = v109;
            *(_BYTE *)(((v82 + v98) & v86) + 1) = v108[1];
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v133 + 16))((unint64_t)&v107[v110] & v86, v111, v147);
            v89 = (unint64_t)v145;
            v112 = v126;
            goto LABEL_101;
          }
        }
        v112 = v126;
        memcpy((void *)((v82 + v98) & v86), v108, v126);
        v89 = (unint64_t)v145;
LABEL_101:
        v113 = &v107[v112];
        *v113 = *(_WORD *)&v108[v112];
        v113[1] = *(_WORD *)&v108[v112 + 2];
        v113[2] = *(_WORD *)&v108[v112 + 4];
        *(_BYTE *)(v89 + v83) = 1;
        v72 = __srcb;
        goto LABEL_102;
      }
      v88 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v55 + 48))(v90, v74, v147);
    }
    v71 = (unint64_t)v145;
    if (!v88)
    {
      v119 = v143 + v56;
      v120 = (v143 + v56 + v87) & v86;
      v121 = (_QWORD *)((v129 + v120) & 0xFFFFFFFFFFFFFFF8);
LABEL_75:
      v92 = __srcb;
      *(_BYTE *)v71 = *(_BYTE *)__srcb;
      *(_BYTE *)(v71 | 1) = *(_BYTE *)(__srcb | 1);
      v93 = (unint64_t)&v141[v71] & v130;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v131 + 16))(v93, v87, v139);
      v94 = (v119 + v93) & v86;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v133 + 16))(v94, v120, v147);
      *(_QWORD *)((v129 + v94) & 0xFFFFFFFFFFFFF8) = *v121;
      swift_retain();
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  *(_QWORD *)v71 = *(_QWORD *)v72;
  *(_BYTE *)(v71 + v83) = 0;
  swift_retain();
  v89 = (unint64_t)v145;
LABEL_102:
  v114 = ((v89 | 7) + v83 + 1) & 0xFFFFFFFFFFFFFFF8;
  v115 = ((v72 | 7) + v83 + 1) & 0xFFFFFFFFFFFFFFF8;
  v116 = *(_QWORD *)v115;
  v117 = *(_BYTE *)(v115 + 8);
  sub_21C531A90(*(_QWORD *)v115, v117);
  *(_QWORD *)v114 = v116;
  *(_BYTE *)(v114 + 8) = v117;
  return v137;
}

uint64_t *sub_21C5A7A54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(unint64_t, uint64_t, uint64_t);
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  void *v59;
  const void *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  void *v68;
  void *v69;
  uint64_t (*v70)(void *, uint64_t, uint64_t);
  int v71;
  int v72;
  size_t v73;
  _QWORD *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  _QWORD *v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unsigned __int8 *v142;
  unsigned int v143;
  int v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unsigned __int8 *v150;
  unsigned int v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  _BYTE *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  _BYTE *v172;
  unsigned __int8 *v173;
  unsigned int v174;
  unint64_t v175;
  size_t v176;
  _WORD *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  char v185;
  _QWORD *v187;
  size_t v188;
  size_t v189;
  unint64_t v190;
  size_t __n;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  size_t v198;
  _QWORD *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  int v208;
  uint64_t v209;
  size_t v210;
  size_t v211;
  int v212;
  unint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  unint64_t v216;
  unsigned int v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  v12 = a2[6];
  sub_21C56C0C0(*a2, v7);
  v13 = *a1;
  v14 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  sub_21C56C124(v13, v14);
  v15 = *(_QWORD *)(a3 + 16);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (v17 | 7) + 56;
  v214 = a1;
  v19 = (uint64_t *)(((unint64_t)a1 + v18) & ~(v17 | 7));
  v220 = v16;
  v222 = (uint64_t *)(((unint64_t)a2 + v18) & ~(v17 | 7));
  v20 = *(unsigned int *)(v16 + 84);
  v21 = ~v17;
  v22 = (v17 + 89) & ~v17;
  v23 = *(_QWORD *)(v16 + 64);
  v24 = ((unint64_t)v19 + 79) & 0xFFFFFFFFFFFFFFF8;
  v218 = v24;
  if ((v20 & 0x80000000) == 0)
  {
    v25 = *(_QWORD *)(v24 + 8);
    if (v25 >= 0xFFFFFFFF)
      LODWORD(v25) = -1;
    v26 = v25 + 1;
    v216 = ((unint64_t)v222 + 79) & 0xFFFFFFFFFFFFFFF8;
    v27 = *(_QWORD *)(v216 + 8);
    if (v27 >= 0xFFFFFFFF)
      LODWORD(v27) = -1;
    v28 = v27 + 1;
    if (v26 < 2)
    {
      if (v28 < 2)
        goto LABEL_8;
LABEL_13:
      sub_21C56C124(*v19, v19[1]);
      if (*(_QWORD *)(v24 + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        swift_release();
      }
      v45 = (v17 + v24 + 17) & v21;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v45, 1, v15))
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v45, v15);
      if ((_DWORD)v20)
        v46 = v23;
      else
        v46 = v23 + 1;
      if (*(_QWORD *)((v46 + 7 + v45) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
        swift_release();
      v47 = v46 + 7 + v22;
      goto LABEL_31;
    }
    if (v28 < 2)
      goto LABEL_24;
LABEL_27:
    if ((_DWORD)v20)
      v46 = v23;
    else
      v46 = v23 + 1;
    v47 = v46 + v22 + 7;
LABEL_31:
    memcpy(v19, v222, (v47 & 0xFFFFFFFFFFFFFFF8) + 16);
    goto LABEL_69;
  }
  v42 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v16 + 48);
  v43 = v42((v17 + 17 + v24) & v21, v20, v15);
  v216 = ((unint64_t)v222 + 79) & 0xFFFFFFFFFFFFFFF8;
  v44 = v42((v17 + 17 + v216) & v21, v20, v15);
  if (v43 < 2)
  {
    v24 = ((unint64_t)v19 + 79) & 0xFFFFFFFFFFFFFFF8;
    v16 = v220;
    if (v44 <= 1)
    {
LABEL_8:
      v204 = v15;
      v207 = v20;
      v210 = v23;
      v29 = *v222;
      v30 = v222[1];
      v31 = v222[2];
      v32 = v222[3];
      v34 = v222[4];
      v33 = v222[5];
      v35 = v222[6];
      sub_21C56C0C0(*v222, v30);
      v36 = *v19;
      v37 = v19[1];
      *v19 = v29;
      v19[1] = v30;
      v19[2] = v31;
      v19[3] = v32;
      v19[4] = v34;
      v19[5] = v33;
      v19[6] = v35;
      sub_21C56C124(v36, v37);
      v38 = ((unint64_t)v19 + 63) & 0xFFFFFFFFFFFFFFF8;
      v39 = ((unint64_t)v222 + 63) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
      v40 = *(_QWORD *)(v216 + 8);
      if (*(_QWORD *)(v218 + 8) < 0xFFFFFFFFuLL)
      {
        v41 = v204;
        if (v40 < 0xFFFFFFFF)
        {
          v67 = *(_OWORD *)v216;
          *(_BYTE *)(v218 + 16) = *(_BYTE *)(v216 + 16);
          *(_OWORD *)v218 = v67;
        }
        else
        {
          *(_QWORD *)v218 = *(_QWORD *)v216;
          *(_QWORD *)(v218 + 8) = *(_QWORD *)(v216 + 8);
          *(_BYTE *)(v218 + 16) = *(_BYTE *)(v216 + 16);
          swift_retain();
          swift_retain();
        }
        v46 = v210;
        v65 = v207;
        v66 = ~v17;
      }
      else
      {
        v41 = v204;
        if (v40 < 0xFFFFFFFF)
        {
          swift_release();
          swift_release();
          v64 = *(_OWORD *)v216;
          *(_BYTE *)(v218 + 16) = *(_BYTE *)(v216 + 16);
          *(_OWORD *)v218 = v64;
        }
        else
        {
          *(_QWORD *)v218 = *(_QWORD *)v216;
          swift_retain();
          swift_release();
          *(_QWORD *)(v218 + 8) = *(_QWORD *)(v216 + 8);
          swift_retain();
          swift_release();
          *(_BYTE *)(v218 + 16) = *(_BYTE *)(v216 + 16);
        }
        v46 = v210;
        v65 = v207;
        v66 = ~v17;
      }
      v68 = (void *)((v17 + 17 + v218) & v66);
      v69 = (void *)((v17 + 17 + v216) & v66);
      v70 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v220 + 48);
      v71 = v70(v68, 1, v41);
      v72 = v70(v69, 1, v41);
      if (v71)
      {
        if (!v72)
        {
          (*(void (**)(void *, void *, uint64_t))(v220 + 16))(v68, v69, v41);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v220 + 56))(v68, 0, 1, v41);
          goto LABEL_59;
        }
      }
      else
      {
        if (!v72)
        {
          (*(void (**)(void *, void *, uint64_t))(v220 + 24))(v68, v69, v41);
          goto LABEL_59;
        }
        (*(void (**)(void *, uint64_t))(v220 + 8))(v68, v41);
      }
      if (v65)
        v73 = v46;
      else
        v73 = v46 + 1;
      memcpy(v68, v69, v73);
LABEL_59:
      if (!v65)
        ++v46;
      v74 = (_QWORD *)(((unint64_t)v68 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
      v75 = (unint64_t *)(((unint64_t)v69 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
      v76 = *v75;
      if (*v74 < 0xFFFFFFFFuLL)
      {
        if (v76 >= 0xFFFFFFFF)
        {
          v78 = v75[1];
          *v74 = v76;
          v74[1] = v78;
          swift_retain();
          goto LABEL_68;
        }
      }
      else
      {
        if (v76 >= 0xFFFFFFFF)
        {
          v77 = v75[1];
          *v74 = v76;
          v74[1] = v77;
          swift_retain();
          swift_release();
LABEL_68:
          v22 = (v17 + 89) & ~v17;
          goto LABEL_69;
        }
        swift_release();
      }
      *(_OWORD *)v74 = *(_OWORD *)v75;
      goto LABEL_68;
    }
    goto LABEL_13;
  }
  if (v44 > 1)
    goto LABEL_27;
LABEL_24:
  v202 = ~v17;
  v205 = v15;
  v208 = v20;
  v211 = v23;
  v48 = *v222;
  v49 = v222[1];
  v50 = v222[2];
  v51 = v222[3];
  v52 = v222[4];
  v53 = v222[5];
  v54 = v222[6];
  sub_21C56C0C0(*v222, v49);
  *v19 = v48;
  v19[1] = v49;
  v19[2] = v50;
  v19[3] = v51;
  v19[4] = v52;
  v19[5] = v53;
  v19[6] = v54;
  v55 = ((unint64_t)v19 + 63) & 0xFFFFFFFFFFFFFFF8;
  v56 = ((unint64_t)v222 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v55 = *(_QWORD *)v56;
  *(_BYTE *)(v55 + 8) = *(_BYTE *)(v56 + 8);
  if (*(_QWORD *)(v216 + 8) < 0xFFFFFFFFuLL)
  {
    v58 = *(_OWORD *)v216;
    v57 = ((unint64_t)v19 + 79) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)(v218 + 16) = *(_BYTE *)(v216 + 16);
    *(_OWORD *)v218 = v58;
  }
  else
  {
    v57 = ((unint64_t)v19 + 79) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v218 = *(_QWORD *)v216;
    *(_QWORD *)(v218 + 8) = *(_QWORD *)(v216 + 8);
    *(_BYTE *)(v218 + 16) = *(_BYTE *)(v216 + 16);
    swift_retain();
    swift_retain();
  }
  v59 = (void *)((v17 + 17 + v57) & v202);
  v60 = (const void *)((v17 + 17 + v216) & v202);
  v22 = (v17 + 89) & ~v17;
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v220 + 48))(v60, 1, v205))
  {
    if (v208)
      v46 = v211;
    else
      v46 = v211 + 1;
    memcpy(v59, v60, v46);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v220 + 16))(v59, v60, v205);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v220 + 56))(v59, 0, 1, v205);
    if (v208)
      v46 = v211;
    else
      v46 = v211 + 1;
  }
  v61 = ((unint64_t)v59 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  v62 = ((unint64_t)v60 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v62 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v61 = *(_OWORD *)v62;
  }
  else
  {
    v63 = *(_QWORD *)(v62 + 8);
    *(_QWORD *)v61 = *(_QWORD *)v62;
    *(_QWORD *)(v61 + 8) = v63;
    swift_retain();
  }
LABEL_69:
  v79 = ((v22 + v46 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v80 = (char *)v19 + v79;
  v81 = (char *)v222 + v79;
  *(_QWORD *)v80 = *(uint64_t *)((char *)v222 + v79);
  v80[8] = *((_BYTE *)v222 + v79 + 8);
  v82 = (uint64_t *)((char *)v19 + v79 + 16);
  v83 = (uint64_t *)((char *)v222 + v79 + 16);
  v84 = *(uint64_t *)((char *)v19 + v79 + 24);
  v85 = *(uint64_t *)((char *)v222 + v79 + 24);
  if (v84 < 0xFFFFFFFF)
  {
    if (v85 >= 0xFFFFFFFF)
    {
      *v82 = *v83;
      v82[1] = *((_QWORD *)v81 + 3);
      v82[2] = *((_QWORD *)v81 + 4);
      swift_retain();
      swift_retain();
      goto LABEL_76;
    }
  }
  else
  {
    if (v85 >= 0xFFFFFFFF)
    {
      *v82 = *v83;
      swift_retain();
      swift_release();
      v82[1] = *((_QWORD *)v81 + 3);
      swift_retain();
      swift_release();
      v82[2] = *((_QWORD *)v81 + 4);
      goto LABEL_76;
    }
    swift_release();
    swift_release();
  }
  v86 = *(_OWORD *)v83;
  v82[2] = *((_QWORD *)v81 + 4);
  *(_OWORD *)v82 = v86;
LABEL_76:
  v87 = sub_21C5E31A8();
  v88 = *(_QWORD *)(v87 - 8);
  v89 = *(unsigned __int8 *)(v88 + 80);
  v90 = v89 | 7;
  v91 = &v81[v89 | 7];
  v92 = (_QWORD *)((unint64_t)&v80[(v89 | 7) + 40] & ~(v89 | 7));
  v93 = (_QWORD *)((unint64_t)(v91 + 40) & ~(v89 | 7));
  v219 = v88;
  v94 = *(_QWORD *)(v88 + 64);
  if (v94 <= 8)
    v95 = 8;
  else
    v95 = *(_QWORD *)(v88 + 64);
  if (v92 != v93)
  {
    v96 = *((unsigned __int8 *)v92 + v95);
    if (v96 >= 2)
    {
      if (v95 <= 3)
        v97 = v95;
      else
        v97 = 4;
      __asm { BR              X12 }
    }
    if (v96 == 1)
      (*(void (**)(unint64_t, uint64_t))(v88 + 8))((unint64_t)&v80[(v89 | 7) + 40] & ~(v89 | 7), v87);
    else
      swift_release();
    v98 = *((unsigned __int8 *)v93 + v95);
    if (v98 >= 2)
    {
      if (v95 <= 3)
        v99 = v95;
      else
        v99 = 4;
      __asm { BR              X12 }
    }
    if (v98 == 1)
    {
      (*(void (**)(unint64_t, _QWORD *, uint64_t))(v219 + 16))((unint64_t)&v80[(v89 | 7) + 40] & ~(v89 | 7), v93, v87);
      *((_BYTE *)v92 + v95) = 1;
    }
    else
    {
      *v92 = *v93;
      *((_BYTE *)v92 + v95) = 0;
      swift_retain();
    }
  }
  v100 = sub_21C5E2E78();
  v101 = *(_QWORD *)(v100 - 8);
  v102 = *(unsigned __int8 *)(v101 + 80);
  v103 = v95 + (v102 | 7) + 1;
  v104 = ((unint64_t)v92 + v103) & ~(v102 | 7);
  v105 = ((unint64_t)v93 + v103) & ~(v102 | 7);
  v221 = v100;
  v223 = v101;
  v106 = *(_QWORD *)(v101 + 64);
  if (v106 <= 8)
    v107 = 8;
  else
    v107 = *(_QWORD *)(v101 + 64);
  if (v104 != v105)
  {
    v108 = *(unsigned __int8 *)(v104 + v107);
    if (v108 >= 2)
    {
      if (v107 <= 3)
        v109 = v107;
      else
        v109 = 4;
      __asm { BR              X12 }
    }
    if (v108 == 1)
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v104, v100);
    else
      swift_release();
    v110 = *(unsigned __int8 *)(v105 + v107);
    if (v110 >= 2)
    {
      if (v107 <= 3)
        v111 = v107;
      else
        v111 = 4;
      __asm { BR              X12 }
    }
    if (v110 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v223 + 16))(v104, v105, v221);
      *(_BYTE *)(v104 + v107) = 1;
    }
    else
    {
      *(_QWORD *)v104 = *(_QWORD *)v105;
      *(_BYTE *)(v104 + v107) = 0;
      swift_retain();
    }
  }
  v112 = ((v104 | 7) + v107 + 1) & 0xFFFFFFFFFFFFFFF8;
  v113 = ((v105 | 7) + v107 + 1) & 0xFFFFFFFFFFFFFFF8;
  v114 = *(_QWORD *)v113;
  v115 = *(_BYTE *)(v113 + 8);
  sub_21C531A90(*(_QWORD *)v113, v115);
  v116 = *(_QWORD *)v112;
  v117 = *(_BYTE *)(v112 + 8);
  *(_QWORD *)v112 = v114;
  *(_BYTE *)(v112 + 8) = v115;
  sub_21C531A84(v116, v117);
  v118 = v90 | v102;
  v119 = (v90 | v102) + 9;
  v120 = ~(v90 | v102);
  v121 = (v119 + v112) & v120;
  v122 = (v119 + v113) & v120;
  if (v121 == v122)
  {
    v133 = ~v102;
    v134 = (v102 + 2) & ~v102;
    v128 = ((((v94 + v102 + ((v89 + 2) & ~v89)) & ~v102) + v106 + 7) & 0xFFFFFFFFFFFFFFF8) + v102 + 8;
    v135 = v128 & ~v102;
    v136 = (v102 + 3) & ~v102;
    goto LABEL_213;
  }
  v203 = v87;
  v123 = *(unsigned int *)(v219 + 84);
  v124 = *(_DWORD *)(v223 + 84);
  v217 = v124;
  if (v123 > v124)
    v124 = *(_DWORD *)(v219 + 84);
  if (v124 <= 0x7FFFFFFE)
    v125 = 2147483646;
  else
    v125 = v124;
  v215 = v89 + 2;
  v201 = v94 + v102;
  v126 = ((((v94 + v102 + ((v89 + 2) & ~v89)) & ~v102) + v106 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  __n = v126;
  v192 = v102 + 3;
  v193 = v102 + 2;
  v127 = (v102 + 2) & ~v102;
  v128 = v126 + v102;
  v129 = (v126 + v102) & ~v102;
  v188 = v106 + ((v102 + 3) & ~v102);
  v189 = v106 + v127;
  v198 = v188 + v118;
  v200 = v122;
  if (v106 + v127 + ((v126 + v102 + ((v188 + v118 + v129) & v120)) & ~v102) + 6 <= 8)
    v130 = 8;
  else
    v130 = v106 + v127 + ((v126 + v102 + ((v198 + v129) & v120)) & ~v102) + 6;
  v131 = *(unsigned __int8 *)(v121 + v130);
  if (v131 >= 2)
  {
    if (v130 <= 3)
      v132 = v130;
    else
      v132 = 4;
    __asm { BR              X12 }
  }
  v133 = ~v102;
  v137 = ~v89;
  v206 = v137;
  v209 = v120;
  v212 = v125;
  v196 = (v102 + 3) & ~v102;
  v197 = (v102 + 2) & ~v102;
  v194 = v130;
  v195 = (v126 + v102) & ~v102;
  if (v131 != 1)
  {
    swift_release();
    v139 = v217;
    goto LABEL_169;
  }
  v138 = (v215 + v121) & v137;
  if ((_DWORD)v123 == v125)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v219 + 48))((v215 + v121) & v137, v123, v203))
    {
      goto LABEL_143;
    }
LABEL_138:
    v140 = (v201 + v138) & v133;
LABEL_142:
    (*(void (**)(unint64_t, uint64_t))(v219 + 8))(v138, v203);
    (*(void (**)(unint64_t, uint64_t))(v223 + 8))(v140, v221);
    swift_release();
    goto LABEL_143;
  }
  v140 = (v201 + v138) & v133;
  if (v217 == v125)
  {
    if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v223 + 48))((v201 + v138) & v133, v217, v221))
    {
      goto LABEL_143;
    }
    goto LABEL_138;
  }
  v141 = *(_QWORD *)((v106 + v140 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v141 >= 0xFFFFFFFF)
    LODWORD(v141) = -1;
  if ((v141 + 1) < 2)
    goto LABEL_142;
LABEL_143:
  v142 = (unsigned __int8 *)((v128 + v121) & v133);
  if (v217 > 0xFE)
  {
    v145 = v206;
    if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v223 + 48))((unint64_t)&v142[v192] & v133, v217, v221))
    {
      goto LABEL_151;
    }
    goto LABEL_150;
  }
  v143 = *v142;
  if (v143 >= 2)
    v144 = (v143 + 2147483646) & 0x7FFFFFFF;
  else
    v144 = -1;
  v145 = v206;
  if (v144 == -1)
LABEL_150:
    (*(void (**)(unint64_t, uint64_t))(v223 + 8))((unint64_t)&v142[v192] & v133, v221);
LABEL_151:
  v146 = (unint64_t)&v142[v198] & v209;
  v147 = (v215 + v146) & v145;
  if ((_DWORD)v123 == v212)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v219 + 48))((v215 + v146) & v145, v123, v203))
    {
      goto LABEL_161;
    }
LABEL_156:
    v148 = (v201 + v147) & v133;
LABEL_160:
    (*(void (**)(unint64_t, uint64_t))(v219 + 8))(v147, v203);
    (*(void (**)(unint64_t, uint64_t))(v223 + 8))(v148, v221);
    swift_release();
    goto LABEL_161;
  }
  v148 = (v201 + v147) & v133;
  if (v217 == v212)
  {
    if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v223 + 48))((v201 + v147) & v133, v217, v221))
    {
      goto LABEL_161;
    }
    goto LABEL_156;
  }
  v149 = *(_QWORD *)((v106 + v148 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v149 >= 0xFFFFFFFF)
    LODWORD(v149) = -1;
  if ((v149 + 1) < 2)
    goto LABEL_160;
LABEL_161:
  v150 = (unsigned __int8 *)((v128 + v146) & v133);
  v139 = v217;
  if (v217 > 0xFE)
  {
    v130 = v194;
    v137 = v206;
    if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v223 + 48))((unint64_t)&v150[v193] & v133, v217, v221))
    {
      goto LABEL_169;
    }
    goto LABEL_168;
  }
  v151 = *v150;
  if (v151 >= 2)
    v152 = (v151 + 2147483646) & 0x7FFFFFFF;
  else
    v152 = -1;
  v130 = v194;
  v137 = v206;
  if (v152 == -1)
LABEL_168:
    (*(void (**)(unint64_t, uint64_t))(v223 + 8))((unint64_t)&v150[v193] & v133, v221);
LABEL_169:
  v122 = v200;
  v153 = *(unsigned __int8 *)(v200 + v130);
  if (v153 >= 2)
  {
    if (v130 <= 3)
      v154 = v130;
    else
      v154 = 4;
    __asm { BR              X12 }
  }
  if (v153 != 1)
  {
    *(_QWORD *)v121 = *(_QWORD *)v200;
    *(_BYTE *)(v121 + v130) = 0;
    swift_retain();
    v120 = v209;
    v136 = v196;
    v134 = v197;
    v135 = v195;
    goto LABEL_213;
  }
  v155 = (v215 + v200) & v137;
  v190 = v128;
  if ((_DWORD)v123 == v212)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v219 + 48))(v155, v123, v203))
      goto LABEL_181;
  }
  else
  {
    v156 = (v201 + v155) & v133;
    if ((_DWORD)v139 == v212)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v223 + 48))((v201 + v155) & v133, v139, v221))
      {
LABEL_181:
        v157 = v201;
        v156 = (v201 + v155) & v133;
        v158 = v106 + 7;
        v187 = (_QWORD *)((v106 + 7 + v156) & 0xFFFFFFFFFFFFFFF8);
LABEL_186:
        *(_BYTE *)v121 = *(_BYTE *)v200;
        *(_BYTE *)(v121 | 1) = *(_BYTE *)(v200 | 1);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v219 + 16))((v215 + v121) & v206, v155, v203);
        v160 = (v157 + ((v215 + v121) & v206)) & v133;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v223 + 16))(v160, v156, v221);
        v161 = v158 + v160;
        v122 = v200;
        *(_QWORD *)(v161 & 0xFFFFFFFFFFFFF8) = *v187;
        swift_retain();
        goto LABEL_188;
      }
    }
    else
    {
      v158 = v106 + 7;
      v159 = *(_QWORD *)((v106 + 7 + v156) & 0xFFFFFFFFFFFFFFF8);
      if (v159 >= 0xFFFFFFFF)
        LODWORD(v159) = -1;
      if ((v159 + 1) < 2)
      {
        v157 = v201;
        v187 = (_QWORD *)((v106 + 7 + v156) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_186;
      }
    }
  }
  memcpy((void *)v121, (const void *)v200, __n);
LABEL_188:
  v162 = (_BYTE *)((v190 + v121) & v133);
  v163 = (_BYTE *)((v190 + v122) & v133);
  if (v217 > 0xFE)
  {
    if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v223 + 48))((unint64_t)&v163[v192] & v133, v217, v221))goto LABEL_190;
  }
  else if (*v163 < 2u)
  {
LABEL_190:
    *v162 = *v163;
    *(_BYTE *)(((v190 + v121) & v133) + 1) = *(_BYTE *)(((v190 + v122) & v133) + 1);
    *(_BYTE *)(((v190 + v121) & v133) + 2) = *(_BYTE *)(((v190 + v122) & v133) + 2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v223 + 16))((unint64_t)&v162[v192] & v133, (unint64_t)&v163[v192] & v133, v221);
    goto LABEL_193;
  }
  memcpy(v162, v163, v188);
LABEL_193:
  v164 = (unint64_t)&v162[v198] & v209;
  v165 = (unint64_t)&v163[v198] & v209;
  v166 = (v215 + v165) & v206;
  if ((_DWORD)v123 == v212)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v219 + 48))((v215 + v165) & v206, v123, v203))goto LABEL_198;
  }
  else
  {
    v167 = (v201 + v166) & v133;
    if (v217 == v212)
    {
      if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v223 + 48))((v201 + v166) & v133, v217, v221))
      {
LABEL_198:
        v168 = v201;
        v167 = (v201 + v166) & v133;
        v213 = v106 + 7;
        v199 = (_QWORD *)((v106 + 7 + v167) & 0xFFFFFFFFFFFFFFF8);
LABEL_203:
        *(_BYTE *)v164 = *(_BYTE *)v165;
        *(_BYTE *)(v164 | 1) = *(_BYTE *)(v165 | 1);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v219 + 16))((v215 + v164) & v206, v166, v203);
        v170 = (v168 + ((v215 + v164) & v206)) & v133;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v223 + 16))(v170, v167, v221);
        *(_QWORD *)((v213 + v170) & 0xFFFFFFFFFFFFF8) = *v199;
        swift_retain();
        v122 = v200;
        goto LABEL_205;
      }
    }
    else
    {
      v169 = *(_QWORD *)((v106 + 7 + v167) & 0xFFFFFFFFFFFFFFF8);
      if (v169 >= 0xFFFFFFFF)
        LODWORD(v169) = -1;
      if ((v169 + 1) < 2)
      {
        v168 = v201;
        v213 = v106 + 7;
        v199 = (_QWORD *)((v106 + 7 + v167) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_203;
      }
    }
  }
  memcpy((void *)v164, (const void *)v165, __n);
LABEL_205:
  v171 = v190 + v164;
  v128 = v190;
  v172 = (_BYTE *)(v171 & v133);
  v173 = (unsigned __int8 *)((v190 + v165) & v133);
  if (v217 > 0xFE)
  {
    v175 = (unint64_t)&v173[v193] & v133;
    if (!(*(unsigned int (**)(unint64_t))(v223 + 48))(v175))
    {
      LOBYTE(v174) = *v173;
      goto LABEL_211;
    }
  }
  else
  {
    v174 = *v173;
    if (v174 <= 1)
    {
      v175 = (unint64_t)&v173[v193] & v133;
LABEL_211:
      *v172 = v174;
      v172[1] = v173[1];
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v223 + 16))((unint64_t)&v172[v193] & v133, v175, v221);
      v120 = v209;
      v136 = v196;
      v134 = v197;
      v135 = v195;
      v176 = v189;
      goto LABEL_212;
    }
  }
  v176 = v189;
  memcpy(v172, v173, v189);
  v120 = v209;
  v136 = v196;
  v134 = v197;
  v135 = v195;
LABEL_212:
  v177 = &v172[v176];
  *v177 = *(_WORD *)&v173[v176];
  v177[1] = *(_WORD *)&v173[v176 + 2];
  v177[2] = *(_WORD *)&v173[v176 + 4];
  *(_BYTE *)(v121 + v194) = 1;
LABEL_213:
  v178 = v134 + v106 + ((v128 + ((v136 + v106 + v118 + v135) & v120)) & v133) + 6;
  if (v178 <= 8)
    v178 = 8;
  v179 = v178 + 1;
  v180 = ((v121 | 7) + v179) & 0xFFFFFFFFFFFFFFF8;
  v181 = ((v122 | 7) + v179) & 0xFFFFFFFFFFFFFFF8;
  v182 = *(_QWORD *)v181;
  v183 = *(_BYTE *)(v181 + 8);
  sub_21C531A90(*(_QWORD *)v181, v183);
  v184 = *(_QWORD *)v180;
  v185 = *(_BYTE *)(v180 + 8);
  *(_QWORD *)v180 = v182;
  *(_BYTE *)(v180 + 8) = v183;
  sub_21C531A84(v184, v185);
  return v214;
}

uint64_t sub_21C5A8FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  size_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  size_t v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  char v78;
  uint64_t result;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  _BYTE *v86;
  unsigned __int8 *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _BYTE *v97;
  unsigned __int8 *v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  size_t v103;
  _WORD *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  size_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  size_t v115;
  size_t v116;
  size_t __n;
  uint64_t v118;
  unint64_t v119;
  unint64_t __dst;
  uint64_t v121;
  uint64_t v122;
  void *__src;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 56;
  v8 = (_OWORD *)((v7 + a1) & ~(v6 | 7));
  v9 = (__int128 *)((v7 + a2) & ~(v6 | 7));
  v10 = *(unsigned int *)(v5 + 84);
  v11 = ~v6;
  v12 = (v6 + 89) & ~v6;
  v13 = *(_QWORD *)(v5 + 64);
  v14 = ((unint64_t)v9 + 79) & 0xFFFFFFFFFFFFFFF8;
  if ((v10 & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15 >= 0xFFFFFFFF)
      LODWORD(v15) = -1;
    if ((v15 + 1) < 2)
      goto LABEL_5;
LABEL_11:
    if ((_DWORD)v10)
      v26 = v13;
    else
      v26 = v13 + 1;
    memcpy(v8, v9, ((v26 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    goto LABEL_21;
  }
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((v6 + v14 + 17) & v11, v10, v4) > 1)
    goto LABEL_11;
LABEL_5:
  v16 = *v9;
  v17 = v9[1];
  v18 = v9[2];
  *((_QWORD *)v8 + 6) = *((_QWORD *)v9 + 6);
  v8[1] = v17;
  v8[2] = v18;
  *v8 = v16;
  v19 = ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v9 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = ((unint64_t)v8 + 79) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_OWORD *)v14;
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v14 + 16);
  *(_OWORD *)v21 = v22;
  v23 = v6 + 17;
  v24 = (void *)((v6 + 17 + v21) & v11);
  v25 = (const void *)((v23 + v14) & v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v25, 1, v4))
  {
    if ((_DWORD)v10)
      v26 = v13;
    else
      v26 = v13 + 1;
    memcpy(v24, v25, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v24, v25, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v24, 0, 1, v4);
    if ((_DWORD)v10)
      v26 = v13;
    else
      v26 = v13 + 1;
  }
  v27 = ((unint64_t)v24 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = (uint64_t *)(((unint64_t)v25 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
  v29 = *v28;
  if ((unint64_t)*v28 < 0xFFFFFFFF)
  {
    *(_OWORD *)v27 = *(_OWORD *)v28;
  }
  else
  {
    v30 = v28[1];
    *(_QWORD *)v27 = v29;
    *(_QWORD *)(v27 + 8) = v30;
  }
LABEL_21:
  v31 = ((v12 + v26 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v32 = (char *)v8 + v31;
  v33 = (char *)v9 + v31;
  *(_QWORD *)v32 = *(_QWORD *)((char *)v9 + v31);
  v32[8] = *((_BYTE *)v9 + v31 + 8);
  v34 = *(__int128 *)((char *)v9 + v31 + 16);
  *((_QWORD *)v32 + 4) = *(_QWORD *)((char *)v9 + v31 + 32);
  *((_OWORD *)v32 + 1) = v34;
  v125 = sub_21C5E31A8();
  v35 = *(_QWORD *)(v125 - 8);
  v36 = *(unsigned __int8 *)(v35 + 80);
  v37 = v36 | 7;
  v38 = (_QWORD *)((unint64_t)&v32[(v36 | 7) + 40] & ~(v36 | 7));
  v39 = (_QWORD *)((unint64_t)&v33[(v36 | 7) + 40] & ~(v36 | 7));
  if (*(_QWORD *)(v35 + 64) <= 8uLL)
    v40 = 8;
  else
    v40 = *(_QWORD *)(v35 + 64);
  v41 = *((unsigned __int8 *)v39 + v40);
  if (v41 >= 2)
  {
    if (v40 <= 3)
      v42 = v40;
    else
      v42 = 4;
    __asm { BR              X12 }
  }
  v127 = *(_QWORD *)(v35 + 64);
  if (v41 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v35 + 32))(v38, v39, v125);
    v43 = 1;
  }
  else
  {
    v43 = 0;
    *v38 = *v39;
  }
  *((_BYTE *)v38 + v40) = v43;
  v44 = sub_21C5E2E78();
  v129 = v44;
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(unsigned __int8 *)(v45 + 80);
  v47 = v40 + 1 + (v46 | 7);
  v48 = (_QWORD *)(((unint64_t)v38 + v47) & ~(v46 | 7));
  v49 = (_QWORD *)(((unint64_t)v39 + v47) & ~(v46 | 7));
  v50 = *(_QWORD *)(v45 + 64);
  if (v50 <= 8)
    v51 = 8;
  else
    v51 = *(_QWORD *)(v45 + 64);
  v52 = *((unsigned __int8 *)v49 + v51);
  if (v52 >= 2)
  {
    if (v51 <= 3)
      v53 = v51;
    else
      v53 = 4;
    __asm { BR              X12 }
  }
  if (v52 == 1)
  {
    v54 = *(_QWORD *)(v44 - 8);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v45 + 32))(v48, v49, v44);
    v45 = v54;
    v55 = 1;
  }
  else
  {
    v55 = 0;
    *v48 = *v49;
  }
  *((_BYTE *)v48 + v51) = v55;
  v56 = ((unint64_t)v48 + v51 + 8) & 0xFFFFFFFFFFFFFFF8;
  v57 = ((unint64_t)v49 + v51 + 8) & 0xFFFFFFFFFFFFFFF8;
  v58 = *(_QWORD *)v57;
  *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
  *(_QWORD *)v56 = v58;
  v59 = v37 | v46;
  v60 = (v37 | v46) + 9;
  v61 = (v60 + v56) & ~(v37 | v46);
  v62 = (v60 + v57) & ~(v37 | v46);
  v121 = v35;
  v63 = *(unsigned int *)(v35 + 84);
  v64 = *(unsigned int *)(v45 + 84);
  if (v63 <= v64)
    v65 = *(_DWORD *)(v45 + 84);
  else
    v65 = v63;
  if (v65 <= 0x7FFFFFFE)
    v66 = 2147483646;
  else
    v66 = v65;
  v126 = v36 + 2;
  v67 = v50 + 7;
  v68 = ((v50 + 7 + ((((v36 + 2) & ~v36) + v127 + v46) & ~v46)) & 0xFFFFFFFFFFFFFFF8) + 8;
  v69 = ((v46 + 3) & ~v46) + v50;
  v70 = ((v46 + 2) & ~v46) + v50;
  v71 = v68 + v46;
  if (v70 + ((v68 + v46 + ((v69 + v59 + ((v68 + v46) & ~v46)) & ~v59)) & ~v46) + 6 <= 8)
    v72 = 8;
  else
    v72 = v70 + ((v68 + v46 + ((v69 + v59 + ((v68 + v46) & ~v46)) & ~v59)) & ~v46) + 6;
  v73 = *(unsigned __int8 *)(v62 + v72);
  if (v73 >= 2)
  {
    if (v72 <= 3)
      v74 = v72;
    else
      v74 = 4;
    __asm { BR              X12 }
  }
  if (v73 == 1)
  {
    v111 = v69;
    v113 = v46 + 3;
    v115 = v70;
    v116 = v69 + v59;
    v119 = v67;
    __dst = v61;
    v75 = ~v46;
    __n = v68;
    v118 = ~v36;
    v76 = (v126 + v62) & ~v36;
    __src = (void *)v62;
    v114 = v66;
    v122 = v45;
    v112 = v46 + 2;
    if ((_DWORD)v63 == v66)
    {
      v77 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v121 + 48))(v76, v63, v125);
    }
    else
    {
      v80 = (v127 + v46 + v76) & v75;
      if ((_DWORD)v64 != v66)
      {
        v81 = *(_QWORD *)((v119 + v80) & 0xFFFFFFFFFFFFFFF8);
        if (v81 >= 0xFFFFFFFF)
          LODWORD(v81) = -1;
        if ((v81 + 1) < 2)
        {
          v108 = v127 + v46;
          v109 = (v127 + v46 + v76) & v75;
          v110 = (_QWORD *)((v119 + v80) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_69;
        }
LABEL_70:
        v82 = __dst;
        memcpy((void *)__dst, __src, __n);
        v84 = __src;
LABEL_71:
        v85 = ~v59;
        v86 = (_BYTE *)((v71 + v82) & v75);
        v87 = (unsigned __int8 *)(((unint64_t)v84 + v71) & v75);
        if (v64 > 0xFE)
        {
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v122 + 48))((unint64_t)&v87[v113] & v75, v64, v129))goto LABEL_73;
        }
        else if (*v87 < 2u)
        {
LABEL_73:
          *v86 = *v87;
          v86[1] = v87[1];
          v86[2] = v87[2];
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v122 + 32))((unint64_t)&v86[v113] & v75, (unint64_t)&v87[v113] & v75, v129);
          goto LABEL_76;
        }
        memcpy(v86, v87, v111);
LABEL_76:
        v88 = (unint64_t)&v86[v116] & v85;
        v89 = (unint64_t)&v87[v116] & v85;
        v90 = (v126 + v89) & v118;
        if ((_DWORD)v63 == v114)
        {
          v91 = v127;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v121 + 48))((v126 + v89) & v118, v63, v125))goto LABEL_81;
        }
        else
        {
          v91 = v127;
          v92 = v127 + v46;
          v93 = (v127 + v46 + v90) & v75;
          if ((_DWORD)v64 == v114)
          {
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v122 + 48))(v93, v64, v129))
            {
LABEL_81:
              v92 = v91 + v46;
              v94 = (v91 + v46 + v90) & v75;
              v128 = (_QWORD *)((v119 + v94) & 0xFFFFFFFFFFFFFFF8);
LABEL_86:
              *(_BYTE *)v88 = *(_BYTE *)v89;
              *(_BYTE *)(v88 | 1) = *(_BYTE *)(v89 | 1);
              v96 = (v126 + v88) & v118;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v121 + 32))(v96, v90, v125);
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v122 + 32))((v92 + v96) & v75, v94, v129);
              *(_QWORD *)((v119 + ((v92 + v96) & v75)) & 0xFFFFFFFFFFFFF8) = *v128;
              goto LABEL_88;
            }
          }
          else
          {
            v95 = *(_QWORD *)((v119 + v93) & 0xFFFFFFFFFFFFFFF8);
            if (v95 >= 0xFFFFFFFF)
              LODWORD(v95) = -1;
            if ((v95 + 1) < 2)
            {
              v94 = (v127 + v46 + v90) & v75;
              v128 = (_QWORD *)((v119 + v93) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_86;
            }
          }
        }
        memcpy((void *)v88, (const void *)v89, __n);
LABEL_88:
        v97 = (_BYTE *)((v71 + v88) & v75);
        v98 = (unsigned __int8 *)((v71 + v89) & v75);
        if (v64 > 0xFE)
        {
          v101 = (unint64_t)&v98[v112] & v75;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v122 + 48))(v101, v64, v129))
          {
            LOBYTE(v99) = *v98;
            v100 = v112;
            goto LABEL_94;
          }
        }
        else
        {
          v99 = *v98;
          if (v99 <= 1)
          {
            v100 = v112;
            v101 = (unint64_t)&v98[v112] & v75;
LABEL_94:
            *v97 = v99;
            *(_BYTE *)(((v71 + v88) & v75) + 1) = v98[1];
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v122 + 32))((unint64_t)&v97[v100] & v75, v101, v129);
            result = a1;
            v62 = (unint64_t)__src;
            v103 = v115;
            goto LABEL_95;
          }
        }
        v102 = (void *)((v71 + v88) & v75);
        v103 = v115;
        memcpy(v102, v98, v115);
        result = a1;
        v62 = (unint64_t)__src;
LABEL_95:
        v104 = &v97[v103];
        *v104 = *(_WORD *)&v98[v103];
        v104[1] = *(_WORD *)&v98[v103 + 2];
        v104[2] = *(_WORD *)&v98[v103 + 4];
        v78 = 1;
        v61 = __dst;
        goto LABEL_96;
      }
      v77 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v45 + 48))(v80, v64, v129);
    }
    v62 = (unint64_t)__src;
    if (!v77)
    {
      v108 = v127 + v46;
      v109 = (v127 + v46 + v76) & v75;
      v110 = (_QWORD *)((v119 + v109) & 0xFFFFFFFFFFFFFFF8);
LABEL_69:
      v82 = __dst;
      *(_BYTE *)__dst = *(_BYTE *)v62;
      *(_BYTE *)(__dst | 1) = *(_BYTE *)(v62 | 1);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v121 + 32))((v126 + __dst) & v118, v76, v125);
      v83 = (v108 + ((v126 + __dst) & v118)) & v75;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v122 + 32))(v83, v109, v129);
      v84 = __src;
      *(_QWORD *)((v119 + v83) & 0xFFFFFFFFFFFFF8) = *v110;
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  v78 = 0;
  *(_QWORD *)v61 = *(_QWORD *)v62;
  result = a1;
LABEL_96:
  *(_BYTE *)(v61 + v72) = v78;
  v105 = ((v62 | 7) + v72 + 1) & 0xFFFFFFFFFFFFFFF8;
  v106 = *(_QWORD *)v105;
  v107 = ((v61 | 7) + v72 + 1) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v107 + 8) = *(_BYTE *)(v105 + 8);
  *(_QWORD *)v107 = v106;
  return result;
}

uint64_t sub_21C5A99C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(unint64_t, uint64_t, uint64_t);
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t (*v58)(void *, uint64_t, uint64_t);
  int v59;
  int v60;
  size_t v61;
  _QWORD *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unsigned __int8 *v127;
  unsigned int v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unsigned __int8 *v133;
  unsigned int v134;
  int v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  _BYTE *v145;
  _BYTE *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  int v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _BYTE *v157;
  unsigned __int8 *v158;
  unsigned int v159;
  unint64_t v160;
  _WORD *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  _QWORD *v170;
  unint64_t v171;
  unint64_t v172;
  size_t v173;
  size_t v174;
  unint64_t __n;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  size_t v197;
  uint64_t v198;

  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v6;
  sub_21C56C124(v7, v8);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 | 7) + 56;
  v189 = a1;
  v14 = (v13 + a1) & ~(v12 | 7);
  v15 = v13 + a2;
  v16 = v15 & ~(v12 | 7);
  v17 = *(unsigned int *)(v11 + 84);
  v18 = ~v12;
  v19 = (v12 + 89) & ~v12;
  v197 = *(_QWORD *)(v11 + 64);
  v20 = (v14 + 79) & 0xFFFFFFFFFFFFFFF8;
  if ((v17 & 0x80000000) == 0)
  {
    v21 = *(_QWORD *)(v20 + 8);
    if (v21 >= 0xFFFFFFFF)
      LODWORD(v21) = -1;
    v22 = v21 + 1;
    v23 = (v16 + 79) & 0xFFFFFFFFFFFFFFF8;
    v24 = *(_QWORD *)(v23 + 8);
    if (v24 >= 0xFFFFFFFF)
      LODWORD(v24) = -1;
    v25 = v24 + 1;
    if (v22 < 2)
    {
      if (v25 < 2)
        goto LABEL_8;
      goto LABEL_13;
    }
    if (v25 < 2)
    {
LABEL_24:
      v195 = v19;
      v41 = *(_OWORD *)v16;
      v42 = *(_OWORD *)(v16 + 16);
      v43 = *(_OWORD *)(v16 + 32);
      *(_QWORD *)(v14 + 48) = *(_QWORD *)(v16 + 48);
      *(_OWORD *)(v14 + 16) = v42;
      *(_OWORD *)(v14 + 32) = v43;
      *(_OWORD *)v14 = v41;
      v44 = (v14 + 63) & 0xFFFFFFFFFFFFFFF8;
      v45 = (v16 + 63) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v44 = *(_QWORD *)v45;
      *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
      v46 = *(_OWORD *)v23;
      *(_BYTE *)(v20 + 16) = *(_BYTE *)(v23 + 16);
      *(_OWORD *)v20 = v46;
      v47 = v18;
      v48 = (void *)((v12 + 17 + v20) & v18);
      v49 = (const void *)((v12 + 17 + v23) & v47);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v49, 1, v10))
      {
        if ((_DWORD)v17)
          v39 = v197;
        else
          v39 = v197 + 1;
        memcpy(v48, v49, v39);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v48, v49, v10);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
        if ((_DWORD)v17)
          v39 = v197;
        else
          v39 = v197 + 1;
      }
      v50 = ((unint64_t)v48 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
      v51 = (uint64_t *)(((unint64_t)v49 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      v52 = *v51;
      if ((unint64_t)*v51 < 0xFFFFFFFF)
      {
        *(_OWORD *)v50 = *(_OWORD *)v51;
      }
      else
      {
        v53 = v51[1];
        *(_QWORD *)v50 = v52;
        *(_QWORD *)(v50 + 8) = v53;
      }
      v19 = v195;
      goto LABEL_63;
    }
LABEL_30:
    if ((_DWORD)v17)
      v39 = v197;
    else
      v39 = v197 + 1;
    v40 = v39 + v19 + 7;
LABEL_34:
    memcpy((void *)v14, (const void *)v16, (v40 & 0xFFFFFFFFFFFFFFF8) + 16);
    goto LABEL_63;
  }
  v33 = v15 & ~(v12 | 7);
  v34 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
  v35 = v34((v12 + 17 + v20) & v18, v17, v10);
  v36 = v33;
  v23 = (v33 + 79) & 0xFFFFFFFFFFFFFFF8;
  v37 = v34((v12 + 17 + v23) & ~v12, v17, v10);
  if (v35 >= 2)
  {
    v16 = v36;
    v19 = (v12 + 89) & ~v12;
    v18 = ~v12;
    if (v37 <= 1)
      goto LABEL_24;
    goto LABEL_30;
  }
  v16 = v36;
  v19 = (v12 + 89) & ~v12;
  v18 = ~v12;
  if (v37 > 1)
  {
LABEL_13:
    sub_21C56C124(*(_QWORD *)v14, *(_QWORD *)(v14 + 8));
    if (*(_QWORD *)(v20 + 8) >= 0xFFFFFFFFuLL)
    {
      swift_release();
      swift_release();
    }
    v38 = (v12 + v20 + 17) & v18;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v38, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v38, v10);
    if ((_DWORD)v17)
      v39 = v197;
    else
      v39 = v197 + 1;
    if (*(_QWORD *)((v39 + 7 + v38) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
      swift_release();
    v40 = v39 + 7 + v19;
    goto LABEL_34;
  }
LABEL_8:
  v26 = *(_QWORD *)(v16 + 48);
  v27 = *(_QWORD *)v14;
  v28 = *(_QWORD *)(v14 + 8);
  v29 = *(_OWORD *)(v16 + 16);
  v30 = *(_OWORD *)(v16 + 32);
  *(_OWORD *)v14 = *(_OWORD *)v16;
  *(_OWORD *)(v14 + 16) = v29;
  *(_OWORD *)(v14 + 32) = v30;
  *(_QWORD *)(v14 + 48) = v26;
  sub_21C56C124(v27, v28);
  v31 = (v14 + 63) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v16 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  v194 = v19;
  if (*(_QWORD *)(v20 + 8) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v23 + 8) >= 0xFFFFFFFFuLL)
    {
      *(_QWORD *)v20 = *(_QWORD *)v23;
      swift_release();
      *(_QWORD *)(v20 + 8) = *(_QWORD *)(v23 + 8);
      swift_release();
      *(_BYTE *)(v20 + 16) = *(_BYTE *)(v23 + 16);
      goto LABEL_44;
    }
    swift_release();
    swift_release();
  }
  v54 = *(_OWORD *)v23;
  *(_BYTE *)(v20 + 16) = *(_BYTE *)(v23 + 16);
  *(_OWORD *)v20 = v54;
LABEL_44:
  v55 = v18;
  v56 = (void *)((v12 + 17 + v20) & v18);
  v57 = (void *)((v12 + 17 + v23) & v55);
  v58 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v59 = v58(v56, 1, v10);
  v60 = v58(v57, 1, v10);
  if (!v59)
  {
    if (!v60)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v56, v57, v10);
      goto LABEL_53;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v56, v10);
LABEL_49:
    if ((_DWORD)v17)
      v61 = v197;
    else
      v61 = v197 + 1;
    memcpy(v56, v57, v61);
    goto LABEL_53;
  }
  if (v60)
    goto LABEL_49;
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v56, v57, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v56, 0, 1, v10);
LABEL_53:
  if ((_DWORD)v17)
    v39 = v197;
  else
    v39 = v197 + 1;
  v62 = (_QWORD *)(((unint64_t)v56 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
  v63 = (unint64_t *)(((unint64_t)v57 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
  v64 = *v63;
  if (*v62 < 0xFFFFFFFFuLL)
  {
    v19 = v194;
    if (v64 >= 0xFFFFFFFF)
    {
      v66 = v63[1];
      *v62 = v64;
      v62[1] = v66;
      goto LABEL_63;
    }
  }
  else
  {
    v19 = v194;
    if (v64 >= 0xFFFFFFFF)
    {
      v65 = v63[1];
      *v62 = v64;
      v62[1] = v65;
      swift_release();
      goto LABEL_63;
    }
    swift_release();
  }
  *(_OWORD *)v62 = *(_OWORD *)v63;
LABEL_63:
  v67 = ((v19 + v39 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v68 = v67 + v14;
  v69 = v67 + v16;
  *(_QWORD *)v68 = *(_QWORD *)v69;
  *(_BYTE *)(v68 + 8) = *(_BYTE *)(v69 + 8);
  v70 = (_QWORD *)(v67 + v14 + 16);
  v71 = (_QWORD *)(v69 + 16);
  if (*(_QWORD *)(v68 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v69 + 24) >= 0xFFFFFFFFuLL)
    {
      *v70 = *v71;
      swift_release();
      v70[1] = *(_QWORD *)(v69 + 24);
      swift_release();
      v70[2] = *(_QWORD *)(v69 + 32);
      goto LABEL_68;
    }
    swift_release();
    swift_release();
  }
  v72 = *(_OWORD *)v71;
  v70[2] = *(_QWORD *)(v69 + 32);
  *(_OWORD *)v70 = v72;
LABEL_68:
  v73 = sub_21C5E31A8();
  v74 = *(_QWORD *)(v73 - 8);
  v75 = *(unsigned __int8 *)(v74 + 80);
  v76 = v75 | 7;
  v77 = (_QWORD *)((v68 + (v75 | 7) + 40) & ~(v75 | 7));
  v78 = (_QWORD *)((v69 + (v75 | 7) + 40) & ~(v75 | 7));
  v193 = v74;
  v79 = *(_QWORD *)(v74 + 64);
  if (v79 <= 8)
    v80 = 8;
  else
    v80 = *(_QWORD *)(v74 + 64);
  if (v77 != v78)
  {
    v81 = *((unsigned __int8 *)v77 + v80);
    if (v81 >= 2)
    {
      if (v80 <= 3)
        v82 = v80;
      else
        v82 = 4;
      __asm { BR              X12 }
    }
    if (v81 == 1)
      (*(void (**)(unint64_t, uint64_t))(v74 + 8))((v68 + (v75 | 7) + 40) & ~(v75 | 7), v73);
    else
      swift_release();
    v83 = *((unsigned __int8 *)v78 + v80);
    if (v83 >= 2)
    {
      if (v80 <= 3)
        v84 = v80;
      else
        v84 = 4;
      __asm { BR              X12 }
    }
    if (v83 == 1)
    {
      (*(void (**)(unint64_t, _QWORD *, uint64_t))(v193 + 32))((v68 + (v75 | 7) + 40) & ~(v75 | 7), v78, v73);
      v85 = 1;
    }
    else
    {
      v85 = 0;
      *v77 = *v78;
    }
    *((_BYTE *)v77 + v80) = v85;
  }
  v86 = sub_21C5E2E78();
  v87 = *(_QWORD *)(v86 - 8);
  v88 = *(unsigned __int8 *)(v87 + 80);
  v89 = v80 + (v88 | 7) + 1;
  v90 = ((unint64_t)v77 + v89) & ~(v88 | 7);
  v91 = ((unint64_t)v78 + v89) & ~(v88 | 7);
  v196 = v86;
  v198 = v87;
  v92 = *(_QWORD *)(v87 + 64);
  if (v92 <= 8)
    v93 = 8;
  else
    v93 = *(_QWORD *)(v87 + 64);
  if (v90 != v91)
  {
    v94 = *(unsigned __int8 *)(v90 + v93);
    if (v94 >= 2)
    {
      if (v93 <= 3)
        v95 = v93;
      else
        v95 = 4;
      __asm { BR              X12 }
    }
    if (v94 == 1)
      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v90, v86);
    else
      swift_release();
    v96 = *(unsigned __int8 *)(v91 + v93);
    if (v96 >= 2)
    {
      if (v93 <= 3)
        v97 = v93;
      else
        v97 = 4;
      __asm { BR              X12 }
    }
    if (v96 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v198 + 32))(v90, v91, v196);
      v98 = 1;
    }
    else
    {
      v98 = 0;
      *(_QWORD *)v90 = *(_QWORD *)v91;
    }
    *(_BYTE *)(v90 + v93) = v98;
  }
  v99 = v93 + 1;
  v100 = ((v90 | 7) + v93 + 1) & 0xFFFFFFFFFFFFFFF8;
  v101 = ((v91 | 7) + v99) & 0xFFFFFFFFFFFFFFF8;
  v102 = *(_BYTE *)(v101 + 8);
  v103 = *(_QWORD *)v100;
  v104 = *(_BYTE *)(v100 + 8);
  *(_QWORD *)v100 = *(_QWORD *)v101;
  *(_BYTE *)(v100 + 8) = v102;
  sub_21C531A84(v103, v104);
  v105 = v76 | v88;
  v106 = (v76 | v88) + 9;
  v107 = ~(v76 | v88);
  v108 = (v106 + v100) & v107;
  v109 = (v106 + v101) & v107;
  if (v108 == v109)
  {
    v119 = ~v88;
    v120 = (v88 + 2) & ~v88;
    v115 = ((((v79 + v88 + ((v75 + 2) & ~v75)) & ~v88) + v92 + 7) & 0xFFFFFFFFFFFFFFF8) + v88 + 8;
    v121 = v115 & ~v88;
    v122 = (v88 + 3) & ~v88;
    goto LABEL_207;
  }
  v110 = *(unsigned int *)(v193 + 84);
  v111 = *(_DWORD *)(v198 + 84);
  v192 = v111;
  if (v110 > v111)
    v111 = *(_DWORD *)(v193 + 84);
  if (v111 <= 0x7FFFFFFE)
    v112 = 2147483646;
  else
    v112 = v111;
  v190 = v75 + 2;
  v186 = v79 + v88;
  __n = ((((v79 + v88 + ((v75 + 2) & ~v75)) & ~v88) + v92 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v176 = v88 + 3;
  v113 = (v88 + 3) & ~v88;
  v177 = v88 + 2;
  v114 = (v88 + 2) & ~v88;
  v115 = __n + v88;
  v181 = v92 + v113 + v105;
  v182 = (__n + v88) & ~v88;
  if (v92 + v114 + ((__n + v88 + ((v181 + v182) & v107)) & ~v88) + 6 <= 8)
    v116 = 8;
  else
    v116 = v92 + v114 + ((__n + v88 + ((v181 + v182) & v107)) & ~v88) + 6;
  v117 = *(unsigned __int8 *)(v108 + v116);
  v179 = (v88 + 3) & ~v88;
  v180 = (v88 + 2) & ~v88;
  if (v117 >= 2)
  {
    if (v116 <= 3)
      v118 = v116;
    else
      v118 = 4;
    __asm { BR              X12 }
  }
  v185 = v73;
  v119 = ~v88;
  v123 = ~v75;
  v191 = v107;
  v187 = v112;
  v183 = ~v75;
  v184 = v116;
  v178 = (_QWORD *)v109;
  v173 = v92 + v113;
  v174 = v92 + v114;
  if (v117 != 1)
  {
    swift_release();
    goto LABEL_162;
  }
  v124 = (v190 + v108) & v123;
  if ((_DWORD)v110 == v112)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v193 + 48))((v190 + v108) & v123, v110, v185))
    {
      goto LABEL_137;
    }
LABEL_132:
    v125 = (v186 + v124) & v119;
LABEL_136:
    (*(void (**)(unint64_t, uint64_t))(v193 + 8))(v124, v185);
    (*(void (**)(unint64_t, uint64_t))(v198 + 8))(v125, v196);
    swift_release();
    goto LABEL_137;
  }
  v125 = (v186 + v124) & v119;
  if (v192 == v112)
  {
    if ((*(unsigned int (**)(unint64_t))(v198 + 48))((v186 + v124) & v119))
      goto LABEL_137;
    goto LABEL_132;
  }
  v126 = *(_QWORD *)((v92 + v125 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v126 >= 0xFFFFFFFF)
    LODWORD(v126) = -1;
  if ((v126 + 1) < 2)
    goto LABEL_136;
LABEL_137:
  v127 = (unsigned __int8 *)((v115 + v108) & v119);
  if (v192 > 0xFE)
  {
    if ((*(unsigned int (**)(unint64_t))(v198 + 48))((unint64_t)&v127[v176] & v119))
      goto LABEL_142;
    goto LABEL_141;
  }
  v128 = *v127;
  if (v128 < 2 || ((v128 + 2147483646) & 0x7FFFFFFF) == 0xFFFFFFFF)
LABEL_141:
    (*(void (**)(unint64_t, uint64_t))(v198 + 8))((unint64_t)&v127[v176] & v119, v196);
LABEL_142:
  v129 = (unint64_t)&v127[v181] & v191;
  v130 = (v190 + v129) & v123;
  if ((_DWORD)v110 == v187)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v193 + 48))((v190 + v129) & v123, v110, v185))
    {
      goto LABEL_154;
    }
LABEL_147:
    v131 = (v186 + v130) & v119;
LABEL_153:
    (*(void (**)(unint64_t, uint64_t))(v193 + 8))(v130, v185);
    (*(void (**)(unint64_t, uint64_t))(v198 + 8))(v131, v196);
    swift_release();
    goto LABEL_154;
  }
  v131 = (v186 + v130) & v119;
  if (v192 == v187)
  {
    if ((*(unsigned int (**)(unint64_t))(v198 + 48))((v186 + v130) & v119))
      goto LABEL_154;
    goto LABEL_147;
  }
  v132 = *(_QWORD *)((v92 + v131 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v132 >= 0xFFFFFFFF)
    LODWORD(v132) = -1;
  if ((v132 + 1) < 2)
    goto LABEL_153;
LABEL_154:
  v133 = (unsigned __int8 *)((v115 + v129) & v119);
  if (v192 > 0xFE)
  {
    v136 = v177;
    v109 = (unint64_t)v178;
    v123 = v183;
    if ((*(unsigned int (**)(unint64_t))(v198 + 48))((unint64_t)&v133[v177] & v119))
      goto LABEL_162;
    goto LABEL_161;
  }
  v134 = *v133;
  if (v134 >= 2)
    v135 = (v134 + 2147483646) & 0x7FFFFFFF;
  else
    v135 = -1;
  v136 = v177;
  v109 = (unint64_t)v178;
  v123 = v183;
  if (v135 == -1)
LABEL_161:
    (*(void (**)(unint64_t, uint64_t))(v198 + 8))((unint64_t)&v133[v136] & v119, v196);
LABEL_162:
  v137 = *(unsigned __int8 *)(v109 + v184);
  if (v137 >= 2)
  {
    if (v184 <= 3)
      v138 = v184;
    else
      v138 = 4;
    __asm { BR              X12 }
  }
  v107 = v191;
  if (v137 == 1)
  {
    v139 = (v190 + v109) & v123;
    v172 = v115;
    v140 = v109;
    if ((_DWORD)v110 == v187)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v193 + 48))(v139, v110, v185))
        goto LABEL_174;
    }
    else
    {
      v141 = (v186 + v139) & v119;
      if (v192 == v187)
      {
        if (!(*(unsigned int (**)(unint64_t))(v198 + 48))((v186 + v139) & v119))
        {
LABEL_174:
          v142 = v186;
          v141 = (v186 + v139) & v119;
          v171 = v92 + 7;
          v170 = (_QWORD *)((v92 + 7 + v141) & 0xFFFFFFFFFFFFFFF8);
LABEL_179:
          *(_BYTE *)v108 = *(_BYTE *)v140;
          *(_BYTE *)(v108 | 1) = *(_BYTE *)(v140 | 1);
          v144 = (v190 + v108) & v183;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v193 + 32))(v144, v139, v185);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v198 + 32))((v142 + v144) & v119, v141, v196);
          *(_QWORD *)((v171 + ((v142 + v144) & v119)) & 0xFFFFFFFFFFFFF8) = *v170;
          v115 = v172;
          goto LABEL_181;
        }
      }
      else
      {
        v143 = *(_QWORD *)((v92 + 7 + v141) & 0xFFFFFFFFFFFFFFF8);
        if (v143 >= 0xFFFFFFFF)
          LODWORD(v143) = -1;
        if ((v143 + 1) < 2)
        {
          v142 = v186;
          v170 = (_QWORD *)((v92 + 7 + v141) & 0xFFFFFFFFFFFFFFF8);
          v171 = v92 + 7;
          goto LABEL_179;
        }
      }
    }
    memcpy((void *)v108, (const void *)v140, __n);
LABEL_181:
    v145 = (_BYTE *)((v115 + v108) & v119);
    v146 = (_BYTE *)((v115 + v140) & v119);
    if (v192 > 0xFE)
    {
      if (!(*(unsigned int (**)(unint64_t))(v198 + 48))((unint64_t)&v146[v176] & v119))
        goto LABEL_183;
    }
    else if (*v146 < 2u)
    {
LABEL_183:
      *v145 = *v146;
      *(_BYTE *)(((v115 + v108) & v119) + 1) = *(_BYTE *)(((v115 + v140) & v119) + 1);
      *(_BYTE *)(((v115 + v108) & v119) + 2) = *(_BYTE *)(((v115 + v140) & v119) + 2);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v198 + 32))((unint64_t)&v145[v176] & v119, (unint64_t)&v146[v176] & v119, v196);
      goto LABEL_186;
    }
    memcpy((void *)((v115 + v108) & v119), (const void *)((v115 + v140) & v119), v173);
LABEL_186:
    v147 = (unint64_t)&v145[v181] & v191;
    v148 = (unint64_t)&v146[v181] & v191;
    v149 = (v190 + v148) & v183;
    if ((_DWORD)v110 == v187)
    {
      v150 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v193 + 48))((v190 + v148) & v183, v110, v185);
      v151 = v186;
      if (!v150)
        goto LABEL_191;
    }
    else
    {
      v151 = v186;
      v152 = (v186 + v149) & v119;
      if (v192 == v187)
      {
        if (!(*(unsigned int (**)(unint64_t))(v198 + 48))((v186 + v149) & v119))
        {
LABEL_191:
          v152 = (v151 + v149) & v119;
          v153 = v92 + 7;
          v188 = (_QWORD *)((v92 + 7 + v152) & 0xFFFFFFFFFFFFFFF8);
LABEL_196:
          *(_BYTE *)v147 = *(_BYTE *)v148;
          *(_BYTE *)(v147 | 1) = *(_BYTE *)(v148 | 1);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v193 + 32))((v190 + v147) & v183, v149, v185);
          v155 = (v186 + ((v190 + v147) & v183)) & v119;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v198 + 32))(v155, v152, v196);
          *(_QWORD *)((v153 + v155) & 0xFFFFFFFFFFFFF8) = *v188;
          goto LABEL_198;
        }
      }
      else
      {
        v153 = v92 + 7;
        v154 = *(_QWORD *)((v92 + 7 + v152) & 0xFFFFFFFFFFFFFFF8);
        if (v154 >= 0xFFFFFFFF)
          LODWORD(v154) = -1;
        if ((v154 + 1) < 2)
        {
          v188 = (_QWORD *)((v92 + 7 + v152) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_196;
        }
      }
    }
    memcpy((void *)v147, (const void *)v148, __n);
LABEL_198:
    v156 = v172 + v147;
    v115 = v172;
    v157 = (_BYTE *)(v156 & v119);
    v158 = (unsigned __int8 *)((v172 + v148) & v119);
    if (v192 > 0xFE)
    {
      v160 = (unint64_t)&v158[v177] & v119;
      if (!(*(unsigned int (**)(unint64_t))(v198 + 48))(v160))
      {
        LOBYTE(v159) = *v158;
        goto LABEL_204;
      }
    }
    else
    {
      v159 = *v158;
      if (v159 <= 1)
      {
        v160 = (unint64_t)&v158[v177] & v119;
LABEL_204:
        *v157 = v159;
        v157[1] = v158[1];
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v198 + 32))((unint64_t)&v157[v177] & v119, v160, v196);
        goto LABEL_205;
      }
    }
    memcpy(v157, v158, v174);
LABEL_205:
    v107 = v191;
    v122 = v179;
    v120 = v180;
    v161 = &v157[v174];
    *v161 = *(_WORD *)&v158[v174];
    v161[1] = *(_WORD *)&v158[v174 + 2];
    v161[2] = *(_WORD *)&v158[v174 + 4];
    *(_BYTE *)(v108 + v184) = 1;
    v109 = (unint64_t)v178;
    goto LABEL_206;
  }
  *(_QWORD *)v108 = *(_QWORD *)v109;
  *(_BYTE *)(v108 + v184) = 0;
  v122 = v179;
  v120 = v180;
LABEL_206:
  v121 = v182;
LABEL_207:
  v162 = v120 + v92 + ((v115 + ((v122 + v92 + v105 + v121) & v107)) & v119) + 6;
  if (v162 <= 8)
    v162 = 8;
  v163 = v162 + 1;
  v164 = ((v108 | 7) + v163) & 0xFFFFFFFFFFFFFFF8;
  v165 = ((v109 | 7) + v163) & 0xFFFFFFFFFFFFFFF8;
  v166 = *(_QWORD *)v165;
  LOBYTE(v165) = *(_BYTE *)(v165 + 8);
  v167 = *(_QWORD *)v164;
  v168 = *(_BYTE *)(v164 + 8);
  *(_QWORD *)v164 = v166;
  *(_BYTE *)(v164 + 8) = v165;
  sub_21C531A84(v167, v168);
  return v189;
}

uint64_t sub_21C5AAD48(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  int v38;

  v37 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v37 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if ((_DWORD)v6)
    v7 = v6 - 1;
  else
    v7 = 0;
  if (v7 <= 0x7FFFFFFE)
    v8 = 2147483646;
  else
    v8 = v7;
  v9 = v8 - 1;
  if ((v8 - 1) <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v8 - 1;
  v11 = *(_QWORD *)(sub_21C5E31A8() - 8);
  v12 = *(_QWORD *)(v11 + 64);
  if (v12 <= 8)
    LODWORD(v13) = 8;
  else
    v13 = *(_QWORD *)(v11 + 64);
  v38 = v13;
  v14 = *(_QWORD *)(sub_21C5E2E78() - 8);
  v15 = *(_QWORD *)(v14 + 64);
  if (v15 <= 8)
    LODWORD(v16) = 8;
  else
    v16 = *(_QWORD *)(v14 + 64);
  v17 = *(unsigned __int8 *)(v11 + 80);
  v18 = *(unsigned __int8 *)(v14 + 80);
  v19 = v17 | 7 | v18;
  v20 = 7;
  if (!(_DWORD)v6)
    v20 = 8;
  v21 = ((v15 + ((v12 + v18 + ((v17 + 2) & ~v17)) & ~v18) + 7) & 0xFFFFFFFFFFFFFFF8) + v18 + 8;
  v22 = v15 + ((v18 + 2) & ~v18) + ((v21 + ((v19 + v15 + ((v18 + 3) & ~v18) + (v21 & ~v18)) & ~v19)) & ~v18) + 6;
  if (v22 <= 8)
    v23 = 8;
  else
    v23 = v22;
  if (!a2)
    return 0;
  v24 = *(unsigned __int8 *)(v5 + 80);
  v25 = v24 | 7;
  v26 = ((v20 + *(_QWORD *)(v5 + 64) + ((v24 + 89) & ~v24)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v10 < a2)
  {
    v27 = ((v23
          + ((v19
            + ((v16
              + ((v38 + (v18 | 7) + ((v17 + ((v24 + 56) & ~(_DWORD)v25) + v26 + 40) & ~(v17 | 7)) + 1) & ~(v18 | 7))
              + 8) & 0xFFFFFFF8)
            + 9) & ~(_DWORD)v19)
          + 8) & 0xFFFFFFF8)
        + 9;
    if (v27 < 4)
      v28 = ((a2 - v10 + 255) >> (8 * v27)) + 1;
    else
      v28 = 2;
    if (v28 >= 0x10000)
      v29 = 4;
    else
      v29 = 2;
    if (v28 < 0x100)
      v29 = 1;
    if (v28 >= 2)
      v30 = v29;
    else
      v30 = 0;
    __asm { BR              X15 }
  }
  v32 = (a1 + v25 + 56) & ~v25;
  if (v9 < 0x7FFFFFFE)
  {
    v36 = *(_QWORD *)(v32 + v26 + 24);
    if (v36 >= 0xFFFFFFFF)
      LODWORD(v36) = -1;
    if ((v36 + 1) >= 2)
      return v36;
    else
      return 0;
  }
  else
  {
    v33 = (v32 + 79) & 0xFFFFFFFFFFFFFFF8;
    if (v7 > 0x7FFFFFFE)
    {
      v35 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((v24 + v33 + 17) & ~v24, v6, v37);
      LODWORD(v34) = v35 - 1;
    }
    else
    {
      v34 = *(_QWORD *)(v33 + 8);
      if (v34 >= 0xFFFFFFFF)
        LODWORD(v34) = -1;
      v35 = v34 + 1;
    }
    if (v35 < 2)
      LODWORD(v34) = 0;
    if (v34 >= 2)
      return (v34 - 1);
    else
      return 0;
  }
}

void sub_21C5AB050(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unsigned int v28;
  int v29;
  int v30;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  if (v8 <= 0x7FFFFFFE)
    v8 = 2147483646;
  if (v8 - 1 <= 0x7FFFFFFE)
    v9 = 2147483646;
  else
    v9 = v8 - 1;
  v10 = *(_QWORD *)(sub_21C5E31A8() - 8);
  v11 = *(_QWORD *)(v10 + 64);
  if (v11 <= 8)
    v12 = 8;
  else
    v12 = *(_QWORD *)(v10 + 64);
  v13 = sub_21C5E2E78();
  v14 = v7;
  v15 = 0;
  v16 = *(_QWORD *)(v13 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  if (v17 <= 8)
    v18 = 8;
  else
    v18 = *(_QWORD *)(v16 + 64);
  v19 = *(unsigned __int8 *)(v10 + 80);
  v20 = *(unsigned __int8 *)(v16 + 80);
  v22 = v19 | 7 | v20;
  v24 = *(_QWORD *)(v6 + 64);
  if (!v14)
    ++v24;
  v23 = *(unsigned __int8 *)(v6 + 80);
  v25 = (v22
       + ((v18
         + ((v12
           + (v20 | 7)
           + ((v19 + ((v23 + 56) & ~(v23 | 7)) + ((((v23 + 89) & ~v23) + v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 + 40) & ~(v19 | 7))
           + 1) & ~(v20 | 7))
         + 8) & 0xFFFFFFFFFFFFFFF8)
       + 9) & ~v22;
  v21 = ((v17 + ((v11 + v20 + ((v19 + 2) & ~v19)) & ~v20) + 7) & 0xFFFFFFFFFFFFFFF8) + v20;
  v26 = v17
      + ((v20 + 2) & ~v20)
      + ((v21 + 8 + ((v22 + v17 + ((v20 + 3) & ~v20) + ((v21 + 8) & ~v20)) & ~v22)) & ~v20)
      + 6;
  if (v26 <= 8)
    v26 = 8;
  v27 = ((v26 + v25 + 8) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v9 < a3)
  {
    if (v27 <= 3)
      v28 = ((a3 - v9 + 255) >> (8 * v27)) + 1;
    else
      v28 = 2;
    if (v28 >= 0x10000)
      v29 = 4;
    else
      v29 = 2;
    if (v28 < 0x100)
      v29 = 1;
    if (v28 >= 2)
      v15 = v29;
    else
      v15 = 0;
  }
  if (v9 < a2)
  {
    if (v27 >= 4)
      v30 = ~v9 + a2;
    else
      v30 = (~(_BYTE)v9 + a2);
    bzero(a1, v27);
    if ((_DWORD)v27 == 1)
      *a1 = v30;
    else
      *(_DWORD *)a1 = v30;
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void sub_21C5AB2BC()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = v0;
  JUMPOUT(0x21C5AB37CLL);
}

void sub_21C5AB2C4(int a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (a1)
    JUMPOUT(0x21C5AB2CCLL);
  JUMPOUT(0x21C5AB37CLL);
}

void sub_21C5AB34C()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = v0;
  JUMPOUT(0x21C5AB37CLL);
}

void sub_21C5AB354()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = v0;
  JUMPOUT(0x21C5AB37CLL);
}

void sub_21C5AB35C(unsigned int a1@<W0>, int a2@<W8>)
{
  _DWORD *v2;
  size_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  *(_WORD *)(v8 + v9) = 0;
  if (a1)
  {
    v2 = (_DWORD *)((v8 + v5 + 56) & v7);
    if (v10 <= 0x7FFFFFFD)
    {
      if (a1 > 0x7FFFFFFE)
        JUMPOUT(0x21C5AB368);
      *(_QWORD *)((char *)v2 + v6 + 24) = a1;
    }
    else
    {
      v3 = ((a2 + 7) & 0xFFFFFFF8) + 16;
      if (v10 >= a1 && a1 + 1 <= v11)
        JUMPOUT(0x21C5AB39CLL);
      if ((_DWORD)v3)
      {
        v4 = a1 - v11;
        bzero(v2, v3);
        *v2 = v4;
      }
    }
  }
  JUMPOUT(0x21C5AB37CLL);
}

void sub_21C5AB430()
{
  char v0;
  _BYTE *v1;

  *v1 = v0;
  JUMPOUT(0x21C5AB37CLL);
}

void sub_21C5AB47C()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
  JUMPOUT(0x21C5AB37CLL);
}

void sub_21C5AB484()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
  JUMPOUT(0x21C5AB37CLL);
}

void sub_21C5AB494()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
  JUMPOUT(0x21C5AB37CLL);
}

uint64_t type metadata accessor for _MapView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MapView);
}

void sub_21C5AB4AC()
{
  JUMPOUT(0x22077F9A0);
}

id sub_21C5AB4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  objc_super v23;

  v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v5 = (_QWORD *)(*MEMORY[0x24BEE4EA0] & *v3);
  v6 = (char *)v3 + v5[13];
  *(_OWORD *)v6 = xmmword_21C5E95B0;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_QWORD *)v6 + 6) = 0;
  v7 = (_QWORD *)((char *)v3 + *(_QWORD *)((*v4 & *v3) + 0x70));
  v7[1] = 0;
  v7[2] = 0;
  *v7 = 0;
  v8 = (char *)v3 + *(_QWORD *)((*v4 & *v3) + 0x78);
  v9 = v5[10];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = (_QWORD *)((char *)v3 + *(_QWORD *)((*v4 & *v3) + 0x80));
  *v10 = 0;
  v10[1] = 0;
  v11 = *(_QWORD *)((*v4 & *v3) + 0x88);
  v12 = v5[12];
  v19 = v5[11];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnnotationBridge(0, AssociatedTypeWitness, v12, v14);
  swift_getAssociatedConformanceWitness();
  v15 = v3;
  *(_QWORD *)((char *)v3 + v11) = sub_21C5E38B0();
  swift_beginAccess();
  v16 = sub_21C5E3BB0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v8, a1, v16);
  swift_endAccess();
  v17 = *v10;
  *v10 = a2;
  v10[1] = a3;
  sub_21C531AAC(a2);
  sub_21C531A9C(v17);

  v23.receiver = v15;
  v23.super_class = (Class)type metadata accessor for MapViewCoordinator(0, v9, v19, v12);
  return objc_msgSendSuper2(&v23, sel_init);
}

id sub_21C5AB6E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  id v7;

  v7 = objc_allocWithZone((Class)type metadata accessor for MapViewCoordinator(0, v3[10], v3[11], v3[12]));
  return sub_21C5AB4BC(a1, a2, a3);
}

uint64_t sub_21C5AB738(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_21C5AB764(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

unint64_t sub_21C5AB7A0()
{
  unint64_t result;

  result = qword_255289D80;
  if (!qword_255289D80)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EB460, &type metadata for MapStyleKey);
    atomic_store(result, (unint64_t *)&qword_255289D80);
  }
  return result;
}

id sub_21C5AB7E4()
{
  id v0;
  id v1;
  uint64_t ObjCClassFromMetadata;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;

  type metadata accessor for _SwiftUIMKMapView();
  v0 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v0, sel_setPitchEnabled_, 0);
  objc_msgSend(v0, sel_setRotateEnabled_, 0);
  objc_msgSend(v0, sel_setMapType_, 0);
  objc_msgSend(v0, sel_setPointOfInterestFilter_, 0);
  objc_msgSend(v0, sel_setCameraZoomRange_, 0);
  objc_msgSend(v0, sel_setCameraBoundary_, 0);
  v1 = v0;
  objc_msgSend(v1, sel_setShowsBuildings_, _MKLinkedOnOrAfterReleaseSet());

  objc_msgSend(v1, sel_setShowsTraffic_, 0);
  sub_21C531A4C(0, &qword_255289D98);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v3 = (void *)sub_21C5E3940();
  objc_msgSend(v1, sel_registerClass_forAnnotationViewWithReuseIdentifier_, ObjCClassFromMetadata, v3);

  type metadata accessor for SwiftUIAnnotationView();
  v4 = swift_getObjCClassFromMetadata();
  v5 = (void *)sub_21C5E3940();
  objc_msgSend(v1, sel_registerClass_forAnnotationViewWithReuseIdentifier_, v4, v5);

  sub_21C531A4C(0, &qword_255289DA0);
  v6 = swift_getObjCClassFromMetadata();
  v7 = (void *)sub_21C5E3940();
  objc_msgSend(v1, sel_registerClass_forAnnotationViewWithReuseIdentifier_, v6, v7);

  return v1;
}

void sub_21C5AB9D8(void *a1, uint64_t a2)
{
  id v3;
  id v4;

  if (*(_QWORD *)(a2 + 16) == 1)
  {
    if ((*(_BYTE *)(a2 + 48) & 1) != 0)
    {
      if (*(_QWORD *)(a2 + 64) == 1)
        v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDB1B0]), sel_init);
      else
        v3 = sub_21C5C8424();
    }
    else
    {
      v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDB098]), sel_initWithElevationStyle_, *(_QWORD *)(a2 + 40));
    }
  }
  else
  {
    v3 = sub_21C5C82B0();
  }
  v4 = v3;
  objc_msgSend(a1, sel_setPreferredConfiguration_);

}

id sub_21C5ABACC(uint64_t a1, uint64_t a2, void (*a3)(__int128 *__return_ptr, uint64_t), uint64_t a4, void *a5)
{
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id result;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, __int128 *);
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v23 - v10;
  (*(void (**)(char *, __n128))(v12 + 16))((char *)&v23 - v10, v9);
  sub_21C5A4668((uint64_t)v11);
  result = objc_msgSend(a5, sel_viewForAnnotation_, a1);
  if (result)
  {
    v14 = result;
    a3(&v26, a2);
    v23 = v26;
    v24 = v27;
    v25 = v28;
    sub_21C5ABD04((uint64_t)&v26);
    sub_21C5A4760((uint64_t)&v23);
    if (v27 == 2)
    {
      type metadata accessor for SwiftUIAnnotationView();
      v15 = swift_dynamicCastClass();
      if (v15)
      {
        v16 = v15;
        v17 = swift_allocObject();
        v18 = v27;
        *(_OWORD *)(v17 + 16) = v26;
        *(_OWORD *)(v17 + 32) = v18;
        *(_QWORD *)(v17 + 48) = v28;
        *(_QWORD *)(v17 + 56) = v16;
        sub_21C5ABD04((uint64_t)&v26);
        v19 = v14;
        sub_21C5E2EE4();
        sub_21C5ABD2C((uint64_t)&v26);

        return (id)swift_release();
      }
    }
    else if (v27 <= 1u)
    {
      objc_opt_self();
      v20 = swift_dynamicCastObjCClass();
      if (v20)
      {
        v21 = v20;
        v22 = (void (*)(uint64_t, __int128 *))*((_QWORD *)&v27 + 1);
        v23 = v26;
        v24 = v27;
        v25 = v28;
        sub_21C5ABD04((uint64_t)&v26);
        v14 = v14;
        v22(v21, &v23);

        sub_21C5ABD2C((uint64_t)&v26);
LABEL_10:

        return (id)sub_21C5ABD2C((uint64_t)&v26);
      }
    }
    objc_msgSend(a5, sel_removeAnnotation_, a1);
    objc_msgSend(a5, sel_addAnnotation_, a1);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_21C5ABD04(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t sub_21C5ABD2C(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t sub_21C5ABD54()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_21C5ABD80()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, _OWORD *);
  __int128 v2;
  uint64_t v3;
  _OWORD v5[2];
  uint64_t v6;

  v1 = *(uint64_t (**)(uint64_t, _OWORD *))(v0 + 40);
  v2 = *(_OWORD *)(v0 + 32);
  v5[0] = *(_OWORD *)(v0 + 16);
  v5[1] = v2;
  v3 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 48);
  return v1(v3, v5);
}

id sub_21C5ABDC0(uint64_t a1, uint64_t *a2)
{
  char *v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  objc_class *v13;
  objc_super v15;

  v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v5 = (_QWORD *)(*MEMORY[0x24BEE4EA0] & *(_QWORD *)v2);
  v6 = *a2;
  v7 = a2[1];
  v8 = *((_BYTE *)a2 + 16);
  v9 = v5[10];
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(&v2[v5[12]], a1, v9);
  v10 = &v2[*(_QWORD *)((*v4 & *(_QWORD *)v2) + 0x68)];
  *(_QWORD *)v10 = v6;
  *((_QWORD *)v10 + 1) = v7;
  v10[16] = v8;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + 3);
  v11 = &v2[*(_QWORD *)((*v4 & *(_QWORD *)v2) + 0x70)];
  *(_QWORD *)v11 = v6;
  *((_QWORD *)v11 + 1) = v7;
  v13 = (objc_class *)type metadata accessor for AnnotationBridge(0, v9, v5[11], v12);
  v15.receiver = v2;
  v15.super_class = v13;
  return objc_msgSendSuper2(&v15, sel_init);
}

id sub_21C5ABE98(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v7;

  v7 = objc_allocWithZone((Class)type metadata accessor for AnnotationBridge(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a4));
  return sub_21C5ABDC0(a1, a2);
}

uint64_t sub_21C5ABEE0(uint64_t a1, unint64_t a2)
{
  if ((~a2 & 0xF000000000000007) != 0)
    return sub_21C56C124(a1, a2);
  return a1;
}

void sub_21C5ABEF4()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_21C5ABF20(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_21C5ABF50(uint64_t a1, unint64_t a2)
{
  if ((~a2 & 0xF000000000000007) != 0)
    return sub_21C56C0C0(a1, a2);
  return a1;
}

uint64_t sub_21C5ABF64(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x70) + 8))
  {
    v2 = result;
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_255289D90);
    MEMORY[0x22077ECE0](&v3);
    if (v3 != v2)
    {
      v3 = v2;
      sub_21C5E37CC();
    }
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_21C5AC02C()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

_QWORD *sub_21C5AC080@<X0>(_QWORD *a1@<X8>)
{
  return sub_21C5A1AE0(a1);
}

uint64_t objectdestroy_19Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21C5AC0C8()
{
  return sub_21C5A1B2C();
}

double sub_21C5AC0D8(double result, double a2, double a3, double a4)
{
  double v4;

  if (a2 < -180.0)
  {
    if (result < -90.0)
      goto LABEL_12;
    if (result <= 90.0)
      return result;
    if (a3 < 0.0)
    {
      if (a4 < 0.0)
        return 90.0;
      return 90.0;
    }
    if (a3 <= 180.0)
      return 90.0;
    if (a4 < 0.0)
      return 90.0;
    return 90.0;
  }
  if (a2 <= 180.0)
  {
    if (result < -90.0)
      goto LABEL_12;
    v4 = 90.0;
    if (result <= 90.0)
      return result;
    if (a3 < 0.0)
    {
      if (a4 < 0.0)
        return v4;
      return 90.0;
    }
    if (a3 <= 180.0)
      return 90.0;
    if (a4 < 0.0)
      return 90.0;
    return 90.0;
  }
  if (result >= -90.0)
  {
    if (result <= 90.0)
      return result;
    if (a3 >= 0.0)
      return 90.0;
    if (a4 < 0.0)
      return 90.0;
    return 90.0;
  }
LABEL_12:
  if (a3 >= 0.0)
  {
    if (a3 <= 180.0)
      return -90.0;
    if (a4 < 0.0)
      return -90.0;
    return -90.0;
  }
  if (a4 < 0.0)
    return -90.0;
  return -90.0;
}

uint64_t sub_21C5AC594(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  char v15;
  void (*v16)(char *, uint64_t);
  void (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v22;
  uint64_t v25;

  v3 = sub_21C5E2E78();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v25 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v25 - v11;
  v13 = v1 + *(int *)(type metadata accessor for MapCompassConfig(0) + 24);
  v14 = *MEMORY[0x24BDEB498];
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v12, *MEMORY[0x24BDEB498], v3);
  v15 = sub_21C5E2E6C();
  v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  v16(v12, v3);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  if ((v15 & 1) != 0)
  {
    v17(v10, a1, v3);
    v18 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v10, v3);
    if (v18 == *MEMORY[0x24BDEB480] || v18 == *MEMORY[0x24BDEB490] || v18 == v14)
      return 1;
    if (v18 == *MEMORY[0x24BDEB488])
      return 2;
  }
  else
  {
    v17(v7, v13, v3);
    v22 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
    if (v22 == *MEMORY[0x24BDEB480] || v22 == *MEMORY[0x24BDEB490] || v22 == v14)
      return 1;
    v10 = v7;
    if (v22 == *MEMORY[0x24BDEB488])
      return 2;
  }
  v16(v10, v3);
  return 1;
}

uint64_t sub_21C5AC770(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && (sub_21C5E2E54() & 1) != 0)
    return sub_21C5E2E6C();
  else
    return 0;
}

uint64_t MapCompass.init(scope:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  int *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t result;
  char *v11;

  *a3 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2552897E0);
  swift_storeEnumTagMultiPayload();
  v6 = (int *)type metadata accessor for MapCompass(0);
  v7 = (char *)a3 + v6[5];
  *(_QWORD *)v7 = swift_getKeyPath();
  v7[8] = 0;
  v8 = (char *)a3 + v6[6];
  *(_QWORD *)v8 = swift_getKeyPath();
  v8[8] = 0;
  v9 = (char *)a3 + v6[7];
  result = swift_getKeyPath();
  *(_QWORD *)v9 = result;
  v9[8] = 0;
  v11 = (char *)a3 + v6[8];
  *(_QWORD *)v11 = a1;
  v11[8] = a2 & 1;
  return result;
}

uint64_t type metadata accessor for MapCompass(uint64_t a1)
{
  return sub_21C5254A0(a1, (uint64_t *)&unk_255289DF0);
}

uint64_t MapCompass.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  char v56;
  uint64_t KeyPath;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v81 = a1;
  v68 = type metadata accessor for _MapCompass(0);
  MEMORY[0x24BDAC7A8](v68);
  v69 = (uint64_t *)((char *)&v63 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v3);
  v70 = (uint64_t)&v63 - v4;
  v80 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289DD0);
  MEMORY[0x24BDAC7A8](v80);
  v67 = (uint64_t)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v71 = (uint64_t)&v63 - v7;
  v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289DD8);
  MEMORY[0x24BDAC7A8](v78);
  v79 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552880B8);
  MEMORY[0x24BDAC7A8](v9);
  v65 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552880C0);
  MEMORY[0x24BDAC7A8](v77);
  v64 = (uint64_t *)((char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v66 = (uint64_t)&v63 - v13;
  v14 = (int *)type metadata accessor for MapControlsConfig();
  MEMORY[0x24BDAC7A8](v14);
  v73 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_21C5E2E78();
  v74 = *(_QWORD *)(v16 - 8);
  v75 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for MapCompassConfig(0);
  v76 = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8](v72);
  v63 = (uint64_t)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v63 - v21;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v63 - v24;
  v26 = type metadata accessor for MapCompass(0);
  v27 = v1 + *(int *)(v26 + 28);
  v28 = *(_QWORD *)v27;
  v29 = *(_BYTE *)(v27 + 8);
  sub_21C531A90(*(_QWORD *)v27, v29);
  v30 = sub_21C52D7BC(v28, v29);
  v31 = v29;
  v32 = (uint64_t)v73;
  sub_21C531A84(v28, v31);
  sub_21C52D1D4((uint64_t)v18);
  v33 = (uint64_t)v25;
  if (v30 == 3)
    v34 = 0;
  else
    v34 = v30;
  v22[1] = v34;
  v35 = v72;
  v36 = v18;
  v37 = v1;
  v38 = v26;
  (*(void (**)(char *, char *, uint64_t))(v74 + 32))(&v22[*(int *)(v72 + 24)], v36, v75);
  *v22 = 1;
  sub_21C52AAD4((uint64_t)v22, v33, type metadata accessor for MapCompassConfig);
  v39 = type metadata accessor for MapPitchToggleConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v32, 1, 1, v39);
  v40 = v32 + v14[5];
  v41 = type metadata accessor for MapScaleViewConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
  v42 = v32 + v14[6];
  v43 = type metadata accessor for MapUserLocationButtonConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v42, 1, 1, v43);
  v44 = v32 + v14[7];
  sub_21C529664(v33, v44, type metadata accessor for MapCompassConfig);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v76 + 56))(v44, 0, 1, v35);
  *(_WORD *)(v32 + v14[8]) = 2;
  *(_WORD *)(v32 + v14[9]) = 2;
  *(_WORD *)(v32 + v14[10]) = 2;
  v45 = v37 + *(int *)(v26 + 24);
  v46 = *(_QWORD *)v45;
  LOBYTE(v44) = *(_BYTE *)(v45 + 8);
  sub_21C531A90(*(_QWORD *)v45, v44);
  LOBYTE(v35) = sub_21C52D604(v46, v44);
  sub_21C531A84(v46, v44);
  if ((v35 & 1) != 0)
  {
    v47 = sub_21C5E3724();
    v48 = v65;
    sub_21C529664(v32, v65, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
    v49 = v64;
    sub_21C531B18(v48, (uint64_t)v64 + *(int *)(v77 + 36), &qword_2552880B8);
    *v49 = v47;
    sub_21C524980(v48, &qword_2552880B8);
    v50 = &qword_2552880C0;
    v51 = (uint64_t)v49;
    v52 = v66;
    sub_21C52DB08(v51, v66, &qword_2552880C0);
    sub_21C531B18(v52, v79, &qword_2552880C0);
  }
  else
  {
    v53 = v63;
    sub_21C529664(v33, v63, type metadata accessor for MapCompassConfig);
    v54 = (uint64_t *)(v37 + *(int *)(v38 + 32));
    v55 = *v54;
    v56 = *((_BYTE *)v54 + 8);
    KeyPath = swift_getKeyPath();
    v58 = v68;
    v59 = (uint64_t)v69;
    *v69 = KeyPath;
    *(_BYTE *)(v59 + 8) = 0;
    sub_21C52AAD4(v53, v59 + *(int *)(v58 + 24), type metadata accessor for MapCompassConfig);
    *(_QWORD *)(v59 + 16) = v55;
    *(_BYTE *)(v59 + 24) = v56;
    v60 = v70;
    sub_21C52AAD4(v59, v70, type metadata accessor for _MapCompass);
    v61 = v67;
    sub_21C529664(v60, v67, type metadata accessor for _MapCompass);
    *(_WORD *)(v61 + *(int *)(v80 + 36)) = 257;
    sub_21C52A88C(v60, type metadata accessor for _MapCompass);
    v50 = &qword_255289DD0;
    v52 = v71;
    sub_21C52DB08(v61, v71, &qword_255289DD0);
    sub_21C531B18(v52, v79, &qword_255289DD0);
  }
  swift_storeEnumTagMultiPayload();
  sub_21C52D9D4();
  sub_21C5AD500();
  sub_21C5E33E8();
  sub_21C524980(v52, v50);
  sub_21C52A88C(v32, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
  return sub_21C52A88C(v33, type metadata accessor for MapCompassConfig);
}

uint64_t sub_21C5ACF3C()
{
  sub_21C5AE780(qword_255289E30, (uint64_t)&unk_21C5E9780);
  return sub_21C5E33C4();
}

uint64_t sub_21C5ACF9C()
{
  sub_21C5AE780(qword_255289E30, (uint64_t)&unk_21C5E9780);
  return sub_21C5E3370();
}

void sub_21C5ACFFC()
{
  sub_21C5AE780(qword_255289E30, (uint64_t)&unk_21C5E9780);
  sub_21C5E33B8();
  __break(1u);
}

id sub_21C5AD030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BYTE v25[8];

  v1 = v0;
  v2 = sub_21C5E2E78();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
    goto LABEL_9;
  v6 = *(_QWORD *)(v0 + 16);
  v7 = *(_QWORD *)v0;
  v8 = *(_BYTE *)(v0 + 8);
  sub_21C52EF74(*(_QWORD *)v0, v8);
  v9 = sub_21C52F61C(v7, v8);
  sub_21C531AC8(v7, v8);
  if (!*(_QWORD *)(v9 + 16) || (v10 = sub_21C530EAC(v6), (v11 & 1) == 0))
  {
    v23 = 0;
    v24 = 1;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_21C5317D4(*(_QWORD *)(v9 + 56) + 8 * v10, (uint64_t)&v23);
  v24 = 0;
  swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
  {
LABEL_8:
    sub_21C524980((uint64_t)&v23, &qword_255288140);
    goto LABEL_9;
  }
  sub_21C531764((uint64_t)&v23, (uint64_t)v25);
  v12 = MEMORY[0x22077FAFC](v25);
  if (v12)
  {
    v13 = (void *)v12;
    v14 = objc_msgSend((id)objc_opt_self(), sel_compassButtonWithMapView_, v12);

    sub_21C5317A0((uint64_t)v25);
    goto LABEL_10;
  }
  sub_21C5317A0((uint64_t)v25);
LABEL_9:
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDB048]), sel_init);
LABEL_10:
  v15 = v1 + *(int *)(type metadata accessor for _MapCompass(0) + 24);
  objc_msgSend(v14, sel_setCompassVisibility_, qword_21C5E9868[*(char *)(v15 + 1)]);
  v16 = type metadata accessor for MapCompassConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v15 + *(int *)(v16 + 24), v2);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v17 == *MEMORY[0x24BDEB480] || v17 == *MEMORY[0x24BDEB490] || v17 == *MEMORY[0x24BDEB498])
    goto LABEL_20;
  if (v17 != *MEMORY[0x24BDEB488])
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_20:
    v20 = 1;
    goto LABEL_21;
  }
  v20 = 2;
LABEL_21:
  objc_msgSend(v14, sel_setCompassSize_, v20);
  return v14;
}

id sub_21C5AD290(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BYTE v25[8];

  v2 = v1;
  v4 = sub_21C5E2E78();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
    goto LABEL_8;
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_QWORD *)v1;
  v10 = *(_BYTE *)(v1 + 8);
  sub_21C52EF74(*(_QWORD *)v1, v10);
  v11 = sub_21C52F61C(v9, v10);
  sub_21C531AC8(v9, v10);
  if (*(_QWORD *)(v11 + 16) && (v12 = sub_21C530EAC(v8), (v13 & 1) != 0))
  {
    sub_21C5317D4(*(_QWORD *)(v11 + 56) + 8 * v12, (uint64_t)&v23);
    v24 = 0;
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {
      sub_21C531764((uint64_t)&v23, (uint64_t)v25);
      v14 = (void *)MEMORY[0x22077FAFC](v25);
      objc_msgSend(a1, sel_setMapView_, v14);

      sub_21C5317A0((uint64_t)v25);
      goto LABEL_8;
    }
  }
  else
  {
    v23 = 0;
    v24 = 1;
    swift_bridgeObjectRelease();
  }
  sub_21C524980((uint64_t)&v23, &qword_255288140);
LABEL_8:
  v15 = v2 + *(int *)(type metadata accessor for _MapCompass(0) + 24);
  objc_msgSend(a1, sel_setCompassVisibility_, qword_21C5E9868[*(char *)(v15 + 1)]);
  v16 = type metadata accessor for MapCompassConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v15 + *(int *)(v16 + 24), v4);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v17 == *MEMORY[0x24BDEB480] || v17 == *MEMORY[0x24BDEB490] || v17 == *MEMORY[0x24BDEB498])
    goto LABEL_18;
  if (v17 != *MEMORY[0x24BDEB488])
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
LABEL_18:
    v20 = 1;
    return objc_msgSend(a1, sel_setCompassSize_, v20);
  }
  v20 = 2;
  return objc_msgSend(a1, sel_setCompassSize_, v20);
}

uint64_t type metadata accessor for _MapCompass(uint64_t a1)
{
  return sub_21C5254A0(a1, (uint64_t *)&unk_255289E10);
}

uint64_t type metadata accessor for MapCompassConfig(uint64_t a1)
{
  return sub_21C5254A0(a1, (uint64_t *)&unk_255289E20);
}

unint64_t sub_21C5AD500()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_255289DE0;
  if (!qword_255289DE0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_255289DD0);
    v2[0] = sub_21C5AE780(&qword_255289DE8, (uint64_t)&unk_21C5E9810);
    v2[1] = MEMORY[0x24BDEDB80];
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_255289DE0);
  }
  return result;
}

uint64_t sub_21C5AD57C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for MapCompass(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2552897E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_21C5E2E78();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = *(_QWORD *)v11;
    v13 = v11[8];
    sub_21C52EF74(*(_QWORD *)v11, v13);
    *(_QWORD *)v10 = v12;
    v10[8] = v13;
    v14 = a3[6];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(_QWORD *)v16;
    v18 = v16[8];
    sub_21C531A90(*(_QWORD *)v16, v18);
    *(_QWORD *)v15 = v17;
    v15[8] = v18;
    v19 = a3[7];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = *(_QWORD *)v21;
    v23 = v21[8];
    sub_21C531A90(*(_QWORD *)v21, v23);
    *(_QWORD *)v20 = v22;
    v20[8] = v23;
    v24 = a3[8];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
  }
  return a1;
}

uint64_t destroy for MapCompass(uint64_t a1, int *a2)
{
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2552897E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_21C5E2E78();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  sub_21C531AC8(*(_QWORD *)(a1 + a2[5]), *(_BYTE *)(a1 + a2[5] + 8));
  sub_21C531A84(*(_QWORD *)(a1 + a2[6]), *(_BYTE *)(a1 + a2[6] + 8));
  return sub_21C531A84(*(_QWORD *)(a1 + a2[7]), *(_BYTE *)(a1 + a2[7] + 8));
}

_QWORD *initializeWithCopy for MapCompass(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2552897E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_21C5E2E78();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = v9[8];
  sub_21C52EF74(*(_QWORD *)v9, v11);
  *(_QWORD *)v8 = v10;
  v8[8] = v11;
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_21C531A90(*(_QWORD *)v14, v16);
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  v17 = a3[7];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  v21 = v19[8];
  sub_21C531A90(*(_QWORD *)v19, v21);
  *(_QWORD *)v18 = v20;
  v18[8] = v21;
  v22 = a3[8];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  return a1;
}

_QWORD *assignWithCopy for MapCompass(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  if (a1 != a2)
  {
    sub_21C524980((uint64_t)a1, (uint64_t *)&unk_2552897E0);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2552897E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_21C5E2E78();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = v9[8];
  sub_21C52EF74(*(_QWORD *)v9, v11);
  v12 = *(_QWORD *)v8;
  v13 = v8[8];
  *(_QWORD *)v8 = v10;
  v8[8] = v11;
  sub_21C531AC8(v12, v13);
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)v16;
  v18 = v16[8];
  sub_21C531A90(*(_QWORD *)v16, v18);
  v19 = *(_QWORD *)v15;
  v20 = v15[8];
  *(_QWORD *)v15 = v17;
  v15[8] = v18;
  sub_21C531A84(v19, v20);
  v21 = a3[7];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_21C531A90(*(_QWORD *)v23, v25);
  v26 = *(_QWORD *)v22;
  v27 = v22[8];
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  sub_21C531A84(v26, v27);
  v28 = a3[8];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = *(_QWORD *)v30;
  v29[8] = v30[8];
  *(_QWORD *)v29 = v31;
  return a1;
}

char *initializeWithTake for MapCompass(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2552897E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_21C5E2E78();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = &a1[v9];
  v13 = &a2[v9];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = a3[7];
  v15 = a3[8];
  v16 = &a1[v14];
  v17 = &a2[v14];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = &a1[v15];
  v19 = &a2[v15];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  return a1;
}

char *assignWithTake for MapCompass(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;

  if (a1 != a2)
  {
    sub_21C524980((uint64_t)a1, (uint64_t *)&unk_2552897E0);
    v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2552897E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_21C5E2E78();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  v12 = *(_QWORD *)v9;
  v13 = v9[8];
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  sub_21C531AC8(v12, v13);
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = *(_QWORD *)v16;
  LOBYTE(v16) = v16[8];
  v18 = *(_QWORD *)v15;
  v19 = v15[8];
  *(_QWORD *)v15 = v17;
  v15[8] = (char)v16;
  sub_21C531A84(v18, v19);
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = *(_QWORD *)v22;
  LOBYTE(v22) = v22[8];
  v24 = *(_QWORD *)v21;
  v25 = v21[8];
  *(_QWORD *)v21 = v23;
  v21[8] = (char)v22;
  sub_21C531A84(v24, v25);
  v26 = a3[8];
  v27 = &a1[v26];
  v28 = &a2[v26];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for MapCompass()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5ADCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552880F0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MapCompass()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5ADD2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_2552880F0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  return result;
}

void sub_21C5ADDAC()
{
  unint64_t v0;

  sub_21C59BDD8();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t sub_21C5ADE30()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_255289E00;
  if (!qword_255289E00)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_255289E08);
    v2[0] = sub_21C52D9D4();
    v2[1] = sub_21C5AD500();
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_255289E00);
  }
  return result;
}

unint64_t sub_21C5ADE9C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_21C52EF74(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v9 = *(int *)(a3 + 24);
    v10 = a1 + v9;
    v11 = a2 + v9;
    *(_WORD *)(a1 + v9) = *(_WORD *)(a2 + v9);
    v12 = *(int *)(type metadata accessor for MapCompassConfig(0) + 24);
    v13 = v10 + v12;
    v14 = v11 + v12;
    v15 = sub_21C5E2E78();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_21C5ADF74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_21C531AC8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = v4 + *(int *)(type metadata accessor for MapCompassConfig(0) + 24);
  v6 = sub_21C5E2E78();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_21C5ADFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_21C52EF74(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = (_WORD *)(a2 + v8);
  *(_WORD *)(a1 + v8) = *v10;
  v11 = *(int *)(type metadata accessor for MapCompassConfig(0) + 24);
  v12 = v9 + v11;
  v13 = (char *)v10 + v11;
  v14 = sub_21C5E2E78();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t sub_21C5AE07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_21C52EF74(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_21C531AC8(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  v11 = *(int *)(a3 + 24);
  v12 = (_BYTE *)(a1 + v11);
  v13 = (_BYTE *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  v14 = *(int *)(type metadata accessor for MapCompassConfig(0) + 24);
  v15 = &v12[v14];
  v16 = &v13[v14];
  v17 = sub_21C5E2E78();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_21C5AE13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  *(_WORD *)(a1 + v4) = *(_WORD *)(a2 + v4);
  v7 = *(int *)(type metadata accessor for MapCompassConfig(0) + 24);
  v8 = v5 + v7;
  v9 = v6 + v7;
  v10 = sub_21C5E2E78();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_21C5AE1CC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_21C531AC8(v8, v9);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v10 = *(int *)(a3 + 24);
  v11 = (_BYTE *)(a1 + v10);
  v12 = (char *)a2 + v10;
  *v11 = *v12;
  v11[1] = v12[1];
  v13 = *(int *)(type metadata accessor for MapCompassConfig(0) + 24);
  v14 = &v11[v13];
  v15 = &v12[v13];
  v16 = sub_21C5E2E78();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t sub_21C5AE278()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5AE284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for MapCompassConfig(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_21C5AE2F8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5AE304(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = type metadata accessor for MapCompassConfig(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_21C5AE374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21C5AE6F0(a1, a2, a3, (uint64_t)"\t", (uint64_t)&unk_21C5E96E0, type metadata accessor for MapCompassConfig);
}

uint64_t *sub_21C5AE390(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_21C5E2E78();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_21C5AE418(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = sub_21C5E2E78();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_WORD *sub_21C5AE450(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_21C5E2E78();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_BYTE *sub_21C5AE4AC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = sub_21C5E2E78();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_WORD *sub_21C5AE510(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_21C5E2E78();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_BYTE *sub_21C5AE56C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = sub_21C5E2E78();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_21C5AE5D0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5AE5DC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = sub_21C5E2E78();
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v10);
  }
}

uint64_t sub_21C5AE658()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_21C5AE664(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = sub_21C5E2E78();
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_21C5AE6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21C5AE6F0(a1, a2, a3, (uint64_t)&unk_21C5E9728, (uint64_t)&unk_21C5E9740, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB4A0]);
}

uint64_t sub_21C5AE6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t result;
  unint64_t v7;

  result = a6(319);
  if (v7 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21C5AE75C()
{
  return sub_21C5AE780(&qword_255289DE8, (uint64_t)&unk_21C5E9810);
}

uint64_t sub_21C5AE780(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for _MapCompass(255);
    result = MEMORY[0x22077F9A0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21C5AE7C0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = type metadata accessor for TagValueTraitKey.Value(0, a1, a2, a3);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v16 - v9;
  v12 = type metadata accessor for TagValueTraitKey(0, a1, a2, v11);
  MEMORY[0x22077F9A0](&unk_21C5E98D0, v12);
  sub_21C5E34F0();
  v13 = *(_QWORD *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v14 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a4, v10, a1);
    v14 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a4, v14, 1, a1);
}

uint64_t MapContent.tag<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v10 = type metadata accessor for TagValueTraitKey.Value(0, a3, a5, a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v19 - v12;
  v15 = type metadata accessor for TagValueTraitKey(0, a3, a5, v14);
  v16 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, a1, a3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, a3);
  v17 = MEMORY[0x22077F9A0](&unk_21C5E98D0, v15);
  sub_21C5C2100(v15, (uint64_t)v13, a2, v15, a4, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t type metadata accessor for TagValueTraitKey.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TagValueTraitKey.Value);
}

uint64_t type metadata accessor for TagValueTraitKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TagValueTraitKey);
}

uint64_t sub_21C5AEA08(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = a1[2];
  v5 = type metadata accessor for TagValueTraitKey(255, a1[1], a1[3], a4);
  v6 = MEMORY[0x22077F9A0](&unk_21C5E98D0, v5);
  type metadata accessor for _TraitWritingMapContentModifier(255, v5, v6, v7);
  v8 = sub_21C5E30A0();
  v10[0] = v4;
  v10[1] = &off_2552859B0;
  return MEMORY[0x22077F9A0](&protocol conformance descriptor for <> ModifiedContent<A, B>, v8, v10);
}

uint64_t sub_21C5AEA94()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_21C5AEAEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_21C5AEBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_21C5AEC20(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_21C5AECB8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *sub_21C5AED98(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_21C5AEE30(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t sub_21C5AEF10(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_21C5AF050(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_21C5AF1F8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_21C5AF200()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_21C5AF224(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t sub_21C5AF238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvedShapeStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_21C52EF74(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t assignWithCopy for ResolvedShapeStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_21C52EF74(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_21C531AC8(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for ResolvedShapeStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_21C531AC8(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ResolvedShapeStyle()
{
  return &type metadata for ResolvedShapeStyle;
}

id sub_21C5AF348(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *ObjCClassFromMetadata;
  void *v21;
  uint64_t v23;

  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a3)
    {
      v6 = *(_QWORD *)(a3 + 16);
      if (v6)
      {
        v23 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_21C5E3CDC();
        sub_21C5AF6E0();
        v7 = (uint64_t *)(a3 + 48);
        do
        {
          v8 = (void *)*(v7 - 2);
          v9 = *(v7 - 1);
          v10 = *v7;
          v7 += 3;
          sub_21C5611D8(v8, v9);
          sub_21C5AF348(v8, v9, v10);
          sub_21C5E3CB8();
          sub_21C5E3CE8();
          sub_21C5E3CF4();
          sub_21C5E3CC4();
          --v6;
        }
        while (v6);
        swift_bridgeObjectRelease();
        v11 = a1[2];
        if ((a2 & 1) == 0)
        {
          if (!v23)
          {
            v12 = 0;
LABEL_14:
            ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
            swift_bridgeObjectRetain();
            v18 = objc_msgSend(ObjCClassFromMetadata, sel_polygonWithPoints_count_interiorPolygons_, a1 + 4, v11, v12);
            sub_21C561218(a1, a2);

LABEL_19:
            swift_bridgeObjectRelease();
            return v18;
          }
LABEL_13:
          sub_21C5AF6E0();
          v12 = (void *)sub_21C5E39D0();
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
        if (!v23)
        {
          v19 = 0;
          goto LABEL_18;
        }
      }
      else
      {
        v11 = a1[2];
        if ((a2 & 1) == 0)
          goto LABEL_13;
      }
      sub_21C5AF6E0();
      v19 = (void *)sub_21C5E39D0();
      swift_bridgeObjectRelease();
    }
    else
    {
      v19 = 0;
      v12 = 0;
      v11 = a1[2];
      if ((a2 & 1) == 0)
        goto LABEL_14;
    }
LABEL_18:
    v21 = (void *)swift_getObjCClassFromMetadata();
    swift_bridgeObjectRetain();
    v18 = objc_msgSend(v21, sel_polygonWithCoordinates_count_interiorPolygons_, a1 + 4, v11, v19);
    sub_21C561218(a1, a2);

    goto LABEL_19;
  }
  v13 = (void *)swift_getObjCClassFromMetadata();
  v14 = objc_retainAutorelease(a1);
  v15 = objc_msgSend(v14, sel_points);
  v16 = objc_msgSend(v14, sel_pointCount);
  v17 = objc_msgSend(v14, sel_interiorPolygons);
  v18 = objc_msgSend(v13, sel_polygonWithPoints_count_interiorPolygons_, v15, v16, v17);
  sub_21C561218(a1, a2);

  return v18;
}

uint64_t sub_21C5AF624(uint64_t a1, uint64_t a2)
{
  return sub_21C5AF71C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t sub_21C5AF640(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)a2;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) != 0)
      JUMPOUT(0x22077ED70);
    return 0;
  }
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    return 0;
  sub_21C52EF74(*(_QWORD *)a1, 0);
  sub_21C52EF74(v3, 0);
  v5 = sub_21C5E3718();
  sub_21C531AC8(v3, 0);
  sub_21C531AC8(v2, 0);
  return v5 & 1;
}

unint64_t sub_21C5AF6E0()
{
  unint64_t result;

  result = qword_255288C20;
  if (!qword_255288C20)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_255288C20);
  }
  return result;
}

uint64_t sub_21C5AF71C(uint64_t a1, char a2, uint64_t a3, char a4)
{
  char v6;

  if ((a2 & 1) != 0)
  {
    if ((a4 & 1) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a3 + 16))
    {
      v6 = sub_21C55973C(a1, a3);
      return v6 & 1;
    }
LABEL_8:
    v6 = 0;
    return v6 & 1;
  }
  if ((a4 & 1) != 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a3 + 16))
    goto LABEL_8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_21C559680(a1, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t sub_21C5AF7D0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9[40];

  sub_21C560FD4((uint64_t)a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(qword_255289F38);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v4 = v8;
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v5 = sub_21C5E2E48();
    if (!v5)
      v5 = sub_21C5E3724();
    v4 = v5;
  }
  v6 = sub_21C5E328C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a2, v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v4;
}

uint64_t initializeBufferWithCopyOfBuffer for MultiPoint(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MultiPoint()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for MultiPoint(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MultiPoint(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentifiableMapItem.MapItemIdentity(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentifiableMapItem.MapItemIdentity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_21C5AF9EC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_21C5AF9F4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MultiPoint()
{
  return &type metadata for MultiPoint;
}

void Annotation.init(coordinate:anchor:accessoryAnchor:content:label:)()
{
  type metadata accessor for Annotation();
}

uint64_t sub_21C5AFA84(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t (*v2)(void);
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  *(_QWORD *)((char *)v3 + *(int *)(a1 + 64)) = 0;
  v10 = (char *)v3 + *(int *)(a1 + 68);
  *v3 = v9;
  v3[1] = v8;
  v3[2] = v7;
  v3[3] = v6;
  *(_QWORD *)v10 = v5;
  *((_QWORD *)v10 + 1) = v4;
  v10[16] = 0;
  v11 = v2();
  return v1(v11);
}

void type metadata accessor for Annotation()
{
  JUMPOUT(0x22077F91CLL);
}

void Annotation.init(coordinate:anchor:content:label:)()
{
  sub_21C5E3880();
  type metadata accessor for Annotation();
}

uint64_t sub_21C5AFB74(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t (*v2)(void);
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  *(_QWORD *)((char *)v3 + *(int *)(a1 + 64)) = 0;
  v10 = (char *)v3 + *(int *)(a1 + 68);
  *v3 = v7;
  v3[1] = v6;
  v3[2] = v5;
  v3[3] = v4;
  *(_QWORD *)v10 = v8;
  *((_QWORD *)v10 + 1) = v9;
  v10[16] = 0;
  v11 = v2();
  return v1(v11);
}

void Annotation.init<>(_:coordinate:anchor:accessoryAnchor:content:)()
{
  type metadata accessor for Annotation();
}

uint64_t sub_21C5AFC64(int *a1)
{
  void (*v1)(void);
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint64_t result;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  *(_QWORD *)((char *)v2 + a1[16]) = 0;
  v10 = (char *)v2 + a1[17];
  *v2 = v8;
  v2[1] = v7;
  v2[2] = v6;
  v2[3] = v5;
  *(_QWORD *)v10 = v4;
  *((_QWORD *)v10 + 1) = v3;
  v10[16] = 0;
  v1();
  result = sub_21C5E3604();
  v12 = (char *)v2 + a1[15];
  *(_QWORD *)v12 = result;
  *((_QWORD *)v12 + 1) = v13;
  v12[16] = v14 & 1;
  *((_QWORD *)v12 + 3) = v15;
  return result;
}

void Annotation.init<>(_:coordinate:anchor:content:)()
{
  sub_21C5E3880();
  Annotation.init<>(_:coordinate:anchor:accessoryAnchor:content:)();
}

void Annotation.init<A>(_:coordinate:anchor:accessoryAnchor:content:)(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for Annotation();
}

uint64_t sub_21C5AFE6C(int *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  char *v23;

  *(_QWORD *)((char *)v2 + a1[16]) = 0;
  v14 = (char *)v2 + a1[17];
  *v2 = v12;
  v2[1] = v11;
  v2[2] = v10;
  v2[3] = v9;
  *(_QWORD *)v14 = v8;
  *((_QWORD *)v14 + 1) = v7;
  v14[16] = 0;
  v4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v3, v1);
  v15 = sub_21C5E3610();
  v17 = v16;
  v19 = v18;
  v21 = v20;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v3, v1);
  v23 = (char *)v2 + a1[15];
  *(_QWORD *)v23 = v15;
  *((_QWORD *)v23 + 1) = v17;
  v23[16] = v19 & 1;
  *((_QWORD *)v23 + 3) = v21;
  return result;
}

void Annotation.init<A>(_:coordinate:anchor:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a5 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v9, a1, v10, v7);
  sub_21C5E3880();
  Annotation.init<A>(_:coordinate:anchor:accessoryAnchor:content:)((uint64_t)v9);
}

uint64_t sub_21C5AFFF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void Annotation.init<>(item:anchor:accessoryAnchor:content:)(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = objc_msgSend(a1, sel_placemark);
  v8 = objc_msgSend(v7, sel_location);

  if (v8)
  {
    objc_msgSend(v8, sel_coordinate);
    v10 = v9;
    v12 = v11;

  }
  else
  {
    v12 = 0;
    v10 = 0;
  }
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v12;
  *(double *)(a2 + 16) = a3;
  *(double *)(a2 + 24) = a4;
  type metadata accessor for Annotation();
}

uint64_t sub_21C5B010C(int *a1)
{
  void *v1;
  uint64_t v2;
  void (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v3();
  v7 = objc_msgSend(v1, sel_name);
  if (v7)
  {
    v8 = v7;
    sub_21C5E3964();

  }
  v9 = a1[16];
  v10 = v2 + a1[17];
  sub_21C533CB4();
  result = sub_21C5E3610();
  v12 = v2 + a1[15];
  *(_QWORD *)v12 = result;
  *(_QWORD *)(v12 + 8) = v13;
  *(_BYTE *)(v12 + 16) = v14 & 1;
  *(_QWORD *)(v12 + 24) = v15;
  *(_QWORD *)(v2 + v9) = v1;
  *(_QWORD *)v10 = v5;
  *(_QWORD *)(v10 + 8) = v4;
  *(_BYTE *)(v10 + 16) = 0;
  return result;
}

uint64_t static Annotation._mapContentCount(inputs:)()
{
  return 1;
}

void static Annotation._makeMapContent(content:inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552882A8);
  MEMORY[0x24BDAC7A8](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552882B0);
  MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_21C5E2EC0();
  MEMORY[0x24BDAC7A8](v1);
  _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0();
  type metadata accessor for Annotation();
}

void sub_21C5B0360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  sub_21C5E2EC0();
  v8 = *(unsigned int **)(v7 - 264);
  sub_21C59C8F8((void (*)(uint64_t))sub_21C5B06BC, v0, v4);
  *(_QWORD *)(v7 - 360) = type metadata accessor for _MapContentInputs(0);
  v9 = *(_QWORD *)(v7 - 256);
  *(_QWORD *)(v7 - 296) = v5;
  *(_QWORD *)(v7 - 328) = v4;
  *(_QWORD *)(v7 - 344) = v1;
  sub_21C5E3304();
  v10 = sub_21C52BB38(v8);
  v11 = v9;
  sub_21C5E32B0();
  if (*(_QWORD *)(v7 - 248) == 4)
  {
    v12 = *v3;
    (*(void (**)(int *, _QWORD))(*(_QWORD *)(v7 - 288) + 8))(v3, *(_QWORD *)(v7 - 280));
    v13 = *(_QWORD *)(v7 - 272);
    (*(void (**)(int *, _QWORD, _QWORD))(v13 + 16))(v6, *(_QWORD *)(v7 - 296), *(_QWORD *)(v7 - 240));
    if (v2 == 4)
    {
      v14 = *v6;
      v15 = (*(uint64_t (**)(int *, _QWORD))(v13 + 8))(v6, *(_QWORD *)(v7 - 240));
      v16 = *(_DWORD *)(v11 + *(int *)(*(_QWORD *)(v7 - 360) + 28));
      *(_DWORD *)(v7 - 136) = v10;
      *(_DWORD *)(v7 - 132) = v12;
      *(_DWORD *)(v7 - 128) = v14;
      *(_DWORD *)(v7 - 124) = v16;
      *(_DWORD *)(v7 - 120) = 0;
      *(_QWORD *)(v7 - 112) = 0;
      *(_WORD *)(v7 - 104) = 771;
      *(_BYTE *)(v7 - 102) = 6;
      MEMORY[0x24BDAC7A8](v15);
      v17 = *(_QWORD *)(v7 - 352);
      *(_QWORD *)(v7 - 168) = v0;
      *(_QWORD *)(v7 - 160) = v17;
      v18 = *(_QWORD *)(v7 - 336);
      *(_QWORD *)(v7 - 152) = *(_QWORD *)(v7 - 344);
      *(_QWORD *)(v7 - 144) = v18;
      type metadata accessor for Annotation.MakeList();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  JUMPOUT(0x21C5B0620);
}

void sub_21C5B0624()
{
  type metadata accessor for Annotation();
}

uint64_t sub_21C5B0654(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 60);
  v7[2] = a1;
  v8 = v1;
  v4 = sub_21C5E2DD0();
  sub_21C52951C(v3, (uint64_t)sub_21C536CD4, (uint64_t)v7, v1, MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v5);
  return v9;
}

void sub_21C5B06BC()
{
  sub_21C5B0624();
}

void sub_21C5B06C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[11];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v21 = type metadata accessor for MapContentList.Item.Content(0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for MapContentList.Item(0);
  v24 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = a1[3];
  v19[8] = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v19[7] = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ResolvedAnnotation();
  MEMORY[0x24BDAC7A8](v20);
  v26 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_21C5E328C();
  v27 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v9 = sub_21C5E3340();
  v10 = *(_QWORD *)(v9 - 8);
  v28 = v9;
  v29 = v10;
  MEMORY[0x24BDAC7A8](v9);
  v32 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552884D0);
  MEMORY[0x24BDAC7A8](v30);
  MEMORY[0x24BDAC7A8](v12);
  v13 = sub_21C5E34E4();
  MEMORY[0x24BDAC7A8](v13);
  v19[10] = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v31 = (char *)v19 - v16;
  v17 = a1[4];
  v18 = a1[5];
  v33 = a1[2];
  v34 = v4;
  v19[9] = v4;
  v35 = v17;
  v36 = v18;
  v19[6] = v18;
  type metadata accessor for Annotation();
}

uint64_t sub_21C5B0970(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t Value;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  _BOOL4 v51;
  BOOL v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  int *v60;
  int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  void *v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;

  v9 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v85 - v10;
  v12 = *(_DWORD *)(*(_QWORD *)(v7 - 176) + 12);
  Value = AGGraphGetValue();
  *(_QWORD *)(v7 - 360) = v14;
  *(_QWORD *)(v7 - 264) = v9;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v16 = *(_QWORD *)(v7 - 184);
  *(_QWORD *)(v7 - 224) = v11;
  *(_QWORD *)(v7 - 216) = a1;
  v15(v11, Value, a1);
  v17 = *(int *)(v16 + 48);
  v18 = *MEMORY[0x24BE096C0];
  *(_QWORD *)(v7 - 208) = v2;
  if (v12 == v18)
  {
    sub_21C5E34D8();
    v24 = 0;
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  }
  else
  {
    v19 = AGGraphGetValue();
    v21 = v20;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v5, v19, v4);
    *(_BYTE *)(v5 + v17) = v21 & 1;
    v22 = *(int *)(v16 + 48);
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v23(v3, v5, v4);
    v24 = *(unsigned __int8 *)(v5 + v22);
  }
  *(_DWORD *)(v7 - 384) = v24;
  *(_BYTE *)(v3 + v17) = v24;
  v25 = *(_QWORD *)(v7 - 168);
  *(_QWORD *)(v7 - 184) = v4;
  v23(v25, v3, v4);
  v26 = *(_QWORD *)(v7 - 176);
  v27 = *(_QWORD *)(v7 - 200);
  v28 = AGGraphGetValue();
  *(_QWORD *)(v7 - 368) = v29;
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 192) + 16);
  v31 = *(_QWORD *)(v7 - 160);
  *(_QWORD *)(v7 - 256) = v30;
  v30(v31, v28, v27);
  v32 = AGGraphGetValue();
  v33 = *(_QWORD *)(v7 - 232);
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  v34(v1, v32, v6);
  v35 = sub_21C5E31B4();
  v36 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  v36(v1, v6);
  v37 = *(_QWORD *)(v26 + 24);
  v38 = (v35 | v37) == 0;
  if (v35 && v37)
  {
    swift_retain();
    swift_retain();
    v38 = sub_21C5E3718();
    swift_release();
    swift_release();
  }
  *(_DWORD *)(v7 - 388) = v38;
  v39 = AGGraphGetValue();
  v34(v1, v39, v6);
  sub_21C53206C();
  sub_21C5E3298();
  v40 = *(unsigned __int8 *)(v7 - 144);
  v36(v1, v6);
  if (*(_BYTE *)(v26 + 32) == 3)
    v41 = 1;
  else
    v41 = sub_21C5E2E54() ^ 1;
  *(_DWORD *)(v7 - 392) = v41;
  v42 = *(_QWORD *)(v7 - 208);
  *(_DWORD *)(v7 - 232) = v40;
  v43 = AGGraphGetValue();
  v34(v1, v43, v6);
  sub_21C532028();
  sub_21C5E3298();
  v44 = *(unsigned __int8 *)(v7 - 144);
  v36(v1, v6);
  v45 = *(unsigned __int8 *)(v26 + 33);
  *(_DWORD *)(v7 - 236) = v44;
  if (v45 == 3)
    v46 = 1;
  else
    v46 = sub_21C5E2E54() ^ 1;
  v47 = AGGraphGetValue();
  v34(v1, v47, v6);
  sub_21C53386C();
  sub_21C5E3298();
  v36(v1, v6);
  v48 = *(unsigned __int8 *)(v7 - 144);
  v49 = *(unsigned __int8 *)(v26 + 34);
  if (v48 == 6)
  {
    v50 = *(_QWORD *)(v7 - 184);
    if ((v49 != 6) | *(_QWORD *)(v7 - 360) & 1 | (*(_DWORD *)(v7 - 384) != 0) | *(_QWORD *)(v7 - 368) & 1 | *(_DWORD *)(v7 - 392) & 1 | v46 & 1 | (*(_DWORD *)(v7 - 388) ^ 1) & 1)
      goto LABEL_28;
LABEL_27:
    if (AGGraphGetOutputValue())
      goto LABEL_31;
    goto LABEL_28;
  }
  v50 = *(_QWORD *)(v7 - 184);
  if (v49 != 6)
  {
    switch(v48)
    {
      case 5:
        v51 = *(_DWORD *)(v7 - 384) != 0;
        v52 = v49 == 5;
        break;
      case 4:
        v51 = *(_DWORD *)(v7 - 384) != 0;
        v52 = v49 == 4;
        break;
      case 3:
        v51 = *(_DWORD *)(v7 - 384) != 0;
        v52 = v49 == 3;
        break;
      default:
        if ((v49 - 3) < 3
          || *(_QWORD *)(v7 - 360) & 1 | (*(_DWORD *)(v7 - 384) != 0) | *(_QWORD *)(v7 - 368) & 1 | *(_DWORD *)(v7 - 392) & 1 | v46 & 1 | (*(_DWORD *)(v7 - 388) ^ 1) & 1
          || v48 != v49)
        {
          goto LABEL_28;
        }
        goto LABEL_27;
    }
    v53 = !v52;
    if (((v53 | *(_QWORD *)(v7 - 360) | v51 | *(_QWORD *)(v7 - 368) | *(_DWORD *)(v7 - 392) | v46 | *(_DWORD *)(v7 - 388) ^ 1) & 1) == 0)
      goto LABEL_27;
  }
LABEL_28:
  *(_QWORD *)(v7 - 360) = v23;
  v54 = *(_DWORD *)(v26 + 16) + 1;
  *(_DWORD *)(v7 - 368) = v54;
  *(_DWORD *)(v26 + 16) = v54;
  v55 = *(_QWORD *)(v7 - 224);
  *(_OWORD *)(v7 - 384) = *(_OWORD *)v55;
  v56 = *(_QWORD *)(v55 + 16);
  v57 = *(_QWORD *)(v55 + 24);
  v58 = *(int **)(v7 - 312);
  v59 = *(_QWORD *)(v7 - 248);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 - 256))(v59 + v58[6], *(_QWORD *)(v7 - 160), v27);
  *(_QWORD *)(v7 - 256) = v35;
  v60 = *(int **)(v7 - 216);
  v61 = v48;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v7 - 336) + 16))(*(_QWORD *)(v7 - 344), v55 + v60[14], *(_QWORD *)(v7 - 328));
  v62 = sub_21C5E37B4();
  v63 = (uint64_t *)(v55 + v60[17]);
  v64 = *v63;
  v65 = v63[1];
  v66 = *((_BYTE *)v63 + 16);
  v67 = *(void **)(v55 + v60[16]);
  v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
  v69 = *(_QWORD *)(v7 - 168);
  v68(v59 + v58[14], v69, *(_QWORD *)(v7 - 184));
  *(_OWORD *)v59 = *(_OWORD *)(v7 - 384);
  *(_QWORD *)(v59 + 16) = v56;
  *(_QWORD *)(v59 + 24) = v57;
  *(_QWORD *)(v59 + v58[7]) = v62;
  *(_QWORD *)(v59 + v58[8]) = *(_QWORD *)(v7 - 256);
  *(_BYTE *)(v59 + v58[9]) = *(_DWORD *)(v7 - 232);
  *(_BYTE *)(v59 + v58[10]) = *(_DWORD *)(v7 - 236);
  v70 = v59 + v58[11];
  *(_QWORD *)v70 = v64;
  *(_QWORD *)(v70 + 8) = v65;
  *(_BYTE *)(v70 + 16) = v66;
  v50 = *(_QWORD *)(v7 - 184);
  *(_QWORD *)(v59 + v58[12]) = v67;
  v71 = v58[13];
  *(_DWORD *)(v7 - 312) = v61;
  *(_BYTE *)(v59 + v71) = v61;
  v72 = *(_QWORD *)(v7 - 320);
  v73 = v69;
  v35 = *(_QWORD *)(v7 - 256);
  v68(v72, v73, v50);
  v74 = *(_QWORD *)(v7 - 288);
  sub_21C529664(v59, v74, (uint64_t (*)(_QWORD))type metadata accessor for ResolvedAnnotation);
  swift_storeEnumTagMultiPayload();
  sub_21C52B9E4();
  swift_retain();
  v75 = v67;
  sub_21C5E34F0();
  v76 = *(_QWORD *)(v7 - 144);
  if (!v76)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_255287F08);
    v76 = swift_allocObject();
    *(_OWORD *)(v76 + 16) = xmmword_21C5E5570;
    *(_QWORD *)(v76 + 32) = 0;
    *(_BYTE *)(v76 + 72) = 0;
  }
  v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 - 360);
  v78 = *(_QWORD *)(v7 - 272);
  *(_QWORD *)v78 = v76;
  v79 = *(_QWORD *)(v7 - 296);
  v77(v78 + *(int *)(v79 + 28), v72, v50);
  *(_DWORD *)(v78 + 8) = *(_DWORD *)(v7 - 368);
  sub_21C536C90(v74, v78 + *(int *)(v79 + 24));
  __swift_instantiateConcreteTypeFromMangledName(&qword_2552884D8);
  v80 = *(unsigned __int8 *)(*(_QWORD *)(v7 - 280) + 80);
  v81 = (v80 + 32) & ~v80;
  v82 = swift_allocObject();
  *(_OWORD *)(v82 + 16) = xmmword_21C5E5570;
  sub_21C529664(v78, v82 + v81, type metadata accessor for MapContentList.Item);
  *(_QWORD *)(v7 - 144) = sub_21C5BA7C0(v82);
  *(_QWORD *)(v7 - 136) = v83;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  sub_21C52A88C(v78, type metadata accessor for MapContentList.Item);
  sub_21C52A88C(*(_QWORD *)(v7 - 248), (uint64_t (*)(_QWORD))type metadata accessor for ResolvedAnnotation);
  v42 = *(_QWORD *)(v7 - 208);
  v27 = *(_QWORD *)(v7 - 200);
  v26 = *(_QWORD *)(v7 - 176);
  v48 = *(_DWORD *)(v7 - 312);
LABEL_31:
  *(_BYTE *)(v26 + 34) = v48;
  *(_BYTE *)(v26 + 33) = *(_DWORD *)(v7 - 236);
  *(_BYTE *)(v26 + 32) = *(_DWORD *)(v7 - 232);
  *(_QWORD *)(v26 + 24) = v35;
  swift_release();
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v7 - 192) + 8))(*(_QWORD *)(v7 - 160), v27);
  (*(void (**)(_QWORD, uint64_t))(v42 + 8))(*(_QWORD *)(v7 - 168), v50);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v7 - 264) + 8))(*(_QWORD *)(v7 - 224), *(_QWORD *)(v7 - 216));
}

void sub_21C5B1194()
{
  static Annotation._makeMapContent(content:inputs:)();
}

void type metadata accessor for Annotation.MakeList()
{
  JUMPOUT(0x22077F91CLL);
}

uint64_t sub_21C5B11B0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21C5B125C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void **v22;
  void *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  id v27;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v4 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v5 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64) + 7;
  if ((v8 | v6) > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0
    || ((((v10 + ((v9 + ((v6 + 32) & ~v6)) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + (((v8 | v6) & 0xF8 ^ 0x1F8) & ((v8 | v6) + 16)));
    swift_retain();
  }
  else
  {
    v14 = ~v8;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v15 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    v16 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v16;
    v17 = ((unint64_t)v15 + v6 + 16) & ~v6;
    v18 = ((unint64_t)v16 + v6 + 16) & ~v6;
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v17, v18);
    v19 = (v17 + v9) & v14;
    v20 = (v18 + v9) & v14;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v19, v20, v4);
    v21 = (_QWORD *)((v10 + v19) & 0xFFFFFFFFFFFFF8);
    v22 = (void **)((v10 + v20) & 0xFFFFFFFFFFFFF8);
    v23 = *v22;
    *v21 = *v22;
    v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    v25 = *(_OWORD *)v24;
    v26 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)(v26 + 16) = *(_BYTE *)(v24 + 16);
    *(_OWORD *)v26 = v25;
    v27 = v23;
  }
  return v3;
}

void sub_21C5B13D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v4 = (((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t))(v3 + 8))(v4);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);

}

_OWORD *sub_21C5B1460(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void **v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  id v24;

  *a1 = *a2;
  v5 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v5 + v8 + 16) & ~v8;
  v10 = ((unint64_t)v6 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = (v14 + v9) & ~v13;
  v16 = (v14 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v15, v16);
  v17 = *(_QWORD *)(v12 + 64) + 7;
  v18 = (_QWORD *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (void **)((v17 + v16) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  *v18 = *v19;
  v21 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_BYTE *)(v22 + 16);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_BYTE *)(v21 + 16) = v23;
  v24 = v20;
  return a1;
}

_QWORD *sub_21C5B1554(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  unint64_t v19;
  void *v20;
  void *v21;
  id v22;
  unint64_t v23;
  __int128 v24;

  *a1 = *a2;
  a1[1] = a2[1];
  v5 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v5[1] = v6[1];
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v5 + v8 + 16) & ~v8;
  v10 = ((unint64_t)v6 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = (v14 + v9) & ~v13;
  v16 = (v14 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v15, v16);
  v17 = *(_QWORD *)(v12 + 64) + 7;
  v18 = (void **)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (v17 + v16) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(void **)v19;
  v19 += 15;
  v21 = *v18;
  *v18 = v20;
  v22 = v20;

  v23 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_OWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v23 + 16) = *(_BYTE *)((v19 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_OWORD *)v23 = v24;
  return a1;
}

_OWORD *sub_21C5B1660(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  char v22;

  *a1 = *a2;
  v5 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v5 + v8 + 16) & ~v8;
  v10 = ((unint64_t)v6 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = (v14 + v9) & ~v13;
  v16 = (v14 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v15, v16);
  v17 = *(_QWORD *)(v12 + 64) + 7;
  v18 = (_QWORD *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v17 + v16) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_BYTE *)(v21 + 16);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_BYTE *)(v20 + 16) = v22;
  return a1;
}

_OWORD *sub_21C5B1750(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  unint64_t v19;
  void *v20;
  void *v21;
  unint64_t v22;
  __int128 v23;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v5[1] = v6[1];
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v5 + v8 + 16) & ~v8;
  v10 = ((unint64_t)v6 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = (v14 + v9) & ~v13;
  v16 = (v14 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v15, v16);
  v17 = *(_QWORD *)(v12 + 64) + 7;
  v18 = (void **)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (v17 + v16) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(void **)v19;
  v19 += 15;
  v21 = *v18;
  *v18 = v20;

  v22 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_OWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v22 + 16) = *(_BYTE *)((v19 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_OWORD *)v22 = v23;
  return a1;
}

uint64_t sub_21C5B184C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFE)
    v9 = 2147483646;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v5 + 80);
  v11 = *(_QWORD *)(v5 + 64);
  v12 = *(unsigned __int8 *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 64) + 7;
  if (v9 >= a2)
  {
    v20 = (((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v10 + 16) & ~v10;
    if (v6 == v9)
    {
      return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v5 + 48))(v20, *(unsigned int *)(v5 + 84), v4);
    }
    else
    {
      v21 = (v20 + v11 + v12) & ~v12;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(unint64_t))(v7 + 48))(v21);
      }
      else
      {
        v22 = *(_QWORD *)((v13 + v21) & 0xFFFFFFFFFFFFF8);
        if (v22 >= 0xFFFFFFFF)
          LODWORD(v22) = -1;
        if ((v22 + 1) >= 2)
          return v22;
        else
          return 0;
      }
    }
  }
  else
  {
    v14 = ((((v13 + ((v11 + v12 + ((v10 + 32) & ~(_DWORD)v10)) & ~(_DWORD)v12)) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 17;
    v15 = (a2 - v9 + 255) >> (8 * v14);
    if (v14 < 4)
      v16 = v15 + 1;
    else
      v16 = 2;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v18 = v17;
    else
      v18 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21C5B1910 + 4 * byte_21C5E9970[v18]))();
  }
}

void sub_21C5B19E4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE)
    v7 = 2147483646;
  v8 = ((((*(_QWORD *)(v6 + 64)
         + 7
         + ((*(_QWORD *)(v5 + 64)
           + *(unsigned __int8 *)(v6 + 80)
           + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 17;
  if (v7 >= a3)
  {
    v11 = 0;
    if (v7 >= a2)
      goto LABEL_19;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v7 + 255) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v7 >= a2)
LABEL_19:
      __asm { BR              X6 }
  }
  if (v8 >= 4)
    v12 = ~v7 + a2;
  else
    v12 = (~(_BYTE)v7 + a2);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v12;
  else
    *(_DWORD *)a1 = v12;
  __asm { BR              X10 }
}

void sub_21C5B1B44()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x21C5B1BF8);
}

void sub_21C5B1B4C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x21C5B1B54);
  JUMPOUT(0x21C5B1BF8);
}

void sub_21C5B1BAC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21C5B1BF8);
}

void sub_21C5B1BB4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21C5B1BF8);
}

uint64_t sub_21C5B1BBC(uint64_t a1, int a2, int a3)
{
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_WORD *)(v14 + v15) = 0;
  if (!a2)
    JUMPOUT(0x21C5B1BF8);
  v3 = (((v14 + 23) & 0xFFFFFFFFFFFFFFF8) + v13 + 16) & a1;
  if (v6 == v10)
  {
    v4 = *(uint64_t (**)(unint64_t))(v9 + 56);
  }
  else
  {
    v3 = (v3 + v12 + v11) & v7;
    if (a3 != v10)
      JUMPOUT(0x21C5B1BC8);
    v4 = *(uint64_t (**)(unint64_t))(v8 + 56);
  }
  return v4(v3);
}

void sub_21C5B1C10()
{
  JUMPOUT(0x22077F9A0);
}

uint64_t type metadata accessor for ResolvedAnnotation()
{
  uint64_t result;

  result = qword_25528A040;
  if (!qword_25528A040)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *sub_21C5B1C5C(_OWORD *a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  id v25;
  uint64_t v26;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v7;
    v8 = a3[6];
    v9 = (char *)a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = sub_21C5E3340();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[8];
    *(_QWORD *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(_QWORD *)((char *)v4 + v12) = *(uint64_t *)((char *)a2 + v12);
    v13 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)v4 + v13) = *((_BYTE *)a2 + v13);
    v14 = a3[11];
    v15 = a3[12];
    v16 = (char *)v4 + v14;
    v17 = (uint64_t)a2 + v14;
    *(_OWORD *)v16 = *(_OWORD *)v17;
    v16[16] = *(_BYTE *)(v17 + 16);
    v18 = *(void **)((char *)a2 + v15);
    *(_QWORD *)((char *)v4 + v15) = v18;
    v19 = a3[13];
    v20 = a3[14];
    v21 = (char *)v4 + v20;
    v22 = (uint64_t)a2 + v20;
    *((_BYTE *)v4 + v19) = *((_BYTE *)a2 + v19);
    v23 = sub_21C5E34E4();
    v24 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
    swift_retain();
    swift_retain();
    v25 = v18;
    v24(v21, v22, v23);
  }
  return v4;
}

uint64_t sub_21C5B1D94(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + a2[6];
  v5 = sub_21C5E3340();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  swift_release();

  v6 = a1 + a2[14];
  v7 = sub_21C5E34E4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_OWORD *sub_21C5B1E24(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  id v24;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_21C5E3340();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  v12 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  v13 = a3[11];
  v14 = a3[12];
  v15 = (char *)a1 + v13;
  v16 = (char *)a2 + v13;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  v15[16] = v16[16];
  v17 = *(void **)((char *)a2 + v14);
  *(_QWORD *)((char *)a1 + v14) = v17;
  v18 = a3[13];
  v19 = a3[14];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
  v22 = sub_21C5E34E4();
  v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
  swift_retain();
  swift_retain();
  v24 = v17;
  v23(v20, v21, v22);
  return a1;
}

_QWORD *sub_21C5B1F30(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21C5E3340();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v10 = a3[11];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *(_OWORD *)v12;
  v11[16] = v12[16];
  *(_OWORD *)v11 = v13;
  v14 = a3[12];
  v15 = *(void **)((char *)a1 + v14);
  v16 = *(void **)((char *)a2 + v14);
  *(_QWORD *)((char *)a1 + v14) = v16;
  v17 = v16;

  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  v18 = a3[14];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = sub_21C5E34E4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

_OWORD *sub_21C5B2070(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_21C5E3340();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  v12 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  v13 = a3[11];
  v14 = a3[12];
  v15 = (char *)a1 + v13;
  v16 = (char *)a2 + v13;
  v17 = *(_OWORD *)v16;
  v15[16] = v16[16];
  *(_OWORD *)v15 = v17;
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  v18 = a3[13];
  v19 = a3[14];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
  v22 = sub_21C5E34E4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

_OWORD *sub_21C5B215C(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_21C5E3340();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_release();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_release();
  v11 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  v12 = a3[11];
  v13 = a3[12];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  v14[16] = v15[16];
  *(_OWORD *)v14 = *(_OWORD *)v15;
  v16 = *(void **)((char *)a1 + v13);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);

  v17 = a3[14];
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = sub_21C5E34E4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  return a1;
}

uint64_t sub_21C5B2264()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5B2270(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = sub_21C5E3340();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_21C5E34E4();
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[14];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[7]);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_21C5B2314()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5B2320(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_21C5E3340();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[6];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[7]) = (a2 - 1);
      return result;
    }
    v10 = sub_21C5E34E4();
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[14];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t sub_21C5B23C0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_21C5E3340();
  if (v1 <= 0x3F)
  {
    result = sub_21C5E34E4();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t _ConditionalMapContent.storage.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for _ConditionalMapContent.Storage(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v3, v5);
}

uint64_t type metadata accessor for _ConditionalMapContent.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ConditionalMapContent.Storage);
}

uint64_t _ConditionalMapContent.init(trueContent:falseType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a4, a1);
  type metadata accessor for _ConditionalMapContent.Storage(0, a2, a3, v6);
  return swift_storeEnumTagMultiPayload();
}

uint64_t _ConditionalMapContent.init(falseContent:trueType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a4, a1, a3);
  type metadata accessor for _ConditionalMapContent.Storage(0, a2, a3, v6);
  return swift_storeEnumTagMultiPayload();
}

void static _ConditionalMapContent<>._makeMapContent(content:inputs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[9];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v13[5] = a4;
  v13[6] = a5;
  v13[3] = a3;
  v13[7] = a1;
  v15 = a6;
  v20 = *MEMORY[0x24BDAC8D0];
  v14 = type metadata accessor for _MapContentOutputs.SetDependency(0);
  MEMORY[0x24BDAC7A8](v14);
  v13[8] = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x24BDAC7A8](v11);
  v13[0] = (char *)v13 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a2;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  _s9ContainerVMa();
}

void sub_21C5B2670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v11 - 240) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v12);
  *(_QWORD *)(v11 - 264) = (char *)&a9 - v13;
  v14 = type metadata accessor for _MapContentOutputs(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&a9 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for _MapContentInputs.AddPreference(0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&a9 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0();
  sub_21C521E50(&qword_25528A050, type metadata accessor for _MapContentInputs.AddPreference, (uint64_t)&unk_21C5E5388);
  sub_21C5E3460();
  _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0();
  v20 = sub_21C5E349C();
  v21 = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v11 - 256) = v21;
  (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v16, v19, v20);
  v22 = *(_QWORD *)(v11 - 192);
  sub_21C52AAD4((uint64_t)v16, v22, type metadata accessor for _MapContentOutputs);
  type metadata accessor for _ConditionalMapContent(0, v9, *(_QWORD *)(v11 - 248), v23);
  LODWORD(v19) = sub_21C52BB38(*(unsigned int **)(v11 - 216));
  sub_21C529664(v10, *(_QWORD *)(v11 - 272), type metadata accessor for _MapContentInputs);
  sub_21C529664(v22, (uint64_t)v16, type metadata accessor for _MapContentOutputs);
  sub_21C5B29A4((int)v19, *(_DWORD **)(v11 - 264));
}

void sub_21C5B2840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 240) + 16))(v3, v4, v5);
  *(_QWORD *)(v7 - 128) = v2;
  *(_QWORD *)(v7 - 120) = v6;
  *(_QWORD *)(v7 - 112) = v1;
  *(_QWORD *)(v7 - 104) = v0;
  _s4InfoVMa();
}

uint64_t sub_21C5B286C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  int v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v6 - 160) = a1;
  *(_QWORD *)(v6 - 152) = v4;
  *(_QWORD *)(v6 - 144) = MEMORY[0x22077F9A0](&unk_21C5E9DD0, v4);
  v7 = sub_21C5E2DB8();
  sub_21C52951C(v2, (uint64_t)sub_21C5B4674, v6 - 176, v4, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v8);
  v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(v2, v4);
  v10 = *(_DWORD *)(v6 - 128);
  v11 = *(_QWORD *)(v6 - 208);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 256) + 16))(v11, *(_QWORD *)(v6 - 192), v1);
  v12 = v11 + *(int *)(*(_QWORD *)(v6 - 200) + 20);
  *(_DWORD *)v12 = v10;
  *(_BYTE *)(v12 + 4) = 0;
  sub_21C521E50(qword_25528A058, type metadata accessor for _MapContentOutputs.SetDependency, (uint64_t)&unk_21C5E5360);
  sub_21C5E3484();
  sub_21C52A88C(v11, type metadata accessor for _MapContentOutputs.SetDependency);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(v3, v4);
}

void _s9ContainerVMa()
{
  JUMPOUT(0x22077F91CLL);
}

void sub_21C5B29A4(int a1@<W0>, _DWORD *a2@<X8>)
{
  *a2 = a1;
  _s9ContainerVMa();
}

id sub_21C5B29DC(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id result;

  sub_21C52AAD4(v3, v1 + a1[13], type metadata accessor for _MapContentInputs);
  sub_21C52AAD4(v2, v1 + a1[14], type metadata accessor for _MapContentOutputs);
  result = (id)AGSubgraphGetCurrent();
  if (result)
    *(_QWORD *)(v1 + a1[15]) = result;
  else
    __break(1u);
  return result;
}

uint64_t static _ConditionalMapContent<>._mapContentCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char v9;
  BOOL v10;
  unsigned __int8 v11;

  v8 = (*(uint64_t (**)(void))(a4 + 40))();
  if ((v9 & 1) == 0)
  {
    v10 = v8 != (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 40))(a1, a3, a5);
    if (((v11 | v10) & 1) != 0)
      return 0;
  }
  return v8;
}

uint64_t sub_21C5B2AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  void (*v24)(char *, uint64_t);
  uint64_t v25;

  v5 = v4;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = type metadata accessor for _ConditionalMapContent.Storage(255, v7, v8, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v13 = (char *)&v25 - v12;
  v15 = type metadata accessor for _ConditionalMapContent(0, v7, v8, v14);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v25 - v17;
  (*(void (**)(char *, uint64_t, __n128))(v19 + 16))((char *)&v25 - v17, v5, v16);
  v20 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
  v21 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v13, v18, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, a1, v9);
  LODWORD(a1) = swift_getEnumCaseMultiPayload();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((_DWORD)a1 == 1)
  {
    if (EnumCaseMultiPayload != 1)
    {
LABEL_3:
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, TupleTypeMetadata2);
      return 0;
    }
  }
  else if (EnumCaseMultiPayload == 1)
  {
    goto LABEL_3;
  }
  v24 = *(void (**)(char *, uint64_t))(v21 + 8);
  v24(v20, v9);
  v24(v13, v9);
  return 1;
}

void sub_21C5B2C4C(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;

  v6 = type metadata accessor for _ConditionalMapContent(0, a2, a3, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a4, a1, v6);
  _s4InfoVMa();
}

uint64_t sub_21C5B2CC0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + *(int *)(result + 52)) = v1;
  return result;
}

uint64_t sub_21C5B2CE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for _ConditionalMapContent(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

void sub_21C5B2D40()
{
  _s4InfoVMa();
}

uint64_t sub_21C5B2DA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t OutputValue;
  uint64_t v28;
  void (*v29)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(_BYTE *, uint64_t, uint64_t);
  int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(_BYTE *, uint64_t);
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[96];

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v4 - 184) = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)(v4 - 208) = &v47[-v9];
  MEMORY[0x24BDAC7A8](v10);
  *(_QWORD *)(v4 - 200) = &v47[-v11];
  v12 = sub_21C5E3BB0();
  *(_QWORD *)(v4 - 152) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = &v47[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v16);
  v18 = &v47[-v17];
  MEMORY[0x24BDAC7A8](v19);
  v21 = &v47[-v20];
  v23 = type metadata accessor for _ConditionalMapContent(0, v1, *(_QWORD *)(v4 - 144), v22);
  *(_QWORD *)(v4 - 176) = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v25 = &v47[-v24];
  *(_QWORD *)(v4 - 144) = v25;
  *(_QWORD *)(v4 - 192) = v3;
  sub_21C5B2CE4(v2, v26, (uint64_t)v25);
  OutputValue = AGGraphGetOutputValue();
  *(_QWORD *)(v4 - 168) = v23;
  if (OutputValue)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v21, OutputValue, a1);
    v28 = 0;
  }
  else
  {
    v28 = 1;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v21, v28, 1, a1);
  v29 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16);
  v30 = *(_QWORD *)(v4 - 152);
  v29(v18, v21, v30);
  v31 = v13;
  v32 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48);
  v33 = v32(v18, 1, a1);
  *(_QWORD *)(v4 - 160) = v31;
  if (v33 == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v18, v30);
    goto LABEL_9;
  }
  v36 = sub_21C5B2AC8(*(_QWORD *)(v4 - 144), a1, v34, v35);
  v37 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  *(_QWORD *)(v4 - 216) = v37;
  v37(v18, a1);
  if ((v36 & 1) == 0)
  {
LABEL_9:
    *(_QWORD *)(v4 - 200) = v21;
    v29(v15, v21, v30);
    if (v32(v15, 1, a1) == 1)
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v4 - 160) + 8))(v15, v30);
      sub_21C5B3300(*(_QWORD *)(v4 - 144), v2, *(_QWORD *)(v4 - 184));
    }
    v46 = *(_QWORD *)(v4 - 208);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(v46, v15, a1);
    sub_21C5B320C(v46, v2);
  }
  result = AGGraphGetOutputValue();
  if (result)
  {
    v39 = *(_QWORD *)(v4 - 200);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v39, result, a1);
    v41 = *(_QWORD *)(v4 - 176);
    v40 = *(_QWORD *)(v4 - 168);
    v42 = *(_QWORD *)(v4 - 144);
    v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 24))(v39, v42, v40);
    v44 = MEMORY[0x24BDAC7A8](v43);
    *(_QWORD *)&v47[-16] = v2;
    *(_QWORD *)&v47[-8] = MEMORY[0x22077F9A0](&unk_21C5E9DD0, v2, v44);
    sub_21C52951C(v39, (uint64_t)sub_21C5B65F0, (uint64_t)&v47[-32], a1, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v45);
    (*(void (**)(uint64_t, uint64_t))(v4 - 216))(v39, a1);
    (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)(v4 - 160) + 8))(v21, *(_QWORD *)(v4 - 152));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v42, v40);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_21C5B320C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _OWORD v10[2];

  v4 = type metadata accessor for _MapContentOutputs.ResetPreference(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v2 + *(int *)(a2 + 56);
  v8 = sub_21C5E349C();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  sub_21C521E50(&qword_25528A2E0, type metadata accessor for _MapContentOutputs.ResetPreference, (uint64_t)&unk_21C5E5494);
  sub_21C5E3484();
  sub_21C52A88C((uint64_t)v6, type metadata accessor for _MapContentOutputs.ResetPreference);
  v9 = *(_OWORD *)(a2 + 32);
  v10[0] = *(_OWORD *)(a2 + 16);
  v10[1] = v9;
  _s4InfoVMa();
}

uint64_t sub_21C5B32DC()
{
  return AGSubgraphInvalidate();
}

void sub_21C5B3300(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int CurrentAttribute;
  int v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;

  v7 = type metadata accessor for _MapContentOutputs(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute != *MEMORY[0x24BE096C0])
  {
    v14 = CurrentAttribute;
    v15 = (id)AGSubgraphGetGraph();
    v16 = AGSubgraphCreate();

    AGSubgraphAddChild();
    sub_21C529664(v3 + *(int *)(a2 + 52), (uint64_t)v12, type metadata accessor for _MapContentInputs);
    sub_21C529664(v3 + *(int *)(a2 + 56), (uint64_t)v9, type metadata accessor for _MapContentOutputs);
    AGGraphClearUpdate();
    v17 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    sub_21C5B34BC(a1, v14, (uint64_t)v12, (uint64_t)v9, v16, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), a3, *(_QWORD *)(a2 + 40));
  }
  __break(1u);
}

void sub_21C5B34BC(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, __n128);
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v53 = a8;
  v54 = a5;
  v49 = a4;
  v44 = a3;
  v43 = a2;
  v52 = a9;
  v56 = a10;
  v62 = *MEMORY[0x24BDAC8D0];
  v50 = type metadata accessor for _ConditionalMapContent(0, a6, a7, a4);
  v48 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v47 = (char *)v36 - v13;
  v46 = type metadata accessor for _MapContentOutputs.SetSource(0);
  MEMORY[0x24BDAC7A8](v46);
  v45 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_21C5E2EC0();
  v41 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v40 = (char *)v36 - v15;
  v37 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v36[0] = (char *)v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v39 = (char *)v36 - v19;
  v38 = sub_21C5E2EC0();
  v36[1] = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v20 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v21);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v36 - v23;
  v26 = type metadata accessor for _ConditionalMapContent.Storage(0, a6, a7, v25);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)v36 - v28;
  v30 = type metadata accessor for _MapContentOutputs(0);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v55 = (char *)v36 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v27 + 16);
  v51 = a1;
  v33(v29, a1, v26, v31);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v37 + 32))(v39, v29, a7);
    v57 = v43;
    MEMORY[0x24BDAC7A8](v34);
    v36[-4] = a7;
    v58 = a6;
    v59 = a7;
    v60 = v53;
    v61 = v56;
    _s10FalseChildVMa();
  }
  v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))(v24, v29, a6);
  v57 = v43;
  MEMORY[0x24BDAC7A8](v35);
  v36[-4] = a6;
  v58 = a6;
  v59 = a7;
  v60 = v53;
  v61 = v56;
  _s9TrueChildVMa();
}

void sub_21C5B3980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v12 - 24) = a1;
  *(_QWORD *)(v12 - 16) = MEMORY[0x22077F9A0](&unk_21C5E9F00, a1);
  v18 = sub_21C5E2DB8();
  v19 = MEMORY[0x24BEE4078];
  sub_21C52951C(v16 - 132, (uint64_t)sub_21C5B65DC, v10, a1, MEMORY[0x24BEE4078], v18, MEMORY[0x24BEE40A8], v20);
  v21 = *(_DWORD *)(v16 - 128);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v15, v14, v11);
  MEMORY[0x24BDAC7A8](v22);
  *(&a9 - 2) = v11;
  *((_DWORD *)&a9 - 2) = v21;
  sub_21C52951C(v15, (uint64_t)sub_21C5B6604, (uint64_t)(&a9 - 4), v11, v19, MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], v23);
  v24 = v15;
  v25 = *(_QWORD *)(v16 - 176);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v24, v11);
  sub_21C52BAE0(v21, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 32))(v9, *(_QWORD *)(v16 - 248), v11, v25);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v16 - 312) + 8))(v9, *(_QWORD *)(v16 - 296));
  JUMPOUT(0x21C5B3ABCLL);
}

id sub_21C5B3B8C()
{
  uint64_t v0;

  return *(id *)(v0 - 168);
}

void sub_21C5B3BCC()
{
  _s4InfoVMa();
}

uint64_t sub_21C5B3BF4(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

void sub_21C5B3C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for _ConditionalMapContent.Storage(0, v4, v5, a4);
  MEMORY[0x24BDAC7A8](v8);
  v7 = type metadata accessor for _ConditionalMapContent(0, v4, v5, v6);
  MEMORY[0x24BDAC7A8](v7);
  _s4InfoVMa();
}

void sub_21C5B3CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v10 - 176) = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)(v10 - 184) = (char *)&a9 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  *(_QWORD *)(v10 - 192) = (char *)&a9 - v14;
  sub_21C5B3F00();
}

uint64_t sub_21C5B3D9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  _QWORD v19[16];

  (*(void (**)(uint64_t, uint64_t, _QWORD))(v7 + 16))(v6, v3, *(_QWORD *)(v8 - 160));
  v9 = v3;
  v10 = *(_QWORD *)(v8 - 136);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v2, v6, v1);
  if (swift_getEnumCaseMultiPayload() == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v2, v1);
  v12 = *(_QWORD *)(v8 - 176);
  v13 = *(_QWORD *)(v8 - 192);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v13, v2, v0);
  v14 = *(_QWORD *)(v8 - 184);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v14, v13, v0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v19[2] = *(_QWORD *)(v8 - 168);
  v19[3] = MEMORY[0x22077F9A0](&unk_21C5E9F00, v16);
  sub_21C52951C(v14, (uint64_t)sub_21C5B65F0, (uint64_t)v19, v0, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v17);
  v18 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v18(v14, v0);
  return ((uint64_t (*)(uint64_t, uint64_t))v18)(v13, v0);
}

void sub_21C5B3F00()
{
  _s4InfoVMa();
}

uint64_t sub_21C5B3F30(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

uint64_t sub_21C5B3F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1);
}

void sub_21C5B3F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for _ConditionalMapContent.Storage(0, v5, v4, a4);
  MEMORY[0x24BDAC7A8](v8);
  v7 = type metadata accessor for _ConditionalMapContent(0, v5, v4, v6);
  MEMORY[0x24BDAC7A8](v7);
  _s4InfoVMa();
}

void sub_21C5B4064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v10 - 176) = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)(v10 - 184) = (char *)&a9 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  *(_QWORD *)(v10 - 192) = (char *)&a9 - v14;
  sub_21C5B3F00();
}

uint64_t sub_21C5B4108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  _QWORD v19[16];

  (*(void (**)(uint64_t, uint64_t, _QWORD))(v7 + 16))(v6, v3, *(_QWORD *)(v8 - 160));
  v9 = v3;
  v10 = *(_QWORD *)(v8 - 136);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v2, v6, v1);
  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v2, v1);
  v11 = *(_QWORD *)(v8 - 176);
  v12 = *(_QWORD *)(v8 - 192);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v12, v2, v0);
  v13 = *(_QWORD *)(v8 - 184);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v13, v12, v0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v19[2] = *(_QWORD *)(v8 - 168);
  v19[3] = MEMORY[0x22077F9A0](&unk_21C5E9F40, v15);
  sub_21C52951C(v13, (uint64_t)sub_21C5B65F0, (uint64_t)v19, v0, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v16);
  v17 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v17(v13, v0);
  return ((uint64_t (*)(uint64_t, uint64_t))v17)(v12, v0);
}

uint64_t sub_21C5B426C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 56))(a2, 1, 1);
}

void sub_21C5B428C(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  static _ConditionalMapContent<>._makeMapContent(content:inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), a4);
}

uint64_t sub_21C5B429C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _ConditionalMapContent<>._mapContentCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

void static Optional<A>._makeMapContent(content:inputs:)(unsigned int *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16[3];
  int v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for _ConditionalMapContent(255, a2, (uint64_t)&type metadata for EmptyMapContent, a3);
  v9 = sub_21C5E2EC0();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v16 - v10;
  sub_21C5E3BB0();
  v17 = sub_21C52BB38(a1);
  v19 = v8;
  v13 = _s5ChildVMa_0(0, a2, a3, v12);
  v20 = v13;
  v21 = MEMORY[0x22077F9A0](&unk_21C5E9D90, v13);
  v14 = sub_21C5E2DB8();
  sub_21C52951C((uint64_t)&v17, (uint64_t)sub_21C52A840, (uint64_t)v18, v13, MEMORY[0x24BEE4078], v14, MEMORY[0x24BEE40A8], v15);
  sub_21C52BAE0(v16[2], (uint64_t)v11);
  static _ConditionalMapContent<>._makeMapContent(content:inputs:)((uint64_t)v11, a2, (uint64_t)&type metadata for EmptyMapContent, a3, (uint64_t)&protocol witness table for EmptyMapContent, a4);
}

uint64_t sub_21C5B4418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_21C5B4464@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Value;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v19;

  v4 = sub_21C5E3BB0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - v6;
  v8 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v19 - v13;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, Value, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    MEMORY[0x1E0EB0E18](a2);
  }
  else
  {
    v17 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v17(v14, v7, a1);
    v17(v11, v14, a1);
    v17(a2, v11, a1);
  }
  type metadata accessor for _ConditionalMapContent.Storage(0, a1, (uint64_t)&type metadata for EmptyMapContent, v16);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_21C5B45F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for _ConditionalMapContent(0, *(_QWORD *)(a1 + 16), (uint64_t)&type metadata for EmptyMapContent, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t sub_21C5B4640@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_21C5B4464(*(_QWORD *)(a1 + 16), a2);
}

void sub_21C5B4650(unsigned int *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  static Optional<A>._makeMapContent(content:inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t type metadata accessor for _ConditionalMapContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ConditionalMapContent);
}

void _s4InfoVMa()
{
  JUMPOUT(0x22077F91CLL);
}

uint64_t sub_21C5B4674@<X0>(_DWORD *a1@<X8>)
{
  return sub_21C5295A8(a1);
}

uint64_t _s5ChildVMa_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s5ChildVMn_0);
}

uint64_t sub_21C5B46A0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x22077F9A0](&protocol conformance descriptor for <> _ConditionalMapContent<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C5B46E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x22077F9A0](&protocol conformance descriptor for <A> A?, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C5B4720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for _ConditionalMapContent.Storage(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21C5B47AC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21C5B4834(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X15 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_21C5B4960(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_21C5B49AC + 4 * byte_21C5E9B35[v7]))();
  }
}

uint64_t sub_21C5B4A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_21C5B4AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_21C5B4C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_21C5B4D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_21C5B4EA0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21C5B4F68 + 4 * byte_21C5E9B58[(v4 - 1)]))();
}

void sub_21C5B4FB4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_21C5B5160(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_21C5B51AC + 4 * byte_21C5E9B66[v3]))();
}

void sub_21C5B51F4(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16)
                                                                                              - 8)
                                                                                  + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    else
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    a1[v4] = a2;
  }
}

uint64_t sub_21C5B52DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for _ConditionalMapContent.Storage(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21C5B5354(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  void *v17;
  id v18;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v7 + 64) <= *(_QWORD *)(v6 + 64))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) + 16 <= 0x18 && (v9 & 0x1000F8) == 0)
  {
    v12 = v8 + 1;
    v13 = *((unsigned __int8 *)a2 + v8);
    if (v13 >= 2)
    {
      if (v8 <= 3)
        v14 = v8;
      else
        v14 = 4;
      __asm { BR              X16 }
    }
    v15 = v13 == 1;
    if (v13 == 1)
    {
      v6 = *(_QWORD *)(v5 - 8);
      v16 = *(_QWORD *)(a3 + 24);
    }
    else
    {
      v16 = *(_QWORD *)(a3 + 16);
    }
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v16);
    *((_BYTE *)v4 + v8) = v15;
    v17 = *(void **)(((unint64_t)a2 + v12 + 7) & 0xFFFFFFFFFFFFF8);
    *(_QWORD *)(((unint64_t)v4 + v12 + 7) & 0xFFFFFFFFFFFFF8) = v17;
    v18 = v17;
  }
  else
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + (((v9 & 0xF8 | 7u) + 16) & ~(unint64_t)(v9 & 0xF8 | 7u)));
    swift_retain();
  }
  return v4;
}

void sub_21C5B54AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = *(_QWORD *)(v3 - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(a1 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X16 }
  }
  if (v7 == 1)
  {
    v4 = *(_QWORD *)(v3 - 8);
    v9 = *(_QWORD *)(a2 + 24);
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 16);
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v9);

}

uint64_t sub_21C5B557C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  id v14;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v7 + 64) <= *(_QWORD *)(v6 + 64))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X16 }
  }
  v11 = v9 == 1;
  if (v9 == 1)
  {
    v6 = *(_QWORD *)(v5 - 8);
    v12 = *(_QWORD *)(a3 + 24);
  }
  else
  {
    v12 = *(_QWORD *)(a3 + 16);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v12);
  *(_BYTE *)(a1 + v8) = v11;
  v13 = *(void **)((v8 + 8 + a2) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)((v8 + 8 + a1) & 0xFFFFFFFFFFFFF8) = v13;
  v14 = v13;
  return a1;
}

uint64_t sub_21C5B5678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void *v20;
  void *v21;
  id v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64);
  if (a1 != a2)
  {
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  v19 = (void **)((v9 + 8 + a1) & 0xFFFFFFFFFFFFFFF8);
  v20 = *(void **)((v9 + 8 + a2) & 0xFFFFFFFFFFFFF8);
  v21 = *v19;
  *v19 = v20;
  v22 = v20;

  return a1;
}

uint64_t sub_21C5B581C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v7 + 64) <= *(_QWORD *)(v6 + 64))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X16 }
  }
  v11 = v9 == 1;
  if (v9 == 1)
  {
    v6 = *(_QWORD *)(v5 - 8);
    v12 = *(_QWORD *)(a3 + 24);
  }
  else
  {
    v12 = *(_QWORD *)(a3 + 16);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v12);
  *(_BYTE *)(a1 + v8) = v11;
  *(_QWORD *)((v8 + 8 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + 8 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_21C5B5914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void *v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64);
  if (a1 != a2)
  {
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  v19 = (void **)((v9 + 8 + a1) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  *v19 = *(void **)((v9 + 8 + a2) & 0xFFFFFFFFFFFFF8);

  return a1;
}

uint64_t sub_21C5B5AB4(_DWORD *a1, int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (!a2)
    return 0;
  if ((a2 & 0x80000000) == 0)
    goto LABEL_5;
  v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 16;
  v7 = v6 & 0xFFFFFFF8;
  v8 = a2 - 2147483646;
  if ((v6 & 0xFFFFFFF8) != 0)
    v8 = 2;
  if (v8 >= 0x10000)
    v9 = 4;
  else
    v9 = 2;
  if (v8 < 0x100)
    v10 = 1;
  else
    v10 = v9;
  if (v10 == 4)
  {
    v11 = *(_DWORD *)((char *)a1 + v6);
    if (!v11)
      goto LABEL_5;
  }
  else if (v10 == 2)
  {
    v11 = *(unsigned __int16 *)((char *)a1 + v6);
    if (!v11)
      goto LABEL_5;
  }
  else
  {
    v11 = *((unsigned __int8 *)a1 + v6);
    if (!v11)
    {
LABEL_5:
      v4 = *(_QWORD *)(((unint64_t)a1 + v3 + 8) & 0xFFFFFFFFFFFFF8);
      if (v4 >= 0xFFFFFFFF)
        LODWORD(v4) = -1;
      return (v4 + 1);
    }
  }
  v12 = v11 - 1;
  if (v7)
  {
    v12 = 0;
    LODWORD(v7) = *a1;
  }
  return (v7 | v12) ^ 0x80000000;
}

void sub_21C5B5B88(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  if (a3 < 0)
  {
    v7 = a3 - 2147483646;
    if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0)
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v6 = 1;
    else
      v6 = v8;
    if ((a2 & 0x80000000) == 0)
LABEL_5:
      __asm { BR              X11 }
  }
  else
  {
    v6 = 0;
    if ((a2 & 0x80000000) == 0)
      goto LABEL_5;
  }
  if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v9 = a2 ^ 0x80000000;
    bzero(a1, (v5 & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v9;
  }
  __asm { BR              X10 }
}

void sub_21C5B5CA4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (!a2)
    JUMPOUT(0x21C5B5C90);
  JUMPOUT(0x21C5B5C7CLL);
}

void sub_21C5B5CB0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21C5B5C90);
}

void sub_21C5B5CB8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21C5B5C90);
}

uint64_t sub_21C5B5CC4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for _MapContentInputs(319);
  if (v1 <= 0x3F)
  {
    result = sub_21C5E349C();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21C5B5D64(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = a3[13];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_21C5E32C8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = (int *)type metadata accessor for _MapContentInputs(0);
    v12 = v11[5];
    v13 = &v8[v12];
    v14 = &v9[v12];
    v15 = sub_21C5E2ED8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = v11[6];
    v17 = &v8[v16];
    v18 = &v9[v16];
    v19 = sub_21C5E346C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    *(_DWORD *)&v8[v11[7]] = *(_DWORD *)&v9[v11[7]];
    v20 = a3[14];
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_21C5E349C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[15];
    v25 = *(void **)((char *)a2 + v24);
    *(uint64_t *)((char *)v4 + v24) = (uint64_t)v25;
    v26 = v25;
  }
  return v4;
}

void sub_21C5B5EB0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + a2[13];
  v5 = sub_21C5E32C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = type metadata accessor for _MapContentInputs(0);
  v7 = v4 + *(int *)(v6 + 20);
  v8 = sub_21C5E2ED8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v4 + *(int *)(v6 + 24);
  v10 = sub_21C5E346C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[14];
  v12 = sub_21C5E349C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);

}

_DWORD *sub_21C5B5F84(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;

  *a1 = *a2;
  v6 = a3[13];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21C5E32C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = (int *)type metadata accessor for _MapContentInputs(0);
  v11 = v10[5];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = sub_21C5E2ED8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = v10[6];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v18 = sub_21C5E346C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  v19 = a3[14];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_21C5E349C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[15];
  v24 = *(void **)((char *)a2 + v23);
  *(_QWORD *)((char *)a1 + v23) = v24;
  v25 = v24;
  return a1;
}

_DWORD *sub_21C5B60A4(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;

  *a1 = *a2;
  v6 = a3[13];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21C5E32C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = (int *)type metadata accessor for _MapContentInputs(0);
  v11 = v10[5];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = sub_21C5E2ED8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = v10[6];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v18 = sub_21C5E346C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  v19 = a3[14];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_21C5E349C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[15];
  v24 = *(void **)((char *)a2 + v23);
  v25 = *(void **)((char *)a1 + v23);
  *(_QWORD *)((char *)a1 + v23) = v24;
  v26 = v24;

  return a1;
}

_DWORD *sub_21C5B61CC(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a3[13];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21C5E32C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = (int *)type metadata accessor for _MapContentInputs(0);
  v11 = v10[5];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = sub_21C5E2ED8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = v10[6];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v18 = sub_21C5E346C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  v19 = a3[14];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_21C5E349C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  return a1;
}

_DWORD *sub_21C5B62E8(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;

  *a1 = *a2;
  v6 = a3[13];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21C5E32C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = (int *)type metadata accessor for _MapContentInputs(0);
  v11 = v10[5];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = sub_21C5E2ED8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = v10[6];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v18 = sub_21C5E346C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  v19 = a3[14];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_21C5E349C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[15];
  v24 = *(void **)((char *)a1 + v23);
  *(_QWORD *)((char *)a1 + v23) = *(_QWORD *)((char *)a2 + v23);

  return a1;
}

uint64_t sub_21C5B640C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5B6418(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = type metadata accessor for _MapContentInputs(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[13];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for _MapContentOutputs(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[14];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[15]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_21C5B64BC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5B64C8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for _MapContentInputs(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[13];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = type metadata accessor for _MapContentOutputs(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[14];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[15]) = (a2 - 1);
  return result;
}

void sub_21C5B6568()
{
  JUMPOUT(0x22077F9A0);
}

void sub_21C5B6578()
{
  JUMPOUT(0x22077F9A0);
}

uint64_t sub_21C5B6588()
{
  return sub_21C5294C8();
}

void _s10FalseChildVMa()
{
  JUMPOUT(0x22077F91CLL);
}

void _s9TrueChildVMa()
{
  JUMPOUT(0x22077F91CLL);
}

void sub_21C5B65BC()
{
  JUMPOUT(0x22077F9A0);
}

void sub_21C5B65CC()
{
  JUMPOUT(0x22077F9A0);
}

uint64_t sub_21C5B65DC@<X0>(_DWORD *a1@<X8>)
{
  return sub_21C5B4674(a1);
}

uint64_t sub_21C5B65F0()
{
  return sub_21C5B6588();
}

uint64_t sub_21C5B6604@<X0>(_BYTE *a1@<X8>)
{
  return sub_21C58A9D8(a1);
}

ValueMetadata *type metadata accessor for PolylineMapContentKey()
{
  return &type metadata for PolylineMapContentKey;
}

ValueMetadata *type metadata accessor for CircleMapContentKey()
{
  return &type metadata for CircleMapContentKey;
}

ValueMetadata *type metadata accessor for AnnotationMapContentKey()
{
  return &type metadata for AnnotationMapContentKey;
}

ValueMetadata *type metadata accessor for PolygonMapContentKey()
{
  return &type metadata for PolygonMapContentKey;
}

ValueMetadata *type metadata accessor for SelectedUserAnnotationMapContentKey()
{
  return &type metadata for SelectedUserAnnotationMapContentKey;
}

ValueMetadata *type metadata accessor for UserAnnotationMapContentKey()
{
  return &type metadata for UserAnnotationMapContentKey;
}

ValueMetadata *type metadata accessor for SelectedMarkerMapContentKey()
{
  return &type metadata for SelectedMarkerMapContentKey;
}

ValueMetadata *type metadata accessor for MarkerMapContentKey()
{
  return &type metadata for MarkerMapContentKey;
}

_QWORD *initializeBufferWithCopyOfBuffer for MapContentList(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MapContentList(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for MapContentList(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for MapContentList()
{
  return &type metadata for MapContentList;
}

unint64_t sub_21C5B675C(uint64_t a1)
{
  unint64_t result;

  result = sub_21C524A88();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_21C5B6780(uint64_t a1)
{
  unint64_t result;

  result = sub_21C524E34();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_21C5B67A4(uint64_t a1)
{
  unint64_t result;

  result = sub_21C52493C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_21C5B67C8(uint64_t a1)
{
  unint64_t result;

  result = sub_21C524DF0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_21C5B67EC(uint64_t a1)
{
  unint64_t result;

  result = sub_21C524A00();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_21C5B6810(uint64_t a1)
{
  unint64_t result;

  result = sub_21C524ACC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_21C5B6834(uint64_t a1)
{
  unint64_t result;

  result = sub_21C5249BC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_21C5B6858(uint64_t a1)
{
  unint64_t result;

  result = sub_21C524A44();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C5B687C()
{
  return sub_21C5616A0(&qword_25528A3F0, &qword_25528A3F8, MEMORY[0x24BEE2C18]);
}

uint64_t sub_21C5B68A8()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD v3[2];
  uint64_t v4;
  _OWORD v5[2];
  uint64_t v6;
  char v7;

  sub_21C561080(v0, (uint64_t)v5);
  if ((v7 & 1) != 0)
  {
    v3[0] = v5[0];
    v3[1] = v5[1];
    v4 = v6;
    sub_21C5E3C1C();
    sub_21C5E3988();
    swift_bridgeObjectRelease();
    sub_21C5E3988();
    v1 = 0x63696D616E79642ELL;
    sub_21C5610BC((uint64_t)v3);
  }
  else
  {
    *((_QWORD *)&v3[0] + 1) = 0xE900000000000028;
    sub_21C5E3DB4();
    sub_21C5E3988();
    swift_bridgeObjectRelease();
    sub_21C5E3988();
    return 0x6C61636978656C2ELL;
  }
  return v1;
}

uint64_t sub_21C5B69A8()
{
  uint64_t v0;
  _OWORD v2[2];
  uint64_t v3;
  _OWORD v4[2];
  uint64_t v5;
  char v6;

  sub_21C5E3E14();
  sub_21C561080(v0, (uint64_t)v4);
  if ((v6 & 1) != 0)
  {
    v2[0] = v4[0];
    v2[1] = v4[1];
    v3 = v5;
    sub_21C5E3E20();
    sub_21C5E3C34();
    sub_21C5610BC((uint64_t)v2);
  }
  else
  {
    sub_21C5E3E20();
    sub_21C5E3E20();
  }
  return sub_21C5E3E44();
}

uint64_t sub_21C5B6A48()
{
  uint64_t v0;
  _OWORD v2[2];
  uint64_t v3;
  _OWORD v4[2];
  uint64_t v5;
  char v6;

  sub_21C561080(v0, (uint64_t)v4);
  if ((v6 & 1) != 0)
  {
    v2[0] = v4[0];
    v2[1] = v4[1];
    v3 = v5;
    sub_21C5E3E20();
    sub_21C5E3C34();
    return sub_21C5610BC((uint64_t)v2);
  }
  else
  {
    sub_21C5E3E20();
    return sub_21C5E3E20();
  }
}

uint64_t sub_21C5B6AD4()
{
  uint64_t v0;
  _OWORD v2[2];
  uint64_t v3;
  _OWORD v4[2];
  uint64_t v5;
  char v6;

  sub_21C5E3E14();
  sub_21C561080(v0, (uint64_t)v4);
  if ((v6 & 1) != 0)
  {
    v2[0] = v4[0];
    v2[1] = v4[1];
    v3 = v5;
    sub_21C5E3E20();
    sub_21C5E3C34();
    sub_21C5610BC((uint64_t)v2);
  }
  else
  {
    sub_21C5E3E20();
    sub_21C5E3E20();
  }
  return sub_21C5E3E44();
}

void sub_21C5B6B7C()
{
  JUMPOUT(0x22077EF2CLL);
}

uint64_t sub_21C5B6B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _OWORD v6[2];
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_21C5E3E20();
  if (v3)
  {
    v5 = a2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_21C561080(v5, (uint64_t)v11);
      sub_21C561080((uint64_t)v11, (uint64_t)v8);
      if ((v10 & 1) != 0)
      {
        v6[0] = v8[0];
        v6[1] = v8[1];
        v7 = v9;
        sub_21C5E3E20();
        sub_21C5E3C34();
        sub_21C5610BC((uint64_t)v6);
      }
      else
      {
        sub_21C5E3E20();
        sub_21C5E3E20();
      }
      sub_21C52B9B0((uint64_t)v11);
      v5 += 48;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21C5B6C70()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_21C5E3E14();
  swift_bridgeObjectRetain();
  sub_21C5BA288((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_21C5E3E44();
}

uint64_t sub_21C5B6CC4(uint64_t a1)
{
  uint64_t *v1;

  return sub_21C5B6B8C(a1, *v1);
}

uint64_t sub_21C5B6CDC()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_21C5E3E14();
  swift_bridgeObjectRetain();
  sub_21C5BA288((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_21C5E3E44();
}

uint64_t sub_21C5B6D2C(uint64_t *a1, uint64_t *a2)
{
  return sub_21C5B7F6C(*a1, *a2);
}

uint64_t sub_21C5B6D38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];
  _QWORD *v17;
  uint64_t v18;

  v1 = type metadata accessor for MapContentList.Item(0);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (_QWORD *)((char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *v0;
  v6 = *(_QWORD *)(*v0 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v17 = v0;
    v18 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_21C599010(0, v6, 0);
    v8 = *(unsigned __int8 *)(v2 + 80);
    v16[1] = v5;
    v9 = v5 + ((v8 + 32) & ~v8);
    v10 = *(_QWORD *)(v2 + 72);
    v7 = v18;
    do
    {
      sub_21C59A164(v9, (uint64_t)v4);
      v11 = *v4;
      swift_bridgeObjectRetain();
      sub_21C52A88C((uint64_t)v4, type metadata accessor for MapContentList.Item);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21C599010(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v7 = v18;
      }
      v13 = *(_QWORD *)(v7 + 16);
      v12 = *(_QWORD *)(v7 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_21C599010(v12 > 1, v13 + 1, 1);
        v7 = v18;
      }
      *(_QWORD *)(v7 + 16) = v13 + 1;
      *(_QWORD *)(v7 + 8 * v13 + 32) = v11;
      v9 += v10;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    v0 = v17;
  }
  sub_21C5BA73C(v7);
  swift_bridgeObjectRelease();
  sub_21C56C3F0();
  v14 = sub_21C5E3ACC();
  result = swift_bridgeObjectRelease();
  v0[1] = v14;
  return result;
}

uint64_t sub_21C5B6EE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v2 = type metadata accessor for MapContentList.Item(0);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    return 0;
  v7 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v8 = *(_QWORD *)(v3 + 72);
  swift_bridgeObjectRetain();
  v9 = 0;
  do
  {
    sub_21C59A164(v7, (uint64_t)v5);
    v10 = *((unsigned int *)v5 + 2);
    sub_21C52A88C((uint64_t)v5, type metadata accessor for MapContentList.Item);
    if (v9 != 0xFFFFFFFFLL && v10)
    {
      if (!v9 || v10 == 0xFFFFFFFFLL)
      {
        v9 = v10;
      }
      else
      {
        v11 = (v10 | (v9 << 32)) + ~(v10 << 32);
        v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
        v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
        v9 = ((v13 + ~(v13 << 27)) >> 31) ^ ((_DWORD)v13 + ~((_DWORD)v13 << 27));
      }
    }
    v7 += v8;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_21C5B7024(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = sub_21C5B86B4(isUniquelyReferenced_nonNull_native, v23, 1, v3, &qword_2552884D8, type metadata accessor for MapContentList.Item);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = type metadata accessor for MapContentList.Item(0);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_21C5E3D90();
  __break(1u);
  return result;
}

uint64_t sub_21C5B719C(unint64_t a1)
{
  return sub_21C5B71E4(a1, &qword_25528A550, &qword_25528A560, &qword_25528A558, (uint64_t *)sub_21C55F1A4);
}

uint64_t sub_21C5B71C0(unint64_t a1)
{
  return sub_21C5B71E4(a1, &qword_255288C00, &qword_25528A570, &qword_25528A568, (uint64_t *)sub_21C55F14C);
}

uint64_t sub_21C5B71E4(unint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t *v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = sub_21C5E3D60();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_21C5E3D60();
    swift_bridgeObjectRelease();
    v14 = v13 + v11;
    if (!__OFADD__(v13, v11))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  v14 = v13 + v11;
  if (__OFADD__(v13, v11))
    goto LABEL_23;
LABEL_5:
  v12 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v5 = v12;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v13 = 1;
  }
  v23 = v11;
  v11 = (uint64_t)a2;
  a2 = (uint64_t *)a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62)
    goto LABEL_25;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14)
      v17 = v14;
    swift_bridgeObjectRetain();
    v12 = MEMORY[0x22077F1C0](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *v5 = v12;
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = (unint64_t *)a2;
    a2 = (uint64_t *)v11;
    v11 = v23;
LABEL_15:
    result = sub_21C5BA35C(v16 + 8 * *(_QWORD *)(v16 + 16) + 32, (*(_QWORD *)(v16 + 24) >> 1) - *(_QWORD *)(v16 + 16), a1, a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v17 = sub_21C5E3D60();
    swift_bridgeObjectRelease();
  }
  if (v19 < 1)
    goto LABEL_19;
  v20 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = __OFADD__(v20, v19);
  v22 = v20 + v19;
  if (!v21)
  {
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_21C5E39E8();
  }
  __break(1u);
  return result;
}

unint64_t sub_21C5B73FC(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  BOOL v7;

  v4 = *(_QWORD *)(a4 + 16);
  if (v4 < result || v4 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2)
      goto LABEL_13;
    return 0;
  }
  if (v6 <= 0 && v6 > a2)
    return 0;
LABEL_13:
  v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
    goto LABEL_16;
  if (result > v4)
LABEL_17:
    __break(1u);
  return result;
}

_QWORD *sub_21C5B746C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    *a2 = *result - 1;
  return result;
}

_QWORD *sub_21C5B7484(_QWORD *result)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    --*result;
  return result;
}

void sub_21C5B749C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_21C5B74A4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
}

uint64_t (*sub_21C5B74B4(uint64_t a1, _QWORD *a2))(_QWORD)
{
  uint64_t v2;
  uint64_t (*result)(_QWORD);

  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*a2 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    type metadata accessor for MapContentList.Item(0);
    return nullsub_1;
  }
  __break(1u);
  return result;
}

uint64_t *sub_21C5B7518@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    v5 = v2[1];
    *a2 = v3;
    a2[1] = v4;
    a2[2] = result;
    a2[3] = v5;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

void sub_21C5B7548(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  *a1 = 0;
  a1[1] = v2;
}

BOOL sub_21C5B7558()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

void sub_21C5B756C(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

_QWORD *sub_21C5B757C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 <= *(_QWORD *)(*(_QWORD *)v3 + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t sub_21C5B75A8@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  unint64_t result;
  char v7;

  result = sub_21C5B73FC(*a1, a2, *a3, *v4);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t *sub_21C5B75E0(unint64_t *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (*result <= v4 && v3 <= v4)
    return (unint64_t *)(v3 - *result);
  __break(1u);
  return result;
}

uint64_t *sub_21C5B7608(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[1];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *sub_21C5B7624(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < *result)
    __break(1u);
  return result;
}

_QWORD *sub_21C5B7640(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

_QWORD *sub_21C5B765C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *sub_21C5B7674(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

void sub_21C5B768C(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
}

uint64_t sub_21C5B769C()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

size_t sub_21C5B76A8()
{
  uint64_t *v0;
  size_t v1;

  v1 = sub_21C5B9EAC(*v0, v0[1]);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_21C5B76DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_21C5B76E4(a1, a2, a3, *v3, v3[1]);
}

uint64_t sub_21C5B76E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = (_QWORD *)result;
  if (!a2)
  {
    v8 = 0;
    goto LABEL_11;
  }
  v8 = a3;
  if (!a3)
  {
LABEL_11:
    *v7 = a4;
    v7[1] = a5;
    v7[2] = v8;
    return v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a4 + 16);
    if (v9)
    {
      v10 = a2;
      v11 = 0;
      v12 = a3 - 1;
      while (v11 < *(_QWORD *)(a4 + 16))
      {
        v13 = *(_QWORD *)(type metadata accessor for MapContentList.Item(0) - 8);
        v14 = *(_QWORD *)(v13 + 72);
        result = sub_21C59A164(a4+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ v14 * v11, v10);
        if (v12 == v11)
          goto LABEL_11;
        v10 += v14;
        if (v9 == ++v11)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    v8 = v9;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_21C5B77BC()
{
  return sub_21C5E39B8();
}

unint64_t sub_21C5B77E0()
{
  unint64_t result;

  result = qword_25528A400;
  if (!qword_25528A400)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EA1C4, &type metadata for MapContentList);
    atomic_store(result, (unint64_t *)&qword_25528A400);
  }
  return result;
}

uint64_t sub_21C5B7824()
{
  return MEMORY[0x24BEE1780];
}

uint64_t sub_21C5B7830()
{
  return sub_21C5B7984(&qword_25528A408, MEMORY[0x24BEE1BD8]);
}

uint64_t sub_21C5B7854()
{
  return sub_21C5616A0(&qword_25528A420, &qword_25528A428, MEMORY[0x24BEE4238]);
}

unint64_t sub_21C5B7884()
{
  unint64_t result;

  result = qword_25528A430;
  if (!qword_25528A430)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EA22C, &type metadata for MapContentList);
    atomic_store(result, (unint64_t *)&qword_25528A430);
  }
  return result;
}

uint64_t sub_21C5B78C8()
{
  return sub_21C5B7984(&qword_25528A438, MEMORY[0x24BEE1BA8]);
}

uint64_t sub_21C5B78EC()
{
  return sub_21C5B7A1C(&qword_25528A440, (uint64_t (*)(void))sub_21C5B7918, MEMORY[0x24BEE4218]);
}

unint64_t sub_21C5B7918()
{
  unint64_t result;

  result = qword_25528A448;
  if (!qword_25528A448)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EA30C, &type metadata for MapContentList);
    atomic_store(result, (unint64_t *)&qword_25528A448);
  }
  return result;
}

uint64_t sub_21C5B7960()
{
  return sub_21C5B7984((unint64_t *)&qword_25528A450, MEMORY[0x24BEE1BD0]);
}

uint64_t sub_21C5B7984(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_25528A410);
    v6 = sub_21C5297A0();
    v7[0] = MEMORY[0x24BEE17A8];
    v7[1] = v6;
    result = MEMORY[0x22077F9A0](a2, v5, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21C5B79F0()
{
  return sub_21C5B7A1C(&qword_25528A458, (uint64_t (*)(void))sub_21C5B7A84, MEMORY[0x24BEE4230]);
}

uint64_t sub_21C5B7A1C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528A428);
    v8 = a2();
    result = MEMORY[0x22077F9A0](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_21C5B7A84()
{
  unint64_t result;

  result = qword_25528A460;
  if (!qword_25528A460)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EA36C, &type metadata for MapContentList);
    atomic_store(result, (unint64_t *)&qword_25528A460);
  }
  return result;
}

unint64_t sub_21C5B7ACC()
{
  unint64_t result;

  result = qword_25528A468;
  if (!qword_25528A468)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EA3FC, &type metadata for MapContentList.ID);
    atomic_store(result, (unint64_t *)&qword_25528A468);
  }
  return result;
}

uint64_t sub_21C5B7B10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_21C5BA7C0(MEMORY[0x24BEE4AF8]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21C5B7B48(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v2;
  uint64_t v4;

  a2(&v4);
  v2 = swift_bridgeObjectRetain();
  sub_21C5B7024(v2);
  sub_21C5B6D38();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C5B7B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t result;
  char v20;
  uint64_t v21;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int32x2_t v30;
  float64x2_t *v31;
  float64x2_t *v32;
  uint64_t i;
  int32x2_t v34;
  uint64_t v35;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = 0;
  v35 = a1 + 32;
  v4 = a2 + 32;
  while (1)
  {
    v5 = (uint64_t *)(v35 + 24 * v3);
    v7 = *v5;
    v6 = v5[1];
    v8 = v5[2];
    v9 = (uint64_t *)(v4 + 24 * v3);
    v11 = *v9;
    v10 = v9[1];
    v12 = v9[2];
    if (v6 < 0)
    {
      if ((v10 & 0x8000000000000000) == 0)
        return 0;
      sub_21C5BB764();
      sub_21C5611D8((void *)v11, v10);
      sub_21C5611D8((void *)v7, v6);
      v20 = sub_21C5E3B98();
      goto LABEL_34;
    }
    if (v10 < 0)
      return 0;
    if ((v6 & 1) != 0)
    {
      if ((v10 & 1) == 0)
        return 0;
      v21 = *(_QWORD *)(v7 + 16);
      if (v21 != *(_QWORD *)(v11 + 16))
        return 0;
      if (v21)
      {
        if (*(double *)(v7 + 32) != *(double *)(v11 + 32) || *(double *)(v7 + 40) != *(double *)(v11 + 40))
          goto LABEL_54;
        if (v21 != 1)
        {
          v31 = (float64x2_t *)(v7 + 48);
          v32 = (float64x2_t *)(v11 + 48);
          for (i = v21 - 2; ; --i)
          {
            v34 = vmovn_s64(vceqq_f64(*v31, *v32));
            if ((v34.i32[0] & v34.i32[1] & 1) == 0)
              break;
            if (!i)
              goto LABEL_31;
            ++v32;
            ++v31;
          }
LABEL_54:
          sub_21C5611D8((void *)v11, v10);
          sub_21C5611D8((void *)v7, v6);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_56:
          swift_bridgeObjectRelease();
LABEL_57:
          swift_bridgeObjectRelease();
          sub_21C561218((void *)v11, v10);
          sub_21C561218((void *)v7, v6);
          return 0;
        }
      }
LABEL_31:
      sub_21C5611D8((void *)v11, v10);
      sub_21C5611D8((void *)v7, v6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v8)
        goto LABEL_18;
LABEL_32:
      if (!v12)
        goto LABEL_57;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v20 = sub_21C5B7B9C(v8, v12);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
LABEL_34:
      sub_21C561218((void *)v11, v10);
      sub_21C561218((void *)v7, v6);
      if ((v20 & 1) == 0)
        return 0;
      goto LABEL_35;
    }
    if ((v10 & 1) != 0)
      return 0;
    v13 = *(_QWORD *)(v7 + 16);
    if (v13 != *(_QWORD *)(v11 + 16))
      return 0;
    if (!v13)
      goto LABEL_31;
    v15 = *(double *)(v7 + 32);
    v14 = *(double *)(v7 + 40);
    v16 = *(double *)(v11 + 32);
    v17 = *(double *)(v11 + 40);
    sub_21C5611D8((void *)v11, v10);
    sub_21C5611D8((void *)v7, v6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v15 != v16 || v14 != v17)
      goto LABEL_55;
    if (v13 != 1)
      break;
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v8)
      goto LABEL_32;
LABEL_18:
    if (v12)
      goto LABEL_57;
    sub_21C561218((void *)v11, v10);
    sub_21C561218((void *)v7, v6);
LABEL_35:
    ++v3;
    result = 1;
    if (v3 == v2)
      return result;
  }
  v23 = *(_QWORD *)(v7 + 16);
  v24 = v23 >= 2;
  v25 = v23 - 2;
  if (v24)
  {
    v26 = *(_QWORD *)(v11 + 16);
    if (v26 <= 1)
      v27 = 1;
    else
      v27 = *(_QWORD *)(v11 + 16);
    if (v26 >= 2)
    {
      v28 = 0;
      v29 = v27 - 1;
      while (1)
      {
        v30 = vmovn_s64(vceqq_f64(*(float64x2_t *)(v7 + 48 + 16 * v28), *(float64x2_t *)(v11 + 48 + 16 * v28)));
        if ((v30.i32[0] & v30.i32[1] & 1) == 0)
          break;
        if (v13 - 2 == v28)
          goto LABEL_17;
        if (v25 == v28)
          goto LABEL_61;
        if (v29 == ++v28)
          goto LABEL_60;
      }
LABEL_55:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_56;
    }
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_21C5B7F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[2];
  uint64_t v10;
  _QWORD v11[6];
  _BYTE v12[48];
  _OWORD v13[2];
  uint64_t v14;
  char v15;
  _BYTE v16[48];
  _BYTE v17[48];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = a1 + 32;
  for (i = a2 + 32; ; i += 48)
  {
    sub_21C561080(v3, (uint64_t)v17);
    sub_21C561080(i, (uint64_t)v16);
    sub_21C561080((uint64_t)v17, (uint64_t)v12);
    sub_21C561080((uint64_t)v16, (uint64_t)v13);
    if ((v12[40] & 1) != 0)
      break;
    sub_21C561080((uint64_t)v12, (uint64_t)v11);
    if ((v15 & 1) != 0)
      goto LABEL_15;
    v6 = v11[0];
    v7 = *(_QWORD *)&v13[0];
    sub_21C52B9B0((uint64_t)v12);
    if (v6 != v7)
      goto LABEL_16;
LABEL_5:
    sub_21C52B9B0((uint64_t)v16);
    sub_21C52B9B0((uint64_t)v17);
    v3 += 48;
    if (!--v2)
      return 1;
  }
  sub_21C561080((uint64_t)v12, (uint64_t)v11);
  if ((v15 & 1) != 0)
  {
    v9[0] = v13[0];
    v9[1] = v13[1];
    v10 = v14;
    v5 = MEMORY[0x22077F148](v11, v9);
    sub_21C5610BC((uint64_t)v9);
    sub_21C5610BC((uint64_t)v11);
    sub_21C52B9B0((uint64_t)v12);
    if ((v5 & 1) == 0)
      goto LABEL_16;
    goto LABEL_5;
  }
  sub_21C5610BC((uint64_t)v11);
LABEL_15:
  sub_21C524980((uint64_t)v12, (uint64_t *)&unk_25528A480);
LABEL_16:
  sub_21C52B9B0((uint64_t)v16);
  sub_21C52B9B0((uint64_t)v17);
  return 0;
}

_QWORD *sub_21C5B80E4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25528A578);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_21C5BA56C(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_21C5B8208(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21C5B86B4(a1, a2, a3, a4, &qword_25528A490, type metadata accessor for _MapContentOutputs);
}

_QWORD *sub_21C5B821C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_255287F08);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_21C5BA96C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_21C5B833C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25528A580);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_21C5BAD70(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_21C5B8460(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21C5B86B4(a1, a2, a3, a4, &qword_25528A540, type metadata accessor for CustomAnnotationViewModel);
}

_QWORD *sub_21C5B8474(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25528A4E0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_21C5BB178(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_21C5B8580(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25528A498);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_21C5BAE64(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_21C5B868C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21C5B86B4(a1, a2, a3, a4, &qword_25528A528, type metadata accessor for MarkerAnnotationViewModel);
}

uint64_t sub_21C5B86A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21C5B86B4(a1, a2, a3, a4, &qword_25528A510, type metadata accessor for UserAnnotationViewModel);
}

uint64_t sub_21C5B86B4(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_21C5E3D3C();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_21C5BAC58(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *sub_21C5B88C0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25528A4F8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4])
          memmove(v12, a4 + 4, 96 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_21C5BB084(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_21C5B89E4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25528A4D8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 120);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[15 * v8 + 4])
          memmove(v12, a4 + 4, 120 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_21C5BB368(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_21C5B8B08(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25528A4B8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 136);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[17 * v8 + 4])
          memmove(v12, a4 + 4, 136 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_21C5BB564(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_21C5B8C28(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2552898E8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_21C5BB7A0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_21C5B8D34(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25528A4A8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[18 * v8 + 4])
          memmove(v12, a4 + 4, 144 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_21C5BB658(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_21C5B8E5C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25528A4C8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 95;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 7);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 7);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_21C5BB45C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_21C5B8F68(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25528A4E8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 104);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[13 * v8 + 4])
          memmove(v12, a4 + 4, 104 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_21C5BB260(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_21C5B9090(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21C5B90B8(a1, a2, a3, a4, (uint64_t *)&unk_25528A500, &qword_255288C68);
}

uint64_t sub_21C5B90A4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21C5B90B8(a1, a2, a3, a4, &qword_25528A518, &qword_25528A520);
}

uint64_t sub_21C5B90B8(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_21C5E3D3C();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_21C5BAF6C(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_21C5B92C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21C5B90B8(a1, a2, a3, a4, (uint64_t *)&unk_25528A530, &qword_255288CF8);
}

uint64_t sub_21C5B92D8(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  _QWORD v17[9];

  v5 = *v2;
  sub_21C5E3E14();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_21C5BA288((uint64_t)v17, a2);
  swift_bridgeObjectRelease();
  v6 = sub_21C5E3E44();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v9 = swift_bridgeObjectRetain();
    v10 = sub_21C5B7F6C(v9, a2);
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
      swift_bridgeObjectRetain();
      return 0;
    }
    v11 = ~v7;
    while (1)
    {
      v8 = (v8 + 1) & v11;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        break;
      v12 = swift_bridgeObjectRetain();
      v13 = sub_21C5B7F6C(v12, a2);
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v17[0] = *v2;
  *v2 = 0x8000000000000000;
  v16 = swift_bridgeObjectRetain();
  sub_21C5B9D14(v16, v8, isUniquelyReferenced_nonNull_native);
  *v2 = v17[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

void *sub_21C5B9478()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528A478);
  v2 = *v0;
  v3 = sub_21C5E3C4C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = (void *)swift_bridgeObjectRetain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_21C5B9620()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  char v33;
  _BYTE v34[48];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528A478);
  v3 = sub_21C5E3C58();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_43:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v27 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v28 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v14 >= v28)
      goto LABEL_41;
    v15 = *(_QWORD *)(v27 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v28)
        goto LABEL_41;
      v15 = *(_QWORD *)(v27 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v28)
          goto LABEL_41;
        v15 = *(_QWORD *)(v27 + 8 * v10);
        if (!v15)
          break;
      }
    }
LABEL_23:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v13);
    sub_21C5E3E14();
    sub_21C5E3E20();
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = v17 + 32;
      swift_bridgeObjectRetain_n();
      do
      {
        sub_21C561080(v19, (uint64_t)v34);
        sub_21C561080((uint64_t)v34, (uint64_t)v31);
        if ((v33 & 1) != 0)
        {
          v29[0] = v31[0];
          v29[1] = v31[1];
          v30 = v32;
          sub_21C5E3E20();
          sub_21C5E3C34();
          sub_21C5610BC((uint64_t)v29);
        }
        else
        {
          sub_21C5E3E20();
          sub_21C5E3E20();
        }
        sub_21C52B9B0((uint64_t)v34);
        v19 += 48;
        --v18;
      }
      while (v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    result = sub_21C5E3E44();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v8 + 8 * (v21 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v8 + 8 * v22);
      }
      while (v26 == -1);
      v11 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v11) = v17;
    ++*(_QWORD *)(v4 + 16);
  }
  v16 = v14 + 3;
  if (v16 >= v28)
  {
LABEL_41:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_43;
  }
  v15 = *(_QWORD *)(v27 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v28)
      goto LABEL_41;
    v15 = *(_QWORD *)(v27 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_21C5B9984()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _QWORD *v29;
  _OWORD v30[2];
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  char v34;
  _BYTE v35[48];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528A478);
  v3 = sub_21C5E3C58();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v29 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v28 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v7)
      {
        v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v13 = v12 | (v10 << 6);
      }
      else
      {
        v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        if (v14 >= v28)
          goto LABEL_40;
        v15 = v29[v14];
        ++v10;
        if (!v15)
        {
          v10 = v14 + 1;
          if (v14 + 1 >= v28)
            goto LABEL_40;
          v15 = v29[v10];
          if (!v15)
          {
            v10 = v14 + 2;
            if (v14 + 2 >= v28)
              goto LABEL_40;
            v15 = v29[v10];
            if (!v15)
            {
              v16 = v14 + 3;
              if (v16 >= v28)
              {
LABEL_40:
                swift_release();
                v1 = v0;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero(v29, ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v29 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v15 = v29[v16];
              if (!v15)
              {
                while (1)
                {
                  v10 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_46;
                  if (v10 >= v28)
                    goto LABEL_40;
                  v15 = v29[v10];
                  ++v16;
                  if (v15)
                    goto LABEL_23;
                }
              }
              v10 = v16;
            }
          }
        }
LABEL_23:
        v7 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v13);
      sub_21C5E3E14();
      sub_21C5E3E20();
      v18 = *(_QWORD *)(v17 + 16);
      if (v18)
      {
        v19 = v17 + 32;
        swift_bridgeObjectRetain();
        do
        {
          sub_21C561080(v19, (uint64_t)v35);
          sub_21C561080((uint64_t)v35, (uint64_t)v32);
          if ((v34 & 1) != 0)
          {
            v30[0] = v32[0];
            v30[1] = v32[1];
            v31 = v33;
            sub_21C5E3E20();
            sub_21C5E3C34();
            sub_21C5610BC((uint64_t)v30);
          }
          else
          {
            sub_21C5E3E20();
            sub_21C5E3E20();
          }
          sub_21C52B9B0((uint64_t)v35);
          v19 += 48;
          --v18;
        }
        while (v18);
        swift_bridgeObjectRelease();
      }
      result = sub_21C5E3E44();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v8 + 8 * (v21 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v8 + 8 * v22);
        }
        while (v26 == -1);
        v11 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v11) = v17;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_21C5B9D14(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _BYTE v19[72];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_21C5B9984();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_21C5B9478();
      goto LABEL_14;
    }
    sub_21C5B9620();
  }
  v8 = *v3;
  sub_21C5E3E14();
  swift_bridgeObjectRetain();
  sub_21C5BA288((uint64_t)v19, v5);
  swift_bridgeObjectRelease();
  result = sub_21C5E3E44();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = swift_bridgeObjectRetain();
    v11 = sub_21C5B7F6C(v10, v5);
    result = swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
    {
LABEL_13:
      result = sub_21C5E3DE4();
      __break(1u);
    }
    else
    {
      v12 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v13 = swift_bridgeObjectRetain();
        v14 = sub_21C5B7F6C(v13, v5);
        result = swift_bridgeObjectRelease();
        if ((v14 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v15 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * a2) = v5;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    *(_QWORD *)(v15 + 16) = v18;
  return result;
}

size_t sub_21C5B9EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  size_t result;
  uint64_t v11;
  _QWORD v12[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2552884D8);
  v5 = *(_QWORD *)(type metadata accessor for MapContentList.Item(0) - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v8);
  if (v6)
  {
    if (result - v7 != 0x8000000000000000 || v6 != -1)
    {
      v8[2] = v2;
      v8[3] = 2 * ((uint64_t)(result - v7) / v6);
      v11 = sub_21C5B76E4((uint64_t)v12, (uint64_t)v8 + v7, v2, a1, a2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v11 == v2)
        return (size_t)v8;
      __break(1u);
      return MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_21C5B9FA8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528A548);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  v6 = sub_21C5BA090(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_21C52A884();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

_QWORD *sub_21C5BA090(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 48) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_21C5BA288(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _OWORD v6[2];
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_21C5E3E20();
  if (v3)
  {
    v5 = a2 + 32;
    do
    {
      sub_21C561080(v5, (uint64_t)v11);
      sub_21C561080((uint64_t)v11, (uint64_t)v8);
      if ((v10 & 1) != 0)
      {
        v6[0] = v8[0];
        v6[1] = v8[1];
        v7 = v9;
        sub_21C5E3E20();
        sub_21C5E3C34();
        sub_21C5610BC((uint64_t)v6);
      }
      else
      {
        sub_21C5E3E20();
        sub_21C5E3E20();
      }
      result = sub_21C52B9B0((uint64_t)v11);
      v5 += 48;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_21C5BA35C(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD);
  uint64_t *v23;
  uint64_t v24;
  uint64_t result;
  _BYTE v26[32];

  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = sub_21C5E3D60();
    swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = sub_21C5E3D60();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        v19 = sub_21C5616A0(a5, a6, MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          v22 = (void (*)(_BYTE *, _QWORD))a7(v26, i, a3, v21, v19);
          v24 = *v23;
          swift_unknownObjectRetain();
          v22(v26, 0);
          *(_QWORD *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(a4);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_21C5E3D90();
  __break(1u);
  return result;
}

char *sub_21C5BA56C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 24 * a1 + 32);
    v6 = 24 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_21C5E3D90();
  __break(1u);
  return result;
}

uint64_t sub_21C5BA658(uint64_t a1, uint64_t a2)
{
  char v3;
  _OWORD v5[2];
  uint64_t v6;
  _QWORD v7[6];
  _BYTE v8[48];
  _OWORD v9[2];
  uint64_t v10;
  char v11;

  sub_21C561080(a1, (uint64_t)v8);
  sub_21C561080(a2, (uint64_t)v9);
  if ((v8[40] & 1) == 0)
  {
    sub_21C561080((uint64_t)v8, (uint64_t)v7);
    if ((v11 & 1) == 0)
    {
      v3 = v7[0] == *(_QWORD *)&v9[0];
      goto LABEL_6;
    }
LABEL_8:
    sub_21C524980((uint64_t)v8, (uint64_t *)&unk_25528A480);
    v3 = 0;
    return v3 & 1;
  }
  sub_21C561080((uint64_t)v8, (uint64_t)v7);
  if (v11 != 1)
  {
    sub_21C5610BC((uint64_t)v7);
    goto LABEL_8;
  }
  v5[0] = v9[0];
  v5[1] = v9[1];
  v6 = v10;
  v3 = MEMORY[0x22077F148](v7, v5);
  sub_21C5610BC((uint64_t)v5);
  sub_21C5610BC((uint64_t)v7);
LABEL_6:
  sub_21C52B9B0((uint64_t)v8);
  return v3 & 1;
}

uint64_t sub_21C5BA73C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  sub_21C56C3F0();
  result = sub_21C5E3AA8();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      swift_bridgeObjectRetain();
      sub_21C5B92D8(&v6, v5);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_21C5BA7C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v2 = type metadata accessor for MapContentList.Item(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v15 = MEMORY[0x24BEE4AF8];
    sub_21C599010(0, v6, 0);
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    v7 = v15;
    do
    {
      sub_21C59A164(v8, (uint64_t)v5);
      v10 = *v5;
      swift_bridgeObjectRetain();
      sub_21C52A88C((uint64_t)v5, type metadata accessor for MapContentList.Item);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21C599010(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v7 = v15;
      }
      v12 = *(_QWORD *)(v7 + 16);
      v11 = *(_QWORD *)(v7 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_21C599010(v11 > 1, v12 + 1, 1);
        v7 = v15;
      }
      *(_QWORD *)(v7 + 16) = v12 + 1;
      *(_QWORD *)(v7 + 8 * v12 + 32) = v10;
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  sub_21C5BA73C(v7);
  swift_bridgeObjectRelease();
  sub_21C56C3F0();
  sub_21C5E3ACC();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for MapContentList.Item(uint64_t a1)
{
  return sub_21C5254A0(a1, (uint64_t *)&unk_25528A598);
}

uint64_t sub_21C5BA96C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21C5E3D90();
  __break(1u);
  return result;
}

uint64_t sub_21C5BAA60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v15[3];

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25528A5B0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_21C5E34E4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C5BE98C(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_21C524980((uint64_t)v6, (uint64_t *)&unk_25528A5B0);
LABEL_10:
    __swift_instantiateConcreteTypeFromMangledName(qword_255287F08);
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_21C5E5570;
    sub_21C561080(a2, v11 + 32);
    return v11;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  sub_21C52B9E4();
  sub_21C5E34F0();
  v11 = *(_QWORD *)&v15[0];
  if (!*(_QWORD *)&v15[0])
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_10;
  }
  sub_21C561080(a2, (uint64_t)v15);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v11 = (uint64_t)sub_21C5B821C(0, *(_QWORD *)(v11 + 16) + 1, 1, (_QWORD *)v11);
  v13 = *(_QWORD *)(v11 + 16);
  v12 = *(_QWORD *)(v11 + 24);
  if (v13 >= v12 >> 1)
    v11 = (uint64_t)sub_21C5B821C((_QWORD *)(v12 > 1), v13 + 1, 1, (_QWORD *)v11);
  *(_QWORD *)(v11 + 16) = v13 + 1;
  sub_21C5BE9D4(v15, (_OWORD *)(v11 + 48 * v13 + 32));
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v11;
}

uint64_t sub_21C5BAC58(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_21C5E3D90();
  __break(1u);
  return result;
}

uint64_t sub_21C5BAD70(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21C5E3D90();
  __break(1u);
  return result;
}

uint64_t sub_21C5BAE64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25528A4A0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21C5E3D90();
  __break(1u);
  return result;
}

uint64_t sub_21C5BAF6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_21C5E3D90();
  __break(1u);
  return result;
}

uint64_t sub_21C5BB084(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 96 * a1 + 32;
    v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21C5E3D90();
  __break(1u);
  return result;
}

char *sub_21C5BB178(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_21C5E3D90();
  __break(1u);
  return result;
}

uint64_t sub_21C5BB260(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 104 * a1 + 32;
    v6 = a3 + 104 * v4;
    if (v5 >= v6 || v5 + 104 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25528A4F0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21C5E3D90();
  __break(1u);
  return result;
}

uint64_t sub_21C5BB368(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 120 * a1 + 32;
    v6 = a3 + 120 * v4;
    if (v5 >= v6 || v5 + 120 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21C5E3D90();
  __break(1u);
  return result;
}

uint64_t sub_21C5BB45C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 7) + 32;
    v6 = a3 + (v4 << 7);
    if (v5 >= v6 || v5 + (v4 << 7) <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25528A4D0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21C5E3D90();
  __break(1u);
  return result;
}

uint64_t sub_21C5BB564(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 136 * a1 + 32;
    v6 = a3 + 136 * v4;
    if (v5 >= v6 || v5 + 136 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21C5E3D90();
  __break(1u);
  return result;
}

uint64_t sub_21C5BB658(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 144 * a1 + 32;
    v6 = a3 + 144 * v4;
    if (v5 >= v6 || v5 + 144 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25528A4B0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21C5E3D90();
  __break(1u);
  return result;
}

unint64_t sub_21C5BB764()
{
  unint64_t result;

  result = qword_255289570;
  if (!qword_255289570)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_255289570);
  }
  return result;
}

char *sub_21C5BB7A0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_21C5E3D90();
  __break(1u);
  return result;
}

ValueMetadata *_s10ChildIDKeyVMa()
{
  return &_s10ChildIDKeyVN;
}

uint64_t sub_21C5BB898(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_21C5BB8F4 + 4 * byte_21C5E9F80[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t sub_21C5BBD14(uint64_t a1)
{
  uint64_t result;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v3 = (int *)type metadata accessor for ResolvedAnnotation();
      v4 = a1 + v3[6];
      v5 = sub_21C5E3340();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
      swift_release();
      swift_release();

      v6 = v3[14];
      goto LABEL_7;
    case 1:
      v7 = (int *)type metadata accessor for ResolvedMarker();
      v8 = a1 + v7[8];
      v9 = sub_21C5E3340();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);

      swift_release();
      v6 = v7[12];
      goto LABEL_7;
    case 2:
      if (*(_QWORD *)(a1 + 16))
        swift_release();
      swift_release();
      v6 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
LABEL_7:
      v10 = a1 + v6;
      v11 = sub_21C5E34E4();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
      break;
    case 3:
      sub_21C56148C(*(void **)a1, *(_WORD *)(a1 + 8));
      swift_release();
      swift_bridgeObjectRelease();
      result = sub_21C531AC8(*(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
      break;
    case 4:
      sub_21C561218(*(void **)a1, *(_QWORD *)(a1 + 8));
      swift_release();
      swift_bridgeObjectRelease();
      sub_21C531AC8(*(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
      result = sub_21C531AC8(*(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
      break;
    case 5:
      swift_release();
      swift_bridgeObjectRelease();
      sub_21C531AC8(*(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
      result = sub_21C531AC8(*(_QWORD *)(a1 + 104), *(_BYTE *)(a1 + 112));
      break;
    default:
      return result;
  }
  return result;
}

void sub_21C5BBEEC()
{
  char *v0;

  v0 = (char *)sub_21C5BBF3C + 4 * byte_21C5E9F8C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_OWORD *sub_21C5BBF3C()
{
  _OWORD *v0;
  _OWORD *v1;
  __int128 v2;
  int *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  id v18;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  v3 = (int *)type metadata accessor for ResolvedAnnotation();
  v4 = v3[6];
  v5 = (char *)v0 + v4;
  v6 = (char *)v1 + v4;
  v7 = sub_21C5E3340();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  *(_QWORD *)((char *)v0 + v3[7]) = *(_QWORD *)((char *)v1 + v3[7]);
  *(_QWORD *)((char *)v0 + v3[8]) = *(_QWORD *)((char *)v1 + v3[8]);
  *((_BYTE *)v0 + v3[9]) = *((_BYTE *)v1 + v3[9]);
  *((_BYTE *)v0 + v3[10]) = *((_BYTE *)v1 + v3[10]);
  v8 = v3[11];
  v9 = (char *)v0 + v8;
  v10 = (char *)v1 + v8;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  v9[16] = v10[16];
  v11 = v3[12];
  v12 = *(void **)((char *)v1 + v11);
  *(_QWORD *)((char *)v0 + v11) = v12;
  *((_BYTE *)v0 + v3[13]) = *((_BYTE *)v1 + v3[13]);
  v13 = v3[14];
  v14 = (char *)v0 + v13;
  v15 = (char *)v1 + v13;
  v16 = sub_21C5E34E4();
  v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  swift_retain();
  swift_retain();
  v18 = v12;
  v17(v14, v15, v16);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t sub_21C5BC33C(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_21C52A88C(result, type metadata accessor for MapContentList.Item.Content);
    v2 = (char *)&loc_21C5BC3A4 + 4 * byte_21C5E9F92[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t type metadata accessor for MapContentList.Item.Content(uint64_t a1)
{
  return sub_21C5254A0(a1, (uint64_t *)&unk_25528A588);
}

char *sub_21C5BC81C(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v20 = *((_QWORD *)a2 + 2);
      if (v20)
      {
        v21 = *((_QWORD *)a2 + 3);
        *((_QWORD *)a1 + 2) = v20;
        *((_QWORD *)a1 + 3) = v21;
      }
      else
      {
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      }
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      a1[40] = a2[40];
      v31 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
      v32 = &a1[v31];
      v33 = &a2[v31];
      v34 = sub_21C5E34E4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
      goto LABEL_11;
    case 1:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
      v22 = (int *)type metadata accessor for ResolvedMarker();
      v23 = v22[8];
      v24 = &a1[v23];
      v25 = &a2[v23];
      v26 = sub_21C5E3340();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
      *(_QWORD *)&a1[v22[9]] = *(_QWORD *)&a2[v22[9]];
      a1[v22[10]] = a2[v22[10]];
      *(_QWORD *)&a1[v22[11]] = *(_QWORD *)&a2[v22[11]];
      v27 = v22[12];
      v28 = &a1[v27];
      v29 = &a2[v27];
      v30 = sub_21C5E34E4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
      goto LABEL_11;
    case 0:
      v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v7;
      v8 = (int *)type metadata accessor for ResolvedAnnotation();
      v9 = v8[6];
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = sub_21C5E3340();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      *(_QWORD *)&a1[v8[7]] = *(_QWORD *)&a2[v8[7]];
      *(_QWORD *)&a1[v8[8]] = *(_QWORD *)&a2[v8[8]];
      a1[v8[9]] = a2[v8[9]];
      a1[v8[10]] = a2[v8[10]];
      v13 = v8[11];
      v14 = &a1[v13];
      v15 = &a2[v13];
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v14[16] = v15[16];
      *(_QWORD *)&a1[v8[12]] = *(_QWORD *)&a2[v8[12]];
      a1[v8[13]] = a2[v8[13]];
      v16 = v8[14];
      v17 = &a1[v16];
      v18 = &a2[v16];
      v19 = sub_21C5E34E4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *sub_21C5BCA9C(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;

  if (a1 != a2)
  {
    sub_21C52A88C((uint64_t)a1, type metadata accessor for MapContentList.Item.Content);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v20 = *((_QWORD *)a2 + 2);
        if (v20)
        {
          v21 = *((_QWORD *)a2 + 3);
          *((_QWORD *)a1 + 2) = v20;
          *((_QWORD *)a1 + 3) = v21;
        }
        else
        {
          *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        }
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        a1[40] = a2[40];
        v31 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
        v32 = &a1[v31];
        v33 = &a2[v31];
        v34 = sub_21C5E34E4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
        goto LABEL_12;
      case 1:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[16] = a2[16];
        *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
        v22 = (int *)type metadata accessor for ResolvedMarker();
        v23 = v22[8];
        v24 = &a1[v23];
        v25 = &a2[v23];
        v26 = sub_21C5E3340();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
        *(_QWORD *)&a1[v22[9]] = *(_QWORD *)&a2[v22[9]];
        a1[v22[10]] = a2[v22[10]];
        *(_QWORD *)&a1[v22[11]] = *(_QWORD *)&a2[v22[11]];
        v27 = v22[12];
        v28 = &a1[v27];
        v29 = &a2[v27];
        v30 = sub_21C5E34E4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
        goto LABEL_12;
      case 0:
        v7 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v7;
        v8 = (int *)type metadata accessor for ResolvedAnnotation();
        v9 = v8[6];
        v10 = &a1[v9];
        v11 = &a2[v9];
        v12 = sub_21C5E3340();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
        *(_QWORD *)&a1[v8[7]] = *(_QWORD *)&a2[v8[7]];
        *(_QWORD *)&a1[v8[8]] = *(_QWORD *)&a2[v8[8]];
        a1[v8[9]] = a2[v8[9]];
        a1[v8[10]] = a2[v8[10]];
        v13 = v8[11];
        v14 = &a1[v13];
        v15 = &a2[v13];
        *(_OWORD *)v14 = *(_OWORD *)v15;
        v14[16] = v15[16];
        *(_QWORD *)&a1[v8[12]] = *(_QWORD *)&a2[v8[12]];
        a1[v8[13]] = a2[v8[13]];
        v16 = v8[14];
        v17 = &a1[v16];
        v18 = &a2[v16];
        v19 = sub_21C5E34E4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
LABEL_12:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_21C5BCD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_21C5BCD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_21C5BCD50()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_21C5BCD60()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for ResolvedAnnotation();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ResolvedMarker();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for ResolvedUserAnnotation();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t destroy for MapContentList.ID.Component(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 == 1)
    return __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t initializeWithCopy for MapContentList.ID.Component(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  char v5;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    v5 = 1;
  }
  else
  {
    v5 = 0;
    *(_QWORD *)a1 = *(_QWORD *)a2;
  }
  *(_BYTE *)(a1 + 40) = v5;
  return a1;
}

uint64_t assignWithCopy for MapContentList.ID.Component(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  char v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      __swift_destroy_boxed_opaque_existential_0(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      v7 = 1;
    }
    else
    {
      v7 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    *(_BYTE *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t assignWithTake for MapContentList.ID.Component(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  char v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      __swift_destroy_boxed_opaque_existential_0(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v7 = 1;
    }
    else
    {
      v7 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    *(_BYTE *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MapContentList.ID.Component(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MapContentList.ID.Component(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_21C5BD070(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_21C5BD08C(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MapContentList.ID.Component()
{
  return &type metadata for MapContentList.ID.Component;
}

ValueMetadata *type metadata accessor for MapContentList.ID()
{
  return &type metadata for MapContentList.ID;
}

ValueMetadata *type metadata accessor for MapContentList.UpdateToken()
{
  return &type metadata for MapContentList.UpdateToken;
}

uint64_t sub_21C5BD0E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) == 0)
  {
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    type metadata accessor for MapContentList.Item.Content(0);
    swift_bridgeObjectRetain();
    v5 = (char *)&loc_21C5BD178 + 4 * byte_21C5E9F98[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = v4 + ((v3 + 16) & ~(unint64_t)v3);
  swift_retain();
  return v6;
}

uint64_t sub_21C5BD5A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  type metadata accessor for MapContentList.Item.Content(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v5 = (int *)type metadata accessor for ResolvedAnnotation();
      v6 = v4 + v5[6];
      v7 = sub_21C5E3340();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      swift_release();
      swift_release();

      v8 = v5[14];
      goto LABEL_7;
    case 1u:
      v9 = (int *)type metadata accessor for ResolvedMarker();
      v10 = v4 + v9[8];
      v11 = sub_21C5E3340();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);

      swift_release();
      v8 = v9[12];
      goto LABEL_7;
    case 2u:
      if (*(_QWORD *)(v4 + 16))
        swift_release();
      swift_release();
      v8 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
LABEL_7:
      v12 = v4 + v8;
      v13 = sub_21C5E34E4();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
      break;
    case 3u:
      sub_21C56148C(*(void **)v4, *(_WORD *)(v4 + 8));
      swift_release();
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(v4 + 64);
      v15 = *(_BYTE *)(v4 + 72);
      goto LABEL_11;
    case 4u:
      sub_21C561218(*(void **)v4, *(_QWORD *)(v4 + 8));
      swift_release();
      swift_bridgeObjectRelease();
      sub_21C531AC8(*(_QWORD *)(v4 + 72), *(_BYTE *)(v4 + 80));
      v14 = *(_QWORD *)(v4 + 88);
      v15 = *(_BYTE *)(v4 + 96);
      goto LABEL_11;
    case 5u:
      swift_release();
      swift_bridgeObjectRelease();
      sub_21C531AC8(*(_QWORD *)(v4 + 88), *(_BYTE *)(v4 + 96));
      v14 = *(_QWORD *)(v4 + 104);
      v15 = *(_BYTE *)(v4 + 112);
LABEL_11:
      sub_21C531AC8(v14, v15);
      break;
    default:
      break;
  }
  v16 = a1 + *(int *)(a2 + 28);
  v17 = sub_21C5E34E4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
}

void sub_21C5BD7B4(uint64_t a1, uint64_t a2)
{
  char *v2;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  type metadata accessor for MapContentList.Item.Content(0);
  swift_bridgeObjectRetain();
  v2 = (char *)sub_21C5BD83C + 4 * byte_21C5E9FA4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21C5BD83C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  _OWORD *v4;
  __int128 v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = v4[1];
  *v3 = *v4;
  v3[1] = v5;
  v6 = (int *)type metadata accessor for ResolvedAnnotation();
  v7 = v6[6];
  v8 = (char *)v3 + v7;
  v9 = (char *)v4 + v7;
  v10 = sub_21C5E3340();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  *(_QWORD *)((char *)v3 + v6[7]) = *(_QWORD *)((char *)v4 + v6[7]);
  *(_QWORD *)((char *)v3 + v6[8]) = *(_QWORD *)((char *)v4 + v6[8]);
  *((_BYTE *)v3 + v6[9]) = *((_BYTE *)v4 + v6[9]);
  *((_BYTE *)v3 + v6[10]) = *((_BYTE *)v4 + v6[10]);
  v11 = v6[11];
  v12 = (char *)v3 + v11;
  v13 = (char *)v4 + v11;
  *(_OWORD *)v12 = *(_OWORD *)v13;
  v12[16] = v13[16];
  v14 = v6[12];
  v27 = v2;
  v15 = *(void **)((char *)v4 + v14);
  *(_QWORD *)((char *)v3 + v14) = v15;
  *((_BYTE *)v3 + v6[13]) = *((_BYTE *)v4 + v6[13]);
  v16 = v6[14];
  v25 = (char *)v4 + v16;
  v26 = (char *)v3 + v16;
  v17 = sub_21C5E34E4();
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  swift_retain();
  swift_retain();
  v19 = v15;
  v18(v26, v25, v17);
  swift_storeEnumTagMultiPayload();
  v20 = *(int *)(v27 + 28);
  v21 = v0 + v20;
  v22 = v1 + v20;
  v23 = sub_21C5E34E4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  return v0;
}

uint64_t sub_21C5BDC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if (a1 != a2)
  {
    sub_21C52A88C(a1 + *(int *)(a3 + 24), type metadata accessor for MapContentList.Item.Content);
    type metadata accessor for MapContentList.Item.Content(0);
    v6 = (char *)&loc_21C5BDCF4 + 4 * byte_21C5E9FAA[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_21C5E34E4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_21C5BE168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  __int128 v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for MapContentList.Item.Content(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(_OWORD *)v7 = *(_OWORD *)v8;
      v24 = *((_QWORD *)v8 + 2);
      if (v24)
      {
        v25 = *((_QWORD *)v8 + 3);
        *((_QWORD *)v7 + 2) = v24;
        *((_QWORD *)v7 + 3) = v25;
      }
      else
      {
        *((_OWORD *)v7 + 1) = *((_OWORD *)v8 + 1);
      }
      *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
      v7[40] = v8[40];
      v35 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
      v36 = &v7[v35];
      v37 = &v8[v35];
      v38 = sub_21C5E34E4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
      goto LABEL_11;
    case 1:
      *(_OWORD *)v7 = *(_OWORD *)v8;
      v7[16] = v8[16];
      *(_WORD *)(v7 + 17) = *(_WORD *)(v8 + 17);
      v26 = (int *)type metadata accessor for ResolvedMarker();
      v27 = v26[8];
      v28 = &v7[v27];
      v29 = &v8[v27];
      v30 = sub_21C5E3340();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
      *(_QWORD *)&v7[v26[9]] = *(_QWORD *)&v8[v26[9]];
      v7[v26[10]] = v8[v26[10]];
      *(_QWORD *)&v7[v26[11]] = *(_QWORD *)&v8[v26[11]];
      v31 = v26[12];
      v32 = &v7[v31];
      v33 = &v8[v31];
      v34 = sub_21C5E34E4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
      goto LABEL_11;
    case 0:
      v11 = *((_OWORD *)v8 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *((_OWORD *)v7 + 1) = v11;
      v12 = (int *)type metadata accessor for ResolvedAnnotation();
      v13 = v12[6];
      v14 = &v7[v13];
      v15 = &v8[v13];
      v16 = sub_21C5E3340();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      *(_QWORD *)&v7[v12[7]] = *(_QWORD *)&v8[v12[7]];
      *(_QWORD *)&v7[v12[8]] = *(_QWORD *)&v8[v12[8]];
      v7[v12[9]] = v8[v12[9]];
      v7[v12[10]] = v8[v12[10]];
      v17 = v12[11];
      v18 = &v7[v17];
      v19 = &v8[v17];
      *(_OWORD *)v18 = *(_OWORD *)v19;
      v18[16] = v19[16];
      *(_QWORD *)&v7[v12[12]] = *(_QWORD *)&v8[v12[12]];
      v7[v12[13]] = v8[v12[13]];
      v20 = v12[14];
      v21 = &v7[v20];
      v22 = &v8[v20];
      v23 = sub_21C5E34E4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
LABEL_11:
      swift_storeEnumTagMultiPayload();
      goto LABEL_12;
  }
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
LABEL_12:
  v39 = *(int *)(a3 + 28);
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_21C5E34E4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
  return a1;
}

uint64_t sub_21C5BE44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  __int128 v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 24);
    v7 = (char *)(a1 + v6);
    v8 = (char *)(a2 + v6);
    sub_21C52A88C(a1 + v6, type metadata accessor for MapContentList.Item.Content);
    v9 = type metadata accessor for MapContentList.Item.Content(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *(_OWORD *)v7 = *(_OWORD *)v8;
        v24 = *((_QWORD *)v8 + 2);
        if (v24)
        {
          v25 = *((_QWORD *)v8 + 3);
          *((_QWORD *)v7 + 2) = v24;
          *((_QWORD *)v7 + 3) = v25;
        }
        else
        {
          *((_OWORD *)v7 + 1) = *((_OWORD *)v8 + 1);
        }
        *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
        v7[40] = v8[40];
        v35 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
        v36 = &v7[v35];
        v37 = &v8[v35];
        v38 = sub_21C5E34E4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
        goto LABEL_12;
      case 1:
        *(_OWORD *)v7 = *(_OWORD *)v8;
        v7[16] = v8[16];
        *(_WORD *)(v7 + 17) = *(_WORD *)(v8 + 17);
        v26 = (int *)type metadata accessor for ResolvedMarker();
        v27 = v26[8];
        v28 = &v7[v27];
        v29 = &v8[v27];
        v30 = sub_21C5E3340();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
        *(_QWORD *)&v7[v26[9]] = *(_QWORD *)&v8[v26[9]];
        v7[v26[10]] = v8[v26[10]];
        *(_QWORD *)&v7[v26[11]] = *(_QWORD *)&v8[v26[11]];
        v31 = v26[12];
        v32 = &v7[v31];
        v33 = &v8[v31];
        v34 = sub_21C5E34E4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
        goto LABEL_12;
      case 0:
        v11 = *((_OWORD *)v8 + 1);
        *(_OWORD *)v7 = *(_OWORD *)v8;
        *((_OWORD *)v7 + 1) = v11;
        v12 = (int *)type metadata accessor for ResolvedAnnotation();
        v13 = v12[6];
        v14 = &v7[v13];
        v15 = &v8[v13];
        v16 = sub_21C5E3340();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
        *(_QWORD *)&v7[v12[7]] = *(_QWORD *)&v8[v12[7]];
        *(_QWORD *)&v7[v12[8]] = *(_QWORD *)&v8[v12[8]];
        v7[v12[9]] = v8[v12[9]];
        v7[v12[10]] = v8[v12[10]];
        v17 = v12[11];
        v18 = &v7[v17];
        v19 = &v8[v17];
        *(_OWORD *)v18 = *(_OWORD *)v19;
        v18[16] = v19[16];
        *(_QWORD *)&v7[v12[12]] = *(_QWORD *)&v8[v12[12]];
        v7[v12[13]] = v8[v12[13]];
        v20 = v12[14];
        v21 = &v7[v20];
        v22 = &v8[v20];
        v23 = sub_21C5E34E4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
LABEL_12:
        swift_storeEnumTagMultiPayload();
        goto LABEL_13;
    }
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
LABEL_13:
  v39 = *(int *)(a3 + 28);
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_21C5E34E4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  return a1;
}

uint64_t sub_21C5BE750()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5BE75C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for MapContentList.Item.Content(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_21C5E34E4();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_21C5BE7FC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_21C5BE808(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for MapContentList.Item.Content(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_21C5E34E4();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_21C5BE8A4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for MapContentList.Item.Content(319);
  if (v1 <= 0x3F)
  {
    result = sub_21C5E34E4();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_21C5BE948()
{
  unint64_t result;

  result = qword_25528A5A8;
  if (!qword_25528A5A8)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EA710, &type metadata for MapContentList.ID.Component);
    atomic_store(result, (unint64_t *)&qword_25528A5A8);
  }
  return result;
}

uint64_t sub_21C5BE98C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25528A5B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_21C5BE9D4(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

ValueMetadata *type metadata accessor for MapContentList.IDGenerator()
{
  return &type metadata for MapContentList.IDGenerator;
}

unint64_t sub_21C5BEA00()
{
  unint64_t result;

  result = qword_25528A5C8[0];
  if (!qword_25528A5C8[0])
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EA7DC, &type metadata for MapContentList.IDGenerator);
    atomic_store(result, qword_25528A5C8);
  }
  return result;
}

uint64_t sub_21C5BEA5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;

  v15 = *(_QWORD *)(a1 + 48);
  v16 = *a2;
  v17 = *(_BYTE *)(a4 + 16);
  v18 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a9 = *(_OWORD *)a1;
  *(_OWORD *)(a9 + 16) = v18;
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a9 + 48) = v15;
  *(_QWORD *)(a9 + 56) = v16;
  *(_BYTE *)(a9 + 64) = a3;
  *(_OWORD *)(a9 + 72) = *(_OWORD *)a4;
  *(_BYTE *)(a9 + 88) = v17;
  v19 = type metadata accessor for _DefaultAnnotatedMapContent(0, a8, a10, a11);
  v20 = a9 + *(int *)(v19 + 56);
  v21 = sub_21C5E3BB0();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20, a5, v21);
  v23 = (_QWORD *)(a9 + *(int *)(v19 + 60));
  *v23 = a6;
  v23[1] = a7;
  return result;
}

uint64_t sub_21C5BEB24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  int *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v29;
  uint64_t v30;

  *(_OWORD *)(a8 + 56) = 0u;
  v15 = a8 + 56;
  *(_OWORD *)(a8 + 104) = 0u;
  *(_OWORD *)(a8 + 120) = 0u;
  *(_OWORD *)(a8 + 72) = 0u;
  *(_OWORD *)(a8 + 88) = 0u;
  *(_QWORD *)(a8 + 136) = 1;
  *(_OWORD *)(a8 + 144) = 0u;
  *(_OWORD *)(a8 + 160) = 0u;
  if (qword_2552878F0 != -1)
    swift_once();
  *(_QWORD *)(a8 + 176) = qword_25528AC78;
  *(_BYTE *)(a8 + 184) = 0;
  *(_QWORD *)(a8 + 200) = 0;
  *(_QWORD *)(a8 + 208) = 0;
  *(_QWORD *)(a8 + 192) = 0;
  v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_25528A658);
  v17 = (uint64_t *)(a8 + v16[15]);
  *v17 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255289DB0);
  swift_storeEnumTagMultiPayload();
  v18 = (uint64_t *)(a8 + v16[16]);
  *v18 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2552897E0);
  swift_storeEnumTagMultiPayload();
  v19 = a8 + v16[17];
  *(_QWORD *)v19 = swift_getKeyPath();
  *(_BYTE *)(v19 + 8) = 0;
  v20 = (uint64_t *)(a8 + v16[18]);
  *v20 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255289DC0);
  swift_storeEnumTagMultiPayload();
  v21 = a8 + v16[19];
  *(_QWORD *)v21 = swift_getKeyPath();
  *(_BYTE *)(v21 + 8) = 0;
  sub_21C5BEFDC(a1, a8);
  *(_QWORD *)(a8 + 176) = a2;
  *(_BYTE *)(a8 + 184) = a3 & 1;
  if (a5)
  {
    sub_21C5E3A9C();
    swift_retain();
    swift_retain();
    v22 = sub_21C5E3A90();
    v23 = swift_allocObject();
    v24 = MEMORY[0x24BEE6930];
    *(_QWORD *)(v23 + 16) = v22;
    *(_QWORD *)(v23 + 24) = v24;
    *(_QWORD *)(v23 + 32) = a4;
    *(_QWORD *)(v23 + 40) = a5;
    *(_BYTE *)(v23 + 48) = a6;
    swift_retain();
    swift_retain();
    v25 = sub_21C5E3A90();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v25;
    *(_QWORD *)(v26 + 24) = v24;
    *(_QWORD *)(v26 + 32) = a4;
    *(_QWORD *)(v26 + 40) = a5;
    *(_BYTE *)(v26 + 48) = a6;
    type metadata accessor for MKUserTrackingMode(0);
    sub_21C5E37E4();
    sub_21C5ABF20(a4, a5);
    sub_21C5ABF20(*(_QWORD *)(a8 + 192), *(_QWORD *)(a8 + 200));
    *(_OWORD *)(a8 + 192) = v29;
    *(_QWORD *)(a8 + 208) = v30;
  }
  return sub_21C5C0644(a7, v15);
}

uint64_t _DefaultAnnotatedMapContent.body.getter@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  _QWORD v26[2];
  char v27;
  uint64_t v28;
  uint64_t v29[7];

  v3 = v2;
  v25 = a2;
  v5 = sub_21C5E3BB0();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - v7;
  v9 = *(_QWORD *)v3;
  v22 = *(_QWORD *)(v3 + 8);
  v23 = v9;
  v10 = *(_QWORD *)(v3 + 16);
  v20 = *(_QWORD *)(v3 + 24);
  v21 = v10;
  v11 = *(_QWORD *)(v3 + 32);
  v12 = *(_QWORD *)(v3 + 40);
  v29[0] = v9;
  v29[1] = v22;
  v29[2] = v10;
  v29[3] = v20;
  v29[4] = v11;
  v29[5] = v12;
  v13 = *(_QWORD *)(v3 + 56);
  v29[6] = *(_QWORD *)(v3 + 48);
  v28 = v13;
  v24 = *(unsigned __int8 *)(v3 + 64);
  v15 = *(_QWORD *)(v3 + 80);
  v16 = *(_BYTE *)(v3 + 88);
  v26[0] = *(_QWORD *)(v3 + 72);
  v14 = v26[0];
  v26[1] = v15;
  v27 = v16;
  v17 = *(a1 - 1);
  (*(void (**)(char *, uint64_t, uint64_t *, __n128))(v17 + 16))(v8, v3, a1, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t *))(v17 + 56))(v8, 0, 1, a1);
  sub_21C56C0C0(v23, v22);
  sub_21C5AB738(v14, v15);
  return sub_21C5A1784(v29, &v28, v24, (uint64_t)v26, (uint64_t)v8, a1[2], a1[3], a1[4], v25);
}

uint64_t _DefaultMapContent.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v9[56];
  _OWORD v10[5];
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  sub_21C5BEFDC(v1, (uint64_t)v9);
  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(_BYTE *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_QWORD *)(v1 + 80);
  memset(v10, 0, sizeof(v10));
  v11 = 1;
  v12 = 0u;
  v13 = 0u;
  v7 = *(_BYTE *)(v1 + 88);
  sub_21C5BF018((uint64_t)v9);
  sub_21C5AB738(v5, v6);
  return sub_21C5BEB24((uint64_t)v9, v3, v4, v5, v6, v7, (uint64_t)v10, a1);
}

uint64_t sub_21C5BEFDC(uint64_t a1, uint64_t a2)
{
  __swift_memcpy56_8(a2, a1);
  return a2;
}

uint64_t sub_21C5BF018(uint64_t a1)
{
  sub_21C56C0C0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_21C5BF04C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21C5BF088()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21C5BF098@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v9[56];
  _OWORD v10[5];
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  sub_21C5BEFDC(v1, (uint64_t)v9);
  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(_BYTE *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_QWORD *)(v1 + 80);
  memset(v10, 0, sizeof(v10));
  v11 = 1;
  v12 = 0u;
  v13 = 0u;
  v7 = *(_BYTE *)(v1 + 88);
  sub_21C5BF018((uint64_t)v9);
  sub_21C5AB738(v5, v6);
  return sub_21C5BEB24((uint64_t)v9, v3, v4, v5, v6, v7, (uint64_t)v10, a1);
}

uint64_t sub_21C5BF150()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21C5E3BB0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21C5BF1F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  size_t __n;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  if (*(_DWORD *)(v6 + 84))
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = *(_QWORD *)(v6 + 64) + 1;
  v10 = v7 & 0x100000;
  if (v8 > 7 || v10 != 0 || ((v9 + 7 + ((v8 + 89) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
  }
  else
  {
    v35 = *(_QWORD *)(v5 - 8);
    v36 = *(_QWORD *)(a3 + 16);
    v37 = v9 + 7;
    __n = v9;
    v34 = ~v8;
    v14 = *a2;
    v15 = a2[1];
    v16 = a2[2];
    v17 = a2[3];
    v18 = a2[4];
    v19 = a2[5];
    v20 = a2[6];
    sub_21C56C0C0(*a2, v15);
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v16;
    a1[3] = v17;
    a1[4] = v18;
    a1[5] = v19;
    a1[6] = v20;
    v21 = ((unint64_t)a1 + 63) & 0xFFFFFFFFFFFFFFF8;
    v22 = ((unint64_t)a2 + 63) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
    v23 = ((unint64_t)a1 + 79) & 0xFFFFFFFFFFFFFFF8;
    v24 = ((unint64_t)a2 + 79) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v24 + 8) < 0xFFFFFFFFuLL)
    {
      v25 = *(_OWORD *)v24;
      *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
      *(_OWORD *)v23 = v25;
    }
    else
    {
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
      *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
      swift_retain();
      swift_retain();
    }
    v26 = v24 + v8;
    v27 = (void *)((v23 + v8 + 17) & v34);
    v28 = (const void *)((v26 + 17) & v34);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v28, 1, v36))
    {
      memcpy(v27, v28, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v27, v28, v36);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v27, 0, 1, v36);
    }
    v29 = ((unint64_t)v27 + v37) & 0xFFFFFFFFFFFFFFF8;
    v30 = ((unint64_t)v28 + v37) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v30 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v29 = *(_OWORD *)v30;
      return a1;
    }
    v31 = *(_QWORD *)(v30 + 8);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *(_QWORD *)(v29 + 8) = v31;
  }
  swift_retain();
  return a1;
}

uint64_t sub_21C5BF41C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;

  sub_21C56C124(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = (a1 + 79) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v4 + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
  }
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  if (!(_DWORD)result)
    result = (*(uint64_t (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  v9 = v7 + *(_QWORD *)(v6 + 64);
  if (!*(_DWORD *)(v6 + 84))
    ++v9;
  if (*(_QWORD *)((v9 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

uint64_t *sub_21C5BF500(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  int v23;
  size_t v24;
  size_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  v12 = a2[6];
  sub_21C56C0C0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  v13 = ((unint64_t)a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)a2 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = ((unint64_t)a1 + 79) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)a2 + 79) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v16 + 8) < 0xFFFFFFFFuLL)
  {
    v17 = *(_OWORD *)v16;
    *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
    *(_OWORD *)v15 = v17;
  }
  else
  {
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
    *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
    swift_retain();
    swift_retain();
  }
  v18 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (void *)((v15 + v20 + 17) & ~v20);
  v22 = (const void *)((v16 + v20 + 17) & ~v20);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v22, 1, v18))
  {
    v23 = *(_DWORD *)(v19 + 84);
    v24 = *(_QWORD *)(v19 + 64);
    if (v23)
      v25 = v24;
    else
      v25 = v24 + 1;
    memcpy(v21, v22, v25);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v21, v22, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v21, 0, 1, v18);
    v23 = *(_DWORD *)(v19 + 84);
    v24 = *(_QWORD *)(v19 + 64);
  }
  if (v23)
    v26 = v24;
  else
    v26 = v24 + 1;
  v27 = ((unint64_t)v21 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = ((unint64_t)v22 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v28 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v27 = *(_OWORD *)v28;
  }
  else
  {
    v29 = *(_QWORD *)(v28 + 8);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *(_QWORD *)(v27 + 8) = v29;
    swift_retain();
  }
  return a1;
}

uint64_t *sub_21C5BF6D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t (*v26)(void *, uint64_t, uint64_t);
  int v27;
  int v28;
  size_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  v12 = a2[6];
  sub_21C56C0C0(*a2, v7);
  v13 = *a1;
  v14 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  sub_21C56C124(v13, v14);
  v15 = ((unint64_t)a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)a2 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = ((unint64_t)a1 + 79) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)a2 + 79) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)(v18 + 8);
  if (*(_QWORD *)(v17 + 8) < 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
      *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
      swift_retain();
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v19 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v17 = *(_QWORD *)v18;
      swift_retain();
      swift_release();
      *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
      swift_retain();
      swift_release();
      *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
      goto LABEL_8;
    }
    swift_release();
    swift_release();
  }
  v20 = *(_OWORD *)v18;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
  *(_OWORD *)v17 = v20;
LABEL_8:
  v21 = *(_QWORD *)(a3 + 16);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = (void *)((v17 + v23 + 17) & ~v23);
  v25 = (void *)((v18 + v23 + 17) & ~v23);
  v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  v27 = v26(v24, 1, v21);
  v28 = v26(v25, 1, v21);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v24, v25, v21);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v21);
      goto LABEL_17;
    }
  }
  else
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 24))(v24, v25, v21);
      goto LABEL_17;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v24, v21);
  }
  if (*(_DWORD *)(v22 + 84))
    v29 = *(_QWORD *)(v22 + 64);
  else
    v29 = *(_QWORD *)(v22 + 64) + 1;
  memcpy(v24, v25, v29);
LABEL_17:
  if (*(_DWORD *)(v22 + 84))
    v30 = *(_QWORD *)(v22 + 64);
  else
    v30 = *(_QWORD *)(v22 + 64) + 1;
  v31 = (_QWORD *)(((unint64_t)v24 + v30 + 7) & 0xFFFFFFFFFFFFFFF8);
  v32 = (unint64_t *)(((unint64_t)v25 + v30 + 7) & 0xFFFFFFFFFFFFFFF8);
  v33 = *v32;
  if (*v31 < 0xFFFFFFFFuLL)
  {
    if (v33 >= 0xFFFFFFFF)
    {
      v35 = v32[1];
      *v31 = v33;
      v31[1] = v35;
      swift_retain();
      return a1;
    }
LABEL_26:
    *(_OWORD *)v31 = *(_OWORD *)v32;
    return a1;
  }
  if (v33 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_26;
  }
  v34 = v32[1];
  *v31 = v33;
  v31[1] = v34;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_21C5BF9B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  int v15;
  size_t v16;
  size_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = (a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  v6 = (a2 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v5 = *(_QWORD *)v6;
  *(_BYTE *)(v5 + 8) = *(_BYTE *)(v6 + 8);
  v7 = (a1 + 79) & 0xFFFFFFFFFFFFFFF8;
  v8 = (a2 + 79) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_OWORD *)v8;
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  *(_OWORD *)v7 = v9;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (void *)((v7 + v12 + 17) & ~v12);
  v14 = (const void *)((v8 + v12 + 17) & ~v12);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v14, 1, v10))
  {
    v15 = *(_DWORD *)(v11 + 84);
    v16 = *(_QWORD *)(v11 + 64);
    if (v15)
      v17 = v16;
    else
      v17 = v16 + 1;
    memcpy(v13, v14, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v13, v14, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
    v15 = *(_DWORD *)(v11 + 84);
    v16 = *(_QWORD *)(v11 + 64);
  }
  if (v15)
    v18 = v16;
  else
    v18 = v16 + 1;
  v19 = ((unint64_t)v13 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (uint64_t *)(((unint64_t)v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  if ((unint64_t)*v20 < 0xFFFFFFFF)
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
  }
  else
  {
    v22 = v20[1];
    *(_QWORD *)v19 = v21;
    *(_QWORD *)(v19 + 8) = v22;
  }
  return a1;
}

uint64_t sub_21C5BFB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v6;
  sub_21C56C124(v7, v8);
  v10 = (a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = (a1 + 79) & 0xFFFFFFFFFFFFFFF8;
  v13 = (a2 + 79) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v12 + 8) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v13 + 8) >= 0xFFFFFFFFuLL)
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      swift_release();
      *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
      swift_release();
      *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
      goto LABEL_6;
    }
    swift_release();
    swift_release();
  }
  v14 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  *(_OWORD *)v12 = v14;
LABEL_6:
  v15 = *(_QWORD *)(a3 + 16);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = v13 + v17;
  v19 = (void *)((v12 + v17 + 17) & ~v17);
  v20 = (void *)((v18 + 17) & ~v17);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v22 = v21(v19, 1, v15);
  v23 = v21(v20, 1, v15);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v19, v20, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
      goto LABEL_15;
    }
  }
  else
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v19, v20, v15);
      goto LABEL_15;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v19, v15);
  }
  if (*(_DWORD *)(v16 + 84))
    v24 = *(_QWORD *)(v16 + 64);
  else
    v24 = *(_QWORD *)(v16 + 64) + 1;
  memcpy(v19, v20, v24);
LABEL_15:
  if (*(_DWORD *)(v16 + 84))
    v25 = *(_QWORD *)(v16 + 64);
  else
    v25 = *(_QWORD *)(v16 + 64) + 1;
  v26 = (_QWORD *)(((unint64_t)v19 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
  v27 = (unint64_t *)(((unint64_t)v20 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
  v28 = *v27;
  if (*v26 < 0xFFFFFFFFuLL)
  {
    if (v28 >= 0xFFFFFFFF)
    {
      v30 = v27[1];
      *v26 = v28;
      v26[1] = v30;
      return a1;
    }
LABEL_24:
    *(_OWORD *)v26 = *(_OWORD *)v27;
    return a1;
  }
  if (v28 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_24;
  }
  v29 = v27[1];
  *v26 = v28;
  v26[1] = v29;
  swift_release();
  return a1;
}

uint64_t sub_21C5BFD60(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  if (v5)
    v8 = 7;
  else
    v8 = 8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  if (v7 < a2)
  {
    if (((((v8 + *(_QWORD *)(v4 + 64) + ((v9 + 89) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v7 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    __asm { BR              X16 }
  }
  v14 = (a1 + 79) & 0xFFFFFFFFFFFFFFF8;
  if (v6 > 0x7FFFFFFE)
  {
    v16 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v14 + v9 + 17) & ~v9);
    if (v16 >= 2)
      return v16 - 1;
    else
      return 0;
  }
  else
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15 >= 0xFFFFFFFF)
      LODWORD(v15) = -1;
    if ((v15 + 1) >= 2)
      return v15;
    else
      return 0;
  }
}

void sub_21C5BFEC0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((_DWORD)v11 + ((*(unsigned __int8 *)(v7 + 80) + 89) & ~*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((_DWORD)v11 + ((*(unsigned __int8 *)(v7 + 80) + 89) & ~*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((v11 + ((*(unsigned __int8 *)(v7 + 80) + 89) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8)+ 16);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X15 }
}

uint64_t sub_21C5BFFCC@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t result;

  *(_BYTE *)(v14 + v15) = 0;
  if (a1)
  {
    v16 = (v14 + 79) & 0xFFFFFFFFFFFFFFF8;
    if (v11 > 0x7FFFFFFE)
    {
      if (v11 >= a1)
      {
        return (*(uint64_t (**)(unint64_t, _QWORD))(v12 + 56))((v16 + v13 + 17) & v10, a1 + 1);
      }
      else if ((_DWORD)a2)
      {
        if (a2 <= 3)
          v17 = a2;
        else
          v17 = 4;
        bzero((void *)((v16 + v13 + 17) & v10), a2);
        __asm { BR              X10 }
      }
    }
    else if (a1 > 0x7FFFFFFE)
    {
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
      *(_BYTE *)(v16 + 16) = 0;
      *(_DWORD *)v16 = a1 - 0x7FFFFFFF;
    }
    else
    {
      *(_QWORD *)(v16 + 8) = a1;
    }
  }
  return result;
}

void sub_21C5C00E0()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_21C5C00F0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_21C5C00F8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t type metadata accessor for _DefaultAnnotatedMapContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _DefaultAnnotatedMapContent);
}

uint64_t destroy for _DefaultMapContent(uint64_t *a1)
{
  uint64_t result;

  sub_21C56C124(*a1, a1[1]);
  result = a1[10];
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for _DefaultMapContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  sub_21C56C0C0(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 80);
  if (v12)
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v12;
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  }
  return a1;
}

uint64_t assignWithCopy for _DefaultMapContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  char v16;
  __int128 v17;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  sub_21C56C0C0(*(_QWORD *)a2, v5);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  sub_21C56C124(v11, v12);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v13 = (_OWORD *)(a1 + 72);
  v14 = (_OWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80))
  {
    if (v15)
    {
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    }
    else
    {
      sub_21C5C0384(a1 + 72);
      v16 = *(_BYTE *)(a2 + 88);
      *v13 = *v14;
      *(_BYTE *)(a1 + 88) = v16;
    }
  }
  else if (v15)
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    swift_retain();
    swift_retain();
  }
  else
  {
    v17 = *v14;
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *v13 = v17;
  }
  return a1;
}

uint64_t sub_21C5C0384(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289DA8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for _DefaultMapContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v4;
  sub_21C56C124(v5, v6);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  if (!*(_QWORD *)(a1 + 80))
    goto LABEL_5;
  v8 = *(_QWORD *)(a2 + 80);
  if (!v8)
  {
    sub_21C5C0384(a1 + 72);
LABEL_5:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    return a1;
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  *(_QWORD *)(a1 + 80) = v8;
  swift_release();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for _DefaultMapContent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 80);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _DefaultMapContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
      *(_QWORD *)(result + 80) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _DefaultMapContent()
{
  return &type metadata for _DefaultMapContent;
}

void sub_21C5C0588(uint64_t *a1)
{
  type metadata accessor for _MapView(255, *a1, a1[1], a1[2]);
  JUMPOUT(0x22077F9A0);
}

unint64_t sub_21C5C05B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25528A650;
  if (!qword_25528A650)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528A658);
    result = MEMORY[0x22077F9A0](&unk_21C5E93C8, v1);
    atomic_store(result, (unint64_t *)&qword_25528A650);
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnotationData()
{
  return &type metadata for AnnotationData;
}

uint64_t sub_21C5C0614()
{
  return MEMORY[0x24BEE1778];
}

uint64_t sub_21C5C0644(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528A660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t AnyMapContent.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[2];

  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))((char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v9);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v12 = v14[1];
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a2);
  }
  else
  {
    type metadata accessor for AnyViewStorage(0, a2, a3, v11);
    v12 = swift_allocObject();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 104) - 8) + 32))(v12 + *(_QWORD *)(*(_QWORD *)v12 + 120), a1);
  }
  *a4 = v12;
  return result;
}

uint64_t type metadata accessor for AnyViewStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyViewStorage);
}

uint64_t sub_21C5C079C(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 104) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 120), a1);
  return v2;
}

uint64_t static AnyMapContent._makeMapContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  id v25;
  uint64_t v26;
  int v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a3;
  v38 = a1;
  v39 = *MEMORY[0x24BDAC8D0];
  v35 = type metadata accessor for _MapContentOutputs.SetDependency(0);
  MEMORY[0x24BDAC7A8](v35);
  v34 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528A668);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (int *)((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (int *)type metadata accessor for AnyMapContent.Container();
  MEMORY[0x24BDAC7A8](v9);
  v33 = (uint64_t)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (_DWORD *)((char *)&v32 - v12);
  v14 = type metadata accessor for _MapContentOutputs(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for _MapContentInputs.AddPreference(0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0();
  type metadata accessor for _MapContentInputs(0);
  v36 = a2;
  sub_21C521E50(&qword_25528A050, type metadata accessor for _MapContentInputs.AddPreference, (uint64_t)&unk_21C5E5388);
  sub_21C5E3460();
  _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0();
  v20 = sub_21C5E349C();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v16, v19, v20);
  v22 = (uint64_t)v16;
  v23 = v37;
  sub_21C5C0BD4(v22, v37);
  (*(void (**)(int *, uint64_t, uint64_t))(v6 + 16))(v8, v38, v5);
  if (v7 != 4)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v24 = *v8;
  (*(void (**)(int *, uint64_t))(v6 + 8))(v8, v5);
  *v13 = v24;
  sub_21C529664(v36, (uint64_t)v13 + v9[5], type metadata accessor for _MapContentInputs);
  sub_21C529664(v23, (uint64_t)v13 + v9[6], type metadata accessor for _MapContentOutputs);
  v25 = (id)AGSubgraphGetCurrent();
  if (!v25)
    goto LABEL_5;
  *(_QWORD *)((char *)v13 + v9[7]) = v25;
  v26 = v33;
  sub_21C529664((uint64_t)v13, v33, (uint64_t (*)(_QWORD))type metadata accessor for AnyMapContent.Container);
  sub_21C527A50();
  sub_21C521E50(qword_25528A670, (uint64_t (*)(uint64_t))type metadata accessor for AnyMapContent.Container, (uint64_t)&unk_21C5EABB0);
  v27 = sub_21C5E2DAC();
  sub_21C52A88C(v26, (uint64_t (*)(_QWORD))type metadata accessor for AnyMapContent.Container);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v29 = (uint64_t)v34;
  v28(v34, v23, v20);
  v30 = v29 + *(int *)(v35 + 20);
  *(_DWORD *)v30 = v27;
  *(_BYTE *)(v30 + 4) = 0;
  sub_21C521E50(qword_25528A058, type metadata accessor for _MapContentOutputs.SetDependency, (uint64_t)&unk_21C5E5360);
  sub_21C5E3484();
  sub_21C52A88C(v29, type metadata accessor for _MapContentOutputs.SetDependency);
  return sub_21C52A88C((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for AnyMapContent.Container);
}

uint64_t type metadata accessor for AnyMapContent.Container()
{
  uint64_t result;

  result = qword_25528A6F8;
  if (!qword_25528A6F8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21C5C0BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _MapContentOutputs(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static AnyMapContent._mapContentCount(inputs:)()
{
  return 0;
}

uint64_t sub_21C5C0C24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t *OutputValue;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  uint64_t result;
  void *v15;
  id v16;
  id v17;
  uint64_t v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for _MapContentOutputs.ResetPreference(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v19[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)AGGraphGetValue();
  OutputValue = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    swift_retain();
    v6 = 0;
    v7 = 0;
    goto LABEL_5;
  }
  v6 = *OutputValue;
  v7 = (void *)OutputValue[1];
  v8 = (*(uint64_t (**)(void))(*(_QWORD *)*OutputValue + 80))();
  if (v8 != (*(uint64_t (**)(void))(*(_QWORD *)v4 + 80))())
  {
    v9 = v0 + *(int *)(type metadata accessor for AnyMapContent.Container() + 24);
    v10 = sub_21C5E349C();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v3, v9, v10);
    sub_21C521E50(&qword_25528A2E0, type metadata accessor for _MapContentOutputs.ResetPreference, (uint64_t)&unk_21C5E5494);
    swift_retain_n();
    v11 = v7;
    swift_retain();
    v12 = v11;
    sub_21C5E3484();
    sub_21C52A88C((uint64_t)v3, type metadata accessor for _MapContentOutputs.ResetPreference);
    AGSubgraphInvalidate();

    swift_release();
LABEL_5:
    v19[0] = v4;
    sub_21C5C0E9C(v19, &v20);
    v13 = (void *)v21;
    v19[0] = v20;
    v19[1] = v21;
    AGGraphSetOutputValue();
    swift_release();
    sub_21C5C1F70(v6, v7);

    return swift_release();
  }
  result = AGGraphGetOutputValue();
  if (result)
  {
    v15 = *(void **)(result + 8);
    swift_retain_n();
    swift_retain();
    v16 = v7;
    v17 = v15;
    v20 = v4;
    v21 = (uint64_t)v17;
    AGGraphSetOutputValue();

    swift_release();
    return swift_release_n();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21C5C0E9C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  _QWORD *v22;
  id v23;
  _QWORD v25[2];
  uint64_t v26;
  _QWORD *v27;

  v27 = a2;
  v26 = type metadata accessor for _MapContentOutputs.SetSource(0);
  MEMORY[0x24BDAC7A8](v26);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for _MapContentOutputs(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v25 - v10;
  v12 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v16 = type metadata accessor for AnyMapContent.Container();
  v17 = (id)AGSubgraphGetGraph();
  v18 = (void *)AGSubgraphCreate();

  AGSubgraphAddChild();
  sub_21C529664((uint64_t)v2 + *(int *)(v16 + 20), (uint64_t)v14, type metadata accessor for _MapContentInputs);
  sub_21C529664((uint64_t)v2 + *(int *)(v16 + 24), (uint64_t)v11, type metadata accessor for _MapContentOutputs);
  v25[1] = AGGraphClearUpdate();
  v19 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  (*(void (**)(_QWORD, char *))(*(_QWORD *)v15 + 88))(*v2, v14);
  v20 = sub_21C5E349C();
  v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  v21(v5, v11, v20);
  v21(&v5[*(int *)(v26 + 20)], v8, v20);
  sub_21C521E50(qword_25528A2E8, type metadata accessor for _MapContentOutputs.SetSource, (uint64_t)&unk_21C5E546C);
  sub_21C5E3484();
  sub_21C52A88C((uint64_t)v5, type metadata accessor for _MapContentOutputs.SetSource);
  v22 = v27;
  *v27 = v15;
  v22[1] = v18;
  swift_retain();
  v23 = v18;
  sub_21C52A88C((uint64_t)v8, type metadata accessor for _MapContentOutputs);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  sub_21C52A88C((uint64_t)v11, type metadata accessor for _MapContentOutputs);
  return sub_21C52A88C((uint64_t)v14, type metadata accessor for _MapContentInputs);
}

void sub_21C5C1134()
{
  sub_21C5E3D48();
  __break(1u);
}

void sub_21C5C117C()
{
  sub_21C5E3D48();
  __break(1u);
}

uint64_t sub_21C5C11C4()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 104);
}

uint64_t sub_21C5C11D0@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  _BYTE v25[16];
  uint64_t v26;
  int v27;
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v21 = a3;
  v22 = a2;
  v32 = *MEMORY[0x24BDAC8D0];
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 104);
  v7 = sub_21C5E2EC0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v21 - v9;
  v11 = *(_QWORD *)(v5 + 112);
  v24 = a1;
  v29 = v6;
  v13 = type metadata accessor for AnyViewStorage.AnyMapContentChild(0, v6, v11, v12);
  v30 = v13;
  v31 = MEMORY[0x22077F9A0](&unk_21C5EAC78, v13);
  v14 = sub_21C5E2DB8();
  v15 = MEMORY[0x24BEE4078];
  v16 = MEMORY[0x24BEE40A8];
  sub_21C52951C((uint64_t)&v24, (uint64_t)sub_21C5B4674, (uint64_t)v28, v13, MEMORY[0x24BEE4078], v14, MEMORY[0x24BEE40A8], v17);
  LODWORD(v5) = v23;
  v18 = (uint64_t)v3 + *(_QWORD *)(*v3 + 120);
  v26 = v6;
  v27 = v23;
  sub_21C52951C(v18, (uint64_t)sub_21C58A9D8, (uint64_t)v25, v6, v15, MEMORY[0x24BEE1328], v16, v19);
  sub_21C52BAE0(v5, (uint64_t)v10);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 32))(v10, v22, v6, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_21C5C1380(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD v10[6];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  AGGraphGetValue();
  type metadata accessor for AnyViewStorage(0, v2, v3, v4);
  swift_retain();
  v5 = swift_dynamicCastClass();
  if (!v5)
    return swift_release();
  v6 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 120);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v10[2] = a1;
  v10[3] = MEMORY[0x22077F9A0](&unk_21C5EAC78, a1, v7);
  sub_21C52951C(v6, (uint64_t)sub_21C5B6588, (uint64_t)v10, v2, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v8);
  return swift_release();
}

uint64_t sub_21C5C14AC()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 104) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
}

uint64_t sub_21C5C14C8()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 104) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for AnyMapContent()
{
  return &type metadata for AnyMapContent;
}

uint64_t type metadata accessor for AnyMapContentStorageBase()
{
  return objc_opt_self();
}

uint64_t sub_21C5C1534()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AnyMapContent.Info(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  v4 = v3;
  return a1;
}

void destroy for AnyMapContent.Info(uint64_t a1)
{
  swift_release();

}

_QWORD *assignWithCopy for AnyMapContent.Info(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for AnyMapContent.Info(uint64_t a1, _OWORD *a2)
{
  void *v4;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for AnyMapContent.Info()
{
  return &type metadata for AnyMapContent.Info;
}

uint64_t *sub_21C5C16A0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_21C5E32C8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = (int *)type metadata accessor for _MapContentInputs(0);
    v12 = v11[5];
    v13 = &v8[v12];
    v14 = &v9[v12];
    v15 = sub_21C5E2ED8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = v11[6];
    v17 = &v8[v16];
    v18 = &v9[v16];
    v19 = sub_21C5E346C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    *(_DWORD *)&v8[v11[7]] = *(_DWORD *)&v9[v11[7]];
    v20 = a3[6];
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_21C5E349C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[7];
    v25 = *(void **)((char *)a2 + v24);
    *(uint64_t *)((char *)v4 + v24) = (uint64_t)v25;
    v26 = v25;
  }
  return v4;
}

void sub_21C5C17EC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + a2[5];
  v5 = sub_21C5E32C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = type metadata accessor for _MapContentInputs(0);
  v7 = v4 + *(int *)(v6 + 20);
  v8 = sub_21C5E2ED8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v4 + *(int *)(v6 + 24);
  v10 = sub_21C5E346C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[6];
  v12 = sub_21C5E349C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);

}

_DWORD *sub_21C5C18C0(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21C5E32C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = (int *)type metadata accessor for _MapContentInputs(0);
  v11 = v10[5];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = sub_21C5E2ED8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = v10[6];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v18 = sub_21C5E346C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  v19 = a3[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_21C5E349C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[7];
  v24 = *(void **)((char *)a2 + v23);
  *(_QWORD *)((char *)a1 + v23) = v24;
  v25 = v24;
  return a1;
}

_DWORD *sub_21C5C19E0(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21C5E32C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = (int *)type metadata accessor for _MapContentInputs(0);
  v11 = v10[5];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = sub_21C5E2ED8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = v10[6];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v18 = sub_21C5E346C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  v19 = a3[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_21C5E349C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[7];
  v24 = *(void **)((char *)a2 + v23);
  v25 = *(void **)((char *)a1 + v23);
  *(_QWORD *)((char *)a1 + v23) = v24;
  v26 = v24;

  return a1;
}

_DWORD *sub_21C5C1B08(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21C5E32C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = (int *)type metadata accessor for _MapContentInputs(0);
  v11 = v10[5];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = sub_21C5E2ED8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = v10[6];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v18 = sub_21C5E346C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  v19 = a3[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_21C5E349C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

_DWORD *sub_21C5C1C24(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21C5E32C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = (int *)type metadata accessor for _MapContentInputs(0);
  v11 = v10[5];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = sub_21C5E2ED8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = v10[6];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v18 = sub_21C5E346C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  v19 = a3[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_21C5E349C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[7];
  v24 = *(void **)((char *)a1 + v23);
  *(_QWORD *)((char *)a1 + v23) = *(_QWORD *)((char *)a2 + v23);

  return a1;
}

uint64_t sub_21C5C1D48()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5C1D54(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = type metadata accessor for _MapContentInputs(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for _MapContentOutputs(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[7]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_21C5C1DF8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5C1E04(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for _MapContentInputs(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = type metadata accessor for _MapContentOutputs(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[7]) = (a2 - 1);
  return result;
}

uint64_t sub_21C5C1EA4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for _MapContentInputs(319);
  if (v1 <= 0x3F)
  {
    result = sub_21C5E349C();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_21C5C1F44()
{
  return sub_21C521E50(qword_25528A670, (uint64_t (*)(uint64_t))type metadata accessor for AnyMapContent.Container, (uint64_t)&unk_21C5EABB0);
}

void sub_21C5C1F70(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_release();

  }
}

uint64_t type metadata accessor for AnyViewStorage.AnyMapContentChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyViewStorage.AnyMapContentChild);
}

void sub_21C5C1FA8()
{
  JUMPOUT(0x22077F9A0);
}

uint64_t sub_21C5C1FBC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v22 = a3;
  v5 = (_QWORD *)MEMORY[0x24BEE2B70];
  v6 = *(_QWORD *)(*MEMORY[0x24BEE2B70] + *a1 + 8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v22 - v8;
  v12 = type metadata accessor for _EnvironmentKeyWritingMapContentModifier(0, v6, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v22 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  v16 = *a1;
  *(_QWORD *)v15 = a1;
  v17 = *(_QWORD *)(*v5 + v16 + 8);
  v20 = type metadata accessor for _EnvironmentKeyWritingMapContentModifier(0, v17, v18, v19);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(&v15[*(int *)(v20 + 28)], v9, v17);
  swift_retain();
  MapContent.modifier<A>(_:)((uint64_t)v15, v22, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_21C5C2100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v21 - v12;
  v15 = type metadata accessor for _TraitWritingMapContentModifier(0, a4, a6, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v13, a2, AssociatedTypeWitness, v17);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v13, AssociatedTypeWitness);
  MapContent.modifier<A>(_:)((uint64_t)v19, a3, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
}

uint64_t sub_21C5C2224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _MapContentModifier._makeMapContent(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_21C5C2238@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v25 = a2;
  v26 = a3;
  v24 = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_255287B48);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v24 - v9;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_255287BA8);
  v11 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_21C5E3508();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C5E3514();
  sub_21C522EFC(a1, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528A910);
  sub_21C5C500C();
  sub_21C5E32F8();
  sub_21C5C2238(v13, v16, v25, v26);
  sub_21C52335C((uint64_t)v10, (uint64_t)v7);
  v21 = sub_21C5E355C();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v7, 1, v21) == 1)
  {
    sub_21C524980((uint64_t)v10, &qword_255287B48);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v27);
    sub_21C5233A4((uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    return sub_21C524980((uint64_t)v7, &qword_255287B48);
  }
  else
  {
    sub_21C5E3550();
    sub_21C524980((uint64_t)v10, &qword_255287B48);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v27);
    sub_21C5233A4((uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v7, v21);
  }
}

uint64_t static _MapContentModifier._makeMapContent(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v35 = a3;
  v36 = a4;
  v31 = a1;
  v33 = a7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_255287B48);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v31 - v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = sub_21C5E2EC0();
  v37 = *(_QWORD *)(v17 - 8);
  v38 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v31 - v18;
  v20 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_21C5E3508();
  v32 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C5E3514();
  sub_21C522EFC(a2, (uint64_t)v22);
  v26 = type metadata accessor for MapContentModifierBodyAccessor(0, a5, a6, v25);
  MEMORY[0x22077F9A0](&unk_21C5EAEC0, v26);
  sub_21C5E32F8();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v19, v22, v35, v36, AssociatedTypeWitness, AssociatedConformanceWitness);
  sub_21C52335C((uint64_t)v15, (uint64_t)v12);
  v28 = sub_21C5E355C();
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v12, 1, v28) == 1)
  {
    sub_21C524980((uint64_t)v15, &qword_255287B48);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v38);
    sub_21C5233A4((uint64_t)v22);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v24, v34);
    return sub_21C524980((uint64_t)v12, &qword_255287B48);
  }
  else
  {
    sub_21C5E3550();
    sub_21C524980((uint64_t)v15, &qword_255287B48);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v38);
    sub_21C5233A4((uint64_t)v22);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v24, v34);
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v12, v28);
  }
}

uint64_t sub_21C5C27C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _MapContentModifier._mapContentCount(inputs:body:)(a1, a2, a3);
}

uint64_t static _MapContentModifier._mapContentCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(a1, a2, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t type metadata accessor for MapContentModifierBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapContentModifierBodyAccessor);
}

uint64_t sub_21C5C2888(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    MEMORY[0x24BDAC7A8](result);
    v4 = type metadata accessor for MapContentModifierBodyAccessor(0, v2, v3, v3);
    MEMORY[0x22077F9A0](&unk_21C5EAEC0, v4);
    return sub_21C5E32EC();
  }
  return result;
}

uint64_t sub_21C5C2918(uint64_t result, char a2)
{
  return sub_21C5C2888(result, a2);
}

uint64_t sub_21C5C2928()
{
  return sub_21C5C2928();
}

uint64_t static ModifiedContent<>._makeMapContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v24 = a7;
  v25 = a2;
  sub_21C5E30A0();
  v12 = sub_21C5E2EC0();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v22 - v14;
  v16 = sub_21C5E2EC0();
  v22 = *(_QWORD *)(v16 - 8);
  v23 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v22 - v17;
  v26 = a3;
  v27 = a4;
  v28 = a5;
  v29 = a6;
  sub_21C59C8F8((void (*)(uint64_t))sub_21C5C2B60, a4, (uint64_t)&v22 - v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  v19 = (*(unsigned __int8 *)(v13 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v20 = (char *)swift_allocObject();
  *((_QWORD *)v20 + 2) = a3;
  *((_QWORD *)v20 + 3) = a4;
  *((_QWORD *)v20 + 4) = a5;
  *((_QWORD *)v20 + 5) = a6;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v20[v19], v15, v12);
  (*(void (**)(char *, uint64_t, uint64_t (*)(uint64_t), char *, uint64_t, uint64_t))(a6 + 32))(v18, v25, sub_21C5C2CE4, v20, a4, a6);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v18, v23);
}

uint64_t sub_21C5C2AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v5 = sub_21C5E30A0();
  v6 = a1 + *(int *)(v5 + 36);
  v10[2] = v5;
  v10[3] = a3;
  v7 = sub_21C5E2DD0();
  sub_21C52951C(v6, (uint64_t)sub_21C537430, (uint64_t)v10, a3, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v8);
  return v10[5];
}

uint64_t sub_21C5C2B60(uint64_t a1)
{
  uint64_t v1;

  return sub_21C5C2AD4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_21C5C2B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = sub_21C5E2EC0();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = &v16[-v13];
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  sub_21C5E30A0();
  sub_21C5E2EC0();
  sub_21C59C8F8((void (*)(uint64_t))sub_21C5C5058, a3, (uint64_t)v14);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(a5 + 32))(v14, a1, a3, a5);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_21C5C2C74()
{
  uint64_t v0;
  uint64_t v1;

  sub_21C5E30A0();
  v1 = sub_21C5E2EC0();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_21C5C2CE4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  sub_21C5E30A0();
  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_21C5E2EC0() - 8) + 80);
  return sub_21C5C2B6C(a1, (uint64_t)v1 + ((v7 + 48) & ~v7), v3, v4, v5, v6);
}

uint64_t sub_21C5C2D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[6];

  v7[2] = sub_21C5E30A0();
  v7[3] = a2;
  v4 = sub_21C5E2DD0();
  sub_21C52951C(a1, (uint64_t)sub_21C536CD4, (uint64_t)v7, a2, MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v5);
  return v7[5];
}

uint64_t static ModifiedContent<>._mapContentCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(a5 + 40))(a1, sub_21C5C2E98, v10, a3, a5);
  swift_release();
  return v11;
}

uint64_t sub_21C5C2E88()
{
  return swift_deallocObject();
}

uint64_t sub_21C5C2E98()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 32) + 40))();
}

uint64_t sub_21C5C2EC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static ModifiedContent<>._makeMapContent(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16), a5);
}

uint64_t sub_21C5C2ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ModifiedContent<>._mapContentCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t MapContent.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, a3);
  return sub_21C5E3094();
}

uint64_t ModifiedContent<>.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 32))(*(_QWORD *)(a1 + 16));
}

_UNKNOWN **sub_21C5C2FE4()
{
  return &protocol witness table for Never;
}

uint64_t sub_21C5C2FF0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x22077F9A0](&protocol conformance descriptor for <> ModifiedContent<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C5C3030()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_21C5C3054(uint64_t a1, uint64_t a2)
{
  return ModifiedContent<>.data.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_21C5C305C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];

  v4 = a3[1];
  v6[0] = *(_QWORD *)(*a3 + 8);
  v6[1] = v4;
  result = MEMORY[0x22077F9A0](&protocol conformance descriptor for <> ModifiedContent<A, B>, a2, v6);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of _MapContentModifier.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static _MapContentModifier._makeMapContent(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of static _MapContentModifier._mapContentCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t sub_21C5C30D4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21C5C3150(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(_QWORD *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t sub_21C5C31E4(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t sub_21C5C3230(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_21C5C3288(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_21C5C32E0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_21C5C3338(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_21C5C3390(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v11 + 1);
}

void sub_21C5C34D0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for _TraitWritingMapContentModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TraitWritingMapContentModifier);
}

uint64_t sub_21C5C36B0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21C5C372C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_21C5C37E8(uint64_t a1, uint64_t a2)
{
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_21C5C382C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_retain();
  v9(v7, v8, v4);
  return a1;
}

_QWORD *sub_21C5C389C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *sub_21C5C390C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_21C5C395C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t sub_21C5C39C4(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21C5C3A98 + 4 * byte_21C5EACCE[(v9 - 1)]))();
}

void sub_21C5C3B08(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for _EnvironmentKeyWritingMapContentModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _EnvironmentKeyWritingMapContentModifier);
}

uint64_t sub_21C5C3D08(unsigned int *a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD v22[6];
  _DWORD v23[2];
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v11 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C522EFC(a2, (uint64_t)v13);
  type metadata accessor for _TraitWritingMapContentModifier(0, a5, a6, v14);
  v15 = sub_21C52BB38(a1);
  v16 = *(_DWORD *)(a2 + *(int *)(v11 + 28));
  v23[0] = v15;
  v23[1] = v16;
  v18 = type metadata accessor for _TraitWritingMapContentModifier.AddTrait(0, a5, a6, v17);
  v25 = v18;
  v26 = MEMORY[0x22077F9A0](&unk_21C5EB010, v18);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_255287F00);
  sub_21C52951C((uint64_t)v23, (uint64_t)sub_21C5C4F78, (uint64_t)v24, v18, MEMORY[0x24BEE4078], v19, MEMORY[0x24BEE40A8], v20);
  *(_DWORD *)&v13[*(int *)(v11 + 28)] = v22[5];
  a3(v13);
  return sub_21C5233A4((uint64_t)v13);
}

uint64_t sub_21C5C3E90(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_21C5C3EB4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Value;

  v3 = HIDWORD(a1);
  v4 = *MEMORY[0x24BE096C0];
  v5 = sub_21C5E34E4();
  v6 = v5;
  if (v4 == (_DWORD)v3)
  {
    v7 = *(_QWORD *)(v5 - 8);
    v8 = 1;
  }
  else
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, Value, v6);
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v8, 1, v6);
}

uint64_t sub_21C5C3F44@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Value;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v23 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v21 - v8;
  v11 = type metadata accessor for _TraitWritingMapContentModifier(0, a2, a3, v10);
  v21 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v21 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25528A5B0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C5C3EB4(a1, (uint64_t)v16);
  v17 = sub_21C5E34E4();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_21C5E34D8();
    sub_21C524980((uint64_t)v16, (uint64_t *)&unk_25528A5B0);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v24, v16, v17);
  }
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v13, Value, v11);
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v9, v13, v23);
  return sub_21C5E34FC();
}

uint64_t sub_21C5C4124@<X0>(uint64_t a1@<X8>)
{
  return sub_21C5C4F00((uint64_t (*)(_QWORD))MEMORY[0x24BDF0828], a1);
}

uint64_t sub_21C5C4130@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;

  return sub_21C5C3F44(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

void sub_21C5C4140()
{
  sub_21C5E3D48();
  __break(1u);
}

uint64_t sub_21C5C4188(unsigned int *a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5)
{
  return sub_21C5C3D08(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t sub_21C5C4194(uint64_t a1, uint64_t (*a2)(void))
{
  return sub_21C5C3E90(a1, a2);
}

uint64_t sub_21C5C41AC@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *);
  unsigned int *v39;
  _BYTE v40[4];
  uint64_t v41;

  v37 = a4;
  v38 = (void (*)(char *))a3;
  v39 = a1;
  v36 = a6;
  v41 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for _EnvironmentKeyWritingMapContentModifier(255, a5, a3, a4);
  v8 = sub_21C5E3BB0();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - v9;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552882A8);
  v11 = *(_QWORD *)(v35 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v35);
  v13 = (int *)((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for ChildEnvironment(0, a5, v14, v15);
  v34 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (_DWORD *)((char *)&v33 - v17);
  v19 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C522EFC(a2, (uint64_t)v21);
  v22 = sub_21C52BB38(v39);
  sub_21C5E32B0();
  if (v12 != 4)
    __break(1u);
  v23 = *v13;
  v24 = v35;
  (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(&v33 - 2, v35);
  v27 = type metadata accessor for _EnvironmentKeyWritingMapContentModifier(0, a5, v25, v26);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v10, 1, 1, v27);
  v28 = sub_21C5C4470(v22, v23, (uint64_t)v10, a5, v18);
  v29 = MEMORY[0x24BDAC7A8](v28);
  *(&v33 - 2) = v16;
  *(&v33 - 1) = MEMORY[0x22077F9A0](&unk_21C5EB050, v16, v29);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528A908);
  sub_21C52951C((uint64_t)v18, (uint64_t)sub_21C5C4F48, (uint64_t)(&v33 - 4), v16, MEMORY[0x24BEE4078], v30, MEMORY[0x24BEE40A8], v31);
  (*(void (**)(_DWORD *, uint64_t))(v34 + 8))(v18, v16);
  (*(void (**)(int *, _BYTE *, uint64_t))(v11 + 16))(v13, v40, v24);
  sub_21C5E32BC();
  v38(v21);
  return sub_21C5233A4((uint64_t)v21);
}

uint64_t sub_21C5C4470@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a5 = a1;
  a5[1] = a2;
  v7 = (char *)a5 + *(int *)(type metadata accessor for ChildEnvironment(0, a4, a3, a4) + 32);
  type metadata accessor for _EnvironmentKeyWritingMapContentModifier(255, a4, v8, v9);
  v10 = sub_21C5E3BB0();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, a3, v10);
}

uint64_t sub_21C5C44E0@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_21C5C41AC(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), a6);
}

uint64_t type metadata accessor for ChildEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChildEnvironment);
}

uint64_t sub_21C5C44F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t Value;
  char v31;
  char v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  void (*v69)(char *, uint64_t, uint64_t);
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v3 = sub_21C5E328C();
  v85 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v74 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = a1;
  v72 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
  MEMORY[0x24BDAC7A8](v5);
  v73 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = v7;
  v10 = type metadata accessor for _EnvironmentKeyWritingMapContentModifier(255, v7, v8, v9);
  v80 = sub_21C5E3BB0();
  v83 = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80);
  v67 = (char *)&v64 - v11;
  v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528AA20);
  MEMORY[0x24BDAC7A8](v82);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v75 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v70 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v71 = (char *)&v64 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v66 = (char *)&v64 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v68 = (char *)&v64 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v64 - v23;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v64 - v26;
  v29 = *(int *)(v28 + 48);
  Value = AGGraphGetValue();
  v32 = v31;
  v84 = *(_QWORD **)(v10 - 8);
  v33 = (void (*)(char *, uint64_t, uint64_t))v84[2];
  v33(v27, Value, v10);
  v27[v29] = v32 & 1;
  v34 = v32 & 1;
  v35 = *(int *)(v82 + 48);
  v82 = v1;
  v36 = AGGraphGetValue();
  v38 = v37;
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 16);
  v78 = v3;
  v69 = v39;
  v39(v13, v36, v3);
  v76 = v27;
  v77 = v13;
  v13[v35] = v38 & 1;
  v40 = *(int *)(TupleTypeMetadata2 + 48);
  v33(v24, (uint64_t)v27, v10);
  v24[v40] = v34;
  if ((v38 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v75 + 8))(v24, TupleTypeMetadata2);
    v44 = v78;
  }
  else
  {
    v41 = *(int *)(TupleTypeMetadata2 + 48);
    v42 = v68;
    v33(v68, (uint64_t)v24, v10);
    v42[v41] = v34;
    if (v34)
    {
      v65 = v34;
      v45 = v67;
      v46 = v80;
      (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v67, v82 + *(int *)(v81 + 32), v80);
      v47 = *(int *)(TupleTypeMetadata2 + 48);
      v48 = v66;
      v49 = ((uint64_t (*)(char *, char *, uint64_t))v33)(v66, v42, v10);
      v64 = (uint64_t)&v64;
      v48[v47] = 1;
      MEMORY[0x24BDAC7A8](v49);
      *(&v64 - 2) = v79;
      *(&v64 - 1) = (uint64_t)v48;
      sub_21C537458((void (*)(char *, char *))sub_21C5C5C94, (uint64_t)(&v64 - 4), MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], v50, (uint64_t)&v86);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v45, v46);
      v43 = *(void (**)(char *, uint64_t))(v75 + 8);
      v43(v42, TupleTypeMetadata2);
      v43(v24, TupleTypeMetadata2);
      v43(v48, TupleTypeMetadata2);
      if (v86 == 2)
      {
        v44 = v78;
        LOBYTE(v34) = v65;
        goto LABEL_10;
      }
      v44 = v78;
      LOBYTE(v34) = v65;
      if ((v86 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      v43 = *(void (**)(char *, uint64_t))(v75 + 8);
      v43(v42, TupleTypeMetadata2);
      v43(v24, TupleTypeMetadata2);
      v44 = v78;
    }
    if (AGGraphGetOutputValue())
    {
      sub_21C524980((uint64_t)v77, &qword_25528AA20);
      return ((uint64_t (*)(char *, uint64_t))v43)(v76, TupleTypeMetadata2);
    }
  }
LABEL_10:
  v52 = *(int *)(TupleTypeMetadata2 + 48);
  v53 = (void (*)(char *, char *, uint64_t))v33;
  v54 = v71;
  v55 = v76;
  v53(v71, v76, v10);
  v54[v52] = v34;
  v56 = (void (*)(char *, uint64_t))v84[1];
  swift_retain();
  v56(v54, v10);
  v57 = *(int *)(TupleTypeMetadata2 + 48);
  v58 = v70;
  v53(v70, v55, v10);
  v58[v57] = v34;
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v73, &v58[*(int *)(v10 + 28)], v79);
  v56(v58, v10);
  v59 = (uint64_t)v77;
  swift_setAtWritableKeyPath();
  swift_release();
  v60 = v74;
  v69(v74, v59, v44);
  AGGraphSetOutputValue();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v60, v44);
  sub_21C524980(v59, &qword_25528AA20);
  v61 = v82 + *(int *)(v81 + 32);
  (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v61, v80);
  v62 = v84;
  v63 = (void (*)(char *, char *, uint64_t))v84[4];
  v63(v54, v55, v10);
  v63((char *)v61, v54, v10);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v62[7])(v61, 0, 1, v10);
}

uint64_t sub_21C5C4B24@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, __n128);
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, __n128);
  char *v41;
  uint64_t (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char v45;
  void (*v46)(char *, uint64_t);
  uint64_t result;
  char v48;
  void (*v49)(char *, uint64_t, uint64_t, __n128);
  char *v50;
  void (*v51)(char *, uint64_t, uint64_t, __n128);
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v57 = a4;
  v5 = a1;
  v59 = (uint64_t)a1;
  v63 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a3 - 8);
  v60 = a3;
  v56 = v6;
  MEMORY[0x24BDAC7A8](a1);
  v51 = (void (*)(char *, uint64_t, uint64_t, __n128))((char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v8);
  v50 = (char *)&v49 - v9;
  v13 = type metadata accessor for _EnvironmentKeyWritingMapContentModifier(0, v10, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v58 = (char *)&v49 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v55 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (void (**)(char *, uint64_t, uint64_t, __n128))((char *)&v49 - v21);
  v62 = *v5;
  v24 = *(int *)(v23 + 48);
  v25 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16);
  v52 = a2;
  v25((char *)&v49 - v21, a2, v13, v20);
  v53 = v24;
  *((_BYTE *)v22 + v24) = *(_BYTE *)(a2 + v24);
  v26 = *v22;
  v27 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  swift_retain();
  swift_retain();
  v54 = v27;
  v27((char *)v22, v13);
  v61 = v26;
  sub_21C5E328C();
  v28 = v58;
  sub_21C5E3D24();
  LOBYTE(v5) = sub_21C5E3934();
  swift_release();
  swift_release();
  ((void (*)(char *, uint64_t, uint64_t))v25)(v28, v59, v13);
  v59 = TupleTypeMetadata2;
  v29 = *(int *)(TupleTypeMetadata2 + 48);
  v30 = v52;
  v31 = v13;
  v49 = v25;
  ((void (*)(char *, uint64_t, uint64_t))v25)(v18, v52, v13);
  v32 = *(_BYTE *)(v30 + v53);
  v33 = v18;
  v18[v29] = v32;
  if ((v5 & 1) != 0)
  {
    v34 = v31;
    v35 = &v28[*(int *)(v31 + 28)];
    v36 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
    v37 = (uint64_t)v50;
    v38 = v60;
    v36(v50, v35, v60);
    v39 = *(int *)(v59 + 48);
    ((void (*)(_QWORD *, char *, uint64_t))v49)(v22, v18, v34);
    *((_BYTE *)v22 + v39) = v32;
    v40 = v51;
    v36((char *)v51, (char *)v22 + *(int *)(v34 + 28), v38);
    v41 = (char *)v22;
    v42 = v54;
    v43 = v54(v41, v34);
    MEMORY[0x24BDAC7A8](v43);
    *(&v49 - 4) = (void (*)(char *, uint64_t, uint64_t, __n128))v38;
    *(&v49 - 3) = v40;
    *((_DWORD *)&v49 - 4) = 2;
    sub_21C52951C(v37, (uint64_t)sub_21C5C5CB0, (uint64_t)(&v49 - 6), v38, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], v44);
    v45 = v62;
    v46 = *(void (**)(char *, uint64_t))(v56 + 8);
    v46((char *)v40, v38);
    v46((char *)v37, v38);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v33, v59);
    result = v42(v58, v34);
    v48 = v45 ^ 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v55 + 8))(v18, v59);
    result = v54(v28, v31);
    v48 = 1;
  }
  *v57 = v48 & 1;
  return result;
}

uint64_t sub_21C5C4EF4@<X0>(uint64_t a1@<X8>)
{
  return sub_21C5C4F00((uint64_t (*)(_QWORD))MEMORY[0x24BDEE4F8], a1);
}

uint64_t sub_21C5C4F00@<X0>(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

unint64_t sub_21C5C4F40()
{
  return sub_21C5C5D40();
}

uint64_t sub_21C5C4F48(uint64_t a1, uint64_t a2)
{
  return sub_21C5C4F9C(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BDEE4F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_21C5295A8);
}

uint64_t type metadata accessor for _TraitWritingMapContentModifier.AddTrait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TraitWritingMapContentModifier.AddTrait);
}

uint64_t sub_21C5C4F78(uint64_t a1, uint64_t a2)
{
  return sub_21C5C4F9C(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BDF0828], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_21C55D7D0);
}

uint64_t sub_21C5C4F9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v10 = a3(0);
  return a4(a1, v10, v9, v8, a2);
}

unint64_t sub_21C5C500C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25528A918[0];
  if (!qword_25528A918[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528A910);
    result = MEMORY[0x22077F9A0](&unk_21C5EAEC0, v1);
    atomic_store(result, qword_25528A918);
  }
  return result;
}

uint64_t sub_21C5C5058(uint64_t a1)
{
  uint64_t v1;

  return sub_21C5C2D6C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_21C5C5064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  type metadata accessor for _EnvironmentKeyWritingMapContentModifier(255, *(_QWORD *)(a1 + 16), a3, a4);
  result = sub_21C5E3BB0();
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_21C5C50EC(_DWORD *a1, int *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(unint64_t, unint64_t, uint64_t);

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v9 = v6 + 8;
  v10 = ((v7 + 8) & ~v7) + *(_QWORD *)(v5 + 64);
  v11 = v6 & 0x100000;
  if (v7 <= 7 && v11 == 0 && (v8 & (v7 + 8)) + v10 <= 0x18)
  {
    v15 = *(unsigned int *)(v5 + 84);
    v17 = *a2;
    v16 = (unint64_t)a2 + 7;
    v18 = ~v7;
    *a1 = v17;
    v19 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v19 = *(_DWORD *)(v16 & 0xFFFFFFFFFFFFFCLL);
    v20 = (_QWORD *)(v8 & ((unint64_t)v19 + 11));
    v21 = (uint64_t *)(v8 & ((v16 & 0xFFFFFFFFFFFFFCLL) + 11));
    if ((v15 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v21 + v9) & v18, v15, v4))
      {
LABEL_14:
        memcpy(v20, v21, v10);
        return v3;
      }
    }
    else
    {
      v22 = *v21;
      if ((unint64_t)*v21 >= 0xFFFFFFFF)
        LODWORD(v22) = -1;
      if ((_DWORD)v22 != -1)
        goto LABEL_14;
    }
    *v20 = *v21;
    v23 = ((unint64_t)v20 + v9) & v18;
    v24 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v24(v23, ((unint64_t)v21 + v9) & v18, v4);
    return v3;
  }
  v14 = *(_QWORD *)a2;
  *v3 = *(_QWORD *)a2;
  v3 = (_QWORD *)(v14 + (v8 & (v7 + 16)));
  swift_retain();
  return v3;
}

uint64_t sub_21C5C522C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (uint64_t *)((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + (v4 | 7) + 4) & ~(v4 | 7));
  v6 = ~v4;
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)v5 + v4 + 8) & v6);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(((unint64_t)v5 + v4 + 8) & v6, v2);
  }
  v7 = *v5;
  if ((unint64_t)*v5 >= 0xFFFFFFFF)
    LODWORD(v7) = -1;
  result = (v7 + 1);
  if ((_DWORD)v7 == -1)
    goto LABEL_7;
  return result;
}

_DWORD *sub_21C5C52E8(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, unint64_t, uint64_t);

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 4;
  v10 = (_QWORD *)(((unint64_t)v4 + v9) & ~(v8 | 7));
  v11 = (uint64_t *)(((unint64_t)v5 + v9) & ~(v8 | 7));
  v12 = ~v8;
  v13 = v8 + 8;
  v14 = *(_QWORD *)(v7 + 64);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    v15 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF)
      LODWORD(v15) = -1;
    if ((_DWORD)v15 != -1)
      goto LABEL_5;
LABEL_7:
    *v10 = *v11;
    v16 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    v16(((unint64_t)v10 + v13) & v12, ((unint64_t)v11 + v13) & v12, v6);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v11 + v13) & v12))
    goto LABEL_7;
LABEL_5:
  memcpy(v10, v11, (v13 & ~v8) + v14);
  return a1;
}

_DWORD *sub_21C5C53F4(_DWORD *a1, int *a2, uint64_t a3)
{
  _DWORD *v3;
  unint64_t v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t (*v20)(unint64_t, uint64_t, uint64_t);
  int v21;
  void (*v22)(unint64_t, unint64_t, uint64_t);

  v3 = a1;
  v5 = *a2;
  v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + 4;
  v11 = (_QWORD *)(((unint64_t)v6 + v10) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + (v4 & 0xFFFFFFFFFFFFFFFCLL)) & ~(v9 | 7));
  v13 = *(unsigned int *)(v8 + 84);
  v14 = ~v9;
  v15 = v9 + 8;
  v16 = ((v9 + 8) & ~v9) + *(_QWORD *)(v8 + 64);
  if ((v13 & 0x80000000) != 0)
  {
    v19 = ((v9 + 8) & ~v9) + *(_QWORD *)(v8 + 64);
    v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    v21 = v20(((unint64_t)v11 + v15) & v14, v13, v7);
    v18 = v20(((unint64_t)v12 + v15) & v14, v13, v7);
    v16 = v19;
    v3 = a1;
    if (!v21)
    {
LABEL_5:
      if (!v18)
      {
        *v11 = *v12;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
        return v3;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v11 + v15) & v14, v7);
      goto LABEL_9;
    }
  }
  else
  {
    v17 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v17) = -1;
    v18 = v17 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v18)
  {
    *v11 = *v12;
    v22 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    swift_retain();
    v22(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
    return v3;
  }
LABEL_9:
  memcpy(v11, v12, v16);
  return v3;
}

_DWORD *sub_21C5C55A4(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 4;
  v10 = (_QWORD *)(((unint64_t)v4 + v9) & ~(v8 | 7));
  v11 = (uint64_t *)(((unint64_t)v5 + v9) & ~(v8 | 7));
  v12 = ~v8;
  v13 = v8 + 8;
  v14 = *(_QWORD *)(v7 + 64);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    v15 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF)
      LODWORD(v15) = -1;
    if ((_DWORD)v15 != -1)
      goto LABEL_5;
LABEL_7:
    *v10 = *v11;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v10 + v13) & v12, ((unint64_t)v11 + v13) & v12, v6);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v11 + v13) & v12))
    goto LABEL_7;
LABEL_5:
  memcpy(v10, v11, (v13 & ~v8) + v14);
  return a1;
}

_DWORD *sub_21C5C56A4(_DWORD *a1, int *a2, uint64_t a3)
{
  _DWORD *v3;
  unint64_t v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t (*v20)(unint64_t, uint64_t, uint64_t);
  int v21;

  v3 = a1;
  v5 = *a2;
  v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + 4;
  v11 = (_QWORD *)(((unint64_t)v6 + v10) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + (v4 & 0xFFFFFFFFFFFFFFFCLL)) & ~(v9 | 7));
  v13 = *(unsigned int *)(v8 + 84);
  v14 = ~v9;
  v15 = v9 + 8;
  v16 = ((v9 + 8) & ~v9) + *(_QWORD *)(v8 + 64);
  if ((v13 & 0x80000000) != 0)
  {
    v19 = ((v9 + 8) & ~v9) + *(_QWORD *)(v8 + 64);
    v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    v21 = v20(((unint64_t)v11 + v15) & v14, v13, v7);
    v18 = v20(((unint64_t)v12 + v15) & v14, v13, v7);
    v16 = v19;
    v3 = a1;
    if (!v21)
    {
LABEL_5:
      if (!v18)
      {
        *v11 = *v12;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
        return v3;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v11 + v15) & v14, v7);
      goto LABEL_9;
    }
  }
  else
  {
    v17 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v17) = -1;
    v18 = v17 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v18)
  {
    *v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
    return v3;
  }
LABEL_9:
  memcpy(v11, v12, v16);
  return v3;
}

uint64_t sub_21C5C5838(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v7 | 7;
  v9 = v7 + 8;
  if (v6 - 1 >= a2)
    goto LABEL_24;
  v10 = (v9 & ~v7) + *(_QWORD *)(v4 + 64) + (v9 & ~v8);
  v11 = 8 * v10;
  if (v10 > 3)
    goto LABEL_7;
  v14 = (((1 << v11) + a2 - v6) >> v11) + 1;
  if (HIWORD(v14))
  {
    v12 = *(_DWORD *)(a1 + v10);
    if (v12)
      goto LABEL_15;
LABEL_24:
    v17 = (unint64_t *)((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v8 + 4) & ~v8);
    if ((v5 & 0x80000000) != 0)
    {
      v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v9) & ~v7);
    }
    else
    {
      v18 = *v17;
      if (v18 >= 0xFFFFFFFF)
        LODWORD(v18) = -1;
      v19 = v18 + 1;
    }
    if (v19 >= 2)
      return v19 - 1;
    else
      return 0;
  }
  if (v14 > 0xFF)
  {
    v12 = *(unsigned __int16 *)(a1 + v10);
    if (*(_WORD *)(a1 + v10))
      goto LABEL_15;
    goto LABEL_24;
  }
  if (v14 < 2)
    goto LABEL_24;
LABEL_7:
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_24;
LABEL_15:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if ((_DWORD)v10)
  {
    if (v10 <= 3)
      v16 = (v9 & ~(_DWORD)v7) + *(_DWORD *)(v4 + 64) + (v9 & ~(_DWORD)v8);
    else
      v16 = 4;
    __asm { BR              X12 }
  }
  return (v15 + v6);
}

void sub_21C5C59C8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = v6 - 1;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = ((v8 + 8) & ~v8) + *(_QWORD *)(v5 + 64);
  v10 = v9 + ((v8 + 8) & ~(v8 | 7));
  if (v6 - 1 >= a3)
  {
    v11 = 0;
  }
  else
  {
    v11 = 1u;
    if (v10 <= 3)
    {
      v12 = (((v11 << (8 * v10)) + a3 - v6) >> (8 * v10)) + 1;
      if (HIWORD(v12))
      {
        v11 = 4u;
        if (v7 >= a2)
          goto LABEL_21;
      }
      else
      {
        if (v12 >= 0x100)
          v11 = 2;
        else
          v11 = v12 > 1;
        if (v7 >= a2)
LABEL_21:
          __asm { BR              X17 }
      }
LABEL_14:
      v13 = a2 - v6;
      if (v10 < 4)
      {
        if ((_DWORD)v10)
        {
          v14 = v13 & ~(-1 << (8 * v10));
          bzero(a1, v10);
          if ((_DWORD)v10 == 3)
          {
            *a1 = v14;
            *((_BYTE *)a1 + 2) = BYTE2(v14);
          }
          else if ((_DWORD)v10 == 2)
          {
            *a1 = v14;
          }
          else
          {
            *(_BYTE *)a1 = v14;
          }
        }
      }
      else
      {
        bzero(a1, v9 + ((v8 + 8) & ~(v8 | 7)));
        *(_DWORD *)a1 = v13;
      }
      __asm { BR              X10 }
    }
  }
  if (v7 >= a2)
    goto LABEL_21;
  goto LABEL_14;
}

void sub_21C5C5BF4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x21C5C5C5CLL);
}

void sub_21C5C5BFC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21C5C5C5CLL);
}

void sub_21C5C5C04()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21C5C5C5CLL);
}

void sub_21C5C5C30()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x21C5C5C5CLL);
}

void sub_21C5C5C40()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x21C5C5C5CLL);
}

void sub_21C5C5C48()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x21C5C5C5CLL);
}

void sub_21C5C5C74()
{
  JUMPOUT(0x22077F9A0);
}

void sub_21C5C5C84()
{
  JUMPOUT(0x22077F9A0);
}

uint64_t sub_21C5C5C94@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_21C5C4B24(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_21C5C5CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(_DWORD *)(v8 + 32);
  v13 = *(_QWORD *)(v8 + 16);
  v14 = a1;
  v15 = v10;
  return sub_21C52951C(v9, (uint64_t)sub_21C5C5D04, (uint64_t)&v12, v13, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], a8);
}

uint64_t sub_21C5C5D04@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AGCompareValues();
  *a1 = result;
  return result;
}

unint64_t sub_21C5C5D40()
{
  sub_21C5E3C64();
  swift_bridgeObjectRelease();
  sub_21C5E3E80();
  sub_21C5E3988();
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

uint64_t MapZoomStepper.init(scope:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t KeyPath;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a3 = KeyPath;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = result;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = a1;
  *(_BYTE *)(a3 + 40) = a2 & 1;
  return result;
}

uint64_t MapZoomStepper.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  __int16 v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE v30[12];
  int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = a1;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528AA28);
  MEMORY[0x24BDAC7A8](v35);
  v3 = &v30[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552880B8);
  MEMORY[0x24BDAC7A8](v4);
  v33 = &v30[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552880C0);
  MEMORY[0x24BDAC7A8](v36);
  v7 = (uint64_t *)&v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v34 = &v30[-v9];
  v10 = (int *)type metadata accessor for MapControlsConfig();
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v30[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *(_QWORD *)v1;
  v14 = *(_BYTE *)(v1 + 8);
  v15 = *(_QWORD *)(v1 + 16);
  v16 = *(_BYTE *)(v1 + 24);
  v32 = *(_QWORD *)(v1 + 32);
  v31 = *(unsigned __int8 *)(v1 + 40);
  sub_21C531A90(v13, v14);
  sub_21C531A90(v15, v16);
  sub_21C531A90(v15, v16);
  v17 = sub_21C52D7BC(v15, v16);
  sub_21C531A84(v15, v16);
  sub_21C531A84(v13, v14);
  sub_21C531A84(v15, v16);
  if (v17 == 3)
    v18 = 0;
  else
    v18 = v17;
  v19 = type metadata accessor for MapPitchToggleConfig(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v12, 1, 1, v19);
  v20 = &v12[v10[5]];
  v21 = type metadata accessor for MapScaleViewConfig(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = &v12[v10[6]];
  v23 = type metadata accessor for MapUserLocationButtonConfig(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v24 = &v12[v10[7]];
  v25 = type metadata accessor for MapCompassConfig(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  *(_WORD *)&v12[v10[8]] = (v18 << 8) | 1;
  *(_WORD *)&v12[v10[9]] = 2;
  *(_WORD *)&v12[v10[10]] = 2;
  sub_21C531A90(v13, v14);
  sub_21C531A90(v15, v16);
  sub_21C531A90(v13, v14);
  LOBYTE(v24) = sub_21C52D604(v13, v14);
  sub_21C531A84(v13, v14);
  sub_21C531A84(v13, v14);
  sub_21C531A84(v15, v16);
  if ((v24 & 1) != 0)
  {
    v26 = sub_21C5E3724();
    v27 = v33;
    sub_21C53276C((uint64_t)v12, (uint64_t)v33);
    sub_21C531B18((uint64_t)v27, (uint64_t)v7 + *(int *)(v36 + 36), &qword_2552880B8);
    *v7 = v26;
    sub_21C524980((uint64_t)v27, &qword_2552880B8);
    v28 = v34;
    sub_21C5327B0((uint64_t)v7, (uint64_t)v34);
    sub_21C531B18((uint64_t)v28, (uint64_t)v3, &qword_2552880C0);
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25528AA30);
    sub_21C52D9D4();
    sub_21C5C6288();
    sub_21C5E33E8();
    sub_21C524980((uint64_t)v28, &qword_2552880C0);
  }
  else
  {
    *(_QWORD *)v3 = swift_getKeyPath();
    v3[8] = 0;
    *((_QWORD *)v3 + 2) = v32;
    v3[24] = v31;
    v3[25] = 1;
    v3[26] = v18;
    *(_WORD *)(v3 + 27) = 257;
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25528AA30);
    sub_21C52D9D4();
    sub_21C5C6288();
    sub_21C5E33E8();
  }
  return sub_21C532730((uint64_t)v12);
}

unint64_t sub_21C5C6288()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25528AA38;
  if (!qword_25528AA38)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528AA30);
    v2[0] = sub_21C5C62F4();
    v2[1] = MEMORY[0x24BDEDB80];
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_25528AA38);
  }
  return result;
}

unint64_t sub_21C5C62F4()
{
  unint64_t result;

  result = qword_25528AA40;
  if (!qword_25528AA40)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EB18C, &type metadata for _MapZoomStepper);
    atomic_store(result, (unint64_t *)&qword_25528AA40);
  }
  return result;
}

uint64_t sub_21C5C6338()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for MapZoomStepper()
{
  return &type metadata for MapZoomStepper;
}

unint64_t sub_21C5C635C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25528AA48;
  if (!qword_25528AA48)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528AA50);
    v2[0] = sub_21C52D9D4();
    v2[1] = sub_21C5C6288();
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_25528AA48);
  }
  return result;
}

ValueMetadata *type metadata accessor for _MapZoomStepper()
{
  return &type metadata for _MapZoomStepper;
}

uint64_t sub_21C5C63D8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t storeEnumTagSinglePayload for MapZoomStepperConfig(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21C5C6434 + 4 * byte_21C5EB095[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_21C5C6468 + 4 * byte_21C5EB090[v4]))();
}

uint64_t sub_21C5C6468(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_21C5C6470(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x21C5C6478);
  return result;
}

uint64_t sub_21C5C6484(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x21C5C648CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21C5C6490(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_21C5C6498(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MapZoomStepperConfig()
{
  return &type metadata for MapZoomStepperConfig;
}

void __swiftcall MapCamera.init(_:)(_MapKit_SwiftUI::MapCamera *__return_ptr retstr, MKMapCamera a2)
{
  double v4;
  Swift::Double v5;
  double v6;
  Swift::Double v7;
  double v8;
  Swift::Double v9;
  double v10;
  Swift::Double v11;
  double v12;
  Swift::Double v13;

  -[objc_class centerCoordinate](a2.super.isa, sel_centerCoordinate);
  v5 = v4;
  v7 = v6;
  -[objc_class centerCoordinateDistance](a2.super.isa, sel_centerCoordinateDistance);
  v9 = v8;
  -[objc_class heading](a2.super.isa, sel_heading);
  v11 = v10;
  -[objc_class pitch](a2.super.isa, sel_pitch);
  v13 = v12;

  retstr->centerCoordinate.latitude = v5;
  retstr->centerCoordinate.longitude = v7;
  retstr->distance = v9;
  retstr->heading = v11;
  retstr->pitch = v13;
}

double MapCamera.centerCoordinate.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void MapCamera.centerCoordinate.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*MapCamera.centerCoordinate.modify())()
{
  return nullsub_1;
}

double MapCamera.distance.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void MapCamera.distance.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*MapCamera.distance.modify())()
{
  return nullsub_1;
}

double MapCamera.heading.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void MapCamera.heading.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*MapCamera.heading.modify())()
{
  return nullsub_1;
}

double MapCamera.pitch.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void MapCamera.pitch.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*MapCamera.pitch.modify())()
{
  return nullsub_1;
}

void __swiftcall MapCamera.init(centerCoordinate:distance:heading:pitch:)(_MapKit_SwiftUI::MapCamera *__return_ptr retstr, __C::CLLocationCoordinate2D centerCoordinate, Swift::Double distance, Swift::Double heading, Swift::Double pitch)
{
  retstr->centerCoordinate.latitude = centerCoordinate.latitude;
  retstr->centerCoordinate.longitude = centerCoordinate.longitude;
  retstr->distance = distance;
  retstr->heading = heading;
  retstr->pitch = pitch;
}

__n128 sub_21C5C65E4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

__n128 sub_21C5C65F4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t MapCameraBounds.init(centerCoordinateBounds:minimumDistance:maximumDistance:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  return sub_21C5C6640(a1, a2, a3, a4, (uint64_t (*)(uint64_t))type metadata accessor for MKCoordinateRegion, &qword_25528AA58, (uint64_t)&unk_21C5EB264, a5, a6, a7, a8, a9);
}

{
  return sub_21C5C6640(a1, a2, a3, a4, (uint64_t (*)(uint64_t))type metadata accessor for MKMapRect, &qword_25528AA60, (uint64_t)&unk_21C5EB248, a5, a6, a7, a8, a9);
}

uint64_t sub_21C5C6640@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t (*a5)(uint64_t)@<X4>, unint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>, double a11@<D2>, double a12@<D3>)
{
  double *v24;
  uint64_t result;
  _QWORD v26[5];

  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)a8 = 0u;
  *(_BYTE *)(a8 + 48) = 1;
  *(_QWORD *)(a8 + 56) = 0;
  *(_BYTE *)(a8 + 64) = 1;
  v26[3] = a5(0);
  v26[4] = sub_21C521E50(a6, a5, a7);
  v24 = (double *)swift_allocObject();
  v26[0] = v24;
  v24[2] = a9;
  v24[3] = a10;
  v24[4] = a11;
  v24[5] = a12;
  result = sub_21C5C6820((uint64_t)v26, a8);
  *(_QWORD *)(a8 + 40) = a1;
  *(_BYTE *)(a8 + 48) = a2 & 1;
  *(_QWORD *)(a8 + 56) = a3;
  *(_BYTE *)(a8 + 64) = a4 & 1;
  return result;
}

double MapCameraBounds.init(minimumDistance:maximumDistance:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  double result;

  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_BYTE *)(a5 + 48) = 1;
  *(_QWORD *)(a5 + 56) = 0;
  *(_BYTE *)(a5 + 64) = 1;
  sub_21C5C6868(a5);
  result = 0.0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = a1;
  *(_BYTE *)(a5 + 48) = a2 & 1;
  *(_QWORD *)(a5 + 56) = a3;
  *(_BYTE *)(a5 + 64) = a4 & 1;
  return result;
}

BOOL _s15_MapKit_SwiftUI0A6CameraV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL), (float64x2_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 24), *(float64x2_t *)(a2 + 24)))), 0xFuLL))) & 1) != 0&& *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

uint64_t sub_21C5C6810()
{
  return swift_deallocObject();
}

uint64_t sub_21C5C6820(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552894F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_21C5C6868(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552894F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21C5C68A8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21C5C68B8()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for MapCamera()
{
  return &type metadata for MapCamera;
}

uint64_t destroy for MapCameraBounds(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    return __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t initializeWithCopy for MapCameraBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for MapCameraBounds(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  v7 = *((_QWORD *)a2 + 5);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *((_QWORD *)a2 + 7);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for MapCameraBounds(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapCameraBounds(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapCameraBounds(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MapCameraBounds()
{
  return &type metadata for MapCameraBounds;
}

uint64_t sub_21C5C6B58()
{
  return sub_21C521E50(&qword_25528AA58, (uint64_t (*)(uint64_t))type metadata accessor for MKCoordinateRegion, (uint64_t)&unk_21C5EB264);
}

uint64_t sub_21C5C6B84()
{
  return sub_21C521E50(&qword_25528AA60, (uint64_t (*)(uint64_t))type metadata accessor for MKMapRect, (uint64_t)&unk_21C5EB248);
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_21C5C6BCC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_21C5C6BD4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for _ResolvedMapCameraRegion.Storage()
{
  return &type metadata for _ResolvedMapCameraRegion.Storage;
}

uint64_t _s15_MapKit_SwiftUI9MapCircleV12LocationAreaOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s15_MapKit_SwiftUI9MapCircleV12LocationAreaOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ResolvedMapCameraRegion()
{
  return &type metadata for _ResolvedMapCameraRegion;
}

void static MapCameraPosition.automatic.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xA000000000000000;
}

BOOL MapCameraPosition.followsUserLocation.getter()
{
  _QWORD *v0;

  return *v0 >> 61 == 4;
}

__n128 static MapCameraPosition.camera(_:)@<Q0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __n128 v6;
  __int128 v7;

  v6 = (__n128)a1[1];
  v7 = *a1;
  v3 = *((_QWORD *)a1 + 4);
  v4 = swift_allocObject();
  result = v6;
  *(_OWORD *)(v4 + 16) = v7;
  *(__n128 *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 48) = v3;
  *a2 = v4 | 0x6000000000000000;
  return result;
}

uint64_t sub_21C5C6D18()
{
  return swift_deallocObject();
}

void MapCameraPosition.camera.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v2 = *v1;
  v3 = *v1 & 0xE000000000000000;
  if (v3 == 0x6000000000000000)
  {
    v5 = *(_OWORD *)(v2 + 16);
    v6 = *(_OWORD *)(v2 + 32);
    v4 = *(_QWORD *)(v2 + 48);
  }
  else
  {
    v4 = 0;
    v5 = 0uLL;
    v6 = 0uLL;
  }
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = v3 != 0x6000000000000000;
}

unint64_t static MapCameraPosition.userLocation(followsHeading:fallback:)@<X0>(char a1@<W0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;

  v5 = *a2;
  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = v5;
  *a3 = v6 | 0x8000000000000000;
  return sub_21C55DA30(v5);
}

uint64_t sub_21C5C6DC0()
{
  uint64_t v0;

  sub_21C55DAAC(*(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

void sub_21C5C6DE4(uint64_t a1)
{
  __asm { BR              X10 }
}

BOOL sub_21C5C6E10(double *a1, unint64_t a2)
{
  return !(a2 >> 61)
      && vabdd_f64(a1[2], *(double *)(a2 + 16)) < 0.00000000999999994
      && vabdd_f64(a1[3], *(double *)(a2 + 24)) < 0.00000000999999994
      && vabdd_f64(a1[4], *(double *)(a2 + 32)) < 0.00000000999999994
      && vabdd_f64(a1[5], *(double *)(a2 + 40)) < 0.00000000999999994;
}

void static MapCameraPosition.== infix(_:_:)(uint64_t *a1)
{
  sub_21C5C6DE4(*a1);
}

void sub_21C5C700C(uint64_t *a1)
{
  sub_21C5C6DE4(*a1);
}

double *static MapCameraPosition.region(_:)@<X0>(double **a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double *result;

  result = (double *)swift_allocObject();
  result[2] = a2;
  result[3] = a3;
  result[4] = a4;
  result[5] = a5;
  *a1 = result;
  return result;
}

uint64_t sub_21C5C7074()
{
  return swift_deallocObject();
}

uint64_t static MapCameraPosition.rect(_:)@<X0>(unint64_t *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t result;

  result = swift_allocObject();
  *(double *)(result + 16) = a2;
  *(double *)(result + 24) = a3;
  *(double *)(result + 32) = a4;
  *(double *)(result + 40) = a5;
  *a1 = result | 0x2000000000000000;
  return result;
}

id static MapCameraPosition.item(_:allowsAutomaticPitch:)@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_BYTE *)(v5 + 24) = a2;
  *a3 = v5 | 0x4000000000000000;
  return a1;
}

uint64_t sub_21C5C7138()
{
  uint64_t v0;

  return swift_deallocObject();
}

void MapCameraPosition.region.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  __int128 v3;
  unint64_t v4;
  __int128 v5;

  v2 = *v1;
  v3 = 0uLL;
  v4 = (unint64_t)*v1 >> 61;
  v5 = 0uLL;
  if (!v4)
  {
    v3 = *(_OWORD *)(v2 + 16);
    v5 = *(_OWORD *)(v2 + 32);
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 32) = v4 != 0;
}

void MapCameraPosition.rect.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  __int128 v5;

  v2 = *v1;
  v3 = *v1 & 0xE000000000000000;
  v4 = 0uLL;
  v5 = 0uLL;
  if (v3 == 0x2000000000000000)
  {
    v4 = *(_OWORD *)(v2 + 16);
    v5 = *(_OWORD *)(v2 + 32);
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 32) = v3 != 0x2000000000000000;
}

void *MapCameraPosition.item.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  if (*(_QWORD *)v0 >> 61 != 2)
    return 0;
  v1 = *(void **)(*(_QWORD *)v0 + 16);
  v2 = v1;
  return v1;
}

BOOL MapCameraPosition.positionedByUser.getter()
{
  _QWORD *v0;

  return *v0 == 0xA000000000000008;
}

uint64_t MapCameraPosition.followsUserHeading.getter()
{
  uint64_t v0;

  if (*(_QWORD *)v0 >> 61 == 4)
    return *(unsigned __int8 *)(*(_QWORD *)v0 + 16);
  else
    return 0;
}

unint64_t MapCameraPosition.fallbackPosition.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t result;

  if (*(_QWORD *)v1 >> 61 == 4)
  {
    v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
    result = sub_21C55DA30(v3);
  }
  else
  {
    v3 = 0xF000000000000007;
  }
  *a1 = v3;
  return result;
}

uint64_t MapCameraPosition.allowsAutomaticPitch.getter()
{
  uint64_t v0;

  if (*(_QWORD *)v0 >> 61 == 2)
    return *(unsigned __int8 *)(*(_QWORD *)v0 + 24);
  else
    return 0;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for MapCameraPosition()
{
  return &type metadata for MapCameraPosition;
}

unint64_t *initializeBufferWithCopyOfBuffer for MapCameraPosition.Storage(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_21C55DA30(*a2);
  *a1 = v3;
  return a1;
}

unint64_t *assignWithCopy for MapCameraPosition.Storage(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_21C55DA30(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_21C55DAAC(v4);
  return a1;
}

unint64_t *assignWithTake for MapCameraPosition.Storage(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_21C55DAAC(v3);
  return a1;
}

uint64_t _s15_MapKit_SwiftUI17MapCameraPositionV7StorageOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7B && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 123);
  v3 = (((*(_QWORD *)a1 >> 57) >> 4) | (8 * ((*(_QWORD *)a1 >> 57) & 8 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7A)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s15_MapKit_SwiftUI17MapCameraPositionV7StorageOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7A)
  {
    *(_QWORD *)result = a2 - 123;
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_21C5C73FC(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 61;
  if (v1 <= 4)
    return v1;
  else
    return (*a1 >> 3) + 5;
}

_QWORD *sub_21C5C7418(_QWORD *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_21C5C7428(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 5)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 61;
  }
  else
  {
    v2 = 8 * (a2 - 5);
    v3 = 0xA000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for MapCameraPosition.Storage()
{
  return &type metadata for MapCameraPosition.Storage;
}

uint64_t sub_21C5C7478()
{
  sub_21C5AB7A0();
  return sub_21C5E3298();
}

void static MapStyle.Elevation.automatic.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static MapStyle.StandardEmphasis.automatic.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static MapStyle.StandardEmphasis.muted.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

double static MapStyle.standard.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v1;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 56) = xmmword_21C5EB370;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

uint64_t static MapStyle.standard(elevation:emphasis:pointsOfInterest:showsTraffic:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *a1;
  v6 = *a2;
  v8 = *a3;
  v7 = a3[1];
  *(_QWORD *)a5 = v5;
  *(_QWORD *)(a5 + 8) = v6;
  *(_QWORD *)(a5 + 16) = v8;
  *(_QWORD *)(a5 + 24) = v7;
  *(_WORD *)(a5 + 32) = a4 & 1;
  *(_QWORD *)(a5 + 40) = 0;
  *(_BYTE *)(a5 + 48) = 1;
  *(_OWORD *)(a5 + 56) = xmmword_21C5EB370;
  *(_QWORD *)(a5 + 72) = 0;
  *(_BYTE *)(a5 + 80) = 0;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

double static MapStyle.imagery.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_21C5E8840;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 56) = xmmword_21C5EB370;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

double static MapStyle.imagery(elevation:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *a1;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = xmmword_21C5E8840;
  *(_WORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v2;
  *(_BYTE *)(a2 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 56) = xmmword_21C5EB370;
  *(_QWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  return result;
}

double static MapStyle.hybrid.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 16) = xmmword_21C5E8840;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

uint64_t static MapStyle.hybrid(elevation:pointsOfInterest:showsTraffic:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v6 = *a2;
  v5 = a2[1];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_OWORD *)(a4 + 16) = xmmword_21C5E8840;
  *(_WORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 48) = 1;
  *(_QWORD *)(a4 + 56) = v4;
  *(_QWORD *)(a4 + 64) = v6;
  *(_QWORD *)(a4 + 72) = v5;
  *(_BYTE *)(a4 + 80) = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t View.mapStyle(_:)()
{
  swift_getKeyPath();
  sub_21C5E3664();
  return swift_release();
}

double sub_21C5C7718@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  __int16 v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  char v10;

  sub_21C5AB7A0();
  sub_21C5E3298();
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = v7;
  result = *(double *)&v8;
  *(_OWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 80) = v10;
  return result;
}

uint64_t sub_21C5C7798(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[7];
  v2 = a1[8];
  sub_21C5318C8(*a1, a1[1], a1[2]);
  sub_21C5318FC(v1, v2);
  sub_21C5AB7A0();
  return sub_21C5E32A4();
}

uint64_t static MapStyle._standard(elevation:emphasis:pointsOfInterest:showsTraffic:showsHiking:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;

  v6 = *a1;
  v7 = *a2;
  v9 = *a3;
  v8 = a3[1];
  if ((a5 & 1) != 0)
    v10 = 256;
  else
    v10 = 0;
  *(_QWORD *)a6 = v6;
  *(_QWORD *)(a6 + 8) = v7;
  *(_QWORD *)(a6 + 16) = v9;
  *(_QWORD *)(a6 + 24) = v8;
  *(_WORD *)(a6 + 32) = v10 & 0xFFFE | a4 & 1;
  *(_QWORD *)(a6 + 40) = 0;
  *(_BYTE *)(a6 + 48) = 1;
  *(_OWORD *)(a6 + 56) = xmmword_21C5EB370;
  *(_QWORD *)(a6 + 72) = 0;
  *(_BYTE *)(a6 + 80) = 0;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t destroy for MapStyle(uint64_t a1)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  result = *(_QWORD *)(a1 + 64);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for MapStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 == 1)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v6;
    *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 64);
  if (v7 == 1)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  }
  else
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v7;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for MapStyle(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int16 v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v4 = *((_QWORD *)a2 + 2);
  if (*(_QWORD *)(a1 + 16) == 1)
  {
    if (v4 == 1)
    {
      v5 = *a2;
      v6 = a2[1];
      *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
      *(_OWORD *)a1 = v5;
      *(_OWORD *)(a1 + 16) = v6;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
      *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v4 == 1)
  {
    sub_21C5C7BB4(a1);
    v7 = *((_WORD *)a2 + 16);
    v8 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_WORD *)(a1 + 32) = v7;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
  }
  v9 = *((_QWORD *)a2 + 5);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 40) = v9;
  v10 = (__int128 *)(a1 + 56);
  v11 = (__int128 *)((char *)a2 + 56);
  v12 = *((_QWORD *)a2 + 8);
  if (*(_QWORD *)(a1 + 64) == 1)
  {
    if (v12 == 1)
    {
      v13 = *v11;
      *(_OWORD *)(a1 + 65) = *(__int128 *)((char *)a2 + 65);
      *v10 = v13;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v12 == 1)
  {
    sub_21C5C7BE4(a1 + 56);
    v14 = *(__int128 *)((char *)a2 + 65);
    *v10 = *v11;
    *(_OWORD *)(a1 + 65) = v14;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  }
  return a1;
}

uint64_t sub_21C5C7BB4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21C5C7BE4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for MapStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 16) == 1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 == 1)
  {
    sub_21C5C7BB4(a1);
LABEL_4:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
    goto LABEL_6;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
LABEL_6:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  if (*(_QWORD *)(a1 + 64) != 1)
  {
    v6 = *(_QWORD *)(a2 + 64);
    if (v6 != 1)
    {
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v6;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      return a1;
    }
    sub_21C5C7BE4(a1 + 56);
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapStyle(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for MapStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MapStyle()
{
  return &type metadata for MapStyle;
}

ValueMetadata *type metadata accessor for MapStyle.Elevation()
{
  return &type metadata for MapStyle.Elevation;
}

ValueMetadata *type metadata accessor for MapStyle.StandardEmphasis()
{
  return &type metadata for MapStyle.StandardEmphasis;
}

uint64_t sub_21C5C7E34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528AAC0);
  v2 = sub_21C5E30A0();
  v4[0] = v1;
  v4[1] = sub_21C5C7E94();
  return MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v2, v4);
}

unint64_t sub_21C5C7E94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25528AAC8[0];
  if (!qword_25528AAC8[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528AAC0);
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDF1028], v1);
    atomic_store(result, qword_25528AAC8);
  }
  return result;
}

ValueMetadata *type metadata accessor for MapStyle.Imagery()
{
  return &type metadata for MapStyle.Imagery;
}

uint64_t destroy for MapStyle.Hybrid()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MapStyle.Hybrid(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MapStyle.Hybrid(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for MapStyle.Hybrid(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapStyle.Hybrid(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapStyle.Hybrid(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MapStyle.Hybrid()
{
  return &type metadata for MapStyle.Hybrid;
}

uint64_t initializeWithCopy for MapStyle.Standard(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MapStyle.Standard(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t assignWithTake for MapStyle.Standard(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapStyle.Standard(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 34))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapStyle.Standard(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 34) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MapStyle.Standard()
{
  return &type metadata for MapStyle.Standard;
}

id sub_21C5C82B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 32);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDB1B0]), sel_initWithElevationStyle_emphasisStyle_, *(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  if (v2)
  {
    v5 = objc_allocWithZone(MEMORY[0x24BDDB170]);
    type metadata accessor for MKPointOfInterestCategory(0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v6 = (void *)sub_21C5E39D0();
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v5, sel_initIncludingCategories_, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!v1)
    {
      v7 = 0;
      goto LABEL_6;
    }
    v8 = objc_allocWithZone(MEMORY[0x24BDDB170]);
    type metadata accessor for MKPointOfInterestCategory(0);
    swift_bridgeObjectRetain_n();
    v6 = (void *)sub_21C5E39D0();
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v8, sel_initExcludingCategories_, v6);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

LABEL_6:
  objc_msgSend(v4, sel_setPointOfInterestFilter_, v7);

  objc_msgSend(v4, sel_setShowsTraffic_, v3);
  return v4;
}

id sub_21C5C8424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(unsigned __int8 *)(v0 + 24);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDB088]), sel_initWithElevationStyle_, *(_QWORD *)v0);
  if (v1)
  {
    v5 = objc_allocWithZone(MEMORY[0x24BDDB170]);
    type metadata accessor for MKPointOfInterestCategory(0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v6 = (void *)sub_21C5E39D0();
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v5, sel_initIncludingCategories_, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!v2)
    {
      v7 = 0;
      goto LABEL_6;
    }
    v8 = objc_allocWithZone(MEMORY[0x24BDDB170]);
    type metadata accessor for MKPointOfInterestCategory(0);
    swift_bridgeObjectRetain_n();
    v6 = (void *)sub_21C5E39D0();
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v8, sel_initExcludingCategories_, v6);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

LABEL_6:
  objc_msgSend(v4, sel_setPointOfInterestFilter_, v7);

  objc_msgSend(v4, sel_setShowsTraffic_, v3);
  return v4;
}

ValueMetadata *type metadata accessor for MapStyleKey()
{
  return &type metadata for MapStyleKey;
}

double sub_21C5C85A4()
{
  double result;

  qword_25528AA68 = 0;
  unk_25528AA70 = 0;
  qword_25528AA78 = 0;
  unk_25528AA80 = MEMORY[0x24BEE4AF8];
  word_25528AA88 = 0;
  qword_25528AA90 = 0;
  byte_25528AA98 = 1;
  result = 0.0;
  *(_OWORD *)&qword_25528AAA0 = xmmword_21C5EB370;
  qword_25528AAB0 = 0;
  byte_25528AAB8 = 0;
  return result;
}

uint64_t sub_21C5C85E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (qword_2552878E8 != -1)
    swift_once();
  v2 = qword_25528AA68;
  v3 = unk_25528AA70;
  v4 = qword_25528AA78;
  v5 = unk_25528AA80;
  v6 = qword_25528AA90;
  v7 = byte_25528AA98;
  v8 = qword_25528AAA0;
  v9 = unk_25528AAA8;
  v10 = qword_25528AAB0;
  *(_QWORD *)a1 = qword_25528AA68;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_WORD *)(a1 + 32) = word_25528AA88;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 80) = byte_25528AAB8;
  sub_21C5318C8(v2, v3, v4);
  return sub_21C5318FC(v8, v9);
}

void sub_21C5C869C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_21C5E3BB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for MapSelectionManagerBox();
}

uint64_t sub_21C5C8700()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_21C5C8728@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, _QWORD *);
  void (*v25)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, _QWORD *);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  id v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;

  v53 = a2;
  v49 = *(_QWORD *)(a1[3] - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v46 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v47 = (char *)&v44 - v5;
  v52 = v6;
  v7 = sub_21C5E3BB0();
  v50 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v48 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v44 - v11;
  v13 = *(a1 - 1);
  v14 = MEMORY[0x24BDAC7A8](v10);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v44 - v17;
  v19 = a1[2];
  v20 = sub_21C5E3BB0();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v44 - v22;
  v24 = *(void (**)(char *, uint64_t, _QWORD *))(v13 + 16);
  v24(v18, v54, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v25(v23, v18, v20);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v25)(v53, v23, v20);
  }
  v28 = v50;
  v27 = v51;
  v45 = v19;
  v29 = v52;
  v30 = *(void (**)(char *, _QWORD *))(v13 + 8);
  v30(v18, a1);
  v24(v16, v54, a1);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v31 = v27;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v12, v16, v27);
    v32 = v48;
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v48, v12, v31);
    v33 = v49;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v32, 1, v29) == 1)
    {
      v34 = *(void (**)(char *, uint64_t))(v28 + 8);
      v34(v12, v31);
      v34(v32, v31);
    }
    else
    {
      v35 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      v36 = v47;
      v35(v47, v32, v29);
      (*(void (**)(id *__return_ptr, uint64_t))(a1[5] + 16))(&v55, v29);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v31);
      v37 = v55;

      if (!v37)
      {
        v35(v46, v36, v29);
        v41 = v53;
        v42 = v45;
        v43 = swift_dynamicCast();
        v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56);
        if (v43)
        {
          v39 = v41;
          v40 = 0;
        }
        else
        {
          v39 = v41;
          v40 = 1;
        }
        return v38(v39, v40, 1);
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v29);
    }
  }
  else
  {
    v30(v16, a1);
  }
  v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56);
  v39 = v53;
  v40 = 1;
  return v38(v39, v40, 1);
}

uint64_t sub_21C5C8A98@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 24);
  v31 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v29 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_21C5E3BB0();
  v30 = *(_QWORD *)(v32 - 8);
  v8 = MEMORY[0x24BDAC7A8](v32);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v29 - v12;
  v14 = *(_QWORD *)(a1 - 8);
  v15 = MEMORY[0x24BDAC7A8](v11);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v29 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v20((char *)&v29 - v18, v3, a1);
  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    *a2 = *(_QWORD *)v19;
    return result;
  }
  v22 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  v22(v19, a1);
  v20(v17, v3, a1);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    result = v22(v17, a1);
    v26 = a2;
    goto LABEL_7;
  }
  v23 = v30;
  v24 = v32;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v13, v17, v32);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v10, v13, v24);
  v25 = v31;
  v26 = a2;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v10, 1, v6) == 1)
  {
    v27 = *(void (**)(char *, uint64_t))(v23 + 8);
    v27(v13, v24);
    result = ((uint64_t (*)(char *, uint64_t))v27)(v10, v24);
LABEL_7:
    *v26 = 0;
    return result;
  }
  v28 = v29;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v29, v10, v6);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(v6);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v13, v24);
}

void sub_21C5C8D00(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_21C5E3BB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for MapSelectionManagerBox();
}

uint64_t sub_21C5C8D68()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_21C5C8D90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v7 = sub_21C5E3BB0();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, v6, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 56))(a2, 1, 1);
  }
}

uint64_t sub_21C5C8E64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  void (*v12)(char *, uint64_t);
  _BOOL8 v13;
  uint64_t v15;

  v2 = v1;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v15 - v8;
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)&v15 - v8, v2, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v9, a1);
  if (EnumCaseMultiPayload == 1)
    return 1;
  v10(v7, v2, a1);
  v13 = swift_getEnumCaseMultiPayload() == 2;
  v12(v7, a1);
  return v13;
}

uint64_t sub_21C5C8F60@<X0>(uint64_t (*a1)(void)@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result & 1;
  return result;
}

uint64_t sub_21C5C8F8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  void (*v12)(char *, uint64_t);
  _BOOL8 v13;
  uint64_t v15;

  v2 = v1;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v15 - v8;
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)&v15 - v8, v2, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v9, a1);
  if (!EnumCaseMultiPayload)
    return 1;
  v10(v7, v2, a1);
  v13 = swift_getEnumCaseMultiPayload() == 2;
  v12(v7, a1);
  return v13;
}

uint64_t sub_21C5C9084(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void **v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void (*v13)(char *, char *, uint64_t);
  int EnumCaseMultiPayload;
  void (*v15)(char *, uint64_t);
  id v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void **, uint64_t, uint64_t);
  id v20;
  uint64_t v22;
  void *v23;

  v3 = v2;
  v5 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void **)MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v22 - v10;
  v12 = *v9;
  v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v13((char *)&v22 - v10, v3, a2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  if (EnumCaseMultiPayload)
  {
    v15(v11, a2);
  }
  else
  {
    v15(v3, a2);
    v15(v11, a2);
    *(_QWORD *)v3 = v12;
    swift_storeEnumTagMultiPayload();
    v16 = v12;
  }
  v13(v8, v3, a2);
  if (swift_getEnumCaseMultiPayload() != 2)
    return ((uint64_t (*)(char *, uint64_t))v15)(v8, a2);
  v15(v3, a2);
  v15(v8, a2);
  v17 = *(_QWORD *)(a2 + 24);
  v23 = v12;
  v18 = *(_QWORD *)(a2 + 40);
  v19 = *(void (**)(void **, uint64_t, uint64_t))(v18 + 24);
  v20 = v12;
  v19(&v23, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v3, 0, 1, v17);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_21C5C9218(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  int EnumCaseMultiPayload;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v24;
  uint64_t v25;

  v25 = a1;
  v4 = sub_21C5E3BB0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v24 = (char *)&v24 - v7;
  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v24 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v24 - v15;
  v17 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v17((char *)&v24 - v15, v2, a2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  if (EnumCaseMultiPayload == 1)
  {
    v19(v2, a2);
    v19(v16, a2);
    v20 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v2, v25, v4);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    v19(v16, a2);
    v20 = v25;
  }
  v17(v14, v2, a2);
  if (swift_getEnumCaseMultiPayload() != 2)
    return ((uint64_t (*)(char *, uint64_t))v19)(v14, a2);
  v19(v2, a2);
  v19(v14, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v24, v20, v4);
  v21 = *(_QWORD *)(a2 + 24);
  v22 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v11, v22 ^ 1u, 1, v21);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v2, v11, a2);
}

void Never.feature.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void Never.feature.setter(id *a1)
{

}

void (*Never.feature.modify(_QWORD *a1))(id *a1)
{
  *a1 = 0;
  return sub_21C5C9464;
}

void sub_21C5C9464(id *a1)
{

}

void Never.init(_:)()
{
  sub_21C5E3D48();
  __break(1u);
}

void sub_21C5C94CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (void **)((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void **, uint64_t, uint64_t, __n128))(v11 + 16))(v10, v12, a2, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = *v10;
    sub_21C5E3E20();
    sub_21C5E3E2C();
    if (v13)
    {
      v14 = v13;
      sub_21C5E3BA4();

    }
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v4 + 32))(v6, v10, v3);
    sub_21C5E3E20();
    sub_21C5E3928();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t _s15_MapKit_SwiftUI0A9SelectionV2eeoiySbACyxG_AEtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t TupleTypeMetadata2;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void **v21;
  void (*v22)(char *, uint64_t, uint64_t, __n128);
  void *v23;
  void *v24;
  id v25;
  unsigned __int8 v26;
  uint64_t v27;
  char v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v36 = a1;
  v37 = a2;
  v4 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v7;
  v9 = type metadata accessor for MapSelection.Storage(0, v8, v7, v7);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (void **)((char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v32 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v33 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v17 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v19 = (char *)&v32 - v18;
  v21 = (void **)((char *)&v32 + *(int *)(v20 + 48) - v18);
  v34 = v10;
  v22 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  v22((char *)&v32 - v18, v36, v9, v17);
  ((void (*)(void **, uint64_t, uint64_t))v22)(v21, v37, v9);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    ((void (*)(char *, char *, uint64_t))v22)(v15, v19, v9);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v29 = v6;
      (*(void (**)(char *, void **, uint64_t))(v4 + 32))(v6, v21, a3);
      v28 = sub_21C5E3934();
      v30 = *(void (**)(char *, uint64_t))(v4 + 8);
      v30(v29, a3);
      v30(v15, a3);
      v27 = v34;
      goto LABEL_16;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v15, a3);
    goto LABEL_10;
  }
  ((void (*)(void **, char *, uint64_t))v22)(v12, v19, v9);
  v23 = *v12;
  if (swift_getEnumCaseMultiPayload() != 1)
  {

LABEL_10:
    v28 = 0;
    v27 = v33;
    v9 = TupleTypeMetadata2;
    goto LABEL_16;
  }
  v24 = *v21;
  if (!v23)
  {
    if (!v24)
    {
      v28 = 1;
      v27 = v34;
      goto LABEL_16;
    }
    v23 = 0;
    goto LABEL_14;
  }
  if (!v24)
  {
LABEL_14:
    v27 = v34;

    goto LABEL_15;
  }
  v25 = v23;
  v26 = objc_msgSend(v25, sel_isEqual_, v24);

  v27 = v34;
  if ((v26 & 1) == 0)
  {
LABEL_15:
    v28 = 0;
    goto LABEL_16;
  }
  v28 = 1;
LABEL_16:
  (*(void (**)(char *, uint64_t))(v27 + 8))(v19, v9);
  return v28 & 1;
}

uint64_t sub_21C5C98B4(uint64_t a1)
{
  _BYTE v3[72];

  sub_21C5E3E14();
  sub_21C5C94CC((uint64_t)v3, a1);
  return sub_21C5E3E44();
}

void sub_21C5C98F8()
{
  sub_21C5E3D48();
  __break(1u);
}

uint64_t sub_21C5C9960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21C5C9C60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))sub_21C5C94CC);
}

uint64_t sub_21C5C996C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s15_MapKit_SwiftUI0A9SelectionV2eeoiySbACyxG_AEtFZ_0(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t MapSelection.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = v3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for MapSelection.Storage(0, v6, *(_QWORD *)(a1 + 24), a2);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))((char *)&v15 - v10, v4, v7, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v12 = *(_QWORD *)(v6 - 8);
    v13 = 1;
  }
  else
  {
    v12 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v11, v6);
    v13 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a3, v13, 1, v6);
}

uint64_t type metadata accessor for MapSelection.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapSelection.Storage);
}

uint64_t MapSelection.feature.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;

  v4 = v3;
  v6 = type metadata accessor for MapSelection.Storage(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (uint64_t *)((char *)&v12 - v9);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)&v12 - v9, v4, v6, v8);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    *a3 = *v10;
  }
  else
  {
    *a3 = 0;
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  }
  return result;
}

uint64_t MapSelection.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a4, a1, a2);
  type metadata accessor for MapSelection.Storage(0, a2, a3, v6);
  return swift_storeEnumTagMultiPayload();
}

uint64_t MapSelection.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = *a1;
  type metadata accessor for MapSelection.Storage(0, a2, a3, a4);
  return swift_storeEnumTagMultiPayload();
}

void MapSelection.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for MapSelection.Storage(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  sub_21C5C94CC(a1, v5);
}

uint64_t MapSelection.hashValue.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  sub_21C5E3E14();
  v3 = type metadata accessor for MapSelection.Storage(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v2);
  sub_21C5C94CC((uint64_t)v5, v3);
  return sub_21C5E3E44();
}

uint64_t sub_21C5C9C40@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  return MapSelection.init(_:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t sub_21C5C9C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21C5C9C60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))MapSelection.hash(into:));
}

uint64_t sub_21C5C9C60(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t))
{
  _BYTE v7[72];

  sub_21C5E3E14();
  a4(v7, a2);
  return sub_21C5E3E44();
}

uint64_t sub_21C5C9CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static MapSelection.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void sub_21C5C9CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[18];
  uint64_t v30;
  uint64_t TupleTypeMetadata2;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v35 = a1;
  v36 = a2;
  v29[10] = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v29[2] = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_21C5E3BB0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v29[7] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v29[11] = (char *)v29 - v12;
  v32 = v11;
  v34 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v29[6] = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v29[16] = (char *)v29 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v29[17] = (char *)v29 - v18;
  v29[8] = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v29[0] = (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_21C5E3BB0();
  v30 = swift_getTupleTypeMetadata2();
  v29[5] = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v29[9] = (char *)v29 - v22;
  v33 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v29[4] = (char *)v29 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v29[14] = (char *)v29 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v29[15] = (char *)v29 - v28;
  v29[12] = a3;
  v29[13] = a4;
  v37 = a3;
  v38 = a4;
  v29[1] = a5;
  v39 = a5;
  v40 = a6;
  v29[3] = a6;
  type metadata accessor for MapSelectionManagerBox();
}

uint64_t sub_21C5C9F40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  void **v19;
  void (*v20)(void **, _QWORD, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v22;
  _QWORD *v23;
  void (*v24)(uint64_t, void **, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  void (*v38)(uint64_t, void **, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  unsigned __int8 v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD, uint64_t);
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD, uint64_t);
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  void (*v62)(uint64_t, uint64_t);
  _BYTE v64[96];

  v3 = a1;
  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (void **)&v64[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v9 = (void **)&v64[-v8];
  MEMORY[0x24BDAC7A8](v10);
  v12 = (void **)&v64[-v11];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v14 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v15 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v17 = &v64[-v16];
  v19 = (void **)&v64[*(int *)(v18 + 48) - v16];
  *(_QWORD *)(v2 - 152) = v4;
  v20 = *(void (**)(void **, _QWORD, uint64_t))(v4 + 16);
  ((void (*)(_BYTE *, _QWORD, uint64_t, __n128))v20)(&v64[-v16], *(_QWORD *)(v2 - 144), v3, v15);
  v20(v19, *(_QWORD *)(v2 - 136), v3);
  *(_QWORD *)(v2 - 128) = v17;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      v20(v6, *(_QWORD *)(v2 - 128), v3);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        (*(void (**)(void **, _QWORD))(*(_QWORD *)(v2 - 160) + 8))(v6, *(_QWORD *)(v2 - 176));
        v48 = 0;
        v3 = TupleTypeMetadata2;
LABEL_34:
        v22 = *(_QWORD *)(v2 - 128);
        goto LABEL_35;
      }
      v37 = *(_QWORD **)(v2 - 160);
      v38 = (void (*)(uint64_t, void **, uint64_t))v37[4];
      v39 = *(_QWORD *)(v2 - 200);
      v40 = *(_QWORD *)(v2 - 176);
      v38(v39, v6, v40);
      v41 = *(_QWORD *)(v2 - 208);
      v38(v41, v19, v40);
      v42 = *(_QWORD *)(v2 - 248);
      v43 = v42 + *(int *)(*(_QWORD *)(v2 - 184) + 48);
      v44 = (void (*)(uint64_t, uint64_t, uint64_t))v37[2];
      v44(v42, v39, v40);
      *(_QWORD *)(v2 - 136) = v43;
      v44(v43, v41, v40);
      v45 = *(_QWORD *)(v2 - 256);
      v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
      v47 = *(_QWORD *)(v2 - 232);
      if (v46(v42, 1, v47) == 1)
      {
        v33 = (void (*)(uint64_t, uint64_t))v37[1];
        v33(v41, v40);
        v33(v39, v40);
        if (v46(*(_QWORD *)(v2 - 136), 1, v47) == 1)
        {
          v34 = v42;
          v35 = v40;
          goto LABEL_13;
        }
      }
      else
      {
        v54 = *(_QWORD *)(v2 - 288);
        v44(v54, v42, v40);
        v55 = *(_QWORD *)(v2 - 136);
        if (v46(v55, 1, v47) != 1)
        {
          v60 = *(_QWORD *)(v2 - 320);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v60, v55, v47);
          v48 = sub_21C5E3934();
          v61 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
          v61(v60, v47);
          v62 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 160) + 8);
          v62(*(_QWORD *)(v2 - 208), v40);
          v62(*(_QWORD *)(v2 - 200), v40);
          v61(v54, v47);
          v62(v42, v40);
          goto LABEL_33;
        }
        v56 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v2 - 160) + 8);
        v56(*(_QWORD *)(v2 - 208), v40);
        v56(*(_QWORD *)(v2 - 200), v40);
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v54, v47);
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 280) + 8))(v42, *(_QWORD *)(v2 - 184));
LABEL_26:
      v48 = 0;
      goto LABEL_33;
    }
    v22 = *(_QWORD *)(v2 - 128);
    v20(v9, v22, v3);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v23 = *(_QWORD **)(v2 - 168);
      v24 = (void (*)(uint64_t, void **, uint64_t))v23[4];
      v25 = *(_QWORD *)(v2 - 216);
      v24(v25, v9, v1);
      v26 = *(_QWORD *)(v2 - 224);
      v24(v26, v19, v1);
      v27 = *(_QWORD *)(v2 - 264);
      v28 = v27 + *(int *)(*(_QWORD *)(v2 - 192) + 48);
      v29 = (void (*)(uint64_t, uint64_t, uint64_t))v23[2];
      v29(v27, v25, v1);
      *(_QWORD *)(v2 - 136) = v28;
      v29(v28, v26, v1);
      v30 = *(_QWORD *)(v2 - 272);
      v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
      v32 = *(_QWORD *)(v2 - 240);
      if (v31(v27, 1, v32) == 1)
      {
        v33 = (void (*)(uint64_t, uint64_t))v23[1];
        v33(v26, v1);
        v33(v25, v1);
        if (v31(*(_QWORD *)(v2 - 136), 1, v32) == 1)
        {
          v34 = v27;
          v35 = v1;
LABEL_13:
          v33(v34, v35);
          v48 = 1;
LABEL_33:
          v14 = *(_QWORD *)(v2 - 152);
          goto LABEL_34;
        }
      }
      else
      {
        v51 = *(_QWORD *)(v2 - 304);
        v29(v51, v27, v1);
        v52 = *(_QWORD *)(v2 - 136);
        if (v31(v52, 1, v32) != 1)
        {
          v57 = *(_QWORD *)(v2 - 336);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v57, v52, v32);
          v48 = sub_21C5E3934();
          v58 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
          v58(v57, v32);
          v59 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 168) + 8);
          v59(*(_QWORD *)(v2 - 224), v1);
          v59(*(_QWORD *)(v2 - 216), v1);
          v58(v51, v32);
          v59(v27, v1);
          goto LABEL_33;
        }
        v53 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v2 - 168) + 8);
        v53(*(_QWORD *)(v2 - 224), v1);
        v53(*(_QWORD *)(v2 - 216), v1);
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v51, v32);
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 296) + 8))(v27, *(_QWORD *)(v2 - 192));
      goto LABEL_26;
    }
    (*(void (**)(void **, uint64_t))(*(_QWORD *)(v2 - 168) + 8))(v9, v1);
  }
  else
  {
    v22 = *(_QWORD *)(v2 - 128);
    v20(v12, v22, v3);
    v36 = *v12;
    if (!swift_getEnumCaseMultiPayload())
    {
      v49 = *v19;
      if (v36)
      {
        v14 = *(_QWORD *)(v2 - 152);
        if (v49)
        {
          v50 = v36;
          v48 = objc_msgSend(v50, sel_isEqual_, v49);

          goto LABEL_35;
        }
      }
      else
      {
        v14 = *(_QWORD *)(v2 - 152);
        if (!v49)
        {
          v48 = 1;
          goto LABEL_35;
        }
        v36 = 0;
      }

      v48 = 0;
      goto LABEL_35;
    }

  }
  v48 = 0;
  v3 = TupleTypeMetadata2;
LABEL_35:
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v22, v3);
  return v48 & 1;
}

void sub_21C5CA550(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_21C5C9CB8(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t (*sub_21C5CA560())()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  sub_21C5CCEE0();
  sub_21C5E3298();
  if (!v2)
    return 0;
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 24) = v3;
  return sub_21C5CCF4C;
}

uint64_t View.mapFeatureSelectionDisabled(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_getKeyPath();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  swift_retain();
  sub_21C5E3664();
  swift_release();
  return swift_release();
}

double sub_21C5CA68C@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  sub_21C5CCEE0();
  sub_21C5E3298();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

double sub_21C5CA6D8@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  sub_21C5CCEE0();
  sub_21C5E3298();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_21C5CA724(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = sub_21C5CCF24;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_21C531C4C(v1);
  sub_21C5CCEE0();
  return sub_21C5E32A4();
}

uint64_t sub_21C5CA7D8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21C5CA7FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_21C5CA828(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x22077F9A0](&protocol conformance descriptor for MapSelection<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_21C5CA854()
{
  JUMPOUT(0x22077F9A0);
}

void sub_21C5CA864(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t dispatch thunk of MapSelectable.feature.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MapSelectable.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_21C5CA880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for MapSelection.Storage(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_21C5CA8F0(id *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *((unsigned __int8 *)a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)

    else
      (*(void (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    ((void (*)(void))((char *)&loc_21C5CA938 + 4 * byte_21C5EB4A0[v5]))();
  }
}

void **sub_21C5CA990(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  id v9;
  char v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    v8 = *a2;
    *a1 = *a2;
    v9 = v8;
    v10 = 1;
  }
  else
  {
    (*(void (**)(void **))(v4 + 16))(a1);
    v10 = 0;
  }
  *((_BYTE *)a1 + v5) = v10;
  return a1;
}

id *sub_21C5CAA68(id *a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  id v13;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      v12 = *a2;
      *a1 = *a2;
      *((_BYTE *)a1 + v7) = 1;
      v13 = v12;
    }
    else
    {
      (*(void (**)(id *, void **, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  return a1;
}

_QWORD *sub_21C5CABF4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 32))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

id *sub_21C5CACC8(id *a1, id *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(id *, id *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t sub_21C5CAE54(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21C5CAF18 + 4 * byte_21C5EB4C3[(v4 - 1)]))();
}

void sub_21C5CAF64(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t type metadata accessor for MapSelection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapSelection);
}

uint64_t sub_21C5CB118(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528AB50);
  v2 = sub_21C5E30A0();
  v4[0] = v1;
  v4[1] = sub_21C5CB178();
  return MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v2, v4);
}

unint64_t sub_21C5CB178()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25528AB58[0];
  if (!qword_25528AB58[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528AB50);
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDF1028], v1);
    atomic_store(result, qword_25528AB58);
  }
  return result;
}

uint64_t sub_21C5CB1C4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *sub_21C5CB234(char *a1, char **a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *(_QWORD *)v3 = *a2;
    v3 = &v8[(unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 == 1)
    {
      v11 = *a2;
      *(_QWORD *)a1 = *a2;
      a1[v5] = 1;
      v12 = v11;
    }
    else
    {
      (*(void (**)(char *))(v4 + 16))(a1);
      v3[v5] = 0;
    }
  }
  return v3;
}

void sub_21C5CB34C(id *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *((unsigned __int8 *)a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)

    else
      (*(void (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    ((void (*)(void))((char *)&loc_21C5CB394 + 4 * byte_21C5EB4D6[v5]))();
  }
}

void **sub_21C5CB3EC(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  id v9;
  char v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    v8 = *a2;
    *a1 = *a2;
    v9 = v8;
    v10 = 1;
  }
  else
  {
    (*(void (**)(void **))(v4 + 16))(a1);
    v10 = 0;
  }
  *((_BYTE *)a1 + v5) = v10;
  return a1;
}

id *sub_21C5CB4C4(id *a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  id v13;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      v12 = *a2;
      *a1 = *a2;
      *((_BYTE *)a1 + v7) = 1;
      v13 = v12;
    }
    else
    {
      (*(void (**)(id *, void **, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  return a1;
}

_QWORD *sub_21C5CB650(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 32))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

id *sub_21C5CB724(id *a1, id *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(id *, id *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t sub_21C5CB8B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21C5CB974 + 4 * byte_21C5EB4F9[(v4 - 1)]))();
}

void sub_21C5CB9C0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_21C5CBB68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 8uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_21C5CBBB0 + 4 * byte_21C5EB507[v3]))();
}

void sub_21C5CBBF8(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 8uLL)
    v4 = 8;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_21C5CBCC0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_21C5E3BB0();
  if (v1 <= 0x3F)
  {
    result = sub_21C5E3BB0();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

char *sub_21C5CBD54(char *a1, char **a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  uint64_t v10;
  int v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  if (*(_DWORD *)(v7 + 84))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v7 + 64) + 1;
  v10 = *(_QWORD *)(v6 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  if (*(_DWORD *)(v10 + 84))
    v12 = *(_QWORD *)(v10 + 64);
  else
    v12 = *(_QWORD *)(v10 + 64) + 1;
  if (v9 <= v12)
    v13 = v12;
  else
    v13 = v9;
  if (v13 <= 8)
    v14 = 8;
  else
    v14 = v13;
  if (((v11 | v8) & 0x1000F8) != 0 || (unint64_t)(v14 + 1) > 0x18)
  {
    v16 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = &v16[(((v11 | v8) & 0xF8 | 7u) + 16) & ~(unint64_t)((v11 | v8) & 0xF8 | 7u)];
    swift_retain();
  }
  else
  {
    v17 = *((unsigned __int8 *)a2 + v14);
    if (v17 >= 3)
    {
      if (v14 <= 3)
        v18 = v14;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 2)
    {
      if ((*(unsigned int (**)(char **, uint64_t, _QWORD))(v10 + 48))(a2, 1, *(_QWORD *)(a3 + 24)))
      {
        memcpy(v4, a2, v12);
      }
      else
      {
        (*(void (**)(char *, char **, uint64_t))(v10 + 16))(v4, a2, v6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v4, 0, 1, v6);
      }
      v21 = 2;
      goto LABEL_35;
    }
    if (v17 == 1)
    {
      if ((*(unsigned int (**)(char **, uint64_t, _QWORD))(v7 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
      {
        memcpy(v4, a2, v9);
      }
      else
      {
        (*(void (**)(char *, char **, uint64_t))(v7 + 16))(v4, a2, v5);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v4, 0, 1, v5);
      }
      v21 = 1;
LABEL_35:
      v4[v14] = v21;
      return v4;
    }
    v19 = *a2;
    *(_QWORD *)a1 = *a2;
    a1[v14] = 0;
    v20 = v19;
  }
  return v4;
}

void sub_21C5CBF6C(id *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  void (*v11)(id *, uint64_t);
  id *v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v3 - 8);
  if (*(_DWORD *)(v5 + 84))
    v6 = *(_QWORD *)(v5 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64) + 1;
  v7 = *(_QWORD *)(v4 - 8);
  if (*(_DWORD *)(v7 + 84))
    v8 = *(_QWORD *)(v7 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64) + 1;
  if (v6 <= v8)
    v6 = v8;
  if (v6 <= 8)
    v6 = 8;
  v9 = *((unsigned __int8 *)a1 + v6);
  if (v9 >= 3)
  {
    if (v6 <= 3)
      v10 = v6;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 2)
  {
    if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(v7 + 48))(a1, 1, v4))
    {
      v11 = *(void (**)(id *, uint64_t))(v7 + 8);
      v12 = a1;
      v13 = v4;
      goto LABEL_24;
    }
  }
  else
  {
    if (v9 != 1)
    {

      return;
    }
    if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(v5 + 48))(a1, 1, v3))
    {
      v11 = *(void (**)(id *, uint64_t))(v5 + 8);
      v12 = a1;
      v13 = v3;
LABEL_24:
      v11(v12, v13);
    }
  }
}

void **sub_21C5CC0D0(void **a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  void *v16;
  id v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v7 + 84))
    v8 = *(_QWORD *)(v7 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64) + 1;
  v9 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v9 + 84))
    v10 = *(_QWORD *)(v9 + 64);
  else
    v10 = *(_QWORD *)(v9 + 64) + 1;
  if (v8 <= v10)
    v11 = v10;
  else
    v11 = v8;
  if (v11 <= 8)
    v12 = 8;
  else
    v12 = v11;
  v13 = *((unsigned __int8 *)a2 + v12);
  if (v13 >= 3)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  if (v13 == 2)
  {
    if ((*(unsigned int (**)(void **, uint64_t, _QWORD))(v9 + 48))(a2, 1, *(_QWORD *)(a3 + 24)))
    {
      memcpy(a1, a2, v10);
    }
    else
    {
      (*(void (**)(void **, void **, uint64_t))(v9 + 16))(a1, a2, v6);
      (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v6);
    }
    v15 = 2;
    goto LABEL_29;
  }
  if (v13 == 1)
  {
    if ((*(unsigned int (**)(void **, uint64_t, _QWORD))(v7 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(void **, void **, uint64_t))(v7 + 16))(a1, a2, v5);
      (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v5);
    }
    v15 = 1;
LABEL_29:
    *((_BYTE *)a1 + v12) = v15;
    return a1;
  }
  v16 = *a2;
  *a1 = *a2;
  *((_BYTE *)a1 + v12) = 0;
  v17 = v16;
  return a1;
}

id *sub_21C5CC2AC(id *a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  void *v18;
  id v19;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    if (*(_DWORD *)(v7 + 84))
      v8 = *(_QWORD *)(v7 + 64);
    else
      v8 = *(_QWORD *)(v7 + 64) + 1;
    v9 = *(_QWORD *)(v6 - 8);
    if (*(_DWORD *)(v9 + 84))
      v10 = *(_QWORD *)(v9 + 64);
    else
      v10 = *(_QWORD *)(v9 + 64) + 1;
    if (v8 <= v10)
      v11 = v10;
    else
      v11 = v8;
    if (v11 <= 8)
      v12 = 8;
    else
      v12 = v11;
    v13 = *((unsigned __int8 *)a1 + v12);
    if (v13 >= 3)
    {
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    if (v13 == 2)
    {
      if (!(*(unsigned int (**)(id *, uint64_t, _QWORD))(v9 + 48))(a1, 1, *(_QWORD *)(a3 + 24)))
        (*(void (**)(id *, uint64_t))(v9 + 8))(a1, v6);
    }
    else if (v13 == 1)
    {
      if (!(*(unsigned int (**)(id *, uint64_t, _QWORD))(v7 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
        (*(void (**)(id *, uint64_t))(v7 + 8))(a1, v5);
    }
    else
    {

    }
    v15 = *((unsigned __int8 *)a2 + v12);
    if (v15 >= 3)
    {
      if (v12 <= 3)
        v16 = v12;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 2)
    {
      if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v9 + 48))(a2, 1, v6))
      {
        memcpy(a1, a2, v10);
      }
      else
      {
        (*(void (**)(id *, void **, uint64_t))(v9 + 16))(a1, a2, v6);
        (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v6);
      }
      v17 = 2;
      goto LABEL_42;
    }
    if (v15 == 1)
    {
      if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v7 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v8);
      }
      else
      {
        (*(void (**)(id *, void **, uint64_t))(v7 + 16))(a1, a2, v5);
        (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v5);
      }
      v17 = 1;
LABEL_42:
      *((_BYTE *)a1 + v12) = v17;
      return a1;
    }
    v18 = *a2;
    *a1 = *a2;
    *((_BYTE *)a1 + v12) = 0;
    v19 = v18;
  }
  return a1;
}

_QWORD *sub_21C5CC56C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v7 + 84))
    v8 = *(_QWORD *)(v7 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64) + 1;
  v9 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v9 + 84))
    v10 = *(_QWORD *)(v9 + 64);
  else
    v10 = *(_QWORD *)(v9 + 64) + 1;
  if (v8 <= v10)
    v11 = v10;
  else
    v11 = v8;
  if (v11 <= 8)
    v12 = 8;
  else
    v12 = v11;
  v13 = *((unsigned __int8 *)a2 + v12);
  if (v13 >= 3)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  if (v13 == 2)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v9 + 48))(a2, 1, *(_QWORD *)(a3 + 24)))
    {
      memcpy(a1, a2, v10);
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 32))(a1, a2, v6);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v6);
    }
    v15 = 2;
  }
  else if (v13 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v7 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v8);
      v15 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v5);
      v15 = 1;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    v15 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v12) = v15;
  return a1;
}

id *sub_21C5CC744(id *a1, id *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    if (*(_DWORD *)(v7 + 84))
      v8 = *(_QWORD *)(v7 + 64);
    else
      v8 = *(_QWORD *)(v7 + 64) + 1;
    v9 = *(_QWORD *)(v6 - 8);
    if (*(_DWORD *)(v9 + 84))
      v10 = *(_QWORD *)(v9 + 64);
    else
      v10 = *(_QWORD *)(v9 + 64) + 1;
    if (v8 <= v10)
      v11 = v10;
    else
      v11 = v8;
    if (v11 <= 8)
      v12 = 8;
    else
      v12 = v11;
    v13 = *((unsigned __int8 *)a1 + v12);
    if (v13 >= 3)
    {
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    if (v13 == 2)
    {
      if (!(*(unsigned int (**)(id *, uint64_t, _QWORD))(v9 + 48))(a1, 1, *(_QWORD *)(a3 + 24)))
        (*(void (**)(id *, uint64_t))(v9 + 8))(a1, v6);
    }
    else if (v13 == 1)
    {
      if (!(*(unsigned int (**)(id *, uint64_t, _QWORD))(v7 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
        (*(void (**)(id *, uint64_t))(v7 + 8))(a1, v5);
    }
    else
    {

    }
    v15 = *((unsigned __int8 *)a2 + v12);
    if (v15 >= 3)
    {
      if (v12 <= 3)
        v16 = v12;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 2)
    {
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v6))
      {
        memcpy(a1, a2, v10);
      }
      else
      {
        (*(void (**)(id *, id *, uint64_t))(v9 + 32))(a1, a2, v6);
        (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v6);
      }
      v17 = 2;
    }
    else if (v15 == 1)
    {
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v8);
        v17 = 1;
      }
      else
      {
        (*(void (**)(id *, id *, uint64_t))(v7 + 32))(a1, a2, v5);
        v17 = 1;
        (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v5);
      }
    }
    else
    {
      v17 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v12) = v17;
  }
  return a1;
}

uint64_t sub_21C5CCA00(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = v4 == 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v7 + 64);
  if (v6)
    ++v5;
  if (!v8)
    ++v9;
  if (v5 <= v9)
    v5 = v9;
  v10 = 8;
  if (v5 > 8)
    v10 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_27;
  v11 = v10 + 1;
  v12 = 8 * (v10 + 1);
  if ((v10 + 1) <= 3)
  {
    v15 = ((a2 + ~(-1 << v12) - 253) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_27:
      v17 = *(unsigned __int8 *)(a1 + v10);
      if (v17 >= 3)
        return (v17 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_27;
LABEL_20:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if (!(_DWORD)v11)
    return (v16 + 254);
  if (v11 > 3)
    LODWORD(v11) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21C5CCAEC + 4 * byte_21C5EB534[(v11 - 1)]))();
}

void sub_21C5CCB38(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v6 == 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = *(_QWORD *)(v9 + 64);
  if (v8)
    ++v7;
  if (!v10)
    ++v11;
  if (v7 <= v11)
    v7 = v11;
  if (v7 <= 8)
    v7 = 8;
  v12 = v7 + 1;
  if (a3 < 0xFE)
  {
    v13 = 0;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 + ~(-1 << (8 * v12)) - 253) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = 4u;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v14 = a2 - 254;
  if (v12 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v16 = v14 & ~(-1 << (8 * v12));
      bzero(a1, v12);
      if ((_DWORD)v12 == 3)
      {
        *a1 = v16;
        *((_BYTE *)a1 + 2) = BYTE2(v16);
      }
      else if ((_DWORD)v12 == 2)
      {
        *a1 = v16;
      }
      else
      {
        *(_BYTE *)a1 = v16;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v14;
  }
  __asm { BR              X10 }
}

uint64_t sub_21C5CCD08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_DWORD *)(v2 + 84);
  v4 = *(_QWORD *)(v2 + 64);
  if (!v3)
    ++v4;
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  if (!v6)
    ++v7;
  if (v4 <= v7)
    v4 = v7;
  v8 = 8;
  if (v4 > 8)
    v8 = v4;
  if (*(unsigned __int8 *)(a1 + v8) < 3u)
    return *(unsigned __int8 *)(a1 + v8);
  if (v8 <= 3)
    v9 = v8;
  else
    v9 = 4;
  return ((uint64_t (*)(void))((char *)&loc_21C5CCD78 + 4 * byte_21C5EB542[v9]))();
}

_BYTE *sub_21C5CCDC0(_BYTE *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  size_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  char v9;
  int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(v3 + 64);
  if (!v4)
    ++v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (!v7)
    ++v8;
  if (v5 <= v8)
    v5 = v8;
  if (v5 <= 8)
    v5 = 8;
  if (a2 > 2)
  {
    if (v5 <= 3)
      v9 = ((a2 - 3) >> (8 * v5)) + 3;
    else
      v9 = 3;
    result[v5] = v9;
    if (v5 >= 4)
      v10 = 4;
    else
      v10 = v5;
    bzero(result, v5);
    __asm { BR              X10 }
  }
  result[v5] = a2;
  return result;
}

void type metadata accessor for MapSelectionManagerBox()
{
  JUMPOUT(0x22077F91CLL);
}

uint64_t sub_21C5CCEC8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

void sub_21C5CCED0()
{
  JUMPOUT(0x22077F9A0);
}

unint64_t sub_21C5CCEE0()
{
  unint64_t result;

  result = qword_25528AC60;
  if (!qword_25528AC60)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EB7A8, &type metadata for DefaultMapFeatureSelectionDisabledKey);
    atomic_store(result, (unint64_t *)&qword_25528AC60);
  }
  return result;
}

uint64_t sub_21C5CCF24(uint64_t a1)
{
  uint64_t v1;

  return sub_21C57BE58(a1, *(void (**)(uint64_t *__return_ptr))(v1 + 16));
}

ValueMetadata *type metadata accessor for DefaultMapFeatureSelectionDisabledKey()
{
  return &type metadata for DefaultMapFeatureSelectionDisabledKey;
}

BOOL sub_21C5CCF50(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
      return MKMapRectEqualToRect(*(double *)a1, *(double *)(a1 + 8), *(double *)(a1 + 16), *(double *)(a1 + 24), *(double *)a2, *(double *)(a2 + 8), *(double *)(a2 + 16), *(double *)(a2 + 24));
    return 0;
  }
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    return 0;
  if (*(double *)a1 != *(double *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
    return 0;
  return *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

void MapCircle.init(center:radius:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
}

void MapCircle.init(mapRect:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 32) = 1;
}

void MapCircle.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  objc_msgSend(a1, sel_coordinate);
  v5 = v4;
  v7 = v6;
  objc_msgSend(a1, sel_radius);
  v9 = v8;

  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
}

uint64_t static MapCircle._mapContentCount(inputs:)()
{
  return 1;
}

uint64_t static MapCircle._makeMapContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  _QWORD v20[2];
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[36];
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v21 = a2;
  v32 = *MEMORY[0x24BDAC8D0];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552882A8);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (int *)((char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528AC68);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (int *)((char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20[1] = a3;
  _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0();
  (*(void (**)(int *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  if (v11 != 4)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v13 = *v12;
  (*(void (**)(int *, uint64_t))(v10 + 8))(v12, v9);
  v14 = v21;
  sub_21C5E32B0();
  if (v7 != 4)
    goto LABEL_5;
  v15 = *v8;
  (*(void (**)(int *, uint64_t))(v6 + 8))(v8, v5);
  v16 = *(_DWORD *)(v14 + *(int *)(type metadata accessor for _MapContentInputs(0) + 28));
  v22 = v13;
  v23 = v15;
  v24 = v16;
  v25 = 0u;
  v26 = 0u;
  memset(v27, 0, 28);
  v27[28] = -1;
  v28 = 0;
  v29 = -1;
  v30 = 0;
  v31 = 1;
  sub_21C527A50();
  sub_21C5CDDF0();
  v17 = sub_21C5E2DAC();
  MEMORY[0x24BDAC7A8](v17);
  LODWORD(v20[-2]) = v18;
  sub_21C5249BC();
  return sub_21C5E3478();
}

uint64_t sub_21C5CD2C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Value;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  int v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  int v78;
  char v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  int v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  __int128 v105;
  __int128 v106;
  void (*v107)(uint64_t, char *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  _OWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  _OWORD v125[2];
  uint64_t v126;
  _QWORD v127[5];
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;

  v1 = v0;
  v138 = *MEMORY[0x24BDAC8D0];
  v108 = type metadata accessor for MapContentList.Item.Content(0);
  MEMORY[0x24BDAC7A8](v108);
  v115 = (_OWORD *)((char *)&v97 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for MapContentList.Item(0);
  v4 = *(_QWORD *)(v3 - 8);
  v109 = v3;
  v110 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v111 = (uint64_t *)((char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_21C5E328C();
  v123 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v113 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v121 = (char *)&v97 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v97 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552884D0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v97 - v17;
  v19 = sub_21C5E34E4();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v114 = (char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v124 = (char *)&v97 - v23;
  Value = AGGraphGetValue();
  v103 = v25;
  v26 = *(_OWORD *)Value;
  v105 = *(_OWORD *)(Value + 16);
  v106 = v26;
  v104 = *(unsigned __int8 *)(Value + 32);
  v27 = *(int *)(v13 + 48);
  LODWORD(Value) = *(_DWORD *)(v1 + 8);
  v28 = *MEMORY[0x24BE096C0];
  v122 = v12;
  v120 = v20;
  if ((_DWORD)Value == v28)
  {
    sub_21C5E34D8();
    v29 = 0;
    v30 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  }
  else
  {
    v31 = AGGraphGetValue();
    v33 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v15, v31, v19);
    v15[v27] = v33 & 1;
    v34 = *(int *)(v13 + 48);
    v30 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v30(v18, v15, v19);
    v29 = v15[v34];
    v12 = v122;
  }
  v102 = v29;
  v18[v27] = v29;
  v112 = v19;
  v107 = (void (*)(uint64_t, char *, uint64_t))v30;
  v30(v124, v18, v19);
  v35 = AGGraphGetValue();
  v36 = v123;
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v123 + 16);
  v37(v12, v35, v6);
  v38 = sub_21C5E31B4();
  v39 = *(void (**)(char *, uint64_t))(v36 + 8);
  v39(v12, v6);
  v40 = *(_QWORD *)(v1 + 16);
  v41 = (v38 | v40) == 0;
  v123 = v38;
  if (v38 && v40)
  {
    swift_retain();
    swift_retain();
    v41 = sub_21C5E3718();
    swift_release();
    swift_release();
  }
  v101 = v41;
  v42 = AGGraphGetValue();
  v37(v12, v42, v6);
  sub_21C59A014();
  sub_21C5E3298();
  v125[0] = v128;
  v125[1] = v129;
  v43 = *((_QWORD *)&v129 + 1);
  v126 = v130;
  v44 = v128;
  v116 = DWORD2(v128);
  v117 = HIDWORD(v128);
  v45 = v129;
  v46 = v130;
  v39(v12, v6);
  v47 = *(_QWORD *)(v1 + 48);
  v119 = v43;
  if (v47)
  {
    v48 = *(_QWORD *)(v1 + 56);
    v49 = *(_QWORD *)(v1 + 40);
    v50 = *(_QWORD *)(v1 + 32);
    v127[0] = *(_QWORD *)(v1 + 24);
    v127[1] = v50;
    v127[2] = v49;
    v127[3] = v47;
    v127[4] = v48;
    sub_21C56C80C((uint64_t)v125);
    swift_bridgeObjectRetain();
    v51 = MEMORY[0x22077E3B0](v125, v127);
    swift_bridgeObjectRelease();
    sub_21C56C834((uint64_t)v125);
    v100 = v51 ^ 1;
    v12 = v122;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v100 = 1;
  }
  v52 = AGGraphGetValue();
  v37(v12, v52, v6);
  sub_21C59A058();
  sub_21C5E3298();
  v39(v12, v6);
  v53 = AGGraphGetValue();
  v54 = (uint64_t)v121;
  v37(v121, v53, v6);
  v55 = sub_21C5AF7D0(&v128, v54);
  v57 = *(unsigned __int8 *)(v1 + 72);
  v118 = v55;
  LODWORD(v121) = v56 & 1;
  if (v57 != 255)
  {
    v58 = *(_QWORD *)(v1 + 64);
    if ((v56 & 1) != 0)
    {
      if ((v57 & 1) != 0)
      {
        v59 = v55;
        sub_21C52EF74(v55, 1);
        sub_21C59A1FC(v58, v57);
        v60 = MEMORY[0x22077ED70](v59, v58);
LABEL_16:
        v99 = v60;
        sub_21C59A1E4(v58, v57);
        sub_21C531AC8(v59, (char)v121);
        goto LABEL_18;
      }
    }
    else if ((v57 & 1) == 0)
    {
      v59 = v55;
      sub_21C52EF74(v55, 0);
      sub_21C59A1FC(v58, v57);
      v60 = sub_21C5E3718();
      goto LABEL_16;
    }
  }
  v99 = 0;
LABEL_18:
  v61 = AGGraphGetValue();
  v62 = (uint64_t)v113;
  v37(v113, v61, v6);
  sub_21C59A09C();
  sub_21C5E3298();
  v39((char *)v62, v6);
  if (v137)
  {
    sub_21C56101C(&v136, (uint64_t)&v128);
  }
  else
  {
    v63 = AGGraphGetValue();
    v37(v12, v63, v6);
    v64 = sub_21C5E325C();
    v39(v12, v6);
    *((_QWORD *)&v129 + 1) = MEMORY[0x24BDEBF80];
    *(_QWORD *)&v130 = MEMORY[0x24BDEBF68];
    *(_QWORD *)&v128 = v64;
    sub_21C59A0E0((uint64_t)&v136);
  }
  v65 = AGGraphGetValue();
  v37(v12, v65, v6);
  v113 = (char *)sub_21C5AF7D0(&v128, (uint64_t)v12);
  v67 = *(unsigned __int8 *)(v1 + 88);
  if (v67 != 255)
  {
    v68 = *(_QWORD *)(v1 + 80);
    v69 = v66 & 1;
    if ((v66 & 1) != 0)
    {
      if ((v67 & 1) != 0)
      {
        v98 = v39;
        v70 = (uint64_t)v113;
        sub_21C52EF74((uint64_t)v113, 1);
        sub_21C59A1FC(v68, v67);
        v71 = MEMORY[0x22077ED70](v70, v68);
LABEL_28:
        v72 = v71;
        sub_21C59A1E4(v68, v67);
        v73 = v69;
        sub_21C531AC8(v70, v69);
        v12 = v122;
        v39 = v98;
        goto LABEL_30;
      }
    }
    else if ((v67 & 1) == 0)
    {
      v98 = v39;
      v70 = (uint64_t)v113;
      sub_21C52EF74((uint64_t)v113, 0);
      sub_21C59A1FC(v68, v67);
      v71 = sub_21C5E3718();
      goto LABEL_28;
    }
    v72 = 0;
    v12 = v122;
    v73 = v66 & 1;
    goto LABEL_30;
  }
  v72 = 0;
  v73 = v66 & 1;
LABEL_30:
  v74 = v116 | (v117 << 32);
  v75 = AGGraphGetValue();
  v37(v12, v75, v6);
  sub_21C59A120();
  sub_21C5E3298();
  v122 = (char *)v128;
  v39(v12, v6);
  if ((*(_BYTE *)(v1 + 104) & 1) == 0
    && (v99 & ~(v103 | v101 ^ 1 | v100 | (v102 != 0)) & v72 & 1) != 0
    && v122 == *(char **)(v1 + 96)
    && AGGraphGetOutputValue())
  {
    *(_QWORD *)(v1 + 96) = v122;
    *(_BYTE *)(v1 + 104) = 0;
    sub_21C59A1E4(*(_QWORD *)(v1 + 80), *(_BYTE *)(v1 + 88));
    *(_QWORD *)(v1 + 80) = v113;
    *(_BYTE *)(v1 + 88) = v73;
    sub_21C59A1E4(*(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 72));
    *(_QWORD *)(v1 + 64) = v118;
    *(_BYTE *)(v1 + 72) = (_BYTE)v121;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 24) = v44;
    *(_QWORD *)(v1 + 32) = v74;
    *(_QWORD *)(v1 + 40) = v45;
    *(_QWORD *)(v1 + 48) = v119;
    *(_QWORD *)(v1 + 56) = v46;
    swift_release();
    v76 = v112;
  }
  else
  {
    v103 = v74;
    v77 = v73 != 0;
    v78 = *(_DWORD *)(v1 + 12) + 1;
    *(_DWORD *)(v1 + 12) = v78;
    v79 = v73;
    v80 = (char)v121;
    v128 = v106;
    v129 = v105;
    LOBYTE(v130) = v104;
    *((_QWORD *)&v130 + 1) = v123;
    *(_QWORD *)&v131 = v44;
    *((_QWORD *)&v131 + 1) = __PAIR64__(v117, v116);
    v81 = v118;
    *(_QWORD *)&v132 = v45;
    *((_QWORD *)&v132 + 1) = v119;
    *(_QWORD *)&v133 = v46;
    *((_QWORD *)&v133 + 1) = v118;
    LOBYTE(v134) = (_DWORD)v121 != 0;
    v82 = (uint64_t)v113;
    *((_QWORD *)&v134 + 1) = v113;
    LOBYTE(v135) = v77;
    *((_QWORD *)&v135 + 1) = v122;
    v76 = v112;
    (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v114, v124, v112);
    v83 = v133;
    v84 = v115;
    v115[4] = v132;
    v84[5] = v83;
    v85 = v135;
    v84[6] = v134;
    v84[7] = v85;
    v86 = v129;
    *v84 = v128;
    v84[1] = v86;
    v87 = v131;
    v84[2] = v130;
    v84[3] = v87;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    sub_21C56C80C((uint64_t)v125);
    sub_21C52EF74(v81, v80);
    sub_21C52EF74(v82, v79);
    sub_21C5CDE90((uint64_t)&v128);
    sub_21C52B9E4();
    sub_21C5E34F0();
    v88 = v136;
    if (!(_QWORD)v136)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_255287F08);
      v88 = swift_allocObject();
      *(_OWORD *)(v88 + 16) = xmmword_21C5E5570;
      *(_QWORD *)(v88 + 32) = 0;
      *(_BYTE *)(v88 + 72) = 0;
    }
    v89 = (uint64_t)v111;
    *v111 = v88;
    v90 = v109;
    v107(v89 + *(int *)(v109 + 28), v114, v76);
    *(_DWORD *)(v89 + 8) = v78;
    sub_21C536C90((uint64_t)v115, v89 + *(int *)(v90 + 24));
    __swift_instantiateConcreteTypeFromMangledName(&qword_2552884D8);
    v91 = (*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80);
    v92 = swift_allocObject();
    *(_OWORD *)(v92 + 16) = xmmword_21C5E5570;
    sub_21C59A164(v89, v92 + v91);
    *(_QWORD *)&v136 = sub_21C5BA7C0(v92);
    *((_QWORD *)&v136 + 1) = v93;
    AGGraphSetOutputValue();
    sub_21C56E0B8((uint64_t)&v128);
    swift_bridgeObjectRelease();
    sub_21C59A1A8(v89);
    *(_QWORD *)(v1 + 96) = v122;
    *(_BYTE *)(v1 + 104) = 0;
    sub_21C59A1E4(*(_QWORD *)(v1 + 80), *(_BYTE *)(v1 + 88));
    *(_QWORD *)(v1 + 80) = v82;
    *(_BYTE *)(v1 + 88) = v79;
    sub_21C59A1E4(*(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 72));
    *(_QWORD *)(v1 + 64) = v118;
    *(_BYTE *)(v1 + 72) = (_BYTE)v121;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 24) = v44;
    *(_QWORD *)(v1 + 32) = v103;
    *(_QWORD *)(v1 + 40) = v45;
    *(_QWORD *)(v1 + 48) = v119;
    *(_QWORD *)(v1 + 56) = v46;
    swift_release();
  }
  v94 = v120;
  v95 = v124;
  *(_QWORD *)(v1 + 16) = v123;
  return (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v95, v76);
}

unint64_t sub_21C5CDDF0()
{
  unint64_t result;

  result = qword_25528AC70;
  if (!qword_25528AC70)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EB888, &type metadata for MapCircle.MakeList);
    atomic_store(result, (unint64_t *)&qword_25528AC70);
  }
  return result;
}

ValueMetadata *type metadata accessor for MapCircle()
{
  return &type metadata for MapCircle;
}

ValueMetadata *type metadata accessor for MapCircle.LocationArea()
{
  return &type metadata for MapCircle.LocationArea;
}

ValueMetadata *type metadata accessor for MapCircle.MakeList()
{
  return &type metadata for MapCircle.MakeList;
}

BOOL MKMapRectEqualToRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if (a1 != a5 || a2 != a6)
    return 0;
  if (a4 == a8)
    return a3 == a7;
  return 0;
}

uint64_t sub_21C5CDE90(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_BYTE *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_BYTE *)(a1 + 112);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_21C52EF74(v2, v3);
  sub_21C52EF74(v4, v5);
  return a1;
}

uint64_t destroy for ResolvedCircle(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  sub_21C531AC8(*(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
  return sub_21C531AC8(*(_QWORD *)(a1 + 104), *(_BYTE *)(a1 + 112));
}

uint64_t initializeWithCopy for ResolvedCircle(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v8 = *(_BYTE *)(a2 + 96);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_21C52EF74(v7, v8);
  *(_QWORD *)(a1 + 88) = v7;
  *(_BYTE *)(a1 + 96) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  LOBYTE(v7) = *(_BYTE *)(a2 + 112);
  sub_21C52EF74(v9, v7);
  *(_QWORD *)(a1 + 104) = v9;
  *(_BYTE *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

uint64_t assignWithCopy for ResolvedCircle(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  v4 = *a2;
  v5 = a2[1];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
  *(_DWORD *)(a1 + 60) = *((_DWORD *)a2 + 15);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  v6 = *((_QWORD *)a2 + 11);
  v7 = *((_BYTE *)a2 + 96);
  sub_21C52EF74(v6, v7);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v6;
  *(_BYTE *)(a1 + 96) = v7;
  sub_21C531AC8(v8, v9);
  v10 = *((_QWORD *)a2 + 13);
  v11 = *((_BYTE *)a2 + 112);
  sub_21C52EF74(v10, v11);
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_BYTE *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v10;
  *(_BYTE *)(a1 + 112) = v11;
  sub_21C531AC8(v12, v13);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for ResolvedCircle(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v6 = *(_BYTE *)(a2 + 96);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = v6;
  sub_21C531AC8(v7, v8);
  v9 = *(_BYTE *)(a2 + 112);
  v10 = *(_QWORD *)(a1 + 104);
  v11 = *(_BYTE *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = v9;
  sub_21C531AC8(v10, v11);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedCircle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedCircle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedCircle()
{
  return &type metadata for ResolvedCircle;
}

uint64_t sub_21C5CE25C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t static MapInteractionModes.all.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  if (qword_2552878F0 != -1)
    result = swift_once();
  *a1 = qword_25528AC78;
  return result;
}

uint64_t MapInteractionModes.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

_MapKit_SwiftUI::MapInteractionModes __swiftcall MapInteractionModes.init(rawValue:)(_MapKit_SwiftUI::MapInteractionModes rawValue)
{
  _MapKit_SwiftUI::MapInteractionModes *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static MapInteractionModes.pan.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static MapInteractionModes.zoom.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_21C5CE328()
{
  uint64_t v0;
  uint64_t result;

  v0 = 3;
  result = _MKLinkedOnOrAfterReleaseSet();
  if ((_DWORD)result)
    v0 = 15;
  qword_25528AC78 = v0;
  return result;
}

_QWORD *sub_21C5CE390@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_21C5CE39C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_21C5CE3B0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_21C5CE3C4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_21C5CE3D8(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_21C5CE408@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_21C5CE434@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_21C5CE458(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_21C5CE46C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_21C5CE480(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_21C5CE494@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_21C5CE4A8(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_21C5CE4BC(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_21C5CE4D0(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_21C5CE4E4()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_21C5CE4F4()
{
  return sub_21C5E3BE0();
}

_QWORD *sub_21C5CE50C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

void static MapInteractionModes.rotate.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static MapInteractionModes.pitch.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

unint64_t sub_21C5CE540()
{
  unint64_t result;

  result = qword_25528AC80;
  if (!qword_25528AC80)
  {
    result = MEMORY[0x22077F9A0](&protocol conformance descriptor for MapInteractionModes, &type metadata for MapInteractionModes);
    atomic_store(result, (unint64_t *)&qword_25528AC80);
  }
  return result;
}

unint64_t sub_21C5CE588()
{
  unint64_t result;

  result = qword_25528AC88;
  if (!qword_25528AC88)
  {
    result = MEMORY[0x22077F9A0](&protocol conformance descriptor for MapInteractionModes, &type metadata for MapInteractionModes);
    atomic_store(result, (unint64_t *)&qword_25528AC88);
  }
  return result;
}

unint64_t sub_21C5CE5D0()
{
  unint64_t result;

  result = qword_25528AC90;
  if (!qword_25528AC90)
  {
    result = MEMORY[0x22077F9A0](&protocol conformance descriptor for MapInteractionModes, &type metadata for MapInteractionModes);
    atomic_store(result, (unint64_t *)&qword_25528AC90);
  }
  return result;
}

unint64_t sub_21C5CE618()
{
  unint64_t result;

  result = qword_25528AC98;
  if (!qword_25528AC98)
  {
    result = MEMORY[0x22077F9A0](&protocol conformance descriptor for MapInteractionModes, &type metadata for MapInteractionModes);
    atomic_store(result, (unint64_t *)&qword_25528AC98);
  }
  return result;
}

ValueMetadata *type metadata accessor for MapInteractionModes()
{
  return &type metadata for MapInteractionModes;
}

uint64_t View.mapItemDetailSheet(isPresented:item:displaysMap:)(uint64_t a1, uint64_t a2, char a3, void *a4, char a5)
{
  uint64_t v10;
  id v11;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_BYTE *)(v10 + 32) = a3;
  *(_QWORD *)(v10 + 40) = a4;
  *(_BYTE *)(v10 + 48) = a5;
  v11 = a4;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528ACA0);
  sub_21C5CF628(&qword_25528ACA8, &qword_25528ACA0, (uint64_t (*)(void))sub_21C5CE828);
  sub_21C5E36AC();
  return swift_release();
}

unint64_t sub_21C5CE778()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25528ACB0;
  if (!qword_25528ACB0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528ACB8);
    v2[0] = sub_21C5CE7E4();
    v2[1] = MEMORY[0x24BDF1050];
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_25528ACB0);
  }
  return result;
}

unint64_t sub_21C5CE7E4()
{
  unint64_t result;

  result = qword_25528ACC0;
  if (!qword_25528ACC0)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EBCDC, &type metadata for MapItemDetailView);
    atomic_store(result, (unint64_t *)&qword_25528ACC0);
  }
  return result;
}

unint64_t sub_21C5CE828()
{
  unint64_t result;

  result = qword_25528ACC8;
  if (!qword_25528ACC8)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EBC8C, &type metadata for SheetSizeModifier);
    atomic_store(result, (unint64_t *)&qword_25528ACC8);
  }
  return result;
}

uint64_t View.mapItemDetailSheet(item:displaysMap:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  _QWORD *v8;
  _QWORD *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  v8[6] = a3;
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  v9[6] = a3;
  v10 = a3;
  swift_retain_n();
  swift_retain_n();
  v11 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528ACD0);
  sub_21C5E37E4();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v15;
  *(_QWORD *)(v12 + 24) = v16;
  *(_QWORD *)(v12 + 32) = v17;
  *(_BYTE *)(v12 + 40) = a4;
  v13 = v17;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528ACA0);
  sub_21C5CF5BC();
  sub_21C5CF628(&qword_25528ACA8, &qword_25528ACA0, (uint64_t (*)(void))sub_21C5CE828);
  sub_21C5E36B8();

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t View.mapItemDetailPopover(isPresented:item:displaysMap:attachmentAnchor:)(uint64_t a1, uint64_t a2, char a3, void *a4, char a5)
{
  uint64_t v10;
  id v11;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_BYTE *)(v10 + 32) = a3;
  *(_QWORD *)(v10 + 40) = a4;
  *(_BYTE *)(v10 + 48) = a5;
  v11 = a4;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528ACE0);
  sub_21C5CF628(&qword_25528ACE8, &qword_25528ACE0, (uint64_t (*)(void))sub_21C5CF694);
  sub_21C5E36D0();
  return swift_release();
}

uint64_t View.mapItemDetailPopover(isPresented:item:displaysMap:attachmentAnchor:arrowEdge:)(uint64_t a1, uint64_t a2, char a3, void *a4, char a5)
{
  uint64_t v10;
  id v11;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_BYTE *)(v10 + 32) = a3;
  *(_QWORD *)(v10 + 40) = a4;
  *(_BYTE *)(v10 + 48) = a5;
  v11 = a4;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528ACE0);
  sub_21C5CF628(&qword_25528ACE8, &qword_25528ACE0, (uint64_t (*)(void))sub_21C5CF694);
  sub_21C5E36DC();
  return swift_release();
}

uint64_t sub_21C5CEC50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  id v12;
  uint64_t v13;
  uint64_t result;

  v12 = a4;
  swift_retain();
  swift_retain();
  v13 = sub_21C5E30AC();
  result = sub_21C5E35F8();
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_QWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 48) = 0;
  *(_BYTE *)(a6 + 56) = a5;
  *(_QWORD *)(a6 + 64) = v13;
  *(_BYTE *)(a6 + 72) = result;
  return result;
}

uint64_t View.mapItemDetailPopover(item:displaysMap:attachmentAnchor:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  _QWORD *v8;
  _QWORD *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  v8[6] = a3;
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  v9[6] = a3;
  v10 = a3;
  swift_retain_n();
  swift_retain_n();
  v11 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528ACD0);
  sub_21C5E37E4();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v15;
  *(_QWORD *)(v12 + 24) = v16;
  *(_QWORD *)(v12 + 32) = v17;
  *(_BYTE *)(v12 + 40) = a4;
  v13 = v17;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528ACE0);
  sub_21C5CF5BC();
  sub_21C5CF628(&qword_25528ACE8, &qword_25528ACE0, (uint64_t (*)(void))sub_21C5CF694);
  sub_21C5E36E8();

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t View.mapItemDetailPopover(item:displaysMap:attachmentAnchor:arrowEdge:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  _QWORD *v8;
  _QWORD *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  v8[6] = a3;
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  v9[6] = a3;
  v10 = a3;
  swift_retain_n();
  swift_retain_n();
  v11 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528ACD0);
  sub_21C5E37E4();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v15;
  *(_QWORD *)(v12 + 24) = v16;
  *(_QWORD *)(v12 + 32) = v17;
  *(_BYTE *)(v12 + 40) = a4;
  v13 = v17;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528ACE0);
  sub_21C5CF5BC();
  sub_21C5CF628(&qword_25528ACE8, &qword_25528ACE0, (uint64_t (*)(void))sub_21C5CF694);
  sub_21C5E36F4();

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_21C5CF074@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, char a4@<W4>, uint64_t a5@<X8>)
{
  id v10;
  uint64_t v11;
  uint64_t result;

  v10 = a3;
  swift_retain();
  swift_retain();
  v11 = sub_21C5E30AC();
  result = sub_21C5E35F8();
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = a1;
  *(_QWORD *)(a5 + 40) = a2;
  *(_QWORD *)(a5 + 48) = a3;
  *(_BYTE *)(a5 + 56) = a4;
  *(_QWORD *)(a5 + 64) = v11;
  *(_BYTE *)(a5 + 72) = result;
  return result;
}

uint64_t sub_21C5CF0F4()
{
  return sub_21C5E2F38();
}

uint64_t sub_21C5CF10C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528AD90);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_21C5CF14C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  char *v15;
  __int128 v16;
  void (*v18)(char *, uint64_t, uint64_t);
  _QWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v19[1] = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528AD98);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528ADA0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528ADA8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  v14 = objc_msgSend(v13, sel_userInterfaceIdiom);

  if (v14)
  {
    sub_21C5E385C();
    sub_21C5E2F44();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v5, a1, v9);
    v15 = &v5[*(int *)(v3 + 36)];
    v16 = v21;
    *(_OWORD *)v15 = v20;
    *((_OWORD *)v15 + 1) = v16;
    *((_OWORD *)v15 + 2) = v22;
    sub_21C5D0594((uint64_t)v5, (uint64_t)v8);
    swift_storeEnumTagMultiPayload();
    sub_21C5D07CC(&qword_25528ADB0, &qword_25528ADA8);
    sub_21C5D05DC();
    sub_21C5E33E8();
    return sub_21C524980((uint64_t)v5, &qword_25528AD98);
  }
  else
  {
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v18(v12, a1, v9);
    v18(v8, (uint64_t)v12, v9);
    swift_storeEnumTagMultiPayload();
    sub_21C5D07CC(&qword_25528ADB0, &qword_25528ADA8);
    sub_21C5D05DC();
    sub_21C5E33E8();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

uint64_t sub_21C5CF3C0()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  sub_21C5E3E14();
  sub_21C5E3E20();
  if (v1 == 1)
    sub_21C5E3E20();
  else
    sub_21C5E3E38();
  return sub_21C5E3E44();
}

uint64_t sub_21C5CF438()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 8) == 1)
  {
    sub_21C5E3E20();
    return sub_21C5E3E20();
  }
  else
  {
    sub_21C5E3E20();
    return sub_21C5E3E38();
  }
}

uint64_t sub_21C5CF48C()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  sub_21C5E3E14();
  sub_21C5E3E20();
  if (v1 == 1)
    sub_21C5E3E20();
  else
    sub_21C5E3E38();
  return sub_21C5E3E44();
}

BOOL sub_21C5CF500(uint64_t a1, uint64_t a2)
{
  int v2;
  _BOOL4 v3;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = *(_QWORD *)a1 == *(_QWORD *)a2;
  if ((v2 & 1) == 0)
    v3 = 0;
  if (*(_BYTE *)(a1 + 8) == 1)
    return v3;
  else
    return (*(_QWORD *)a1 == *(_QWORD *)a2) & ~v2;
}

uint64_t sub_21C5CF540(id *a1)
{
  id v1;

  v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528ADD0);
  return sub_21C5E37CC();
}

uint64_t sub_21C5CF59C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C5CF074(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_BYTE *)(v1 + 40), a1);
}

unint64_t sub_21C5CF5BC()
{
  unint64_t result;

  result = qword_25528ACD8;
  if (!qword_25528ACD8)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EBBEC, &type metadata for IdentifiableMapItem);
    atomic_store(result, (unint64_t *)&qword_25528ACD8);
  }
  return result;
}

uint64_t sub_21C5CF604@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C5CEC50(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(void **)(v1 + 40), *(_BYTE *)(v1 + 48), a1);
}

uint64_t sub_21C5CF628(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7[0] = sub_21C5CE778();
    v7[1] = a3();
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_21C5CF694()
{
  unint64_t result;

  result = qword_25528ACF0;
  if (!qword_25528ACF0)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EBB9C, &type metadata for PopoverSizeModifier);
    atomic_store(result, (unint64_t *)&qword_25528ACF0);
  }
  return result;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

_QWORD *sub_21C5CF720@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528ADD0);
  result = MEMORY[0x22077ECE0](&v4, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_21C5CF778(id *a1)
{
  return sub_21C5CF540(a1);
}

uint64_t objectdestroy_8Tm()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

id sub_21C5CF7C0@<X0>(uint64_t a1@<X8>)
{
  void **v1;
  void *v3;
  id result;
  char v5;

  v3 = *v1;
  result = objc_msgSend(v3, sel__hasMUID);
  if ((_DWORD)result && (result = objc_msgSend(v3, sel__muid)) != 0)
  {
    result = objc_msgSend(v3, sel__muid);
    v3 = result;
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v5;
  return result;
}

id sub_21C5CF914()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapItemDetailView.Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for MapItemDetailView.Coordinator()
{
  return objc_opt_self();
}

uint64_t sub_21C5CF97C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD3_AaBPAAE5sheet11isPresented9onDismiss7contentQrAA7BindingVySbG_yycSgqd__yctAaBRd__lFQOyx_AA15ModifiedContentVyAMy08_MapKit_aB00m10ItemDetailC033_88864655A4452E6E3BB4AF822A3E7692LLVAA30_SafeAreaRegionsIgnoringLayoutVGAN17SheetSizeModifierAPLLVGQo_HOTm(a1, &qword_25528ACA0, &qword_25528ACA8, (uint64_t (*)(void))sub_21C5CE828);
}

uint64_t sub_21C5CF9A0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD4_AaBPAAE5sheet4item9onDismiss7contentQrAA7BindingVyqd__SgG_yycSgqd_0_qd__cts12IdentifiableRd__AaBRd_0_r0_lFQOyx_08_MapKit_aB00jK4Item33_88864655A4452E6E3BB4AF822A3E7692LLVAA15ModifiedContentVyASyAN0km6DetailC0APLLVAA30_SafeAreaRegionsIgnoringLayoutVGAN17SheetSizeModifierAPLLVGQo_HOTm(a1, &qword_25528ACA0, &qword_25528ACA8, (uint64_t (*)(void))sub_21C5CE828);
}

uint64_t sub_21C5CF9C4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD3_AaBPAAE5sheet11isPresented9onDismiss7contentQrAA7BindingVySbG_yycSgqd__yctAaBRd__lFQOyx_AA15ModifiedContentVyAMy08_MapKit_aB00m10ItemDetailC033_88864655A4452E6E3BB4AF822A3E7692LLVAA30_SafeAreaRegionsIgnoringLayoutVGAN17SheetSizeModifierAPLLVGQo_HOTm(a1, &qword_25528ACE0, &qword_25528ACE8, (uint64_t (*)(void))sub_21C5CF694);
}

uint64_t sub_21C5CF9E8(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD3_AaBPAAE5sheet11isPresented9onDismiss7contentQrAA7BindingVySbG_yycSgqd__yctAaBRd__lFQOyx_AA15ModifiedContentVyAMy08_MapKit_aB00m10ItemDetailC033_88864655A4452E6E3BB4AF822A3E7692LLVAA30_SafeAreaRegionsIgnoringLayoutVGAN17SheetSizeModifierAPLLVGQo_HOTm(a1, &qword_25528ACE0, &qword_25528ACE8, (uint64_t (*)(void))sub_21C5CF694);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD3_AaBPAAE5sheet11isPresented9onDismiss7contentQrAA7BindingVySbG_yycSgqd__yctAaBRd__lFQOyx_AA15ModifiedContentVyAMy08_MapKit_aB00m10ItemDetailC033_88864655A4452E6E3BB4AF822A3E7692LLVAA30_SafeAreaRegionsIgnoringLayoutVGAN17SheetSizeModifierAPLLVGQo_HOTm(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t (*a4)(void))
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
  sub_21C5CF628(a3, a2, a4);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21C5CFA8C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD4_AaBPAAE5sheet4item9onDismiss7contentQrAA7BindingVyqd__SgG_yycSgqd_0_qd__cts12IdentifiableRd__AaBRd_0_r0_lFQOyx_08_MapKit_aB00jK4Item33_88864655A4452E6E3BB4AF822A3E7692LLVAA15ModifiedContentVyASyAN0km6DetailC0APLLVAA30_SafeAreaRegionsIgnoringLayoutVGAN17SheetSizeModifierAPLLVGQo_HOTm(a1, &qword_25528ACE0, &qword_25528ACE8, (uint64_t (*)(void))sub_21C5CF694);
}

uint64_t sub_21C5CFAB0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD4_AaBPAAE5sheet4item9onDismiss7contentQrAA7BindingVyqd__SgG_yycSgqd_0_qd__cts12IdentifiableRd__AaBRd_0_r0_lFQOyx_08_MapKit_aB00jK4Item33_88864655A4452E6E3BB4AF822A3E7692LLVAA15ModifiedContentVyASyAN0km6DetailC0APLLVAA30_SafeAreaRegionsIgnoringLayoutVGAN17SheetSizeModifierAPLLVGQo_HOTm(a1, &qword_25528ACE0, &qword_25528ACE8, (uint64_t (*)(void))sub_21C5CF694);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD4_AaBPAAE5sheet4item9onDismiss7contentQrAA7BindingVyqd__SgG_yycSgqd_0_qd__cts12IdentifiableRd__AaBRd_0_r0_lFQOyx_08_MapKit_aB00jK4Item33_88864655A4452E6E3BB4AF822A3E7692LLVAA15ModifiedContentVyASyAN0km6DetailC0APLLVAA30_SafeAreaRegionsIgnoringLayoutVGAN17SheetSizeModifierAPLLVGQo_HOTm(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t (*a4)(void))
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
  sub_21C5CF5BC();
  sub_21C5CF628(a3, a2, a4);
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PopoverSizeModifier()
{
  return &type metadata for PopoverSizeModifier;
}

ValueMetadata *type metadata accessor for IdentifiableMapItem()
{
  return &type metadata for IdentifiableMapItem;
}

ValueMetadata *type metadata accessor for SheetSizeModifier()
{
  return &type metadata for SheetSizeModifier;
}

void destroy for MapItemDetailView(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    swift_release();
    swift_release();
  }

  if (*(_QWORD *)(a1 + 40))
  {
    swift_release();
    swift_release();

  }
}

uint64_t initializeWithCopy for MapItemDetailView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  }
  v5 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  v7 = v5;
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v6;
    v8 = *(void **)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v8;
    swift_retain();
    swift_retain();
    v9 = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for MapItemDetailView(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  void *v7;
  void *v8;
  id v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  __int128 v19;

  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    }
    else
    {
      sub_21C524980(a1, &qword_25528AD68);
      v5 = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    v6 = *a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = v6;
  }
  v7 = *(void **)(a1 + 24);
  v8 = (void *)*((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 24) = v8;
  v9 = v8;

  v10 = (_OWORD *)(a1 + 32);
  v11 = a2 + 2;
  v12 = *((_QWORD *)a2 + 5);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v12)
    {
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      swift_retain();
      swift_release();
      v13 = *(void **)(a1 + 48);
      v14 = (void *)*((_QWORD *)a2 + 6);
      *(_QWORD *)(a1 + 48) = v14;
      v15 = v14;

    }
    else
    {
      sub_21C524980(a1 + 32, &qword_25528AD70);
      v18 = *((_QWORD *)a2 + 6);
      *v10 = *v11;
      *(_QWORD *)(a1 + 48) = v18;
    }
  }
  else if (v12)
  {
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    v16 = (void *)*((_QWORD *)a2 + 6);
    *(_QWORD *)(a1 + 48) = v16;
    swift_retain();
    swift_retain();
    v17 = v16;
  }
  else
  {
    v19 = *v11;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *v10 = v19;
  }
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MapItemDetailView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_release();
      *(_QWORD *)(a1 + 8) = v4;
      swift_release();
      goto LABEL_6;
    }
    sub_21C524980(a1, &qword_25528AD68);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_10:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    goto LABEL_11;
  }
  v6 = *(_QWORD *)(a2 + 40);
  if (!v6)
  {
    sub_21C524980(a1 + 32, &qword_25528AD70);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_QWORD *)(a1 + 40) = v6;
  swift_release();
  v7 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

LABEL_11:
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapItemDetailView(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapItemDetailView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MapItemDetailView()
{
  return &type metadata for MapItemDetailView;
}

uint64_t sub_21C5D0064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  _BYTE v9[24];
  _BYTE v10[8];
  uint64_t v11;

  v1 = v0;
  sub_21C5D0750(v0, (uint64_t)v9);
  result = sub_21C5D0750((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDB100]), sel_initWithMapItem_displaysMap_, *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 56));
LABEL_5:
    __swift_instantiateConcreteTypeFromMangledName(&qword_25528ADC0);
    sub_21C5E35C8();
    objc_msgSend(v3, sel_setDelegate_, v7);

    return (uint64_t)v3;
  }
  if (*(_QWORD *)(v0 + 40))
  {
    v7 = *(void **)(v0 + 32);
    v4 = *(id *)(v0 + 48);
    swift_retain();
    swift_retain();
    v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528AD70);
    MEMORY[0x22077ECE0](&v8, v5);
    v6 = v8;
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDB100]), sel_initWithMapItem_displaysMap_, v8, *(unsigned __int8 *)(v1 + 56));

    swift_release();
    swift_release();

    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_21C5D01B4(uint64_t result)
{
  id v1;

  if (*(_QWORD *)(result + 8))
  {
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25528AD68);
    sub_21C5E37CC();
LABEL_5:
    swift_release();
    return swift_release();
  }
  if (*(_QWORD *)(result + 40))
  {
    v1 = *(id *)(result + 48);
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25528AD70);
    sub_21C5E37CC();

    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_21C5D0294()
{
  return sub_21C5D0064();
}

void sub_21C5D02D4()
{
  __int128 *v0;
  __int128 v1;
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  uint64_t (**v5)();
  uint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];

  v1 = v0[1];
  v8 = *v0;
  v9 = v1;
  v10[0] = v0[2];
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)v0 + 41);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528ADC0);
  sub_21C5E35C8();
  v2 = (_OWORD *)swift_allocObject();
  *(_OWORD *)((char *)v2 + 57) = *(_OWORD *)((char *)v10 + 9);
  v3 = v10[0];
  v4 = v8;
  v2[2] = v9;
  v2[3] = v3;
  v2[1] = v4;
  v5 = (uint64_t (**)())&v7[OBJC_IVAR____TtCV15_MapKit_SwiftUIP33_88864655A4452E6E3BB4AF822A3E769217MapItemDetailView11Coordinator_didRequestDismissal];
  v6 = *(_QWORD *)&v7[OBJC_IVAR____TtCV15_MapKit_SwiftUIP33_88864655A4452E6E3BB4AF822A3E769217MapItemDetailView11Coordinator_didRequestDismissal];
  *v5 = sub_21C5D06B4;
  v5[1] = (uint64_t (*)())v2;
  sub_21C5D06BC((uint64_t *)&v8);
  sub_21C531A9C(v6);

}

id sub_21C5D039C@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MapItemDetailView.Coordinator()), sel_init);
  *a1 = result;
  return result;
}

uint64_t sub_21C5D03DC()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_21C5D03F0()
{
  unint64_t result;

  result = qword_25528AD78;
  if (!qword_25528AD78)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EBC24, &type metadata for IdentifiableMapItem.MapItemIdentity);
    atomic_store(result, (unint64_t *)&qword_25528AD78);
  }
  return result;
}

unint64_t sub_21C5D0438()
{
  unint64_t result;

  result = qword_25528AD80;
  if (!qword_25528AD80)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EBC64, &type metadata for IdentifiableMapItem.MapItemIdentity);
    atomic_store(result, (unint64_t *)&qword_25528AD80);
  }
  return result;
}

uint64_t sub_21C5D047C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21C5D048C()
{
  sub_21C5D0550();
  return sub_21C5E35BC();
}

uint64_t sub_21C5D04DC()
{
  sub_21C5D0550();
  return sub_21C5E358C();
}

void sub_21C5D052C()
{
  sub_21C5D0550();
  sub_21C5E35B0();
  __break(1u);
}

unint64_t sub_21C5D0550()
{
  unint64_t result;

  result = qword_25528AD88;
  if (!qword_25528AD88)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EBB24, &type metadata for MapItemDetailView);
    atomic_store(result, (unint64_t *)&qword_25528AD88);
  }
  return result;
}

uint64_t sub_21C5D0594(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528AD98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_21C5D05DC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25528ADB8;
  if (!qword_25528ADB8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528AD98);
    v2[0] = sub_21C5D07CC(&qword_25528ADB0, &qword_25528ADA8);
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_25528ADB8);
  }
  return result;
}

uint64_t sub_21C5D0658()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
  {
    swift_release();
    swift_release();
  }

  if (*(_QWORD *)(v0 + 56))
  {
    swift_release();
    swift_release();

  }
  return swift_deallocObject();
}

uint64_t sub_21C5D06B4()
{
  uint64_t v0;

  return sub_21C5D01B4(v0 + 16);
}

uint64_t *sub_21C5D06BC(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = (void *)a1[3];
  v2 = a1[4];
  v4 = a1[5];
  v5 = (void *)a1[6];
  sub_21C5AB738(*a1, a1[1]);
  v6 = v3;
  sub_21C5D0718(v2, v4, v5);
  return a1;
}

uint64_t sub_21C5D0718(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t result;

  if (a2)
  {
    v3 = a3;
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_21C5D0750(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528ADC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for IdentifiableMapItem.MapItemIdentity()
{
  return &type metadata for IdentifiableMapItem.MapItemIdentity;
}

uint64_t sub_21C5D07A8()
{
  return sub_21C5D07CC(&qword_25528ADD8, &qword_25528AD90);
}

uint64_t sub_21C5D07CC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDEFB78], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_21C5D0810()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25528ADE0;
  if (!qword_25528ADE0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25528ADE8);
    v2[0] = sub_21C5D07CC(&qword_25528ADB0, &qword_25528ADA8);
    v2[1] = sub_21C5D05DC();
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_25528ADE0);
  }
  return result;
}

uint64_t type metadata accessor for MapKitTypeConformance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapKitTypeConformance);
}

uint64_t type metadata accessor for MapKitTupleTypeDescription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapKitTupleTypeDescription);
}

uint64_t sub_21C5D08AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;

  if (qword_2552878D0 != -1)
    swift_once();
  swift_beginAccess();
  v2 = qword_255293A30;
  if (*(_QWORD *)(qword_255293A30 + 16) && (v3 = sub_21C530E7C(a1), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = sub_21C5D09B8();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = qword_255293A30;
    qword_255293A30 = 0x8000000000000000;
    sub_21C55CEA4(v5, a1, isUniquelyReferenced_nonNull_native);
    qword_255293A30 = v8;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  return v5;
}

uint64_t sub_21C5D09B8()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = AGTupleCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v1 = result;
    if (!result)
      return MEMORY[0x24BEE4AF8];
    v2 = 0;
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v5 = AGTupleElementType();
      _mapContentProtocolDescriptor();
      v6 = swift_conformsToProtocol();
      if (v6)
      {
        v7 = v6;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = sub_21C5B80E4(0, v3[2] + 1, 1, v3);
        v9 = v3[2];
        v8 = v3[3];
        if (v9 >= v8 >> 1)
          v3 = sub_21C5B80E4((_QWORD *)(v8 > 1), v9 + 1, 1, v3);
        v3[2] = v9 + 1;
        v4 = &v3[3 * v9];
        v4[4] = v2;
        v4[5] = v5;
        v4[6] = v7;
      }
      ++v2;
    }
    while (v1 != v2);
    return (uint64_t)v3;
  }
  return result;
}

uint64_t TupleMapContent.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t TupleMapContent.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*TupleMapContent.value.modify())()
{
  return nullsub_1;
}

uint64_t TupleMapContent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t static TupleMapContent._makeMapContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t List;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v50 = a4;
  v51 = a1;
  v53 = *MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for _MapContentOutputs(0);
  v44 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for MultiPreferenceCombinerVisitor();
  MEMORY[0x24BDAC7A8](v47);
  v48 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x24BDAC7A8](v46);
  v11 = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleMapContent(255, a3, v12, v13);
  v14 = sub_21C5E2EC0();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v43 - v16;
  List = type metadata accessor for TupleMapContent.MakeList(0, a3, v18, v19);
  v45 = *(_QWORD *)(List - 8);
  MEMORY[0x24BDAC7A8](List);
  v22 = (char *)v43 - v21;
  v23 = sub_21C5D08AC(a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v51, v14);
  v49 = a2;
  sub_21C529664(a2, (uint64_t)v11, type metadata accessor for _MapContentInputs);
  sub_21C5D0EF0((uint64_t)v17, (uint64_t)v11, 0, MEMORY[0x24BEE4AF8], a3, (uint64_t)v22);
  v51 = v23;
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v25 = *(int *)(List + 32);
    v26 = (uint64_t *)(v51 + 48);
    do
    {
      v27 = List;
      v28 = *(v26 - 1);
      v29 = *v26;
      v26 += 3;
      *(_QWORD *)&v22[v25] = AGTupleElementOffset();
      v30 = v28;
      List = v27;
      sub_21C523534((uint64_t)v22, v30, v29, v27, (uint64_t)&off_24E0541B8);
      --v24;
    }
    while (v24);
  }
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)&v22[*(int *)(List + 36)];
  v32 = *(_QWORD *)(v31 + 16);
  v33 = MEMORY[0x24BEE4AF8];
  if (v32)
  {
    v51 = List;
    v52 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_21C598FF4(0, v32, 0);
    v33 = v52;
    v34 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
    v43[1] = v31;
    v35 = v31 + v34;
    v36 = *(_QWORD *)(v44 + 72);
    do
    {
      sub_21C529664(v35, (uint64_t)v8, type metadata accessor for _MapContentOutputs);
      v52 = v33;
      v38 = *(_QWORD *)(v33 + 16);
      v37 = *(_QWORD *)(v33 + 24);
      if (v38 >= v37 >> 1)
      {
        sub_21C598FF4(v37 > 1, v38 + 1, 1);
        v33 = v52;
      }
      *(_QWORD *)(v33 + 16) = v38 + 1;
      sub_21C52AAD4((uint64_t)v8, v33 + v34 + v38 * v36, type metadata accessor for _MapContentOutputs);
      v35 += v36;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
    v39 = v50;
    List = v51;
  }
  else
  {
    v39 = v50;
  }
  v40 = v48;
  v41 = (uint64_t)&v48[*(int *)(v47 + 20)];
  _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0();
  *v40 = v33;
  sub_21C5D177C();
  sub_21C5E3460();
  sub_21C529664(v41, v39, type metadata accessor for _MapContentOutputs);
  sub_21C52A88C((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for MultiPreferenceCombinerVisitor);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v22, List);
}

uint64_t type metadata accessor for TupleMapContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleMapContent);
}

uint64_t type metadata accessor for TupleMapContent.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleMapContent.MakeList);
}

uint64_t sub_21C5D0EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *List;
  uint64_t result;

  type metadata accessor for TupleMapContent(255, a5, a3, a4);
  v12 = sub_21C5E2EC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a6, a1, v12);
  List = (int *)type metadata accessor for TupleMapContent.MakeList(0, a5, v13, v14);
  result = sub_21C52AAD4(a2, a6 + List[7], type metadata accessor for _MapContentInputs);
  *(_QWORD *)(a6 + List[8]) = a3;
  *(_QWORD *)(a6 + List[9]) = a4;
  return result;
}

uint64_t static TupleMapContent._mapContentCount(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TupleMapContent.CountContents(0, a2, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v19 - v11;
  v13 = sub_21C5D08AC(a2);
  sub_21C529664(a1, (uint64_t)v6, type metadata accessor for _MapContentInputs);
  sub_21C52AAD4((uint64_t)v6, (uint64_t)v12, type metadata accessor for _MapContentInputs);
  v14 = &v12[*(int *)(v9 + 28)];
  *(_QWORD *)v14 = 0;
  v14[8] = 0;
  v15 = *(_QWORD *)(v13 + 16);
  if (v15)
  {
    v16 = (uint64_t *)(v13 + 48);
    do
    {
      sub_21C523534((uint64_t)v12, *(v16 - 1), *v16, v9, (uint64_t)&off_24E054150);
      v16 += 3;
      --v15;
    }
    while (v15);
  }
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)&v12[*(int *)(v9 + 28)];
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v17;
}

uint64_t sub_21C5D1118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int OffsetAttribute2;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[16];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v45 = a4;
  v54 = *MEMORY[0x24BDAC8D0];
  v7 = sub_21C5E2EC0();
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v40 - v8;
  v10 = type metadata accessor for _MapContentOutputs(0);
  v46 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v42 = (char *)&v40 - v14;
  v15 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (uint64_t)v4 + *(int *)(a2 + 28);
  sub_21C529664(v18, (uint64_t)v17, v19);
  LODWORD(v18) = *(_DWORD *)(v18 + *(int *)(v15 + 28));
  v41 = a2;
  v20 = *(_QWORD *)((char *)v4 + *(int *)(a2 + 32));
  v21 = *(_QWORD *)(a2 + 16);
  __swift_instantiateConcreteTypeFromMangledName(qword_255287F08);
  v22 = swift_allocObject();
  v40 = (uint64_t)&v40;
  *(_OWORD *)(v22 + 16) = xmmword_21C5E5570;
  *(_QWORD *)(v22 + 32) = -1;
  *(_BYTE *)(v22 + 72) = 0;
  v48 = v18;
  v49 = v20;
  v50 = v22;
  v23 = (uint64_t)v12;
  v24 = v4;
  v27 = type metadata accessor for TupleMapContent.ChildTraits(0, v21, v25, v26);
  v52 = v27;
  v53 = MEMORY[0x22077F9A0](&unk_21C5EBF48, v27);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_255287F00);
  sub_21C52951C((uint64_t)&v48, (uint64_t)sub_21C52A8E0, (uint64_t)v51, v27, MEMORY[0x24BEE4078], v28, MEMORY[0x24BEE40A8], v29);
  swift_bridgeObjectRelease();
  *(_DWORD *)&v17[*(int *)(v15 + 28)] = v47;
  type metadata accessor for TupleMapContent(0, v21, v30, v31);
  sub_21C52BB38(v4);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  sub_21C52BAE0(OffsetAttribute2, (uint64_t)v9);
  v33 = a3;
  v34 = (uint64_t)v42;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v9, v17, v33);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v9, v44);
  sub_21C529664(v34, v23, type metadata accessor for _MapContentOutputs);
  v35 = *(int *)(v41 + 36);
  v36 = *(_QWORD *)((char *)v4 + v35);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v36 = sub_21C5B8208(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
  v38 = *(_QWORD *)(v36 + 16);
  v37 = *(_QWORD *)(v36 + 24);
  if (v38 >= v37 >> 1)
    v36 = sub_21C5B8208(v37 > 1, v38 + 1, 1, v36);
  *(_QWORD *)(v36 + 16) = v38 + 1;
  sub_21C52AAD4(v23, v36+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(_QWORD *)(v46 + 72) * v38, type metadata accessor for _MapContentOutputs);
  *(_QWORD *)((char *)v24 + v35) = v36;
  sub_21C52A88C(v34, type metadata accessor for _MapContentOutputs);
  return sub_21C52A88C((uint64_t)v17, type metadata accessor for _MapContentInputs);
}

uint64_t sub_21C5D1498@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Value;

  v4 = *MEMORY[0x24BE096C0];
  v5 = sub_21C5E34E4();
  v6 = v5;
  if (v4 == a1)
  {
    v7 = *(_QWORD *)(v5 - 8);
    v8 = 1;
  }
  else
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, Value, v6);
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v8, 1, v6);
}

uint64_t sub_21C5D1528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21C5D1118(a1, a4, a2, a3);
}

uint64_t sub_21C5D153C@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];
  char v17;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25528A5B0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v16 - v10;
  sub_21C5D1498(a1, (uint64_t)v16 - v10);
  v12 = sub_21C5E34E4();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_21C5E34D8();
    sub_21C52B92C((uint64_t)v11);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v11, v12);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v8, a3, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
  v16[0] = a2;
  v17 = 0;
  v14 = sub_21C5BAA60((uint64_t)v8, (uint64_t)v16);
  sub_21C52B9B0((uint64_t)v16);
  sub_21C52B92C((uint64_t)v8);
  v16[0] = v14;
  sub_21C52B9E4();
  return sub_21C5E34FC();
}

uint64_t sub_21C5D16BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C5D153C(*(_DWORD *)v1, *(_QWORD *)(v1 + 8), a1);
}

void sub_21C5D16D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v5 = (uint64_t *)(v4 + *(int *)(a2 + 28));
  if ((v5[1] & 1) != 0
    || (v6 = *v5, v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 40))(v4, a3, a4), (v8 & 1) != 0))
  {
    v9 = 0;
    v10 = 1;
    goto LABEL_6;
  }
  v9 = v6 + v7;
  if (!__OFADD__(v6, v7))
  {
    v10 = 0;
LABEL_6:
    *v5 = v9;
    *((_BYTE *)v5 + 8) = v10;
    return;
  }
  __break(1u);
}

void sub_21C5D1744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_21C5D16D0(a1, a4, a2, a3);
}

uint64_t sub_21C5D1758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static TupleMapContent._makeMapContent(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

uint64_t sub_21C5D1760(uint64_t a1, uint64_t a2)
{
  return static TupleMapContent._mapContentCount(inputs:)(a1, *(_QWORD *)(a2 + 16));
}

unint64_t sub_21C5D177C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25528AEF0[0];
  if (!qword_25528AEF0[0])
  {
    v1 = type metadata accessor for MultiPreferenceCombinerVisitor();
    result = MEMORY[0x22077F9A0](&unk_21C5E6930, v1);
    atomic_store(result, qword_25528AEF0);
  }
  return result;
}

uint64_t type metadata accessor for TupleMapContent.CountContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleMapContent.CountContents);
}

uint64_t sub_21C5D17D0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21C5D183C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21C5D18EC + 4 * byte_21C5EBDF8[(v7 - 1)]))();
}

void sub_21C5D193C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_21C5D1AEC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for _MapContentInputs(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21C5D1B5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_21C5E32C8();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for _MapContentInputs(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_21C5E2ED8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = v8[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_21C5E346C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    *(_DWORD *)((char *)a1 + v8[7]) = *(_DWORD *)((char *)a2 + v8[7]);
    v17 = *(int *)(a3 + 28);
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v18[8] = v19[8];
    *(_QWORD *)v18 = *(_QWORD *)v19;
  }
  return a1;
}

uint64_t sub_21C5D1C6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_21C5E32C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = type metadata accessor for _MapContentInputs(0);
  v4 = a1 + *(int *)(v3 + 20);
  v5 = sub_21C5E2ED8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(v3 + 24);
  v7 = sub_21C5E346C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t sub_21C5D1CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_21C5E32C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for _MapContentInputs(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_21C5E2ED8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_21C5E346C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
  v16 = *(int *)(a3 + 28);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  return a1;
}

uint64_t sub_21C5D1DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v6 = sub_21C5E32C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for _MapContentInputs(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_21C5E2ED8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_21C5E346C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
  v16 = *(int *)(a3 + 28);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = v19;
  return a1;
}

uint64_t sub_21C5D1EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_21C5E32C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for _MapContentInputs(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_21C5E2ED8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_21C5E346C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
  v16 = *(int *)(a3 + 28);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  return a1;
}

uint64_t sub_21C5D1FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_21C5E32C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for _MapContentInputs(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_21C5E2ED8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_21C5E346C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
  v16 = *(int *)(a3 + 28);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  return a1;
}

uint64_t sub_21C5D208C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5D2098(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _MapContentInputs(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_21C5D20D4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5D20E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _MapContentInputs(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_21C5D2120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  type metadata accessor for TupleMapContent(255, *(_QWORD *)(a1 + 16), a3, a4);
  result = sub_21C5E2EC0();
  if (v5 <= 0x3F)
  {
    result = type metadata accessor for _MapContentInputs(319);
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21C5D21D0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    type metadata accessor for TupleMapContent(255, *(_QWORD *)(a3 + 16), a3, a4);
    v8 = sub_21C5E2EC0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = *(int *)(a3 + 28);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_21C5E32C8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = (int *)type metadata accessor for _MapContentInputs(0);
    v14 = v13[5];
    v15 = &v10[v14];
    v16 = &v11[v14];
    v17 = sub_21C5E2ED8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = v13[6];
    v19 = &v10[v18];
    v20 = &v11[v18];
    v21 = sub_21C5E346C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    *(_DWORD *)&v10[v13[7]] = *(_DWORD *)&v11[v13[7]];
    v22 = *(int *)(a3 + 36);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 32)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 32));
    *(uint64_t *)((char *)a1 + v22) = *(uint64_t *)((char *)a2 + v22);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_21C5D2320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  type metadata accessor for TupleMapContent(255, *(_QWORD *)(a2 + 16), a3, a4);
  v6 = sub_21C5E2EC0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  v7 = a1 + *(int *)(a2 + 28);
  v8 = sub_21C5E32C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = type metadata accessor for _MapContentInputs(0);
  v10 = v7 + *(int *)(v9 + 20);
  v11 = sub_21C5E2ED8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v7 + *(int *)(v9 + 24);
  v13 = sub_21C5E346C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C5D23FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  type metadata accessor for TupleMapContent(255, *(_QWORD *)(a3 + 16), a3, a4);
  v7 = sub_21C5E2EC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_21C5E32C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = (int *)type metadata accessor for _MapContentInputs(0);
  v13 = v12[5];
  v14 = v9 + v13;
  v15 = v10 + v13;
  v16 = sub_21C5E2ED8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = v12[6];
  v18 = v9 + v17;
  v19 = v10 + v17;
  v20 = sub_21C5E346C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  *(_DWORD *)(v9 + v12[7]) = *(_DWORD *)(v10 + v12[7]);
  v21 = *(int *)(a3 + 36);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21C5D2520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  type metadata accessor for TupleMapContent(255, *(_QWORD *)(a3 + 16), a3, a4);
  v7 = sub_21C5E2EC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(a1, a2, v7);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_21C5E32C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = (int *)type metadata accessor for _MapContentInputs(0);
  v13 = v12[5];
  v14 = v9 + v13;
  v15 = v10 + v13;
  v16 = sub_21C5E2ED8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v17 = v12[6];
  v18 = v9 + v17;
  v19 = v10 + v17;
  v20 = sub_21C5E346C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  *(_DWORD *)(v9 + v12[7]) = *(_DWORD *)(v10 + v12[7]);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  *(_QWORD *)(a1 + *(int *)(a3 + 36)) = *(_QWORD *)(a2 + *(int *)(a3 + 36));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21C5D2654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  type metadata accessor for TupleMapContent(255, *(_QWORD *)(a3 + 16), a3, a4);
  v7 = sub_21C5E2EC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_21C5E32C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = (int *)type metadata accessor for _MapContentInputs(0);
  v13 = v12[5];
  v14 = v9 + v13;
  v15 = v10 + v13;
  v16 = sub_21C5E2ED8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  v17 = v12[6];
  v18 = v9 + v17;
  v19 = v10 + v17;
  v20 = sub_21C5E346C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  *(_DWORD *)(v9 + v12[7]) = *(_DWORD *)(v10 + v12[7]);
  v21 = *(int *)(a3 + 36);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  return a1;
}

uint64_t sub_21C5D2774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  type metadata accessor for TupleMapContent(255, *(_QWORD *)(a3 + 16), a3, a4);
  v7 = sub_21C5E2EC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(a1, a2, v7);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_21C5E32C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = (int *)type metadata accessor for _MapContentInputs(0);
  v13 = v12[5];
  v14 = v9 + v13;
  v15 = v10 + v13;
  v16 = sub_21C5E2ED8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = v12[6];
  v18 = v9 + v17;
  v19 = v10 + v17;
  v20 = sub_21C5E346C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  *(_DWORD *)(v9 + v12[7]) = *(_DWORD *)(v10 + v12[7]);
  v21 = *(int *)(a3 + 36);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21C5D289C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5D28A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;

  type metadata accessor for TupleMapContent(255, *(_QWORD *)(a3 + 16), a3, a4);
  v7 = sub_21C5E2EC0();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
  {
    v9 = v7;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    v11 = a1;
    return v10(v11, a2, v9);
  }
  v12 = type metadata accessor for _MapContentInputs(0);
  v13 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v13 + 84) == (_DWORD)a2)
  {
    v9 = v12;
    v11 = a1 + *(int *)(a3 + 28);
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    return v10(v11, a2, v9);
  }
  v15 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v15 >= 0xFFFFFFFF)
    LODWORD(v15) = -1;
  return (v15 + 1);
}

uint64_t sub_21C5D2960()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5D296C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v5 = a3;
  type metadata accessor for TupleMapContent(255, *(_QWORD *)(a4 + 16), a3, a4);
  v8 = sub_21C5E2EC0();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == v5)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for _MapContentInputs(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == v5)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for TupleMapContent.ChildTraits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleMapContent.ChildTraits);
}

uint64_t sub_21C5D2A30()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C5D2A38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21C5D2A6C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21C5D2AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21C5D2AEC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_21C5D2B34(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void sub_21C5D2B74()
{
  JUMPOUT(0x22077F9A0);
}

uint64_t sub_21C5D2B84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  char v15;
  void (*v16)(char *, uint64_t);
  void (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v22;
  uint64_t v25;

  v3 = sub_21C5E2E78();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v25 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v25 - v11;
  v13 = v1 + *(int *)(type metadata accessor for MapUserLocationButtonConfig(0) + 28);
  v14 = *MEMORY[0x24BDEB498];
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v12, *MEMORY[0x24BDEB498], v3);
  v15 = sub_21C5E2E6C();
  v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  v16(v12, v3);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  if ((v15 & 1) != 0)
  {
    v17(v10, a1, v3);
    v18 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v10, v3);
    if (v18 == *MEMORY[0x24BDEB480] || v18 == *MEMORY[0x24BDEB490] || v18 == v14)
      return 1;
    if (v18 == *MEMORY[0x24BDEB488])
      return 2;
  }
  else
  {
    v17(v7, v13, v3);
    v22 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
    if (v22 == *MEMORY[0x24BDEB480] || v22 == *MEMORY[0x24BDEB490] || v22 == v14)
      return 1;
    v10 = v7;
    if (v22 == *MEMORY[0x24BDEB488])
      return 2;
  }
  v16(v10, v3);
  return 1;
}

uint64_t MapUserLocationButton.init(scope:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  int *v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t result;
  char *v13;

  *a3 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255289DB0);
  swift_storeEnumTagMultiPayload();
  v6 = (int *)type metadata accessor for MapUserLocationButton(0);
  v7 = (uint64_t *)((char *)a3 + v6[5]);
  *v7 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2552897E0);
  swift_storeEnumTagMultiPayload();
  v8 = (char *)a3 + v6[6];
  *(_QWORD *)v8 = swift_getKeyPath();
  v8[8] = 0;
  v9 = (char *)a3 + v6[7];
  *(_QWORD *)v9 = swift_getKeyPath();
  v9[8] = 0;
  v10 = (char *)a3 + v6[8];
  *(_QWORD *)v10 = swift_getKeyPath();
  v10[8] = 0;
  v11 = (char *)a3 + v6[9];
  result = swift_getKeyPath();
  *(_QWORD *)v11 = result;
  v11[8] = 0;
  v13 = (char *)a3 + v6[10];
  *(_QWORD *)v13 = a1;
  v13[8] = a2 & 1;
  return result;
}

uint64_t type metadata accessor for MapUserLocationButton(uint64_t a1)
{
  return sub_21C5254A0(a1, (uint64_t *)&unk_25528B118);
}

uint64_t MapUserLocationButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  char v60;
  uint64_t KeyPath;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v89 = a1;
  v73 = type metadata accessor for _MapUserLocationButton(0);
  MEMORY[0x24BDAC7A8](v73);
  v74 = (uint64_t *)((char *)&v67 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528B0F8);
  MEMORY[0x24BDAC7A8](v88);
  v72 = (uint64_t)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v75 = (uint64_t)&v67 - v5;
  v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528B100);
  MEMORY[0x24BDAC7A8](v86);
  v87 = (uint64_t)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552880B8);
  MEMORY[0x24BDAC7A8](v7);
  v70 = (uint64_t)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552880C0);
  MEMORY[0x24BDAC7A8](v85);
  v69 = (uint64_t *)((char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v71 = (uint64_t)&v67 - v11;
  v80 = type metadata accessor for MapControlsConfig();
  MEMORY[0x24BDAC7A8](v80);
  v84 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_21C5E2E78();
  v81 = *(_QWORD *)(v13 - 8);
  v82 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_21C5E31A8();
  v78 = *(_QWORD *)(v16 - 8);
  v79 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
  v83 = *((_QWORD *)v19 - 1);
  MEMORY[0x24BDAC7A8](v19);
  v68 = (uint64_t)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v67 - v22;
  MEMORY[0x24BDAC7A8](v24);
  v76 = (char *)&v67 - v25;
  v26 = (int *)type metadata accessor for MapUserLocationButton(0);
  v27 = v1 + v26[9];
  v28 = *(_QWORD *)v27;
  v29 = *(_BYTE *)(v27 + 8);
  sub_21C531A90(*(_QWORD *)v27, v29);
  v30 = sub_21C52D7BC(v28, v29);
  sub_21C531A84(v28, v29);
  v77 = v1;
  sub_21C52D1A8((uint64_t)v18);
  sub_21C52D1D4((uint64_t)v15);
  v31 = v1 + v26[6];
  v32 = *(_QWORD *)v31;
  v33 = *(_BYTE *)(v31 + 8);
  j__swift_retain();
  v34 = sub_21C52D43C(v32, v33);
  j__swift_release();
  if (v30 == 3)
    v35 = 0;
  else
    v35 = v30;
  v23[1] = v35;
  (*(void (**)(char *, char *, uint64_t))(v78 + 32))(&v23[v19[6]], v18, v79);
  (*(void (**)(char *, char *, uint64_t))(v81 + 32))(&v23[v19[7]], v15, v82);
  *(_QWORD *)&v23[v19[8]] = v34;
  v36 = (uint64_t)v76;
  *v23 = 1;
  v37 = (uint64_t)v23;
  v38 = (uint64_t)v84;
  sub_21C5D3C44(v37, v36);
  v39 = type metadata accessor for MapPitchToggleConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 1, 1, v39);
  v40 = (int *)v80;
  v41 = v38 + *(int *)(v80 + 20);
  v42 = type metadata accessor for MapScaleViewConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v41, 1, 1, v42);
  v43 = v38 + v40[6];
  sub_21C529664(v36, v43, type metadata accessor for MapUserLocationButtonConfig);
  v44 = v19;
  v45 = v77;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v83 + 56))(v43, 0, 1, v44);
  v46 = v38 + v40[7];
  v47 = type metadata accessor for MapCompassConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v46, 1, 1, v47);
  *(_WORD *)(v38 + v40[8]) = 2;
  *(_WORD *)(v38 + v40[9]) = 2;
  *(_WORD *)(v38 + v40[10]) = 2;
  v48 = v45 + v26[8];
  v49 = *(_QWORD *)v48;
  LOBYTE(v46) = *(_BYTE *)(v48 + 8);
  sub_21C531A90(*(_QWORD *)v48, v46);
  v50 = sub_21C52D604(v49, v46);
  sub_21C531A84(v49, v46);
  if ((v50 & 1) != 0)
  {
    v51 = sub_21C5E3724();
    v52 = v70;
    sub_21C529664(v38, v70, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
    v53 = v69;
    sub_21C531B18(v52, (uint64_t)v69 + *(int *)(v85 + 36), &qword_2552880B8);
    *v53 = v51;
    sub_21C524980(v52, &qword_2552880B8);
    v54 = &qword_2552880C0;
    v55 = (uint64_t)v53;
    v56 = v71;
    sub_21C52DB08(v55, v71, &qword_2552880C0);
    sub_21C531B18(v56, v87, &qword_2552880C0);
  }
  else
  {
    v57 = v68;
    sub_21C529664(v36, v68, type metadata accessor for MapUserLocationButtonConfig);
    v58 = (uint64_t *)(v45 + v26[10]);
    v59 = *v58;
    v60 = *((_BYTE *)v58 + 8);
    KeyPath = swift_getKeyPath();
    v62 = v73;
    v63 = (uint64_t)v74;
    *v74 = KeyPath;
    *(_BYTE *)(v63 + 8) = 0;
    sub_21C5D3C44(v57, v63 + *(int *)(v62 + 20));
    v64 = v63 + *(int *)(v62 + 24);
    *(_QWORD *)v64 = v59;
    *(_BYTE *)(v64 + 8) = v60;
    v65 = v72;
    sub_21C529664(v63, v72, type metadata accessor for _MapUserLocationButton);
    *(_WORD *)(v65 + *(int *)(v88 + 36)) = 257;
    sub_21C52A88C(v63, type metadata accessor for _MapUserLocationButton);
    v54 = &qword_25528B0F8;
    v56 = v75;
    sub_21C52DB08(v65, v75, &qword_25528B0F8);
    sub_21C531B18(v56, v87, &qword_25528B0F8);
  }
  swift_storeEnumTagMultiPayload();
  sub_21C52D9D4();
  sub_21C5D3C88();
  sub_21C5E33E8();
  sub_21C524980(v56, v54);
  sub_21C52A88C(v38, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
  return sub_21C52A88C(v36, type metadata accessor for MapUserLocationButtonConfig);
}

uint64_t sub_21C5D358C()
{
  sub_21C5D5408(&qword_25528B158, (uint64_t)&unk_21C5EC1F0);
  return sub_21C5E33C4();
}

uint64_t sub_21C5D35EC()
{
  sub_21C5D5408(&qword_25528B158, (uint64_t)&unk_21C5EC1F0);
  return sub_21C5E3370();
}

void sub_21C5D364C()
{
  sub_21C5D5408(&qword_25528B158, (uint64_t)&unk_21C5EC1F0);
  sub_21C5E33B8();
  __break(1u);
}

id sub_21C5D3680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _BYTE v33[8];

  v1 = v0;
  v2 = sub_21C5E2E78();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_21C5E31A8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for _MapUserLocationButton(0);
  v11 = v0 + *(int *)(v10 + 24);
  if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    goto LABEL_10;
  v29 = v7;
  v30 = v6;
  v12 = *(_QWORD *)v11;
  v13 = *(_QWORD *)v0;
  v14 = *(_BYTE *)(v0 + 8);
  sub_21C52EF74(*(_QWORD *)v0, v14);
  v15 = sub_21C52F61C(v13, v14);
  sub_21C531AC8(v13, v14);
  if (*(_QWORD *)(v15 + 16) && (v16 = sub_21C530EAC(v12), (v17 & 1) != 0))
  {
    sub_21C5317D4(*(_QWORD *)(v15 + 56) + 8 * v16, (uint64_t)&v31);
    v32 = 0;
    swift_bridgeObjectRelease();
    v7 = v29;
    if ((v32 & 1) == 0)
    {
      sub_21C531764((uint64_t)&v31, (uint64_t)v33);
      v18 = MEMORY[0x22077FAFC](v33);
      if (v18)
      {
        v19 = (void *)v18;
        v20 = objc_msgSend((id)objc_opt_self(), sel_userTrackingButtonWithMapView_, v18);

        sub_21C5317A0((uint64_t)v33);
        v6 = v30;
        goto LABEL_11;
      }
      sub_21C5317A0((uint64_t)v33);
      goto LABEL_9;
    }
  }
  else
  {
    v31 = 0;
    v32 = 1;
    swift_bridgeObjectRelease();
    v7 = v29;
  }
  sub_21C524980((uint64_t)&v31, &qword_255288140);
LABEL_9:
  v6 = v30;
LABEL_10:
  v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDB1C8]), sel_init);
LABEL_11:
  v21 = v1 + *(int *)(v10 + 20);
  v22 = type metadata accessor for MapUserLocationButtonConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v21 + *(int *)(v22 + 24), v6);
  objc_msgSend(v20, sel_setBackgroundStyle_, sub_21C5DE8D0(v9, 0));
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v21 + *(int *)(v22 + 28), v2);
  v23 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v23 == *MEMORY[0x24BDEB480] || v23 == *MEMORY[0x24BDEB490] || v23 == *MEMORY[0x24BDEB498])
    goto LABEL_21;
  if (v23 != *MEMORY[0x24BDEB488])
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_21:
    v26 = 1;
    goto LABEL_22;
  }
  v26 = 2;
LABEL_22:
  objc_msgSend(v20, sel__setControlSize_, v26);
  return v20;
}

id sub_21C5D395C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v26;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _BYTE v33[8];

  v2 = v1;
  v30 = sub_21C5E2E78();
  v4 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_21C5E31A8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for _MapUserLocationButton(0);
  v12 = v1 + *(int *)(v11 + 24);
  if ((*(_BYTE *)(v12 + 8) & 1) != 0)
    goto LABEL_8;
  v28 = *(_QWORD *)v12;
  v29 = a1;
  v13 = *(_QWORD *)v1;
  v14 = *(_BYTE *)(v1 + 8);
  sub_21C52EF74(*(_QWORD *)v1, v14);
  v15 = sub_21C52F61C(v13, v14);
  sub_21C531AC8(v13, v14);
  if (*(_QWORD *)(v15 + 16) && (v16 = sub_21C530EAC(v28), (v17 & 1) != 0))
  {
    sub_21C5317D4(*(_QWORD *)(v15 + 56) + 8 * v16, (uint64_t)&v31);
    v32 = 0;
    swift_bridgeObjectRelease();
    a1 = v29;
    if ((v32 & 1) == 0)
    {
      sub_21C531764((uint64_t)&v31, (uint64_t)v33);
      v18 = (void *)MEMORY[0x22077FAFC](v33);
      objc_msgSend(a1, sel_setMapView_, v18);

      sub_21C5317A0((uint64_t)v33);
      goto LABEL_8;
    }
  }
  else
  {
    v31 = 0;
    v32 = 1;
    swift_bridgeObjectRelease();
    a1 = v29;
  }
  sub_21C524980((uint64_t)&v31, &qword_255288140);
LABEL_8:
  v19 = v2 + *(int *)(v11 + 20);
  v20 = type metadata accessor for MapUserLocationButtonConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v19 + *(int *)(v20 + 24), v7);
  objc_msgSend(a1, sel_setBackgroundStyle_, sub_21C5DE8D0(v10, 0));
  v21 = v19 + *(int *)(v20 + 28);
  v22 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v21, v30);
  v23 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v22);
  if (v23 == *MEMORY[0x24BDEB480] || v23 == *MEMORY[0x24BDEB490] || v23 == *MEMORY[0x24BDEB498])
    goto LABEL_18;
  if (v23 != *MEMORY[0x24BDEB488])
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v22);
LABEL_18:
    v26 = 1;
    return objc_msgSend(a1, sel__setControlSize_, v26);
  }
  v26 = 2;
  return objc_msgSend(a1, sel__setControlSize_, v26);
}

uint64_t type metadata accessor for _MapUserLocationButton(uint64_t a1)
{
  return sub_21C5254A0(a1, (uint64_t *)&unk_25528B138);
}

uint64_t type metadata accessor for MapUserLocationButtonConfig(uint64_t a1)
{
  return sub_21C5254A0(a1, (uint64_t *)&unk_25528B148);
}

uint64_t sub_21C5D3C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MapUserLocationButtonConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_21C5D3C88()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25528B108;
  if (!qword_25528B108)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B0F8);
    v2[0] = sub_21C5D5408(&qword_25528B110, (uint64_t)&unk_21C5EC280);
    v2[1] = MEMORY[0x24BDEDB80];
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_25528B108);
  }
  return result;
}

uint64_t sub_21C5D3D04()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for MapUserLocationButton(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255289DB0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_21C5E31A8();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v9 = a3[5];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2552897E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = sub_21C5E2E78();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v13 = a3[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = *(_QWORD *)v15;
    v17 = v15[8];
    j__swift_retain();
    *(_QWORD *)v14 = v16;
    v14[8] = v17;
    v18 = a3[7];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = *(_QWORD *)v20;
    v22 = v20[8];
    sub_21C52EF74(*(_QWORD *)v20, v22);
    *(_QWORD *)v19 = v21;
    v19[8] = v22;
    v23 = a3[8];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = *(_QWORD *)v25;
    v27 = v25[8];
    sub_21C531A90(*(_QWORD *)v25, v27);
    *(_QWORD *)v24 = v26;
    v24[8] = v27;
    v28 = a3[9];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = *(_QWORD *)v30;
    v32 = v30[8];
    sub_21C531A90(*(_QWORD *)v30, v32);
    *(_QWORD *)v29 = v31;
    v29[8] = v32;
    v33 = a3[10];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v34[8] = v35[8];
  }
  return a1;
}

uint64_t destroy for MapUserLocationButton(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255289DB0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_21C5E31A8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  v5 = a1 + a2[5];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2552897E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_21C5E2E78();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  j__swift_release();
  sub_21C531AC8(*(_QWORD *)(a1 + a2[7]), *(_BYTE *)(a1 + a2[7] + 8));
  sub_21C531A84(*(_QWORD *)(a1 + a2[8]), *(_BYTE *)(a1 + a2[8] + 8));
  return sub_21C531A84(*(_QWORD *)(a1 + a2[9]), *(_BYTE *)(a1 + a2[9] + 8));
}

_QWORD *initializeWithCopy for MapUserLocationButton(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  char *v33;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255289DB0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_21C5E31A8();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v7 = a3[5];
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2552897E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_21C5E2E78();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = *(_QWORD *)v13;
  v15 = v13[8];
  j__swift_retain();
  *(_QWORD *)v12 = v14;
  v12[8] = v15;
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  v20 = v18[8];
  sub_21C52EF74(*(_QWORD *)v18, v20);
  *(_QWORD *)v17 = v19;
  v17[8] = v20;
  v21 = a3[8];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_21C531A90(*(_QWORD *)v23, v25);
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  v26 = a3[9];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = *(_QWORD *)v28;
  v30 = v28[8];
  sub_21C531A90(*(_QWORD *)v28, v30);
  *(_QWORD *)v27 = v29;
  v27[8] = v30;
  v31 = a3[10];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  return a1;
}

_QWORD *assignWithCopy for MapUserLocationButton(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;

  if (a1 != a2)
  {
    sub_21C524980((uint64_t)a1, (uint64_t *)&unk_255289DB0);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255289DB0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_21C5E31A8();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v7 = a3[5];
    v8 = (_QWORD *)((char *)a1 + v7);
    v9 = (_QWORD *)((char *)a2 + v7);
    sub_21C524980((uint64_t)a1 + v7, (uint64_t *)&unk_2552897E0);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2552897E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_21C5E2E78();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = *(_QWORD *)v13;
  v15 = v13[8];
  j__swift_retain();
  *(_QWORD *)v12 = v14;
  v12[8] = v15;
  j__swift_release();
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  v20 = v18[8];
  sub_21C52EF74(*(_QWORD *)v18, v20);
  v21 = *(_QWORD *)v17;
  v22 = v17[8];
  *(_QWORD *)v17 = v19;
  v17[8] = v20;
  sub_21C531AC8(v21, v22);
  v23 = a3[8];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *(_QWORD *)v25;
  v27 = v25[8];
  sub_21C531A90(*(_QWORD *)v25, v27);
  v28 = *(_QWORD *)v24;
  v29 = v24[8];
  *(_QWORD *)v24 = v26;
  v24[8] = v27;
  sub_21C531A84(v28, v29);
  v30 = a3[9];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)v32;
  v34 = v32[8];
  sub_21C531A90(*(_QWORD *)v32, v34);
  v35 = *(_QWORD *)v31;
  v36 = v31[8];
  *(_QWORD *)v31 = v33;
  v31[8] = v34;
  sub_21C531A84(v35, v36);
  v37 = a3[10];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = *(_QWORD *)v39;
  v38[8] = v39[8];
  *(_QWORD *)v38 = v40;
  return a1;
}

char *initializeWithTake for MapUserLocationButton(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255289DB0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_21C5E31A8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2552897E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12 = sub_21C5E2E78();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = &a1[v14];
  v18 = &a2[v14];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = a3[8];
  v20 = a3[9];
  v21 = &a1[v19];
  v22 = &a2[v19];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = &a1[v20];
  v24 = &a2[v20];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  v25 = a3[10];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = *(_QWORD *)v27;
  v26[8] = v27[8];
  *(_QWORD *)v26 = v28;
  return a1;
}

char *assignWithTake for MapUserLocationButton(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char *v36;
  char *v37;

  if (a1 != a2)
  {
    sub_21C524980((uint64_t)a1, (uint64_t *)&unk_255289DB0);
    v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255289DB0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_21C5E31A8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_21C524980((uint64_t)&a1[v8], (uint64_t *)&unk_2552897E0);
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2552897E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = sub_21C5E2E78();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  j__swift_release();
  v17 = a3[7];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *(_QWORD *)v19;
  LOBYTE(v19) = v19[8];
  v21 = *(_QWORD *)v18;
  v22 = v18[8];
  *(_QWORD *)v18 = v20;
  v18[8] = (char)v19;
  sub_21C531AC8(v21, v22);
  v23 = a3[8];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = *(_QWORD *)v25;
  LOBYTE(v25) = v25[8];
  v27 = *(_QWORD *)v24;
  v28 = v24[8];
  *(_QWORD *)v24 = v26;
  v24[8] = (char)v25;
  sub_21C531A84(v27, v28);
  v29 = a3[9];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = *(_QWORD *)v31;
  LOBYTE(v31) = v31[8];
  v33 = *(_QWORD *)v30;
  v34 = v30[8];
  *(_QWORD *)v30 = v32;
  v30[8] = (char)v31;
  sub_21C531A84(v33, v34);
  v35 = a3[10];
  v36 = &a1[v35];
  v37 = &a2[v35];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  v36[8] = v37[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for MapUserLocationButton()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5D47F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552880E8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552880F0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 > 1)
    return (v14 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MapUserLocationButton()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5D48AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552880E8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&qword_2552880F0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24) + 8) = -(char)a2;
  return result;
}

void sub_21C5D495C()
{
  unint64_t v0;
  unint64_t v1;

  sub_21C52E784(319, (unint64_t *)&unk_2552897B0, (void (*)(uint64_t))MEMORY[0x24BDEDCA8]);
  if (v0 <= 0x3F)
  {
    sub_21C52E784(319, (unint64_t *)&qword_255289D70, (void (*)(uint64_t))MEMORY[0x24BDEB4A0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

unint64_t sub_21C5D4A1C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25528B128;
  if (!qword_25528B128)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B130);
    v2[0] = sub_21C52D9D4();
    v2[1] = sub_21C5D3C88();
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_25528B128);
  }
  return result;
}

unint64_t sub_21C5D4A88(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_21C52EF74(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(int *)(a3 + 20);
    v10 = a1 + v9;
    v11 = a2 + v9;
    *(_WORD *)(a1 + v9) = *(_WORD *)(a2 + v9);
    v12 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
    v13 = v12[6];
    v14 = v10 + v13;
    v15 = v11 + v13;
    v16 = sub_21C5E31A8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = v12[7];
    v18 = v10 + v17;
    v19 = v11 + v17;
    v20 = sub_21C5E2E78();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    *(_QWORD *)(v10 + v12[8]) = *(_QWORD *)(v11 + v12[8]);
    v21 = *(int *)(a3 + 24);
    v22 = a1 + v21;
    v23 = a2 + v21;
    *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
    *(_QWORD *)v22 = *(_QWORD *)v23;
  }
  swift_retain();
  return a1;
}

uint64_t sub_21C5D4BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_21C531AC8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for MapUserLocationButtonConfig(0);
  v6 = v4 + *(int *)(v5 + 24);
  v7 = sub_21C5E31A8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = v4 + *(int *)(v5 + 28);
  v9 = sub_21C5E2E78();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_release();
}

uint64_t sub_21C5D4C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_21C52EF74(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_WORD *)(a1 + v8) = *(_WORD *)(a2 + v8);
  v11 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
  v12 = v11[6];
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = sub_21C5E31A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = v11[7];
  v17 = v9 + v16;
  v18 = v10 + v16;
  v19 = sub_21C5E2E78();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  *(_QWORD *)(v9 + v11[8]) = *(_QWORD *)(v10 + v11[8]);
  v20 = *(int *)(a3 + 24);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  swift_retain();
  return a1;
}

uint64_t sub_21C5D4D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_21C52EF74(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_21C531AC8(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (_BYTE *)(a1 + v10);
  v12 = a2 + v10;
  *v11 = *(_BYTE *)(a2 + v10);
  v11[1] = *(_BYTE *)(a2 + v10 + 1);
  v13 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
  v14 = v13[6];
  v15 = &v11[v14];
  v16 = v12 + v14;
  v17 = sub_21C5E31A8();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = v13[7];
  v19 = &v11[v18];
  v20 = v12 + v18;
  v21 = sub_21C5E2E78();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  *(_QWORD *)&v11[v13[8]] = *(_QWORD *)(v12 + v13[8]);
  swift_retain();
  swift_release();
  v22 = *(int *)(a3 + 24);
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  *(_BYTE *)(v23 + 8) = *((_BYTE *)v24 + 8);
  *(_QWORD *)v23 = v25;
  return a1;
}

uint64_t sub_21C5D4E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_WORD *)(a1 + v6) = *(_WORD *)(a2 + v6);
  v9 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
  v10 = v9[6];
  v11 = v7 + v10;
  v12 = v8 + v10;
  v13 = sub_21C5E31A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = v9[7];
  v15 = v7 + v14;
  v16 = v8 + v14;
  v17 = sub_21C5E2E78();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  *(_QWORD *)(v7 + v9[8]) = *(_QWORD *)(v8 + v9[8]);
  v18 = *(int *)(a3 + 24);
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v19 = *(_QWORD *)v20;
  return a1;
}

uint64_t sub_21C5D4F58(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_21C531AC8(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (_BYTE *)(a1 + v10);
  v12 = (uint64_t)a2 + v10;
  *v11 = *((_BYTE *)a2 + v10);
  v11[1] = *((_BYTE *)a2 + v10 + 1);
  v13 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
  v14 = v13[6];
  v15 = &v11[v14];
  v16 = v12 + v14;
  v17 = sub_21C5E31A8();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = v13[7];
  v19 = &v11[v18];
  v20 = v12 + v18;
  v21 = sub_21C5E2E78();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  *(_QWORD *)&v11[v13[8]] = *(_QWORD *)(v12 + v13[8]);
  swift_release();
  v22 = *(int *)(a3 + 24);
  v23 = a1 + v22;
  v24 = (uint64_t)a2 + v22;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  return a1;
}

uint64_t sub_21C5D5064()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5D5070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for MapUserLocationButtonConfig(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_21C5D50E4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5D50F0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = type metadata accessor for MapUserLocationButtonConfig(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_21C5D5160()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MapUserLocationButtonConfig(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21C5D51DC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5D51E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  int v13;

  v6 = sub_21C5E31A8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_21C5E2E78();
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[8]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  v13 = v12 - 1;
  if (v13 < 0)
    v13 = -1;
  return (v13 + 1);
}

uint64_t sub_21C5D5298()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5D52A4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_21C5E31A8();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_21C5E2E78();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[8]) = a2;
  return result;
}

uint64_t sub_21C5D5344()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_21C5E31A8();
  if (v1 <= 0x3F)
  {
    result = sub_21C5E2E78();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_21C5D53E4()
{
  return sub_21C5D5408(&qword_25528B110, (uint64_t)&unk_21C5EC280);
}

uint64_t sub_21C5D5408(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for _MapUserLocationButton(255);
    result = MEMORY[0x22077F9A0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21C5D5448(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (*a1 == *a2 && (sub_21C5E2E54() & 1) != 0)
  {
    v4 = type metadata accessor for MapUserLocationButtonConfig(0);
    if ((sub_21C5E3178() & 1) != 0 && (sub_21C5E2E6C() & 1) != 0)
    {
      v5 = *(int *)(v4 + 32);
      v6 = *(_QWORD *)&a2[v5];
      if (*(_QWORD *)&a1[v5])
      {
        if (v6)
        {
          swift_retain();
          swift_retain();
          v7 = sub_21C5E3718();
          swift_release();
          swift_release();
          if ((v7 & 1) != 0)
            return 1;
        }
      }
      else if (!v6)
      {
        return 1;
      }
    }
  }
  return 0;
}

id sub_21C5D5554(char *a1, uint64_t a2, SEL *a3)
{
  void *v4;
  char *v5;
  id v6;
  void *v7;
  void *v8;

  v4 = *(void **)&a1[OBJC_IVAR____TtCV15_MapKit_SwiftUI11MapPolyline12CocoaWrapper_wrapped];
  v5 = a1;
  v6 = objc_msgSend(v4, *a3);
  if (v6)
  {
    v7 = v6;
    sub_21C5E3964();

    v8 = (void *)sub_21C5E3940();
    swift_bridgeObjectRelease();
  }
  else
  {

    v8 = 0;
  }
  return v8;
}

void sub_21C5D55F0(char *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  void *v6;
  char *v7;
  char *v8;
  id v9;

  if (a3)
  {
    sub_21C5E3964();
    v6 = *(void **)&a1[OBJC_IVAR____TtCV15_MapKit_SwiftUI11MapPolyline12CocoaWrapper_wrapped];
    v7 = a1;
    v9 = (id)sub_21C5E3940();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(void **)&a1[OBJC_IVAR____TtCV15_MapKit_SwiftUI11MapPolyline12CocoaWrapper_wrapped];
    v8 = a1;
    v9 = 0;
  }
  objc_msgSend(v6, *a4, v9);

}

id sub_21C5D58BC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapPolyline.CocoaWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void static MapPolyline.ContourStyle.straight.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static MapPolyline.ContourStyle.geodesic.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t MapPolyline.init(coordinates:contourStyle:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v3;

  if (*a2)
    v3 = 257;
  else
    v3 = 1;
  *(_QWORD *)a3 = result;
  *(_WORD *)(a3 + 8) = v3;
  return result;
}

uint64_t MapPolyline.init(points:contourStyle:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v3;

  if (*a2)
    v3 = 256;
  else
    v3 = 0;
  *(_QWORD *)a3 = result;
  *(_WORD *)(a3 + 8) = v3;
  return result;
}

id MapPolyline.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  objc_class *v4;
  char *v5;
  id result;
  objc_super v7;

  v4 = (objc_class *)type metadata accessor for MapPolyline.CocoaWrapper();
  v5 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v5[OBJC_IVAR____TtCV15_MapKit_SwiftUI11MapPolyline12CocoaWrapper_wrapped] = a1;
  v7.receiver = v5;
  v7.super_class = v4;
  result = objc_msgSendSuper2(&v7, sel_init);
  *(_QWORD *)a2 = result;
  *(_WORD *)(a2 + 8) = 0x8000;
  return result;
}

uint64_t type metadata accessor for MapPolyline.CocoaWrapper()
{
  return objc_opt_self();
}

void MapPolyline.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  objc_class *v5;
  char *v6;
  id v7;
  objc_super v8;

  v4 = objc_msgSend(a1, sel_polyline);
  v5 = (objc_class *)type metadata accessor for MapPolyline.CocoaWrapper();
  v6 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v6[OBJC_IVAR____TtCV15_MapKit_SwiftUI11MapPolyline12CocoaWrapper_wrapped] = v4;
  v8.receiver = v6;
  v8.super_class = v5;
  v7 = objc_msgSendSuper2(&v8, sel_init);

  *(_QWORD *)a2 = v7;
  *(_WORD *)(a2 + 8) = 0x8000;
}

uint64_t static MapPolyline._mapContentCount(inputs:)()
{
  return 1;
}

uint64_t static MapPolyline._makeMapContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  _QWORD v20[2];
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[36];
  uint64_t v28;
  char v29;
  uint64_t v30;

  v21 = a2;
  v30 = *MEMORY[0x24BDAC8D0];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552882A8);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (int *)((char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528B168);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (int *)((char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20[1] = a3;
  _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0();
  (*(void (**)(int *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  if (v11 != 4)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v13 = *v12;
  (*(void (**)(int *, uint64_t))(v10 + 8))(v12, v9);
  v14 = v21;
  sub_21C5E32B0();
  if (v7 != 4)
    goto LABEL_5;
  v15 = *v8;
  (*(void (**)(int *, uint64_t))(v6 + 8))(v8, v5);
  v16 = *(_DWORD *)(v14 + *(int *)(type metadata accessor for _MapContentInputs(0) + 28));
  v22 = v13;
  v23 = v15;
  v24 = v16;
  v25 = 0u;
  v26 = 0u;
  memset(v27, 0, 28);
  v27[28] = -1;
  v28 = 0;
  v29 = 1;
  sub_21C527A50();
  sub_21C5D6760();
  v17 = sub_21C5E2DAC();
  MEMORY[0x24BDAC7A8](v17);
  LODWORD(v20[-2]) = v18;
  sub_21C524A44();
  return sub_21C5E3478();
}

uint64_t sub_21C5D5CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Value;
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void *v70;
  __int16 v71;
  int v72;
  uint64_t v73;
  void *v74;
  _QWORD *v75;
  __int16 v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  void (*v94)(uint64_t, char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  void *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  _OWORD v112[2];
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  _QWORD v117[6];

  v1 = v0;
  v117[5] = *MEMORY[0x24BDAC8D0];
  v95 = type metadata accessor for MapContentList.Item.Content(0);
  MEMORY[0x24BDAC7A8](v95);
  v100 = (uint64_t *)((char *)&v88 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v96 = type metadata accessor for MapContentList.Item(0);
  v97 = *(_QWORD *)(v96 - 8);
  MEMORY[0x24BDAC7A8](v96);
  v98 = (uint64_t *)((char *)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v111 = sub_21C5E328C();
  v104 = *(_QWORD *)(v111 - 8);
  MEMORY[0x24BDAC7A8](v111);
  v108 = (char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v110 = (char *)&v88 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552884D0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v88 - v11;
  v13 = sub_21C5E34E4();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v99 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v109 = (char *)&v88 - v17;
  Value = AGGraphGetValue();
  v93 = v19;
  v20 = *(void **)Value;
  v21 = *(unsigned __int16 *)(Value + 8);
  v22 = *(int *)(v7 + 48);
  v23 = *(_DWORD *)(v1 + 8) == *MEMORY[0x24BE096C0];
  v106 = *(void **)Value;
  v105 = v21;
  if (v23)
  {
    sub_21C561470(v20, v21);
    sub_21C5E34D8();
    v92 = 0;
    v12[v22] = 0;
    v28 = v14;
    v29 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  }
  else
  {
    v24 = AGGraphGetValue();
    v26 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v9, v24, v13);
    v9[v22] = v26 & 1;
    v27 = *(int *)(v7 + 48);
    v28 = v14;
    v29 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v29(v12, v9, v13);
    v12[v22] = v9[v27];
    sub_21C561470(v20, v21);
    v92 = v12[v22];
  }
  v107 = v13;
  v29(v109, v12, v13);
  v30 = v111;
  v31 = AGGraphGetValue();
  v32 = v104;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v104 + 16);
  v34 = v110;
  v33(v110, v31, v30);
  v35 = sub_21C5E31B4();
  v36 = *(void (**)(char *, uint64_t))(v32 + 8);
  v36(v34, v30);
  v37 = *(_QWORD *)(v1 + 16);
  v38 = (v35 | v37) == 0;
  v39 = v28;
  if (v35 && v37)
  {
    swift_retain();
    swift_retain();
    v38 = sub_21C5E3718();
    swift_release();
    swift_release();
  }
  v91 = v38;
  v40 = v111;
  v41 = AGGraphGetValue();
  v42 = v110;
  v33(v110, v41, v40);
  sub_21C59A014();
  sub_21C5E3298();
  v112[0] = v114;
  v112[1] = v115;
  v43 = *((_QWORD *)&v115 + 1);
  v113 = v116;
  v44 = v114;
  v101 = DWORD2(v114);
  v102 = HIDWORD(v114);
  v45 = v115;
  v46 = v116;
  v36(v42, v40);
  v47 = *(_QWORD *)(v1 + 48);
  v94 = (void (*)(uint64_t, char *, uint64_t))v29;
  v104 = v43;
  if (v47)
  {
    v48 = *(_QWORD *)(v1 + 56);
    v49 = *(_QWORD *)(v1 + 40);
    v50 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)&v114 = *(_QWORD *)(v1 + 24);
    *((_QWORD *)&v114 + 1) = v50;
    *(_QWORD *)&v115 = v49;
    *((_QWORD *)&v115 + 1) = v47;
    v116 = v48;
    sub_21C56C80C((uint64_t)v112);
    swift_bridgeObjectRetain();
    v51 = v36;
    v52 = MEMORY[0x22077E3B0](v112, &v114);
    swift_bridgeObjectRelease();
    sub_21C56C834((uint64_t)v112);
    v90 = v52 ^ 1;
    v36 = v51;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v90 = 1;
  }
  v53 = v111;
  v54 = AGGraphGetValue();
  v55 = v110;
  v33(v110, v54, v53);
  sub_21C59A058();
  sub_21C5E3298();
  v36(v55, v53);
  v56 = AGGraphGetValue();
  v57 = (uint64_t)v108;
  v33(v108, v56, v53);
  v58 = sub_21C5AF7D0(v117, v57);
  v60 = v59 & 1;
  v61 = *(unsigned __int8 *)(v1 + 72);
  v103 = v58;
  if (v61 == 255)
    goto LABEL_17;
  v62 = v58;
  v63 = *(_QWORD *)(v1 + 64);
  if ((v59 & 1) == 0)
  {
    if ((v61 & 1) == 0)
    {
      sub_21C52EF74(v58, 0);
      sub_21C59A1FC(v63, v61);
      v64 = sub_21C5E3718();
      goto LABEL_16;
    }
LABEL_17:
    v89 = 0;
    goto LABEL_18;
  }
  if ((v61 & 1) == 0)
    goto LABEL_17;
  sub_21C52EF74(v58, 1);
  sub_21C59A1FC(v63, v61);
  v64 = MEMORY[0x22077ED70](v62, v63);
LABEL_16:
  v89 = v64;
  sub_21C59A1E4(v63, v61);
  sub_21C531AC8(v62, v60);
LABEL_18:
  v65 = (char *)(v101 | (v102 << 32));
  v66 = v111;
  v67 = AGGraphGetValue();
  v68 = v110;
  v33(v110, v67, v66);
  sub_21C59A120();
  sub_21C5E3298();
  v108 = (char *)v117[0];
  v36(v68, v66);
  if ((*(_BYTE *)(v1 + 88) & 1) == 0
    && (v89 & ~(v93 | v90 | v91 ^ 1 | v92) & 1) != 0
    && v108 == *(char **)(v1 + 80)
    && AGGraphGetOutputValue())
  {
    *(_QWORD *)(v1 + 80) = v108;
    *(_BYTE *)(v1 + 88) = 0;
    sub_21C59A1E4(*(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 72));
    *(_QWORD *)(v1 + 64) = v103;
    *(_BYTE *)(v1 + 72) = v60;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 24) = v44;
    *(_QWORD *)(v1 + 32) = v65;
    *(_QWORD *)(v1 + 40) = v45;
    *(_QWORD *)(v1 + 48) = v104;
    *(_QWORD *)(v1 + 56) = v46;
    *(_QWORD *)(v1 + 16) = v35;
    v69 = v107;
    v70 = v106;
    v71 = v105;
  }
  else
  {
    v110 = v65;
    v72 = *(_DWORD *)(v1 + 12) + 1;
    *(_DWORD *)(v1 + 12) = v72;
    v111 = v39;
    v73 = v104;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v99, v109, v107);
    v74 = v106;
    v75 = v100;
    *v100 = v106;
    v76 = v105;
    *((_WORD *)v75 + 4) = v105;
    v75[2] = v35;
    v75[3] = v44;
    v77 = v102;
    *((_DWORD *)v75 + 8) = v101;
    *((_DWORD *)v75 + 9) = v77;
    v75[5] = v45;
    v75[6] = v73;
    v75[7] = v46;
    v78 = v103;
    v75[8] = v103;
    *((_BYTE *)v75 + 72) = v60 != 0;
    v75[10] = v108;
    swift_storeEnumTagMultiPayload();
    sub_21C561470(v74, v76);
    swift_retain();
    sub_21C56C80C((uint64_t)v112);
    sub_21C52EF74(v78, v60);
    sub_21C561470(v74, v76);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_21C52EF74(v78, v60);
    sub_21C52B9E4();
    sub_21C5E34F0();
    v79 = v117[0];
    if (!v117[0])
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_255287F08);
      v79 = swift_allocObject();
      *(_OWORD *)(v79 + 16) = xmmword_21C5E5570;
      *(_QWORD *)(v79 + 32) = 0;
      *(_BYTE *)(v79 + 72) = 0;
    }
    v80 = (uint64_t)v98;
    *v98 = v79;
    v81 = v96;
    v69 = v107;
    v94(v80 + *(int *)(v96 + 28), v99, v107);
    *(_DWORD *)(v80 + 8) = v72;
    sub_21C536C90((uint64_t)v100, v80 + *(int *)(v81 + 24));
    __swift_instantiateConcreteTypeFromMangledName(&qword_2552884D8);
    v82 = (*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
    v83 = swift_allocObject();
    *(_OWORD *)(v83 + 16) = xmmword_21C5E5570;
    sub_21C59A164(v80, v83 + v82);
    v117[0] = sub_21C5BA7C0(v83);
    v117[1] = v84;
    AGGraphSetOutputValue();
    v70 = v106;
    v71 = v105;
    sub_21C56148C(v106, v105);
    v85 = v104;
    swift_bridgeObjectRelease();
    swift_release();
    v86 = v103;
    sub_21C531AC8(v103, v60);
    swift_bridgeObjectRelease();
    sub_21C59A1A8(v80);
    *(_QWORD *)(v1 + 80) = v108;
    *(_BYTE *)(v1 + 88) = 0;
    sub_21C59A1E4(*(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 72));
    *(_QWORD *)(v1 + 64) = v86;
    *(_BYTE *)(v1 + 72) = v60;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 24) = v44;
    *(_QWORD *)(v1 + 32) = v110;
    *(_QWORD *)(v1 + 40) = v45;
    *(_QWORD *)(v1 + 48) = v85;
    *(_QWORD *)(v1 + 56) = v46;
    *(_QWORD *)(v1 + 16) = v35;
    v39 = v111;
  }
  swift_retain();
  swift_release();
  sub_21C56148C(v70, v71);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v109, v69);
}

unint64_t sub_21C5D6760()
{
  unint64_t result;

  result = qword_25528B170;
  if (!qword_25528B170)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EC404, &type metadata for MapPolyline.MakeList);
    atomic_store(result, (unint64_t *)&qword_25528B170);
  }
  return result;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for MapPolyline()
{
  return &type metadata for MapPolyline;
}

ValueMetadata *type metadata accessor for MapPolyline.ContourStyle()
{
  return &type metadata for MapPolyline.ContourStyle;
}

uint64_t _s15_MapKit_SwiftUI11MapPolylineV12ContourStyleV7StorageOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21C5D6834 + 4 * byte_21C5EC2D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21C5D6868 + 4 * byte_21C5EC2D0[v4]))();
}

uint64_t sub_21C5D6868(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C5D6870(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C5D6878);
  return result;
}

uint64_t sub_21C5D6884(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C5D688CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21C5D6890(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C5D6898(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MapPolyline.ContourStyle.Storage()
{
  return &type metadata for MapPolyline.ContourStyle.Storage;
}

uint64_t initializeBufferWithCopyOfBuffer for MapPolyline.Storage(uint64_t a1, uint64_t a2)
{
  void *v3;
  __int16 v4;

  v3 = *(void **)a2;
  v4 = *(_WORD *)(a2 + 8);
  sub_21C561470(*(void **)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_WORD *)(a1 + 8) = v4;
  return a1;
}

void destroy for MapPolyline.Storage(uint64_t a1)
{
  sub_21C56148C(*(void **)a1, *(_WORD *)(a1 + 8));
}

uint64_t _s15_MapKit_SwiftUI11MapPolylineV7StorageOwca_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  __int16 v4;
  void *v5;
  __int16 v6;

  v3 = *(void **)a2;
  v4 = *(_WORD *)(a2 + 8);
  sub_21C561470(*(void **)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_WORD *)(a1 + 8);
  *(_WORD *)(a1 + 8) = v4;
  sub_21C56148C(v5, v6);
  return a1;
}

uint64_t assignWithTake for MapPolyline.Storage(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  void *v4;
  __int16 v5;

  v3 = *(_WORD *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_WORD *)(a1 + 8);
  *(_WORD *)(a1 + 8) = v3;
  sub_21C56148C(v4, v5);
  return a1;
}

uint64_t _s15_MapKit_SwiftUI11MapPolylineV7StorageOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FFF && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 0x3FFF);
  v3 = (*(_WORD *)(a1 + 8) & 0xFE | (*(unsigned __int16 *)(a1 + 8) >> 15) | (*(unsigned __int16 *)(a1 + 8) >> 1) & 0x3F00) ^ 0x3FFF;
  if (v3 >= 0x3FFE)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s15_MapKit_SwiftUI11MapPolylineV7StorageOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3;

  if (a2 > 0x3FFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x3FFF;
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
    {
      v3 = ((-a2 >> 1) & 0x1FFF) - (a2 << 13);
      *(_QWORD *)result = 0;
      *(_WORD *)(result + 8) = (4 * v3) & 0xFE00 | (2 * (v3 & 0x7F));
    }
  }
  return result;
}

uint64_t sub_21C5D6A68(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 8) >> 15;
}

uint64_t sub_21C5D6A74(uint64_t result)
{
  *(_WORD *)(result + 8) &= ~0x8000u;
  return result;
}

uint64_t sub_21C5D6A84(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 8) = *(_WORD *)(result + 8) & 0x101 | (a2 << 15);
  return result;
}

ValueMetadata *type metadata accessor for MapPolyline.Storage()
{
  return &type metadata for MapPolyline.Storage;
}

uint64_t destroy for MapPolyline.MakeList(uint64_t a1)
{
  uint64_t result;
  int v3;

  swift_release();
  result = swift_bridgeObjectRelease();
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 != 255)
    return sub_21C531AC8(*(_QWORD *)(a1 + 64), v3 & 1);
  return result;
}

uint64_t initializeWithCopy for MapPolyline.MakeList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v6 = a2 + 64;
  v7 = *(unsigned __int8 *)(a2 + 72);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v7 == 255)
  {
    *(_QWORD *)(a1 + 64) = *(_QWORD *)v6;
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(v6 + 8);
  }
  else
  {
    v8 = *(_QWORD *)v6;
    sub_21C52EF74(v8, v7 & 1);
    *(_QWORD *)(a1 + 64) = v8;
    *(_BYTE *)(a1 + 72) = v7 & 1;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t assignWithCopy for MapPolyline.MakeList(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t *)(a2 + 64);
  v6 = *(unsigned __int8 *)(a2 + 72);
  if (*(unsigned __int8 *)(a1 + 72) == 255)
  {
    if (v6 == 255)
    {
      v8 = *v5;
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *v4 = v8;
    }
    else
    {
      v13 = v6 & 1;
      v14 = *v5;
      sub_21C52EF74(v14, v6 & 1);
      *(_QWORD *)(a1 + 64) = v14;
      *(_BYTE *)(a1 + 72) = v13;
    }
  }
  else if (v6 == 255)
  {
    sub_21C5995EC(a1 + 64);
    v7 = *(_BYTE *)(a2 + 72);
    *v4 = *v5;
    *(_BYTE *)(a1 + 72) = v7;
  }
  else
  {
    v9 = v6 & 1;
    v10 = *v5;
    sub_21C52EF74(v10, v6 & 1);
    v11 = *(_QWORD *)(a1 + 64);
    v12 = *(_BYTE *)(a1 + 72);
    *(_QWORD *)(a1 + 64) = v10;
    *(_BYTE *)(a1 + 72) = v9;
    sub_21C531AC8(v11, v12);
  }
  v15 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v15;
  return a1;
}

uint64_t assignWithTake for MapPolyline.MakeList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v5 = (_QWORD *)(a2 + 64);
  v6 = *(unsigned __int8 *)(a1 + 72);
  if (v6 != 255)
  {
    v7 = *(unsigned __int8 *)(a2 + 72);
    if (v7 != 255)
    {
      v8 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = *v5;
      *(_BYTE *)(a1 + 72) = v7 & 1;
      sub_21C531AC8(v8, v6 & 1);
      goto LABEL_6;
    }
    sub_21C5995EC(a1 + 64);
  }
  *(_QWORD *)(a1 + 64) = *v5;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
LABEL_6:
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapPolyline.MakeList(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapPolyline.MakeList(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MapPolyline.MakeList()
{
  return &type metadata for MapPolyline.MakeList;
}

unint64_t sub_21C5D6EB8()
{
  unint64_t result;

  result = qword_25528B178;
  if (!qword_25528B178)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EC3DC, &type metadata for MapPolyline.ContourStyle.Storage);
    atomic_store(result, (unint64_t *)&qword_25528B178);
  }
  return result;
}

BOOL sub_21C5D6EFC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v2 = *(_QWORD **)a1;
  v3 = *(__int16 *)(a1 + 8);
  v4 = *(_QWORD **)a2;
  v5 = *(__int16 *)(a2 + 8);
  if (v3 < 0)
  {
    if (v5 < 0)
    {
      sub_21C531A4C(0, (unint64_t *)&qword_255289570);
      sub_21C561470(v4, v5);
      sub_21C561470(v2, v3);
      v9 = sub_21C5E3B98();
      sub_21C56148C(v2, v3);
      sub_21C56148C(v4, v5);
      return v9 & 1;
    }
    goto LABEL_14;
  }
  if (v5 < 0)
  {
LABEL_14:
    sub_21C561470(*(void **)a2, *(_WORD *)(a2 + 8));
    sub_21C561470(v2, v3);
    goto LABEL_15;
  }
  if ((v3 & 1) == 0)
  {
    if ((v5 & 1) == 0)
    {
      v6 = v2[2];
      v7 = v4[2];
      sub_21C561470(*(void **)a2, *(_WORD *)(a2 + 8));
      sub_21C561470(v2, v3);
      if (v6 == v7)
      {
        v8 = sub_21C559680((uint64_t)v2, (uint64_t)v4);
        goto LABEL_12;
      }
LABEL_15:
      sub_21C56148C(v2, v3);
      sub_21C56148C(v4, v5);
      return 0;
    }
    goto LABEL_14;
  }
  if ((v5 & 1) == 0 || v2[2] != v4[2])
    goto LABEL_14;
  v8 = sub_21C55973C(*(_QWORD *)a1, *(_QWORD *)a2);
  sub_21C561470(v4, v5);
  sub_21C561470(v2, v3);
LABEL_12:
  sub_21C56148C(v2, v3);
  sub_21C56148C(v4, v5);
  if ((v8 & 1) != 0)
    return ((v5 ^ v3) & 0x100) == 0;
  return 0;
}

uint64_t destroy for ResolvedPolyline(uint64_t a1)
{
  sub_21C56148C(*(void **)a1, *(_WORD *)(a1 + 8));
  swift_release();
  swift_bridgeObjectRelease();
  return sub_21C531AC8(*(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
}

uint64_t initializeWithCopy for ResolvedPolyline(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(void **)a2;
  v5 = *(_WORD *)(a2 + 8);
  sub_21C561470(*(void **)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_WORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v9 = *(_BYTE *)(a2 + 72);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_21C52EF74(v8, v9);
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithCopy for ResolvedPolyline(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int16 v5;
  void *v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *(void **)a2;
  v5 = *(_WORD *)(a2 + 8);
  sub_21C561470(*(void **)a2, v5);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  v7 = *(_WORD *)(a1 + 8);
  *(_WORD *)(a1 + 8) = v5;
  sub_21C56148C(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  LOBYTE(v5) = *(_BYTE *)(a2 + 72);
  sub_21C52EF74(v8, v5);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = v5;
  sub_21C531AC8(v9, v10);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ResolvedPolyline(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  void *v5;
  __int16 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v4 = *(_WORD *)(a2 + 8);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_WORD *)(a1 + 8);
  *(_WORD *)(a1 + 8) = v4;
  sub_21C56148C(v5, v6);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = *(_BYTE *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = v8;
  sub_21C531AC8(v9, v10);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedPolyline(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedPolyline(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedPolyline()
{
  return &type metadata for ResolvedPolyline;
}

ValueMetadata *type metadata accessor for MapContentBuilder()
{
  return &type metadata for MapContentBuilder;
}

uint64_t sub_21C5D73D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_BYTE *, uint64_t, uint64_t);
  int *v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t result;

  v2 = type metadata accessor for MapPitchToggleConfig(0);
  sub_21C5E319C();
  v3 = &a1[*(int *)(v2 + 28)];
  v4 = *MEMORY[0x24BDEB498];
  v5 = sub_21C5E2E78();
  v6 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104);
  v6(v3, v4, v5);
  a1[1] = 2;
  *(_QWORD *)&a1[*(int *)(v2 + 32)] = 0;
  *a1 = 0;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 0, 1, v2);
  v7 = (int *)type metadata accessor for MapControlsConfig();
  v8 = &a1[v7[5]];
  v9 = type metadata accessor for MapScaleViewConfig(0);
  v6(&v8[*(int *)(v9 + 28)], v4, v5);
  v8[2] = 0;
  *(_WORD *)v8 = 1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
  v10 = &a1[v7[6]];
  v11 = type metadata accessor for MapUserLocationButtonConfig(0);
  sub_21C5E319C();
  v6(&v10[*(int *)(v11 + 28)], v4, v5);
  v10[1] = 2;
  *(_QWORD *)&v10[*(int *)(v11 + 32)] = 0;
  *v10 = 0;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 0, 1, v11);
  v12 = &a1[v7[7]];
  v13 = type metadata accessor for MapCompassConfig(0);
  v6((_BYTE *)v12 + *(int *)(v13 + 24), v4, v5);
  *v12 = 1;
  result = (*(uint64_t (**)(_WORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 0, 1, v13);
  *(_WORD *)&a1[v7[8]] = 512;
  *(_WORD *)&a1[v7[9]] = 512;
  *(_WORD *)&a1[v7[10]] = 2;
  return result;
}

uint64_t sub_21C5D75B4()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v0 = (int *)type metadata accessor for MapControlsConfig();
  __swift_allocate_value_buffer((uint64_t)v0, qword_255293A58);
  v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)qword_255293A58);
  v2 = type metadata accessor for MapPitchToggleConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v1 + v0[5];
  v4 = type metadata accessor for MapScaleViewConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v1 + v0[6];
  v6 = type metadata accessor for MapUserLocationButtonConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v1 + v0[7];
  v8 = type metadata accessor for MapCompassConfig(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_WORD *)(v1 + v0[8]) = 2;
  *(_WORD *)(v1 + v0[9]) = 2;
  *(_WORD *)(v1 + v0[10]) = 2;
  return result;
}

uint64_t sub_21C5D76C4@<X0>(uint64_t a1@<X8>)
{
  return sub_21C5D7748(&qword_2552878F8, (uint64_t)qword_255293A58, a1);
}

uint64_t sub_21C5D76E4()
{
  uint64_t v0;
  _BYTE *v1;

  v0 = type metadata accessor for MapControlsConfig();
  __swift_allocate_value_buffer(v0, qword_255293A70);
  v1 = (_BYTE *)__swift_project_value_buffer(v0, (uint64_t)qword_255293A70);
  return sub_21C5D73D4(v1);
}

uint64_t sub_21C5D772C@<X0>(uint64_t a1@<X8>)
{
  return sub_21C5D7748(&qword_255287900, (uint64_t)qword_255293A70, a1);
}

uint64_t sub_21C5D7748@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for MapControlsConfig();
  v6 = __swift_project_value_buffer(v5, a2);
  return sub_21C53276C(v6, a3);
}

uint64_t sub_21C5D7798()
{
  sub_21C521E50(&qword_25528B298, (uint64_t (*)(uint64_t))type metadata accessor for MapControlsConfig, (uint64_t)&unk_21C5EC5A0);
  return sub_21C5E2FD4();
}

uint64_t sub_21C5D7800()
{
  return sub_21C5E2FD4();
}

void sub_21C5D780C(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_21C5D7818()
{
  sub_21C5DF0BC();
  return sub_21C5E2FD4();
}

uint64_t sub_21C5D7868()
{
  sub_21C5DEE38();
  return sub_21C5E3298();
}

uint64_t sub_21C5D789C()
{
  unsigned __int8 v1;

  sub_21C531BA0();
  sub_21C5E3298();
  return v1;
}

uint64_t sub_21C5D78D4()
{
  unsigned __int8 v1;

  sub_21C531B5C();
  sub_21C5E3298();
  return v1;
}

uint64_t sub_21C5D790C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = type metadata accessor for MapControlsConfig();
  MEMORY[0x24BDAC7A8](v2);
  sub_21C53276C(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21C5E3778();
  return sub_21C52A88C(a1, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
}

uint64_t sub_21C5D79A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = type metadata accessor for MapControlsConfig();
  MEMORY[0x24BDAC7A8](v2);
  sub_21C53276C(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528B288);
  sub_21C5E3790();
  return sub_21C52A88C(a1, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
}

uint64_t sub_21C5D7A3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v8 = (int *)type metadata accessor for MapControlsConfig();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MapPitchToggleConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = &v10[v8[5]];
  v13 = type metadata accessor for MapScaleViewConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = &v10[v8[6]];
  v15 = type metadata accessor for MapUserLocationButtonConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = &v10[v8[7]];
  v17 = type metadata accessor for MapCompassConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  *(_WORD *)&v10[v8[8]] = 2;
  *(_WORD *)&v10[v8[9]] = 2;
  *(_WORD *)&v10[v8[10]] = 2;
  sub_21C5D790C((uint64_t)v10);
  v19 = type metadata accessor for _MapControlsModifier(0, a2, a3, v18);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a4 + *(int *)(v19 + 36), a1, a2);
}

uint64_t sub_21C5D7BB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  _QWORD v50[2];
  _QWORD v51[2];
  _QWORD v52[2];
  _QWORD v53[3];

  v43 = a1;
  v45 = a3;
  v5 = type metadata accessor for MapControlsConfig();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x22077F9A0](&unk_21C5EC5C8, a2, v6);
  v42 = sub_21C5E3400();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B250);
  v9 = sub_21C5E30A0();
  v44 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v10 = *(_QWORD *)(a2 + 16);
  v40 = (char *)v36 - v11;
  v41 = v10;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B258);
  v12 = sub_21C5E30A0();
  v13 = sub_21C5E30A0();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B260);
  v14 = sub_21C5E30A0();
  v15 = *(_QWORD *)(a2 + 24);
  v38 = v15;
  v16 = sub_21C5616A0(&qword_25528B268, &qword_25528B258, MEMORY[0x24BDF1028]);
  v53[0] = v15;
  v53[1] = v16;
  v17 = MEMORY[0x24BDED308];
  v18 = MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v12, v53);
  v19 = sub_21C5DEA88();
  v52[0] = v18;
  v52[1] = v19;
  v20 = MEMORY[0x22077F9A0](v17, v13, v52);
  v21 = sub_21C5616A0(&qword_25528B278, &qword_25528B260, MEMORY[0x24BDF09B0]);
  v51[0] = v20;
  v51[1] = v21;
  v36[1] = v14;
  v36[2] = MEMORY[0x22077F9A0](v17, v14, v51);
  v37 = sub_21C5E33DC();
  v22 = sub_21C5E30A0();
  v39 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v36 - v26;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528B288);
  sub_21C5E3784();
  v28 = MEMORY[0x22077F9A0](MEMORY[0x24BDEFB78], v42);
  v29 = v40;
  sub_21C5E3664();
  swift_release();
  sub_21C52A88C((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
  v46 = v41;
  v47 = v38;
  v48 = v3;
  sub_21C5E385C();
  v30 = sub_21C5616A0(&qword_25528B280, &qword_25528B250, MEMORY[0x24BDF1028]);
  v50[0] = v28;
  v50[1] = v30;
  v31 = MEMORY[0x24BDED308];
  v32 = MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v9, v50);
  sub_21C5E364C();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v29, v9);
  v33 = MEMORY[0x22077F9A0](MEMORY[0x24BDEF370], v37);
  v49[0] = v32;
  v49[1] = v33;
  MEMORY[0x22077F9A0](v31, v22, v49);
  sub_21C5976B4((uint64_t)v24, v22, (uint64_t)v27);
  v34 = *(void (**)(char *, uint64_t))(v39 + 8);
  v34(v24, v22);
  sub_21C56F04C((uint64_t)v27, v22, v45);
  return ((uint64_t (*)(char *, uint64_t))v34)(v27, v22);
}

uint64_t sub_21C5D7FC0()
{
  sub_21C5DEE38();
  return sub_21C5E3298();
}

uint64_t sub_21C5D7FFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v2 = type metadata accessor for MapControlsConfig();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v9 - v6;
  sub_21C53276C(a1, (uint64_t)&v9 - v6);
  sub_21C53276C((uint64_t)v7, (uint64_t)v4);
  sub_21C5DEE38();
  sub_21C5E32A4();
  return sub_21C52A88C((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
}

uint64_t sub_21C5D80C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  _QWORD v58[2];
  _QWORD v59[2];
  char v60;

  v47 = a3;
  v44 = a1;
  v56 = a5;
  v7 = type metadata accessor for _MapControlsModifier(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = v7;
  v45 = v7;
  v10 = *(_QWORD *)(v8 + 64);
  v51 = v8;
  v52 = v10;
  MEMORY[0x24BDAC7A8](v7);
  v50 = (char *)&v43 - v11;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B258);
  v16 = sub_21C5E30A0();
  v48 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v43 - v17;
  v19 = sub_21C5E30A0();
  v54 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v46 = (char *)&v43 - v20;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B260);
  v21 = sub_21C5E30A0();
  v55 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v49 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v53 = (uint64_t)&v43 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v15, a1 + *(int *)(v9 + 36), a2, v24);
  swift_getKeyPath();
  v60 = 1;
  v26 = v47;
  sub_21C5E3664();
  swift_release();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a2);
  v27 = sub_21C5616A0(&qword_25528B268, &qword_25528B258, MEMORY[0x24BDF1028]);
  v59[0] = v26;
  v59[1] = v27;
  v28 = MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v16, v59);
  sub_21C5E36C4();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v16);
  v30 = v50;
  v29 = v51;
  v31 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v44, v45);
  v32 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = a2;
  *(_QWORD *)(v33 + 24) = v26;
  (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v33 + v32, v30, v31);
  v34 = sub_21C5DEA88();
  v58[0] = v28;
  v58[1] = v34;
  v35 = MEMORY[0x24BDED308];
  v36 = MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v19, v58);
  sub_21C5DEDF4();
  sub_21C521E50(&qword_25528B298, (uint64_t (*)(uint64_t))type metadata accessor for MapControlsConfig, (uint64_t)&unk_21C5EC5A0);
  v37 = (uint64_t)v49;
  v38 = v46;
  sub_21C5E3694();
  swift_release();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v38, v19);
  v39 = sub_21C5616A0(&qword_25528B278, &qword_25528B260, MEMORY[0x24BDF09B0]);
  v57[0] = v36;
  v57[1] = v39;
  MEMORY[0x22077F9A0](v35, v21, v57);
  v40 = v53;
  sub_21C5976B4(v37, v21, v53);
  v41 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
  v41(v37, v21);
  sub_21C56F04C(v40, v21, v56);
  return ((uint64_t (*)(uint64_t, uint64_t))v41)(v40, v21);
}

uint64_t sub_21C5D84C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for MapControlsConfig();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C53276C(a1, (uint64_t)v4);
  return sub_21C5D79A8((uint64_t)v4);
}

uint64_t View.mapControls<A>(_:)(void (*a1)(__n128), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v20 = a5;
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _MapControlsModifier(0, v12, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v20 - v17;
  a1(v16);
  sub_21C5D7A3C((uint64_t)v11, a4, a6, (uint64_t)v18);
  MEMORY[0x22077EC20](v18, a3, v14, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t type metadata accessor for _MapControlsModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MapControlsModifier);
}

uint64_t View.mapControlVisibility(_:)()
{
  swift_getKeyPath();
  sub_21C5E3664();
  return swift_release();
}

uint64_t sub_21C5D86CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = a1[2];
  v5 = type metadata accessor for _MapControlsModifier(255, a1[1], a1[3], a4);
  v6 = sub_21C5E30A0();
  v8[0] = v4;
  v8[1] = MEMORY[0x22077F9A0](&unk_21C5EC5C8, v5);
  return MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v6, v8);
}

uint64_t sub_21C5D8744(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B180);
  v2 = sub_21C5E30A0();
  v4[0] = v1;
  v4[1] = sub_21C5616A0(qword_25528B188, &qword_25528B180, MEMORY[0x24BDF1028]);
  return MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v2, v4);
}

void sub_21C5D87C4()
{
  unint64_t v0;
  unint64_t v1;

  sub_21C596C90(319, &qword_25528B210, (uint64_t (*)(uint64_t))type metadata accessor for MapControlsConfig, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_BYTE *sub_21C5D8864(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  unsigned __int8 *v54;
  unsigned int v55;
  unint64_t v56;
  size_t v57;
  _WORD *v58;
  unint64_t v59;
  unint64_t v60;
  void (*v61)(unint64_t, unint64_t, uint64_t);
  uint64_t v63;
  _QWORD *v64;
  size_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  size_t v75;
  uint64_t v76;
  unint64_t __n;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v6 = sub_21C5E31A8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v85 = sub_21C5E2E78();
  v9 = *(_QWORD *)(v85 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v8 <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = v8;
  if (v11 <= 0x7FFFFFFE)
    v12 = 2147483646;
  else
    v12 = v11;
  v13 = *(_DWORD *)(v7 + 80);
  v14 = *(_DWORD *)(v9 + 80);
  v15 = v13 | v14 | 7;
  v16 = *(_QWORD *)(a3 + 16);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_DWORD *)(v17 + 80);
  if ((v15 | v18) == 7 && ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v17 + 80)) & 0x100000) == 0)
  {
    v79 = v13 + 2;
    v20 = *(_QWORD *)(v7 + 64);
    v78 = v20 + v14;
    v21 = *(_QWORD *)(v9 + 64);
    v83 = v21 + 7;
    v73 = v14 + 3;
    v22 = ((v14 + 3) & ~v14) + v21;
    v74 = v14 + 2;
    __n = ((v21 + 7 + ((v20 + v14 + ((v13 + 2) & ~v13)) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 8;
    v84 = __n + v14;
    v75 = ((v14 + 2) & ~v14) + v21;
    v23 = ((__n + v14 + ((v22 + v15 + ((__n + v14) & ~v14)) & ~v15)) & ~v14) + v75;
    if (((((v23 + 13) & 0xFFFFFFFFFFFFFFF8) + v18 + 8) & ~v18) + *(_QWORD *)(v17 + 64) <= 0x18)
    {
      v81 = a2;
      v82 = a1;
      v24 = ~v14;
      v80 = ~v13;
      v25 = ((unint64_t)a2 + v13 + 2) & ~v13;
      v71 = *(_QWORD *)(v16 - 8);
      v72 = v16;
      v86 = *(_QWORD *)(v85 - 8);
      v69 = ((__n + v14 + ((v22 + v15 + ((__n + v14) & ~v14)) & ~v15)) & ~v14) + v75;
      v70 = ((v23 + 13) & 0xFFFFFFFFFFFFFFF8) + v18 + 8;
      v68 = *(_DWORD *)(v17 + 80);
      v76 = v6;
      v67 = v12;
      v65 = ((v14 + 3) & ~v14) + v21;
      v66 = v22 + v15;
      if ((_DWORD)v8 == v12)
      {
        v26 = ((unint64_t)a2 + v13 + 2) & ~v13;
        v27 = *(_QWORD *)(v7 + 64);
        v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v26, v8, v6);
      }
      else
      {
        v31 = (v25 + v20 + v14) & v24;
        if ((_DWORD)v10 != v12)
        {
          v35 = (_QWORD *)((v83 + v31) & 0xFFFFFFFFFFFFFFF8);
          v36 = *v35;
          if (*v35 >= 0xFFFFFFFFuLL)
            LODWORD(v36) = -1;
          if ((v36 + 1) >= 2)
            goto LABEL_19;
          goto LABEL_24;
        }
        v27 = *(_QWORD *)(v7 + 64);
        v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v31, v10, v85);
      }
      v20 = v27;
      if (v28)
      {
LABEL_19:
        v33 = v81;
        v32 = v82;
        memcpy(v82, v81, __n);
        v34 = v85;
        goto LABEL_25;
      }
      v31 = (v25 + v27 + v14) & v24;
      v35 = (_QWORD *)((v83 + v31) & 0xFFFFFFFFFFFFFFF8);
LABEL_24:
      v63 = v31;
      v64 = v35;
      v33 = v81;
      v32 = v82;
      *v82 = *v81;
      v82[1] = v81[1];
      v37 = (unint64_t)&v82[v13 + 2] & v80;
      v38 = v25;
      v39 = v20;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v37, v38, v76);
      v40 = (v37 + v39 + v14) & v24;
      v34 = v85;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v40, v63, v85);
      *(_QWORD *)((v83 + v40) & 0xFFFFFFFFFFFFF8) = *v64;
      swift_retain();
LABEL_25:
      v41 = ~v15;
      v42 = (_BYTE *)((unint64_t)&v32[v84] & v24);
      v43 = (unsigned __int8 *)((unint64_t)&v33[v84] & v24);
      if (v10 > 0xFE)
      {
        v44 = v74;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v86 + 48))((unint64_t)&v43[v73] & v24, v10, v34))goto LABEL_27;
      }
      else
      {
        v44 = v74;
        if (*v43 < 2u)
        {
LABEL_27:
          *v42 = *v43;
          v42[1] = v43[1];
          v42[2] = v43[2];
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v86 + 16))((unint64_t)&v42[v73] & v24, (unint64_t)&v43[v73] & v24, v34);
          goto LABEL_30;
        }
      }
      memcpy(v42, v43, v65);
LABEL_30:
      v45 = (unint64_t)&v42[v66] & v41;
      v46 = (unint64_t)&v43[v66] & v41;
      v47 = (v79 + v46) & v80;
      if ((_DWORD)v8 == v67)
      {
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))((v79 + v46) & v80, v8, v76))
          goto LABEL_35;
      }
      else
      {
        v48 = (v78 + v47) & v24;
        if ((_DWORD)v10 == v67)
        {
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v86 + 48))((v78 + v47) & v24, v10, v34))
          {
LABEL_35:
            v48 = (v78 + v47) & v24;
            v49 = (_QWORD *)((v83 + v48) & 0xFFFFFFFFFFFFFFF8);
LABEL_39:
            *(_BYTE *)v45 = *(_BYTE *)v46;
            *(_BYTE *)(v45 | 1) = *(_BYTE *)(v46 | 1);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))((v79 + v45) & v80, v47, v76);
            v51 = (v78 + ((v79 + v45) & v80)) & v24;
            v34 = v85;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v86 + 16))(v51, v48, v85);
            *(_QWORD *)((v83 + v51) & 0xFFFFFFFFFFFFF8) = *v49;
            swift_retain();
            goto LABEL_41;
          }
        }
        else
        {
          v49 = (_QWORD *)((v83 + v48) & 0xFFFFFFFFFFFFFFF8);
          v50 = *v49;
          if (*v49 >= 0xFFFFFFFFuLL)
            LODWORD(v50) = -1;
          if ((v50 + 1) < 2)
            goto LABEL_39;
        }
      }
      memcpy((void *)v45, (const void *)v46, __n);
LABEL_41:
      v52 = ~v68;
      v53 = (_BYTE *)((v84 + v45) & v24);
      v54 = (unsigned __int8 *)((v84 + v46) & v24);
      if (v10 > 0xFE)
      {
        v56 = (unint64_t)&v54[v44] & v24;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v86 + 48))(v56, v10, v34))
        {
          LOBYTE(v55) = *v54;
          goto LABEL_47;
        }
      }
      else
      {
        v55 = *v54;
        if (v55 <= 1)
        {
          v56 = (unint64_t)&v54[v44] & v24;
LABEL_47:
          *v53 = v55;
          *(_BYTE *)(((v84 + v45) & v24) + 1) = v54[1];
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v86 + 16))((unint64_t)&v53[v44] & v24, v56, v34);
          v57 = v75;
          goto LABEL_48;
        }
      }
      v57 = v75;
      memcpy(v53, v54, v75);
LABEL_48:
      v58 = &v53[v57];
      *v58 = *(_WORD *)&v54[v57];
      v58[1] = *(_WORD *)&v54[v57 + 2];
      v58[2] = *(_WORD *)&v54[v57 + 4];
      v30 = v82;
      *(_QWORD *)((unint64_t)&v82[v69 + 13] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&v81[v69 + 13] & 0xFFFFFFFFFFFFF8);
      v59 = (unint64_t)&v82[v70] & v52;
      v60 = (unint64_t)&v81[v70] & v52;
      v61 = *(void (**)(unint64_t, unint64_t, uint64_t))(v71 + 16);
      swift_retain();
      v61(v59, v60, v72);
      return v30;
    }
  }
  v29 = *a2;
  *a1 = *a2;
  v30 = (_BYTE *)(v29 + (((v15 | v18) + 16) & ~(v15 | v18)));
  swift_retain();
  return v30;
}

uint64_t sub_21C5D8E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v3 = sub_21C5E31A8();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned int *)(v4 + 84);
  v6 = sub_21C5E2E78();
  v7 = v4;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if (v5 <= v9)
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = v5;
  if (v10 <= 0x7FFFFFFE)
    v11 = 2147483646;
  else
    v11 = v10;
  v12 = *(unsigned __int8 *)(v4 + 80);
  v13 = v12 + 2;
  v14 = *(_QWORD *)(v4 + 64);
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = ~v15;
  v17 = v14 + v15;
  v49 = v6;
  v50 = *(_QWORD *)(v6 - 8);
  v47 = v3;
  v48 = *(_QWORD *)(v8 + 64);
  v41 = v48 + 7;
  v18 = ((v48 + 7 + ((v14 + v15 + ((v12 + 2) & ~v12)) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 8;
  v19 = (v12 + 2 + a1) & ~v12;
  v45 = v14 + v15;
  v46 = v7;
  v40 = v11;
  if ((_DWORD)v5 == v11)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))((v12 + 2 + a1) & ~v12, v5, v3))
      goto LABEL_17;
LABEL_12:
    v20 = (v45 + v19) & v16;
LABEL_16:
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))((v12 + 2 + a1) & ~v12, v47);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v20, v49);
    swift_release();
    goto LABEL_17;
  }
  v20 = (v17 + v19) & v16;
  if ((_DWORD)v9 == v11)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v17 + v19) & v16, v9, v6))
      goto LABEL_17;
    goto LABEL_12;
  }
  v21 = *(_QWORD *)((v41 + v20) & 0xFFFFFFFFFFFFFFF8);
  if (v21 >= 0xFFFFFFFF)
    LODWORD(v21) = -1;
  if ((v21 + 1) < 2)
    goto LABEL_16;
LABEL_17:
  v22 = ~v12;
  v44 = a1;
  v42 = v18 + v15;
  v23 = (unsigned __int8 *)((v18 + v15 + a1) & v16);
  v24 = v15 + 3;
  v25 = ((v15 + 3) & v16) + v48;
  if (v9 <= 0xFE)
  {
    if (*v23 >= 2u)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v50 + 48))((unint64_t)&v23[v24] & v16, v9, v49))LABEL_19:(*(void (**)(unint64_t, uint64_t))(v50 + 8))((unint64_t)&v23[v24] & v16, v49);
LABEL_20:
  v26 = v12 | v15 | 7;
  v27 = (unint64_t)&v23[v25 + v26] & ~v26;
  v28 = (v13 + v27) & v22;
  v39 = v25 + v26;
  if ((_DWORD)v5 == v40)
  {
    v29 = v44;
    v30 = v49;
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v46 + 48))(v28, v5, v47))
      goto LABEL_32;
LABEL_27:
    v31 = (v45 + v28) & v16;
LABEL_31:
    (*(void (**)(unint64_t, uint64_t))(v46 + 8))(v28, v47);
    (*(void (**)(unint64_t, uint64_t))(v50 + 8))(v31, v30);
    swift_release();
    goto LABEL_32;
  }
  v29 = v44;
  v31 = (v45 + v28) & v16;
  v30 = v49;
  if ((_DWORD)v9 == v40)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v50 + 48))((v45 + v28) & v16, v9, v49))
      goto LABEL_32;
    goto LABEL_27;
  }
  v32 = *(_QWORD *)((v41 + v31) & 0xFFFFFFFFFFFFFFF8);
  if (v32 >= 0xFFFFFFFF)
    LODWORD(v32) = -1;
  if ((v32 + 1) < 2)
    goto LABEL_31;
LABEL_32:
  v33 = ~v26;
  v34 = (unsigned __int8 *)((v42 + v27) & v16);
  if (v9 > 0xFE)
  {
    v35 = v15 + 2;
    v36 = (unint64_t)&v34[v15 + 2] & v16;
    v37 = v50;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v36, v9, v30))
      goto LABEL_36;
  }
  else
  {
    v35 = v15 + 2;
    if (*v34 <= 1u)
    {
      v36 = (unint64_t)&v34[v35] & v16;
      v37 = v50;
LABEL_36:
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v30);
    }
  }
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v29 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + (((v35 & v16) + v48 + ((v42 + ((v39 + (v42 & v16)) & v33)) & v16) + 13) & 0xFFFFFFFFFFFFFFF8) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_BYTE *sub_21C5D9238(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  size_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  _BYTE *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  size_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  size_t v44;
  unsigned int v45;
  _BYTE *v46;
  unint64_t v47;
  int v48;
  _WORD *v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void (*v57)(unint64_t, unint64_t, uint64_t);
  _QWORD *v59;
  size_t v60;
  int v61;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  unint64_t __n;
  _QWORD *__na;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v5 = sub_21C5E31A8();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v77 = sub_21C5E2E78();
  v8 = *(_QWORD *)(v77 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if (v7 <= v9)
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = v7;
  if (v10 <= 0x7FFFFFFE)
    v11 = 2147483646;
  else
    v11 = v10;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v72 = ~v12;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v8 + 80);
  v15 = ~v14;
  v16 = v13 + v14;
  v76 = *(_QWORD *)(v77 - 8);
  v75 = *(_QWORD *)(v8 + 64);
  v73 = v75 + 7;
  v69 = v13 + v14;
  __n = ((v75 + 7 + ((v13 + v14 + ((v12 + 2) & ~v12)) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 8;
  v65 = v5;
  v66 = v12 + 2;
  v17 = (unint64_t)&a2[v12 + 2] & ~v12;
  v67 = v6;
  v68 = a1;
  v61 = v11;
  v63 = v13;
  if ((_DWORD)v7 == v11)
  {
    v18 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))((unint64_t)&a2[v12 + 2] & ~v12, v7, v5);
  }
  else
  {
    v19 = (v16 + v17) & v15;
    if ((_DWORD)v9 != v11)
    {
      v21 = (_QWORD *)((v73 + v19) & 0xFFFFFFFFFFFFFFF8);
      v22 = *v21;
      if (*v21 >= 0xFFFFFFFFuLL)
        LODWORD(v22) = -1;
      v20 = ((v75 + 7 + ((v13 + v14 + ((v12 + 2) & ~v12)) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 + 1) >= 2)
        goto LABEL_12;
      goto LABEL_17;
    }
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v16 + v17) & v15, v9, v77);
  }
  v20 = __n;
  if (v18)
  {
LABEL_12:
    memcpy(a1, a2, v20);
    goto LABEL_18;
  }
  v19 = (v69 + v17) & v15;
  v21 = (_QWORD *)((v73 + v19) & 0xFFFFFFFFFFFFFFF8);
LABEL_17:
  v59 = v21;
  *a1 = *a2;
  a1[1] = a2[1];
  v23 = (unint64_t)&a1[v12 + 2] & v72;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v67 + 16))(v23, (unint64_t)&a2[v12 + 2] & ~v12, v65);
  v24 = v23 + v63 + v14;
  a1 = v68;
  v25 = v24 & v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v24 & v15, v19, v77);
  *(_QWORD *)((v73 + v25) & 0xFFFFFFFFFFFFF8) = *v59;
  swift_retain();
LABEL_18:
  v26 = v20 + v14;
  v27 = (_BYTE *)((unint64_t)&a1[v26] & v15);
  v64 = a2;
  v28 = (unsigned __int8 *)((unint64_t)&a2[v26] & v15);
  v29 = v14 + 3;
  v30 = ((v14 + 3) & v15) + v75;
  if (v9 > 0xFE)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v76 + 48))((unint64_t)&v28[v29] & v15, v9, v77))goto LABEL_20;
  }
  else if (*v28 < 2u)
  {
LABEL_20:
    *v27 = *v28;
    v27[1] = v28[1];
    v27[2] = v28[2];
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v76 + 16))((unint64_t)&v27[v29] & v15, (unint64_t)&v28[v29] & v15, v77);
    goto LABEL_23;
  }
  memcpy(v27, v28, v30);
LABEL_23:
  v31 = v12 | v14 | 7;
  v32 = v30 + v31;
  v33 = (unint64_t)&v27[v30 + v31] & ~v31;
  v34 = (unint64_t)&v28[v32] & ~v31;
  v35 = (v66 + v34) & v72;
  v60 = v32;
  if ((_DWORD)v7 == v61)
  {
    v36 = v67;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v67 + 48))((v66 + v34) & v72, v7, v65))
      goto LABEL_28;
  }
  else
  {
    v37 = (v69 + v35) & v15;
    v36 = v67;
    if ((_DWORD)v9 == v61)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v76 + 48))((v69 + v35) & v15, v9, v77))
      {
LABEL_28:
        v37 = (v69 + v35) & v15;
        v38 = (_QWORD *)((v73 + v37) & 0xFFFFFFFFFFFFFFF8);
LABEL_32:
        __na = v38;
        *(_BYTE *)v33 = *(_BYTE *)v34;
        *(_BYTE *)(v33 | 1) = *(_BYTE *)(v34 | 1);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 16))((v66 + v33) & v72, v35, v65);
        v40 = (v69 + ((v66 + v33) & v72)) & v15;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v76 + 16))(v40, v37, v77);
        *(_QWORD *)((v73 + v40) & 0xFFFFFFFFFFFFF8) = *__na;
        swift_retain();
        goto LABEL_34;
      }
    }
    else
    {
      v38 = (_QWORD *)((v73 + v37) & 0xFFFFFFFFFFFFFFF8);
      v39 = *v38;
      if (*v38 >= 0xFFFFFFFFuLL)
        LODWORD(v39) = -1;
      if ((v39 + 1) < 2)
        goto LABEL_32;
    }
  }
  memcpy((void *)v33, (const void *)v34, __n);
LABEL_34:
  v74 = ~v31;
  v41 = (_BYTE *)((v26 + v33) & v15);
  v42 = (_BYTE *)((v26 + v34) & v15);
  v43 = v14 + 2;
  v44 = (v43 & v15) + v75;
  if (v9 > 0xFE)
  {
    v47 = (unint64_t)&v42[v43] & v15;
    v48 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v76 + 48))(v47, v9, v77);
    v46 = v68;
    if (!v48)
    {
      LOBYTE(v45) = *v42;
      goto LABEL_40;
    }
  }
  else
  {
    v45 = *v42;
    v46 = v68;
    if (v45 <= 1)
    {
      v47 = (unint64_t)&v42[v43] & v15;
LABEL_40:
      *v41 = v45;
      *(_BYTE *)(((v26 + v33) & v15) + 1) = *(_BYTE *)(((v26 + v34) & v15) + 1);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v76 + 16))((unint64_t)&v41[v43] & v15, v47, v77);
      goto LABEL_41;
    }
  }
  memcpy((void *)((v26 + v33) & v15), (const void *)((v26 + v34) & v15), v44);
LABEL_41:
  v49 = &v41[v44];
  *v49 = *(_WORD *)&v42[v44];
  v49[1] = *(_WORD *)&v42[v44 + 2];
  v49[2] = *(_WORD *)&v42[v44 + 4];
  v50 = ((v26 + ((v60 + (v26 & v15)) & v74)) & v15) + v44;
  *(_QWORD *)((unint64_t)&v46[v50 + 13] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&v64[v50 + 13] & 0xFFFFFFFFFFFFF8);
  v51 = *(_QWORD *)(a3 + 16);
  v52 = *(_QWORD *)(v51 - 8);
  v53 = *(unsigned __int8 *)(v52 + 80);
  v54 = ((v50 + 13) & 0xFFFFFFFFFFFFFFF8) + v53 + 8;
  v55 = (unint64_t)&v46[v54] & ~v53;
  v56 = (unint64_t)&v64[v54] & ~v53;
  v57 = *(void (**)(unint64_t, unint64_t, uint64_t))(v52 + 16);
  swift_retain();
  v57(v55, v56, v51);
  return v46;
}

_BYTE *sub_21C5D97AC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(unint64_t, uint64_t, uint64_t);
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t (*v30)(unint64_t, uint64_t, uint64_t);
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  size_t v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  int v49;
  uint64_t (*v50)(unint64_t, _QWORD, uint64_t);
  int v51;
  int v52;
  uint64_t v53;
  size_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t (*v58)(unint64_t, _QWORD, uint64_t);
  unint64_t v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t (*v64)(unint64_t, _QWORD, uint64_t);
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  uint64_t v73;
  size_t v74;
  unsigned int v75;
  _BYTE *v76;
  unsigned __int8 v77;
  unint64_t v78;
  unint64_t v79;
  _BYTE *v80;
  uint64_t (*v81)(void);
  int v82;
  int v83;
  unint64_t v84;
  unsigned __int8 *v85;
  size_t v86;
  uint64_t v87;
  int v89;
  int v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  size_t v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unint64_t __n;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _BYTE *__dst;
  _BYTE *__src;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;

  v6 = sub_21C5E31A8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = sub_21C5E2E78();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v8 <= v11)
    v12 = *(_DWORD *)(v10 + 84);
  else
    v12 = v8;
  if (v12 <= 0x7FFFFFFE)
    v13 = 2147483646;
  else
    v13 = v12;
  v14 = *(unsigned __int8 *)(v7 + 80);
  v15 = *(_QWORD *)(v7 + 64);
  v16 = *(unsigned __int8 *)(v10 + 80);
  v17 = ~v16;
  v18 = v15 + v16;
  v113 = v16;
  v115 = v9;
  __src = a2;
  v108 = *(_QWORD *)(v10 + 64);
  v109 = v108 + 7;
  __n = ((v108 + 7 + ((v15 + v16 + ((v14 + 2) & ~v14)) & ~v16)) & 0xFFFFFFFFFFFFFFF8) + 8;
  __dst = a1;
  v19 = (unint64_t)&a1[v14 + 2];
  v20 = v19 & ~v14;
  v112 = *(_DWORD *)(v10 + 84);
  v102 = v7;
  v103 = v6;
  v110 = v15 + v16;
  v97 = a3;
  v98 = ~v14;
  v92 = v14 + 2;
  v93 = v14;
  v95 = v8;
  v90 = v13;
  if ((_DWORD)v8 == v13)
  {
    v21 = ~v14;
    v22 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    v104 = v19 & ~v14;
    v23 = *(unsigned __int8 *)(v7 + 80);
    v24 = v22(v104, v8, v6);
    v25 = (unint64_t)&a2[v23 + 2] & v21;
    v26 = v22(v25, v8, v6);
    v27 = v6;
    v28 = __dst;
    if (v24)
      goto LABEL_9;
    goto LABEL_13;
  }
  v29 = (v18 + v20) & v17;
  if ((_DWORD)v11 != v13)
  {
    v32 = *(_QWORD *)((v109 + v29) & 0xFFFFFFFFFFFFF8);
    if (v32 >= 0xFFFFFFFF)
      LODWORD(v32) = -1;
    v33 = v32 + 1;
    v25 = (unint64_t)&a2[v14 + 2] & v98;
    v34 = *(_QWORD *)((v109 + ((v25 + v15 + v16) & v17)) & 0xFFFFFFFFFFFFF8);
    if (v34 >= 0xFFFFFFFF)
      LODWORD(v34) = -1;
    v35 = v34 + 1;
    v28 = __dst;
    if (v33 >= 2)
    {
      v27 = v103;
      if (v35 < 2)
        goto LABEL_23;
      goto LABEL_24;
    }
    v27 = v103;
    if (v35 >= 2)
    {
LABEL_14:
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v20, v27);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v29, v115);
      swift_release();
      goto LABEL_24;
    }
LABEL_21:
    *v28 = *__src;
    v28[1] = __src[1];
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 24))(v20, v25, v27);
    v36 = v110 + v25;
    v37 = __src;
    v38 = v36 & v17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v29, v36 & v17, v115);
    *(_QWORD *)((v109 + v29) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v109 + v38) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    swift_release();
    v39 = __n;
    goto LABEL_25;
  }
  v104 = v19 & ~v14;
  v30 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48);
  v31 = *(unsigned __int8 *)(v7 + 80);
  v99 = v30((v18 + v20) & v17, v11, v9);
  v25 = (unint64_t)&a2[v31 + 2] & v98;
  v26 = v30((v25 + v15 + v113) & v17, v11, v115);
  v27 = v6;
  v28 = __dst;
  if (!v99)
  {
LABEL_13:
    v20 = v104;
    v29 = (v110 + v104) & v17;
    if (v26)
      goto LABEL_14;
    goto LABEL_21;
  }
LABEL_9:
  v20 = v104;
  if (!v26)
  {
    v29 = (v110 + v104) & v17;
LABEL_23:
    *v28 = *__src;
    v28[1] = __src[1];
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16))(v20, v25, v27);
    v40 = v110 + v25;
    v37 = __src;
    v41 = v40 & v17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v29, v40 & v17, v115);
    *(_QWORD *)((v109 + v29) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v109 + v41) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    v39 = __n;
    goto LABEL_25;
  }
LABEL_24:
  v37 = __src;
  v39 = __n;
  memcpy(v28, __src, __n);
LABEL_25:
  v42 = (unsigned __int8 *)((unint64_t)&v28[v39 + v113] & v17);
  v100 = v39 + v113;
  v43 = (unsigned __int8 *)((unint64_t)&v37[v39 + v113] & v17);
  v44 = v113 + 3;
  v45 = ((v113 + 3) & v17) + v108;
  v105 = v10;
  if (v112 <= 0xFE)
  {
    v46 = *v43;
    if (*v42 < 2u)
    {
      v47 = v46 >= 2;
      v48 = (v46 + 2147483646) & 0x7FFFFFFF;
      if (!v47)
        v48 = -1;
      v49 = v48 + 1;
      goto LABEL_33;
    }
    if (v46 >= 2)
      v52 = (v46 + 2147483646) & 0x7FFFFFFF;
    else
      v52 = -1;
    if (v52 == -1)
    {
LABEL_40:
      *v42 = *v43;
      v42[1] = v43[1];
      v42[2] = v43[2];
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))((unint64_t)&v42[v44] & v17, (unint64_t)&v43[v44] & v17, v115);
      goto LABEL_41;
    }
LABEL_32:
    memcpy(v42, v43, v45);
    goto LABEL_41;
  }
  v50 = *(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v10 + 48);
  v51 = v50((unint64_t)&v42[v44] & v17, v112, v115);
  v49 = v50((unint64_t)&v43[v44] & v17, v112, v115);
  if (v51)
  {
    if (!v49)
      goto LABEL_40;
    goto LABEL_32;
  }
LABEL_33:
  if (v49)
  {
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))((unint64_t)&v42[v44] & v17, v115);
    memcpy(v42, v43, v45);
  }
  else
  {
    *v42 = *v43;
    v42[1] = v43[1];
    v42[2] = v43[2];
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 24))((unint64_t)&v42[v44] & v17, (unint64_t)&v43[v44] & v17, v115);
  }
LABEL_41:
  v53 = v93 | v113 | 7;
  v54 = v45 + v53;
  v55 = (unint64_t)&v42[v45 + v53] & ~v53;
  v56 = (unint64_t)&v43[v45 + v53] & ~v53;
  v57 = (v92 + v55) & v98;
  v94 = v54;
  if (v95 == v90)
  {
    v91 = (_BYTE *)v55;
    v58 = *(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v102 + 48);
    v89 = v58(v57, v95, v103);
    v59 = (v92 + v56) & v98;
    v60 = v58(v59, v95, v103);
    if (v89)
      goto LABEL_43;
LABEL_47:
    v61 = (v110 + v57) & v17;
    if (v60)
    {
      v55 = (unint64_t)v91;
      goto LABEL_55;
    }
    v62 = (v110 + v59) & v17;
    v63 = (_QWORD *)((v109 + v62) & 0xFFFFFFFFFFFFFFF8);
    v55 = (unint64_t)v91;
    goto LABEL_60;
  }
  v61 = (v110 + v57) & v17;
  if (v112 == v90)
  {
    v91 = (_BYTE *)v55;
    v64 = *(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v10 + 48);
    v96 = v64((v110 + v57) & v17, v112, v115);
    v59 = (v92 + v56) & v98;
    v60 = v64((v110 + v59) & v17, v112, v115);
    if (v96)
    {
LABEL_43:
      v55 = (unint64_t)v91;
      if (!v60)
      {
        v61 = (v110 + v57) & v17;
        v62 = (v110 + v59) & v17;
        v63 = (_QWORD *)((v109 + v62) & 0xFFFFFFFFFFFFFFF8);
LABEL_57:
        *(_BYTE *)v55 = *(_BYTE *)v56;
        *(_BYTE *)(v55 | 1) = *(_BYTE *)(v56 | 1);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v102 + 16))(v57, v59, v103);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(v61, v62, v115);
        *(_QWORD *)((v109 + v61) & 0xFFFFFFFFFFFFF8) = *v63;
        swift_retain();
        goto LABEL_61;
      }
      goto LABEL_58;
    }
    goto LABEL_47;
  }
  v65 = *(_QWORD *)((v109 + v61) & 0xFFFFFFFFFFFFF8);
  if (v65 >= 0xFFFFFFFF)
    LODWORD(v65) = -1;
  v66 = v65 + 1;
  v59 = (v92 + v56) & v98;
  v62 = (v110 + v59) & v17;
  v63 = (_QWORD *)((v109 + v62) & 0xFFFFFFFFFFFFFFF8);
  v67 = *v63;
  if (*v63 >= 0xFFFFFFFFuLL)
    LODWORD(v67) = -1;
  v68 = v67 + 1;
  if (v66 >= 2)
  {
    if (v68 < 2)
      goto LABEL_57;
    goto LABEL_58;
  }
  if (v68 >= 2)
  {
LABEL_55:
    (*(void (**)(unint64_t, uint64_t))(v102 + 8))(v57, v103);
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v61, v115);
    swift_release();
LABEL_58:
    memcpy((void *)v55, (const void *)v56, __n);
    goto LABEL_61;
  }
LABEL_60:
  *(_BYTE *)v55 = *(_BYTE *)v56;
  *(_BYTE *)(v55 | 1) = *(_BYTE *)(v56 | 1);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v102 + 24))(v57, v59, v103);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 24))(v61, v62, v115);
  *(_QWORD *)((v109 + v61) & 0xFFFFFFFFFFFFFFF8) = *v63;
  swift_retain();
  swift_release();
LABEL_61:
  v69 = ~v53;
  v70 = v100;
  v71 = (unsigned __int8 *)((v100 + v55) & v17);
  v72 = (unsigned __int8 *)((v100 + v56) & v17);
  v73 = v113 + 2;
  v74 = ((v113 + 2) & v17) + v108;
  v111 = v69;
  if (v112 <= 0xFE)
  {
    v75 = *v72;
    v76 = __src;
    if (*v71 < 2u)
    {
      if (v75 <= 1)
      {
        v77 = v75 != 0;
        v78 = (unint64_t)&v71[v73] & v17;
        v79 = (unint64_t)&v72[v73] & v17;
        v80 = __dst;
LABEL_75:
        *v71 = v77;
        v71[1] = v72[1];
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v105 + 24))(v78, v79, v115);
        goto LABEL_78;
      }
      v78 = (unint64_t)&v71[v73] & v17;
      v80 = __dst;
      goto LABEL_77;
    }
    if (v75 <= 1)
    {
      v84 = (unint64_t)&v71[v73] & v17;
      v79 = (unint64_t)&v72[v73] & v17;
      goto LABEL_70;
    }
LABEL_71:
    memcpy(v71, v72, v74);
    goto LABEL_72;
  }
  v81 = *(uint64_t (**)(void))(v10 + 48);
  v114 = (unint64_t)&v71[v73] & v17;
  v82 = v81();
  v79 = (unint64_t)&v72[v73] & v17;
  v83 = ((uint64_t (*)(unint64_t, _QWORD, uint64_t))v81)(v79, v112, v115);
  if (!v82)
  {
    v80 = __dst;
    v76 = __src;
    v70 = v100;
    v78 = v114;
    if (!v83)
    {
      v77 = *v72;
      goto LABEL_75;
    }
LABEL_77:
    (*(void (**)(unint64_t, uint64_t))(v105 + 8))(v78, v115);
    memcpy(v71, v72, v74);
    goto LABEL_78;
  }
  v76 = __src;
  v70 = v100;
  if (v83)
    goto LABEL_71;
  LOBYTE(v75) = *v72;
  v84 = (unint64_t)&v71[v73] & v17;
LABEL_70:
  *v71 = v75;
  v71[1] = v72[1];
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v105 + 16))(v84, v79, v115);
LABEL_72:
  v80 = __dst;
LABEL_78:
  v85 = &v71[v74];
  *(_WORD *)v85 = *(_WORD *)&v72[v74];
  *((_WORD *)v85 + 1) = *(_WORD *)&v72[v74 + 2];
  *((_WORD *)v85 + 2) = *(_WORD *)&v72[v74 + 4];
  v86 = ((v70 + ((v94 + (v70 & v17)) & v111)) & v17) + v74;
  *(_QWORD *)((unint64_t)&v80[v86 + 13] & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&v76[v86 + 13] & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v87 = *(_QWORD *)(*(_QWORD *)(v97 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v87 + 24))((unint64_t)&v80[((v86 + 13) & 0xFFFFFFFFFFFFFFF8) + 8 + *(unsigned __int8 *)(v87 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v87 + 80), (unint64_t)&v76[((v86 + 13) & 0xFFFFFFFFFFFFFFF8) + 8 + *(unsigned __int8 *)(v87 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v87 + 80));
  return v80;
}

_BYTE *sub_21C5DA1D0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  size_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  _BYTE *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  size_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  size_t v44;
  unsigned int v45;
  _BYTE *v46;
  unint64_t v47;
  int v48;
  _WORD *v49;
  size_t v50;
  uint64_t v51;
  _QWORD *v53;
  size_t v54;
  int v55;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  unint64_t __n;
  _QWORD *__na;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v5 = sub_21C5E31A8();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v71 = sub_21C5E2E78();
  v8 = *(_QWORD *)(v71 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if (v7 <= v9)
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = v7;
  if (v10 <= 0x7FFFFFFE)
    v11 = 2147483646;
  else
    v11 = v10;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v66 = ~v12;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v8 + 80);
  v15 = ~v14;
  v16 = v13 + v14;
  v70 = *(_QWORD *)(v71 - 8);
  v69 = *(_QWORD *)(v8 + 64);
  v67 = v69 + 7;
  v63 = v13 + v14;
  __n = ((v69 + 7 + ((v13 + v14 + ((v12 + 2) & ~v12)) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 8;
  v59 = v5;
  v60 = v12 + 2;
  v17 = (unint64_t)&a2[v12 + 2] & ~v12;
  v61 = v6;
  v62 = a1;
  v55 = v11;
  v57 = v13;
  if ((_DWORD)v7 == v11)
  {
    v18 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))((unint64_t)&a2[v12 + 2] & ~v12, v7, v5);
  }
  else
  {
    v19 = (v16 + v17) & v15;
    if ((_DWORD)v9 != v11)
    {
      v21 = (_QWORD *)((v67 + v19) & 0xFFFFFFFFFFFFFFF8);
      v22 = *v21;
      if (*v21 >= 0xFFFFFFFFuLL)
        LODWORD(v22) = -1;
      v20 = ((v69 + 7 + ((v13 + v14 + ((v12 + 2) & ~v12)) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 + 1) >= 2)
        goto LABEL_12;
      goto LABEL_17;
    }
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v16 + v17) & v15, v9, v71);
  }
  v20 = __n;
  if (v18)
  {
LABEL_12:
    memcpy(a1, a2, v20);
    goto LABEL_18;
  }
  v19 = (v63 + v17) & v15;
  v21 = (_QWORD *)((v67 + v19) & 0xFFFFFFFFFFFFFFF8);
LABEL_17:
  v53 = v21;
  *a1 = *a2;
  a1[1] = a2[1];
  v23 = (unint64_t)&a1[v12 + 2] & v66;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v61 + 32))(v23, (unint64_t)&a2[v12 + 2] & ~v12, v59);
  v24 = v23 + v57 + v14;
  a1 = v62;
  v25 = v24 & v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 32))(v24 & v15, v19, v71);
  *(_QWORD *)((v67 + v25) & 0xFFFFFFFFFFFFF8) = *v53;
LABEL_18:
  v26 = v20 + v14;
  v27 = (_BYTE *)((unint64_t)&a1[v26] & v15);
  v58 = a2;
  v28 = (unsigned __int8 *)((unint64_t)&a2[v26] & v15);
  v29 = v14 + 3;
  v30 = ((v14 + 3) & v15) + v69;
  if (v9 > 0xFE)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v70 + 48))((unint64_t)&v28[v29] & v15, v9, v71))goto LABEL_20;
  }
  else if (*v28 < 2u)
  {
LABEL_20:
    *v27 = *v28;
    v27[1] = v28[1];
    v27[2] = v28[2];
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v70 + 32))((unint64_t)&v27[v29] & v15, (unint64_t)&v28[v29] & v15, v71);
    goto LABEL_23;
  }
  memcpy(v27, v28, v30);
LABEL_23:
  v31 = v12 | v14 | 7;
  v32 = v30 + v31;
  v33 = (unint64_t)&v27[v30 + v31] & ~v31;
  v34 = (unint64_t)&v28[v32] & ~v31;
  v35 = (v60 + v34) & v66;
  v54 = v32;
  if ((_DWORD)v7 == v55)
  {
    v36 = v61;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v61 + 48))((v60 + v34) & v66, v7, v59))
      goto LABEL_28;
  }
  else
  {
    v37 = (v63 + v35) & v15;
    v36 = v61;
    if ((_DWORD)v9 == v55)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v70 + 48))((v63 + v35) & v15, v9, v71))
      {
LABEL_28:
        v37 = (v63 + v35) & v15;
        v38 = (_QWORD *)((v67 + v37) & 0xFFFFFFFFFFFFFFF8);
LABEL_32:
        __na = v38;
        *(_BYTE *)v33 = *(_BYTE *)v34;
        *(_BYTE *)(v33 | 1) = *(_BYTE *)(v34 | 1);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 32))((v60 + v33) & v66, v35, v59);
        v40 = (v63 + ((v60 + v33) & v66)) & v15;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v70 + 32))(v40, v37, v71);
        *(_QWORD *)((v67 + v40) & 0xFFFFFFFFFFFFF8) = *__na;
        goto LABEL_34;
      }
    }
    else
    {
      v38 = (_QWORD *)((v67 + v37) & 0xFFFFFFFFFFFFFFF8);
      v39 = *v38;
      if (*v38 >= 0xFFFFFFFFuLL)
        LODWORD(v39) = -1;
      if ((v39 + 1) < 2)
        goto LABEL_32;
    }
  }
  memcpy((void *)v33, (const void *)v34, __n);
LABEL_34:
  v68 = ~v31;
  v41 = (_BYTE *)((v26 + v33) & v15);
  v42 = (_BYTE *)((v26 + v34) & v15);
  v43 = v14 + 2;
  v44 = (v43 & v15) + v69;
  if (v9 > 0xFE)
  {
    v47 = (unint64_t)&v42[v43] & v15;
    v48 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v70 + 48))(v47, v9, v71);
    v46 = v62;
    if (!v48)
    {
      LOBYTE(v45) = *v42;
      goto LABEL_40;
    }
  }
  else
  {
    v45 = *v42;
    v46 = v62;
    if (v45 <= 1)
    {
      v47 = (unint64_t)&v42[v43] & v15;
LABEL_40:
      *v41 = v45;
      *(_BYTE *)(((v26 + v33) & v15) + 1) = *(_BYTE *)(((v26 + v34) & v15) + 1);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v70 + 32))((unint64_t)&v41[v43] & v15, v47, v71);
      goto LABEL_41;
    }
  }
  memcpy((void *)((v26 + v33) & v15), (const void *)((v26 + v34) & v15), v44);
LABEL_41:
  v49 = &v41[v44];
  *v49 = *(_WORD *)&v42[v44];
  v49[1] = *(_WORD *)&v42[v44 + 2];
  v49[2] = *(_WORD *)&v42[v44 + 4];
  v50 = ((v26 + ((v54 + (v26 & v15)) & v68)) & v15) + v44;
  *(_QWORD *)((unint64_t)&v46[v50 + 13] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&v58[v50 + 13] & 0xFFFFFFFFFFFFF8);
  v51 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v51 + 32))((unint64_t)&v46[((v50 + 13) & 0xFFFFFFFFFFFFFFF8) + 8 + *(unsigned __int8 *)(v51 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v51 + 80), (unint64_t)&v58[((v50 + 13) & 0xFFFFFFFFFFFFFFF8) + 8 + *(unsigned __int8 *)(v51 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v51 + 80));
  return v46;
}

_BYTE *sub_21C5DA72C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(unint64_t, uint64_t, uint64_t);
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t (*v30)(unint64_t, uint64_t, uint64_t);
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  size_t v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  int v49;
  uint64_t (*v50)(unint64_t, _QWORD, uint64_t);
  int v51;
  int v52;
  uint64_t v53;
  size_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t (*v58)(unint64_t, _QWORD, uint64_t);
  unint64_t v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t (*v64)(unint64_t, _QWORD, uint64_t);
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  uint64_t v73;
  size_t v74;
  unsigned int v75;
  _BYTE *v76;
  unsigned __int8 v77;
  unint64_t v78;
  unint64_t v79;
  _BYTE *v80;
  uint64_t (*v81)(void);
  int v82;
  int v83;
  unint64_t v84;
  unsigned __int8 *v85;
  size_t v86;
  uint64_t v87;
  int v89;
  int v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  size_t v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unint64_t __n;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _BYTE *__dst;
  _BYTE *__src;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;

  v6 = sub_21C5E31A8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = sub_21C5E2E78();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v8 <= v11)
    v12 = *(_DWORD *)(v10 + 84);
  else
    v12 = v8;
  if (v12 <= 0x7FFFFFFE)
    v13 = 2147483646;
  else
    v13 = v12;
  v14 = *(unsigned __int8 *)(v7 + 80);
  v15 = *(_QWORD *)(v7 + 64);
  v16 = *(unsigned __int8 *)(v10 + 80);
  v17 = ~v16;
  v18 = v15 + v16;
  v113 = v16;
  v115 = v9;
  __src = a2;
  v108 = *(_QWORD *)(v10 + 64);
  v109 = v108 + 7;
  __n = ((v108 + 7 + ((v15 + v16 + ((v14 + 2) & ~v14)) & ~v16)) & 0xFFFFFFFFFFFFFFF8) + 8;
  __dst = a1;
  v19 = (unint64_t)&a1[v14 + 2];
  v20 = v19 & ~v14;
  v112 = *(_DWORD *)(v10 + 84);
  v102 = v7;
  v103 = v6;
  v110 = v15 + v16;
  v93 = v14;
  v95 = a3;
  v98 = ~v14;
  v92 = v14 + 2;
  v96 = v8;
  v90 = v13;
  if ((_DWORD)v8 == v13)
  {
    v21 = ~v14;
    v22 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    v104 = v19 & ~v14;
    v23 = *(unsigned __int8 *)(v7 + 80);
    v24 = v22(v104, v8, v6);
    v25 = (unint64_t)&a2[v23 + 2] & v21;
    v26 = v22(v25, v8, v6);
    v27 = v6;
    v28 = __dst;
    if (v24)
      goto LABEL_9;
    goto LABEL_13;
  }
  v29 = (v18 + v20) & v17;
  if ((_DWORD)v11 != v13)
  {
    v32 = *(_QWORD *)((v109 + v29) & 0xFFFFFFFFFFFFF8);
    if (v32 >= 0xFFFFFFFF)
      LODWORD(v32) = -1;
    v33 = v32 + 1;
    v25 = (unint64_t)&a2[v14 + 2] & v98;
    v34 = *(_QWORD *)((v109 + ((v25 + v15 + v16) & v17)) & 0xFFFFFFFFFFFFF8);
    if (v34 >= 0xFFFFFFFF)
      LODWORD(v34) = -1;
    v35 = v34 + 1;
    v28 = __dst;
    if (v33 >= 2)
    {
      v27 = v103;
      if (v35 < 2)
        goto LABEL_23;
      goto LABEL_24;
    }
    v27 = v103;
    if (v35 >= 2)
    {
LABEL_14:
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v20, v27);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v29, v115);
      swift_release();
      goto LABEL_24;
    }
LABEL_21:
    *v28 = *__src;
    v28[1] = __src[1];
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 40))(v20, v25, v27);
    v36 = v110 + v25;
    v37 = __src;
    v38 = v36 & v17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v29, v36 & v17, v115);
    *(_QWORD *)((v109 + v29) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v109 + v38) & 0xFFFFFFFFFFFFF8);
    swift_release();
    v39 = __n;
    goto LABEL_25;
  }
  v104 = v19 & ~v14;
  v30 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48);
  v31 = *(unsigned __int8 *)(v7 + 80);
  v99 = v30((v18 + v20) & v17, v11, v9);
  v25 = (unint64_t)&a2[v31 + 2] & v98;
  v26 = v30((v25 + v15 + v113) & v17, v11, v115);
  v27 = v6;
  v28 = __dst;
  if (!v99)
  {
LABEL_13:
    v20 = v104;
    v29 = (v110 + v104) & v17;
    if (v26)
      goto LABEL_14;
    goto LABEL_21;
  }
LABEL_9:
  v20 = v104;
  if (!v26)
  {
    v29 = (v110 + v104) & v17;
LABEL_23:
    *v28 = *__src;
    v28[1] = __src[1];
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v20, v25, v27);
    v40 = v110 + v25;
    v37 = __src;
    v41 = v40 & v17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v29, v40 & v17, v115);
    *(_QWORD *)((v109 + v29) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v109 + v41) & 0xFFFFFFFFFFFFF8);
    v39 = __n;
    goto LABEL_25;
  }
LABEL_24:
  v37 = __src;
  v39 = __n;
  memcpy(v28, __src, __n);
LABEL_25:
  v42 = (unsigned __int8 *)((unint64_t)&v28[v39 + v113] & v17);
  v100 = v39 + v113;
  v43 = (unsigned __int8 *)((unint64_t)&v37[v39 + v113] & v17);
  v44 = v113 + 3;
  v45 = ((v113 + 3) & v17) + v108;
  v105 = v10;
  if (v112 <= 0xFE)
  {
    v46 = *v43;
    if (*v42 < 2u)
    {
      v47 = v46 >= 2;
      v48 = (v46 + 2147483646) & 0x7FFFFFFF;
      if (!v47)
        v48 = -1;
      v49 = v48 + 1;
      goto LABEL_33;
    }
    if (v46 >= 2)
      v52 = (v46 + 2147483646) & 0x7FFFFFFF;
    else
      v52 = -1;
    if (v52 == -1)
    {
LABEL_40:
      *v42 = *v43;
      v42[1] = v43[1];
      v42[2] = v43[2];
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))((unint64_t)&v42[v44] & v17, (unint64_t)&v43[v44] & v17, v115);
      goto LABEL_41;
    }
LABEL_32:
    memcpy(v42, v43, v45);
    goto LABEL_41;
  }
  v50 = *(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v10 + 48);
  v51 = v50((unint64_t)&v42[v44] & v17, v112, v115);
  v49 = v50((unint64_t)&v43[v44] & v17, v112, v115);
  if (v51)
  {
    if (!v49)
      goto LABEL_40;
    goto LABEL_32;
  }
LABEL_33:
  if (v49)
  {
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))((unint64_t)&v42[v44] & v17, v115);
    memcpy(v42, v43, v45);
  }
  else
  {
    *v42 = *v43;
    v42[1] = v43[1];
    v42[2] = v43[2];
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 40))((unint64_t)&v42[v44] & v17, (unint64_t)&v43[v44] & v17, v115);
  }
LABEL_41:
  v53 = v93 | v113 | 7;
  v54 = v45 + v53;
  v55 = (unint64_t)&v42[v45 + v53] & ~v53;
  v56 = (unint64_t)&v43[v45 + v53] & ~v53;
  v57 = (v92 + v55) & v98;
  v94 = v54;
  if (v96 == v90)
  {
    v91 = (_BYTE *)v55;
    v58 = *(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v102 + 48);
    v89 = v58(v57, v96, v103);
    v59 = (v92 + v56) & v98;
    v60 = v58(v59, v96, v103);
    if (v89)
      goto LABEL_43;
LABEL_47:
    v61 = (v110 + v57) & v17;
    if (v60)
    {
      v55 = (unint64_t)v91;
      goto LABEL_55;
    }
    v62 = (v110 + v59) & v17;
    v63 = (_QWORD *)((v109 + v62) & 0xFFFFFFFFFFFFFFF8);
    v55 = (unint64_t)v91;
    goto LABEL_60;
  }
  v61 = (v110 + v57) & v17;
  if (v112 == v90)
  {
    v91 = (_BYTE *)v55;
    v64 = *(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v10 + 48);
    v97 = v64((v110 + v57) & v17, v112, v115);
    v59 = (v92 + v56) & v98;
    v60 = v64((v110 + v59) & v17, v112, v115);
    if (v97)
    {
LABEL_43:
      v55 = (unint64_t)v91;
      if (!v60)
      {
        v61 = (v110 + v57) & v17;
        v62 = (v110 + v59) & v17;
        v63 = (_QWORD *)((v109 + v62) & 0xFFFFFFFFFFFFFFF8);
LABEL_57:
        *(_BYTE *)v55 = *(_BYTE *)v56;
        *(_BYTE *)(v55 | 1) = *(_BYTE *)(v56 | 1);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v102 + 32))(v57, v59, v103);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))(v61, v62, v115);
        *(_QWORD *)((v109 + v61) & 0xFFFFFFFFFFFFF8) = *v63;
        goto LABEL_61;
      }
      goto LABEL_58;
    }
    goto LABEL_47;
  }
  v65 = *(_QWORD *)((v109 + v61) & 0xFFFFFFFFFFFFF8);
  if (v65 >= 0xFFFFFFFF)
    LODWORD(v65) = -1;
  v66 = v65 + 1;
  v59 = (v92 + v56) & v98;
  v62 = (v110 + v59) & v17;
  v63 = (_QWORD *)((v109 + v62) & 0xFFFFFFFFFFFFFFF8);
  v67 = *v63;
  if (*v63 >= 0xFFFFFFFFuLL)
    LODWORD(v67) = -1;
  v68 = v67 + 1;
  if (v66 >= 2)
  {
    if (v68 < 2)
      goto LABEL_57;
    goto LABEL_58;
  }
  if (v68 >= 2)
  {
LABEL_55:
    (*(void (**)(unint64_t, uint64_t))(v102 + 8))(v57, v103);
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v61, v115);
    swift_release();
LABEL_58:
    memcpy((void *)v55, (const void *)v56, __n);
    goto LABEL_61;
  }
LABEL_60:
  *(_BYTE *)v55 = *(_BYTE *)v56;
  *(_BYTE *)(v55 | 1) = *(_BYTE *)(v56 | 1);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v102 + 40))(v57, v59, v103);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 40))(v61, v62, v115);
  *(_QWORD *)((v109 + v61) & 0xFFFFFFFFFFFFFFF8) = *v63;
  swift_release();
LABEL_61:
  v69 = ~v53;
  v70 = v100;
  v71 = (unsigned __int8 *)((v100 + v55) & v17);
  v72 = (unsigned __int8 *)((v100 + v56) & v17);
  v73 = v113 + 2;
  v74 = ((v113 + 2) & v17) + v108;
  v111 = v69;
  if (v112 <= 0xFE)
  {
    v75 = *v72;
    v76 = __src;
    if (*v71 < 2u)
    {
      if (v75 <= 1)
      {
        v77 = v75 != 0;
        v78 = (unint64_t)&v71[v73] & v17;
        v79 = (unint64_t)&v72[v73] & v17;
        v80 = __dst;
LABEL_75:
        *v71 = v77;
        v71[1] = v72[1];
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v105 + 40))(v78, v79, v115);
        goto LABEL_78;
      }
      v78 = (unint64_t)&v71[v73] & v17;
      v80 = __dst;
      goto LABEL_77;
    }
    if (v75 <= 1)
    {
      v84 = (unint64_t)&v71[v73] & v17;
      v79 = (unint64_t)&v72[v73] & v17;
      goto LABEL_70;
    }
LABEL_71:
    memcpy(v71, v72, v74);
    goto LABEL_72;
  }
  v81 = *(uint64_t (**)(void))(v10 + 48);
  v114 = (unint64_t)&v71[v73] & v17;
  v82 = v81();
  v79 = (unint64_t)&v72[v73] & v17;
  v83 = ((uint64_t (*)(unint64_t, _QWORD, uint64_t))v81)(v79, v112, v115);
  if (!v82)
  {
    v80 = __dst;
    v76 = __src;
    v70 = v100;
    v78 = v114;
    if (!v83)
    {
      v77 = *v72;
      goto LABEL_75;
    }
LABEL_77:
    (*(void (**)(unint64_t, uint64_t))(v105 + 8))(v78, v115);
    memcpy(v71, v72, v74);
    goto LABEL_78;
  }
  v76 = __src;
  v70 = v100;
  if (v83)
    goto LABEL_71;
  LOBYTE(v75) = *v72;
  v84 = (unint64_t)&v71[v73] & v17;
LABEL_70:
  *v71 = v75;
  v71[1] = v72[1];
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v105 + 32))(v84, v79, v115);
LABEL_72:
  v80 = __dst;
LABEL_78:
  v85 = &v71[v74];
  *(_WORD *)v85 = *(_WORD *)&v72[v74];
  *((_WORD *)v85 + 1) = *(_WORD *)&v72[v74 + 2];
  *((_WORD *)v85 + 2) = *(_WORD *)&v72[v74 + 4];
  v86 = ((v70 + ((v94 + (v70 & v17)) & v111)) & v17) + v74;
  *(_QWORD *)((unint64_t)&v80[v86 + 13] & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&v76[v86 + 13] & 0xFFFFFFFFFFFFF8);
  swift_release();
  v87 = *(_QWORD *)(*(_QWORD *)(v95 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v87 + 40))((unint64_t)&v80[((v86 + 13) & 0xFFFFFFFFFFFFFFF8) + 8 + *(unsigned __int8 *)(v87 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v87 + 80), (unint64_t)&v76[((v86 + 13) & 0xFFFFFFFFFFFFFFF8) + 8 + *(unsigned __int8 *)(v87 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v87 + 80));
  return v80;
}

uint64_t sub_21C5DB130(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  char v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t result;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;

  v6 = sub_21C5E31A8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(sub_21C5E2E78() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v8 <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = v8;
  if (v11 <= 0x7FFFFFFE)
    v12 = 2147483646;
  else
    v12 = v11;
  v13 = v12 - 1;
  if (v10 <= 0xFE)
    v14 = 254;
  else
    v14 = *(_DWORD *)(v9 + 84);
  v15 = v14 - 1;
  if (v14 - 1 <= v13)
    v16 = v12 - 1;
  else
    v16 = v14 - 1;
  if (v16 <= 0x7FFFFFFE)
    v17 = 2147483646;
  else
    v17 = v16;
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v19 = *(unsigned int *)(v18 + 84);
  if (v19 <= v17)
    v20 = v17;
  else
    v20 = *(_DWORD *)(v18 + 84);
  if (!a2)
    return 0;
  v21 = *(unsigned __int8 *)(v7 + 80);
  v22 = *(_QWORD *)(v7 + 64);
  v23 = *(unsigned __int8 *)(v9 + 80);
  v24 = *(_QWORD *)(v9 + 64);
  v25 = v24 + 7;
  v26 = ((v24 + 7 + ((v22 + v23 + ((v21 + 2) & ~v21)) & ~v23)) & 0xFFFFFFFFFFFFFFF8) + v23 + 8;
  v27 = ((v23 + 2) & ~v23)
      + v24
      + ((v26 + (((v21 | v23 | 7) + v24 + ((v23 + 3) & ~v23) + (v26 & ~v23)) & ~(v21 | v23 | 7))) & ~v23);
  v28 = *(unsigned __int8 *)(v18 + 80);
  v29 = ((v27 + 13) & 0xFFFFFFFFFFFFFFF8) + v28 + 8;
  v30 = a2 - v20;
  if (a2 > v20)
  {
    v31 = (v29 & ~v28) + *(_QWORD *)(v18 + 64);
    v32 = 8 * v31;
    if (v31 > 3)
      goto LABEL_22;
    v34 = ((v30 + ~(-1 << v32)) >> v32) + 1;
    if (HIWORD(v34))
    {
      v33 = *(_DWORD *)(a1 + v31);
      if (!v33)
        goto LABEL_38;
      goto LABEL_29;
    }
    if (v34 > 0xFF)
    {
      v33 = *(unsigned __int16 *)(a1 + v31);
      if (!*(_WORD *)(a1 + v31))
        goto LABEL_38;
      goto LABEL_29;
    }
    if (v34 >= 2)
    {
LABEL_22:
      v33 = *(unsigned __int8 *)(a1 + v31);
      if (!*(_BYTE *)(a1 + v31))
        goto LABEL_38;
LABEL_29:
      v35 = (v33 - 1) << v32;
      if (v31 > 3)
        v35 = 0;
      if ((_DWORD)v31)
      {
        if (v31 <= 3)
          v36 = (v29 & ~(_DWORD)v28) + *(_DWORD *)(v18 + 64);
        else
          v36 = 4;
        __asm { BR              X12 }
      }
      return v20 + v35 + 1;
    }
  }
LABEL_38:
  if (v17 < v19)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v18 + 48))((v29 + a1) & ~v28, v19);
  if (v16 < 0x7FFFFFFE)
  {
    v41 = *(_QWORD *)((a1 + v27 + 13) & 0xFFFFFFFFFFFFF8);
    if (v41 >= 0xFFFFFFFF)
      LODWORD(v41) = -1;
    if ((v41 + 1) >= 2)
      return v41;
    else
      return 0;
  }
  else
  {
    v37 = ~v23;
    if (v13 < v15)
    {
      v38 = (unsigned __int8 *)((v26 + a1) & v37);
      if (v10 > 0xFE)
      {
        v40 = (*(uint64_t (**)(unint64_t))(v9 + 48))((unint64_t)&v38[v23 + 3] & v37);
LABEL_53:
        v45 = v40 != 0;
        result = (v40 - 1);
        if ((_DWORD)result != 0 && v45)
          return result;
        return 0;
      }
      v39 = *v38;
      if (v39 >= 2)
      {
        v40 = ((v39 + 2147483646) & 0x7FFFFFFF) + 1;
        goto LABEL_53;
      }
      return 0;
    }
    v42 = (a1 + v21 + 2) & ~v21;
    if ((_DWORD)v8 == v12)
    {
      v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v42, v8, v6);
    }
    else
    {
      v46 = (v42 + v22 + v23) & v37;
      if (v10 == v12)
      {
        v43 = (*(uint64_t (**)(uint64_t))(v9 + 48))(v46);
      }
      else
      {
        v47 = *(_QWORD *)((v25 + v46) & 0xFFFFFFFFFFFFF8);
        if (v47 >= 0xFFFFFFFF)
          LODWORD(v47) = -1;
        if ((v47 + 1) >= 2)
          v43 = v47;
        else
          v43 = 0;
      }
    }
    if (v43 >= 2)
      return v43 - 1;
    else
      return 0;
  }
}

void sub_21C5DB4AC(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;

  v7 = *(_QWORD *)(sub_21C5E31A8() - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(sub_21C5E2E78() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v8 <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = v8;
  if (v11 <= 0x7FFFFFFE)
    v11 = 2147483646;
  if (v10 <= 0xFE)
    v12 = 254;
  else
    v12 = *(_DWORD *)(v9 + 84);
  if (v12 - 1 <= v11 - 1)
    v13 = v11 - 1;
  else
    v13 = v12 - 1;
  if (v13 <= 0x7FFFFFFE)
    v14 = 2147483646;
  else
    v14 = v13;
  v15 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v15 + 84) <= v14)
    v16 = v14;
  else
    v16 = *(_DWORD *)(v15 + 84);
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = *(_QWORD *)(v9 + 64);
  v20 = ((v19 + 7 + ((*(_QWORD *)(v7 + 64) + v18 + ((v17 + 2) & ~v17)) & ~v18)) & 0xFFFFFFFFFFFFFFF8) + 8;
  v21 = ((((((v18 + 2) & ~v18)
          + v19
          + ((v20 + v18 + ((((v18 + 3) & ~v18) + v19 + (v17 | v18 | 7) + ((v20 + v18) & ~v18)) & ~(v17 | v18 | 7))) & ~v18)
          + 13) & 0xFFFFFFFFFFFFFFF8)
        + *(unsigned __int8 *)(v15 + 80)
        + 8) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))
      + *(_QWORD *)(v15 + 64);
  v22 = a3 >= v16;
  v23 = a3 - v16;
  if (v23 != 0 && v22)
  {
    if (v21 <= 3)
    {
      v26 = ((v23 + ~(-1 << (8 * v21))) >> (8 * v21)) + 1;
      if (HIWORD(v26))
      {
        v24 = 4u;
      }
      else if (v26 >= 0x100)
      {
        v24 = 2;
      }
      else
      {
        v24 = v26 > 1;
      }
    }
    else
    {
      v24 = 1u;
    }
  }
  else
  {
    v24 = 0;
  }
  if (v16 < a2)
  {
    v25 = ~v16 + a2;
    if (v21 < 4)
    {
      if ((_DWORD)v21)
      {
        v27 = v25 & ~(-1 << (8 * v21));
        bzero(a1, v21);
        if ((_DWORD)v21 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if ((_DWORD)v21 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v21);
      *(_DWORD *)a1 = v25;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X21 }
}

void sub_21C5DB844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  char v14;
  uint64_t v15;

  *(_BYTE *)(a14 + v15) = v14;
}

void sub_21C5DB850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __int16 v14;
  uint64_t v15;

  *(_WORD *)(a14 + v15) = v14;
}

void sub_21C5DB85C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  uint64_t v15;

  *(_DWORD *)(a14 + v15) = v14;
  JUMPOUT(0x21C5DB864);
}

void sub_21C5DB9C0()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
}

void sub_21C5DB9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _WORD *a14)
{
  __int16 v14;

  *a14 = v14;
}

void sub_21C5DB9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;

  *(_WORD *)a14 = v14;
  *(_BYTE *)(a14 + 2) = BYTE2(v14);
}

void sub_21C5DB9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  int v14;

  *a14 = v14;
}

void sub_21C5DBA44()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_21C5DBA4C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_21C5DBA5C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t type metadata accessor for MapControlsConfig()
{
  uint64_t result;

  result = qword_25528B218;
  if (!qword_25528B218)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t *sub_21C5DBB08(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(uint64_t *, _QWORD, uint64_t, int *);
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;
  _WORD *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(_WORD *, _QWORD, uint64_t, int *);
  uint64_t v45;
  _WORD *v46;
  _WORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = (int *)type metadata accessor for MapPitchToggleConfig(0);
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289510);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      v11 = v7[6];
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = sub_21C5E31A8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      v15 = v7[7];
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = sub_21C5E2E78();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      *(uint64_t *)((char *)a1 + v7[8]) = *(uint64_t *)((char *)a2 + v7[8]);
      v19 = *(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v8 + 56);
      swift_retain();
      v19(a1, 0, 1, v7);
    }
    v20 = a3[5];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for MapScaleViewConfig(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289518);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *(_WORD *)v21 = *(_WORD *)v22;
      v21[2] = v22[2];
      v26 = *(int *)(v23 + 28);
      v27 = &v21[v26];
      v28 = &v22[v26];
      v29 = sub_21C5E2E78();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    v30 = a3[6];
    v31 = (_WORD *)((char *)a1 + v30);
    v32 = (_WORD *)((char *)a2 + v30);
    v33 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
    v34 = *((_QWORD *)v33 - 1);
    if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
    {
      v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289500);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      *v31 = *v32;
      v36 = v33[6];
      v37 = (char *)v31 + v36;
      v38 = (char *)v32 + v36;
      v39 = sub_21C5E31A8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
      v40 = v33[7];
      v41 = (char *)v31 + v40;
      v42 = (char *)v32 + v40;
      v43 = sub_21C5E2E78();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
      *(_QWORD *)((char *)v31 + v33[8]) = *(_QWORD *)((char *)v32 + v33[8]);
      v44 = *(void (**)(_WORD *, _QWORD, uint64_t, int *))(v34 + 56);
      swift_retain();
      v44(v31, 0, 1, v33);
    }
    v45 = a3[7];
    v46 = (_WORD *)((char *)a1 + v45);
    v47 = (_WORD *)((char *)a2 + v45);
    v48 = type metadata accessor for MapCompassConfig(0);
    v49 = *(_QWORD *)(v48 - 8);
    if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289508);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      *v46 = *v47;
      v51 = *(int *)(v48 + 24);
      v52 = (char *)v46 + v51;
      v53 = (char *)v47 + v51;
      v54 = sub_21C5E2E78();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
      (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    v55 = a3[9];
    *(_WORD *)((char *)a1 + a3[8]) = *(_WORD *)((char *)a2 + a3[8]);
    *(_WORD *)((char *)a1 + v55) = *(_WORD *)((char *)a2 + v55);
    *(_WORD *)((char *)a1 + a3[10]) = *(_WORD *)((char *)a2 + a3[10]);
  }
  return a1;
}

uint64_t sub_21C5DBEA0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for MapPitchToggleConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    v5 = a1 + *(int *)(v4 + 24);
    v6 = sub_21C5E31A8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    v7 = a1 + *(int *)(v4 + 28);
    v8 = sub_21C5E2E78();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    swift_release();
  }
  v9 = a1 + a2[5];
  v10 = type metadata accessor for MapScaleViewConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v11 = v9 + *(int *)(v10 + 28);
    v12 = sub_21C5E2E78();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  v13 = a1 + a2[6];
  v14 = type metadata accessor for MapUserLocationButtonConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    v15 = v13 + *(int *)(v14 + 24);
    v16 = sub_21C5E31A8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
    v17 = v13 + *(int *)(v14 + 28);
    v18 = sub_21C5E2E78();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
    swift_release();
  }
  v19 = a1 + a2[7];
  v20 = type metadata accessor for MapCompassConfig(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20);
  if (!(_DWORD)result)
  {
    v22 = v19 + *(int *)(v20 + 24);
    v23 = sub_21C5E2E78();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  }
  return result;
}

_WORD *sub_21C5DC088(_WORD *a1, _WORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(_WORD *, _QWORD, uint64_t, int *);
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  _WORD *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(_WORD *, _QWORD, uint64_t, int *);
  uint64_t v43;
  _WORD *v44;
  _WORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;

  v6 = (int *)type metadata accessor for MapPitchToggleConfig(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289510);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v9 = v6[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_21C5E31A8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = v6[7];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_21C5E2E78();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
    v17 = *(void (**)(_WORD *, _QWORD, uint64_t, int *))(v7 + 56);
    swift_retain();
    v17(a1, 0, 1, v6);
  }
  v18 = a3[5];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for MapScaleViewConfig(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289518);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    *(_WORD *)v19 = *(_WORD *)v20;
    v19[2] = v20[2];
    v24 = *(int *)(v21 + 28);
    v25 = &v19[v24];
    v26 = &v20[v24];
    v27 = sub_21C5E2E78();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v28 = a3[6];
  v29 = (_WORD *)((char *)a1 + v28);
  v30 = (_WORD *)((char *)a2 + v28);
  v31 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
  v32 = *((_QWORD *)v31 - 1);
  if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v32 + 48))(v30, 1, v31))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289500);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    *v29 = *v30;
    v34 = v31[6];
    v35 = (char *)v29 + v34;
    v36 = (char *)v30 + v34;
    v37 = sub_21C5E31A8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
    v38 = v31[7];
    v39 = (char *)v29 + v38;
    v40 = (char *)v30 + v38;
    v41 = sub_21C5E2E78();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
    *(_QWORD *)((char *)v29 + v31[8]) = *(_QWORD *)((char *)v30 + v31[8]);
    v42 = *(void (**)(_WORD *, _QWORD, uint64_t, int *))(v32 + 56);
    swift_retain();
    v42(v29, 0, 1, v31);
  }
  v43 = a3[7];
  v44 = (_WORD *)((char *)a1 + v43);
  v45 = (_WORD *)((char *)a2 + v43);
  v46 = type metadata accessor for MapCompassConfig(0);
  v47 = *(_QWORD *)(v46 - 8);
  if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289508);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    *v44 = *v45;
    v49 = *(int *)(v46 + 24);
    v50 = (char *)v44 + v49;
    v51 = (char *)v45 + v49;
    v52 = sub_21C5E2E78();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
    (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  v53 = a3[9];
  *(_WORD *)((char *)a1 + a3[8]) = *(_WORD *)((char *)a2 + a3[8]);
  *(_WORD *)((char *)a1 + v53) = *(_WORD *)((char *)a2 + v53);
  *(_WORD *)((char *)a1 + a3[10]) = *(_WORD *)((char *)a2 + a3[10]);
  return a1;
}

_BYTE *sub_21C5DC3F4(_BYTE *a1, _BYTE *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  void (*v19)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_BYTE *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  int *v37;
  uint64_t v38;
  uint64_t (*v39)(_BYTE *, uint64_t, int *);
  int v40;
  int v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  void (*v50)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(_BYTE *, uint64_t, uint64_t);
  int v58;
  int v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;

  v6 = (int *)type metadata accessor for MapPitchToggleConfig(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v11 = v6[6];
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = sub_21C5E31A8();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      v15 = v6[7];
      v16 = &a1[v15];
      v17 = &a2[v15];
      v18 = sub_21C5E2E78();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      *(_QWORD *)&a1[v6[8]] = *(_QWORD *)&a2[v6[8]];
      v19 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v7 + 56);
      swift_retain();
      v19(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_21C52A88C((uint64_t)a1, type metadata accessor for MapPitchToggleConfig);
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289510);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  v66 = v6[6];
  v67 = &a1[v66];
  v68 = &a2[v66];
  v69 = sub_21C5E31A8();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v69 - 8) + 24))(v67, v68, v69);
  v70 = v6[7];
  v71 = &a1[v70];
  v72 = &a2[v70];
  v73 = sub_21C5E2E78();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v73 - 8) + 24))(v71, v72, v73);
  *(_QWORD *)&a1[v6[8]] = *(_QWORD *)&a2[v6[8]];
  swift_retain();
  swift_release();
LABEL_7:
  v21 = a3[5];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for MapScaleViewConfig(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      *v22 = *v23;
      v22[1] = v23[1];
      v22[2] = v23[2];
      v29 = *(int *)(v24 + 28);
      v30 = &v22[v29];
      v31 = &v23[v29];
      v32 = sub_21C5E2E78();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    sub_21C52A88C((uint64_t)v22, type metadata accessor for MapScaleViewConfig);
LABEL_12:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289518);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  *v22 = *v23;
  v22[1] = v23[1];
  v22[2] = v23[2];
  v74 = *(int *)(v24 + 28);
  v75 = &v22[v74];
  v76 = &v23[v74];
  v77 = sub_21C5E2E78();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v77 - 8) + 24))(v75, v76, v77);
LABEL_13:
  v34 = a3[6];
  v35 = &a1[v34];
  v36 = &a2[v34];
  v37 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
  v38 = *((_QWORD *)v37 - 1);
  v39 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      *v35 = *v36;
      v35[1] = v36[1];
      v42 = v37[6];
      v43 = &v35[v42];
      v44 = &v36[v42];
      v45 = sub_21C5E31A8();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
      v46 = v37[7];
      v47 = &v35[v46];
      v48 = &v36[v46];
      v49 = sub_21C5E2E78();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
      *(_QWORD *)&v35[v37[8]] = *(_QWORD *)&v36[v37[8]];
      v50 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v38 + 56);
      swift_retain();
      v50(v35, 0, 1, v37);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v41)
  {
    sub_21C52A88C((uint64_t)v35, type metadata accessor for MapUserLocationButtonConfig);
LABEL_18:
    v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289500);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_19;
  }
  *v35 = *v36;
  v35[1] = v36[1];
  v78 = v37[6];
  v79 = &v35[v78];
  v80 = &v36[v78];
  v81 = sub_21C5E31A8();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v81 - 8) + 24))(v79, v80, v81);
  v82 = v37[7];
  v83 = &v35[v82];
  v84 = &v36[v82];
  v85 = sub_21C5E2E78();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v85 - 8) + 24))(v83, v84, v85);
  *(_QWORD *)&v35[v37[8]] = *(_QWORD *)&v36[v37[8]];
  swift_retain();
  swift_release();
LABEL_19:
  v52 = a3[7];
  v53 = &a1[v52];
  v54 = &a2[v52];
  v55 = type metadata accessor for MapCompassConfig(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v56 + 48);
  v58 = v57(v53, 1, v55);
  v59 = v57(v54, 1, v55);
  if (!v58)
  {
    if (!v59)
    {
      *v53 = *v54;
      v53[1] = v54[1];
      v86 = *(int *)(v55 + 24);
      v87 = &v53[v86];
      v88 = &v54[v86];
      v89 = sub_21C5E2E78();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v89 - 8) + 24))(v87, v88, v89);
      goto LABEL_25;
    }
    sub_21C52A88C((uint64_t)v53, type metadata accessor for MapCompassConfig);
    goto LABEL_24;
  }
  if (v59)
  {
LABEL_24:
    v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289508);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_25;
  }
  *v53 = *v54;
  v53[1] = v54[1];
  v60 = *(int *)(v55 + 24);
  v61 = &v53[v60];
  v62 = &v54[v60];
  v63 = sub_21C5E2E78();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v61, v62, v63);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
LABEL_25:
  *(_WORD *)&a1[a3[8]] = *(_WORD *)&a2[a3[8]];
  *(_WORD *)&a1[a3[9]] = *(_WORD *)&a2[a3[9]];
  *(_WORD *)&a1[a3[10]] = *(_WORD *)&a2[a3[10]];
  return a1;
}

_WORD *sub_21C5DC9CC(_WORD *a1, _WORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  _WORD *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _WORD *v42;
  _WORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;

  v6 = (int *)type metadata accessor for MapPitchToggleConfig(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289510);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v9 = v6[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_21C5E31A8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    v13 = v6[7];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_21C5E2E78();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  v17 = a3[5];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for MapScaleViewConfig(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289518);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *(_WORD *)v18 = *(_WORD *)v19;
    v18[2] = v19[2];
    v23 = *(int *)(v20 + 28);
    v24 = &v18[v23];
    v25 = &v19[v23];
    v26 = sub_21C5E2E78();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v27 = a3[6];
  v28 = (_WORD *)((char *)a1 + v27);
  v29 = (_WORD *)((char *)a2 + v27);
  v30 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
  v31 = *((_QWORD *)v30 - 1);
  if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
  {
    v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289500);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    *v28 = *v29;
    v33 = v30[6];
    v34 = (char *)v28 + v33;
    v35 = (char *)v29 + v33;
    v36 = sub_21C5E31A8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
    v37 = v30[7];
    v38 = (char *)v28 + v37;
    v39 = (char *)v29 + v37;
    v40 = sub_21C5E2E78();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v38, v39, v40);
    *(_QWORD *)((char *)v28 + v30[8]) = *(_QWORD *)((char *)v29 + v30[8]);
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v31 + 56))(v28, 0, 1, v30);
  }
  v41 = a3[7];
  v42 = (_WORD *)((char *)a1 + v41);
  v43 = (_WORD *)((char *)a2 + v41);
  v44 = type metadata accessor for MapCompassConfig(0);
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289508);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    *v42 = *v43;
    v47 = *(int *)(v44 + 24);
    v48 = (char *)v42 + v47;
    v49 = (char *)v43 + v47;
    v50 = sub_21C5E2E78();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
    (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  v51 = a3[9];
  *(_WORD *)((char *)a1 + a3[8]) = *(_WORD *)((char *)a2 + a3[8]);
  *(_WORD *)((char *)a1 + v51) = *(_WORD *)((char *)a2 + v51);
  *(_WORD *)((char *)a1 + a3[10]) = *(_WORD *)((char *)a2 + a3[10]);
  return a1;
}

_BYTE *sub_21C5DCD30(_BYTE *a1, _BYTE *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_BYTE *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  int *v36;
  uint64_t v37;
  uint64_t (*v38)(_BYTE *, uint64_t, int *);
  int v39;
  int v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(_BYTE *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  uint64_t v88;

  v6 = (int *)type metadata accessor for MapPitchToggleConfig(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      v11 = v6[6];
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = sub_21C5E31A8();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      v15 = v6[7];
      v16 = &a1[v15];
      v17 = &a2[v15];
      v18 = sub_21C5E2E78();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      *(_QWORD *)&a1[v6[8]] = *(_QWORD *)&a2[v6[8]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_21C52A88C((uint64_t)a1, type metadata accessor for MapPitchToggleConfig);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289510);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  v65 = v6[6];
  v66 = &a1[v65];
  v67 = &a2[v65];
  v68 = sub_21C5E31A8();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v68 - 8) + 40))(v66, v67, v68);
  v69 = v6[7];
  v70 = &a1[v69];
  v71 = &a2[v69];
  v72 = sub_21C5E2E78();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v72 - 8) + 40))(v70, v71, v72);
  *(_QWORD *)&a1[v6[8]] = *(_QWORD *)&a2[v6[8]];
  swift_release();
LABEL_7:
  v20 = a3[5];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = type metadata accessor for MapScaleViewConfig(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      *(_WORD *)v21 = *(_WORD *)v22;
      v21[2] = v22[2];
      v28 = *(int *)(v23 + 28);
      v29 = &v21[v28];
      v30 = &v22[v28];
      v31 = sub_21C5E2E78();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    sub_21C52A88C((uint64_t)v21, type metadata accessor for MapScaleViewConfig);
LABEL_12:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289518);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  *v21 = *v22;
  v21[1] = v22[1];
  v21[2] = v22[2];
  v73 = *(int *)(v23 + 28);
  v74 = &v21[v73];
  v75 = &v22[v73];
  v76 = sub_21C5E2E78();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v76 - 8) + 40))(v74, v75, v76);
LABEL_13:
  v33 = a3[6];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
  v37 = *((_QWORD *)v36 - 1);
  v38 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      *(_WORD *)v34 = *(_WORD *)v35;
      v41 = v36[6];
      v42 = &v34[v41];
      v43 = &v35[v41];
      v44 = sub_21C5E31A8();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
      v45 = v36[7];
      v46 = &v34[v45];
      v47 = &v35[v45];
      v48 = sub_21C5E2E78();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v46, v47, v48);
      *(_QWORD *)&v34[v36[8]] = *(_QWORD *)&v35[v36[8]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v40)
  {
    sub_21C52A88C((uint64_t)v34, type metadata accessor for MapUserLocationButtonConfig);
LABEL_18:
    v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289500);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_19;
  }
  *v34 = *v35;
  v34[1] = v35[1];
  v77 = v36[6];
  v78 = &v34[v77];
  v79 = &v35[v77];
  v80 = sub_21C5E31A8();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v80 - 8) + 40))(v78, v79, v80);
  v81 = v36[7];
  v82 = &v34[v81];
  v83 = &v35[v81];
  v84 = sub_21C5E2E78();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v84 - 8) + 40))(v82, v83, v84);
  *(_QWORD *)&v34[v36[8]] = *(_QWORD *)&v35[v36[8]];
  swift_release();
LABEL_19:
  v50 = a3[7];
  v51 = &a1[v50];
  v52 = &a2[v50];
  v53 = type metadata accessor for MapCompassConfig(0);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v54 + 48);
  v56 = v55(v51, 1, v53);
  v57 = v55(v52, 1, v53);
  if (!v56)
  {
    if (!v57)
    {
      *v51 = *v52;
      v51[1] = v52[1];
      v85 = *(int *)(v53 + 24);
      v86 = &v51[v85];
      v87 = &v52[v85];
      v88 = sub_21C5E2E78();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v88 - 8) + 40))(v86, v87, v88);
      goto LABEL_25;
    }
    sub_21C52A88C((uint64_t)v51, type metadata accessor for MapCompassConfig);
    goto LABEL_24;
  }
  if (v57)
  {
LABEL_24:
    v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289508);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_25;
  }
  *(_WORD *)v51 = *(_WORD *)v52;
  v58 = *(int *)(v53 + 24);
  v59 = &v51[v58];
  v60 = &v52[v58];
  v61 = sub_21C5E2E78();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v59, v60, v61);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
LABEL_25:
  v63 = a3[9];
  *(_WORD *)&a1[a3[8]] = *(_WORD *)&a2[a3[8]];
  *(_WORD *)&a1[v63] = *(_WORD *)&a2[v63];
  *(_WORD *)&a1[a3[10]] = *(_WORD *)&a2[a3[10]];
  return a1;
}

uint64_t sub_21C5DD2CC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5DD2D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;
  int v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289510);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289518);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289500);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_9;
  }
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289508);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[7];
    goto LABEL_9;
  }
  v17 = *(unsigned __int8 *)(a1 + a3[8]);
  if (v17 >= 2)
    v18 = ((v17 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v18 = -2;
  if (v18 < 0)
    v18 = -1;
  return (v18 + 1);
}

uint64_t sub_21C5DD3F4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C5DD400(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289510);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289518);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289500);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_9;
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&qword_255289508);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_9;
  }
  *(_BYTE *)(a1 + a4[8]) = a2 + 2;
  return result;
}

void sub_21C5DD4FC()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  sub_21C596C90(319, &qword_25528B228, type metadata accessor for MapPitchToggleConfig, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    sub_21C596C90(319, &qword_25528B230, type metadata accessor for MapScaleViewConfig, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
    {
      sub_21C596C90(319, &qword_25528B238, type metadata accessor for MapUserLocationButtonConfig, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      if (v2 <= 0x3F)
      {
        sub_21C596C90(319, &qword_25528B240, type metadata accessor for MapCompassConfig, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

ValueMetadata *type metadata accessor for MapControlsConfigPref()
{
  return &type metadata for MapControlsConfigPref;
}

uint64_t sub_21C5DD634()
{
  return swift_getOpaqueTypeConformance2();
}

BOOL sub_21C5DD668(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t, uint64_t);
  int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  int v71;
  uint64_t v72;
  unsigned __int8 *v73;
  int v74;
  BOOL v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t *v80;
  int v81;
  char *v82;
  unsigned __int8 *v83;
  char v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  int v92;
  uint64_t v93;
  __int16 v94;
  int v95;
  uint64_t v96;
  __int16 v97;
  int v98;
  unsigned __int8 *v99;
  unsigned __int8 *v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  uint64_t v117;
  unsigned __int8 *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int *v129;
  uint64_t v130;

  v130 = a2;
  v110 = type metadata accessor for MapCompassConfig(0);
  v109 = *(_QWORD *)(v110 - 8);
  MEMORY[0x24BDAC7A8](v110);
  v105 = (unsigned __int8 *)&v104 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528B2A8);
  MEMORY[0x24BDAC7A8](v108);
  v112 = (char *)&v104 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289508);
  MEMORY[0x24BDAC7A8](v5);
  v106 = (unsigned __int8 *)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v122 = (char *)&v104 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v111 = (uint64_t)&v104 - v10;
  v11 = type metadata accessor for MapUserLocationButtonConfig(0);
  v114 = *(_QWORD *)(v11 - 8);
  v115 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v107 = (unsigned __int8 *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528B2B0);
  MEMORY[0x24BDAC7A8](v113);
  v117 = (uint64_t)&v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289500);
  MEMORY[0x24BDAC7A8](v14);
  v121 = (unsigned __int8 *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v125 = (uint64_t)&v104 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v126 = (uint64_t)&v104 - v19;
  v124 = type metadata accessor for MapScaleViewConfig(0);
  v120 = *(_QWORD *)(v124 - 8);
  MEMORY[0x24BDAC7A8](v124);
  v116 = (unsigned __int8 *)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528B2B8);
  MEMORY[0x24BDAC7A8](v119);
  v129 = (int *)((char *)&v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289518);
  MEMORY[0x24BDAC7A8](v22);
  v118 = (unsigned __int8 *)&v104 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v127 = (uint64_t)&v104 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v128 = (uint64_t)&v104 - v27;
  v28 = type metadata accessor for MapPitchToggleConfig(0);
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (unsigned __int8 *)&v104 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528B2C0);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v104 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289510);
  MEMORY[0x24BDAC7A8](v35);
  v37 = (unsigned __int8 *)&v104 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v38);
  v40 = (char *)&v104 - v39;
  MEMORY[0x24BDAC7A8](v41);
  v43 = (char *)&v104 - v42;
  v123 = a1;
  sub_21C531B18(a1, (uint64_t)&v104 - v42, &qword_255289510);
  sub_21C531B18(v130, (uint64_t)v40, &qword_255289510);
  v44 = (uint64_t)&v34[*(int *)(v32 + 48)];
  sub_21C531B18((uint64_t)v43, (uint64_t)v34, &qword_255289510);
  sub_21C531B18((uint64_t)v40, v44, &qword_255289510);
  v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  if (v45((uint64_t)v34, 1, v28) == 1)
  {
    sub_21C524980((uint64_t)v40, &qword_255289510);
    sub_21C524980((uint64_t)v43, &qword_255289510);
    if (v45(v44, 1, v28) == 1)
    {
      sub_21C524980((uint64_t)v34, &qword_255289510);
      goto LABEL_8;
    }
LABEL_6:
    v46 = &qword_25528B2C0;
    v47 = (uint64_t)v34;
LABEL_42:
    sub_21C524980(v47, v46);
    return 0;
  }
  sub_21C531B18((uint64_t)v34, (uint64_t)v37, &qword_255289510);
  if (v45(v44, 1, v28) == 1)
  {
    sub_21C524980((uint64_t)v40, &qword_255289510);
    sub_21C524980((uint64_t)v43, &qword_255289510);
    sub_21C52A88C((uint64_t)v37, type metadata accessor for MapPitchToggleConfig);
    goto LABEL_6;
  }
  sub_21C52AAD4(v44, (uint64_t)v31, type metadata accessor for MapPitchToggleConfig);
  v48 = sub_21C531694(v37, v31);
  sub_21C52A88C((uint64_t)v31, type metadata accessor for MapPitchToggleConfig);
  sub_21C524980((uint64_t)v40, &qword_255289510);
  sub_21C524980((uint64_t)v43, &qword_255289510);
  sub_21C52A88C((uint64_t)v37, type metadata accessor for MapPitchToggleConfig);
  sub_21C524980((uint64_t)v34, &qword_255289510);
  if ((v48 & 1) == 0)
    return 0;
LABEL_8:
  v49 = type metadata accessor for MapControlsConfig();
  v50 = v123;
  v51 = v128;
  sub_21C531B18(v123 + *(int *)(v49 + 20), v128, &qword_255289518);
  v52 = v130;
  v53 = v127;
  sub_21C531B18(v130 + *(int *)(v49 + 20), v127, &qword_255289518);
  v54 = (uint64_t)v129;
  v55 = (uint64_t)v129 + *(int *)(v119 + 48);
  sub_21C531B18(v51, (uint64_t)v129, &qword_255289518);
  sub_21C531B18(v53, v55, &qword_255289518);
  v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
  v57 = v124;
  if (v56(v54, 1, v124) == 1)
  {
    sub_21C524980(v53, &qword_255289518);
    sub_21C524980(v51, &qword_255289518);
    v58 = v56(v55, 1, v57);
    v60 = v121;
    v59 = (uint64_t)v122;
    v62 = v125;
    v61 = v126;
    if (v58 == 1)
    {
      sub_21C524980((uint64_t)v129, &qword_255289518);
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  v70 = v118;
  sub_21C531B18(v54, (uint64_t)v118, &qword_255289518);
  v71 = v56(v55, 1, v57);
  v60 = v121;
  v59 = (uint64_t)v122;
  v62 = v125;
  v61 = v126;
  if (v71 == 1)
  {
    sub_21C524980(v127, &qword_255289518);
    sub_21C524980(v128, &qword_255289518);
    sub_21C52A88C((uint64_t)v70, type metadata accessor for MapScaleViewConfig);
LABEL_16:
    v46 = &qword_25528B2B8;
    v47 = (uint64_t)v129;
    goto LABEL_42;
  }
  v72 = v55;
  v73 = v116;
  sub_21C52AAD4(v72, (uint64_t)v116, type metadata accessor for MapScaleViewConfig);
  if (*v70 != *v73
    || (sub_21C5E2E54() & 1) == 0
    || (v74 = sub_21C5E2FF8(),
        v73 = v116,
        v75 = v74 == sub_21C5E2FF8(),
        v70 = v118,
        !v75))
  {
    sub_21C52A88C((uint64_t)v73, type metadata accessor for MapScaleViewConfig);
    v79 = (uint64_t)v70;
    v80 = &qword_255289518;
    sub_21C524980(v127, &qword_255289518);
    sub_21C524980(v128, &qword_255289518);
    sub_21C52A88C(v79, type metadata accessor for MapScaleViewConfig);
    v47 = (uint64_t)v129;
LABEL_24:
    v46 = v80;
    goto LABEL_42;
  }
  v76 = sub_21C5E2E6C();
  v77 = (uint64_t)v73;
  v78 = v76;
  sub_21C52A88C(v77, type metadata accessor for MapScaleViewConfig);
  sub_21C524980(v127, &qword_255289518);
  sub_21C524980(v128, &qword_255289518);
  sub_21C52A88C((uint64_t)v70, type metadata accessor for MapScaleViewConfig);
  sub_21C524980((uint64_t)v129, &qword_255289518);
  if ((v78 & 1) == 0)
    return 0;
LABEL_11:
  sub_21C531B18(v50 + *(int *)(v49 + 24), v61, &qword_255289500);
  v129 = (int *)v49;
  sub_21C531B18(v52 + *(int *)(v49 + 24), v62, &qword_255289500);
  v63 = v117;
  v64 = v117 + *(int *)(v113 + 48);
  sub_21C531B18(v61, v117, &qword_255289500);
  sub_21C531B18(v62, v64, &qword_255289500);
  v65 = v61;
  v66 = v115;
  v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 48);
  if (v67(v63, 1, v115) == 1)
  {
    sub_21C524980(v62, &qword_255289500);
    sub_21C524980(v65, &qword_255289500);
    v68 = v67(v64, 1, v66);
    v69 = (uint64_t)v112;
    if (v68 == 1)
    {
      sub_21C524980(v117, &qword_255289500);
      goto LABEL_29;
    }
LABEL_27:
    v46 = &qword_25528B2B0;
    v47 = v117;
    goto LABEL_42;
  }
  sub_21C531B18(v63, (uint64_t)v60, &qword_255289500);
  v81 = v67(v64, 1, v66);
  v82 = v112;
  if (v81 == 1)
  {
    sub_21C524980(v125, &qword_255289500);
    sub_21C524980(v126, &qword_255289500);
    sub_21C52A88C((uint64_t)v60, type metadata accessor for MapUserLocationButtonConfig);
    goto LABEL_27;
  }
  v83 = v107;
  sub_21C52AAD4(v64, (uint64_t)v107, type metadata accessor for MapUserLocationButtonConfig);
  v84 = sub_21C5D5448(v60, v83);
  sub_21C52A88C((uint64_t)v83, type metadata accessor for MapUserLocationButtonConfig);
  sub_21C524980(v125, &qword_255289500);
  sub_21C524980(v126, &qword_255289500);
  sub_21C52A88C((uint64_t)v60, type metadata accessor for MapUserLocationButtonConfig);
  sub_21C524980(v63, &qword_255289500);
  v69 = (uint64_t)v82;
  if ((v84 & 1) == 0)
    return 0;
LABEL_29:
  v85 = v129;
  v80 = &qword_255289508;
  v86 = v111;
  sub_21C531B18(v50 + v129[7], v111, &qword_255289508);
  sub_21C531B18(v52 + v85[7], v59, &qword_255289508);
  v87 = v69 + *(int *)(v108 + 48);
  sub_21C531B18(v86, v69, &qword_255289508);
  sub_21C531B18(v59, v87, &qword_255289508);
  v88 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v109 + 48);
  v89 = v110;
  if (v88(v69, 1, v110) == 1)
  {
    sub_21C524980(v59, &qword_255289508);
    sub_21C524980(v86, &qword_255289508);
    if (v88(v87, 1, v89) == 1)
    {
      sub_21C524980(v69, &qword_255289508);
      goto LABEL_32;
    }
    goto LABEL_41;
  }
  v99 = v106;
  sub_21C531B18(v69, (uint64_t)v106, &qword_255289508);
  if (v88(v87, 1, v89) == 1)
  {
    sub_21C524980(v59, &qword_255289508);
    sub_21C524980(v111, &qword_255289508);
    sub_21C52A88C((uint64_t)v99, type metadata accessor for MapCompassConfig);
LABEL_41:
    v46 = &qword_25528B2A8;
    v47 = v69;
    goto LABEL_42;
  }
  v101 = v105;
  sub_21C52AAD4(v87, (uint64_t)v105, type metadata accessor for MapCompassConfig);
  v102 = v111;
  if (*v99 != *v101 || (sub_21C5E2E54() & 1) == 0)
  {
    sub_21C52A88C((uint64_t)v101, type metadata accessor for MapCompassConfig);
    sub_21C524980(v59, &qword_255289508);
    sub_21C524980(v102, &qword_255289508);
    sub_21C52A88C((uint64_t)v99, type metadata accessor for MapCompassConfig);
    v47 = v69;
    goto LABEL_24;
  }
  v103 = sub_21C5E2E6C();
  sub_21C52A88C((uint64_t)v101, type metadata accessor for MapCompassConfig);
  sub_21C524980(v59, &qword_255289508);
  sub_21C524980(v102, &qword_255289508);
  v85 = v129;
  sub_21C52A88C((uint64_t)v99, type metadata accessor for MapCompassConfig);
  sub_21C524980(v69, &qword_255289508);
  if ((v103 & 1) == 0)
    return 0;
LABEL_32:
  v90 = v85[8];
  v91 = *(_WORD *)(v50 + v90);
  v92 = *(unsigned __int16 *)(v52 + v90);
  if (v91 == 2)
  {
    if (v92 != 2)
      return 0;
  }
  else if (v92 == 2 || ((((v91 & 1) == 0) ^ v92) & 1) == 0 || (sub_21C5E2E54() & 1) == 0)
  {
    return 0;
  }
  v93 = v85[9];
  v94 = *(_WORD *)(v50 + v93);
  v95 = *(unsigned __int16 *)(v52 + v93);
  if (v94 == 2)
  {
    if (v95 != 2)
      return 0;
  }
  else if (v95 == 2 || ((((v94 & 1) == 0) ^ v95) & 1) == 0 || (sub_21C5E2E54() & 1) == 0)
  {
    return 0;
  }
  v96 = v85[10];
  v97 = *(_WORD *)(v50 + v96);
  v98 = *(unsigned __int16 *)(v52 + v96);
  if (v97 != 2)
    return v98 != 2 && ((((v97 & 1) == 0) ^ v98) & 1) != 0 && (sub_21C5E2E54() & 1) != 0;
  return v98 == 2;
}

uint64_t sub_21C5DE3A8(uint64_t a1, void (*a2)(__n128))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  uint64_t result;
  uint64_t v46;
  void (*v47)(__n128);
  uint64_t v48;
  char *v49;
  char *v50;

  v47 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289508);
  MEMORY[0x24BDAC7A8](v3);
  v49 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v50 = (char *)&v47 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289500);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v48 = (uint64_t)&v47 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289518);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v47 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_255289510);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v47 - v22;
  v24 = (int *)type metadata accessor for MapControlsConfig();
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47(v25);
  sub_21C531B18((uint64_t)v27, (uint64_t)v20, &qword_255289510);
  v28 = type metadata accessor for MapPitchToggleConfig(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v20, 1, v28) == 1)
  {
    sub_21C531B18(a1, (uint64_t)v23, &qword_255289510);
    sub_21C524980((uint64_t)v20, &qword_255289510);
  }
  else
  {
    sub_21C52AAD4((uint64_t)v20, (uint64_t)v23, type metadata accessor for MapPitchToggleConfig);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v23, 0, 1, v28);
  }
  sub_21C58B624((uint64_t)v23, a1, &qword_255289510);
  sub_21C531B18((uint64_t)&v27[v24[5]], (uint64_t)v14, &qword_255289518);
  v30 = type metadata accessor for MapScaleViewConfig(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v14, 1, v30);
  v33 = (uint64_t)v49;
  if (v32 == 1)
  {
    sub_21C531B18(a1 + v24[5], (uint64_t)v17, &qword_255289518);
    sub_21C524980((uint64_t)v14, &qword_255289518);
  }
  else
  {
    sub_21C52AAD4((uint64_t)v14, (uint64_t)v17, type metadata accessor for MapScaleViewConfig);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v17, 0, 1, v30);
  }
  v34 = (uint64_t)v50;
  sub_21C58B624((uint64_t)v17, a1 + v24[5], &qword_255289518);
  sub_21C531B18((uint64_t)&v27[v24[6]], (uint64_t)v9, &qword_255289500);
  v35 = type metadata accessor for MapUserLocationButtonConfig(0);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v9, 1, v35) == 1)
  {
    v37 = v48;
    sub_21C531B18(a1 + v24[6], v48, &qword_255289500);
    sub_21C524980((uint64_t)v9, &qword_255289500);
  }
  else
  {
    v37 = v48;
    sub_21C52AAD4((uint64_t)v9, v48, type metadata accessor for MapUserLocationButtonConfig);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v35);
  }
  sub_21C58B624(v37, a1 + v24[6], &qword_255289500);
  sub_21C531B18((uint64_t)&v27[v24[7]], v33, &qword_255289508);
  v38 = type metadata accessor for MapCompassConfig(0);
  v39 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v33, 1, v38) == 1)
  {
    sub_21C531B18(a1 + v24[7], v34, &qword_255289508);
    sub_21C524980(v33, &qword_255289508);
  }
  else
  {
    sub_21C52AAD4(v33, v34, type metadata accessor for MapCompassConfig);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v34, 0, 1, v38);
  }
  sub_21C58B624(v34, a1 + v24[7], &qword_255289508);
  v40 = v24[8];
  v41 = *(_WORD *)&v27[v40];
  if (v41 == 2)
    v41 = *(_WORD *)(a1 + v40);
  *(_WORD *)(a1 + v40) = v41;
  v42 = v24[9];
  v43 = *(_WORD *)&v27[v42];
  if (v43 == 2)
    v43 = *(_WORD *)(a1 + v42);
  *(_WORD *)(a1 + v42) = v43;
  v44 = *(_WORD *)&v27[v24[10]];
  result = sub_21C52A88C((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for MapControlsConfig);
  v46 = v24[10];
  if (v44 == 2)
    v44 = *(_WORD *)(a1 + v46);
  *(_WORD *)(a1 + v46) = v44;
  return result;
}

uint64_t sub_21C5DE8D0(char *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  void (*v13)(char *, uint64_t);
  char v15;
  int v16;
  uint64_t v17;

  v4 = sub_21C5E31A8();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEDCA8];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v17 - v10;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)&v17 - v10, a1, v4);
  sub_21C5E3184();
  sub_21C521E50(&qword_25528B248, v5, MEMORY[0x24BDEDCB8]);
  v12 = sub_21C5E3934();
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, v4);
  if ((v12 & 1) != 0)
  {
    v13(a1, v4);
    v13(v11, v4);
    return 2;
  }
  else
  {
    sub_21C5E316C();
    v15 = sub_21C5E3934();
    v13(v9, v4);
    if ((v15 & 1) != 0)
    {
      v13(a1, v4);
      v13(v11, v4);
      return 1;
    }
    else
    {
      sub_21C5E3190();
      v16 = sub_21C5E3934();
      v13(a1, v4);
      v13(v9, v4);
      v13(v11, v4);
      return (v16 | a2) & 1;
    }
  }
}

unint64_t sub_21C5DEA88()
{
  unint64_t result;

  result = qword_25528B270;
  if (!qword_25528B270)
  {
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDED590], MEMORY[0x24BDED5B8]);
    atomic_store(result, (unint64_t *)&qword_25528B270);
  }
  return result;
}

uint64_t sub_21C5DEACC()
{
  sub_21C5DEE38();
  return sub_21C5E3298();
}

uint64_t sub_21C5DEB0C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_21C5D80C8(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_21C5DEB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for _MapControlsModifier(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  v9 = type metadata accessor for MapPitchToggleConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v10 = v8 + *(int *)(v9 + 24);
    v11 = sub_21C5E31A8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
    v12 = v8 + *(int *)(v9 + 28);
    v13 = sub_21C5E2E78();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    swift_release();
  }
  v14 = (int *)type metadata accessor for MapControlsConfig();
  v15 = v8 + v14[5];
  v16 = type metadata accessor for MapScaleViewConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
  {
    v17 = v15 + *(int *)(v16 + 28);
    v18 = sub_21C5E2E78();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  }
  v19 = v8 + v14[6];
  v20 = type metadata accessor for MapUserLocationButtonConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20))
  {
    v21 = v19 + *(int *)(v20 + 24);
    v22 = sub_21C5E31A8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
    v23 = v19 + *(int *)(v20 + 28);
    v24 = sub_21C5E2E78();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
    swift_release();
  }
  v25 = v8 + v14[7];
  v26 = type metadata accessor for MapCompassConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v25, 1, v26))
  {
    v27 = v25 + *(int *)(v26 + 24);
    v28 = sub_21C5E2E78();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528B288);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + *(int *)(v6 + 36), v5);
  return swift_deallocObject();
}

uint64_t sub_21C5DED9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for _MapControlsModifier(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return sub_21C5D84C8(a1);
}

unint64_t sub_21C5DEDF4()
{
  unint64_t result;

  result = qword_25528B290;
  if (!qword_25528B290)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EC558, &type metadata for MapControlsConfigPref);
    atomic_store(result, (unint64_t *)&qword_25528B290);
  }
  return result;
}

unint64_t sub_21C5DEE38()
{
  unint64_t result;

  result = qword_25528B2A0;
  if (!qword_25528B2A0)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EC740, &type metadata for DefaultInternalMapControlsKey);
    atomic_store(result, (unint64_t *)&qword_25528B2A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultIsInMapControlsKey()
{
  return &type metadata for DefaultIsInMapControlsKey;
}

ValueMetadata *type metadata accessor for DefaultMapControlsVisibilityKey()
{
  return &type metadata for DefaultMapControlsVisibilityKey;
}

ValueMetadata *type metadata accessor for DefaultInternalMapControlsKey()
{
  return &type metadata for DefaultInternalMapControlsKey;
}

uint64_t sub_21C5DEEAC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];

  v4 = a1[1];
  v5 = type metadata accessor for _MapControlsModifier(255, *a1, v4, a4);
  MEMORY[0x22077F9A0](&unk_21C5EC5C8, v5);
  v6 = sub_21C5E3400();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B250);
  v7 = sub_21C5E30A0();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B258);
  v8 = sub_21C5E30A0();
  v9 = sub_21C5E30A0();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B260);
  v10 = sub_21C5E30A0();
  v11 = MEMORY[0x24BDF1028];
  v20[0] = v4;
  v20[1] = sub_21C5616A0(&qword_25528B268, &qword_25528B258, MEMORY[0x24BDF1028]);
  v12 = MEMORY[0x24BDED308];
  v19[0] = MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v8, v20);
  v19[1] = sub_21C5DEA88();
  v18[0] = MEMORY[0x22077F9A0](v12, v9, v19);
  v18[1] = sub_21C5616A0(&qword_25528B278, &qword_25528B260, MEMORY[0x24BDF09B0]);
  MEMORY[0x22077F9A0](v12, v10, v18);
  v13 = sub_21C5E33DC();
  v14 = sub_21C5E30A0();
  v17[0] = MEMORY[0x22077F9A0](MEMORY[0x24BDEFB78], v6);
  v17[1] = sub_21C5616A0(&qword_25528B280, &qword_25528B250, v11);
  v16[0] = MEMORY[0x22077F9A0](v12, v7, v17);
  v16[1] = MEMORY[0x22077F9A0](MEMORY[0x24BDEF370], v13);
  return MEMORY[0x22077F9A0](v12, v14, v16);
}

unint64_t sub_21C5DF0BC()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_25528B2C8;
  if (!qword_25528B2C8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B2D0);
    v2 = sub_21C532128();
    result = MEMORY[0x22077F9A0](MEMORY[0x24BEE4AB8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_25528B2C8);
  }
  return result;
}

void CLLocationCoordinate2D.animatableData.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

__n128 (*CLLocationCoordinate2D.animatableData.modify(uint64_t a1))(__n128 *a1)
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return sub_21C5DF148;
}

__n128 sub_21C5DF148(__n128 *a1)
{
  __n128 result;

  result = *a1;
  *(__n128 *)a1[1].n128_u64[0] = *a1;
  return result;
}

unint64_t sub_21C5DF15C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25528B2D8;
  if (!qword_25528B2D8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B2E0);
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDEC5B8], v1);
    atomic_store(result, (unint64_t *)&qword_25528B2D8);
  }
  return result;
}

__n128 sub_21C5DF1A8@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 sub_21C5DF1B4(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

__n128 (*sub_21C5DF1C0(uint64_t a1))(__n128 *)
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return sub_21C5DF1F8;
}

__n128 sub_21C5DF1E0@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_21C5DF1EC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

id sub_21C5DF1FC()
{
  char *v0;
  void *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v1 = *(void **)&v0[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_hostView];
  objc_msgSend(v1, sel_layoutSubviews);
  objc_msgSend(v1, sel_sizeThatFits_, INFINITY, INFINITY);
  v3 = v2;
  v5 = v4;
  objc_msgSend(v0, sel_setBounds_, 0.0, 0.0, v2, v4);
  objc_msgSend(v1, sel_setFrame_, 0.0, 0.0, v3, v5);
  v6 = *(double *)&v0[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_contentAnchorPoint];
  v7 = *(double *)&v0[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_contentAnchorPoint + 8];
  objc_msgSend(v0, sel_frame);
  objc_msgSend(v0, sel_setCenterOffset_, v8 * 0.5 - v6 * v8, v9 * 0.5 - v7 * v9);
  v10 = *(double *)&v0[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_accessoryAnchorPoint];
  v11 = *(double *)&v0[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_accessoryAnchorPoint + 8];
  objc_msgSend(v0, sel_frame);
  return objc_msgSend(v0, sel_setAccessoryOffset_, -(v12 * 0.5 - v10 * v12), -(v13 * 0.5 - v11 * v13));
}

id sub_21C5DF38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  objc_super v19;
  uint64_t v20;

  *(_QWORD *)&v3[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_wrappedView] = 0;
  v6 = &v3[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_contentAnchorPoint];
  v7 = v3;
  sub_21C5E3880();
  *(_QWORD *)v6 = v8;
  *((_QWORD *)v6 + 1) = v9;
  v10 = &v7[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_accessoryAnchorPoint];
  sub_21C5E3880();
  *(_QWORD *)v10 = v11;
  *((_QWORD *)v10 + 1) = v12;
  v20 = sub_21C5E37B4();
  v13 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_25528B308));
  v14 = (void *)sub_21C5E3010();
  sub_21C5E3028();
  *(_QWORD *)&v7[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_hostView] = v14;
  v15 = v14;

  if (a3)
  {
    v16 = (void *)sub_21C5E3940();
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 0;
  }
  v19.receiver = v7;
  v19.super_class = (Class)type metadata accessor for SwiftUIAnnotationView();
  v17 = objc_msgSendSuper2(&v19, sel_initWithAnnotation_reuseIdentifier_, a1, v16);

  swift_unknownObjectRelease();
  return v17;
}

id sub_21C5DF644()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SwiftUIAnnotationView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SwiftUIAnnotationView()
{
  return objc_opt_self();
}

id sub_21C5DF6CC(uint64_t a1)
{
  char *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = v1;
  v3 = OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_wrappedView;
  *(_QWORD *)&v1[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_wrappedView] = a1;
  swift_retain();
  swift_release();
  if (!*(_QWORD *)&v1[v3])
    return objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_hostView], sel_removeFromSuperview);
  v4 = *(void **)&v1[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_hostView];
  swift_retain();
  sub_21C5E301C();
  v5 = objc_msgSend(v4, sel_superview);

  if (!v5)
    objc_msgSend(v2, sel_addSubview_, v4);
  sub_21C5DF1FC();
  return (id)swift_release();
}

uint64_t View.mapScope(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v6[24];
  _QWORD v7[2];
  char v8;
  _QWORD v9[2];
  char v10;

  v7[0] = 0;
  v7[1] = 0;
  v8 = 1;
  v9[0] = a1;
  v9[1] = swift_getKeyPath();
  v10 = 0;
  sub_21C531B18((uint64_t)v7, (uint64_t)v6, &qword_25528B310);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528B310);
  sub_21C5E3778();
  sub_21C524980((uint64_t)v7, &qword_25528B310);
  MEMORY[0x22077EC20](v9, a2, &type metadata for MapScopeModifier, a3);
  return sub_21C5DFA60((uint64_t)v9);
}

uint64_t sub_21C5DF878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t KeyPath;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (**v17)(uint64_t *);
  _BYTE v20[56];

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528B320);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  KeyPath = swift_getKeyPath();
  v10 = *(_QWORD *)(v2 + 8);
  v11 = *(_BYTE *)(v3 + 16);
  sub_21C52EF74(v10, v11);
  v12 = sub_21C52F61C(v10, v11);
  sub_21C531AC8(v10, v11);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528B328);
  sub_21C5E3784();
  v13 = sub_21C5DFF2C((uint64_t)v20, v12);
  swift_bridgeObjectRelease();
  sub_21C524980((uint64_t)v20, &qword_25528B310);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528B330);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v8, a1, v14);
  v15 = (uint64_t *)&v8[*(int *)(v6 + 36)];
  *v15 = KeyPath;
  v15[1] = v13;
  sub_21C5E0358(v3, (uint64_t)v20);
  v16 = swift_allocObject();
  sub_21C5E03CC((uint64_t)v20, v16 + 16);
  sub_21C531B18((uint64_t)v8, a2, &qword_25528B320);
  v17 = (uint64_t (**)(uint64_t *))(a2
                                           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_25528B338)
                                                    + 36));
  *v17 = sub_21C5E0400;
  v17[1] = (uint64_t (*)(uint64_t *))v16;
  return sub_21C524980((uint64_t)v8, &qword_25528B320);
}

uint64_t sub_21C5DFA20()
{
  uint64_t v1;

  sub_21C531AD4();
  sub_21C5E3298();
  return v1;
}

uint64_t sub_21C5DFA60(uint64_t a1)
{
  destroy for MapScopeModifier(a1);
  return a1;
}

uint64_t sub_21C5DFA8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = sub_21C5E30A0();
  v4[0] = v1;
  v4[1] = sub_21C5DFAE0();
  return MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v2, v4);
}

unint64_t sub_21C5DFAE0()
{
  unint64_t result;

  result = qword_25528B318;
  if (!qword_25528B318)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EC89C, &type metadata for MapScopeModifier);
    atomic_store(result, (unint64_t *)&qword_25528B318);
  }
  return result;
}

uint64_t destroy for MapScopeModifier(uint64_t a1)
{
  sub_21C531AC8(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    swift_unknownObjectWeakDestroy();
  return swift_release();
}

uint64_t initializeWithCopy for MapScopeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 16);
  sub_21C52EF74(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_unknownObjectWeakCopyInit();
    *(_BYTE *)(a1 + 40) = 0;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MapScopeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;
  char v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_21C52EF74(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_21C531AC8(v6, v7);
  v8 = (__int128 *)(a1 + 24);
  v9 = (__int128 *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      v10 = *v9;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *v8 = v10;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_unknownObjectWeakCopyInit();
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    sub_21C524980(a1 + 24, &qword_255288D98);
    v11 = *(_BYTE *)(a2 + 40);
    *v8 = *v9;
    *(_BYTE *)(a1 + 40) = v11;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_unknownObjectWeakCopyAssign();
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for MapScopeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_unknownObjectWeakTakeInit();
    *(_BYTE *)(a1 + 40) = 0;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for MapScopeModifier(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_21C531AC8(v5, v6);
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_unknownObjectWeakTakeAssign();
      goto LABEL_8;
    }
    sub_21C524980(a1 + 24, &qword_255288D98);
    goto LABEL_6;
  }
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectWeakTakeInit();
  *(_BYTE *)(a1 + 40) = 0;
LABEL_8:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MapScopeModifier(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapScopeModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MapScopeModifier()
{
  return &type metadata for MapScopeModifier;
}

ValueMetadata *type metadata accessor for MapViewReference()
{
  return &type metadata for MapViewReference;
}

ValueMetadata *type metadata accessor for MapScopeRegistry()
{
  return &type metadata for MapScopeRegistry;
}

uint64_t sub_21C5DFF2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  char v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  BOOL v10;
  _BYTE v11[16];
  _BYTE v12[16];
  uint64_t v13;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;

  sub_21C531B18(a1, (uint64_t)&v13, &qword_25528B310);
  if ((v14[8] & 1) != 0)
  {
    sub_21C524980((uint64_t)&v13, &qword_25528B310);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = v13;
    v15 = v13;
    sub_21C531764((uint64_t)v14, (uint64_t)&v16);
    v13 = v3;
    sub_21C5317D4((uint64_t)&v16, (uint64_t)v14);
    sub_21C531764((uint64_t)v14, (uint64_t)v12);
    v12[8] = 0;
    sub_21C531B18((uint64_t)v12, (uint64_t)v11, &qword_255288140);
    if ((v11[8] & 1) != 0)
    {
      swift_bridgeObjectRetain();
      sub_21C524980((uint64_t)v11, &qword_255288140);
      swift_bridgeObjectRetain();
      v4 = sub_21C530EAC(v3);
      v6 = v5;
      swift_bridgeObjectRelease();
      if ((v6 & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_21C55C08C();
        sub_21C531764(*(_QWORD *)(a2 + 56) + 8 * v4, (uint64_t)&v9);
        sub_21C55BD14(v4, a2);
        swift_bridgeObjectRelease();
      }
      else
      {
        v9 = 0;
      }
      v10 = (v6 & 1) == 0;
      sub_21C524980((uint64_t)&v9, &qword_255288140);
    }
    else
    {
      sub_21C531764((uint64_t)v11, (uint64_t)&v9);
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_21C55D5C8((uint64_t)&v9, v3, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
    }
    sub_21C524980((uint64_t)v12, &qword_255288140);
    sub_21C524980((uint64_t)&v15, &qword_255288D98);
  }
  return a2;
}

uint64_t sub_21C5E00F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  _BYTE v7[24];
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[8];

  v2 = *a1;
  if (*(_QWORD *)(*a1 + 16) && (v3 = *a2, v4 = sub_21C530EAC(*a2), (v5 & 1) != 0))
  {
    sub_21C5317D4(*(_QWORD *)(v2 + 56) + 8 * v4, (uint64_t)&v8);
    sub_21C531764((uint64_t)&v8, (uint64_t)v11);
    v8 = v3;
    sub_21C5317D4((uint64_t)v11, (uint64_t)&v9);
    v10 = 0;
    sub_21C531B18((uint64_t)&v8, (uint64_t)v7, &qword_25528B310);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25528B328);
    sub_21C5E3790();
    sub_21C524980((uint64_t)&v8, &qword_25528B310);
    return sub_21C5317A0((uint64_t)v11);
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 1;
    sub_21C531B18((uint64_t)&v8, (uint64_t)v7, &qword_25528B310);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25528B328);
    sub_21C5E3790();
    return sub_21C524980((uint64_t)&v8, &qword_25528B310);
  }
}

unint64_t sub_21C5E020C()
{
  unint64_t result;

  result = sub_21C53E68C(MEMORY[0x24BEE4AF8]);
  qword_255293A88 = result;
  return result;
}

uint64_t sub_21C5E0234()
{
  sub_21C5E053C();
  return sub_21C5E2FD4();
}

uint64_t sub_21C5E0284@<X0>(_QWORD *a1@<X8>)
{
  if (qword_255287908 != -1)
    swift_once();
  *a1 = qword_255293A88;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C5E02D8()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528B340);
  return AGCompareValues();
}

uint64_t sub_21C5E0348()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21C5E0358(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MapScopeModifier(a2, a1);
  return a2;
}

uint64_t sub_21C5E038C()
{
  uint64_t v0;

  sub_21C531AC8(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  if ((*(_BYTE *)(v0 + 56) & 1) == 0)
    swift_unknownObjectWeakDestroy();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21C5E03CC(uint64_t a1, uint64_t a2)
{
  initializeWithTake for MapScopeModifier(a2, a1);
  return a2;
}

uint64_t sub_21C5E0400(uint64_t *a1)
{
  uint64_t v1;

  return sub_21C5E00F4(a1, (uint64_t *)(v1 + 16));
}

ValueMetadata *type metadata accessor for MapScopeRegistryKey()
{
  return &type metadata for MapScopeRegistryKey;
}

unint64_t sub_21C5E041C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25528B348;
  if (!qword_25528B348)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B338);
    v2[0] = sub_21C5E04A0();
    v2[1] = sub_21C5616A0(&qword_25528B370, &qword_25528B378, MEMORY[0x24BDF09B0]);
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_25528B348);
  }
  return result;
}

unint64_t sub_21C5E04A0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25528B350;
  if (!qword_25528B350)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B320);
    v2[0] = sub_21C5616A0(&qword_25528B358, &qword_25528B330, MEMORY[0x24BDEFB78]);
    v2[1] = sub_21C5616A0(&qword_25528B360, &qword_25528B368, MEMORY[0x24BDF1028]);
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_25528B350);
  }
  return result;
}

unint64_t sub_21C5E053C()
{
  unint64_t result;

  result = qword_25528B380;
  if (!qword_25528B380)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5EC874, &type metadata for MapScopeRegistry);
    atomic_store(result, (unint64_t *)&qword_25528B380);
  }
  return result;
}

uint64_t sub_21C5E0580@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = sub_21C5317D4((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v3;
  return result;
}

unint64_t sub_21C5E05AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  _BOOL8 v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38[8];
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49[8];

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v42 = a1;
  v43 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v44 = v8;
  v45 = 0;
  v46 = v11 & v9;
  v47 = a2;
  v48 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_21C5E08FC((uint64_t)&v39);
  if ((v41 & 1) != 0)
    goto LABEL_16;
  v12 = v39;
  sub_21C531764((uint64_t)&v40, (uint64_t)v49);
  v13 = *a5;
  result = sub_21C530EAC(v12);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v15 & 1) == 0;
  v18 = __OFADD__(v16, v17);
  v19 = v16 + v17;
  if (v18)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v20 = v15;
  if (*(_QWORD *)(v13 + 24) < v19)
  {
    sub_21C559B18(v19, a4 & 1);
    result = sub_21C530EAC(v12);
    if ((v20 & 1) == (v21 & 1))
      goto LABEL_10;
LABEL_8:
    result = sub_21C5E3DF0();
    __break(1u);
  }
  if ((a4 & 1) == 0)
  {
    v23 = result;
    sub_21C55C08C();
    result = v23;
    if ((v20 & 1) != 0)
      goto LABEL_11;
    goto LABEL_13;
  }
LABEL_10:
  if ((v20 & 1) != 0)
  {
LABEL_11:
    v22 = 8 * result;
    sub_21C5317D4(*(_QWORD *)(*a5 + 56) + 8 * result, (uint64_t)&v37);
    sub_21C5317D4((uint64_t)&v37, (uint64_t)v38);
    sub_21C5317A0((uint64_t)&v37);
    sub_21C5317A0((uint64_t)v49);
    sub_21C561C1C((uint64_t)v38, *(_QWORD *)(*a5 + 56) + v22);
LABEL_15:
    sub_21C5E08FC((uint64_t)&v39);
    if ((v41 & 1) != 0)
    {
LABEL_16:
      swift_release();
      swift_bridgeObjectRelease();
      sub_21C52A884();
      return swift_release();
    }
    v20 = 1;
    while (1)
    {
      v12 = v39;
      sub_21C531764((uint64_t)&v40, (uint64_t)v49);
      v28 = *a5;
      result = sub_21C530EAC(v12);
      v30 = *(_QWORD *)(v28 + 16);
      v31 = (v29 & 1) == 0;
      v18 = __OFADD__(v30, v31);
      v32 = v30 + v31;
      if (v18)
        goto LABEL_26;
      a4 = v29;
      if (*(_QWORD *)(v28 + 24) < v32)
      {
        sub_21C559B18(v32, 1);
        result = sub_21C530EAC(v12);
        if ((a4 & 1) != (v33 & 1))
          goto LABEL_8;
      }
      if ((a4 & 1) != 0)
      {
        v27 = 8 * result;
        sub_21C5317D4(*(_QWORD *)(*a5 + 56) + 8 * result, (uint64_t)&v37);
        sub_21C5317D4((uint64_t)&v37, (uint64_t)v38);
        sub_21C5317A0((uint64_t)&v37);
        sub_21C5317A0((uint64_t)v49);
        sub_21C561C1C((uint64_t)v38, *(_QWORD *)(*a5 + 56) + v27);
      }
      else
      {
        v34 = (_QWORD *)*a5;
        *(_QWORD *)(*a5 + 8 * (result >> 6) + 64) |= 1 << result;
        *(_QWORD *)(v34[6] + 8 * result) = v12;
        result = sub_21C531764((uint64_t)v49, v34[7] + 8 * result);
        v35 = v34[2];
        v18 = __OFADD__(v35, 1);
        v36 = v35 + 1;
        if (v18)
          goto LABEL_27;
        v34[2] = v36;
      }
      sub_21C5E08FC((uint64_t)&v39);
      if ((v41 & 1) != 0)
        goto LABEL_16;
    }
  }
LABEL_13:
  v24 = (_QWORD *)*a5;
  *(_QWORD *)(*a5 + 8 * (result >> 6) + 64) |= 1 << result;
  *(_QWORD *)(v24[6] + 8 * result) = v12;
  result = sub_21C531764((uint64_t)v49, v24[7] + 8 * result);
  v25 = v24[2];
  v18 = __OFADD__(v25, 1);
  v26 = v25 + 1;
  if (!v18)
  {
    v24[2] = v26;
    goto LABEL_15;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_21C5E08FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void (*v17)(_BYTE *);
  uint64_t result;
  char v19;
  _BYTE v20[16];
  _BYTE v21[16];
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (!v8)
  {
    v12 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      return result;
    }
    v13 = (unint64_t)(v6 + 64) >> 6;
    if (v12 < v13)
    {
      v14 = *(_QWORD *)(v4 + 8 * v12);
      if (v14)
      {
LABEL_7:
        v9 = (v14 - 1) & v14;
        v10 = __clz(__rbit64(v14)) + (v12 << 6);
        v7 = v12;
        goto LABEL_3;
      }
      v15 = v5 + 2;
      v7 = v5 + 1;
      if (v5 + 2 < v13)
      {
        v14 = *(_QWORD *)(v4 + 8 * v15);
        if (v14)
        {
LABEL_10:
          v12 = v15;
          goto LABEL_7;
        }
        v7 = v5 + 2;
        if (v5 + 3 < v13)
        {
          v14 = *(_QWORD *)(v4 + 8 * (v5 + 3));
          if (v14)
          {
            v12 = v5 + 3;
            goto LABEL_7;
          }
          v15 = v5 + 4;
          v7 = v5 + 3;
          if (v5 + 4 < v13)
          {
            v14 = *(_QWORD *)(v4 + 8 * v15);
            if (v14)
              goto LABEL_10;
            v12 = v5 + 5;
            v7 = v5 + 4;
            if (v5 + 5 < v13)
            {
              v14 = *(_QWORD *)(v4 + 8 * v12);
              if (v14)
                goto LABEL_7;
              v7 = v13 - 1;
              v16 = v5 + 6;
              while (v13 != v16)
              {
                v14 = *(_QWORD *)(v4 + 8 * v16++);
                if (v14)
                {
                  v12 = v16 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v9 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 1;
    goto LABEL_23;
  }
  v9 = (v8 - 1) & v8;
  v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
  v11 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10);
  sub_21C5317D4(*(_QWORD *)(v3 + 56) + 8 * v10, (uint64_t)&v24);
  v23 = v11;
  v25 = 0;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v17 = (void (*)(_BYTE *))v1[5];
  result = sub_21C52DB08((uint64_t)&v23, (uint64_t)v21, &qword_25528B388);
  v19 = v22;
  if ((v22 & 1) != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    sub_21C52DB08((uint64_t)v21, (uint64_t)v20, &qword_25528B390);
    v17(v20);
    result = sub_21C524980((uint64_t)v20, &qword_25528B390);
  }
  *(_BYTE *)(a1 + 16) = v19;
  return result;
}

uint64_t sub_21C5E0AD4(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;

  a2(&v6);
  v3 = v6;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *a1;
  *a1 = 0x8000000000000000;
  sub_21C5E05AC(v3, (uint64_t)sub_21C5E0580, 0, isUniquelyReferenced_nonNull_native, &v6);
  *a1 = v6;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

double sub_21C5E0B78@<D0>(double *a1@<X8>)
{
  double result;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;

  sub_21C59A014();
  sub_21C5E3298();
  result = v5;
  *(_QWORD *)a1 = v3;
  *((_QWORD *)a1 + 1) = v4;
  a1[2] = v5;
  *((_QWORD *)a1 + 3) = v6;
  *((_QWORD *)a1 + 4) = v7;
  return result;
}

uint64_t sub_21C5E0BD8()
{
  sub_21C59A058();
  return sub_21C5E3298();
}

uint64_t sub_21C5E0C0C()
{
  sub_21C59A09C();
  return sub_21C5E3298();
}

uint64_t sub_21C5E0C40()
{
  uint64_t v1;

  sub_21C59A120();
  sub_21C5E3298();
  return v1;
}

double sub_21C5E0C78()
{
  double result;
  __int128 v1;
  __int128 v2;
  uint64_t v3;

  sub_21C5E2E9C();
  result = *(double *)&v1;
  xmmword_25528B398 = v1;
  unk_25528B3A8 = v2;
  qword_25528B3B8 = v3;
  return result;
}

uint64_t sub_21C5E0CD0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (qword_255287910 != -1)
    swift_once();
  v3 = *((_QWORD *)&xmmword_25528B398 + 1);
  v2 = unk_25528B3A8;
  v4 = qword_25528B3B0;
  v5 = qword_25528B3B8;
  *a1 = xmmword_25528B398;
  a1[1] = v3;
  a1[2] = v2;
  a1[3] = v4;
  a1[4] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C5E0D3C()
{
  sub_21C5E1968();
  return sub_21C5E2FD4();
}

uint64_t sub_21C5E0D8C()
{
  uint64_t result;

  result = sub_21C5E3724();
  qword_25528B3D8 = MEMORY[0x24BDF3E48];
  unk_25528B3E0 = MEMORY[0x24BDF3E18];
  qword_25528B3C0 = result;
  return result;
}

uint64_t sub_21C5E0DC0@<X0>(uint64_t a1@<X8>)
{
  if (qword_255287918 != -1)
    swift_once();
  return sub_21C560FD4((uint64_t)&qword_25528B3C0, a1);
}

double sub_21C5E0E10()
{
  double result;

  qword_25528B408 = 0;
  result = 0.0;
  xmmword_25528B3E8 = 0u;
  unk_25528B3F8 = 0u;
  return result;
}

uint64_t sub_21C5E0E28@<X0>(uint64_t a1@<X8>)
{
  if (qword_255287920 != -1)
    swift_once();
  return sub_21C5E18E0((uint64_t)&xmmword_25528B3E8, a1);
}

id sub_21C5E0E78()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel__defaultOverlayLevel);
  qword_25528B410 = (uint64_t)result;
  return result;
}

uint64_t sub_21C5E0EA8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  if (qword_255287928 != -1)
    result = swift_once();
  *a1 = qword_25528B410;
  return result;
}

uint64_t sub_21C5E0EF8()
{
  sub_21C5E19AC();
  return sub_21C5E2FD4();
}

uint64_t MapContent.stroke<A>(_:lineWidth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *KeyPath;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v17;
  _QWORD v19[2];
  _QWORD v20[2];
  _OWORD v21[2];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v19[1] = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B418);
  v11 = sub_21C5E30A0();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v19 - v13;
  KeyPath = (uint64_t *)swift_getKeyPath();
  *((_QWORD *)&v24 + 1) = a3;
  v25 = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v23);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_0, a1, a3);
  sub_21C5C1FBC(KeyPath, (uint64_t)&v23, a2);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v23);
  v17 = (uint64_t *)swift_getKeyPath();
  sub_21C5E2E9C();
  v21[0] = v23;
  v21[1] = v24;
  v22 = v25;
  v20[0] = a4;
  v20[1] = &off_255285F08;
  MEMORY[0x22077F9A0](&protocol conformance descriptor for <> ModifiedContent<A, B>, v11, v20);
  sub_21C5C1FBC(v17, (uint64_t)v21, v11);
  swift_release();
  sub_21C56C834((uint64_t)&v23);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_21C5E10F0()
{
  sub_21C59A058();
  return sub_21C5E3298();
}

uint64_t sub_21C5E112C(uint64_t a1)
{
  uint64_t v2;
  _BYTE v3[40];

  sub_21C560FD4(a1, (uint64_t)v3);
  sub_21C560FD4((uint64_t)v3, (uint64_t)&v2);
  sub_21C59A058();
  sub_21C5E32A4();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v3);
}

double sub_21C5E118C@<D0>(double *a1@<X8>)
{
  double result;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;

  sub_21C59A014();
  sub_21C5E3298();
  result = v5;
  *(_QWORD *)a1 = v3;
  *((_QWORD *)a1 + 1) = v4;
  a1[2] = v5;
  *((_QWORD *)a1 + 3) = v6;
  *((_QWORD *)a1 + 4) = v7;
  return result;
}

uint64_t sub_21C5E11F4()
{
  sub_21C59A014();
  swift_bridgeObjectRetain();
  return sub_21C5E32A4();
}

uint64_t MapContent.stroke(lineWidth:)(uint64_t a1)
{
  uint64_t *KeyPath;
  _OWORD v4[2];
  uint64_t v5;
  _OWORD v6[2];
  uint64_t v7;

  KeyPath = (uint64_t *)swift_getKeyPath();
  sub_21C5E2E9C();
  v4[0] = v6[0];
  v4[1] = v6[1];
  v5 = v7;
  sub_21C5C1FBC(KeyPath, (uint64_t)v4, a1);
  swift_release();
  return sub_21C56C834((uint64_t)v6);
}

uint64_t MapContent.stroke<A>(_:style:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *KeyPath;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v18;
  __int128 v19;
  _QWORD v21[2];
  _QWORD v22[2];
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v21[1] = a7;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B418);
  v13 = sub_21C5E30A0();
  v21[0] = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v21 - v14;
  KeyPath = (uint64_t *)swift_getKeyPath();
  *((_QWORD *)&v24 + 1) = a4;
  v25 = a6;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v23);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_0, a1, a4);
  sub_21C5C1FBC(KeyPath, (uint64_t)&v23, a3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v23);
  v18 = (uint64_t *)swift_getKeyPath();
  v19 = a2[1];
  v23 = *a2;
  v24 = v19;
  v25 = *((_QWORD *)a2 + 4);
  v22[0] = a5;
  v22[1] = &off_255285F08;
  MEMORY[0x22077F9A0](&protocol conformance descriptor for <> ModifiedContent<A, B>, v13, v22);
  sub_21C5C1FBC(v18, (uint64_t)&v23, v13);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v21[0] + 8))(v15, v13);
}

uint64_t MapContent.strokeStyle(style:)(uint64_t a1, uint64_t a2)
{
  uint64_t *KeyPath;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  KeyPath = (uint64_t *)swift_getKeyPath();
  v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  v8 = *(_QWORD *)(a1 + 32);
  sub_21C5C1FBC(KeyPath, (uint64_t)v7, a2);
  return swift_release();
}

uint64_t MapContent.foregroundStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *KeyPath;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v12[5];

  KeyPath = (uint64_t *)swift_getKeyPath();
  v12[3] = a3;
  v12[4] = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_0, a1, a3);
  sub_21C5C1FBC(KeyPath, (uint64_t)v12, a2);
  swift_release();
  return sub_21C59A0E0((uint64_t)v12);
}

uint64_t sub_21C5E15C0()
{
  sub_21C59A09C();
  return sub_21C5E3298();
}

uint64_t sub_21C5E15FC(uint64_t a1)
{
  uint64_t v2;
  _BYTE v3[40];

  sub_21C5E18E0(a1, (uint64_t)v3);
  sub_21C5E18E0((uint64_t)v3, (uint64_t)&v2);
  sub_21C59A09C();
  sub_21C5E32A4();
  return sub_21C59A0E0((uint64_t)v3);
}

uint64_t MapContent.mapOverlayLevel(level:)(uint64_t a1, uint64_t a2)
{
  uint64_t *KeyPath;
  uint64_t v6;

  KeyPath = (uint64_t *)swift_getKeyPath();
  v6 = a1;
  sub_21C5C1FBC(KeyPath, (uint64_t)&v6, a2);
  return swift_release();
}

uint64_t sub_21C5E16CC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  sub_21C59A120();
  result = sub_21C5E3298();
  *a1 = v3;
  return result;
}

uint64_t sub_21C5E1718()
{
  sub_21C59A120();
  return sub_21C5E32A4();
}

uint64_t sub_21C5E1760(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[2];

  v1 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B418);
  v2 = sub_21C5E30A0();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B420);
  v3 = sub_21C5E30A0();
  v6[0] = v1;
  v6[1] = &off_255285F08;
  v5[0] = MEMORY[0x22077F9A0](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v6);
  v5[1] = &off_255285F08;
  return MEMORY[0x22077F9A0](&protocol conformance descriptor for <> ModifiedContent<A, B>, v3, v5);
}

uint64_t sub_21C5E1808(uint64_t a1)
{
  return get_witness_table_15_MapKit_SwiftUI0A7ContentRzl0cD008ModifiedE0VyxAA022_EnvironmentKeyWritingaE8ModifierVyAC11StrokeStyleVGGAaBHpxAaBHD1__AjA01_aeJ0HPyHCHCTm(a1, &qword_25528B420);
}

uint64_t sub_21C5E1814(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B428);
  v2 = sub_21C5E30A0();
  v4[0] = v1;
  v4[1] = &off_255285F08;
  return MEMORY[0x22077F9A0](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

uint64_t sub_21C5E1878(uint64_t a1)
{
  return get_witness_table_15_MapKit_SwiftUI0A7ContentRzl0cD008ModifiedE0VyxAA022_EnvironmentKeyWritingaE8ModifierVyAC11StrokeStyleVGGAaBHpxAaBHD1__AjA01_aeJ0HPyHCHCTm(a1, &qword_25528B430);
}

uint64_t get_witness_table_15_MapKit_SwiftUI0A7ContentRzl0cD008ModifiedE0VyxAA022_EnvironmentKeyWritingaE8ModifierVyAC11StrokeStyleVGGAaBHpxAaBHD1__AjA01_aeJ0HPyHCHCTm(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v2 = *(_QWORD *)(a1 + 8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
  v3 = sub_21C5E30A0();
  v5[0] = v2;
  v5[1] = &off_255285F08;
  return MEMORY[0x22077F9A0](&protocol conformance descriptor for <> ModifiedContent<A, B>, v3, v5);
}

uint64_t sub_21C5E18E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552898D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for MapContentForegroundShapeStyleKey()
{
  return &type metadata for MapContentForegroundShapeStyleKey;
}

ValueMetadata *type metadata accessor for MapContentOverlayLevelKey()
{
  return &type metadata for MapContentOverlayLevelKey;
}

ValueMetadata *type metadata accessor for MapContentStrokeShapeStyleKey()
{
  return &type metadata for MapContentStrokeShapeStyleKey;
}

ValueMetadata *type metadata accessor for MapContentStrokeStyleKey()
{
  return &type metadata for MapContentStrokeStyleKey;
}

unint64_t sub_21C5E1968()
{
  unint64_t result;

  result = qword_25528B438;
  if (!qword_25528B438)
  {
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDEB7D8], MEMORY[0x24BDEB7D0]);
    atomic_store(result, (unint64_t *)&qword_25528B438);
  }
  return result;
}

unint64_t sub_21C5E19AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255287990;
  if (!qword_255287990)
  {
    type metadata accessor for MKOverlayLevel(255);
    result = MEMORY[0x22077F9A0](&unk_21C5E4D84, v1);
    atomic_store(result, (unint64_t *)&qword_255287990);
  }
  return result;
}

uint64_t View.lookAroundViewer(isPresented:initialScene:allowsNavigation:showsRoadLabels:pointsOfInterest:onDismiss:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5, char a6, uint64_t *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v11 = *a7;
  v10 = a7[1];
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a4;
  *(_BYTE *)(v12 + 24) = a5;
  *(_BYTE *)(v12 + 25) = a6;
  *(_QWORD *)(v12 + 32) = v11;
  *(_QWORD *)(v12 + 40) = v10;
  swift_bridgeObjectRetain();
  v13 = a4;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528B440);
  sub_21C5E1D88();
  sub_21C5E367C();
  return swift_release();
}

uint64_t sub_21C5E1AE8@<X0>(void *a1@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v30[4];
  int v31;
  uint64_t v32;

  v31 = a3;
  v32 = a6;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528B478);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v30[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for LookAroundPreview();
  MEMORY[0x24BDAC7A8](v13);
  v15 = &v30[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v16);
  v18 = &v30[-v17];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528B458);
  MEMORY[0x24BDAC7A8](v19);
  v21 = &v30[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = (uint64_t *)&v15[*(int *)(v13 + 36)];
  *v22 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_255288158);
  swift_storeEnumTagMultiPayload();
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = a1;
  v15[24] = a2;
  v15[25] = v31;
  *((_QWORD *)v15 + 4) = a4;
  *((_QWORD *)v15 + 5) = a5;
  *((_QWORD *)v15 + 6) = 0;
  sub_21C5E233C((uint64_t)v15, (uint64_t)v18);
  swift_bridgeObjectRetain();
  v23 = a1;
  swift_bridgeObjectRetain();
  LOBYTE(v22) = sub_21C5E35F8();
  sub_21C5E2380((uint64_t)v18, (uint64_t)v21);
  v21[*(int *)(v19 + 36)] = (_BYTE)v22;
  sub_21C5E23C4((uint64_t)v18);
  v24 = *MEMORY[0x24BDEB3F0];
  v25 = sub_21C5E2E60();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v26 + 104))(v12, v24, v25);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v12, 0, 1, v25);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528B440);
  v28 = v32;
  sub_21C531B18((uint64_t)v12, v32 + *(int *)(v27 + 36), &qword_25528B478);
  sub_21C531B18((uint64_t)v21, v28, &qword_25528B458);
  sub_21C524980((uint64_t)v12, &qword_25528B478);
  return sub_21C524980((uint64_t)v21, &qword_25528B458);
}

uint64_t sub_21C5E1D40()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21C5E1D74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C5E1AE8(*(void **)(v1 + 16), *(_BYTE *)(v1 + 24), *(unsigned __int8 *)(v1 + 25), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

unint64_t sub_21C5E1D88()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25528B448;
  if (!qword_25528B448)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B440);
    v2[0] = sub_21C5E1DF4();
    v2[1] = sub_21C5E1EA8();
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_25528B448);
  }
  return result;
}

unint64_t sub_21C5E1DF4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25528B450;
  if (!qword_25528B450)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B458);
    v2[0] = sub_21C5E1E60();
    v2[1] = MEMORY[0x24BDF0420];
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_25528B450);
  }
  return result;
}

unint64_t sub_21C5E1E60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25528B460;
  if (!qword_25528B460)
  {
    v1 = type metadata accessor for LookAroundPreview();
    result = MEMORY[0x22077F9A0](&protocol conformance descriptor for LookAroundPreview, v1);
    atomic_store(result, (unint64_t *)&qword_25528B460);
  }
  return result;
}

unint64_t sub_21C5E1EA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25528B468;
  if (!qword_25528B468)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B470);
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDF0B90], v1);
    atomic_store(result, (unint64_t *)&qword_25528B468);
  }
  return result;
}

uint64_t View.lookAroundViewer(isPresented:scene:allowsNavigation:showsRoadLabels:pointsOfInterest:onDismiss:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, char a7, char a8, uint64_t *a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v14 = *a9;
  v15 = a9[1];
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a4;
  *(_QWORD *)(v16 + 24) = a5;
  *(_QWORD *)(v16 + 32) = a6;
  *(_BYTE *)(v16 + 40) = a7;
  *(_BYTE *)(v16 + 41) = a8;
  *(_QWORD *)(v16 + 48) = v14;
  *(_QWORD *)(v16 + 56) = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v17 = a6;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25528B440);
  sub_21C5E1D88();
  sub_21C5E367C();
  return swift_release();
}

uint64_t sub_21C5E200C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a6;
  v36 = a8;
  v33 = a4;
  v34 = a5;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528B478);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LookAroundPreview();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v32 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528B458);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (uint64_t *)&v17[*(int *)(v15 + 36)];
  *v24 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_255288158);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)v17 = a1;
  *((_QWORD *)v17 + 1) = a2 | 0x8000000000000000;
  *((_QWORD *)v17 + 2) = a3;
  v17[24] = v33;
  v17[25] = v34;
  *((_QWORD *)v17 + 4) = v35;
  *((_QWORD *)v17 + 5) = a7;
  *((_QWORD *)v17 + 6) = 0;
  sub_21C5E233C((uint64_t)v17, (uint64_t)v20);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v25 = a3;
  swift_bridgeObjectRetain();
  LOBYTE(v17) = sub_21C5E35F8();
  sub_21C5E2380((uint64_t)v20, (uint64_t)v23);
  v23[*(int *)(v21 + 36)] = (char)v17;
  sub_21C5E23C4((uint64_t)v20);
  v26 = *MEMORY[0x24BDEB3F0];
  v27 = sub_21C5E2E60();
  v28 = *(_QWORD *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 104))(v14, v26, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v14, 0, 1, v27);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528B440);
  v30 = v36;
  sub_21C531B18((uint64_t)v14, v36 + *(int *)(v29 + 36), &qword_25528B478);
  sub_21C531B18((uint64_t)v23, v30, &qword_25528B458);
  sub_21C524980((uint64_t)v14, &qword_25528B478);
  return sub_21C524980((uint64_t)v23, &qword_25528B458);
}

uint64_t sub_21C5E2280()
{
  uint64_t v0;

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21C5E22C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C5E200C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(unsigned __int8 *)(v1 + 41), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), a1);
}

uint64_t sub_21C5E22DC()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B440);
  sub_21C5E1D88();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21C5E233C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LookAroundPreview();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21C5E2380(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LookAroundPreview();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21C5E23C4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LookAroundPreview();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t MapLocationCompass.init(scope:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t KeyPath;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a3 = a1;
  *(_BYTE *)(a3 + 8) = a2 & 1;
  *(_QWORD *)(a3 + 16) = KeyPath;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = result;
  *(_BYTE *)(a3 + 40) = 0;
  return result;
}

uint64_t MapLocationCompass.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  __int16 v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE v30[12];
  int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = a1;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_25528B480);
  MEMORY[0x24BDAC7A8](v35);
  v3 = &v30[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552880B8);
  MEMORY[0x24BDAC7A8](v4);
  v33 = &v30[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_2552880C0);
  MEMORY[0x24BDAC7A8](v36);
  v7 = (uint64_t *)&v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v34 = &v30[-v9];
  v10 = (int *)type metadata accessor for MapControlsConfig();
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v30[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v32 = *v1;
  v31 = *((unsigned __int8 *)v1 + 8);
  v13 = v1[2];
  v14 = *((_BYTE *)v1 + 24);
  v15 = v1[4];
  v16 = *((_BYTE *)v1 + 40);
  sub_21C531A90(v13, v14);
  sub_21C531A90(v15, v16);
  sub_21C531A90(v15, v16);
  v17 = sub_21C52D7BC(v15, v16);
  sub_21C531A84(v15, v16);
  sub_21C531A84(v13, v14);
  sub_21C531A84(v15, v16);
  if (v17 == 3)
    v18 = 0;
  else
    v18 = v17;
  v19 = type metadata accessor for MapPitchToggleConfig(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v12, 1, 1, v19);
  v20 = &v12[v10[5]];
  v21 = type metadata accessor for MapScaleViewConfig(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = &v12[v10[6]];
  v23 = type metadata accessor for MapUserLocationButtonConfig(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v24 = &v12[v10[7]];
  v25 = type metadata accessor for MapCompassConfig(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  *(_WORD *)&v12[v10[8]] = 2;
  *(_WORD *)&v12[v10[9]] = 2;
  *(_WORD *)&v12[v10[10]] = (v18 << 8) | 1;
  sub_21C531A90(v13, v14);
  sub_21C531A90(v15, v16);
  sub_21C531A90(v13, v14);
  LOBYTE(v24) = sub_21C52D604(v13, v14);
  sub_21C531A84(v13, v14);
  sub_21C531A84(v13, v14);
  sub_21C531A84(v15, v16);
  if ((v24 & 1) != 0)
  {
    v26 = sub_21C5E3724();
    v27 = v33;
    sub_21C53276C((uint64_t)v12, (uint64_t)v33);
    sub_21C531B18((uint64_t)v27, (uint64_t)v7 + *(int *)(v36 + 36), &qword_2552880B8);
    *v7 = v26;
    sub_21C524980((uint64_t)v27, &qword_2552880B8);
    v28 = v34;
    sub_21C5327B0((uint64_t)v7, (uint64_t)v34);
    sub_21C531B18((uint64_t)v28, (uint64_t)v3, &qword_2552880C0);
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25528B488);
    sub_21C52D9D4();
    sub_21C5E28C8();
    sub_21C5E33E8();
    sub_21C524980((uint64_t)v28, &qword_2552880C0);
  }
  else
  {
    *(_QWORD *)v3 = swift_getKeyPath();
    v3[8] = 0;
    *((_QWORD *)v3 + 2) = v32;
    v3[24] = v31;
    v3[25] = 1;
    v3[26] = v18;
    *(_WORD *)(v3 + 27) = 257;
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25528B488);
    sub_21C52D9D4();
    sub_21C5E28C8();
    sub_21C5E33E8();
  }
  return sub_21C532730((uint64_t)v12);
}

unint64_t sub_21C5E28C8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25528B490;
  if (!qword_25528B490)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B488);
    v2[0] = sub_21C5E2934();
    v2[1] = MEMORY[0x24BDEDB80];
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_25528B490);
  }
  return result;
}

unint64_t sub_21C5E2934()
{
  unint64_t result;

  result = qword_25528B498;
  if (!qword_25528B498)
  {
    result = MEMORY[0x22077F9A0](&unk_21C5ECCE4, &type metadata for _MapLocationCompass);
    atomic_store(result, (unint64_t *)&qword_25528B498);
  }
  return result;
}

uint64_t sub_21C5E2978()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for MapLocationCompass(uint64_t a1)
{
  sub_21C531A84(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  return sub_21C531A84(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for MapLocationCompass(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  sub_21C531A90(v4, v5);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(v2 + 32);
  LOBYTE(v2) = *(_BYTE *)(v2 + 40);
  sub_21C531A90(v6, v2);
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v2;
  return a1;
}

uint64_t assignWithCopy for MapLocationCompass(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = a2;
  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  v6 = *((_BYTE *)a2 + 24);
  sub_21C531A90(v5, v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  sub_21C531A84(v7, v8);
  v9 = v2[4];
  LOBYTE(v2) = *((_BYTE *)v2 + 40);
  sub_21C531A90(v9, (char)v2);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = (_BYTE)v2;
  sub_21C531A84(v10, v11);
  return a1;
}

uint64_t assignWithTake for MapLocationCompass(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  sub_21C531A84(v6, v7);
  v8 = *(_BYTE *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = v8;
  sub_21C531A84(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapLocationCompass(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapLocationCompass(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MapLocationCompass()
{
  return &type metadata for MapLocationCompass;
}

unint64_t sub_21C5E2BD0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25528B4A0;
  if (!qword_25528B4A0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25528B4A8);
    v2[0] = sub_21C52D9D4();
    v2[1] = sub_21C5E28C8();
    result = MEMORY[0x22077F9A0](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_25528B4A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for _MapLocationCompass()
{
  return &type metadata for _MapLocationCompass;
}

uint64_t sub_21C5E2C4C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t storeEnumTagSinglePayload for MapLocationCompassConfig(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21C5E2CA8 + 4 * byte_21C5ECBD5[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_21C5E2CDC + 4 * byte_21C5ECBD0[v4]))();
}

uint64_t sub_21C5E2CDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_21C5E2CE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x21C5E2CECLL);
  return result;
}

uint64_t sub_21C5E2CF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x21C5E2D00);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21C5E2D04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_21C5E2D0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MapLocationCompassConfig()
{
  return &type metadata for MapLocationCompassConfig;
}

ProtocolDescriptor *_mapContentProtocolDescriptor()
{
  return &protocol descriptor for MapContent;
}

uint64_t _callVisitMapContentType1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _callVisitMapContentType2(a1, a2, a2, a3);
}

uint64_t sub_21C5E2D40()
{
  return MEMORY[0x24BDCAF28]();
}

uint64_t sub_21C5E2D4C()
{
  return MEMORY[0x24BDCE330]();
}

uint64_t sub_21C5E2D58()
{
  return MEMORY[0x24BDCE880]();
}

uint64_t sub_21C5E2D64()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_21C5E2D70()
{
  return MEMORY[0x24BDCF368]();
}

uint64_t sub_21C5E2D7C()
{
  return MEMORY[0x24BDCF378]();
}

uint64_t sub_21C5E2D88()
{
  return MEMORY[0x24BDCF428]();
}

uint64_t sub_21C5E2D94()
{
  return MEMORY[0x24BDCF760]();
}

uint64_t sub_21C5E2DA0()
{
  return MEMORY[0x24BE095D0]();
}

uint64_t sub_21C5E2DAC()
{
  return MEMORY[0x24BE095E8]();
}

uint64_t sub_21C5E2DB8()
{
  return MEMORY[0x24BE095F0]();
}

uint64_t sub_21C5E2DC4()
{
  return MEMORY[0x24BE09610]();
}

uint64_t sub_21C5E2DD0()
{
  return MEMORY[0x24BE09620]();
}

uint64_t sub_21C5E2DDC()
{
  return MEMORY[0x24BE09638]();
}

uint64_t sub_21C5E2DE8()
{
  return MEMORY[0x24BE09668]();
}

uint64_t sub_21C5E2DF4()
{
  return MEMORY[0x24BE09670]();
}

uint64_t sub_21C5E2E00()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_21C5E2E0C()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_21C5E2E18()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_21C5E2E24()
{
  return MEMORY[0x24BDB9C48]();
}

uint64_t sub_21C5E2E30()
{
  return MEMORY[0x24BDB9D68]();
}

uint64_t sub_21C5E2E3C()
{
  return MEMORY[0x24BDEAED0]();
}

uint64_t sub_21C5E2E48()
{
  return MEMORY[0x24BDEB258]();
}

uint64_t sub_21C5E2E54()
{
  return MEMORY[0x24BDEB310]();
}

uint64_t sub_21C5E2E60()
{
  return MEMORY[0x24BDEB418]();
}

uint64_t sub_21C5E2E6C()
{
  return MEMORY[0x24BDEB478]();
}

uint64_t sub_21C5E2E78()
{
  return MEMORY[0x24BDEB4A0]();
}

uint64_t sub_21C5E2E84()
{
  return MEMORY[0x24BDEB560]();
}

uint64_t sub_21C5E2E90()
{
  return MEMORY[0x24BDEB7B0]();
}

uint64_t sub_21C5E2E9C()
{
  return MEMORY[0x24BDEB7B8]();
}

uint64_t sub_21C5E2EA8()
{
  return MEMORY[0x24BDEB880]();
}

uint64_t sub_21C5E2EB4()
{
  return MEMORY[0x24BDEB8A0]();
}

uint64_t sub_21C5E2EC0()
{
  return MEMORY[0x24BDEB960]();
}

uint64_t sub_21C5E2ECC()
{
  return MEMORY[0x24BDEB970]();
}

uint64_t sub_21C5E2ED8()
{
  return MEMORY[0x24BDEBA08]();
}

uint64_t sub_21C5E2EE4()
{
  return MEMORY[0x24BDEBB38]();
}

uint64_t sub_21C5E2EF0()
{
  return MEMORY[0x24BDEBD10]();
}

uint64_t sub_21C5E2EFC()
{
  return MEMORY[0x24BDEBD18]();
}

uint64_t sub_21C5E2F08()
{
  return MEMORY[0x24BDEBD28]();
}

uint64_t sub_21C5E2F14()
{
  return MEMORY[0x24BDEBD30]();
}

uint64_t sub_21C5E2F20()
{
  return MEMORY[0x24BDEBDE0]();
}

uint64_t sub_21C5E2F2C()
{
  return MEMORY[0x24BDEBDF0]();
}

uint64_t sub_21C5E2F38()
{
  return MEMORY[0x24BDEBE00]();
}

uint64_t sub_21C5E2F44()
{
  return MEMORY[0x24BDEBED0]();
}

uint64_t sub_21C5E2F50()
{
  return MEMORY[0x24BDEBF88]();
}

uint64_t sub_21C5E2F5C()
{
  return MEMORY[0x24BDEC120]();
}

uint64_t sub_21C5E2F68()
{
  return MEMORY[0x24BDEC130]();
}

uint64_t sub_21C5E2F74()
{
  return MEMORY[0x24BDEC138]();
}

uint64_t sub_21C5E2F80()
{
  return MEMORY[0x24BDEC148]();
}

uint64_t sub_21C5E2F8C()
{
  return MEMORY[0x24BDEC338]();
}

uint64_t sub_21C5E2F98()
{
  return MEMORY[0x24BDEC340]();
}

uint64_t sub_21C5E2FA4()
{
  return MEMORY[0x24BDEC348]();
}

uint64_t sub_21C5E2FB0()
{
  return MEMORY[0x24BDEC358]();
}

uint64_t sub_21C5E2FBC()
{
  return MEMORY[0x24BDEC368]();
}

uint64_t sub_21C5E2FC8()
{
  return MEMORY[0x24BDEC638]();
}

uint64_t sub_21C5E2FD4()
{
  return MEMORY[0x24BDEC648]();
}

uint64_t sub_21C5E2FE0()
{
  return MEMORY[0x24BDEC6D8]();
}

uint64_t sub_21C5E2FEC()
{
  return MEMORY[0x24BDEC6E0]();
}

uint64_t sub_21C5E2FF8()
{
  return MEMORY[0x24BDEC708]();
}

uint64_t sub_21C5E3004()
{
  return MEMORY[0x24BDEC998]();
}

uint64_t sub_21C5E3010()
{
  return MEMORY[0x24BDECCA0]();
}

uint64_t sub_21C5E301C()
{
  return MEMORY[0x24BDECCB8]();
}

uint64_t sub_21C5E3028()
{
  return MEMORY[0x24BDECCC0]();
}

uint64_t sub_21C5E3034()
{
  return MEMORY[0x24BDECDF0]();
}

uint64_t sub_21C5E3040()
{
  return MEMORY[0x24BDECDF8]();
}

uint64_t sub_21C5E304C()
{
  return MEMORY[0x24BDECE00]();
}

uint64_t sub_21C5E3058()
{
  return MEMORY[0x24BDECE58]();
}

uint64_t sub_21C5E3064()
{
  return MEMORY[0x24BDECE68]();
}

uint64_t sub_21C5E3070()
{
  return MEMORY[0x24BDECE78]();
}

uint64_t sub_21C5E307C()
{
  return MEMORY[0x24BDED128]();
}

uint64_t sub_21C5E3088()
{
  return MEMORY[0x24BDED130]();
}

uint64_t sub_21C5E3094()
{
  return MEMORY[0x24BDED198]();
}

uint64_t sub_21C5E30A0()
{
  return MEMORY[0x24BDED2D0]();
}

uint64_t sub_21C5E30AC()
{
  return MEMORY[0x24BDED3B0]();
}

uint64_t sub_21C5E30B8()
{
  return MEMORY[0x24BDED6E8]();
}

uint64_t sub_21C5E30C4()
{
  return MEMORY[0x24BDED6F0]();
}

uint64_t sub_21C5E30D0()
{
  return MEMORY[0x24BDED6F8]();
}

uint64_t sub_21C5E30DC()
{
  return MEMORY[0x24BDED700]();
}

uint64_t sub_21C5E30E8()
{
  return MEMORY[0x24BDED708]();
}

uint64_t sub_21C5E30F4()
{
  return MEMORY[0x24BDED718]();
}

uint64_t sub_21C5E3100()
{
  return MEMORY[0x24BDED730]();
}

uint64_t sub_21C5E310C()
{
  return MEMORY[0x24BDED758]();
}

uint64_t sub_21C5E3118()
{
  return MEMORY[0x24BDED890]();
}

uint64_t sub_21C5E3124()
{
  return MEMORY[0x24BDED898]();
}

uint64_t sub_21C5E3130()
{
  return MEMORY[0x24BDED8A8]();
}

uint64_t sub_21C5E313C()
{
  return MEMORY[0x24BDEDAF8]();
}

uint64_t sub_21C5E3148()
{
  return MEMORY[0x24BDEDB00]();
}

uint64_t sub_21C5E3154()
{
  return MEMORY[0x24BDEDB18]();
}

uint64_t sub_21C5E3160()
{
  return MEMORY[0x24BDEDC58]();
}

uint64_t sub_21C5E316C()
{
  return MEMORY[0x24BDEDC68]();
}

uint64_t sub_21C5E3178()
{
  return MEMORY[0x24BDEDC70]();
}

uint64_t sub_21C5E3184()
{
  return MEMORY[0x24BDEDC78]();
}

uint64_t sub_21C5E3190()
{
  return MEMORY[0x24BDEDC80]();
}

uint64_t sub_21C5E319C()
{
  return MEMORY[0x24BDEDC88]();
}

uint64_t sub_21C5E31A8()
{
  return MEMORY[0x24BDEDCA8]();
}

uint64_t sub_21C5E31B4()
{
  return MEMORY[0x24BDEDE80]();
}

uint64_t sub_21C5E31C0()
{
  return MEMORY[0x24BDEDE88]();
}

uint64_t sub_21C5E31CC()
{
  return MEMORY[0x24BDEDEA8]();
}

uint64_t sub_21C5E31D8()
{
  return MEMORY[0x24BDEDEB0]();
}

uint64_t sub_21C5E31E4()
{
  return MEMORY[0x24BDEDF08]();
}

uint64_t sub_21C5E31F0()
{
  return MEMORY[0x24BDEDF10]();
}

uint64_t sub_21C5E31FC()
{
  return MEMORY[0x24BDEDF68]();
}

uint64_t sub_21C5E3208()
{
  return MEMORY[0x24BDEDF70]();
}

uint64_t sub_21C5E3214()
{
  return MEMORY[0x24BDEE070]();
}

uint64_t sub_21C5E3220()
{
  return MEMORY[0x24BDEE080]();
}

uint64_t sub_21C5E322C()
{
  return MEMORY[0x24BDEE088]();
}

uint64_t sub_21C5E3238()
{
  return MEMORY[0x24BDEE0C8]();
}

uint64_t sub_21C5E3244()
{
  return MEMORY[0x24BDEE0F8]();
}

uint64_t sub_21C5E3250()
{
  return MEMORY[0x24BDEE158]();
}

uint64_t sub_21C5E325C()
{
  return MEMORY[0x24BDEE2D0]();
}

uint64_t sub_21C5E3268()
{
  return MEMORY[0x24BDEE468]();
}

uint64_t sub_21C5E3274()
{
  return MEMORY[0x24BDEE478]();
}

uint64_t sub_21C5E3280()
{
  return MEMORY[0x24BDEE4E0]();
}

uint64_t sub_21C5E328C()
{
  return MEMORY[0x24BDEE4F8]();
}

uint64_t sub_21C5E3298()
{
  return MEMORY[0x24BDEE530]();
}

uint64_t sub_21C5E32A4()
{
  return MEMORY[0x24BDEE538]();
}

uint64_t sub_21C5E32B0()
{
  return MEMORY[0x24BDEE5B8]();
}

uint64_t sub_21C5E32BC()
{
  return MEMORY[0x24BDEE5C0]();
}

uint64_t sub_21C5E32C8()
{
  return MEMORY[0x24BDEE5C8]();
}

uint64_t sub_21C5E32D4()
{
  return MEMORY[0x24BDEE8C0]();
}

uint64_t sub_21C5E32E0()
{
  return MEMORY[0x24BDEE8C8]();
}

uint64_t sub_21C5E32EC()
{
  return MEMORY[0x24BDEEAA8]();
}

uint64_t sub_21C5E32F8()
{
  return MEMORY[0x24BDEEAB0]();
}

uint64_t sub_21C5E3304()
{
  return MEMORY[0x24BDEEAB8]();
}

uint64_t sub_21C5E3310()
{
  return MEMORY[0x24BDEEAC0]();
}

uint64_t sub_21C5E331C()
{
  return MEMORY[0x24BDEEAC8]();
}

uint64_t sub_21C5E3328()
{
  return MEMORY[0x24BDEEAD0]();
}

uint64_t sub_21C5E3334()
{
  return MEMORY[0x24BDEEAD8]();
}

uint64_t sub_21C5E3340()
{
  return MEMORY[0x24BDEEAE0]();
}

uint64_t sub_21C5E334C()
{
  return MEMORY[0x24BDEF228]();
}

uint64_t sub_21C5E3358()
{
  return MEMORY[0x24BDEF238]();
}

uint64_t sub_21C5E3364()
{
  return MEMORY[0x24BDEF248]();
}

uint64_t sub_21C5E3370()
{
  return MEMORY[0x24BDEF260]();
}

uint64_t sub_21C5E337C()
{
  return MEMORY[0x24BDEF270]();
}

uint64_t sub_21C5E3388()
{
  return MEMORY[0x24BDEF278]();
}

uint64_t sub_21C5E3394()
{
  return MEMORY[0x24BDEF288]();
}

uint64_t sub_21C5E33A0()
{
  return MEMORY[0x24BDEF298]();
}

uint64_t sub_21C5E33AC()
{
  return MEMORY[0x24BDEF2A8]();
}

uint64_t sub_21C5E33B8()
{
  return MEMORY[0x24BDEF2C0]();
}

uint64_t sub_21C5E33C4()
{
  return MEMORY[0x24BDEF2C8]();
}

uint64_t sub_21C5E33D0()
{
  return MEMORY[0x24BDEF2D8]();
}

uint64_t sub_21C5E33DC()
{
  return MEMORY[0x24BDEF358]();
}

uint64_t sub_21C5E33E8()
{
  return MEMORY[0x24BDEF3A0]();
}

uint64_t sub_21C5E33F4()
{
  return MEMORY[0x24BDEF950]();
}

uint64_t sub_21C5E3400()
{
  return MEMORY[0x24BDEFB50]();
}

uint64_t sub_21C5E340C()
{
  return MEMORY[0x24BDEFBD0]();
}

uint64_t sub_21C5E3418()
{
  return MEMORY[0x24BDEFBE8]();
}

uint64_t sub_21C5E3424()
{
  return MEMORY[0x24BDEFF48]();
}

uint64_t sub_21C5E3430()
{
  return MEMORY[0x24BDF0128]();
}

uint64_t sub_21C5E343C()
{
  return MEMORY[0x24BDF0158]();
}

uint64_t sub_21C5E3448()
{
  return MEMORY[0x24BDF0270]();
}

uint64_t sub_21C5E3454()
{
  return MEMORY[0x24BDF0278]();
}

uint64_t sub_21C5E3460()
{
  return MEMORY[0x24BDF0280]();
}

uint64_t sub_21C5E346C()
{
  return MEMORY[0x24BDF0288]();
}

uint64_t sub_21C5E3478()
{
  return MEMORY[0x24BDF0520]();
}

uint64_t sub_21C5E3484()
{
  return MEMORY[0x24BDF0528]();
}

uint64_t _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0()
{
  return MEMORY[0x24BDF0530]();
}

uint64_t sub_21C5E349C()
{
  return MEMORY[0x24BDF0538]();
}

uint64_t sub_21C5E34A8()
{
  return MEMORY[0x24BDF0548]();
}

uint64_t sub_21C5E34B4()
{
  return MEMORY[0x24BDF0550]();
}

uint64_t sub_21C5E34C0()
{
  return MEMORY[0x24BDF0758]();
}

uint64_t sub_21C5E34CC()
{
  return MEMORY[0x24BDF0768]();
}

uint64_t sub_21C5E34D8()
{
  return MEMORY[0x24BDF0820]();
}

uint64_t sub_21C5E34E4()
{
  return MEMORY[0x24BDF0828]();
}

uint64_t sub_21C5E34F0()
{
  return MEMORY[0x24BDF0838]();
}

uint64_t sub_21C5E34FC()
{
  return MEMORY[0x24BDF0840]();
}

uint64_t sub_21C5E3508()
{
  return MEMORY[0x24BDF0AA0]();
}

uint64_t sub_21C5E3514()
{
  return MEMORY[0x24BDF0AA8]();
}

uint64_t sub_21C5E3520()
{
  return MEMORY[0x24BDF0AF0]();
}

uint64_t sub_21C5E352C()
{
  return MEMORY[0x24BDF0AF8]();
}

uint64_t sub_21C5E3538()
{
  return MEMORY[0x24BDF0B00]();
}

uint64_t sub_21C5E3544()
{
  return MEMORY[0x24BDF0B08]();
}

uint64_t sub_21C5E3550()
{
  return MEMORY[0x24BDF0C60]();
}

uint64_t sub_21C5E355C()
{
  return MEMORY[0x24BDF0C68]();
}

uint64_t sub_21C5E3568()
{
  return MEMORY[0x24BDF0EC0]();
}

uint64_t sub_21C5E3574()
{
  return MEMORY[0x24BDF0ED0]();
}

uint64_t sub_21C5E3580()
{
  return MEMORY[0x24BDF0EE0]();
}

uint64_t sub_21C5E358C()
{
  return MEMORY[0x24BDF0EF0]();
}

uint64_t sub_21C5E3598()
{
  return MEMORY[0x24BDF0F00]();
}

uint64_t sub_21C5E35A4()
{
  return MEMORY[0x24BDF0F10]();
}

uint64_t sub_21C5E35B0()
{
  return MEMORY[0x24BDF0F18]();
}

uint64_t sub_21C5E35BC()
{
  return MEMORY[0x24BDF0F28]();
}

uint64_t sub_21C5E35C8()
{
  return MEMORY[0x24BDF13A0]();
}

uint64_t sub_21C5E35D4()
{
  return MEMORY[0x24BDF1408]();
}

uint64_t sub_21C5E35E0()
{
  return MEMORY[0x24BDF1410]();
}

uint64_t sub_21C5E35EC()
{
  return MEMORY[0x24BDF1430]();
}

uint64_t sub_21C5E35F8()
{
  return MEMORY[0x24BDF14A8]();
}

uint64_t sub_21C5E3604()
{
  return MEMORY[0x24BDF1FC0]();
}

uint64_t sub_21C5E3610()
{
  return MEMORY[0x24BDF1FF0]();
}

uint64_t sub_21C5E361C()
{
  return MEMORY[0x24BDF2038]();
}

uint64_t sub_21C5E3628()
{
  return MEMORY[0x24BDF2060]();
}

uint64_t sub_21C5E3634()
{
  return MEMORY[0x24BDF2088]();
}

uint64_t sub_21C5E3640()
{
  return MEMORY[0x24BDF20A0]();
}

uint64_t sub_21C5E364C()
{
  return MEMORY[0x24BDF20D8]();
}

uint64_t sub_21C5E3658()
{
  return MEMORY[0x24BDF21B0]();
}

uint64_t sub_21C5E3664()
{
  return MEMORY[0x24BDF2370]();
}

uint64_t sub_21C5E3670()
{
  return MEMORY[0x24BDF2698]();
}

uint64_t sub_21C5E367C()
{
  return MEMORY[0x24BDF2830]();
}

uint64_t sub_21C5E3688()
{
  return MEMORY[0x24BDF2AF0]();
}

uint64_t sub_21C5E3694()
{
  return MEMORY[0x24BDF2CD8]();
}

uint64_t sub_21C5E36A0()
{
  return MEMORY[0x24BDF3008]();
}

uint64_t sub_21C5E36AC()
{
  return MEMORY[0x24BDF3640]();
}

uint64_t sub_21C5E36B8()
{
  return MEMORY[0x24BDF3658]();
}

uint64_t sub_21C5E36C4()
{
  return MEMORY[0x24BDF3678]();
}

uint64_t sub_21C5E36D0()
{
  return MEMORY[0x24BDF37F0]();
}

uint64_t sub_21C5E36DC()
{
  return MEMORY[0x24BDF3800]();
}

uint64_t sub_21C5E36E8()
{
  return MEMORY[0x24BDF3810]();
}

uint64_t sub_21C5E36F4()
{
  return MEMORY[0x24BDF3820]();
}

uint64_t sub_21C5E3700()
{
  return MEMORY[0x24BDF38C0]();
}

uint64_t sub_21C5E370C()
{
  return MEMORY[0x24BDF38E0]();
}

uint64_t sub_21C5E3718()
{
  return MEMORY[0x24BDF3C50]();
}

uint64_t sub_21C5E3724()
{
  return MEMORY[0x24BDF3D10]();
}

uint64_t sub_21C5E3730()
{
  return MEMORY[0x24BDF3F00]();
}

uint64_t sub_21C5E373C()
{
  return MEMORY[0x24BDF3F08]();
}

uint64_t sub_21C5E3748()
{
  return MEMORY[0x24BDF3F28]();
}

uint64_t sub_21C5E3754()
{
  return MEMORY[0x24BDF3F80]();
}

uint64_t sub_21C5E3760()
{
  return MEMORY[0x24BDF4130]();
}

uint64_t sub_21C5E376C()
{
  return MEMORY[0x24BDF4150]();
}

uint64_t sub_21C5E3778()
{
  return MEMORY[0x24BDF4280]();
}

uint64_t sub_21C5E3784()
{
  return MEMORY[0x24BDF4290]();
}

uint64_t sub_21C5E3790()
{
  return MEMORY[0x24BDF42A8]();
}

uint64_t sub_21C5E379C()
{
  return MEMORY[0x24BDF42B0]();
}

uint64_t sub_21C5E37A8()
{
  return MEMORY[0x24BDF42C0]();
}

uint64_t sub_21C5E37B4()
{
  return MEMORY[0x24BDF4790]();
}

uint64_t sub_21C5E37C0()
{
  return MEMORY[0x24BDF47B0]();
}

uint64_t sub_21C5E37CC()
{
  return MEMORY[0x24BDF47B8]();
}

uint64_t sub_21C5E37D8()
{
  return MEMORY[0x24BDF47E0]();
}

uint64_t sub_21C5E37E4()
{
  return MEMORY[0x24BDF47F8]();
}

uint64_t sub_21C5E37F0()
{
  return MEMORY[0x24BDF4870]();
}

uint64_t sub_21C5E37FC()
{
  return MEMORY[0x24BDF4940]();
}

uint64_t sub_21C5E3808()
{
  return MEMORY[0x24BDF4948]();
}

uint64_t sub_21C5E3814()
{
  return MEMORY[0x24BDF4950]();
}

uint64_t sub_21C5E3820()
{
  return MEMORY[0x24BDF4958]();
}

uint64_t sub_21C5E382C()
{
  return MEMORY[0x24BDF4960]();
}

uint64_t sub_21C5E3838()
{
  return MEMORY[0x24BDF4968]();
}

uint64_t sub_21C5E3844()
{
  return MEMORY[0x24BDF49C8]();
}

uint64_t sub_21C5E3850()
{
  return MEMORY[0x24BDF4CD8]();
}

uint64_t sub_21C5E385C()
{
  return MEMORY[0x24BDF4F18]();
}

uint64_t sub_21C5E3868()
{
  return MEMORY[0x24BDF5260]();
}

uint64_t sub_21C5E3874()
{
  return MEMORY[0x24BDF5268]();
}

uint64_t sub_21C5E3880()
{
  return MEMORY[0x24BDF54A0]();
}

uint64_t sub_21C5E388C()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t sub_21C5E3898()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t sub_21C5E38A4()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t sub_21C5E38B0()
{
  return MEMORY[0x24BEE01A8]();
}

uint64_t sub_21C5E38BC()
{
  return MEMORY[0x24BEE01B8]();
}

uint64_t sub_21C5E38C8()
{
  return MEMORY[0x24BEE0278]();
}

uint64_t sub_21C5E38D4()
{
  return MEMORY[0x24BEE02B0]();
}

uint64_t sub_21C5E38E0()
{
  return MEMORY[0x24BEE0300]();
}

uint64_t sub_21C5E38EC()
{
  return MEMORY[0x24BEE03B0]();
}

uint64_t sub_21C5E38F8()
{
  return MEMORY[0x24BEE0458]();
}

uint64_t sub_21C5E3904()
{
  return MEMORY[0x24BEE0460]();
}

uint64_t sub_21C5E3910()
{
  return MEMORY[0x24BEE04A8]();
}

uint64_t sub_21C5E391C()
{
  return MEMORY[0x24BEE04B0]();
}

uint64_t sub_21C5E3928()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_21C5E3934()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_21C5E3940()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_21C5E394C()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t sub_21C5E3958()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t sub_21C5E3964()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_21C5E3970()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_21C5E397C()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_21C5E3988()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_21C5E3994()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_21C5E39A0()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t sub_21C5E39AC()
{
  return MEMORY[0x24BEE0E40]();
}

uint64_t sub_21C5E39B8()
{
  return MEMORY[0x24BEE0E70]();
}

uint64_t sub_21C5E39C4()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_21C5E39D0()
{
  return MEMORY[0x24BDCFBA8]();
}

uint64_t sub_21C5E39DC()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_21C5E39E8()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_21C5E39F4()
{
  return MEMORY[0x24BEE1140]();
}

uint64_t sub_21C5E3A00()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_21C5E3A0C()
{
  return MEMORY[0x24BEE1168]();
}

uint64_t sub_21C5E3A18()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t sub_21C5E3A24()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_21C5E3A30()
{
  return MEMORY[0x24BEE11A0]();
}

uint64_t sub_21C5E3A3C()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_21C5E3A48()
{
  return MEMORY[0x24BEE11C8]();
}

uint64_t sub_21C5E3A54()
{
  return MEMORY[0x24BEE11F8]();
}

uint64_t sub_21C5E3A60()
{
  return MEMORY[0x24BEE1220]();
}

uint64_t sub_21C5E3A6C()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_21C5E3A78()
{
  return MEMORY[0x24BEE1288]();
}

uint64_t sub_21C5E3A84()
{
  return MEMORY[0x24BEE1308]();
}

uint64_t sub_21C5E3A90()
{
  return MEMORY[0x24BEE6920]();
}

uint64_t sub_21C5E3A9C()
{
  return MEMORY[0x24BEE6928]();
}

uint64_t sub_21C5E3AA8()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_21C5E3AB4()
{
  return MEMORY[0x24BEE1658]();
}

uint64_t sub_21C5E3AC0()
{
  return MEMORY[0x24BEE1678]();
}

uint64_t sub_21C5E3ACC()
{
  return MEMORY[0x24BEE16C8]();
}

uint64_t sub_21C5E3AD8()
{
  return MEMORY[0x24BEE16D8]();
}

uint64_t sub_21C5E3AE4()
{
  return MEMORY[0x24BEE16F8]();
}

uint64_t sub_21C5E3AF0()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t sub_21C5E3AFC()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t sub_21C5E3B08()
{
  return MEMORY[0x24BEE18F8]();
}

uint64_t sub_21C5E3B14()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t sub_21C5E3B20()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t sub_21C5E3B2C()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t sub_21C5E3B38()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t sub_21C5E3B44()
{
  return MEMORY[0x24BEE5770]();
}

uint64_t sub_21C5E3B50()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t sub_21C5E3B5C()
{
  return MEMORY[0x24BEE5AE8]();
}

uint64_t sub_21C5E3B68()
{
  return MEMORY[0x24BEE5AF0]();
}

uint64_t sub_21C5E3B74()
{
  return MEMORY[0x24BEE5AF8]();
}

uint64_t sub_21C5E3B80()
{
  return MEMORY[0x24BDF5540]();
}

uint64_t sub_21C5E3B8C()
{
  return MEMORY[0x24BEE5BB8]();
}

uint64_t sub_21C5E3B98()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t sub_21C5E3BA4()
{
  return MEMORY[0x24BEE5BC8]();
}

uint64_t sub_21C5E3BB0()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_21C5E3BBC()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t sub_21C5E3BC8()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_21C5E3BD4()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_21C5E3BE0()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t sub_21C5E3BEC()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_21C5E3BF8()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_21C5E3C04()
{
  return MEMORY[0x24BEE2300]();
}

uint64_t sub_21C5E3C10()
{
  return MEMORY[0x24BEE2358]();
}

uint64_t sub_21C5E3C1C()
{
  return MEMORY[0x24BEE2398]();
}

uint64_t sub_21C5E3C28()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t sub_21C5E3C34()
{
  return MEMORY[0x24BEE23B8]();
}

uint64_t sub_21C5E3C40()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t sub_21C5E3C4C()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_21C5E3C58()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_21C5E3C64()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_21C5E3C70()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_21C5E3C7C()
{
  return MEMORY[0x24BEE2568]();
}

uint64_t sub_21C5E3C88()
{
  return MEMORY[0x24BEE2650]();
}

uint64_t sub_21C5E3C94()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_21C5E3CA0()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t sub_21C5E3CAC()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_21C5E3CB8()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t sub_21C5E3CC4()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t sub_21C5E3CD0()
{
  return MEMORY[0x24BEE2950]();
}

uint64_t sub_21C5E3CDC()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t sub_21C5E3CE8()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t sub_21C5E3CF4()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t sub_21C5E3D00()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t sub_21C5E3D0C()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t sub_21C5E3D18()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t sub_21C5E3D24()
{
  return MEMORY[0x24BEE2B60]();
}

uint64_t sub_21C5E3D30()
{
  return MEMORY[0x24BEE2BD8]();
}

uint64_t sub_21C5E3D3C()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_21C5E3D48()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_21C5E3D54()
{
  return MEMORY[0x24BEE2F58]();
}

uint64_t sub_21C5E3D60()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_21C5E3D6C()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_21C5E3D78()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_21C5E3D84()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_21C5E3D90()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_21C5E3D9C()
{
  return MEMORY[0x24BEE31D0]();
}

uint64_t sub_21C5E3DA8()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_21C5E3DB4()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_21C5E3DC0()
{
  return MEMORY[0x24BEE39B0]();
}

uint64_t sub_21C5E3DCC()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_21C5E3DD8()
{
  return MEMORY[0x24BEE3B90]();
}

uint64_t sub_21C5E3DE4()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_21C5E3DF0()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_21C5E3DFC()
{
  return MEMORY[0x24BDC5130]();
}

uint64_t sub_21C5E3E08()
{
  return MEMORY[0x24BEE42D8]();
}

uint64_t sub_21C5E3E14()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_21C5E3E20()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_21C5E3E2C()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_21C5E3E38()
{
  return MEMORY[0x24BEE4318]();
}

uint64_t sub_21C5E3E44()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_21C5E3E50()
{
  return MEMORY[0x24BDD07D0]();
}

uint64_t sub_21C5E3E5C()
{
  return MEMORY[0x24BDD07E0]();
}

uint64_t sub_21C5E3E68()
{
  return MEMORY[0x24BDD07E8]();
}

uint64_t sub_21C5E3E74()
{
  return MEMORY[0x24BDD07F0]();
}

uint64_t sub_21C5E3E80()
{
  return MEMORY[0x24BEE4A98]();
}

uint64_t sub_21C5E3E8C()
{
  return MEMORY[0x24BEE4AA0]();
}

uint64_t AGCompareValues()
{
  return MEMORY[0x24BE096C8]();
}

uint64_t AGCreateWeakAttribute()
{
  return MEMORY[0x24BE096D0]();
}

uint64_t AGGraphClearUpdate()
{
  return MEMORY[0x24BE09728]();
}

uint64_t AGGraphCreateIndirectAttribute2()
{
  return MEMORY[0x24BE09738]();
}

uint64_t AGGraphCreateOffsetAttribute2()
{
  return MEMORY[0x24BE09740]();
}

uint64_t AGGraphGetAttributeSubgraph()
{
  return MEMORY[0x24BE09770]();
}

uint64_t AGGraphGetCurrentAttribute()
{
  return MEMORY[0x24BE09788]();
}

uint64_t AGGraphGetOutputValue()
{
  return MEMORY[0x24BE097A0]();
}

uint64_t AGGraphGetValue()
{
  return MEMORY[0x24BE097A8]();
}

uint64_t AGGraphGetWeakValue()
{
  return MEMORY[0x24BE097B8]();
}

uint64_t AGGraphMutateAttribute()
{
  return MEMORY[0x24BE097E0]();
}

uint64_t AGGraphSetIndirectAttribute()
{
  return MEMORY[0x24BE09810]();
}

uint64_t AGGraphSetIndirectDependency()
{
  return MEMORY[0x24BE09818]();
}

uint64_t AGGraphSetOutputValue()
{
  return MEMORY[0x24BE09830]();
}

uint64_t AGGraphSetUpdate()
{
  return MEMORY[0x24BE09840]();
}

uint64_t AGGraphSetValue()
{
  return MEMORY[0x24BE09850]();
}

uint64_t AGSubgraphAddChild()
{
  return MEMORY[0x24BE098A0]();
}

uint64_t AGSubgraphCreate()
{
  return MEMORY[0x24BE098D0]();
}

uint64_t AGSubgraphGetCurrent()
{
  return MEMORY[0x24BE098F8]();
}

uint64_t AGSubgraphGetGraph()
{
  return MEMORY[0x24BE09900]();
}

uint64_t AGSubgraphInvalidate()
{
  return MEMORY[0x24BE09918]();
}

uint64_t AGSubgraphIsValid()
{
  return MEMORY[0x24BE09930]();
}

uint64_t AGSubgraphRemoveChild()
{
  return MEMORY[0x24BE09938]();
}

uint64_t AGSubgraphSetCurrent()
{
  return MEMORY[0x24BE09948]();
}

uint64_t AGTupleCount()
{
  return MEMORY[0x24BE099B8]();
}

uint64_t AGTupleElementOffset()
{
  return MEMORY[0x24BE099C0]();
}

uint64_t AGTupleElementType()
{
  return MEMORY[0x24BE099C8]();
}

uint64_t AGTypeGetKind()
{
  return MEMORY[0x24BE099F0]();
}

BOOL CLLocationCoordinate2DIsValid(CLLocationCoordinate2D coord)
{
  return MEMORY[0x24BDBFA08]((__n128)coord, *(__n128 *)&coord.longitude);
}

MKMapPoint MKMapPointForCoordinate(CLLocationCoordinate2D coordinate)
{
  double v1;
  double v2;
  MKMapPoint result;

  MEMORY[0x24BDDAF98]((__n128)coordinate, *(__n128 *)&coordinate.longitude);
  result.y = v2;
  result.x = v1;
  return result;
}

uint64_t MKMapRectForCoordinateRegion()
{
  return MEMORY[0x24BDDAFB8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _MKLinkedOnOrAfterReleaseSet()
{
  return MEMORY[0x24BDDB218]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_conformsToProtocol()
{
  return MEMORY[0x24BEE4BE8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x24BEE4C48]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x24BEE4C68]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x24BEE4C70]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x24BEE4D60]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x24BEE4DC0]();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return MEMORY[0x24BEE4DC8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x24BEE4E40]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_modifyAtReferenceWritableKeyPath()
{
  return MEMORY[0x24BEE4EB8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_readAtKeyPath()
{
  return MEMORY[0x24BEE4ED8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setAtWritableKeyPath()
{
  return MEMORY[0x24BEE4F28]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x24BEE4F78]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x24BEE4FB0]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x24BEE4FB8]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x24BEE4FC0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x24BEE4FE0]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x24BEE4FE8]();
}

