void sub_1803AC648(void *a1)
{
  operator delete(a1);
}

void mlir::AsmPrinter::Impl::printType(uint64_t a1, uint64_t **a2)
{
  llvm::raw_ostream *v4;
  void *v5;

  if (a2)
  {
    if (!mlir::AsmPrinter::Impl::printAlias(a1, (uint64_t)a2))
      mlir::AsmPrinter::Impl::printTypeImpl(a1, a2);
  }
  else
  {
    v4 = *(llvm::raw_ostream **)a1;
    v5 = *(void **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v5 > 0xCuLL)
    {
      qmemcpy(v5, "<<NULL TYPE>>", 13);
      *((_QWORD *)v4 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v4, "<<NULL TYPE>>", 0xDuLL);
    }
  }
}

double printSymbolReference(char *a1, size_t a2, llvm::raw_ostream *a3)
{
  _BYTE *v6;
  void *v7;
  double result;

  if (a2)
  {
    v6 = (_BYTE *)*((_QWORD *)a3 + 4);
    if ((unint64_t)v6 >= *((_QWORD *)a3 + 3))
    {
      llvm::raw_ostream::write(a3, 64);
    }
    else
    {
      *((_QWORD *)a3 + 4) = v6 + 1;
      *v6 = 64;
    }
    printKeywordOrString(a1, a2, a3);
  }
  else
  {
    v7 = (void *)*((_QWORD *)a3 + 4);
    if (*((_QWORD *)a3 + 3) - (_QWORD)v7 > 0x18uLL)
    {
      qmemcpy(v7, "@<<INVALID EMPTY SYMBOL>>", 25);
      result = *(double *)"D EMPTY SYMBOL>>";
      *((_QWORD *)a3 + 4) += 25;
    }
    else
    {
      llvm::raw_ostream::write(a3, "@<<INVALID EMPTY SYMBOL>>", 0x19uLL);
    }
  }
  return result;
}

uint64_t mlir::FlatSymbolRefAttr::getValue(mlir::FlatSymbolRefAttr *this)
{
  uint64_t Value;

  Value = mlir::AffineMapAttr::getValue(this);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
}

double printElidedElementsAttr(llvm::raw_ostream *a1)
{
  void *v1;
  double result;

  v1 = (void *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v1 > 0x19uLL)
  {
    qmemcpy(v1, "dense_resource<__elided__>", 26);
    result = *(double *)"urce<__elided__>";
    *((_QWORD *)a1 + 4) += 26;
  }
  else
  {
    llvm::raw_ostream::write(a1, "dense_resource<__elided__>", 0x1AuLL);
  }
  return result;
}

void mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(llvm::raw_ostream **a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t *ArgAttrsAttr;
  uint64_t v7;
  uint64_t NumElements;
  unsigned __int8 *RawStringData;
  size_t v14;
  uint64_t v15;
  void *v16;
  int isSplat;
  uint64_t v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  void (*v21)(uint64_t, uint64_t);
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t OperandRange;
  uint64_t Value;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v28 = a2;
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v28);
  v27 = v5;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
  NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v7);
  if ((mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v28) & 1) != 0 || !a3)
    goto LABEL_17;
  if (atomic_load(clOptions))
  {
    if (atomic_load(clOptions))
    {
      if (*(_WORD *)(clOptions[0] + 8))
      {
LABEL_6:
        if (atomic_load(clOptions))
        {
          if (*(_QWORD *)(clOptions[0] + 128) == -1)
            goto LABEL_17;
        }
        else
        {
          if (*(_QWORD *)(clOptions[0] + 128) == -1)
            goto LABEL_17;
        }
        if (atomic_load(clOptions))
        {
          if (*(_QWORD *)(clOptions[0] + 128) >= NumElements)
            goto LABEL_17;
        }
        else
        {
          if (*(_QWORD *)(clOptions[0] + 128) >= NumElements)
            goto LABEL_17;
        }
LABEL_15:
        RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v28);
        mlir::AsmPrinter::Impl::printHexString(a1, RawStringData, v14);
        return;
      }
    }
    else
    {
      if (*(_WORD *)(clOptions[0] + 8))
        goto LABEL_6;
    }
  }
  if (NumElements >= 101)
    goto LABEL_15;
LABEL_17:
  v15 = OperandRange;
  v16 = *(void **)(*(_QWORD *)OperandRange + 136);
  if (v16 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v15 = 0;
  v24 = v15;
  if (v16 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v23 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v24);
    if (*(_UNKNOWN **)(*(_QWORD *)v23 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      mlir::DenseElementsAttr::tryGetComplexIntValues((mlir::DenseElementsAttr *)&v28, (uint64_t)&v35);
      v30 = v36;
      isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v28);
      v18 = Value;
      v19 = v27;
      v20 = *a1;
      *(_QWORD *)&v29 = &v35;
      *((_QWORD *)&v29 + 1) = a1;
      v21 = (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_0>;
      *(_QWORD *)&v30 = &v23;
      goto LABEL_27;
    }
    mlir::DenseElementsAttr::tryGetComplexFloatValues((mlir::DenseElementsAttr *)&v28, (uint64_t)&v35);
    v29 = v35;
    v30 = v36;
    v31 = v37;
    v32 = v38;
    v33 = v39;
    v34 = v40;
    isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v28);
    v18 = Value;
    v19 = v27;
    v20 = *a1;
    v21 = (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_1>;
LABEL_25:
    *(_QWORD *)&v29 = &v35;
    *((_QWORD *)&v29 + 1) = a1;
LABEL_27:
    v22 = &v29;
    goto LABEL_28;
  }
  if (!mlir::Type::isIntOrIndex((mlir::Type *)&OperandRange))
  {
    mlir::DenseElementsAttr::tryGetFloatValues((mlir::DenseElementsAttr *)&v28, (uint64_t)&v35);
    v29 = v35;
    v30 = v36;
    v31 = v37;
    v32 = v38;
    v33 = v39;
    v34 = v40;
    isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v28);
    v18 = Value;
    v19 = v27;
    v20 = *a1;
    v21 = (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_3>;
    goto LABEL_25;
  }
  mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v28, (uint64_t)&v35);
  v29 = v35;
  v30 = v36;
  isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v28);
  v18 = Value;
  v19 = v27;
  v20 = *a1;
  *(_QWORD *)&v35 = &v29;
  *((_QWORD *)&v35 + 1) = a1;
  v21 = (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_2>;
  *(_QWORD *)&v36 = &OperandRange;
  v22 = &v35;
LABEL_28:
  printDenseElementsAttrImpl(isSplat, v18, v19, v20, v21, (uint64_t)v22);
}

void mlir::AsmPrinter::Impl::printDenseStringElementsAttr(llvm::raw_ostream **a1, uint64_t a2)
{
  uint64_t v3;
  int isSplat;
  uint64_t Value;
  uint64_t v6;
  _QWORD v7[2];
  _QWORD v8[2];
  uint64_t v9;

  v9 = a2;
  v8[0] = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v9);
  v8[1] = v3;
  v7[0] = a1;
  v7[1] = v8;
  isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v9);
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v9);
  printDenseElementsAttrImpl(isSplat, Value, v6, *a1, (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseStringElementsAttr(mlir::DenseStringElementsAttr)::$_0>, (uint64_t)v7);
}

void mlir::AsmPrinter::Impl::printDenseElementsAttr(llvm::raw_ostream **a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int isSplat;
  uint64_t Value;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[2];
  uint64_t v10;

  if (a2
    && *(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id)
  {
    v10 = a2;
    v9[0] = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v10);
    v9[1] = v4;
    v8[0] = a1;
    v8[1] = v9;
    isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v10);
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v10);
    printDenseElementsAttrImpl(isSplat, Value, v7, *a1, (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseStringElementsAttr(mlir::DenseStringElementsAttr)::$_0>, (uint64_t)v8);
  }
  else
  {
    mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(a1, a2, a3);
  }
}

void mlir::AsmPrinter::Impl::printDenseArrayAttr(llvm::raw_ostream **a1, uint64_t a2)
{
  unsigned int IntOrFloatBitWidth;
  uint64_t v4;
  unsigned int LHS;
  llvm::raw_ostream *v6;
  uint64_t v7;
  uint64_t i;
  _WORD *v9;
  _QWORD v10[2];
  unsigned int v11;
  unsigned int v12;
  uint64_t Value;
  uint64_t v14;
  _QWORD v15[5];

  v14 = a2;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v14);
  if (mlir::Type::isInteger((mlir::Type *)&Value, 1))
    IntOrFloatBitWidth = 8;
  else
    IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&Value);
  v11 = IntOrFloatBitWidth >> 3;
  v12 = IntOrFloatBitWidth;
  v10[0] = mlir::DenseArrayAttr::getRawData((mlir::DenseArrayAttr *)&v14);
  v10[1] = v4;
  LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v14);
  v6 = *a1;
  v15[0] = &v12;
  v15[1] = v10;
  v15[2] = &v11;
  v15[3] = &Value;
  v15[4] = a1;
  v7 = LHS;
  if (LHS)
  {
    mlir::AsmPrinter::Impl::printDenseArrayAttr(mlir::DenseArrayAttr)::$_0::operator()((uint64_t)v15, 0);
    if (v7 != 1)
    {
      for (i = 1; i != v7; ++i)
      {
        while (1)
        {
          v9 = (_WORD *)*((_QWORD *)v6 + 4);
          if (*((_QWORD *)v6 + 3) - (_QWORD)v9 <= 1uLL)
            break;
          *v9 = 8236;
          *((_QWORD *)v6 + 4) += 2;
          mlir::AsmPrinter::Impl::printDenseArrayAttr(mlir::DenseArrayAttr)::$_0::operator()((uint64_t)v15, i++);
          if (v7 == i)
            return;
        }
        llvm::raw_ostream::write(v6, ", ", 2uLL);
        mlir::AsmPrinter::Impl::printDenseArrayAttr(mlir::DenseArrayAttr)::$_0::operator()((uint64_t)v15, i);
      }
    }
  }
}

void printDenseElementsAttrImpl(int a1, uint64_t a2, uint64_t a3, llvm::raw_ostream *a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _WORD *v17;
  unsigned int v18;
  BOOL v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t NumElements;
  _QWORD v30[2];
  void *v31;
  uint64_t v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  v30[0] = a2;
  v30[1] = a3;
  if (a1)
  {
    a5(a6, 0);
    return;
  }
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
  NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v8);
  if (NumElements)
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
    v10 = v9;
    v31 = v33;
    v32 = 0x400000000;
    if (v9 < 5)
    {
      if (!v9)
      {
LABEL_9:
        LODWORD(v32) = v10;
        v13 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
        if (!(_DWORD)NumElements)
          goto LABEL_36;
        v14 = v13;
        v15 = 0;
        v16 = 0;
        while (1)
        {
          if (!(_DWORD)v15)
            goto LABEL_16;
          v17 = (_WORD *)*((_QWORD *)a4 + 4);
          if (*((_QWORD *)a4 + 3) - (_QWORD)v17 <= 1uLL)
            break;
          *v17 = 8236;
          *((_QWORD *)a4 + 4) += 2;
          if (v10 > v16)
          {
LABEL_19:
            v18 = v16 + 1;
            do
            {
              while (1)
              {
                v20 = (_BYTE *)*((_QWORD *)a4 + 4);
                if ((unint64_t)v20 >= *((_QWORD *)a4 + 3))
                  break;
                *((_QWORD *)a4 + 4) = v20 + 1;
                *v20 = 91;
                v19 = v10 <= v18++;
                if (v19)
                  goto LABEL_24;
              }
              llvm::raw_ostream::write(a4, 91);
              v19 = v10 <= v18++;
            }
            while (!v19);
          }
LABEL_24:
          a5(a6, v15);
          ++*((_DWORD *)v31 + v10 - 1);
          if ((_DWORD)v10 == 1)
          {
            v16 = 1;
          }
          else
          {
            v16 = v10;
            v21 = (v10 - 1);
            LODWORD(v22) = v10;
            do
            {
              v23 = v22;
              v22 = v21;
              v24 = v31;
              if (*(_QWORD *)(v14 + 8 * v22) <= (uint64_t)*((unsigned int *)v31 + v22))
              {
                *((_DWORD *)v31 + v22) = 0;
                ++v24[v23 - 2];
                --v16;
                v25 = (_BYTE *)*((_QWORD *)a4 + 4);
                if ((unint64_t)v25 < *((_QWORD *)a4 + 3))
                {
                  *((_QWORD *)a4 + 4) = v25 + 1;
                  *v25 = 93;
                }
                else
                {
                  llvm::raw_ostream::write(a4, 93);
                }
              }
              v21 = v22 - 1;
            }
            while ((_DWORD)v22 != 1);
          }
          v15 = (v15 + 1);
          if ((_DWORD)v15 == (_DWORD)NumElements)
          {
            for (; v16; --v16)
            {
              while (1)
              {
                v26 = (_BYTE *)*((_QWORD *)a4 + 4);
                if ((unint64_t)v26 >= *((_QWORD *)a4 + 3))
                  break;
                *((_QWORD *)a4 + 4) = v26 + 1;
                *v26 = 93;
                if (!--v16)
                  goto LABEL_36;
              }
              llvm::raw_ostream::write(a4, 93);
            }
LABEL_36:
            if (v31 != v33)
              free(v31);
            return;
          }
        }
        llvm::raw_ostream::write(a4, ", ", 2uLL);
LABEL_16:
        if (v10 > v16)
          goto LABEL_19;
        goto LABEL_24;
      }
      v12 = 4 * v9;
      v11 = v33;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v9, 4);
      v11 = v31;
      v12 = 4 * v10;
    }
    bzero(v11, v12);
    goto LABEL_9;
  }
}

void mlir::AsmPrinter::Impl::printTypeImpl(uint64_t a1, uint64_t **a2)
{
  void *v3;
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  const char *AttrData;
  size_t v8;
  size_t v9;
  char *v10;
  size_t v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  int *v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  llvm::raw_ostream *v26;
  char *v27;
  char v28;
  _BYTE *RawStringData;
  uint64_t v30;
  uint64_t v31;
  llvm::raw_ostream *v32;
  _DWORD *v33;
  uint64_t *Inputs;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  llvm::raw_ostream *v38;
  uint64_t v39;
  llvm::raw_ostream *v40;
  _DWORD *v41;
  char v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t *v46;
  llvm::raw_ostream *v47;
  _BYTE *v48;
  llvm::raw_ostream *v49;
  _BYTE *v50;
  llvm::raw_ostream *v51;
  _BYTE *v52;
  llvm::raw_ostream *v53;
  uint64_t v54;
  void *v55;
  llvm::raw_ostream *v56;
  _BYTE *v57;
  unsigned int Width;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  llvm::raw_ostream *v63;
  _BYTE *v64;
  llvm::raw_ostream *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  llvm::raw_ostream *v69;
  _DWORD *v70;
  unint64_t v71;
  llvm::raw_ostream *v72;
  _BYTE *v73;
  uint64_t RHS;
  uint64_t v75;
  llvm::raw_ostream *v76;
  uint64_t v77;
  uint64_t *Results;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  llvm::raw_ostream *v83;
  _BYTE *v84;
  llvm::raw_ostream *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  _WORD *v89;
  uint64_t v90;
  llvm::raw_ostream *v91;
  void *v92;
  void *v93;
  llvm::raw_ostream *v94;
  void *v95;
  llvm::raw_ostream *v96;
  _BYTE *v97;
  uint64_t *v98;
  uint64_t v99;
  _WORD *v100;
  uint64_t v101;
  llvm::raw_ostream *v102;
  void *v103;
  llvm::raw_ostream *v104;
  void *v105;
  uint64_t v106;
  llvm::raw_ostream *v107;
  uint64_t v108;
  llvm::raw_ostream *v109;
  _WORD *v110;
  uint64_t Values;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  llvm::raw_ostream *v117;
  _BYTE *v118;
  llvm::raw_ostream *v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  llvm::raw_ostream *v123;
  _QWORD *v124;
  llvm::raw_ostream *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  llvm::raw_ostream *v129;
  uint64_t v130;
  uint64_t v131;
  llvm::raw_ostream *v132;
  _WORD *v133;
  uint64_t v134;
  uint64_t v135;
  llvm::raw_ostream *v136;
  uint64_t v137;
  llvm::raw_ostream *v138;
  void *v139;
  llvm::raw_ostream *v140;
  _WORD *v141;
  uint64_t MemorySpace;
  uint64_t v143;
  llvm::raw_ostream *v144;
  _WORD *v145;
  uint64_t v146;
  llvm::raw_ostream *v147;
  _BYTE *v148;
  uint64_t *Types;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  llvm::raw_ostream *v153;
  uint64_t v154;
  void *v155;
  uint64_t *v156;
  uint64_t v157;
  _WORD *v158;
  uint64_t v159;
  llvm::raw_ostream *v160;
  void *v161;
  _QWORD v162[2];
  uint64_t Value;

  v3 = (void *)(*a2)[17];
  if (v3 == &mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id)
  {
    v6 = *(llvm::raw_ostream **)a1;
    v162[0] = a2;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v162);
    AttrData = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
    v9 = v8;
    v10 = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v162);
    printDialectSymbol(v6, "!", 1uLL, AttrData, v9, v10, v11);
    return;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v13 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v13) <= 4)
    {
      v14 = "index";
      v15 = 5;
      goto LABEL_35;
    }
    *(_BYTE *)(v13 + 4) = 120;
    *(_DWORD *)v13 = 1701080681;
    v17 = *((_QWORD *)v12 + 4) + 5;
LABEL_41:
    *((_QWORD *)v12 + 4) = v17;
    return;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v16 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v16) <= 5)
    {
      v14 = "f8E5M2";
      v15 = 6;
      goto LABEL_35;
    }
    *(_WORD *)(v16 + 4) = 12877;
    *(_DWORD *)v16 = 893728870;
    v17 = *((_QWORD *)v12 + 4) + 6;
    goto LABEL_41;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v18 <= 7uLL)
    {
      v14 = "f8E4M3FN";
      v15 = 8;
      goto LABEL_35;
    }
    *v18 = 0x4E46334D34453866;
    v17 = *((_QWORD *)v12 + 4) + 8;
    goto LABEL_41;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v19) <= 9)
    {
      v14 = "f8E5M2FNUZ";
LABEL_34:
      v15 = 10;
      goto LABEL_35;
    }
    v20 = "f8E5M2FNUZ";
LABEL_40:
    *(_WORD *)(v19 + 8) = 23125;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v17 = *((_QWORD *)v12 + 4) + 10;
    goto LABEL_41;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v19) <= 9)
    {
      v14 = "f8E4M3FNUZ";
      goto LABEL_34;
    }
    v20 = "f8E4M3FNUZ";
    goto LABEL_40;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v21 = *(void **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v21 <= 0xCuLL)
    {
      v14 = "f8E4M3B11FNUZ";
      v15 = 13;
      goto LABEL_35;
    }
    qmemcpy(v21, "f8E4M3B11FNUZ", 13);
    v17 = *((_QWORD *)v12 + 4) + 13;
    goto LABEL_41;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v22 = *(int **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v22 > 3uLL)
    {
      v24 = 909207138;
      goto LABEL_55;
    }
    v14 = "bf16";
    v15 = 4;
    goto LABEL_35;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v23 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v23) > 2)
    {
      *(_BYTE *)(v23 + 2) = 54;
      v25 = 12646;
      goto LABEL_65;
    }
    v14 = "f16";
    v15 = 3;
LABEL_35:
    llvm::raw_ostream::write(v12, v14, v15);
    return;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v22 = *(int **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v22 > 3uLL)
    {
      v24 = 842229364;
      goto LABEL_55;
    }
    v14 = "tf32";
    v15 = 4;
    goto LABEL_35;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v23 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v23) > 2)
    {
      *(_BYTE *)(v23 + 2) = 50;
      v25 = 13158;
      goto LABEL_65;
    }
    v14 = "f32";
    v15 = 3;
    goto LABEL_35;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v23 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v23) > 2)
    {
      *(_BYTE *)(v23 + 2) = 52;
      v25 = 13926;
      goto LABEL_65;
    }
    v14 = "f64";
    v15 = 3;
    goto LABEL_35;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v23 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v23) <= 2)
    {
      v14 = "f80";
      v15 = 3;
      goto LABEL_35;
    }
    *(_BYTE *)(v23 + 2) = 48;
    v25 = 14438;
LABEL_65:
    *(_WORD *)v23 = v25;
    v17 = *((_QWORD *)v12 + 4) + 3;
    goto LABEL_41;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v12 = *(llvm::raw_ostream **)a1;
    v22 = *(int **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v22 <= 3uLL)
    {
      v14 = "f128";
      v15 = 4;
      goto LABEL_35;
    }
    v24 = 942813542;
LABEL_55:
    *v22 = v24;
    v17 = *((_QWORD *)v12 + 4) + 4;
    goto LABEL_41;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    v162[0] = a2;
    if (mlir::IntegerType::getSignedness((mlir::IntegerType *)v162) == 1)
    {
      v26 = *(llvm::raw_ostream **)a1;
      v27 = *(char **)(*(_QWORD *)a1 + 32);
      if ((unint64_t)v27 < *(_QWORD *)(*(_QWORD *)a1 + 24))
      {
        *((_QWORD *)v26 + 4) = v27 + 1;
        v28 = 115;
LABEL_77:
        *v27 = v28;
        goto LABEL_112;
      }
      v42 = 115;
    }
    else
    {
      if (mlir::IntegerType::getSignedness((mlir::IntegerType *)v162) != 2)
      {
LABEL_112:
        v56 = *(llvm::raw_ostream **)a1;
        v57 = (_BYTE *)*((_QWORD *)v56 + 4);
        if ((unint64_t)v57 >= *((_QWORD *)v56 + 3))
        {
          v56 = llvm::raw_ostream::write(v56, 105);
        }
        else
        {
          *((_QWORD *)v56 + 4) = v57 + 1;
          *v57 = 105;
        }
        Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v162);
        llvm::raw_ostream::operator<<(v56, Width);
        return;
      }
      v26 = *(llvm::raw_ostream **)a1;
      v27 = *(char **)(*(_QWORD *)a1 + 32);
      if ((unint64_t)v27 < *(_QWORD *)(*(_QWORD *)a1 + 24))
      {
        *((_QWORD *)v26 + 4) = v27 + 1;
        v28 = 117;
        goto LABEL_77;
      }
      v42 = 117;
    }
    llvm::raw_ostream::write(v26, v42);
    goto LABEL_112;
  }
  if (!a2 || v3 != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
  {
    if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
    {
      v162[0] = a2;
      RawStringData = (_BYTE *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v162);
      v31 = v30;
      v32 = *(llvm::raw_ostream **)a1;
      v33 = *(_DWORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v33 > 6uLL)
      {
        *(_DWORD *)((char *)v33 + 3) = 1014132596;
        *v33 = 1952671094;
        *((_QWORD *)v32 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v32, "vector<", 7uLL);
      }
      v43 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v162);
      v45 = v44;
      if (v44)
      {
        v46 = (unint64_t *)v43;
        if (v31)
        {
          do
          {
            while (1)
            {
              if (*RawStringData)
              {
                v47 = *(llvm::raw_ostream **)a1;
                v48 = *(_BYTE **)(*(_QWORD *)a1 + 32);
                if ((unint64_t)v48 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
                {
                  llvm::raw_ostream::write(v47, 91);
                }
                else
                {
                  *((_QWORD *)v47 + 4) = v48 + 1;
                  *v48 = 91;
                }
              }
              llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)a1, *v46);
              if (*RawStringData)
              {
                v49 = *(llvm::raw_ostream **)a1;
                v50 = *(_BYTE **)(*(_QWORD *)a1 + 32);
                if ((unint64_t)v50 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
                {
                  llvm::raw_ostream::write(v49, 93);
                }
                else
                {
                  *((_QWORD *)v49 + 4) = v50 + 1;
                  *v50 = 93;
                }
              }
              v51 = *(llvm::raw_ostream **)a1;
              v52 = *(_BYTE **)(*(_QWORD *)a1 + 32);
              if ((unint64_t)v52 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
                break;
              *((_QWORD *)v51 + 4) = v52 + 1;
              *v52 = 120;
              ++RawStringData;
              ++v46;
              if (!--v45)
                goto LABEL_138;
            }
            llvm::raw_ostream::write(v51, 120);
            ++RawStringData;
            ++v46;
            --v45;
          }
          while (v45);
        }
        else
        {
          do
          {
            while (1)
            {
              v71 = *v46++;
              llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)a1, v71);
              v72 = *(llvm::raw_ostream **)a1;
              v73 = *(_BYTE **)(*(_QWORD *)a1 + 32);
              if ((unint64_t)v73 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
                break;
              *((_QWORD *)v72 + 4) = v73 + 1;
              *v73 = 120;
              if (!--v45)
                goto LABEL_138;
            }
            llvm::raw_ostream::write(v72, 120);
            --v45;
          }
          while (v45);
        }
      }
LABEL_138:
      RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v162);
      if (RHS)
        goto LABEL_139;
      goto LABEL_190;
    }
    if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v162[0] = a2;
      v40 = *(llvm::raw_ostream **)a1;
      v41 = *(_DWORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v41 > 6uLL)
      {
        *(_DWORD *)((char *)v41 + 3) = 1014132595;
        *v41 = 1936614772;
        *((_QWORD *)v40 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v40, "tensor<", 7uLL);
      }
      v59 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v162);
      if (v60)
      {
        v61 = (unint64_t *)v59;
        v62 = 8 * v60;
        do
        {
          while (1)
          {
            v63 = *(llvm::raw_ostream **)a1;
            if (*v61 == 0x8000000000000000)
            {
              v64 = (_BYTE *)*((_QWORD *)v63 + 4);
              if ((unint64_t)v64 >= *((_QWORD *)v63 + 3))
              {
                llvm::raw_ostream::write(v63, 63);
              }
              else
              {
                *((_QWORD *)v63 + 4) = v64 + 1;
                *v64 = 63;
              }
            }
            else
            {
              llvm::raw_ostream::operator<<(v63, *v61);
            }
            v65 = *(llvm::raw_ostream **)a1;
            v66 = *(_BYTE **)(*(_QWORD *)a1 + 32);
            if ((unint64_t)v66 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
              break;
            *((_QWORD *)v65 + 4) = v66 + 1;
            *v66 = 120;
            ++v61;
            v62 -= 8;
            if (!v62)
              goto LABEL_127;
          }
          llvm::raw_ostream::write(v65, 120);
          ++v61;
          v62 -= 8;
        }
        while (v62);
      }
LABEL_127:
      v67 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v162);
      if (v67)
      {
        v68 = v67;
        if (!mlir::AsmPrinter::Impl::printAlias(a1, v67))
          mlir::AsmPrinter::Impl::printTypeImpl(a1, v68);
      }
      else
      {
        v94 = *(llvm::raw_ostream **)a1;
        v95 = *(void **)(*(_QWORD *)a1 + 32);
        if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v95 > 0xCuLL)
        {
          qmemcpy(v95, "<<NULL TYPE>>", 13);
          *((_QWORD *)v94 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(v94, "<<NULL TYPE>>", 0xDuLL);
        }
      }
      if (!mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v162))
        goto LABEL_269;
      v109 = *(llvm::raw_ostream **)a1;
      v110 = *(_WORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v110 > 1uLL)
      {
        *v110 = 8236;
        *((_QWORD *)v109 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v109, ", ", 2uLL);
      }
      Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v162);
      if (Values)
      {
        v112 = Values;
        goto LABEL_269;
      }
      goto LABEL_265;
    }
    if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      v162[0] = a2;
      v53 = *(llvm::raw_ostream **)a1;
      v54 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v54) > 8)
      {
        *(_BYTE *)(v54 + 8) = 120;
        *(_QWORD *)v54 = *(_QWORD *)"tensor<*x";
        *((_QWORD *)v53 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v53, "tensor<*x", 9uLL);
      }
      RHS = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v162);
      if (!RHS)
      {
LABEL_190:
        v104 = *(llvm::raw_ostream **)a1;
        v105 = *(void **)(*(_QWORD *)a1 + 32);
        if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v105 <= 0xCuLL)
        {
          llvm::raw_ostream::write(v104, "<<NULL TYPE>>", 0xDuLL);
          goto LABEL_269;
        }
        qmemcpy(v105, "<<NULL TYPE>>", 13);
        v106 = *((_QWORD *)v104 + 4) + 13;
        goto LABEL_268;
      }
LABEL_139:
      v75 = RHS;
      if (!mlir::AsmPrinter::Impl::printAlias(a1, RHS))
        mlir::AsmPrinter::Impl::printTypeImpl(a1, v75);
      goto LABEL_269;
    }
    if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    {
      Value = (uint64_t)a2;
      v69 = *(llvm::raw_ostream **)a1;
      v70 = *(_DWORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v70 > 6uLL)
      {
        *(_DWORD *)((char *)v70 + 3) = 1013343602;
        *v70 = 1919772013;
        *((_QWORD *)v69 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v69, "memref<", 7uLL);
      }
      v113 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&Value);
      if (v114)
      {
        v115 = (unint64_t *)v113;
        v116 = 8 * v114;
        do
        {
          while (1)
          {
            v117 = *(llvm::raw_ostream **)a1;
            if (*v115 == 0x8000000000000000)
            {
              v118 = (_BYTE *)*((_QWORD *)v117 + 4);
              if ((unint64_t)v118 >= *((_QWORD *)v117 + 3))
              {
                llvm::raw_ostream::write(v117, 63);
              }
              else
              {
                *((_QWORD *)v117 + 4) = v118 + 1;
                *v118 = 63;
              }
            }
            else
            {
              llvm::raw_ostream::operator<<(v117, *v115);
            }
            v119 = *(llvm::raw_ostream **)a1;
            v120 = *(_BYTE **)(*(_QWORD *)a1 + 32);
            if ((unint64_t)v120 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
              break;
            *((_QWORD *)v119 + 4) = v120 + 1;
            *v120 = 120;
            ++v115;
            v116 -= 8;
            if (!v116)
              goto LABEL_216;
          }
          llvm::raw_ostream::write(v119, 120);
          ++v115;
          v116 -= 8;
        }
        while (v116);
      }
LABEL_216:
      v121 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&Value);
      if (v121)
      {
        v122 = v121;
        if (!mlir::AsmPrinter::Impl::printAlias(a1, v121))
          mlir::AsmPrinter::Impl::printTypeImpl(a1, v122);
      }
      else
      {
        v125 = *(llvm::raw_ostream **)a1;
        v126 = *(void **)(*(_QWORD *)a1 + 32);
        if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v126 > 0xCuLL)
        {
          qmemcpy(v126, "<<NULL TYPE>>", 13);
          *((_QWORD *)v125 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(v125, "<<NULL TYPE>>", 0xDuLL);
        }
      }
      v162[0] = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&Value);
      v162[1] = v131;
      if (*(_UNKNOWN **)(*(_QWORD *)v162[0] + 136) != &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id
        || (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v162) & 1) == 0)
      {
        v132 = *(llvm::raw_ostream **)a1;
        v133 = *(_WORD **)(*(_QWORD *)a1 + 32);
        if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v133 > 1uLL)
        {
          *v133 = 8236;
          *((_QWORD *)v132 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v132, ", ", 2uLL);
        }
        v134 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&Value);
        if (v134)
        {
          v135 = v134;
        }
        else
        {
          v136 = *(llvm::raw_ostream **)a1;
          v137 = *(_QWORD *)(*(_QWORD *)a1 + 32);
          if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v137) > 0x11)
          {
            *(_WORD *)(v137 + 16) = 15934;
            *(_OWORD *)v137 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
            *((_QWORD *)v136 + 4) += 18;
          }
          else
          {
            llvm::raw_ostream::write(v136, "<<NULL ATTRIBUTE>>", 0x12uLL);
          }
        }
      }
      if (!mlir::MemRefType::getMemorySpace((mlir::MemRefType *)&Value))
        goto LABEL_269;
      v140 = *(llvm::raw_ostream **)a1;
      v141 = *(_WORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v141 > 1uLL)
      {
        *v141 = 8236;
        *((_QWORD *)v140 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v140, ", ", 2uLL);
      }
      MemorySpace = mlir::MemRefType::getMemorySpace((mlir::MemRefType *)&Value);
      if (MemorySpace)
      {
LABEL_252:
        v143 = MemorySpace;
        goto LABEL_269;
      }
LABEL_265:
      v104 = *(llvm::raw_ostream **)a1;
      v146 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v146) <= 0x11)
      {
        llvm::raw_ostream::write(v104, "<<NULL ATTRIBUTE>>", 0x12uLL);
        goto LABEL_269;
      }
      *(_WORD *)(v146 + 16) = 15934;
      *(_OWORD *)v146 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
      v106 = *((_QWORD *)v104 + 4) + 18;
LABEL_268:
      *((_QWORD *)v104 + 4) = v106;
LABEL_269:
      v147 = *(llvm::raw_ostream **)a1;
      v148 = *(_BYTE **)(*(_QWORD *)a1 + 32);
      if ((unint64_t)v148 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
      {
        llvm::raw_ostream::write(v147, 62);
      }
      else
      {
        *((_QWORD *)v147 + 4) = v148 + 1;
        *v148 = 62;
      }
      return;
    }
    if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
    {
      v162[0] = a2;
      v107 = *(llvm::raw_ostream **)a1;
      v108 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v108) > 8)
      {
        *(_BYTE *)(v108 + 8) = 120;
        *(_QWORD *)v108 = *(_QWORD *)"memref<*x";
        *((_QWORD *)v107 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v107, "memref<*x", 9uLL);
      }
      v127 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v162);
      if (v127)
      {
        v128 = v127;
        if (!mlir::AsmPrinter::Impl::printAlias(a1, v127))
          mlir::AsmPrinter::Impl::printTypeImpl(a1, v128);
      }
      else
      {
        v138 = *(llvm::raw_ostream **)a1;
        v139 = *(void **)(*(_QWORD *)a1 + 32);
        if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v139 > 0xCuLL)
        {
          qmemcpy(v139, "<<NULL TYPE>>", 13);
          *((_QWORD *)v138 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(v138, "<<NULL TYPE>>", 0xDuLL);
        }
      }
      if (!mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)v162))
        goto LABEL_269;
      v144 = *(llvm::raw_ostream **)a1;
      v145 = *(_WORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v145 > 1uLL)
      {
        *v145 = 8236;
        *((_QWORD *)v144 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v144, ", ", 2uLL);
      }
      MemorySpace = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)v162);
      if (MemorySpace)
        goto LABEL_252;
      goto LABEL_265;
    }
    if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v162[0] = a2;
      v123 = *(llvm::raw_ostream **)a1;
      v124 = *(_QWORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v124 > 7uLL)
      {
        *v124 = 0x3C78656C706D6F63;
        *((_QWORD *)v123 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v123, "complex<", 8uLL);
      }
      RHS = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v162);
      if (!RHS)
        goto LABEL_190;
      goto LABEL_139;
    }
    if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::TupleType,void>::id)
    {
      v162[0] = a2;
      v129 = *(llvm::raw_ostream **)a1;
      v130 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v130) > 5)
      {
        *(_WORD *)(v130 + 4) = 15461;
        *(_DWORD *)v130 = 1819309428;
        *((_QWORD *)v129 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v129, "tuple<", 6uLL);
      }
      Types = (uint64_t *)mlir::TupleType::getTypes((mlir::TupleType *)v162);
      if (v150)
      {
        v151 = Types;
        v152 = v150;
        v153 = *(llvm::raw_ostream **)a1;
        v154 = *Types;
        if (*Types)
        {
          if (!mlir::AsmPrinter::Impl::printAlias(a1, v154))
            mlir::AsmPrinter::Impl::printTypeImpl(a1, v154);
        }
        else
        {
          v155 = (void *)*((_QWORD *)v153 + 4);
          if (*((_QWORD *)v153 + 3) - (_QWORD)v155 > 0xCuLL)
          {
            qmemcpy(v155, "<<NULL TYPE>>", 13);
            *((_QWORD *)v153 + 4) += 13;
          }
          else
          {
            llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<<NULL TYPE>>", 0xDuLL);
          }
        }
        if (v152 != 1)
        {
          v156 = v151 + 1;
          v157 = 8 * v152 - 8;
          do
          {
            v158 = (_WORD *)*((_QWORD *)v153 + 4);
            if (*((_QWORD *)v153 + 3) - (_QWORD)v158 > 1uLL)
            {
              *v158 = 8236;
              *((_QWORD *)v153 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v153, ", ", 2uLL);
            }
            v159 = *v156;
            if (*v156)
            {
              if (!mlir::AsmPrinter::Impl::printAlias(a1, *v156))
                mlir::AsmPrinter::Impl::printTypeImpl(a1, v159);
            }
            else
            {
              v160 = *(llvm::raw_ostream **)a1;
              v161 = *(void **)(*(_QWORD *)a1 + 32);
              if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v161 > 0xCuLL)
              {
                qmemcpy(v161, "<<NULL TYPE>>", 13);
                *((_QWORD *)v160 + 4) += 13;
              }
              else
              {
                llvm::raw_ostream::write(v160, "<<NULL TYPE>>", 0xDuLL);
              }
            }
            ++v156;
            v157 -= 8;
          }
          while (v157);
        }
      }
      goto LABEL_269;
    }
    if (v3 != &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id)
    {
      mlir::AsmPrinter::Impl::printDialectType(a1, a2);
      return;
    }
    v12 = *(llvm::raw_ostream **)a1;
    v22 = *(int **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v22 <= 3uLL)
    {
      v14 = "none";
      v15 = 4;
      goto LABEL_35;
    }
    v24 = 1701736302;
    goto LABEL_55;
  }
  v162[0] = a2;
  v4 = *(llvm::raw_ostream **)a1;
  v5 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if ((unint64_t)v5 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
  {
    llvm::raw_ostream::write(v4, 40);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 40;
  }
  Inputs = (uint64_t *)mlir::FunctionType::getInputs((mlir::FunctionType *)v162);
  if (v35)
  {
    v36 = Inputs;
    v37 = v35;
    v38 = *(llvm::raw_ostream **)a1;
    if (*Inputs)
    {
      v39 = *Inputs;
      if (!mlir::AsmPrinter::Impl::printAlias(a1, *Inputs))
        mlir::AsmPrinter::Impl::printTypeImpl(a1, v39);
    }
    else
    {
      v55 = (void *)*((_QWORD *)v38 + 4);
      if (*((_QWORD *)v38 + 3) - (_QWORD)v55 > 0xCuLL)
      {
        qmemcpy(v55, "<<NULL TYPE>>", 13);
        *((_QWORD *)v38 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<<NULL TYPE>>", 0xDuLL);
      }
    }
    if (v37 != 1)
    {
      v87 = v36 + 1;
      v88 = 8 * v37 - 8;
      do
      {
        v89 = (_WORD *)*((_QWORD *)v38 + 4);
        if (*((_QWORD *)v38 + 3) - (_QWORD)v89 > 1uLL)
        {
          *v89 = 8236;
          *((_QWORD *)v38 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v38, ", ", 2uLL);
        }
        v90 = *v87;
        if (*v87)
        {
          if (!mlir::AsmPrinter::Impl::printAlias(a1, *v87))
            mlir::AsmPrinter::Impl::printTypeImpl(a1, v90);
        }
        else
        {
          v91 = *(llvm::raw_ostream **)a1;
          v92 = *(void **)(*(_QWORD *)a1 + 32);
          if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v92 > 0xCuLL)
          {
            qmemcpy(v92, "<<NULL TYPE>>", 13);
            *((_QWORD *)v91 + 4) += 13;
          }
          else
          {
            llvm::raw_ostream::write(v91, "<<NULL TYPE>>", 0xDuLL);
          }
        }
        ++v87;
        v88 -= 8;
      }
      while (v88);
    }
  }
  v76 = *(llvm::raw_ostream **)a1;
  v77 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v77) > 4)
  {
    *(_BYTE *)(v77 + 4) = 32;
    *(_DWORD *)v77 = 1043144745;
    *((_QWORD *)v76 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v76, ") -> ", 5uLL);
  }
  Results = (uint64_t *)mlir::FunctionType::getResults((mlir::FunctionType *)v162);
  v79 = Results;
  v81 = v80;
  if (v80 != 1
    || (v82 = *Results,
        *(_UNKNOWN **)(*(_QWORD *)*Results + 136) == &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id))
  {
    v83 = *(llvm::raw_ostream **)a1;
    v84 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if ((unint64_t)v84 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      llvm::raw_ostream::write(v83, 40);
    }
    else
    {
      *((_QWORD *)v83 + 4) = v84 + 1;
      *v84 = 40;
    }
    if (v81)
    {
      v85 = *(llvm::raw_ostream **)a1;
      v86 = *v79;
      if (*v79)
      {
        if (!mlir::AsmPrinter::Impl::printAlias(a1, *v79))
          mlir::AsmPrinter::Impl::printTypeImpl(a1, v86);
      }
      else
      {
        v93 = (void *)*((_QWORD *)v85 + 4);
        if (*((_QWORD *)v85 + 3) - (_QWORD)v93 > 0xCuLL)
        {
          qmemcpy(v93, "<<NULL TYPE>>", 13);
          *((_QWORD *)v85 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<<NULL TYPE>>", 0xDuLL);
        }
      }
      if (v81 != 1)
      {
        v98 = v79 + 1;
        v99 = 8 * v81 - 8;
        do
        {
          v100 = (_WORD *)*((_QWORD *)v85 + 4);
          if (*((_QWORD *)v85 + 3) - (_QWORD)v100 > 1uLL)
          {
            *v100 = 8236;
            *((_QWORD *)v85 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v85, ", ", 2uLL);
          }
          v101 = *v98;
          if (*v98)
          {
            if (!mlir::AsmPrinter::Impl::printAlias(a1, *v98))
              mlir::AsmPrinter::Impl::printTypeImpl(a1, v101);
          }
          else
          {
            v102 = *(llvm::raw_ostream **)a1;
            v103 = *(void **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v103 > 0xCuLL)
            {
              qmemcpy(v103, "<<NULL TYPE>>", 13);
              *((_QWORD *)v102 + 4) += 13;
            }
            else
            {
              llvm::raw_ostream::write(v102, "<<NULL TYPE>>", 0xDuLL);
            }
          }
          ++v98;
          v99 -= 8;
        }
        while (v99);
      }
    }
    v96 = *(llvm::raw_ostream **)a1;
    v97 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if ((unint64_t)v97 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      llvm::raw_ostream::write(v96, 41);
    }
    else
    {
      *((_QWORD *)v96 + 4) = v97 + 1;
      *v97 = 41;
    }
  }
  else if (!mlir::AsmPrinter::Impl::printAlias(a1, *Results))
  {
    mlir::AsmPrinter::Impl::printTypeImpl(a1, v82);
  }
}

uint64_t mlir::AsmPrinter::Impl::printOptionalAttrDict(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  llvm::raw_ostream **v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _WORD *v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  llvm::raw_ostream *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  llvm::raw_ostream *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _WORD *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  _BYTE *v39;
  uint64_t CallableRegion;
  uint64_t AttrData;
  uint64_t v42;
  __int128 v43;
  char *v44;
  int v45;
  llvm *v46;
  unsigned int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return result;
  v9 = (llvm::raw_ostream **)result;
  if (!a5)
  {
    if (a6)
    {
      v18 = *(llvm::raw_ostream **)result;
      v19 = *((_QWORD *)*v9 + 4);
      if ((unint64_t)(*((_QWORD *)*v9 + 3) - v19) > 0xA)
      {
        *(_DWORD *)(v19 + 7) = 1936028789;
        *(_QWORD *)v19 = *(_QWORD *)" attributes";
        *((_QWORD *)v18 + 4) += 11;
        v20 = *v9;
        v21 = (_WORD *)*((_QWORD *)*v9 + 4);
        if (*((_QWORD *)*v9 + 3) - (_QWORD)v21 <= 1uLL)
        {
LABEL_22:
          llvm::raw_ostream::write(v20, " {", 2uLL);
          v22 = *v9;
          mlir::AsmPrinter::Impl::printNamedAttribute(v9, *a2, a2[1]);
          if (a3 == 1)
          {
LABEL_30:
            result = (uint64_t)*v9;
            v30 = (_BYTE *)*((_QWORD *)*v9 + 4);
            if ((unint64_t)v30 >= *((_QWORD *)*v9 + 3))
              return (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)result, 125);
            *(_QWORD *)(result + 32) = v30 + 1;
            *v30 = 125;
            return result;
          }
LABEL_26:
          v23 = &a2[2 * a3];
          v24 = a2 + 2;
          do
          {
            while (1)
            {
              v27 = (_WORD *)*((_QWORD *)v22 + 4);
              if (*((_QWORD *)v22 + 3) - (_QWORD)v27 <= 1uLL)
                break;
              *v27 = 8236;
              *((_QWORD *)v22 + 4) += 2;
              v25 = *v24;
              v26 = v24[1];
              v24 += 2;
              mlir::AsmPrinter::Impl::printNamedAttribute(v9, v25, v26);
              if (v24 == v23)
                goto LABEL_30;
            }
            llvm::raw_ostream::write(v22, ", ", 2uLL);
            v28 = *v24;
            v29 = v24[1];
            v24 += 2;
            mlir::AsmPrinter::Impl::printNamedAttribute(v9, v28, v29);
          }
          while (v24 != v23);
          goto LABEL_30;
        }
LABEL_25:
        *v21 = 31520;
        *((_QWORD *)v20 + 4) += 2;
        v22 = *v9;
        mlir::AsmPrinter::Impl::printNamedAttribute(v9, *a2, a2[1]);
        if (a3 == 1)
          goto LABEL_30;
        goto LABEL_26;
      }
      llvm::raw_ostream::write(v18, " attributes", 0xBuLL);
    }
    v20 = *v9;
    v21 = (_WORD *)*((_QWORD *)*v9 + 4);
    if (*((_QWORD *)*v9 + 3) - (_QWORD)v21 <= 1uLL)
      goto LABEL_22;
    goto LABEL_25;
  }
  *(_QWORD *)&v43 = a4;
  AttrData = a4 + 16 * a5;
  llvm::detail::DenseSetImpl<llvm::StringRef,llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::DenseMapInfo<llvm::StringRef,void>>::DenseSetImpl<llvm::StringRef const*>((uint64_t)&v45, &v43, &AttrData);
  v10 = 0;
  v11 = 16 * a3;
  v12 = &a2[2 * a3];
  while (1)
  {
    v43 = *(_OWORD *)&a2[v10 / 8];
    CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v43);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
    v42 = v13;
    v44 = 0;
    result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t)&v45, (uint64_t)&AttrData, &v44);
    if ((result & 1) == 0)
      break;
    if ((v45 & 1) != 0)
    {
      if (v44 == (char *)&v48)
        break;
    }
    else if (v44 == (char *)v46 + 16 * v47)
    {
      break;
    }
    v10 += 16;
    if (v11 == v10)
      goto LABEL_62;
  }
  if (v11 == v10)
  {
LABEL_62:
    if ((v45 & 1) == 0)
      goto LABEL_63;
    return result;
  }
  if (a6)
  {
    v14 = *v9;
    v15 = *((_QWORD *)*v9 + 4);
    if ((unint64_t)(*((_QWORD *)*v9 + 3) - v15) > 0xA)
    {
      *(_DWORD *)(v15 + 7) = 1936028789;
      *(_QWORD *)v15 = *(_QWORD *)" attributes";
      *((_QWORD *)v14 + 4) += 11;
      v16 = *v9;
      v17 = (_WORD *)*((_QWORD *)*v9 + 4);
      if (*((_QWORD *)*v9 + 3) - (_QWORD)v17 <= 1uLL)
        goto LABEL_17;
      goto LABEL_34;
    }
    llvm::raw_ostream::write(v14, " attributes", 0xBuLL);
  }
  v16 = *v9;
  v17 = (_WORD *)*((_QWORD *)*v9 + 4);
  if (*((_QWORD *)*v9 + 3) - (_QWORD)v17 <= 1uLL)
  {
LABEL_17:
    llvm::raw_ostream::write(v16, " {", 2uLL);
    goto LABEL_35;
  }
LABEL_34:
  *v17 = 31520;
  *((_QWORD *)v16 + 4) += 2;
LABEL_35:
  v31 = *v9;
  v32 = &a2[v10 / 8 + 2];
  mlir::AsmPrinter::Impl::printNamedAttribute(v9, a2[v10 / 8], a2[v10 / 8 + 1]);
  if (v11 - 16 != v10)
  {
    v33 = v11 - v10 - 16;
    while (1)
    {
      v43 = *(_OWORD *)v32;
      CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v43);
      AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
      v42 = v34;
      v44 = 0;
      if ((llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t)&v45, (uint64_t)&AttrData, &v44) & 1) == 0)break;
      if ((v45 & 1) != 0)
      {
        if (v44 == (char *)&v48)
          break;
      }
      else if (v44 == (char *)v46 + 16 * v47)
      {
        break;
      }
      v32 += 2;
      v33 -= 16;
      if (!v33)
        goto LABEL_60;
    }
    if (v33)
    {
LABEL_48:
      v35 = (_WORD *)*((_QWORD *)v31 + 4);
      if (*((_QWORD *)v31 + 3) - (_QWORD)v35 > 1uLL)
      {
        *v35 = 8236;
        *((_QWORD *)v31 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v31, ", ", 2uLL);
      }
      mlir::AsmPrinter::Impl::printNamedAttribute(v9, *v32, v32[1]);
      while (1)
      {
        v32 += 2;
        if (v32 == v12)
          break;
        v43 = *(_OWORD *)v32;
        CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v43);
        AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
        v42 = v37;
        v44 = 0;
        if ((llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t)&v45, (uint64_t)&AttrData, &v44) & 1) != 0)
        {
          v38 = v44;
          if ((v45 & 1) != 0)
            v36 = (char *)&v48;
          else
            v36 = (char *)v46 + 16 * v47;
        }
        else
        {
          if ((v45 & 1) != 0)
          {
LABEL_47:
            if (v32 == v12)
              break;
            goto LABEL_48;
          }
          v36 = (char *)v46 + 16 * v47;
          v38 = v36;
        }
        if (v38 == v36)
          goto LABEL_47;
      }
    }
  }
LABEL_60:
  result = (uint64_t)*v9;
  v39 = (_BYTE *)*((_QWORD *)*v9 + 4);
  if ((unint64_t)v39 < *((_QWORD *)*v9 + 3))
  {
    *(_QWORD *)(result + 32) = v39 + 1;
    *v39 = 125;
    goto LABEL_62;
  }
  result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)result, 125);
  if ((v45 & 1) == 0)
LABEL_63:
    llvm::deallocate_buffer(v46, (void *)(16 * v47));
  return result;
}

double mlir::AsmPrinter::Impl::printNamedAttribute(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3)
{
  char *AttrData;
  size_t v5;
  double result;
  llvm::raw_ostream *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  uint64_t CallableRegion;
  uint64_t v13;
  uint64_t v14;

  v13 = a2;
  v14 = a3;
  CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v13);
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
  printKeywordOrString(AttrData, v5, *a1);
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    v7 = *a1;
    v8 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v8) > 2)
    {
      *(_BYTE *)(v8 + 2) = 32;
      *(_WORD *)v8 = 15648;
      *((_QWORD *)v7 + 4) += 3;
      v9 = v14;
      if (v14)
      {
LABEL_4:
          mlir::AsmPrinter::Impl::printAttributeImpl(a1, v9, 0);
        return result;
      }
    }
    else
    {
      llvm::raw_ostream::write(v7, " = ", 3uLL);
      v9 = v14;
      if (v14)
        goto LABEL_4;
    }
    v10 = *a1;
    v11 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v11) > 0x11)
    {
      *(_WORD *)(v11 + 16) = 15934;
      result = *(double *)"<<NULL ATTRIBUTE>>";
      *(_OWORD *)v11 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
      *((_QWORD *)v10 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v10, "<<NULL ATTRIBUTE>>", 0x12uLL);
    }
  }
  return result;
}

llvm::raw_ostream *printKeywordOrString(char *a1, size_t a2, _QWORD *a3)
{
  unsigned int v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  llvm::raw_ostream *result;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v14;
  _BYTE *v15;

  if (!a2)
    goto LABEL_21;
  v6 = *a1;
  v7 = MEMORY[0x1E0C80978];
  if ((v6 & 0x80000000) != 0)
  {
    if (!__maskrune(v6, 0x100uLL))
      goto LABEL_6;
LABEL_7:
    if (a2 == 1)
    {
      v9 = a3 + 4;
      v8 = (void *)a3[4];
      if ((void *)a3[3] == v8)
        return llvm::raw_ostream::write((llvm::raw_ostream *)a3, a1, a2);
      goto LABEL_9;
    }
    v11 = 1;
    while (1)
    {
      v12 = a1[v11];
      if (a1[v11] < 0)
      {
        if (!__maskrune(a1[v11], 0x500uLL))
        {
LABEL_16:
          if ((v12 - 36) > 0x3B || ((1 << (v12 - 36)) & 0x800000000000401) == 0)
            goto LABEL_21;
        }
      }
      else if ((*(_DWORD *)(v7 + 4 * v12 + 60) & 0x500) == 0)
      {
        goto LABEL_16;
      }
      if (a2 == ++v11)
      {
        v9 = a3 + 4;
        v8 = (void *)a3[4];
        if (a2 > a3[3] - (_QWORD)v8)
          return llvm::raw_ostream::write((llvm::raw_ostream *)a3, a1, a2);
LABEL_9:
        result = (llvm::raw_ostream *)memcpy(v8, a1, a2);
        *v9 += a2;
        return result;
      }
    }
  }
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v6 + 60) & 0x100) != 0)
    goto LABEL_7;
LABEL_6:
  if (*a1 == 95)
    goto LABEL_7;
LABEL_21:
  v14 = (_BYTE *)a3[4];
  if ((_BYTE *)a3[3] == v14)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)a3, "\"", 1uLL);
  }
  else
  {
    *v14 = 34;
    ++a3[4];
  }
  result = llvm::printEscapedString((llvm::raw_ostream *)a1, a2, (llvm::raw_ostream *)a3);
  v15 = (_BYTE *)a3[4];
  if ((unint64_t)v15 >= a3[3])
    return llvm::raw_ostream::write((llvm::raw_ostream *)a3, 34);
  a3[4] = v15 + 1;
  *v15 = 34;
  return result;
}

void mlir::AsmPrinter::Impl::printDialectType(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char *v7;
  size_t v8;
  _QWORD v9[2];
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  void **v23;
  char *v24;
  size_t v25;
  uint64_t v26;

  v4 = **a2;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v16 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v15 = &unk_1E0E22B10;
  v23 = (void **)&v24;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v15, 0, 0, 0);
  v5 = *(_QWORD *)(a1 + 8);
  v10[0] = &v15;
  v10[1] = v5;
  v13 = *(_QWORD *)(v5 + 648);
  v6 = *(_OWORD *)(v5 + 632);
  v11 = *(_OWORD *)(v5 + 616);
  v12 = v6;
  v14 = 1;
  v9[0] = off_1E0E2B7F0;
  v9[1] = v10;
  (*(void (**)(uint64_t, uint64_t **, _QWORD *))(*(_QWORD *)v4 + 56))(v4, a2, v9);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v15);
  if (v26 >= 0)
    v7 = (char *)&v24;
  else
    v7 = v24;
  if (v26 >= 0)
    v8 = HIBYTE(v26);
  else
    v8 = v25;
  printDialectSymbol(*(llvm::raw_ostream **)a1, "!", 1uLL, *(const char **)(v4 + 8), *(_QWORD *)(v4 + 16), v7, v8);
  if (SHIBYTE(v26) < 0)
    operator delete(v24);
}

void mlir::AsmPrinter::Impl::printHexString(llvm::raw_ostream **a1, unsigned __int8 *a2, size_t a3)
{
  llvm::raw_ostream *v5;
  uint64_t v6;
  void **v7;
  size_t v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  v5 = *a1;
  v6 = *((_QWORD *)*a1 + 4);
  if ((unint64_t)(*((_QWORD *)*a1 + 3) - v6) > 2)
  {
    *(_BYTE *)(v6 + 2) = 120;
    *(_WORD *)v6 = 12322;
    *((_QWORD *)v5 + 4) += 3;
  }
  else
  {
    v5 = llvm::raw_ostream::write(*a1, "\"0x", 3uLL);
  }
  llvm::toHex(a3, a2, 0, __p);
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v8 = v12;
  else
    v8 = (size_t)__p[1];
  v9 = llvm::raw_ostream::write(v5, (const char *)v7, v8);
  v10 = (_BYTE *)*((_QWORD *)v9 + 4);
  if (*((_BYTE **)v9 + 3) != v10)
  {
    *v10 = 34;
    ++*((_QWORD *)v9 + 4);
    if (((char)v12 & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(__p[0]);
    return;
  }
  llvm::raw_ostream::write(v9, "\"", 1uLL);
  if ((char)v12 < 0)
    goto LABEL_14;
}

uint64_t mlir::AsmPrinter::getStream(mlir::AsmPrinter *this)
{
  return **((_QWORD **)this + 1);
}

void mlir::AsmPrinter::printFloat(llvm::raw_ostream ***this, const llvm::APFloat *a2)
{
  printFloatValue(a2, *this[1]);
}

void mlir::AsmPrinter::printType(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  llvm::raw_ostream *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (a2)
  {
    if (!mlir::AsmPrinter::Impl::printAlias(*(_QWORD *)(a1 + 8), (uint64_t)a2))
      mlir::AsmPrinter::Impl::printTypeImpl(v2, a2);
  }
  else
  {
    v4 = *(llvm::raw_ostream **)v2;
    v5 = *(void **)(*(_QWORD *)v2 + 32);
    if (*(_QWORD *)(*(_QWORD *)v2 + 24) - (_QWORD)v5 > 0xCuLL)
    {
      qmemcpy(v5, "<<NULL TYPE>>", 13);
      *((_QWORD *)v4 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v4, "<<NULL TYPE>>", 0xDuLL);
    }
  }
}

double mlir::AsmPrinter::printAttribute(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  double result;
  llvm::raw_ostream *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (a2)
  {
  }
  else
  {
    v5 = *(llvm::raw_ostream **)v2;
    v6 = *(_QWORD *)(*(_QWORD *)v2 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v2 + 24) - v6) > 0x11)
    {
      *(_WORD *)(v6 + 16) = 15934;
      result = *(double *)"<<NULL ATTRIBUTE>>";
      *(_OWORD *)v6 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
      *((_QWORD *)v5 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v5, "<<NULL ATTRIBUTE>>", 0x12uLL);
    }
  }
  return result;
}

uint64_t mlir::AsmPrinter::printAlias(uint64_t a1, uint64_t a2)
{
}

{
  return mlir::AsmPrinter::Impl::printAlias(*(_QWORD *)(a1 + 8), a2);
}

double mlir::AsmPrinter::printAttributeWithoutType(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  double result;
  llvm::raw_ostream *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (a2)
  {
  }
  else
  {
    v5 = *(llvm::raw_ostream **)v2;
    v6 = *(_QWORD *)(*(_QWORD *)v2 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v2 + 24) - v6) > 0x11)
    {
      *(_WORD *)(v6 + 16) = 15934;
      result = *(double *)"<<NULL ATTRIBUTE>>";
      *(_OWORD *)v6 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
      *((_QWORD *)v5 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v5, "<<NULL ATTRIBUTE>>", 0x12uLL);
    }
  }
  return result;
}

llvm::raw_ostream *mlir::AsmPrinter::printKeywordOrString(uint64_t a1, char *a2, size_t a3)
{
  return printKeywordOrString(a2, a3, **(_QWORD ***)(a1 + 8));
}

llvm::raw_ostream *mlir::AsmPrinter::printString(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *result;
  _BYTE *v10;

  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 34);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 34;
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  llvm::printEscapedString(a2, a3, v8);
  result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v10 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v10 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 34);
  *((_QWORD *)result + 4) = v10 + 1;
  *v10 = 34;
  return result;
}

double mlir::AsmPrinter::printSymbolName(uint64_t a1, char *a2, size_t a3)
{
  _QWORD *v3;
  _BYTE *v6;
  void *v7;
  double result;

  v3 = **(_QWORD ***)(a1 + 8);
  if (a3)
  {
    v6 = (_BYTE *)v3[4];
    if ((unint64_t)v6 >= v3[3])
    {
      llvm::raw_ostream::write(**(llvm::raw_ostream ***)(a1 + 8), 64);
    }
    else
    {
      v3[4] = v6 + 1;
      *v6 = 64;
    }
    printKeywordOrString(a2, a3, v3);
  }
  else
  {
    v7 = (void *)v3[4];
    if (v3[3] - (_QWORD)v7 > 0x18uLL)
    {
      qmemcpy(v7, "@<<INVALID EMPTY SYMBOL>>", 25);
      result = *(double *)"D EMPTY SYMBOL>>";
      v3[4] += 25;
    }
    else
    {
      llvm::raw_ostream::write(**(llvm::raw_ostream ***)(a1 + 8), "@<<INVALID EMPTY SYMBOL>>", 0x19uLL);
    }
  }
  return result;
}

uint64_t mlir::AsmPrinter::printResourceHandle(uint64_t a1, uint64_t *a2)
{
  return mlir::AsmPrinter::Impl::printResourceHandle(*(_QWORD *)(a1 + 8), a2);
}

uint64_t mlir::AsmPrinter::pushCyclicPrinting(mlir::AsmPrinter *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[16];
  unsigned __int8 v9;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v7 = a2;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>((int64x2_t *)(v2 + 664), &v7, (uint64_t)v8);
  v3 = v9;
  if (v9)
  {
    v4 = v7;
    v5 = *(unsigned int *)(v2 + 696);
    if (v5 >= *(_DWORD *)(v2 + 700))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 688, (void *)(v2 + 704), v5 + 1, 8);
      LODWORD(v5) = *(_DWORD *)(v2 + 696);
    }
    *(_QWORD *)(*(_QWORD *)(v2 + 688) + 8 * v5) = v4;
    ++*(_DWORD *)(v2 + 696);
  }
  return v3;
}

uint64_t mlir::AsmPrinter::popCyclicPrinting(uint64_t this)
{
  int32x2_t *v1;
  __int32 v2;
  int32x2_t v3;
  uint64_t v4;
  uint64_t v5;
  __int32 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;

  v1 = *(int32x2_t **)(*(_QWORD *)(this + 8) + 8);
  v2 = v1[85].i32[0];
  if (v2)
  {
    v3 = v1[83];
    v4 = v1[87].u32[0];
    v5 = *(_QWORD *)(*(_QWORD *)&v1[86] + 8 * v4 - 8);
    v6 = v2 - 1;
    LODWORD(v7) = ((v5 >> 4) ^ (v5 >> 9)) & (v2 - 1);
    v8 = (uint64_t *)(*(_QWORD *)&v3 + 8 * v7);
    v9 = *v8;
    if (v5 == *v8)
    {
LABEL_3:
      *v8 = -8192;
      v1[84] = vadd_s32(v1[84], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v10 = 1;
      while (v9 != -4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & v6;
        v9 = *(_QWORD *)(*(_QWORD *)&v3 + 8 * v7);
        if (v5 == v9)
        {
          v8 = (uint64_t *)(*(_QWORD *)&v3 + 8 * v7);
          goto LABEL_3;
        }
      }
    }
    v1[87].i32[0] = v4 - 1;
  }
  else
  {
    --v1[87].i32[0];
  }
  return this;
}

llvm::raw_ostream *mlir::AsmPrinter::Impl::printAffineExprInternal(llvm::raw_ostream **a1, uint64_t a2, int a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  char v9;
  const char *v10;
  uint64_t v11;
  uint64_t RHS;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  unint64_t LHS;
  llvm::raw_ostream *result;
  uint64_t Position;
  llvm::raw_ostream *v21;
  size_t v22;
  void *v23;
  llvm::raw_ostream **v24;
  uint64_t v25;
  uint64_t v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  llvm::raw_ostream *v29;
  char *v30;
  char v31;
  uint64_t v32;
  llvm::raw_ostream *v33;
  mlir::AffineBinaryOpExpr *v34;
  llvm::raw_ostream *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _BOOL8 v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v46 = a2;
  switch(mlir::AffineExpr::getKind((mlir::AffineExpr *)&v46))
  {
    case 0u:
      v9 = 0;
      v10 = " + ";
      goto LABEL_8;
    case 1u:
      v9 = 0;
      v10 = " * ";
      goto LABEL_8;
    case 2u:
      v9 = 0;
      v10 = " mod ";
      goto LABEL_8;
    case 3u:
      v9 = 0;
      v10 = " floordiv ";
      goto LABEL_8;
    case 4u:
      v9 = 0;
      v10 = " ceildiv ";
      goto LABEL_8;
    case 5u:
      v17 = *a1;
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, v46);
      LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v47);
      return llvm::raw_ostream::operator<<(v17, LHS);
    case 6u:
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, v46);
      Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v47);
      if (a4)
        return (llvm::raw_ostream *)a4(a5, Position, 0);
      v29 = *a1;
      v30 = (char *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v30 < *((_QWORD *)*a1 + 3))
      {
        *((_QWORD *)v29 + 4) = v30 + 1;
        v31 = 100;
        goto LABEL_50;
      }
      v39 = 100;
      goto LABEL_73;
    case 7u:
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, v46);
      Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v47);
      if (a4)
        return (llvm::raw_ostream *)a4(a5, Position, 1);
      v29 = *a1;
      v30 = (char *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v30 >= *((_QWORD *)*a1 + 3))
      {
        v39 = 115;
LABEL_73:
        v29 = llvm::raw_ostream::write(v29, v39);
      }
      else
      {
        *((_QWORD *)v29 + 4) = v30 + 1;
        v31 = 115;
LABEL_50:
        *v30 = v31;
      }
      return llvm::raw_ostream::operator<<(v29, Position);
    default:
      v10 = 0;
      v9 = 1;
LABEL_8:
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, v46);
      v45 = v47;
      v11 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v45);
      RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v45);
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v45))
      {
        if (a3 == 1)
        {
          v13 = *a1;
          v14 = (_BYTE *)*((_QWORD *)*a1 + 4);
          if ((unint64_t)v14 >= *((_QWORD *)*a1 + 3))
          {
            llvm::raw_ostream::write(v13, 40);
            v47 = RHS;
            if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) == 5)
            {
LABEL_13:
              mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, RHS);
              if (!v47)
                goto LABEL_30;
LABEL_28:
              if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v45) == 1
                && mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v47) == -1)
              {
                v27 = *a1;
                v28 = (_BYTE *)*((_QWORD *)*a1 + 4);
                if (*((_BYTE **)*a1 + 3) == v28)
                {
                  llvm::raw_ostream::write(v27, "-", 1uLL);
                }
                else
                {
                  *v28 = 45;
                  ++*((_QWORD *)v27 + 4);
                }
                v24 = a1;
                v25 = v11;
                goto LABEL_36;
              }
LABEL_30:
              mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v11, 1, a4, a5);
              if ((v9 & 1) == 0)
              {
                v21 = *a1;
                v22 = strlen(v10);
                v23 = (void *)*((_QWORD *)*a1 + 4);
                if (v22 <= *((_QWORD *)*a1 + 3) - (_QWORD)v23)
                {
                  if (v22)
                  {
                    memcpy(v23, v10, v22);
                    *((_QWORD *)v21 + 4) += v22;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v21, v10, v22);
                }
              }
              v24 = a1;
              v25 = RHS;
LABEL_36:
              result = (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printAffineExprInternal(v24, v25, 1, a4, a5);
              if (a3 != 1)
                return result;
              goto LABEL_78;
            }
LABEL_27:
            mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, 0);
            if (!v47)
              goto LABEL_30;
            goto LABEL_28;
          }
          *((_QWORD *)v13 + 4) = v14 + 1;
          *v14 = 40;
        }
        v47 = RHS;
        if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) == 5)
          goto LABEL_13;
        goto LABEL_27;
      }
      if (a3 != 1)
        goto LABEL_18;
      v15 = *a1;
      v16 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)*a1 + 3))
      {
        llvm::raw_ostream::write(v15, 40);
        v47 = RHS;
        if ((int)mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) < 5)
          goto LABEL_19;
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 40;
LABEL_18:
        v47 = RHS;
        if ((int)mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) < 5)
        {
LABEL_19:
          mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, RHS);
          v44 = v47;
          if (!v47)
            goto LABEL_55;
          goto LABEL_40;
        }
      }
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, 0);
      v44 = v47;
      if (!v47)
        goto LABEL_55;
LABEL_40:
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v44) != 1)
        goto LABEL_55;
      v26 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v44);
      v47 = v26;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) == 5)
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, v26);
        v43 = v47;
        if (!v47)
          goto LABEL_55;
      }
      else
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, 0);
        v43 = v47;
        if (!v47)
          goto LABEL_55;
      }
      if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v43) == -1)
      {
        mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v11, 0, a4, a5);
        llvm::raw_ostream::operator<<(*a1, " - ");
        v47 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v44);
        v40 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) == 0;
        v41 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v44);
        result = (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v41, v40, a4, a5);
        if (a3 != 1)
          return result;
        goto LABEL_78;
      }
      if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v43) <= -2)
      {
        mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v11, 0, a4, a5);
        llvm::raw_ostream::operator<<(*a1, " - ");
        v32 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v44);
        mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v32, 1, a4, a5);
        v33 = llvm::raw_ostream::operator<<(*a1, " * ");
        v34 = (mlir::AffineBinaryOpExpr *)&v43;
        goto LABEL_69;
      }
LABEL_55:
      v47 = RHS;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) != 5)
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, 0);
        v44 = v47;
        if (!v47)
          goto LABEL_60;
        goto LABEL_59;
      }
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, RHS);
      v44 = v47;
      if (v47)
      {
LABEL_59:
        if ((mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v44) & 0x8000000000000000) == 0)
          goto LABEL_60;
        mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v11, 0, a4, a5);
        v33 = *a1;
        v37 = *((_QWORD *)*a1 + 4);
        if ((unint64_t)(*((_QWORD *)*a1 + 3) - v37) > 2)
        {
          *(_BYTE *)(v37 + 2) = 32;
          *(_WORD *)v37 = 11552;
          *((_QWORD *)v33 + 4) += 3;
        }
        else
        {
          v33 = llvm::raw_ostream::write(*a1, " - ", 3uLL);
        }
        v34 = (mlir::AffineBinaryOpExpr *)&v44;
LABEL_69:
        v38 = mlir::AffineBinaryOpExpr::getLHS(v34);
        result = llvm::raw_ostream::operator<<(v33, -v38);
        if (a3 != 1)
          return result;
        goto LABEL_78;
      }
LABEL_60:
      mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v11, 0, a4, a5);
      v35 = *a1;
      v36 = *((_QWORD *)*a1 + 4);
      if ((unint64_t)(*((_QWORD *)*a1 + 3) - v36) > 2)
      {
        *(_BYTE *)(v36 + 2) = 32;
        *(_WORD *)v36 = 11040;
        *((_QWORD *)v35 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v35, " + ", 3uLL);
      }
      result = (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printAffineExprInternal(a1, RHS, 0, a4, a5);
      if (a3 == 1)
      {
LABEL_78:
        result = *a1;
        v42 = (_BYTE *)*((_QWORD *)*a1 + 4);
        if ((unint64_t)v42 >= *((_QWORD *)*a1 + 3))
        {
          return llvm::raw_ostream::write(result, 41);
        }
        else
        {
          *((_QWORD *)result + 4) = v42 + 1;
          *v42 = 41;
        }
      }
      return result;
  }
}

llvm::raw_ostream *mlir::AsmPrinter::Impl::printAffineMap(llvm::raw_ostream **a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  _BYTE *v4;
  unint64_t v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  int NumDims;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  unint64_t v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  llvm::raw_ostream *v21;
  _WORD *v22;
  llvm::raw_ostream *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  int NumSymbols;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  llvm::raw_ostream *v29;
  uint64_t v30;
  uint64_t *Results;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  llvm::raw_ostream *v36;
  uint64_t v37;
  llvm::raw_ostream *result;
  _BYTE *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _WORD *v43;
  uint64_t v44;

  v44 = a2;
  v3 = *a1;
  v4 = (_BYTE *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, 40);
    if ((int)mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44) < 2)
      goto LABEL_12;
    goto LABEL_5;
  }
  *((_QWORD *)v3 + 4) = v4 + 1;
  *v4 = 40;
  if ((int)mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44) >= 2)
  {
LABEL_5:
    v5 = 0;
    while (1)
    {
      v6 = *a1;
      v7 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v7 >= *((_QWORD *)*a1 + 3))
      {
        v10 = llvm::raw_ostream::write(v6, 100);
        v8 = llvm::raw_ostream::operator<<(v10, v5);
        v9 = (_WORD *)*((_QWORD *)v8 + 4);
        if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
          goto LABEL_6;
LABEL_11:
        llvm::raw_ostream::write(v8, ", ", 2uLL);
        if ((uint64_t)++v5 >= (int)(mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44) - 1))
          break;
      }
      else
      {
        *((_QWORD *)v6 + 4) = v7 + 1;
        *v7 = 100;
        v8 = llvm::raw_ostream::operator<<(v6, v5);
        v9 = (_WORD *)*((_QWORD *)v8 + 4);
        if (*((_QWORD *)v8 + 3) - (_QWORD)v9 <= 1uLL)
          goto LABEL_11;
LABEL_6:
        *v9 = 8236;
        *((_QWORD *)v8 + 4) += 2;
        if ((uint64_t)++v5 >= (int)(mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44) - 1))
          break;
      }
    }
  }
LABEL_12:
  if (mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44))
  {
    v11 = *a1;
    v12 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)*a1 + 3))
    {
      v11 = llvm::raw_ostream::write(*a1, 100);
    }
    else
    {
      *((_QWORD *)v11 + 4) = v12 + 1;
      *v12 = 100;
    }
    NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44);
    llvm::raw_ostream::operator<<(v11, (NumDims - 1));
  }
  v14 = *a1;
  v15 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v14, 41);
    if (!mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44))
      goto LABEL_39;
  }
  else
  {
    *((_QWORD *)v14 + 4) = v15 + 1;
    *v15 = 41;
    if (!mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44))
    {
LABEL_39:
      v29 = *a1;
      v30 = *((_QWORD *)*a1 + 4);
      if ((unint64_t)(*((_QWORD *)*a1 + 3) - v30) <= 4)
        goto LABEL_40;
      goto LABEL_43;
    }
  }
  v16 = *a1;
  v17 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v16, 91);
    if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44) == 1)
      goto LABEL_32;
    goto LABEL_25;
  }
  *((_QWORD *)v16 + 4) = v17 + 1;
  *v17 = 91;
  if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44) != 1)
  {
LABEL_25:
    v18 = 0;
    while (1)
    {
      v19 = *a1;
      v20 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v20 >= *((_QWORD *)*a1 + 3))
      {
        v23 = llvm::raw_ostream::write(v19, 115);
        v21 = llvm::raw_ostream::operator<<(v23, v18);
        v22 = (_WORD *)*((_QWORD *)v21 + 4);
        if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 1uLL)
          goto LABEL_26;
LABEL_31:
        llvm::raw_ostream::write(v21, ", ", 2uLL);
        if (++v18 >= mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44) - 1)
          break;
      }
      else
      {
        *((_QWORD *)v19 + 4) = v20 + 1;
        *v20 = 115;
        v21 = llvm::raw_ostream::operator<<(v19, v18);
        v22 = (_WORD *)*((_QWORD *)v21 + 4);
        if (*((_QWORD *)v21 + 3) - (_QWORD)v22 <= 1uLL)
          goto LABEL_31;
LABEL_26:
        *v22 = 8236;
        *((_QWORD *)v21 + 4) += 2;
        if (++v18 >= mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44) - 1)
          break;
      }
    }
  }
LABEL_32:
  if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44))
  {
    v24 = *a1;
    v25 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v25 >= *((_QWORD *)*a1 + 3))
    {
      v24 = llvm::raw_ostream::write(*a1, 115);
    }
    else
    {
      *((_QWORD *)v24 + 4) = v25 + 1;
      *v25 = 115;
    }
    NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44);
    llvm::raw_ostream::operator<<(v24, (NumSymbols - 1));
  }
  v27 = *a1;
  v28 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v28 < *((_QWORD *)*a1 + 3))
  {
    *((_QWORD *)v27 + 4) = v28 + 1;
    *v28 = 93;
    goto LABEL_39;
  }
  llvm::raw_ostream::write(v27, 93);
  v29 = *a1;
  v30 = *((_QWORD *)*a1 + 4);
  if ((unint64_t)(*((_QWORD *)*a1 + 3) - v30) <= 4)
  {
LABEL_40:
    llvm::raw_ostream::write(v29, " -> (", 5uLL);
    Results = (uint64_t *)mlir::AffineMap::getResults((mlir::AffineMap *)&v44);
    if (!v32)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_43:
  *(_BYTE *)(v30 + 4) = 40;
  *(_DWORD *)v30 = 540945696;
  *((_QWORD *)v29 + 4) += 5;
  Results = (uint64_t *)mlir::AffineMap::getResults((mlir::AffineMap *)&v44);
  if (!v32)
    goto LABEL_45;
LABEL_44:
  v34 = Results;
  v35 = v32;
  v36 = *a1;
  mlir::AsmPrinter::Impl::printAffineExprInternal(a1, *Results, 0, 0, v33);
  if (v35 != 1)
  {
    v40 = v34 + 1;
    v41 = 8 * v35 - 8;
    do
    {
      v43 = (_WORD *)*((_QWORD *)v36 + 4);
      if (*((_QWORD *)v36 + 3) - (_QWORD)v43 > 1uLL)
      {
        *v43 = 8236;
        *((_QWORD *)v36 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v36, ", ", 2uLL);
      }
      v42 = *v40++;
      mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v42, 0, 0, v37);
      v41 -= 8;
    }
    while (v41);
  }
LABEL_45:
  result = *a1;
  v39 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v39 >= *((_QWORD *)*a1 + 3))
    return llvm::raw_ostream::write(result, 41);
  *((_QWORD *)result + 4) = v39 + 1;
  *v39 = 41;
  return result;
}

llvm::raw_ostream *mlir::AsmPrinter::Impl::printIntegerSet(llvm::raw_ostream **a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  _BYTE *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _WORD *v11;
  llvm::raw_ostream *v12;
  unsigned int NumDims;
  unint64_t v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  int v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  llvm::raw_ostream *v20;
  _DWORD *v21;
  int Position;
  int v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  unint64_t v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  llvm::raw_ostream *v29;
  _WORD *v30;
  llvm::raw_ostream *v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  int NumSymbols;
  llvm::raw_ostream *v35;
  _BYTE *v36;
  unsigned int i;
  uint64_t Constraint;
  int isEq;
  uint64_t v40;
  llvm::raw_ostream *v41;
  uint64_t v42;
  unint64_t v43;
  const char *v44;
  llvm::raw_ostream *v45;
  _WORD *v46;
  unsigned __int16 v47;
  BOOL v48;
  signed int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  llvm::raw_ostream *v53;
  uint64_t v54;
  unint64_t v55;
  const char *v56;
  llvm::raw_ostream *result;
  _BYTE *v58;
  unsigned __int16 v59;
  uint64_t v60;

  v60 = a2;
  v3 = *a1;
  v4 = (_BYTE *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, 40);
    if (mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60) < 2)
      goto LABEL_12;
    goto LABEL_5;
  }
  *((_QWORD *)v3 + 4) = v4 + 1;
  *v4 = 40;
  if (mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60) >= 2)
  {
LABEL_5:
    v5 = 0;
    while (1)
    {
      v8 = *a1;
      v9 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v9 >= *((_QWORD *)*a1 + 3))
      {
        v12 = llvm::raw_ostream::write(v8, 100);
        v10 = llvm::raw_ostream::operator<<(v12, v5);
        v11 = (_WORD *)*((_QWORD *)v10 + 4);
        if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
          goto LABEL_6;
LABEL_11:
        llvm::raw_ostream::write(v10, ", ", 2uLL);
        NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60);
        v14 = v5 + 2;
        ++v5;
        if (v14 >= NumDims)
          break;
      }
      else
      {
        *((_QWORD *)v8 + 4) = v9 + 1;
        *v9 = 100;
        v10 = llvm::raw_ostream::operator<<(v8, v5);
        v11 = (_WORD *)*((_QWORD *)v10 + 4);
        if (*((_QWORD *)v10 + 3) - (_QWORD)v11 <= 1uLL)
          goto LABEL_11;
LABEL_6:
        *v11 = 8236;
        *((_QWORD *)v10 + 4) += 2;
        v6 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60);
        v7 = v5 + 2;
        ++v5;
        if (v7 >= v6)
          break;
      }
    }
  }
LABEL_12:
  if (mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60))
  {
    v15 = *a1;
    v16 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v16 >= *((_QWORD *)*a1 + 3))
    {
      v15 = llvm::raw_ostream::write(*a1, 100);
    }
    else
    {
      *((_QWORD *)v15 + 4) = v16 + 1;
      *v16 = 100;
    }
    v17 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60);
    llvm::raw_ostream::operator<<(v15, (v17 - 1));
  }
  v18 = *a1;
  v19 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v18, 41);
    if (!mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60))
    {
LABEL_19:
      v20 = *a1;
      v21 = (_DWORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v21 <= 3uLL)
        goto LABEL_20;
LABEL_43:
      *v21 = 673200672;
      *((_QWORD *)v20 + 4) += 4;
      Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v60);
      v23 = Position - 1;
      if (Position <= 1)
        goto LABEL_57;
      goto LABEL_44;
    }
  }
  else
  {
    *((_QWORD *)v18 + 4) = v19 + 1;
    *v19 = 41;
    if (!mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60))
      goto LABEL_19;
  }
  v24 = *a1;
  v25 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v25 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v24, 91);
    if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60) == 1)
      goto LABEL_34;
    goto LABEL_27;
  }
  *((_QWORD *)v24 + 4) = v25 + 1;
  *v25 = 91;
  if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60) != 1)
  {
LABEL_27:
    v26 = 0;
    while (1)
    {
      v27 = *a1;
      v28 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v28 >= *((_QWORD *)*a1 + 3))
      {
        v31 = llvm::raw_ostream::write(v27, 115);
        v29 = llvm::raw_ostream::operator<<(v31, v26);
        v30 = (_WORD *)*((_QWORD *)v29 + 4);
        if (*((_QWORD *)v29 + 3) - (_QWORD)v30 > 1uLL)
          goto LABEL_28;
LABEL_33:
        llvm::raw_ostream::write(v29, ", ", 2uLL);
        if (++v26 >= mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60) - 1)
          break;
      }
      else
      {
        *((_QWORD *)v27 + 4) = v28 + 1;
        *v28 = 115;
        v29 = llvm::raw_ostream::operator<<(v27, v26);
        v30 = (_WORD *)*((_QWORD *)v29 + 4);
        if (*((_QWORD *)v29 + 3) - (_QWORD)v30 <= 1uLL)
          goto LABEL_33;
LABEL_28:
        *v30 = 8236;
        *((_QWORD *)v29 + 4) += 2;
        if (++v26 >= mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60) - 1)
          break;
      }
    }
  }
LABEL_34:
  if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60))
  {
    v32 = *a1;
    v33 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v33 >= *((_QWORD *)*a1 + 3))
    {
      v32 = llvm::raw_ostream::write(*a1, 115);
    }
    else
    {
      *((_QWORD *)v32 + 4) = v33 + 1;
      *v33 = 115;
    }
    NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60);
    llvm::raw_ostream::operator<<(v32, (NumSymbols - 1));
  }
  v35 = *a1;
  v36 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v36 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v35, 93);
    v20 = *a1;
    v21 = (_DWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v21 > 3uLL)
      goto LABEL_43;
  }
  else
  {
    *((_QWORD *)v35 + 4) = v36 + 1;
    *v36 = 93;
    v20 = *a1;
    v21 = (_DWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v21 > 3uLL)
      goto LABEL_43;
  }
LABEL_20:
  llvm::raw_ostream::write(v20, " : (", 4uLL);
  Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v60);
  v23 = Position - 1;
  if (Position > 1)
  {
LABEL_44:
    for (i = 0; v23 != i; ++i)
    {
      while (1)
      {
        Constraint = mlir::IntegerSet::getConstraint((mlir::IntegerSet *)&v60, i);
        isEq = mlir::IntegerSet::isEq((mlir::IntegerSet *)&v60, i);
        mlir::AsmPrinter::Impl::printAffineExprInternal(a1, Constraint, 0, 0, v40);
        v41 = *a1;
        v42 = *((_QWORD *)*a1 + 4);
        v43 = *((_QWORD *)*a1 + 3) - v42;
        if (!isEq)
          break;
        if (v43 <= 4)
        {
          v44 = " == 0";
          goto LABEL_51;
        }
        *(_BYTE *)(v42 + 4) = 48;
        v47 = 15648;
LABEL_55:
        *(_DWORD *)v42 = v47 | 0x203D0000;
        *((_QWORD *)v41 + 4) += 5;
        v45 = *a1;
        v46 = (_WORD *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v46 > 1uLL)
          goto LABEL_45;
LABEL_56:
        llvm::raw_ostream::write(v45, ", ", 2uLL);
        if (v23 == ++i)
          goto LABEL_57;
      }
      if (v43 > 4)
      {
        *(_BYTE *)(v42 + 4) = 48;
        v47 = 15904;
        goto LABEL_55;
      }
      v44 = " >= 0";
LABEL_51:
      llvm::raw_ostream::write(v41, v44, 5uLL);
      v45 = *a1;
      v46 = (_WORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v46 <= 1uLL)
        goto LABEL_56;
LABEL_45:
      *v46 = 8236;
      *((_QWORD *)v45 + 4) += 2;
    }
  }
LABEL_57:
  v48 = __OFSUB__(Position, 1);
  v49 = Position - 1;
  if (v49 < 0 != v48)
    goto LABEL_64;
  v50 = mlir::IntegerSet::getConstraint((mlir::IntegerSet *)&v60, v49);
  v51 = mlir::IntegerSet::isEq((mlir::IntegerSet *)&v60, v49);
  mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v50, 0, 0, v52);
  v53 = *a1;
  v54 = *((_QWORD *)*a1 + 4);
  v55 = *((_QWORD *)*a1 + 3) - v54;
  if (!v51)
  {
    if (v55 <= 4)
    {
      v56 = " >= 0";
      goto LABEL_63;
    }
    *(_BYTE *)(v54 + 4) = 48;
    v59 = 15904;
LABEL_68:
    *(_DWORD *)v54 = v59 | 0x203D0000;
    *((_QWORD *)v53 + 4) += 5;
    result = *a1;
    v58 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v58 < *((_QWORD *)*a1 + 3))
      goto LABEL_65;
    return llvm::raw_ostream::write(result, 41);
  }
  if (v55 > 4)
  {
    *(_BYTE *)(v54 + 4) = 48;
    v59 = 15648;
    goto LABEL_68;
  }
  v56 = " == 0";
LABEL_63:
  llvm::raw_ostream::write(v53, v56, 5uLL);
LABEL_64:
  result = *a1;
  v58 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v58 < *((_QWORD *)*a1 + 3))
  {
LABEL_65:
    *((_QWORD *)result + 4) = v58 + 1;
    *v58 = 41;
    return result;
  }
  return llvm::raw_ostream::write(result, 41);
}

double mlir::Attribute::print(mlir::Attribute *this, llvm::raw_ostream *a2, int a3)
{
  mlir::MLIRContext *Context;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t **v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  if (*(_QWORD *)this)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext(this);
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&v17);
    v7 = (char *)operator new(0x2C0uLL);
    v8 = mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::DialectInterfaceCollection(v7, Context);
    *(_QWORD *)(v8 + 56) = v8 + 72;
    *(_QWORD *)(v8 + 64) = 0x600000000;
    *(_OWORD *)(v8 + 120) = 0u;
    *(_DWORD *)(v8 + 136) = 0;
    *(_OWORD *)(v8 + 144) = 0u;
    v9 = (uint64_t *)(v8 + 144);
    *(_DWORD *)(v8 + 160) = 0;
    *(_OWORD *)(v8 + 184) = 0u;
    *(_QWORD *)(v8 + 168) = v8 + 184;
    *(_QWORD *)(v8 + 176) = 0;
    *(_QWORD *)(v8 + 200) = v8 + 216;
    *(_QWORD *)(v8 + 208) = 0x400000000;
    *(_QWORD *)(v8 + 248) = v8 + 264;
    *(_OWORD *)(v8 + 256) = 0u;
    *(_QWORD *)(v8 + 272) = 1;
    *(_OWORD *)(v8 + 280) = 0u;
    *(_DWORD *)(v8 + 296) = 0;
    *(_DWORD *)(v8 + 320) = 0;
    *(_OWORD *)(v8 + 304) = 0u;
    *(_DWORD *)(v8 + 344) = 0;
    *(_OWORD *)(v8 + 328) = 0u;
    *(_DWORD *)(v8 + 368) = 0;
    *(_OWORD *)(v8 + 352) = 0u;
    *(_DWORD *)(v8 + 392) = 0;
    *(_OWORD *)(v8 + 376) = 0u;
    *(_DWORD *)(v8 + 416) = 0;
    *(_OWORD *)(v8 + 400) = 0u;
    *(_OWORD *)(v8 + 424) = 0u;
    *(_QWORD *)(v8 + 440) = 0;
    *(_QWORD *)(v8 + 448) = v8 + 464;
    *(_QWORD *)(v8 + 456) = 0x400000000;
    *(_QWORD *)(v8 + 496) = v8 + 512;
    *(_OWORD *)(v8 + 504) = 0u;
    *(_QWORD *)(v8 + 520) = 1;
    *(_QWORD *)(v8 + 528) = 0;
    *((_DWORD *)v7 + 134) = 0;
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)(v8 + 544));
    *((_DWORD *)v7 + 152) = 0;
    *((_QWORD *)v7 + 75) = 0;
    *(_OWORD *)(v7 + 584) = 0u;
    v10 = v18;
    *(_OWORD *)(v7 + 616) = v17;
    *(_OWORD *)(v7 + 632) = v10;
    *((_QWORD *)v7 + 81) = v19;
    *((_QWORD *)v7 + 82) = 0;
    *(_OWORD *)(v7 + 664) = 0u;
    *((_DWORD *)v7 + 170) = 0;
    *((_QWORD *)v7 + 86) = v7 + 704;
    *((_QWORD *)v7 + 87) = 0;
    *(_QWORD *)&v17 = a2;
    *((_QWORD *)&v17 + 1) = v7;
    v11 = *(_OWORD *)(v7 + 632);
    v18 = *(_OWORD *)(v7 + 616);
    v19 = v11;
    v20 = *((_QWORD *)v7 + 81);
    v21 = 1;
    if (a3)
      v12 = 2;
    else
      v12 = 0;
    v13 = *(uint64_t ***)this;
    if (v13)
    {
        mlir::AsmPrinter::Impl::printAttributeImpl((llvm::raw_ostream **)&v17, v13, v12);
    }
    else
    {
      v16 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v16) > 0x11)
      {
        *(_WORD *)(v16 + 16) = 15934;
        *(_OWORD *)v16 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
        *((_QWORD *)a2 + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(a2, "<<NULL ATTRIBUTE>>", 0x12uLL);
      }
    }
    mlir::detail::AsmStateImpl::~AsmStateImpl((mlir::detail::AsmStateImpl *)v7);
  }
  v14 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v14) > 0x11)
  {
    *(_WORD *)(v14 + 16) = 15934;
    result = *(double *)"<<NULL ATTRIBUTE>>";
    *(_OWORD *)v14 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
    *((_QWORD *)a2 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(a2, "<<NULL ATTRIBUTE>>", 0x12uLL);
  }
  return result;
}

void sub_1803B0A14(void *a1)
{
  operator delete(a1);
}

double mlir::Attribute::print(uint64_t ***this, llvm::raw_ostream *a2, mlir::AsmState *a3, int a4)
{
  uint64_t v4;
  __int128 v5;
  uint64_t **v6;
  int v7;
  double result;
  uint64_t v9;
  llvm::raw_ostream *v10[2];
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  v4 = *(_QWORD *)a3;
  v10[0] = a2;
  v10[1] = (llvm::raw_ostream *)v4;
  v13 = *(_QWORD *)(v4 + 648);
  v5 = *(_OWORD *)(v4 + 632);
  v11 = *(_OWORD *)(v4 + 616);
  v12 = v5;
  v14 = 1;
  v6 = *this;
  if (a4)
    v7 = 2;
  else
    v7 = 0;
  if (v6)
  {
      mlir::AsmPrinter::Impl::printAttributeImpl(v10, v6, v7);
  }
  else
  {
    v9 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v9) > 0x11)
    {
      *(_WORD *)(v9 + 16) = 15934;
      result = *(double *)"<<NULL ATTRIBUTE>>";
      *(_OWORD *)v9 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
      *((_QWORD *)a2 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(a2, "<<NULL ATTRIBUTE>>", 0x12uLL);
    }
  }
  return result;
}

llvm::raw_ostream *mlir::Type::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t ***v3;
  mlir::MLIRContext *Context;
  char *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t **v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  if (*(_QWORD *)this)
  {
    v3 = (uint64_t ***)this;
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext(this);
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&v12);
    v5 = (char *)operator new(0x2C0uLL);
    v6 = mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::DialectInterfaceCollection(v5, Context);
    *(_QWORD *)(v6 + 56) = v6 + 72;
    *(_QWORD *)(v6 + 64) = 0x600000000;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_DWORD *)(v6 + 136) = 0;
    *(_OWORD *)(v6 + 144) = 0u;
    *(_DWORD *)(v6 + 160) = 0;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_QWORD *)(v6 + 168) = v6 + 184;
    *(_QWORD *)(v6 + 176) = 0;
    *(_QWORD *)(v6 + 200) = v6 + 216;
    *(_QWORD *)(v6 + 208) = 0x400000000;
    *(_QWORD *)(v6 + 248) = v6 + 264;
    *(_OWORD *)(v6 + 256) = 0u;
    *(_QWORD *)(v6 + 272) = 1;
    *(_OWORD *)(v6 + 280) = 0u;
    *(_DWORD *)(v6 + 296) = 0;
    *(_DWORD *)(v6 + 320) = 0;
    *(_OWORD *)(v6 + 304) = 0u;
    *(_DWORD *)(v6 + 344) = 0;
    *(_OWORD *)(v6 + 328) = 0u;
    *(_DWORD *)(v6 + 368) = 0;
    *(_OWORD *)(v6 + 352) = 0u;
    *(_DWORD *)(v6 + 392) = 0;
    *(_OWORD *)(v6 + 376) = 0u;
    *(_DWORD *)(v6 + 416) = 0;
    *(_OWORD *)(v6 + 400) = 0u;
    *(_OWORD *)(v6 + 424) = 0u;
    *(_QWORD *)(v6 + 440) = 0;
    *(_QWORD *)(v6 + 448) = v6 + 464;
    *(_QWORD *)(v6 + 456) = 0x400000000;
    *(_QWORD *)(v6 + 496) = v6 + 512;
    *(_OWORD *)(v6 + 504) = 0u;
    *(_QWORD *)(v6 + 520) = 1;
    *(_QWORD *)(v6 + 528) = 0;
    *((_DWORD *)v5 + 134) = 0;
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)(v6 + 544));
    *((_DWORD *)v5 + 152) = 0;
    *((_QWORD *)v5 + 75) = 0;
    *(_OWORD *)(v5 + 584) = 0u;
    v7 = v13;
    *(_OWORD *)(v5 + 616) = v12;
    *(_OWORD *)(v5 + 632) = v7;
    *((_QWORD *)v5 + 81) = v14;
    *((_QWORD *)v5 + 82) = 0;
    *(_OWORD *)(v5 + 664) = 0u;
    *((_DWORD *)v5 + 170) = 0;
    *((_QWORD *)v5 + 86) = v5 + 704;
    *((_QWORD *)v5 + 87) = 0;
    *(_QWORD *)&v12 = a2;
    *((_QWORD *)&v12 + 1) = v5;
    v8 = *(_OWORD *)(v5 + 632);
    v13 = *(_OWORD *)(v5 + 616);
    v14 = v8;
    v15 = *((_QWORD *)v5 + 81);
    v16 = 1;
    v9 = *v3;
    if (v9)
    {
      if (!mlir::AsmPrinter::Impl::printAlias((uint64_t)&v12, (uint64_t)v9))
        mlir::AsmPrinter::Impl::printTypeImpl((uint64_t)&v12, v9);
    }
    else
    {
      v11 = (void *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v11 > 0xCuLL)
      {
        qmemcpy(v11, "<<NULL TYPE>>", 13);
        *((_QWORD *)a2 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(a2, "<<NULL TYPE>>", 0xDuLL);
      }
    }
    mlir::detail::AsmStateImpl::~AsmStateImpl((mlir::detail::AsmStateImpl *)v5);
  }
  v10 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v10 <= 0xCuLL)
    return llvm::raw_ostream::write(a2, "<<NULL TYPE>>", 0xDuLL);
  qmemcpy(v10, "<<NULL TYPE>>", 13);
  *((_QWORD *)a2 + 4) += 13;
  return this;
}

void sub_1803B0D80(void *a1)
{
  operator delete(a1);
}

void mlir::Type::print(uint64_t ***this, llvm::raw_ostream *a2, mlir::AsmState *a3)
{
  uint64_t v3;
  __int128 v4;
  uint64_t **v5;
  void *v6;
  _QWORD v7[2];
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;

  v3 = *(_QWORD *)a3;
  v7[0] = a2;
  v7[1] = v3;
  v10 = *(_QWORD *)(v3 + 648);
  v4 = *(_OWORD *)(v3 + 632);
  v8 = *(_OWORD *)(v3 + 616);
  v9 = v4;
  v11 = 1;
  v5 = *this;
  if (*this)
  {
    if (!mlir::AsmPrinter::Impl::printAlias((uint64_t)v7, (uint64_t)v5))
      mlir::AsmPrinter::Impl::printTypeImpl((uint64_t)v7, v5);
  }
  else
  {
    v6 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v6 > 0xCuLL)
    {
      qmemcpy(v6, "<<NULL TYPE>>", 13);
      *((_QWORD *)a2 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(a2, "<<NULL TYPE>>", 0xDuLL);
    }
  }
}

llvm::raw_ostream *mlir::Type::dump(mlir::Type *this)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  llvm::raw_ostream *result;
  _BYTE *v5;

  v2 = (llvm::raw_ostream *)llvm::errs(this);
  v3 = mlir::Type::print(this, v2);
  result = (llvm::raw_ostream *)llvm::errs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v5)
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  *v5 = 10;
  ++*((_QWORD *)result + 4);
  return result;
}

mlir::Value *mlir::Value::print(mlir::Value *this, llvm::raw_ostream *a2)
{
  _BYTE v5[40];

  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v5);
  return mlir::Value::print(this, a2, (const mlir::OpPrintingFlags *)v5);
}

mlir::Value *mlir::Value::print(mlir::Value *this, llvm::raw_ostream *a2, const mlir::OpPrintingFlags *a3)
{
  llvm::raw_ostream *v3;
  mlir::Value *v5;
  mlir::Operation *DefiningOp;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;

  v3 = a2;
  if (*(_QWORD *)this)
  {
    v5 = this;
    DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp(this);
    if (DefiningOp)
    {
      return mlir::Operation::print(DefiningOp, v3, a3);
    }
    else
    {
      v8 = *(_QWORD *)v5;
      v9 = (void *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v9 > 0x19uLL)
      {
        qmemcpy(v9, "<block argument> of type '", 26);
        *((_QWORD *)v3 + 4) += 26;
      }
      else
      {
        v3 = llvm::raw_ostream::write(v3, "<block argument> of type '", 0x1AuLL);
      }
      v11 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::Type::print((llvm::raw_ostream *)&v11, v3);
      v10 = *((_QWORD *)v3 + 4);
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v10) > 0xB)
      {
        *(_DWORD *)(v10 + 8) = 540702821;
        *(_QWORD *)v10 = *(_QWORD *)"' at index: ";
        *((_QWORD *)v3 + 4) += 12;
      }
      else
      {
        v3 = llvm::raw_ostream::write(v3, "' at index: ", 0xCuLL);
      }
      return llvm::raw_ostream::operator<<(v3, *(unsigned int *)(v8 + 24));
    }
  }
  else
  {
    v7 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v7 > 0xDuLL)
    {
      qmemcpy(v7, "<<NULL VALUE>>", 14);
      *((_QWORD *)a2 + 4) += 14;
    }
    else
    {
      return llvm::raw_ostream::write(a2, "<<NULL VALUE>>", 0xEuLL);
    }
  }
  return this;
}

mlir::detail::AsmStateImpl *mlir::Operation::print(mlir::Operation *this, llvm::raw_ostream *a2, const mlir::OpPrintingFlags *a3)
{
  const char **v5;
  mlir::Operation *v6;
  mlir::Block *v7;
  mlir::Block *v8;
  mlir::detail::AsmStateImpl *result;
  mlir::detail::AsmStateImpl *v10;

  v5 = (const char **)this;
  if ((*((_BYTE *)a3 + 32) & 0x20) != 0)
  {
    do
    {
      v6 = this;
      if ((mlir::OperationName::hasTrait<mlir::OpTrait::IsIsolatedFromAbove>((_QWORD *)this + 6) & 1) != 0)
        break;
      v8 = (mlir::Block *)*((_QWORD *)v6 + 2);
      if (!v8)
        break;
      this = (mlir::Operation *)mlir::Block::getParentOp(v8);
    }
    while (this);
  }
  else
  {
    do
    {
      v6 = this;
      v7 = (mlir::Block *)*((_QWORD *)this + 2);
      if (!v7)
        break;
      this = (mlir::Operation *)mlir::Block::getParentOp(v7);
    }
    while (this);
  }
  mlir::AsmState::AsmState((llvm *)&v10, (uint64_t)v6, (uint64_t)a3, 0, 0);
  mlir::Operation::print(v5, a2, (mlir::AsmState *)&v10);
  result = v10;
  v10 = 0;
  if (result)
    mlir::detail::AsmStateImpl::~AsmStateImpl(result);
  return result;
}

void mlir::Operation::print(const char **this, llvm::raw_ostream *a2, mlir::AsmState *a3)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v6[2];
  llvm::raw_ostream *v7[2];
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[6];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a3;
  v7[0] = a2;
  v7[1] = (llvm::raw_ostream *)v4;
  v10 = *(_QWORD *)(v4 + 648);
  v5 = *(_OWORD *)(v4 + 632);
  v8 = *(_OWORD *)(v4 + 616);
  v9 = v5;
  v11 = 1;
  v6[0] = off_1E0E16138;
  v6[1] = v7;
  v12 = v14;
  v14[0] = "builtin";
  v14[1] = 7;
  v13 = 0x300000001;
  v15 = 0;
  if (!this[2] && (*(_BYTE *)(v4 + 648) & 0x20) == 0)
    mlir::detail::AsmStateImpl::initializeAliases((mlir::detail::AsmStateImpl *)v4, this);
  v6[0] = off_1E0E16138;
  if (v12 != v14)
    free(v12);
}

llvm::raw_ostream *`anonymous namespace'::SSANameState::printValueID(llvm::raw_ostream *result, unint64_t a2, int a3, llvm::raw_ostream *a4)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t Owner;
  int v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  void *v16;
  const void *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _BYTE *v29;
  int *v30;
  unint64_t v31;
  int *v32;
  unint64_t v33;
  int *v34;
  int *v35;
  int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;

  v4 = a4;
  if (!a2)
  {
    v16 = (void *)*((_QWORD *)a4 + 4);
    if (*((_QWORD *)a4 + 3) - (_QWORD)v16 <= 0xDuLL)
      return llvm::raw_ostream::write(a4, "<<NULL VALUE>>", 0xEuLL);
    qmemcpy(v16, "<<NULL VALUE>>", 14);
    *((_QWORD *)a4 + 4) += 14;
    return result;
  }
  v6 = result;
  v41 = a2;
  v7 = *(_QWORD *)(a2 + 8) & 7;
  if (v7 == 7)
    v8 = 0;
  else
    v8 = a2;
  if (v7 != 7)
  {
    Owner = mlir::detail::OpResultImpl::getOwner((mlir::detail::OpResultImpl *)v8);
    v10 = *(_DWORD *)(Owner + 36);
    if (v10 != 1)
    {
      v19 = *(_QWORD *)(v8 + 8);
      if ((v19 & 7) == 6)
      {
        v11 = *(_DWORD *)(v8 + 16) + 6;
        v20 = *((_QWORD *)v6 + 9);
        v21 = *((unsigned int *)v6 + 22);
        if (!(_DWORD)v21)
          goto LABEL_38;
      }
      else
      {
        v11 = v19 & 7;
        v20 = *((_QWORD *)v6 + 9);
        v21 = *((unsigned int *)v6 + 22);
        if (!(_DWORD)v21)
          goto LABEL_38;
      }
      v22 = v21 - 1;
      v23 = (uint64_t *)(v20 + 32 * (((_DWORD)v21 - 1) & ((Owner >> 4) ^ (Owner >> 9))));
      v24 = *v23;
      if (*v23 == Owner)
        goto LABEL_39;
      v25 = 1;
      LODWORD(v26) = v22 & ((Owner >> 4) ^ (Owner >> 9));
      while (v24 != -4096)
      {
        v27 = v26 + v25++;
        v26 = v27 & v22;
        v24 = *(_QWORD *)(v20 + 32 * v26);
        if (v24 == Owner)
        {
          v23 = (uint64_t *)(v20 + 32 * v26);
          goto LABEL_39;
        }
      }
LABEL_38:
      v23 = (uint64_t *)(v20 + 32 * v21);
LABEL_39:
      if (v23 == (uint64_t *)(v20 + 32 * v21))
      {
        v39 = Owner - 16;
        v12 = 1;
      }
      else
      {
        v30 = (int *)v23[1];
        v31 = *((unsigned int *)v23 + 4);
        v32 = &v30[v31];
        if (!(_DWORD)v31)
          goto LABEL_47;
        do
        {
          v33 = v31 >> 1;
          v34 = &v30[v31 >> 1];
          v36 = *v34;
          v35 = v34 + 1;
          v31 += ~(v31 >> 1);
          if (v11 < v36)
            v31 = v33;
          else
            v30 = v35;
        }
        while (v31);
        if (v30 == v32)
        {
LABEL_47:
          v37 = *(v32 - 1);
        }
        else
        {
          v37 = *(v30 - 1);
          v10 = *v30;
        }
        v38 = v10 - v37;
        v12 = v38 != 1;
        if (v38 == 1)
          v11 = 0;
        else
          v11 -= v37;
        if (v37 > 5)
          v39 = Owner - 24 * (v37 - 5) - 96;
        else
          v39 = Owner - 16 * (v37 + 1);
      }
      v41 = v39;
      v42 = 0;
      result = (llvm::raw_ostream *)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v6, &v41, &v42);
      if (!(_DWORD)result)
        goto LABEL_56;
      goto LABEL_8;
    }
  }
  v11 = 0;
  v12 = 0;
  v42 = 0;
  result = (llvm::raw_ostream *)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v6, &v41, &v42);
  if (!(_DWORD)result)
    goto LABEL_56;
LABEL_8:
  v13 = v42;
  if (v42 == *(_QWORD *)v6 + 16 * *((unsigned int *)v6 + 4))
  {
LABEL_56:
    v40 = (void *)*((_QWORD *)v4 + 4);
    if (*((_QWORD *)v4 + 3) - (_QWORD)v40 <= 0x14uLL)
      return llvm::raw_ostream::write(v4, "<<UNKNOWN SSA VALUE>>", 0x15uLL);
    qmemcpy(v40, "<<UNKNOWN SSA VALUE>>", 21);
    *((_QWORD *)v4 + 4) += 21;
    return result;
  }
  v14 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 37);
    v15 = *(unsigned int *)(v13 + 8);
    if ((_DWORD)v15 != -1)
      goto LABEL_11;
LABEL_15:
    v42 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>((uint64_t *)v6 + 3, &v41, &v42))
    {
      v17 = *(const void **)(v42 + 8);
      v18 = *(_QWORD *)(v42 + 16);
      result = (llvm::raw_ostream *)*((_QWORD *)v4 + 4);
      if (v18 <= *((_QWORD *)v4 + 3) - (_QWORD)result)
        goto LABEL_17;
    }
    else
    {
      v28 = *((_QWORD *)v6 + 3) + 24 * *((unsigned int *)v6 + 10);
      v17 = *(const void **)(v28 + 8);
      v18 = *(_QWORD *)(v28 + 16);
      result = (llvm::raw_ostream *)*((_QWORD *)v4 + 4);
      if (v18 <= *((_QWORD *)v4 + 3) - (_QWORD)result)
      {
LABEL_17:
        if (v18)
        {
          result = (llvm::raw_ostream *)memcpy(result, v17, v18);
          *((_QWORD *)v4 + 4) += v18;
        }
        goto LABEL_32;
      }
    }
    result = llvm::raw_ostream::write(v4, (const char *)v17, v18);
    goto LABEL_32;
  }
  *((_QWORD *)v4 + 4) = v14 + 1;
  *v14 = 37;
  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 == -1)
    goto LABEL_15;
LABEL_11:
  result = llvm::raw_ostream::operator<<(v4, v15);
LABEL_32:
  if (v12 && a3)
  {
    v29 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v29 >= *((_QWORD *)v4 + 3))
    {
      v4 = llvm::raw_ostream::write(v4, 35);
    }
    else
    {
      *((_QWORD *)v4 + 4) = v29 + 1;
      *v29 = 35;
    }
    return llvm::raw_ostream::operator<<(v4, v11);
  }
  return result;
}

void mlir::detail::AsmStateImpl::initializeAliases(mlir::detail::AsmStateImpl *this, const char **a2)
{
  char *v4;
  char v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  llvm *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm *v14;
  _QWORD *v15;
  uint64_t v16;
  llvm *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm *v21;
  _QWORD *v22;
  uint64_t v23;
  llvm *v24;
  llvm *v25;
  unint64_t v26;
  _QWORD *v27;
  const std::nothrow_t *v28;
  unint64_t v29;
  void *v30;
  BOOL v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  const unsigned __int8 *v39;
  int8x16_t *v40;
  uint64_t *v41;
  int v42;
  int v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  unint64_t *v54;
  int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  uint64_t v62;
  unint64_t *v63;
  _OWORD *v64;
  __int128 v65;
  unint64_t *v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  char *v70;
  uint64_t v71;
  llvm *v72;
  unint64_t *v74;
  uint64_t v75;
  unint64_t *v76;
  void **v77;
  uint64_t v78;
  void **v79;
  _QWORD *v80;
  unint64_t *v81;
  char *v82;
  _QWORD *v83;
  char *v84;
  char *v85;
  __int128 v86;
  uint64_t v87;
  unint64_t *v88;
  int v89;
  char *v90;
  _QWORD *v91;
  char *v92;
  char *v93;
  __int128 v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t *v98;
  char *v99;
  _QWORD v100[4];
  void (**v101)(llvm::raw_null_ostream *__hidden);
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  int v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  unint64_t v114[3];
  unsigned int v115;
  _QWORD v116[2];
  llvm *v117;
  uint64_t v118;
  unsigned int v119;
  void *v120;
  uint64_t v121;
  void *v122;
  __int128 v123;
  _BYTE v124[32];
  void (**v125)(llvm::raw_svector_ostream *__hidden);
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  int v132;
  void **v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 616;
  v116[0] = this;
  v116[1] = (char *)this + 184;
  v99 = (char *)this + 184;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v120 = &v122;
  v121 = 0;
  v122 = v124;
  v123 = xmmword_181233280;
  v126 = 0;
  v130 = 0;
  v131 = 0;
  v132 = 1;
  v128 = 0;
  v129 = 0;
  v127 = 0;
  v125 = off_1E0E22B88;
  v133 = &v122;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v125, 0, 0, 0);
  v100[0] = off_1E0E19748;
  v100[1] = 0;
  v100[2] = v4;
  v100[3] = v116;
  v102 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 1;
  v104 = 0;
  v105 = 0;
  v103 = 0;
  v101 = off_1E0E229B8;
  v5 = *((_BYTE *)this + 648);
  if ((v5 & 1) != 0)
  {
    v5 = *((_BYTE *)this + 648);
  }
  if ((v5 & 4) != 0)
  {
    v6 = v118;
    if (!v118)
      goto LABEL_33;
  }
  else
  {
    (*(void (**)(const char *, const char **, _QWORD *, const char *, _QWORD))(*(_QWORD *)a2[6] + 56))(a2[6], a2, v100, "", 0);
    v6 = v118;
    if (!v118)
      goto LABEL_33;
  }
  v7 = v119;
  if (v119 > 4 * v6 && v119 >= 0x41)
  {
    if (!v6 || ((v8 = 1 << (33 - __clz(v6 - 1)), v8 <= 64) ? (v9 = 64) : (v9 = v8), v9 != v119))
      llvm::deallocate_buffer(v117, (void *)(16 * v119));
    v118 = 0;
    v10 = v117;
    v11 = (v119 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v11)
    {
      v12 = v11 + 1;
      v13 = (v11 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v14 = (llvm *)((char *)v117 + 16 * v13);
      v15 = (_QWORD *)((char *)v117 + 16);
      v16 = v13;
      do
      {
        *(v15 - 2) = -4096;
        *v15 = -4096;
        v15 += 4;
        v16 -= 2;
      }
      while (v16);
      if (v12 == v13)
      {
LABEL_33:
        v112 = v114;
        v113 = 0;
        v26 = v121;
        if (!(_DWORD)v121)
          goto LABEL_42;
        v27 = v120;
        if (v120 == &v122)
        {
          v114[0] = 0;
          v80 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v112, v114, v121, 104, v114);
          v27 = v80;
          v81 = (unint64_t *)v112;
          if ((_DWORD)v113)
          {
            v82 = (char *)v112 + 104 * v113;
            v83 = v80 + 5;
            v84 = (char *)v112 + 40;
            do
            {
              v85 = v84 - 40;
              *(v83 - 5) = *((_QWORD *)v84 - 5);
              v86 = *((_OWORD *)v84 - 2);
              *(_OWORD *)((char *)v83 - 20) = *(_OWORD *)(v84 - 20);
              *((_OWORD *)v83 - 2) = v86;
              *v83 = v83 + 2;
              v83[1] = 0x600000000;
              if (*((_DWORD *)v84 + 2))
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v83, (uint64_t)v84);
              v83 += 13;
              v84 += 104;
            }
            while (v85 + 104 != v82);
            v81 = (unint64_t *)v112;
            if ((_DWORD)v113)
            {
              v87 = 13 * v113;
              do
              {
                v88 = (unint64_t *)v81[v87 - 8];
                if (&v81[v87 - 6] != v88)
                  free(v88);
                v87 -= 13;
              }
              while (v87 * 8);
              v81 = (unint64_t *)v112;
            }
          }
          v89 = v114[0];
          if (v81 != v114)
            free(v81);
          v112 = v27;
          HIDWORD(v113) = v89;
          if ((_DWORD)v121)
          {
            v90 = (char *)v120 + 104 * v121;
            v91 = v27 + 5;
            v92 = (char *)v120 + 40;
            do
            {
              v93 = v92 - 40;
              *(v91 - 5) = *((_QWORD *)v92 - 5);
              v94 = *((_OWORD *)v92 - 2);
              *(_OWORD *)((char *)v91 - 20) = *(_OWORD *)(v92 - 20);
              *((_OWORD *)v91 - 2) = v94;
              *v91 = v91 + 2;
              v91[1] = 0x600000000;
              if (*((_DWORD *)v92 + 2))
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v91, (uint64_t)v92);
              v91 += 13;
              v92 += 104;
            }
            while (v93 + 104 != v90);
            v95 = (char *)v120;
            LODWORD(v113) = v26;
            if ((_DWORD)v121)
            {
              v96 = 104 * v121;
              do
              {
                v97 = *(char **)&v95[v96 - 64];
                if (&v95[v96 - 48] != v97)
                  free(v97);
                v96 -= 104;
              }
              while (v96);
              v26 = v113;
              LODWORD(v121) = 0;
              if (!(_DWORD)v113)
              {
LABEL_42:
                v109 = 0;
                v110 = 0;
                v111 = 0x1000000000;
                if (!(_DWORD)v113)
                  goto LABEL_98;
                v33 = (char *)v112;
                v34 = (char *)v112 + 104 * v113;
                v98 = (uint64_t *)((char *)this + 168);
                while (1)
                {
                  if (v33[24])
                  {
                    v40 = (int8x16_t *)*((_QWORD *)v33 + 1);
                    v39 = (const unsigned __int8 *)*((_QWORD *)v33 + 2);
                    v41 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((uint64_t)&v109, v40, v39);
                    v42 = *(_DWORD *)(*v41 + 8);
                    *(_DWORD *)(*v41 + 8) = v42 + 1;
                    v43 = *((_DWORD *)v33 + 8);
                    v44 = *(_QWORD *)v33;
                    v45 = *((_DWORD *)this + 40);
                    if (!v45)
                      goto LABEL_68;
                    v35 = *((_QWORD *)this + 18);
                    v36 = ((v44 >> 4) ^ (v44 >> 9)) & (v45 - 1);
                    v37 = (unint64_t *)(v35 + 16 * v36);
                    v38 = *v37;
                    if (v44 != *v37)
                      break;
                  }
LABEL_45:
                  v33 += 104;
                  if (v33 == v34)
                  {
                    if (HIDWORD(v110) && (_DWORD)v110)
                    {
                      v71 = 0;
                      do
                      {
                        v72 = *(llvm **)((char *)v109 + v71);
                        if (v72 != (llvm *)-8 && v72 != 0)
                          llvm::deallocate_buffer(v72, (void *)(*(_QWORD *)v72 + 17));
                        v71 += 8;
                      }
                      while (8 * v110 != v71);
                    }
LABEL_98:
                    free(v109);
                    v74 = (unint64_t *)v112;
                    if ((_DWORD)v113)
                    {
                      v75 = 13 * v113;
                      do
                      {
                        v76 = (unint64_t *)v74[v75 - 8];
                        if (&v74[v75 - 6] != v76)
                          free(v76);
                        v75 -= 13;
                      }
                      while (v75 * 8);
                      v74 = (unint64_t *)v112;
                    }
                    if (v74 != v114)
                      free(v74);
                    v100[0] = off_1E0E19748;
                    llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v101);
                    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v125);
                    if (v122 != v124)
                      free(v122);
                    v77 = (void **)v120;
                    if ((_DWORD)v121)
                    {
                      v78 = 13 * v121;
                      do
                      {
                        v79 = (void **)v77[v78 - 8];
                        if (&v77[v78 - 6] != v79)
                          free(v79);
                        v78 -= 13;
                      }
                      while (v78 * 8);
                      v77 = (void **)v120;
                    }
                    if (v77 != &v122)
                      free(v77);
                    llvm::deallocate_buffer(v117, (void *)(16 * v119));
                  }
                }
                v50 = 0;
                v51 = 1;
                while (v38 != -4096)
                {
                  if (v50)
                    v52 = 0;
                  else
                    v52 = v38 == -8192;
                  if (v52)
                    v50 = v37;
                  v53 = v36 + v51++;
                  v36 = v53 & (v45 - 1);
                  v37 = (unint64_t *)(v35 + 16 * v36);
                  v38 = *v37;
                  if (v44 == *v37)
                    goto LABEL_45;
                }
                if (v50)
                  v54 = v50;
                else
                  v54 = v37;
                v55 = *((_DWORD *)this + 38);
                if (4 * v55 + 4 < 3 * v45)
                {
                  if (v45 + ~v55 - *((_DWORD *)this + 39) > v45 >> 3)
                    goto LABEL_50;
                }
                else
                {
LABEL_68:
                  v45 *= 2;
                }
                llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)this + 144, v45);
                v56 = *((_QWORD *)this + 18);
                v57 = *((_DWORD *)this + 40) - 1;
                v58 = v57 & ((v44 >> 4) ^ (v44 >> 9));
                v54 = (unint64_t *)(v56 + 16 * v58);
                v59 = *v54;
                if (v44 == *v54)
                {
LABEL_70:
                  ++*((_DWORD *)this + 38);
                  if (v44 == -4096)
                    goto LABEL_52;
                  goto LABEL_51;
                }
                v66 = 0;
                v67 = 1;
                while (v59 != -4096)
                {
                  if (v66)
                    v68 = 0;
                  else
                    v68 = v59 == -8192;
                  if (v68)
                    v66 = v54;
                  v69 = v58 + v67++;
                  v58 = v69 & v57;
                  v54 = (unint64_t *)(v56 + 16 * (v69 & v57));
                  v59 = *v54;
                  if (v44 == *v54)
                    goto LABEL_70;
                }
                if (v66)
                  v54 = v66;
LABEL_50:
                v46 = *v54;
                ++*((_DWORD *)this + 38);
                if (v46 == -4096)
                {
LABEL_52:
                  v47 = v43 & 0xC0000000 | v42 & 0x3FFFFFFF;
                  *v54 = v44;
                  *((_DWORD *)v54 + 2) = 0;
                  v48 = *((unsigned int *)this + 44);
                  *((_DWORD *)v54 + 2) = v48;
                  if (v48 >= *((_DWORD *)this + 45))
                  {
                    v114[0] = v44;
                    v114[1] = (unint64_t)v40;
                    v114[2] = (unint64_t)v39;
                    v115 = v47;
                    v60 = v48 + 1;
                    v61 = *v98 + 32 * v48 > (unint64_t)v114;
                    if (*v98 <= (unint64_t)v114 && v61)
                    {
                      v70 = (char *)v114 - *v98;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v98, v99, v60, 32);
                      v62 = *v98;
                      v63 = (unint64_t *)&v70[*v98];
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v98, v99, v60, 32);
                      v62 = *v98;
                      v63 = v114;
                    }
                    v64 = (_OWORD *)(v62 + 32 * *((unsigned int *)this + 44));
                    v65 = *((_OWORD *)v63 + 1);
                    *v64 = *(_OWORD *)v63;
                    v64[1] = v65;
                  }
                  else
                  {
                    v49 = *((_QWORD *)this + 21) + 32 * v48;
                    *(_QWORD *)v49 = v44;
                    *(_QWORD *)(v49 + 8) = v40;
                    *(_QWORD *)(v49 + 16) = v39;
                    *(_DWORD *)(v49 + 24) = v47;
                  }
                  ++*((_DWORD *)this + 44);
                  goto LABEL_45;
                }
LABEL_51:
                --*((_DWORD *)this + 39);
                goto LABEL_52;
              }
              v27 = v112;
LABEL_37:
              v28 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
              v29 = v26;
              while (1)
              {
                v30 = operator new(104 * v29, v28);
                if (v30)
                  break;
                v31 = v29 > 1;
                v29 >>= 1;
                if (!v31)
                {
                  goto LABEL_42;
                }
              }
              v32 = v30;
              operator delete(v32);
              goto LABEL_42;
            }
            v27 = v112;
          }
          else
          {
            LODWORD(v113) = v26;
          }
        }
        else
        {
          v112 = v120;
          v113 = v121;
          v120 = &v122;
          HIDWORD(v121) = 0;
        }
        LODWORD(v121) = 0;
        goto LABEL_37;
      }
    }
    else
    {
      v14 = v117;
    }
    v25 = (llvm *)((char *)v10 + 16 * v7);
    do
    {
      *(_QWORD *)v14 = -4096;
      v14 = (llvm *)((char *)v14 + 16);
    }
    while (v14 != v25);
    goto LABEL_33;
  }
  if (v119)
  {
    v17 = v117;
    v18 = (v119 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v18)
    {
      v19 = v18 + 1;
      v20 = (v18 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v21 = (llvm *)((char *)v117 + 16 * v20);
      v22 = (_QWORD *)((char *)v117 + 16);
      v23 = v20;
      do
      {
        *(v22 - 2) = -4096;
        *v22 = -4096;
        v22 += 4;
        v23 -= 2;
      }
      while (v23);
      if (v19 == v20)
        goto LABEL_29;
    }
    else
    {
      v21 = v117;
    }
    v24 = (llvm *)((char *)v17 + 16 * v7);
    do
    {
      *(_QWORD *)v21 = -4096;
      v21 = (llvm *)((char *)v21 + 16);
    }
    while (v21 != v24);
  }
LABEL_29:
  v118 = 0;
  goto LABEL_33;
}

void `anonymous namespace'::OperationPrinter::printFullOpWithIndentAndLoc(_anonymous_namespace_::OperationPrinter *this, mlir::Operation *a2)
{
  llvm::raw_ostream **v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  mlir::Operation *v13;
  unsigned int v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  mlir::Operation *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  llvm::raw_ostream *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  llvm::raw_ostream *v34;
  _BYTE *v35;
  llvm::raw_ostream *v36;
  _BYTE *v37;
  unint64_t v38;
  llvm::raw_ostream *v39;
  _WORD *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _WORD *v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  llvm::raw_ostream *v55;
  _BYTE *v56;
  llvm::raw_ostream *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  llvm::raw_ostream *v61;
  _BYTE *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD *NextResultAtOffset;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  _DWORD *v79;
  char v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  llvm::raw_ostream *v85;
  _QWORD *v86;
  llvm::raw_ostream *v87;
  uint64_t v88;
  _BOOL4 v90;
  _BOOL4 v91;
  BOOL v92;
  const char *v93;
  llvm::raw_ostream *v94;
  _DWORD *v95;
  void *v96;
  size_t v97;
  _WORD *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  llvm::raw_ostream *v102;
  _QWORD *v103;
  llvm::raw_ostream *v104;
  _BYTE *v105;
  llvm::raw_ostream *v106;
  _BYTE *v107;
  uint64_t v108;
  _WORD *v109;
  _QWORD *v110;
  llvm::raw_ostream *v111;
  _BYTE *v112;
  llvm::raw_ostream *v113;
  _BYTE *v114;
  uint64_t *v115;
  int v116;
  BOOL v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  llvm::raw_ostream **v121;
  llvm::raw_ostream **v122;
  _OWORD v123[2];
  uint64_t v124;
  uint64_t v125[4];
  uint64_t v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  _OWORD v132[2];
  uint64_t v133;
  uint64_t v134[3];

  v4 = (llvm::raw_ostream **)((char *)this + 16);
  v5 = *((_QWORD *)this + 3);
  v6 = *((_DWORD *)this + 18);
  v7 = *((_DWORD *)this + 36);
  *(_QWORD *)&v123[0] = a2;
  v8 = *(_QWORD *)(v5 + 656);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 16);
    if (v9)
    {
      v10 = v9 - 1;
      v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v12 = (uint64_t *)(*(_QWORD *)v8 + 16 * v11);
      v13 = (mlir::Operation *)*v12;
      if ((mlir::Operation *)*v12 == a2)
      {
LABEL_4:
        v14 = v7;
LABEL_7:
        *((_DWORD *)v12 + 2) = v6;
        *((_DWORD *)v12 + 3) = v7;
        v7 = v14;
        goto LABEL_8;
      }
      v115 = 0;
      v116 = 1;
      while (v13 != (mlir::Operation *)-4096)
      {
        if (v115)
          v117 = 0;
        else
          v117 = v13 == (mlir::Operation *)-8192;
        if (v117)
          v115 = v12;
        v118 = v11 + v116++;
        v11 = v118 & v10;
        v12 = (uint64_t *)(*(_QWORD *)v8 + 16 * (v118 & v10));
        v13 = (mlir::Operation *)*v12;
        if ((mlir::Operation *)*v12 == a2)
          goto LABEL_4;
      }
      if (v115)
        v15 = v115;
      else
        v15 = v12;
    }
    else
    {
      v15 = 0;
    }
    v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>,mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::InsertIntoBucket<mlir::Region * const&>(v8, v15, (uint64_t *)v123);
    v14 = *((_DWORD *)this + 36);
    goto LABEL_7;
  }
LABEL_8:
  llvm::raw_ostream::indent(*v4, v7);
  v16 = *((unsigned int *)a2 + 9);
  if (!(_DWORD)v16)
    goto LABEL_61;
  v17 = *((_QWORD *)this + 3);
  v18 = (llvm::raw_ostream *)(v17 + 280);
  v19 = *(_QWORD *)(v17 + 352);
  v20 = *(unsigned int *)(v17 + 368);
  if (!(_DWORD)v20)
    goto LABEL_15;
  v21 = v20 - 1;
  v22 = v19 + 32 * (((_DWORD)v20 - 1) & ((a2 >> 4) ^ (a2 >> 9)));
  v23 = *(mlir::Operation **)v22;
  if (*(mlir::Operation **)v22 != a2)
  {
    v24 = 1;
    LODWORD(v25) = v21 & ((a2 >> 4) ^ (a2 >> 9));
    while (v23 != (mlir::Operation *)-4096)
    {
      v26 = v25 + v24++;
      v25 = v26 & v21;
      v23 = *(mlir::Operation **)(v19 + 32 * v25);
      if (v23 == a2)
      {
        v22 = v19 + 32 * v25;
        goto LABEL_16;
      }
    }
LABEL_15:
    v22 = v19 + 32 * v20;
  }
LABEL_16:
  if (v22 == v19 + 32 * v20 || (v27 = *(unsigned int *)(v22 + 16), !(_DWORD)v27))
  {
    if (v16 < 2)
      goto LABEL_58;
    v36 = *v4;
    v37 = (_BYTE *)*((_QWORD *)*v4 + 4);
    if ((unint64_t)v37 >= *((_QWORD *)*v4 + 3))
    {
      v36 = llvm::raw_ostream::write(v36, 58);
    }
    else
    {
      *((_QWORD *)v36 + 4) = v37 + 1;
      *v37 = 58;
    }
    v38 = v16;
  }
  else
  {
    v120 = *((unsigned int *)a2 + 9);
    v121 = v4;
    v28 = *(int **)(v22 + 8);
    v119 = *(unsigned int *)(v22 + 16);
    v29 = (v27 << 32) - 0x100000000;
    if (v27 << 32 != 0x100000000)
    {
      v30 = *v4;
      v31 = *v28;
      v32 = v28[1] - v31;
      if (v31 <= 5)
        v33 = (char *)a2 - 16 * (*v28 + 1);
      else
        v33 = (char *)a2 - 24 * (*v28 - 5) - 96;
      if (v32 >= 2)
      {
        v34 = *v4;
        v35 = (_BYTE *)*((_QWORD *)*v4 + 4);
        if ((unint64_t)v35 >= *((_QWORD *)*v4 + 3))
        {
          v34 = llvm::raw_ostream::write(v34, 58);
        }
        else
        {
          *((_QWORD *)v34 + 4) = v35 + 1;
          *v35 = 58;
        }
        llvm::raw_ostream::operator<<(v34, v32);
      }
      if (v29 != 0x100000000)
      {
        v45 = (v29 >> 32) - 1;
        v46 = 0x200000000;
        v47 = 0x100000000;
        do
        {
          v48 = (_WORD *)*((_QWORD *)v30 + 4);
          if (*((_QWORD *)v30 + 3) - (_QWORD)v48 > 1uLL)
          {
            *v48 = 8236;
            *((_QWORD *)v30 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v30, ", ", 2uLL);
          }
          v49 = *(int *)((char *)v28 + (v47 >> 30));
          v50 = *(int *)((char *)v28 + (v47 >> 30));
          v51 = *(int *)((char *)v28 + (v46 >> 30)) - v49;
          v52 = (char *)a2 - 24 * (v50 - 5) - 96;
          v53 = (char *)a2 - 16 * (v50 + 1);
          if (v49 <= 5)
            v54 = (unint64_t)v53;
          else
            v54 = (unint64_t)v52;
          if (v51 >= 2)
          {
            v55 = *v121;
            v56 = (_BYTE *)*((_QWORD *)*v121 + 4);
            if ((unint64_t)v56 < *((_QWORD *)*v121 + 3))
            {
              *((_QWORD *)v55 + 4) = v56 + 1;
              *v56 = 58;
            }
            else
            {
              v55 = llvm::raw_ostream::write(v55, 58);
            }
            llvm::raw_ostream::operator<<(v55, v51);
          }
          v46 += 0x100000000;
          v47 += 0x100000000;
          --v45;
        }
        while (v45);
      }
    }
    v4 = v121;
    v39 = *v121;
    v40 = (_WORD *)*((_QWORD *)*v121 + 4);
    if (*((_QWORD *)*v121 + 3) - (_QWORD)v40 > 1uLL)
    {
      *v40 = 8236;
      *((_QWORD *)v39 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v39, ", ", 2uLL);
    }
    v41 = v28[v119 - 1];
    v42 = v120 - v41;
    if (v41 <= 5)
      v43 = (char *)a2 - 16 * (v41 + 1);
    else
      v43 = (char *)a2 - 24 * (v41 - 5) - 96;
    if (v42 < 2)
      goto LABEL_58;
    v36 = *v121;
    v44 = (_BYTE *)*((_QWORD *)*v121 + 4);
    if ((unint64_t)v44 >= *((_QWORD *)*v121 + 3))
    {
      v36 = llvm::raw_ostream::write(v36, 58);
    }
    else
    {
      *((_QWORD *)v36 + 4) = v44 + 1;
      *v44 = 58;
    }
    v38 = v42;
  }
  llvm::raw_ostream::operator<<(v36, v38);
LABEL_58:
  v57 = *v4;
  v58 = *((_QWORD *)*v4 + 4);
  if ((unint64_t)(*((_QWORD *)*v4 + 3) - v58) > 2)
  {
    *(_BYTE *)(v58 + 2) = 32;
    *(_WORD *)v58 = 15648;
    *((_QWORD *)v57 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v57, " = ", 3uLL);
  }
LABEL_61:
  (*(void (**)(_anonymous_namespace_::OperationPrinter *, mlir::Operation *))(*(_QWORD *)this + 208))(this, a2);
  v59 = *((_BYTE *)this + 64);
  if ((v59 & 1) != 0)
  {
    v60 = *((_QWORD *)a2 + 3);
    v61 = *v4;
    v62 = (_BYTE *)*((_QWORD *)*v4 + 4);
    if (*((_BYTE **)*v4 + 3) == v62)
    {
      llvm::raw_ostream::write(v61, " ", 1uLL);
    }
    else
    {
      *v62 = 32;
      ++*((_QWORD *)v61 + 4);
    }
    mlir::AsmPrinter::Impl::printLocation((uint64_t)v4, v60, 1);
    v59 = *((_BYTE *)this + 64);
  }
  if ((v59 & 0x40) == 0)
    return;
  v63 = *((unsigned int *)a2 + 9);
  if (!(_DWORD)v63)
  {
    if ((*((_BYTE *)a2 + 46) & 0x80) != 0 && *((_DWORD *)a2 + 17))
    {
      v85 = *v4;
      v86 = (_QWORD *)*((_QWORD *)*v4 + 4);
      if (*((_QWORD *)*v4 + 3) - (_QWORD)v86 > 7uLL)
      {
        *v86 = 0x203A6469202F2F20;
        *((_QWORD *)v85 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v85, " // id: ", 8uLL);
      }
    }
    return;
  }
  v64 = (char *)a2 - 16;
  if (*(_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)a2 - 16, 0))
  {
LABEL_73:
    v67 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v67)
      v68 = (char *)a2 - 16;
    else
      v68 = 0;
    if (!(_DWORD)v67)
      return;
    if (!*(_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)a2 - 16, 0))
    {
      v69 = 1;
      while (v67 != v69)
      {
        NextResultAtOffset = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v68, v69++);
        if (*NextResultAtOffset)
          goto LABEL_81;
      }
      return;
    }
LABEL_81:
    v122 = v4;
    v127 = &v131;
    v128 = &v131;
    v129 = 1;
    v130 = 0;
    v71 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v71)
      v72 = (char *)a2 - 16;
    else
      v72 = 0;
    *(_QWORD *)&v123[0] = v72;
    *((_QWORD *)&v123[0] + 1) = v71;
    mlir::ResultRange::use_begin((uint64_t *)v123, (uint64_t *)v132);
    v73 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v73)
      v74 = (char *)a2 - 16;
    else
      v74 = 0;
    v134[0] = (uint64_t)v74;
    v134[1] = v73;
    mlir::ResultRange::use_end(v134, v125);
    v124 = v133;
    v75 = v133;
    v123[0] = v132[0];
    v123[1] = v132[1];
    v76 = v126;
    if (v133 != v126)
    {
      v77 = 0;
      v78 = 0;
      while (1)
      {
        v79 = *(_DWORD **)(v75 + 16);
        if (v128 != v127)
          goto LABEL_92;
        v81 = HIDWORD(v129);
        if (HIDWORD(v129))
        {
          v82 = 0;
          v83 = 8 * HIDWORD(v129);
          v84 = v128;
          while ((_DWORD *)*v84 != v79)
          {
            if (*v84 == -2)
              v82 = v84;
            ++v84;
            v83 -= 8;
            if (!v83)
            {
              if (!v82)
                goto LABEL_102;
              *v82 = (uint64_t)v79;
              --v130;
              goto LABEL_89;
            }
          }
          goto LABEL_90;
        }
LABEL_102:
        if (HIDWORD(v129) < v129)
        {
          ++HIDWORD(v129);
          v128[v81] = (uint64_t)v79;
        }
        else
        {
LABEL_92:
          llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v127, v79);
          if (!v80)
            goto LABEL_90;
        }
LABEL_89:
        ++v78;
        v77 += v79[9];
LABEL_90:
        mlir::ResultRange::UseIterator::operator++((uint64_t *)v132);
        v75 = v133;
        if (v133 == v76)
          goto LABEL_113;
      }
    }
    v78 = 0;
    v77 = 0;
LABEL_113:
    v90 = v77 < 2 && v78 < 2;
    v91 = v63 == 1;
    v92 = v91 && v90;
    if (v91 && v90)
      v93 = "user";
    else
      v93 = "users";
    v94 = *v122;
    v95 = (_DWORD *)*((_QWORD *)*v122 + 4);
    if (*((_QWORD *)*v122 + 3) - (_QWORD)v95 > 3uLL)
    {
      *v95 = 539963168;
      v96 = (void *)(*((_QWORD *)v94 + 4) + 4);
      *((_QWORD *)v94 + 4) = v96;
    }
    else
    {
      v94 = llvm::raw_ostream::write(*v122, " // ", 4uLL);
      v96 = (void *)*((_QWORD *)v94 + 4);
    }
    if (v92)
      v97 = 4;
    else
      v97 = 5;
    if (v97 <= *((_QWORD *)v94 + 3) - (_QWORD)v96)
    {
      memcpy(v96, v93, v97);
      v101 = *((_QWORD *)v94 + 3);
      v98 = (_WORD *)(*((_QWORD *)v94 + 4) + v97);
      *((_QWORD *)v94 + 4) = v98;
      if ((unint64_t)(v101 - (_QWORD)v98) > 1)
      {
LABEL_130:
        *v98 = 8250;
        *((_QWORD *)v94 + 4) += 2;
        v99 = *((unsigned int *)a2 + 9);
        if ((_DWORD)v99)
          v100 = (char *)a2 - 16;
        else
          v100 = 0;
        if (!(_DWORD)v99)
        {
LABEL_150:
          if (v128 != v127)
            free(v128);
          return;
        }
        goto LABEL_140;
      }
    }
    else
    {
      v94 = llvm::raw_ostream::write(v94, v93, v97);
      v98 = (_WORD *)*((_QWORD *)v94 + 4);
      if (*((_QWORD *)v94 + 3) - (_QWORD)v98 > 1uLL)
        goto LABEL_130;
    }
    llvm::raw_ostream::write(v94, ": ", 2uLL);
    v99 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v99)
      v100 = (char *)a2 - 16;
    else
      v100 = 0;
    if (!(_DWORD)v99)
      goto LABEL_150;
LABEL_140:
    v102 = *v122;
    v103 = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v64, 0);
    if (v63 >= 2)
    {
      v104 = *v122;
      v105 = (_BYTE *)*((_QWORD *)*v122 + 4);
      if (*((_BYTE **)*v122 + 3) == v105)
      {
        llvm::raw_ostream::write(v104, "(", 1uLL);
      }
      else
      {
        *v105 = 40;
        ++*((_QWORD *)v104 + 4);
      }
      v106 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
      v107 = (_BYTE *)*((_QWORD *)v106 + 4);
      if (*((_BYTE **)v106 + 3) == v107)
      {
        llvm::raw_ostream::write(v106, ")", 1uLL);
      }
      else
      {
        *v107 = 41;
        ++*((_QWORD *)v106 + 4);
      }
    }
    else
    {
    }
    if ((_DWORD)v99 == 1)
      goto LABEL_150;
    v108 = 1;
    while (1)
    {
      v109 = (_WORD *)*((_QWORD *)v102 + 4);
      if (*((_QWORD *)v102 + 3) - (_QWORD)v109 > 1uLL)
      {
        *v109 = 8236;
        *((_QWORD *)v102 + 4) += 2;
        v110 = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v100, v108);
        if (v63 >= 2)
        {
LABEL_159:
          v111 = *v122;
          v112 = (_BYTE *)*((_QWORD *)*v122 + 4);
          if (*((_BYTE **)*v122 + 3) == v112)
          {
            llvm::raw_ostream::write(v111, "(", 1uLL);
          }
          else
          {
            *v112 = 40;
            ++*((_QWORD *)v111 + 4);
          }
          v113 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
          v114 = (_BYTE *)*((_QWORD *)v113 + 4);
          if (*((_BYTE **)v113 + 3) == v114)
          {
            llvm::raw_ostream::write(v113, ")", 1uLL);
          }
          else
          {
            *v114 = 41;
            ++*((_QWORD *)v113 + 4);
          }
          goto LABEL_154;
        }
      }
      else
      {
        llvm::raw_ostream::write(v102, ", ", 2uLL);
        v110 = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v100, v108);
        if (v63 >= 2)
          goto LABEL_159;
      }
LABEL_154:
      if (v99 == ++v108)
        goto LABEL_150;
    }
  }
  v65 = 1;
  while (v63 != v65)
  {
    v66 = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)a2 - 16, v65++);
    if (*v66)
      goto LABEL_73;
  }
  v87 = *v4;
  v88 = *((_QWORD *)*v4 + 4);
  if ((unint64_t)(*((_QWORD *)*v4 + 3) - v88) > 9)
  {
    *(_WORD *)(v88 + 8) = 25701;
    *(_QWORD *)v88 = *(_QWORD *)" // unused";
    *((_QWORD *)v87 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v87, " // unused", 0xAuLL);
  }
}

void `anonymous namespace'::OperationPrinter::~OperationPrinter(_anonymous_namespace_::OperationPrinter *this)
{
  char *v2;

  *(_QWORD *)this = off_1E0E16138;
  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
}

{
  char *v2;

  *(_QWORD *)this = off_1E0E16138;
  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  operator delete(this);
}

llvm::raw_ostream *mlir::Operation::dump(mlir::Operation *this)
{
  llvm::raw_ostream *v2;
  llvm *v3;
  llvm::raw_ostream *result;
  _BYTE *v5;
  _BYTE v6[32];
  char v7;

  v2 = (llvm::raw_ostream *)llvm::errs(this);
  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v6);
  v7 |= 0x20u;
  v3 = mlir::Operation::print(this, v2, (const mlir::OpPrintingFlags *)v6);
  result = (llvm::raw_ostream *)llvm::errs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v5)
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  *v5 = 10;
  ++*((_QWORD *)result + 4);
  return result;
}

llvm::raw_ostream *mlir::Block::print(mlir::Block *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *result;
  uint64_t v5;
  mlir::Block *v6;
  __int128 v7;
  uint64_t v8;
  mlir::detail::AsmStateImpl *v9;
  _QWORD v10[2];
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[6];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  result = (llvm::raw_ostream *)mlir::Block::getParentOp(this);
  if (result)
  {
    do
    {
      v5 = (uint64_t)result;
      v6 = (mlir::Block *)*((_QWORD *)result + 2);
      if (!v6)
        break;
      result = (llvm::raw_ostream *)mlir::Block::getParentOp(v6);
    }
    while (result);
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v10);
    mlir::AsmState::AsmState((llvm *)&v9, v5, (uint64_t)v10, 0, 0);
    v11[0] = a2;
    v11[1] = v9;
    v7 = *(_OWORD *)((char *)v9 + 632);
    v12 = *(_OWORD *)((char *)v9 + 616);
    v13 = v7;
    v14 = *((_QWORD *)v9 + 81);
    v15 = 1;
    v10[0] = off_1E0E16138;
    v10[1] = v11;
    v16 = v18;
    v18[0] = "builtin";
    v18[1] = 7;
    v17 = 0x300000001;
    v19 = 0;
    v10[0] = off_1E0E16138;
    if (v16 != v18)
      free(v16);
    result = v9;
    v9 = 0;
    if (result)
      mlir::detail::AsmStateImpl::~AsmStateImpl(result);
  }
  else
  {
    v8 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v8) > 0x12)
    {
      *(_DWORD *)(v8 + 15) = 171851339;
      *(_OWORD *)v8 = *(_OWORD *)"<<UNLINKED BLOCK>>\n";
      *((_QWORD *)a2 + 4) += 19;
    }
    else
    {
      return llvm::raw_ostream::write(a2, "<<UNLINKED BLOCK>>\n", 0x13uLL);
    }
  }
  return result;
}

mlir::GenericProgramPoint *`anonymous namespace'::OperationPrinter::print(_anonymous_namespace_::OperationPrinter *this, mlir::Block *a2, int a3, char a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  mlir::Block *v12;
  int v13;
  uint64_t v14;
  int v15;
  const char *v16;
  size_t v17;
  void *v18;
  _QWORD *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  llvm::raw_ostream *v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  _WORD *v30;
  unint64_t v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  llvm::raw_ostream *v34;
  _BYTE *v35;
  uint64_t SinglePredecessor;
  __n128 v37;
  uint64_t v38;
  llvm::raw_ostream *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm::raw_ostream *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int *v60;
  __int128 v61;
  char *v62;
  char *v63;
  __n128 *v64;
  unint64_t v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  const char *v75;
  size_t v76;
  void *v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  llvm::raw_ostream *v82;
  uint64_t v83;
  llvm::raw_ostream *v84;
  llvm::raw_ostream *v85;
  _QWORD *v86;
  unsigned int v87;
  llvm::raw_ostream *v88;
  char *v89;
  const void *v90;
  unint64_t v91;
  void *v92;
  llvm::raw_ostream *v93;
  _BYTE *v94;
  _QWORD **v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  llvm::raw_ostream *v99;
  uint64_t v100;
  llvm::raw_ostream *v101;
  uint64_t v102;
  unint64_t v103;
  llvm::raw_ostream *v104;
  _BYTE *v105;
  mlir::GenericProgramPoint *result;
  mlir::GenericProgramPoint *v107;
  uint64_t v108;
  mlir::GenericProgramPoint *v109;
  mlir::Operation *v110;
  _BYTE *v111;
  size_t *v112;
  uint64_t i;
  _WORD *v114;
  const void *v115;
  size_t v116;
  llvm::raw_ostream *v117;
  void *v118;
  __int128 v121;
  uint64_t v122;
  int v123;
  const char *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  _QWORD v128[14];

  v128[12] = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
LABEL_98:
    *((_DWORD *)this + 36) += 2;
    if ((*((_BYTE *)this + 64) & 0x40) == 0)
      goto LABEL_117;
    goto LABEL_99;
  }
  llvm::raw_ostream::indent(*((llvm::raw_ostream **)this + 2), *((_DWORD *)this + 36));
  v6 = (_QWORD *)*((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = *(_QWORD *)(v7 + 376);
  v9 = *(unsigned int *)(v7 + 392);
  if ((_DWORD)v9)
  {
    v10 = v9 - 1;
    v11 = v8 + 32 * (((_DWORD)v9 - 1) & ((a2 >> 4) ^ (a2 >> 9)));
    v12 = *(mlir::Block **)v11;
    if (*(mlir::Block **)v11 == a2)
      goto LABEL_9;
    v13 = 1;
    LODWORD(v14) = v10 & ((a2 >> 4) ^ (a2 >> 9));
    while (v12 != (mlir::Block *)-4096)
    {
      v15 = v14 + v13++;
      v14 = v15 & v10;
      v12 = *(mlir::Block **)(v8 + 32 * v14);
      if (v12 == a2)
      {
        v11 = v8 + 32 * v14;
        goto LABEL_9;
      }
    }
  }
  v11 = v8 + 32 * v9;
LABEL_9:
  if (v11 == v8 + 32 * v9)
  {
    v19 = v6 + 4;
    v18 = (void *)v6[4];
    v16 = "INVALIDBLOCK";
    v17 = 12;
    if (v6[3] - (_QWORD)v18 > 0xBuLL)
    {
LABEL_17:
      memcpy(v18, v16, v17);
      *v19 += v17;
      if (*((_QWORD *)a2 + 6) == *((_QWORD *)a2 + 7))
        goto LABEL_29;
      goto LABEL_18;
    }
LABEL_14:
    llvm::raw_ostream::write((llvm::raw_ostream *)v6, v16, v17);
    goto LABEL_15;
  }
  v16 = *(const char **)(v11 + 16);
  v17 = *(_QWORD *)(v11 + 24);
  v19 = v6 + 4;
  v18 = (void *)v6[4];
  if (v17 > v6[3] - (_QWORD)v18)
    goto LABEL_14;
  if (v17)
    goto LABEL_17;
LABEL_15:
  if (*((_QWORD *)a2 + 6) == *((_QWORD *)a2 + 7))
  {
LABEL_29:
    v34 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
    v35 = (_BYTE *)*((_QWORD *)v34 + 4);
    if ((unint64_t)v35 < *((_QWORD *)v34 + 3))
      goto LABEL_30;
    goto LABEL_37;
  }
LABEL_18:
  v20 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if ((unint64_t)v21 >= *((_QWORD *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 40);
    v23 = (unint64_t *)*((_QWORD *)a2 + 6);
    v25 = (unint64_t *)*((_QWORD *)a2 + 7);
    v24 = (char *)v25 - (char *)v23;
    if (v25 == v23)
      goto LABEL_27;
  }
  else
  {
    *((_QWORD *)v20 + 4) = v21 + 1;
    *v21 = 40;
    v23 = (unint64_t *)*((_QWORD *)a2 + 6);
    v22 = (unint64_t *)*((_QWORD *)a2 + 7);
    v24 = (char *)v22 - (char *)v23;
    if (v22 == v23)
      goto LABEL_27;
  }
  v26 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  if (v24 != 8)
  {
    v27 = v23 + 1;
    v28 = 8 * (v24 >> 3) - 8;
    do
    {
      while (1)
      {
        v30 = (_WORD *)*((_QWORD *)v26 + 4);
        if (*((_QWORD *)v26 + 3) - (_QWORD)v30 <= 1uLL)
          break;
        *v30 = 8236;
        *((_QWORD *)v26 + 4) += 2;
        v29 = *v27++;
        v28 -= 8;
        if (!v28)
          goto LABEL_27;
      }
      llvm::raw_ostream::write(v26, ", ", 2uLL);
      v31 = *v27++;
      v28 -= 8;
    }
    while (v28);
  }
LABEL_27:
  v32 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v33 = (_BYTE *)*((_QWORD *)v32 + 4);
  if ((unint64_t)v33 < *((_QWORD *)v32 + 3))
  {
    *((_QWORD *)v32 + 4) = v33 + 1;
    *v33 = 41;
    goto LABEL_29;
  }
  llvm::raw_ostream::write(v32, 41);
  v34 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v35 = (_BYTE *)*((_QWORD *)v34 + 4);
  if ((unint64_t)v35 < *((_QWORD *)v34 + 3))
  {
LABEL_30:
    *((_QWORD *)v34 + 4) = v35 + 1;
    *v35 = 58;
    if (mlir::Block::getParent(a2))
      goto LABEL_31;
LABEL_38:
    v45 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
    v46 = (void *)*((_QWORD *)v45 + 4);
    if (*((_QWORD *)v45 + 3) - (_QWORD)v46 <= 0x1DuLL)
    {
      llvm::raw_ostream::write(v45, "  // block is not in a region!", 0x1EuLL);
      goto LABEL_96;
    }
    qmemcpy(v46, "  // block is not in a region!", 30);
    v48 = *((_QWORD *)v45 + 4) + 30;
LABEL_80:
    *((_QWORD *)v45 + 4) = v48;
    goto LABEL_96;
  }
LABEL_37:
  llvm::raw_ostream::write(v34, 58);
  if (!mlir::Block::getParent(a2))
    goto LABEL_38;
LABEL_31:
  if (!*(_QWORD *)a2)
  {
    if (mlir::Block::isEntryBlock(a2))
      goto LABEL_96;
    v45 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
    v47 = *((_QWORD *)v45 + 4);
    if ((unint64_t)(*((_QWORD *)v45 + 3) - v47) <= 0x13)
    {
      llvm::raw_ostream::write(v45, "  // no predecessors", 0x14uLL);
      goto LABEL_96;
    }
    *(_DWORD *)(v47 + 16) = 1936879475;
    *(_OWORD *)v47 = *(_OWORD *)"  // no predecessors";
    v48 = *((_QWORD *)v45 + 4) + 20;
    goto LABEL_80;
  }
  SinglePredecessor = mlir::Block::getSinglePredecessor(a2);
  if (SinglePredecessor)
  {
    v38 = SinglePredecessor;
    v39 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
    v40 = *((_QWORD *)v39 + 4);
    if ((unint64_t)(*((_QWORD *)v39 + 3) - v40) > 0xA)
    {
      *(_DWORD *)(v40 + 7) = 540697701;
      *(_QWORD *)v40 = *(_QWORD *)"  // pred: ";
      *((_QWORD *)v39 + 4) += 11;
      v41 = (_QWORD *)*((_QWORD *)this + 2);
      v68 = *((_QWORD *)this + 3);
      v43 = *(_QWORD *)(v68 + 376);
      v44 = *(unsigned int *)(v68 + 392);
      if (!(_DWORD)v44)
        goto LABEL_69;
    }
    else
    {
      llvm::raw_ostream::write(v39, "  // pred: ", 0xBuLL);
      v41 = (_QWORD *)*((_QWORD *)this + 2);
      v42 = *((_QWORD *)this + 3);
      v43 = *(_QWORD *)(v42 + 376);
      v44 = *(unsigned int *)(v42 + 392);
      if (!(_DWORD)v44)
        goto LABEL_69;
    }
    v69 = v44 - 1;
    v70 = (uint64_t *)(v43 + 32 * (((_DWORD)v44 - 1) & ((v38 >> 4) ^ (v38 >> 9))));
    v71 = *v70;
    if (*v70 == v38)
      goto LABEL_70;
    v72 = 1;
    LODWORD(v73) = v69 & ((v38 >> 4) ^ (v38 >> 9));
    while (v71 != -4096)
    {
      v74 = v73 + v72++;
      v73 = v74 & v69;
      v71 = *(_QWORD *)(v43 + 32 * v73);
      if (v71 == v38)
      {
        v70 = (uint64_t *)(v43 + 32 * v73);
        goto LABEL_70;
      }
    }
LABEL_69:
    v70 = (uint64_t *)(v43 + 32 * v44);
LABEL_70:
    if (v70 == (uint64_t *)(v43 + 32 * v44))
    {
      v78 = v41 + 4;
      v77 = (void *)v41[4];
      v75 = "INVALIDBLOCK";
      v76 = 12;
      if (v41[3] - (_QWORD)v77 > 0xBuLL)
        goto LABEL_78;
    }
    else
    {
      v75 = (const char *)v70[2];
      v76 = v70[3];
      v78 = v41 + 4;
      v77 = (void *)v41[4];
      if (v76 <= v41[3] - (_QWORD)v77)
      {
        if (!v76)
          goto LABEL_96;
LABEL_78:
        memcpy(v77, v75, v76);
        *v78 += v76;
        goto LABEL_96;
      }
    }
    llvm::raw_ostream::write((llvm::raw_ostream *)v41, v75, v76);
    goto LABEL_96;
  }
  v126 = v128;
  v37.n128_u64[0] = 0x400000000;
  v127 = 0x400000000;
  v49 = *(_QWORD **)a2;
  if (!*(_QWORD *)a2)
  {
    v80 = (char *)v128;
    v79 = v128;
    goto LABEL_82;
  }
  do
  {
    v50 = mlir::PredecessorIterator::unwrap((uint64_t)v49);
    v51 = *((_QWORD *)this + 3);
    v52 = *(_QWORD *)(v51 + 376);
    v53 = *(unsigned int *)(v51 + 392);
    if ((_DWORD)v53)
    {
      v54 = v53 - 1;
      v55 = (_QWORD *)(v52 + 32 * (((_DWORD)v53 - 1) & ((v50 >> 4) ^ (v50 >> 9))));
      v56 = *v55;
      if (*v55 == v50)
        goto LABEL_52;
      v57 = 1;
      LODWORD(v58) = v54 & ((v50 >> 4) ^ (v50 >> 9));
      while (v56 != -4096)
      {
        v59 = v58 + v57++;
        v58 = v59 & v54;
        v56 = *(_QWORD *)(v52 + 32 * v58);
        if (v56 == v50)
        {
          v55 = (_QWORD *)(v52 + 32 * v58);
          goto LABEL_52;
        }
      }
    }
    v55 = (_QWORD *)(v52 + 32 * v53);
LABEL_52:
    v123 = -1;
    v124 = "INVALIDBLOCK";
    v125 = 12;
    if (v55 == (_QWORD *)(v52 + 32 * v53))
      v60 = &v123;
    else
      v60 = (int *)(v55 + 1);
    v61 = *(_OWORD *)v60;
    v122 = *((_QWORD *)v60 + 2);
    v121 = v61;
    v62 = (char *)v126;
    if (v127 >= HIDWORD(v127))
    {
      v66 = v127 + 1;
      if (v126 <= &v121 && (char *)v126 + 24 * v127 > (char *)&v121)
      {
        v67 = (char *)&v121 - (_BYTE *)v126;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v128, v66, 24);
        v62 = (char *)v126;
        v63 = (char *)v126 + v67;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v128, v66, 24);
        v63 = (char *)&v121;
        v62 = (char *)v126;
      }
    }
    else
    {
      v63 = (char *)&v121;
    }
    v64 = (__n128 *)&v62[24 * v127];
    v37 = *(__n128 *)v63;
    v64[1].n128_u64[0] = *((_QWORD *)v63 + 2);
    *v64 = v37;
    v65 = (v127 + 1);
    LODWORD(v127) = v127 + 1;
    v49 = (_QWORD *)*v49;
  }
  while (v49);
  v79 = v126;
  v80 = (char *)v126 + 24 * v65;
  if ((_DWORD)v65)
  {
    v81 = 126 - 2 * __clz(v65);
    goto LABEL_83;
  }
LABEL_82:
  v81 = 0;
LABEL_83:
  v82 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v83 = *((_QWORD *)v82 + 4);
  if ((unint64_t)(*((_QWORD *)v82 + 3) - v83) > 4)
  {
    *(_BYTE *)(v83 + 4) = 32;
    *(_DWORD *)v83 = 791617568;
    *((_QWORD *)v82 + 4) += 5;
    v85 = llvm::raw_ostream::operator<<(v82, v127);
    v86 = (_QWORD *)*((_QWORD *)v85 + 4);
    if (*((_QWORD *)v85 + 3) - (_QWORD)v86 <= 7uLL)
      goto LABEL_87;
LABEL_85:
    *v86 = 0x203A736465727020;
    *((_QWORD *)v85 + 4) += 8;
  }
  else
  {
    v84 = llvm::raw_ostream::write(v82, "  // ", 5uLL);
    v85 = llvm::raw_ostream::operator<<(v84, v127);
    v86 = (_QWORD *)*((_QWORD *)v85 + 4);
    if (*((_QWORD *)v85 + 3) - (_QWORD)v86 > 7uLL)
      goto LABEL_85;
LABEL_87:
    llvm::raw_ostream::write(v85, " preds: ", 8uLL);
  }
  v87 = v127;
  if ((_DWORD)v127)
  {
    v88 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
    v89 = (char *)v126;
    v90 = (const void *)*((_QWORD *)v126 + 1);
    v91 = *((_QWORD *)v126 + 2);
    v92 = (void *)*((_QWORD *)v88 + 4);
    if (*((_QWORD *)v88 + 3) - (_QWORD)v92 >= v91)
    {
      if (v91)
      {
        memcpy(v92, v90, *((_QWORD *)v126 + 2));
        *((_QWORD *)v88 + 4) += v91;
      }
    }
    else
    {
      llvm::raw_ostream::write(*((llvm::raw_ostream **)this + 2), (const char *)v90, *((_QWORD *)v126 + 2));
    }
    if (v87 != 1)
    {
      v112 = (size_t *)(v89 + 40);
      for (i = 24 * v87 - 24; i; i -= 24)
      {
        v114 = (_WORD *)*((_QWORD *)v88 + 4);
        if (*((_QWORD *)v88 + 3) - (_QWORD)v114 > 1uLL)
        {
          *v114 = 8236;
          *((_QWORD *)v88 + 4) += 2;
          v115 = (const void *)*(v112 - 1);
          v116 = *v112;
          v117 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
          v118 = (void *)*((_QWORD *)v117 + 4);
          if (*((_QWORD *)v117 + 3) - (_QWORD)v118 >= *v112)
          {
LABEL_136:
            if (v116)
            {
              memcpy(v118, v115, v116);
              *((_QWORD *)v117 + 4) += v116;
            }
            goto LABEL_131;
          }
        }
        else
        {
          llvm::raw_ostream::write(v88, ", ", 2uLL);
          v115 = (const void *)*(v112 - 1);
          v116 = *v112;
          v117 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
          v118 = (void *)*((_QWORD *)v117 + 4);
          if (*((_QWORD *)v117 + 3) - (_QWORD)v118 >= *v112)
            goto LABEL_136;
        }
        llvm::raw_ostream::write(v117, (const char *)v115, v116);
LABEL_131:
        v112 += 3;
      }
    }
  }
  if (v126 != v128)
    free(v126);
LABEL_96:
  v93 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 18);
  v94 = (_BYTE *)*((_QWORD *)v93 + 4);
  if ((unint64_t)v94 < *((_QWORD *)v93 + 3))
  {
    *((_QWORD *)v93 + 4) = v94 + 1;
    *v94 = 10;
    goto LABEL_98;
  }
  llvm::raw_ostream::write(v93, 10);
  *((_DWORD *)this + 36) += 2;
  if ((*((_BYTE *)this + 64) & 0x40) != 0)
  {
LABEL_99:
    v95 = (_QWORD **)*((_QWORD *)a2 + 6);
    v96 = *((_QWORD *)a2 + 7) - (_QWORD)v95;
    if (v96)
    {
      v97 = 8 * (v96 >> 3);
      do
      {
        while (1)
        {
          v98 = *v95;
          llvm::raw_ostream::indent(*((llvm::raw_ostream **)this + 2), *((_DWORD *)this + 36));
          v99 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
          v100 = *((_QWORD *)v99 + 4);
          if ((unint64_t)(*((_QWORD *)v99 + 3) - v100) > 2)
          {
            *(_BYTE *)(v100 + 2) = 32;
            *(_WORD *)v100 = 12079;
            *((_QWORD *)v99 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v99, "// ", 3uLL);
          }
          v101 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
          v102 = *((_QWORD *)v101 + 4);
          v103 = *((_QWORD *)v101 + 3) - v102;
          if (*v98)
          {
            if (v103 > 0xB)
            {
              *(_DWORD *)(v102 + 8) = 544825888;
              *(_QWORD *)v102 = *(_QWORD *)" is used by ";
              *((_QWORD *)v101 + 4) += 12;
            }
            else
            {
              llvm::raw_ostream::write(v101, " is used by ", 0xCuLL);
            }
          }
          else if (v103 > 9)
          {
            *(_WORD *)(v102 + 8) = 25701;
            *(_QWORD *)v102 = *(_QWORD *)" is unused";
            *((_QWORD *)v101 + 4) += 10;
          }
          else
          {
            llvm::raw_ostream::write(v101, " is unused", 0xAuLL);
          }
          v104 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
          ++*((_DWORD *)this + 18);
          v105 = (_BYTE *)*((_QWORD *)v104 + 4);
          if ((unint64_t)v105 >= *((_QWORD *)v104 + 3))
            break;
          *((_QWORD *)v104 + 4) = v105 + 1;
          *v105 = 10;
          ++v95;
          v97 -= 8;
          if (!v97)
            goto LABEL_117;
        }
        llvm::raw_ostream::write(v104, 10);
        ++v95;
        v97 -= 8;
      }
      while (v97);
    }
  }
LABEL_117:
  v107 = (mlir::Block *)((char *)a2 + 32);
  result = (mlir::GenericProgramPoint *)*((_QWORD *)a2 + 4);
  if (result == (mlir::Block *)((char *)a2 + 32))
  {
    v109 = (mlir::GenericProgramPoint *)*((_QWORD *)a2 + 5);
    if (v109 != v107)
      goto LABEL_126;
  }
  else
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(result);
    result = (mlir::GenericProgramPoint *)mlir::OperationName::hasTrait<mlir::OpTrait::IsTerminator>((_QWORD *)(v108 + 48));
    v109 = (mlir::GenericProgramPoint *)*((_QWORD *)a2 + 5);
    if ((_DWORD)result && (a4 & 1) == 0)
      v107 = *(mlir::GenericProgramPoint **)v107;
    for (; v109 != v107; v109 = (mlir::GenericProgramPoint *)*((_QWORD *)v109 + 1))
    {
LABEL_126:
      while (1)
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(v109);
        result = (mlir::GenericProgramPoint *)*((_QWORD *)this + 2);
        ++*((_DWORD *)this + 18);
        v111 = (_BYTE *)*((_QWORD *)result + 4);
        if ((unint64_t)v111 >= *((_QWORD *)result + 3))
          break;
        *((_QWORD *)result + 4) = v111 + 1;
        *v111 = 10;
        v109 = (mlir::GenericProgramPoint *)*((_QWORD *)v109 + 1);
        if (v109 == v107)
          goto LABEL_128;
      }
      result = llvm::raw_ostream::write(result, 10);
    }
  }
LABEL_128:
  *((_DWORD *)this + 36) -= 2;
  return result;
}

void mlir::FallbackAsmResourceMap::ResourceCollection::~ResourceCollection(mlir::FallbackAsmResourceMap::ResourceCollection *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)this = off_1E0E2BDF0;
  v2 = (char *)*((_QWORD *)this + 4);
  v3 = *((unsigned int *)this + 10);
  if ((_DWORD)v3)
  {
    v4 = 96 * v3;
    do
    {
      v5 = &v2[v4];
      v6 = *(unsigned int *)&v2[v4 - 8];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, char *))off_1E0E540E0[v6])(&v7, v5 - 72);
      *((_DWORD *)v5 - 2) = -1;
      if (*(v5 - 73) < 0)
        operator delete(*((void **)v5 - 12));
      v4 -= 96;
    }
    while (v4);
    v2 = (char *)*((_QWORD *)this + 4);
  }
  if (v2 != (char *)this + 48)
    free(v2);
  *(_QWORD *)this = off_1E0E2B7C8;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)this = off_1E0E2BDF0;
  v2 = (char *)*((_QWORD *)this + 4);
  v3 = *((unsigned int *)this + 10);
  if ((_DWORD)v3)
  {
    v4 = 96 * v3;
    do
    {
      v5 = &v2[v4];
      v6 = *(unsigned int *)&v2[v4 - 8];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, char *))off_1E0E540E0[v6])(&v7, v5 - 72);
      *((_DWORD *)v5 - 2) = -1;
      if (*(v5 - 73) < 0)
        operator delete(*((void **)v5 - 12));
      v4 -= 96;
    }
    while (v4);
    v2 = (char *)*((_QWORD *)this + 4);
  }
  if (v2 != (char *)this + 48)
    free(v2);
  *(_QWORD *)this = off_1E0E2B7C8;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  operator delete(this);
}

void *llvm::function_ref<mlir::AsmResourceBlob ()(unsigned long,unsigned long)>::callback_fn<mlir::AsmParsedResourceEntry::parseAsBlob(void)::{lambda(unsigned long,unsigned long)#1}>@<X0>(size_t __sz@<X1>, std::align_val_t a2@<X2>, uint64_t a3@<X8>)
{
  void *result;

  result = llvm::allocate_buffer(__sz, a2);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = __sz;
  *(_QWORD *)(a3 + 16) = a2;
  *(_QWORD *)(a3 + 48) = (char *)llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::CallbacksHolder<void (*)(void *,unsigned long,unsigned long),void (*)(void *,unsigned long,unsigned long),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::CallbacksHolder<void (*)(void *,unsigned long,unsigned long),void (*)(void *,unsigned long,unsigned long),void>::Callbacks
     + 2 >= 8)
    *(_QWORD *)(a3 + 24) = llvm::deallocate_buffer;
  *(_BYTE *)(a3 + 56) = 1;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::CallImpl<void (*)(void *,unsigned long,unsigned long)>(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Diagnostic &>::CallImpl<verifyOpAndAdjustFlags(mlir::Operation *,mlir::OpPrintingFlags)::$_0>(llvm *a1)
{
  uint64_t v1;

  v1 = **(_QWORD **)a1;
  return llvm::get_threadid(a1) == v1;
}

uint64_t llvm::detail::DenseSetImpl<llvm::StringRef,llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::DenseMapInfo<llvm::StringRef,void>>::DenseSetImpl<llvm::StringRef const*>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _OWORD *buffer;
  _OWORD *v13;
  int v14;
  _OWORD *v15;
  unint64_t v16;
  char *v17;
  _OWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  _OWORD *v24;
  _OWORD *v25;
  _QWORD *v27;

  if (*a3 == *a2
    || (v6 = (((uint64_t)(*a3 - *a2) >> 4) - 1) | ((unint64_t)(((uint64_t)(*a3 - *a2) >> 4) - 1) >> 1),
        v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4),
        v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16),
        v9 = HIDWORD(v8) | v8,
        v9 - 4 > 0xFFFFFFFA)
    || (v10 = -__clz(v9) & 0x1F, v10 <= 2))
  {
    *(_QWORD *)a1 = 1;
    v13 = (_OWORD *)(a1 + 8);
    v15 = (_OWORD *)(a1 + 72);
    v16 = 48;
    v17 = "N4mlir23RegisteredOperationName5ModelINS_5arith8FPToUIOpEEE" + 25;
LABEL_10:
    v19 = (v16 >> 4) + 1;
    v18 = &v13[v19 & 0x1FFFFFFFFFFFFFFCLL];
    v20 = v13 + 2;
    v21 = *((_OWORD *)v17 + 190);
    v22 = v19 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      *(v20 - 2) = v21;
      *(v20 - 1) = v21;
      *v20 = v21;
      v20[1] = v21;
      v20 += 4;
      v22 -= 4;
    }
    while (v22);
    if (v19 == (v19 & 0x1FFFFFFFFFFFFFFCLL))
      goto LABEL_15;
    goto LABEL_13;
  }
  v11 = (1 << v10);
  *(_DWORD *)a1 &= ~1u;
  buffer = llvm::allocate_buffer(16 * v11, (std::align_val_t)8uLL);
  *(_QWORD *)(a1 + 8) = buffer;
  v13 = (_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = v11;
  v14 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v14 & 1) != 0)
  {
    v15 = (_OWORD *)(a1 + 72);
    v16 = 48;
    v17 = "onName5ModelINS_5arith8FPToUIOpEEE";
    goto LABEL_10;
  }
  v15 = &buffer[v11];
  v13 = buffer;
  v16 = 16 * v11 - 16;
  v17 = "N4mlir23RegisteredOperationName5ModelINS_5arith8FPToUIOpEEE" + 25;
  if (v16 >= 0x30)
    goto LABEL_10;
  v18 = buffer;
LABEL_13:
  v23 = *((_OWORD *)v17 + 190);
  do
    *v18++ = v23;
  while (v18 != v15);
LABEL_15:
  v24 = (_OWORD *)*a2;
  v25 = (_OWORD *)*a3;
  while (v24 != v25)
  {
    v27 = 0;
    if ((llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(a1, (uint64_t)v24, &v27) & 1) == 0)*(_OWORD *)llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>((_DWORD *)a1, (uint64_t)v24, (uint64_t)v24, v27) = *v24;
    ++v24;
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  int HashValue;
  int v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  const void *v20;
  BOOL v21;
  int v22;
  uint64_t result;
  int v24;
  int v25;
  const void *v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  const void *v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  const void *v38;
  BOOL v39;
  int v40;
  void *__s1;

  v5 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(_QWORD **)a2, *(_QWORD *)(a2 + 8));
    v8 = 3;
    v9 = *(void **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    if (!v10)
      goto LABEL_4;
LABEL_17:
    if (v9 == (void *)-2)
    {
      v11 = 0;
      v18 = 1;
      v19 = HashValue & v8;
      v14 = v5 + 16 * (HashValue & v8);
      v20 = *(const void **)v14;
      if (*(_QWORD *)v14 == -1)
        goto LABEL_22;
LABEL_19:
      if (v20 != (const void *)-2
        && (v10 != *(_QWORD *)(v14 + 8) || memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v20, v10)))
      {
LABEL_22:
        while (v20 != (const void *)-1)
        {
          if (v11)
            v21 = 0;
          else
            v21 = v20 == (const void *)-2;
          if (v21)
            v11 = v14;
          v22 = v18 + v19;
          ++v18;
          v19 = v22 & v8;
          v14 = v5 + 16 * (v22 & v8);
          v20 = *(const void **)v14;
          if (*(_QWORD *)v14 != -1)
            goto LABEL_19;
        }
        goto LABEL_68;
      }
    }
    else
    {
      if (v9 != (void *)-1)
      {
        __s1 = v9;
        v11 = 0;
        v36 = 1;
        v37 = HashValue & v8;
        v14 = v5 + 16 * (HashValue & v8);
        v38 = *(const void **)v14;
        if (*(_QWORD *)v14 <= 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_65;
        while (v38 != (const void *)-1)
        {
          if (v11)
            v39 = 0;
          else
            v39 = v38 == (const void *)-2;
          if (v39)
            v11 = v14;
          v40 = v36 + v37;
          ++v36;
          v37 = v40 & v8;
          v14 = v5 + 16 * (v40 & v8);
          v38 = *(const void **)v14;
          if (*(_QWORD *)v14 <= 0xFFFFFFFFFFFFFFFDLL)
          {
LABEL_65:
            if (v10 == *(_QWORD *)(v14 + 8) && !memcmp(__s1, v38, v10))
              goto LABEL_71;
          }
        }
        goto LABEL_68;
      }
      v11 = 0;
      v24 = 1;
      v25 = HashValue & v8;
      v14 = v5 + 16 * (HashValue & v8);
      v26 = *(const void **)v14;
      if (*(_QWORD *)v14 == -2)
        goto LABEL_36;
LABEL_33:
      if (v26 != (const void *)-1)
      {
        if (v10 != *(_QWORD *)(v14 + 8)
          || (v27 = v24, v28 = memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v26, v10), v24 = v27, v28))
        {
LABEL_36:
          while (v26 != (const void *)-1)
          {
            if (v11)
              v29 = 0;
            else
              v29 = v26 == (const void *)-2;
            if (v29)
              v11 = v14;
            v30 = v24 + v25;
            ++v24;
            v25 = v30 & v8;
            v14 = v5 + 16 * (v30 & v8);
            v26 = *(const void **)v14;
            if (*(_QWORD *)v14 != -2)
              goto LABEL_33;
          }
          goto LABEL_68;
        }
      }
    }
    goto LABEL_71;
  }
  v6 = *(_DWORD *)(a1 + 16);
  if (!v6)
  {
    v14 = 0;
    result = 0;
    goto LABEL_72;
  }
  v5 = *(_QWORD *)(a1 + 8);
  HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(_QWORD **)a2, *(_QWORD *)(a2 + 8));
  v8 = v6 - 1;
  v9 = *(void **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
    goto LABEL_17;
LABEL_4:
  if (v9 != (void *)-2)
  {
    v11 = 0;
    v31 = 1;
    v32 = HashValue & v8;
    v14 = v5 + 16 * (HashValue & v8);
    v33 = *(const void **)v14;
    if (*(_QWORD *)v14 == -2)
      goto LABEL_49;
LABEL_45:
    if (v33 == (const void *)-1)
    {
      if (v9 != (void *)-1)
      {
LABEL_49:
        while (v33 != (const void *)-1)
        {
          if (v11)
            v34 = 0;
          else
            v34 = v33 == (const void *)-2;
          if (v34)
            v11 = v14;
          v35 = v31 + v32;
          ++v31;
          v32 = v35 & v8;
          v14 = v5 + 16 * (v35 & v8);
          v33 = *(const void **)v14;
          if (*(_QWORD *)v14 != -2)
            goto LABEL_45;
        }
        goto LABEL_68;
      }
    }
    else if (*(_QWORD *)(v14 + 8))
    {
      goto LABEL_49;
    }
LABEL_71:
    result = 1;
    goto LABEL_72;
  }
  v11 = 0;
  v12 = 1;
  v13 = HashValue & v8;
  v14 = v5 + 16 * (HashValue & v8);
  v15 = *(const void **)v14;
  if (*(_QWORD *)v14 == -1)
    goto LABEL_8;
LABEL_6:
  if (v15 == (const void *)-2 || !*(_QWORD *)(v14 + 8))
    goto LABEL_71;
LABEL_8:
  while (v15 != (const void *)-1)
  {
    if (v11)
      v16 = 0;
    else
      v16 = v15 == (const void *)-2;
    if (v16)
      v11 = v14;
    v17 = v12 + v13;
    ++v12;
    v13 = v17 & v8;
    v14 = v5 + 16 * (v17 & v8);
    v15 = *(const void **)v14;
    if (*(_QWORD *)v14 != -1)
      goto LABEL_6;
  }
LABEL_68:
  result = 0;
  if (v11)
    v14 = v11;
LABEL_72:
  *a3 = v14;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(_DWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_10:
    llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow((uint64_t)a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t)a1, a3, &v9);
    a4 = v9;
    *a1 += 2;
    if (*a4 == -1)
      return a4;
    goto LABEL_7;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
    goto LABEL_10;
  *a1 += 2;
  if (*a4 != -1)
LABEL_7:
    --a1[1];
  return a4;
}

uint64_t llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  _OWORD *v7;
  uint64_t v8;
  llvm *v9;
  _OWORD *v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  int v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *buffer;
  int v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int128 *v34;
  llvm *v35;
  __int128 *v36;
  __int128 v37;
  _QWORD v38[8];

  v2 = result;
  v38[7] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_BYTE *)result & 1) == 0)
  {
    v7 = (_OWORD *)(result + 8);
    v6 = *(llvm **)(result + 8);
    v8 = *(unsigned int *)(result + 16);
    if (a2 > 4)
    {
      v25 = a2;
      buffer = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(v2 + 8) = buffer;
      *(_QWORD *)(v2 + 16) = v25;
      v27 = *(_DWORD *)v2;
      v9 = (llvm *)((char *)v6 + 16 * v8);
      *(_QWORD *)v2 = *(_DWORD *)v2 & 1;
      if ((v27 & 1) != 0)
      {
        v10 = (_OWORD *)(v2 + 72);
        v11 = 48;
      }
      else
      {
        v10 = &buffer[v25];
        v7 = buffer;
        v11 = 16 * v25 - 16;
        if (v11 < 0x30)
        {
          v29 = buffer;
          goto LABEL_41;
        }
      }
    }
    else
    {
      v9 = (llvm *)((char *)v6 + 16 * v8);
      *(_QWORD *)result = 1;
      v10 = (_OWORD *)(result + 72);
      v11 = 48;
    }
    v28 = (v11 >> 4) + 1;
    v29 = &v7[v28 & 0x1FFFFFFFFFFFFFFCLL];
    v30 = v7 + 2;
    v31 = v28 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      *(v30 - 2) = xmmword_181234BE0;
      *(v30 - 1) = xmmword_181234BE0;
      *v30 = xmmword_181234BE0;
      v30[1] = xmmword_181234BE0;
      v30 += 4;
      v31 -= 4;
    }
    while (v31);
    if (v28 == (v28 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      if ((_DWORD)v8)
      {
        v35 = v6;
        do
        {
          if (*(_QWORD *)v35 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            *(_QWORD *)&v37 = 0;
            llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(v2, (uint64_t)v35, &v37);
            *(_OWORD *)v37 = *(_OWORD *)v35;
            *(_DWORD *)v2 += 2;
          }
          v35 = (llvm *)((char *)v35 + 16);
        }
        while (v35 != v9);
      }
      llvm::deallocate_buffer(v6, (void *)(16 * v8));
    }
    do
LABEL_41:
      *v29++ = xmmword_181234BE0;
    while (v29 != v10);
    goto LABEL_42;
  }
  v12 = (_OWORD *)(result + 8);
  v13 = &v37;
  if (*(_QWORD *)(result + 8) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v37 = *v12;
    v13 = (__int128 *)v38;
    v14 = (__int128 *)(result + 24);
    if (*(_QWORD *)(result + 24) > 0xFFFFFFFFFFFFFFFDLL)
    {
LABEL_10:
      v15 = (__int128 *)(result + 40);
      if (*(_QWORD *)(result + 40) > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_11;
      goto LABEL_28;
    }
  }
  else
  {
    v14 = (__int128 *)(result + 24);
    if (*(_QWORD *)(result + 24) > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_10;
  }
  *v13++ = *v14;
  v15 = (__int128 *)(result + 40);
  if (*(_QWORD *)(result + 40) > 0xFFFFFFFFFFFFFFFDLL)
  {
LABEL_11:
    v16 = (__int128 *)(result + 56);
    if (*(_QWORD *)(result + 56) > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  *v13++ = *v15;
  v16 = (__int128 *)(result + 56);
  if (*(_QWORD *)(result + 56) > 0xFFFFFFFFFFFFFFFDLL)
  {
LABEL_12:
    v17 = *(_DWORD *)result;
    if (a2 < 5)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  *v13++ = *v16;
  v17 = *(_DWORD *)result;
  if (a2 < 5)
  {
LABEL_13:
    *(_QWORD *)result = v17 & 1;
    if ((v17 & 1) == 0)
      goto LABEL_14;
LABEL_31:
    v19 = (char *)(v2 + 72);
    v20 = 48;
    goto LABEL_16;
  }
LABEL_30:
  *(_DWORD *)result = v17 & 0xFFFFFFFE;
  v32 = a2;
  result = (uint64_t)llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
  *(_QWORD *)(v2 + 8) = result;
  *(_QWORD *)(v2 + 16) = v32;
  v33 = *(_DWORD *)v2;
  *(_QWORD *)v2 = *(_DWORD *)v2 & 1;
  if ((v33 & 1) != 0)
    goto LABEL_31;
LABEL_14:
  v18 = *(unsigned int *)(v2 + 16);
  if (!(_DWORD)v18)
    goto LABEL_34;
  v12 = *(_OWORD **)(v2 + 8);
  v19 = (char *)&v12[v18];
  v20 = v19 - (char *)v12 - 16;
  if (v20 < 0x30)
  {
    v22 = *(char **)(v2 + 8);
    do
    {
LABEL_33:
      *(_OWORD *)v22 = xmmword_181234BE0;
      v22 += 16;
    }
    while (v22 != v19);
    goto LABEL_34;
  }
LABEL_16:
  v21 = (v20 >> 4) + 1;
  v22 = (char *)&v12[v21 & 0x1FFFFFFFFFFFFFFCLL];
  v23 = v12 + 2;
  v24 = v21 & 0x1FFFFFFFFFFFFFFCLL;
  do
  {
    *(v23 - 2) = xmmword_181234BE0;
    *(v23 - 1) = xmmword_181234BE0;
    *v23 = xmmword_181234BE0;
    v23[1] = xmmword_181234BE0;
    v23 += 4;
    v24 -= 4;
  }
  while (v24);
  if (v21 != (v21 & 0x1FFFFFFFFFFFFFFCLL))
    goto LABEL_33;
LABEL_34:
  if (&v37 != v13)
  {
    v34 = &v37;
    do
    {
      if (*(_QWORD *)v34 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v36 = 0;
        result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(v2, (uint64_t)v34, &v36);
        *v36 = *v34;
        *(_DWORD *)v2 += 2;
      }
      ++v34;
    }
    while (v34 != v13);
  }
  return result;
}

void llvm::toHex(size_t __len@<X1>, unsigned __int8 *a2@<X0>, int a3@<W2>, _QWORD *a4@<X8>)
{
  size_t v5;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *__src;
  __int128 v18;
  _QWORD v19[3];

  v5 = __len;
  v19[2] = *MEMORY[0x1E0C80C00];
  __src = v19;
  v18 = xmmword_181236BC0;
  v8 = 2 * __len;
  if (2 * __len)
  {
    if (v8 >= 0x11)
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v19, v8, 1);
    *(_QWORD *)&v18 = v8;
  }
  if (v5)
  {
    v9 = 0;
    if (a3)
      v10 = 32;
    else
      v10 = 0;
    do
    {
      v11 = *a2++;
      *((_BYTE *)__src + v9) = llvm::hexdigit(unsigned int,BOOL)::LUT[(unint64_t)v11 >> 4] | v10;
      *((_BYTE *)__src + v9 + 1) = llvm::hexdigit(unsigned int,BOOL)::LUT[v11 & 0xF] | v10;
      v9 += 2;
      --v5;
    }
    while (v5);
    v5 = v18;
  }
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v12 = __src;
  if (v5 >= 0x17)
  {
    v14 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v14 = v5 | 7;
    v15 = v14 + 1;
    v16 = operator new(v14 + 1);
    a4[1] = v5;
    a4[2] = v15 | 0x8000000000000000;
    *a4 = v16;
    a4 = v16;
  }
  else
  {
    *((_BYTE *)a4 + 23) = v5;
    if (!v5)
    {
      *(_BYTE *)a4 = 0;
      v13 = __src;
      if (__src == v19)
        return;
      goto LABEL_15;
    }
  }
  memmove(a4, v12, v5);
  *((_BYTE *)a4 + v5) = 0;
  v13 = __src;
  if (__src != v19)
LABEL_15:
    free(v13);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>(uint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if ((v6 & 1) == 0)
    {
      v24 = a3;
      v22 = a2;
      v25 = *a1;
      v23 = *((_DWORD *)a1 + 4);
      v26 = *a2;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v4 = v25;
      v5 = v26;
      v3 = v23;
      a2 = v22;
      a3 = v24;
      if (v20)
      {
        v21 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v21 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v21;
        v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
        v4 = v25;
        v5 = v26;
        v3 = v23;
        a2 = v22;
        a3 = v24;
      }
    }
    v8 = (v7[19] + 8 * v5) ^ HIDWORD(v5);
    v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
    v10 = -348639895 * ((v9 >> 47) ^ v9);
    v11 = v3 - 1;
    v12 = v10 & (v3 - 1);
    v13 = (_QWORD *)(v4 + 24 * v12);
    v14 = *v13;
    if (*a2 == *v13)
    {
      result = 1;
LABEL_5:
      *a3 = v13;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18)
          v16 = v13;
        v19 = v12 + v17++;
        v12 = v19 & v11;
        v13 = (_QWORD *)(v4 + 24 * (v19 & v11));
        v14 = *v13;
        if (*a2 == *v13)
          goto LABEL_5;
      }
      result = 0;
      if (v16)
        v13 = v16;
      *a3 = v13;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printOptionalLocationSpecifier(llvm::raw_ostream *result, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t v6;

  if ((*((_BYTE *)result + 64) & 1) != 0)
  {
    v2 = a2;
    v3 = (char *)result + 16;
    v4 = (llvm::raw_ostream *)*((_QWORD *)result + 2);
    v5 = (_BYTE *)*((_QWORD *)v4 + 4);
    if (*((_BYTE **)v4 + 3) == v5)
    {
      llvm::raw_ostream::write(v4, " ", 1uLL);
      v6 = (uint64_t)v3;
      a2 = v2;
    }
    else
    {
      *v5 = 32;
      ++*((_QWORD *)v4 + 4);
      v6 = (uint64_t)v3;
    }
    return mlir::AsmPrinter::Impl::printLocation(v6, a2, 1);
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printNewline(_anonymous_namespace_::OperationPrinter *this)
{
  llvm::raw_ostream *v2;
  _BYTE *v3;

  v2 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 18);
  v3 = (_BYTE *)*((_QWORD *)v2 + 4);
  if ((unint64_t)v3 >= *((_QWORD *)v2 + 3))
  {
    llvm::raw_ostream::write(v2, 10);
  }
  else
  {
    *((_QWORD *)v2 + 4) = v3 + 1;
    *v3 = 10;
  }
  return llvm::raw_ostream::indent(*((llvm::raw_ostream **)this + 2), *((_DWORD *)this + 36));
}

uint64_t `anonymous namespace'::OperationPrinter::increaseIndent(uint64_t this)
{
  *(_DWORD *)(this + 144) += 2;
  return this;
}

uint64_t `anonymous namespace'::OperationPrinter::decreaseIndent(uint64_t this)
{
  *(_DWORD *)(this + 144) -= 2;
  return this;
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printRegionArgument(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  llvm::raw_ostream *v10;
  _BYTE *v11;
  _WORD *v12;
  uint64_t **v13;
  llvm::raw_ostream *v14;
  void *v15;
  llvm::raw_ostream *result;
  llvm::raw_ostream **v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  llvm::raw_ostream *v21;
  _DWORD *v22;
  _BYTE *v23;

  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 160))(a1);
  if ((a5 & 1) != 0)
    goto LABEL_10;
  v11 = a1 + 16;
  v10 = (llvm::raw_ostream *)*((_QWORD *)a1 + 2);
  v12 = (_WORD *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v12 <= 1uLL)
  {
    llvm::raw_ostream::write(v10, ": ", 2uLL);
    v13 = (uint64_t **)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v13)
      goto LABEL_4;
LABEL_7:
    v14 = *(llvm::raw_ostream **)v11;
    v15 = *(void **)(*(_QWORD *)v11 + 32);
    if (*(_QWORD *)(*(_QWORD *)v11 + 24) - (_QWORD)v15 > 0xCuLL)
    {
      qmemcpy(v15, "<<NULL TYPE>>", 13);
      *((_QWORD *)v14 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v14, "<<NULL TYPE>>", 0xDuLL);
    }
    goto LABEL_10;
  }
  *v12 = 8250;
  *((_QWORD *)v10 + 4) += 2;
  v13 = (uint64_t **)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v13)
    goto LABEL_7;
LABEL_4:
  if (!mlir::AsmPrinter::Impl::printAlias((uint64_t)(a1 + 16), (uint64_t)v13))
    mlir::AsmPrinter::Impl::printTypeImpl((uint64_t)(a1 + 16), v13);
LABEL_10:
  result = (llvm::raw_ostream *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 192))(a1, a3, a4, 0, 0);
  if ((a1[64] & 1) == 0)
    return result;
  v17 = (llvm::raw_ostream **)(a1 + 16);
  v18 = *(_QWORD *)(a2 + 32);
  v19 = (llvm::raw_ostream *)*((_QWORD *)a1 + 2);
  v20 = (_BYTE *)*((_QWORD *)v19 + 4);
  if (*((_BYTE **)v19 + 3) == v20)
  {
    llvm::raw_ostream::write(v19, " ", 1uLL);
    if ((a1[64] & 2) == 0)
      goto LABEL_13;
    return mlir::AsmPrinter::Impl::printLocationInternal((llvm::raw_ostream *)(a1 + 16), v18, 1, 1);
  }
  *v20 = 32;
  ++*((_QWORD *)v19 + 4);
  if ((a1[64] & 2) != 0)
    return mlir::AsmPrinter::Impl::printLocationInternal((llvm::raw_ostream *)(a1 + 16), v18, 1, 1);
LABEL_13:
  v21 = *v17;
  v22 = (_DWORD *)*((_QWORD *)*v17 + 4);
  if (*((_QWORD *)*v17 + 3) - (_QWORD)v22 > 3uLL)
  {
    *v22 = 677605228;
    *((_QWORD *)v21 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v21, "loc(", 4uLL);
  }
  mlir::AsmPrinter::Impl::printLocationInternal((llvm::raw_ostream *)(a1 + 16), v18, 0, 1);
  result = *v17;
  v23 = (_BYTE *)*((_QWORD *)*v17 + 4);
  if ((unint64_t)v23 >= *((_QWORD *)*v17 + 3))
    return llvm::raw_ostream::write(result, 41);
  *((_QWORD *)result + 4) = v23 + 1;
  *v23 = 41;
  return result;
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printOperand(uint64_t a1, unint64_t a2)
{
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printOperand(uint64_t a1, unint64_t a2, llvm::raw_ostream *a3)
{
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printSuccessor(_anonymous_namespace_::OperationPrinter *this, mlir::Block *a2)
{
  llvm::raw_ostream *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  mlir::Block *v9;
  int v10;
  uint64_t v11;
  int v12;
  const char *v13;
  size_t v14;
  void *v15;
  _QWORD *v16;

  result = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  v5 = *(_QWORD *)(v4 + 376);
  v6 = *(unsigned int *)(v4 + 392);
  if ((_DWORD)v6)
  {
    v7 = v6 - 1;
    v8 = v5 + 32 * (((_DWORD)v6 - 1) & ((a2 >> 4) ^ (a2 >> 9)));
    v9 = *(mlir::Block **)v8;
    if (*(mlir::Block **)v8 == a2)
      goto LABEL_8;
    v10 = 1;
    LODWORD(v11) = v7 & ((a2 >> 4) ^ (a2 >> 9));
    while (v9 != (mlir::Block *)-4096)
    {
      v12 = v11 + v10++;
      v11 = v12 & v7;
      v9 = *(mlir::Block **)(v5 + 32 * v11);
      if (v9 == a2)
      {
        v8 = v5 + 32 * v11;
        goto LABEL_8;
      }
    }
  }
  v8 = v5 + 32 * v6;
LABEL_8:
  if (v8 == v5 + 32 * v6)
  {
    v16 = (_QWORD *)((char *)result + 32);
    v15 = (void *)*((_QWORD *)result + 4);
    v13 = "INVALIDBLOCK";
    v14 = 12;
    if (*((_QWORD *)result + 3) - (_QWORD)v15 > 0xBuLL)
      goto LABEL_14;
    return llvm::raw_ostream::write(result, v13, v14);
  }
  v13 = *(const char **)(v8 + 16);
  v14 = *(_QWORD *)(v8 + 24);
  v16 = (_QWORD *)((char *)result + 32);
  v15 = (void *)*((_QWORD *)result + 4);
  if (v14 > *((_QWORD *)result + 3) - (_QWORD)v15)
    return llvm::raw_ostream::write(result, v13, v14);
  if (v14)
  {
LABEL_14:
    result = (llvm::raw_ostream *)memcpy(v15, v13, v14);
    *v16 += v14;
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printSuccessorAndUseList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::raw_ostream *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  const char *v19;
  size_t v20;
  void *v21;
  _QWORD *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  llvm::raw_ostream *v25;
  unint64_t v26;
  uint64_t v27;
  _WORD *v28;
  unint64_t v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  uint64_t v32;
  llvm::raw_ostream *v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t v36;
  llvm::raw_ostream *v37;
  void *v38;
  _BYTE *v39;
  _WORD *v40;
  uint64_t **v41;
  uint64_t v42;
  llvm::raw_ostream *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  result = *(llvm::raw_ostream **)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = a1 + 16;
  v11 = *(_QWORD *)(v9 + 376);
  v12 = *(unsigned int *)(v9 + 392);
  if ((_DWORD)v12)
  {
    v13 = v12 - 1;
    v14 = (uint64_t *)(v11 + 32 * (((_DWORD)v12 - 1) & ((a2 >> 4) ^ (a2 >> 9))));
    v15 = *v14;
    if (*v14 == a2)
      goto LABEL_8;
    v16 = 1;
    LODWORD(v17) = v13 & ((a2 >> 4) ^ (a2 >> 9));
    while (v15 != -4096)
    {
      v18 = v17 + v16++;
      v17 = v18 & v13;
      v15 = *(_QWORD *)(v11 + 32 * v17);
      if (v15 == a2)
      {
        v14 = (uint64_t *)(v11 + 32 * v17);
        goto LABEL_8;
      }
    }
  }
  v14 = (uint64_t *)(v11 + 32 * v12);
LABEL_8:
  if (v14 == (uint64_t *)(v11 + 32 * v12))
  {
    v22 = (_QWORD *)((char *)result + 32);
    v21 = (void *)*((_QWORD *)result + 4);
    v19 = "INVALIDBLOCK";
    v20 = 12;
    if (*((_QWORD *)result + 3) - (_QWORD)v21 > 0xBuLL)
      goto LABEL_16;
LABEL_13:
    result = llvm::raw_ostream::write(result, v19, v20);
    goto LABEL_14;
  }
  v19 = (const char *)v14[2];
  v20 = v14[3];
  v22 = (_QWORD *)((char *)result + 32);
  v21 = (void *)*((_QWORD *)result + 4);
  if (v20 > *((_QWORD *)result + 3) - (_QWORD)v21)
    goto LABEL_13;
  if (!v20)
  {
LABEL_14:
    if (!a4)
      return result;
    goto LABEL_17;
  }
LABEL_16:
  result = (llvm::raw_ostream *)memcpy(v21, v19, v20);
  *v22 += v20;
  if (!a4)
    return result;
LABEL_17:
  v23 = *(llvm::raw_ostream **)v10;
  v24 = *(_BYTE **)(*(_QWORD *)v10 + 32);
  if ((unint64_t)v24 >= *(_QWORD *)(*(_QWORD *)v10 + 24))
  {
    llvm::raw_ostream::write(v23, 40);
  }
  else
  {
    *((_QWORD *)v23 + 4) = v24 + 1;
    *v24 = 40;
  }
  v25 = *(llvm::raw_ostream **)(a1 + 16);
  v45 = a3;
  v46 = 0;
  v26 = mlir::ValueRange::dereference_iterator(&v45, 0);
  v27 = ++v46;
  if (v45 != a3 || v27 != a4)
  {
    do
    {
      v28 = (_WORD *)*((_QWORD *)v25 + 4);
      if (*((_QWORD *)v25 + 3) - (_QWORD)v28 > 1uLL)
      {
        *v28 = 8236;
        *((_QWORD *)v25 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v25, ", ", 2uLL);
      }
      v29 = mlir::ValueRange::dereference_iterator(&v45, v46);
      v30 = ++v46;
    }
    while (v45 != a3 || v30 != a4);
  }
  v31 = *(llvm::raw_ostream **)v10;
  v32 = *(_QWORD *)(*(_QWORD *)v10 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v10 + 24) - v32) > 2)
  {
    *(_BYTE *)(v32 + 2) = 32;
    *(_WORD *)v32 = 14880;
    *((_QWORD *)v31 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v31, " : ", 3uLL);
  }
  v33 = *(llvm::raw_ostream **)v10;
  v45 = a3;
  v46 = 0;
  v34 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v45, 0) + 8);
  v35 = (uint64_t **)(v34 & 0xFFFFFFFFFFFFFFF8);
  if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    if (!mlir::AsmPrinter::Impl::printAlias(v10, v34 & 0xFFFFFFFFFFFFFFF8))
    {
      mlir::AsmPrinter::Impl::printTypeImpl(v10, v35);
      v36 = ++v46;
      if (v45 != a3)
      {
        while (1)
        {
LABEL_43:
          while (1)
          {
            v40 = (_WORD *)*((_QWORD *)v33 + 4);
            if (*((_QWORD *)v33 + 3) - (_QWORD)v40 <= 1uLL)
              break;
            *v40 = 8236;
            *((_QWORD *)v33 + 4) += 2;
            v41 = (uint64_t **)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v45, v46) + 8) & 0xFFFFFFFFFFFFFFF8);
            if (v41)
              goto LABEL_45;
LABEL_50:
            v43 = *(llvm::raw_ostream **)v10;
            v44 = *(void **)(*(_QWORD *)v10 + 32);
            if (*(_QWORD *)(*(_QWORD *)v10 + 24) - (_QWORD)v44 > 0xCuLL)
            {
              qmemcpy(v44, "<<NULL TYPE>>", 13);
              *((_QWORD *)v43 + 4) += 13;
              v42 = ++v46;
              if (v45 == a3)
                goto LABEL_47;
            }
            else
            {
              llvm::raw_ostream::write(v43, "<<NULL TYPE>>", 0xDuLL);
              v42 = ++v46;
              if (v45 == a3)
                goto LABEL_47;
            }
          }
          llvm::raw_ostream::write(v33, ", ", 2uLL);
          v41 = (uint64_t **)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v45, v46) + 8) & 0xFFFFFFFFFFFFFFF8);
          if (!v41)
            goto LABEL_50;
LABEL_45:
          if (mlir::AsmPrinter::Impl::printAlias(v10, (uint64_t)v41))
          {
            v42 = ++v46;
            if (v45 == a3)
            {
LABEL_47:
              if (v42 == a4)
                goto LABEL_38;
            }
          }
          else
          {
            mlir::AsmPrinter::Impl::printTypeImpl(v10, v41);
            v42 = ++v46;
            if (v45 == a3)
              goto LABEL_47;
          }
        }
      }
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  v37 = *(llvm::raw_ostream **)v10;
  v38 = *(void **)(*(_QWORD *)v10 + 32);
  if (*(_QWORD *)(*(_QWORD *)v10 + 24) - (_QWORD)v38 <= 0xCuLL)
  {
    llvm::raw_ostream::write(v37, "<<NULL TYPE>>", 0xDuLL);
LABEL_36:
    v36 = ++v46;
    if (v45 != a3)
      goto LABEL_43;
    goto LABEL_37;
  }
  qmemcpy(v38, "<<NULL TYPE>>", 13);
  *((_QWORD *)v37 + 4) += 13;
  v36 = ++v46;
  if (v45 != a3)
    goto LABEL_43;
LABEL_37:
  if (v36 != a4)
    goto LABEL_43;
LABEL_38:
  result = *(llvm::raw_ostream **)v10;
  v39 = *(_BYTE **)(*(_QWORD *)v10 + 32);
  if ((unint64_t)v39 >= *(_QWORD *)(*(_QWORD *)v10 + 24))
    return llvm::raw_ostream::write(result, 41);
  *((_QWORD *)result + 4) = v39 + 1;
  *v39 = 41;
  return result;
}

uint64_t `anonymous namespace'::OperationPrinter::printOptionalAttrDict(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::AsmPrinter::Impl::printOptionalAttrDict(a1 + 16, a2, a3, a4, a5, 0);
}

uint64_t `anonymous namespace'::OperationPrinter::printOptionalAttrDictWithKeyword(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::AsmPrinter::Impl::printOptionalAttrDict(a1 + 16, a2, a3, a4, a5, 1);
}

uint64_t `anonymous namespace'::OperationPrinter::printCustomOrGenericOp(_anonymous_namespace_::OperationPrinter *this, mlir::Operation *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t Values;
  uint64_t AttrData;
  unint64_t v9;
  char *v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  int64x2_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int64x2_t v17;
  int8x16_t *v18;
  int64x2_t v19;
  unint64_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  uint8x16_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint32x4_t v37;
  int8x16_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  int8x16_t v41;
  uint32x4_t v42;
  int64x2_t v43;
  int64x2_t v44;
  uint8x16_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  unint64_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int8x8_t *v55;
  unint64_t v56;
  int8x16_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int8x8_t v60;
  uint16x8_t v61;
  uint32x4_t v62;
  int8x16_t v63;
  int64x2_t v64;
  int64x2_t v65;
  uint32x4_t v66;
  int64x2_t v67;
  unint64_t v68;
  unsigned __int8 *v69;
  int v70;
  uint64_t v71;
  int v72;
  void *v73;
  std::string *v74;
  size_t size;
  size_t v76;
  uint64_t v77;
  void *v78;
  llvm **v79;
  char v80;
  llvm **v81;
  _QWORD v82[4];
  __int16 v83;
  std::string v84;
  llvm *v85[2];
  unint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 64) & 4) != 0)
    return (*(uint64_t (**)(_anonymous_namespace_::OperationPrinter *, mlir::Operation *, uint64_t))(*(_QWORD *)this + 216))(this, a2, 1);
  v4 = *((_QWORD *)a2 + 6);
  if (*(_UNKNOWN **)(v4 + 16) != &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v5 = *((_QWORD *)this + 10) + 16 * *((unsigned int *)this + 22);
    return (*(uint64_t (**)(uint64_t, mlir::Operation *, _anonymous_namespace_::OperationPrinter *, _QWORD, _QWORD))(*(_QWORD *)v4 + 56))(v4, a2, this, *(_QWORD *)(v5 - 16), *(_QWORD *)(v5 - 8));
  }
  v82[0] = *(_QWORD *)(v4 + 8);
  Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
  if (!Values)
    return (*(uint64_t (**)(_anonymous_namespace_::OperationPrinter *, mlir::Operation *, uint64_t))(*(_QWORD *)this + 216))(this, a2, 1);
  (*(void (**)(llvm **__return_ptr, uint64_t, mlir::Operation *))(*(_QWORD *)Values + 72))(v85, Values, a2);
  if (v86 < 8)
    return (*(uint64_t (**)(_anonymous_namespace_::OperationPrinter *, mlir::Operation *, uint64_t))(*(_QWORD *)this + 216))(this, a2, 1);
  v82[0] = *(_QWORD *)(*((_QWORD *)a2 + 6) + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v82);
  if (v9)
  {
    v10 = (char *)AttrData;
    v11 = v9;
    if (v9 < 8)
    {
      v12 = 0;
      v13 = 0;
      goto LABEL_20;
    }
    if (v9 >= 0x20)
    {
      v14 = 0uLL;
      v15.i64[0] = 0x2E2E2E2E2E2E2E2ELL;
      v15.i64[1] = 0x2E2E2E2E2E2E2E2ELL;
      v16 = (int8x16_t)vdupq_n_s64(1uLL);
      v12 = v9 & 0xFFFFFFFFFFFFFFE0;
      v17 = 0uLL;
      v18 = (int8x16_t *)(AttrData + 16);
      v19 = 0uLL;
      v20 = v9 & 0xFFFFFFFFFFFFFFE0;
      v21 = 0uLL;
      v22 = 0uLL;
      v23 = 0uLL;
      v24 = 0uLL;
      v25 = 0uLL;
      v26 = 0uLL;
      v27 = 0uLL;
      v28 = 0uLL;
      v29 = 0uLL;
      v30 = 0uLL;
      v31 = 0uLL;
      v32 = 0uLL;
      v33 = 0uLL;
      do
      {
        v34 = (uint8x16_t)vceqq_s8(v18[-1], v15);
        v35 = vmovl_u8(*(uint8x8_t *)v34.i8);
        v36 = vmovl_high_u8(v34);
        v37 = vmovl_high_u16(v36);
        v38.i64[0] = v37.u32[2];
        v38.i64[1] = v37.u32[3];
        v25 = vaddq_s64(v25, (int64x2_t)vandq_s8(v38, v16));
        v39 = vmovl_high_u16(v35);
        v40 = vmovl_u16(*(uint16x4_t *)v36.i8);
        v38.i64[0] = v37.u32[0];
        v38.i64[1] = v37.u32[1];
        v24 = vaddq_s64(v24, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v40.u32[2];
        v38.i64[1] = v40.u32[3];
        v23 = vaddq_s64(v23, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v39.u32[2];
        v38.i64[1] = v39.u32[3];
        v21 = vaddq_s64(v21, (int64x2_t)vandq_s8(v38, v16));
        v41 = *v18;
        v18 += 2;
        v42 = vmovl_u16(*(uint16x4_t *)v35.i8);
        v38.i64[0] = v40.u32[0];
        v38.i64[1] = v40.u32[1];
        v22 = vaddq_s64(v22, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v42.u32[0];
        v38.i64[1] = v42.u32[1];
        v43 = (int64x2_t)vandq_s8(v38, v16);
        v38.i64[0] = v42.u32[2];
        v38.i64[1] = v42.u32[3];
        v44 = (int64x2_t)vandq_s8(v38, v16);
        v38.i64[0] = v39.u32[0];
        v38.i64[1] = v39.u32[1];
        v45 = (uint8x16_t)vceqq_s8(v41, v15);
        v19 = vaddq_s64(v19, (int64x2_t)vandq_s8(v38, v16));
        v46 = vmovl_u8(*(uint8x8_t *)v45.i8);
        v47 = vmovl_high_u8(v45);
        v17 = vaddq_s64(v17, v44);
        v48 = vmovl_high_u16(v47);
        v14 = vaddq_s64(v14, v43);
        v38.i64[0] = v48.u32[2];
        v38.i64[1] = v48.u32[3];
        v33 = vaddq_s64(v33, (int64x2_t)vandq_s8(v38, v16));
        v49 = vmovl_high_u16(v46);
        v50 = vmovl_u16(*(uint16x4_t *)v47.i8);
        v38.i64[0] = v48.u32[0];
        v38.i64[1] = v48.u32[1];
        v32 = vaddq_s64(v32, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v50.u32[2];
        v38.i64[1] = v50.u32[3];
        v31 = vaddq_s64(v31, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v49.u32[2];
        v38.i64[1] = v49.u32[3];
        v29 = vaddq_s64(v29, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v50.u32[0];
        v38.i64[1] = v50.u32[1];
        v30 = vaddq_s64(v30, (int64x2_t)vandq_s8(v38, v16));
        v51 = vmovl_u16(*(uint16x4_t *)v46.i8);
        v38.i64[0] = v49.u32[0];
        v38.i64[1] = v49.u32[1];
        v28 = vaddq_s64(v28, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v51.u32[2];
        v38.i64[1] = v51.u32[3];
        v27 = vaddq_s64(v27, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v51.u32[0];
        v38.i64[1] = v51.u32[1];
        v26 = vaddq_s64(v26, (int64x2_t)vandq_s8(v38, v16));
        v20 -= 32;
      }
      while (v20);
      v13 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v26, v14), vaddq_s64(v30, v22)), vaddq_s64(vaddq_s64(v28, v19), vaddq_s64(v32, v24))), vaddq_s64(vaddq_s64(vaddq_s64(v27, v17), vaddq_s64(v31, v23)), vaddq_s64(vaddq_s64(v29, v21), vaddq_s64(v33, v25)))));
      if (v9 == v12)
        goto LABEL_24;
      if ((v9 & 0x18) == 0)
        goto LABEL_20;
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    v52 = v12;
    v12 = v9 & 0xFFFFFFFFFFFFFFF8;
    v53 = 0uLL;
    v54 = (int64x2_t)(unint64_t)v13;
    v55 = (int8x8_t *)(AttrData + v52);
    v56 = v52 - (v9 & 0xFFFFFFFFFFFFFFF8);
    v57 = (int8x16_t)vdupq_n_s64(1uLL);
    v58 = 0uLL;
    v59 = 0uLL;
    do
    {
      v60 = *v55++;
      v61 = vmovl_u8((uint8x8_t)vceq_s8(v60, (int8x8_t)0x2E2E2E2E2E2E2E2ELL));
      v62 = vmovl_u16(*(uint16x4_t *)v61.i8);
      v63.i64[0] = v62.u32[0];
      v63.i64[1] = v62.u32[1];
      v64 = (int64x2_t)vandq_s8(v63, v57);
      v63.i64[0] = v62.u32[2];
      v63.i64[1] = v62.u32[3];
      v65 = (int64x2_t)vandq_s8(v63, v57);
      v66 = vmovl_high_u16(v61);
      v63.i64[0] = v66.u32[0];
      v63.i64[1] = v66.u32[1];
      v67 = (int64x2_t)vandq_s8(v63, v57);
      v63.i64[0] = v66.u32[2];
      v63.i64[1] = v66.u32[3];
      v59 = vaddq_s64(v59, (int64x2_t)vandq_s8(v63, v57));
      v58 = vaddq_s64(v58, v67);
      v53 = vaddq_s64(v53, v65);
      v54 = vaddq_s64(v54, v64);
      v56 += 8;
    }
    while (v56);
    v13 = vaddvq_s64(vaddq_s64(vaddq_s64(v54, v58), vaddq_s64(v53, v59)));
    if (v9 != v12)
    {
LABEL_20:
      v68 = v9 - v12;
      v69 = (unsigned __int8 *)(AttrData + v12);
      do
      {
        v70 = *v69++;
        if (v70 == 46)
          ++v13;
        --v68;
      }
      while (v68);
    }
LABEL_24:
    if (v13 == 1)
    {
      v71 = *((_QWORD *)this + 10) + 16 * *((unsigned int *)this + 22);
      v83 = 773;
      v82[0] = *(_QWORD *)(v71 - 16);
      v82[1] = *(_QWORD *)(v71 - 8);
      v82[2] = ".";
      llvm::Twine::str((llvm::Twine *)v82, &v84);
      v72 = SHIBYTE(v84.__r_.__value_.__r.__words[2]);
      v73 = (void *)v84.__r_.__value_.__r.__words[0];
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &v84;
      else
        v74 = (std::string *)v84.__r_.__value_.__r.__words[0];
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
      else
        size = v84.__r_.__value_.__l.__size_;
      if (v11 >= size && (!size || !memcmp(v10, v74, size)))
      {
        if (v11 >= size)
          v76 = size;
        else
          v76 = v11;
        v10 += v76;
        v11 -= v76;
      }
      if (v72 < 0)
        operator delete(v73);
    }
    v77 = *((_QWORD *)this + 2);
    v78 = *(void **)(v77 + 32);
    if (v11 <= *(_QWORD *)(v77 + 24) - (_QWORD)v78)
    {
      if (v11)
      {
        memcpy(v78, v10, v11);
        *(_QWORD *)(v77 + 32) += v11;
      }
    }
    else
    {
      llvm::raw_ostream::write(*((llvm::raw_ostream **)this + 2), v10, v11);
    }
  }
  if ((v86 & 2) != 0)
    v79 = v85;
  else
    v79 = (llvm **)v85[0];
  result = (*(uint64_t (**)(llvm **, mlir::Operation *, _anonymous_namespace_::OperationPrinter *))(v86 & 0xFFFFFFFFFFFFFFF8))(v79, a2, this);
  v80 = v86;
  if (v86 >= 8)
  {
    if ((v86 & 4) != 0)
    {
      if ((v86 & 2) != 0)
        v81 = v85;
      else
        v81 = (llvm **)v85[0];
      result = (*(uint64_t (**)(llvm **))((v86 & 0xFFFFFFFFFFFFFFF8) + 16))(v81);
    }
    if ((v80 & 2) == 0)
      llvm::deallocate_buffer(v85[0], v85[1]);
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printGenericOp(_anonymous_namespace_::OperationPrinter *this, mlir::Operation *a2, int a3)
{
  llvm::raw_ostream *AttrData;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream **v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  llvm::raw_ostream *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _WORD *v38;
  const char *v39;
  size_t v40;
  void *v41;
  _QWORD *v42;
  llvm::raw_ostream *v43;
  _BYTE *v44;
  uint64_t PropertiesAsAttribute;
  uint64_t **v46;
  llvm::raw_ostream *v47;
  _WORD *v48;
  llvm::raw_ostream *v49;
  _BYTE *v50;
  llvm::raw_ostream *v51;
  _WORD *v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  llvm::raw_ostream *v56;
  llvm::raw_ostream *v57;
  _BYTE *v58;
  uint64_t Value;
  uint64_t v60;
  llvm::raw_ostream *v61;
  uint64_t v62;
  uint64_t i;
  const char *v65;
  size_t v66;
  _WORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  void *v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  _WORD *v84;
  unint64_t v85;
  uint64_t v86;

  if (a3)
  {
    v85 = *(_QWORD *)(*((_QWORD *)a2 + 6) + 8);
    AttrData = (llvm::raw_ostream *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v85);
    v7 = v6;
    v8 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
    v9 = (_BYTE *)*((_QWORD *)v8 + 4);
    if (*((_BYTE **)v8 + 3) == v9)
    {
      llvm::raw_ostream::write(v8, "\"", 1uLL);
    }
    else
    {
      *v9 = 34;
      ++*((_QWORD *)v8 + 4);
    }
    llvm::printEscapedString(AttrData, v7, *((llvm::raw_ostream **)this + 2));
    v10 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if (*((_BYTE **)v10 + 3) == v11)
    {
      llvm::raw_ostream::write(v10, "\"", 1uLL);
      v13 = (llvm::raw_ostream **)((char *)this + 16);
      v12 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
      v14 = (_BYTE *)*((_QWORD *)v12 + 4);
      if ((unint64_t)v14 < *((_QWORD *)v12 + 3))
        goto LABEL_8;
LABEL_10:
      llvm::raw_ostream::write(v12, 40);
      goto LABEL_11;
    }
    *v11 = 34;
    ++*((_QWORD *)v10 + 4);
  }
  v13 = (llvm::raw_ostream **)((char *)this + 16);
  v12 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v14 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v12 + 3))
    goto LABEL_10;
LABEL_8:
  *((_QWORD *)v12 + 4) = v14 + 1;
  *v14 = 40;
LABEL_11:
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v15 = *((unsigned int *)a2 + 17);
    if ((_DWORD)v15)
    {
      v16 = *((_QWORD *)a2 + 9);
      v17 = *v13;
      if ((_DWORD)v15 != 1)
      {
        v35 = v15 - 1;
        v36 = (unint64_t *)(v16 + 56);
        do
        {
          v38 = (_WORD *)*((_QWORD *)v17 + 4);
          if (*((_QWORD *)v17 + 3) - (_QWORD)v38 > 1uLL)
          {
            *v38 = 8236;
            *((_QWORD *)v17 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v17, ", ", 2uLL);
          }
          v37 = *v36;
          v36 += 4;
          --v35;
        }
        while (v35);
      }
    }
  }
  v18 = *v13;
  v19 = (_BYTE *)*((_QWORD *)*v13 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)*v13 + 3))
  {
    llvm::raw_ostream::write(v18, 41);
    if (!*((_DWORD *)a2 + 10))
      goto LABEL_45;
  }
  else
  {
    *((_QWORD *)v18 + 4) = v19 + 1;
    *v19 = 41;
    if (!*((_DWORD *)a2 + 10))
      goto LABEL_45;
  }
  v20 = *v13;
  v21 = (_BYTE *)*((_QWORD *)*v13 + 4);
  if ((unint64_t)v21 >= *((_QWORD *)*v13 + 3))
  {
    llvm::raw_ostream::write(v20, 91);
    mlir::SuccessorRange::SuccessorRange(&v85, a2);
    v22 = v86;
    if (!v86)
      goto LABEL_43;
  }
  else
  {
    *((_QWORD *)v20 + 4) = v21 + 1;
    *v21 = 91;
    mlir::SuccessorRange::SuccessorRange(&v85, a2);
    v22 = v86;
    if (!v86)
      goto LABEL_43;
  }
  v23 = v85;
  v24 = *v13;
  v25 = *((_QWORD *)this + 3);
  v26 = *(_QWORD *)(v25 + 376);
  v27 = *(unsigned int *)(v25 + 392);
  if ((_DWORD)v27)
  {
    v28 = *(_QWORD *)(v85 + 24);
    v29 = v27 - 1;
    v30 = (uint64_t *)(v26 + 32 * (((_DWORD)v27 - 1) & ((v28 >> 4) ^ (v28 >> 9))));
    v31 = *v30;
    if (*v30 == v28)
      goto LABEL_34;
    v32 = 1;
    LODWORD(v33) = v29 & ((v28 >> 4) ^ (v28 >> 9));
    while (v31 != -4096)
    {
      v34 = v33 + v32++;
      v33 = v34 & v29;
      v31 = *(_QWORD *)(v26 + 32 * v33);
      if (v31 == v28)
      {
        v30 = (uint64_t *)(v26 + 32 * v33);
        goto LABEL_34;
      }
    }
  }
  v30 = (uint64_t *)(v26 + 32 * v27);
LABEL_34:
  if (v30 == (uint64_t *)(v26 + 32 * v27))
  {
    v42 = (_QWORD *)((char *)v24 + 32);
    v41 = (void *)*((_QWORD *)v24 + 4);
    v39 = "INVALIDBLOCK";
    v40 = 12;
    if (*((_QWORD *)v24 + 3) - (_QWORD)v41 > 0xBuLL)
      goto LABEL_42;
LABEL_39:
    llvm::raw_ostream::write(*v13, v39, v40);
    goto LABEL_40;
  }
  v39 = (const char *)v30[2];
  v40 = v30[3];
  v42 = (_QWORD *)((char *)v24 + 32);
  v41 = (void *)*((_QWORD *)v24 + 4);
  if (v40 > *((_QWORD *)v24 + 3) - (_QWORD)v41)
    goto LABEL_39;
  if (!v40)
  {
LABEL_40:
    if (v22 != 1)
      goto LABEL_70;
    goto LABEL_43;
  }
LABEL_42:
  memcpy(v41, v39, v40);
  *v42 += v40;
  if (v22 != 1)
  {
LABEL_70:
    for (i = 1; i != v22; ++i)
    {
      v67 = (_WORD *)*((_QWORD *)v24 + 4);
      if (*((_QWORD *)v24 + 3) - (_QWORD)v67 > 1uLL)
      {
        *v67 = 8236;
        *((_QWORD *)v24 + 4) += 2;
        v68 = (_QWORD *)*((_QWORD *)this + 2);
        v72 = *((_QWORD *)this + 3);
        v70 = *(_QWORD *)(v72 + 376);
        v71 = *(unsigned int *)(v72 + 392);
        if (!(_DWORD)v71)
          goto LABEL_83;
      }
      else
      {
        llvm::raw_ostream::write(v24, ", ", 2uLL);
        v68 = (_QWORD *)*((_QWORD *)this + 2);
        v69 = *((_QWORD *)this + 3);
        v70 = *(_QWORD *)(v69 + 376);
        v71 = *(unsigned int *)(v69 + 392);
        if (!(_DWORD)v71)
          goto LABEL_83;
      }
      v73 = *(_QWORD *)(v23 + 32 * i + 24);
      v74 = v71 - 1;
      v75 = (uint64_t *)(v70 + 32 * (((_DWORD)v71 - 1) & ((v73 >> 4) ^ (v73 >> 9))));
      v76 = *v75;
      if (*v75 == v73)
        goto LABEL_84;
      v77 = 1;
      LODWORD(v78) = v74 & ((v73 >> 4) ^ (v73 >> 9));
      while (v76 != -4096)
      {
        v79 = v78 + v77++;
        v78 = v79 & v74;
        v76 = *(_QWORD *)(v70 + 32 * v78);
        if (v76 == v73)
        {
          v75 = (uint64_t *)(v70 + 32 * v78);
          goto LABEL_84;
        }
      }
LABEL_83:
      v75 = (uint64_t *)(v70 + 32 * v71);
LABEL_84:
      if (v75 == (uint64_t *)(v70 + 32 * v71))
      {
        v81 = v68 + 4;
        v80 = (void *)v68[4];
        if (v68[3] - (_QWORD)v80 > 0xBuLL)
        {
          v66 = 12;
          v65 = "INVALIDBLOCK";
LABEL_90:
          memcpy(v80, v65, v66);
          *v81 += v66;
          continue;
        }
        v65 = "INVALIDBLOCK";
        v66 = 12;
      }
      else
      {
        v65 = (const char *)v75[2];
        v66 = v75[3];
        v81 = v68 + 4;
        v80 = (void *)v68[4];
        if (v66 <= v68[3] - (_QWORD)v80)
        {
          if (!v66)
            continue;
          goto LABEL_90;
        }
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)v68, v65, v66);
    }
  }
LABEL_43:
  v43 = *v13;
  v44 = (_BYTE *)*((_QWORD *)*v13 + 4);
  if ((unint64_t)v44 >= *((_QWORD *)*v13 + 3))
  {
    llvm::raw_ostream::write(v43, 93);
    PropertiesAsAttribute = mlir::Operation::getPropertiesAsAttribute(a2);
    if (!PropertiesAsAttribute)
      goto LABEL_54;
LABEL_48:
    v46 = (uint64_t **)PropertiesAsAttribute;
    v47 = *v13;
    v48 = (_WORD *)*((_QWORD *)*v13 + 4);
    if (*((_QWORD *)*v13 + 3) - (_QWORD)v48 > 1uLL)
    {
      *v48 = 15392;
      *((_QWORD *)v47 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v47, " <", 2uLL);
      {
LABEL_56:
        mlir::AsmPrinter::Impl::printAttributeImpl(v13, v46, 0);
        v49 = *v13;
        v50 = (_BYTE *)*((_QWORD *)*v13 + 4);
        if ((unint64_t)v50 >= *((_QWORD *)*v13 + 3))
        {
LABEL_57:
          llvm::raw_ostream::write(v49, 62);
          if ((*((_DWORD *)a2 + 11) & 0x7FFFFF) == 0)
            goto LABEL_66;
LABEL_58:
          v51 = *v13;
          v52 = (_WORD *)*((_QWORD *)*v13 + 4);
          if (*((_QWORD *)*v13 + 3) - (_QWORD)v52 > 1uLL)
          {
            *v52 = 10272;
            *((_QWORD *)v51 + 4) += 2;
            v53 = *((unsigned int *)a2 + 11);
            v54 = v53 & 0x7FFFFF;
            if ((v53 & 0x7FFFFF) == 0)
              goto LABEL_63;
          }
          else
          {
            llvm::raw_ostream::write(v51, " (", 2uLL);
            v53 = *((unsigned int *)a2 + 11);
            v54 = v53 & 0x7FFFFF;
            if ((v53 & 0x7FFFFF) == 0)
            {
LABEL_63:
              v57 = *v13;
              v58 = (_BYTE *)*((_QWORD *)*v13 + 4);
              if ((unint64_t)v58 >= *((_QWORD *)*v13 + 3))
              {
                llvm::raw_ostream::write(v57, 41);
              }
              else
              {
                *((_QWORD *)v57 + 4) = v58 + 1;
                *v58 = 41;
              }
              goto LABEL_66;
            }
          }
          v55 = (((unint64_t)a2 + 16 * ((v53 >> 23) & 1) + ((v53 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
              + 32 * *((unsigned int *)a2 + 10);
          v56 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
          (*(void (**)(_anonymous_namespace_::OperationPrinter *, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 224))(this, v55, 1, 1, 1);
          if (v54 != 1)
          {
            v82 = v55 + 24;
            v83 = 24 * v54 - 24;
            do
            {
              v84 = (_WORD *)*((_QWORD *)v56 + 4);
              if (*((_QWORD *)v56 + 3) - (_QWORD)v84 > 1uLL)
              {
                *v84 = 8236;
                *((_QWORD *)v56 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v56, ", ", 2uLL);
              }
              (*(void (**)(_anonymous_namespace_::OperationPrinter *, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 224))(this, v82, 1, 1, 1);
              v82 += 24;
              v83 -= 24;
            }
            while (v83);
          }
          goto LABEL_63;
        }
LABEL_53:
        *((_QWORD *)v49 + 4) = v50 + 1;
        *v50 = 62;
        goto LABEL_54;
      }
    }
    v49 = *v13;
    v50 = (_BYTE *)*((_QWORD *)*v13 + 4);
    if ((unint64_t)v50 >= *((_QWORD *)*v13 + 3))
      goto LABEL_57;
    goto LABEL_53;
  }
  *((_QWORD *)v43 + 4) = v44 + 1;
  *v44 = 93;
LABEL_45:
  PropertiesAsAttribute = mlir::Operation::getPropertiesAsAttribute(a2);
  if (PropertiesAsAttribute)
    goto LABEL_48;
LABEL_54:
  if ((*((_DWORD *)a2 + 11) & 0x7FFFFF) != 0)
    goto LABEL_58;
LABEL_66:
  Value = mlir::ArrayAttr::getValue((mlir::Operation *)((char *)a2 + 56));
  (*(void (**)(_anonymous_namespace_::OperationPrinter *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 192))(this, Value, v60, 0, 0);
  v61 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v62 = *((_QWORD *)v61 + 4);
  if ((unint64_t)(*((_QWORD *)v61 + 3) - v62) > 2)
  {
    *(_BYTE *)(v62 + 2) = 32;
    *(_WORD *)v62 = 14880;
    *((_QWORD *)v61 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v61, " : ", 3uLL);
  }
  return mlir::OpAsmPrinter::printFunctionalType(this, a2);
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printRegion(_anonymous_namespace_::OperationPrinter *this, mlir::Region *a2, int a3, char a4, int a5)
{
  char v6;
  llvm::raw_ostream *result;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  const char *v17;
  size_t v18;
  uint64_t v19;
  uint64_t InterfaceFor;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  mlir::Block *v28;
  _QWORD *v29;
  _BOOL4 v30;
  mlir::Region *i;
  mlir::Block *v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *((_BYTE *)this + 64);
  result = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v9 = (_BYTE *)*((_QWORD *)result + 3);
  v8 = (_BYTE *)*((_QWORD *)result + 4);
  if ((v6 & 8) == 0)
  {
    if (v9 == v8)
    {
      result = llvm::raw_ostream::write(result, "{", 1uLL);
      v14 = (_BYTE *)*((_QWORD *)result + 4);
      ++*((_DWORD *)this + 18);
      if ((unint64_t)v14 < *((_QWORD *)result + 3))
      {
LABEL_4:
        *((_QWORD *)result + 4) = v14 + 1;
        *v14 = 10;
        if (*(mlir::Region **)a2 == a2)
          goto LABEL_5;
        goto LABEL_13;
      }
    }
    else
    {
      *v8 = 123;
      v14 = (_BYTE *)(*((_QWORD *)result + 4) + 1);
      *((_QWORD *)result + 4) = v14;
      ++*((_DWORD *)this + 18);
      if ((unint64_t)v14 < *((_QWORD *)result + 3))
        goto LABEL_4;
    }
    llvm::raw_ostream::write(result, 10);
    if (*(mlir::Region **)a2 == a2)
    {
LABEL_5:
      result = llvm::raw_ostream::indent(*((llvm::raw_ostream **)this + 2), *((_DWORD *)this + 36));
      v15 = (_BYTE *)*((_QWORD *)result + 4);
      if (*((_BYTE **)result + 3) != v15)
      {
LABEL_6:
        *v15 = 125;
        v16 = *((_QWORD *)result + 4) + 1;
LABEL_10:
        *((_QWORD *)result + 4) = v16;
        return result;
      }
      goto LABEL_39;
    }
LABEL_13:
    v19 = *((_QWORD *)a2 + 2);
    if (mlir::OpInterface<mlir::OpAsmOpInterface,mlir::detail::OpAsmOpInterfaceInterfaceTraits>::getInterfaceFor(v19)
      && v19)
    {
      InterfaceFor = mlir::OpInterface<mlir::OpAsmOpInterface,mlir::detail::OpAsmOpInterfaceInterfaceTraits>::getInterfaceFor(v19);
      v21 = (*(uint64_t (**)(void))(InterfaceFor + 24))();
      v24 = (_DWORD *)((char *)this + 88);
      v23 = *((unsigned int *)this + 22);
      if (v23 >= *((_DWORD *)this + 23))
      {
        v33 = v22;
        v34 = v21;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 80, (char *)this + 96, v23 + 1, 16);
        v22 = v33;
        v21 = v34;
        LODWORD(v23) = *((_DWORD *)this + 22);
      }
      v25 = (uint64_t *)(*((_QWORD *)this + 10) + 16 * v23);
      *v25 = v21;
    }
    else
    {
      v24 = (_DWORD *)((char *)this + 88);
      v26 = *((unsigned int *)this + 22);
      if (v26 >= *((_DWORD *)this + 23))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 80, (char *)this + 96, v26 + 1, 16);
        LODWORD(v26) = *((_DWORD *)this + 22);
      }
      v22 = 0;
      v25 = (uint64_t *)(*((_QWORD *)this + 10) + 16 * v26);
      *v25 = (uint64_t)"";
    }
    v25[1] = v22;
    ++*v24;
    v27 = *((_QWORD *)a2 + 1);
    if (v27)
      v28 = (mlir::Block *)(v27 - 8);
    else
      v28 = 0;
    if (a5)
    {
      v29 = (_QWORD *)*((_QWORD *)v28 + 4);
      v30 = v29 == (_QWORD *)((char *)v28 + 32);
      if (v29 == (_QWORD *)((char *)v28 + 32) || !a3)
      {
LABEL_33:
        for (i = *(mlir::Region **)(*((_QWORD *)a2 + 1) + 8); i != a2; i = (mlir::Region *)*((_QWORD *)i + 1))
        {
          if (i)
            v32 = (mlir::Region *)((char *)i - 8);
          else
            v32 = 0;
        }
        --*((_DWORD *)this + 22);
        result = llvm::raw_ostream::indent(*((llvm::raw_ostream **)this + 2), *((_DWORD *)this + 36));
        v15 = (_BYTE *)*((_QWORD *)result + 4);
        if (*((_BYTE **)result + 3) != v15)
          goto LABEL_6;
LABEL_39:
        v17 = "}";
        v18 = 1;
        return llvm::raw_ostream::write(result, v17, v18);
      }
    }
    else if (!a3)
    {
      v30 = 0;
      goto LABEL_33;
    }
    v30 = ((*((_QWORD *)v28 + 7) - *((_QWORD *)v28 + 6)) & 0x7FFFFFFF8) != 0;
    goto LABEL_33;
  }
  if ((unint64_t)(v9 - v8) > 4)
  {
    v8[4] = 125;
    *(_DWORD *)v8 = 774778491;
    v16 = *((_QWORD *)result + 4) + 5;
    goto LABEL_10;
  }
  v17 = "{...}";
  v18 = 5;
  return llvm::raw_ostream::write(result, v17, v18);
}

void `anonymous namespace'::OperationPrinter::shadowRegionArgs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  llvm::raw_ostream *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  size_t v18;
  char *v19;
  char v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t *__sz;
  void (**v24)(llvm::raw_svector_ostream *__hidden);
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  void **v32;
  unint64_t v33;
  _QWORD *v34;
  void *v35;
  __int128 v36;
  _BYTE v37[16];
  _QWORD v38[4];

  v38[2] = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a1 + 24);
  v38[0] = a3;
  v38[1] = a4;
  v35 = v37;
  v36 = xmmword_181236BC0;
  v5 = a4;
  if ((_DWORD)a4)
  {
    v7 = 0;
    v8 = (llvm::raw_ostream *)(v4 + 35);
    __sz = v4 + 54;
    v9 = v4 + 38;
    do
    {
      v10 = mlir::ValueRange::dereference_iterator(v38, v7);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)(a2 + 8);
        if (v12)
          v13 = v12 - 8;
        else
          v13 = 0;
        v14 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v7);
        v32 = &v35;
        v33 = v14;
        *(_QWORD *)&v36 = 0;
        v25 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 1;
        v27 = 0;
        v28 = 0;
        v26 = 0;
        v24 = off_1E0E22B88;
        llvm::raw_ostream::SetBufferAndMode((uint64_t)&v24, 0, 0, 0);
        v15 = 0;
        v16 = v32[1];
        v17 = v16 != 0;
        v18 = (size_t)v16 - v17;
        if (v16 != (void *)v17)
        {
          v19 = (char *)*v32 + v17;
          v15 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, (uint64_t)v16 - v17, 0);
          memmove(v15, v19, v18);
        }
        v34 = 0;
        v20 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>(v9, &v33, &v34);
        v21 = v34;
        if ((v20 & 1) == 0)
        {
          v21 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v9, (uint64_t)&v33, &v33, v34);
          v22 = v33;
          v21[1] = 0;
          v21[2] = 0;
          *v21 = v22;
        }
        v21[1] = v15;
        v21[2] = v18;
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v24);
      }
      ++v7;
    }
    while (v5 != v7);
    if (v35 != v37)
      free(v35);
  }
}

double `anonymous namespace'::OperationPrinter::printAffineMapOfSSAIds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Results;
  uint64_t v6;
  double result;
  uint64_t *v8;
  uint64_t v9;
  llvm::raw_ostream **v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  _QWORD v19[3];
  int NumDims;
  uint64_t Value;
  uint64_t v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  v22 = a2;
  v23[0] = a3;
  v23[1] = a4;
  if (a2)
  {
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v22);
    NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
    v19[0] = &NumDims;
    v19[1] = a1;
    v19[2] = v23;
    Results = (uint64_t *)mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
    if (v6)
    {
      v8 = Results;
      v9 = v6;
      v12 = *(llvm::raw_ostream **)(a1 + 16);
      v10 = (llvm::raw_ostream **)(a1 + 16);
      v11 = v12;
      if (v9 != 1)
      {
        v13 = v8 + 1;
        v14 = 8 * v9 - 8;
        do
        {
          v16 = (_WORD *)*((_QWORD *)v11 + 4);
          if (*((_QWORD *)v11 + 3) - (_QWORD)v16 > 1uLL)
          {
            *v16 = 8236;
            *((_QWORD *)v11 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v11, ", ", 2uLL);
          }
          v15 = *v13++;
          v14 -= 8;
        }
        while (v14);
      }
    }
  }
  else
  {
    v17 = *(llvm::raw_ostream **)(a1 + 16);
    v18 = *((_QWORD *)v17 + 4);
    if ((unint64_t)(*((_QWORD *)v17 + 3) - v18) > 0x12)
    {
      *(_DWORD *)(v18 + 15) = 1044271169;
      result = *(double *)"<<NULL AFFINE MAP>>";
      *(_OWORD *)v18 = *(_OWORD *)"<<NULL AFFINE MAP>>";
      *((_QWORD *)v17 + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write(v17, "<<NULL AFFINE MAP>>", 0x13uLL);
    }
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printAffineExprOfSSAIds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[3];
  _QWORD v8[2];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v9[0] = a3;
  v9[1] = a4;
  v8[0] = a5;
  v8[1] = a6;
  v7[0] = a1;
  v7[1] = v9;
  v7[2] = v8;
}

uint64_t mlir::OpInterface<mlir::OpAsmOpInterface,mlir::detail::OpAsmOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
          v31 = 72;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::OpAsmOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
          v31 = 72;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  llvm *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = &result[3 * (v16 & 0x1FFFFFFFFFFFFFFELL)];
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = -4096;
        v18[3] = -4096;
        v18 += 6;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = 24 * v3;
          v21 = v4;
          do
          {
            if ((*(_QWORD *)v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v27 = 0;
              llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)v21, &v27);
              v22 = v27;
              *v27 = *(_QWORD *)v21;
              *(_OWORD *)(v22 + 1) = *(_OWORD *)((char *)v21 + 8);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 = (llvm *)((char *)v21 + 24);
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = &result[3 * v10];
    do
    {
      *v12 = -4096;
      v12 += 3;
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_25:
      v26 = &result[3 * v13];
      do
      {
        *v15 = -4096;
        v15 += 3;
      }
      while (v15 != v26);
      return result;
    }
    v23 = v14 / 0x18 + 1;
    v15 = &result[3 * (v23 & 0x1FFFFFFFFFFFFFFELL)];
    v24 = v23 & 0x1FFFFFFFFFFFFFFELL;
    v25 = result;
    do
    {
      *v25 = -4096;
      v25[3] = -4096;
      v25 += 6;
      v24 -= 2;
    }
    while (v24);
    if (v23 != (v23 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_25;
  }
  return result;
}

llvm::raw_ostream *llvm::function_ref<void ()(unsigned int,BOOL)>::callback_fn<`anonymous namespace'::OperationPrinter::printAffineMapOfSSAIds(mlir::AffineMapAttr,mlir::ValueRange)::$_0>(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  _DWORD *v7;
  unint64_t v8;
  llvm::raw_ostream *result;
  unint64_t v10;
  _BYTE *v11;

  v4 = *(_QWORD *)(a1 + 8);
  if (a3)
  {
    v5 = **(_DWORD **)a1 + a2;
    v6 = *(llvm::raw_ostream **)(v4 + 16);
    v7 = (_DWORD *)*((_QWORD *)v6 + 4);
    if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 6uLL)
    {
      *(_DWORD *)((char *)v7 + 3) = 678195042;
      *v7 = 1651341683;
      *((_QWORD *)v6 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v6, "symbol(", 7uLL);
    }
    v10 = mlir::ValueRange::dereference_iterator(*(_QWORD **)(a1 + 16), v5);
    result = *(llvm::raw_ostream **)(v4 + 16);
    v11 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v11 >= *((_QWORD *)result + 3))
    {
      return llvm::raw_ostream::write(result, 41);
    }
    else
    {
      *((_QWORD *)result + 4) = v11 + 1;
      *v11 = 41;
    }
  }
  else
  {
    v8 = mlir::ValueRange::dereference_iterator(*(_QWORD **)(a1 + 16), a2);
  }
  return result;
}

llvm::raw_ostream *llvm::function_ref<void ()(unsigned int,BOOL)>::callback_fn<`anonymous namespace'::OperationPrinter::printAffineExprOfSSAIds(mlir::AffineExpr,mlir::ValueRange,mlir::ValueRange)::$_0>(uint64_t *a1, unsigned int a2, char a3)
{
  uint64_t v5;
  llvm::raw_ostream *v6;
  _DWORD *v7;
  unint64_t v8;
  llvm::raw_ostream *result;
  unint64_t v10;
  _BYTE *v11;

  v5 = *a1;
  if ((a3 & 1) != 0)
  {
    v6 = *(llvm::raw_ostream **)(v5 + 16);
    v7 = (_DWORD *)*((_QWORD *)v6 + 4);
    if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 6uLL)
    {
      *(_DWORD *)((char *)v7 + 3) = 678195042;
      *v7 = 1651341683;
      *((_QWORD *)v6 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v6, "symbol(", 7uLL);
    }
    v10 = mlir::ValueRange::dereference_iterator((_QWORD *)a1[2], a2);
    result = *(llvm::raw_ostream **)(v5 + 16);
    v11 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v11 >= *((_QWORD *)result + 3))
    {
      return llvm::raw_ostream::write(result, 41);
    }
    else
    {
      *((_QWORD *)result + 4) = v11 + 1;
      *v11 = 41;
    }
  }
  else
  {
    v8 = mlir::ValueRange::dereference_iterator((_QWORD *)a1[1], a2);
  }
  return result;
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printCustomOrGenericOp(_anonymous_namespace_::DummyAliasOperationPrinter *this, const char **a2)
{
  char v4;

  v4 = *(_BYTE *)(*((_QWORD *)this + 2) + 32);
  if ((v4 & 1) != 0)
  {
    v4 = *(_BYTE *)(*((_QWORD *)this + 2) + 32);
  }
  if ((v4 & 4) != 0)
    return (*(uint64_t (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, const char **, uint64_t))(*(_QWORD *)this + 216))(this, a2, 1);
  else
    return (*(uint64_t (**)(const char *, const char **, _anonymous_namespace_::DummyAliasOperationPrinter *, const char *, _QWORD))(*(_QWORD *)a2[6] + 56))(a2[6], a2, this, "", 0);
}

void `anonymous namespace'::DummyAliasOperationPrinter::~DummyAliasOperationPrinter(_anonymous_namespace_::DummyAliasOperationPrinter *this)
{
  *(_QWORD *)this = off_1E0E19748;
  llvm::raw_null_ostream::~raw_null_ostream((_anonymous_namespace_::DummyAliasOperationPrinter *)((char *)this + 32));
}

{
  *(_QWORD *)this = off_1E0E19748;
  llvm::raw_null_ostream::~raw_null_ostream((_anonymous_namespace_::DummyAliasOperationPrinter *)((char *)this + 32));
  operator delete(this);
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::getStream(_anonymous_namespace_::DummyAliasOperationPrinter *this)
{
  return (uint64_t)this + 32;
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printType(uint64_t a1, _QWORD **a2)
{
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printAttribute(uint64_t a1, const char *a2)
{
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printAttributeWithoutType(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printAlias(uint64_t a1, const char *a2)
{
  return 1;
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printAlias(uint64_t a1, _QWORD **a2)
{
  return 1;
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printOptionalLocationSpecifier(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printRegionArgument(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 32) & 1) != 0)
  return result;
}

llvm::raw_ostream *`anonymous namespace'::DummyAliasOperationPrinter::printOperand(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  _BYTE *v3;
  llvm::raw_ostream *result;

  v3 = (_BYTE *)*((_QWORD *)a3 + 4);
  if (*((_BYTE **)a3 + 3) == v3)
    return llvm::raw_ostream::write(a3, "%", 1uLL);
  *v3 = 37;
  ++*((_QWORD *)a3 + 4);
  return result;
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printOptionalAttrDict(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::CallGraphNode *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t CallableRegion;
  _QWORD v14[2];
  uint64_t *v15;
  int v16;
  llvm *v17;
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v6 = (mlir::CallGraphNode *)a2;
    v7 = result;
    if (a5)
    {
      v14[0] = a4;
      v15 = (uint64_t *)(a4 + 16 * a5);
      llvm::detail::DenseSetImpl<llvm::StringRef,llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::DenseMapInfo<llvm::StringRef,void>>::DenseSetImpl<llvm::StringRef const*>((uint64_t)&v16, v14, &v15);
      v8 = 16 * a3;
      while (1)
      {
        CallableRegion = mlir::CallGraphNode::getCallableRegion(v6);
        v14[0] = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
        v14[1] = v9;
        v15 = 0;
        result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t)&v16, (uint64_t)v14, &v15);
        if ((result & 1) != 0)
        {
          if ((v16 & 1) != 0)
          {
            if (v15 != &v19)
              goto LABEL_5;
          }
          else if (v15 != (uint64_t *)((char *)v17 + 16 * v18))
          {
            goto LABEL_5;
          }
        }
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)v6 + 1));
LABEL_5:
        v6 = (mlir::CallGraphNode *)((char *)v6 + 16);
        v8 -= 16;
        if (!v8)
        {
          if ((v16 & 1) == 0)
            llvm::deallocate_buffer(v17, (void *)(16 * v18));
          return result;
        }
      }
    }
    v10 = 16 * a3;
    v11 = a2 + 1;
    do
    {
      v12 = *v11;
      v11 += 2;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v12);
      v10 -= 16;
    }
    while (v10);
  }
  return result;
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printOptionalAttrDictWithKeyword(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
}

uint64_t `anonymous namespace'::DummyAliasOperationPrinter::printGenericOp(_anonymous_namespace_::DummyAliasOperationPrinter *this, mlir::Operation *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t NextResultAtOffset;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t AttrDictionary;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  if ((*(_BYTE *)(*((_QWORD *)this + 2) + 32) & 8) == 0)
  {
    v4 = *((unsigned int *)a2 + 11);
    if ((v4 & 0x7FFFFF) != 0)
    {
      v5 = (((unint64_t)a2 + 16 * ((v4 >> 23) & 1) + ((v4 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *((unsigned int *)a2 + 10);
      v6 = 24 * (v4 & 0x7FFFFF);
      do
      {
        (*(void (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, unint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 224))(this, v5, 1, 1, 0);
        v5 += 24;
        v6 -= 24;
      }
      while (v6);
    }
  }
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v7 = *((_QWORD *)a2 + 9);
    v8 = *((unsigned int *)a2 + 17);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v30 = (char *)v7;
  v31 = v8;
  mlir::OperandRange::getTypes((uint64_t *)&v30, (uint64_t *)&AttrDictionary);
  if (AttrDictionary != v28 || v29 != v27)
  {
    if (AttrDictionary != v28)
    {
      for (i = (uint64_t *)(AttrDictionary + 32 * v27 + 24); ; i += 4)
      {
        v10 = *i;
        (*(void (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, unint64_t))(*(_QWORD *)this + 32))(this, *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    v11 = (uint64_t *)(AttrDictionary + 32 * v27 + 24);
    v12 = v29 - v27;
    do
    {
      v13 = *v11;
      v11 += 4;
      (*(void (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, unint64_t))(*(_QWORD *)this + 32))(this, *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8);
      --v12;
    }
    while (v12);
  }
  v14 = *((unsigned int *)a2 + 9);
  v15 = (char *)a2 - 16;
  if (!(_DWORD)v14)
    v15 = 0;
  v30 = v15;
  v31 = v14;
  mlir::OperandRange::getTypes((uint64_t *)&v30, (uint64_t *)&AttrDictionary);
  v16 = AttrDictionary;
  v17 = v27;
  v18 = v29;
  if (AttrDictionary != v28 || v27 != v29)
  {
    if (AttrDictionary != v28)
    {
      while (1)
      {
        NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, v17);
        (*(void (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, unint64_t))(*(_QWORD *)this + 32))(this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
        ++v17;
      }
    }
    do
    {
      v20 = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, v17);
      (*(void (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, unint64_t))(*(_QWORD *)this + 32))(this, *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8);
      ++v17;
    }
    while (v18 != v17);
  }
  if (*((_BYTE *)a2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(a2);
    result = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
    if (!v22)
      return result;
  }
  else
  {
    result = mlir::ArrayAttr::getValue((mlir::Operation *)((char *)a2 + 56));
    if (!v22)
      return result;
  }
  v23 = 16 * v22;
  v24 = (uint64_t *)(result + 8);
  do
  {
    v25 = *v24;
    v24 += 2;
    result = (*(uint64_t (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, uint64_t))(*(_QWORD *)this + 40))(this, v25);
    v23 -= 16;
  }
  while (v23);
  return result;
}

mlir::GenericProgramPoint *`anonymous namespace'::DummyAliasOperationPrinter::printRegion(mlir::GenericProgramPoint *this, mlir::Region *a2, int a3, char a4)
{
  _anonymous_namespace_::AliasInitializer **v4;
  uint64_t v6;
  mlir::Block *v7;
  mlir::Region *i;
  mlir::Block *v9;
  uint64_t v10;

  if (*(mlir::Region **)a2 != a2)
  {
    v4 = (_anonymous_namespace_::AliasInitializer **)this;
    if ((*(_BYTE *)(*((_QWORD *)this + 2) + 32) & 8) != 0)
    {
      v10 = *((_QWORD *)this + 8);
      if ((unint64_t)(*((_QWORD *)this + 7) - v10) > 4)
      {
        *(_BYTE *)(v10 + 4) = 125;
        *(_DWORD *)v10 = 774778491;
        *((_QWORD *)this + 8) += 5;
      }
      else
      {
        return llvm::raw_ostream::write((mlir::GenericProgramPoint *)((char *)this + 32), "{...}", 5uLL);
      }
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v6)
        v7 = (mlir::Block *)(v6 - 8);
      else
        v7 = 0;
      for (i = *(mlir::Region **)(*((_QWORD *)a2 + 1) + 8); i != a2; i = (mlir::Region *)*((_QWORD *)i + 1))
      {
        if (i)
          v9 = (mlir::Region *)((char *)i - 8);
        else
          v9 = 0;
      }
    }
  }
  return this;
}

uint64_t `anonymous namespace'::AliasInitializer::visit(_anonymous_namespace_::AliasInitializer *a1, _QWORD **a2, int a3)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  int v13;
  void **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  size_t v18;
  unsigned __int8 *v19;
  void *v20;
  int v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void *v28;
  _QWORD **v29;
  uint64_t RHS;
  uint64_t v31;
  uint64_t RawStringData;
  uint64_t MemorySpace;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v38;
  int v39;
  _QWORD v40[2];
  _QWORD **v41;
  void *v42[5];
  void *v43;
  uint64_t v44;
  _anonymous_namespace_::AliasInitializer *v45;
  char v46;
  _BYTE *v47;
  uint64_t v48;
  void (**v49)(llvm::raw_null_ostream *__hidden);
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  int v56;
  _BYTE v57[28];
  void *v58;
  uint64_t v59;
  _QWORD v60[8];

  v60[6] = *MEMORY[0x1E0C80C00];
  v57[0] = 0;
  v57[16] = 0;
  *(_DWORD *)&v57[24] = 0;
  v58 = v60;
  v59 = 0x600000000;
  v42[0] = a2;
  *(_OWORD *)&v42[1] = *(_OWORD *)v57;
  *(_OWORD *)((char *)&v42[2] + 4) = *(_OWORD *)&v57[12];
  v43 = &v45;
  v44 = 0x600000000;
  v8 = v7;
  if (v43 != &v45)
    free(v43);
  if (v58 != v60)
    free(v58);
  v9 = (v6 - *((_QWORD *)a1 + 5)) >> 3;
  if (v8)
  {
    v39 = a3;
    v38 = 0x4EC4EC4EC4EC4EC5 * v9;
    v42[0] = &v42[3];
    *(_OWORD *)&v42[1] = xmmword_181233280;
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 32);
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 40);
    if (v10 != v11)
    {
      do
      {
        while (1)
        {
          v12 = (*(uint64_t (**)(_QWORD, _QWORD **, uint64_t))(*(_QWORD *)*v10 + 24))(*v10, a2, (uint64_t)a1 + 112);
          if (v12)
            break;
          if (++v10 == v11)
            goto LABEL_15;
        }
        v13 = v12;
        llvm::SmallVectorImpl<char>::operator=((uint64_t)v42, (uint64_t)a1 + 56);
        ++v10;
      }
      while (v13 != 2 && v10 != v11);
LABEL_15:
      v15 = (void **)v42[0];
      if (v42[1])
      {
        *(_QWORD *)v57 = &v57[24];
        *(_OWORD *)&v57[8] = xmmword_181236BC0;
        v16 = sanitizeIdentifier((unsigned __int8 *)v42[0], (uint64_t)v42[1], (unsigned __int8 **)v57, "$_-", 3uLL, 0);
        v18 = v17;
        if (v17)
        {
          v19 = v16;
          v20 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*((uint64_t **)a1 + 1), v17, 0);
          memmove(v20, v19, v18);
        }
        else
        {
          v20 = 0;
        }
        if (v39)
          v21 = -1073741823;
        else
          v21 = 1073741825;
        *(_QWORD *)(v6 + 8) = v20;
        *(_QWORD *)(v6 + 16) = v18;
        *(_BYTE *)(v6 + 24) = 1;
        *(_DWORD *)(v6 + 32) = v21;
        *(_DWORD *)(v6 + 48) = 0;
        if (*(_BYTE **)v57 != &v57[24])
          free(*(void **)v57);
        v15 = (void **)v42[0];
      }
      if (v15 != &v42[3])
        free(v15);
    }
    *(_QWORD *)v57 = &v57[16];
    *(_QWORD *)&v57[8] = 0x600000000;
    v42[0] = off_1E0E19AE8;
    memset(&v42[1], 0, 28);
    v43 = &v45;
    v44 = 0;
    v45 = a1;
    v46 = v39;
    v47 = v57;
    v48 = 0;
    v50 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 1;
    v52 = 0;
    v53 = 0;
    v51 = 0;
    v49 = off_1E0E229B8;
    v22 = *a2;
    v23 = (void **)**a2;
    if (v23[3] == &mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id)
    {
      if ((_UNKNOWN *)v22[17] == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
        v29 = a2;
      else
        v29 = 0;
      v41 = v29;
      v24 = v38;
      if (v29)
      {
        RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v41);
        (*((void (**)(void **, uint64_t))v42[0] + 4))(v42, RHS);
        v40[0] = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v41);
        v40[1] = v31;
        if (*(_UNKNOWN **)(*(_QWORD *)v40[0] + 136) != &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id
          || (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v40) & 1) == 0)
        {
          RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v41);
          (*((void (**)(void **, uint64_t))v42[0] + 5))(v42, RawStringData);
        }
        if (mlir::MemRefType::getMemorySpace((mlir::MemRefType *)&v41))
        {
          MemorySpace = mlir::MemRefType::getMemorySpace((mlir::MemRefType *)&v41);
          (*((void (**)(void **, uint64_t))v42[0] + 5))(v42, MemorySpace);
        }
      }
      else
      {
        v40[0] = v42;
        mlir::AbstractAttribute::walkImmediateSubElements((uint64_t)v22);
      }
    }
    else
    {
      (*((void (**)(_QWORD, _QWORD **, void **))*v23 + 7))(**a2, a2, v42);
      v24 = v38;
    }
    v25 = v48;
    v26 = *((_QWORD *)a1 + 5);
    v27 = (void **)(v26 + 104 * v24 + 40);
    if (v27 == (void **)v57)
    {
LABEL_59:
      if (v25)
      {
        *(_DWORD *)(v26 + 104 * v24 + 32) = *(_DWORD *)(v26 + 104 * v24 + 32) & 0xC0000000 | (v25 + 1) & 0x3FFFFFFF;
        v42[0] = off_1E0E19AE8;
        llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v49);
        v36 = v43;
        if (v43 == &v45)
          goto LABEL_62;
      }
      else
      {
        v42[0] = off_1E0E19AE8;
        llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v49);
        v36 = v43;
        if (v43 == &v45)
LABEL_62:
          llvm::deallocate_buffer((llvm *)v42[2], (void *)(8 * LODWORD(v42[4])));
      }
      free(v36);
      goto LABEL_62;
    }
    v28 = *(void **)v57;
    if (*(_BYTE **)v57 != &v57[16])
    {
      if (*(_QWORD *)(v26 + 104 * v24 + 40) != v26 + 104 * v24 + 56)
      {
        free(*v27);
        v28 = *(void **)v57;
      }
      *v27 = v28;
      *(_QWORD *)(v26 + 104 * v24 + 48) = *(_QWORD *)&v57[8];
      *(_QWORD *)v57 = &v57[16];
      *(_DWORD *)&v57[12] = 0;
      goto LABEL_58;
    }
    v34 = *(unsigned int *)&v57[8];
    v35 = *(unsigned int *)(v26 + 104 * v24 + 48);
    if (v35 >= *(_DWORD *)&v57[8])
    {
      if (*(_DWORD *)&v57[8])
        memmove(*v27, &v57[16], 8 * *(unsigned int *)&v57[8]);
      goto LABEL_57;
    }
    if (*(_DWORD *)(v26 + 104 * v24 + 52) >= *(_DWORD *)&v57[8])
    {
      if ((_DWORD)v35)
      {
        memmove(*v27, &v57[16], 8 * v35);
        goto LABEL_55;
      }
    }
    else
    {
      *(_DWORD *)(v26 + 104 * v24 + 48) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v26 + 104 * v24 + 40, (void *)(v26 + 104 * v24 + 56), v34, 8);
    }
    v35 = 0;
LABEL_55:
    if (v35 != *(unsigned int *)&v57[8])
      memcpy((char *)*v27 + 8 * v35, (const void *)(*(_QWORD *)v57 + 8 * v35), 8 * *(unsigned int *)&v57[8] - 8 * v35);
LABEL_57:
    *(_DWORD *)(v26 + 104 * v24 + 48) = v34;
LABEL_58:
    *(_DWORD *)&v57[8] = 0;
    goto LABEL_59;
  }
  if ((a3 & 1) == 0)
  return *(_DWORD *)(v6 + 32) & 0x3FFFFFFF;
}

uint64_t llvm::MapVector<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo>,0u>>::insert(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  int v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  unsigned int v42;
  uint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  unint64_t v50;

  v5 = (__int128 *)(a2 + 1);
  v4 = *a2;
  v6 = *(_DWORD *)(a1 + 16);
  if (!v6)
    goto LABEL_26;
  v7 = *(_QWORD *)a1;
  v8 = ((v4 >> 4) ^ (v4 >> 9)) & (v6 - 1);
  v9 = (_QWORD *)(*(_QWORD *)a1 + 16 * v8);
  v10 = *v9;
  if (v4 == *v9)
    return *(_QWORD *)(a1 + 24) + 104 * *(unsigned int *)(v7 + 16 * v8 + 8);
  v22 = 0;
  v23 = 1;
  while (v10 != -4096)
  {
    if (v22)
      v24 = 0;
    else
      v24 = v10 == -8192;
    if (v24)
      v22 = v9;
    v25 = v8 + v23++;
    v8 = v25 & (v6 - 1);
    v9 = (_QWORD *)(v7 + 16 * v8);
    v10 = *v9;
    if (v4 == *v9)
      return *(_QWORD *)(a1 + 24) + 104 * *(unsigned int *)(v7 + 16 * v8 + 8);
  }
  v26 = (uint64_t)(v22 ? v22 : v9);
  v27 = *(_DWORD *)(a1 + 8);
  if (4 * v27 + 4 < 3 * v6)
  {
    if (v6 + ~v27 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_26:
    v6 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a1, v6);
  v28 = *(_DWORD *)(a1 + 16) - 1;
  v29 = v28 & ((v4 >> 4) ^ (v4 >> 9));
  v26 = *(_QWORD *)a1 + 16 * v29;
  v30 = *(_QWORD *)v26;
  if (v4 == *(_QWORD *)v26)
  {
LABEL_28:
    ++*(_DWORD *)(a1 + 8);
    if (v4 == -4096)
      goto LABEL_8;
    goto LABEL_7;
  }
  v46 = 0;
  v47 = 1;
  while (v30 != -4096)
  {
    if (v46)
      v48 = 0;
    else
      v48 = v30 == -8192;
    if (v48)
      v46 = v26;
    v49 = v29 + v47++;
    v29 = v49 & v28;
    v26 = *(_QWORD *)a1 + 16 * (v49 & v28);
    v30 = *(_QWORD *)v26;
    if (v4 == *(_QWORD *)v26)
      goto LABEL_28;
  }
  if (v46)
    v26 = v46;
LABEL_6:
  v12 = *(_QWORD *)v26;
  ++*(_DWORD *)(a1 + 8);
  if (v12 != -4096)
LABEL_7:
    --*(_DWORD *)(a1 + 12);
LABEL_8:
  *(_QWORD *)v26 = v4;
  *(_DWORD *)(v26 + 8) = 0;
  v13 = (_QWORD *)(a1 + 24);
  v14 = *(_DWORD *)(a1 + 32);
  v15 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v26 + 8) = v14;
  if (v14 >= v15)
  {
    v50 = 0;
    v21 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v13, (void *)(a1 + 40), 0, 104, &v50);
    v31 = &v21[104 * *(unsigned int *)(a1 + 32)];
    *(_QWORD *)v31 = *a2;
    v32 = *v5;
    v33 = *(__int128 *)((char *)v5 + 12);
    *((_QWORD *)v31 + 5) = v31 + 56;
    v34 = (uint64_t)(v31 + 40);
    *(_OWORD *)(v34 - 20) = v33;
    *(_OWORD *)(v34 - 32) = v32;
    *(_QWORD *)(v34 + 8) = 0x600000000;
    if (*((_DWORD *)a2 + 12))
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v34, (uint64_t)(a2 + 5));
    v35 = *(char **)(a1 + 24);
    v36 = *(_DWORD *)(a1 + 32);
    if (v36)
    {
      v37 = &v35[104 * v36];
      v38 = v21 + 40;
      v39 = (uint64_t)(v35 + 40);
      do
      {
        v40 = v39 - 40;
        *(v38 - 5) = *(_QWORD *)(v39 - 40);
        v41 = *(_OWORD *)(v39 - 32);
        *(_OWORD *)((char *)v38 - 20) = *(_OWORD *)(v39 - 20);
        *((_OWORD *)v38 - 2) = v41;
        *v38 = v38 + 2;
        v38[1] = 0x600000000;
        if (*(_DWORD *)(v39 + 8))
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v38, v39);
        v38 += 13;
        v39 += 104;
      }
      while ((char *)(v40 + 104) != v37);
      v35 = *(char **)(a1 + 24);
      v42 = *(_DWORD *)(a1 + 32);
      if (v42)
      {
        v43 = 104 * v42;
        do
        {
          v44 = *(char **)&v35[v43 - 64];
          if (&v35[v43 - 48] != v44)
            free(v44);
          v43 -= 104;
        }
        while (v43);
        v35 = *(char **)(a1 + 24);
      }
    }
    v45 = v50;
    if (v35 != (char *)(a1 + 40))
      free(v35);
    *(_QWORD *)(a1 + 24) = v21;
    v20 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v20;
    *(_DWORD *)(a1 + 36) = v45;
  }
  else
  {
    v16 = (_QWORD *)(*v13 + 104 * v14);
    *v16 = *a2;
    v17 = *v5;
    v18 = *(__int128 *)((char *)v5 + 12);
    v16[5] = v16 + 7;
    v19 = (uint64_t)(v16 + 5);
    *(_OWORD *)(v19 - 20) = v18;
    *(_OWORD *)(v19 - 32) = v17;
    *(_QWORD *)(v19 + 8) = 0x600000000;
    if (*((_DWORD *)a2 + 12))
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v19, (uint64_t)(a2 + 5));
    v20 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v20;
    v21 = *(char **)(a1 + 24);
  }
  return (uint64_t)&v21[104 * v20 - 104];
}

_anonymous_namespace_::AliasInitializer *`anonymous namespace'::AliasInitializer::markAliasNonDeferrable(_anonymous_namespace_::AliasInitializer *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _anonymous_namespace_::AliasInitializer *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;

  v2 = *((_QWORD *)this + 5);
  v3 = v2 + 104 * a2;
  v6 = *(_DWORD *)(v3 + 32);
  v4 = (int *)(v3 + 32);
  v5 = v6;
  if (v6 < 0)
  {
    *v4 = v5 & 0x7FFFFFFF;
    v7 = v2 + 104 * a2;
    v8 = *(unsigned int *)(v7 + 48);
    if ((_DWORD)v8)
    {
      v9 = this;
      v10 = *(unint64_t **)(v7 + 40);
      v11 = 8 * v8;
      do
      {
        v12 = *v10++;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return this;
}

void `anonymous namespace'::DummyAliasDialectAsmPrinter::~DummyAliasDialectAsmPrinter(_anonymous_namespace_::DummyAliasDialectAsmPrinter *this)
{
  char *v2;

  *(_QWORD *)this = off_1E0E19AE8;
  llvm::raw_null_ostream::~raw_null_ostream((_anonymous_namespace_::DummyAliasDialectAsmPrinter *)((char *)this + 88));
  v2 = (char *)*((_QWORD *)this + 5);
  if (v2 != (char *)this + 56)
    free(v2);
  llvm::deallocate_buffer(*((llvm **)this + 2), (void *)(8 * *((unsigned int *)this + 8)));
}

{
  char *v2;

  *(_QWORD *)this = off_1E0E19AE8;
  llvm::raw_null_ostream::~raw_null_ostream((_anonymous_namespace_::DummyAliasDialectAsmPrinter *)((char *)this + 88));
  v2 = (char *)*((_QWORD *)this + 5);
  if (v2 != (char *)this + 56)
    free(v2);
  llvm::deallocate_buffer(*((llvm **)this + 2), (void *)(8 * *((unsigned int *)this + 8)));
}

uint64_t sub_1803B8458()
{
  uint64_t v0;

  return v0;
}

unsigned __int8 *sanitizeIdentifier(unsigned __int8 *a1, uint64_t a2, unsigned __int8 **a3, void *__s, size_t __n, char a6)
{
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  _BYTE *v14;
  unsigned __int8 *v16;
  uint64_t v18;
  int v19;
  unsigned __int8 *v21;
  _QWORD v22[3];
  _QWORD v23[2];
  _QWORD v24[2];

  v10 = a1;
  v24[0] = a1;
  v24[1] = a2;
  v23[0] = __s;
  v23[1] = __n;
  v22[0] = v24;
  v22[1] = v23;
  v22[2] = a3;
  if (((char)*a1 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *a1 + 60) & 0x400) != 0)
  {
    v16 = a3[1];
    if (v16 + 1 > a3[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, (unint64_t)(v16 + 1), 1);
      v16 = a3[1];
    }
    v16[(_QWORD)*a3] = 95;
    ++a3[1];
LABEL_24:
    sanitizeIdentifier(llvm::StringRef,llvm::SmallString<16u> &,llvm::StringRef,BOOL)::$_0::operator()(v22);
    return *a3;
  }
  if ((a6 & 1) != 0 || (char)a1[a2 - 1] < 0 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a1[a2 - 1] + 60) & 0x400) == 0)
  {
    if (a2)
    {
      if (__n)
      {
        v11 = 0;
        while (1)
        {
          v12 = (char)v10[v11];
          if ((v12 - 48) >= 0xA && ((v10[v11] & 0xDF) - 65) >= 0x1Au)
          {
            v14 = memchr(__s, v12, __n);
            if (!v14 || v14 - (_BYTE *)__s == -1)
              break;
          }
          if (a2 == ++v11)
            return v10;
        }
      }
      else
      {
        v18 = 0;
        while (1)
        {
          v19 = a1[v18];
          if ((v19 - 48) >= 0xA && (v19 & 0xFFFFFFDF) - 65 > 0x19)
            break;
          if (a2 == ++v18)
            return v10;
        }
      }
      goto LABEL_24;
    }
  }
  else
  {
    sanitizeIdentifier(llvm::StringRef,llvm::SmallString<16u> &,llvm::StringRef,BOOL)::$_0::operator()(v22);
    v21 = a3[1];
    if (v21 + 1 > a3[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, (unint64_t)(v21 + 1), 1);
      v21 = a3[1];
    }
    v21[(_QWORD)*a3] = 95;
    v10 = *a3;
    ++a3[1];
  }
  return v10;
}

uint64_t llvm::SmallVectorImpl<char>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 24);
    v4 = *(const void **)a2;
    if (v4 == v5)
    {
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(_QWORD *)(a1 + 8);
      if (v8 >= v7)
      {
        if (v7)
          memmove(*(void **)a1, v4, *(_QWORD *)(a2 + 8));
      }
      else
      {
        if (*(_QWORD *)(a1 + 16) >= v7)
        {
          if (v8)
            memmove(*(void **)a1, v4, *(_QWORD *)(a1 + 8));
        }
        else
        {
          *(_QWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), v7, 1);
          v8 = 0;
        }
        v9 = *(_QWORD *)(a2 + 8);
        if (v8 != v9)
          memcpy((void *)(*(_QWORD *)a1 + v8), (const void *)(*(_QWORD *)a2 + v8), *(_QWORD *)a2 + v9 - (*(_QWORD *)a2 + v8));
      }
      *(_QWORD *)(a1 + 8) = v7;
    }
    else
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 24)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = v5;
    }
    *(_QWORD *)(a2 + 8) = 0;
  }
  return a1;
}

void sanitizeIdentifier(llvm::StringRef,llvm::SmallString<16u> &,llvm::StringRef,BOOL)::$_0::operator()(_QWORD *a1)
{
  _BYTE **v1;
  uint64_t v2;
  _BYTE *v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  size_t v12;
  _BYTE *v13;
  _BYTE *v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  size_t v21;
  _BYTE *p_dst;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  _QWORD *v27;
  size_t v28;
  uint64_t v29;
  _BYTE *__dst;
  size_t v31;
  int64_t v32;
  _BYTE v33[17];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v1 = (_BYTE **)*a1;
  v2 = *(_QWORD *)(*a1 + 8);
  if (v2)
  {
    v4 = *v1;
    v5 = &(*v1)[v2];
    do
    {
      v8 = (char)*v4;
      v9 = *v4;
      v10 = (v8 - 48) >= 0xA && ((*v4 & 0xDF) - 65) >= 0x1Au;
      if (v10
        && ((v11 = a1[1], (v12 = *(_QWORD *)(v11 + 8)) == 0)
         || ((v13 = *(_BYTE **)v11, (v14 = memchr(*(void **)v11, (char)*v4, v12)) != 0)
           ? (v15 = v14 - v13 == -1)
           : (v15 = 1),
             v15)))
      {
        v6 = (_QWORD *)a1[2];
        if (v9 != 32)
        {
          if (v9)
          {
            v17 = v8;
            v18 = 16;
            do
            {
              v33[v18--] = llvm::hexdigit(unsigned int,BOOL)::LUT[v17 & 0xF];
              v19 = v17 > 0xF;
              v17 >>= 4;
            }
            while (v19);
            v20 = v18 + 1;
            v21 = 16 - v18;
            if ((unint64_t)(16 - v18) >= 0x7FFFFFFFFFFFFFF8)
              abort();
          }
          else
          {
            v33[16] = 48;
            v20 = 16;
            v21 = 1;
          }
          if (v21 > 0x16)
          {
            v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17)
              v23 = v21 | 7;
            v24 = v23 + 1;
            p_dst = operator new(v23 + 1);
            v31 = v21;
            v32 = v24 | 0x8000000000000000;
            __dst = p_dst;
            if (v20 == 17)
              goto LABEL_36;
          }
          else
          {
            HIBYTE(v32) = v21;
            p_dst = &__dst;
            if (v20 == 17)
              goto LABEL_36;
          }
          memcpy(p_dst, &v33[v20], v21);
          p_dst += v21;
LABEL_36:
          *p_dst = 0;
          v25 = SHIBYTE(v32);
          v26 = __dst;
          if (v32 >= 0)
            v27 = &__dst;
          else
            v27 = __dst;
          if (v32 >= 0)
            v28 = HIBYTE(v32);
          else
            v28 = v31;
          v29 = v6[1];
          if (v6[2] < v29 + v28)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v6, v6 + 3, v29 + v28, 1);
            v29 = v6[1];
          }
          if (v28)
          {
            memcpy((void *)(*v6 + v29), v27, v28);
            v29 = v6[1];
          }
          v6[1] = v29 + v28;
          if (v25 < 0)
            operator delete(v26);
          goto LABEL_7;
        }
        v16 = v6[1];
        if ((unint64_t)(v16 + 1) > v6[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[2], v6 + 3, v16 + 1, 1);
          v16 = v6[1];
        }
        *(_BYTE *)(*v6 + v16) = 95;
      }
      else
      {
        v6 = (_QWORD *)a1[2];
        v7 = v6[1];
        if ((unint64_t)(v7 + 1) > v6[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[2], v6 + 3, v7 + 1, 1);
          v7 = v6[1];
        }
        *(_BYTE *)(*v6 + v7) = v9;
      }
      ++v6[1];
LABEL_7:
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_1803B8A44()
{
  void *v0;

  operator delete(v0);
}

uint64_t `anonymous namespace'::DummyAliasDialectAsmPrinter::getStream(_anonymous_namespace_::DummyAliasDialectAsmPrinter *this)
{
  return (uint64_t)this + 88;
}

void `anonymous namespace'::DummyAliasDialectAsmPrinter::printType(uint64_t a1, _QWORD **a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = v4;
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(unsigned int *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 72), (void *)(v6 + 16), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  if (v3 > *(_QWORD *)(a1 + 80))
    *(_QWORD *)(a1 + 80) = v3;
}

void `anonymous namespace'::DummyAliasDialectAsmPrinter::printAttribute(uint64_t a1, const char *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = v4;
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(unsigned int *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 72), (void *)(v6 + 16), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  if (v3 > *(_QWORD *)(a1 + 80))
    *(_QWORD *)(a1 + 80) = v3;
}

void `anonymous namespace'::DummyAliasDialectAsmPrinter::printAttributeWithoutType(uint64_t a1, const char *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = v4;
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(unsigned int *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 72), (void *)(v6 + 16), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  if (v3 > *(_QWORD *)(a1 + 80))
    *(_QWORD *)(a1 + 80) = v3;
}

uint64_t `anonymous namespace'::DummyAliasDialectAsmPrinter::pushCyclicPrinting(int64x2_t *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[16];
  unsigned __int8 v9;

  v7 = a2;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(this + 1, &v7, (uint64_t)v8);
  v3 = v9;
  if (v9)
  {
    v4 = v7;
    v5 = this[3].u32[0];
    if (v5 >= this[3].i32[1])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&this[2].i64[1], &this[3].u64[1], v5 + 1, 8);
      LODWORD(v5) = this[3].i32[0];
    }
    *(_QWORD *)(this[2].i64[1] + 8 * v5) = v4;
    ++this[3].i32[0];
  }
  return v3;
}

int32x2_t *`anonymous namespace'::DummyAliasDialectAsmPrinter::popCyclicPrinting(int32x2_t *this)
{
  __int32 v1;
  int32x2_t v2;
  uint64_t v3;
  uint64_t v4;
  __int32 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;

  v1 = this[4].i32[0];
  if (v1)
  {
    v2 = this[2];
    v3 = this[6].u32[0];
    v4 = *(_QWORD *)(*(_QWORD *)&this[5] + 8 * v3 - 8);
    v5 = v1 - 1;
    LODWORD(v6) = ((v4 >> 4) ^ (v4 >> 9)) & (v1 - 1);
    v7 = (uint64_t *)(*(_QWORD *)&v2 + 8 * v6);
    v8 = *v7;
    if (v4 == *v7)
    {
LABEL_3:
      *v7 = -8192;
      this[3] = vadd_s32(this[3], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v9 = 1;
      while (v8 != -4096)
      {
        v10 = v6 + v9++;
        v6 = v10 & v5;
        v8 = *(_QWORD *)(*(_QWORD *)&v2 + 8 * v6);
        if (v4 == v8)
        {
          v7 = (uint64_t *)(*(_QWORD *)&v2 + 8 * v6);
          goto LABEL_3;
        }
      }
    }
    this[6].i32[0] = v3 - 1;
  }
  else
  {
    --this[6].i32[0];
  }
  return this;
}

uint64_t `anonymous namespace'::DummyAliasDialectAsmPrinter::printAlias(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  return 1;
}

{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return 1;
}

uint64_t `anonymous namespace'::AliasInitializer::visit(_anonymous_namespace_::AliasInitializer *a1, const char *a2, int a3, char a4)
{
  _anonymous_namespace_::AliasInitializer *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  int v16;
  int v17;
  void **v19;
  unsigned __int8 *v20;
  uint64_t v21;
  size_t v22;
  unsigned __int8 *v23;
  void *v24;
  int v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned __int8 v30;
  const char *v31;
  uint64_t Value;
  uint64_t canMapOperands;
  _anonymous_namespace_::AliasInitializer *v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  mlir::CallGraphNode *v47;
  mlir::CallGraphNode *v48;
  uint64_t CallableRegion;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  uint64_t LHS;
  const char *v63;
  uint64_t RHS;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t **v77;
  char v78;
  uint64_t v79;
  const char *v80;
  const char *v81;
  const char *v82;
  const char *v83;
  const char *v84;
  const char *v85;
  const char *v86;
  const char *v87;
  unint64_t v88;
  void *v89[5];
  void *v90;
  uint64_t v91;
  _anonymous_namespace_::AliasInitializer *v92;
  char v93;
  _BYTE *v94;
  uint64_t v95;
  void (**v96)(llvm::raw_null_ostream *__hidden);
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  int v103;
  _BYTE v104[28];
  _QWORD *v105;
  uint64_t v106;
  _QWORD v107[8];

  v7 = a1;
  v107[6] = *MEMORY[0x1E0C80C00];
  v104[0] = 0;
  v104[16] = 0;
  *(_DWORD *)&v104[24] = 0;
  v105 = v107;
  v106 = 0x600000000;
  v89[0] = (void *)a2;
  *(_OWORD *)&v89[1] = *(_OWORD *)v104;
  *(_OWORD *)((char *)&v89[2] + 4) = *(_OWORD *)&v104[12];
  v90 = &v92;
  v91 = 0x600000000;
  v10 = v9;
  if (v90 != &v92)
    free(v90);
  if (v105 != v107)
    free(v105);
  v11 = (v8 - *((_QWORD *)v7 + 5)) >> 3;
  if (v10)
  {
    v78 = a4;
    v79 = 0x4EC4EC4EC4EC4EC5 * v11;
    v89[0] = &v89[3];
    *(_OWORD *)&v89[1] = xmmword_181233280;
    v12 = (uint64_t)v7 + 56;
    v13 = *(_QWORD **)(*(_QWORD *)v7 + 32);
    v14 = *(_QWORD **)(*(_QWORD *)v7 + 40);
    if (v13 != v14)
    {
      v77 = (uint64_t **)v7;
      v15 = (char *)v7 + 112;
      do
      {
        while (1)
        {
          v16 = (*(uint64_t (**)(_QWORD, const char *, char *))(*(_QWORD *)*v13 + 16))(*v13, a2, v15);
          if (v16)
            break;
          if (++v13 == v14)
            goto LABEL_15;
        }
        v17 = v16;
        llvm::SmallVectorImpl<char>::operator=((uint64_t)v89, v12);
        ++v13;
      }
      while (v17 != 2 && v13 != v14);
LABEL_15:
      v19 = (void **)v89[0];
      if (v89[1])
      {
        *(_QWORD *)v104 = &v104[24];
        *(_OWORD *)&v104[8] = xmmword_181236BC0;
        v20 = sanitizeIdentifier((unsigned __int8 *)v89[0], (uint64_t)v89[1], (unsigned __int8 **)v104, "$_-", 3uLL, 0);
        v22 = v21;
        if (v21)
        {
          v23 = v20;
          v24 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v77[1], v21, 0);
          memmove(v24, v23, v22);
        }
        else
        {
          v24 = 0;
        }
        if (a3)
          v25 = -2147483647;
        else
          v25 = 1;
        *(_QWORD *)(v8 + 8) = v24;
        *(_QWORD *)(v8 + 16) = v22;
        *(_BYTE *)(v8 + 24) = 1;
        *(_DWORD *)(v8 + 32) = v25;
        *(_DWORD *)(v8 + 48) = 0;
        if (*(_BYTE **)v104 != &v104[24])
          free(*(void **)v104);
        v19 = (void **)v89[0];
      }
      v7 = (_anonymous_namespace_::AliasInitializer *)v77;
      if (v19 != &v89[3])
        free(v19);
    }
    *(_QWORD *)v104 = &v104[16];
    *(_QWORD *)&v104[8] = 0x600000000;
    v89[0] = off_1E0E19AE8;
    memset(&v89[1], 0, 28);
    v90 = &v92;
    v91 = 0;
    v92 = v7;
    v93 = a3;
    v94 = v104;
    v95 = 0;
    v97 = 0;
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v99 = 0;
    v100 = 0;
    v98 = 0;
    v96 = off_1E0E229B8;
    v26 = **(void ****)a2;
    if (v26[3] != &mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id)
    {
      (*((void (**)(void **, const char *, void **))*v26 + 5))(v26, a2, v89);
      v27 = v79;
      goto LABEL_32;
    }
    v29 = *(void **)(*(_QWORD *)a2 + 136);
    v27 = v79;
    if (v29 == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id
      || v29 == &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id
      || v29 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
      || v29 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
      || v29 == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id
      || v29 == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      goto LABEL_52;
    }
    if ((v30 & 1) == 0
    {
      v87 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
      v88 = 68;
      v70 = llvm::StringRef::find((uint64_t *)&v87, "DesiredTypeName = ", 0x12uLL, 0);
      if (v88 >= v70)
        v71 = v70;
      else
        v71 = v88;
      v72 = &v87[v71];
      v73 = v88 - v71;
      if (v88 - v71 >= 0x12)
        v74 = 18;
      else
        v74 = v88 - v71;
      v75 = v73 - v74;
      if (v75 >= v75 - 1)
        v76 = v75 - 1;
      else
        v76 = v75;
      mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v72[v74], v76);
    }
    if (v29 == (void *)mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id)
      v31 = a2;
    else
      v31 = 0;
    v87 = v31;
    if (v31)
    {
      Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v87);
LABEL_48:
      (*((void (**)(void **, uint64_t))v89[0] + 5))(v89, Value);
      goto LABEL_32;
    }
    v43 = *(void **)(*(_QWORD *)a2 + 136);
    if (v43 == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
      v44 = a2;
    else
      v44 = 0;
    v86 = v44;
    if (v44)
    {
      v45 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
      if (v46)
      {
        v47 = (mlir::CallGraphNode *)v45;
        v48 = (mlir::CallGraphNode *)(v45 + 16 * v46);
        do
        {
          CallableRegion = mlir::CallGraphNode::getCallableRegion(v47);
          (*((void (**)(void **, uint64_t))v89[0] + 5))(v89, CallableRegion);
          (*((void (**)(void **, _QWORD))v89[0] + 5))(v89, *((_QWORD *)v47 + 1));
          v47 = (mlir::CallGraphNode *)((char *)v47 + 16);
        }
        while (v47 != v48);
      }
      goto LABEL_32;
    }
    if (v43 == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
      v50 = a2;
    else
      v50 = 0;
    v85 = v50;
    if (v50)
    {
      v51 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v85);
      if (v52)
      {
        v53 = (uint64_t *)v51;
        v54 = 8 * v52;
        do
        {
          v55 = *v53++;
          (*((void (**)(void **, uint64_t))v89[0] + 5))(v89, v55);
          v54 -= 8;
        }
        while (v54);
      }
      goto LABEL_32;
    }
    if (v43 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
      v56 = a2;
    else
      v56 = 0;
    v84 = v56;
    if (v56)
    {
      v57 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v84);
      (*((void (**)(void **, uint64_t))v89[0] + 4))(v89, v57);
    }
    else
    {
      if (v43 == &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id)
        v58 = a2;
      else
        v58 = 0;
      v83 = v58;
      if (v58)
      {
        Value = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v83);
        goto LABEL_48;
      }
      if (v43 == &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id)
        v59 = a2;
      else
        v59 = 0;
      v82 = v59;
      if (!v59)
      {
        if (v43 == &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id)
          v60 = a2;
        else
          v60 = 0;
        v81 = v60;
        if (v60)
        {
          v61 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v81);
          (*((void (**)(void **, uint64_t))v89[0] + 5))(v89, v61);
          LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v81);
          (*((void (**)(void **, uint64_t))v89[0] + 5))(v89, LHS);
        }
        else
        {
          if (v43 == &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id)
            v63 = a2;
          else
            v63 = 0;
          v80 = v63;
          if (v63)
          {
            RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v80);
            if (RHS)
              (*((void (**)(void **, uint64_t))v89[0] + 5))(v89, RHS);
            v65 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v80);
            if (v66)
            {
              v67 = (uint64_t *)v65;
              v68 = 8 * v66;
              do
              {
                v69 = *v67++;
                (*((void (**)(void **, uint64_t))v89[0] + 5))(v89, v69);
                v68 -= 8;
              }
              while (v68);
            }
          }
        }
        v27 = v79;
        goto LABEL_32;
      }
      if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v82) + 136) != &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
      {
        Value = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v82);
        goto LABEL_48;
      }
    }
LABEL_32:
    if ((v78 & 1) == 0)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)a2 + 8))
      {
        v28 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)a2 + 8);
        v87 = a2;
        v88 = v28;
        if (a2)
        {
          canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v87);
          if (*(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) != &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id)
            (*((void (**)(void **, uint64_t))v89[0] + 4))(v89, canMapOperands);
        }
      }
      else
      {
        v87 = 0;
        v88 = 0;
      }
    }
LABEL_52:
    v34 = v7;
    v35 = v95;
    v36 = *((_QWORD *)v34 + 5);
    v37 = (void **)(v36 + 104 * v27 + 40);
    if (v37 == (void **)v104)
      goto LABEL_69;
    v38 = *(void **)v104;
    if (*(_BYTE **)v104 != &v104[16])
    {
      if (*(_QWORD *)(v36 + 104 * v27 + 40) != v36 + 104 * v27 + 56)
      {
        free(*v37);
        v38 = *(void **)v104;
      }
      *v37 = v38;
      *(_QWORD *)(v36 + 104 * v27 + 48) = *(_QWORD *)&v104[8];
      *(_QWORD *)v104 = &v104[16];
      *(_DWORD *)&v104[12] = 0;
      goto LABEL_68;
    }
    v39 = *(unsigned int *)&v104[8];
    v40 = *(unsigned int *)(v36 + 104 * v27 + 48);
    if (v40 >= *(_DWORD *)&v104[8])
    {
      if (*(_DWORD *)&v104[8])
        memmove(*v37, &v104[16], 8 * *(unsigned int *)&v104[8]);
      goto LABEL_67;
    }
    if (*(_DWORD *)(v36 + 104 * v27 + 52) >= *(_DWORD *)&v104[8])
    {
      if ((_DWORD)v40)
      {
        memmove(*v37, &v104[16], 8 * v40);
        goto LABEL_65;
      }
    }
    else
    {
      *(_DWORD *)(v36 + 104 * v27 + 48) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v36 + 104 * v27 + 40, (void *)(v36 + 104 * v27 + 56), v39, 8);
    }
    v40 = 0;
LABEL_65:
    if (v40 != *(unsigned int *)&v104[8])
      memcpy((char *)*v37 + 8 * v40, (const void *)(*(_QWORD *)v104 + 8 * v40), 8 * *(unsigned int *)&v104[8] - 8 * v40);
LABEL_67:
    *(_DWORD *)(v36 + 104 * v27 + 48) = v39;
LABEL_68:
    *(_DWORD *)&v104[8] = 0;
LABEL_69:
    if (v35)
    {
      *(_DWORD *)(v36 + 104 * v27 + 32) = *(_DWORD *)(v36 + 104 * v27 + 32) & 0xC0000000 | (v35 + 1) & 0x3FFFFFFF;
      v89[0] = off_1E0E19AE8;
      llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v96);
      v41 = v90;
      if (v90 == &v92)
        goto LABEL_72;
    }
    else
    {
      v89[0] = off_1E0E19AE8;
      llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v96);
      v41 = v90;
      if (v90 == &v92)
LABEL_72:
        llvm::deallocate_buffer((llvm *)v89[2], (void *)(8 * LODWORD(v89[4])));
    }
    free(v41);
    goto LABEL_72;
  }
  if ((a3 & 1) == 0)
  return *(_DWORD *)(v8 + 32) & 0x3FFFFFFF;
}

_QWORD *_ZN4llvm12function_refIFvN4mlir9AttributeEEE11callback_fnIZN12_GLOBAL__N_127DummyAliasDialectAsmPrinter30printAndVisitNestedAliasesImplENS1_4TypeEEUlT_E_EEvlS2_(_QWORD *result, uint64_t a2)
{
  if (a2)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*result + 104))(*result);
  return result;
}

_QWORD *_ZN4llvm12function_refIFvN4mlir4TypeEEE11callback_fnIZN12_GLOBAL__N_127DummyAliasDialectAsmPrinter30printAndVisitNestedAliasesImplES2_EUlT_E_EEvlS2_(_QWORD *result, uint64_t a2)
{
  if (a2)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*result + 112))(*result);
  return result;
}

mlir::GenericProgramPoint *`anonymous namespace'::DummyAliasOperationPrinter::print(_anonymous_namespace_::AliasInitializer **this, mlir::Block *a2, int a3, char a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  mlir::GenericProgramPoint *result;
  mlir::GenericProgramPoint *v12;
  uint64_t v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v15;

  if (a3)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    v8 = *((_QWORD *)a2 + 7) - (_QWORD)v7;
    if (v8)
    {
      v9 = 8 * (v8 >> 3);
      do
      {
        v10 = *v7;
        (*((void (**)(_anonymous_namespace_::AliasInitializer **, unint64_t))*this + 4))(this, *(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF8);
        if ((*((_BYTE *)this[2] + 32) & 1) != 0)
        ++v7;
        v9 -= 8;
      }
      while (v9);
    }
  }
  v12 = (mlir::Block *)((char *)a2 + 32);
  result = (mlir::GenericProgramPoint *)*((_QWORD *)a2 + 4);
  if (result == (mlir::Block *)((char *)a2 + 32))
  {
    v14 = (mlir::GenericProgramPoint *)*((_QWORD *)a2 + 5);
  }
  else
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(result);
    result = (mlir::GenericProgramPoint *)mlir::OperationName::hasTrait<mlir::OpTrait::IsTerminator>((_QWORD *)(v13 + 48));
    v14 = (mlir::GenericProgramPoint *)*((_QWORD *)a2 + 5);
    if ((_DWORD)result && (a4 & 1) == 0)
      v12 = *(mlir::GenericProgramPoint **)v12;
  }
  while (v14 != v12)
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v14);
    result = (mlir::GenericProgramPoint *)(*((uint64_t (**)(_anonymous_namespace_::AliasInitializer **, uint64_t))*this
                                           + 26))(this, v15);
    v14 = (mlir::GenericProgramPoint *)*((_QWORD *)v14 + 1);
  }
  return result;
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::IsTerminator>(_QWORD *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v15 = 84;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v13;
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, v2[190]);
}

void std::__stable_sort<std::_ClassicAlgPolicy,`anonymous namespace'::AliasInitializer::initializeAliases(llvm::MapVector<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo>,0u>> &,llvm::MapVector<void const*,`anonymous namespace'::SymbolAlias,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,`anonymous namespace'::SymbolAlias>,0u>> &)::$_0 &,std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo>*>(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  int v13;
  uint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  void **v34;
  const void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  void **v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  __int128 v58;
  const void **v59;
  const void **v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  size_t v66;
  int v67;
  __int128 v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *__src;
  uint64_t v82;
  _BYTE __s1[28];
  void *v84;
  uint64_t v85;
  _QWORD v86[8];

  v86[6] = *MEMORY[0x1E0C80C00];
  if (a3 < 2)
    return;
  v6 = a1;
  if (a3 == 2)
  {
    v7 = *((_DWORD *)a2 - 18);
    v8 = *(_DWORD *)(a1 + 32);
    if ((v7 & 0x3FFFFFFF) == (v8 & 0x3FFFFFFF))
    {
      v9 = v7 & 0x40000000;
      if (((v8 >> 30) & 1) == v9 >> 30)
      {
        if (!*(_BYTE *)(a1 + 24))
          return;
        if (*((_BYTE *)a2 - 80))
        {
          v10 = *(a2 - 11);
          v11 = *(_QWORD *)(a1 + 16);
          if (v11 >= v10)
            v12 = *(a2 - 11);
          else
            v12 = *(_QWORD *)(a1 + 16);
          if (v12 && (v13 = memcmp((const void *)*(a2 - 12), *(const void **)(a1 + 8), v12)) != 0)
          {
            if ((v13 & 0x80000000) == 0)
              return;
          }
          else if (v10 >= v11)
          {
            return;
          }
        }
      }
      else if (!v9)
      {
        return;
      }
    }
    else if ((v7 & 0x3FFFFFFFu) >= (v8 & 0x3FFFFFFF))
    {
      return;
    }
    return;
  }
  if ((uint64_t)a3 <= 0)
  {
    if ((uint64_t *)a1 == a2)
      return;
    v20 = (_QWORD *)(a1 + 104);
    if ((uint64_t *)(a1 + 104) == a2)
      return;
    v21 = 0;
    v22 = (_QWORD *)a1;
    while (1)
    {
      v23 = v22;
      v22 = v20;
      v24 = *((_DWORD *)v23 + 34);
      v25 = *((_DWORD *)v23 + 8);
      if ((v24 & 0x3FFFFFFF) == (v25 & 0x3FFFFFFF))
      {
        v26 = v24 & 0x40000000;
        if (((v25 >> 30) & 1) == v26 >> 30)
        {
          if (!*((_BYTE *)v23 + 24))
            goto LABEL_23;
          if (*((_BYTE *)v23 + 128))
          {
            v27 = v23[15];
            v28 = v23[2];
            if (v28 >= v27)
              v29 = v23[15];
            else
              v29 = v23[2];
            if (v29 && (v30 = memcmp((const void *)v23[14], (const void *)v23[1], v29)) != 0)
            {
              if ((v30 & 0x80000000) == 0)
                goto LABEL_23;
            }
            else if (v27 >= v28)
            {
              goto LABEL_23;
            }
          }
        }
        else if (!v26)
        {
          goto LABEL_23;
        }
      }
      else if ((v24 & 0x3FFFFFFFu) >= (v25 & 0x3FFFFFFF))
      {
        goto LABEL_23;
      }
      v31 = *v22;
      *(_OWORD *)__s1 = *((_OWORD *)v23 + 7);
      *(_OWORD *)&__s1[12] = *(_OWORD *)((char *)v23 + 124);
      v82 = v31;
      v84 = v86;
      v85 = 0x600000000;
      if (*((_DWORD *)v23 + 38))
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v84, (uint64_t)(v23 + 18));
      for (i = v21; ; i -= 104)
      {
        v33 = v6 + i;
        *(_QWORD *)(v33 + 104) = *(_QWORD *)(v6 + i);
        *(_OWORD *)(v33 + 112) = *(_OWORD *)(v6 + i + 8);
        *(_OWORD *)(v33 + 124) = *(_OWORD *)(v6 + i + 20);
        v34 = (void **)(v6 + i + 144);
        v35 = *(const void **)(v6 + i + 40);
        v36 = v6 + i + 56;
        if ((const void *)v36 != v35)
          break;
        v39 = (_DWORD *)(v33 + 48);
        v40 = *(unsigned int *)(v33 + 48);
        v41 = *(unsigned int *)(v33 + 152);
        if (v41 >= v40)
        {
          if ((_DWORD)v40)
            memmove(*v34, v35, 8 * v40);
        }
        else if (*(_DWORD *)(v6 + i + 156) >= v40)
        {
          if ((_DWORD)v41)
          {
            memmove(*v34, v35, 8 * v41);
            v42 = *v39;
            if (v41 == v42)
              goto LABEL_57;
LABEL_56:
            memcpy((void *)(*(_QWORD *)(v33 + 144) + 8 * v41), (const void *)(*(_QWORD *)(v33 + 40) + 8 * v41), 8 * v42 - 8 * v41);
            goto LABEL_57;
          }
          v41 = 0;
          v42 = *v39;
          if (*v39)
            goto LABEL_56;
        }
        else
        {
          *(_DWORD *)(v33 + 152) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v34, (void *)(v6 + i + 160), v40, 8);
          v41 = 0;
          v42 = *v39;
          if (*v39)
            goto LABEL_56;
        }
LABEL_57:
        *(_DWORD *)(v33 + 152) = v40;
        *v39 = 0;
        if (!i)
          goto LABEL_76;
LABEL_58:
        v43 = *(_DWORD *)(v6 + i - 72);
        if ((*(_DWORD *)&__s1[24] & 0x3FFFFFFF) == (v43 & 0x3FFFFFFF))
        {
          if (((v43 >> 30) & 1) == (*(_DWORD *)&__s1[24] & 0x40000000u) >> 30)
          {
            if (!*(_BYTE *)(v6 + i - 80))
              goto LABEL_75;
            if (__s1[16])
            {
              v44 = *(_QWORD *)&__s1[8];
              v45 = *(_QWORD *)(v6 + i - 88);
              if (v45 >= *(_QWORD *)&__s1[8])
                v46 = *(_QWORD *)&__s1[8];
              else
                v46 = *(_QWORD *)(v6 + i - 88);
              if (v46 && (v47 = memcmp(*(const void **)__s1, *(const void **)(v6 + i - 96), v46)) != 0)
              {
                if ((v47 & 0x80000000) == 0)
                  goto LABEL_75;
              }
              else if (v44 >= v45)
              {
LABEL_75:
                v48 = v6 + i;
                goto LABEL_77;
              }
            }
          }
          else if ((*(_DWORD *)&__s1[24] & 0x40000000) == 0)
          {
            goto LABEL_75;
          }
        }
        else if ((*(_DWORD *)&__s1[24] & 0x3FFFFFFFu) >= (v43 & 0x3FFFFFFF))
        {
          goto LABEL_75;
        }
        v23 -= 13;
      }
      v37 = *v34;
      if ((void *)(v33 + 160) != v37)
      {
        free(v37);
        v35 = *(const void **)(v33 + 40);
      }
      v38 = v6 + i;
      *(_QWORD *)(v33 + 144) = v35;
      *(_QWORD *)(v38 + 152) = *(_QWORD *)(v6 + i + 48);
      *(_QWORD *)(v33 + 40) = v36;
      *(_DWORD *)(v38 + 52) = 0;
      *((_DWORD *)v23 + 12) = 0;
      if (i)
        goto LABEL_58;
LABEL_76:
      v48 = v6;
LABEL_77:
      v49 = v84;
      *(_QWORD *)v48 = v82;
      v50 = v6 + i;
      *(_OWORD *)(v50 + 8) = *(_OWORD *)__s1;
      *(_OWORD *)(v50 + 20) = *(_OWORD *)&__s1[12];
      if ((uint64_t *)v48 == &v82)
        goto LABEL_96;
      v51 = (void **)(v50 + 40);
      if (v49 == v86)
      {
        v52 = v85;
        v53 = *(unsigned int *)(v48 + 48);
        if (v53 >= v85)
        {
          if ((_DWORD)v85)
            memmove(*v51, v86, 8 * v85);
        }
        else
        {
          if (*(_DWORD *)(v48 + 52) < v85)
          {
            *(_DWORD *)(v48 + 48) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v51, (void *)(v48 + 56), v52, 8);
            goto LABEL_91;
          }
          if ((_DWORD)v53)
            memmove(*v51, v86, 8 * v53);
          else
LABEL_91:
            v53 = 0;
          if (v53 != v85)
            memcpy((char *)*v51 + 8 * v53, (char *)v84 + 8 * v53, 8 * v85 - 8 * v53);
        }
        *(_DWORD *)(v48 + 48) = v52;
        goto LABEL_95;
      }
      if (*v51 != (void *)(v48 + 56))
      {
        free(*v51);
        v49 = v84;
      }
      *v51 = v49;
      *(_QWORD *)(v48 + 48) = v85;
      v84 = v86;
      HIDWORD(v85) = 0;
LABEL_95:
      LODWORD(v85) = 0;
      v49 = v84;
LABEL_96:
      if (v49 != v86)
        free(v49);
LABEL_23:
      v20 = v22 + 13;
      v21 += 104;
      if (v22 + 13 == a2)
        return;
    }
  }
  v16 = (uint64_t *)a4;
  v17 = a3 >> 1;
  v18 = (_QWORD *)(a1 + 104 * (a3 >> 1));
  v19 = a3 >> 1;
  if ((uint64_t)a3 > a5)
  {
    return;
  }
  v54 = (uint64_t)&v16[13 * v17];
  v55 = &v16[13 * a3];
  v56 = v54;
  v57 = v16;
  __src = v16;
  while ((uint64_t *)v56 != v55)
  {
    v59 = (const void **)(v56 + 8);
    v60 = (const void **)(v57 + 1);
    v61 = *(_DWORD *)(v56 + 32);
    v62 = *((_DWORD *)v57 + 8);
    if ((v61 & 0x3FFFFFFF) != (v62 & 0x3FFFFFFF))
    {
      if ((v61 & 0x3FFFFFFFu) >= (v62 & 0x3FFFFFFF))
        goto LABEL_99;
      goto LABEL_115;
    }
    v63 = v61 & 0x40000000;
    if (((v62 >> 30) & 1) != v63 >> 30)
    {
      if (!v63)
        goto LABEL_99;
      goto LABEL_115;
    }
    if (!*((_BYTE *)v57 + 24))
      goto LABEL_99;
    if (*(_BYTE *)(v56 + 24))
    {
      v64 = *(_QWORD *)(v56 + 16);
      v65 = v57[2];
      if (v65 >= v64)
        v66 = *(_QWORD *)(v56 + 16);
      else
        v66 = v57[2];
      if (v66 && (v67 = memcmp(*v59, *v60, v66)) != 0)
      {
        v16 = __src;
        if (v67 < 0)
          goto LABEL_115;
      }
      else
      {
        v69 = v64 >= v65;
        v16 = __src;
        if (!v69)
          goto LABEL_115;
      }
LABEL_99:
      *(_QWORD *)v6 = *v57;
      v58 = *(_OWORD *)v60;
      *(_OWORD *)(v6 + 20) = *(_OWORD *)((char *)v57 + 20);
      *(_OWORD *)(v6 + 8) = v58;
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v6 + 40, (uint64_t)(v57 + 5));
      v57 += 13;
      v6 += 104;
      if (v57 == (uint64_t *)v54)
        goto LABEL_125;
    }
    else
    {
LABEL_115:
      *(_QWORD *)v6 = *(_QWORD *)v56;
      v68 = *(_OWORD *)v59;
      *(_OWORD *)(v6 + 20) = *(_OWORD *)(v56 + 20);
      *(_OWORD *)(v6 + 8) = v68;
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v6 + 40, v56 + 40);
      v56 += 104;
      v6 += 104;
      if (v57 == (uint64_t *)v54)
      {
LABEL_125:
        if ((uint64_t *)v56 != v55)
        {
          v74 = 0;
          do
          {
            v75 = v56 + v74;
            v76 = v6 + v74;
            *(_QWORD *)v76 = *(_QWORD *)(v56 + v74);
            v77 = *(_OWORD *)(v56 + v74 + 8);
            *(_OWORD *)(v76 + 20) = *(_OWORD *)(v56 + v74 + 20);
            *(_OWORD *)(v76 + 8) = v77;
            llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v6 + v74 + 40, v56 + v74 + 40);
            v74 += 104;
          }
          while ((uint64_t *)(v75 + 104) != v55);
        }
        goto LABEL_128;
      }
    }
  }
  if (v57 != (uint64_t *)v54)
  {
    v70 = 0;
    do
    {
      v71 = v6 + v70 * 8;
      v72 = &v57[v70];
      *(_QWORD *)v71 = v57[v70];
      v73 = *(_OWORD *)&v57[v70 + 1];
      *(_OWORD *)(v71 + 20) = *(_OWORD *)((char *)&v57[v70 + 2] + 4);
      *(_OWORD *)(v71 + 8) = v73;
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v6 + v70 * 8 + 40, (uint64_t)&v57[v70 + 5]);
      v70 += 13;
    }
    while (v72 + 13 != (uint64_t *)v54);
  }
LABEL_128:
  if (v16)
  {
    v78 = a3;
    v79 = v16 + 7;
    do
    {
      v80 = (uint64_t *)*(v79 - 2);
      if (v79 != v80)
        free(v80);
      v79 += 13;
      --v78;
    }
    while (v78);
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo> *&,std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo> *&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  void *v15;
  uint64_t v16;
  _QWORD v17[8];

  v17[7] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  *a1 = *a2;
  *a2 = v4;
  v5 = (__int128 *)(a2 + 1);
  v6 = a1 + 1;
  v14[0] = *(_OWORD *)(a1 + 1);
  *(_OWORD *)((char *)v14 + 12) = *(_OWORD *)((char *)a1 + 20);
  v15 = v17;
  v16 = 0x600000000;
  if (*((_DWORD *)a1 + 12))
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v15, (uint64_t)(a1 + 5));
  v7 = *v5;
  *(_OWORD *)((char *)v6 + 12) = *(__int128 *)((char *)v5 + 12);
  *v6 = v7;
  v8 = (uint64_t)(a1 + 5);
  v9 = (void **)(a2 + 5);
  llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v8, (uint64_t)(a2 + 5));
  *v5 = v14[0];
  *(__int128 *)((char *)v5 + 12) = *(_OWORD *)((char *)v14 + 12);
  v10 = v15;
  if (v14 != v5)
  {
    if (v15 != v17)
    {
      if ((uint64_t *)a2[5] != a2 + 7)
      {
        free((void *)a2[5]);
        v10 = v15;
      }
      a2[5] = (uint64_t)v10;
      a2[6] = v16;
      v15 = v17;
      HIDWORD(v16) = 0;
      goto LABEL_18;
    }
    v11 = v16;
    v12 = *((unsigned int *)a2 + 12);
    if (v12 >= v16)
    {
      if ((_DWORD)v16)
        memmove(*v9, v17, 8 * v16);
      goto LABEL_17;
    }
    if (*((_DWORD *)a2 + 13) >= v16)
    {
      if ((_DWORD)v12)
      {
        memmove(*v9, v17, 8 * v12);
        v13 = v16;
        if (v12 == v16)
        {
LABEL_17:
          *((_DWORD *)a2 + 12) = v11;
LABEL_18:
          LODWORD(v16) = 0;
          v10 = v15;
          goto LABEL_19;
        }
      }
      else
      {
        v12 = 0;
        v13 = v16;
        if (!(_DWORD)v16)
          goto LABEL_17;
      }
    }
    else
    {
      *((_DWORD *)a2 + 12) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 5), a2 + 7, v11, 8);
      v12 = 0;
      v13 = v16;
      if (!(_DWORD)v16)
        goto LABEL_17;
    }
    memcpy((char *)*v9 + 8 * v12, (char *)v15 + 8 * v12, 8 * v13 - 8 * v12);
    goto LABEL_17;
  }
LABEL_19:
  if (v10 != v17)
    free(v10);
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,`anonymous namespace'::AliasInitializer::initializeAliases(llvm::MapVector<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo>,0u>> &,llvm::MapVector<void const*,`anonymous namespace'::SymbolAlias,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,`anonymous namespace'::SymbolAlias>,0u>> &)::$_0 &,std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo>*>(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  const void **v11;
  const void **v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 v27;
  const void **v28;
  const void **v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  int v36;
  uint64_t v37;
  const void **v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  int v45;
  uint64_t v46;
  void **v47;
  const void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _DWORD *v52;
  unint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  const void **v68;
  const void **v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  size_t v76;
  int v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  BOOL v82;
  uint64_t v83;
  _QWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  _QWORD *v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v95;
  _QWORD *v96;
  const void **v97;

  if (!a3)
    return result;
  v4 = a4;
  v6 = a2;
  v7 = (_QWORD *)result;
  if (a3 != 2)
  {
    if (a3 == 1)
    {
      *(_QWORD *)a4 = *(_QWORD *)result;
      v8 = *(_OWORD *)(result + 8);
      v9 = *(_OWORD *)(result + 20);
      *(_QWORD *)(a4 + 40) = a4 + 56;
      v10 = a4 + 40;
      *(_OWORD *)(a4 + 20) = v9;
      *(_OWORD *)(a4 + 8) = v8;
      *(_QWORD *)(a4 + 48) = 0x600000000;
      if (!*(_DWORD *)(result + 48))
        return result;
      goto LABEL_87;
    }
    if ((uint64_t)a3 <= 8)
    {
      if ((_QWORD *)result == a2)
        return result;
      *(_QWORD *)a4 = *(_QWORD *)result;
      v20 = *(_OWORD *)(result + 8);
      v21 = *(_OWORD *)(result + 20);
      *(_QWORD *)(a4 + 40) = a4 + 56;
      result = a4 + 40;
      *(_OWORD *)(a4 + 20) = v21;
      *(_OWORD *)(a4 + 8) = v20;
      *(_QWORD *)(a4 + 48) = 0x600000000;
      if (*((_DWORD *)v7 + 12))
        result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v7 + 5));
      v22 = v7 + 13;
      if (v7 + 13 == v6)
        return result;
      v23 = 0;
      v24 = v4;
      v95 = v6;
LABEL_28:
      v26 = v22;
      v28 = (const void **)(v7 + 14);
      v29 = (const void **)(v24 + 8);
      v30 = *((_DWORD *)v7 + 34);
      v31 = *(_DWORD *)(v24 + 32);
      if ((v30 & 0x3FFFFFFF) == (v31 & 0x3FFFFFFF))
      {
        v32 = v30 & 0x40000000;
        if (((v31 >> 30) & 1) == v32 >> 30)
        {
          if (!*(_BYTE *)(v24 + 24))
            goto LABEL_78;
          if (*((_BYTE *)v7 + 128))
          {
            v33 = v7[15];
            v34 = *(_QWORD *)(v24 + 16);
            if (v34 >= v33)
              v35 = v7[15];
            else
              v35 = *(_QWORD *)(v24 + 16);
            if (v35 && (v36 = memcmp(*v28, *v29, v35)) != 0)
            {
              if ((v36 & 0x80000000) == 0)
                goto LABEL_78;
            }
            else if (v33 >= v34)
            {
LABEL_78:
              *(_QWORD *)(v24 + 104) = *v26;
              v57 = *(_OWORD *)v28;
              v58 = *(_OWORD *)((char *)v7 + 124);
              *(_QWORD *)(v24 + 144) = v24 + 160;
              result = v24 + 144;
              *(_OWORD *)(v24 + 124) = v58;
              *(_OWORD *)(v24 + 112) = v57;
              *(_QWORD *)(v24 + 152) = 0x600000000;
              if (*((_DWORD *)v7 + 38))
                goto LABEL_26;
              goto LABEL_27;
            }
          }
        }
        else if (!v32)
        {
          goto LABEL_78;
        }
      }
      else if ((v30 & 0x3FFFFFFFu) >= (v31 & 0x3FFFFFFF))
      {
        goto LABEL_78;
      }
      v97 = (const void **)(v7 + 14);
      *(_QWORD *)(v24 + 104) = *(_QWORD *)v24;
      *(_OWORD *)(v24 + 112) = *(_OWORD *)v29;
      *(_OWORD *)(v24 + 124) = *(_OWORD *)(v24 + 20);
      *(_QWORD *)(v24 + 144) = v24 + 160;
      *(_QWORD *)(v24 + 152) = 0x600000000;
      if (*(_DWORD *)(v24 + 48))
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v24 + 144, v24 + 40);
      v25 = v4;
      if (v24 == v4)
        goto LABEL_25;
      v96 = v26;
      v37 = v23;
      v25 = v24;
      while (1)
      {
        while (1)
        {
          v38 = (const void **)(v4 + v37 - 96);
          v39 = *((_DWORD *)v7 + 34);
          v40 = *(_DWORD *)(v4 + v37 - 72);
          if ((v39 & 0x3FFFFFFF) == (v40 & 0x3FFFFFFF))
          {
            v41 = v39 & 0x40000000;
            if (((v40 >> 30) & 1) == v41 >> 30)
            {
              if (!*(_BYTE *)(v4 + v37 - 80))
                goto LABEL_24;
              if (*((_BYTE *)v7 + 128))
              {
                v42 = v7[15];
                v43 = *(_QWORD *)(v4 + v37 - 88);
                if (v43 >= v42)
                  v44 = v7[15];
                else
                  v44 = *(_QWORD *)(v4 + v37 - 88);
                if (v44 && (v45 = memcmp(*v97, *v38, v44)) != 0)
                {
                  if ((v45 & 0x80000000) == 0)
                    goto LABEL_24;
                }
                else if (v42 >= v43)
                {
                  v25 = v4 + v37;
LABEL_24:
                  v6 = v95;
                  v26 = v96;
LABEL_25:
                  *(_QWORD *)v25 = *v26;
                  v27 = *(_OWORD *)v97;
                  *(_OWORD *)(v25 + 20) = *(_OWORD *)((char *)v7 + 124);
                  *(_OWORD *)(v25 + 8) = v27;
                  result = v25 + 40;
LABEL_26:
                  result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v7 + 18));
LABEL_27:
                  v24 += 104;
                  v22 = v26 + 13;
                  v23 += 104;
                  v7 = v26;
                  if (v26 + 13 == v6)
                    return result;
                  goto LABEL_28;
                }
              }
            }
            else if (!v41)
            {
              goto LABEL_24;
            }
          }
          else if ((v39 & 0x3FFFFFFFu) >= (v40 & 0x3FFFFFFF))
          {
            goto LABEL_24;
          }
          v46 = v4 + v37;
          *(_QWORD *)v46 = *(_QWORD *)(v4 + v37 - 104);
          *(_OWORD *)(v46 + 8) = *(_OWORD *)v38;
          *(_OWORD *)(v46 + 20) = *(_OWORD *)(v4 + v37 - 84);
          v47 = (void **)(v4 + v37 + 40);
          v48 = *(const void **)(v4 + v37 - 64);
          v49 = v4 + v37 - 48;
          if ((const void *)v49 == v48)
            break;
          v50 = *v47;
          if ((void *)(v46 + 56) != v50)
          {
            free(v50);
            v48 = *(const void **)(v46 - 64);
          }
          v51 = v4 + v37;
          *(_QWORD *)(v46 + 40) = v48;
          v52 = (_DWORD *)(v25 - 56);
          *(_QWORD *)(v51 + 48) = *(_QWORD *)(v4 + v37 - 56);
          *(_QWORD *)(v46 - 64) = v49;
          *(_DWORD *)(v51 - 52) = 0;
          v25 -= 104;
          *v52 = 0;
          v37 -= 104;
          if (!v37)
          {
LABEL_23:
            v25 = v4;
            goto LABEL_24;
          }
        }
        v54 = (_DWORD *)(v46 - 56);
        v53 = *(unsigned int *)(v46 - 56);
        v55 = *(unsigned int *)(v46 + 48);
        if (v55 >= v53)
        {
          if ((_DWORD)v53)
            memmove(*v47, v48, 8 * v53);
          goto LABEL_44;
        }
        if (*(_DWORD *)(v4 + v37 + 52) >= v53)
        {
          if ((_DWORD)v55)
          {
            memmove(*v47, v48, 8 * v55);
            v56 = *v54;
            if (v55 != v56)
              goto LABEL_76;
          }
          else
          {
            v55 = 0;
            v56 = *v54;
            if (*v54)
LABEL_76:
              memcpy((void *)(*(_QWORD *)(v46 + 40) + 8 * v55), (const void *)(*(_QWORD *)(v46 - 64) + 8 * v55), 8 * v56 - 8 * v55);
          }
        }
        else
        {
          *(_DWORD *)(v46 + 48) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v47, (void *)(v4 + v37 + 56), v53, 8);
          v55 = 0;
          v56 = *v54;
          if (*v54)
            goto LABEL_76;
        }
LABEL_44:
        *(_DWORD *)(v46 + 48) = v53;
        v25 -= 104;
        *v54 = 0;
        v37 -= 104;
        if (!v37)
          goto LABEL_23;
      }
    }
    v64 = a3 >> 1;
    v65 = 104 * (a3 >> 1);
    v66 = result + v65;
    v67 = &v7[(unint64_t)v65 / 8];
    while (1)
    {
      if (v67 == v6)
      {
        if (v7 != (_QWORD *)v66)
        {
          v83 = 0;
          do
          {
            v84 = &v7[v83];
            *(_QWORD *)(v4 + v83 * 8) = v7[v83];
            v85 = *(_OWORD *)&v7[v83 + 1];
            v86 = *(_OWORD *)((char *)&v7[v83 + 2] + 4);
            *(_QWORD *)(v4 + v83 * 8 + 40) = v4 + v83 * 8 + 56;
            result = v4 + v83 * 8 + 40;
            *(_OWORD *)(result - 20) = v86;
            *(_OWORD *)(result - 32) = v85;
            *(_QWORD *)(result + 8) = 0x600000000;
            if (LODWORD(v7[v83 + 6]))
              result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v84 + 5));
            v83 += 13;
          }
          while (v84 + 13 != (_QWORD *)v66);
        }
        return result;
      }
      v68 = (const void **)(v67 + 1);
      v69 = (const void **)(v7 + 1);
      v70 = *((_DWORD *)v67 + 8);
      v71 = *((_DWORD *)v7 + 8);
      if ((v70 & 0x3FFFFFFF) != (v71 & 0x3FFFFFFF))
        break;
      v72 = v70 & 0x40000000;
      if (((v71 >> 30) & 1) != v72 >> 30)
      {
        if (!v72)
          goto LABEL_108;
        goto LABEL_103;
      }
      if (!*((_BYTE *)v7 + 24))
        goto LABEL_108;
      if (*((_BYTE *)v67 + 24))
      {
        v73 = v6;
        v74 = v67[2];
        v75 = v7[2];
        if (v75 >= v74)
          v76 = v67[2];
        else
          v76 = v7[2];
        if (v76 && (v77 = memcmp(*v68, *v69, v76)) != 0)
        {
          v6 = v73;
          if (v77 < 0)
            goto LABEL_103;
        }
        else
        {
          v82 = v74 >= v75;
          v6 = v73;
          if (!v82)
            goto LABEL_103;
        }
LABEL_108:
        *(_QWORD *)v4 = *v7;
        v80 = *(_OWORD *)v69;
        v81 = *(_OWORD *)((char *)v7 + 20);
        *(_QWORD *)(v4 + 40) = v4 + 56;
        result = v4 + 40;
        *(_OWORD *)(v4 + 20) = v81;
        *(_OWORD *)(v4 + 8) = v80;
        *(_QWORD *)(v4 + 48) = 0x600000000;
        if (*((_DWORD *)v7 + 12))
          result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v7 + 5));
        v7 += 13;
        v4 += 104;
        if (v7 == (_QWORD *)v66)
        {
LABEL_124:
          if (v67 != v6)
          {
            v91 = 0;
            do
            {
              v92 = &v67[v91];
              *(_QWORD *)(v4 + v91 * 8) = v67[v91];
              v93 = *(_OWORD *)&v67[v91 + 1];
              v94 = *(_OWORD *)((char *)&v67[v91 + 2] + 4);
              *(_QWORD *)(v4 + v91 * 8 + 40) = v4 + v91 * 8 + 56;
              result = v4 + v91 * 8 + 40;
              *(_OWORD *)(result - 20) = v94;
              *(_OWORD *)(result - 32) = v93;
              *(_QWORD *)(result + 8) = 0x600000000;
              if (LODWORD(v67[v91 + 6]))
                result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v92 + 5));
              v91 += 13;
            }
            while (v92 + 13 != v6);
          }
          return result;
        }
      }
      else
      {
LABEL_103:
        *(_QWORD *)v4 = *v67;
        v78 = *(_OWORD *)v68;
        v79 = *(_OWORD *)((char *)v67 + 20);
        *(_QWORD *)(v4 + 40) = v4 + 56;
        result = v4 + 40;
        *(_OWORD *)(v4 + 20) = v79;
        *(_OWORD *)(v4 + 8) = v78;
        *(_QWORD *)(v4 + 48) = 0x600000000;
        if (*((_DWORD *)v67 + 12))
          result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v67 + 5));
        v67 += 13;
        v4 += 104;
        if (v7 == (_QWORD *)v66)
          goto LABEL_124;
      }
    }
    if ((v70 & 0x3FFFFFFFu) >= (v71 & 0x3FFFFFFF))
      goto LABEL_108;
    goto LABEL_103;
  }
  v11 = (const void **)(a2 - 12);
  v12 = (const void **)(result + 8);
  v13 = *((_DWORD *)a2 - 18);
  v14 = *(_DWORD *)(result + 32);
  if ((v13 & 0x3FFFFFFF) != (v14 & 0x3FFFFFFF))
  {
    if ((v13 & 0x3FFFFFFFu) < (v14 & 0x3FFFFFFF))
      goto LABEL_84;
    goto LABEL_119;
  }
  v15 = v13 & 0x40000000;
  if (((v14 >> 30) & 1) != v15 >> 30)
  {
    if (v15)
      goto LABEL_84;
    goto LABEL_119;
  }
  if (!*(_BYTE *)(result + 24))
    goto LABEL_119;
  if (!*((_BYTE *)a2 - 80))
    goto LABEL_84;
  v16 = *(a2 - 11);
  v17 = *(_QWORD *)(result + 16);
  if (v17 >= v16)
    v18 = *(a2 - 11);
  else
    v18 = *(_QWORD *)(result + 16);
  if (!v18 || (v19 = memcmp(*v11, *v12, v18)) == 0)
  {
    if (v16 < v17)
      goto LABEL_84;
LABEL_119:
    *(_QWORD *)v4 = *v7;
    v87 = *(_OWORD *)v12;
    v88 = *(_OWORD *)((char *)v7 + 20);
    *(_QWORD *)(v4 + 40) = v4 + 56;
    result = v4 + 40;
    *(_OWORD *)(v4 + 20) = v88;
    *(_OWORD *)(v4 + 8) = v87;
    *(_QWORD *)(v4 + 48) = 0x600000000;
    if (*((_DWORD *)v7 + 12))
      result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v7 + 5));
    *(_QWORD *)(v4 + 104) = *(v6 - 13);
    v89 = *(_OWORD *)v11;
    v90 = *(_OWORD *)((char *)v6 - 84);
    *(_QWORD *)(v4 + 144) = v4 + 160;
    v10 = v4 + 144;
    *(_OWORD *)(v10 - 20) = v90;
    *(_OWORD *)(v10 - 32) = v89;
    *(_QWORD *)(v10 + 8) = 0x600000000;
    if (*((_DWORD *)v6 - 14))
    {
      v63 = (uint64_t)(v6 - 8);
      return llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v10, v63);
    }
    return result;
  }
  if ((v19 & 0x80000000) == 0)
    goto LABEL_119;
LABEL_84:
  *(_QWORD *)v4 = *(v6 - 13);
  v59 = *(_OWORD *)v11;
  v60 = *(_OWORD *)((char *)v6 - 84);
  *(_QWORD *)(v4 + 40) = v4 + 56;
  result = v4 + 40;
  *(_OWORD *)(v4 + 20) = v60;
  *(_OWORD *)(v4 + 8) = v59;
  *(_QWORD *)(v4 + 48) = 0x600000000;
  if (*((_DWORD *)v6 - 14))
    result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v6 - 8));
  *(_QWORD *)(v4 + 104) = *v7;
  v61 = *(_OWORD *)v12;
  v62 = *(_OWORD *)((char *)v7 + 20);
  *(_QWORD *)(v4 + 144) = v4 + 160;
  v10 = v4 + 144;
  *(_OWORD *)(v10 - 20) = v62;
  *(_OWORD *)(v10 - 32) = v61;
  *(_QWORD *)(v10 + 8) = 0x600000000;
  if (*((_DWORD *)v7 + 12))
  {
LABEL_87:
    v63 = (uint64_t)(v7 + 5);
    return llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v10, v63);
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,`anonymous namespace'::AliasInitializer::initializeAliases(llvm::MapVector<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo>,0u>> &,llvm::MapVector<void const*,`anonymous namespace'::SymbolAlias,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,`anonymous namespace'::SymbolAlias>,0u>> &)::$_0 &,std::pair<void const*,`anonymous namespace'::AliasInitializer::InProgressAliasInfo>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  size_t v33;
  unint64_t v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t *v37;
  unint64_t v38;
  size_t v39;
  int v40;
  unint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  uint64_t *v44;
  unint64_t v45;
  size_t v46;
  int v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  size_t v54;
  unint64_t v55;
  uint64_t *v56;
  int v57;
  unsigned int v58;
  uint64_t *v59;
  size_t v60;
  size_t v61;
  int v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  unsigned int v70;
  unint64_t v71;
  uint64_t *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t *i;
  uint64_t *v76;
  uint64_t *v77;
  _BOOL4 v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  __int128 v101;
  uint64_t *v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unint64_t v106;
  unint64_t v107;
  size_t v108;
  int v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  __int128 v114;
  const void **v115;
  const void **v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  unint64_t v120;
  unint64_t v121;
  size_t v122;
  int v123;
  __int128 v124;
  unint64_t v125;
  uint64_t *v126;
  __int128 v127;
  unint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  __int128 v131;
  unint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  void *__s1;
  void *__s1a;
  size_t v137;
  size_t v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v148;

  if (!a5)
    return;
  while (1)
  {
    if (a5 <= a7 || a4 <= a7)
    {
      if (a4 > a5)
      {
        if (a2 == a3)
          return;
        v86 = 0;
        v87 = 0;
        v88 = a6;
        do
        {
          v89 = &a2[v86];
          a6[v86] = a2[v86];
          v90 = *(_OWORD *)&a2[v86 + 1];
          v91 = *(_OWORD *)((char *)&a2[v86 + 2] + 4);
          a6[v86 + 5] = (uint64_t)&a6[v86 + 7];
          v92 = (uint64_t)&a6[v86 + 5];
          *(_OWORD *)(v92 - 20) = v91;
          *(_OWORD *)(v92 - 32) = v90;
          *(_QWORD *)(v92 + 8) = 0x600000000;
          if (LODWORD(a2[v86 + 6]))
            llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v92, (uint64_t)(v89 + 5));
          ++v87;
          v86 += 13;
        }
        while (v89 + 13 != a3);
        if (v86 * 8)
        {
          v98 = &a6[v86];
          v99 = a3 - 13;
          do
          {
            if (a2 == a1)
            {
              v125 = 0;
              do
              {
                v126 = &v99[v125];
                *v126 = v98[v125 - 13];
                v127 = *(_OWORD *)&v98[v125 - 12];
                *(_OWORD *)((char *)v126 + 20) = *(_OWORD *)((char *)&v98[v125 - 10] - 4);
                *(_OWORD *)(v126 + 1) = v127;
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v99[v125 + 5], (uint64_t)&v98[v125 - 8]);
                v125 -= 13;
              }
              while (&v98[v125] != v88);
              break;
            }
            v102 = v98 - 12;
            v103 = *((_DWORD *)v98 - 18);
            v104 = *((_DWORD *)a2 - 18);
            if ((v103 & 0x3FFFFFFF) == (v104 & 0x3FFFFFFF))
            {
              v105 = v103 & 0x40000000;
              if (((v104 >> 30) & 1) == v105 >> 30)
              {
                if (*((_BYTE *)a2 - 80))
                {
                  if (!*((_BYTE *)v98 - 80))
                    goto LABEL_174;
                  v106 = *(v98 - 11);
                  v107 = *(a2 - 11);
                  if (v107 >= v106)
                    v108 = *(v98 - 11);
                  else
                    v108 = *(a2 - 11);
                  if (v108 && (v109 = memcmp((const void *)*v102, (const void *)*(a2 - 12), v108)) != 0)
                  {
                    v88 = a6;
                    if (v109 < 0)
                      goto LABEL_174;
                  }
                  else
                  {
                    v16 = v106 >= v107;
                    v88 = a6;
                    if (!v16)
                    {
LABEL_174:
                      v102 = a2 - 12;
                      v100 = a2;
                      a2 -= 13;
                      goto LABEL_158;
                    }
                  }
                }
              }
              else if (v105)
              {
                goto LABEL_174;
              }
            }
            else if ((v103 & 0x3FFFFFFFu) < (v104 & 0x3FFFFFFF))
            {
              goto LABEL_174;
            }
            v100 = v98;
            v98 -= 13;
LABEL_158:
            *v99 = *(v100 - 13);
            v101 = *(_OWORD *)v102;
            *(_OWORD *)((char *)v99 + 20) = *(_OWORD *)((char *)v102 + 12);
            *(_OWORD *)(v99 + 1) = v101;
            llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v99 + 5), (uint64_t)(v100 - 8));
            v99 -= 13;
          }
          while (v98 != v88);
        }
LABEL_205:
        if (v88 && v87)
        {
          v132 = 0;
          v133 = a6 + 7;
          do
          {
            v134 = (_QWORD *)*(v133 - 2);
            if (v133 != v134)
              free(v134);
            ++v132;
            v133 += 13;
          }
          while (v132 < v87);
        }
        return;
      }
      if (a1 == a2)
        return;
      v93 = 0;
      v87 = 0;
      v88 = a6;
      do
      {
        v94 = &a1[v93];
        a6[v93] = a1[v93];
        v95 = *(_OWORD *)&a1[v93 + 1];
        v96 = *(_OWORD *)((char *)&a1[v93 + 2] + 4);
        a6[v93 + 5] = (uint64_t)&a6[v93 + 7];
        v97 = (uint64_t)&a6[v93 + 5];
        *(_OWORD *)(v97 - 20) = v96;
        *(_OWORD *)(v97 - 32) = v95;
        *(_QWORD *)(v97 + 8) = 0x600000000;
        if (LODWORD(a1[v93 + 6]))
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v97, (uint64_t)(v94 + 5));
        ++v87;
        v93 += 13;
      }
      while (v94 + 13 != a2);
      if (!(v93 * 8))
        goto LABEL_205;
      v110 = &a6[v93];
      v111 = (uint64_t)&a6[v93 - 13];
      v112 = a6;
      v113 = a3;
      while (1)
      {
        if (a2 == v113)
        {
          v128 = 0;
          do
          {
            v129 = &a1[v128];
            v130 = &v112[v128];
            *v129 = v112[v128];
            v131 = *(_OWORD *)&v112[v128 + 1];
            *(_OWORD *)((char *)v129 + 20) = *(_OWORD *)((char *)&v112[v128 + 2] + 4);
            *(_OWORD *)(v129 + 1) = v131;
            llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&a1[v128 + 5], (uint64_t)&v112[v128 + 5]);
            v128 += 13;
          }
          while ((uint64_t *)v111 != v130);
          goto LABEL_205;
        }
        v115 = (const void **)(a2 + 1);
        v116 = (const void **)(v112 + 1);
        v117 = *((_DWORD *)a2 + 8);
        v118 = *((_DWORD *)v112 + 8);
        if ((v117 & 0x3FFFFFFF) != (v118 & 0x3FFFFFFF))
        {
          if ((v117 & 0x3FFFFFFFu) < (v118 & 0x3FFFFFFF))
            goto LABEL_195;
          goto LABEL_179;
        }
        v119 = v117 & 0x40000000;
        if (((v118 >> 30) & 1) != v119 >> 30)
          break;
        if (!*((_BYTE *)v112 + 24))
          goto LABEL_179;
        if (*((_BYTE *)a2 + 24))
        {
          v120 = a2[2];
          v121 = v112[2];
          if (v121 >= v120)
            v122 = a2[2];
          else
            v122 = v112[2];
          if (v122 && (v123 = memcmp(*v115, *v116, v122)) != 0)
          {
            v88 = a6;
            if (v123 < 0)
              goto LABEL_195;
          }
          else
          {
            v16 = v120 >= v121;
            v88 = a6;
            if (!v16)
              goto LABEL_195;
          }
LABEL_179:
          *a1 = *v112;
          v114 = *(_OWORD *)v116;
          *(_OWORD *)((char *)a1 + 20) = *(_OWORD *)((char *)v112 + 20);
          *(_OWORD *)(a1 + 1) = v114;
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(a1 + 5), (uint64_t)(v112 + 5));
          v112 += 13;
          v113 = a3;
          a1 += 13;
          if (v110 == v112)
            goto LABEL_205;
        }
        else
        {
LABEL_195:
          *a1 = *a2;
          v124 = *(_OWORD *)v115;
          *(_OWORD *)((char *)a1 + 20) = *(_OWORD *)((char *)a2 + 20);
          *(_OWORD *)(a1 + 1) = v124;
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
          a2 += 13;
          v113 = a3;
          a1 += 13;
          if (v110 == v112)
            goto LABEL_205;
        }
      }
      if (!v119)
        goto LABEL_179;
      goto LABEL_195;
    }
    if (!a4)
      return;
    v10 = 0;
    v11 = *((_DWORD *)a2 + 8);
    v12 = v11 & 0x3FFFFFFF;
    v13 = v11 & 0x40000000;
    v14 = (v11 >> 30) & 1;
    v15 = -a4;
    v148 = a5;
    while (1)
    {
      v17 = a1[v10 + 4];
      if (v12 != (v17 & 0x3FFFFFFF))
      {
        if (v12 < (v17 & 0x3FFFFFFF))
          goto LABEL_22;
        goto LABEL_7;
      }
      if (v14 == ((v17 >> 30) & 1))
        break;
      if (v13)
        goto LABEL_22;
LABEL_7:
      v10 += 13;
      v16 = __CFADD__(v15++, 1);
      if (v16)
        return;
    }
    if (!LOBYTE(a1[v10 + 3]))
      goto LABEL_7;
    if (!*((_BYTE *)a2 + 24))
      goto LABEL_22;
    v18 = a2[2];
    v19 = a1[v10 + 2];
    if (v19 >= v18)
      v20 = a2[2];
    else
      v20 = a1[v10 + 2];
    if (v20)
    {
      v21 = memcmp((const void *)a2[1], (const void *)a1[v10 + 1], v20);
      a5 = v148;
      if (v21)
      {
        if (v21 < 0)
          goto LABEL_22;
        goto LABEL_7;
      }
    }
    if (v18 >= v19)
      goto LABEL_7;
LABEL_22:
    v22 = -v15;
    v23 = &a1[v10];
    if (-v15 >= a5)
      break;
    if (a5 >= 0)
      v24 = a5;
    else
      v24 = a5 + 1;
    v25 = v24 >> 1;
    v26 = a2;
    v144 = &a1[v10];
    if (v23 != a2)
    {
      v27 = 0x4EC4EC4EC4EC4EC5 * (((char *)a2 - (char *)a1 - v10 * 8) >> 3);
      v28 = &a2[13 * v25];
      v29 = *((_DWORD *)v28 + 8);
      v30 = v29 & 0x3FFFFFFF;
      v31 = v29 & 0x40000000;
      v32 = (v29 >> 30) & 1;
      if (*((_BYTE *)v28 + 24))
      {
        v33 = v28[2];
        __s1 = (void *)v28[1];
        v137 = v33;
        v26 = &a1[v10];
        v141 = v25;
        v139 = v32;
        if (!v31)
        {
          while (1)
          {
            v34 = v27 >> 1;
            v35 = &v26[13 * (v27 >> 1)];
            v36 = *((_DWORD *)v35 + 8);
            if (v30 == (v36 & 0x3FFFFFFF))
            {
              if (v32 == ((v36 >> 30) & 1) && LOBYTE(v26[13 * v34 + 3]))
              {
                v37 = &v26[13 * v34];
                v38 = v37[2];
                if (v38 >= v33)
                  v39 = v33;
                else
                  v39 = v37[2];
                if (v39 && (v40 = memcmp(__s1, (const void *)v35[1], v39), v33 = v137, v32 = v139, v25 = v141, v40))
                {
                  if (v40 < 0)
                    goto LABEL_31;
                }
                else if (v33 < v38)
                {
                  goto LABEL_31;
                }
              }
            }
            else if (v30 < (v36 & 0x3FFFFFFF))
            {
              goto LABEL_31;
            }
            v26 = v35 + 13;
            v34 = v27 + ~v34;
LABEL_31:
            v27 = v34;
            if (!v34)
              goto LABEL_109;
          }
        }
        while (1)
        {
          v41 = v27 >> 1;
          v42 = &v26[13 * (v27 >> 1)];
          v43 = *((_DWORD *)v42 + 8);
          if (v30 == (v43 & 0x3FFFFFFF))
          {
            if (v32 != ((v43 >> 30) & 1))
              goto LABEL_47;
            if (LOBYTE(v26[13 * v41 + 3]))
            {
              v44 = &v26[13 * v41];
              v45 = v44[2];
              if (v45 >= v33)
                v46 = v33;
              else
                v46 = v44[2];
              if (v46 && (v47 = memcmp(__s1, (const void *)v42[1], v46), v33 = v137, v32 = v139, v25 = v141, v47))
              {
                if (v47 < 0)
                  goto LABEL_47;
              }
              else if (v33 < v45)
              {
                goto LABEL_47;
              }
            }
          }
          else if (v30 < (v43 & 0x3FFFFFFF))
          {
            goto LABEL_47;
          }
          v26 = v42 + 13;
          v41 = v27 + ~v41;
LABEL_47:
          v27 = v41;
          if (!v41)
            goto LABEL_109;
        }
      }
      v26 = &a1[v10];
      if (!v31)
      {
        while (1)
        {
          v68 = v27 >> 1;
          v69 = &v26[13 * (v27 >> 1)];
          v70 = *((_DWORD *)v69 + 8);
          if (v30 == (v70 & 0x3FFFFFFF))
          {
            if (v32 == ((v70 >> 30) & 1) && LOBYTE(v26[13 * v68 + 3]))
              goto LABEL_94;
          }
          else if (v30 < (v70 & 0x3FFFFFFF))
          {
            goto LABEL_94;
          }
          v26 = v69 + 13;
          v68 = v27 + ~v68;
LABEL_94:
          v27 = v68;
          if (!v68)
            goto LABEL_109;
        }
      }
      do
      {
        v71 = v27 >> 1;
        v72 = &v26[13 * (v27 >> 1)];
        v73 = *((_DWORD *)v72 + 8);
        if (v30 == (v73 & 0x3FFFFFFF))
        {
          if (v32 != ((v73 >> 30) & 1) || LOBYTE(v26[13 * v71 + 3]))
            goto LABEL_102;
        }
        else if (v30 < (v73 & 0x3FFFFFFF))
        {
          goto LABEL_102;
        }
        v26 = v72 + 13;
        v71 = v27 + ~v71;
LABEL_102:
        v27 = v71;
      }
      while (v71);
    }
LABEL_109:
    v48 = &a2[13 * v25];
    v65 = 0x4EC4EC4EC4EC4EC5 * (((char *)v26 - (char *)a1 - v10 * 8) >> 3);
    v63 = a7;
    v66 = v148;
    v23 = v144;
    v67 = v48;
    if (v26 != a2)
      goto LABEL_110;
LABEL_130:
    a4 = -(v65 + v15);
    v80 = v66 - v25;
    if (v65 + v25 >= v66 - (v65 + v25) - v15)
    {
      v81 = -(v65 + v15);
      v82 = v25;
      a4 = v65;
      a3 = v67;
      a5 = v82;
      a1 = v23;
      a2 = v26;
      if (!v82)
        return;
    }
    else
    {
      a5 = v80;
      a1 = v67;
      a2 = v48;
      if (!v80)
        return;
    }
  }
  if (v15 != -1)
  {
    if (v15 > 0)
      v22 = 1 - v15;
    v48 = a3;
    v142 = v22 >> 1;
    if (a3 == a2)
    {
      v63 = a7;
LABEL_89:
      v64 = &a1[13 * v142];
      v65 = v142;
      v26 = &v64[v10];
      v25 = 0x4EC4EC4EC4EC4EC5 * (v48 - a2);
      v66 = v148;
      v67 = v48;
      if (&v64[v10] == a2)
        goto LABEL_130;
LABEL_110:
      v67 = v26;
      if (a2 != v48)
      {
        v143 = v65;
        v74 = v25;
        v67 = v26 + 13;
        for (i = a2 + 13; i != v48; i += 13)
        {
          if (v67 == a2)
            a2 = i;
          v67 += 13;
        }
        if (v67 != a2)
        {
          v76 = v67;
          v77 = a2;
          while (1)
          {
            a2 += 13;
            v78 = v76 + 13 == v77;
            if (a2 == v48)
            {
              if (v76 + 13 == v77)
                goto LABEL_129;
              a2 = v77 + 13;
              v76 += 26;
              while (1)
              {
                v78 = v76 == v77;
                if (a2 != v48)
                  break;
                v79 = v76 == v77;
                v76 += 13;
                if (v79)
                  goto LABEL_129;
              }
            }
            else
            {
              v76 += 13;
            }
            if (v78)
              v77 = a2;
          }
        }
        v67 = a2;
LABEL_129:
        v66 = v148;
        v25 = v74;
        v65 = v143;
      }
      goto LABEL_130;
    }
    v49 = 0x4EC4EC4EC4EC4EC5 * (a3 - a2);
    v50 = &a1[13 * (v22 >> 1) + v10];
    v51 = *((_DWORD *)v50 + 8);
    v52 = v51 & 0x3FFFFFFF;
    v53 = (v51 >> 30) & 1;
    if (*((_BYTE *)v50 + 24))
    {
      v54 = v50[2];
      __s1a = (void *)v50[1];
      v138 = v54;
      v48 = a2;
      v140 = (v51 >> 30) & 1;
      while (1)
      {
        v55 = v49 >> 1;
        v56 = &v48[13 * (v49 >> 1)];
        v57 = *((_DWORD *)v56 + 8);
        if ((v57 & 0x3FFFFFFF) == v52)
        {
          v58 = v57 & 0x40000000;
          if (v53 == v58 >> 30)
          {
            if (LOBYTE(v48[13 * v55 + 3]))
            {
              v59 = &v48[13 * v55];
              v60 = v59[2];
              if (v54 >= v60)
                v61 = v59[2];
              else
                v61 = v54;
              if (v61 && (v62 = memcmp((const void *)v56[1], __s1a, v61), v54 = v138, v53 = v140, v62))
              {
                if ((v62 & 0x80000000) == 0)
                  goto LABEL_69;
              }
              else if (v60 >= v54)
              {
                goto LABEL_69;
              }
            }
          }
          else if (!v58)
          {
            goto LABEL_69;
          }
        }
        else if ((v57 & 0x3FFFFFFFu) >= v52)
        {
          goto LABEL_69;
        }
        v48 = v56 + 13;
        v55 = v49 + ~v55;
LABEL_69:
        v49 = v55;
        if (!v55)
        {
          v63 = a7;
          goto LABEL_87;
        }
      }
    }
    v48 = a2;
    v63 = a7;
    while (2)
    {
      v83 = v49 >> 1;
      v84 = &v48[13 * (v49 >> 1)];
      v85 = *((_DWORD *)v84 + 8);
      if ((v85 & 0x3FFFFFFF) == v52)
      {
        if ((v85 & 0x40000000) == 0 || ((v85 >> 30) & 1) == v53)
        {
LABEL_137:
          v49 = v83;
          if (!v83)
          {
LABEL_87:
            v23 = &a1[v10];
            goto LABEL_89;
          }
          continue;
        }
      }
      else if ((v85 & 0x3FFFFFFF) >= v52)
      {
        goto LABEL_137;
      }
      break;
    }
    v48 = v84 + 13;
    v83 = v49 + ~v83;
    goto LABEL_137;
  }
}

uint64_t *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _DWORD *buffer;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v10 = buffer + 4;
    if (a3)
LABEL_4:
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        v15 = v7[1];
        ++v7;
        v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v10 = buffer + 4;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v10] = 0;
  *(_QWORD *)buffer = a3;
  buffer[2] = 0;
  *v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7)
    v11 = *v7 == -8;
  else
    v11 = 1;
  if (v11)
  {
    do
    {
      v13 = v7[1];
      ++v7;
      v12 = v13;
      if (v13)
        v14 = v12 == -8;
      else
        v14 = 1;
    }
    while (v14);
  }
  return v7;
}

llvm::raw_ostream *`anonymous namespace'::AliasState::printAliases(llvm::raw_ostream *result, unsigned int a2, llvm::raw_ostream **a3, _DWORD *a4, int a5)
{
  llvm::raw_ostream *i;
  uint64_t v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  const char *v12;
  char *v13;
  void *v14;
  llvm::raw_ostream *v15;
  const char *v16;
  size_t v17;
  int v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  uint64_t *v26;

  i = result;
  if (a2)
  {
    v9 = 32 * a2;
    for (i = result; a5 != *((_DWORD *)i + 6) >> 31; i = (llvm::raw_ostream *)((char *)i + 32))
    {
      v9 -= 32;
      if (!v9)
        return result;
    }
  }
  v10 = (llvm::raw_ostream *)((char *)result + 32 * a2);
  if (i != v10)
  {
LABEL_7:
    v11 = *a3;
    if ((*((_BYTE *)i + 27) & 0x40) != 0)
      v12 = "!";
    else
      v12 = "#";
    v13 = (char *)*((_QWORD *)v11 + 4);
    if (*((char **)v11 + 3) == v13)
    {
      v15 = llvm::raw_ostream::write(*a3, v12, 1uLL);
      v14 = (void *)*((_QWORD *)v15 + 4);
      v16 = (const char *)*((_QWORD *)i + 1);
      v17 = *((_QWORD *)i + 2);
      if (v17 > *((_QWORD *)v15 + 3) - (_QWORD)v14)
        goto LABEL_12;
    }
    else
    {
      *v13 = *v12;
      v14 = (void *)(*((_QWORD *)v11 + 4) + 1);
      *((_QWORD *)v11 + 4) = v14;
      v15 = v11;
      v16 = (const char *)*((_QWORD *)i + 1);
      v17 = *((_QWORD *)i + 2);
      if (v17 > *((_QWORD *)v11 + 3) - (_QWORD)v14)
      {
LABEL_12:
        llvm::raw_ostream::write(v15, v16, v17);
        goto LABEL_16;
      }
    }
    if (v17)
    {
      memcpy(v14, v16, v17);
      *((_QWORD *)v15 + 4) += v17;
    }
LABEL_16:
    v18 = *((_DWORD *)i + 6);
    if ((v18 & 0x3FFFFFFF) != 0)
      llvm::raw_ostream::operator<<(v11, v18 & 0x3FFFFFFF);
    v19 = *a3;
    v20 = *((_QWORD *)*a3 + 4);
    if ((unint64_t)(*((_QWORD *)*a3 + 3) - v20) > 2)
    {
      *(_BYTE *)(v20 + 2) = 32;
      *(_WORD *)v20 = 15648;
      *((_QWORD *)v19 + 4) += 3;
      v21 = *(uint64_t **)i;
      v22 = **(_QWORD **)i;
      if ((*((_BYTE *)i + 27) & 0x40) != 0)
      {
LABEL_20:
        if (mlir::AbstractType::hasTrait<mlir::TypeTrait::IsMutable>(v22))
        {
          v23 = *a3;
          v26 = v21;
          mlir::Type::print((llvm::raw_ostream *)&v26, v23);
        }
        else
        {
          mlir::AsmPrinter::Impl::printTypeImpl((uint64_t)a3, (uint64_t **)v21);
        }
        goto LABEL_27;
      }
    }
    else
    {
      llvm::raw_ostream::write(v19, " = ", 3uLL);
      v21 = *(uint64_t **)i;
      v22 = **(_QWORD **)i;
      if ((*((_BYTE *)i + 27) & 0x40) != 0)
        goto LABEL_20;
    }
    if (mlir::AbstractAttribute::hasTrait<mlir::AttributeTrait::IsMutable>(v22))
    {
      v24 = *a3;
      v26 = v21;
      mlir::Attribute::print((mlir::Attribute *)&v26, v24, 0);
    }
    else
    {
      mlir::AsmPrinter::Impl::printAttributeImpl(a3, (uint64_t **)v21, 0);
    }
LABEL_27:
    result = *a3;
    ++*a4;
    v25 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v25 >= *((_QWORD *)result + 3))
    {
      result = llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((_QWORD *)result + 4) = v25 + 1;
      *v25 = 10;
    }
    while (1)
    {
      i = (llvm::raw_ostream *)((char *)i + 32);
      if (i == v10)
        break;
      if (a5 == *((_DWORD *)i + 6) >> 31)
      {
        if (i != v10)
          goto LABEL_7;
        return result;
      }
    }
  }
  return result;
}

void _ZN4llvm12function_refIFvNS_9StringRefENS0_IFvRNS_11raw_ostreamEEEEEE11callback_fnIZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataENS0_IFvvEEEPN4mlir9OperationEENK3__0clIKNSD_21OpAsmDialectInterfaceEJRNS_9SetVectorINSD_24AsmDialectResourceHandleENS_11SmallVectorISL_Lj0EEENS_8DenseSetISL_NS_12DenseMapInfoISL_vEEEELj0EEEEEEDaS1_S1_RT_DpOT0_EUlS1_S5_E_EEvlS1_S5_(uint64_t a1, const void *a2, size_t a3, void (*a4)(uint64_t, void **), uint64_t a5)
{
  uint64_t v9;
  __int128 v10;
  size_t v11;
  size_t v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  _WORD *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  _WORD *v18;
  const char *v19;
  size_t v20;
  void *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  void **p_p;
  void *__p;
  size_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;

  v9 = *(_QWORD *)(a1 + 24);
  (**(void (***)(_QWORD))a1)(*(_QWORD *)(*(_QWORD *)a1 + 8));
  v34 = *(_OWORD *)(a1 + 8);
  v35 = v9;
  v10 = *(_OWORD *)(a1 + 48);
  v36 = *(_OWORD *)(a1 + 32);
  v37 = v10;
  if (!*(_BYTE *)(v9 + 56))
  {
    _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v34);
    v13 = *(llvm::raw_ostream **)(v9 + 16);
    v14 = *((_QWORD *)v13 + 4);
    if ((unint64_t)(*((_QWORD *)v13 + 3) - v14) > 5)
    {
      *(_WORD *)(v14 + 4) = 8224;
      *(_DWORD *)v14 = 538976288;
      v15 = (_WORD *)(*((_QWORD *)v13 + 4) + 6);
      *((_QWORD *)v13 + 4) = v15;
      if (a3 <= *((_QWORD *)v13 + 3) - (_QWORD)v15)
      {
LABEL_9:
        if (a3)
        {
          memcpy(v15, a2, a3);
          v15 = (_WORD *)(*((_QWORD *)v13 + 4) + a3);
          *((_QWORD *)v13 + 4) = v15;
        }
        if (*((_QWORD *)v13 + 3) - (_QWORD)v15 <= 1uLL)
          goto LABEL_12;
        goto LABEL_21;
      }
    }
    else
    {
      v13 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
      v15 = (_WORD *)*((_QWORD *)v13 + 4);
      if (a3 <= *((_QWORD *)v13 + 3) - (_QWORD)v15)
        goto LABEL_9;
    }
    v13 = llvm::raw_ostream::write(v13, (const char *)a2, a3);
    v15 = (_WORD *)*((_QWORD *)v13 + 4);
    if (*((_QWORD *)v13 + 3) - (_QWORD)v15 <= 1uLL)
    {
LABEL_12:
      llvm::raw_ostream::write(v13, ": ", 2uLL);
LABEL_22:
      a4(a5, *(void ***)(v9 + 16));
      return;
    }
LABEL_21:
    *v15 = 8250;
    *((_QWORD *)v13 + 4) += 2;
    goto LABEL_22;
  }
  v11 = *(_QWORD *)(v9 + 48);
  __p = 0;
  v32 = 0;
  v33 = 0;
  v23 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 1;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v22 = &unk_1E0E22B10;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v22, 0, 0, 0);
  a4(a5, &v22);
  v12 = HIBYTE(v33);
  if (v33 < 0)
    v12 = v32;
  if (v12 > v11)
  {
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v22);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      return;
LABEL_33:
    operator delete(__p);
    return;
  }
  _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v34);
  v16 = *(llvm::raw_ostream **)(v9 + 16);
  v17 = *((_QWORD *)v16 + 4);
  if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 8224;
    *(_DWORD *)v17 = 538976288;
    v18 = (_WORD *)(*((_QWORD *)v16 + 4) + 6);
    *((_QWORD *)v16 + 4) = v18;
    if (a3 <= *((_QWORD *)v16 + 3) - (_QWORD)v18)
    {
LABEL_15:
      if (a3)
      {
        memcpy(v18, a2, a3);
        v18 = (_WORD *)(*((_QWORD *)v16 + 4) + a3);
        *((_QWORD *)v16 + 4) = v18;
      }
      if (*((_QWORD *)v16 + 3) - (_QWORD)v18 <= 1uLL)
        goto LABEL_18;
      goto LABEL_25;
    }
  }
  else
  {
    v16 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
    v18 = (_WORD *)*((_QWORD *)v16 + 4);
    if (a3 <= *((_QWORD *)v16 + 3) - (_QWORD)v18)
      goto LABEL_15;
  }
  v16 = llvm::raw_ostream::write(v16, (const char *)a2, a3);
  v18 = (_WORD *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v18 <= 1uLL)
  {
LABEL_18:
    v16 = llvm::raw_ostream::write(v16, ": ", 2uLL);
    goto LABEL_26;
  }
LABEL_25:
  *v18 = 8250;
  *((_QWORD *)v16 + 4) += 2;
LABEL_26:
  if (v33 >= 0)
    v19 = (const char *)&__p;
  else
    v19 = (const char *)__p;
  if (v33 >= 0)
    v20 = HIBYTE(v33);
  else
    v20 = v32;
  llvm::raw_ostream::write(v16, v19, v20);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v22);
  if (SHIBYTE(v33) < 0)
    goto LABEL_33;
}

llvm::raw_ostream *_ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv(unsigned __int8 **a1)
{
  unsigned __int8 *v2;
  int v3;
  llvm::raw_ostream *v4;
  _BYTE *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  _WORD *v8;
  void *v9;
  unsigned __int8 *v10;
  const char *v11;
  size_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  int v15;
  llvm::raw_ostream *result;
  _BYTE *v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  _BYTE *v24;
  llvm::raw_ostream *v25;
  _DWORD *v26;
  unsigned __int8 *v27;
  const void *v28;
  size_t v29;
  unsigned __int8 *v30;

  v2 = a1[2];
  v3 = **a1;
  **a1 = 1;
  if (v3)
  {
LABEL_13:
    v14 = a1[4];
    v15 = *v14;
    *v14 = 1;
    if (v15)
      goto LABEL_14;
LABEL_26:
    if (!*a1[5])
      goto LABEL_30;
    v22 = (llvm::raw_ostream *)*((_QWORD *)v2 + 2);
    v23 = (_BYTE *)*((_QWORD *)v22 + 4);
    if (*((_BYTE **)v22 + 3) == v23)
    {
      v22 = llvm::raw_ostream::write(v22, ",", 1uLL);
      v24 = (_BYTE *)*((_QWORD *)v22 + 4);
      ++*((_DWORD *)v2 + 18);
      if ((unint64_t)v24 < *((_QWORD *)v22 + 3))
        goto LABEL_29;
    }
    else
    {
      *v23 = 44;
      v24 = (_BYTE *)(*((_QWORD *)v22 + 4) + 1);
      *((_QWORD *)v22 + 4) = v24;
      ++*((_DWORD *)v2 + 18);
      if ((unint64_t)v24 < *((_QWORD *)v22 + 3))
      {
LABEL_29:
        *((_QWORD *)v22 + 4) = v24 + 1;
        *v24 = 10;
LABEL_30:
        v25 = (llvm::raw_ostream *)*((_QWORD *)v2 + 2);
        v26 = (_DWORD *)*((_QWORD *)v25 + 4);
        if (*((_QWORD *)v25 + 3) - (_QWORD)v26 <= 3uLL)
          goto LABEL_31;
        goto LABEL_39;
      }
    }
    llvm::raw_ostream::write(v22, 10);
    v25 = (llvm::raw_ostream *)*((_QWORD *)v2 + 2);
    v26 = (_DWORD *)*((_QWORD *)v25 + 4);
    if (*((_QWORD *)v25 + 3) - (_QWORD)v26 <= 3uLL)
    {
LABEL_31:
      v25 = llvm::raw_ostream::write(v25, "    ", 4uLL);
      result = (llvm::raw_ostream *)*((_QWORD *)v25 + 4);
      v27 = a1[6];
      v28 = *(const void **)v27;
      v29 = *((_QWORD *)v27 + 1);
      if (v29 <= *((_QWORD *)v25 + 3) - (_QWORD)result)
        goto LABEL_32;
      goto LABEL_40;
    }
LABEL_39:
    *v26 = 538976288;
    result = (llvm::raw_ostream *)(*((_QWORD *)v25 + 4) + 4);
    *((_QWORD *)v25 + 4) = result;
    v30 = a1[6];
    v28 = *(const void **)v30;
    v29 = *((_QWORD *)v30 + 1);
    if (v29 <= *((_QWORD *)v25 + 3) - (_QWORD)result)
    {
LABEL_32:
      if (v29)
      {
        memcpy(result, v28, v29);
        result = (llvm::raw_ostream *)(*((_QWORD *)v25 + 4) + v29);
        *((_QWORD *)v25 + 4) = result;
      }
      if (*((_QWORD *)v25 + 3) - (_QWORD)result <= 2uLL)
      {
LABEL_35:
        result = llvm::raw_ostream::write(v25, ": {", 3uLL);
        v25 = result;
        v18 = (_BYTE *)*((_QWORD *)result + 4);
        ++*((_DWORD *)v2 + 18);
        if ((unint64_t)v18 >= *((_QWORD *)result + 3))
          return llvm::raw_ostream::write(v25, 10);
LABEL_42:
        *((_QWORD *)v25 + 4) = v18 + 1;
        goto LABEL_43;
      }
LABEL_41:
      *((_BYTE *)result + 2) = 123;
      *(_WORD *)result = 8250;
      v18 = (_BYTE *)(*((_QWORD *)v25 + 4) + 3);
      *((_QWORD *)v25 + 4) = v18;
      ++*((_DWORD *)v2 + 18);
      if ((unint64_t)v18 >= *((_QWORD *)v25 + 3))
        return llvm::raw_ostream::write(v25, 10);
      goto LABEL_42;
    }
LABEL_40:
    v25 = llvm::raw_ostream::write(v25, (const char *)v28, v29);
    result = (llvm::raw_ostream *)*((_QWORD *)v25 + 4);
    if (*((_QWORD *)v25 + 3) - (_QWORD)result <= 2uLL)
      goto LABEL_35;
    goto LABEL_41;
  }
  if (!*a1[1])
  {
LABEL_6:
    v7 = (llvm::raw_ostream *)*((_QWORD *)v2 + 2);
    v8 = (_WORD *)*((_QWORD *)v7 + 4);
    if (*((_QWORD *)v7 + 3) - (_QWORD)v8 <= 1uLL)
      goto LABEL_7;
    goto LABEL_22;
  }
  v4 = (llvm::raw_ostream *)*((_QWORD *)v2 + 2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    v4 = llvm::raw_ostream::write(v4, ",", 1uLL);
    v6 = (_BYTE *)*((_QWORD *)v4 + 4);
    ++*((_DWORD *)v2 + 18);
    if ((unint64_t)v6 < *((_QWORD *)v4 + 3))
      goto LABEL_5;
  }
  else
  {
    *v5 = 44;
    v6 = (_BYTE *)(*((_QWORD *)v4 + 4) + 1);
    *((_QWORD *)v4 + 4) = v6;
    ++*((_DWORD *)v2 + 18);
    if ((unint64_t)v6 < *((_QWORD *)v4 + 3))
    {
LABEL_5:
      *((_QWORD *)v4 + 4) = v6 + 1;
      *v6 = 10;
      goto LABEL_6;
    }
  }
  llvm::raw_ostream::write(v4, 10);
  v7 = (llvm::raw_ostream *)*((_QWORD *)v2 + 2);
  v8 = (_WORD *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v8 <= 1uLL)
  {
LABEL_7:
    v7 = llvm::raw_ostream::write(v7, "  ", 2uLL);
    v9 = (void *)*((_QWORD *)v7 + 4);
    v10 = a1[3];
    v11 = *(const char **)v10;
    v12 = *((_QWORD *)v10 + 1);
    if (v12 <= *((_QWORD *)v7 + 3) - (_QWORD)v9)
      goto LABEL_8;
LABEL_23:
    v7 = llvm::raw_ostream::write(v7, v11, v12);
    v9 = (void *)*((_QWORD *)v7 + 4);
    if (*((_QWORD *)v7 + 3) - (_QWORD)v9 <= 0xCuLL)
      goto LABEL_11;
LABEL_24:
    qmemcpy(v9, "_resources: {", 13);
    v13 = (_BYTE *)(*((_QWORD *)v7 + 4) + 13);
    *((_QWORD *)v7 + 4) = v13;
    ++*((_DWORD *)v2 + 18);
    if ((unint64_t)v13 >= *((_QWORD *)v7 + 3))
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_22:
  *v8 = 8224;
  v9 = (void *)(*((_QWORD *)v7 + 4) + 2);
  *((_QWORD *)v7 + 4) = v9;
  v19 = a1[3];
  v11 = *(const char **)v19;
  v12 = *((_QWORD *)v19 + 1);
  if (v12 > *((_QWORD *)v7 + 3) - (_QWORD)v9)
    goto LABEL_23;
LABEL_8:
  if (v12)
  {
    memcpy(v9, v11, v12);
    v9 = (void *)(*((_QWORD *)v7 + 4) + v12);
    *((_QWORD *)v7 + 4) = v9;
  }
  if (*((_QWORD *)v7 + 3) - (_QWORD)v9 > 0xCuLL)
    goto LABEL_24;
LABEL_11:
  v7 = llvm::raw_ostream::write(v7, "_resources: {", 0xDuLL);
  v13 = (_BYTE *)*((_QWORD *)v7 + 4);
  ++*((_DWORD *)v2 + 18);
  if ((unint64_t)v13 >= *((_QWORD *)v7 + 3))
  {
LABEL_12:
    llvm::raw_ostream::write(v7, 10);
    goto LABEL_13;
  }
LABEL_25:
  *((_QWORD *)v7 + 4) = v13 + 1;
  *v13 = 10;
  v20 = a1[4];
  v21 = *v20;
  *v20 = 1;
  if (!v21)
    goto LABEL_26;
LABEL_14:
  result = (llvm::raw_ostream *)*((_QWORD *)v2 + 2);
  v17 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v17)
  {
    result = llvm::raw_ostream::write(result, ",", 1uLL);
    v18 = (_BYTE *)*((_QWORD *)result + 4);
    ++*((_DWORD *)v2 + 18);
    if ((unint64_t)v18 >= *((_QWORD *)result + 3))
      return llvm::raw_ostream::write(result, 10);
    goto LABEL_19;
  }
  *v17 = 44;
  v18 = (_BYTE *)(*((_QWORD *)result + 4) + 1);
  *((_QWORD *)result + 4) = v18;
  ++*((_DWORD *)v2 + 18);
  if ((unint64_t)v18 < *((_QWORD *)result + 3))
  {
LABEL_19:
    *((_QWORD *)result + 4) = v18 + 1;
LABEL_43:
    *v18 = 10;
    return result;
  }
  return llvm::raw_ostream::write(result, 10);
}

uint64_t `anonymous namespace'::OperationPrinter::ResourceBuilder::buildBool(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char *v5;
  char v6;

  v6 = a4;
  v5 = &v6;
}

uint64_t `anonymous namespace'::OperationPrinter::ResourceBuilder::buildString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  _QWORD v7[2];

  v7[0] = a4;
  v7[1] = a5;
  v6 = v7;
}

uint64_t `anonymous namespace'::OperationPrinter::ResourceBuilder::buildBlob(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  _QWORD v7[2];
  int v8;
  _QWORD v9[2];

  v9[0] = a4;
  v9[1] = a5;
  v8 = a6;
  v7[0] = &v8;
  v7[1] = v9;
}

llvm::raw_ostream *llvm::function_ref<void ()(llvm::raw_ostream &)>::callback_fn<`anonymous namespace'::OperationPrinter::ResourceBuilder::buildBool(llvm::StringRef,BOOL)::{lambda(llvm::raw_ostream &)#1}>(_BYTE **a1, llvm::raw_ostream *this)
{
  const char *v3;
  size_t v4;
  void *v5;
  llvm::raw_ostream *result;

  if (**a1)
    v3 = "true";
  else
    v3 = "false";
  if (**a1)
    v4 = 4;
  else
    v4 = 5;
  v5 = (void *)*((_QWORD *)this + 4);
  if (v4 > *((_QWORD *)this + 3) - (_QWORD)v5)
    return llvm::raw_ostream::write(this, v3, v4);
  result = (llvm::raw_ostream *)memcpy(v5, v3, v4);
  *((_QWORD *)this + 4) += v4;
  return result;
}

llvm::raw_ostream *llvm::function_ref<void ()(llvm::raw_ostream &)>::callback_fn<`anonymous namespace'::OperationPrinter::ResourceBuilder::buildString(llvm::StringRef,llvm::StringRef)::{lambda(llvm::raw_ostream &)#1}>(llvm::raw_ostream ***a1, llvm::raw_ostream *this)
{
  _BYTE *v4;
  llvm::raw_ostream *result;
  _BYTE *v6;

  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v4)
  {
    llvm::raw_ostream::write(this, "\"", 1uLL);
  }
  else
  {
    *v4 = 34;
    ++*((_QWORD *)this + 4);
  }
  result = llvm::printEscapedString(**a1, (uint64_t)(*a1)[1], this);
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v6)
    return llvm::raw_ostream::write(this, "\"", 1uLL);
  *v6 = 34;
  ++*((_QWORD *)this + 4);
  return result;
}

void llvm::function_ref<void ()(llvm::raw_ostream &)>::callback_fn<`anonymous namespace'::OperationPrinter::ResourceBuilder::buildBlob(llvm::StringRef,llvm::ArrayRef<char>,unsigned int)::{lambda(llvm::raw_ostream &)#1}>(int **a1, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v2;
  uint64_t v4;
  void **v5;
  size_t v6;
  llvm::raw_ostream *v7;
  void **v8;
  size_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  unsigned __int8 v15;
  int v16;

  v2 = this;
  v16 = **a1;
  v4 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v4) > 2)
  {
    *(_BYTE *)(v4 + 2) = 120;
    *(_WORD *)v4 = 12322;
    *((_QWORD *)this + 4) += 3;
  }
  else
  {
    v2 = llvm::raw_ostream::write(this, "\"0x", 3uLL);
  }
  llvm::toHex(4uLL, (unsigned __int8 *)&v16, 0, v14);
  if ((v15 & 0x80u) == 0)
    v5 = v14;
  else
    v5 = (void **)v14[0];
  if ((v15 & 0x80u) == 0)
    v6 = v15;
  else
    v6 = (size_t)v14[1];
  v7 = llvm::raw_ostream::write(v2, (const char *)v5, v6);
  llvm::toHex(*((_QWORD *)a1[1] + 1), *(unsigned __int8 **)a1[1], 0, __p);
  if ((v13 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v9 = v13;
  else
    v9 = (size_t)__p[1];
  v10 = llvm::raw_ostream::write(v7, (const char *)v8, v9);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if (*((_BYTE **)v10 + 3) == v11)
  {
    llvm::raw_ostream::write(v10, "\"", 1uLL);
    if (((char)v13 & 0x80000000) == 0)
    {
LABEL_18:
      if (((char)v15 & 0x80000000) == 0)
        return;
LABEL_22:
      operator delete(v14[0]);
      return;
    }
  }
  else
  {
    *v11 = 34;
    ++*((_QWORD *)v10 + 4);
    if (((char)v13 & 0x80000000) == 0)
      goto LABEL_18;
  }
  operator delete(__p[0]);
  if ((char)v15 < 0)
    goto LABEL_22;
}

void _ZN4llvm12function_refIFvNS_9StringRefENS0_IFvRNS_11raw_ostreamEEEEEE11callback_fnIZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataENS0_IFvvEEEPN4mlir9OperationEENK3__0clIKNSD_21OpAsmDialectInterfaceEJNS_9SetVectorINSD_24AsmDialectResourceHandleENS_11SmallVectorISL_Lj0EEENS_8DenseSetISL_NS_12DenseMapInfoISL_vEEEELj0EEEEEEDaS1_S1_RT_DpOT0_EUlS1_S5_E_EEvlS1_S5_(uint64_t a1, const void *a2, size_t a3, void (*a4)(uint64_t, void **), uint64_t a5)
{
  uint64_t v9;
  __int128 v10;
  size_t v11;
  size_t v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  _WORD *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  _WORD *v18;
  const char *v19;
  size_t v20;
  void *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  void **p_p;
  void *__p;
  size_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;

  v9 = *(_QWORD *)(a1 + 24);
  (**(void (***)(_QWORD))a1)(*(_QWORD *)(*(_QWORD *)a1 + 8));
  v34 = *(_OWORD *)(a1 + 8);
  v35 = v9;
  v10 = *(_OWORD *)(a1 + 48);
  v36 = *(_OWORD *)(a1 + 32);
  v37 = v10;
  if (!*(_BYTE *)(v9 + 56))
  {
    _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v34);
    v13 = *(llvm::raw_ostream **)(v9 + 16);
    v14 = *((_QWORD *)v13 + 4);
    if ((unint64_t)(*((_QWORD *)v13 + 3) - v14) > 5)
    {
      *(_WORD *)(v14 + 4) = 8224;
      *(_DWORD *)v14 = 538976288;
      v15 = (_WORD *)(*((_QWORD *)v13 + 4) + 6);
      *((_QWORD *)v13 + 4) = v15;
      if (a3 <= *((_QWORD *)v13 + 3) - (_QWORD)v15)
      {
LABEL_9:
        if (a3)
        {
          memcpy(v15, a2, a3);
          v15 = (_WORD *)(*((_QWORD *)v13 + 4) + a3);
          *((_QWORD *)v13 + 4) = v15;
        }
        if (*((_QWORD *)v13 + 3) - (_QWORD)v15 <= 1uLL)
          goto LABEL_12;
        goto LABEL_21;
      }
    }
    else
    {
      v13 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
      v15 = (_WORD *)*((_QWORD *)v13 + 4);
      if (a3 <= *((_QWORD *)v13 + 3) - (_QWORD)v15)
        goto LABEL_9;
    }
    v13 = llvm::raw_ostream::write(v13, (const char *)a2, a3);
    v15 = (_WORD *)*((_QWORD *)v13 + 4);
    if (*((_QWORD *)v13 + 3) - (_QWORD)v15 <= 1uLL)
    {
LABEL_12:
      llvm::raw_ostream::write(v13, ": ", 2uLL);
LABEL_22:
      a4(a5, *(void ***)(v9 + 16));
      return;
    }
LABEL_21:
    *v15 = 8250;
    *((_QWORD *)v13 + 4) += 2;
    goto LABEL_22;
  }
  v11 = *(_QWORD *)(v9 + 48);
  __p = 0;
  v32 = 0;
  v33 = 0;
  v23 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 1;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v22 = &unk_1E0E22B10;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v22, 0, 0, 0);
  a4(a5, &v22);
  v12 = HIBYTE(v33);
  if (v33 < 0)
    v12 = v32;
  if (v12 > v11)
  {
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v22);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      return;
LABEL_33:
    operator delete(__p);
    return;
  }
  _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v34);
  v16 = *(llvm::raw_ostream **)(v9 + 16);
  v17 = *((_QWORD *)v16 + 4);
  if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 8224;
    *(_DWORD *)v17 = 538976288;
    v18 = (_WORD *)(*((_QWORD *)v16 + 4) + 6);
    *((_QWORD *)v16 + 4) = v18;
    if (a3 <= *((_QWORD *)v16 + 3) - (_QWORD)v18)
    {
LABEL_15:
      if (a3)
      {
        memcpy(v18, a2, a3);
        v18 = (_WORD *)(*((_QWORD *)v16 + 4) + a3);
        *((_QWORD *)v16 + 4) = v18;
      }
      if (*((_QWORD *)v16 + 3) - (_QWORD)v18 <= 1uLL)
        goto LABEL_18;
      goto LABEL_25;
    }
  }
  else
  {
    v16 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
    v18 = (_WORD *)*((_QWORD *)v16 + 4);
    if (a3 <= *((_QWORD *)v16 + 3) - (_QWORD)v18)
      goto LABEL_15;
  }
  v16 = llvm::raw_ostream::write(v16, (const char *)a2, a3);
  v18 = (_WORD *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v18 <= 1uLL)
  {
LABEL_18:
    v16 = llvm::raw_ostream::write(v16, ": ", 2uLL);
    goto LABEL_26;
  }
LABEL_25:
  *v18 = 8250;
  *((_QWORD *)v16 + 4) += 2;
LABEL_26:
  if (v33 >= 0)
    v19 = (const char *)&__p;
  else
    v19 = (const char *)__p;
  if (v33 >= 0)
    v20 = HIBYTE(v33);
  else
    v20 = v32;
  llvm::raw_ostream::write(v16, v19, v20);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v22);
  if (SHIBYTE(v33) < 0)
    goto LABEL_33;
}

void _ZN4llvm12function_refIFvNS_9StringRefENS0_IFvRNS_11raw_ostreamEEEEEE11callback_fnIZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataENS0_IFvvEEEPN4mlir9OperationEENK3__0clIKNSD_18AsmResourcePrinterEJEEEDaS1_S1_RT_DpOT0_EUlS1_S5_E_EEvlS1_S5_(uint64_t a1, const void *a2, size_t a3, void (*a4)(uint64_t, void **), uint64_t a5)
{
  uint64_t v9;
  __int128 v10;
  size_t v11;
  size_t v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  _WORD *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  _WORD *v18;
  const char *v19;
  size_t v20;
  void *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  void **p_p;
  void *__p;
  size_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;

  v9 = *(_QWORD *)(a1 + 24);
  (**(void (***)(_QWORD))a1)(*(_QWORD *)(*(_QWORD *)a1 + 8));
  v34 = *(_OWORD *)(a1 + 8);
  v35 = v9;
  v10 = *(_OWORD *)(a1 + 48);
  v36 = *(_OWORD *)(a1 + 32);
  v37 = v10;
  if (!*(_BYTE *)(v9 + 56))
  {
    _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v34);
    v13 = *(llvm::raw_ostream **)(v9 + 16);
    v14 = *((_QWORD *)v13 + 4);
    if ((unint64_t)(*((_QWORD *)v13 + 3) - v14) > 5)
    {
      *(_WORD *)(v14 + 4) = 8224;
      *(_DWORD *)v14 = 538976288;
      v15 = (_WORD *)(*((_QWORD *)v13 + 4) + 6);
      *((_QWORD *)v13 + 4) = v15;
      if (a3 <= *((_QWORD *)v13 + 3) - (_QWORD)v15)
      {
LABEL_9:
        if (a3)
        {
          memcpy(v15, a2, a3);
          v15 = (_WORD *)(*((_QWORD *)v13 + 4) + a3);
          *((_QWORD *)v13 + 4) = v15;
        }
        if (*((_QWORD *)v13 + 3) - (_QWORD)v15 <= 1uLL)
          goto LABEL_12;
        goto LABEL_21;
      }
    }
    else
    {
      v13 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
      v15 = (_WORD *)*((_QWORD *)v13 + 4);
      if (a3 <= *((_QWORD *)v13 + 3) - (_QWORD)v15)
        goto LABEL_9;
    }
    v13 = llvm::raw_ostream::write(v13, (const char *)a2, a3);
    v15 = (_WORD *)*((_QWORD *)v13 + 4);
    if (*((_QWORD *)v13 + 3) - (_QWORD)v15 <= 1uLL)
    {
LABEL_12:
      llvm::raw_ostream::write(v13, ": ", 2uLL);
LABEL_22:
      a4(a5, *(void ***)(v9 + 16));
      return;
    }
LABEL_21:
    *v15 = 8250;
    *((_QWORD *)v13 + 4) += 2;
    goto LABEL_22;
  }
  v11 = *(_QWORD *)(v9 + 48);
  __p = 0;
  v32 = 0;
  v33 = 0;
  v23 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 1;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v22 = &unk_1E0E22B10;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v22, 0, 0, 0);
  a4(a5, &v22);
  v12 = HIBYTE(v33);
  if (v33 < 0)
    v12 = v32;
  if (v12 > v11)
  {
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v22);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      return;
LABEL_33:
    operator delete(__p);
    return;
  }
  _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v34);
  v16 = *(llvm::raw_ostream **)(v9 + 16);
  v17 = *((_QWORD *)v16 + 4);
  if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 8224;
    *(_DWORD *)v17 = 538976288;
    v18 = (_WORD *)(*((_QWORD *)v16 + 4) + 6);
    *((_QWORD *)v16 + 4) = v18;
    if (a3 <= *((_QWORD *)v16 + 3) - (_QWORD)v18)
    {
LABEL_15:
      if (a3)
      {
        memcpy(v18, a2, a3);
        v18 = (_WORD *)(*((_QWORD *)v16 + 4) + a3);
        *((_QWORD *)v16 + 4) = v18;
      }
      if (*((_QWORD *)v16 + 3) - (_QWORD)v18 <= 1uLL)
        goto LABEL_18;
      goto LABEL_25;
    }
  }
  else
  {
    v16 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
    v18 = (_WORD *)*((_QWORD *)v16 + 4);
    if (a3 <= *((_QWORD *)v16 + 3) - (_QWORD)v18)
      goto LABEL_15;
  }
  v16 = llvm::raw_ostream::write(v16, (const char *)a2, a3);
  v18 = (_WORD *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v18 <= 1uLL)
  {
LABEL_18:
    v16 = llvm::raw_ostream::write(v16, ": ", 2uLL);
    goto LABEL_26;
  }
LABEL_25:
  *v18 = 8250;
  *((_QWORD *)v16 + 4) += 2;
LABEL_26:
  if (v33 >= 0)
    v19 = (const char *)&__p;
  else
    v19 = (const char *)__p;
  if (v33 >= 0)
    v20 = HIBYTE(v33);
  else
    v20 = v32;
  llvm::raw_ostream::write(v16, v19, v20);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v22);
  if (SHIBYTE(v33) < 0)
    goto LABEL_33;
}

llvm::raw_ostream *llvm::function_ref<void ()(void)>::callback_fn<`anonymous namespace'::OperationPrinter::printFileMetadataDictionary(mlir::Operation *)::$_0>(llvm::raw_ostream *result)
{
  uint64_t v1;
  int v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = *((_QWORD *)result + 1);
  v2 = **(unsigned __int8 **)result;
  **(_BYTE **)result = 1;
  if (!v2)
  {
    result = *(llvm::raw_ostream **)(v1 + 16);
    ++*(_DWORD *)(v1 + 72);
    v3 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v3 >= *((_QWORD *)result + 3))
    {
      result = llvm::raw_ostream::write(result, 10);
      v4 = *((_QWORD *)result + 4);
      if ((unint64_t)(*((_QWORD *)result + 3) - v4) > 2)
      {
LABEL_4:
        *(_BYTE *)(v4 + 2) = 35;
        *(_WORD *)v4 = 11643;
        v5 = (_BYTE *)(*((_QWORD *)result + 4) + 3);
        *((_QWORD *)result + 4) = v5;
        ++*(_DWORD *)(v1 + 72);
        if ((unint64_t)v5 >= *((_QWORD *)result + 3))
          return llvm::raw_ostream::write(result, 10);
        goto LABEL_8;
      }
    }
    else
    {
      *((_QWORD *)result + 4) = v3 + 1;
      *v3 = 10;
      v4 = *((_QWORD *)result + 4);
      if ((unint64_t)(*((_QWORD *)result + 3) - v4) > 2)
        goto LABEL_4;
    }
    result = llvm::raw_ostream::write(result, "{-#", 3uLL);
    v5 = (_BYTE *)*((_QWORD *)result + 4);
    ++*(_DWORD *)(v1 + 72);
    if ((unint64_t)v5 >= *((_QWORD *)result + 3))
      return llvm::raw_ostream::write(result, 10);
LABEL_8:
    *((_QWORD *)result + 4) = v5 + 1;
    *v5 = 10;
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::OperationPrinter::printOperationID(llvm::raw_ostream *this, mlir::Operation *a2, llvm::raw_ostream *a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  int v8;
  _BYTE *v9;
  void *v10;

  if ((_DWORD)a3)
  {
    LODWORD(v4) = ((a4 >> 4) ^ (a4 >> 9)) & ((_DWORD)a3 - 1);
    v5 = (unsigned int *)((char *)a2 + 16 * v4);
    v6 = *(_QWORD *)v5;
    if (*(_QWORD *)v5 == a4)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & ((_DWORD)a3 - 1);
      v6 = *((_QWORD *)a2 + 2 * v4);
      if (v6 == a4)
      {
        v5 = (unsigned int *)((char *)a2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (unsigned int *)((char *)a2 + 16 * a3);
LABEL_8:
  if (v5 == (unsigned int *)((char *)a2 + 16 * a3))
  {
    v10 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v10 > 0x14uLL)
    {
      qmemcpy(v10, "<<UNKNOWN OPERATION>>", 21);
      *((_QWORD *)this + 4) += 21;
    }
    else
    {
      return llvm::raw_ostream::write(this, "<<UNKNOWN OPERATION>>", 0x15uLL);
    }
  }
  else
  {
    v9 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v9 >= *((_QWORD *)this + 3))
    {
      this = llvm::raw_ostream::write(this, 37);
    }
    else
    {
      *((_QWORD *)this + 4) = v9 + 1;
      *v9 = 37;
    }
    return llvm::raw_ostream::operator<<(this, v5[2]);
  }
  return this;
}

void `anonymous namespace'::OperationPrinter::printValueUsers(uint64_t a1, _QWORD *a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  unsigned __int8 v9;
  int v10;
  llvm::raw_ostream *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  unint64_t NextResultAtOffset;
  uint64_t j;
  unint64_t v22;
  _WORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  if (!*a2)
  {
    v4 = *(llvm::raw_ostream **)(a1 + 16);
    v5 = *((_QWORD *)v4 + 4);
    if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 5)
    {
      *(_WORD *)(v5 + 4) = 25701;
      *(_DWORD *)v5 = 1937075829;
      *((_QWORD *)v4 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v4, "unused", 6uLL);
    }
  }
  v24 = &v28;
  v25 = &v28;
  v26 = 1;
  v27 = 0;
  v6 = (_QWORD *)*a2;
  if (*a2)
  {
    for (i = 0; ; ++i)
    {
      v8 = v6[2];
      if (v25 != v24)
        break;
      v14 = HIDWORD(v26);
      if (HIDWORD(v26))
      {
        v15 = 0;
        v16 = 8 * HIDWORD(v26);
        v17 = v25;
        do
        {
          if (*v17 == v8)
          {
            v10 = 0;
            goto LABEL_11;
          }
          if (*v17 == -2)
            v15 = v17;
          ++v17;
          v16 -= 8;
        }
        while (v16);
        if (!v15)
          goto LABEL_32;
        *v15 = v8;
        --v27;
        v10 = 1;
      }
      else
      {
LABEL_32:
        if (HIDWORD(v26) >= v26)
          break;
        ++HIDWORD(v26);
        v25[v14] = v8;
        v10 = 1;
      }
LABEL_11:
      if (!v10)
        goto LABEL_8;
      if (i)
      {
        v11 = *(llvm::raw_ostream **)(a1 + 16);
        v12 = (_WORD *)*((_QWORD *)v11 + 4);
        if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 1uLL)
        {
          *v12 = 8236;
          *((_QWORD *)v11 + 4) += 2;
          v13 = *(unsigned int *)(v8 + 36);
          if ((_DWORD)v13)
          {
LABEL_26:
            v18 = v8 - 16;
            v19 = *(llvm::raw_ostream **)(a1 + 16);
            NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, 0);
            if ((_DWORD)v13 != 1)
            {
              for (j = 1; j != v13; ++j)
              {
                v23 = (_WORD *)*((_QWORD *)v19 + 4);
                if (*((_QWORD *)v19 + 3) - (_QWORD)v23 > 1uLL)
                {
                  *v23 = 8236;
                  *((_QWORD *)v19 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v19, ", ", 2uLL);
                }
                v22 = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, j);
              }
            }
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        llvm::raw_ostream::write(v11, ", ", 2uLL);
      }
      v13 = *(unsigned int *)(v8 + 36);
      if ((_DWORD)v13)
        goto LABEL_26;
LABEL_7:
LABEL_8:
      v6 = (_QWORD *)*v6;
      if (!v6)
      {
        if (v25 != v24)
          free(v25);
        return;
      }
    }
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v24, (const void *)v6[2]);
    v10 = v9;
    goto LABEL_11;
  }
}

void `anonymous namespace'::OperationPrinter::print(mlir::Block *,BOOL,BOOL)::$_0::operator()(uint64_t a1, unint64_t a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  _WORD *v6;
  uint64_t **v7;
  llvm::raw_ostream *v8;
  void *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  llvm::raw_ostream *v13;
  _DWORD *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;

  v4 = (llvm::raw_ostream *)(a1 + 16);
  v5 = *(llvm::raw_ostream **)v4;
  v6 = *(_WORD **)(*(_QWORD *)v4 + 32);
  if (*(_QWORD *)(*(_QWORD *)v4 + 24) - (_QWORD)v6 > 1uLL)
  {
    *v6 = 8250;
    *((_QWORD *)v5 + 4) += 2;
    v7 = (uint64_t **)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v7)
    {
LABEL_3:
      if (!mlir::AsmPrinter::Impl::printAlias((uint64_t)v4, (uint64_t)v7))
      {
        mlir::AsmPrinter::Impl::printTypeImpl((uint64_t)v4, v7);
        if ((*(_BYTE *)(a1 + 64) & 1) == 0)
          return;
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else
  {
    llvm::raw_ostream::write(v5, ": ", 2uLL);
    v7 = (uint64_t **)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v7)
      goto LABEL_3;
  }
  v8 = *(llvm::raw_ostream **)v4;
  v9 = *(void **)(*(_QWORD *)v4 + 32);
  if (*(_QWORD *)(*(_QWORD *)v4 + 24) - (_QWORD)v9 <= 0xCuLL)
  {
    llvm::raw_ostream::write(v8, "<<NULL TYPE>>", 0xDuLL);
LABEL_9:
    if ((*(_BYTE *)(a1 + 64) & 1) == 0)
      return;
    goto LABEL_10;
  }
  qmemcpy(v9, "<<NULL TYPE>>", 13);
  *((_QWORD *)v8 + 4) += 13;
  if ((*(_BYTE *)(a1 + 64) & 1) == 0)
    return;
LABEL_10:
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(llvm::raw_ostream **)v4;
  v12 = *(_BYTE **)(*(_QWORD *)v4 + 32);
  if (*(_BYTE **)(*(_QWORD *)v4 + 24) == v12)
  {
    llvm::raw_ostream::write(v11, " ", 1uLL);
    if ((*(_BYTE *)(a1 + 64) & 2) == 0)
      goto LABEL_12;
LABEL_17:
    mlir::AsmPrinter::Impl::printLocationInternal(v4, v10, 1, 1);
    return;
  }
  *v12 = 32;
  ++*((_QWORD *)v11 + 4);
  if ((*(_BYTE *)(a1 + 64) & 2) != 0)
    goto LABEL_17;
LABEL_12:
  v13 = *(llvm::raw_ostream **)v4;
  v14 = *(_DWORD **)(*(_QWORD *)v4 + 32);
  if (*(_QWORD *)(*(_QWORD *)v4 + 24) - (_QWORD)v14 > 3uLL)
  {
    *v14 = 677605228;
    *((_QWORD *)v13 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v13, "loc(", 4uLL);
  }
  mlir::AsmPrinter::Impl::printLocationInternal(v4, v10, 0, 1);
  v15 = *(llvm::raw_ostream **)v4;
  v16 = *(_BYTE **)(*(_QWORD *)v4 + 32);
  if ((unint64_t)v16 >= *(_QWORD *)(*(_QWORD *)v4 + 24))
  {
    llvm::raw_ostream::write(v15, 41);
  }
  else
  {
    *((_QWORD *)v15 + 4) = v16 + 1;
    *v16 = 41;
  }
}

__n128 std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::OperationPrinter::print(mlir::Block *,BOOL,BOOL)::$_1 &,`anonymous namespace'::BlockInfo *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
  signed __int32 *v9;
  int *v10;
  int *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  signed __int32 v17;
  signed __int32 v18;
  __n128 v19;
  int v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  int v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  unint64_t v30;
  __n128 *v31;
  int v32;
  int v33;
  int v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  __n128 v39;
  unint64_t v40;
  uint64_t v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  unint64_t v45;
  uint64_t v46;
  __n128 v47;
  __n128 *v48;
  unint64_t v49;
  __n128 *v50;
  int v51;
  int v52;
  int v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  __n128 v58;
  unint64_t v59;
  uint64_t v60;
  __n128 v61;
  unint64_t v62;
  uint64_t v63;
  __n128 v64;
  signed __int32 v65;
  signed __int32 v66;
  __n128 v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  __n128 v75;
  int v76;
  int v77;
  __int128 v78;
  BOOL v79;
  __n128 v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  __n128 v85;
  int v86;
  int v87;
  __int128 v88;
  __n128 *v89;
  int v90;
  __n128 *v91;
  int v92;
  int v93;
  int v94;
  __n128 v95;
  __n128 *v96;
  __n128 *v97;
  __n128 *v98;
  __n128 *v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  int64_t v116;
  uint64_t v117;
  unint64_t v118;
  int v119;
  int v120;
  BOOL v121;
  unint64_t v122;
  int v123;
  int v124;
  BOOL v125;
  int v126;
  unint64_t v127;
  __int128 v128;
  uint64_t v129;
  int64_t v130;
  uint64_t v131;
  unint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  __int128 v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  int v154;
  int v155;
  int v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __int128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  int v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  uint64_t v210;

LABEL_1:
  v9 = (signed __int32 *)(a2 - 24);
  v10 = (int *)(a2 - 48);
  v11 = (int *)(a2 - 72);
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = a2 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v90 = *(_DWORD *)(a2 - 24);
        v89 = (__n128 *)(a2 - 24);
        if (v90 < *(_DWORD *)v12)
          goto LABEL_100;
        return result;
      case 3:
        v91 = (__n128 *)(v12 + 24);
        v92 = *(_DWORD *)(v12 + 24);
        v94 = *(_DWORD *)(a2 - 24);
        v89 = (__n128 *)(a2 - 24);
        v93 = v94;
        if (v92 >= *(_DWORD *)v12)
        {
          if (v93 < v92)
          {
            result = *v91;
            v144 = *(_QWORD *)(v12 + 40);
            v145 = v89[1].n128_u64[0];
            *v91 = *v89;
            *(_QWORD *)(v12 + 40) = v145;
            v89[1].n128_u64[0] = v144;
            *v89 = result;
            if (*(_DWORD *)(v12 + 24) < *(_DWORD *)v12)
            {
              v208 = *(_QWORD *)(v12 + 16);
              v181 = *(__n128 *)v12;
              *(__n128 *)v12 = *v91;
              *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
              result = v181;
              *v91 = v181;
              *(_QWORD *)(v12 + 40) = v208;
            }
          }
        }
        else
        {
          if (v93 < v92)
          {
LABEL_100:
            v203 = *(_QWORD *)(v12 + 16);
            v176 = *(__n128 *)v12;
            v95 = *v89;
            *(_QWORD *)(v12 + 16) = v89[1].n128_u64[0];
            *(__n128 *)v12 = v95;
            result = v176;
            v89[1].n128_u64[0] = v203;
LABEL_101:
            *v89 = result;
            return result;
          }
          v210 = *(_QWORD *)(v12 + 16);
          v183 = *(__n128 *)v12;
          *(__n128 *)v12 = *v91;
          *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
          result = v183;
          *v91 = v183;
          *(_QWORD *)(v12 + 40) = v210;
          if ((signed __int32)v89->n128_u32[0] < *(_DWORD *)(v12 + 24))
          {
            result = *v91;
            v149 = *(_QWORD *)(v12 + 40);
            v150 = v89[1].n128_u64[0];
            *v91 = *v89;
            *(_QWORD *)(v12 + 40) = v150;
            v89[1].n128_u64[0] = v149;
            goto LABEL_101;
          }
        }
        return result;
      case 4:
        return result;
      case 5:
        v96 = (__n128 *)(v12 + 24);
        v97 = (__n128 *)(v12 + 48);
        v98 = (__n128 *)(v12 + 72);
        v100 = *(_DWORD *)(a2 - 24);
        v99 = (__n128 *)(a2 - 24);
        if (v100 < *(_DWORD *)(v12 + 72))
        {
          result = *v98;
          v101 = *(_QWORD *)(v12 + 88);
          v102 = v99[1].n128_u64[0];
          *v98 = *v99;
          *(_QWORD *)(v12 + 88) = v102;
          v99[1].n128_u64[0] = v101;
          *v99 = result;
          if ((signed __int32)v98->n128_u32[0] < (signed __int32)v97->n128_u32[0])
          {
            v103 = *(_QWORD *)(v12 + 64);
            result = *v97;
            *v97 = *v98;
            *(_QWORD *)(v12 + 64) = *(_QWORD *)(v12 + 88);
            *v98 = result;
            *(_QWORD *)(v12 + 88) = v103;
            if ((signed __int32)v97->n128_u32[0] < (signed __int32)v96->n128_u32[0])
            {
              v104 = *(_QWORD *)(v12 + 40);
              result = *v96;
              *v96 = *v97;
              *(_QWORD *)(v12 + 40) = *(_QWORD *)(v12 + 64);
              *v97 = result;
              *(_QWORD *)(v12 + 64) = v104;
              if (*(_DWORD *)(v12 + 24) < *(_DWORD *)v12)
              {
                v204 = *(_QWORD *)(v12 + 16);
                v177 = *(__n128 *)v12;
                *(__n128 *)v12 = *v96;
                *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
                result = v177;
                *v96 = v177;
                *(_QWORD *)(v12 + 40) = v204;
              }
            }
          }
        }
        return result;
      default:
        if (v13 > 575)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v115 = (unint64_t)(v14 - 2) >> 1;
              v116 = v115;
              do
              {
                if (v115 >= v116)
                {
                  v117 = (2 * v116) | 1;
                  v118 = v12 + 24 * v117;
                  v119 = *(_DWORD *)v118;
                  if (2 * v116 + 2 < v14)
                  {
                    v120 = *(_DWORD *)(v118 + 24);
                    v121 = v119 < v120;
                    if (v119 <= v120)
                      v119 = *(_DWORD *)(v118 + 24);
                    if (v121)
                    {
                      v118 += 24;
                      v117 = 2 * v116 + 2;
                    }
                  }
                  v122 = v12 + 24 * v116;
                  v123 = *(_DWORD *)v122;
                  if (v119 >= *(_DWORD *)v122)
                  {
                    v206 = *(_DWORD *)(v122 + 20);
                    v179 = *(_OWORD *)(v122 + 4);
                    while (1)
                    {
                      v127 = v122;
                      v122 = v118;
                      v128 = *(_OWORD *)v118;
                      *(_QWORD *)(v127 + 16) = *(_QWORD *)(v118 + 16);
                      *(_OWORD *)v127 = v128;
                      if (v115 < v117)
                        break;
                      v129 = (2 * v117) | 1;
                      v118 = v12 + 24 * v129;
                      v117 = 2 * v117 + 2;
                      v126 = *(_DWORD *)v118;
                      if (v117 < v14)
                      {
                        v124 = *(_DWORD *)(v118 + 24);
                        v125 = v126 < v124;
                        if (v126 <= v124)
                          v126 = *(_DWORD *)(v118 + 24);
                        if (v125)
                          v118 += 24;
                        else
                          v117 = v129;
                        if (v126 < v123)
                          break;
                      }
                      else
                      {
                        v117 = v129;
                        if (v126 < v123)
                          break;
                      }
                    }
                    *(_DWORD *)v122 = v123;
                    *(_DWORD *)(v122 + 20) = v206;
                    *(_OWORD *)(v122 + 4) = v179;
                  }
                }
                v121 = v116-- <= 0;
              }
              while (!v121);
              v130 = v13 / 0x18uLL;
              do
              {
                v131 = 0;
                v207 = *(_QWORD *)(v12 + 16);
                v180 = *(__n128 *)v12;
                v132 = v12;
                do
                {
                  v134 = v132 + 24 * v131 + 24;
                  v135 = (2 * v131) | 1;
                  v136 = 2 * v131 + 2;
                  if (v136 < v130 && *(_DWORD *)v134 < *(_DWORD *)(v134 + 24))
                  {
                    v134 += 24;
                    v135 = v136;
                  }
                  v133 = *(_OWORD *)v134;
                  *(_QWORD *)(v132 + 16) = *(_QWORD *)(v134 + 16);
                  *(_OWORD *)v132 = v133;
                  v132 = v134;
                  v131 = v135;
                }
                while (v135 <= (uint64_t)((unint64_t)(v130 - 2) >> 1));
                a2 -= 24;
                if (v134 == a2)
                {
                  result = v180;
                  *(_QWORD *)(v134 + 16) = v207;
                  *(__n128 *)v134 = v180;
                }
                else
                {
                  v137 = *(_OWORD *)a2;
                  *(_QWORD *)(v134 + 16) = *(_QWORD *)(a2 + 16);
                  *(_OWORD *)v134 = v137;
                  result = v180;
                  *(_QWORD *)(a2 + 16) = v207;
                  *(__n128 *)a2 = v180;
                  v138 = v134 - v12 + 24;
                  if (v138 >= 25)
                  {
                    v139 = (v138 / 0x18uLL - 2) >> 1;
                    v140 = v12 + 24 * v139;
                    v141 = *(_DWORD *)v134;
                    if (*(_DWORD *)v140 < *(_DWORD *)v134)
                    {
                      v156 = *(_DWORD *)(v134 + 20);
                      v153 = *(__n128 *)(v134 + 4);
                      do
                      {
                        v142 = v134;
                        v134 = v140;
                        v143 = *(_OWORD *)v140;
                        *(_QWORD *)(v142 + 16) = *(_QWORD *)(v140 + 16);
                        *(_OWORD *)v142 = v143;
                        if (!v139)
                          break;
                        v139 = (v139 - 1) >> 1;
                        v140 = v12 + 24 * v139;
                      }
                      while (*(_DWORD *)v140 < v141);
                      *(_DWORD *)v134 = v141;
                      result = v153;
                      *(_DWORD *)(v134 + 20) = v156;
                      *(__n128 *)(v134 + 4) = v153;
                    }
                  }
                }
                v121 = v130-- <= 2;
              }
              while (!v121);
            }
            return result;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 24 * ((unint64_t)v14 >> 1));
          v17 = *v9;
          if ((unint64_t)v13 < 0xC01)
          {
            v20 = *(_DWORD *)v12;
            if (*(_DWORD *)v12 >= (signed __int32)v16->n128_u32[0])
            {
              if (v17 < v20)
              {
                v188 = *(_QWORD *)(v12 + 16);
                v161 = *(__n128 *)v12;
                v24 = *(__n128 *)v9;
                *(_QWORD *)(v12 + 16) = *(_QWORD *)(a2 - 8);
                *(__n128 *)v12 = v24;
                *(_QWORD *)(a2 - 8) = v188;
                *(__n128 *)v9 = v161;
                if (*(_DWORD *)v12 < (signed __int32)v16->n128_u32[0])
                {
                  v189 = v16[1].n128_u64[0];
                  v162 = *v16;
                  v25 = *(__n128 *)v12;
                  v16[1].n128_u64[0] = *(_QWORD *)(v12 + 16);
                  *v16 = v25;
                  *(_QWORD *)(v12 + 16) = v189;
                  *(__n128 *)v12 = v162;
                  --a3;
                  v26 = *(_DWORD *)v12;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v17 >= v20)
            {
              v192 = v16[1].n128_u64[0];
              v165 = *v16;
              v42 = *(__n128 *)v12;
              v16[1].n128_u64[0] = *(_QWORD *)(v12 + 16);
              *v16 = v42;
              *(_QWORD *)(v12 + 16) = v192;
              *(__n128 *)v12 = v165;
              if (*v9 >= *(_DWORD *)v12)
                goto LABEL_31;
              v185 = *(_QWORD *)(v12 + 16);
              v158 = *(__n128 *)v12;
              v43 = *(__n128 *)v9;
              *(_QWORD *)(v12 + 16) = *(_QWORD *)(a2 - 8);
              *(__n128 *)v12 = v43;
            }
            else
            {
              v185 = v16[1].n128_u64[0];
              v158 = *v16;
              v21 = *(__n128 *)v9;
              v16[1].n128_u64[0] = *(_QWORD *)(a2 - 8);
              *v16 = v21;
            }
            *(_QWORD *)(a2 - 8) = v185;
            *(__n128 *)v9 = v158;
LABEL_31:
            --a3;
            v26 = *(_DWORD *)v12;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = v16->n128_u32[0];
          if ((signed __int32)v16->n128_u32[0] >= *(_DWORD *)v12)
          {
            if (v17 < v18)
            {
              v186 = v16[1].n128_u64[0];
              v159 = *v16;
              v22 = *(__n128 *)v9;
              v16[1].n128_u64[0] = *(_QWORD *)(a2 - 8);
              *v16 = v22;
              *(_QWORD *)(a2 - 8) = v186;
              *(__n128 *)v9 = v159;
              if ((signed __int32)v16->n128_u32[0] < *(_DWORD *)v12)
              {
                v187 = *(_QWORD *)(v12 + 16);
                v160 = *(__n128 *)v12;
                v23 = *v16;
                *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
                *(__n128 *)v12 = v23;
                v16[1].n128_u64[0] = v187;
                *v16 = v160;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v190 = *(_QWORD *)(v12 + 16);
              v163 = *(__n128 *)v12;
              v27 = *v16;
              *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
              *(__n128 *)v12 = v27;
              v16[1].n128_u64[0] = v190;
              *v16 = v163;
              if (*v9 >= (signed __int32)v16->n128_u32[0])
                goto LABEL_22;
              v184 = v16[1].n128_u64[0];
              v157 = *v16;
              v28 = *(__n128 *)v9;
              v16[1].n128_u64[0] = *(_QWORD *)(a2 - 8);
              *v16 = v28;
            }
            else
            {
              v184 = *(_QWORD *)(v12 + 16);
              v157 = *(__n128 *)v12;
              v19 = *(__n128 *)v9;
              *(_QWORD *)(v12 + 16) = *(_QWORD *)(a2 - 8);
              *(__n128 *)v12 = v19;
            }
            *(_QWORD *)(a2 - 8) = v184;
            *(__n128 *)v9 = v157;
          }
LABEL_22:
          v29 = (__n128 *)(v12 + 24);
          v30 = v12 + 24 * v15;
          v33 = *(_DWORD *)(v30 - 24);
          v31 = (__n128 *)(v30 - 24);
          v32 = v33;
          v34 = *v10;
          if (v33 >= *(_DWORD *)(v12 + 24))
          {
            if (v34 < v32)
            {
              v191 = v31[1].n128_i64[0];
              v164 = *v31;
              v38 = *(__n128 *)v10;
              v31[1].n128_u64[0] = *(_QWORD *)(a2 - 32);
              *v31 = v38;
              *(_QWORD *)(a2 - 32) = v191;
              *(__n128 *)v10 = v164;
              if ((signed __int32)v31->n128_u32[0] < (signed __int32)v29->n128_u32[0])
              {
                v39 = *v29;
                v40 = *(_QWORD *)(v12 + 40);
                v41 = v31[1].n128_i64[0];
                *v29 = *v31;
                *(_QWORD *)(v12 + 40) = v41;
                v31[1].n128_u64[0] = v40;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v34 >= v32)
            {
              v44 = *v29;
              v45 = *(_QWORD *)(v12 + 40);
              v46 = v31[1].n128_i64[0];
              *v29 = *v31;
              *(_QWORD *)(v12 + 40) = v46;
              v31[1].n128_u64[0] = v45;
              *v31 = v44;
              if (*v10 >= (signed __int32)v31->n128_u32[0])
                goto LABEL_36;
              v193 = v31[1].n128_i64[0];
              v166 = *v31;
              v47 = *(__n128 *)v10;
              v31[1].n128_u64[0] = *(_QWORD *)(a2 - 32);
              *v31 = v47;
              v35 = v166;
              *(_QWORD *)(a2 - 32) = v193;
            }
            else
            {
              v35 = *v29;
              v36 = *(_QWORD *)(v12 + 40);
              v37 = *(_QWORD *)(a2 - 32);
              *v29 = *(__n128 *)v10;
              *(_QWORD *)(v12 + 40) = v37;
              *(_QWORD *)(a2 - 32) = v36;
            }
            *(__n128 *)v10 = v35;
          }
LABEL_36:
          v48 = (__n128 *)(v12 + 48);
          v49 = v12 + 24 * v15;
          v52 = *(_DWORD *)(v49 + 24);
          v50 = (__n128 *)(v49 + 24);
          v51 = v52;
          v53 = *v11;
          if (v52 >= *(_DWORD *)(v12 + 48))
          {
            if (v53 < v51)
            {
              v194 = v50[1].n128_i64[0];
              v167 = *v50;
              v57 = *(__n128 *)v11;
              v50[1].n128_u64[0] = *(_QWORD *)(a2 - 56);
              *v50 = v57;
              *(_QWORD *)(a2 - 56) = v194;
              *(__n128 *)v11 = v167;
              if ((signed __int32)v50->n128_u32[0] < (signed __int32)v48->n128_u32[0])
              {
                v58 = *v48;
                v59 = *(_QWORD *)(v12 + 64);
                v60 = v50[1].n128_i64[0];
                *v48 = *v50;
                *(_QWORD *)(v12 + 64) = v60;
                v50[1].n128_u64[0] = v59;
                *v50 = v58;
              }
            }
          }
          else
          {
            if (v53 >= v51)
            {
              v61 = *v48;
              v62 = *(_QWORD *)(v12 + 64);
              v63 = v50[1].n128_i64[0];
              *v48 = *v50;
              *(_QWORD *)(v12 + 64) = v63;
              v50[1].n128_u64[0] = v62;
              *v50 = v61;
              if (*v11 >= (signed __int32)v50->n128_u32[0])
                goto LABEL_45;
              v195 = v50[1].n128_i64[0];
              v168 = *v50;
              v64 = *(__n128 *)v11;
              v50[1].n128_u64[0] = *(_QWORD *)(a2 - 56);
              *v50 = v64;
              v54 = v168;
              *(_QWORD *)(a2 - 56) = v195;
            }
            else
            {
              v54 = *v48;
              v55 = *(_QWORD *)(v12 + 64);
              v56 = *(_QWORD *)(a2 - 56);
              *v48 = *(__n128 *)v11;
              *(_QWORD *)(v12 + 64) = v56;
              *(_QWORD *)(a2 - 56) = v55;
            }
            *(__n128 *)v11 = v54;
          }
LABEL_45:
          v65 = v16->n128_u32[0];
          v66 = v50->n128_u32[0];
          if ((signed __int32)v16->n128_u32[0] >= (signed __int32)v31->n128_u32[0])
          {
            if (v66 < v65)
            {
              v197 = v16[1].n128_u64[0];
              v170 = *v16;
              *v16 = *v50;
              v16[1].n128_u64[0] = v50[1].n128_u64[0];
              v50[1].n128_u64[0] = v197;
              *v50 = v170;
              if ((signed __int32)v16->n128_u32[0] < (signed __int32)v31->n128_u32[0])
              {
                v198 = v31[1].n128_u64[0];
                v171 = *v31;
                *v31 = *v16;
                v31[1].n128_u64[0] = v16[1].n128_u64[0];
                v16[1].n128_u64[0] = v198;
                *v16 = v171;
              }
            }
          }
          else
          {
            if (v66 >= v65)
            {
              v199 = v31[1].n128_u64[0];
              v172 = *v31;
              *v31 = *v16;
              v31[1].n128_u64[0] = v16[1].n128_u64[0];
              v16[1].n128_u64[0] = v199;
              *v16 = v172;
              if ((signed __int32)v50->n128_u32[0] >= (signed __int32)v16->n128_u32[0])
                goto LABEL_54;
              v196 = v16[1].n128_u64[0];
              v169 = *v16;
              *v16 = *v50;
              v16[1].n128_u64[0] = v50[1].n128_u64[0];
            }
            else
            {
              v196 = v31[1].n128_u64[0];
              v169 = *v31;
              *v31 = *v50;
              v31[1].n128_u64[0] = v50[1].n128_u64[0];
            }
            v50[1].n128_u64[0] = v196;
            *v50 = v169;
          }
LABEL_54:
          v200 = *(_QWORD *)(v12 + 16);
          v173 = *(__n128 *)v12;
          v67 = *v16;
          *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
          *(__n128 *)v12 = v67;
          v16[1].n128_u64[0] = v200;
          *v16 = v173;
          --a3;
          v26 = *(_DWORD *)v12;
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_DWORD *)(v12 - 24) >= v26)
          {
            v155 = *(_DWORD *)(v12 + 20);
            v152 = *(__n128 *)(v12 + 4);
            if (v26 >= *v9)
            {
              v82 = v12 + 24;
              do
              {
                v12 = v82;
                if (v82 >= a2)
                  break;
                v82 += 24;
              }
              while (v26 >= *(_DWORD *)v12);
            }
            else
            {
              do
              {
                v81 = *(_DWORD *)(v12 + 24);
                v12 += 24;
              }
              while (v26 >= v81);
            }
            v83 = a2;
            if (v12 < a2)
            {
              v83 = a2;
              do
              {
                v84 = *(_DWORD *)(v83 - 24);
                v83 -= 24;
              }
              while (v26 < v84);
            }
            while (v12 < v83)
            {
              v202 = *(_QWORD *)(v12 + 16);
              v175 = *(__n128 *)v12;
              v85 = *(__n128 *)v83;
              *(_QWORD *)(v12 + 16) = *(_QWORD *)(v83 + 16);
              *(__n128 *)v12 = v85;
              *(_QWORD *)(v83 + 16) = v202;
              *(__n128 *)v83 = v175;
              do
              {
                v86 = *(_DWORD *)(v12 + 24);
                v12 += 24;
              }
              while (v26 >= v86);
              do
              {
                v87 = *(_DWORD *)(v83 - 24);
                v83 -= 24;
              }
              while (v26 < v87);
            }
            if (v12 - 24 != a1)
            {
              v88 = *(_OWORD *)(v12 - 24);
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 - 8);
              *(_OWORD *)a1 = v88;
            }
            a4 = 0;
            *(_DWORD *)(v12 - 24) = v26;
            result = v152;
            *(_DWORD *)(v12 - 4) = v155;
            *(__n128 *)(v12 - 20) = v152;
            continue;
          }
LABEL_56:
          v68 = 0;
          v154 = *(_DWORD *)(v12 + 20);
          v151 = *(__n128 *)(v12 + 4);
          do
          {
            v69 = *(_DWORD *)(v12 + v68 + 24);
            v68 += 24;
          }
          while (v69 < v26);
          v70 = v12 + v68;
          v71 = a2;
          if (v68 == 24)
          {
            v71 = a2;
            do
            {
              if (v70 >= v71)
                break;
              v73 = *(_DWORD *)(v71 - 24);
              v71 -= 24;
            }
            while (v73 >= v26);
          }
          else
          {
            do
            {
              v72 = *(_DWORD *)(v71 - 24);
              v71 -= 24;
            }
            while (v72 >= v26);
          }
          v12 += v68;
          if (v70 < v71)
          {
            v74 = v71;
            do
            {
              v201 = *(_QWORD *)(v12 + 16);
              v174 = *(__n128 *)v12;
              v75 = *(__n128 *)v74;
              *(_QWORD *)(v12 + 16) = *(_QWORD *)(v74 + 16);
              *(__n128 *)v12 = v75;
              *(_QWORD *)(v74 + 16) = v201;
              *(__n128 *)v74 = v174;
              do
              {
                v76 = *(_DWORD *)(v12 + 24);
                v12 += 24;
              }
              while (v76 < v26);
              do
              {
                v77 = *(_DWORD *)(v74 - 24);
                v74 -= 24;
              }
              while (v77 >= v26);
            }
            while (v12 < v74);
          }
          if (v12 - 24 != a1)
          {
            v78 = *(_OWORD *)(v12 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 - 8);
            *(_OWORD *)a1 = v78;
          }
          *(_DWORD *)(v12 - 24) = v26;
          *(_DWORD *)(v12 - 4) = v154;
          *(__n128 *)(v12 - 20) = v151;
          if (v70 < v71)
            goto LABEL_75;
          {
            if (v79)
              continue;
LABEL_75:
            a4 = 0;
            continue;
          }
          a2 = v12 - 24;
          if (v79)
            return result;
          goto LABEL_1;
        }
        v105 = v12 + 24;
        v107 = v12 == a2 || v105 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v107)
          {
            v108 = 0;
            v109 = v12;
            do
            {
              v111 = v105;
              v112 = *(_DWORD *)(v109 + 24);
              if (v112 < *(_DWORD *)v109)
              {
                v178 = *(__n128 *)(v109 + 28);
                v205 = *(_DWORD *)(v109 + 44);
                v113 = v108;
                do
                {
                  v114 = v12 + v113;
                  *(_OWORD *)(v114 + 24) = *(_OWORD *)(v12 + v113);
                  *(_QWORD *)(v114 + 40) = *(_QWORD *)(v12 + v113 + 16);
                  if (!v113)
                  {
                    v110 = v12;
                    goto LABEL_118;
                  }
                  v113 -= 24;
                }
                while (v112 < *(_DWORD *)(v114 - 24));
                v110 = v12 + v113 + 24;
LABEL_118:
                *(_DWORD *)v110 = v112;
                result = v178;
                *(_DWORD *)(v110 + 20) = v205;
                *(__n128 *)(v110 + 4) = v178;
              }
              v105 = v111 + 24;
              v108 += 24;
              v109 = v111;
            }
            while (v111 + 24 != a2);
          }
        }
        else if (!v107)
        {
          do
          {
            v146 = v105;
            v147 = *(_DWORD *)(a1 + 24);
            if (v147 < *(_DWORD *)a1)
            {
              v182 = *(__n128 *)(a1 + 28);
              v209 = *(_DWORD *)(a1 + 44);
              do
              {
                *(_OWORD *)v105 = *(_OWORD *)(v105 - 24);
                *(_QWORD *)(v105 + 16) = *(_QWORD *)(v105 - 8);
                v148 = *(_DWORD *)(v105 - 48);
                v105 -= 24;
              }
              while (v147 < v148);
              *(_DWORD *)v105 = v147;
              result = v182;
              *(_DWORD *)(v105 + 20) = v209;
              *(__n128 *)(v105 + 4) = v182;
            }
            v105 = v146 + 24;
            a1 = v146;
          }
          while (v146 + 24 != a2);
        }
        return result;
    }
  }
}

  v8 = (__int128 *)((char *)a2 - 40);
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v40 = (__int128 *)((char *)a2 - 40);
        v39 = *((_QWORD *)a2 - 5);
        v41 = v39 >= *(_QWORD *)v9;
        if (v39 != *(_QWORD *)v9
          || (v42 = *((_QWORD *)a2 - 4), v43 = *(_QWORD *)(v9 + 8), v41 = v42 >= v43, v42 != v43))
        {
          if (v41)
            return;
          goto LABEL_47;
        }
        v47 = *(char *)(v9 + 39);
        v48 = *((char *)a2 - 1);
        if (v48 >= 0)
          v49 = *((unsigned __int8 *)a2 - 1);
        else
          v49 = *((_QWORD *)a2 - 2);
        if (v48 >= 0)
          v50 = (char *)a2 - 24;
        else
          v50 = (char *)*((_QWORD *)a2 - 3);
        if (v47 >= 0)
          v51 = *(unsigned __int8 *)(v9 + 39);
        else
          v51 = *(_QWORD *)(v9 + 24);
        if (v47 >= 0)
          v52 = (const void *)(v9 + 16);
        else
          v52 = *(const void **)(v9 + 16);
        if (v51 >= v49)
          v53 = v49;
        else
          v53 = v51;
        v54 = memcmp(v50, v52, v53);
        v55 = v49 < v51;
        if (v54)
          v55 = v54 < 0;
        if (v55)
        {
LABEL_47:
          v58 = *(_OWORD *)v9;
          v44 = *(_QWORD *)(v9 + 16);
          *(_QWORD *)&v60 = *(_QWORD *)(v9 + 24);
          *(_QWORD *)((char *)&v60 + 7) = *(_QWORD *)(v9 + 31);
          v45 = *(_BYTE *)(v9 + 39);
          *(_QWORD *)(v9 + 24) = 0;
          *(_QWORD *)(v9 + 32) = 0;
          *(_QWORD *)(v9 + 16) = 0;
          *(_OWORD *)v9 = *v40;
          v46 = *(__int128 *)((char *)a2 - 24);
          *(_QWORD *)(v9 + 32) = *((_QWORD *)a2 - 1);
          *(_OWORD *)(v9 + 16) = v46;
          *v40 = v58;
          *((_QWORD *)a2 - 3) = v44;
          *((_QWORD *)a2 - 2) = v60;
          *(_QWORD *)((char *)a2 - 9) = *(_QWORD *)((char *)&v60 + 7);
          *((_BYTE *)a2 - 1) = v45;
          return;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)v9, (uint64_t *)(v9 + 40), v8);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(v9, (__int128 *)(v9 + 40), (__int128 *)(v9 + 80), v8);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(v9, v9 + 40, v9 + 80, v9 + 120, (uint64_t)v8);
        return;
      default:
        if (v12 <= 959)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(v9, (uint64_t)a2);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = v9 + 40 * (v13 >> 1);
          if ((unint64_t)v12 < 0x1401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)v15, (uint64_t *)v9, v8);
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)v9, (uint64_t *)v15, v8);
            v16 = v8;
            v17 = v9 + 40 * v14;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)(v9 + 40), (uint64_t *)(v17 - 40), a2 - 5);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)(v9 + 80), (uint64_t *)(v9 + 40 + 40 * v14), (__int128 *)((char *)a2 - 120));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)(v17 - 40), (uint64_t *)v15, (__int128 *)(v9 + 40 + 40 * v14));
            v57 = *(_OWORD *)v9;
            *(_QWORD *)((char *)&v59 + 7) = *(_QWORD *)(v9 + 31);
            v18 = *(_QWORD *)(v9 + 16);
            *(_QWORD *)&v59 = *(_QWORD *)(v9 + 24);
            v19 = *(_BYTE *)(v9 + 39);
            *(_QWORD *)(v9 + 24) = 0;
            *(_QWORD *)(v9 + 32) = 0;
            *(_QWORD *)(v9 + 16) = 0;
            v20 = *(_QWORD *)(v17 + 32);
            v21 = *(_OWORD *)(v17 + 16);
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)(v9 + 16) = v21;
            *(_QWORD *)(v9 + 32) = v20;
            *(_OWORD *)v15 = v57;
            *(_QWORD *)(v17 + 16) = v18;
            *(_QWORD *)(v17 + 31) = *(_QWORD *)((char *)&v59 + 7);
            *(_QWORD *)(v17 + 24) = v59;
            v8 = v16;
            *(_BYTE *)(v15 + 39) = v19;
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          v22 = *(_QWORD *)(v9 - 40);
          v23 = v22 >= *(_QWORD *)v9;
          if (v22 == *(_QWORD *)v9
            && (v24 = *(_QWORD *)(v9 - 32), v25 = *(_QWORD *)(v9 + 8), v23 = v24 >= v25, v24 == v25))
          {
            v29 = *(char *)(v9 + 39);
            v30 = *(char *)(v9 - 1);
            v31 = v8;
            if (v30 >= 0)
              v32 = *(unsigned __int8 *)(v9 - 1);
            else
              v32 = *(_QWORD *)(v9 - 16);
            if (v30 >= 0)
              v33 = (const void *)(v9 - 24);
            else
              v33 = *(const void **)(v9 - 24);
            if (v29 >= 0)
              v34 = *(unsigned __int8 *)(v9 + 39);
            else
              v34 = *(_QWORD *)(v9 + 24);
            if (v29 >= 0)
              v35 = (const void *)(v9 + 16);
            else
              v35 = *(const void **)(v9 + 16);
            if (v34 >= v32)
              v36 = v32;
            else
              v36 = v34;
            v37 = memcmp(v33, v35, v36);
            v23 = v32 >= v34;
            v8 = v31;
            v38 = !v23;
            if (v37)
              v38 = v37 < 0;
            if (!v38)
            {
LABEL_38:
              v9 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,llvm::SMFixIt *,std::__less<void,void> &>((__int128 *)v9, (unint64_t)a2);
              goto LABEL_40;
            }
          }
          else if (v23)
          {
            goto LABEL_38;
          }
LABEL_13:
          v26 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,llvm::SMFixIt *,std::__less<void,void> &>((__int128 *)v9, (unint64_t)a2);
          if ((v27 & 1) == 0)
            goto LABEL_39;
          v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(v9, v26);
          v9 = v26 + 40;
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(v26 + 40, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v28)
              continue;
LABEL_39:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *,false>(a1, v26, a3, -v11, a5 & 1);
            v9 = v26 + 40;
LABEL_40:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__int128 *)v26;
          if (v28)
            return;
          goto LABEL_1;
        }
        if ((__int128 *)v9 != a2)
          std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *,llvm::SMFixIt *>(v9, a2, a2, a3);
        return;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::OperationPrinter::print(mlir::Block *,BOOL,BOOL)::$_1 &,`anonymous namespace'::BlockInfo *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  __n128 *v7;
  __n128 *v8;
  int v9;
  __n128 *v10;
  int v11;
  signed __int32 v12;
  uint64_t v13;
  __n128 v14;
  __n128 *v15;
  int v16;
  int v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  __n128 *v24;
  int v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  __int128 v60;
  int v61;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (__n128 *)(a2 - 24);
      if (*(_DWORD *)(a2 - 24) < *(_DWORD *)a1)
        goto LABEL_9;
      return result;
    case 3uLL:
      v15 = (__n128 *)(a1 + 24);
      v16 = *(_DWORD *)(a1 + 24);
      v7 = (__n128 *)(a2 - 24);
      v17 = *(_DWORD *)(a2 - 24);
      if (v16 >= *(_DWORD *)a1)
      {
        if (v17 < v16)
        {
          v39 = *(_QWORD *)(a1 + 40);
          v40 = *v15;
          v41 = *(_QWORD *)(a2 - 8);
          *v15 = *v7;
          *(_QWORD *)(a1 + 40) = v41;
          *v7 = v40;
          *(_QWORD *)(a2 - 8) = v39;
          if (*(_DWORD *)(a1 + 24) < *(_DWORD *)a1)
          {
            v42 = *(_QWORD *)(a1 + 16);
            v43 = *(__n128 *)a1;
            *(__n128 *)a1 = *v15;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v15 = v43;
            *(_QWORD *)(a1 + 40) = v42;
          }
        }
      }
      else if (v17 >= v16)
      {
        v55 = *(_QWORD *)(a1 + 16);
        v56 = *(__n128 *)a1;
        *(__n128 *)a1 = *v15;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v15 = v56;
        *(_QWORD *)(a1 + 40) = v55;
        if ((signed __int32)v7->n128_u32[0] < *(_DWORD *)(a1 + 24))
        {
          v57 = *(_QWORD *)(a1 + 40);
          v58 = *v15;
          v59 = *(_QWORD *)(a2 - 8);
          *v15 = *v7;
          *(_QWORD *)(a1 + 40) = v59;
          *v7 = v58;
          *(_QWORD *)(a2 - 8) = v57;
        }
      }
      else
      {
LABEL_9:
        v18 = *(_QWORD *)(a1 + 16);
        v19 = *(__n128 *)a1;
        v20 = v7[1].n128_i64[0];
        *(__n128 *)a1 = *v7;
        *(_QWORD *)(a1 + 16) = v20;
        *v7 = v19;
        v7[1].n128_u64[0] = v18;
      }
      return result;
    case 4uLL:
      return 1;
    case 5uLL:
      v21 = (__n128 *)(a1 + 24);
      v22 = (__n128 *)(a1 + 48);
      v23 = (__n128 *)(a1 + 72);
      v25 = *(_DWORD *)(a2 - 24);
      v24 = (__n128 *)(a2 - 24);
      if (v25 < *(_DWORD *)(a1 + 72))
      {
        v26 = *(_QWORD *)(a1 + 88);
        v27 = *v23;
        v28 = v24[1].n128_i64[0];
        *v23 = *v24;
        *(_QWORD *)(a1 + 88) = v28;
        *v24 = v27;
        v24[1].n128_u64[0] = v26;
        if ((signed __int32)v23->n128_u32[0] < (signed __int32)v22->n128_u32[0])
        {
          v29 = *(_QWORD *)(a1 + 64);
          v30 = *v22;
          *v22 = *v23;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v23 = v30;
          *(_QWORD *)(a1 + 88) = v29;
          if ((signed __int32)v22->n128_u32[0] < (signed __int32)v21->n128_u32[0])
          {
            v31 = *(_QWORD *)(a1 + 40);
            v32 = *v21;
            *v21 = *v22;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v22 = v32;
            *(_QWORD *)(a1 + 64) = v31;
            if (*(_DWORD *)(a1 + 24) < *(_DWORD *)a1)
            {
              v33 = *(_QWORD *)(a1 + 16);
              v34 = *(__n128 *)a1;
              *(__n128 *)a1 = *v21;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v21 = v34;
              *(_QWORD *)(a1 + 40) = v33;
            }
          }
        }
      }
      return 1;
    default:
      v8 = (__n128 *)(a1 + 48);
      v9 = *(_DWORD *)(a1 + 48);
      v10 = (__n128 *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 24);
      v12 = *(_DWORD *)a1;
      if (v11 >= *(_DWORD *)a1)
      {
        if (v9 < v11)
        {
          v35 = *(_QWORD *)(a1 + 40);
          v36 = *v10;
          *v10 = *v8;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v8 = v36;
          *(_QWORD *)(a1 + 64) = v35;
          if ((signed __int32)v10->n128_u32[0] < v12)
          {
            v37 = *(_QWORD *)(a1 + 16);
            v38 = *(__n128 *)a1;
            *(__n128 *)a1 = *v10;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v10 = v38;
            *(_QWORD *)(a1 + 40) = v37;
          }
        }
      }
      else if (v9 >= v11)
      {
        v44 = *(_QWORD *)(a1 + 16);
        v45 = *(__n128 *)a1;
        *(__n128 *)a1 = *v10;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v10 = v45;
        *(_QWORD *)(a1 + 40) = v44;
        if (v9 < *(_DWORD *)(a1 + 24))
        {
          v46 = *(_QWORD *)(a1 + 40);
          v47 = *v10;
          *v10 = *v8;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v8 = v47;
          *(_QWORD *)(a1 + 64) = v46;
        }
      }
      else
      {
        v13 = *(_QWORD *)(a1 + 16);
        v14 = *(__n128 *)a1;
        *(__n128 *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 64);
        *v8 = v14;
        *(_QWORD *)(a1 + 64) = v13;
      }
      v48 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v49 = 0;
      v50 = 0;
      break;
  }
  while (1)
  {
    v52 = *(_DWORD *)v48;
    if (*(_DWORD *)v48 < (signed __int32)v8->n128_u32[0])
    {
      v60 = *(_OWORD *)(v48 + 4);
      v61 = *(_DWORD *)(v48 + 20);
      v53 = v49;
      do
      {
        v54 = a1 + v53;
        *(_OWORD *)(v54 + 72) = *(_OWORD *)(a1 + v53 + 48);
        *(_QWORD *)(v54 + 88) = *(_QWORD *)(a1 + v53 + 64);
        if (v53 == -48)
        {
          v51 = a1;
          goto LABEL_27;
        }
        v53 -= 24;
      }
      while (v52 < *(_DWORD *)(v54 + 24));
      v51 = a1 + v53 + 72;
LABEL_27:
      *(_DWORD *)v51 = v52;
      *(_OWORD *)(v51 + 4) = v60;
      *(_DWORD *)(v51 + 20) = v61;
      if (++v50 == 8)
        return v48 + 24 == a2;
    }
    v8 = (__n128 *)v48;
    v49 += 24;
    v48 += 24;
    if (v48 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::OperationPrinter::print(mlir::Block *,BOOL,BOOL)::$_1 &,`anonymous namespace'::BlockInfo *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  signed __int32 v5;
  signed __int32 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v5 = a2->n128_u32[0];
  v6 = a3->n128_u32[0];
  if ((signed __int32)a2->n128_u32[0] >= (signed __int32)a1->n128_u32[0])
  {
    if (v6 < v5)
    {
      v9 = a2[1].n128_u64[0];
      result = *a2;
      v10 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v10;
      *a3 = result;
      a3[1].n128_u64[0] = v9;
      if ((signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0])
      {
        v11 = a1[1].n128_u64[0];
        result = *a1;
        v12 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v12;
        *a2 = result;
        a2[1].n128_u64[0] = v11;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      v7 = a1[1].n128_u64[0];
      result = *a1;
      v8 = a3[1].n128_u64[0];
      *a1 = *a3;
      a1[1].n128_u64[0] = v8;
LABEL_9:
      *a3 = result;
      a3[1].n128_u64[0] = v7;
      goto LABEL_10;
    }
    v13 = a1[1].n128_u64[0];
    result = *a1;
    v14 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v14;
    *a2 = result;
    a2[1].n128_u64[0] = v13;
    if ((signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0])
    {
      v7 = a2[1].n128_u64[0];
      result = *a2;
      v15 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  if ((signed __int32)a4->n128_u32[0] < (signed __int32)a3->n128_u32[0])
  {
    v16 = a3[1].n128_u64[0];
    result = *a3;
    v17 = a4[1].n128_u64[0];
    *a3 = *a4;
    a3[1].n128_u64[0] = v17;
    *a4 = result;
    a4[1].n128_u64[0] = v16;
    if ((signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0])
    {
      v18 = a2[1].n128_u64[0];
      result = *a2;
      v19 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v19;
      *a3 = result;
      a3[1].n128_u64[0] = v18;
      if ((signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0])
      {
        v20 = a1[1].n128_u64[0];
        result = *a1;
        v21 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v21;
        *a2 = result;
        a2[1].n128_u64[0] = v20;
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN4mlir15AsmResourceBlobEbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_bSF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2[6];
  if (v2 >= 8)
  {
    v4 = a2 + 3;
    v5 = *a2;
    v6 = (v2 & 2) != 0 ? v4 : (_QWORD *)a2[3];
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFF8))(v6, v5, a2[1], a2[2]);
    v7 = a2[6];
    if (v7 >= 8)
    {
      if ((v7 & 4) != 0)
      {
        if ((v7 & 2) != 0)
          v8 = v4;
        else
          v8 = (_QWORD *)*v4;
        (*(void (**)(_QWORD *))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))(v8);
      }
      if ((v7 & 2) == 0)
        llvm::deallocate_buffer((llvm *)a2[3], (void *)a2[4]);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN4mlir15AsmResourceBlobEbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_bSF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::AsmParser::parseTypeList(llvm::SmallVectorImpl<mlir::Type> &)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v1 = *a1;
  v2 = (uint64_t *)a1[1];
  v3 = *((unsigned int *)v2 + 2);
  if (v3 >= *((_DWORD *)v2 + 3))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1[1], v2 + 2, v3 + 1, 8);
    *(_QWORD *)(*v2 + 8 * *((unsigned int *)v2 + 2)) = 0;
    LODWORD(v3) = *((_DWORD *)v2 + 2);
    v4 = *v2;
  }
  else
  {
    v4 = *v2;
    *(_QWORD *)(*v2 + 8 * v3) = 0;
  }
  v5 = v3 + 1;
  *((_DWORD *)v2 + 2) = v5;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 504))(v1, v4 + 8 * v5 - 8);
}

void *llvm::object_creator<`anonymous namespace'::AsmPrinterOptions>::call()
{
  void *v0;
  int v2;
  char v3;
  int *v4;
  __int128 v5;

  v0 = operator new(0x6C8uLL);
  bzero(v0, 0x6C8uLL);
  *(_QWORD *)&v5 = "Print DenseElementsAttrs with a hex string that have more elements than the given upper limit (use -1 to disable)";
  *((_QWORD *)&v5 + 1) = 113;
  llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::opt<char [44],llvm::cl::desc>((uint64_t)v0, (int8x16_t *)"mlir-print-elementsattrs-with-hex-if-larger", &v5);
  *(_QWORD *)&v5 = "Elide ElementsAttrs with \"...\" that have more elements than the given upper limit";
  *((_QWORD *)&v5 + 1) = 81;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [35],llvm::cl::desc>((uint64_t)v0 + 200, (int8x16_t *)"mlir-elide-elementsattrs-if-larger", &v5);
  *(_QWORD *)&v5 = "Elide printing value of resources if string is too long in chars.";
  *((_QWORD *)&v5 + 1) = 65;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [35],llvm::cl::desc>((uint64_t)v0 + 392, (int8x16_t *)"mlir-elide-resource-strings-if-larger", &v5);
  LOBYTE(v2) = 0;
  v4 = &v2;
  *(_QWORD *)&v5 = "Print debug info in MLIR output";
  *((_QWORD *)&v5 + 1) = 31;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [21],llvm::cl::initializer<BOOL>,llvm::cl::desc>((uint64_t)v0 + 584, (int8x16_t *)"mlir-print-debuginfo", (_BYTE **)&v4, &v5);
  LOBYTE(v2) = 0;
  v4 = &v2;
  *(_QWORD *)&v5 = "Print pretty debug info in MLIR output";
  *((_QWORD *)&v5 + 1) = 38;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [21],llvm::cl::initializer<BOOL>,llvm::cl::desc>((uint64_t)v0 + 776, (int8x16_t *)"mlir-pretty-debuginfo", (_BYTE **)&v4, &v5);
  v3 = 0;
  v4 = (int *)&v3;
  *(_QWORD *)&v5 = "Print the generic op form";
  *((_QWORD *)&v5 + 1) = 25;
  v2 = 1;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [22],llvm::cl::initializer<BOOL>,llvm::cl::desc,llvm::cl::OptionHidden>((uint64_t)v0 + 968, (int8x16_t *)"mlir-print-op-generic", (_BYTE **)&v4, &v5, &v2);
  v3 = 0;
  v4 = (int *)&v3;
  *(_QWORD *)&v5 = "Skip op verification when using custom printers";
  *((_QWORD *)&v5 + 1) = 47;
  v2 = 1;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [22],llvm::cl::initializer<BOOL>,llvm::cl::desc,llvm::cl::OptionHidden>((uint64_t)v0 + 1160, (int8x16_t *)"mlir-print-assume-verified", (_BYTE **)&v4, &v5, &v2);
  LOBYTE(v2) = 0;
  v4 = &v2;
  *(_QWORD *)&v5 = "Print with local scope and inline information (eliding aliases for attributes, types, and locations";
  *((_QWORD *)&v5 + 1) = 99;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [21],llvm::cl::initializer<BOOL>,llvm::cl::desc>((uint64_t)v0 + 1352, (int8x16_t *)"mlir-print-local-scope", (_BYTE **)&v4, &v5);
  LOBYTE(v2) = 0;
  v4 = &v2;
  *(_QWORD *)&v5 = "Print users of operation results and block arguments as a comment";
  *((_QWORD *)&v5 + 1) = 65;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [21],llvm::cl::initializer<BOOL>,llvm::cl::desc>((uint64_t)v0 + 1544, (int8x16_t *)"mlir-print-value-users", (_BYTE **)&v4, &v5);
  return v0;
}

void llvm::object_deleter<`anonymous namespace'::AsmPrinterOptions>::call(_QWORD *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;

  if (!__p)
    return;
  __p[193] = &unk_1E0E23520;
  v2 = (char *)(__p + 213);
  v3 = (char *)__p[216];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  __p[193] = &unk_1E0E23930;
  v5 = (void *)__p[205];
  if (v5 != (void *)__p[204])
    free(v5);
  v6 = (_QWORD *)__p[201];
  if (v6 != __p + 203)
    free(v6);
  __p[169] = &unk_1E0E23520;
  v7 = (_QWORD *)__p[192];
  if (v7 == __p + 189)
  {
    v8 = 4;
    v7 = __p + 189;
  }
  else
  {
    if (!v7)
      goto LABEL_17;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_17:
  __p[169] = &unk_1E0E23930;
  v9 = (void *)__p[181];
  if (v9 != (void *)__p[180])
    free(v9);
  v10 = (_QWORD *)__p[177];
  if (v10 != __p + 179)
    free(v10);
  __p[145] = &unk_1E0E23520;
  v11 = (_QWORD *)__p[168];
  if (v11 == __p + 165)
  {
    v12 = 4;
    v11 = __p + 165;
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  __p[145] = &unk_1E0E23930;
  v13 = (void *)__p[157];
  if (v13 != (void *)__p[156])
    free(v13);
  v14 = (_QWORD *)__p[153];
  if (v14 != __p + 155)
    free(v14);
  __p[121] = &unk_1E0E23520;
  v15 = (_QWORD *)__p[144];
  if (v15 == __p + 141)
  {
    v16 = 4;
    v15 = __p + 141;
  }
  else
  {
    if (!v15)
      goto LABEL_35;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_35:
  __p[121] = &unk_1E0E23930;
  v17 = (void *)__p[133];
  if (v17 != (void *)__p[132])
    free(v17);
  v18 = (_QWORD *)__p[129];
  if (v18 != __p + 131)
    free(v18);
  __p[97] = &unk_1E0E23520;
  v19 = (_QWORD *)__p[120];
  if (v19 == __p + 117)
  {
    v20 = 4;
    v19 = __p + 117;
  }
  else
  {
    if (!v19)
      goto LABEL_44;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_44:
  __p[97] = &unk_1E0E23930;
  v21 = (void *)__p[109];
  if (v21 != (void *)__p[108])
    free(v21);
  v22 = (_QWORD *)__p[105];
  if (v22 != __p + 107)
    free(v22);
  __p[73] = &unk_1E0E23520;
  v23 = (_QWORD *)__p[96];
  if (v23 == __p + 93)
  {
    v24 = 4;
    v23 = __p + 93;
  }
  else
  {
    if (!v23)
      goto LABEL_53;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_53:
  __p[73] = &unk_1E0E23930;
  v25 = (void *)__p[85];
  if (v25 != (void *)__p[84])
    free(v25);
  v26 = (_QWORD *)__p[81];
  if (v26 != __p + 83)
    free(v26);
  __p[49] = &unk_1E0E23658;
  v27 = (_QWORD *)__p[72];
  if (v27 == __p + 69)
  {
    v28 = 4;
    v27 = __p + 69;
  }
  else
  {
    if (!v27)
      goto LABEL_62;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_62:
  __p[49] = &unk_1E0E23930;
  v29 = (void *)__p[61];
  if (v29 != (void *)__p[60])
    free(v29);
  v30 = (_QWORD *)__p[57];
  if (v30 != __p + 59)
    free(v30);
  __p[25] = &unk_1E0E23658;
  v31 = (_QWORD *)__p[48];
  if (v31 == __p + 45)
  {
    v32 = 4;
    v31 = __p + 45;
  }
  else
  {
    if (!v31)
      goto LABEL_71;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_71:
  __p[25] = &unk_1E0E23930;
  v33 = (void *)__p[37];
  if (v33 != (void *)__p[36])
    free(v33);
  v34 = (_QWORD *)__p[33];
  if (v34 != __p + 35)
    free(v34);
  *__p = off_1E0E236C0;
  v35 = (_QWORD *)__p[24];
  if (v35 == __p + 21)
  {
    v36 = 4;
    v35 = __p + 21;
    goto LABEL_79;
  }
  if (v35)
  {
    v36 = 5;
LABEL_79:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  *__p = &unk_1E0E23930;
  v37 = (void *)__p[12];
  if (v37 != (void *)__p[11])
    free(v37);
  v38 = (_QWORD *)__p[8];
  if (v38 != __p + 10)
    free(v38);
  operator delete(__p);
}

uint64_t llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::opt<char [44],llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _OWORD *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t *GeneralCategory;
  uint64_t v9;
  const unsigned __int8 *v10;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v6 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v7 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v9 = *(unsigned int *)(a1 + 72);
  if (v9 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v6, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v9) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 136) = &off_1E0E22FC8;
  *(_QWORD *)a1 = off_1E0E236C0;
  *(_QWORD *)(a1 + 160) = &unk_1E0E23BF8;
  *(_QWORD *)(a1 + 168) = off_1E0E4FC28;
  *(_QWORD *)(a1 + 192) = a1 + 168;
  v10 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v10);
  *(_OWORD *)(a1 + 32) = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [35],llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _OWORD *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t *GeneralCategory;
  uint64_t v9;
  const unsigned __int8 *v10;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v6 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v7 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v9 = *(unsigned int *)(a1 + 72);
  if (v9 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v6, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v9) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22FA8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23658;
  *(_QWORD *)(a1 + 152) = &unk_1E0E23BC8;
  *(_QWORD *)(a1 + 160) = off_1E0E4FBE0;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v10 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v10);
  *(_OWORD *)(a1 + 32) = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

BOOL llvm::cl::OptionValueCopy<unsigned int>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

_QWORD *std::__function::__func<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E4FBE0;
  return result;
}

void std::__function::__func<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E4FBE0;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [21],llvm::cl::initializer<BOOL>,llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _BYTE **a3, _OWORD *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t *GeneralCategory;
  uint64_t v11;
  const unsigned __int8 *v12;
  _BYTE *v13;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v8 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v9 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v11 = *(unsigned int *)(a1 + 72);
  if (v11 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v8, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v11) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22F68;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23520;
  *(_QWORD *)(a1 + 152) = off_1E0E23B68;
  *(_QWORD *)(a1 + 160) = off_1E0E4FAF8;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v12 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v12);
  v13 = *a3;
  *(_BYTE *)(a1 + 128) = **a3;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v13;
  *(_OWORD *)(a1 + 32) = *a4;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [22],llvm::cl::initializer<BOOL>,llvm::cl::desc,llvm::cl::OptionHidden>(uint64_t a1, int8x16_t *a2, _BYTE **a3, _OWORD *a4, _WORD *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t *GeneralCategory;
  uint64_t v13;
  const unsigned __int8 *v14;
  _BYTE *v15;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22F68;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23520;
  *(_QWORD *)(a1 + 152) = off_1E0E23B68;
  *(_QWORD *)(a1 + 160) = off_1E0E4FAF8;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v14 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v14);
  v15 = *a3;
  *(_BYTE *)(a1 + 128) = **a3;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v15;
  *(_OWORD *)(a1 + 32) = *a4;
  *(_WORD *)(a1 + 10) = (32 * (*a5 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _DWORD *buffer;
  void *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 4;
    if (a3)
LABEL_4:
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        v17 = v9[1];
        ++v9;
        v10 = v17;
      }
      return v9;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 4;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v12] = 0;
  *(_QWORD *)buffer = a3;
  buffer[2] = *a4;
  *v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9)
    v13 = *v9 == -8;
  else
    v13 = 1;
  if (v13)
  {
    do
    {
      v15 = v9[1];
      ++v9;
      v14 = v15;
      if (v15)
        v16 = v14 == -8;
      else
        v16 = 1;
    }
    while (v16);
  }
  return v9;
}

void llvm::SmallVectorTemplateBase<std::pair<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>>,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  int v16;
  unint64_t v17;

  v17 = 0;
  v3 = (char *)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 32, &v17);
  v5 = v4;
  v6 = *(char **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = &v6[32 * v7];
    v9 = v4;
    do
    {
      v10 = *(_OWORD *)v6;
      v9[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)v9 = v10;
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = *((_QWORD *)v6 + 3);
      *((_QWORD *)v6 + 2) = 0;
      *((_QWORD *)v6 + 3) = 0;
      v9[3] = v11;
      v6 += 32;
      v9 += 4;
    }
    while (v6 != v8);
    v6 = *(char **)a1;
    v12 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v12)
    {
      v13 = 32 * v12;
      do
      {
        v14 = (void **)&v6[v13];
        v15 = *(_QWORD *)&v6[v13 - 8];
        *(_QWORD *)&v6[v13 - 8] = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        if (*((char *)v14 - 9) < 0)
          operator delete(*(v14 - 4));
        v13 -= 32;
      }
      while (v13);
      v6 = *(char **)a1;
    }
  }
  v16 = v17;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v16;
}

uint64_t mlir::AsmResourcePrinter::fromCallable<mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &>(llvm::StringRef,mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &)::Printer::~Printer(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_1E0E2BBB0;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void mlir::AsmResourcePrinter::fromCallable<mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &>(llvm::StringRef,mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &)::Printer::~Printer(void **__p)
{
  void **v1;

  v1 = __p;
  *__p = off_1E0E2BBB0;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    __p = v1;
  }
  operator delete(__p);
}

uint64_t mlir::AsmResourcePrinter::fromCallable<mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &>(llvm::StringRef,mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &)::Printer::buildResources(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::FallbackAsmResourceMap::ResourceCollection::buildResources(*(_QWORD *)(a1 + 32), a2, a3);
}

uint64_t llvm::SmallVectorTemplateBase<mlir::FallbackAsmResourceMap::OpaqueAsmResource,false>::growAndEmplaceBack<llvm::StringRef,mlir::AsmResourceBlob>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  char *v6;
  char *v7;
  int v8;
  char *v9;
  size_t v10;
  const void *v11;
  unint64_t v12;
  __int128 *v13;
  int v14;
  char *v15;
  int *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;
  char *v24;
  _DWORD *v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v37 = 0;
  v6 = (char *)(a1 + 16);
  v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 96, &v37);
  v8 = *(_DWORD *)(a1 + 8);
  v9 = &v7[96 * v8];
  v11 = *(const void **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v39 = *a3;
  v12 = *((_QWORD *)a3 + 6);
  v40 = *((_QWORD *)a3 + 2);
  v43 = v12;
  if (v12 >= 8)
  {
    v13 = (__int128 *)((char *)a3 + 24);
    if ((v12 & 2) != 0 && (v12 & 4) != 0)
    {
      (*(void (**)(__int128 *, __int128 *))((v12 & 0xFFFFFFFFFFFFFFF8) + 8))(&v41, v13);
    }
    else
    {
      v41 = *v13;
      v42 = *((_QWORD *)a3 + 5);
    }
    *((_QWORD *)a3 + 6) = 0;
  }
  v44 = *((_BYTE *)a3 + 56);
  v45 = 0;
  if (v11)
  {
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v10 >= 0x17)
    {
      v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v18 = v10 | 7;
      v19 = v18 + 1;
      v20 = (char *)operator new(v18 + 1);
      *((_QWORD *)v9 + 1) = v10;
      *((_QWORD *)v9 + 2) = v19 | 0x8000000000000000;
      *(_QWORD *)v9 = v20;
      v9 = v20;
    }
    else
    {
      v9[23] = v10;
      if (!v10)
      {
LABEL_17:
        v9[v10] = 0;
        v14 = v45;
        v21 = &v7[96 * v8];
        v21[24] = 0;
        v17 = (int *)(v21 + 24);
        v17[16] = -1;
        v16 = v17 + 16;
        if (v14 == -1)
          goto LABEL_20;
        goto LABEL_18;
      }
    }
    memmove(v9, v11, v10);
    goto LABEL_17;
  }
  v14 = 0;
  v15 = &v7[96 * v8];
  *((_DWORD *)v15 + 22) = -1;
  v16 = (int *)(v15 + 88);
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v17 = v16 - 16;
  v9[24] = 0;
  *((_QWORD *)v9 + 2) = 0;
LABEL_18:
  ((void (*)(char *, int *, __int128 *))off_1E0E540F8[v14])(&v38, v17, &v39);
  *v16 = v14;
  if (v45 != -1)
    ((void (*)(char *, __int128 *))off_1E0E540E0[v45])(&v38, &v39);
LABEL_20:
  v45 = -1;
  v22 = *(char **)a1;
  v23 = *(_DWORD *)(a1 + 8);
  if (v23)
  {
    v24 = &v22[96 * v23];
    v25 = v7 + 88;
    v26 = v22 + 24;
    do
    {
      v28 = *(_OWORD *)(v26 - 24);
      *((_QWORD *)v25 - 9) = *((_QWORD *)v26 - 1);
      *(_OWORD *)(v25 - 22) = v28;
      *((_QWORD *)v26 - 2) = 0;
      *((_QWORD *)v26 - 1) = 0;
      *((_QWORD *)v26 - 3) = 0;
      *((_BYTE *)v25 - 64) = 0;
      *v25 = -1;
      v29 = *((unsigned int *)v26 + 16);
      if ((_DWORD)v29 != -1)
      {
        ((void (*)(char *, _DWORD *, char *))off_1E0E540F8[v29])(&v38, v25 - 16, v26);
        *v25 = v29;
      }
      v27 = v26 - 24;
      v25 += 24;
      v26 += 96;
    }
    while (v27 + 96 != v24);
    v22 = *(char **)a1;
    v30 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v30)
    {
      v31 = 96 * v30;
      do
      {
        v32 = &v22[v31];
        v33 = *(unsigned int *)&v22[v31 - 8];
        if ((_DWORD)v33 != -1)
          ((void (*)(char *, char *))off_1E0E540E0[v33])(&v38, v32 - 72);
        *((_DWORD *)v32 - 2) = -1;
        if (*(v32 - 73) < 0)
          operator delete(*((void **)v32 - 12));
        v31 -= 96;
      }
      while (v31);
      v22 = *(char **)a1;
    }
  }
  v34 = v37;
  if (v22 != v6)
    free(v22);
  *(_QWORD *)a1 = v7;
  v35 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v35;
  *(_DWORD *)(a1 + 12) = v34;
  return (uint64_t)&v7[96 * v35 - 96];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4mlir15AsmResourceBlobEbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_bSF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 *v8;
  __int128 v9;

  v5 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 48) = 0;
  v6 = *((_QWORD *)a3 + 6);
  *(_QWORD *)(a2 + 48) = v6;
  if (*((_QWORD *)a3 + 6) >= 8uLL)
  {
    v7 = (_OWORD *)(a2 + 24);
    v8 = (__int128 *)((char *)a3 + 24);
    if ((v6 & 2) != 0 && (v6 & 4) != 0)
    {
      (*(void (**)(_OWORD *, __int128 *))((v6 & 0xFFFFFFFFFFFFFFF8) + 8))(v7, v8);
    }
    else
    {
      v9 = *v8;
      *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
      *v7 = v9;
    }
    *((_QWORD *)a3 + 6) = 0;
  }
  *(_BYTE *)(a2 + 56) = *((_BYTE *)a3 + 56);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4mlir15AsmResourceBlobEbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_bSF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4mlir15AsmResourceBlobEbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_bSF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<mlir::FallbackAsmResourceMap::OpaqueAsmResource,false>::growAndEmplaceBack<llvm::StringRef,BOOL &>(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  char *v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  size_t v11;
  const void *v12;
  char *v13;
  int *v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  char *v23;
  _DWORD *v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unint64_t v36;
  char v37;
  _BYTE v38[64];
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v36 = 0;
  v6 = (char *)(a1 + 16);
  v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 96, &v36);
  v8 = v7;
  v9 = *(_DWORD *)(a1 + 8);
  v10 = &v7[96 * v9];
  v12 = *(const void **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v38[0] = *a3;
  v39 = 1;
  if (v12)
  {
    if (v11 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v11 >= 0x17)
    {
      v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v17 = v11 | 7;
      v18 = v17 + 1;
      v19 = (char *)operator new(v17 + 1);
      *((_QWORD *)v10 + 1) = v11;
      *((_QWORD *)v10 + 2) = v18 | 0x8000000000000000;
      *(_QWORD *)v10 = v19;
      v10 = v19;
    }
    else
    {
      v10[23] = v11;
      if (!v11)
      {
LABEL_11:
        v10[v11] = 0;
        v16 = v39;
        v20 = &v8[96 * v9];
        v20[24] = 0;
        v15 = (int *)(v20 + 24);
        v15[16] = -1;
        v14 = v15 + 16;
        if (v16 == -1)
          goto LABEL_14;
        goto LABEL_12;
      }
    }
    memmove(v10, v12, v11);
    goto LABEL_11;
  }
  v13 = &v7[96 * v9];
  *((_DWORD *)v13 + 22) = -1;
  v14 = (int *)(v13 + 88);
  v15 = v14 - 16;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v10[24] = 0;
  *((_QWORD *)v10 + 2) = 0;
  v16 = 1;
LABEL_12:
  ((void (*)(char *, int *, _BYTE *))off_1E0E540F8[v16])(&v37, v15, v38);
  *v14 = v16;
  if (v39 != -1)
    ((void (*)(char *, _BYTE *))off_1E0E540E0[v39])(&v37, v38);
LABEL_14:
  v39 = -1;
  v21 = *(char **)a1;
  v22 = *(_DWORD *)(a1 + 8);
  if (v22)
  {
    v23 = &v21[96 * v22];
    v24 = v8 + 88;
    v25 = v21 + 24;
    do
    {
      v27 = *(_OWORD *)(v25 - 24);
      *((_QWORD *)v24 - 9) = *((_QWORD *)v25 - 1);
      *(_OWORD *)(v24 - 22) = v27;
      *((_QWORD *)v25 - 2) = 0;
      *((_QWORD *)v25 - 1) = 0;
      *((_QWORD *)v25 - 3) = 0;
      *((_BYTE *)v24 - 64) = 0;
      *v24 = -1;
      v28 = *((unsigned int *)v25 + 16);
      if ((_DWORD)v28 != -1)
      {
        ((void (*)(char *, _DWORD *, char *))off_1E0E540F8[v28])(&v37, v24 - 16, v25);
        *v24 = v28;
      }
      v26 = v25 - 24;
      v24 += 24;
      v25 += 96;
    }
    while (v26 + 96 != v23);
    v21 = *(char **)a1;
    v29 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v29)
    {
      v30 = 96 * v29;
      do
      {
        v31 = &v21[v30];
        v32 = *(unsigned int *)&v21[v30 - 8];
        if ((_DWORD)v32 != -1)
          ((void (*)(char *, char *))off_1E0E540E0[v32])(&v37, v31 - 72);
        *((_DWORD *)v31 - 2) = -1;
        if (*(v31 - 73) < 0)
          operator delete(*((void **)v31 - 12));
        v30 -= 96;
      }
      while (v30);
      v21 = *(char **)a1;
    }
  }
  v33 = v36;
  if (v21 != v6)
    free(v21);
  *(_QWORD *)a1 = v8;
  v34 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v34;
  *(_DWORD *)(a1 + 12) = v33;
  return (uint64_t)&v8[96 * v34 - 96];
}

uint64_t llvm::SmallVectorTemplateBase<mlir::FallbackAsmResourceMap::OpaqueAsmResource,false>::growAndEmplaceBack<llvm::StringRef,std::string>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  char *v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  size_t v11;
  const void *v12;
  char *v13;
  int *v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  char *v23;
  _DWORD *v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v36 = 0;
  v6 = (char *)(a1 + 16);
  v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 96, &v36);
  v8 = v7;
  v9 = *(_DWORD *)(a1 + 8);
  v10 = &v7[96 * v9];
  v12 = *(const void **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v38 = *a3;
  v39 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v40 = 2;
  if (v12)
  {
    if (v11 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v11 >= 0x17)
    {
      v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v17 = v11 | 7;
      v18 = v17 + 1;
      v19 = (char *)operator new(v17 + 1);
      *((_QWORD *)v10 + 1) = v11;
      *((_QWORD *)v10 + 2) = v18 | 0x8000000000000000;
      *(_QWORD *)v10 = v19;
      v10 = v19;
    }
    else
    {
      v10[23] = v11;
      if (!v11)
      {
LABEL_11:
        v10[v11] = 0;
        v16 = v40;
        v20 = &v8[96 * v9];
        v20[24] = 0;
        v15 = (int *)(v20 + 24);
        v15[16] = -1;
        v14 = v15 + 16;
        if (v16 == -1)
          goto LABEL_14;
        goto LABEL_12;
      }
    }
    memmove(v10, v12, v11);
    goto LABEL_11;
  }
  v13 = &v7[96 * v9];
  *((_DWORD *)v13 + 22) = -1;
  v14 = (int *)(v13 + 88);
  v15 = v14 - 16;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v10[24] = 0;
  *((_QWORD *)v10 + 2) = 0;
  v16 = 2;
LABEL_12:
  ((void (*)(char *, int *, __int128 *))off_1E0E540F8[v16])(&v37, v15, &v38);
  *v14 = v16;
  if (v40 != -1)
    ((void (*)(char *, __int128 *))off_1E0E540E0[v40])(&v37, &v38);
LABEL_14:
  v40 = -1;
  v21 = *(char **)a1;
  v22 = *(_DWORD *)(a1 + 8);
  if (v22)
  {
    v23 = &v21[96 * v22];
    v24 = v8 + 88;
    v25 = v21 + 24;
    do
    {
      v27 = *(_OWORD *)(v25 - 24);
      *((_QWORD *)v24 - 9) = *((_QWORD *)v25 - 1);
      *(_OWORD *)(v24 - 22) = v27;
      *((_QWORD *)v25 - 2) = 0;
      *((_QWORD *)v25 - 1) = 0;
      *((_QWORD *)v25 - 3) = 0;
      *((_BYTE *)v24 - 64) = 0;
      *v24 = -1;
      v28 = *((unsigned int *)v25 + 16);
      if ((_DWORD)v28 != -1)
      {
        ((void (*)(char *, _DWORD *, char *))off_1E0E540F8[v28])(&v37, v24 - 16, v25);
        *v24 = v28;
      }
      v26 = v25 - 24;
      v24 += 24;
      v25 += 96;
    }
    while (v26 + 96 != v23);
    v21 = *(char **)a1;
    v29 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v29)
    {
      v30 = 96 * v29;
      do
      {
        v31 = &v21[v30];
        v32 = *(unsigned int *)&v21[v30 - 8];
        if ((_DWORD)v32 != -1)
          ((void (*)(char *, char *))off_1E0E540E0[v32])(&v37, v31 - 72);
        *((_DWORD *)v31 - 2) = -1;
        if (*(v31 - 73) < 0)
          operator delete(*((void **)v31 - 12));
        v30 -= 96;
      }
      while (v30);
      v21 = *(char **)a1;
    }
  }
  v33 = v36;
  if (v21 != v6)
    free(v21);
  *(_QWORD *)a1 = v8;
  v34 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v34;
  *(_DWORD *)(a1 + 12) = v33;
  return (uint64_t)&v8[96 * v34 - 96];
}

uint64_t mlir::detail::AsmStateImpl::AsmStateImpl(uint64_t a1, unsigned int *a2, __int128 *a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 *v16;
  char *v17;
  __int128 v18;
  unint64_t v19;
  BOOL v20;
  int64_t v21;
  unsigned int v22;
  char *v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  void *buffer;
  uint64_t v38;
  uint64_t v39;
  uint64_t InterfaceFor;
  mlir::Region *v41;
  unsigned int v42;
  mlir::Block *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  mlir::Block *v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  int v52;
  mlir::Block *v53;
  _WORD *v54;
  size_t v55;
  __int128 *v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  unsigned int v60;
  unint64_t v61;
  _BOOL4 isEntryBlock;
  BOOL v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  unsigned __int8 v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  unsigned __int8 v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  mlir::GenericProgramPoint *v91;
  mlir::GenericProgramPoint *i;
  mlir::Operation *v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  mlir::Block *v98;
  uint64_t v99;
  int v100;
  BOOL v101;
  int v102;
  mlir::GenericProgramPoint *v103;
  mlir::GenericProgramPoint *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unsigned int v109;
  uint64_t v110;
  char *v111;
  __int128 *v112;
  char *v113;
  __int128 v114;
  unint64_t v115;
  BOOL v116;
  int64_t v117;
  uint64_t *j;
  __int128 v119;
  __int128 v120;
  __int128 *v122;
  uint64_t **v124;
  _DWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  mlir::Region *v128;
  __int128 *__src;
  unsigned int __srca;
  __int128 v131;
  mlir::GenericProgramPoint *v132;
  __int128 v133;
  int64_t v134;
  _QWORD *v135;
  uint64_t v136;
  mlir::GenericProgramPoint *v137;
  uint64_t v138;
  int v139;
  __int128 *v140;
  void *v141;
  uint64_t v142;
  _BYTE v143[73];
  _QWORD *v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  _QWORD v148[4];
  void *v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  int64_t v153;
  _QWORD v154[6];

  v154[4] = *MEMORY[0x1E0C80C00];
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 6));
  mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::DialectInterfaceCollection((_QWORD *)a1, Context);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 72;
  *(_QWORD *)(a1 + 64) = 0x600000000;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 184;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 216;
  *(_QWORD *)(a1 + 208) = 0x400000000;
  *(_QWORD *)(a1 + 248) = a1 + 264;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 1;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = a1 + 464;
  *(_QWORD *)(a1 + 456) = 0x400000000;
  *(_QWORD *)(a1 + 496) = a1 + 512;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 1;
  *(_QWORD *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  v8 = *a3;
  v9 = a3[1];
  *(_QWORD *)(a1 + 576) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(a1 + 560) = v9;
  *(_OWORD *)(a1 + 544) = v8;
  v146 = v148;
  v147 = 0x400000001;
  v122 = a3;
  v149 = (char *)&v150 + 8;
  v151 = 1;
  v150 = xmmword_181236BD0;
  v148[0] = llvm::allocate_buffer(0x1000uLL, (std::align_val_t)8uLL);
  v10 = (_QWORD *)((v148[0] + 7) & 0xFFFFFFFFFFFFFFF8);
  v145 = v148[0] + 4096;
  v144 = v10 + 3;
  v124 = (uint64_t **)(a1 + 424);
  *v10 = a1 + 400;
  v10[1] = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v10;
  v10[2] = 0;
  v141 = v143;
  v142 = 0x800000000;
  v11 = a2[11];
  if ((v11 & 0x7FFFFF) != 0)
  {
    v12 = 0;
    v13 = (((unint64_t)&a2[4 * ((v11 >> 23) & 1) + 17] + ((v11 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
        + 32 * a2[10];
    v14 = 24 * (v11 & 0x7FFFFF);
    do
    {
      *(_QWORD *)&v133 = v13;
      *((_QWORD *)&v133 + 1) = *(_QWORD *)(a1 + 528);
      LODWORD(v134) = *(_DWORD *)(a1 + 536);
      v135 = v10;
      v15 = (char *)v141;
      if (v12 >= HIDWORD(v142))
      {
        v19 = v12 + 1;
        v20 = (char *)v141 + 32 * v12 > (char *)&v133;
        if (v141 <= &v133 && v20)
        {
          v21 = (char *)&v133 - (_BYTE *)v141;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, v143, v19, 32);
          v15 = (char *)v141;
          v16 = (__int128 *)((char *)v141 + v21);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, v143, v19, 32);
          v16 = &v133;
          v15 = (char *)v141;
        }
      }
      else
      {
        v16 = &v133;
      }
      v17 = &v15[32 * v142];
      v18 = v16[1];
      *(_OWORD *)v17 = *v16;
      *((_OWORD *)v17 + 1) = v18;
      v12 = v142 + 1;
      LODWORD(v142) = v142 + 1;
      v13 += 24;
      v14 -= 24;
    }
    while (v14);
  }
  v22 = v142;
  if ((_DWORD)v142)
  {
    v125 = (_DWORD *)(a1 + 504);
    v126 = (_QWORD *)(a1 + 496);
    while (1)
    {
      v23 = (char *)v141 + 32 * v22;
      v128 = (mlir::Region *)*((_QWORD *)v23 - 4);
      v24 = *((_DWORD *)v23 - 4);
      v25 = (uint64_t *)*((_QWORD *)v23 - 1);
      v26 = *((_QWORD *)v23 - 3);
      LODWORD(v142) = v22 - 1;
      *(_QWORD *)(a1 + 528) = v26;
      *(_DWORD *)(a1 + 536) = v24;
      v27 = *(uint64_t **)(a1 + 424);
      if (v27 != v25)
        break;
LABEL_15:
      *((_QWORD *)&v150 + 1) += 24;
      if (v144
        && (((unint64_t)v144 + 7) & 0xFFFFFFFFFFFFFFF8) - (unint64_t)v144 + 24 <= v145 - (uint64_t)v144)
      {
        v28 = (_QWORD *)(((unint64_t)v144 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      else
      {
        v35 = v147 >> 7;
        if (v147 >> 7 >= 0x1E)
          LOBYTE(v35) = 30;
        v36 = 4096 << v35;
        buffer = llvm::allocate_buffer(4096 << v35, (std::align_val_t)8uLL);
        v38 = v147;
        if (v147 >= (unint64_t)HIDWORD(v147))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v146, v148, v147 + 1, 8);
          v38 = v147;
        }
        *((_QWORD *)v146 + v38) = buffer;
        LODWORD(v147) = v147 + 1;
        v145 = (uint64_t)buffer + v36;
        v28 = (_QWORD *)(((unint64_t)buffer + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      v144 = v28 + 3;
      *v28 = a1 + 400;
      v28[1] = *(_QWORD *)(a1 + 424);
      *(_QWORD *)(a1 + 424) = v28;
      v28[2] = 0;
      *(_QWORD *)&v131 = a1 + 280;
      if ((*(_BYTE *)(a1 + 576) & 4) == 0)
      {
        v39 = *((_QWORD *)v128 + 2);
        if (v39)
        {
          if (mlir::OpInterface<mlir::OpAsmOpInterface,mlir::detail::OpAsmOpInterfaceInterfaceTraits>::getInterfaceFor(*((_QWORD *)v128 + 2)))
          {
            InterfaceFor = mlir::OpInterface<mlir::OpAsmOpInterface,mlir::detail::OpAsmOpInterfaceInterfaceTraits>::getInterfaceFor(v39);
          }
        }
      }
      v41 = (mlir::Region *)*((_QWORD *)v128 + 1);
      if (v41 != v128)
      {
        v42 = 0;
        while (2)
        {
          if (v41)
            v43 = (mlir::Region *)((char *)v41 - 8);
          else
            v43 = 0;
          v44 = *(_DWORD *)(a1 + 392);
          if (!v44)
            goto LABEL_138;
          v45 = *(_QWORD *)(a1 + 376);
          v46 = ((v43 >> 4) ^ (v43 >> 9)) & (v44 - 1);
          v47 = v45 + 32 * v46;
          v48 = *(mlir::Block **)v47;
          if (*(mlir::Block **)v47 == v43)
            goto LABEL_91;
          v49 = 0;
          v50 = 1;
          while (v48 != (mlir::Block *)-4096)
          {
            if (v49)
              v51 = 0;
            else
              v51 = v48 == (mlir::Block *)-8192;
            if (v51)
              v49 = v47;
            v52 = v46 + v50++;
            v46 = v52 & (v44 - 1);
            v47 = v45 + 32 * v46;
            v48 = *(mlir::Block **)v47;
            if (*(mlir::Block **)v47 == v43)
              goto LABEL_91;
          }
          if (v49)
            v47 = v49;
          v94 = *(_DWORD *)(a1 + 384);
          if (4 * v94 + 4 < 3 * v44)
          {
            if (v44 + ~v94 - *(_DWORD *)(a1 + 388) <= v44 >> 3)
              goto LABEL_139;
          }
          else
          {
LABEL_138:
            v44 *= 2;
LABEL_139:
            v95 = *(_QWORD *)(a1 + 376);
            v96 = *(_DWORD *)(a1 + 392) - 1;
            v97 = v96 & ((v43 >> 4) ^ (v43 >> 9));
            v47 = v95 + 32 * v97;
            v98 = *(mlir::Block **)v47;
            if (*(mlir::Block **)v47 == v43)
            {
LABEL_140:
              ++*(_DWORD *)(a1 + 384);
              if (v43 == (mlir::Block *)-4096)
              {
LABEL_65:
                *(_QWORD *)v47 = v43;
                *(_DWORD *)(v47 + 8) = -1;
                *(_QWORD *)(v47 + 16) = "";
                *(_QWORD *)(v47 + 24) = 0;
                v152 = 0uLL;
                v153 = 0;
                DWORD2(v133) = 0;
                LOBYTE(v137) = 0;
                v138 = 0;
                v139 = 1;
                v135 = 0;
                v136 = 0;
                v134 = 0;
                *(_QWORD *)&v133 = &unk_1E0E22B10;
                v140 = &v152;
                llvm::raw_ostream::SetBufferAndMode((uint64_t)&v133, 0, 0, 0);
                v54 = (_WORD *)v136;
                if ((unint64_t)v135 - v136 > 2)
                {
                  *(_BYTE *)(v136 + 2) = 98;
                  *v54 = 25182;
                  v136 += 3;
                }
                else
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v133, "^bb", 3uLL);
                }
                llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v133, v42);
                llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v133);
                if (v153 >= 0)
                  v55 = HIBYTE(v153);
                else
                  v55 = *((_QWORD *)&v152 + 1);
                if (v55)
                {
                  if (v153 >= 0)
                    v56 = &v152;
                  else
                    v56 = (__int128 *)v152;
                  *(_QWORD *)(a1 + 512) += v55;
                  v57 = *(char **)(a1 + 432);
                  if (v57 && v55 <= *(_QWORD *)(a1 + 440) - (_QWORD)v57)
                  {
                    *(_QWORD *)(a1 + 432) = &v57[v55];
                  }
                  else
                  {
                    __src = v56;
                    if (v55 <= 0x1000)
                    {
                      v60 = *(_DWORD *)(a1 + 456) >> 7;
                      if (v60 >= 0x1E)
                        LOBYTE(v60) = 30;
                      v127 = 4096 << v60;
                      v57 = (char *)llvm::allocate_buffer(4096 << v60, (std::align_val_t)8uLL);
                      v61 = *(unsigned int *)(a1 + 456);
                      if (v61 >= *(unsigned int *)(a1 + 460))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 448, (void *)(a1 + 464), v61 + 1, 8);
                        v61 = *(unsigned int *)(a1 + 456);
                      }
                      v56 = __src;
                      *(_QWORD *)(*(_QWORD *)(a1 + 448) + 8 * v61) = v57;
                      ++*(_DWORD *)(a1 + 456);
                      *(_QWORD *)(a1 + 432) = &v57[v55];
                      *(_QWORD *)(a1 + 440) = &v57[v127];
                    }
                    else
                    {
                      v57 = (char *)llvm::allocate_buffer(v55, (std::align_val_t)8uLL);
                      v58 = *(unsigned int *)(a1 + 504);
                      if (v58 >= *(unsigned int *)(a1 + 508))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v126, (void *)(a1 + 512), v58 + 1, 16);
                        v58 = *v125;
                      }
                      v56 = __src;
                      v59 = (_QWORD *)(*v126 + 16 * v58);
                      *v59 = v57;
                      v59[1] = v55;
                      ++*v125;
                    }
                  }
                  memmove(v57, v56, v55);
                  *(_QWORD *)(v47 + 16) = v57;
                  *(_QWORD *)(v47 + 24) = v55;
                  if (SHIBYTE(v153) < 0)
LABEL_90:
                    operator delete((void *)v152);
                }
                else
                {
                  *(_QWORD *)(v47 + 16) = 0;
                  *(_QWORD *)(v47 + 24) = 0;
                  if (SHIBYTE(v153) < 0)
                    goto LABEL_90;
                }
LABEL_91:
                __srca = v42;
                *(_DWORD *)(v47 + 8) = v42;
                isEntryBlock = mlir::Block::isEntryBlock(v43);
                v63 = isEntryBlock;
                v64 = 3;
                if (!isEntryBlock)
                  v64 = 0;
                *(_QWORD *)&v152 = v154;
                v153 = 32;
                if (isEntryBlock)
                  qmemcpy(v154, "arg", 3);
                *((_QWORD *)&v152 + 1) = v64;
                DWORD2(v133) = 0;
                LOBYTE(v137) = 0;
                v138 = 0;
                v139 = 1;
                v135 = 0;
                v136 = 0;
                v134 = 0;
                *(_QWORD *)&v133 = off_1E0E22B88;
                v140 = &v152;
                llvm::raw_ostream::SetBufferAndMode((uint64_t)&v133, 0, 0, 0);
                v66 = (unint64_t *)*((_QWORD *)v43 + 6);
                v65 = (unint64_t *)*((_QWORD *)v43 + 7);
                if (v65 != v66)
                {
                  if (v63)
                  {
                    while (1)
                    {
                      v79 = *v66;
                      v80 = *(_DWORD *)(a1 + 296);
                      if (v80)
                      {
                        v81 = *(_QWORD *)(a1 + 280);
                        if ((v82 & 1) == 0
                        {
                          v90 = llvm::hashing::detail::fixed_seed_override;
                          if (!llvm::hashing::detail::fixed_seed_override)
                            v90 = 0xFF51AFD7ED558CCDLL;
                          llvm::hashing::detail::get_execution_seed(void)::seed = v90;
                        }
                        v83 = 0x9DDFEA08EB382D69
                            * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v79) ^ HIDWORD(v79));
                        v84 = 0x9DDFEA08EB382D69 * (HIDWORD(v79) ^ (v83 >> 47) ^ v83);
                        v85 = (-348639895 * ((v84 >> 47) ^ v84)) & (v80 - 1);
                        v86 = *(_QWORD *)(v81 + 16 * v85);
                        if (v86 == v79)
                          goto LABEL_114;
                        v87 = 1;
                        while (v86 != -4096)
                        {
                          v88 = v85 + v87++;
                          v85 = v88 & (v80 - 1);
                          v86 = *(_QWORD *)(v81 + 16 * v85);
                          if (v86 == v79)
                            goto LABEL_114;
                        }
                      }
                      v89 = *((_QWORD *)&v152 + 1);
                      if (*((_QWORD *)&v152 + 1) != 3)
                      {
                        if (*((_QWORD *)&v152 + 1) <= 3uLL)
                        {
                          if ((unint64_t)v153 > 2
                            || (llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v152, v154, 3uLL, 1),
                                v89 = *((_QWORD *)&v152 + 1),
                                *((_QWORD *)&v152 + 1) != 3))
                          {
                            bzero((void *)(v152 + v89), 3 - v89);
                          }
                        }
                        *((_QWORD *)&v152 + 1) = 3;
                      }
                      v78 = *(unsigned int *)(a1 + 532);
                      *(_DWORD *)(a1 + 532) = v78 + 1;
                      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v133, v78);
LABEL_114:
                      if (++v66 == v65)
                        goto LABEL_131;
                    }
                  }
                  while (2)
                  {
                    v67 = *v66;
                    v68 = *(_DWORD *)(a1 + 296);
                    if (v68)
                    {
                      v69 = *(_QWORD *)(a1 + 280);
                      if ((v70 & 1) == 0
                      {
                        v77 = llvm::hashing::detail::fixed_seed_override;
                        if (!llvm::hashing::detail::fixed_seed_override)
                          v77 = 0xFF51AFD7ED558CCDLL;
                        llvm::hashing::detail::get_execution_seed(void)::seed = v77;
                      }
                      v71 = 0x9DDFEA08EB382D69
                          * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v67) ^ HIDWORD(v67));
                      v72 = 0x9DDFEA08EB382D69 * (HIDWORD(v67) ^ (v71 >> 47) ^ v71);
                      v73 = (-348639895 * ((v72 >> 47) ^ v72)) & (v68 - 1);
                      v74 = *(_QWORD *)(v69 + 16 * v73);
                      if (v74 != v67)
                      {
                        v75 = 1;
                        while (v74 != -4096)
                        {
                          v76 = v73 + v75++;
                          v73 = v76 & (v68 - 1);
                          v74 = *(_QWORD *)(v69 + 16 * v73);
                          if (v74 == v67)
                            goto LABEL_99;
                        }
                        goto LABEL_98;
                      }
                    }
                    else
                    {
LABEL_98:
                    }
LABEL_99:
                    if (++v66 == v65)
                      break;
                    continue;
                  }
                }
LABEL_131:
                v91 = (mlir::Block *)((char *)v43 + 32);
                for (i = (mlir::GenericProgramPoint *)*((_QWORD *)v43 + 5);
                      i != v91;
                      i = (mlir::GenericProgramPoint *)*((_QWORD *)i + 1))
                {
                  mlir::GenericProgramPoint::~GenericProgramPoint(i);
                }
                llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v133);
                if ((_QWORD *)v152 != v154)
                  free((void *)v152);
                v42 = __srca + 1;
                v41 = (mlir::Region *)*((_QWORD *)v41 + 1);
                if (v41 == v128)
                  goto LABEL_154;
                continue;
              }
LABEL_64:
              --*(_DWORD *)(a1 + 388);
              goto LABEL_65;
            }
            v99 = 0;
            v100 = 1;
            while (v98 != (mlir::Block *)-4096)
            {
              if (v99)
                v101 = 0;
              else
                v101 = v98 == (mlir::Block *)-8192;
              if (v101)
                v99 = v47;
              v102 = v97 + v100++;
              v97 = v102 & v96;
              v47 = v95 + 32 * v97;
              v98 = *(mlir::Block **)v47;
              if (*(mlir::Block **)v47 == v43)
                goto LABEL_140;
            }
            if (v99)
              v47 = v99;
          }
          break;
        }
        v53 = *(mlir::Block **)v47;
        ++*(_DWORD *)(a1 + 384);
        if (v53 == (mlir::Block *)-4096)
          goto LABEL_65;
        goto LABEL_64;
      }
LABEL_154:
      mlir::Region::OpIterator::OpIterator(&v152, v128, 0);
      mlir::Region::OpIterator::OpIterator(&v135, v128, 1);
      v103 = (mlir::GenericProgramPoint *)v153;
      v134 = v153;
      v133 = v152;
      v131 = v152;
      v132 = (mlir::GenericProgramPoint *)v153;
      v104 = v137;
      while (v103 != v104)
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(v103);
        v106 = *(unsigned int *)(v105 + 44);
        v107 = v106 & 0x7FFFFF;
        if ((v106 & 0x7FFFFF) != 0)
        {
          v108 = ((v105 + 16 * ((v106 >> 23) & 1) + ((v106 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
               + 32 * *(unsigned int *)(v105 + 40);
          v109 = v142;
          v110 = 24 * v107;
          do
          {
            *(_QWORD *)&v152 = v108;
            *((_QWORD *)&v152 + 1) = *(_QWORD *)(a1 + 528);
            LODWORD(v153) = *(_DWORD *)(a1 + 536);
            v154[0] = v28;
            v111 = (char *)v141;
            if (v109 >= HIDWORD(v142))
            {
              v115 = v109 + 1;
              v116 = (char *)v141 + 32 * v109 > (char *)&v152;
              if (v141 <= &v152 && v116)
              {
                v117 = (char *)&v152 - (_BYTE *)v141;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, v143, v115, 32);
                v111 = (char *)v141;
                v112 = (__int128 *)((char *)v141 + v117);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, v143, v115, 32);
                v112 = &v152;
                v111 = (char *)v141;
              }
            }
            else
            {
              v112 = &v152;
            }
            v113 = &v111[32 * v142];
            v114 = v112[1];
            *(_OWORD *)v113 = *v112;
            *((_OWORD *)v113 + 1) = v114;
            v109 = v142 + 1;
            LODWORD(v142) = v142 + 1;
            v108 += 24;
            v110 -= 24;
          }
          while (v110);
        }
        mlir::Region::OpIterator::operator++((uint64_t *)&v131);
        v103 = v132;
      }
      v22 = v142;
      if (!(_DWORD)v142)
        goto LABEL_168;
    }
    while (1)
    {
      *(_QWORD *)(*v27 + 24) = v27[1];
      v29 = v27[2];
      if (v29)
        break;
      v27 = *v124;
      if (*v124 == v25)
        goto LABEL_15;
    }
    v30 = *v27;
    if (!*(_QWORD *)(v29 + 8))
    {
      *(_QWORD *)&v133 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v30, v29 + 16, &v133))
      {
        *(_OWORD *)v133 = xmmword_181236BE0;
        *(int32x2_t *)(v30 + 8) = vadd_s32(*(int32x2_t *)(v30 + 8), (int32x2_t)0x1FFFFFFFFLL);
      }
LABEL_22:
      v27[2] = *(_QWORD *)v29;
      llvm::deallocate_buffer((llvm *)v29, (void *)0x28);
    }
    *(_QWORD *)&v133 = 0;
    v31 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v30, v29 + 16, &v133);
    v32 = v133;
    if ((v31 & 1) != 0)
    {
LABEL_21:
      *(_QWORD *)(v32 + 16) = *(_QWORD *)(v29 + 8);
      goto LABEL_22;
    }
    v33 = *(_DWORD *)(v30 + 8);
    v34 = *(_DWORD *)(v30 + 16);
    if (4 * v33 + 4 >= 3 * v34)
    {
      v34 *= 2;
    }
    else if (v34 + ~v33 - *(_DWORD *)(v30 + 12) > v34 >> 3)
    {
      ++*(_DWORD *)(v30 + 8);
      if (*(_QWORD *)v32 == -1)
      {
LABEL_20:
        *(_OWORD *)v32 = *(_OWORD *)(v29 + 16);
        *(_QWORD *)(v32 + 16) = 0;
        goto LABEL_21;
      }
LABEL_29:
      --*(_DWORD *)(v30 + 12);
      goto LABEL_20;
    }
    llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::grow(v30, v34);
    *(_QWORD *)&v133 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v30, v29 + 16, &v133);
    v32 = v133;
    ++*(_DWORD *)(v30 + 8);
    if (*(_QWORD *)v32 == -1)
      goto LABEL_20;
    goto LABEL_29;
  }
LABEL_168:
  for (j = *v124; *v124; j = *v124)
    llvm::ScopedHashTableScope<llvm::StringRef,char,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::MallocAllocator>::~ScopedHashTableScope(j);
  if (v141 != v143)
    free(v141);
  if ((_DWORD)v147)
    llvm::deallocate_buffer(*(llvm **)v146, (void *)0x1000);
  if ((_DWORD)v150)
    llvm::deallocate_buffer(*(llvm **)v149, *((void **)v149 + 1));
  if (v149 != (char *)&v150 + 8)
    free(v149);
  if (v146 != v148)
    free(v146);
  *(_DWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_DWORD *)(a1 + 608) = 0;
  v119 = *v122;
  v120 = v122[1];
  *(_QWORD *)(a1 + 648) = *((_QWORD *)v122 + 4);
  *(_OWORD *)(a1 + 616) = v119;
  *(_OWORD *)(a1 + 632) = v120;
  *(_QWORD *)(a1 + 656) = a4;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 688) = a1 + 704;
  *(_QWORD *)(a1 + 696) = 0;
  return a1;
}

uint64_t mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::DialectInterfaceCollection(_QWORD *a1, mlir::MLIRContext *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  if ((v4 & 1) == 0
  {
    v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmDialectInterface]";
    v15 = 77;
    v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
    if (v15 >= v7)
      v8 = v7;
    else
      v8 = v15;
    v9 = &v14[v8];
    v10 = v15 - v8;
    if (v15 - v8 >= 0x12)
      v11 = 18;
    else
      v11 = v15 - v8;
    v12 = v10 - v11;
    if (v12 >= v12 - 1)
      v13 = v12 - 1;
    else
      v13 = v12;
    mlir::detail::TypeIDResolver<mlir::OpAsmDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
  }
  v5 = mlir::detail::TypeIDResolver<mlir::OpAsmDialectInterface,void>::resolveTypeID(void)::id;
  v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmDialectInterface]";
  v15 = 77;
  llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
  result = mlir::detail::DialectInterfaceCollectionBase::DialectInterfaceCollectionBase((uint64_t)a1, a2, v5);
  *a1 = &unk_1E0E47DF0;
  return result;
}

void mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::~DialectInterfaceCollection(mlir::detail::DialectInterfaceCollectionBase *a1)
{
  mlir::detail::DialectInterfaceCollectionBase::~DialectInterfaceCollectionBase(a1);
}

void sub_1803C1230(void *__p)
{
  operator delete(__p);
}

void `anonymous namespace'::SSANameState::numberValuesInOp(_anonymous_namespace_::SSANameState *this, mlir::Operation *a2)
{
  uint64_t InterfaceFor;
  void (**v5)(_QWORD, mlir::Operation *, _QWORD, _QWORD *);
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  mlir::Operation **v13;
  mlir::Operation *v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  mlir::Operation **v22;
  mlir::Operation *v23;
  mlir::Operation **v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t *v28;
  void *v29;
  mlir::Operation *v30;
  mlir::Operation **v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  mlir::Operation *v36;
  mlir::Operation **v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  unint64_t v41;
  _anonymous_namespace_::SSANameState *v42;
  _QWORD v43[2];
  _QWORD *v44;
  void *__base;
  size_t __nel;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  __base = &v47;
  v47 = 0;
  __nel = 0x200000001;
  v43[0] = this;
  v43[1] = &__base;
  v42 = this;
  if ((*((_BYTE *)this + 296) & 4) == 0)
  {
    if (mlir::OpInterface<mlir::OpAsmOpInterface,mlir::detail::OpAsmOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2))
    {
      InterfaceFor = mlir::OpInterface<mlir::OpAsmOpInterface,mlir::detail::OpAsmOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
      v5 = (void (**)(_QWORD, mlir::Operation *, _QWORD, _QWORD *))InterfaceFor;
      if (a2)
      {
      }
    }
  }
  if (*((_DWORD *)a2 + 9))
  {
    v41 = (unint64_t)a2 - 16;
    v44 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)this, &v41, &v44) & 1) == 0)
    {
      v6 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)this, (uint64_t)&v41, &v41, v44);
      *v6 = v41;
      *((_DWORD *)v6 + 2) = (*((_DWORD *)this + 62))++;
    }
    if ((_DWORD)__nel)
    {
      if ((_DWORD)__nel == 1)
        goto LABEL_37;
      qsort(__base, __nel, 4uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<int>);
    }
    v9 = *((_QWORD *)this + 9);
    v8 = (char *)this + 72;
    v7 = v9;
    v44 = a2;
    v10 = *((_DWORD *)v8 + 4);
    if (v10)
    {
      v11 = v10 - 1;
      v12 = v11 & ((a2 >> 4) ^ (a2 >> 9));
      v13 = (mlir::Operation **)(v7 + 32 * v12);
      v14 = *v13;
      if (*v13 == a2)
        goto LABEL_37;
      v15 = 0;
      v16 = 1;
      while (v14 != (mlir::Operation *)-4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == (mlir::Operation *)-8192;
        if (v17)
          v15 = (uint64_t *)v13;
        v18 = v12 + v16++;
        v12 = v18 & v11;
        v13 = (mlir::Operation **)(v7 + 32 * v12);
        v14 = *v13;
        if (*v13 == a2)
          goto LABEL_37;
      }
      if (v15)
        v28 = v15;
      else
        v28 = (uint64_t *)v13;
    }
    else
    {
      v28 = 0;
    }
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>,mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>::InsertIntoBucket<mlir::Operation *,llvm::SmallVector<int,2u>>((uint64_t)v8, v28, (uint64_t *)&v44, (uint64_t)&__base);
LABEL_37:
    v29 = __base;
    if (__base == &v47)
      return;
    goto LABEL_38;
  }
  if ((*((_BYTE *)this + 296) & 0x40) == 0)
    goto LABEL_37;
  v19 = *((_QWORD *)this + 6);
  v20 = *((_DWORD *)this + 16);
  if (!v20)
    goto LABEL_53;
  v21 = (v20 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v22 = (mlir::Operation **)(v19 + 16 * v21);
  v23 = *v22;
  if (*v22 == a2)
    goto LABEL_37;
  v24 = 0;
  v25 = 1;
  while (v23 != (mlir::Operation *)-4096)
  {
    if (v24)
      v26 = 0;
    else
      v26 = v23 == (mlir::Operation *)-8192;
    if (v26)
      v24 = v22;
    v27 = v21 + v25++;
    v21 = v27 & (v20 - 1);
    v22 = (mlir::Operation **)(v19 + 16 * v21);
    v23 = *v22;
    if (*v22 == a2)
      goto LABEL_37;
  }
  v31 = v24 ? v24 : v22;
  v32 = *((_DWORD *)this + 14);
  if (4 * v32 + 4 < 3 * v20)
  {
    if (v20 + ~v32 - *((_DWORD *)this + 15) > v20 >> 3)
      goto LABEL_42;
  }
  else
  {
LABEL_53:
    v20 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)this + 48, v20);
  v33 = *((_QWORD *)this + 6);
  v34 = *((_DWORD *)this + 16) - 1;
  v35 = v34 & ((a2 >> 4) ^ (a2 >> 9));
  v31 = (mlir::Operation **)(v33 + 16 * v35);
  v36 = *v31;
  if (*v31 != a2)
  {
    v37 = 0;
    v38 = 1;
    while (v36 != (mlir::Operation *)-4096)
    {
      if (v37)
        v39 = 0;
      else
        v39 = v36 == (mlir::Operation *)-8192;
      if (v39)
        v37 = v31;
      v40 = v35 + v38++;
      v35 = v40 & v34;
      v31 = (mlir::Operation **)(v33 + 16 * (v40 & v34));
      v36 = *v31;
      if (*v31 == a2)
        goto LABEL_55;
    }
    if (v37)
      v31 = v37;
LABEL_42:
    v30 = *v31;
    ++*((_DWORD *)this + 14);
    if (v30 == (mlir::Operation *)-4096)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_55:
  ++*((_DWORD *)this + 14);
  if (a2 != (mlir::Operation *)-4096)
LABEL_43:
    --*((_DWORD *)this + 15);
LABEL_44:
  *v31 = a2;
  *((_DWORD *)v31 + 2) = (*((_DWORD *)this + 62))++;
  v29 = __base;
  if (__base != &v47)
LABEL_38:
    free(v29);
}

void llvm::function_ref<void ()(mlir::Block *,llvm::StringRef)>::callback_fn<`anonymous namespace'::SSANameState::numberValuesInOp(mlir::Operation &)::$_0>(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v5;
  unsigned __int8 *v6;
  size_t v7;
  unsigned __int8 *v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  int v32;
  void *v33;
  __int128 v34;
  _BYTE v35[16];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v33 = v35;
  v34 = xmmword_181236BF0;
  v35[0] = 94;
  v6 = sanitizeIdentifier(a3, a4, (unsigned __int8 **)&v33, "$._-", 4uLL, 1);
  v8 = v6;
  v9 = v7;
  v10 = (char *)v33;
  if (v33 == v6)
  {
    v10 = (char *)v6;
    if (v7)
      goto LABEL_7;
  }
  else
  {
    v11 = v34;
    if (*((_QWORD *)&v34 + 1) < (unint64_t)v34 + v7)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v33, v35, v34 + v7, 1);
      v10 = (char *)v33;
      v11 = v34;
    }
    if (v9)
    {
      memcpy(&v10[v11], v8, v9);
      v10 = (char *)v33;
      v11 = v34;
    }
    v9 += v11;
    *(_QWORD *)&v34 = v9;
    if (v9)
    {
LABEL_7:
      v12 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(v5 + 152), v9, 0);
      memmove(v12, v10, v9);
      v13 = v5 + 96;
      v14 = *(_QWORD *)(v5 + 96);
      v15 = *(_DWORD *)(v5 + 112);
      if (v15)
        goto LABEL_8;
      goto LABEL_20;
    }
  }
  v12 = 0;
  v13 = v5 + 96;
  v14 = *(_QWORD *)(v5 + 96);
  v15 = *(_DWORD *)(v5 + 112);
  if (v15)
  {
LABEL_8:
    v16 = (v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v17 = (_QWORD *)(v14 + 32 * v16);
    v18 = *v17;
    if (*v17 == a2)
      goto LABEL_25;
    v19 = 0;
    v20 = 1;
    while (v18 != -4096)
    {
      if (v19)
        v21 = 0;
      else
        v21 = v18 == -8192;
      if (v21)
        v19 = v17;
      v22 = v16 + v20++;
      v16 = v22 & (v15 - 1);
      v17 = (_QWORD *)(v14 + 32 * v16);
      v18 = *v17;
      if (*v17 == a2)
        goto LABEL_25;
    }
    if (v19)
      v17 = v19;
    v23 = *(_DWORD *)(v5 + 104);
    if (4 * v23 + 4 >= 3 * v15)
      goto LABEL_31;
LABEL_21:
    if (v15 + ~v23 - *(_DWORD *)(v5 + 108) > v15 >> 3)
      goto LABEL_22;
    goto LABEL_32;
  }
LABEL_20:
  v17 = 0;
  v23 = *(_DWORD *)(v5 + 104);
  if (4 * v23 + 4 < 3 * v15)
    goto LABEL_21;
LABEL_31:
  v15 *= 2;
LABEL_32:
  v25 = *(_QWORD *)(v5 + 96);
  v26 = *(_DWORD *)(v5 + 112) - 1;
  v27 = v26 & ((a2 >> 4) ^ (a2 >> 9));
  v17 = (_QWORD *)(v25 + 32 * v27);
  v28 = *v17;
  if (*v17 == a2)
  {
LABEL_33:
    ++*(_DWORD *)(v5 + 104);
    if (a2 == -4096)
      goto LABEL_24;
    goto LABEL_23;
  }
  v29 = 0;
  v30 = 1;
  while (v28 != -4096)
  {
    if (v29)
      v31 = 0;
    else
      v31 = v28 == -8192;
    if (v31)
      v29 = v17;
    v32 = v27 + v30++;
    v27 = v32 & v26;
    v17 = (_QWORD *)(v25 + 32 * v27);
    v28 = *v17;
    if (*v17 == a2)
      goto LABEL_33;
  }
  if (v29)
    v17 = v29;
LABEL_22:
  v24 = *v17;
  ++*(_DWORD *)(v5 + 104);
  if (v24 != -4096)
LABEL_23:
    --*(_DWORD *)(v5 + 108);
LABEL_24:
  *v17 = a2;
  v17[1] = 0;
  v17[2] = 0;
  v17[3] = 0;
LABEL_25:
  *((_DWORD *)v17 + 2) = -1;
  v17[2] = v12;
  v17[3] = v9;
  if (v33 != v35)
    free(v33);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,`anonymous namespace'::BlockInfo,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,`anonymous namespace'::BlockInfo>>,mlir::Block *,`anonymous namespace'::BlockInfo,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,`anonymous namespace'::BlockInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      v13 = result + 4;
      v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[4 * v11];
        do
        {
          *v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v19 = *(_QWORD *)v16;
        if ((*(_QWORD *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v20 = *(_DWORD *)(a1 + 16);
          if (v20)
          {
            v21 = v20 - 1;
            v22 = (v20 - 1) & ((v19 >> 4) ^ (v19 >> 9));
            v17 = *(_QWORD *)a1 + 32 * v22;
            v23 = *(_QWORD *)v17;
            if (*(_QWORD *)v17 != v19)
            {
              v24 = 0;
              v25 = 1;
              while (v23 != -4096)
              {
                if (v24)
                  v26 = 0;
                else
                  v26 = v23 == -8192;
                if (v26)
                  v24 = v17;
                v27 = v22 + v25++;
                v22 = v27 & v21;
                v17 = *(_QWORD *)a1 + 32 * v22;
                v23 = *(_QWORD *)v17;
                if (*(_QWORD *)v17 == v19)
                  goto LABEL_15;
              }
              if (v24)
                v17 = v24;
            }
          }
          else
          {
            v17 = 0;
          }
LABEL_15:
          *(_QWORD *)v17 = v19;
          v18 = *(_OWORD *)((char *)v16 + 8);
          *(_QWORD *)(v17 + 24) = *((_QWORD *)v16 + 3);
          *(_OWORD *)(v17 + 8) = v18;
          ++*(_DWORD *)(a1 + 8);
        }
        v16 = (llvm *)((char *)v16 + 32);
      }
      while (v16 != (llvm *)((char *)v4 + 32 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v28 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v28)
  {
    if (((v28 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
      goto LABEL_38;
    v29 = ((v28 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    v10 = &result[4 * (v29 & 0xFFFFFFFFFFFFFFELL)];
    v30 = result + 4;
    v31 = v29 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v30 - 4) = -4096;
      *v30 = -4096;
      v30 += 8;
      v31 -= 2;
    }
    while (v31);
    if (v29 != (v29 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_38:
      v32 = &result[4 * v28];
      do
      {
        *v10 = -4096;
        v10 += 4;
      }
      while (v10 != v32);
    }
  }
  return result;
}

void llvm::function_ref<void ()(mlir::Value,llvm::StringRef)>::callback_fn<`anonymous namespace'::SSANameState::numberValuesInOp(mlir::Operation &)::$_1>(uint64_t *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  if (a2 && (*(_QWORD *)(a2 + 8) & 7) == 6)
  {
    v7 = *(_DWORD *)(a2 + 16);
    v8 = v7 + 6;
    if (v7 == -6)
      return;
  }
  else
  {
    v8 = v6 & 7;
    if ((v6 & 7) == 0)
      return;
  }
  v9 = a1[1];
  v10 = *(unsigned int *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(v9 + 16), v10 + 1, 4);
    LODWORD(v10) = *(_DWORD *)(v9 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v9 + 4 * v10) = v8;
  ++*(_DWORD *)(v9 + 8);
}

__n128 `anonymous namespace'::SSANameState::setValueName(uint64_t a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  char v7;
  _DWORD *v8;
  void *v9;
  char *v10;
  const void *v11;
  uint64_t v12;
  int v13;
  char v14;
  __n128 result;
  _DWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  size_t v25;
  void **p_dst;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  void **v31;
  size_t v32;
  uint64_t v33;
  size_t v34;
  char *v35;
  char *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *buffer;
  uint64_t *v47;
  char v48;
  _QWORD *v49;
  unint64_t v50;
  __n128 v51;
  unint64_t v52;
  void *__dst;
  size_t v54;
  int64_t v55;
  void *__src[2];
  void *v57;
  __int128 v58;
  _BYTE v59[64];
  void *v60;
  __int128 v61;
  _BYTE v62[16];
  _QWORD v63[2];
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v52 = a2;
  if (a4)
  {
    v57 = 0;
    v7 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, &v52, &v57);
    v8 = v57;
    if ((v7 & 1) == 0)
    {
      v8 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)&v52, &v52, v57);
      *(_QWORD *)v8 = v52;
      v8[2] = 0;
    }
    v8[2] = -1;
    v60 = v62;
    v61 = xmmword_181236BC0;
    __src[0] = sanitizeIdentifier(a3, a4, (unsigned __int8 **)&v60, "$._-", 4uLL, 1);
    __src[1] = v9;
    v57 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 120), (uint64_t)__src, &v57) & 1) != 0)
    {
      v11 = __src[0];
      v10 = (char *)__src[1];
      v57 = v59;
      v58 = xmmword_181236C00;
      if (__src[1] < (void *)0x41)
      {
        v12 = 0;
        if (!__src[1])
        {
LABEL_16:
          v20 = &v10[v12];
          *(_QWORD *)&v58 = v20;
          if ((unint64_t)(v20 + 1) > *((_QWORD *)&v58 + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v57, v59, (unint64_t)(v20 + 1), 1);
            v20 = (char *)v58;
          }
          v20[(_QWORD)v57] = 95;
          *(_QWORD *)&v58 = v58 + 1;
          while (1)
          {
            v21 = *(unsigned int *)(a1 + 256);
            *(_DWORD *)(a1 + 256) = v21 + 1;
            if ((_DWORD)v21)
            {
              v22 = 20;
              do
              {
                *((_BYTE *)v63 + v22--) = (v21 % 0xA) | 0x30;
                v23 = v21 > 9;
                v21 /= 0xAuLL;
              }
              while (v23);
              v24 = v22 + 1;
              v25 = 20 - v22;
              if ((unint64_t)(20 - v22) >= 0x7FFFFFFFFFFFFFF8)
                abort();
            }
            else
            {
              v64 = 48;
              v24 = 20;
              v25 = 1;
            }
            if (v25 > 0x16)
            {
              v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v25 | 7) != 0x17)
                v27 = v25 | 7;
              v28 = v27 + 1;
              p_dst = (void **)operator new(v27 + 1);
              v54 = v25;
              v55 = v28 | 0x8000000000000000;
              __dst = p_dst;
              if (v24 != 21)
              {
LABEL_32:
                memcpy(p_dst, (char *)v63 + v24, v25);
                p_dst = (void **)((char *)p_dst + v25);
              }
            }
            else
            {
              HIBYTE(v55) = v25;
              p_dst = &__dst;
              if (v24 != 21)
                goto LABEL_32;
            }
            *(_BYTE *)p_dst = 0;
            v29 = SHIBYTE(v55);
            v30 = __dst;
            if (v55 >= 0)
              v31 = &__dst;
            else
              v31 = (void **)__dst;
            if (v55 >= 0)
              v32 = HIBYTE(v55);
            else
              v32 = v54;
            v33 = v58;
            if (*((_QWORD *)&v58 + 1) < (unint64_t)v58 + v32)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v57, v59, v58 + v32, 1);
              v33 = v58;
            }
            if (v32)
            {
              memcpy((char *)v57 + v33, v31, v32);
              v33 = v58;
            }
            v34 = v33 + v32;
            *(_QWORD *)&v58 = v34;
            if (v29 < 0)
            {
              operator delete(v30);
              v34 = v58;
            }
            __dst = v57;
            v54 = v34;
            v63[0] = 0;
            if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 120), (uint64_t)&__dst, v63) & 1) == 0)
            {
              v37 = (void *)v58;
              if ((_QWORD)v58)
              {
                v38 = v57;
                v39 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(a1 + 152), v58, 0);
                memmove(v39, v38, (size_t)v37);
                __src[0] = v39;
                __src[1] = v37;
                v40 = v57;
                if (v57 == v59)
                {
LABEL_60:
                  v41 = *(_QWORD *)(a1 + 144);
                  v57 = 0;
                  v42 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 120), (uint64_t)__src, &v57);
                  v43 = v57;
                  if (v42)
                  {
                    v44 = *((_QWORD *)v57 + 2);
                  }
                  else
                  {
                    v43 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>,llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::InsertIntoBucketImpl<llvm::StringRef>(a1 + 120, (uint64_t)__src, (uint64_t)__src, v57);
                    v44 = 0;
                    *(_OWORD *)v43 = *(_OWORD *)__src;
                    v43[2] = 0;
                  }
                  v45 = *(_QWORD *)(v41 + 16);
                  buffer = llvm::allocate_buffer(0x28uLL, (std::align_val_t)8uLL);
                  v51 = *(__n128 *)__src;
                  buffer[1] = *(_OWORD *)__src;
                  *((_BYTE *)buffer + 32) = 0;
                  *(_QWORD *)buffer = v45;
                  *((_QWORD *)buffer + 1) = v44;
                  v43[2] = buffer;
                  *(_QWORD *)(v41 + 16) = buffer;
                  if (v60 != v62)
                    free(v60);
                  v47 = (uint64_t *)(a1 + 24);
                  v57 = 0;
                  v48 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>(v47, &v52, &v57);
                  v49 = v57;
                  if ((v48 & 1) == 0)
                  {
                    v49 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v47, (uint64_t)&v52, &v52, v57);
                    v50 = v52;
                    v49[1] = 0;
                    v49[2] = 0;
                    *v49 = v50;
                  }
                  result = v51;
                  *(__n128 *)(v49 + 1) = v51;
                  return result;
                }
              }
              else
              {
                __src[0] = 0;
                __src[1] = 0;
                v40 = v57;
                if (v57 == v59)
                  goto LABEL_60;
              }
              free(v40);
              goto LABEL_60;
            }
            v35 = (char *)__src[1] + 1;
            v36 = (char *)v58;
            if ((void *)v58 != (char *)__src[1] + 1)
            {
              if ((void *)v58 <= (char *)__src[1] + 1)
              {
                if (*((_QWORD *)&v58 + 1) < (unint64_t)v35)
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v57, v59, (unint64_t)__src[1] + 1, 1);
                  v36 = (char *)v58;
                }
                if (v35 != v36)
                  bzero(&v36[(_QWORD)v57], v35 - v36);
              }
              *(_QWORD *)&v58 = v35;
            }
          }
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v57, v59, (unint64_t)__src[1], 1);
        v12 = v58;
        if (!v10)
          goto LABEL_16;
      }
      memcpy((char *)v57 + v12, v11, (size_t)v10);
      v12 = v58;
      goto LABEL_16;
    }
    if (__src[1])
    {
      v17 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(a1 + 152), (uint64_t)__src[1], 0);
      v18 = v17;
      if (__src[1])
      {
        memmove(v17, __src[0], (size_t)__src[1]);
        v19 = __src[1];
LABEL_57:
        __src[0] = v18;
        __src[1] = v19;
        goto LABEL_60;
      }
    }
    else
    {
      v18 = 0;
    }
    v19 = 0;
    goto LABEL_57;
  }
  v13 = *(_DWORD *)(a1 + 248);
  *(_DWORD *)(a1 + 248) = v13 + 1;
  v57 = 0;
  v14 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, &v52, &v57);
  v16 = v57;
  if ((v14 & 1) == 0)
  {
    v16 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)&v52, &v52, v57);
    *(_QWORD *)v16 = v52;
    v16[2] = 0;
  }
  v16[2] = v13;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>,llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -1)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unsigned int v10;
  unint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  _OWORD *v27;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = xmmword_181234BE0;
        *(_OWORD *)((char *)v18 + 24) = xmmword_181234BE0;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = 24 * v3;
          v21 = (uint64_t)v4;
          do
          {
            if (*(_QWORD *)v21 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v27 = 0;
              llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, v21, &v27);
              v22 = v27;
              *v27 = *(_OWORD *)v21;
              *((_QWORD *)v22 + 2) = *(_QWORD *)(v21 + 16);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 += 24;
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      *v12 = xmmword_181234BE0;
      v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_25:
      v26 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *v15 = xmmword_181234BE0;
        v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v26);
      return result;
    }
    v23 = v14 / 0x18 + 1;
    v15 = (_OWORD *)((char *)result + 24 * (v23 & 0x1FFFFFFFFFFFFFFELL));
    v24 = v23 & 0x1FFFFFFFFFFFFFFELL;
    v25 = result;
    do
    {
      *v25 = xmmword_181234BE0;
      *(_OWORD *)((char *)v25 + 24) = xmmword_181234BE0;
      v25 += 3;
      v24 -= 2;
    }
    while (v24);
    if (v23 != (v23 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_25;
  }
  return result;
}

uint64_t llvm::array_pod_sort_comparator<int>(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>,mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>::InsertIntoBucket<mlir::Operation *,llvm::SmallVector<int,2u>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *buffer;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  BOOL v30;
  int v31;

  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 16);
  if (4 * v7 + 4 >= (3 * v8))
  {
    v12 = 2 * v8;
  }
  else
  {
    if ((int)v8 + ~v7 - *(_DWORD *)(a1 + 12) > v8 >> 3)
    {
LABEL_3:
      v10 = *a2;
      goto LABEL_4;
    }
    v12 = *(_DWORD *)(a1 + 16);
  }
  v13 = *(uint64_t **)a1;
  v14 = (v12 - 1) | ((unint64_t)(v12 - 1) >> 1);
  v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
  v16 = ((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8);
  if ((v16 + 1) > 0x40)
    v17 = v16 + 1;
  else
    v17 = 64;
  *(_DWORD *)(a1 + 16) = v17;
  buffer = llvm::allocate_buffer(32 * v17, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v13)
  {
    v19 = (char *)(32 * v8);
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>,mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>::moveFromOldBuckets(a1, v13, (uint64_t *)&v19[(_QWORD)v13]);
    llvm::deallocate_buffer((llvm *)v13, v19);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  v21 = buffer;
  if (((v20 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
    goto LABEL_36;
  v22 = ((v20 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
  v21 = &buffer[4 * (v22 & 0xFFFFFFFFFFFFFFELL)];
  v23 = buffer + 4;
  v24 = v22 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    *(v23 - 4) = -4096;
    *v23 = -4096;
    v23 += 8;
    v24 -= 2;
  }
  while (v24);
  if (v22 != (v22 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_36:
    do
    {
      *v21 = -4096;
      v21 += 4;
    }
    while (v21 != &buffer[4 * v20]);
  }
  v10 = *a3;
  v25 = v20 - 1;
  v26 = ((*a3 >> 4) ^ (*a3 >> 9)) & v25;
  a2 = &buffer[4 * v26];
  v27 = *a2;
  if (*a3 != *a2)
  {
    v28 = 0;
    v29 = 1;
    while (v27 != -4096)
    {
      if (v28)
        v30 = 0;
      else
        v30 = v27 == -8192;
      if (v30)
        v28 = a2;
      v31 = v26 + v29++;
      v26 = v31 & v25;
      a2 = &buffer[4 * v26];
      v27 = *a2;
      if (v10 == *a2)
        goto LABEL_4;
    }
    if (v28)
      a2 = v28;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = (uint64_t)(a2 + 3);
  a2[2] = 0x100000000;
  if (*(_DWORD *)(a4 + 8))
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)(a2 + 1), a4);
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>,mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  int v24;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = (v6 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (v8)
    {
      v9 = v8 + 1;
      v10 = (v8 + 1) & 0xFFFFFFFFFFFFFFELL;
      v11 = &v7[4 * v10];
      v12 = v7 + 4;
      v13 = v10;
      do
      {
        *(v12 - 4) = -4096;
        *v12 = -4096;
        v12 += 8;
        v13 -= 2;
      }
      while (v13);
      if (v9 == v10)
        goto LABEL_10;
    }
    else
    {
      v11 = *(_QWORD **)a1;
    }
    v14 = &v7[4 * v6];
    do
    {
      *v11 = -4096;
      v11 += 4;
    }
    while (v11 != v14);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      v15 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v16 = *(_DWORD *)(a1 + 16) - 1;
        v17 = v16 & ((v15 >> 4) ^ (v15 >> 9));
        v18 = (_QWORD *)(*(_QWORD *)a1 + 32 * v17);
        v19 = *v18;
        if (v15 != *v18)
        {
          v21 = 0;
          v22 = 1;
          while (v19 != -4096)
          {
            if (v21)
              v23 = 0;
            else
              v23 = v19 == -8192;
            if (v23)
              v21 = v18;
            v24 = v17 + v22++;
            v17 = v24 & v16;
            v18 = (_QWORD *)(*(_QWORD *)a1 + 32 * v17);
            v19 = *v18;
            if (v15 == *v18)
              goto LABEL_15;
          }
          if (v21)
            v18 = v21;
        }
LABEL_15:
        *v18 = v15;
        v18[1] = v18 + 3;
        v18[2] = 0x100000000;
        if (*((_DWORD *)v4 + 4))
          llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)(v18 + 1), (uint64_t)(v4 + 1));
        ++*(_DWORD *)(a1 + 8);
        v20 = (uint64_t *)v4[1];
        if (v20 != v4 + 3)
          free(v20);
      }
      v4 += 4;
    }
    while (v4 != a3);
  }
}

uint64_t *llvm::ScopedHashTableScope<llvm::StringRef,char,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::MallocAllocator>::~ScopedHashTableScope(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;

  v1 = result;
  *(_QWORD *)(*result + 24) = result[1];
  v2 = result[2];
  if (v2)
  {
    v3 = *result;
    if (*(_QWORD *)(v2 + 8))
    {
      v6 = 0;
      v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v3, v2 + 16, &v6);
      v5 = v6;
      if ((v4 & 1) == 0)
      {
        v5 = (unint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>,llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::InsertIntoBucketImpl<llvm::StringRef>(v3, v2 + 16, v2 + 16, (_QWORD *)v6);
        *(_OWORD *)v5 = *(_OWORD *)(v2 + 16);
        *(_QWORD *)(v5 + 16) = 0;
      }
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(v2 + 8);
    }
    else
    {
      v6 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v3, v2 + 16, &v6))
      {
        *(_OWORD *)v6 = xmmword_181236BE0;
        *(int32x2_t *)(v3 + 8) = vadd_s32(*(int32x2_t *)(v3 + 8), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    v1[2] = *(_QWORD *)v2;
    llvm::deallocate_buffer((llvm *)v2, (void *)0x28);
  }
  return result;
}

double llvm::function_ref<void ()(mlir::Value,llvm::StringRef)>::callback_fn<`anonymous namespace'::SSANameState::numberValuesInRegion(mlir::Region &)::$_0>(uint64_t *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  double result;

  return result;
}

void mlir::detail::AsmStateImpl::~AsmStateImpl(mlir::detail::AsmStateImpl *this)
{
  char *v2;

  v2 = (char *)*((_QWORD *)this + 86);
  if (v2 != (char *)this + 704)
    free(v2);
  llvm::deallocate_buffer(*((llvm **)this + 83), (void *)(8 * *((unsigned int *)this + 170)));
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>,mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>::InsertIntoBucket<mlir::Dialect *>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  BOOL v28;
  unsigned int v29;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(48 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = 6 * v6;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>,mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>::moveFromOldBuckets(a1, v10, &v10[v16]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(v16 * 8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = 48 * v17 - 48;
  v19 = buffer;
  if (v18 < 0x30)
    goto LABEL_34;
  v20 = v18 / 0x30 + 1;
  v19 = &buffer[6 * (v20 & 0xFFFFFFFFFFFFFFELL)];
  v21 = v20 & 0xFFFFFFFFFFFFFFELL;
  v22 = buffer;
  do
  {
    *v22 = -4096;
    v22[6] = -4096;
    v22 += 12;
    v21 -= 2;
  }
  while (v21);
  if (v20 != (v20 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v19 = -4096;
      v19 += 6;
    }
    while (v19 != &buffer[6 * v17]);
  }
  v7 = *a3;
  v23 = v17 - 1;
  v24 = ((*a3 >> 4) ^ (*a3 >> 9)) & v23;
  a2 = &buffer[6 * v24];
  v25 = *a2;
  if (*a3 != *a2)
  {
    v26 = 0;
    v27 = 1;
    while (v25 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -8192;
      if (v28)
        v26 = a2;
      v29 = v24 + v27++;
      v24 = v29 & v23;
      a2 = &buffer[6 * v24];
      v25 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v26)
      a2 = v26;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = (uint64_t)(a2 + 6);
  a2[5] = 0;
  return a2;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>,mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;

  v3 = a2;
  v4 = result;
  *(_QWORD *)(result + 8) = 0;
  v5 = *(_DWORD *)(result + 16);
  if (v5)
  {
    v6 = *(_QWORD **)result;
    v7 = 48 * v5 - 48;
    if (v7 < 0x30)
    {
      v8 = *(_QWORD **)result;
LABEL_7:
      v12 = &v6[6 * v5];
      do
      {
        *v8 = -4096;
        v8 += 6;
      }
      while (v8 != v12);
      goto LABEL_9;
    }
    v9 = v7 / 0x30 + 1;
    v8 = &v6[6 * (v9 & 0xFFFFFFFFFFFFFFELL)];
    v10 = v9 & 0xFFFFFFFFFFFFFFELL;
    v11 = *(_QWORD **)result;
    do
    {
      *v11 = -4096;
      v11[6] = -4096;
      v11 += 12;
      v10 -= 2;
    }
    while (v10);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      v13 = *v3;
      if ((*v3 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v14 = *(_DWORD *)(result + 16) - 1;
        v15 = v14 & ((v13 >> 4) ^ (v13 >> 9));
        v16 = *(_QWORD *)result + 48 * v15;
        v17 = *(_QWORD *)v16;
        if (v13 != *(_QWORD *)v16)
        {
          v21 = 0;
          v22 = 1;
          while (v17 != -4096)
          {
            if (v21)
              v23 = 0;
            else
              v23 = v17 == -8192;
            if (v23)
              v21 = v16;
            v24 = v15 + v22++;
            v15 = v24 & v14;
            v16 = *(_QWORD *)result + 48 * (v24 & v14);
            v17 = *(_QWORD *)v16;
            if (v13 == *(_QWORD *)v16)
              goto LABEL_15;
          }
          if (v21)
            v16 = v21;
        }
LABEL_15:
        *(_QWORD *)(v16 + 8) = 0;
        *(_QWORD *)(v16 + 16) = 0;
        *(_QWORD *)v16 = v13;
        *(_DWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 8) = v3[1];
        v3[1] = 0;
        *(_DWORD *)(v16 + 16) = *((_DWORD *)v3 + 4);
        *(_QWORD *)(v16 + 32) = v16 + 48;
        *((_DWORD *)v3 + 4) = 0;
        v18 = *(_DWORD *)(v16 + 20);
        *(_DWORD *)(v16 + 20) = *((_DWORD *)v3 + 5);
        *((_DWORD *)v3 + 5) = v18;
        v19 = *(_DWORD *)(v16 + 24);
        *(_DWORD *)(v16 + 24) = *((_DWORD *)v3 + 6);
        *((_DWORD *)v3 + 6) = v19;
        *(_QWORD *)(v16 + 40) = 0;
        if (*((_DWORD *)v3 + 10))
          llvm::SmallVectorImpl<mlir::AsmDialectResourceHandle>::operator=(v16 + 32, (uint64_t)(v3 + 4));
        ++*(_DWORD *)(v4 + 8);
        v20 = (uint64_t *)v3[4];
        if (v20 != v3 + 6)
          free(v20);
        llvm::deallocate_buffer((llvm *)v3[1], (void *)(24 * *((unsigned int *)v3 + 6)));
      }
      v3 += 6;
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<mlir::AsmDialectResourceHandle>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_16;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 24 * v8);
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 24 * v9);
        v10 = *v7;
        if (v9 == v10)
        {
LABEL_15:
          *(_DWORD *)(a1 + 8) = v8;
LABEL_16:
          *v7 = 0;
          return a1;
        }
      }
      else
      {
        v9 = 0;
        LODWORD(v10) = *v7;
        if (!*v7)
          goto LABEL_15;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 24);
      v9 = 0;
      LODWORD(v10) = *v7;
      if (!*v7)
        goto LABEL_15;
    }
    memcpy((void *)(*(_QWORD *)a1 + 24 * v9), (const void *)(*(_QWORD *)a2 + 24 * v9), *(_QWORD *)a2 + 24 * v10 - (*(_QWORD *)a2 + 24 * v9));
    goto LABEL_15;
  }
  return a1;
}

llvm::raw_ostream *llvm::interleaveComma<llvm::ArrayRef<mlir::Attribute>,mlir::AsmPrinter::Impl::printAttributeImpl(mlir::Attribute,mlir::AsmPrinter::Impl::AttrTypeElision)::$_1,llvm::raw_ostream,mlir::Attribute const>(llvm::raw_ostream *result, llvm::raw_ostream *a2, llvm::raw_ostream **a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)result + 1);
  if (!v3)
    return result;
  v6 = *(uint64_t **)result;
  v7 = **(_QWORD **)result;
  if (!v7)
  {
    result = *a3;
    v8 = *((_QWORD *)*a3 + 4);
    if ((unint64_t)(*((_QWORD *)*a3 + 3) - v8) > 0x11)
    {
      *(_WORD *)(v8 + 16) = 15934;
      *(_OWORD *)v8 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
      *((_QWORD *)result + 4) += 18;
      if (v3 == 1)
        return result;
LABEL_11:
      v9 = v6 + 1;
      v10 = 8 * v3 - 8;
      while (1)
      {
        v11 = (_WORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v11 > 1uLL)
        {
          *v11 = 8236;
          *((_QWORD *)a2 + 4) += 2;
          v12 = *v9;
          if (!*v9)
          {
LABEL_19:
            result = *a3;
            v13 = *((_QWORD *)*a3 + 4);
            if ((unint64_t)(*((_QWORD *)*a3 + 3) - v13) > 0x11)
            {
              *(_WORD *)(v13 + 16) = 15934;
              *(_OWORD *)v13 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
              *((_QWORD *)result + 4) += 18;
            }
            else
            {
              result = llvm::raw_ostream::write(result, "<<NULL ATTRIBUTE>>", 0x12uLL);
            }
            goto LABEL_13;
          }
        }
        else
        {
          llvm::raw_ostream::write(a2, ", ", 2uLL);
          v12 = *v9;
          if (!*v9)
            goto LABEL_19;
        }
        if (!(_BYTE)result)
          result = (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printAttributeImpl(a3, v12, 1);
LABEL_13:
        ++v9;
        v10 -= 8;
        if (!v10)
          return result;
      }
    }
    result = llvm::raw_ostream::write(result, "<<NULL ATTRIBUTE>>", 0x12uLL);
LABEL_8:
    if (v3 == 1)
      return result;
    goto LABEL_11;
  }
  if ((_BYTE)result)
    goto LABEL_8;
  result = (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printAttributeImpl(a3, v7, 1);
  if (v3 != 1)
    goto LABEL_11;
  return result;
}

void llvm::function_ref<void ()(unsigned int)>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_0>(_QWORD *a1, unsigned int a2)
{
  llvm::raw_ostream **v3;
  __int128 v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  void *__p[2];
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;

  v3 = (llvm::raw_ostream **)a1[1];
  v4 = *(_OWORD *)(*a1 + 16);
  *(_OWORD *)__p = *(_OWORD *)*a1;
  v13 = *((_QWORD *)&v4 + 1);
  v12 = v4 + a2;
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)__p, &v14);
  v5 = *v3;
  v6 = (_BYTE *)*((_QWORD *)*v3 + 4);
  if (*((_BYTE **)*v3 + 3) == v6)
  {
    llvm::raw_ostream::write(v5, "(", 1uLL);
    LODWORD(__p[1]) = v15;
    if (v15 <= 0x40)
      goto LABEL_3;
LABEL_5:
    llvm::APInt::initSlowCase((llvm::APInt *)__p, (const void **)&v14);
    goto LABEL_6;
  }
  *v6 = 40;
  ++*((_QWORD *)v5 + 4);
  LODWORD(__p[1]) = v15;
  if (v15 > 0x40)
    goto LABEL_5;
LABEL_3:
  __p[0] = v14;
LABEL_6:
  printDenseIntElement((llvm::APInt *)__p, *v3, *(_QWORD *)a1[2]);
  if (LODWORD(__p[1]) >= 0x41 && __p[0])
    operator delete[](__p[0]);
  v7 = *v3;
  v8 = (_BYTE *)*((_QWORD *)*v3 + 4);
  if (*((_BYTE **)*v3 + 3) == v8)
  {
    llvm::raw_ostream::write(v7, ",", 1uLL);
    LODWORD(__p[1]) = v17;
    if (v17 <= 0x40)
      goto LABEL_11;
LABEL_13:
    llvm::APInt::initSlowCase((llvm::APInt *)__p, (const void **)&v16);
    goto LABEL_14;
  }
  *v8 = 44;
  ++*((_QWORD *)v7 + 4);
  LODWORD(__p[1]) = v17;
  if (v17 > 0x40)
    goto LABEL_13;
LABEL_11:
  __p[0] = v16;
LABEL_14:
  printDenseIntElement((llvm::APInt *)__p, *v3, *(_QWORD *)a1[2]);
  if (LODWORD(__p[1]) >= 0x41 && __p[0])
    operator delete[](__p[0]);
  v9 = *v3;
  v10 = (_BYTE *)*((_QWORD *)*v3 + 4);
  if (*((_BYTE **)*v3 + 3) == v10)
  {
    llvm::raw_ostream::write(v9, ")", 1uLL);
    if (v17 < 0x41)
      goto LABEL_23;
  }
  else
  {
    *v10 = 41;
    ++*((_QWORD *)v9 + 4);
    if (v17 < 0x41)
      goto LABEL_23;
  }
  if (v16)
    operator delete[](v16);
LABEL_23:
  if (v15 >= 0x41)
  {
    if (v14)
      operator delete[](v14);
  }
}

void printDenseIntElement(llvm::APInt *a1, llvm::raw_ostream *a2, uint64_t a3)
{
  unsigned int v5;
  BOOL v6;
  BOOL isUnsignedInteger;
  int v8;
  const char *v9;
  size_t v10;
  void *v11;
  uint64_t v12;

  v12 = a3;
  if (mlir::Type::isInteger((mlir::Type *)&v12, 1))
  {
    v5 = *((_DWORD *)a1 + 2);
    if (v5 > 0x40)
      v6 = llvm::APInt::countLeadingZerosSlowCase(a1) == v5;
    else
      v6 = *(_QWORD *)a1 == 0;
    v8 = v6;
    if (v8)
      v9 = "false";
    else
      v9 = "true";
    if (v8)
      v10 = 5;
    else
      v10 = 4;
    v11 = (void *)*((_QWORD *)a2 + 4);
    if (v10 <= *((_QWORD *)a2 + 3) - (_QWORD)v11)
    {
      memcpy(v11, v9, v10);
      *((_QWORD *)a2 + 4) += v10;
    }
    else
    {
      llvm::raw_ostream::write(a2, v9, v10);
    }
  }
  else
  {
    isUnsignedInteger = mlir::Type::isUnsignedInteger((mlir::Type *)&v12);
    llvm::APInt::print(a1, a2, !isUnsignedInteger);
  }
}

void llvm::function_ref<void ()(unsigned int)>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_1>(__int128 **a1, unsigned int a2)
{
  llvm::raw_ostream **v2;
  uint64_t v3;
  __int128 v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  void *v7;
  void *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  void *v13;
  unsigned int v14;
  void *__p;
  unsigned int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[8];
  _QWORD v22[4];
  _QWORD v23[4];

  v23[3] = *MEMORY[0x1E0C80C00];
  v2 = (llvm::raw_ostream **)a1[1];
  v3 = *((_QWORD *)*a1 + 4);
  v4 = (*a1)[1];
  v17 = **a1;
  v19 = *((_QWORD *)&v4 + 1);
  v20 = v3;
  v18 = v4 + a2;
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v17, &v13);
  mlir::DenseElementsAttr::ComplexFloatElementIterator::mapElement((llvm::APInt *)&v13, (llvm::APFloatBase *)&v17, (uint64_t)v21);
  if (v16 >= 0x41 && __p)
    operator delete[](__p);
  if (v14 >= 0x41 && v13)
    operator delete[](v13);
  v5 = *v2;
  v6 = (_BYTE *)*((_QWORD *)*v2 + 4);
  if (*((_BYTE **)*v2 + 3) == v6)
  {
    v5 = llvm::raw_ostream::write(v5, "(", 1uLL);
  }
  else
  {
    *v6 = 40;
    ++*((_QWORD *)v5 + 4);
  }
  v7 = (void *)v22[0];
  v8 = llvm::APFloatBase::PPCDoubleDouble(v5);
  if (v8 == v7)
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v17 + 8), (const llvm::detail::DoubleAPFloat *)v22);
  else
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v17 + 8), (const llvm::detail::IEEEFloat *)v22);
  printFloatValue((const llvm::APFloat *)&v17, *v2);
  if (v8 == *((void **)&v17 + 1))
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v17 + 8));
    v9 = *v2;
    v10 = (_BYTE *)*((_QWORD *)*v2 + 4);
    if (*((_BYTE **)*v2 + 3) != v10)
      goto LABEL_15;
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v17 + 8));
    v9 = *v2;
    v10 = (_BYTE *)*((_QWORD *)*v2 + 4);
    if (*((_BYTE **)*v2 + 3) != v10)
    {
LABEL_15:
      *v10 = 44;
      ++*((_QWORD *)v9 + 4);
      goto LABEL_18;
    }
  }
  llvm::raw_ostream::write(v9, ",", 1uLL);
LABEL_18:
  if (v8 == (void *)v23[0])
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v17 + 8), (const llvm::detail::DoubleAPFloat *)v23);
  else
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v17 + 8), (const llvm::detail::IEEEFloat *)v23);
  printFloatValue((const llvm::APFloat *)&v17, *v2);
  if (v8 == *((void **)&v17 + 1))
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v17 + 8));
    v11 = *v2;
    v12 = (_BYTE *)*((_QWORD *)*v2 + 4);
    if (*((_BYTE **)*v2 + 3) != v12)
    {
LABEL_23:
      *v12 = 41;
      ++*((_QWORD *)v11 + 4);
      if (v8 != (void *)v23[0])
        goto LABEL_24;
LABEL_29:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v23);
      if (v8 != (void *)v22[0])
        goto LABEL_25;
LABEL_30:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v22);
      return;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v17 + 8));
    v11 = *v2;
    v12 = (_BYTE *)*((_QWORD *)*v2 + 4);
    if (*((_BYTE **)*v2 + 3) != v12)
      goto LABEL_23;
  }
  llvm::raw_ostream::write(v11, ")", 1uLL);
  if (v8 == (void *)v23[0])
    goto LABEL_29;
LABEL_24:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v23);
  if (v8 == (void *)v22[0])
    goto LABEL_30;
LABEL_25:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v22);
}

void mlir::DenseElementsAttr::ComplexFloatElementIterator::mapElement(llvm::APInt *a1@<X1>, llvm::APFloatBase *inited@<X0>, uint64_t a3@<X8>)
{
  llvm::APFloatBase *v4;
  void *v6;
  void *v7;
  void *v8;
  void **v9;
  llvm::detail::IEEEFloat *v10;
  llvm::detail::IEEEFloat *v11;
  void *__p;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  _QWORD v16[3];
  _QWORD v17[4];

  v4 = inited;
  v17[3] = *MEMORY[0x1E0C80C00];
  v6 = (void *)*((_QWORD *)inited + 4);
  v15 = *((_DWORD *)a1 + 2);
  if (v15 > 0x40)
    inited = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&v14, (const void **)a1);
  else
    v14 = *(void **)a1;
  v7 = llvm::APFloatBase::PPCDoubleDouble(inited);
  if (v7 == v6)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v17, (uint64_t)v6, (uint64_t)&v14);
    v8 = (void *)*((_QWORD *)v4 + 4);
    v9 = (void **)((char *)a1 + 16);
    v13 = *((_DWORD *)a1 + 6);
    if (v13 <= 0x40)
    {
LABEL_6:
      __p = *v9;
      if (v7 != v8)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v17, v6, (const llvm::APInt **)&v14);
    v8 = (void *)*((_QWORD *)v4 + 4);
    v9 = (void **)((char *)a1 + 16);
    v13 = *((_DWORD *)a1 + 6);
    if (v13 <= 0x40)
      goto LABEL_6;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v9);
  if (v7 != v8)
  {
LABEL_7:
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v16, v8, (const llvm::APInt **)&__p);
    v10 = (llvm::detail::IEEEFloat *)(a3 + 8);
    if (v7 != (void *)v17[0])
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v16, (uint64_t)v7, (uint64_t)&__p);
  v10 = (llvm::detail::IEEEFloat *)(a3 + 8);
  if (v7 != (void *)v17[0])
  {
LABEL_8:
    llvm::detail::IEEEFloat::IEEEFloat(v10, (const llvm::detail::IEEEFloat *)v17);
    v11 = (llvm::detail::IEEEFloat *)(a3 + 40);
    if (v7 != (void *)v16[0])
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_15:
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, (const llvm::detail::DoubleAPFloat *)v17);
  v11 = (llvm::detail::IEEEFloat *)(a3 + 40);
  if (v7 != (void *)v16[0])
  {
LABEL_9:
    llvm::detail::IEEEFloat::IEEEFloat(v11, (const llvm::detail::IEEEFloat *)v16);
    if (v7 != (void *)v16[0])
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, (const llvm::detail::DoubleAPFloat *)v16);
  if (v7 != (void *)v16[0])
  {
LABEL_10:
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v16);
    if (v13 < 0x41)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_17:
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v16);
  if (v13 < 0x41)
    goto LABEL_20;
LABEL_18:
  if (__p)
    operator delete[](__p);
LABEL_20:
  if (v7 == (void *)v17[0])
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v17);
    if (v15 < 0x41)
      return;
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v17);
    if (v15 < 0x41)
      return;
  }
  if (v14)
    operator delete[](v14);
}

void llvm::function_ref<void ()(unsigned int)>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_2>(__int128 **a1, unsigned int a2)
{
  llvm::raw_ostream **v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  unsigned int v9;

  v3 = (llvm::raw_ostream **)a1[1];
  v4 = (*a1)[1];
  v5 = **a1;
  v7 = *((_QWORD *)&v4 + 1);
  v6 = v4 + a2;
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v5, (llvm::APInt *)&__p);
  printDenseIntElement((llvm::APInt *)&__p, *v3, *(_QWORD *)a1[2]);
  if (v9 >= 0x41)
  {
    if (__p)
      operator delete[](__p);
  }
}

void llvm::function_ref<void ()(unsigned int)>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_3>(__int128 **a1, unsigned int a2)
{
  llvm::raw_ostream **v2;
  void *v3;
  __int128 v4;
  void *v5;
  llvm::APFloatBase *v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *__p;
  unsigned int v13;
  char v14[8];
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  v2 = (llvm::raw_ostream **)a1[1];
  v3 = (void *)*((_QWORD *)*a1 + 4);
  v4 = (*a1)[1];
  v8 = **a1;
  v10 = *((_QWORD *)&v4 + 1);
  v11 = v3;
  v9 = v4 + a2;
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v8, (llvm::APInt *)&__p);
  v5 = v11;
  v7 = llvm::APFloatBase::PPCDoubleDouble(v6);
  if (v7 == v5)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v15, (uint64_t)v5, (uint64_t)&__p);
    if (v13 < 0x41)
      goto LABEL_7;
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v15, v5, (const llvm::APInt **)&__p);
    if (v13 < 0x41)
      goto LABEL_7;
  }
  if (__p)
    operator delete[](__p);
LABEL_7:
  printFloatValue((const llvm::APFloat *)v14, *v2);
  if (v7 == (void *)v15[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v15);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v15);
}

llvm::raw_ostream *llvm::function_ref<void ()(unsigned int)>::callback_fn<mlir::AsmPrinter::Impl::printDenseStringElementsAttr(mlir::DenseStringElementsAttr)::$_0>(llvm::raw_ostream ***a1, unsigned int a2)
{
  llvm::raw_ostream **v2;
  uint64_t v3;
  llvm::raw_ostream *v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *result;
  _BYTE *v9;

  v2 = *a1;
  v3 = (uint64_t)*a1[1] + 16 * a2;
  v4 = *(llvm::raw_ostream **)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = **a1;
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "\"", 1uLL);
  }
  else
  {
    *v7 = 34;
    ++*((_QWORD *)v6 + 4);
  }
  llvm::printEscapedString(v4, v5, *v2);
  result = *v2;
  v9 = (_BYTE *)*((_QWORD *)*v2 + 4);
  if (*((_BYTE **)*v2 + 3) == v9)
    return llvm::raw_ostream::write(result, "\"", 1uLL);
  *v9 = 34;
  ++*((_QWORD *)result + 4);
  return result;
}

void mlir::AsmPrinter::Impl::printDenseArrayAttr(mlir::DenseArrayAttr)::$_0::operator()(uint64_t a1, int a2)
{
  llvm::raw_ostream **v4;
  unsigned int v5;
  llvm::APFloatBase *FloatSemantics;
  llvm::APFloatBase *v7;
  uint64_t v8;
  void *__p;
  unsigned int v10;
  _BYTE v11[8];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  v4 = *(llvm::raw_ostream ***)(a1 + 32);
  v5 = **(_DWORD **)a1;
  v10 = v5;
  if (v5 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
    if (!**(_DWORD **)a1)
      goto LABEL_6;
    goto LABEL_5;
  }
  __p = 0;
  if (v5)
LABEL_5:
    llvm::LoadIntFromMemory((llvm *)&__p, (llvm::APInt *)(**(_QWORD **)(a1 + 8) + (**(_DWORD **)(a1 + 16) * a2)), **(unsigned int **)(a1 + 16));
LABEL_6:
  if (mlir::Type::isIntOrIndex(*(mlir::Type **)(a1 + 24)))
  {
    printDenseIntElement((llvm::APInt *)&__p, *v4, **(_QWORD **)(a1 + 24));
    if (v10 < 0x41)
      return;
  }
  else
  {
    v8 = **(_QWORD **)(a1 + 24);
    FloatSemantics = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v8);
    v7 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(FloatSemantics);
    if (v7 == FloatSemantics)
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v12, (uint64_t)FloatSemantics, (uint64_t)&__p);
    else
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v12, FloatSemantics, (const llvm::APInt **)&__p);
    printFloatValue((const llvm::APFloat *)v11, *v4);
    if (v7 == (llvm::APFloatBase *)v12[0])
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v12);
      if (v10 < 0x41)
        return;
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v12);
      if (v10 < 0x41)
        return;
    }
  }
  if (__p)
    operator delete[](__p);
}

uint64_t mlir::AbstractAttribute::walkImmediateSubElements(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 104))(*(_QWORD *)(a1 + 112));
}

uint64_t mlir::AbstractAttribute::replaceImmediateSubElements(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 120))(*(_QWORD *)(a1 + 128));
}

uint64_t mlir::Attribute::getContext(mlir::Attribute *this)
{
  return *(_QWORD *)(***(_QWORD ***)this + 32);
}

_QWORD *mlir::NamedAttribute::NamedAttribute(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t mlir::NamedAttribute::getNameDialect(mlir::NamedAttribute *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  return mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v2);
}

uint64_t mlir::NamedAttribute::operator<(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  const void *AttrData;
  size_t v4;
  size_t v5;
  const void *v6;
  size_t v7;
  size_t v8;
  size_t v9;
  int v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a2;
  v13 = *a1;
  v14 = v2;
  if (v13 == v2)
    return 0;
  AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v13);
  v5 = v4;
  v6 = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v14);
  v8 = v7;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  if (v9)
  {
    v10 = memcmp(AttrData, v6, v9);
    if (v10)
      return ((v10 >> 31) | 1u) >> 31;
  }
  if (v5 < v8)
    v12 = -1;
  else
    v12 = 1;
  if (v5 == v8)
    v12 = 0;
  return v12 >> 31;
}

uint64_t mlir::AttrTypeWalker::walkImpl(_QWORD *a1, uint64_t *a2, unsigned int a3)
{
  return mlir::AttrTypeWalker::walkImpl<mlir::Attribute,std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>>((uint64_t)a1, a2, a1, a3);
}

uint64_t mlir::AttrTypeWalker::walkImpl<mlir::Attribute,std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>>(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned int a4)
{
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;

  v22 = a2;
  v23 = a4;
  v8 = (uint64_t *)(a1 + 48);
  v24 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>((uint64_t *)(a1 + 48), (uint64_t)&v22, (uint64_t *)&v24)&& v24 != (int *)(*(_QWORD *)(a1 + 48) + 24 * *(unsigned int *)(a1 + 64)))
  {
    return v24[4];
  }
  v24 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>(v8, (uint64_t)&v22, (uint64_t *)&v24) & 1) == 0)
  {
    v10 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::InsertIntoBucketImpl<std::pair<void const*,int>>((uint64_t)v8, (uint64_t)&v22, (uint64_t)&v22, (uint64_t)v24);
    *(_QWORD *)v10 = v22;
    *(_DWORD *)(v10 + 8) = v23;
    *(_DWORD *)(v10 + 16) = 1;
  }
  if (a4 == 1
    && (v27 = 1, v28 = 1, v24 = &v27, v25 = a1, v26 = &v28, mlir::AbstractAttribute::walkImmediateSubElements(*a2), !v27))
  {
LABEL_13:
    v24 = 0;
    v16 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>(v8, (uint64_t)&v22, (uint64_t *)&v24);
    v17 = (uint64_t)v24;
    if ((v16 & 1) == 0)
    {
      v17 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::InsertIntoBucketImpl<std::pair<void const*,int>>((uint64_t)v8, (uint64_t)&v22, (uint64_t)&v22, (uint64_t)v24);
      *(_QWORD *)v17 = v22;
      *(_DWORD *)(v17 + 8) = v23;
      *(_DWORD *)(v17 + 16) = 1;
    }
    result = 0;
    *(_DWORD *)(v17 + 16) = 0;
  }
  else
  {
    v13 = a3;
    v11 = *a3;
    v12 = v13[1];
    while (v12 != v11)
    {
      v24 = (int *)a2;
      v14 = *(_QWORD *)(v12 - 8);
      if (!v14)
      {
        v18 = std::__throw_bad_function_call[abi:nn180100]();
        return mlir::AttrTypeWalker::walkImpl<mlir::Type,std::vector<std::function<mlir::WalkResult ()(mlir::Type)>>>(v18, v19, v20, v21);
      }
      v15 = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v14 + 48))(v14, &v24);
      if (v15 == 2)
        return 1;
      v12 -= 32;
      if (!v15)
        goto LABEL_13;
    }
    if (a4)
      return 1;
    v27 = 1;
    v28 = 0;
    v24 = &v27;
    v25 = a1;
    v26 = &v28;
    mlir::AbstractAttribute::walkImmediateSubElements(*a2);
    return v27 != 0;
  }
  return result;
}

uint64_t mlir::AttrTypeWalker::walkImpl<mlir::Type,std::vector<std::function<mlir::WalkResult ()(mlir::Type)>>>(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned int a4)
{
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int *v23;
  int v24;
  int v25;

  v19 = a2;
  v20 = a4;
  v8 = (uint64_t *)(a1 + 48);
  v21 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>((uint64_t *)(a1 + 48), (uint64_t)&v19, (uint64_t *)&v21)&& v21 != (int *)(*(_QWORD *)(a1 + 48) + 24 * *(unsigned int *)(a1 + 64)))
  {
    return v21[4];
  }
  v21 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>(v8, (uint64_t)&v19, (uint64_t *)&v21) & 1) == 0)
  {
    v10 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::InsertIntoBucketImpl<std::pair<void const*,int>>((uint64_t)v8, (uint64_t)&v19, (uint64_t)&v19, (uint64_t)v21);
    *(_QWORD *)v10 = v19;
    *(_DWORD *)(v10 + 8) = v20;
    *(_DWORD *)(v10 + 16) = 1;
  }
  if (a4 == 1
    && (v24 = 1, v25 = 1, v21 = &v24, v22 = a1, v23 = &v25, mlir::AbstractAttribute::walkImmediateSubElements(*a2), !v24))
  {
LABEL_13:
    v21 = 0;
    v16 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>(v8, (uint64_t)&v19, (uint64_t *)&v21);
    v17 = (uint64_t)v21;
    if ((v16 & 1) == 0)
    {
      v17 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::InsertIntoBucketImpl<std::pair<void const*,int>>((uint64_t)v8, (uint64_t)&v19, (uint64_t)&v19, (uint64_t)v21);
      *(_QWORD *)v17 = v19;
      *(_DWORD *)(v17 + 8) = v20;
      *(_DWORD *)(v17 + 16) = 1;
    }
    result = 0;
    *(_DWORD *)(v17 + 16) = 0;
  }
  else
  {
    v13 = a3;
    v11 = *a3;
    v12 = v13[1];
    while (v12 != v11)
    {
      v21 = (int *)a2;
      v14 = *(_QWORD *)(v12 - 8);
      if (!v14)
      {
        v18 = std::__throw_bad_function_call[abi:nn180100]();
        return mlir::AttrTypeReplacer::addReplacement(v18);
      }
      v15 = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v14 + 48))(v14, &v21);
      if (v15 == 2)
        return 1;
      v12 -= 32;
      if (!v15)
        goto LABEL_13;
    }
    if (a4)
      return 1;
    v24 = 1;
    v25 = 0;
    v21 = &v24;
    v22 = a1;
    v23 = &v25;
    mlir::AbstractAttribute::walkImmediateSubElements(*a2);
    return v24 != 0;
  }
  return result;
}

uint64_t mlir::AttrTypeReplacer::addReplacement(uint64_t *a1, _QWORD *a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>::__emplace_back_slow_path<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>(a1, a2);
    a1[1] = result;
  }
  else
  {
    v4 = (_QWORD *)a2[3];
    if (v4)
    {
      if (v4 == a2)
      {
        *(_QWORD *)(v3 + 24) = v3;
        (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
      }
      else
      {
        *(_QWORD *)(v3 + 24) = v4;
        a2[3] = 0;
      }
      result = v3 + 32;
      a1[1] = v3 + 32;
    }
    else
    {
      *(_QWORD *)(v3 + 24) = 0;
      result = v3 + 32;
      a1[1] = v3 + 32;
    }
  }
  return result;
}

void mlir::AttrTypeReplacer::replaceElementsIn(mlir::AttrTypeReplacer *this, mlir::Operation *a2, int a3, int a4, int a5)
{
  unint64_t AttrDictionary;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t i;
  uint64_t NextResultAtOffset;
  unint64_t v17;
  uint64_t *v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  BOOL v30;
  unint64_t v31;
  uint64_t *v32;
  BOOL v33;
  uint64_t k;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  BOOL v41;
  uint64_t n;
  uint64_t m;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v50;

  if (a3)
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(a2);
    v10 = mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>((uint64_t)this, AttrDictionary, this);
    if (v10)
    {
      if (v10 != (uint64_t *)AttrDictionary)
        mlir::Operation::setAttrs((uint64_t)a2, (uint64_t)v10);
    }
  }
  if ((a4 & 1) != 0 || a5)
  {
    if (a4)
    {
      v11 = *((_QWORD *)a2 + 3);
      v12 = mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>((uint64_t)this, v11, this);
      if (v12)
      {
        if ((uint64_t *)v11 != v12)
          *((_QWORD *)a2 + 3) = v12;
      }
    }
    if (a5)
    {
      v13 = *((unsigned int *)a2 + 9);
      v14 = (_DWORD)v13 ? (char *)a2 - 16 : 0;
      if ((_DWORD)v13)
      {
        for (i = 0; i != v13; ++i)
        {
          NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v14, i);
          v17 = *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
          v18 = mlir::AttrTypeReplacer::replaceImpl<mlir::Type,std::vector<std::function<std::optional<std::pair<mlir::Type,mlir::WalkResult>> ()(mlir::Type)>>>((uint64_t)this, v17, (_QWORD *)this + 3);
          if (v18)
            v19 = v18 == (uint64_t *)v17;
          else
            v19 = 1;
          if (!v19)
            *(_QWORD *)(NextResultAtOffset + 8) = *(_QWORD *)(NextResultAtOffset + 8) & 7 | (unint64_t)v18;
        }
      }
    }
    v20 = *((unsigned int *)a2 + 11);
    if ((v20 & 0x7FFFFF) != 0)
    {
      v21 = (((unint64_t)a2 + 16 * ((v20 >> 23) & 1) + ((v20 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)a2 + 10);
      v22 = v21 + 24 * (v20 & 0x7FFFFF);
      if (a5)
      {
        if ((a4 & 1) != 0)
        {
          do
          {
            for (j = *(_QWORD *)(v21 + 8); j != v21; j = *(_QWORD *)(j + 8))
            {
              v24 = j - 8;
              if (!j)
                v24 = 0;
              v25 = *(_QWORD *)(v24 + 48);
              v26 = *(_QWORD *)(v24 + 56) - v25;
              if (v26)
              {
                v27 = 8 * (v26 >> 3);
                do
                {
                  v28 = *(_QWORD *)(*(_QWORD *)v25 + 32);
                  v29 = mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>((uint64_t)this, v28, this);
                  if (v29)
                    v30 = v28 == (_QWORD)v29;
                  else
                    v30 = 1;
                  if (!v30)
                    *(_QWORD *)(*(_QWORD *)v25 + 32) = v29;
                  v31 = *(_QWORD *)(*(_QWORD *)v25 + 8) & 0xFFFFFFFFFFFFFFF8;
                  v32 = mlir::AttrTypeReplacer::replaceImpl<mlir::Type,std::vector<std::function<std::optional<std::pair<mlir::Type,mlir::WalkResult>> ()(mlir::Type)>>>((uint64_t)this, v31, (_QWORD *)this + 3);
                  if (v32)
                    v33 = v32 == (uint64_t *)v31;
                  else
                    v33 = 1;
                  if (!v33)
                    *(_QWORD *)(*(_QWORD *)v25 + 8) = *(_QWORD *)(*(_QWORD *)v25 + 8) & 7 | (unint64_t)v32;
                  v25 += 8;
                  v27 -= 8;
                }
                while (v27);
              }
            }
            v21 += 24;
          }
          while (v21 != v22);
        }
        else
        {
          do
          {
            for (k = *(_QWORD *)(v21 + 8); k != v21; k = *(_QWORD *)(k + 8))
            {
              v35 = k - 8;
              if (!k)
                v35 = 0;
              v36 = *(_QWORD *)(v35 + 48);
              v37 = *(_QWORD *)(v35 + 56) - v36;
              if (v37)
              {
                v38 = 8 * (v37 >> 3);
                do
                {
                  v39 = *(_QWORD *)(*(_QWORD *)v36 + 8) & 0xFFFFFFFFFFFFFFF8;
                  v40 = mlir::AttrTypeReplacer::replaceImpl<mlir::Type,std::vector<std::function<std::optional<std::pair<mlir::Type,mlir::WalkResult>> ()(mlir::Type)>>>((uint64_t)this, v39, (_QWORD *)this + 3);
                  if (v40)
                    v41 = v40 == (uint64_t *)v39;
                  else
                    v41 = 1;
                  if (!v41)
                    *(_QWORD *)(*(_QWORD *)v36 + 8) = *(_QWORD *)(*(_QWORD *)v36 + 8) & 7 | (unint64_t)v40;
                  v36 += 8;
                  v38 -= 8;
                }
                while (v38);
              }
            }
            v21 += 24;
          }
          while (v21 != v22);
        }
      }
      else if (a4)
      {
        do
        {
          for (m = *(_QWORD *)(v21 + 8); m != v21; m = *(_QWORD *)(m + 8))
          {
            v44 = m - 8;
            if (!m)
              v44 = 0;
            v45 = *(_QWORD *)(v44 + 48);
            v46 = *(_QWORD *)(v44 + 56) - v45;
            if (v46)
            {
              v47 = 8 * (v46 >> 3);
              do
              {
                v48 = *(_QWORD *)(*(_QWORD *)v45 + 32);
                v49 = mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>((uint64_t)this, v48, this);
                if (v49)
                  v50 = v48 == (_QWORD)v49;
                else
                  v50 = 1;
                if (!v50)
                  *(_QWORD *)(*(_QWORD *)v45 + 32) = v49;
                v45 += 8;
                v47 -= 8;
              }
              while (v47);
            }
          }
          v21 += 24;
        }
        while (v21 != v22);
      }
      else
      {
        for (n = *(_QWORD *)(v21 + 8); n != v21; n = *(_QWORD *)(n + 8))
          ;
      }
    }
  }
}

uint64_t *mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t *inserted;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t **v49;
  int v50;
  BOOL v51;
  int v52;
  uint64_t **v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t *v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t **v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  uint64_t *v72;
  int v73;
  BOOL v74;
  unsigned int v75;
  uint64_t *v76;
  int v77;
  BOOL v78;
  unsigned int v79;
  uint64_t *v80;
  int v81;
  char v82;
  uint64_t *v83;
  uint64_t *v84;

  v4 = (uint64_t *)a2;
  v83 = (uint64_t *)a2;
  v7 = (_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 64);
  if (!v8)
    goto LABEL_81;
  v9 = (v8 - 1) & ((v4 >> 4) ^ (v4 >> 9));
  v10 = (uint64_t **)(v6 + 16 * v9);
  v11 = *v10;
  if (*v10 != v4)
  {
    v49 = 0;
    v50 = 1;
    while (v11 != (uint64_t *)-4096)
    {
      if (v49)
        v51 = 0;
      else
        v51 = v11 == (uint64_t *)-8192;
      if (v51)
        v49 = v10;
      v52 = v9 + v50++;
      v9 = v52 & (v8 - 1);
      v10 = (uint64_t **)(v6 + 16 * v9);
      v11 = *v10;
      if (*v10 == v4)
        return *(uint64_t **)(v6 + 16 * v9 + 8);
    }
    if (v49)
      v53 = v49;
    else
      v53 = v10;
    v54 = *(_DWORD *)(a1 + 56);
    if (4 * v54 + 4 < 3 * v8)
    {
      if (v8 + ~v54 - *(_DWORD *)(a1 + 60) > v8 >> 3)
        goto LABEL_7;
      goto LABEL_82;
    }
LABEL_81:
    v8 *= 2;
LABEL_82:
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a1 + 48, v8);
    v55 = *(_QWORD *)(a1 + 48);
    v56 = *(_DWORD *)(a1 + 64) - 1;
    v57 = ((v4 >> 4) ^ (v4 >> 9)) & v56;
    v53 = (uint64_t **)(v55 + 16 * v57);
    v58 = *v53;
    if (*v53 == v4)
    {
      v13 = v4;
LABEL_8:
      ++*(_DWORD *)(a1 + 56);
      if (v13 != (uint64_t *)-4096)
        --*(_DWORD *)(a1 + 60);
      *v53 = v4;
      v14 = (uint64_t)v83;
      v53[1] = v83;
      v16 = a3;
      a3 = (_QWORD *)*a3;
      v15 = (_QWORD *)v16[1];
      if (v15 != a3)
      {
        while (1)
        {
          v84 = v4;
          v17 = *(v15 - 1);
          if (!v17)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            goto LABEL_102;
          }
          (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t **))(*(_QWORD *)v17 + 48))(&v80, v17, &v84);
          if (v82)
            break;
          v15 -= 4;
          if (v15 == a3)
            goto LABEL_14;
        }
        if (v81)
        {
          v4 = v80;
          if (v80)
          {
            if (v81 != 2)
              goto LABEL_15;
            v19 = *(_DWORD *)(a1 + 64);
            if (!v19)
            {
LABEL_31:
              v22 = 0;
              v28 = *(_DWORD *)(a1 + 56);
              if (4 * v28 + 4 < 3 * v19)
                goto LABEL_32;
              goto LABEL_94;
            }
LABEL_17:
            v20 = v19 - 1;
            v21 = ((v14 >> 4) ^ (v14 >> 9)) & (v19 - 1);
            v22 = (uint64_t *)(*v7 + 16 * v21);
            v23 = *v22;
            if (v14 == *v22)
            {
LABEL_36:
              v22[1] = (uint64_t)v4;
              return v4;
            }
            v24 = 0;
            v25 = 1;
            while (v23 != -4096)
            {
              if (v24)
                v26 = 0;
              else
                v26 = v23 == -8192;
              if (v26)
                v24 = v22;
              v27 = v21 + v25++;
              v21 = v27 & v20;
              v22 = (uint64_t *)(*v7 + 16 * (v27 & v20));
              v23 = *v22;
              if (v14 == *v22)
                goto LABEL_36;
            }
            if (v24)
              v22 = v24;
            v28 = *(_DWORD *)(a1 + 56);
            if (4 * v28 + 4 < 3 * v19)
            {
LABEL_32:
              if (v19 + ~v28 - *(_DWORD *)(a1 + 60) > v19 >> 3)
                goto LABEL_33;
              goto LABEL_95;
            }
LABEL_94:
            v19 *= 2;
LABEL_95:
            llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v7, v19);
            v64 = *(_QWORD *)(a1 + 48);
            v65 = *(_DWORD *)(a1 + 64) - 1;
            v66 = ((v14 >> 4) ^ (v14 >> 9)) & v65;
            v22 = (uint64_t *)(v64 + 16 * v66);
            v67 = *v22;
            if (v14 == *v22)
            {
LABEL_96:
              ++*(_DWORD *)(a1 + 56);
              if (v14 == -4096)
                goto LABEL_35;
              goto LABEL_34;
            }
            v76 = 0;
            v77 = 1;
            while (v67 != -4096)
            {
              if (v76)
                v78 = 0;
              else
                v78 = v67 == -8192;
              if (v78)
                v76 = v22;
              v79 = v66 + v77++;
              v66 = v79 & v65;
              v22 = (uint64_t *)(v64 + 16 * (v79 & v65));
              v67 = *v22;
              if (v14 == *v22)
                goto LABEL_96;
            }
            if (v76)
              v22 = v76;
LABEL_33:
            v29 = *v22;
            ++*(_DWORD *)(a1 + 56);
            if (v29 == -4096)
            {
LABEL_35:
              *v22 = v14;
              v22[1] = 0;
              goto LABEL_36;
            }
LABEL_34:
            --*(_DWORD *)(a1 + 60);
            goto LABEL_35;
          }
        }
        goto LABEL_37;
      }
LABEL_14:
      if (!v4)
      {
LABEL_37:
        v30 = *(_DWORD *)(a1 + 64);
        if (!v30)
          goto LABEL_87;
        v31 = *(_QWORD *)(a1 + 48);
        v32 = v30 - 1;
        v33 = ((v14 >> 4) ^ (v14 >> 9)) & (v30 - 1);
        v34 = (uint64_t *)(v31 + 16 * v33);
        v35 = *v34;
        if (v14 == *v34)
        {
LABEL_64:
          v4 = 0;
          v34[1] = 0;
          return v4;
        }
        v36 = 0;
        v37 = 1;
        while (v35 != -4096)
        {
          if (v36)
            v38 = 0;
          else
            v38 = v35 == -8192;
          if (v38)
            v36 = v34;
          v39 = v33 + v37++;
          v33 = v39 & v32;
          v34 = (uint64_t *)(v31 + 16 * (v39 & v32));
          v35 = *v34;
          if (v14 == *v34)
            goto LABEL_64;
        }
        if (v36)
          v34 = v36;
        v59 = *(_DWORD *)(a1 + 56);
        if (4 * v59 + 4 < 3 * v30)
        {
          if (v30 + ~v59 - *(_DWORD *)(a1 + 60) > v30 >> 3)
            goto LABEL_61;
        }
        else
        {
LABEL_87:
          v30 *= 2;
        }
        llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v7, v30);
        v60 = *(_QWORD *)(a1 + 48);
        v61 = *(_DWORD *)(a1 + 64) - 1;
        v62 = ((v14 >> 4) ^ (v14 >> 9)) & v61;
        v34 = (uint64_t *)(v60 + 16 * v62);
        v63 = *v34;
        if (v14 == *v34)
        {
LABEL_89:
          ++*(_DWORD *)(a1 + 56);
          if (v14 == -4096)
            goto LABEL_63;
          goto LABEL_62;
        }
        v72 = 0;
        v73 = 1;
        while (v63 != -4096)
        {
          if (v72)
            v74 = 0;
          else
            v74 = v63 == -8192;
          if (v74)
            v72 = v34;
          v75 = v62 + v73++;
          v62 = v75 & v61;
          v34 = (uint64_t *)(v60 + 16 * (v75 & v61));
          v63 = *v34;
          if (v14 == *v34)
            goto LABEL_89;
        }
        if (v72)
          v34 = v72;
LABEL_61:
        v47 = *v34;
        ++*(_DWORD *)(a1 + 56);
        if (v47 == -4096)
        {
LABEL_63:
          *v34 = v14;
          v34[1] = 0;
          goto LABEL_64;
        }
LABEL_62:
        --*(_DWORD *)(a1 + 60);
        goto LABEL_63;
      }
LABEL_15:
      v18 = mlir::AttrTypeReplacer::replaceSubElements<mlir::Attribute>(a1, v4);
      v19 = *(_DWORD *)(a1 + 64);
      if (v18)
      {
        v4 = v18;
        if (!v19)
          goto LABEL_31;
        goto LABEL_17;
      }
      if (v19)
      {
        v40 = ((v14 >> 4) ^ (v14 >> 9)) & (v19 - 1);
        inserted = (uint64_t *)(*v7 + 16 * v40);
        v42 = *inserted;
        if (v14 == *inserted)
        {
LABEL_67:
          v4 = 0;
          inserted[1] = 0;
          return v4;
        }
        v43 = 0;
        v44 = 1;
        while (v42 != -4096)
        {
          if (v43)
            v45 = 0;
          else
            v45 = v42 == -8192;
          if (v45)
            v43 = inserted;
          v46 = v40 + v44++;
          v40 = v46 & (v19 - 1);
          inserted = (uint64_t *)(*v7 + 16 * v40);
          v42 = *inserted;
          if (v14 == *inserted)
            goto LABEL_67;
        }
        if (v43)
          v48 = v43;
        else
          v48 = inserted;
      }
      else
      {
        v48 = 0;
      }
      inserted = llvm::DenseMapBase<llvm::DenseMap<void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>,void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>::InsertIntoBucket<void const* const&>((uint64_t)v7, v48, (uint64_t *)&v83);
      goto LABEL_67;
    }
LABEL_102:
    v68 = 0;
    v69 = 1;
    while (v58 != (uint64_t *)-4096)
    {
      if (v68)
        v70 = 0;
      else
        v70 = v58 == (uint64_t *)-8192;
      if (v70)
        v68 = v53;
      v71 = v57 + v69++;
      v57 = v71 & v56;
      v53 = (uint64_t **)(v55 + 16 * (v71 & v56));
      v58 = *v53;
      v13 = v4;
      if (*v53 == v4)
        goto LABEL_8;
    }
    if (v68)
      v53 = v68;
LABEL_7:
    v13 = *v53;
    goto LABEL_8;
  }
  return *(uint64_t **)(v6 + 16 * v9 + 8);
}

uint64_t *mlir::AttrTypeReplacer::replaceImpl<mlir::Type,std::vector<std::function<std::optional<std::pair<mlir::Type,mlir::WalkResult>> ()(mlir::Type)>>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t *inserted;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t **v49;
  int v50;
  BOOL v51;
  int v52;
  uint64_t **v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t *v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t **v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  uint64_t *v72;
  int v73;
  BOOL v74;
  unsigned int v75;
  uint64_t *v76;
  int v77;
  BOOL v78;
  unsigned int v79;
  uint64_t *v80;
  int v81;
  char v82;
  uint64_t *v83;
  uint64_t *v84;

  v4 = (uint64_t *)a2;
  v83 = (uint64_t *)a2;
  v7 = (_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 64);
  if (!v8)
    goto LABEL_81;
  v9 = (v8 - 1) & ((v4 >> 4) ^ (v4 >> 9));
  v10 = (uint64_t **)(v6 + 16 * v9);
  v11 = *v10;
  if (*v10 != v4)
  {
    v49 = 0;
    v50 = 1;
    while (v11 != (uint64_t *)-4096)
    {
      if (v49)
        v51 = 0;
      else
        v51 = v11 == (uint64_t *)-8192;
      if (v51)
        v49 = v10;
      v52 = v9 + v50++;
      v9 = v52 & (v8 - 1);
      v10 = (uint64_t **)(v6 + 16 * v9);
      v11 = *v10;
      if (*v10 == v4)
        return *(uint64_t **)(v6 + 16 * v9 + 8);
    }
    if (v49)
      v53 = v49;
    else
      v53 = v10;
    v54 = *(_DWORD *)(a1 + 56);
    if (4 * v54 + 4 < 3 * v8)
    {
      if (v8 + ~v54 - *(_DWORD *)(a1 + 60) > v8 >> 3)
        goto LABEL_7;
      goto LABEL_82;
    }
LABEL_81:
    v8 *= 2;
LABEL_82:
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a1 + 48, v8);
    v55 = *(_QWORD *)(a1 + 48);
    v56 = *(_DWORD *)(a1 + 64) - 1;
    v57 = ((v4 >> 4) ^ (v4 >> 9)) & v56;
    v53 = (uint64_t **)(v55 + 16 * v57);
    v58 = *v53;
    if (*v53 == v4)
    {
      v13 = v4;
LABEL_8:
      ++*(_DWORD *)(a1 + 56);
      if (v13 != (uint64_t *)-4096)
        --*(_DWORD *)(a1 + 60);
      *v53 = v4;
      v14 = (uint64_t)v83;
      v53[1] = v83;
      v16 = a3;
      a3 = (_QWORD *)*a3;
      v15 = (_QWORD *)v16[1];
      if (v15 != a3)
      {
        while (1)
        {
          v84 = v4;
          v17 = *(v15 - 1);
          if (!v17)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            goto LABEL_102;
          }
          (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t **))(*(_QWORD *)v17 + 48))(&v80, v17, &v84);
          if (v82)
            break;
          v15 -= 4;
          if (v15 == a3)
            goto LABEL_14;
        }
        if (v81)
        {
          v4 = v80;
          if (v80)
          {
            if (v81 != 2)
              goto LABEL_15;
            v19 = *(_DWORD *)(a1 + 64);
            if (!v19)
            {
LABEL_31:
              v22 = 0;
              v28 = *(_DWORD *)(a1 + 56);
              if (4 * v28 + 4 < 3 * v19)
                goto LABEL_32;
              goto LABEL_94;
            }
LABEL_17:
            v20 = v19 - 1;
            v21 = ((v14 >> 4) ^ (v14 >> 9)) & (v19 - 1);
            v22 = (uint64_t *)(*v7 + 16 * v21);
            v23 = *v22;
            if (v14 == *v22)
            {
LABEL_36:
              v22[1] = (uint64_t)v4;
              return v4;
            }
            v24 = 0;
            v25 = 1;
            while (v23 != -4096)
            {
              if (v24)
                v26 = 0;
              else
                v26 = v23 == -8192;
              if (v26)
                v24 = v22;
              v27 = v21 + v25++;
              v21 = v27 & v20;
              v22 = (uint64_t *)(*v7 + 16 * (v27 & v20));
              v23 = *v22;
              if (v14 == *v22)
                goto LABEL_36;
            }
            if (v24)
              v22 = v24;
            v28 = *(_DWORD *)(a1 + 56);
            if (4 * v28 + 4 < 3 * v19)
            {
LABEL_32:
              if (v19 + ~v28 - *(_DWORD *)(a1 + 60) > v19 >> 3)
                goto LABEL_33;
              goto LABEL_95;
            }
LABEL_94:
            v19 *= 2;
LABEL_95:
            llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v7, v19);
            v64 = *(_QWORD *)(a1 + 48);
            v65 = *(_DWORD *)(a1 + 64) - 1;
            v66 = ((v14 >> 4) ^ (v14 >> 9)) & v65;
            v22 = (uint64_t *)(v64 + 16 * v66);
            v67 = *v22;
            if (v14 == *v22)
            {
LABEL_96:
              ++*(_DWORD *)(a1 + 56);
              if (v14 == -4096)
                goto LABEL_35;
              goto LABEL_34;
            }
            v76 = 0;
            v77 = 1;
            while (v67 != -4096)
            {
              if (v76)
                v78 = 0;
              else
                v78 = v67 == -8192;
              if (v78)
                v76 = v22;
              v79 = v66 + v77++;
              v66 = v79 & v65;
              v22 = (uint64_t *)(v64 + 16 * (v79 & v65));
              v67 = *v22;
              if (v14 == *v22)
                goto LABEL_96;
            }
            if (v76)
              v22 = v76;
LABEL_33:
            v29 = *v22;
            ++*(_DWORD *)(a1 + 56);
            if (v29 == -4096)
            {
LABEL_35:
              *v22 = v14;
              v22[1] = 0;
              goto LABEL_36;
            }
LABEL_34:
            --*(_DWORD *)(a1 + 60);
            goto LABEL_35;
          }
        }
        goto LABEL_37;
      }
LABEL_14:
      if (!v4)
      {
LABEL_37:
        v30 = *(_DWORD *)(a1 + 64);
        if (!v30)
          goto LABEL_87;
        v31 = *(_QWORD *)(a1 + 48);
        v32 = v30 - 1;
        v33 = ((v14 >> 4) ^ (v14 >> 9)) & (v30 - 1);
        v34 = (uint64_t *)(v31 + 16 * v33);
        v35 = *v34;
        if (v14 == *v34)
        {
LABEL_64:
          v4 = 0;
          v34[1] = 0;
          return v4;
        }
        v36 = 0;
        v37 = 1;
        while (v35 != -4096)
        {
          if (v36)
            v38 = 0;
          else
            v38 = v35 == -8192;
          if (v38)
            v36 = v34;
          v39 = v33 + v37++;
          v33 = v39 & v32;
          v34 = (uint64_t *)(v31 + 16 * (v39 & v32));
          v35 = *v34;
          if (v14 == *v34)
            goto LABEL_64;
        }
        if (v36)
          v34 = v36;
        v59 = *(_DWORD *)(a1 + 56);
        if (4 * v59 + 4 < 3 * v30)
        {
          if (v30 + ~v59 - *(_DWORD *)(a1 + 60) > v30 >> 3)
            goto LABEL_61;
        }
        else
        {
LABEL_87:
          v30 *= 2;
        }
        llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v7, v30);
        v60 = *(_QWORD *)(a1 + 48);
        v61 = *(_DWORD *)(a1 + 64) - 1;
        v62 = ((v14 >> 4) ^ (v14 >> 9)) & v61;
        v34 = (uint64_t *)(v60 + 16 * v62);
        v63 = *v34;
        if (v14 == *v34)
        {
LABEL_89:
          ++*(_DWORD *)(a1 + 56);
          if (v14 == -4096)
            goto LABEL_63;
          goto LABEL_62;
        }
        v72 = 0;
        v73 = 1;
        while (v63 != -4096)
        {
          if (v72)
            v74 = 0;
          else
            v74 = v63 == -8192;
          if (v74)
            v72 = v34;
          v75 = v62 + v73++;
          v62 = v75 & v61;
          v34 = (uint64_t *)(v60 + 16 * (v75 & v61));
          v63 = *v34;
          if (v14 == *v34)
            goto LABEL_89;
        }
        if (v72)
          v34 = v72;
LABEL_61:
        v47 = *v34;
        ++*(_DWORD *)(a1 + 56);
        if (v47 == -4096)
        {
LABEL_63:
          *v34 = v14;
          v34[1] = 0;
          goto LABEL_64;
        }
LABEL_62:
        --*(_DWORD *)(a1 + 60);
        goto LABEL_63;
      }
LABEL_15:
      v18 = mlir::AttrTypeReplacer::replaceSubElements<mlir::Type>(a1, v4);
      v19 = *(_DWORD *)(a1 + 64);
      if (v18)
      {
        v4 = v18;
        if (!v19)
          goto LABEL_31;
        goto LABEL_17;
      }
      if (v19)
      {
        v40 = ((v14 >> 4) ^ (v14 >> 9)) & (v19 - 1);
        inserted = (uint64_t *)(*v7 + 16 * v40);
        v42 = *inserted;
        if (v14 == *inserted)
        {
LABEL_67:
          v4 = 0;
          inserted[1] = 0;
          return v4;
        }
        v43 = 0;
        v44 = 1;
        while (v42 != -4096)
        {
          if (v43)
            v45 = 0;
          else
            v45 = v42 == -8192;
          if (v45)
            v43 = inserted;
          v46 = v40 + v44++;
          v40 = v46 & (v19 - 1);
          inserted = (uint64_t *)(*v7 + 16 * v40);
          v42 = *inserted;
          if (v14 == *inserted)
            goto LABEL_67;
        }
        if (v43)
          v48 = v43;
        else
          v48 = inserted;
      }
      else
      {
        v48 = 0;
      }
      inserted = llvm::DenseMapBase<llvm::DenseMap<void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>,void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>::InsertIntoBucket<void const* const&>((uint64_t)v7, v48, (uint64_t *)&v83);
      goto LABEL_67;
    }
LABEL_102:
    v68 = 0;
    v69 = 1;
    while (v58 != (uint64_t *)-4096)
    {
      if (v68)
        v70 = 0;
      else
        v70 = v58 == (uint64_t *)-8192;
      if (v70)
        v68 = v53;
      v71 = v57 + v69++;
      v57 = v71 & v56;
      v53 = (uint64_t **)(v55 + 16 * (v71 & v56));
      v58 = *v53;
      v13 = v4;
      if (*v53 == v4)
        goto LABEL_8;
    }
    if (v68)
      v53 = v68;
LABEL_7:
    v13 = *v53;
    goto LABEL_8;
  }
  return *(uint64_t **)(v6 + 16 * v9 + 8);
}

uint64_t mlir::AttrTypeImmediateSubElementWalker::walk(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(_QWORD))result)(*(_QWORD *)(result + 8));
  return result;
}

{
  if (a2)
    return (*(uint64_t (**)(_QWORD))(result + 16))(*(_QWORD *)(result + 24));
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *(_DWORD *)(a2 + 8);
    v6 = ~((unint64_t)(37 * v5) << 32)
       + (37 * v5)
       + ((unint64_t)((*(_QWORD *)a2 >> 4) ^ (*(_QWORD *)a2 >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
    v10 = v3 - 1;
    v11 = (v3 - 1) & v9;
    v12 = *a1 + 24 * v11;
    v13 = *(_QWORD *)v12;
    v14 = *(_DWORD *)(v12 + 8);
    if (*(_QWORD *)a2 == *(_QWORD *)v12 && v5 == v14)
    {
      result = 1;
      *a3 = v12;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v13 != -4096 || v14 != 0x7FFFFFFF)
      {
        if (v16)
          v19 = 0;
        else
          v19 = v14 == 0x80000000;
        if (v19 && v13 == -8192)
          v16 = v12;
        v21 = v11 + v17++;
        v11 = v21 & v10;
        v12 = v4 + 24 * (v21 & v10);
        v13 = *(_QWORD *)v12;
        v14 = *(_DWORD *)(v12 + 8);
        if (*(_QWORD *)a2 == *(_QWORD *)v12 && v5 == v14)
        {
          *a3 = v12;
          return result;
        }
      }
      result = 0;
      if (v16)
        v12 = v16;
      *a3 = v12;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::InsertIntoBucketImpl<std::pair<void const*,int>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a4 != -4096 || *(_DWORD *)(a4 + 8) != 0x7FFFFFFF)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unsigned int v10;
  unint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  _QWORD *v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = xmmword_181236FB0;
        *(_OWORD *)((char *)v18 + 24) = xmmword_181236FB0;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = 24 * v3;
          v21 = (uint64_t)v4;
          do
          {
            v22 = *(_DWORD *)(v21 + 8);
            if ((*(_QWORD *)v21 != -4096 || v22 != 0x7FFFFFFF) && (*(_QWORD *)v21 != -8192 || v22 != 0x80000000))
            {
              v30 = 0;
              llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>((uint64_t *)a1, v21, (uint64_t *)&v30);
              v25 = v30;
              *v30 = *(_QWORD *)v21;
              *((_DWORD *)v25 + 2) = *(_DWORD *)(v21 + 8);
              *((_DWORD *)v25 + 4) = *(_DWORD *)(v21 + 16);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 += 24;
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      *v12 = xmmword_181236FB0;
      v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_32:
      v29 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *v15 = xmmword_181236FB0;
        v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v29);
      return result;
    }
    v26 = v14 / 0x18 + 1;
    v15 = (_OWORD *)((char *)result + 24 * (v26 & 0x1FFFFFFFFFFFFFFELL));
    v27 = v26 & 0x1FFFFFFFFFFFFFFELL;
    v28 = result;
    do
    {
      *v28 = xmmword_181236FB0;
      *(_OWORD *)((char *)v28 + 24) = xmmword_181236FB0;
      v28 += 3;
      v27 -= 2;
    }
    while (v27);
    if (v26 != (v26 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_32;
  }
  return result;
}

_DWORD **llvm::function_ref<void ()(mlir::Attribute)>::callback_fn<mlir::WalkResult mlir::AttrTypeWalker::walkSubElements<mlir::Attribute>(mlir::Attribute,mlir::WalkOrder)::{lambda(mlir::Attribute)#1}>(_DWORD **result, uint64_t a2)
{
  _DWORD **v2;

  if (a2)
  {
    v2 = result;
    if (**result)
    {
      result = (_DWORD **)mlir::AttrTypeWalker::walkImpl<mlir::Attribute,std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>>();
      **v2 = (_DWORD)result;
    }
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Type)>::callback_fn<mlir::WalkResult mlir::AttrTypeWalker::walkSubElements<mlir::Attribute>(mlir::Attribute,mlir::WalkOrder)::{lambda(mlir::Attribute)#1}>(uint64_t result, uint64_t *a2)
{
  _DWORD **v2;

  if (a2)
  {
    v2 = (_DWORD **)result;
    if (**(_DWORD **)result)
    {
      result = mlir::AttrTypeWalker::walkImpl<mlir::Type,std::vector<std::function<mlir::WalkResult ()(mlir::Type)>>>(*(_QWORD *)(result + 8), a2, (_QWORD *)(*(_QWORD *)(result + 8) + 24), **(_DWORD **)(result + 16));
      **v2 = result;
    }
  }
  return result;
}

_DWORD **llvm::function_ref<void ()(mlir::Attribute)>::callback_fn<mlir::WalkResult mlir::AttrTypeWalker::walkSubElements<mlir::Type>(mlir::Type,mlir::WalkOrder)::{lambda(mlir::Type)#1}>(_DWORD **result, uint64_t a2)
{
  _DWORD **v2;

  if (a2)
  {
    v2 = result;
    if (**result)
    {
      result = (_DWORD **)mlir::AttrTypeWalker::walkImpl<mlir::Attribute,std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>>();
      **v2 = (_DWORD)result;
    }
  }
  return result;
}

_DWORD **llvm::function_ref<void ()(mlir::Type)>::callback_fn<mlir::WalkResult mlir::AttrTypeWalker::walkSubElements<mlir::Type>(mlir::Type,mlir::WalkOrder)::{lambda(mlir::Type)#1}>(_DWORD **result, uint64_t a2)
{
  _DWORD **v2;

  if (a2)
  {
    v2 = result;
    if (**result)
    {
      result = (_DWORD **)mlir::AttrTypeWalker::walkImpl<mlir::Type,std::vector<std::function<mlir::WalkResult ()(mlir::Type)>>>();
      **v2 = (_DWORD)result;
    }
  }
  return result;
}

uint64_t std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>::__emplace_back_slow_path<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>(uint64_t *a1, _QWORD *a2)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v20;
  uint64_t v21;
  char *v22;

  v2 = (char *)a1[1];
  v3 = (uint64_t)&v2[-*a1] >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    abort();
  v7 = a1[2] - *a1;
  if (v7 >> 4 > v4)
    v4 = v7 >> 4;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
    v8 = 0x7FFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (!v8)
  {
    v9 = 0;
    v10 = 32 * v3;
    v11 = (_QWORD *)a2[3];
    if (v11)
      goto LABEL_10;
LABEL_14:
    *(_QWORD *)(v10 + 24) = 0;
    v12 = &v9[32 * v8];
    v13 = v10 + 32;
    v14 = (char *)*a1;
    if (v2 == (char *)*a1)
      goto LABEL_25;
    goto LABEL_20;
  }
  if (v8 >> 59)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v9 = (char *)operator new(32 * v8);
  v10 = (uint64_t)&v9[32 * v3];
  v11 = (_QWORD *)a2[3];
  if (!v11)
    goto LABEL_14;
LABEL_10:
  if (v11 == a2)
  {
    *(_QWORD *)(v10 + 24) = v10;
    (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v10);
    v12 = &v9[32 * v8];
    v13 = v10 + 32;
    v14 = (char *)*a1;
    v2 = (char *)a1[1];
    if (v2 == (char *)*a1)
      goto LABEL_25;
  }
  else
  {
    *(_QWORD *)(v10 + 24) = v11;
    a2[3] = 0;
    v12 = &v9[32 * v8];
    v13 = v10 + 32;
    v14 = (char *)*a1;
    if (v2 == (char *)*a1)
      goto LABEL_25;
  }
  do
  {
LABEL_20:
    v15 = v10;
    v10 -= 32;
    v16 = v2 - 32;
    v17 = (char *)*((_QWORD *)v2 - 1);
    if (v17)
    {
      if (v16 == v17)
      {
        *(_QWORD *)(v15 - 8) = v10;
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v2 - 1) + 24))(*((_QWORD *)v2 - 1), v10);
      }
      else
      {
        *(_QWORD *)(v15 - 8) = v17;
        *((_QWORD *)v2 - 1) = 0;
      }
    }
    else
    {
      *(_QWORD *)(v15 - 8) = 0;
    }
    v2 -= 32;
  }
  while (v16 != v14);
  v2 = (char *)*a1;
LABEL_25:
  v18 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = (uint64_t)v12;
  if (v18 != v2)
  {
    do
    {
      v22 = v18 - 32;
      v20 = (char *)*((_QWORD *)v18 - 1);
      if (v18 - 32 == v20)
      {
        v20 = v18 - 32;
        v21 = 4;
      }
      else
      {
        if (!v20)
          goto LABEL_31;
        v21 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_31:
      v18 = v22;
    }
    while (v22 != v2);
  }
  if (v2)
    operator delete(v2);
  return v13;
}

uint64_t *mlir::AttrTypeReplacer::replaceSubElements<mlir::Attribute>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[17];

  v6[16] = *MEMORY[0x1E0C80C00];
  v4 = v6;
  v5 = 0x1000000000;
  mlir::AbstractAttribute::walkImmediateSubElements(*a2);
  return a2;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>,void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>::InsertIntoBucket<void const* const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a1, v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a2;
  if (*a3 != *a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a2;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 16 * (v16 & v10));
      v12 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v13)
      a2 = v13;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

void llvm::function_ref<void ()(mlir::Attribute)>::callback_fn<mlir::Attribute mlir::AttrTypeReplacer::replaceSubElements<mlir::Attribute>(mlir::Attribute)::{lambda(mlir::Attribute)#1}>(uint64_t *a1, uint64_t a2)
{
  updateSubElementImpl<mlir::Attribute>(a2, *a1, a1[1], a1[2]);
}

void updateSubElementImpl<mlir::Attribute>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(a4 + 1))
  {
    if (a1)
    {
      v7 = mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>(a2, a1, a2);
      if (v7)
      {
        v8 = *(unsigned int *)(a3 + 8);
        if (v8 >= *(_DWORD *)(a3 + 12))
        {
          v10 = v7;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v8 + 1, 8);
          v7 = v10;
          LODWORD(v8) = *(_DWORD *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v7;
        ++*(_DWORD *)(a3 + 8);
        if (v7 != a1)
          *(_WORD *)a4 = 257;
      }
      else
      {
        *(_WORD *)a4 = 0;
      }
    }
    else
    {
      v9 = *(unsigned int *)(a3 + 8);
      if (v9 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v9 + 1, 8);
        LODWORD(v9) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = 0;
      ++*(_DWORD *)(a3 + 8);
    }
  }
}

void llvm::function_ref<void ()(mlir::Type)>::callback_fn<mlir::Attribute mlir::AttrTypeReplacer::replaceSubElements<mlir::Attribute>(mlir::Attribute)::{lambda(mlir::Type)#1}>(uint64_t *a1, uint64_t a2)
{
  updateSubElementImpl<mlir::Type>(a2, *a1, a1[1], a1[2]);
}

void updateSubElementImpl<mlir::Type>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  if (*(_BYTE *)(a4 + 1))
  {
    if (a1)
    {
      v7 = mlir::AttrTypeReplacer::replaceImpl<mlir::Type,std::vector<std::function<std::optional<std::pair<mlir::Type,mlir::WalkResult>> ()(mlir::Type)>>>(a2, a1, (_QWORD *)(a2 + 24));
      if (v7)
      {
        v8 = *(unsigned int *)(a3 + 8);
        if (v8 >= *(_DWORD *)(a3 + 12))
        {
          v10 = v7;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v8 + 1, 8);
          v7 = v10;
          LODWORD(v8) = *(_DWORD *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v7;
        ++*(_DWORD *)(a3 + 8);
        if (v7 != (uint64_t *)a1)
          *(_WORD *)a4 = 257;
      }
      else
      {
        *(_WORD *)a4 = 0;
      }
    }
    else
    {
      v9 = *(unsigned int *)(a3 + 8);
      if (v9 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v9 + 1, 8);
        LODWORD(v9) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = 0;
      ++*(_DWORD *)(a3 + 8);
    }
  }
}

uint64_t *mlir::AttrTypeReplacer::replaceSubElements<mlir::Type>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[17];

  v6[16] = *MEMORY[0x1E0C80C00];
  v4 = v6;
  v5 = 0x1000000000;
  mlir::AbstractAttribute::walkImmediateSubElements(*a2);
  return a2;
}

void llvm::function_ref<void ()(mlir::Attribute)>::callback_fn<mlir::Type mlir::AttrTypeReplacer::replaceSubElements<mlir::Type>(mlir::Type)::{lambda(mlir::Attribute)#1}>(uint64_t *a1, uint64_t a2)
{
  updateSubElementImpl<mlir::Attribute>(a2, *a1, a1[1], a1[2]);
}

uint64_t llvm::function_ref<void ()(mlir::Type)>::callback_fn<mlir::Type mlir::AttrTypeReplacer::replaceSubElements<mlir::Type>(mlir::Type)::{lambda(mlir::Type)#1}>(_QWORD *a1, uint64_t a2)
{
  return updateSubElementImpl<mlir::Type>(a2, *a1, a1[1], a1[2]);
}

void mlir::Block::~Block(void ***this)
{
  void **v2;
  void **v3;
  mlir::GenericProgramPoint *v4;
  mlir::Block *v5;
  uint64_t v6;
  mlir::GenericProgramPoint *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  mlir::Block::clear((mlir::Block *)this);
  v2 = this[6];
  v3 = this[7];
  if (v2 == v3)
  {
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  do
  {
    if (*v2)
      operator delete(*v2);
    ++v2;
  }
  while (v2 != v3);
  v2 = this[6];
  if (v2)
  {
LABEL_3:
    this[7] = v2;
    operator delete(v2);
  }
LABEL_4:
  v4 = (mlir::GenericProgramPoint *)this[5];
  if (v4 != (mlir::GenericProgramPoint *)(this + 4))
  {
    do
    {
      v5 = (mlir::Block *)*((_QWORD *)v4 + 1);
      mlir::GenericProgramPoint::~GenericProgramPoint(v4);
      v7 = (mlir::GenericProgramPoint *)v6;
      llvm::ilist_traits<mlir::Operation>::removeNodeFromList((uint64_t)(this + 4), v6);
      mlir::GenericProgramPoint::~GenericProgramPoint(v7);
      v9 = *v8;
      v10 = (uint64_t *)v8[1];
      *v10 = *v8;
      *(_QWORD *)(v9 + 8) = v10;
      *v8 = 0;
      v8[1] = 0;
      mlir::Operation::destroy(v7);
      v4 = v5;
    }
    while (v5 != (mlir::Block *)(this + 4));
  }
}

mlir::GenericProgramPoint *mlir::Block::clear(mlir::Block *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  mlir::GenericProgramPoint *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  mlir::GenericProgramPoint *result;

  v1 = (uint64_t *)((char *)this + 32);
  v2 = (uint64_t *)*((_QWORD *)this + 5);
  if (v2 != (uint64_t *)((char *)this + 32))
  {
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v2);
      mlir::Operation::dropAllReferences(v3);
      v2 = (uint64_t *)v2[1];
    }
    while (v2 != v1);
  }
  while (1)
  {
    result = (mlir::GenericProgramPoint *)*v1;
    if ((uint64_t *)*v1 == v1)
      break;
    mlir::GenericProgramPoint::~GenericProgramPoint(result);
    v5 = (mlir::GenericProgramPoint *)v4;
    llvm::ilist_traits<mlir::Operation>::removeNodeFromList((uint64_t)v1, v4);
    mlir::GenericProgramPoint::~GenericProgramPoint(v5);
    v7 = *v6;
    v8 = (uint64_t *)v6[1];
    *v8 = *v6;
    *(_QWORD *)(v7 + 8) = v8;
    *v6 = 0;
    v6[1] = 0;
    mlir::Operation::destroy(v5);
  }
  return result;
}

unint64_t mlir::Block::getParent(mlir::Block *this)
{
  return *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t mlir::Block::getParentOp(mlir::Block *this)
{
  if ((*((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
    return *(_QWORD *)((*((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    return 0;
}

BOOL mlir::Block::isEntryBlock(mlir::Block *this)
{
  uint64_t v1;
  mlir::Block *v2;

  v1 = *(_QWORD *)((*((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v1)
    v2 = (mlir::Block *)(v1 - 8);
  else
    v2 = 0;
  return v2 == this;
}

mlir::Block *mlir::Block::moveBefore(mlir::Block *this, mlir::Block *a2)
{
  uint64_t *v2;
  mlir::Block *v3;
  mlir::Block *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 != this)
  {
    v2 = (uint64_t *)((char *)a2 + 8);
    v3 = (mlir::Block *)*((_QWORD *)this + 2);
    if (v3 != (mlir::Block *)((char *)a2 + 8))
    {
      v4 = (mlir::Block *)((char *)this + 8);
      this = (mlir::Block *)llvm::ilist_traits<mlir::Block>::transferNodesFromList(*((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFF8, *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8, (uint64_t)this + 8, (uint64_t)v3);
      if (v3 != v4)
      {
        v5 = *(_QWORD *)v3;
        v6 = *(_QWORD *)v4;
        *(_QWORD *)(v6 + 8) = v3;
        *(_QWORD *)v3 = v6;
        v7 = *v2;
        *(_QWORD *)(v5 + 8) = v2;
        *(_QWORD *)v4 = v7;
        *(_QWORD *)(v7 + 8) = v4;
        *v2 = v5;
      }
    }
  }
  return this;
}

void mlir::Block::erase(mlir::Block *this)
{
  char *v1;
  char *v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;

  v1 = (char *)this + 8;
  if (!this)
    v1 = 0;
  v2 = v1 - 8;
  v3 = this == 0;
  v4 = *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8;
  if (v3)
    v5 = 0;
  else
    v5 = (uint64_t)v2;
  llvm::ilist_traits<mlir::Block>::removeNodeFromList(v4, v5);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD **)(v5 + 16);
  *v7 = v6;
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  mlir::Block::~Block((void ***)v5);
  operator delete(v8);
}

Operation *mlir::Block::findAncestorOpInBlock(mlir::Block *this, Operation *a2)
{
  mlir::Block *v2;
  unint64_t v3;

  while (1)
  {
    v2 = (mlir::Block *)*((_QWORD *)a2 + 2);
    if (v2 == this)
      return a2;
    if (!v2)
      break;
    v3 = *((_QWORD *)v2 + 3) & 0xFFFFFFFFFFFFFFF8;
    if (!v3)
      break;
    a2 = *(Operation **)(v3 + 16);
    if (!a2)
      return a2;
  }
  return 0;
}

uint64_t mlir::Block::dropAllReferences(uint64_t this)
{
  mlir::GenericProgramPoint *v1;
  mlir::GenericProgramPoint *v2;
  uint64_t v3;

  v1 = (mlir::GenericProgramPoint *)(this + 32);
  v2 = *(mlir::GenericProgramPoint **)(this + 40);
  if (v2 != (mlir::GenericProgramPoint *)(this + 32))
  {
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v2);
      this = mlir::Operation::dropAllReferences(v3);
      v2 = (mlir::GenericProgramPoint *)*((_QWORD *)v2 + 1);
    }
    while (v2 != v1);
  }
  return this;
}

_QWORD *mlir::Block::dropAllDefinedValueUses(_QWORD *this)
{
  _QWORD **v1;
  _QWORD ***v2;
  _QWORD ***i;
  mlir::GenericProgramPoint *v4;
  mlir::GenericProgramPoint *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD **v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = (_QWORD **)this;
  v2 = (_QWORD ***)this[6];
  for (i = (_QWORD ***)this[7]; v2 != i; ++v2)
  {
    v9 = *v2;
    while (1)
    {
      v10 = *v9;
      if (!*v9)
        break;
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        *v11 = *v10;
        if (*v10)
          *(_QWORD *)(*v10 + 8) = v10[1];
      }
      *v10 = 0;
      v10[1] = 0;
      v10[3] = 0;
    }
  }
  v4 = (mlir::GenericProgramPoint *)(this + 4);
  v5 = (mlir::GenericProgramPoint *)this[5];
  if (v5 != (mlir::GenericProgramPoint *)(this + 4))
  {
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v5);
      this = (_QWORD *)mlir::Operation::dropAllDefinedValueUses(v6);
      v5 = (mlir::GenericProgramPoint *)*((_QWORD *)v5 + 1);
    }
    while (v5 != v4);
  }
  while (1)
  {
    v7 = *v1;
    if (!*v1)
      break;
    v8 = (_QWORD *)v7[1];
    if (v8)
    {
      *v8 = *v7;
      if (*v7)
        *(_QWORD *)(*v7 + 8) = v7[1];
    }
    *v7 = 0;
    v7[1] = 0;
    v7[3] = 0;
  }
  return this;
}

uint64_t mlir::Block::isOpOrderValid(mlir::Block *this)
{
  return (*((unsigned __int8 *)this + 24) >> 2) & 1;
}

uint64_t mlir::Block::invalidateOpOrder(uint64_t this)
{
  *(_QWORD *)(this + 24) &= ~4uLL;
  return this;
}

void mlir::Block::recomputeOpOrder(mlir::Block *this)
{
  mlir::GenericProgramPoint *v1;
  mlir::GenericProgramPoint *v2;
  int v3;
  uint64_t v4;

  *((_QWORD *)this + 3) |= 4uLL;
  v1 = (mlir::Block *)((char *)this + 32);
  v2 = (mlir::GenericProgramPoint *)*((_QWORD *)this + 5);
  if (v2 != (mlir::Block *)((char *)this + 32))
  {
    v3 = 5;
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v2);
      *(_DWORD *)(v4 + 32) = v3;
      v2 = (mlir::GenericProgramPoint *)*((_QWORD *)v2 + 1);
      v3 += 5;
    }
    while (v2 != v1);
  }
}

uint64_t mlir::Block::getArgumentTypes(mlir::Block *this)
{
  return *((_QWORD *)this + 6);
}

_QWORD *mlir::Block::addArgument(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v6 = (char *)a1[6];
  v7 = (char *)a1[7];
  v8 = v7;
  v9 = (v7 - v6) >> 3;
  v10 = operator new(0x28uLL);
  v11 = v10;
  *v10 = 0;
  v10[1] = a2 | 7;
  v10[2] = a1;
  v10[3] = v9;
  v10[4] = a3;
  v12 = a1[8];
  if ((unint64_t)v7 < v12)
  {
    *(_QWORD *)v7 = v10;
    v13 = (uint64_t)(v7 + 8);
    goto LABEL_23;
  }
  v14 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    abort();
  v15 = v12 - (_QWORD)v6;
  if (v15 >> 2 > v14)
    v14 = v15 >> 2;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v14;
  if (v16)
  {
    if (v16 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v17 = operator new(8 * v16);
    v18 = &v17[8 * v9];
    v19 = &v17[8 * v16];
    *v18 = v11;
    v13 = (uint64_t)(v18 + 1);
    v20 = (char *)(v7 - v6);
    if (v7 == v6)
      goto LABEL_21;
    goto LABEL_14;
  }
  v17 = 0;
  v18 = (_QWORD *)(8 * v9);
  v19 = 0;
  *(_QWORD *)(8 * v9) = v11;
  v13 = 8 * v9 + 8;
  v20 = (char *)(v7 - v6);
  if (v7 != v6)
  {
LABEL_14:
    v21 = (unint64_t)(v20 - 8);
    if (v21 < 0x58)
      goto LABEL_28;
    if (v7 - v17 - ((v7 - v6) & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_28;
    v22 = (v21 >> 3) + 1;
    v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = &v7[-v23];
    v18 = (_QWORD *)((char *)v18 - v23);
    v24 = &v17[8 * v9 - 16];
    v25 = (__int128 *)(v7 - 16);
    v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *v25;
      *(v24 - 1) = *(v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 2;
      v26 -= 4;
    }
    while (v26);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v28 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *--v18 = v28;
      }
      while (v8 != v6);
    }
    v8 = (char *)a1[6];
  }
LABEL_21:
  a1[6] = v18;
  a1[7] = v13;
  a1[8] = v19;
  if (v8)
    operator delete(v8);
LABEL_23:
  a1[7] = v13;
  return v11;
}

uint64_t mlir::Block::addArguments(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v10 = (_BYTE *)a1[6];
  v11 = (_BYTE *)a1[7];
  v12 = (v11 - v10) >> 3;
  v13 = v12 + a3;
  if (v12 + a3 <= (unint64_t)((uint64_t)(a1[8] - (_QWORD)v10) >> 3))
    goto LABEL_13;
  if (v13 >> 61)
    abort();
  v14 = 8 * v13;
  v15 = operator new(8 * v13);
  v16 = &v15[8 * v12];
  v17 = v16;
  if (v11 != v10)
  {
    v18 = v11 - v10 - 8;
    if (v18 < 0x58)
    {
      v17 = &v15[8 * v12];
      do
      {
LABEL_10:
        v26 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v17 - 1) = v26;
        v17 -= 8;
      }
      while (v11 != v10);
      goto LABEL_11;
    }
    v17 = &v15[8 * v12];
    if ((unint64_t)(v10 - v15) < 0x20)
      goto LABEL_10;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v21 = &v11[-v20];
    v17 = &v16[-v20];
    v22 = &v15[8 * v12 - 16];
    v23 = (__int128 *)(v11 - 16);
    v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *v23;
      *(v22 - 1) = *(v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 2;
      v24 -= 4;
    }
    while (v24);
    v11 = v21;
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_10;
  }
LABEL_11:
  a1[6] = v17;
  a1[7] = v16;
  a1[8] = &v15[v14];
  if (v10)
    operator delete(v10);
LABEL_13:
  if (a3 && a5)
  {
    v27 = 0;
    v28 = 8 * a5 - 8;
    v29 = a3 - 1;
    do
    {
      v30 = mlir::TypeRange::dereference_iterator(a2, v27);
      mlir::Block::addArgument(a1, v30, *(_QWORD *)(a4 + 8 * v27));
      if (v29 == v27)
        break;
      ++v27;
      v31 = v28;
      v28 -= 8;
    }
    while (v31);
  }
  return a1[6] + 8 * v12;
}

void mlir::Block::eraseArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::Block::eraseArguments(a1, (uint64_t (*)(uint64_t, void *))llvm::function_ref<BOOL ()(mlir::BlockArgument)>::callback_fn<mlir::Block::eraseArguments(llvm::BitVector const&)::$_0>, (uint64_t)&v2);
}

void mlir::Block::eraseArguments(uint64_t a1, uint64_t (*a2)(uint64_t, void *), uint64_t a3)
{
  void **v3;
  void **v4;
  void **v8;
  uint64_t v9;
  void **v10;

  v3 = *(void ***)(a1 + 48);
  v4 = *(void ***)(a1 + 56);
  if (v3 != v4)
  {
    while ((a2(a3, *v3) & 1) == 0)
    {
      if (++v3 == v4)
      {
        v3 = v4;
        break;
      }
    }
    if (v3 != *(void ***)(a1 + 56))
    {
      v8 = v3 + 1;
      v9 = *((_QWORD *)*v3 + 3);
      operator delete(*v3);
      v10 = *(void ***)(a1 + 56);
      if (v3 + 1 == v10)
      {
        if (v3 == v10)
          return;
LABEL_15:
        *(_QWORD *)(a1 + 56) = v3;
        return;
      }
      do
      {
        if (a2(a3, *v8))
        {
          if (*v8)
            operator delete(*v8);
        }
        else
        {
          *((_QWORD *)*v8 + 3) = v9;
          *v3++ = *v8;
          LODWORD(v9) = v9 + 1;
        }
        ++v8;
      }
      while (v8 != v10);
      if (v3 != *(void ***)(a1 + 56))
        goto LABEL_15;
    }
  }
}

void mlir::Block::getTerminator(mlir::GenericProgramPoint **this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(this[4]);
}

uint64_t mlir::Block::getSinglePredecessor(mlir::Block *this)
{
  _QWORD *v1;

  v1 = *(_QWORD **)this;
  if (!*(_QWORD *)this)
    return 0;
  if (*v1)
    return 0;
  return *(_QWORD *)(v1[2] + 16);
}

uint64_t mlir::Block::getUniquePredecessor(mlir::Block *this)
{
  _QWORD *v1;
  uint64_t result;

  v1 = *(_QWORD **)this;
  if (!*(_QWORD *)this)
    return 0;
  result = *(_QWORD *)(v1[2] + 16);
  while (1)
  {
    v1 = (_QWORD *)*v1;
    if (!v1)
      break;
    if (*(_QWORD *)(v1[2] + 16) != result)
      return 0;
  }
  return result;
}

char *mlir::Block::splitBlock(char *a1, uint64_t *a2)
{
  char *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (char *)operator new(0x48uLL);
  v5 = (uint64_t *)(v4 + 32);
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_QWORD *)v4 + 4) = v4 + 32;
  *((_QWORD *)v4 + 5) = v4 + 32;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 6) = 0;
  v6 = a1 + 8;
  if (!a1)
    v6 = 0;
  v7 = (uint64_t *)v6[1];
  llvm::ilist_traits<mlir::Block>::addNodeToList(*((_QWORD *)a1 + 3) & 0xFFFFFFFFFFFFFFF8, (uint64_t)v4);
  v8 = *v7;
  *((_QWORD *)v4 + 2) = v7;
  *((_QWORD *)v4 + 1) = v8;
  *(_QWORD *)(v8 + 8) = v4 + 8;
  *v7 = (uint64_t)(v4 + 8);
  v9 = (uint64_t *)(a1 + 32);
  if (a1 + 32 != (char *)a2 && v4 != a1)
  {
    llvm::ilist_traits<mlir::Operation>::transferNodesFromList((uint64_t)v5, (uint64_t)(a1 + 32), (uint64_t)a2, (uint64_t)(a1 + 32));
    v10 = *v9;
    v11 = *a2;
    *(_QWORD *)(v11 + 8) = v9;
    *v9 = v11;
    v12 = *v5;
    *(_QWORD *)(v10 + 8) = v5;
    *a2 = v12;
    *(_QWORD *)(v12 + 8) = a2;
    *v5 = v10;
  }
  return v4;
}

uint64_t mlir::PredecessorIterator::unwrap(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
}

unint64_t mlir::PredecessorIterator::getSuccessorIndex(mlir::BlockOperand **this)
{
  return mlir::BlockOperand::getOperandNumber(*this);
}

mlir::SuccessorRange *mlir::SuccessorRange::SuccessorRange(mlir::SuccessorRange *this, mlir::Block *a2)
{
  mlir::GenericProgramPoint *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = (mlir::GenericProgramPoint *)*((_QWORD *)a2 + 4);
  if (v3 != (mlir::Block *)((char *)a2 + 32))
  {
    v4 = *((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFF8;
    v5 = *(_QWORD *)(v4 + 8);
    if (v5 == v4 || *(_QWORD *)(v5 + 8) != v4)
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v3);
      v7 = *(unsigned int *)(v6 + 40);
      *((_QWORD *)this + 1) = v7;
      if ((_DWORD)v7)
        *(_QWORD *)this = (v6
                         + 16 * (((unint64_t)*(unsigned int *)(v6 + 44) >> 23) & 1)
                         + (((unint64_t)*(unsigned int *)(v6 + 44) >> 21) & 0x7F8)
                         + 71) & 0xFFFFFFFFFFFFFFF8;
    }
  }
  return this;
}

unint64_t *mlir::SuccessorRange::SuccessorRange(unint64_t *this, Operation *a2)
{
  unint64_t v2;

  *this = 0;
  this[1] = 0;
  v2 = *((unsigned int *)a2 + 10);
  this[1] = v2;
  if ((_DWORD)v2)
    *this = ((unint64_t)a2
           + 16 * (((unint64_t)*((unsigned int *)a2 + 11) >> 23) & 1)
           + (((unint64_t)*((unsigned int *)a2 + 11) >> 21) & 0x7F8)
           + 71) & 0xFFFFFFFFFFFFFFF8;
  return this;
}

uint64_t *mlir::BlockRange::BlockRange(uint64_t *result, uint64_t a2, uint64_t a3)
{
  *result = 0;
  result[1] = a3;
  if (a3)
    *result = a2 | 4;
  return result;
}

unint64_t *mlir::BlockRange::BlockRange(unint64_t *result, uint64_t a2, unint64_t a3)
{
  *result = a2 & 0xFFFFFFFFFFFFFFFBLL;
  result[1] = a3;
  return result;
}

uint64_t mlir::BlockRange::dereference_iterator(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = a1 & 0xFFFFFFFFFFFFFFF8;
  if ((a1 & 4) == 0)
    v2 = 0;
  v3 = v2 + 8 * a2;
  if (!(((unint64_t)(a1 & 4) >> 2) | ((a1 & 0xFFFFFFFFFFFFFFF8) == 0)))
    v3 = (a1 & 0xFFFFFFFFFFFFFFF8) + 32 * a2 + 24;
  return *(_QWORD *)v3;
}

uint64_t llvm::function_ref<BOOL ()(mlir::BlockArgument)>::callback_fn<mlir::Block::eraseArguments(llvm::BitVector const&)::$_0>(_QWORD **a1, uint64_t a2)
{
  return (*(_QWORD *)(**a1 + 8 * (*(_QWORD *)(a2 + 24) >> 6)) >> *(_QWORD *)(a2 + 24)) & 1;
}

uint64_t mlir::Builder::getUnknownLoc(mlir::UnknownLoc **this, mlir::MLIRContext *a2)
{
  return mlir::UnknownLoc::get(*this, a2);
}

void mlir::Builder::getFusedLoc(mlir::UnknownLoc **a1, uint64_t **a2, mlir::MLIRContext *a3, uint64_t a4)
{
  mlir::FusedLoc::get(a2, a3, a4, *a1);
}

uint64_t mlir::Builder::getFloat8E5M2Type(mlir::Float8E5M2Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float8E5M2Type::get(*this, a2);
}

uint64_t mlir::Builder::getFloat8E4M3FNType(mlir::Float8E4M3FNType **this, mlir::MLIRContext *a2)
{
  return mlir::Float8E4M3FNType::get(*this, a2);
}

uint64_t mlir::Builder::getFloat8E5M2FNUZType(mlir::Float8E5M2FNUZType **this, mlir::MLIRContext *a2)
{
  return mlir::Float8E5M2FNUZType::get(*this, a2);
}

uint64_t mlir::Builder::getFloat8E4M3FNUZType(mlir::Float8E4M3FNUZType **this, mlir::MLIRContext *a2)
{
  return mlir::Float8E4M3FNUZType::get(*this, a2);
}

uint64_t mlir::Builder::getFloat8E4M3B11FNUZType(mlir::Float8E4M3B11FNUZType **this, mlir::MLIRContext *a2)
{
  return mlir::Float8E4M3B11FNUZType::get(*this, a2);
}

uint64_t mlir::Builder::getBF16Type(mlir::BFloat16Type **this, mlir::MLIRContext *a2)
{
  return mlir::BFloat16Type::get(*this, a2);
}

uint64_t mlir::Builder::getF16Type(mlir::Float16Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float16Type::get(*this, a2);
}

uint64_t mlir::Builder::getTF32Type(mlir::FloatTF32Type **this, mlir::MLIRContext *a2)
{
  return mlir::FloatTF32Type::get(*this, a2);
}

uint64_t mlir::Builder::getF32Type(mlir::Float32Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float32Type::get(*this, a2);
}

uint64_t mlir::Builder::getF64Type(mlir::Float64Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float64Type::get(*this, a2);
}

uint64_t mlir::Builder::getF80Type(mlir::Float80Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float80Type::get(*this, a2);
}

uint64_t mlir::Builder::getF128Type(mlir::Float128Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float128Type::get(*this, a2);
}

uint64_t mlir::Builder::getIndexType(mlir::IndexType **this, mlir::MLIRContext *a2)
{
  return mlir::IndexType::get(*this, a2);
}

uint64_t mlir::Builder::getI1Type(mlir::Builder *this)
{
  return mlir::IntegerType::get(*(_QWORD *)this, 1u, 0);
}

uint64_t mlir::Builder::getIntegerType(mlir::Builder *this, unsigned int a2)
{
  return mlir::IntegerType::get(*(_QWORD *)this, a2, 0);
}

uint64_t mlir::Builder::getIntegerType(mlir::Builder *this, unsigned int a2, int a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)this;
  if (a3)
    v4 = 1;
  else
    v4 = 2;
  return mlir::IntegerType::get(v3, a2, v4);
}

uint64_t mlir::Builder::getFunctionType(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::FunctionType::get(*a1, a2, a3, a4, a5);
}

uint64_t mlir::Builder::getNoneType(mlir::NoneType **this, mlir::MLIRContext *a2)
{
  return mlir::NoneType::get(*this, a2);
}

uint64_t mlir::Builder::getNamedAttr(mlir::StringAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD v7[4];
  __int16 v8;
  uint64_t v9;

  v8 = 261;
  v7[0] = a2;
  v7[1] = a3;
  v5 = mlir::StringAttr::get(*a1, (mlir::MLIRContext *)v7);
  mlir::NamedAttribute::NamedAttribute(&v9, v5, a4);
  return v9;
}

uint64_t mlir::Builder::getStringAttr(mlir::StringAttr **a1, mlir::MLIRContext *a2)
{
  return mlir::StringAttr::get(*a1, a2);
}

uint64_t mlir::Builder::getUnitAttr(mlir::UnitAttr **this, mlir::MLIRContext *a2)
{
  return mlir::UnitAttr::get(*this, a2);
}

uint64_t mlir::Builder::getBoolAttr(mlir::BoolAttr **this, mlir::MLIRContext *a2)
{
  return mlir::BoolAttr::get(*this, a2);
}

uint64_t mlir::Builder::getDictionaryAttr(mlir::DictionaryAttr **a1, mlir::MLIRContext *a2, uint64_t a3)
{
  return mlir::DictionaryAttr::get(*a1, a2, a3);
}

uint64_t mlir::Builder::getIndexAttr(mlir::IndexType **this, mlir::MLIRContext *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *__p;
  unsigned int v7;

  v3 = mlir::IndexType::get(*this, a2);
  v7 = 64;
  __p = a2;
  v4 = mlir::IntegerAttr::get(v3, (llvm::APInt *)&__p);
  if (v7 >= 0x41 && __p)
    operator delete[](__p);
  return v4;
}

uint64_t mlir::Builder::getI64IntegerAttr(mlir::Builder *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *__p;
  unsigned int v7;

  v3 = mlir::IntegerType::get(*(_QWORD *)this, 0x40u, 0);
  v7 = 64;
  __p = a2;
  v4 = mlir::IntegerAttr::get(v3, (llvm::APInt *)&__p);
  if (v7 >= 0x41 && __p)
    operator delete[](__p);
  return v4;
}

uint64_t mlir::Builder::getI32VectorAttr(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v10 = a3;
  v5 = mlir::IntegerType::get(*a1, 0x20u, 0);
  v6 = (_QWORD *)mlir::VectorType::get((uint64_t)&v10, 1uLL, v5, 0, 0);
  v7 = v6;
  if (v6)
    v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
  else
    v8 = 0;
  return mlir::DenseElementsAttr::getFromRawBuffer(v7, v8, a2, 4 * a3, 4, 1, 1);
}

uint64_t mlir::Builder::getDenseBoolArrayAttr(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  return mlir::detail::DenseArrayAttrImpl<BOOL>::get(*a1, a2, a3);
}

uint64_t mlir::Builder::getDenseI32ArrayAttr(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  return mlir::detail::DenseArrayAttrImpl<int>::get(*a1, a2, a3);
}

uint64_t mlir::Builder::getDenseI64ArrayAttr(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  return mlir::detail::DenseArrayAttrImpl<long long>::get(*a1, a2, a3);
}

uint64_t mlir::Builder::getI32TensorAttr(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v10 = a3;
  v5 = mlir::IntegerType::get(*a1, 0x20u, 0);
  v6 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v10, 1, v5, 0);
  v7 = v6;
  if (v6)
    v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
  else
    v8 = 0;
  return mlir::DenseElementsAttr::getFromRawBuffer(v7, v8, a2, 4 * a3, 4, 1, 1);
}

uint64_t mlir::Builder::getI32IntegerAttr(mlir::Builder *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  void *__p;
  unsigned int v7;

  v3 = mlir::IntegerType::get(*(_QWORD *)this, 0x20u, 0);
  v7 = 32;
  __p = (void *)a2;
  v4 = mlir::IntegerAttr::get(v3, (llvm::APInt *)&__p);
  if (v7 >= 0x41 && __p)
    operator delete[](__p);
  return v4;
}

uint64_t mlir::Builder::getIntegerAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 isIndex;
  uint64_t v5;
  unsigned int IntOrFloatBitWidth;
  _BOOL4 isSignedInteger;
  unint64_t v8;
  uint64_t v9;
  void *__p;
  unsigned int v12;
  uint64_t v13;

  v13 = a2;
  isIndex = mlir::Type::isIndex((mlir::Type *)&v13);
  v5 = v13;
  if (isIndex)
  {
    v12 = 64;
    __p = (void *)a3;
  }
  else
  {
    IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v13);
    isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&v13);
    v12 = IntOrFloatBitWidth;
    if (IntOrFloatBitWidth > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, a3, isSignedInteger);
    }
    else
    {
      v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IntOrFloatBitWidth;
      if (!IntOrFloatBitWidth)
        v8 = 0;
      __p = (void *)(v8 & a3);
    }
  }
  v9 = mlir::IntegerAttr::get(v5, (llvm::APInt *)&__p);
  if (v12 >= 0x41 && __p)
    operator delete[](__p);
  return v9;
}

uint64_t mlir::Builder::getIntegerAttr(uint64_t a1, uint64_t a2, llvm::APInt *a3)
{
  return mlir::IntegerAttr::get(a2, a3);
}

llvm::APFloatBase *mlir::Builder::getF32FloatAttr(mlir::Float32Type **this, float a2, mlir::MLIRContext *a3)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  void *v6;
  llvm::APFloatBase *v7;
  void *v8;
  _BYTE v10[24];
  _BYTE v11[8];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  v4 = mlir::Float32Type::get(*this, a3);
  v5 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v10, a2);
  v6 = llvm::APFloatBase::IEEEsingle(v5);
  llvm::APFloat::Storage::Storage(v12, v10, v6);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v10);
  v7 = (llvm::APFloatBase *)mlir::FloatAttr::get(v4, (uint64_t)v11);
  v8 = (void *)v12[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v7) == v8)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v12);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v12);
  return v7;
}

llvm::APFloatBase *mlir::Builder::getF16FloatAttr(mlir::Float16Type **this, float a2, mlir::MLIRContext *a3)
{
  uint64_t v4;

  v4 = mlir::Float16Type::get(*this, a3);
  return mlir::FloatAttr::get(v4, a2);
}

llvm::APFloatBase *mlir::Builder::getFloatAttr(double a1, uint64_t a2, uint64_t a3)
{
  return mlir::FloatAttr::get(a3, a1);
}

uint64_t mlir::Builder::getFloatAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::FloatAttr::get(a2, a3);
}

uint64_t mlir::Builder::getArrayAttr(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  return mlir::ArrayAttr::get(*a1, a2, a3);
}

uint64_t mlir::Builder::getI64ArrayAttr(uint64_t *a1, void **a2, unint64_t a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x800000000;
  v6 = 8 * a3;
  if (8 * a3 < 0x41)
  {
    v7 = 0;
    v8 = v19;
    if (!a3)
      goto LABEL_11;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, a3, 8);
    v7 = v18;
    v8 = v17;
    if (!a3)
      goto LABEL_11;
  }
  v9 = &v8[v7];
  do
  {
    v10 = *a2;
    v11 = mlir::IntegerType::get(*a1, 0x40u, 0);
    v16 = 64;
    __p = v10;
    v12 = mlir::IntegerAttr::get(v11, (llvm::APInt *)&__p);
    if (v16 >= 0x41 && __p)
      operator delete[](__p);
    *v9++ = v12;
    ++a2;
    v6 -= 8;
  }
  while (v6);
  v7 = v18;
  v8 = v17;
LABEL_11:
  LODWORD(v18) = v7 + a3;
  v13 = mlir::ArrayAttr::get((mlir::MLIRContext *)*a1, (uint64_t)v8, (v7 + a3));
  if (v17 != v19)
    free(v17);
  return v13;
}

uint64_t mlir::Builder::getStrArrayAttr(mlir::MLIRContext **a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  mlir::StringAttr *v13;
  uint64_t v14;
  _QWORD v16[4];
  __int16 v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[9];

  v20[8] = *MEMORY[0x1E0C80C00];
  v6 = 2 * a3;
  v18 = v20;
  v19 = 0x800000000;
  if (16 * a3 < 0x81)
  {
    v7 = 0;
    v8 = v20;
    if (!a3)
      goto LABEL_8;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, a3, 8);
    v7 = v19;
    v8 = v18;
    if (!a3)
      goto LABEL_8;
  }
  v9 = &a2[v6];
  v10 = &v8[v7];
  do
  {
    v11 = *a2;
    v12 = a2[1];
    a2 += 2;
    v13 = *a1;
    v17 = 261;
    v16[0] = v11;
    v16[1] = v12;
    *v10++ = mlir::StringAttr::get(v13, (mlir::MLIRContext *)v16);
  }
  while (a2 != v9);
  v7 = v19;
  v8 = v18;
LABEL_8:
  LODWORD(v19) = v7 + a3;
  v14 = mlir::ArrayAttr::get(*a1, (uint64_t)v8, (v7 + a3));
  if (v18 != v20)
    free(v18);
  return v14;
}

_QWORD *mlir::Builder::getZeroAttr(mlir::IndexType **a1, mlir::MLIRContext *a2)
{
  uint64_t v3;
  void *v4;
  _QWORD *v16;
  uint64_t v19;
  uint64_t OperandRange;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24[2];
  void *__p;
  uint64_t v26;

  v3 = *(_QWORD *)a2;
  v4 = *(void **)(*(_QWORD *)a2 + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v16 = mlir::FloatAttr::get((uint64_t)a2, 0.0);
    if (!v16)
      return v16;
LABEL_37:
    mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v16 + 8);
    return v16;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    v19 = mlir::IndexType::get(*a1, a2);
    LODWORD(v26) = 64;
    __p = 0;
    v16 = (_QWORD *)mlir::IntegerAttr::get(v19, (llvm::APInt *)&__p);
    if (v26 >= 0x41 && __p)
      operator delete[](__p);
    if (!v16)
      return v16;
    goto LABEL_37;
  }
  if (!a2 || v4 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    if (v4 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      && v4 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
    {
      return 0;
    }
    __p = a2;
    v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v3 + 8);
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&__p);
    v24[0] = mlir::Builder::getZeroAttr(a1, OperandRange);
    v24[1] = v21;
    if (!v24[0])
      return 0;
    v22 = (_QWORD *)mlir::DenseElementsAttr::get((uint64_t)__p, v26, v24, 1uLL);
    v16 = v22;
    if (v22)
      mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v22 + 8);
    if (v16)
      return v16;
    return v16;
  }
  v24[0] = (uint64_t)a2;
  LODWORD(v26) = mlir::IntegerType::getWidth((mlir::IntegerType *)v24);
  if (v26 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
  else
    __p = 0;
  v23 = (_QWORD *)mlir::IntegerAttr::get((uint64_t)a2, (llvm::APInt *)&__p);
  v16 = v23;
  if (v23)
    mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v23 + 8);
  if (v26 < 0x41 || !__p)
    return v16;
  operator delete[](__p);
  return v16;
}

uint64_t mlir::Builder::getAffineSymbolExpr(mlir::MLIRContext **this, mlir *a2, mlir::MLIRContext *a3)
{
  return mlir::getAffineSymbolExpr(a2, *this, a3);
}

uint64_t mlir::Builder::getAffineConstantExpr(mlir::MLIRContext **this, mlir *a2, mlir::MLIRContext *a3)
{
  return mlir::getAffineConstantExpr(a2, *this, a3);
}

uint64_t mlir::Builder::getEmptyAffineMap(mlir::AffineMap **this, mlir::MLIRContext *a2)
{
  return mlir::AffineMap::get(*this, a2);
}

uint64_t mlir::Builder::getConstantAffineMap(mlir::MLIRContext **this, mlir *a2, mlir::MLIRContext *a3)
{
  uint64_t AffineConstantExpr;

  AffineConstantExpr = mlir::getAffineConstantExpr(a2, *this, a3);
  return mlir::AffineMap::get(0, 0, AffineConstantExpr);
}

uint64_t mlir::Builder::getSymbolIdentityMap(mlir::MLIRContext **this, uint64_t a2, mlir::MLIRContext *a3)
{
  uint64_t AffineSymbolExpr;

  AffineSymbolExpr = mlir::getAffineSymbolExpr(0, *this, a3);
  return mlir::AffineMap::get(0, 1, AffineSymbolExpr);
}

mlir::Operation *mlir::OpBuilder::insert(mlir::OpBuilder *this, mlir::Operation *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 3);
    llvm::ilist_traits<mlir::Operation>::addNodeToList(v4 + 32, (uint64_t)a2);
    mlir::GenericProgramPoint::~GenericProgramPoint(a2);
    v6 = *v5;
    *v7 = *v5;
    v7[1] = (uint64_t)v5;
    *(_QWORD *)(v6 + 8) = v7;
    *v5 = (uint64_t)v7;
    mlir::GenericProgramPoint::~GenericProgramPoint(a2);
  }
  v8 = *((_QWORD *)this + 1);
  if (v8)
    (*(void (**)(uint64_t, mlir::Operation *))(*(_QWORD *)v8 + 16))(v8, a2);
  return a2;
}

_OWORD *mlir::OpBuilder::createBlock(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;

  if (a3)
    v13 = a3;
  else
    v13 = (uint64_t *)a2;
  v14 = operator new(0x48uLL);
  *v14 = 0u;
  v14[1] = 0u;
  *((_QWORD *)v14 + 4) = v14 + 2;
  *((_QWORD *)v14 + 5) = v14 + 2;
  *((_QWORD *)v14 + 7) = 0;
  *((_QWORD *)v14 + 8) = 0;
  *((_QWORD *)v14 + 6) = 0;
  mlir::Block::addArguments(v14, a4, a5, a6, a7);
  llvm::ilist_traits<mlir::Block>::addNodeToList(a2, (uint64_t)v14);
  v15 = *v13;
  *((_QWORD *)v14 + 1) = *v13;
  *((_QWORD *)v14 + 2) = v13;
  *(_QWORD *)(v15 + 8) = (char *)v14 + 8;
  *v13 = (uint64_t)v14 + 8;
  a1[2] = v14;
  a1[3] = v14 + 2;
  v16 = a1[1];
  if (v16)
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 24))(v16, v14);
  return v14;
}

_OWORD *mlir::OpBuilder::createBlock(_QWORD *a1, mlir::Block *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t Parent;
  uint64_t v13;
  uint64_t *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;

  Parent = mlir::Block::getParent(this);
  v13 = Parent;
  if (this)
    v14 = (uint64_t *)((char *)this + 8);
  else
    v14 = (uint64_t *)Parent;
  v15 = operator new(0x48uLL);
  *v15 = 0u;
  v15[1] = 0u;
  *((_QWORD *)v15 + 4) = v15 + 2;
  *((_QWORD *)v15 + 5) = v15 + 2;
  *((_QWORD *)v15 + 7) = 0;
  *((_QWORD *)v15 + 8) = 0;
  *((_QWORD *)v15 + 6) = 0;
  mlir::Block::addArguments(v15, a3, a4, a5, a6);
  llvm::ilist_traits<mlir::Block>::addNodeToList(v13, (uint64_t)v15);
  v16 = *v14;
  *((_QWORD *)v15 + 1) = *v14;
  *((_QWORD *)v15 + 2) = v14;
  *(_QWORD *)(v16 + 8) = (char *)v15 + 8;
  *v14 = (uint64_t)v15 + 8;
  a1[2] = v15;
  a1[3] = v15 + 2;
  v17 = a1[1];
  if (v17)
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v17 + 24))(v17, v15);
  return v15;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create(mlir::OpBuilder *this, const mlir::OperationState *a2)
{
  mlir::GenericProgramPoint *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v3 = (mlir::GenericProgramPoint *)mlir::Operation::create(a2, a2);
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 3);
    llvm::ilist_traits<mlir::Operation>::addNodeToList(v4 + 32, (uint64_t)v3);
    mlir::GenericProgramPoint::~GenericProgramPoint(v3);
    v6 = *v5;
    *v7 = *v5;
    v7[1] = (uint64_t)v5;
    *(_QWORD *)(v6 + 8) = v7;
    *v5 = (uint64_t)v7;
    mlir::GenericProgramPoint::~GenericProgramPoint(v3);
  }
  v8 = *((_QWORD *)this + 1);
  if (v8)
    (*(void (**)(uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)v8 + 16))(v8, v3);
  return v3;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, unint64_t a13, uint64_t a14)
{
  uint64_t AttrData;
  uint64_t v21;
  const mlir::OperationState *v22;
  mlir::GenericProgramPoint *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v30;
  _QWORD v31[40];

  v31[38] = *MEMORY[0x1E0C80C00];
  v30 = a3;
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v30);
  mlir::OperationState::OperationState(v31, a2, AttrData, v21, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14);
  v23 = (mlir::GenericProgramPoint *)mlir::Operation::create((mlir::Operation *)v31, v22);
  v24 = a1[2];
  if (v24)
  {
    v25 = (uint64_t *)a1[3];
    llvm::ilist_traits<mlir::Operation>::addNodeToList(v24 + 32, (uint64_t)v23);
    mlir::GenericProgramPoint::~GenericProgramPoint(v23);
    v26 = *v25;
    *v27 = *v25;
    v27[1] = (uint64_t)v25;
    *(_QWORD *)(v26 + 8) = v27;
    *v25 = (uint64_t)v27;
    mlir::GenericProgramPoint::~GenericProgramPoint(v23);
  }
  v28 = a1[1];
  if (v28)
    (*(void (**)(uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)v28 + 16))(v28, v23);
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v23;
}

uint64_t mlir::OpBuilder::tryFold(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Values;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  mlir::GenericProgramPoint *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  mlir::Operation **v49;
  uint64_t v50;
  mlir::Operation *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  void *v61;
  uint64_t v62;
  uint64_t v63[4];
  _QWORD v64[4];
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  _QWORD v72[6];

  v72[4] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v6)
    v7 = a2 - 16;
  else
    v7 = 0;
  v65 = v7;
  v66 = v6;
  if (v6 > *(_DWORD *)(a3 + 12))
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v6, 8);
  v8 = a2 + 48;
  if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(a2 + 48)))
  {
    *(_DWORD *)(a3 + 8) = 0;
    if (v6 <= *(_DWORD *)(a3 + 12))
    {
      if (!(_DWORD)v6)
      {
        v15 = 0;
LABEL_19:
        v16 = 0;
        *(_DWORD *)(a3 + 8) = v15 + v6;
        return v16;
      }
      v9 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v6, 8);
      v9 = *(unsigned int *)(a3 + 8);
    }
    v13 = 0;
    v14 = *(_QWORD *)a3 + 8 * v9;
    do
    {
      *(_QWORD *)(v14 + 8 * v13) = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, v13);
      ++v13;
    }
    while (v6 != v13);
    v15 = *(_DWORD *)(a3 + 8);
    goto LABEL_19;
  }
  v70 = v72;
  v71 = 0x400000000;
  if (!mlir::Operation::fold(a2, (uint64_t)&v70) || !(_DWORD)v71)
  {
    v18 = v65;
    v17 = v66;
    *(_DWORD *)(a3 + 8) = 0;
    if (v17 <= *(unsigned int *)(a3 + 12))
    {
      if (!v17)
      {
        v22 = 0;
LABEL_27:
        v16 = 0;
        *(_DWORD *)(a3 + 8) = v22 + v17;
        goto LABEL_54;
      }
      v19 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v17, 8);
      v19 = *(unsigned int *)(a3 + 8);
    }
    v20 = 0;
    v21 = *(_QWORD *)a3 + 8 * v19;
    do
    {
      *(_QWORD *)(v21 + 8 * v20) = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, v20);
      ++v20;
    }
    while (v17 != v20);
    v22 = *(_DWORD *)(a3 + 8);
    goto LABEL_27;
  }
  v64[0] = *a1;
  memset(&v64[1], 0, 24);
  v67 = &v69;
  v68 = 0x100000000;
  v10 = *(_QWORD *)v8;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v63[0] = *(_QWORD *)(v10 + 8);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v63);
    mlir::OperandRange::getTypes(&v65, v63);
    v12 = v71;
    if (!(_DWORD)v71)
      goto LABEL_45;
  }
  else
  {
    Values = *(_QWORD *)(v10 + 24);
    mlir::OperandRange::getTypes(&v65, v63);
    v12 = v71;
    if (!(_DWORD)v71)
    {
LABEL_45:
      if ((_DWORD)v68)
      {
        v34 = (uint64_t *)v67;
        v35 = 8 * v68;
        do
        {
          v36 = (mlir::GenericProgramPoint *)*v34;
          v37 = a1[2];
          if (v37)
          {
            v38 = (uint64_t *)a1[3];
            llvm::ilist_traits<mlir::Operation>::addNodeToList(v37 + 32, *v34);
            mlir::GenericProgramPoint::~GenericProgramPoint(v36);
            v39 = *v38;
            *v40 = *v38;
            v40[1] = (uint64_t)v38;
            *(_QWORD *)(v39 + 8) = v40;
            *v38 = (uint64_t)v40;
            mlir::GenericProgramPoint::~GenericProgramPoint(v36);
          }
          v41 = a1[1];
          if (v41)
            (*(void (**)(uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)v41 + 16))(v41, v36);
          ++v34;
          v35 -= 8;
        }
        while (v35);
        v16 = 1;
        v42 = v67;
        if (v67 == &v69)
          goto LABEL_54;
      }
      else
      {
        v16 = 1;
        v42 = v67;
        if (v67 == &v69)
          goto LABEL_54;
      }
LABEL_53:
      free(v42);
      goto LABEL_54;
    }
  }
  v23 = v63[0];
  v24 = v63[1];
  v25 = v63[2];
  v62 = v63[3];
  v61 = (void *)(a3 + 16);
  v26 = 8 * v12;
  v27 = v70;
  while (1)
  {
    if (v23 == v25 && v62 == v24)
      goto LABEL_45;
    v28 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v23, v24) + 8) & 0xFFFFFFFFFFFFFFF8;
    v29 = *v27 & 0xFFFFFFFFFFFFFFF8;
    if ((*v27 & 4) != 0)
    {
      if (v29)
        break;
    }
    if (!Values)
    {
      v47 = v65;
      v44 = v66;
      *(_DWORD *)(a3 + 8) = 0;
      if (v44 <= *(unsigned int *)(a3 + 12))
      {
        if (!v44)
          goto LABEL_86;
        v48 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v61, v44, 8);
        v48 = *(unsigned int *)(a3 + 8);
      }
      v56 = 0;
      v57 = *(_QWORD *)a3 + 8 * v48;
      do
      {
        *(_QWORD *)(v57 + 8 * v56) = mlir::detail::OpResultImpl::getNextResultAtOffset(v47, v56);
        ++v56;
      }
      while (v44 != v56);
      goto LABEL_83;
    }
    v31 = (*(uint64_t (**)(uint64_t, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)Values + 24))(Values, v64, *v27 & 0xFFFFFFFFFFFFFFF8, v28, *(_QWORD *)(a2 + 24));
    if (!v31)
    {
      if ((_DWORD)v68)
      {
        v49 = (mlir::Operation **)v67;
        v50 = 8 * v68;
        do
        {
          v51 = *v49++;
          mlir::Operation::erase(v51);
          v50 -= 8;
        }
        while (v50);
      }
      v52 = v65;
      v44 = v66;
      *(_DWORD *)(a3 + 8) = 0;
      if (v44 > *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v61, v44, 8);
        v53 = *(unsigned int *)(a3 + 8);
LABEL_81:
        v58 = 0;
        v59 = *(_QWORD *)a3 + 8 * v53;
        do
        {
          *(_QWORD *)(v59 + 8 * v58) = mlir::detail::OpResultImpl::getNextResultAtOffset(v52, v58);
          ++v58;
        }
        while (v44 != v58);
LABEL_83:
        v60 = *(_DWORD *)(a3 + 8);
LABEL_84:
        v16 = 0;
        *(_DWORD *)(a3 + 8) = v60 + v44;
        v42 = v67;
        if (v67 != &v69)
          goto LABEL_53;
        goto LABEL_54;
      }
      if (v44)
      {
        v53 = 0;
        goto LABEL_81;
      }
LABEL_86:
      v60 = 0;
      goto LABEL_84;
    }
    v32 = v31;
    v33 = v68;
    if (v68 >= (unint64_t)HIDWORD(v68))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, &v69, v68 + 1, 8);
      v33 = v68;
    }
    *((_QWORD *)v67 + v33) = v32;
    LODWORD(v68) = v68 + 1;
    v29 = v32 - 16;
    v30 = *(unsigned int *)(a3 + 8);
    if (v30 >= *(unsigned int *)(a3 + 12))
    {
LABEL_44:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v61, v30 + 1, 8);
      v30 = *(unsigned int *)(a3 + 8);
    }
LABEL_37:
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v30) = v29;
    ++*(_DWORD *)(a3 + 8);
    ++v27;
    ++v24;
    v26 -= 8;
    if (!v26)
      goto LABEL_45;
  }
  if ((*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF8) == v28)
  {
    v30 = *(unsigned int *)(a3 + 8);
    if (v30 >= *(unsigned int *)(a3 + 12))
      goto LABEL_44;
    goto LABEL_37;
  }
  v45 = v65;
  v44 = v66;
  *(_DWORD *)(a3 + 8) = 0;
  if (v44 > *(unsigned int *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v61, v44, 8);
    v46 = *(unsigned int *)(a3 + 8);
    goto LABEL_71;
  }
  if (v44)
  {
    v46 = 0;
LABEL_71:
    v54 = 0;
    v55 = *(_QWORD *)a3 + 8 * v46;
    do
    {
      *(_QWORD *)(v55 + 8 * v54) = mlir::detail::OpResultImpl::getNextResultAtOffset(v45, v54);
      ++v54;
    }
    while (v44 != v54);
    goto LABEL_83;
  }
  v16 = 0;
  v42 = v67;
  if (v67 != &v69)
    goto LABEL_53;
LABEL_54:
  if (v70 != v72)
    free(v70);
  return v16;
}

mlir::GenericProgramPoint *mlir::OpBuilder::clone(uint64_t **this, mlir::Operation *a2, mlir::IRMapping *a3)
{
  char v6;
  unsigned int *v7;
  mlir::GenericProgramPoint *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t i;
  uint64_t v13;
  mlir::GenericProgramPoint *v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  mlir::ForwardIterator *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  mlir::OpBuilder *v24;

  v6 = mlir::Operation::CloneOptions::all((mlir::Operation::CloneOptions *)this);
  v7 = mlir::Operation::clone((uint64_t)a2, (uint64_t)a3, v6);
  v8 = (mlir::GenericProgramPoint *)v7;
  if (this[1])
  {
    v24 = (mlir::OpBuilder *)this;
    v9 = v7[11];
    if ((v9 & 0x7FFFFF) != 0)
    {
      v10 = (((unint64_t)&v7[4 * ((v9 >> 23) & 1) + 17] + ((v9 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
          + 32 * v7[10];
      v11 = v10 + 24 * (v9 & 0x7FFFFF);
      do
      {
        for (i = *(_QWORD *)(v10 + 8); i != v10; i = *(_QWORD *)(i + 8))
        {
          v13 = i - 8;
          if (!i)
            v13 = 0;
          v14 = (mlir::GenericProgramPoint *)(v13 + 32);
          v15 = *(mlir::GenericProgramPoint **)(v13 + 40);
          if (v15 != (mlir::GenericProgramPoint *)(v13 + 32))
          {
            do
            {
              v16 = (mlir::GenericProgramPoint *)*((_QWORD *)v15 + 1);
              mlir::GenericProgramPoint::~GenericProgramPoint(v15);
              mlir::detail::walk<mlir::ForwardIterator>(v17, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::OpBuilder::clone(mlir::Operation&,mlir::IRMapping &)::$_0>, (uint64_t)&v24, 1);
              v15 = v16;
            }
            while (v16 != v14);
          }
        }
        v10 += 24;
      }
      while (v10 != v11);
    }
  }
  v18 = this[2];
  if (v18)
  {
    v19 = this[3];
    llvm::ilist_traits<mlir::Operation>::addNodeToList((uint64_t)(v18 + 4), (uint64_t)v8);
    mlir::GenericProgramPoint::~GenericProgramPoint(v8);
    v20 = *v19;
    *v21 = *v19;
    v21[1] = (uint64_t)v19;
    *(_QWORD *)(v20 + 8) = v21;
    *v19 = (uint64_t)v21;
    mlir::GenericProgramPoint::~GenericProgramPoint(v8);
  }
  v22 = this[1];
  if (v22)
    (*(void (**)(uint64_t *, mlir::GenericProgramPoint *))(*v22 + 16))(v22, v8);
  return v8;
}

void mlir::OpBuilder::clone(uint64_t **this, mlir::Operation *a2)
{
  _QWORD v2[2];
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  llvm *v7;
  uint64_t v8;
  unsigned int v9;

  v2[0] = 0;
  v2[1] = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  mlir::OpBuilder::clone(this, a2, (mlir::IRMapping *)v2);
  llvm::deallocate_buffer(v7, (void *)(16 * v9));
}

void sub_1803C8254(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, llvm *a13, uint64_t a14, unsigned int a15)
{
  llvm::deallocate_buffer(a13, (void *)(16 * a15));
}

void sub_1803C8268(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, llvm *a10, uint64_t a11, unsigned int a12)
{
  llvm::deallocate_buffer(a10, (void *)(16 * a12));
}

uint64_t sub_1803C827C()
{
  uint64_t v0;

  return v0;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::OpBuilder::clone(mlir::Operation&,mlir::IRMapping &)::$_0>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t mlir::ElementsAttr::getType(mlir::ElementsAttr *this)
{
  return (**(uint64_t (***)(void))(*((_QWORD *)this + 1) + 24))();
}

uint64_t mlir::MemRefLayoutAttrInterface::verifyLayout(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a1[1] + 16))(a1[1], *a1, a2, a3, a4, a5);
}

uint64_t mlir::ElementsAttr::getElementType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
  v4[1] = v2;
  return mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v4);
}

uint64_t mlir::ElementsAttr::getNumElements(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *ArgAttrsAttr;
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
  v6[1] = v2;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v6);
  return mlir::ShapedType::getNumElements(ArgAttrsAttr, v4);
}

uint64_t mlir::ElementsAttr::isValidIndex(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t ArgAttrsAttr;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v12);
  if (!v6 && a4 == 1 && !*a3)
    return 1;
  if (v6 == a4)
  {
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v12);
    if (a4 << 32)
    {
      v8 = 0;
      v9 = (int)a4;
      while (1)
      {
        v10 = *(_QWORD *)((char *)a3 + (v8 >> 29));
        if (v10 < 0 || v10 >= *(_QWORD *)(ArgAttrsAttr + 8 * (v8 >> 32)))
          break;
        v8 += 0x100000000;
        if (!--v9)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  return 0;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t ArgAttrsAttr;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
  v13[1] = v6;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v13);
  if (!v7 && a4 == 1 && !*a3)
    return 1;
  if (v7 == a4)
  {
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v13);
    if (a4 << 32)
    {
      v9 = 0;
      v10 = (int)a4;
      while (1)
      {
        v11 = *(_QWORD *)((char *)a3 + (v9 >> 29));
        if (v11 < 0 || v11 >= *(_QWORD *)(ArgAttrsAttr + 8 * (v9 >> 32)))
          break;
        v9 += 0x100000000;
        if (!--v10)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t mlir::ElementsAttr::getFlattenedIndex(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  int v5;
  uint64_t ArgAttrsAttr;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v3 = a1;
  if (a1)
    a1 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8);
  v15[0] = v3;
  v15[1] = a1;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v15);
  v5 = v4;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v15);
  if (v5 - 1 < 0)
    return 0;
  v7 = ArgAttrsAttr;
  result = 0;
  v9 = 8 * (v5 - 1);
  v10 = (uint64_t *)(v7 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v12 = 1;
  do
  {
    v13 = *v11--;
    result += v13 * v12;
    v14 = *v10--;
    v12 *= v14;
    --v5;
  }
  while (v5);
  return result;
}

uint64_t mlir::detail::verifyAffineMapAsLayout(uint64_t a1, uint64_t a2, const char *a3, void (*a4)(_QWORD *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  int *v19;
  char *v20;
  char *v21;
  __int128 v22;
  unsigned int NumDims;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  BOOL v42;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  int64_t v46;
  uint64_t v47;
  int v48;
  const char *v49;
  uint64_t v50;
  _QWORD v51[3];
  void *v52;
  unsigned int v53;
  unsigned int v54;
  _BYTE v55[96];
  void *v56;
  _QWORD *v57;
  void *__p;
  _QWORD **v59;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v47 = a1;
  if (a3 == (const char *)mlir::AffineMap::getNumDims((mlir::AffineMap *)&v47))
    return 1;
  a4(v51, a5);
  if (v51[0])
  {
    v48 = 3;
    v49 = "memref layout mismatch between rank and affine map: ";
    v50 = 52;
    v9 = &v48;
    v10 = (char *)v52;
    if (v53 >= v54)
    {
      v37 = v53 + 1;
      if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
      {
        v43 = (char *)&v48 - (_BYTE *)v52;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
        v10 = (char *)v52;
        v9 = (int *)((char *)v52 + v43);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
        v9 = &v48;
        v10 = (char *)v52;
      }
    }
    v11 = &v10[24 * v53];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
    *(_OWORD *)v11 = v12;
    v13 = ++v53;
    if (v51[0])
    {
      v48 = 5;
      v49 = a3;
      v14 = &v48;
      v15 = (char *)v52;
      if (v13 >= v54)
      {
        v39 = v13 + 1;
        v40 = (char *)v52 + 24 * v13 > (char *)&v48;
        if (v52 <= &v48 && v40)
        {
          v45 = (char *)&v48 - (_BYTE *)v52;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
          v15 = (char *)v52;
          v14 = (int *)((char *)v52 + v45);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
          v14 = &v48;
          v15 = (char *)v52;
        }
      }
      v16 = &v15[24 * v53];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      v18 = ++v53;
      if (v51[0])
      {
        v48 = 3;
        v49 = " != ";
        v50 = 4;
        v19 = &v48;
        v20 = (char *)v52;
        if (v18 >= v54)
        {
          v41 = v18 + 1;
          v42 = (char *)v52 + 24 * v18 > (char *)&v48;
          if (v52 <= &v48 && v42)
          {
            v46 = (char *)&v48 - (_BYTE *)v52;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
            v20 = (char *)v52;
            v19 = (int *)((char *)v52 + v46);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
            v19 = &v48;
            v20 = (char *)v52;
          }
        }
        v21 = &v20[24 * v53];
        v22 = *(_OWORD *)v19;
        *((_QWORD *)v21 + 2) = *((_QWORD *)v19 + 2);
        *(_OWORD *)v21 = v22;
        ++v53;
      }
    }
  }
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v47);
  if (v51[0])
  {
    v48 = 5;
    v49 = (const char *)NumDims;
    v24 = &v48;
    v25 = (char *)v52;
    if (v53 >= v54)
    {
      v38 = v53 + 1;
      if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
      {
        v44 = (char *)&v48 - (_BYTE *)v52;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
        v25 = (char *)v52;
        v24 = (int *)((char *)v52 + v44);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
        v24 = &v48;
        v25 = (char *)v52;
      }
    }
    v26 = &v25[24 * v53];
    v27 = *(_OWORD *)v24;
    *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
    *(_OWORD *)v26 = v27;
    ++v53;
  }
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
  if (v51[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
  if (v60)
  {
    v28 = (_QWORD **)__p;
    if (__p)
    {
      v29 = v59;
      v30 = __p;
      if (v59 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v59 = v28;
      operator delete(v30);
    }
    v31 = v56;
    if (v56)
    {
      v32 = v57;
      v33 = v56;
      if (v57 != v56)
      {
        do
        {
          v35 = (void *)*--v32;
          v34 = v35;
          *v32 = 0;
          if (v35)
            operator delete[](v34);
        }
        while (v32 != v31);
        v33 = v56;
      }
      v57 = v31;
      operator delete(v33);
    }
    if (v52 != v55)
      free(v52);
  }
  return v8;
}

uint64_t mlir::AffineMapAttr::get(unint64_t a1)
{
  mlir::MLIRContext *LHS;
  unsigned __int8 **AttributeUniquer;
  unint64_t v4;
  _QWORD v5[2];

  v4 = a1;
  LHS = (mlir::MLIRContext *)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v4);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(LHS);
  v5[0] = &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id;
  v5[1] = LHS;
  return mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail20AffineMapAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13AffineMapAttrEJRNS1_9AffineMapEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id, &v4);
}

uint64_t mlir::AffineMapAttr::getValue(mlir::AffineMapAttr *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 8);
}

uint64_t mlir::ArrayAttr::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **AttributeUniquer;
  __int128 v6;
  _QWORD v7[2];

  *(_QWORD *)&v6 = a2;
  *((_QWORD *)&v6 + 1) = a3;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v7[0] = &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
  v7[1] = a1;
  return mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)v7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, &v6);
}

uint64_t mlir::ArrayAttr::getValue(mlir::ArrayAttr *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 8);
}

uint64_t mlir::DenseArrayAttr::get(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v9;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[2];
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];

  v11 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v12[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v12[1] = Context;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeERjRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v18[1] = v12;
  v15 = v11;
  v16 = a2;
  v17[0] = a3;
  v17[1] = a4;
  v9 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v15, &v16, (uint64_t)v17);
  v13[0] = &v15;
  v13[1] = v18;
  v14 = &v15;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v13);
}

uint64_t mlir::DenseArrayAttr::getRawData(mlir::DenseArrayAttr *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 24);
}

uint64_t mlir::DenseStringElementsAttr::get(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  BOOL v8;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[2];

  v10[0] = a1;
  v10[1] = a2;
  v9[0] = a3;
  v9[1] = a4;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v10);
  v8 = a4 == 1;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id;
  v11[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail30DenseStringElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_23DenseStringElementsAttrEJRNS1_10ShapedTypeERNS_8ArrayRefINS_9StringRefEEEbEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_, (uint64_t)v11, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id, (uint64_t)v10, (uint64_t)v9, (unsigned __int8 *)&v8);
}

__n128 mlir::DenseResourceElementsAttr::getRawHandle@<Q0>(mlir::DenseResourceElementsAttr *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)this;
  result = *(__n128 *)(*(_QWORD *)this + 24);
  *a2 = result;
  a2[1].n128_u64[0] = *(_QWORD *)(v2 + 40);
  return result;
}

uint64_t mlir::FloatAttr::get(uint64_t a1, uint64_t a2)
{
  mlir::MLIRContext *Context;
  llvm::APFloatBase *AttributeUniquer;
  uint64_t v6;
  _QWORD v7[2];

  v6 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  AttributeUniquer = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(Context);
  v7[0] = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  v7[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_, (uint64_t)v7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, &v6, a2);
}

llvm::APFloatBase *mlir::FloatAttr::get(uint64_t a1, double a2)
{
  mlir::MLIRContext *v3;
  llvm::APFloatBase *v4;
  void *v5;
  llvm::APFloatBase *v6;
  llvm::APFloatBase *v7;
  void *v8;
  void *v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  llvm::APFloatBase *v22;
  void *v23;
  void *FloatSemantics;
  mlir::MLIRContext *Context;
  llvm::APFloatBase *AttributeUniquer;
  void *v27;
  char v28;
  void *v29;
  void *v30;
  mlir::MLIRContext *v31;
  _BYTE v32[8];
  _QWORD v33[4];

  v33[3] = *MEMORY[0x1E0C80C00];
  v29 = (void *)a1;
  if (!mlir::Type::isF64((mlir::Type *)&v29))
  {
    v10 = *(void **)(*(_QWORD *)v29 + 136);
    v11 = v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
       || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
    v12 = v11 || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
    v13 = v12 || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
    v14 = v13 || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
    v15 = v14 || v10 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
    v16 = v15 || v10 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
    v17 = v16 || v10 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
    v18 = v17 || v10 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
    v19 = v18 || v10 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
    v20 = v19 || v10 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
    if (v20 || v10 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      v28 = 0;
      v22 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v30, a2);
      v23 = llvm::APFloatBase::IEEEdouble(v22);
      llvm::APFloat::Storage::Storage(v33, &v30, v23);
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v30);
      v30 = v29;
      FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v30);
      llvm::APFloat::convert((uint64_t)v32, FloatSemantics, 1, &v28);
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v29);
      AttributeUniquer = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(Context);
      v30 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
      v31 = Context;
      v7 = (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_, (uint64_t)&v30, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, (uint64_t *)&v29, (uint64_t)v32);
      v27 = (void *)v33[0];
      if (llvm::APFloatBase::PPCDoubleDouble(v7) != v27)
        goto LABEL_3;
LABEL_41:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v33);
      return v7;
    }
  }
  v3 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v29);
  v4 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v30, a2);
  v5 = llvm::APFloatBase::IEEEdouble(v4);
  llvm::APFloat::Storage::Storage(v33, &v30, v5);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v30);
  v6 = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(v3);
  v30 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  v31 = v3;
  v7 = (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(v6, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeENS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)&v30, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, (uint64_t *)&v29, (uint64_t)v32);
  v8 = (void *)v33[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v7) == v8)
    goto LABEL_41;
LABEL_3:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v33);
  return v7;
}

llvm::detail::DoubleAPFloat *mlir::FloatAttr::getValue@<X0>(mlir::FloatAttr *this@<X0>, uint64_t a2@<X8>)
{
  llvm::detail::DoubleAPFloat *v2;
  const llvm::detail::DoubleAPFloat *v3;
  void *v4;

  v2 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  v3 = (const llvm::detail::DoubleAPFloat *)(*(_QWORD *)this + 24);
  v4 = *(void **)v3;
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v4)
    return llvm::detail::DoubleAPFloat::DoubleAPFloat(v2, v3);
  else
    return (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat(v2, v3);
}

uint64_t mlir::IntegerAttr::get(uint64_t a1, llvm::APInt *a2)
{
  _BOOL4 isSignlessInteger;
  mlir::MLIRContext *Context;
  mlir::BoolAttr *v5;
  unsigned int v6;
  BOOL v7;
  int v9;
  uint64_t v10;

  v10 = a1;
  isSignlessInteger = mlir::Type::isSignlessInteger((mlir::Type *)&v10, 1);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  v5 = Context;
  if (!isSignlessInteger)
    return mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(Context, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, &v10, (uint64_t)a2);
  v6 = *((_DWORD *)a2 + 2);
  if (v6 > 0x40)
    v7 = llvm::APInt::countLeadingZerosSlowCase(a2) == v6;
  else
    v7 = *(_QWORD *)a2 == 0;
  v9 = v7;
  return mlir::BoolAttr::get(v5, (mlir::MLIRContext *)(v9 ^ 1u));
}

uint64_t mlir::IntegerAttr::get(uint64_t a1, uint64_t a2)
{
  unsigned int Width;
  _BOOL4 isSignedInteger;
  unint64_t v5;
  mlir::MLIRContext *Context;
  uint64_t v7;
  uint64_t v9;
  void *__p;
  unsigned int v11;
  uint64_t v12;

  v12 = a1;
  if (mlir::Type::isIndex((mlir::Type *)&v12))
  {
    v11 = 64;
    __p = (void *)a2;
  }
  else
  {
    v9 = v12;
    Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v9);
    isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&v9);
    v11 = Width;
    if (Width > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, a2, isSignedInteger);
    }
    else
    {
      v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)Width;
      if (!Width)
        v5 = 0;
      __p = (void *)(v5 & a2);
    }
  }
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt &>(Context, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, &v12, (uint64_t)&__p);
  if (v11 >= 0x41 && __p)
    operator delete[](__p);
  return v7;
}

void *mlir::IntegerAttr::getValue@<X0>(void *this@<X0>, llvm::APInt *a2@<X8>)
{
  const void **v2;
  unsigned int v3;

  v2 = (const void **)(*(_QWORD *)this + 16);
  v3 = *(_DWORD *)(*(_QWORD *)this + 24);
  *((_DWORD *)a2 + 2) = v3;
  if (v3 > 0x40)
    return llvm::APInt::initSlowCase(a2, v2);
  *(_QWORD *)a2 = *v2;
  return this;
}

uint64_t mlir::IntegerSetAttr::get(unint64_t a1)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unint64_t v4;
  _QWORD v5[2];

  v4 = a1;
  Context = (mlir::MLIRContext *)mlir::IntegerSet::getContext((mlir::IntegerSet *)&v4);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v5[0] = &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id;
  v5[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail21IntegerSetAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14IntegerSetAttrEJRNS1_10IntegerSetEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id, &v4);
}

uint64_t mlir::OpaqueAttr::getChecked(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, const void **a4, const char *a5, uint64_t a6)
{
  mlir::MLIRContext *Context;
  uint64_t v12;
  unsigned __int8 **AttributeUniquer;
  unsigned int v14;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];
  uint64_t *v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[2];

  v16 = a3;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v12 = v16;
  if (!mlir::OpaqueAttr::verify(a1, a2, v16, a4, a5, a6))
    return 0;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v17[0] = &mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id;
  v17[1] = Context;
  v23[0] = _ZN4llvm12function_refIFvPN4mlir6detail17OpaqueAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10OpaqueAttrEJRNS1_10StringAttrERNS_9StringRefERNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v23[1] = v17;
  v20 = v12;
  v21[0] = a4;
  v21[1] = a5;
  v22 = a6;
  v14 = llvm::hash_combine<mlir::StringAttr,llvm::StringRef,mlir::Type>(&v20, (uint64_t)v21, &v22);
  v18[0] = &v20;
  v18[1] = v23;
  v19 = &v20;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id, v14, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v19, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v18);
}

uint64_t mlir::OpaqueAttr::getAttrData(mlir::OpaqueAttr *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 16);
}

uint64_t mlir::SparseElementsAttr::get(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v8;
  __int128 v10;
  _QWORD v11[2];
  _QWORD v12[2];
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  *(_QWORD *)&v10 = a1;
  *((_QWORD *)&v10 + 1) = a2;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id;
  v11[1] = Context;
  v17[0] = _ZN4llvm12function_refIFvPN4mlir6detail25SparseElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_18SparseElementsAttrEJRNS1_10ShapedTypeENS1_20DenseIntElementsAttrERNS1_17DenseElementsAttrEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v17[1] = v11;
  v14 = v10;
  v15 = a3;
  v16 = a4;
  v8 = llvm::hash_combine<mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr>(&v14, &v15, &v16);
  v12[0] = &v14;
  v12[1] = v17;
  v13 = &v14;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v12);
}

uint64_t mlir::SparseElementsAttr::getChecked(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::MLIRContext *Context;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **AttributeUniquer;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD *v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v16 = a3;
  v17 = a4;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = v16;
  v12 = v17;
  if (!mlir::SparseElementsAttr::verify(a1, a2, v16, v17, a5, a6))
    return 0;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v18[0] = &mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id;
  v18[1] = Context;
  v24[0] = _ZN4llvm12function_refIFvPN4mlir6detail25SparseElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_18SparseElementsAttrEJRNS1_10ShapedTypeERNS1_20DenseIntElementsAttrERNS1_17DenseElementsAttrEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v24[1] = v18;
  v21[0] = v11;
  v21[1] = v12;
  v22 = a5;
  v23 = a6;
  v14 = llvm::hash_combine<mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr>(v21, &v22, &v23);
  v19[0] = v21;
  v19[1] = v24;
  v20 = v21;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id, v14, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v20, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v19);
}

uint64_t mlir::SparseElementsAttr::getValues(mlir::SparseElementsAttr *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 32);
}

uint64_t mlir::StridedLayoutAttr::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 **AttributeUniquer;
  unsigned int v9;
  _QWORD v11[2];
  _QWORD v12[2];
  uint64_t *v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];

  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id;
  v11[1] = a1;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail24StridedLayoutAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_17StridedLayoutAttrEJxNS_8ArrayRefIxEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v16[1] = v11;
  v14 = a2;
  v15[0] = a3;
  v15[1] = a4;
  v9 = llvm::hash_combine<long long,llvm::ArrayRef<long long>>(&v14, (uint64_t)v15);
  v12[0] = &v14;
  v12[1] = v16;
  v13 = &v14;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v12);
}

uint64_t mlir::SymbolRefAttr::get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v7;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];
  uint64_t *v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];

  v9 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v10[1] = Context;
  v15[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v15[1] = v10;
  v13 = v9;
  v14[0] = a2;
  v14[1] = a3;
  v7 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v13, (uint64_t)v14);
  v11[0] = &v13;
  v11[1] = v15;
  v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

uint64_t mlir::TypeAttr::get(uint64_t a1)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v4;
  _QWORD v5[2];

  v4 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v4);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v5[0] = &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id;
  v5[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail15TypeAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8TypeAttrEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id, &v4);
}

uint64_t *mlir::BuiltinDialect::registerAttributes(mlir::BuiltinDialect *this)
{
  mlir::Dialect::addAttributes<mlir::AffineMapAttr,mlir::ArrayAttr,mlir::DenseArrayAttr,mlir::DenseIntOrFPElementsAttr,mlir::DenseStringElementsAttr,mlir::DenseResourceElementsAttr,mlir::DictionaryAttr,mlir::FloatAttr,mlir::IntegerAttr,mlir::IntegerSetAttr,mlir::OpaqueAttr,mlir::SparseElementsAttr,mlir::StridedLayoutAttr,mlir::StringAttr,mlir::SymbolRefAttr,mlir::TypeAttr,mlir::UnitAttr>((uint64_t)this);
  return mlir::Dialect::addAttribute<mlir::DistinctAttr>((uint64_t)this);
}

_QWORD *mlir::Dialect::addAttributes<mlir::AffineMapAttr,mlir::ArrayAttr,mlir::DenseArrayAttr,mlir::DenseIntOrFPElementsAttr,mlir::DenseStringElementsAttr,mlir::DenseResourceElementsAttr,mlir::DictionaryAttr,mlir::FloatAttr,mlir::IntegerAttr,mlir::IntegerSetAttr,mlir::OpaqueAttr,mlir::SparseElementsAttr,mlir::StridedLayoutAttr,mlir::StringAttr,mlir::SymbolRefAttr,mlir::TypeAttr,mlir::UnitAttr>(uint64_t a1)
{
  mlir::Dialect::addAttribute<mlir::AffineMapAttr>(a1);
  mlir::Dialect::addAttribute<mlir::ArrayAttr>(a1);
  mlir::Dialect::addAttribute<mlir::DenseArrayAttr>(a1);
  mlir::Dialect::addAttribute<mlir::DenseIntOrFPElementsAttr>(a1);
  mlir::Dialect::addAttribute<mlir::DenseStringElementsAttr>(a1);
  mlir::Dialect::addAttribute<mlir::DenseResourceElementsAttr>(a1);
  mlir::Dialect::addAttribute<mlir::DictionaryAttr>(a1);
  mlir::Dialect::addAttribute<mlir::FloatAttr>(a1);
  mlir::Dialect::addAttribute<mlir::IntegerAttr>(a1);
  mlir::Dialect::addAttribute<mlir::IntegerSetAttr>(a1);
  mlir::Dialect::addAttribute<mlir::OpaqueAttr>(a1);
  mlir::Dialect::addAttribute<mlir::SparseElementsAttr>(a1);
  mlir::Dialect::addAttribute<mlir::StridedLayoutAttr>(a1);
  mlir::Dialect::addAttribute<mlir::StringAttr>(a1);
  mlir::Dialect::addAttribute<mlir::SymbolRefAttr>(a1);
  mlir::Dialect::addAttribute<mlir::TypeAttr>(a1);
  return mlir::Dialect::addAttribute<mlir::UnitAttr>(a1);
}

uint64_t dictionaryAttrSort<false>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t result;
  __int128 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  size_t v14;
  int v15;
  size_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = a1;
  if (a2 == 2)
  {
    v6 = (__int128 *)(a1 + 2);
    v7 = mlir::NamedAttribute::operator<(a1, a1 + 2);
    if (v7)
    {
      v17 = *(_OWORD *)v4;
      v19 = *v6;
      *(_DWORD *)(a3 + 8) = 0;
      if (*(_DWORD *)(a3 + 12) > 1u)
      {
LABEL_7:
        v8 = 0;
LABEL_14:
        v13 = (_OWORD *)(*(_QWORD *)a3 + 16 * v8);
        *v13 = v17;
        v13[1] = v19;
        *(_DWORD *)(a3 + 8) += 2;
        return v7 ^ 1u;
      }
    }
    else
    {
      v17 = *v6;
      v19 = *(_OWORD *)v4;
      *(_DWORD *)(a3 + 8) = 0;
      if (*(_DWORD *)(a3 + 12) > 1u)
        goto LABEL_7;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), 2uLL, 16);
    v8 = *(unsigned int *)(a3 + 8);
    goto LABEL_14;
  }
  if (a2 == 1)
  {
    v18 = *(_OWORD *)a1;
    *(_DWORD *)(a3 + 8) = 0;
    if (*(_DWORD *)(a3 + 12))
    {
      v9 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), 1uLL, 16);
      v9 = *(unsigned int *)(a3 + 8);
    }
    result = 0;
    *(_OWORD *)(*(_QWORD *)a3 + 16 * v9) = v18;
    ++*(_DWORD *)(a3 + 8);
  }
  else if (a2)
  {
    v10 = 16 * a2;
    *(_DWORD *)(a3 + 8) = 0;
    v11 = (16 * a2) >> 4;
    if (v11 <= *(unsigned int *)(a3 + 12))
    {
      v12 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v11, 16);
      v12 = *(unsigned int *)(a3 + 8);
    }
    memcpy((void *)(*(_QWORD *)a3 + 16 * v12), v4, v10);
    *(_DWORD *)(a3 + 8) += v10 >> 4;
    v14 = v10 - 16;
    do
    {
      if (!v14)
        return 0;
      v15 = mlir::NamedAttribute::operator<(v4 + 2, v4);
      v14 -= 16;
      v4 += 2;
    }
    while (!v15);
    v16 = *(unsigned int *)(a3 + 8);
    if (v16 >= 2)
      qsort(*(void **)a3, v16, 0x10uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<mlir::NamedAttribute>);
    return 1;
  }
  else
  {
    result = 0;
    *(_DWORD *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t mlir::DictionaryAttr::sortInPlace(uint64_t **a1)
{
  uint64_t v1;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t i;
  uint64_t *v9;
  int v10;
  size_t v11;

  v1 = *((unsigned int *)a1 + 2);
  if (v1 < 2)
    return 0;
  v4 = *a1;
  if ((_DWORD)v1 != 2)
  {
    for (i = 16 * v1 - 16; i; i -= 16)
    {
      v9 = v4 + 2;
      v10 = mlir::NamedAttribute::operator<(v4 + 2, v4);
      v4 = v9;
      if (v10)
      {
        v11 = *((unsigned int *)a1 + 2);
        if (v11 >= 2)
          qsort(*a1, v11, 0x10uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<mlir::NamedAttribute>);
        return 1;
      }
    }
    return 0;
  }
  v5 = mlir::NamedAttribute::operator<(*a1, v4 + 2);
  if ((v5 & 1) == 0)
  {
    v6 = *a1;
    v7 = *(_OWORD *)*a1;
    *(_OWORD *)v6 = *((_OWORD *)*a1 + 1);
    *((_OWORD *)v6 + 1) = v7;
  }
  return v5 ^ 1u;
}

void mlir::DictionaryAttr::findDuplicate(uint64_t **a1@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t CallableRegion;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  size_t v19;
  __int128 v20;
  __int128 v21;

  if ((a2 & 1) == 0)
  {
    v5 = *((unsigned int *)a1 + 2);
    if (v5 >= 2)
    {
      v10 = *a1;
      if ((_DWORD)v5 == 2)
      {
        if ((mlir::NamedAttribute::operator<(*a1, v10 + 2) & 1) == 0)
        {
          v11 = *a1;
          v12 = *(_OWORD *)*a1;
          *(_OWORD *)v11 = *((_OWORD *)*a1 + 1);
          *((_OWORD *)v11 + 1) = v12;
        }
      }
      else
      {
        v16 = 16 * v5 - 16;
        while (v16)
        {
          v17 = v10 + 2;
          v18 = mlir::NamedAttribute::operator<(v10 + 2, v10);
          v16 -= 16;
          v10 = v17;
          if (v18)
          {
            v19 = *((unsigned int *)a1 + 2);
            if (v19 >= 2)
              qsort(*a1, v19, 0x10uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<mlir::NamedAttribute>);
            break;
          }
        }
      }
    }
  }
  v6 = *((unsigned int *)a1 + 2);
  if (v6 <= 1)
    goto LABEL_17;
  v7 = *a1;
  if ((_DWORD)v6 != 2)
  {
    v13 = 16 * v6 + 16;
    while (v13 != 32)
    {
      v14 = v7 + 2;
      v21 = *(_OWORD *)v7;
      v20 = *((_OWORD *)v7 + 1);
      CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v21);
      v13 -= 16;
      v7 += 2;
      if (CallableRegion == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v20))
      {
        if (!v13)
          goto LABEL_17;
        v9 = *((_OWORD *)v14 - 1);
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  v8 = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)v7);
  if (v8 != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)(v7 + 2)))
  {
LABEL_17:
    *a3 = 0;
    a3[16] = 0;
    return;
  }
  v9 = *(_OWORD *)v7;
LABEL_16:
  *(_OWORD *)a3 = v9;
  a3[16] = 1;
}

uint64_t mlir::DictionaryAttr::get(mlir::DictionaryAttr *this, mlir::MLIRContext *a2, uint64_t a3)
{
  unsigned __int8 **AttributeUniquer;
  uint64_t v5;
  __int128 v7;
  _QWORD v8[2];
  void *v9;
  uint64_t v10;
  _QWORD v11[17];

  v11[16] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v7 = a2;
  *((_QWORD *)&v7 + 1) = a3;
  if (!a3)
    return mlir::DictionaryAttr::getEmpty(this, a2);
  v9 = v11;
  v10 = 0x800000000;
  if (dictionaryAttrSort<false>((uint64_t *)a2, a3, (uint64_t)&v9))
  {
    *(_QWORD *)&v7 = v9;
    *((_QWORD *)&v7 + 1) = v10;
  }
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(this);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id;
  v8[1] = this;
  v5 = mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail21DictionaryAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DictionaryAttrEJRNS_8ArrayRefINS1_14NamedAttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id, &v7);
  if (v9 != v11)
    free(v9);
  return v5;
}

uint64_t mlir::DictionaryAttr::getWithSorted(mlir::DictionaryAttr *this, mlir::MLIRContext *a2, uint64_t a3)
{
  unsigned __int8 **AttributeUniquer;
  __int128 v6;
  _QWORD v7[2];

  *(_QWORD *)&v6 = a2;
  *((_QWORD *)&v6 + 1) = a3;
  if (!a3)
    return mlir::DictionaryAttr::getEmpty(this, a2);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(this);
  v7[0] = &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id;
  v7[1] = this;
  return mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail21DictionaryAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DictionaryAttrEJRNS_8ArrayRefINS1_14NamedAttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_, (uint64_t)v7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id, &v6);
}

uint64_t mlir::DictionaryAttr::get(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t CallableRegion;
  size_t v9;
  size_t v10;
  int v11;

  if (16 * *(_QWORD *)(*(_QWORD *)a1 + 16) < 1)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16) & 0xFFFFFFFFFFFFFFFLL;
  while (1)
  {
    v7 = v6 >> 1;
    CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)(v5 + 16 * (v6 >> 1)));
    v9 = *(_QWORD *)(CallableRegion + 24);
    if (a3 >= v9)
      v10 = *(_QWORD *)(CallableRegion + 24);
    else
      v10 = a3;
    if (v10)
    {
      v11 = memcmp(*(const void **)(CallableRegion + 16), a2, v10);
      if (v11)
      {
        if ((v11 & 0x80000000) == 0)
          goto LABEL_4;
        goto LABEL_3;
      }
    }
    if (v9 == a3)
      return *(_QWORD *)(v5 + 16 * v7 + 8);
    if (v9 >= a3)
      goto LABEL_4;
LABEL_3:
    v5 += 16 * (v6 >> 1) + 16;
    v7 = v6 + ~v7;
LABEL_4:
    v6 = v7;
    if (v7 <= 0)
      return 0;
  }
}

uint64_t mlir::DictionaryAttr::end(mlir::DictionaryAttr *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 8) + 16 * *(_QWORD *)(*(_QWORD *)this + 16);
}

uint64_t mlir::DictionaryAttr::get(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  const void *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  mlir::CallGraphNode *i;
  uint64_t CallableRegion;
  unint64_t v12;
  size_t v13;
  int v14;

  v4 = *(_QWORD **)(*(_QWORD *)a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v5 = 16 * v3;
  if (16 * v3 >= 257)
  {
    v6 = *(const void **)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    v8 = v3 & 0xFFFFFFFFFFFFFFFLL;
    while (1)
    {
      v9 = v8 >> 1;
      i = (mlir::CallGraphNode *)&v4[2 * (v8 >> 1)];
      CallableRegion = mlir::CallGraphNode::getCallableRegion(i);
      v12 = *(_QWORD *)(CallableRegion + 24);
      v13 = v7 >= v12 ? *(_QWORD *)(CallableRegion + 24) : v7;
      if (v13)
      {
        v14 = memcmp(*(const void **)(CallableRegion + 16), v6, v13);
        if (v14)
          break;
      }
      if (v12 == v7)
        return *((_QWORD *)i + 1);
      if (v12 < v7)
        goto LABEL_3;
LABEL_4:
      v8 = v9;
      if (v9 <= 0)
        return 0;
    }
    if ((v14 & 0x80000000) == 0)
      goto LABEL_4;
LABEL_3:
    v4 = (_QWORD *)((char *)i + 16);
    v9 = v8 + ~v9;
    goto LABEL_4;
  }
  if (!v3)
    return 0;
  for (i = *(mlir::CallGraphNode **)(*(_QWORD *)a1 + 8);
        mlir::CallGraphNode::getCallableRegion(i) != a2;
        i = (mlir::CallGraphNode *)((char *)i + 16))
  {
    v5 -= 16;
    if (!v5)
      return 0;
  }
  return *((_QWORD *)i + 1);
}

uint64_t mlir::DictionaryAttr::getNamed@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  const void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  mlir::CallGraphNode *v12;
  unint64_t v13;
  size_t v14;
  char v15;

  v6 = *(char **)(*(_QWORD *)result + 8);
  v5 = *(_QWORD *)(*(_QWORD *)result + 16);
  v7 = 16 * v5;
  if (16 * v5 >= 257)
  {
    v8 = *(const void **)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    v10 = v5 & 0xFFFFFFFFFFFFFFFLL;
    while (1)
    {
      v11 = v10 >> 1;
      v12 = (mlir::CallGraphNode *)&v6[16 * (v10 >> 1)];
      result = mlir::CallGraphNode::getCallableRegion(v12);
      v13 = *(_QWORD *)(result + 24);
      v14 = v9 >= v13 ? *(_QWORD *)(result + 24) : v9;
      if (v14)
      {
        result = memcmp(*(const void **)(result + 16), v8, v14);
        if ((_DWORD)result)
          break;
      }
      if (v13 == v9)
        goto LABEL_20;
      if (v13 < v9)
        goto LABEL_3;
LABEL_4:
      v10 = v11;
      if (v11 <= 0)
        goto LABEL_19;
    }
    if ((result & 0x80000000) == 0)
      goto LABEL_4;
LABEL_3:
    v6 = (char *)v12 + 16;
    v11 = v10 + ~v11;
    goto LABEL_4;
  }
  if (v5)
  {
    v12 = *(mlir::CallGraphNode **)(*(_QWORD *)result + 8);
    while (1)
    {
      result = mlir::CallGraphNode::getCallableRegion(v12);
      if (result == a2)
        break;
      v12 = (mlir::CallGraphNode *)((char *)v12 + 16);
      v7 -= 16;
      if (!v7)
        goto LABEL_19;
    }
LABEL_20:
    *(_OWORD *)a3 = *(_OWORD *)v12;
    v15 = 1;
  }
  else
  {
LABEL_19:
    v15 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v15;
  return result;
}

uint64_t mlir::DictionaryAttr::contains(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t CallableRegion;
  size_t v9;
  size_t v10;
  int v11;

  if (16 * *(_QWORD *)(*(_QWORD *)a1 + 16) < 1)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16) & 0xFFFFFFFFFFFFFFFLL;
  while (1)
  {
    v7 = v6 >> 1;
    CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)(v5 + 16 * (v6 >> 1)));
    v9 = *(_QWORD *)(CallableRegion + 24);
    if (a3 >= v9)
      v10 = *(_QWORD *)(CallableRegion + 24);
    else
      v10 = a3;
    if (v10)
    {
      v11 = memcmp(*(const void **)(CallableRegion + 16), a2, v10);
      if (v11)
      {
        if ((v11 & 0x80000000) == 0)
          goto LABEL_4;
        goto LABEL_3;
      }
    }
    if (v9 == a3)
      return 1;
    if (v9 >= a3)
      goto LABEL_4;
LABEL_3:
    v5 += 16 * (v6 >> 1) + 16;
    v7 = v6 + ~v7;
LABEL_4:
    v6 = v7;
    if (v7 <= 0)
      return 0;
  }
}

uint64_t mlir::DictionaryAttr::contains(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  mlir::CallGraphNode *v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t CallableRegion;
  unint64_t v10;
  size_t v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  uint64_t v16;

  v4 = *(mlir::CallGraphNode **)(*(_QWORD *)a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (16 * v3 >= 257)
  {
    v5 = *(const void **)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 24);
    v7 = v3 & 0xFFFFFFFFFFFFFFFLL;
    while (1)
    {
      v8 = v7 >> 1;
      CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)((char *)v4 + 16 * (v7 >> 1)));
      v10 = *(_QWORD *)(CallableRegion + 24);
      v11 = v6 >= v10 ? *(_QWORD *)(CallableRegion + 24) : v6;
      if (v11)
      {
        v12 = memcmp(*(const void **)(CallableRegion + 16), v5, v11);
        if (v12)
          break;
      }
      if (v10 == v6)
        return 1;
      if (v10 < v6)
        goto LABEL_3;
LABEL_4:
      v7 = v8;
      if (v8 <= 0)
        return 0;
    }
    if ((v12 & 0x80000000) == 0)
      goto LABEL_4;
LABEL_3:
    v4 = (mlir::CallGraphNode *)((char *)v4 + 16 * (v7 >> 1) + 16);
    v8 = v7 + ~v8;
    goto LABEL_4;
  }
  if (!v3)
    return 0;
  v13 = 16 * v3 - 16;
  do
  {
    v14 = mlir::CallGraphNode::getCallableRegion(v4) == a2;
    result = v14;
    if (v14)
      break;
    v16 = v13;
    v13 -= 16;
    v4 = (mlir::CallGraphNode *)((char *)v4 + 16);
  }
  while (v16);
  return result;
}

uint64_t mlir::DictionaryAttr::getEmptyUnchecked(mlir::DictionaryAttr *this, mlir::MLIRContext *a2)
{
  unsigned __int8 **AttributeUniquer;
  __int128 v5;
  _QWORD v6[2];

  v5 = 0uLL;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(this);
  v6[0] = &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id;
  v6[1] = this;
  return mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail21DictionaryAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DictionaryAttrEJNS_8ArrayRefINS1_14NamedAttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)v6, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id, &v5);
}

llvm::raw_ostream *mlir::StridedLayoutAttr::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t *v13;
  uint64_t i;
  _WORD *v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 8)
  {
    *(_BYTE *)(v4 + 8) = 91;
    *(_QWORD *)v4 = *(_QWORD *)"strided<[";
    *((_QWORD *)a2 + 4) += 9;
    v5 = *(_QWORD *)this;
    v6 = *(_QWORD *)(*(_QWORD *)this + 24);
    if (!v6)
      goto LABEL_12;
    goto LABEL_5;
  }
  this = llvm::raw_ostream::write(a2, "strided<[", 9uLL);
  v5 = *(_QWORD *)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v6)
  {
LABEL_5:
    v7 = *(unint64_t **)(v5 + 16);
    if (*v7 == 0x8000000000000000)
    {
      v8 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (*((_BYTE **)a2 + 3) == v8)
      {
        this = llvm::raw_ostream::write(a2, "?", 1uLL);
        if (v6 == 1)
          goto LABEL_12;
      }
      else
      {
        *v8 = 63;
        ++*((_QWORD *)a2 + 4);
        if (v6 == 1)
          goto LABEL_12;
      }
    }
    else
    {
      this = llvm::raw_ostream::operator<<(a2, *v7);
      if (v6 == 1)
        goto LABEL_12;
    }
    v13 = v7 + 1;
    for (i = 8 * v6 - 8; i; i -= 8)
    {
      v15 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v15 > 1uLL)
      {
        *v15 = 8236;
        *((_QWORD *)a2 + 4) += 2;
        v16 = *v13;
        if (*v13 == 0x8000000000000000)
        {
LABEL_27:
          v17 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*((_BYTE **)a2 + 3) == v17)
          {
            this = llvm::raw_ostream::write(a2, "?", 1uLL);
          }
          else
          {
            *v17 = 63;
            ++*((_QWORD *)a2 + 4);
          }
          goto LABEL_22;
        }
      }
      else
      {
        this = llvm::raw_ostream::write(a2, ", ", 2uLL);
        v16 = *v13;
        if (*v13 == 0x8000000000000000)
          goto LABEL_27;
      }
      this = llvm::raw_ostream::operator<<(a2, v16);
LABEL_22:
      ++v13;
    }
  }
LABEL_12:
  v9 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v9)
  {
    this = llvm::raw_ostream::write(a2, "]", 1uLL);
    if (!*(_QWORD *)(*(_QWORD *)v3 + 8))
      goto LABEL_33;
  }
  else
  {
    *v9 = 93;
    ++*((_QWORD *)a2 + 4);
    if (!*(_QWORD *)(*(_QWORD *)v3 + 8))
    {
LABEL_33:
      v12 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (*((_BYTE **)a2 + 3) != v12)
        goto LABEL_34;
      return llvm::raw_ostream::write(a2, ">", 1uLL);
    }
  }
  v10 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v10) <= 9)
  {
    this = llvm::raw_ostream::write(a2, ", offset: ", 0xAuLL);
    v11 = *(_QWORD *)(*(_QWORD *)v3 + 8);
    if (v11 != 0x8000000000000000)
      goto LABEL_18;
LABEL_31:
    v18 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (*((_BYTE **)a2 + 3) == v18)
    {
      this = llvm::raw_ostream::write(a2, "?", 1uLL);
      v12 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (*((_BYTE **)a2 + 3) != v12)
        goto LABEL_34;
      return llvm::raw_ostream::write(a2, ">", 1uLL);
    }
    *v18 = 63;
    ++*((_QWORD *)a2 + 4);
    goto LABEL_33;
  }
  *(_WORD *)(v10 + 8) = 8250;
  *(_QWORD *)v10 = *(_QWORD *)", offset: ";
  *((_QWORD *)a2 + 4) += 10;
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 8);
  if (v11 == 0x8000000000000000)
    goto LABEL_31;
LABEL_18:
  this = llvm::raw_ostream::operator<<(a2, v11);
  v12 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) != v12)
  {
LABEL_34:
    *v12 = 62;
    ++*((_QWORD *)a2 + 4);
    return this;
  }
  return llvm::raw_ostream::write(a2, ">", 1uLL);
}

uint64_t mlir::makeStridedLinearLayoutMap(uint64_t a1, uint64_t a2, mlir *this, mlir::MLIRContext *a4)
{
  mlir::MLIRContext *AffineSymbolExpr;
  uint64_t v8;
  mlir *v9;
  uint64_t v10;
  uint64_t AffineConstantExpr;
  uint64_t v12;
  uint64_t v13;
  mlir *v14;
  mlir::MLIRContext *v15;
  uint64_t AffineDimExpr;
  uint64_t v18;

  if (this == (mlir *)0x8000000000000000)
  {
    AffineSymbolExpr = (mlir::MLIRContext *)mlir::getAffineSymbolExpr(0, a4, (mlir::MLIRContext *)0x8000000000000000);
    v8 = 1;
    v18 = (uint64_t)AffineSymbolExpr;
    if (!a2)
      return mlir::AffineMap::get(a2, v8, (uint64_t)AffineSymbolExpr);
  }
  else
  {
    AffineSymbolExpr = (mlir::MLIRContext *)mlir::getAffineConstantExpr(this, a4, this);
    v8 = 0;
    v18 = (uint64_t)AffineSymbolExpr;
    if (!a2)
      return mlir::AffineMap::get(a2, v8, (uint64_t)AffineSymbolExpr);
  }
  v9 = 0;
  v10 = 8 * a2;
  do
  {
    v14 = *(mlir **)(a1 + 8 * (_QWORD)v9);
    AffineDimExpr = mlir::getAffineDimExpr(v9, a4, AffineSymbolExpr);
    if (v14 == (mlir *)0x8000000000000000)
    {
      AffineConstantExpr = mlir::getAffineSymbolExpr((mlir *)v8, a4, v15);
      v8 = (v8 + 1);
    }
    else
    {
      AffineConstantExpr = mlir::getAffineConstantExpr(v14, a4, v15);
    }
    v12 = mlir::AffineExpr::operator*((unint64_t *)&AffineDimExpr, AffineConstantExpr);
    v13 = mlir::AffineExpr::operator+((unint64_t *)&v18, v12);
    v18 = v13;
    v9 = (mlir *)((char *)v9 + 1);
    v10 -= 8;
  }
  while (v10);
  AffineSymbolExpr = (mlir::MLIRContext *)v13;
  return mlir::AffineMap::get(a2, v8, (uint64_t)AffineSymbolExpr);
}

uint64_t mlir::StridedLayoutAttr::verify(void (*a1)(_QWORD *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int *v8;
  char *v9;
  char *v10;
  __int128 v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  unint64_t v21;
  int64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  _QWORD v26[3];
  void *v27;
  unsigned int v28;
  unsigned int v29;
  _BYTE v30[96];
  void *v31;
  _QWORD *v32;
  void *__p;
  _QWORD **v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!a5)
    return 1;
  v5 = 8 * a5;
  v6 = a4;
  while (*v6)
  {
    ++v6;
    v5 -= 8;
    if (!v5)
    {
      v6 = &a4[a5];
      break;
    }
  }
  if (a5 == v6 - a4)
    return 1;
  a1(v26, a2);
  if (v26[0])
  {
    v23 = 3;
    v24 = "strides must not be zero";
    v25 = 24;
    v8 = &v23;
    v9 = (char *)v27;
    if (v28 >= v29)
    {
      v21 = v28 + 1;
      if (v27 <= &v23 && (char *)v27 + 24 * v28 > (char *)&v23)
      {
        v22 = (char *)&v23 - (_BYTE *)v27;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v21, 24);
        v9 = (char *)v27;
        v8 = (int *)((char *)v27 + v22);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v21, 24);
        v8 = &v23;
        v9 = (char *)v27;
      }
    }
    v10 = &v9[24 * v28];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = *((_QWORD *)v8 + 2);
    *(_OWORD *)v10 = v11;
    ++v28;
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
  if (v26[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
  if (v35)
  {
    v12 = (_QWORD **)__p;
    if (__p)
    {
      v13 = v34;
      v14 = __p;
      if (v34 != __p)
      {
        do
          v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        v14 = __p;
      }
      v34 = v12;
      operator delete(v14);
    }
    v15 = v31;
    if (v31)
    {
      v16 = v32;
      v17 = v31;
      if (v32 != v31)
      {
        do
        {
          v19 = (void *)*--v16;
          v18 = v19;
          *v16 = 0;
          if (v19)
            operator delete[](v18);
        }
        while (v16 != v15);
        v17 = v31;
      }
      v32 = v15;
      operator delete(v17);
    }
    if (v27 != v30)
      free(v27);
  }
  return v7;
}

uint64_t mlir::StridedLayoutAttr::verifyLayout(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v5;
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a3 == *(_QWORD *)(*(_QWORD *)a1 + 24))
    return 1;
  a4(v24, a5);
  if (v24[0])
  {
    v21 = 3;
    v22 = "expected the number of strides to match the rank";
    v23 = 48;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
  }
  v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
  if (v24[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return v5;
}

uint64_t mlir::StringAttr::getEmptyStringAttrUnchecked(mlir::StringAttr *this, mlir::MLIRContext *a2)
{
  uint64_t v3;
  unsigned __int8 **AttributeUniquer;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD v13[2];

  v3 = mlir::NoneType::get(this, a2);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(this);
  v9[0] = &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
  v9[1] = this;
  v13[0] = _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJRA1_KcNS1_8NoneTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v13[1] = v9;
  v12[0] = "";
  v12[1] = 0;
  v12[2] = v3;
  v5 = ~((unint64_t)((v3 >> 4) ^ (v3 >> 9)) << 32)
     + ((v3 >> 4) ^ (v3 >> 9))
     + (llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue("", 0) << 32);
  v6 = 9 * (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) ^ (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v10[0] = v12;
  v10[1] = v13;
  v11 = v12;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id, (v7 >> 31) ^ v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,char const(&)[1],mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,char const(&)[1],mlir::NoneType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v11, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,char const(&)[1],mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,char const(&)[1],mlir::NoneType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v10);
}

uint64_t mlir::StringAttr::get(mlir::StringAttr *this, mlir::MLIRContext *a2)
{
  unsigned int v3;
  _QWORD *v5;
  size_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 **AttributeUniquer;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t ParametricStorageTypeImpl;
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD v18[2];
  void *v19;
  __int128 v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned __int8 *)a2 + 32);
  if (v3 <= 1)
    return mlir::StringAttr::get(this, a2);
  v19 = v21;
  v20 = xmmword_181233280;
  if (*((_BYTE *)a2 + 33) != 1)
    goto LABEL_9;
  if (v3 - 5 < 2)
  {
    v5 = *(_QWORD **)a2;
    v6 = *((_QWORD *)a2 + 1);
    goto LABEL_18;
  }
  if (v3 == 4)
  {
    v7 = *(char *)(*(_QWORD *)a2 + 23);
    if (v7 >= 0)
      v5 = *(_QWORD **)a2;
    else
      v5 = **(_QWORD ***)a2;
    if (v7 >= 0)
      v6 = *(unsigned __int8 *)(*(_QWORD *)a2 + 23);
    else
      v6 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    goto LABEL_18;
  }
  if (v3 == 3)
  {
    v5 = *(_QWORD **)a2;
    if (*(_QWORD *)a2)
      v6 = strlen(*(const char **)a2);
    else
      v6 = 0;
  }
  else
  {
LABEL_9:
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v19);
    v5 = v19;
    v6 = v20;
  }
LABEL_18:
  v8 = mlir::NoneType::get(this, a2);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(this);
  v14[0] = &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
  v14[1] = this;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJNS_9StringRefENS1_8NoneTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v18[1] = v14;
  v17[0] = v5;
  v17[1] = v6;
  v17[2] = v8;
  v10 = ~((unint64_t)((v8 >> 4) ^ (v8 >> 9)) << 32)
      + ((v8 >> 4) ^ (v8 >> 9))
      + (llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(v5, v6) << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v15[0] = v17;
  v15[1] = v18;
  v16 = v17;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id, (v12 >> 31) ^ v12, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::NoneType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::NoneType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
  if (v19 != v21)
    free(v19);
  return ParametricStorageTypeImpl;
}

{
  return *(_QWORD *)(*(_QWORD *)this + 584);
}

uint64_t mlir::StringAttr::get(char **a1, uint64_t a2)
{
  mlir::MLIRContext *Context;
  size_t v4;
  char *v5;
  unsigned __int8 **AttributeUniquer;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t ParametricStorageTypeImpl;
  int v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD v19[2];
  void *v20;
  __int128 v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  v20 = v22;
  v21 = xmmword_181233280;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  if (*((_BYTE *)a1 + 33) == 1)
  {
    v4 = 0;
    v5 = 0;
    switch(*((_BYTE *)a1 + 32))
    {
      case 1:
        break;
      case 3:
        v5 = *a1;
        if (*a1)
          v4 = strlen(*a1);
        else
          v4 = 0;
        break;
      case 4:
        v13 = (*a1)[23];
        if (v13 >= 0)
          v5 = *a1;
        else
          v5 = *(char **)*a1;
        if (v13 >= 0)
          v4 = (*a1)[23];
        else
          v4 = *((_QWORD *)*a1 + 1);
        break;
      case 5:
      case 6:
        v5 = *a1;
        v4 = (size_t)a1[1];
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector((uint64_t)a1, (uint64_t)&v20);
    v5 = (char *)v20;
    v4 = v21;
  }
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v15[0] = &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
  v15[1] = Context;
  v19[0] = _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJNS_9StringRefERNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_;
  v19[1] = v15;
  v18[0] = v5;
  v18[1] = v4;
  v7 = v14;
  v18[2] = v14;
  v8 = ((v7 >> 4) ^ (v7 >> 9) | (llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(v5, v4) << 32))
     + ~((unint64_t)((v7 >> 4) ^ (v7 >> 9)) << 32);
  v9 = 9 * (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) ^ (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v16[0] = v18;
  v16[1] = v19;
  v17 = v18;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id, (v10 >> 31) ^ v10, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
  if (v20 != v22)
    free(v20);
  return ParametricStorageTypeImpl;
}

double mlir::FloatAttr::getValueAsDouble(mlir::FloatAttr *this)
{
  const llvm::detail::IEEEFloat *v1;
  void *v2;
  void *v3;
  llvm::APFloatBase *v4;
  void *v5;
  void *v6;
  double v7;
  llvm::APFloatBase *v9;
  void *v10;
  char v11;
  void *v12;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v1 = (const llvm::detail::IEEEFloat *)(*(_QWORD *)this + 24);
  v2 = *(void **)v1;
  v3 = llvm::APFloatBase::PPCDoubleDouble(this);
  if (v3 != v2)
  {
    v4 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v13, v1);
    v5 = (void *)v13[0];
    v6 = llvm::APFloatBase::IEEEdouble(v4);
    if (v5 == v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  v9 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v13, v1);
  v10 = (void *)v13[0];
  v6 = llvm::APFloatBase::IEEEdouble(v9);
  if (v10 != v6)
  {
LABEL_3:
    v11 = 0;
    llvm::APFloat::convert((uint64_t)&v12, v6, 1, &v11);
  }
LABEL_4:
  v7 = llvm::APFloat::convertToDouble(&v12);
  if (v3 == (void *)v13[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v13);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v13);
  return v7;
}

uint64_t mlir::SymbolRefAttr::get(mlir::StringAttr *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v9;
  _QWORD v11[4];
  __int16 v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];
  uint64_t *v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[2];

  v12 = 261;
  v11[0] = a2;
  v11[1] = a3;
  v13 = mlir::StringAttr::get(a1, (mlir::MLIRContext *)v11);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v13);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v14[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v14[1] = Context;
  v19[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v19[1] = v14;
  v17 = v13;
  v18[0] = a4;
  v18[1] = a5;
  v9 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v17, (uint64_t)v18);
  v15[0] = &v17;
  v15[1] = v19;
  v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

uint64_t mlir::SymbolRefAttr::get(mlir::StringAttr *a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v5;
  _QWORD v7[4];
  __int16 v8;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];
  uint64_t *v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];

  v8 = 261;
  v7[0] = a2;
  v7[1] = a3;
  v9 = mlir::StringAttr::get(a1, (mlir::MLIRContext *)v7);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v10[1] = Context;
  v15[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v15[1] = v10;
  v14[0] = 0;
  v14[1] = 0;
  v13 = v9;
  v5 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v13, (uint64_t)v14);
  v11[0] = &v13;
  v11[1] = v15;
  v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v5, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

uint64_t mlir::SymbolRefAttr::get(uint64_t a1)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v3;
  uint64_t v5;
  _QWORD v6[2];
  _QWORD v7[2];
  uint64_t *v8;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v5 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v5);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v6[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v6[1] = Context;
  v11[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v11[1] = v6;
  v10[0] = 0;
  v10[1] = 0;
  v9 = v5;
  v3 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v9, (uint64_t)v10);
  v7[0] = &v9;
  v7[1] = v11;
  v8 = &v9;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v3, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v8, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v7);
}

uint64_t mlir::SymbolRefAttr::get(mlir::SymbolRefAttr *this, mlir::Operation *a2)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v4;
  uint64_t v6;
  _QWORD v7[2];
  _QWORD v8[2];
  uint64_t *v9;
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[2];

  v6 = mlir::Operation::getAttrOfType<mlir::StringAttr>((uint64_t)this, "sym_name", 8uLL);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v7[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v7[1] = Context;
  v12[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v12[1] = v7;
  v11[0] = 0;
  v11[1] = 0;
  v10 = v6;
  v4 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v10, (uint64_t)v11);
  v8[0] = &v10;
  v8[1] = v12;
  v9 = &v10;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v4, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v9, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v8);
}

uint64_t mlir::Operation::getAttrOfType<mlir::StringAttr>(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t CallableRegion;
  unint64_t v13;
  size_t v14;
  int v15;

  if (!*(_BYTE *)(a1 + 47) || (result = mlir::Operation::getInherentAttr(a1, (uint64_t)a2, a3), !v7))
  {
    v8 = *(_QWORD *)(a1 + 56);
    if (16 * *(_QWORD *)(v8 + 16) < 1)
      return 0;
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFFLL;
    while (1)
    {
      v11 = v10 >> 1;
      CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)(v9 + 16 * (v10 >> 1)));
      v13 = *(_QWORD *)(CallableRegion + 24);
      v14 = a3 >= v13 ? *(_QWORD *)(CallableRegion + 24) : a3;
      if (v14)
      {
        v15 = memcmp(*(const void **)(CallableRegion + 16), a2, v14);
        if (v15)
          break;
      }
      if (v13 == a3)
      {
        result = *(_QWORD *)(v9 + 16 * v11 + 8);
        if (!result)
          return result;
        goto LABEL_4;
      }
      if (v13 < a3)
        goto LABEL_9;
LABEL_10:
      v10 = v11;
      if (v11 <= 0)
        return 0;
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_10;
LABEL_9:
    v9 += 16 * (v10 >> 1) + 16;
    v11 = v10 + ~v11;
    goto LABEL_10;
  }
  if (!result)
    return result;
LABEL_4:
  if (*(_UNKNOWN **)(*(_QWORD *)result + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    return 0;
  return result;
}

uint64_t mlir::SymbolRefAttr::getLeafReference(mlir::SymbolRefAttr *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)this;
  v2 = *(_QWORD *)(*(_QWORD *)this + 24);
  if (v2)
    v1 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2 - 8);
  return *(_QWORD *)(v1 + 8);
}

uint64_t mlir::IntegerAttr::getInt(mlir::IntegerAttr *this)
{
  const void **p_p;
  unsigned int v2;
  uint64_t v4;
  void *__p;
  unsigned int v6;

  p_p = (const void **)(*(_QWORD *)this + 16);
  v2 = *(_DWORD *)(*(_QWORD *)this + 24);
  v6 = v2;
  if (v2 < 0x41)
    return (uint64_t)((_QWORD)*p_p << -(char)v2) >> -(char)v2;
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, p_p);
  LOBYTE(v2) = v6;
  if (v6 <= 0x40)
  {
    p_p = (const void **)&__p;
    return (uint64_t)((_QWORD)*p_p << -(char)v2) >> -(char)v2;
  }
  v4 = *(_QWORD *)__p;
  operator delete[](__p);
  return v4;
}

void *mlir::IntegerAttr::getUInt(mlir::IntegerAttr *this)
{
  const void **v1;
  uint64_t v3;
  void *__p;
  unsigned int v5;

  v1 = (const void **)(*(_QWORD *)this + 16);
  v5 = *(_DWORD *)(*(_QWORD *)this + 24);
  if (v5 <= 0x40)
    return (void *)*v1;
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, v1);
  if (v5 <= 0x40)
    return __p;
  v3 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v3;
}

uint64_t mlir::IntegerAttr::getBoolAttrUnchecked(uint64_t a1, unsigned int a2)
{
  mlir::MLIRContext *Context;
  unint64_t v4;
  unsigned __int8 **AttributeUniquer;
  unsigned int v6;
  uint64_t ParametricStorageTypeImpl;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];
  uint64_t *v12;
  uint64_t v13;
  void *__p;
  unsigned int v15;
  _QWORD v16[2];

  v9 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  v4 = a2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  v10[1] = Context;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_11IntegerTypeENS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_;
  v16[1] = v10;
  v15 = 1;
  v13 = v9;
  __p = (void *)v4;
  v6 = llvm::hash_combine<mlir::Type,llvm::APInt>(&v13, (llvm *)&__p);
  v11[0] = &v13;
  v11[1] = v16;
  v12 = &v13;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, v6, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::IntegerType &,llvm::APInt>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::IntegerType &,llvm::APInt &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::IntegerType &,llvm::APInt>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::IntegerType &,llvm::APInt &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
  if (v15 >= 0x41 && __p)
    operator delete[](__p);
  return ParametricStorageTypeImpl;
}

BOOL mlir::BoolAttr::getValue(mlir::BoolAttr *this)
{
  uint64_t v1;
  llvm::APInt *v2;
  unsigned int v3;

  v1 = *(_QWORD *)this;
  v2 = (llvm::APInt *)(*(_QWORD *)this + 16);
  v3 = *(_DWORD *)(v1 + 24);
  if (v3 > 0x40)
    return llvm::APInt::countLeadingZerosSlowCase(v2) != v3;
  else
    return *(_QWORD *)v2 != 0;
}

BOOL mlir::BoolAttr::classof(_QWORD *a1)
{
  _BOOL8 result;
  uint64_t v3;

  result = 0;
  if (a1)
  {
    if (*(_UNKNOWN **)(*a1 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      v3 = a1[1];
      return mlir::Type::isSignlessInteger((mlir::Type *)&v3, 1);
    }
  }
  return result;
}

uint64_t mlir::OpaqueAttr::verify(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, const void **a4, const char *a5, uint64_t a6)
{
  mlir::MLIRContext *Context;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  const void ***v17;
  char *v18;
  char *v19;
  __int128 v20;
  _QWORD **v21;
  _QWORD **v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  void *v28;
  const void ***v29;
  char *v30;
  char *v31;
  __int128 v32;
  const void ***v33;
  char *v34;
  char *v35;
  __int128 v36;
  const void ***v37;
  char *v38;
  char *v39;
  __int128 v40;
  const void ***v41;
  char *v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  const void ***v46;
  char *v47;
  char *v48;
  __int128 v49;
  _QWORD **v50;
  _QWORD **v51;
  void *v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  uint64_t v72;
  const void **v73;
  const char *v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  _BYTE v78[16];
  void *v79;
  unsigned int v80;
  unsigned int v81;
  _BYTE v82[96];
  void *v83;
  _QWORD *v84;
  void *__p;
  _QWORD **v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v72 = a3;
  if ((mlir::Dialect::isValidNamespace(*(char **)(a3 + 16), *(_QWORD *)(a3 + 24)) & 1) != 0)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v72);
    if ((mlir::MLIRContext::allowsUnregisteredDialects(Context) & 1) != 0
      || mlir::MLIRContext::getLoadedDialect((uint64_t *)Context, *(_QWORD *)(v72 + 16), *(_QWORD *)(v72 + 24)))
    {
      return 1;
    }
    a1(&v77, a2);
    if (v77)
    {
      LODWORD(v73) = 3;
      v74 = "#";
      v75 = 1;
      v29 = &v73;
      v30 = (char *)v79;
      if (v80 >= v81)
      {
        v59 = v80 + 1;
        if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
        {
          v67 = (char *)&v73 - (_BYTE *)v79;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v59, 24);
          v30 = (char *)v79;
          v29 = (const void ***)((char *)v79 + v67);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v59, 24);
          v29 = &v73;
          v30 = (char *)v79;
        }
      }
      v31 = &v30[24 * v80];
      v32 = *(_OWORD *)v29;
      *((_QWORD *)v31 + 2) = v29[2];
      *(_OWORD *)v31 = v32;
      ++v80;
      if (v77)
      {
        mlir::Diagnostic::operator<<((uint64_t)v78, v72);
        if (v77)
        {
          LODWORD(v73) = 3;
          v74 = "<\"";
          v75 = 2;
          v33 = &v73;
          v34 = (char *)v79;
          if (v80 >= v81)
          {
            v60 = v80 + 1;
            if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
            {
              v68 = (char *)&v73 - (_BYTE *)v79;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v60, 24);
              v34 = (char *)v79;
              v33 = (const void ***)((char *)v79 + v68);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v60, 24);
              v33 = &v73;
              v34 = (char *)v79;
            }
          }
          v35 = &v34[24 * v80];
          v36 = *(_OWORD *)v33;
          *((_QWORD *)v35 + 2) = v33[2];
          *(_OWORD *)v35 = v36;
          ++v80;
          if (v77)
          {
            v76 = 261;
            v73 = a4;
            v74 = a5;
            mlir::Diagnostic::operator<<((uint64_t)v78, &v73);
            if (v77)
            {
              LODWORD(v73) = 3;
              v74 = "\"> : ";
              v75 = 5;
              v37 = &v73;
              v38 = (char *)v79;
              if (v80 >= v81)
              {
                v61 = v80 + 1;
                if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
                {
                  v69 = (char *)&v73 - (_BYTE *)v79;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v61, 24);
                  v38 = (char *)v79;
                  v37 = (const void ***)((char *)v79 + v69);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v61, 24);
                  v37 = &v73;
                  v38 = (char *)v79;
                }
              }
              v39 = &v38[24 * v80];
              v40 = *(_OWORD *)v37;
              *((_QWORD *)v39 + 2) = v37[2];
              *(_OWORD *)v39 = v40;
              ++v80;
              if (v77)
              {
                v41 = &v73;
                mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v73, a6);
                v42 = (char *)v79;
                if (v80 >= v81)
                {
                  v62 = v80 + 1;
                  if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
                  {
                    v70 = (char *)&v73 - (_BYTE *)v79;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v62, 24);
                    v42 = (char *)v79;
                    v41 = (const void ***)((char *)v79 + v70);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v62, 24);
                    v41 = &v73;
                    v42 = (char *)v79;
                  }
                }
                v43 = &v42[24 * v80];
                v44 = *(_OWORD *)v41;
                *((_QWORD *)v43 + 2) = v41[2];
                *(_OWORD *)v43 = v44;
                v45 = ++v80;
                if (v77)
                {
                  LODWORD(v73) = 3;
                  v74 = " attribute created with unregistered dialect. If this is intended, please call allowUnregistered"
                        "Dialects() on the MLIRContext, or use -allow-unregistered-dialect with the MLIR opt tool used";
                  v75 = 189;
                  v46 = &v73;
                  v47 = (char *)v79;
                  if (v45 >= v81)
                  {
                    v63 = v45 + 1;
                    v64 = (char *)v79 + 24 * v45 > (char *)&v73;
                    if (v79 <= &v73 && v64)
                    {
                      v71 = (char *)&v73 - (_BYTE *)v79;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v63, 24);
                      v47 = (char *)v79;
                      v46 = (const void ***)((char *)v79 + v71);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v63, 24);
                      v46 = &v73;
                      v47 = (char *)v79;
                    }
                  }
                  v48 = &v47[24 * v80];
                  v49 = *(_OWORD *)v46;
                  *((_QWORD *)v48 + 2) = v46[2];
                  *(_OWORD *)v48 = v49;
                  ++v80;
                }
              }
            }
          }
        }
      }
    }
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
    if (v77)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    if (v87)
    {
      v50 = (_QWORD **)__p;
      if (__p)
      {
        v51 = v86;
        v52 = __p;
        if (v86 != __p)
        {
          do
            v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
          while (v51 != v50);
          v52 = __p;
        }
        v86 = v50;
        operator delete(v52);
      }
      v24 = v83;
      if (!v83)
        goto LABEL_54;
      v53 = v84;
      v26 = v83;
      if (v84 == v83)
      {
LABEL_53:
        v84 = v24;
        operator delete(v26);
LABEL_54:
        if (v79 != v82)
          free(v79);
        return v12;
      }
      do
      {
        v55 = (void *)*--v53;
        v54 = v55;
        *v53 = 0;
        if (v55)
          operator delete[](v54);
      }
      while (v53 != v24);
LABEL_52:
      v26 = v83;
      goto LABEL_53;
    }
  }
  else
  {
    a1(&v77, a2);
    if (v77)
    {
      LODWORD(v73) = 3;
      v74 = "invalid dialect namespace '";
      v75 = 27;
      v13 = &v73;
      v14 = (char *)v79;
      if (v80 >= v81)
      {
        v57 = v80 + 1;
        if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
        {
          v65 = (char *)&v73 - (_BYTE *)v79;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v57, 24);
          v14 = (char *)v79;
          v13 = (const void ***)((char *)v79 + v65);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v57, 24);
          v13 = &v73;
          v14 = (char *)v79;
        }
      }
      v15 = &v14[24 * v80];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v80;
      if (v77)
      {
        mlir::Diagnostic::operator<<((uint64_t)v78, v72);
        if (v77)
        {
          LODWORD(v73) = 3;
          v74 = "'";
          v75 = 1;
          v17 = &v73;
          v18 = (char *)v79;
          if (v80 >= v81)
          {
            v58 = v80 + 1;
            if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
            {
              v66 = (char *)&v73 - (_BYTE *)v79;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v58, 24);
              v18 = (char *)v79;
              v17 = (const void ***)((char *)v79 + v66);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v58, 24);
              v17 = &v73;
              v18 = (char *)v79;
            }
          }
          v19 = &v18[24 * v80];
          v20 = *(_OWORD *)v17;
          *((_QWORD *)v19 + 2) = v17[2];
          *(_OWORD *)v19 = v20;
          ++v80;
        }
      }
    }
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
    if (v77)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    if (v87)
    {
      v21 = (_QWORD **)__p;
      if (__p)
      {
        v22 = v86;
        v23 = __p;
        if (v86 != __p)
        {
          do
            v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          v23 = __p;
        }
        v86 = v21;
        operator delete(v23);
      }
      v24 = v83;
      if (!v83)
        goto LABEL_54;
      v25 = v84;
      v26 = v83;
      if (v84 == v83)
        goto LABEL_53;
      do
      {
        v28 = (void *)*--v25;
        v27 = v28;
        *v25 = 0;
        if (v28)
          operator delete[](v27);
      }
      while (v25 != v24);
      goto LABEL_52;
    }
  }
  return v12;
}

uint64_t mlir::DenseElementsAttr::AttributeElementIterator::operator*(_QWORD *a1)
{
  uint64_t v2;
  uint64_t OperandRange;
  void *v4;
  void *v5;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  void *FloatSemantics;
  mlir::MLIRContext *v23;
  llvm::APFloatBase *AttributeUniquer;
  llvm::APFloatBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t DenseElementBitWidth;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  void **v37;
  _BOOL4 isSignlessInteger;
  mlir::MLIRContext *Context;
  mlir::BoolAttr *v40;
  int v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  void *Value;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  llvm::APFloatBase *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  mlir::MLIRContext *v56;
  llvm::APFloatBase *v57;
  uint64_t v58;
  mlir::MLIRContext *v59;
  llvm::APFloatBase *v60;
  uint64_t v61;
  mlir::MLIRContext *v62;
  unsigned __int8 **v63;
  _BOOL4 v64;
  mlir::MLIRContext *v65;
  mlir::BoolAttr *v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  _BOOL4 v72;
  mlir::MLIRContext *v73;
  mlir::BoolAttr *v74;
  int v75;
  BOOL v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  mlir::MLIRContext *v80;
  unsigned __int8 **v81;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86[2];
  void *__p[2];
  void *v88;
  unint64_t v89;
  void *v90;
  _QWORD v91[3];
  void *v92[2];
  __int128 v93;
  void *v94;
  __int128 v95;
  llvm::APFloatBase *v96;
  unsigned int v97;
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  *(_OWORD *)__p = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)__p);
  v4 = (void *)OperandRange;
  v5 = *(void **)(*(_QWORD *)OperandRange + 136);
  if (OperandRange && v5 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    v27 = a1[1];
    v28 = *(_QWORD *)(v2 + 32);
    v29 = *(unsigned __int8 *)(v2 + 24);
    *(_OWORD *)__p = *(_OWORD *)(v2 + 8);
    v30 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)__p);
    DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(v30);
    if (v29)
      v32 = 0;
    else
      v32 = v27;
    v33 = DenseElementBitWidth + 7;
    v34 = (DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
    if (DenseElementBitWidth == 1)
      v34 = 1;
    v35 = v34 * v32;
    if (DenseElementBitWidth == 1)
    {
      v36 = (void *)((*(unsigned __int8 *)(v28 + (v35 >> 3)) >> (v35 & 7)) & 1);
      LODWORD(__p[1]) = 1;
      __p[0] = v36;
      goto LABEL_57;
    }
    LODWORD(__p[1]) = DenseElementBitWidth;
    if (DenseElementBitWidth > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)__p, 0, 0);
      if (LODWORD(__p[1]) >= 0x41)
        v37 = (void **)__p[0];
      else
        v37 = __p;
      if (v33 < 8)
      {
LABEL_57:
        v92[0] = v4;
        isSignlessInteger = mlir::Type::isSignlessInteger((mlir::Type *)v92, 1);
        Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v92);
        v40 = Context;
        if (isSignlessInteger)
        {
          v41 = (int)__p[1];
          if (LODWORD(__p[1]) > 0x40)
            v42 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)__p) == v41;
          else
            v42 = __p[0] == 0;
          v43 = v42;
          v25 = (llvm::APFloatBase *)mlir::BoolAttr::get(v40, (mlir::MLIRContext *)(v43 ^ 1u));
          if (LODWORD(__p[1]) < 0x41)
            return (uint64_t)v25;
        }
        else
        {
          v25 = (llvm::APFloatBase *)mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(Context, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, (uint64_t *)v92, (uint64_t)__p);
          if (LODWORD(__p[1]) < 0x41)
            return (uint64_t)v25;
        }
        goto LABEL_67;
      }
    }
    else
    {
      __p[0] = 0;
      v37 = __p;
      if (v33 < 8)
        goto LABEL_57;
    }
    memmove(v37, (const void *)(v28 + (v35 >> 3)), v33 >> 3);
    goto LABEL_57;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    *(_QWORD *)&v98 = OperandRange;
    if (OperandRange)
    {
      v17 = (void *)a1[1];
      v18 = *(void **)(v2 + 32);
      v19 = (void *)*(unsigned __int8 *)(v2 + 24);
      *(_OWORD *)__p = *(_OWORD *)(v2 + 8);
      v20 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)__p);
      v21 = mlir::detail::getDenseElementBitWidth(v20);
      FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v98);
      __p[0] = v18;
      __p[1] = v19;
      v88 = v17;
      v89 = v21;
      v90 = FloatSemantics;
      llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*(__p, (uint64_t)v92);
      *(_QWORD *)&v83 = v4;
      v23 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v83);
      AttributeUniquer = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(v23);
      *(_QWORD *)&v95 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
      *((_QWORD *)&v95 + 1) = v23;
      v25 = (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_, (uint64_t)&v95, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, (uint64_t *)&v83, (uint64_t)v92);
      v26 = v92[1];
      if (llvm::APFloatBase::PPCDoubleDouble(v25) == v26)
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v92[1]);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v92[1]);
      return (uint64_t)v25;
    }
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v44 = OperandRange;
  else
    v44 = 0;
  v85 = v44;
  if (!v44)
  {
    v53 = *(_QWORD *)(v2 + 32);
    if (!*(_BYTE *)(v2 + 24))
      v53 += 16 * a1[1];
    LOWORD(v90) = 261;
    v55 = *(void **)v53;
    v54 = *(void **)(v53 + 8);
    __p[0] = v55;
    __p[1] = v54;
    return mlir::StringAttr::get((char **)__p, OperandRange);
  }
  Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v85);
  v46 = a1[1];
  v47 = *(unsigned __int8 *)(v2 + 24);
  *(_QWORD *)&v83 = *(_QWORD *)(v2 + 32);
  *((_QWORD *)&v83 + 1) = v47;
  *(_QWORD *)&v84 = v46;
  *(_OWORD *)__p = *(_OWORD *)(v2 + 8);
  __p[0] = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)__p);
  v48 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
  *((_QWORD *)&v84 + 1) = mlir::detail::getDenseElementBitWidth(v48);
  if (*(_UNKNOWN **)(*(_QWORD *)Value + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    __p[0] = Value;
    v49 = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)__p);
    *(_OWORD *)v92 = v83;
    v93 = v84;
    v94 = v49;
    mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)v92, &v95);
    mlir::DenseElementsAttr::ComplexFloatElementIterator::mapElement((llvm::APInt *)&v95, (llvm::APFloatBase *)v92, (uint64_t)__p);
    if (v97 >= 0x41)
    {
      v50 = v96;
      if (v96)
        operator delete[](v96);
    }
    if (DWORD2(v95) >= 0x41)
    {
      v50 = (llvm::APFloatBase *)v95;
      if ((_QWORD)v95)
        operator delete[]((void *)v95);
    }
    v51 = __p[1];
    v52 = llvm::APFloatBase::PPCDoubleDouble(v50);
    if (v52 == v51)
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v95 + 8), (const llvm::detail::DoubleAPFloat *)&__p[1]);
    else
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v95 + 8), (const llvm::detail::IEEEFloat *)&__p[1]);
    v86[0] = (uint64_t)Value;
    v56 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v86);
    v57 = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(v56);
    *(_QWORD *)&v98 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
    *((_QWORD *)&v98 + 1) = v56;
    v58 = mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(v57, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_, (uint64_t)&v98, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, v86, (uint64_t)&v95);
    if (v52 == *((void **)&v95 + 1))
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v95 + 8));
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v95 + 8));
    if (v52 == (void *)v91[0])
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v95 + 8), (const llvm::detail::DoubleAPFloat *)v91);
    else
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v95 + 8), (const llvm::detail::IEEEFloat *)v91);
    v86[0] = (uint64_t)Value;
    v59 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v86);
    v60 = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(v59);
    *(_QWORD *)&v98 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
    *((_QWORD *)&v98 + 1) = v59;
    v61 = mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(v60, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_, (uint64_t)&v98, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, v86, (uint64_t)&v95);
    if (v52 == *((void **)&v95 + 1))
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v95 + 8));
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v95 + 8));
    v62 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v85);
    v86[0] = v58;
    v86[1] = v61;
    *(_QWORD *)&v98 = v86;
    *((_QWORD *)&v98 + 1) = 2;
    v63 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v62);
    *(_QWORD *)&v95 = &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
    *((_QWORD *)&v95 + 1) = v62;
    v25 = (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(v63, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)&v95, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, &v98);
    if (v52 == (void *)v91[0])
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v91);
      if (v52 != __p[1])
        goto LABEL_100;
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v91);
      if (v52 != __p[1])
      {
LABEL_100:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&__p[1]);
        return (uint64_t)v25;
      }
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&__p[1]);
    return (uint64_t)v25;
  }
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v83, __p);
  LODWORD(v92[1]) = __p[1];
  if (LODWORD(__p[1]) > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)v92, (const void **)__p);
  else
    v92[0] = __p[0];
  *(_QWORD *)&v95 = Value;
  v64 = mlir::Type::isSignlessInteger((mlir::Type *)&v95, 1);
  v65 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v95);
  v66 = v65;
  if (v64)
  {
    v67 = (int)v92[1];
    if (LODWORD(v92[1]) > 0x40)
      v68 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v92) == v67;
    else
      v68 = v92[0] == 0;
    v70 = v68;
    v69 = mlir::BoolAttr::get(v66, (mlir::MLIRContext *)(v70 ^ 1u));
  }
  else
  {
    v69 = mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(v65, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, (uint64_t *)&v95, (uint64_t)v92);
  }
  v71 = v69;
  if (LODWORD(v92[1]) >= 0x41 && v92[0])
    operator delete[](v92[0]);
  LODWORD(v92[1]) = v89;
  if (v89 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)v92, (const void **)&v88);
  else
    v92[0] = v88;
  *(_QWORD *)&v95 = Value;
  v72 = mlir::Type::isSignlessInteger((mlir::Type *)&v95, 1);
  v73 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v95);
  v74 = v73;
  if (v72)
  {
    v75 = (int)v92[1];
    if (LODWORD(v92[1]) > 0x40)
      v76 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v92) == v75;
    else
      v76 = v92[0] == 0;
    v78 = v76;
    v77 = mlir::BoolAttr::get(v74, (mlir::MLIRContext *)(v78 ^ 1u));
  }
  else
  {
    v77 = mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(v73, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, (uint64_t *)&v95, (uint64_t)v92);
  }
  v79 = v77;
  if (LODWORD(v92[1]) >= 0x41 && v92[0])
    operator delete[](v92[0]);
  v80 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v85);
  *(_QWORD *)&v98 = v71;
  *((_QWORD *)&v98 + 1) = v79;
  *(_QWORD *)&v95 = &v98;
  *((_QWORD *)&v95 + 1) = 2;
  v81 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v80);
  v92[0] = &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
  v92[1] = v80;
  v25 = (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(v81, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)v92, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, &v95);
  if (v89 >= 0x41 && v88)
    operator delete[](v88);
  if (LODWORD(__p[1]) >= 0x41)
  {
LABEL_67:
    if (__p[0])
      operator delete[](__p[0]);
  }
  return (uint64_t)v25;
}

uint64_t mlir::DenseElementsAttr::getElementType(mlir::DenseElementsAttr *this)
{
  __int128 v2;

  v2 = *(_OWORD *)(*(_QWORD *)this + 8);
  return mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v2);
}

_QWORD *mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t OperandRange;
  __int128 v7;

  v4 = *(unsigned __int8 *)(a2 + 24);
  *a1 = *(_QWORD *)(a2 + 32);
  a1[1] = v4;
  a1[2] = a3;
  v7 = *(_OWORD *)(a2 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v7);
  a1[3] = mlir::detail::getDenseElementBitWidth(OperandRange);
  return a1;
}

void mlir::DenseElementsAttr::IntElementIterator::operator*(uint64_t *a1@<X0>, llvm::APInt *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (*((_BYTE *)a1 + 8))
    v3 = 0;
  else
    v3 = a1[2];
  v4 = *a1;
  v5 = a1[3];
  v6 = v5 + 7;
  v7 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v5 == 1)
    v7 = 1;
  v8 = v7 * v3;
  if (v5 == 1)
  {
    v9 = (*(unsigned __int8 *)(v4 + (v8 >> 3)) >> (v8 & 7)) & 1;
    *((_DWORD *)a2 + 2) = 1;
    *(_QWORD *)a2 = v9;
    return;
  }
  *((_DWORD *)a2 + 2) = v5;
  if (v5 <= 0x40)
  {
    *(_QWORD *)a2 = 0;
    if (v6 < 8)
      return;
    goto LABEL_10;
  }
  llvm::APInt::initSlowCase(a2, 0, 0);
  if (*((_DWORD *)a2 + 2) >= 0x41u)
    a2 = *(llvm::APInt **)a2;
  if (v6 >= 8)
LABEL_10:
    memmove(a2, (const void *)(v4 + (v8 >> 3)), v6 >> 3);
}

void llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*(_QWORD *p_p@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  llvm::detail::IEEEFloat *v12;
  void *__p;
  unsigned int v14;

  v2 = p_p;
  if (*((_BYTE *)p_p + 8))
    v4 = 0;
  else
    v4 = p_p[2];
  v5 = *p_p;
  v6 = p_p[3];
  v7 = v6 + 7;
  v8 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v6 == 1)
    v8 = 1;
  v9 = v8 * v4;
  if (v6 == 1)
  {
    v10 = (void *)((*(unsigned __int8 *)(v5 + (v9 >> 3)) >> (v9 & 7)) & 1);
    v14 = 1;
    __p = v10;
    goto LABEL_16;
  }
  v14 = p_p[3];
  if (v6 <= 0x40)
  {
    __p = 0;
    p_p = &__p;
    if (v7 < 8)
      goto LABEL_16;
LABEL_15:
    p_p = memmove(p_p, (const void *)(v5 + (v9 >> 3)), v7 >> 3);
    goto LABEL_16;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
  if (v14 >= 0x41)
    p_p = __p;
  else
    p_p = &__p;
  if (v7 >= 8)
    goto LABEL_15;
LABEL_16:
  v11 = (void *)v2[4];
  v12 = (llvm::detail::IEEEFloat *)(a2 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)p_p) == v11)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v12, (uint64_t)v11, (uint64_t)&__p);
    if (v14 < 0x41)
      return;
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat(v12, v11, (const llvm::APInt **)&__p);
    if (v14 < 0x41)
      return;
  }
  if (__p)
    operator delete[](__p);
}

void mlir::DenseElementsAttr::ComplexIntElementIterator::operator*(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *p_p;
  unint64_t v16;
  unsigned int v17;
  llvm::APInt *v18;
  unsigned int v19;
  unsigned int v20;
  void *__p;
  unsigned int v22;
  void *v23;
  unsigned int v24;

  v4 = a1[3];
  v5 = v4 + 7;
  if (v4 == 1)
    v6 = 1;
  else
    v6 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*((_BYTE *)a1 + 8))
  {
    v7 = 0;
    v8 = *a1;
    if (v4 == 1)
    {
LABEL_6:
      v9 = (void *)((*(unsigned __int8 *)(v8 + (v7 >> 3)) >> (v7 & 6)) & 1);
      v24 = 1;
      v23 = v9;
      goto LABEL_16;
    }
  }
  else
  {
    v7 = 2 * v6 * a1[2];
    v8 = *a1;
    if (v4 == 1)
      goto LABEL_6;
  }
  v24 = a1[3];
  if (v4 <= 0x40)
  {
    v23 = 0;
    v10 = &v23;
    if (v5 < 8)
      goto LABEL_16;
LABEL_15:
    memmove(v10, (const void *)(v8 + (v7 >> 3)), v5 >> 3);
    goto LABEL_16;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v23, 0, 0);
  if (v24 >= 0x41)
    v10 = v23;
  else
    v10 = &v23;
  if (v5 >= 8)
    goto LABEL_15;
LABEL_16:
  v11 = *a1;
  v12 = v7 + v6;
  v13 = a1[3];
  if (v13 == 1)
  {
    v14 = (void *)((*(unsigned __int8 *)(v11 + (v12 >> 3)) >> (v12 & 7)) & 1);
    v22 = 1;
    __p = v14;
    goto LABEL_26;
  }
  v22 = v13;
  if (v13 <= 0x40)
  {
    __p = 0;
    p_p = &__p;
    v16 = v13 + 7;
    if ((unint64_t)(v13 + 7) < 8)
      goto LABEL_26;
LABEL_25:
    memmove(p_p, (const void *)(v11 + (v12 >> 3)), v16 >> 3);
    goto LABEL_26;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
  if (v22 >= 0x41)
    p_p = __p;
  else
    p_p = &__p;
  v16 = v13 + 7;
  if ((unint64_t)(v13 + 7) >= 8)
    goto LABEL_25;
LABEL_26:
  v17 = v24;
  a2[2] = v24;
  if (v17 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)a2, (const void **)&v23);
    v18 = (llvm::APInt *)(a2 + 4);
    v20 = v22;
    a2[6] = v22;
    if (v20 > 0x40)
      goto LABEL_28;
LABEL_32:
    *(_QWORD *)v18 = __p;
    goto LABEL_33;
  }
  *(_QWORD *)a2 = v23;
  v18 = (llvm::APInt *)(a2 + 4);
  v19 = v22;
  a2[6] = v22;
  if (v19 <= 0x40)
    goto LABEL_32;
LABEL_28:
  llvm::APInt::initSlowCase(v18, (const void **)&__p);
  if (v22 >= 0x41 && __p)
    operator delete[](__p);
LABEL_33:
  if (v24 >= 0x41)
  {
    if (v23)
      operator delete[](v23);
  }
}

uint64_t mlir::DenseElementsAttr::getRawStringData(mlir::DenseElementsAttr *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 32);
}

uint64_t mlir::DenseElementsAttr::isSplat(mlir::DenseElementsAttr *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 24);
}

unint64_t mlir::detail::getDenseElementBitWidth(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;

  v5 = a1;
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v1 = a1;
  else
    v1 = 0;
  v4 = v1;
  if (v1)
  {
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v4);
    return (2 * mlir::detail::getDenseElementBitWidth(Value) + 14) & 0xFFFFFFFFFFFFFFF0;
  }
  else if (mlir::Type::isIndex((mlir::Type *)&v5))
  {
    return 64;
  }
  else
  {
    return mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v5);
  }
}

uint64_t mlir::detail::DenseArrayAttrImpl<BOOL>::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 **AttributeUniquer;
  unsigned int v8;
  _QWORD v10[2];
  _QWORD v11[2];
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];

  v6 = mlir::IntegerType::get((uint64_t)a1, 1u, 0);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v10[1] = a1;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v16[1] = v10;
  v13 = v6;
  v14 = a3;
  v15[0] = a2;
  v15[1] = a3;
  v8 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v13, &v14, (uint64_t)v15);
  v11[0] = &v13;
  v11[1] = v16;
  v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

uint64_t mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 24);
}

uint64_t mlir::detail::DenseArrayAttrImpl<int>::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 **AttributeUniquer;
  unsigned int v8;
  _QWORD v10[2];
  _QWORD v11[2];
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];

  v6 = mlir::IntegerType::get((uint64_t)a1, 0x20u, 0);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v10[1] = a1;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v16[1] = v10;
  v13 = v6;
  v14 = a3;
  v15[0] = a2;
  v15[1] = 4 * a3;
  v8 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v13, &v14, (uint64_t)v15);
  v11[0] = &v13;
  v11[1] = v16;
  v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

BOOL mlir::detail::DenseArrayAttrImpl<int>::classof(_QWORD *a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;

  result = 0;
  if (a1 && *(_UNKNOWN **)(*a1 + 136) == &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id)
  {
    v3 = a1[1];
    if (*(_UNKNOWN **)(*(_QWORD *)v3 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      v3 = 0;
    v4 = v3;
    return v3
        && mlir::IntegerType::getWidth((mlir::IntegerType *)&v4) == 32
        && mlir::IntegerType::getSignedness((mlir::IntegerType *)&v4) == 0;
  }
  return result;
}

uint64_t mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 24);
}

uint64_t mlir::detail::DenseArrayAttrImpl<long long>::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 **AttributeUniquer;
  unsigned int v8;
  _QWORD v10[2];
  _QWORD v11[2];
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];

  v6 = mlir::IntegerType::get((uint64_t)a1, 0x40u, 0);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v10[1] = a1;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v16[1] = v10;
  v13 = v6;
  v14 = a3;
  v15[0] = a2;
  v15[1] = 8 * a3;
  v8 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v13, &v14, (uint64_t)v15);
  v11[0] = &v13;
  v11[1] = v16;
  v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

llvm::raw_ostream *mlir::detail::DenseArrayAttrImpl<long long>::print(llvm::raw_ostream *a1, uint64_t a2)
{
  llvm::raw_ostream *v3;

  v3 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  return mlir::detail::DenseArrayAttrImpl<long long>::print(a1, v3);
}

llvm::raw_ostream *mlir::detail::DenseArrayAttrImpl<long long>::print(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  _WORD *v12;
  unint64_t v13;
  _BYTE *v14;

  v3 = result;
  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v4)
  {
    result = llvm::raw_ostream::write(this, "[", 1uLL);
    v5 = *(_QWORD *)v3;
    v6 = *(_QWORD *)(*(_QWORD *)v3 + 32);
    if (v6 < 8)
      goto LABEL_10;
  }
  else
  {
    *v4 = 91;
    ++*((_QWORD *)this + 4);
    v5 = *(_QWORD *)result;
    v6 = *(_QWORD *)(*(_QWORD *)result + 32);
    if (v6 < 8)
      goto LABEL_10;
  }
  v7 = *(unint64_t **)(v5 + 24);
  v8 = v6 >> 3;
  result = llvm::raw_ostream::operator<<(this, *v7);
  if (v8 != 1)
  {
    v9 = v7 + 1;
    v10 = 8 * v8 - 8;
    do
    {
      while (1)
      {
        v12 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v12 <= 1uLL)
          break;
        *v12 = 8236;
        *((_QWORD *)this + 4) += 2;
        v11 = *v9++;
        result = llvm::raw_ostream::operator<<(this, v11);
        v10 -= 8;
        if (!v10)
          goto LABEL_10;
      }
      llvm::raw_ostream::write(this, ", ", 2uLL);
      v13 = *v9++;
      result = llvm::raw_ostream::operator<<(this, v13);
      v10 -= 8;
    }
    while (v10);
  }
LABEL_10:
  v14 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v14)
    return llvm::raw_ostream::write(this, "]", 1uLL);
  *v14 = 93;
  ++*((_QWORD *)this + 4);
  return result;
}

uint64_t mlir::detail::DenseArrayAttrImpl<long long>::parse(mlir::AsmParser *a1)
{
  mlir::MLIRContext *Context;
  uint64_t v3;
  unsigned __int8 **AttributeUniquer;
  unsigned int v5;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[2];
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];

  if (!(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 296))(a1))
    return 0;
  if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 320))(a1))
  {
    Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
    v3 = mlir::IntegerType::get((uint64_t)Context, 0x40u, 0);
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
    v8[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
    v8[1] = Context;
    v14[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
    v14[1] = v8;
    v11 = v3;
    v12 = 0;
    v13[0] = 0;
    v13[1] = 0;
    v5 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v11, &v12, (uint64_t)v13);
    v9[0] = &v11;
    v9[1] = v14;
    v10 = &v11;
    return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v5, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v10, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v9);
  }
  else
  {
    v7 = mlir::detail::DenseArrayAttrImpl<long long>::parseWithoutBraces(a1);
    if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 312))(a1))
      return v7;
    else
      return 0;
  }
}

uint64_t mlir::detail::DenseArrayAttrImpl<long long>::parseWithoutBraces(mlir::AsmParser *a1)
{
  mlir::MLIRContext *Context;
  void *v3;
  void **v4;
  uint64_t v5;
  unsigned __int8 **AttributeUniquer;
  unsigned int v7;
  uint64_t ParametricStorageTypeImpl;
  void *v9;
  _QWORD v11[2];
  _QWORD v12[2];
  uint64_t *v13;
  uint64_t v14;
  void **v15;
  _QWORD v16[2];
  _QWORD v17[2];
  void *v18;
  uint64_t v19;
  _QWORD v20[7];

  v20[6] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = 0x600000000;
  v14 = (uint64_t)a1;
  v15 = &v18;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, _QWORD, uint64_t (*)(uint64_t *), uint64_t *, _QWORD, _QWORD))(*(_QWORD *)a1 + 360))(a1, 0, llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::DenseArrayAttrImpl<long long>::parseWithoutBraces(mlir::AsmParser &,mlir::Type)::{lambda(void)#1}>, &v14, 0, 0))
  {
    ParametricStorageTypeImpl = 0;
    v9 = v18;
    if (v18 == v20)
      return ParametricStorageTypeImpl;
    goto LABEL_3;
  }
  Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
  v3 = v18;
  v4 = (void **)v19;
  v5 = mlir::IntegerType::get((uint64_t)Context, 0x40u, 0);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v11[1] = Context;
  v17[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v17[1] = v11;
  v14 = v5;
  v15 = v4;
  v16[0] = v3;
  v16[1] = 8 * (_QWORD)v4;
  v7 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v14, (uint64_t *)&v15, (uint64_t)v16);
  v12[0] = &v14;
  v12[1] = v17;
  v13 = &v14;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v12);
  v9 = v18;
  if (v18 != v20)
LABEL_3:
    free(v9);
  return ParametricStorageTypeImpl;
}

BOOL mlir::detail::DenseArrayAttrImpl<long long>::classof(_QWORD *a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;

  result = 0;
  if (a1 && *(_UNKNOWN **)(*a1 + 136) == &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id)
  {
    v3 = a1[1];
    if (*(_UNKNOWN **)(*(_QWORD *)v3 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      v3 = 0;
    v4 = v3;
    return v3
        && mlir::IntegerType::getWidth((mlir::IntegerType *)&v4) == 64
        && mlir::IntegerType::getSignedness((mlir::IntegerType *)&v4) == 0;
  }
  return result;
}

BOOL mlir::DenseElementsAttr::classof(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(*(_QWORD *)a1 + 136);
  return v1 == &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id
      || v1 == &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id;
}

uint64_t mlir::DenseElementsAttr::get(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t OperandRange;
  uint64_t v7;
  llvm::APFloatBase *isIntOrIndex;
  llvm::APFloatBase *DenseElementBitWidth;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  const void **v21;
  const void **v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  int64_t v27;
  llvm::APInt *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t Raw;
  _OWORD *v34;
  uint64_t v35;
  _OWORD *v36;
  void *v37;
  void *v38;
  char *v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  const llvm::detail::DoubleAPFloat *v44;
  const llvm::detail::IEEEFloat *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  llvm::APFloatBase *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  llvm::detail::DoubleAPFloat *v55;
  llvm::detail::DoubleAPFloat *v56;
  void *v57;
  unsigned int v58;
  uint64_t v59;
  __int128 v60;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  const void **v66;
  const llvm::detail::DoubleAPFloat *v67;
  void *v68;
  void *v69;
  unint64_t v70;
  _BYTE *v71;
  const void *p_src;
  int v73;
  char v74;
  __int128 v76;
  void *__src;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  void *Value;
  __int128 v83;
  _BYTE v84[120];
  void *__p;
  _QWORD v86[3];
  _OWORD v87[2];
  __int128 v88;
  void *v89;
  unsigned int v90;
  _QWORD v91[5];

  v91[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v81 = a1;
  *((_QWORD *)&v81 + 1) = a2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v81);
  v80 = OperandRange;
  if (*(_UNKNOWN **)(*(_QWORD *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v7 = OperandRange;
  else
    v7 = 0;
  v79 = v7;
  if (!v7)
  {
    if (mlir::Type::isIntOrIndexOrFloat((mlir::Type *)&v80))
    {
      DenseElementBitWidth = (llvm::APFloatBase *)mlir::detail::getDenseElementBitWidth(v80);
      if (DenseElementBitWidth == (llvm::APFloatBase *)1)
        v10 = 1;
      else
        v10 = ((unint64_t)DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
      v11 = v10 * a4 + 7;
      Value = v84;
      v83 = xmmword_1812349A0;
      if (v11 < 8)
        goto LABEL_113;
      v12 = v11 >> 3;
      if (v11 < 0x48)
      {
        v13 = 0;
        v14 = v12;
        if (!v12)
        {
LABEL_112:
          *(_QWORD *)&v83 = v12;
LABEL_113:
          *(_QWORD *)&v76 = v84;
          DWORD2(v87[0]) = 1;
          *(_QWORD *)&v87[0] = 0;
          v63 = a4;
          if (!(_DWORD)a4)
          {
LABEL_151:
            if (a4 == 1 && mlir::Type::isInteger((mlir::Type *)&v80, 1))
            {
              if (*(_BYTE *)Value)
                v74 = -1;
              else
                v74 = 0;
              *(_BYTE *)Value = v74;
            }
            Raw = mlir::DenseIntOrFPElementsAttr::getRaw(v81, *((uint64_t *)&v81 + 1), (unsigned __int8 *)Value, v83);
            if (DWORD2(v87[0]) >= 0x41 && *(_QWORD *)&v87[0])
              operator delete[](*(void **)&v87[0]);
            v57 = Value;
            if (Value == (void *)v76)
              return Raw;
LABEL_161:
            free(v57);
            return Raw;
          }
          v64 = 0;
          while (1)
          {
            v65 = *a3;
            if (*(_UNKNOWN **)(*(_QWORD *)*a3 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
            {
              v66 = (const void **)(v65 + 16);
              DWORD2(v88) = *(_DWORD *)(v65 + 24);
              if (DWORD2(v88) > 0x40)
              {
                DenseElementBitWidth = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&v88, v66);
                if (DWORD2(v87[0]) < 0x41)
                  goto LABEL_127;
              }
              else
              {
                *(_QWORD *)&v88 = *v66;
                if (DWORD2(v87[0]) < 0x41)
                  goto LABEL_127;
              }
              DenseElementBitWidth = *(llvm::APFloatBase **)&v87[0];
              if (*(_QWORD *)&v87[0])
                operator delete[](*(void **)&v87[0]);
LABEL_127:
              *(_QWORD *)&v87[0] = v88;
              v70 = DWORD2(v88);
              DWORD2(v87[0]) = DWORD2(v88);
              v71 = Value;
              v78 = DWORD2(v88);
              if (DWORD2(v88) <= 0x40uLL)
                goto LABEL_135;
              goto LABEL_143;
            }
            v68 = *(void **)(v65 + 24);
            v67 = (const llvm::detail::DoubleAPFloat *)(v65 + 24);
            v69 = llvm::APFloatBase::PPCDoubleDouble(DenseElementBitWidth);
            if (v69 == v68)
            {
              llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v88 + 8), v67);
              if (v69 != *((void **)&v88 + 1))
              {
LABEL_122:
                llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)((char *)&v88 + 8), (uint64_t)&__p);
                if (DWORD2(v87[0]) < 0x41)
                  goto LABEL_133;
                goto LABEL_131;
              }
            }
            else
            {
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v88 + 8), v67);
              if (v69 != *((void **)&v88 + 1))
                goto LABEL_122;
            }
            llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)((char *)&v88 + 8), (llvm::APInt *)&__p);
            if (DWORD2(v87[0]) < 0x41)
              goto LABEL_133;
LABEL_131:
            if (*(_QWORD *)&v87[0])
              operator delete[](*(void **)&v87[0]);
LABEL_133:
            *(_QWORD *)&v87[0] = __p;
            DWORD2(v87[0]) = v86[0];
            LODWORD(v86[0]) = 0;
            if (v69 == *((void **)&v88 + 1))
            {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v88 + 8));
              v71 = Value;
              v78 = DWORD2(v87[0]);
              v70 = DWORD2(v87[0]);
              if (DWORD2(v87[0]) <= 0x40uLL)
              {
LABEL_135:
                __src = *(void **)&v87[0];
                if (v70 != 1)
                  goto LABEL_136;
                goto LABEL_144;
              }
            }
            else
            {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v88 + 8));
              v71 = Value;
              v78 = DWORD2(v87[0]);
              v70 = DWORD2(v87[0]);
              if (DWORD2(v87[0]) <= 0x40uLL)
                goto LABEL_135;
            }
LABEL_143:
            DenseElementBitWidth = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&__src, (const void **)v87);
            v70 = v78;
            if (v78 != 1)
            {
LABEL_136:
              if (v70 >= 0x41)
              {
                p_src = __src;
LABEL_140:
                DenseElementBitWidth = (llvm::APFloatBase *)memmove(&v71[v64 >> 3], p_src, (v70 + 7) >> 3);
                if (v78 >= 0x41)
                  goto LABEL_149;
                goto LABEL_115;
              }
              if (v70)
              {
                p_src = &__src;
                goto LABEL_140;
              }
              goto LABEL_146;
            }
LABEL_144:
            v73 = 1 << (v64 & 7);
            if (__src == (void *)1)
            {
              v71[v64 >> 3] |= v73;
LABEL_146:
              if (v78 >= 0x41)
                goto LABEL_149;
              goto LABEL_115;
            }
            v71[v64 >> 3] &= ~(_BYTE)v73;
            if (v78 >= 0x41)
            {
LABEL_149:
              DenseElementBitWidth = (llvm::APFloatBase *)__src;
              if (__src)
                operator delete[](__src);
            }
LABEL_115:
            v64 += v10;
            ++a3;
            if (!--v63)
              goto LABEL_151;
          }
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&Value, v84, v11 >> 3, 1);
        v13 = v83;
        v14 = v12 - v83;
        if (v12 == (_QWORD)v83)
          goto LABEL_112;
      }
      bzero((char *)Value + v13, v14);
      goto LABEL_112;
    }
    Value = (char *)&v83 + 8;
    *(_QWORD *)&v83 = 0x800000000;
    if (a4 < 9)
    {
      v17 = 0;
      v58 = 0;
      if (!a4)
        goto LABEL_108;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, (char *)&v83 + 8, a4, 16);
      v17 = v83;
    }
    v59 = 8 * a4;
    v58 = v17;
    do
    {
      v60 = *(_OWORD *)(*a3 + 16);
      if (v58 >= DWORD1(v83))
      {
        v76 = *(_OWORD *)(*a3 + 16);
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, (char *)&v83 + 8, v58 + 1, 16);
        v60 = v76;
        v58 = v83;
      }
      *((_OWORD *)Value + v58) = v60;
      v58 = v83 + 1;
      LODWORD(v83) = v83 + 1;
      ++a3;
      v59 -= 8;
    }
    while (v59);
LABEL_108:
    v87[0] = v81;
    __p = Value;
    v86[0] = v58;
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v87);
    LOBYTE(v79) = v58 == 1;
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
    *(_QWORD *)&v88 = &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id;
    *((_QWORD *)&v88 + 1) = Context;
    Raw = mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail30DenseStringElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_23DenseStringElementsAttrEJRNS1_10ShapedTypeERNS_8ArrayRefINS_9StringRefEEEbEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_, (uint64_t)&v88, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id, (uint64_t)v87, (uint64_t)&__p, (unsigned __int8 *)&v79);
    v57 = Value;
    if (Value == (char *)&v83 + 8)
      return Raw;
    goto LABEL_161;
  }
  Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v79);
  isIntOrIndex = (llvm::APFloatBase *)mlir::Type::isIntOrIndex((mlir::Type *)&Value);
  if (!(_DWORD)isIntOrIndex)
  {
    Value = (char *)&v83 + 8;
    *(_QWORD *)&v83 = 0x100000000;
    if (a4 < 2)
    {
      v39 = (char *)&v83 + 8;
      if (!a4)
        goto LABEL_89;
    }
    else
    {
      *(_QWORD *)&v88 = 0;
      v15 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&Value, (char *)&v83 + 8, a4, 64, (unint64_t *)&v88);
      llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::moveElementsForGrow((unsigned int *)&Value, (uint64_t)v15);
      v16 = v88;
      isIntOrIndex = (llvm::APFloatBase *)Value;
      if (Value != (char *)&v83 + 8)
        free(Value);
      Value = v15;
      DWORD1(v83) = v16;
    }
    v40 = llvm::APFloatBase::PPCDoubleDouble(isIntOrIndex);
    v41 = 8 * a4;
    while (1)
    {
      v42 = *(_QWORD **)(*a3 + 8);
      v43 = v42[1];
      v44 = (const llvm::detail::DoubleAPFloat *)(*v42 + 24);
      if (v40 == *(void **)v44)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)v87 + 8), v44);
        v45 = (const llvm::detail::IEEEFloat *)(v43 + 24);
        if (v40 != *(void **)(v43 + 24))
        {
LABEL_72:
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v86, v45);
          if (v40 != *((void **)&v87[0] + 1))
            goto LABEL_73;
          goto LABEL_77;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)v87 + 8), v44);
        v45 = (const llvm::detail::IEEEFloat *)(v43 + 24);
        if (v40 != *(void **)(v43 + 24))
          goto LABEL_72;
      }
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v86, v45);
      if (v40 != *((void **)&v87[0] + 1))
      {
LABEL_73:
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v88 + 8), (const llvm::detail::IEEEFloat *)((char *)v87 + 8));
        if (v40 == (void *)v86[0])
          goto LABEL_78;
        goto LABEL_74;
      }
LABEL_77:
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v88 + 8), (const llvm::detail::DoubleAPFloat *)((char *)v87 + 8));
      if (v40 == (void *)v86[0])
      {
LABEL_78:
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v91, (const llvm::detail::DoubleAPFloat *)v86);
        goto LABEL_79;
      }
LABEL_74:
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v91, (const llvm::detail::IEEEFloat *)v86);
LABEL_79:
      llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::push_back((unsigned int *)&Value, (unint64_t)&v88);
      if (v40 == (void *)v91[0])
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v91);
        if (v40 == *((void **)&v88 + 1))
          goto LABEL_85;
LABEL_81:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v88 + 8));
        if (v40 != (void *)v86[0])
          goto LABEL_82;
LABEL_86:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v86);
        if (v40 != *((void **)&v87[0] + 1))
          goto LABEL_87;
LABEL_69:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)v87 + 8));
        ++a3;
        v41 -= 8;
        if (!v41)
          goto LABEL_88;
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v91);
        if (v40 != *((void **)&v88 + 1))
          goto LABEL_81;
LABEL_85:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v88 + 8));
        if (v40 == (void *)v86[0])
          goto LABEL_86;
LABEL_82:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v86);
        if (v40 == *((void **)&v87[0] + 1))
          goto LABEL_69;
LABEL_87:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)v87 + 8));
        ++a3;
        v41 -= 8;
        if (!v41)
        {
LABEL_88:
          v39 = (char *)Value;
LABEL_89:
          v46 = v83;
          v88 = v81;
          v47 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v88);
          v48 = 2 * v46;
          v49 = mlir::detail::getDenseElementBitWidth(v47);
          if (v49 == 1)
            v50 = 0;
          else
            v50 = ((v49 + 7) >> 1) & 0x7FFFFFFFFFFFFFFCLL;
          v51 = (llvm::APFloatBase *)mlir::DenseIntOrFPElementsAttr::getRaw((llvm::APFloatBase *)v88, *((uint64_t *)&v88 + 1), v50, (uint64_t)v39, v48);
          Raw = (uint64_t)v51;
          v34 = Value;
          v52 = v83;
          if (!(_DWORD)v83)
          {
LABEL_101:
            if (v34 == (__int128 *)((char *)&v83 + 8))
              return Raw;
            goto LABEL_102;
          }
          v53 = llvm::APFloatBase::PPCDoubleDouble(v51);
          v54 = v52 << 6;
          while (1)
          {
            v55 = (llvm::detail::DoubleAPFloat *)((char *)v34 + v54 - 24);
            if (v53 == *(void **)v55)
            {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat(v55);
              v56 = (llvm::detail::DoubleAPFloat *)((char *)v34 + v54 - 56);
              if (v53 == *(void **)v56)
              {
LABEL_94:
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v56);
                v54 -= 64;
                if (!v54)
                  goto LABEL_100;
                continue;
              }
            }
            else
            {
              llvm::detail::IEEEFloat::~IEEEFloat(v55);
              v56 = (llvm::detail::DoubleAPFloat *)((char *)v34 + v54 - 56);
              if (v53 == *(void **)v56)
                goto LABEL_94;
            }
            llvm::detail::IEEEFloat::~IEEEFloat(v56);
            v54 -= 64;
            if (!v54)
            {
LABEL_100:
              v34 = Value;
              goto LABEL_101;
            }
          }
        }
      }
    }
  }
  Value = (char *)&v83 + 8;
  *(_QWORD *)&v83 = 0x100000000;
  if (a4 >= 2)
  {
    llvm::SmallVectorTemplateBase<std::complex<llvm::APInt>,false>::grow((uint64_t)&Value, a4);
LABEL_23:
    v18 = 8 * a4;
    while (1)
    {
      v19 = *(_QWORD **)(*a3 + 8);
      v20 = v19[1];
      v21 = (const void **)(*v19 + 16);
      DWORD2(v87[0]) = *(_DWORD *)(*v19 + 24);
      if (DWORD2(v87[0]) > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)v87, v21);
        v22 = (const void **)(v20 + 16);
        LODWORD(v86[0]) = *(_DWORD *)(v20 + 24);
        if (LODWORD(v86[0]) > 0x40)
        {
LABEL_27:
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, v22);
          DWORD2(v88) = DWORD2(v87[0]);
          if (DWORD2(v87[0]) > 0x40)
            goto LABEL_28;
          goto LABEL_32;
        }
      }
      else
      {
        *(_QWORD *)&v87[0] = *v21;
        v22 = (const void **)(v20 + 16);
        LODWORD(v86[0]) = *(_DWORD *)(v20 + 24);
        if (LODWORD(v86[0]) > 0x40)
          goto LABEL_27;
      }
      __p = (void *)*v22;
      DWORD2(v88) = DWORD2(v87[0]);
      if (DWORD2(v87[0]) > 0x40)
      {
LABEL_28:
        llvm::APInt::initSlowCase((llvm::APInt *)&v88, (const void **)v87);
        v90 = v86[0];
        if (LODWORD(v86[0]) <= 0x40)
          goto LABEL_33;
        goto LABEL_29;
      }
LABEL_32:
      *(_QWORD *)&v88 = *(_QWORD *)&v87[0];
      v90 = v86[0];
      if (LODWORD(v86[0]) <= 0x40)
      {
LABEL_33:
        v89 = __p;
        goto LABEL_34;
      }
LABEL_29:
      llvm::APInt::initSlowCase((llvm::APInt *)&v89, (const void **)&__p);
LABEL_34:
      v23 = (char *)Value;
      if (v83 >= DWORD1(v83))
      {
        v26 = v83 + 1;
        if (Value <= &v88 && (char *)Value + 32 * v83 > (char *)&v88)
        {
          v27 = (char *)&v88 - (_BYTE *)Value;
          llvm::SmallVectorTemplateBase<std::complex<llvm::APInt>,false>::grow((uint64_t)&Value, v26);
          v23 = (char *)Value;
          v24 = (char *)Value + v27;
        }
        else
        {
          llvm::SmallVectorTemplateBase<std::complex<llvm::APInt>,false>::grow((uint64_t)&Value, v26);
          v24 = (char *)&v88;
          v23 = (char *)Value;
        }
      }
      else
      {
        v24 = (char *)&v88;
      }
      v25 = &v23[32 * v83];
      *((_DWORD *)v25 + 2) = *((_DWORD *)v24 + 2);
      *(_QWORD *)v25 = *(_QWORD *)v24;
      *((_DWORD *)v24 + 2) = 0;
      *((_DWORD *)v25 + 6) = *((_DWORD *)v24 + 6);
      *((_QWORD *)v25 + 2) = *((_QWORD *)v24 + 2);
      *((_DWORD *)v24 + 6) = 0;
      LODWORD(v83) = v83 + 1;
      if (v90 >= 0x41 && v89)
        operator delete[](v89);
      if (DWORD2(v88) >= 0x41 && (_QWORD)v88)
        operator delete[]((void *)v88);
      if (LODWORD(v86[0]) >= 0x41 && __p)
        operator delete[](__p);
      if (DWORD2(v87[0]) >= 0x41 && *(_QWORD *)&v87[0])
        operator delete[](*(void **)&v87[0]);
      ++a3;
      v18 -= 8;
      if (!v18)
        goto LABEL_52;
    }
  }
  if (a4)
    goto LABEL_23;
LABEL_52:
  v28 = (llvm::APInt *)Value;
  v29 = v83;
  v88 = v81;
  v30 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v88);
  v31 = mlir::detail::getDenseElementBitWidth(v30);
  if (v31 == 1)
    v32 = 0;
  else
    v32 = ((v31 + 7) >> 1) & 0x7FFFFFFFFFFFFFFCLL;
  Raw = mlir::DenseIntOrFPElementsAttr::getRaw(v88, *((uint64_t *)&v88 + 1), v32, v28, 2 * v29);
  v34 = Value;
  if ((_DWORD)v83)
  {
    v35 = 2 * v83;
    do
    {
      v36 = &v34[v35];
      if (DWORD2(v34[v35 - 1]) >= 0x41)
      {
        v37 = (void *)*((_QWORD *)v36 - 2);
        if (v37)
          operator delete[](v37);
      }
      if (*((_DWORD *)v36 - 6) >= 0x41u)
      {
        v38 = (void *)*((_QWORD *)v36 - 4);
        if (v38)
          operator delete[](v38);
      }
      v35 -= 2;
    }
    while (v35 * 16);
    v34 = Value;
  }
  if (v34 != (__int128 *)((char *)&v83 + 8))
  {
LABEL_102:
    v57 = v34;
    goto LABEL_161;
  }
  return Raw;
}

uint64_t mlir::DenseElementsAttr::get(uint64_t a1, uint64_t a2, llvm::APInt *a3, uint64_t a4)
{
  uint64_t OperandRange;
  unint64_t DenseElementBitWidth;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v10 = a1;
  v11 = a2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v10);
  DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (DenseElementBitWidth == 1)
    v8 = 0;
  else
    v8 = ((DenseElementBitWidth + 7) >> 1) & 0x7FFFFFFFFFFFFFFCLL;
  return mlir::DenseIntOrFPElementsAttr::getRaw(v10, v11, v8, a3, 2 * a4);
}

{
  uint64_t OperandRange;
  unint64_t DenseElementBitWidth;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v10 = a1;
  v11 = a2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v10);
  DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (DenseElementBitWidth == 1)
    v8 = 1;
  else
    v8 = (DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
  return mlir::DenseIntOrFPElementsAttr::getRaw(v10, v11, v8, a3, a4);
}

uint64_t llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::push_back(unsigned int *a1, unint64_t a2)
{
  char *Address;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t result;

  Address = llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::reserveForParamAndGetAddress(a1, a2, 1);
  v4 = *(_QWORD *)a1;
  v5 = a1[2];
  v6 = (_QWORD *)(*(_QWORD *)a1 + (v5 << 6) + 8);
  v7 = Address + 8;
  v8 = (void *)*((_QWORD *)Address + 1);
  v9 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
  if (v9 == v8)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v6, v7);
    v10 = (_QWORD *)(v4 + (v5 << 6) + 40);
    v11 = Address + 40;
    if (v9 != *((void **)Address + 5))
      goto LABEL_3;
LABEL_5:
    result = (uint64_t)llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
    goto LABEL_6;
  }
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v6, (uint64_t)v7);
  v10 = (_QWORD *)(v4 + (v5 << 6) + 40);
  v11 = Address + 40;
  if (v9 == *((void **)Address + 5))
    goto LABEL_5;
LABEL_3:
  result = llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
LABEL_6:
  ++a1[2];
  return result;
}

uint64_t mlir::DenseElementsAttr::get(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t OperandRange;
  uint64_t v7;
  unint64_t DenseElementBitWidth;
  unint64_t v9;
  llvm::APFloatBase *v11;
  uint64_t v12;

  v11 = a1;
  v12 = a2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v11);
  v7 = 2 * a4;
  DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (DenseElementBitWidth == 1)
    v9 = 0;
  else
    v9 = ((DenseElementBitWidth + 7) >> 1) & 0x7FFFFFFFFFFFFFFCLL;
  return mlir::DenseIntOrFPElementsAttr::getRaw(v11, v12, v9, a3, v7);
}

{
  uint64_t OperandRange;
  unint64_t DenseElementBitWidth;
  unint64_t v8;
  llvm::APFloatBase *v10;
  uint64_t v11;

  v10 = a1;
  v11 = a2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v10);
  DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (DenseElementBitWidth == 1)
    v8 = 1;
  else
    v8 = (DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
  return mlir::DenseIntOrFPElementsAttr::getRaw(v10, v11, v8, a3, a4);
}

uint64_t mlir::DenseIntOrFPElementsAttr::getRaw(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t OperandRange;
  unint64_t DenseElementBitWidth;
  uint64_t *ArgAttrsAttr;
  uint64_t v9;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  BOOL v13;
  _QWORD v14[2];
  uint64_t v15[2];
  void *v16;
  uint64_t v17;

  v15[0] = a1;
  v15[1] = a2;
  v14[0] = a3;
  v14[1] = a4;
  v16 = (void *)a1;
  v17 = a2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v16);
  DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(OperandRange);
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v16);
  v13 = mlir::ShapedType::getNumElements(ArgAttrsAttr, v9) == 1;
  if (DenseElementBitWidth != 1)
  {
    if (((DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8) != 8 * a4)
      goto LABEL_7;
LABEL_6:
    v13 = 1;
    goto LABEL_7;
  }
  if (a4 == 1 && *a3 - 1 >= 0xFE)
    goto LABEL_6;
LABEL_7:
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v15);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v16 = &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id;
  v17 = (uint64_t)Context;
  return mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail31DenseIntOrFPElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_24DenseIntOrFPElementsAttrEJRNS1_10ShapedTypeERNS_8ArrayRefIcEERbEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_, (uint64_t)&v16, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id, v15, (uint64_t)v14, (unsigned __int8 *)&v13);
}

uint64_t mlir::DenseElementsAttr::get(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  unsigned int v4;
  unint64_t v8;
  char *v9;
  char *v10;
  int v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  int v15;
  _BOOL4 v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  size_t v21;
  uint64_t v22;
  size_t v23;
  char *v24;
  char *v25;
  uint64_t Raw;

  v4 = a4;
  v8 = a4 + 7;
  if ((unint64_t)(a4 + 7) >= 8)
  {
    v13 = v8 >> 3;
    v9 = (char *)operator new(v8 >> 3);
    v10 = &v9[v13];
    bzero(v9, v13);
    v11 = *a3;
    v12 = v4;
    if (!v4)
    {
LABEL_11:
      v19 = v10 - v9;
      if (v10 == v9)
      {
        v21 = 1 - v19;
        if (v19 == 1)
        {
          v20 = &v10[v21];
          bzero(v10, v21);
        }
        else
        {
          v22 = 2 * v19;
          if (2 * v19 <= 1)
            v22 = 1;
          if (v19 >= 0x3FFFFFFFFFFFFFFFLL)
            v23 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          v24 = (char *)operator new(v23);
          v25 = &v24[v19];
          v20 = v24 + 1;
          bzero(v25, v21);
          if (v10)
          {
            operator delete(v10);
            LOBYTE(v11) = *a3;
          }
          v10 = v25;
        }
      }
      else
      {
        if (v19 > 1)
          v20 = v9 + 1;
        else
          v20 = v10;
        v10 = v9;
      }
      v9 = v10;
      *v10 = -(char)v11;
      v10 = v20;
      goto LABEL_27;
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    if (!a4)
      goto LABEL_27;
    v11 = *a3;
    v12 = a4;
    if (!(_DWORD)a4)
      goto LABEL_11;
  }
  v14 = 0;
  v15 = 1;
  do
  {
    while (1)
    {
      v16 = a3[v14] == v11;
      v17 = 1 << (v14 & 7);
      v18 = v14 >> 3;
      if (a3[v14])
        break;
      v9[v18] &= ~(_BYTE)v17;
      v15 &= v16;
      if (v12 == ++v14)
        goto LABEL_10;
    }
    v9[v18] |= v17;
    v15 &= v16;
    ++v14;
  }
  while (v12 != v14);
LABEL_10:
  if ((v15 & 1) != 0)
    goto LABEL_11;
LABEL_27:
  Raw = mlir::DenseIntOrFPElementsAttr::getRaw(a1, a2, (unsigned __int8 *)v9, v10 - v9);
  if (v9)
    operator delete(v9);
  return Raw;
}

uint64_t mlir::DenseIntOrFPElementsAttr::getRaw(uint64_t a1, uint64_t a2, uint64_t a3, llvm::APInt *a4, uint64_t a5)
{
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  llvm::APInt *v16;
  char v17;
  unint64_t v18;
  int v19;
  void *v20;
  char v21;
  uint64_t Raw;
  uint64_t v24;
  void *__src;
  unsigned int v26;

  v10 = a5 * a3 + 7;
  if (v10 >= 8)
  {
    v13 = v10 >> 3;
    v12 = operator new(v10 >> 3);
    v11 = &v12[v13];
    bzero(v12, v13);
    if (!a5)
      goto LABEL_25;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    if (!a5)
      goto LABEL_25;
  }
  v24 = a2;
  v14 = 0;
  v15 = 16 * a5;
  v16 = a4;
  do
  {
    v18 = *((unsigned int *)v16 + 2);
    v26 = v18;
    if (v18 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src, (const void **)v16);
      v18 = v26;
      if (v26 == 1)
      {
LABEL_15:
        v19 = 1 << (v14 & 7);
        if (__src == (void *)1)
          v17 = v12[v14 >> 3] | v19;
        else
          v17 = v12[v14 >> 3] & ~(_BYTE)v19;
        v12[v14 >> 3] = v17;
        goto LABEL_8;
      }
    }
    else
    {
      __src = *(void **)v16;
      if (v18 == 1)
        goto LABEL_15;
    }
    if (v18 > 0x40)
    {
      v20 = __src;
      memmove(&v12[v14 >> 3], __src, (v18 + 7) >> 3);
      if (v20)
        operator delete[](v20);
    }
    else if (v18)
    {
      memmove(&v12[v14 >> 3], &__src, (v18 + 7) >> 3);
    }
LABEL_8:
    v16 = (llvm::APInt *)((char *)v16 + 16);
    v14 += a3;
    v15 -= 16;
  }
  while (v15);
  a2 = v24;
  if (a5 == 1 && *((_DWORD *)a4 + 2) == 1)
  {
    if (*v12)
      v21 = -1;
    else
      v21 = 0;
    *v12 = v21;
  }
LABEL_25:
  Raw = mlir::DenseIntOrFPElementsAttr::getRaw(a1, a2, v12, v11 - v12);
  if (v12)
    operator delete(v12);
  return Raw;
}

uint64_t mlir::DenseIntOrFPElementsAttr::getRaw(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  llvm::detail::DoubleAPFloat *v14;
  uint64_t i;
  char v16;
  uint64_t v17;
  int v18;
  void *v19;
  llvm::detail::DoubleAPFloat *v20;
  void *v21;
  unsigned int v22;
  char v23;
  uint64_t Raw;
  _BYTE *v26;
  uint64_t v27;
  void *__p;
  unsigned int v30;
  void *__src;
  unsigned int v32;

  v27 = (uint64_t)a1;
  v8 = ((32 * a5) >> 5) * a3 + 7;
  if (v8 >= 8)
  {
    v11 = v8 >> 3;
    v9 = operator new(v8 >> 3);
    v26 = &v9[v11];
    bzero(v9, v11);
    v10 = 32 * a5;
    if (!a5)
      goto LABEL_19;
    goto LABEL_5;
  }
  v26 = 0;
  v9 = 0;
  v10 = 32 * a5;
  if (a5)
  {
LABEL_5:
    v12 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v13 = 0;
    v14 = (llvm::detail::DoubleAPFloat *)(a4 + 8);
    for (i = v10; i; i -= 32)
    {
      if (v12 == *(void **)v14)
      {
        a1 = llvm::detail::DoubleAPFloat::bitcastToAPInt(v14, (llvm::APInt *)&__src);
        v17 = v32;
        if (v32 != 1)
        {
LABEL_14:
          if (v17 > 0x40)
          {
            v19 = __src;
            a1 = (llvm::APFloatBase *)memmove(&v9[v13 >> 3], __src, (unint64_t)(v17 + 7) >> 3);
            if (v19)
              operator delete[](v19);
          }
          else if ((_DWORD)v17)
          {
            a1 = (llvm::APFloatBase *)memmove(&v9[v13 >> 3], &__src, (unint64_t)(v17 + 7) >> 3);
          }
          goto LABEL_8;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::bitcastToAPInt(v14, (uint64_t)&__src);
        v17 = v32;
        if (v32 != 1)
          goto LABEL_14;
      }
      v18 = 1 << (v13 & 7);
      if (__src == (void *)1)
        v16 = v9[v13 >> 3] | v18;
      else
        v16 = v9[v13 >> 3] & ~(_BYTE)v18;
      v9[v13 >> 3] = v16;
LABEL_8:
      v13 += a3;
      v14 = (llvm::detail::DoubleAPFloat *)((char *)v14 + 32);
    }
  }
LABEL_19:
  if (v10 != 32)
    goto LABEL_30;
  v21 = *(void **)(a4 + 8);
  v20 = (llvm::detail::DoubleAPFloat *)(a4 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v21)
  {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v20, (llvm::APInt *)&__p);
    v22 = v30;
    if (v30 >= 0x41)
    {
LABEL_22:
      if (__p)
        operator delete[](__p);
      goto LABEL_30;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::bitcastToAPInt(v20, (uint64_t)&__p);
    v22 = v30;
    if (v30 >= 0x41)
      goto LABEL_22;
  }
  if (v22 == 1)
  {
    if (*v9)
      v23 = -1;
    else
      v23 = 0;
    *v9 = v23;
  }
LABEL_30:
  Raw = mlir::DenseIntOrFPElementsAttr::getRaw(v27, a2, v9, v26 - v9);
  if (v9)
    operator delete(v9);
  return Raw;
}

BOOL mlir::DenseElementsAttr::isValidRawBuffer(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, BOOL *a5)
{
  uint64_t OperandRange;
  unint64_t DenseElementBitWidth;
  uint64_t v10;
  uint64_t *ArgAttrsAttr;
  uint64_t v12;
  uint64_t NumElements;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 result;
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v17);
  DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(OperandRange);
  v10 = 8 * a4;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v17);
  NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v12);
  *a5 = NumElements == 1;
  if (DenseElementBitWidth != 1)
  {
    v15 = (DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v10 != v15)
    {
      v14 = v15 * NumElements;
      return v10 == v14;
    }
LABEL_6:
    result = 1;
    *a5 = 1;
    return result;
  }
  if (a4 == 1 && *a3 - 1 >= 0xFE)
    goto LABEL_6;
  v14 = (NumElements + 7) & 0xFFFFFFFFFFFFFFF8;
  return v10 == v14;
}

uint64_t mlir::DenseElementsAttr::isValidIntOrFloat(mlir::DenseElementsAttr *this, uint64_t a2, char a3, unsigned int a4)
{
  uint64_t OperandRange;
  __int128 v9;

  v9 = *(_OWORD *)(*(_QWORD *)this + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v9);
  return isValidIntOrFloat(OperandRange, a2, a3, a4);
}

uint64_t isValidIntOrFloat(uint64_t a1, uint64_t a2, char a3, unsigned int a4)
{
  uint64_t result;
  void *v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = a1;
  if (mlir::detail::getDenseElementBitWidth(a1) != 8 * a2)
    return 0;
  if ((a3 & 1) != 0)
  {
    if (mlir::Type::isIndex((mlir::Type *)&v15))
      return 1;
    v13 = v15;
    if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      v13 = 0;
    v14 = v13;
    if (v13)
    {
      if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v14))
        return (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v14) != 1) ^ a4;
      return 1;
    }
    return 0;
  }
  v8 = *(void **)(*(_QWORD *)a1 + 136);
  if (v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  result = 1;
  if (v8 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v8 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v8 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v8 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    return v8 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v8 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  }
  return result;
}

unint64_t mlir::DenseElementsAttr::tryGetComplexIntValues@<X0>(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;
  unint64_t DenseElementBitWidth;
  uint64_t v12;
  uint64_t *ArgAttrsAttr;
  uint64_t v14;
  uint64_t NumElements;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v19 = *(_OWORD *)(*(_QWORD *)this + 8);
  *(_QWORD *)&v19 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v19);
  result = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
  if (*(_UNKNOWN **)(*(_QWORD *)result + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    v7 = *(_QWORD *)(*(_QWORD *)this + 16);
    v8 = *(_QWORD *)(*(_QWORD *)this + 32);
    v9 = *(unsigned __int8 *)(*(_QWORD *)this + 24);
    *(_QWORD *)&v19 = *(_QWORD *)(*(_QWORD *)this + 8);
    v6 = v19;
    *((_QWORD *)&v19 + 1) = v7;
    *(_QWORD *)&v19 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v19);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
    DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(Value);
    v12 = *(_QWORD *)this;
    v19 = *(_OWORD *)(*(_QWORD *)this + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v19);
    NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v14);
    v16 = *(_QWORD *)(v12 + 32);
    v17 = *(unsigned __int8 *)(v12 + 24);
    v19 = *(_OWORD *)(v12 + 8);
    *(_QWORD *)&v19 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v19);
    v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
    result = mlir::detail::getDenseElementBitWidth(v18);
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = DenseElementBitWidth;
    *(_QWORD *)(a2 + 32) = v16;
    *(_QWORD *)(a2 + 40) = v17;
    *(_QWORD *)(a2 + 48) = NumElements;
    *(_QWORD *)(a2 + 56) = result;
    v5 = 1;
    *(_QWORD *)(a2 + 64) = v6;
    *(_QWORD *)(a2 + 72) = v7;
  }
  else
  {
    v5 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 80) = v5;
  return result;
}

uint64_t mlir::DenseElementsAttr::getNumElements(mlir::DenseElementsAttr *this)
{
  uint64_t *ArgAttrsAttr;
  uint64_t v2;
  __int128 v4;

  v4 = *(_OWORD *)(*(_QWORD *)this + 8);
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v4);
  return mlir::ShapedType::getNumElements(ArgAttrsAttr, v2);
}

unint64_t mlir::DenseElementsAttr::tryGetFloatValues@<X0>(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  void *v5;
  BOOL v16;
  void *FloatSemantics;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OperandRange;
  unint64_t DenseElementBitWidth;
  uint64_t v23;
  uint64_t *ArgAttrsAttr;
  uint64_t v25;
  uint64_t NumElements;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;

  v33 = *(_OWORD *)(*(_QWORD *)this + 8);
  result = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
  v5 = *(void **)(*(_QWORD *)result + 136);
  v16 = v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  if (v16 && (v32 = result) != 0)
  {
    FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v32);
    v19 = *(_QWORD *)(*(_QWORD *)this + 16);
    v31 = *(_QWORD *)(*(_QWORD *)this + 32);
    v20 = *(unsigned __int8 *)(*(_QWORD *)this + 24);
    *(_QWORD *)&v33 = *(_QWORD *)(*(_QWORD *)this + 8);
    v18 = v33;
    *((_QWORD *)&v33 + 1) = v19;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
    DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(OperandRange);
    v23 = *(_QWORD *)this;
    v33 = *(_OWORD *)(*(_QWORD *)this + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v33);
    NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v25);
    v27 = *(_QWORD *)(v23 + 32);
    v28 = *(unsigned __int8 *)(v23 + 24);
    v33 = *(_OWORD *)(v23 + 8);
    v29 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
    result = mlir::detail::getDenseElementBitWidth(v29);
    *(_QWORD *)a2 = v31;
    *(_QWORD *)(a2 + 8) = v20;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = DenseElementBitWidth;
    *(_QWORD *)(a2 + 32) = FloatSemantics;
    *(_QWORD *)(a2 + 40) = v27;
    *(_QWORD *)(a2 + 48) = v28;
    *(_QWORD *)(a2 + 56) = NumElements;
    *(_QWORD *)(a2 + 64) = result;
    *(_QWORD *)(a2 + 72) = FloatSemantics;
    v30 = 1;
    *(_QWORD *)(a2 + 80) = v18;
    *(_QWORD *)(a2 + 88) = v19;
  }
  else
  {
    v30 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 96) = v30;
  return result;
}

unint64_t mlir::DenseElementsAttr::tryGetComplexFloatValues@<X0>(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  void *v6;
  BOOL v17;
  void *FloatSemantics;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Value;
  unint64_t DenseElementBitWidth;
  uint64_t v24;
  uint64_t *ArgAttrsAttr;
  uint64_t v26;
  uint64_t NumElements;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;

  v35 = *(_OWORD *)(*(_QWORD *)this + 8);
  result = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v35);
  if (*(_UNKNOWN **)(*(_QWORD *)result + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v5 = result;
  else
    v5 = 0;
  v34 = v5;
  if (v5)
  {
    result = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v34);
    v6 = *(void **)(*(_QWORD *)result + 136);
    v17 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
    if (v17 && (v33 = result) != 0)
    {
      FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v33);
      v20 = *(_QWORD *)(*(_QWORD *)this + 16);
      v32 = *(_QWORD *)(*(_QWORD *)this + 32);
      v21 = *(unsigned __int8 *)(*(_QWORD *)this + 24);
      *(_QWORD *)&v35 = *(_QWORD *)(*(_QWORD *)this + 8);
      v19 = v35;
      *((_QWORD *)&v35 + 1) = v20;
      *(_QWORD *)&v35 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v35);
      Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v35);
      DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(Value);
      v24 = *(_QWORD *)this;
      v35 = *(_OWORD *)(*(_QWORD *)this + 8);
      ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
      NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v26);
      v28 = *(_QWORD *)(v24 + 32);
      v29 = *(unsigned __int8 *)(v24 + 24);
      v35 = *(_OWORD *)(v24 + 8);
      *(_QWORD *)&v35 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v35);
      v30 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v35);
      result = mlir::detail::getDenseElementBitWidth(v30);
      *(_QWORD *)a2 = v32;
      *(_QWORD *)(a2 + 8) = v21;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = DenseElementBitWidth;
      *(_QWORD *)(a2 + 32) = FloatSemantics;
      *(_QWORD *)(a2 + 40) = v28;
      *(_QWORD *)(a2 + 48) = v29;
      *(_QWORD *)(a2 + 56) = NumElements;
      *(_QWORD *)(a2 + 64) = result;
      *(_QWORD *)(a2 + 72) = FloatSemantics;
      v31 = 1;
      *(_QWORD *)(a2 + 80) = v19;
      *(_QWORD *)(a2 + 88) = v20;
    }
    else
    {
      v31 = 0;
      *(_BYTE *)a2 = 0;
    }
    *(_BYTE *)(a2 + 96) = v31;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 96) = 0;
  }
  return result;
}

uint64_t mlir::DenseElementsAttr::reshape(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *a1;
  if (*(_QWORD *)(result + 8) != a2)
    return mlir::DenseIntOrFPElementsAttr::getRaw(a2, a3, *(unsigned __int8 **)(result + 32), *(_QWORD *)(result + 40));
  return result;
}

uint64_t mlir::DenseElementsAttr::bitcast(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[3];
  __int128 v8;
  char v9;

  *(_OWORD *)v7 = *(_OWORD *)(*(_QWORD *)a1 + 8);
  if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v7) == a2)
    return *(_QWORD *)a1;
  LOBYTE(v8) = 0;
  v9 = 0;
  v4 = mlir::ShapedType::cloneWith(v7, &v8, a2);
  return mlir::DenseIntOrFPElementsAttr::getRaw(v4, v5, *(unsigned __int8 **)(*(_QWORD *)a1 + 32), *(_QWORD *)(*(_QWORD *)a1 + 40));
}

uint64_t mlir::DenseElementsAttr::mapValues(uint64_t *a1, uint64_t a2, void (*a3)(void **__return_ptr, uint64_t, void **), uint64_t a4)
{
  uint64_t v5;

  v5 = *a1;
  return mlir::DenseIntElementsAttr::mapValues(&v5, a2, a3, a4);
}

uint64_t mlir::DenseIntElementsAttr::mapValues(uint64_t *a1, uint64_t a2, void (*a3)(void **__return_ptr, uint64_t, void **), uint64_t a4)
{
  unint64_t DenseElementBitWidth;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t *ArgAttrsAttr;
  uint64_t v20;
  uint64_t v21;
  uint64_t OperandRange;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t NumElements;
  uint64_t v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v38;
  int v39;
  void *v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  unint64_t v50;
  void **p_src;
  unint64_t v52;
  void *v53;
  int v54;
  BOOL v55;
  char v56;
  void *v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  void *v62;
  uint64_t Raw;
  unint64_t v65;
  void *v68;
  unsigned int v69;
  void *v70;
  unsigned int v71;
  __int128 v72;
  char v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  void *__src;
  unsigned int v78;
  void *__p[2];
  unsigned __int8 *v80;
  __int128 v81;
  _QWORD v82[3];

  v82[1] = *MEMORY[0x1E0C80C00];
  v80 = (unsigned __int8 *)v82;
  v81 = xmmword_1812349A0;
  v74 = *(_OWORD *)(*a1 + 8);
  DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(a2);
  v7 = DenseElementBitWidth;
  if (DenseElementBitWidth == 1)
    v8 = 1;
  else
    v8 = (DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)&v72 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74);
  *((_QWORD *)&v72 + 1) = v9;
  v73 = 1;
  v75 = mlir::ShapedType::cloneWith((uint64_t *)&v74, &v72, a2);
  v76 = v10;
  if (*(_BYTE *)(*a1 + 24))
  {
    v11 = (v8 + 7) >> 3;
    v12 = v81;
    v13 = (unint64_t)v81 > v11;
    if ((_QWORD)v81 == v11)
      goto LABEL_6;
  }
  else
  {
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
    v11 = (mlir::ShapedType::getNumElements(ArgAttrsAttr, v20) * v8 + 7) >> 3;
    v12 = v81;
    v13 = (unint64_t)v81 > v11;
    if ((_QWORD)v81 == v11)
    {
LABEL_6:
      v14 = *a1;
      if (*(_BYTE *)(*a1 + 24))
        goto LABEL_7;
      goto LABEL_17;
    }
  }
  if (!v13)
  {
    if (*((_QWORD *)&v81 + 1) < v11)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v80, v82, v11, 1);
      v12 = v81;
    }
    if (v11 != v12)
      bzero(&v80[v12], v11 - v12);
  }
  *(_QWORD *)&v81 = v11;
  v14 = *a1;
  if (!*(_BYTE *)(*a1 + 24))
  {
LABEL_17:
    v21 = *(_QWORD *)(v14 + 32);
    *(_OWORD *)__p = *(_OWORD *)(v14 + 8);
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)__p);
    v23 = mlir::detail::getDenseElementBitWidth(OperandRange);
    v24 = *a1;
    *(_OWORD *)__p = *(_OWORD *)(*a1 + 8);
    v25 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)__p);
    NumElements = mlir::ShapedType::getNumElements(v25, v26);
    v28 = *(_QWORD *)(v24 + 32);
    v29 = *(unsigned __int8 *)(v24 + 24);
    *(_OWORD *)__p = *(_OWORD *)(v24 + 8);
    v30 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)__p);
    mlir::detail::getDenseElementBitWidth(v30);
    v31 = v21 == v28 && v29 == 0;
    v32 = !v31;
    if (v31 && !NumElements)
      goto LABEL_118;
    v33 = 0;
    v34 = 0;
    if (v23 == 1)
      v35 = 1;
    else
      v35 = (v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    v65 = v23 + 7;
    v36 = NumElements - 1;
    while (1)
    {
      if (v23 == 1)
      {
        v39 = *(unsigned __int8 *)(v21 + (v33 >> 3)) >> (v33 & 7);
        v71 = 1;
        v70 = (void *)(v39 & 1);
        v69 = 1;
        v68 = v70;
        goto LABEL_47;
      }
      v71 = v23;
      if (v23 > 0x40)
        break;
      v70 = 0;
      v40 = &v70;
      v41 = v23;
      if (v65 >= 8)
        goto LABEL_43;
LABEL_44:
      v69 = v41;
      if (v41 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v68, (const void **)&v70);
      else
        v68 = v70;
LABEL_47:
      a3(__p, a4, &v68);
      v42 = v80;
      v43 = LODWORD(__p[1]);
      v78 = __p[1];
      if (LODWORD(__p[1]) > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, (const void **)__p);
        v43 = v78;
        if (v78 == 1)
        {
LABEL_54:
          v44 = 1 << (v34 & 7);
          v45 = v34 >> 3;
          if (__src == (void *)1)
          {
            v42[v45] |= v44;
            if (LODWORD(__p[1]) >= 0x41)
              goto LABEL_62;
          }
          else
          {
            v42[v45] &= ~(_BYTE)v44;
            if (LODWORD(__p[1]) >= 0x41)
            {
LABEL_62:
              if (__p[0])
                operator delete[](__p[0]);
              goto LABEL_64;
            }
          }
          goto LABEL_64;
        }
      }
      else
      {
        __src = __p[0];
        if (LODWORD(__p[1]) == 1)
          goto LABEL_54;
      }
      if (v43 > 0x40)
      {
        memmove(&v42[v34 >> 3], __src, (v43 + 7) >> 3);
        if (__src)
          operator delete[](__src);
      }
      else if (v43)
      {
        memmove(&v42[v34 >> 3], &__src, (v43 + 7) >> 3);
        if (LODWORD(__p[1]) >= 0x41)
          goto LABEL_62;
        goto LABEL_64;
      }
      if (LODWORD(__p[1]) >= 0x41)
        goto LABEL_62;
LABEL_64:
      if (v69 >= 0x41 && v68)
        operator delete[](v68);
      if (v71 >= 0x41 && v70)
        operator delete[](v70);
      if (v36-- != 0)
        v38 = 1;
      else
        v38 = v32;
      v34 += v8;
      v33 += v35;
      if ((v38 & 1) == 0)
        goto LABEL_118;
    }
    llvm::APInt::initSlowCase((llvm::APInt *)&v70, 0, 0);
    v41 = v71;
    if (v71 >= 0x41)
      v40 = v70;
    else
      v40 = &v70;
    if (v65 < 8)
      goto LABEL_44;
LABEL_43:
    memmove(v40, (const void *)(v21 + (v33 >> 3)), (v23 + 7) >> 3);
    v41 = v71;
    goto LABEL_44;
  }
LABEL_7:
  if (v7 == 1)
  {
    v15 = *(_BYTE **)(v14 + 32);
    *(_OWORD *)__p = *(_OWORD *)(v14 + 8);
    v16 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)__p);
    v17 = mlir::detail::getDenseElementBitWidth(v16);
    if (v17 == 1)
    {
      v18 = (void *)(*v15 & 1);
      v78 = 1;
      __src = v18;
      goto LABEL_83;
    }
    v50 = v17 + 7;
    v78 = v17;
    if (v17 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
      if (v78 >= 0x41)
        p_src = (void **)__src;
      else
        p_src = &__src;
      if (v50 < 8)
      {
LABEL_83:
        a3(__p, a4, &__src);
        v54 = (int)__p[1];
        if (LODWORD(__p[1]) > 0x40)
          v55 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)__p) == v54;
        else
          v55 = __p[0] == 0;
        v56 = v55;
        *v80 = v56 - 1;
        if (LODWORD(__p[1]) >= 0x41 && __p[0])
          operator delete[](__p[0]);
        if (v78 < 0x41)
          goto LABEL_118;
        v57 = __src;
        if (!__src)
          goto LABEL_118;
LABEL_117:
        operator delete[](v57);
        goto LABEL_118;
      }
    }
    else
    {
      __src = 0;
      p_src = &__src;
      if (v50 < 8)
        goto LABEL_83;
    }
    memmove(p_src, v15, v50 >> 3);
    goto LABEL_83;
  }
  v46 = *(_BYTE **)(v14 + 32);
  *(_OWORD *)__p = *(_OWORD *)(v14 + 8);
  v47 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)__p);
  v48 = mlir::detail::getDenseElementBitWidth(v47);
  if (v48 == 1)
  {
    v49 = (void *)(*v46 & 1);
    v71 = 1;
    v70 = v49;
    goto LABEL_100;
  }
  v52 = v48 + 7;
  v71 = v48;
  if (v48 <= 0x40)
  {
    v70 = 0;
    v53 = &v70;
    if (v52 < 8)
      goto LABEL_100;
LABEL_99:
    memmove(v53, v46, v52 >> 3);
    goto LABEL_100;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v70, 0, 0);
  if (v71 >= 0x41)
    v53 = v70;
  else
    v53 = &v70;
  if (v52 >= 8)
    goto LABEL_99;
LABEL_100:
  a3(__p, a4, &v70);
  v58 = v80;
  v59 = __p[1];
  v78 = __p[1];
  if (LODWORD(__p[1]) <= 0x40)
  {
    __src = __p[0];
    if (LODWORD(__p[1]) != 1)
      goto LABEL_102;
LABEL_106:
    v60 = *v58;
    if (__src == (void *)1)
      v61 = v60 | 1;
    else
      v61 = v60 & 0xFE;
    *v58 = v61;
    goto LABEL_112;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, (const void **)__p);
  v59 = v78;
  if (v78 == 1)
    goto LABEL_106;
LABEL_102:
  if (v59 > 0x40)
  {
    v62 = __src;
    memmove(v58, __src, ((unint64_t)v59 + 7) >> 3);
    if (v62)
      operator delete[](v62);
  }
  else if (v59)
  {
    memmove(v58, &__src, ((unint64_t)v59 + 7) >> 3);
  }
LABEL_112:
  if (LODWORD(__p[1]) >= 0x41 && __p[0])
    operator delete[](__p[0]);
  if (v71 >= 0x41)
  {
    v57 = v70;
    if (v70)
      goto LABEL_117;
  }
LABEL_118:
  Raw = mlir::DenseIntOrFPElementsAttr::getRaw(v75, v76, v80, v81);
  if (v80 != (unsigned __int8 *)v82)
    free(v80);
  return Raw;
}

uint64_t mlir::DenseElementsAttr::mapValues(uint64_t *a1, uint64_t a2, _QWORD *(*a3)(void **__return_ptr, uint64_t, void **), uint64_t a4)
{
  uint64_t v5;

  v5 = *a1;
  return mlir::DenseFPElementsAttr::mapValues((mlir::DenseElementsAttr *)&v5, a2, a3, a4);
}

uint64_t mlir::DenseFPElementsAttr::mapValues(mlir::DenseElementsAttr *a1, uint64_t a2, _QWORD *(*a3)(void **__return_ptr, uint64_t, void **), uint64_t a4)
{
  unint64_t DenseElementBitWidth;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  llvm::APFloatBase *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *ArgAttrsAttr;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  _BYTE *v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  llvm::APFloatBase *inited;
  char *v33;
  unsigned int v34;
  char v35;
  llvm::detail::IEEEFloat *v36;
  void *v37;
  char v38;
  char v39;
  void *v40;
  void *v41;
  uint64_t Raw;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  char v49;
  uint64_t v50[3];
  uint64_t v51;
  uint64_t v52;
  void *__src;
  unsigned int v54;
  void *__p;
  unsigned int v56;
  void *__dst;
  __int128 v58;
  uint64_t v59;
  void *v60;
  _QWORD v61[3];
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  __dst = &v59;
  v58 = xmmword_1812349A0;
  *(_OWORD *)v50 = *(_OWORD *)(*(_QWORD *)a1 + 8);
  DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(a2);
  v9 = DenseElementBitWidth;
  if (DenseElementBitWidth == 1)
    v10 = 1;
  else
    v10 = (DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)&v48 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50);
  *((_QWORD *)&v48 + 1) = v11;
  v49 = 1;
  v51 = mlir::ShapedType::cloneWith(v50, &v48, a2);
  v52 = v12;
  if (*(_BYTE *)(*(_QWORD *)a1 + 24))
  {
    v13 = (v10 + 7) >> 3;
    v14 = v58;
    v15 = (unint64_t)v58 > v13;
    if ((_QWORD)v58 == v13)
      goto LABEL_6;
  }
  else
  {
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
    v13 = (mlir::ShapedType::getNumElements(ArgAttrsAttr, v20) * v10 + 7) >> 3;
    v14 = v58;
    v15 = (unint64_t)v58 > v13;
    if ((_QWORD)v58 == v13)
    {
LABEL_6:
      if (*(_BYTE *)(*(_QWORD *)a1 + 24))
        goto LABEL_7;
      goto LABEL_17;
    }
  }
  if (!v15)
  {
    if (*((_QWORD *)&v58 + 1) < v13)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, &v59, v13, 1);
      v14 = v58;
    }
    if (v13 != v14)
      bzero((char *)__dst + v14, v13 - v14);
  }
  *(_QWORD *)&v58 = v13;
  if (*(_BYTE *)(*(_QWORD *)a1 + 24))
  {
LABEL_7:
    if (v9 == 1)
    {
      mlir::DenseElementsAttr::tryGetFloatValues(a1, (uint64_t)&v62);
      v45 = v62;
      v46 = v63;
      v47 = v64;
      llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*(&v45, (uint64_t)&v60);
      v16 = (llvm::APFloatBase *)a3(&__p, a4, &v60);
      v17 = v56;
      if (v56 > 0x40)
      {
        v16 = (llvm::APFloatBase *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
        v18 = (_DWORD)v16 == v17;
      }
      else
      {
        v18 = __p == 0;
      }
      v35 = v18;
      *(_BYTE *)__dst = v35 - 1;
      if (v56 >= 0x41)
      {
        v16 = (llvm::APFloatBase *)__p;
        if (__p)
          operator delete[](__p);
      }
      v36 = (llvm::detail::IEEEFloat *)v61;
      v37 = (void *)v61[0];
      if (llvm::APFloatBase::PPCDoubleDouble(v16) != v37)
      {
LABEL_63:
        llvm::detail::IEEEFloat::~IEEEFloat(v36);
        goto LABEL_76;
      }
      goto LABEL_75;
    }
    mlir::DenseElementsAttr::tryGetFloatValues(a1, (uint64_t)&v62);
    v45 = v62;
    v46 = v63;
    v47 = v64;
    llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*(&v45, (uint64_t)&v62);
    inited = (llvm::APFloatBase *)a3(&v60, a4, (void **)&v62);
    v33 = (char *)__dst;
    v34 = v61[0];
    v56 = v61[0];
    if (LODWORD(v61[0]) > 0x40)
    {
      inited = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)&v60);
      v34 = v56;
      if (v56 != 1)
      {
LABEL_52:
        if (v34 > 0x40)
        {
          v40 = __p;
          inited = (llvm::APFloatBase *)memmove(v33, __p, ((unint64_t)v34 + 7) >> 3);
          if (v40)
            operator delete[](v40);
        }
        else if (v34)
        {
          inited = (llvm::APFloatBase *)memmove(v33, &__p, ((unint64_t)v34 + 7) >> 3);
        }
LABEL_71:
        if (LODWORD(v61[0]) >= 0x41)
        {
          inited = (llvm::APFloatBase *)v60;
          if (v60)
            operator delete[](v60);
        }
        v36 = (llvm::detail::IEEEFloat *)((char *)&v62 + 8);
        v41 = (void *)*((_QWORD *)&v62 + 1);
        if (llvm::APFloatBase::PPCDoubleDouble(inited) != v41)
          goto LABEL_63;
LABEL_75:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v36);
        goto LABEL_76;
      }
    }
    else
    {
      __p = v60;
      if (LODWORD(v61[0]) != 1)
        goto LABEL_52;
    }
    v38 = *v33;
    if (__p == (void *)1)
      v39 = v38 | 1;
    else
      v39 = v38 & 0xFE;
    *v33 = v39;
    goto LABEL_71;
  }
LABEL_17:
  mlir::DenseElementsAttr::tryGetFloatValues(a1, (uint64_t)&v62);
  v45 = v62;
  v46 = v63;
  v47 = v64;
  mlir::DenseElementsAttr::tryGetFloatValues(a1, (uint64_t)&v62);
  v21 = v65;
  v22 = v66;
  v44 = v67;
  if ((_QWORD)v45 != v65 || BYTE8(v45) != v66 || (_QWORD)v46 != v67)
  {
    v23 = 0;
    do
    {
      llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*(&v45, (uint64_t)&v62);
      v24 = (void *)*((_QWORD *)&v62 + 1);
      v26 = llvm::APFloatBase::PPCDoubleDouble(v25);
      if (v26 == v24)
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v61, (const llvm::detail::DoubleAPFloat *)((char *)&v62 + 8));
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v61, (const llvm::detail::IEEEFloat *)((char *)&v62 + 8));
      a3(&__p, a4, &v60);
      v27 = __dst;
      v28 = v56;
      v54 = v56;
      if (v56 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, (const void **)&__p);
        v28 = v54;
        if (v54 == 1)
        {
LABEL_31:
          v29 = 1 << (v23 & 7);
          v30 = v23 >> 3;
          if (__src == (void *)1)
          {
            v27[v30] |= v29;
            if (v56 < 0x41)
              goto LABEL_41;
          }
          else
          {
            v27[v30] &= ~(_BYTE)v29;
            if (v56 < 0x41)
              goto LABEL_41;
          }
          goto LABEL_39;
        }
      }
      else
      {
        __src = __p;
        if (v56 == 1)
          goto LABEL_31;
      }
      if (v28 > 0x40)
      {
        memmove(&v27[v23 >> 3], __src, (v28 + 7) >> 3);
        if (__src)
          operator delete[](__src);
LABEL_36:
        if (v56 < 0x41)
          goto LABEL_41;
        goto LABEL_39;
      }
      if (!v28)
        goto LABEL_36;
      memmove(&v27[v23 >> 3], &__src, (v28 + 7) >> 3);
      if (v56 < 0x41)
        goto LABEL_41;
LABEL_39:
      if (__p)
        operator delete[](__p);
LABEL_41:
      if (v26 == (void *)v61[0])
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v61);
        if (v26 != *((void **)&v62 + 1))
        {
LABEL_43:
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v62 + 8));
          goto LABEL_46;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v61);
        if (v26 != *((void **)&v62 + 1))
          goto LABEL_43;
      }
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v62 + 8));
LABEL_46:
      v31 = v46 + 1;
      *(_QWORD *)&v46 = v46 + 1;
      v23 += v10;
    }
    while ((_QWORD)v45 != v21 || BYTE8(v45) != v22 || v31 != v44);
  }
LABEL_76:
  Raw = mlir::DenseIntOrFPElementsAttr::getRaw(v51, v52, (unsigned __int8 *)__dst, v58);
  if (__dst != &v59)
    free(__dst);
  return Raw;
}

uint64_t mlir::DenseFPElementsAttr::classof(uint64_t a1)
{
  void *v1;
  BOOL v3;
  int v4;
  void *v5;
  _BOOL4 v12;
  int v13;
  __int128 v14;

  v1 = *(void **)(*(_QWORD *)a1 + 136);
  v3 = v1 != &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id
    && v1 != &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id
    || a1 == 0;
  v4 = v3;
  if (v3)
    return v1 & (v4 ^ 1);
  v14 = *(_OWORD *)(a1 + 8);
  v5 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14) + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    LODWORD(v1) = 1;
    return v1 & (v4 ^ 1);
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return (v4 ^ 1) & 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return (v4 ^ 1) & 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return (v4 ^ 1) & 1;
  }
  LODWORD(v1) = 1;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
    return v1 & (v4 ^ 1);
  v12 = v5 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  v13 = v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id || v12;
  return v13 & (v4 ^ 1u);
}

uint64_t mlir::DenseIntElementsAttr::classof(uint64_t a1)
{
  void *v1;
  BOOL v3;
  int v4;
  __int128 v6;
  uint64_t OperandRange;

  v1 = *(void **)(*(_QWORD *)a1 + 136);
  v3 = v1 != &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id
    && v1 != &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id
    || a1 == 0;
  v4 = v3;
  if (!v3)
  {
    v6 = *(_OWORD *)(a1 + 8);
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v6);
    LODWORD(v1) = mlir::Type::isIntOrIndex((mlir::Type *)&OperandRange);
  }
  return (v4 ^ 1) & v1;
}

uint64_t mlir::DenseResourceElementsAttr::get(uint64_t a1, uint64_t a2, __int128 *a3)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  __int128 v7;
  _QWORD v8[2];

  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = a2;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v7);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id;
  v8[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail32DenseResourceElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_25DenseResourceElementsAttrEJRNS1_10ShapedTypeERNS1_25DialectResourceBlobHandleINS1_14BuiltinDialectEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id, &v7, a3);
}

void mlir::ResourceBlobManagerDialectInterfaceBase<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>::insert(uint64_t a1@<X0>, int8x16_t *a2@<X1>, const unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  pthread_rwlock_t **v8;
  uint64_t v9;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  char v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = *(pthread_rwlock_t ***)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 8);
  LOBYTE(v16) = 0;
  v22 = 0;
  if (*(_BYTE *)(a4 + 64))
  {
    v16 = *(_OWORD *)a4;
    v11 = *(_QWORD *)(a4 + 48);
    v17 = *(_QWORD *)(a4 + 16);
    v20 = v11;
    if (v11 >= 8)
    {
      v12 = (__int128 *)(a4 + 24);
      if ((v11 & 2) != 0 && (v11 & 4) != 0)
      {
        (*(void (**)(__int128 *, __int128 *))((v11 & 0xFFFFFFFFFFFFFFF8) + 8))(&v18, v12);
      }
      else
      {
        v18 = *v12;
        v19 = *(_QWORD *)(a4 + 40);
      }
      *(_QWORD *)(a4 + 48) = 0;
    }
    v21 = *(_BYTE *)(a4 + 56);
    v22 = 1;
  }
  mlir::DialectResourceBlobManager::insert<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>(v8, v9, a2, a3, &v16, a5);
  if (v22 && v20 >= 8)
  {
    v13 = (v20 & 2) != 0 ? &v18 : (__int128 *)v18;
    (*(void (**)(__int128 *, _QWORD, _QWORD, uint64_t))(v20 & 0xFFFFFFFFFFFFFFF8))(v13, v16, *((_QWORD *)&v16 + 1), v17);
    v14 = v20;
    if (v20 >= 8)
    {
      if ((v20 & 4) != 0)
      {
        if ((v20 & 2) != 0)
          v15 = &v18;
        else
          v15 = (__int128 *)v18;
        (*(void (**)(__int128 *))((v20 & 0xFFFFFFFFFFFFFFF8) + 16))(v15);
      }
      if ((v14 & 2) == 0)
        llvm::deallocate_buffer((llvm *)v18, *((void **)&v18 + 1));
    }
  }
}

llvm::APFloatBase *mlir::SparseElementsAttr::getZeroAttr(mlir::SparseElementsAttr *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t ElementType;
  void *v5;
  uint64_t v18;
  uint64_t Value;
  void *v20;
  uint64_t v32;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v35;
  char *v36[4];
  __int16 v37;
  uint64_t v38;
  __int128 v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)this;
  if (*(_QWORD *)this)
    v3 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v2 + 8);
  else
    v3 = 0;
  ElementType = mlir::ElementsAttr::getElementType((uint64_t)v2, v3);
  v5 = *(void **)(*(_QWORD *)ElementType + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return mlir::FloatAttr::get(ElementType, 0.0);
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v18 = ElementType;
  else
    v18 = 0;
  v38 = v18;
  if (v18)
  {
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v38);
    v20 = *(void **)(*(_QWORD *)Value + 136);
    if (v20 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v20 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      v35 = (uint64_t)mlir::FloatAttr::get(Value, 0.0);
    }
    else
    {
      v35 = mlir::IntegerAttr::get(Value, 0);
    }
    v32 = v35;
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v38);
    v40[0] = v32;
    v40[1] = v32;
    *(_QWORD *)&v39 = v40;
    *((_QWORD *)&v39 + 1) = 2;
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
    v36[0] = (char *)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
    v36[1] = (char *)Context;
    return (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)v36, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, &v39);
  }
  else if (*(_UNKNOWN **)(**(_QWORD **)(*(_QWORD *)this + 32) + 136) == &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id)
  {
    v37 = 257;
    return (llvm::APFloatBase *)mlir::StringAttr::get(v36, ElementType);
  }
  else
  {
    return (llvm::APFloatBase *)mlir::IntegerAttr::get(ElementType, 0);
  }
}

void mlir::SparseElementsAttr::getFlattenedSparseIndices(mlir::SparseElementsAttr *this@<X0>, uint64_t **a2@<X8>)
{
  mlir::SparseElementsAttr *v2;
  uint64_t **v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  _QWORD *ArgOperands;
  uint64_t FlattenedIndex;
  uint64_t v31;
  unint64_t v32;
  mlir::SparseElementsAttr *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t **v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  void *v60[2];
  _QWORD v61[10];

  v2 = this;
  v3 = a2;
  v61[8] = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v58 = *(_QWORD *)(*(_QWORD *)this + 24);
  mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(&v58, (uint64_t)v60);
  v4 = v60[0];
  v5 = LOBYTE(v60[1]);
  v6 = v61[0];
  if (!*(_BYTE *)(v58 + 24))
  {
    *(_OWORD *)v60 = *(_OWORD *)(v58 + 8);
    v19 = *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
    *(_OWORD *)v60 = *(_OWORD *)(*(_QWORD *)v2 + 8);
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
    v57 = v19;
    if (!v19)
      return;
    v21 = v20;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v56 = v6;
    v55 = v5;
    v53 = v4;
    v54 = v20;
    v52 = v3;
    while (1)
    {
      v26 = v5 ? 0 : v6 + v23 * v21;
      v27 = *(_QWORD **)v2;
      v28 = *(_QWORD *)v2 ? (void *)mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v27 + 8) : 0;
      v60[0] = v27;
      v60[1] = v28;
      ArgOperands = (_QWORD *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v60);
      FlattenedIndex = mlir::ElementsAttr::getFlattenedIndex(ArgOperands, (uint64_t)&v4[v26]);
      v31 = FlattenedIndex;
      v32 = (unint64_t)v3[2];
      if ((unint64_t)v22 >= v32)
        break;
      *(_QWORD *)v22 = FlattenedIndex;
      v25 = (uint64_t)(v22 + 8);
LABEL_15:
      v3[1] = (uint64_t *)v25;
      ++v23;
      v22 = (char *)v25;
      v6 = v56;
      v5 = v55;
      v21 = v54;
      if (v23 == v57)
        return;
    }
    v33 = v2;
    v34 = (v22 - v24) >> 3;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 61)
      abort();
    v36 = v32 - (_QWORD)v24;
    if (v36 >> 2 > v35)
      v35 = v36 >> 2;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    if (v37)
    {
      if (v37 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v38 = operator new(8 * v37);
      v39 = &v38[8 * v34];
      *(_QWORD *)v39 = v31;
      v25 = (uint64_t)(v39 + 8);
      if (v22 != v24)
      {
LABEL_32:
        v40 = v22 - 8 - v24;
        if (v40 < 0x168
          || &v38[v22 - v24 - 8 - (v40 & 0xFFFFFFFFFFFFFFF8)] > &v38[v22 - v24 - 8]
          || &v22[-(v40 & 0xFFFFFFFFFFFFFFF8) - 8] > v22 - 8
          || (unint64_t)(v24 - v38) < 0x20)
        {
          v41 = v22;
          v2 = v33;
        }
        else
        {
          v43 = (v40 >> 3) + 1;
          v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v22[-v44];
          v39 -= v44;
          v45 = &v38[8 * v34 - 16];
          v46 = v22 - 16;
          v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v48 = *(_OWORD *)v46;
            *(v45 - 1) = *((_OWORD *)v46 - 1);
            *v45 = v48;
            v45 -= 2;
            v46 -= 32;
            v47 -= 4;
          }
          while (v47);
          v2 = v33;
          if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_35:
            v3 = v52;
            *v52 = (uint64_t *)v39;
            v52[1] = (uint64_t *)v25;
            v52[2] = (uint64_t *)&v38[8 * v37];
            if (!v24)
            {
LABEL_37:
              v24 = v39;
              v4 = v53;
              goto LABEL_15;
            }
LABEL_36:
            operator delete(v24);
            goto LABEL_37;
          }
        }
        do
        {
          v42 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *((_QWORD *)v39 - 1) = v42;
          v39 -= 8;
        }
        while (v41 != v24);
        goto LABEL_35;
      }
    }
    else
    {
      v38 = 0;
      v39 = (char *)(8 * v34);
      *(_QWORD *)(8 * v34) = v31;
      v25 = 8 * v34 + 8;
      if (v22 != v24)
        goto LABEL_32;
    }
    v2 = v33;
    v3 = v52;
    *v52 = (uint64_t *)v39;
    v52[1] = (uint64_t *)v25;
    v52[2] = (uint64_t *)&v38[8 * v37];
    if (!v24)
      goto LABEL_37;
    goto LABEL_36;
  }
  v59 = *(_OWORD *)(*(_QWORD *)v2 + 8);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59);
  v8 = v7;
  if (v5)
    v9 = 0;
  else
    v9 = v6;
  v60[0] = v61;
  HIDWORD(v60[1]) = 8;
  v10 = v4[v9];
  if (v7 < 9)
  {
    if (v7)
    {
      v61[0] = v4[v9];
      if (v7 != 1)
      {
        v61[1] = v10;
        if (v7 != 2)
        {
          v61[2] = v10;
          if (v7 != 3)
          {
            v61[3] = v10;
            if (v7 != 4)
            {
              v61[4] = v10;
              if (v7 != 5)
              {
                v61[5] = v10;
                if (v7 != 6)
                {
                  v61[6] = v10;
                  if (v7 != 7)
                    v61[7] = v10;
                }
              }
            }
          }
        }
      }
    }
    v11 = v61;
    LODWORD(v60[1]) = v7;
    v17 = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
      goto LABEL_11;
  }
  else
  {
    LODWORD(v60[1]) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v60, v61, v7, 8);
    v11 = v60[0];
    v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = v8 & 3;
    v14 = vdupq_n_s64(v10);
    v15 = (int64x2_t *)((char *)v60[0] + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15[-1] = v14;
      *v15 = v14;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != (v8 & 0xFFFFFFFFFFFFFFFCLL))
    {
      do
      {
        v11[v12++] = v10;
        --v13;
      }
      while (v13);
    }
    LODWORD(v60[1]) = v8;
    v17 = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
    {
LABEL_11:
      v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v17 + 8);
      goto LABEL_59;
    }
  }
  v18 = 0;
LABEL_59:
  *(_QWORD *)&v59 = v17;
  *((_QWORD *)&v59 + 1) = v18;
  v49 = (_QWORD *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v59);
  v50 = mlir::ElementsAttr::getFlattenedIndex(v49, (uint64_t)v11);
  v51 = (uint64_t *)operator new(8uLL);
  *v3 = v51;
  *v51++ = v50;
  v3[1] = v51;
  v3[2] = v51;
  if (v60[0] != v61)
    free(v60[0]);
}

uint64_t mlir::SparseElementsAttr::verify(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  const char ***v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  const char **v38;
  unint64_t v39;
  unint64_t v40;
  int64x2_t v41;
  const char **v42;
  unint64_t v43;
  _QWORD **v44;
  _QWORD **v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  _QWORD **v50;
  _QWORD **v51;
  void *v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  const char **v56;
  uint64_t v58;
  uint64_t v59;
  const char **v60;
  _QWORD **v61;
  _QWORD **v62;
  void *v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  void *v67;
  void *v68;
  _QWORD **v69;
  _QWORD **v70;
  void *v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  void *v75;
  void *v76;
  unint64_t v77;
  int64_t v78;
  _QWORD *v79[2];
  mlir::CallableOpInterface *v80[4];
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[2];
  const char **v87;
  const char *v88;
  _QWORD v89[6];
  uint64_t v90;
  unsigned __int8 v91;
  uint64_t v92;
  void *v93;
  unsigned int v94;
  unsigned int v95;
  _BYTE v96[96];
  void *v97;
  _QWORD *v98;
  void *__p;
  _QWORD **v100;
  char v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v86[0] = a1;
  v86[1] = a2;
  v84 = a3;
  v85 = a4;
  v83 = a5;
  v82 = *(_OWORD *)(a6 + 8);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v82);
  if (v9 != 1)
  {
    a1(&v90, a2);
    if (v90)
    {
      LODWORD(v87) = 3;
      v88 = "expected 1-d tensor for sparse element values";
      v89[0] = 45;
      v22 = &v87;
      v23 = (char *)v93;
      if (v94 >= v95)
      {
        v77 = v94 + 1;
        if (v93 <= &v87 && (char *)v93 + 24 * v94 > (char *)&v87)
        {
          v78 = (char *)&v87 - (_BYTE *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v77, 24);
          v23 = (char *)v93;
          v22 = (const char ***)((char *)v93 + v78);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v77, 24);
          v22 = &v87;
          v23 = (char *)v93;
        }
      }
      v24 = &v23[24 * v94];
      v25 = *(_OWORD *)v22;
      *((_QWORD *)v24 + 2) = v22[2];
      *(_OWORD *)v24 = v25;
      ++v94;
    }
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
    if (v90)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
    if (!v101)
      return v13;
    v26 = (_QWORD **)__p;
    if (__p)
    {
      v27 = v100;
      v28 = __p;
      if (v100 != __p)
      {
        do
          v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        v28 = __p;
      }
      v100 = v26;
      operator delete(v28);
    }
    v17 = v97;
    if (!v97)
      goto LABEL_78;
    v29 = v98;
    v19 = v97;
    if (v98 == v97)
      goto LABEL_77;
    do
    {
      v31 = (void *)*--v29;
      v30 = v31;
      *v29 = 0;
      if (v31)
        operator delete[](v30);
    }
    while (v29 != v17);
    goto LABEL_76;
  }
  v81 = *(_OWORD *)(a5 + 8);
  v80[0] = (mlir::CallableOpInterface *)v86;
  v80[1] = (mlir::CallableOpInterface *)&v84;
  v80[2] = (mlir::CallableOpInterface *)&v81;
  v80[3] = (mlir::CallableOpInterface *)&v82;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v84);
  v11 = v10;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v81);
  if (v12 == 2)
  {
    if (*(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v81) + 8) != v11)
    {
      mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_0::operator()((uint64_t)&v90, v80);
      v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
      if (v90)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
      if (!v101)
        return v13;
      v14 = (_QWORD **)__p;
      if (__p)
      {
        v15 = v100;
        v16 = __p;
        if (v100 != __p)
        {
          do
            v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          v16 = __p;
        }
        v100 = v14;
        operator delete(v16);
      }
      v17 = v97;
      if (!v97)
        goto LABEL_78;
      v18 = v98;
      v19 = v97;
      if (v98 == v97)
        goto LABEL_77;
      do
      {
        v21 = (void *)*--v18;
        v20 = v21;
        *v18 = 0;
        if (v21)
          operator delete[](v20);
      }
      while (v18 != v17);
      goto LABEL_76;
    }
  }
  else if (v12 != 1 || v11 != 1)
  {
    mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_0::operator()((uint64_t)&v90, v80);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
    if (v90)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
    if (!v101)
      return v13;
    v44 = (_QWORD **)__p;
    if (__p)
    {
      v45 = v100;
      v46 = __p;
      if (v100 != __p)
      {
        do
          v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
        while (v45 != v44);
        v46 = __p;
      }
      v100 = v44;
      operator delete(v46);
    }
    v17 = v97;
    if (!v97)
      goto LABEL_78;
    v47 = v98;
    v19 = v97;
    if (v98 == v97)
      goto LABEL_77;
    do
    {
      v49 = (void *)*--v47;
      v48 = v49;
      *v47 = 0;
      if (v49)
        operator delete[](v48);
    }
    while (v47 != v17);
    goto LABEL_76;
  }
  v32 = *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v81);
  if (v32 == *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v82))
  {
    v79[0] = v86;
    v79[1] = &v84;
    mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(&v83, (uint64_t)&v90);
    v33 = v90;
    v34 = v91;
    v35 = v92;
    if (*(_BYTE *)(v83 + 24))
    {
      if (v91)
        v36 = 0;
      else
        v36 = v92;
      v87 = (const char **)v89;
      HIDWORD(v88) = 6;
      v37 = *(_QWORD *)(v90 + 8 * v36);
      if (v11 < 7)
      {
        if (v11)
        {
          v89[0] = *(_QWORD *)(v90 + 8 * v36);
          if (v11 != 1)
          {
            v89[1] = v37;
            if (v11 != 2)
            {
              v89[2] = v37;
              if (v11 != 3)
              {
                v89[3] = v37;
                if (v11 != 4)
                {
                  v89[4] = v37;
                  if (v11 != 5)
                    v89[5] = v37;
                }
              }
            }
          }
        }
        v38 = (const char **)v89;
      }
      else
      {
        LODWORD(v88) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v11, 8);
        v38 = v87;
        v39 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        v40 = v11 & 3;
        v41 = vdupq_n_s64(v37);
        v42 = v87 + 2;
        v43 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          *((int64x2_t *)v42 - 1) = v41;
          *(int64x2_t *)v42 = v41;
          v42 += 4;
          v43 -= 4;
        }
        while (v43);
        if (v11 != (v11 & 0xFFFFFFFFFFFFFFFCLL))
        {
          do
          {
            v38[v39++] = (const char *)v37;
            --v40;
          }
          while (v40);
        }
      }
      LODWORD(v88) = v11;
      if ((mlir::ElementsAttr::isValidIndex(v84, v85, v38, v11) & 1) != 0)
      {
        v13 = 1;
      }
      else
      {
        mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_1::operator()((uint64_t)&v90, v79, 0, v87, v88);
        v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
        if (v90)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
        if (v101)
        {
          v61 = (_QWORD **)__p;
          if (__p)
          {
            v62 = v100;
            v63 = __p;
            if (v100 != __p)
            {
              do
                v62 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v62 - 1);
              while (v62 != v61);
              v63 = __p;
            }
            v100 = v61;
            operator delete(v63);
          }
          v64 = v97;
          if (v97)
          {
            v65 = v98;
            v66 = v97;
            if (v98 != v97)
            {
              do
              {
                v68 = (void *)*--v65;
                v67 = v68;
                *v65 = 0;
                if (v68)
                  operator delete[](v67);
              }
              while (v65 != v64);
              v66 = v97;
            }
            v98 = v64;
            operator delete(v66);
          }
          if (v93 != v96)
            free(v93);
        }
      }
      v56 = v87;
      if (v87 != v89)
        goto LABEL_79;
    }
    else
    {
      if (!v32)
        return 1;
      v58 = 0;
      while (1)
      {
        v59 = v34 ? 0 : v35;
        v60 = (const char **)(v33 + 8 * v59);
        if ((mlir::ElementsAttr::isValidIndex(v84, v85, v60, v11) & 1) == 0)
          break;
        ++v58;
        v35 += v11;
        if (v32 == v58)
          return 1;
      }
      mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_1::operator()((uint64_t)&v90, v79, v58, v60, v11);
      v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
      if (v90)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
      if (v101)
      {
        v69 = (_QWORD **)__p;
        if (__p)
        {
          v70 = v100;
          v71 = __p;
          if (v100 != __p)
          {
            do
              v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
            while (v70 != v69);
            v71 = __p;
          }
          v100 = v69;
          operator delete(v71);
        }
        v72 = v97;
        if (v97)
        {
          v73 = v98;
          v74 = v97;
          if (v98 != v97)
          {
            do
            {
              v76 = (void *)*--v73;
              v75 = v76;
              *v73 = 0;
              if (v76)
                operator delete[](v75);
            }
            while (v73 != v72);
            v74 = v97;
          }
          v98 = v72;
          operator delete(v74);
        }
        v56 = (const char **)v93;
        if (v93 != v96)
          goto LABEL_79;
      }
    }
    return v13;
  }
  mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_0::operator()((uint64_t)&v90, v80);
  v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
  if (v90)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
  if (!v101)
    return v13;
  v50 = (_QWORD **)__p;
  if (__p)
  {
    v51 = v100;
    v52 = __p;
    if (v100 != __p)
    {
      do
        v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
      while (v51 != v50);
      v52 = __p;
    }
    v100 = v50;
    operator delete(v52);
  }
  v17 = v97;
  if (v97)
  {
    v53 = v98;
    v19 = v97;
    if (v98 == v97)
      goto LABEL_77;
    do
    {
      v55 = (void *)*--v53;
      v54 = v55;
      *v53 = 0;
      if (v55)
        operator delete[](v54);
    }
    while (v53 != v17);
LABEL_76:
    v19 = v97;
LABEL_77:
    v98 = v17;
    operator delete(v19);
  }
LABEL_78:
  v56 = (const char **)v93;
  if (v93 != v96)
LABEL_79:
    free(v56);
  return v13;
}

void mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_0::operator()(uint64_t a1, mlir::CallableOpInterface **a2)
{
  const char **v4;
  char *v5;
  char *v6;
  __int128 v7;
  const char **ArgAttrsAttr;
  uint64_t v9;
  const char **v10;
  char *v11;
  char *v12;
  __int128 v13;
  const char **v14;
  uint64_t v15;
  const char **v16;
  char *v17;
  char *v18;
  __int128 v19;
  const char **v20;
  uint64_t v21;
  uint64_t v22;
  const char **v23;
  char *v24;
  char *v25;
  __int128 v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  void *__src;
  unsigned int v63;
  unsigned int v64;
  _BYTE v65[96];
  __int128 v66;
  uint64_t v67;
  __int128 __p;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr, _QWORD))*a2)(&v59, *((_QWORD *)*a2 + 1));
  if (v59)
  {
    LODWORD(v56) = 3;
    v57 = "expected shape ([";
    v58 = 17;
    v4 = &v56;
    v5 = (char *)__src;
    if (v63 >= v64)
    {
      v48 = v63 + 1;
      if (__src <= &v56 && (char *)__src + 24 * v63 > (char *)&v56)
      {
        v52 = (char *)&v56 - (_BYTE *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v48, 24);
        v5 = (char *)__src;
        v4 = (const char **)((char *)__src + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v48, 24);
        v4 = &v56;
        v5 = (char *)__src;
      }
    }
    v6 = &v5[24 * v63];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = v4[2];
    *(_OWORD *)v6 = v7;
    ++v63;
  }
  ArgAttrsAttr = (const char **)mlir::CallableOpInterface::getArgAttrsAttr(a2[1]);
  if (v59)
  {
    v56 = ", ";
    llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(ArgAttrsAttr, &ArgAttrsAttr[v9], (uint64_t)&v60, (uint64_t)&v60, &v56);
    if (v59)
    {
      LODWORD(v56) = 3;
      v57 = "]); inferred shape of indices literal ([";
      v58 = 40;
      v10 = &v56;
      v11 = (char *)__src;
      if (v63 >= v64)
      {
        v49 = v63 + 1;
        if (__src <= &v56 && (char *)__src + 24 * v63 > (char *)&v56)
        {
          v53 = (char *)&v56 - (_BYTE *)__src;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v49, 24);
          v11 = (char *)__src;
          v10 = (const char **)((char *)__src + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v49, 24);
          v10 = &v56;
          v11 = (char *)__src;
        }
      }
      v12 = &v11[24 * v63];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = v10[2];
      *(_OWORD *)v12 = v13;
      ++v63;
    }
  }
  v14 = (const char **)mlir::CallableOpInterface::getArgAttrsAttr(a2[2]);
  if (v59)
  {
    v56 = ", ";
    llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(v14, &v14[v15], (uint64_t)&v60, (uint64_t)&v60, &v56);
    if (v59)
    {
      LODWORD(v56) = 3;
      v57 = "]); inferred shape of values literal ([";
      v58 = 39;
      v16 = &v56;
      v17 = (char *)__src;
      if (v63 >= v64)
      {
        v50 = v63 + 1;
        if (__src <= &v56 && (char *)__src + 24 * v63 > (char *)&v56)
        {
          v54 = (char *)&v56 - (_BYTE *)__src;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v50, 24);
          v17 = (char *)__src;
          v16 = (const char **)((char *)__src + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v50, 24);
          v16 = &v56;
          v17 = (char *)__src;
        }
      }
      v18 = &v17[24 * v63];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      ++v63;
    }
  }
  v20 = (const char **)mlir::CallableOpInterface::getArgAttrsAttr(a2[3]);
  v22 = v59;
  if (v59)
  {
    v56 = ", ";
    llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(v20, &v20[v21], (uint64_t)&v60, (uint64_t)&v60, &v56);
    v22 = v59;
    if (v59)
    {
      LODWORD(v56) = 3;
      v57 = "])";
      v58 = 2;
      v23 = &v56;
      v24 = (char *)__src;
      if (v63 >= v64)
      {
        v51 = v63 + 1;
        if (__src <= &v56 && (char *)__src + 24 * v63 > (char *)&v56)
        {
          v55 = (char *)&v56 - (_BYTE *)__src;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v51, 24);
          v24 = (char *)__src;
          v23 = (const char **)((char *)__src + v55);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v51, 24);
          v23 = &v56;
          v24 = (char *)__src;
        }
      }
      v25 = &v24[24 * v63];
      v26 = *(_OWORD *)v23;
      *((_QWORD *)v25 + 2) = v23[2];
      *(_OWORD *)v25 = v26;
      ++v63;
      v22 = v59;
    }
  }
  *(_QWORD *)a1 = v22;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (v70)
  {
    *(_QWORD *)(a1 + 8) = v60;
    v27 = v63;
    *(_DWORD *)(a1 + 16) = v61;
    *(_QWORD *)(a1 + 24) = a1 + 40;
    *(_QWORD *)(a1 + 32) = 0x400000000;
    if (!(_DWORD)v27 || &v59 == (uint64_t *)a1)
    {
      v29 = 1;
      goto LABEL_29;
    }
    if (__src != v65)
    {
      *(_QWORD *)(a1 + 24) = __src;
      v28 = v64;
      *(_DWORD *)(a1 + 32) = v27;
      *(_DWORD *)(a1 + 36) = v28;
      __src = v65;
      v64 = 0;
      v29 = 1;
LABEL_28:
      v63 = 0;
LABEL_29:
      v31 = v69;
      *(_QWORD *)(a1 + 152) = v67;
      *(_OWORD *)(a1 + 136) = v66;
      v66 = 0uLL;
      *(_OWORD *)(a1 + 160) = __p;
      *(_QWORD *)(a1 + 176) = v31;
      v67 = 0;
      __p = 0uLL;
      v69 = 0;
      *(_BYTE *)(a1 + 184) = 1;
      if (v29)
      {
        v32 = (_QWORD **)__p;
        if ((_QWORD)__p)
        {
          v33 = (_QWORD **)*((_QWORD *)&__p + 1);
          v34 = (void *)__p;
          if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
          {
            do
              v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            v34 = (void *)__p;
          }
          *((_QWORD *)&__p + 1) = v32;
          operator delete(v34);
        }
        v35 = (_QWORD *)v66;
        if ((_QWORD)v66)
        {
          v36 = (_QWORD *)*((_QWORD *)&v66 + 1);
          v37 = (void *)v66;
          if (*((_QWORD *)&v66 + 1) != (_QWORD)v66)
          {
            do
            {
              v39 = (void *)*--v36;
              v38 = v39;
              *v36 = 0;
              if (v39)
                operator delete[](v38);
            }
            while (v36 != v35);
            v37 = (void *)v66;
          }
          *((_QWORD *)&v66 + 1) = v35;
          operator delete(v37);
        }
        if (__src != v65)
          free(__src);
        v70 = 0;
      }
      goto LABEL_46;
    }
    if (v27 < 5)
    {
      v30 = v27;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v27, 24);
      v30 = v63;
      if (!v63)
        goto LABEL_27;
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v30);
LABEL_27:
    *(_DWORD *)(a1 + 32) = v27;
    v29 = v70;
    goto LABEL_28;
  }
LABEL_46:
  mlir::InFlightDiagnostic::abandon(&v59);
  if (v59)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v59);
  if (v70)
  {
    v40 = (_QWORD **)__p;
    if ((_QWORD)__p)
    {
      v41 = (_QWORD **)*((_QWORD *)&__p + 1);
      v42 = (void *)__p;
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = (void *)__p;
      }
      *((_QWORD *)&__p + 1) = v40;
      operator delete(v42);
    }
    v43 = (_QWORD *)v66;
    if ((_QWORD)v66)
    {
      v44 = (_QWORD *)*((_QWORD *)&v66 + 1);
      v45 = (void *)v66;
      if (*((_QWORD *)&v66 + 1) != (_QWORD)v66)
      {
        do
        {
          v47 = (void *)*--v44;
          v46 = v47;
          *v44 = 0;
          if (v47)
            operator delete[](v46);
        }
        while (v44 != v43);
        v45 = (void *)v66;
      }
      *((_QWORD *)&v66 + 1) = v43;
      operator delete(v45);
    }
    if (__src != v65)
      free(__src);
  }
}

void mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_1::operator()(uint64_t a1, _QWORD **a2, unsigned int a3, const char **a4, uint64_t a5)
{
  uint64_t v10;
  const char **v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  const char **v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  const char **v21;
  char *v22;
  char *v23;
  __int128 v24;
  const char **v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  const char **v30;
  char *v31;
  char *v32;
  __int128 v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD **v39;
  _QWORD **v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  void *v46;
  _QWORD **v47;
  _QWORD **v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  void *v54;
  unint64_t v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  const char *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  void *__src;
  unsigned int v74;
  unsigned int v75;
  _BYTE v76[96];
  __int128 v77;
  uint64_t v78;
  __int128 __p;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  ((void (*)(uint64_t *__return_ptr, _QWORD))**a2)(&v70, (*a2)[1]);
  v10 = v70;
  if (v70)
  {
    LODWORD(v67) = 3;
    v68 = "sparse index #";
    v69 = 14;
    v11 = &v67;
    v12 = (char *)__src;
    if (v74 >= v75)
    {
      v55 = v74 + 1;
      if (__src <= &v67 && (char *)__src + 24 * v74 > (char *)&v67)
      {
        v62 = (char *)&v67 - (_BYTE *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v55, 24);
        v12 = (char *)__src;
        v11 = (const char **)((char *)__src + v62);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v55, 24);
        v11 = &v67;
        v12 = (char *)__src;
      }
    }
    v13 = &v12[24 * v74];
    v14 = *(_OWORD *)v11;
    *((_QWORD *)v13 + 2) = v11[2];
    *(_OWORD *)v13 = v14;
    v15 = ++v74;
    v10 = v70;
    if (v70)
    {
      LODWORD(v67) = 5;
      v68 = (const char *)a3;
      v16 = &v67;
      v17 = (char *)__src;
      if (v15 >= v75)
      {
        v56 = v15 + 1;
        v57 = (char *)__src + 24 * v15 > (char *)&v67;
        if (__src <= &v67 && v57)
        {
          v63 = (char *)&v67 - (_BYTE *)__src;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v56, 24);
          v17 = (char *)__src;
          v16 = (const char **)((char *)__src + v63);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v56, 24);
          v16 = &v67;
          v17 = (char *)__src;
        }
      }
      v18 = &v17[24 * v74];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      v20 = ++v74;
      v10 = v70;
      if (v70)
      {
        LODWORD(v67) = 3;
        v68 = " is not contained within the value shape, with index=[";
        v69 = 54;
        v21 = &v67;
        v22 = (char *)__src;
        if (v20 >= v75)
        {
          v58 = v20 + 1;
          v59 = (char *)__src + 24 * v20 > (char *)&v67;
          if (__src <= &v67 && v59)
          {
            v64 = (char *)&v67 - (_BYTE *)__src;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v58, 24);
            v22 = (char *)__src;
            v21 = (const char **)((char *)__src + v64);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v58, 24);
            v21 = &v67;
            v22 = (char *)__src;
          }
        }
        v23 = &v22[24 * v74];
        v24 = *(_OWORD *)v21;
        *((_QWORD *)v23 + 2) = v21[2];
        *(_OWORD *)v23 = v24;
        ++v74;
        v10 = v70;
        if (v70)
        {
          v67 = ", ";
          llvm::interleave<unsigned long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<unsigned long long>>(llvm::ArrayRef<unsigned long long> const&,char const*)::{lambda(llvm::ArrayRef<unsigned long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<unsigned long long>>(llvm::ArrayRef<unsigned long long> const&,char const*)::{lambda(void)#1},void>(a4, &a4[a5], (uint64_t)&v71, (uint64_t)&v71, &v67);
          v10 = v70;
          if (v70)
          {
            LODWORD(v67) = 3;
            v68 = "], and type=";
            v69 = 12;
            v25 = &v67;
            v26 = (char *)__src;
            if (v74 >= v75)
            {
              v60 = v74 + 1;
              if (__src <= &v67 && (char *)__src + 24 * v74 > (char *)&v67)
              {
                v65 = (char *)&v67 - (_BYTE *)__src;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v60, 24);
                v26 = (char *)__src;
                v25 = (const char **)((char *)__src + v65);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v60, 24);
                v25 = &v67;
                v26 = (char *)__src;
              }
            }
            v27 = &v26[24 * v74];
            v28 = *(_OWORD *)v25;
            *((_QWORD *)v27 + 2) = v25[2];
            *(_OWORD *)v27 = v28;
            ++v74;
            v10 = v70;
            if (v70)
            {
              v29 = *a2[1];
              v30 = &v67;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v67, v29);
              v31 = (char *)__src;
              if (v74 >= v75)
              {
                v61 = v74 + 1;
                if (__src <= &v67 && (char *)__src + 24 * v74 > (char *)&v67)
                {
                  v66 = (char *)&v67 - (_BYTE *)__src;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v61, 24);
                  v31 = (char *)__src;
                  v30 = (const char **)((char *)__src + v66);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v61, 24);
                  v30 = &v67;
                  v31 = (char *)__src;
                }
              }
              v32 = &v31[24 * v74];
              v33 = *(_OWORD *)v30;
              *((_QWORD *)v32 + 2) = v30[2];
              *(_OWORD *)v32 = v33;
              ++v74;
              v10 = v70;
            }
          }
        }
      }
    }
  }
  *(_QWORD *)a1 = v10;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (v81)
  {
    *(_QWORD *)(a1 + 8) = v71;
    v34 = v74;
    *(_DWORD *)(a1 + 16) = v72;
    *(_QWORD *)(a1 + 24) = a1 + 40;
    *(_QWORD *)(a1 + 32) = 0x400000000;
    if (!(_DWORD)v34 || &v70 == (uint64_t *)a1)
    {
      v36 = 1;
      goto LABEL_26;
    }
    if (__src != v76)
    {
      *(_QWORD *)(a1 + 24) = __src;
      v35 = v75;
      *(_DWORD *)(a1 + 32) = v34;
      *(_DWORD *)(a1 + 36) = v35;
      __src = v76;
      v75 = 0;
      v36 = 1;
LABEL_25:
      v74 = 0;
LABEL_26:
      v38 = v80;
      *(_QWORD *)(a1 + 152) = v78;
      *(_OWORD *)(a1 + 136) = v77;
      v77 = 0uLL;
      *(_OWORD *)(a1 + 160) = __p;
      *(_QWORD *)(a1 + 176) = v38;
      v78 = 0;
      __p = 0uLL;
      v80 = 0;
      *(_BYTE *)(a1 + 184) = 1;
      if (v36)
      {
        v39 = (_QWORD **)__p;
        if ((_QWORD)__p)
        {
          v40 = (_QWORD **)*((_QWORD *)&__p + 1);
          v41 = (void *)__p;
          if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
          {
            do
              v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
            while (v40 != v39);
            v41 = (void *)__p;
          }
          *((_QWORD *)&__p + 1) = v39;
          operator delete(v41);
        }
        v42 = (_QWORD *)v77;
        if ((_QWORD)v77)
        {
          v43 = (_QWORD *)*((_QWORD *)&v77 + 1);
          v44 = (void *)v77;
          if (*((_QWORD *)&v77 + 1) != (_QWORD)v77)
          {
            do
            {
              v46 = (void *)*--v43;
              v45 = v46;
              *v43 = 0;
              if (v46)
                operator delete[](v45);
            }
            while (v43 != v42);
            v44 = (void *)v77;
          }
          *((_QWORD *)&v77 + 1) = v42;
          operator delete(v44);
        }
        if (__src != v76)
          free(__src);
        v81 = 0;
      }
      goto LABEL_43;
    }
    if (v34 < 5)
    {
      v37 = v34;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v34, 24);
      v37 = v74;
      if (!v74)
        goto LABEL_24;
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v37);
LABEL_24:
    *(_DWORD *)(a1 + 32) = v34;
    v36 = v81;
    goto LABEL_25;
  }
LABEL_43:
  mlir::InFlightDiagnostic::abandon(&v70);
  if (v70)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
  if (v81)
  {
    v47 = (_QWORD **)__p;
    if ((_QWORD)__p)
    {
      v48 = (_QWORD **)*((_QWORD *)&__p + 1);
      v49 = (void *)__p;
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        do
          v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
        while (v48 != v47);
        v49 = (void *)__p;
      }
      *((_QWORD *)&__p + 1) = v47;
      operator delete(v49);
    }
    v50 = (_QWORD *)v77;
    if ((_QWORD)v77)
    {
      v51 = (_QWORD *)*((_QWORD *)&v77 + 1);
      v52 = (void *)v77;
      if (*((_QWORD *)&v77 + 1) != (_QWORD)v77)
      {
        do
        {
          v54 = (void *)*--v51;
          v53 = v54;
          *v51 = 0;
          if (v54)
            operator delete[](v53);
        }
        while (v51 != v50);
        v52 = (void *)v77;
      }
      *((_QWORD *)&v77 + 1) = v50;
      operator delete(v52);
    }
    if (__src != v76)
      free(__src);
  }
}

_QWORD *mlir::DistinctAttr::create(uint64_t a1)
{
  uint64_t Context;
  uint64_t v3;

  v3 = a1;
  Context = mlir::Attribute::getContext((mlir::Attribute *)&v3);
  return mlir::detail::DistinctAttributeUniquer::get<mlir::DistinctAttr,mlir::Attribute &>(Context, &v3);
}

uint64_t mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *ArgAttrsAttr;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *(_OWORD *)(*a1 + 8);
  *(_QWORD *)&v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 64)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v14);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), (_DWORD)result != 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v14 = *(_QWORD *)(v5 + 8);
    v8 = v14;
    *((_QWORD *)&v14 + 1) = v9;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

__n128 llvm::interleave<unsigned long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<unsigned long long>>(llvm::ArrayRef<unsigned long long> const&,char const*)::{lambda(llvm::ArrayRef<unsigned long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<unsigned long long>>(llvm::ArrayRef<unsigned long long> const&,char const*)::{lambda(void)#1},void>(const char **a1, const char **a2, uint64_t a3, uint64_t a4, const char **a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v12;
  unint64_t *v13;
  const char *v14;
  uint64_t v15;
  __n128 *v16;
  __n128 *v17;
  __n128 result;
  const char **v19;
  const char *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  __int128 v26;
  const char *v27;
  uint64_t v28;
  unint64_t v29;
  __n128 *v30;
  __n128 *v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  BOOL v35;
  char *v36;
  unint64_t v37;
  BOOL v38;
  char *v39;
  char *v40;
  void *v41;
  void *v42;
  unint64_t *v43;
  int v44;
  const char *v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;

  if (a1 != a2)
  {
    v47 = v5;
    v48 = v6;
    v13 = (unint64_t *)(a3 + 16);
    v12 = *(_QWORD *)(a3 + 16);
    v14 = *a1;
    v44 = 5;
    v45 = v14;
    v15 = *(unsigned int *)(a3 + 24);
    v16 = (__n128 *)&v44;
    if (v15 >= *(_DWORD *)(a3 + 28))
    {
      v37 = v15 + 1;
      v38 = v12 + 24 * v15 > (unint64_t)&v44;
      if (v12 <= (unint64_t)&v44 && v38)
      {
        v39 = (char *)&v44 - v12;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, (void *)(a3 + 32), v37, 24);
        v12 = *(_QWORD *)(a3 + 16);
        v16 = (__n128 *)&v39[v12];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, (void *)(a3 + 32), v37, 24);
        v12 = *(_QWORD *)(a3 + 16);
        v16 = (__n128 *)&v44;
      }
    }
    v17 = (__n128 *)(v12 + 24 * *(unsigned int *)(a3 + 24));
    result = *v16;
    v17[1].n128_u64[0] = v16[1].n128_u64[0];
    *v17 = result;
    ++*(_DWORD *)(a3 + 24);
    v19 = a1 + 1;
    if (a1 + 1 != a2)
    {
      v42 = (void *)(a4 + 32);
      v43 = (unint64_t *)(a4 + 16);
      v41 = (void *)(a3 + 32);
      do
      {
        v20 = *a5;
        if (*a5)
        {
          v21 = strlen(*a5);
          v44 = 3;
          v45 = v20;
          v46 = v21;
          v22 = *(unsigned int *)(a4 + 24);
          v23 = *(_QWORD *)(a4 + 16);
          if (v22 < *(_DWORD *)(a4 + 28))
            goto LABEL_9;
        }
        else
        {
          v44 = 3;
          v45 = 0;
          v46 = 0;
          v22 = *(unsigned int *)(a4 + 24);
          v23 = *(_QWORD *)(a4 + 16);
          if (v22 < *(_DWORD *)(a4 + 28))
            goto LABEL_9;
        }
        v32 = v22 + 1;
        v33 = v23 + 24 * v22 > (unint64_t)&v44;
        if (v23 > (unint64_t)&v44 || !v33)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v43, v42, v32, 24);
          v23 = *v43;
LABEL_9:
          v24 = &v44;
          goto LABEL_10;
        }
        v40 = (char *)&v44 - v23;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v43, v42, v32, 24);
        v23 = *v43;
        v24 = (int *)&v40[*v43];
LABEL_10:
        v25 = v23 + 24 * *(unsigned int *)(a4 + 24);
        v26 = *(_OWORD *)v24;
        *(_QWORD *)(v25 + 16) = *((_QWORD *)v24 + 2);
        *(_OWORD *)v25 = v26;
        ++*(_DWORD *)(a4 + 24);
        v27 = *v19;
        v44 = 5;
        v45 = v27;
        v28 = *(unsigned int *)(a3 + 24);
        v29 = *(_QWORD *)(a3 + 16);
        if (v28 >= *(_DWORD *)(a3 + 28))
        {
          v34 = v28 + 1;
          v35 = v29 + 24 * v28 > (unint64_t)&v44;
          if (v29 <= (unint64_t)&v44 && v35)
          {
            v36 = (char *)&v44 - v29;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, v41, v34, 24);
            v29 = *v13;
            v30 = (__n128 *)&v36[*v13];
            goto LABEL_12;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, v41, v34, 24);
          v29 = *v13;
        }
        v30 = (__n128 *)&v44;
LABEL_12:
        v31 = (__n128 *)(v29 + 24 * *(unsigned int *)(a3 + 24));
        result = *v30;
        v31[1].n128_u64[0] = v30[1].n128_u64[0];
        *v31 = result;
        ++*(_DWORD *)(a3 + 24);
        ++v19;
      }
      while (v19 != a2);
    }
  }
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  unsigned __int8 v7;
  uint64_t *v8;
  unsigned int v9;
  int v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  _OWORD v16[4];
  _OWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15[0] = a2;
  v15[1] = a3;
  v14 = *a5;
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v11)
    {
      v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v12 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v19 = v8[19];
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::AffineMap>((llvm::hashing::detail::hash_combine_recursive_helper *)v16, 0, v16, (char *)v17, &v14);
  v13 = &v14;
  *(_QWORD *)&v16[0] = &v14;
  *((_QWORD *)&v16[0] + 1) = v15;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineMapAttrStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(llvm::function_ref<void ()(mlir::detail::AffineMapAttrStorage *)>,mlir::TypeID,mlir::AffineMap &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineMapAttrStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(llvm::function_ref<void ()(mlir::detail::AffineMapAttrStorage *)>,mlir::TypeID,mlir::AffineMap &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::AffineMap>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, unint64_t *a5)
{
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  int v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;

  v17 = a2;
  v7 = *a5;
  v9 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v8 & 1) == 0)
  {
    v15 = *a5;
    v16 = a3;
    v9 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v7 = v15;
    a3 = v16;
    if (v13)
    {
      v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v14 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      v9 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v7 = v15;
      a3 = v16;
    }
  }
  v10 = (v9[19] + 8 * v7) ^ HIDWORD(v7);
  v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v17, a3, (unint64_t)a4, 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69 * (HIDWORD(v7) ^ ((0x9DDFEA08EB382D69 * v10) >> 47) ^ (0x9DDFEA08EB382D69 * v10))) ^ ((0x9DDFEA08EB382D69 * (HIDWORD(v7) ^ ((0x9DDFEA08EB382D69 * v10) >> 47) ^ (0x9DDFEA08EB382D69 * v10))) >> 47)));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v17, v11, a4);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineMapAttrStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(llvm::function_ref<void ()(mlir::detail::AffineMapAttrStorage *)>,mlir::TypeID,mlir::AffineMap &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **a1;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineMapAttrStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(llvm::function_ref<void ()(mlir::detail::AffineMapAttrStorage *)>,mlir::TypeID,mlir::AffineMap &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  char *buffer;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  void (*v14)(uint64_t, _QWORD *);

  v4 = **a1;
  a2[10] += 16;
  v5 = *a2;
  v6 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (*a2)
    v7 = v6 + 16 > a2[1] - *a2;
  else
    v7 = 1;
  if (v7)
  {
    v8 = *((_DWORD *)a2 + 6) >> 7;
    if (v8 >= 0x1E)
      LOBYTE(v8) = 30;
    v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    v11 = *((unsigned int *)a2 + 6);
    if (v11 >= *((_DWORD *)a2 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), a2 + 4, v11 + 1, 8);
      LODWORD(v11) = *((_DWORD *)a2 + 6);
    }
    *(_QWORD *)(a2[2] + 8 * v11) = buffer;
    ++*((_DWORD *)a2 + 6);
    a2[1] = (uint64_t)&buffer[v9];
    v12 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *a2 = (uint64_t)(v12 + 2);
    *v12 = 0;
    v12[1] = v4;
    v13 = a1[1];
    v14 = (void (*)(uint64_t, _QWORD *))*v13;
    if (*v13)
      goto LABEL_13;
  }
  else
  {
    v12 = (_QWORD *)(v5 + v6);
    *a2 = v5 + v6 + 16;
    *v12 = 0;
    v12[1] = v4;
    v13 = a1[1];
    v14 = (void (*)(uint64_t, _QWORD *))*v13;
    if (*v13)
LABEL_13:
      v14(v13[1], v12);
  }
  return v12;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail20AffineMapAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13AffineMapAttrEJRNS1_9AffineMapEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  unint64_t v15;
  _QWORD v16[2];
  __int128 *v17;
  __int128 v18;
  _QWORD v19[2];

  v19[0] = a2;
  v19[1] = a3;
  v18 = *a5;
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v14)
    {
      v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v15 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v15;
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v9 = v8[19];
  v10 = llvm::hashing::detail::hash_combine_range_impl<mlir::Attribute const*>((_DWORD *)v18, (_DWORD *)(v18 + 8 * *((_QWORD *)&v18 + 1)));
  v11 = v9 ^ HIDWORD(v10);
  v12 = 0x9DDFEA08EB382D69 * ((8 * v10 + 8) ^ v11);
  v16[0] = &v18;
  v16[1] = v19;
  v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, -348639895* ((((0x9DDFEA08EB382D69 * (v11 ^ (v12 >> 47) ^ v12)) >> 32) >> 15) ^ (-348639895* (v11 ^ (v12 >> 47) ^ v12))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::ArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(llvm::function_ref<void ()(mlir::detail::ArrayAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Attribute> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::ArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(llvm::function_ref<void ()(mlir::detail::ArrayAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Attribute> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<mlir::Attribute const*>(_DWORD *a1, _DWORD *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char v48;
  uint64_t v50;
  __int128 *v51;
  char v52;
  char v53;
  __int128 *v54;
  __int128 *v55;
  __int128 *v56;
  BOOL v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _OWORD *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _DWORD *v78;
  _DWORD *v79;
  int v80;
  int v81;
  unint64_t v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _QWORD v88[2];

  v88[1] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0)
  {
    v78 = a1;
    v79 = a2;
    a2 = v79;
    v81 = v80;
    a1 = v78;
    if (v81)
    {
      v82 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v82 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v82;
      a1 = v78;
      a2 = v79;
    }
  }
  if (a1 == a2)
  {
    v72 = 0;
  }
  else
  {
    v3 = (*a1 >> 4) ^ (*a1 >> 9);
    *(_QWORD *)&v84 = v3;
    if (a1 + 2 == a2)
    {
      v72 = 8;
    }
    else
    {
      v4 = (a1[2] >> 4) ^ (a1[2] >> 9);
      *((_QWORD *)&v84 + 1) = v4;
      if (a1 + 4 == a2)
      {
        v72 = 16;
      }
      else
      {
        v5 = (a1[4] >> 4) ^ (a1[4] >> 9);
        *(_QWORD *)&v85 = v5;
        if (a1 + 6 == a2)
        {
          v72 = 24;
        }
        else
        {
          v6 = (a1[6] >> 4) ^ (a1[6] >> 9);
          *((_QWORD *)&v85 + 1) = v6;
          if (a1 + 8 == a2)
          {
            v72 = 32;
          }
          else
          {
            v7 = (a1[8] >> 4) ^ (a1[8] >> 9);
            *(_QWORD *)&v86 = v7;
            if (a1 + 10 == a2)
            {
              v72 = 40;
            }
            else
            {
              v8 = (a1[10] >> 4) ^ (a1[10] >> 9);
              *((_QWORD *)&v86 + 1) = v8;
              if (a1 + 12 == a2)
              {
                v72 = 48;
              }
              else
              {
                v9 = (a1[12] >> 4) ^ (a1[12] >> 9);
                *(_QWORD *)&v87 = v9;
                if (a1 + 14 == a2)
                {
                  v72 = 56;
                }
                else
                {
                  v10 = (a1[14] >> 4) ^ (a1[14] >> 9);
                  *((_QWORD *)&v87 + 1) = v10;
                  v11 = a1 + 16;
                  if (a1 + 16 != a2)
                  {
                    v12 = llvm::hashing::detail::get_execution_seed(void)::seed ^ ((unint64_t)llvm::hashing::detail::get_execution_seed(void)::seed >> 47);
                    v13 = 0x9DDFEA08EB382D69
                        * (llvm::hashing::detail::get_execution_seed(void)::seed ^ (((0x9DDFEA08EB382D69
                                                                                    * (v12 ^ (0xB492B66FBE98F273
                                                                                            * llvm::hashing::detail::get_execution_seed(void)::seed))) ^ llvm::hashing::detail::get_execution_seed(void)::seed) >> 47) ^ (0x9DDFEA08EB382D69 * (v12 ^ (0xB492B66FBE98F273 * llvm::hashing::detail::get_execution_seed(void)::seed))));
                    v14 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
                    v15 = 0x9DDFEA08EB382D69
                        * ((0x9DDFEA08EB382D69
                          * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
                    v16 = __ROR8__(v12 - 0x622015F714C7D297 * (v15 ^ (v15 >> 47)), 33);
                    v17 = 0xB492B66FBE98F273 * v16;
                    v18 = v14 + v7 - 0x4B6D499041670D8DLL * v16;
                    v19 = v8 + v9 + v18 + v10;
                    v20 = __ROR8__(v8 + v9 + v18, 44) + v18;
                    v21 = __ROR8__(llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273, 49);
                    v22 = v21
                        + v8
                        - 0x4B6D499041670D8DLL
                        * __ROR8__(llvm::hashing::detail::get_execution_seed(void)::seed+ v9- 0x4B6D499041670D8DLL * llvm::hashing::detail::get_execution_seed(void)::seed, 42);
                    v23 = v20 + __ROR8__(v22 + v5 + v10 + v18, 21);
                    v24 = v3 - 0x6D8ED9027DD26057 * llvm::hashing::detail::get_execution_seed(void)::seed;
                    v25 = v24 + v4 + v5;
                    v26 = v25 + v6;
                    v27 = (0xB492B66FBE98F273
                         * __ROR8__(v21 + llvm::hashing::detail::get_execution_seed(void)::seed + v4, 37)) ^ v14;
                    v28 = __ROR8__(v25, 44) + v24 + __ROR8__(v27 + v12 + v24 + v6, 21);
                    v83 = (char *)&v86;
                    v29 = 64;
                    while (1)
                    {
                      *(_QWORD *)&v84 = (*v11 >> 4) ^ (*v11 >> 9);
                      v37 = v11 + 2 == a2;
                      if (v11 + 2 == a2)
                      {
                        v39 = 0;
                        v40 = 8;
                        v11 += 2;
                        v41 = (char *)&v84 + 8;
                      }
                      else
                      {
                        *((_QWORD *)&v84 + 1) = (v11[2] >> 4) ^ (v11[2] >> 9);
                        v37 = v11 + 4 == a2;
                        if (v11 + 4 == a2)
                        {
                          v39 = 8;
                          v40 = 16;
                          v11 += 4;
                          v41 = (char *)&v85;
                        }
                        else
                        {
                          *(_QWORD *)&v85 = (v11[4] >> 4) ^ (v11[4] >> 9);
                          v37 = v11 + 6 == a2;
                          if (v11 + 6 == a2)
                          {
                            v39 = 16;
                            v40 = 24;
                            v11 += 6;
                            v41 = (char *)&v85 + 8;
                          }
                          else
                          {
                            *((_QWORD *)&v85 + 1) = (v11[6] >> 4) ^ (v11[6] >> 9);
                            v37 = v11 + 8 == a2;
                            if (v11 + 8 == a2)
                            {
                              v39 = 24;
                              v40 = 32;
                              v11 += 8;
                              v41 = v83;
                            }
                            else
                            {
                              *(_QWORD *)&v86 = (v11[8] >> 4) ^ (v11[8] >> 9);
                              v37 = v11 + 10 == a2;
                              if (v11 + 10 == a2)
                              {
                                v39 = 32;
                                v40 = 40;
                                v11 += 10;
                                v41 = (char *)&v86 + 8;
                              }
                              else
                              {
                                *((_QWORD *)&v86 + 1) = (v11[10] >> 4) ^ (v11[10] >> 9);
                                v37 = v11 + 12 == a2;
                                if (v11 + 12 == a2)
                                {
                                  v39 = 40;
                                  v40 = 48;
                                  v11 += 12;
                                  v41 = (char *)&v87;
                                }
                                else
                                {
                                  *(_QWORD *)&v87 = (v11[12] >> 4) ^ (v11[12] >> 9);
                                  v37 = v11 + 14 == a2;
                                  if (v11 + 14 == a2)
                                  {
                                    v39 = 48;
                                    v40 = 56;
                                    v11 += 14;
                                    v41 = (char *)&v87 + 8;
                                  }
                                  else
                                  {
                                    v38 = (v11[14] >> 4) ^ (v11[14] >> 9);
                                    v11 += 16;
                                    *((_QWORD *)&v87 + 1) = v38;
                                    v37 = v11 == a2;
                                    v39 = 56;
                                    v40 = 64;
                                    v41 = (char *)v88;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      if ((v40 & 0x38) == 0)
                        goto LABEL_12;
                      v42 = 56 - v39;
                      v43 = v40;
                      if (v40 != 56 - v39)
                      {
                        do
                        {
                          v50 = v43;
                          v43 = v42;
                          v42 = v50 % v42;
                        }
                        while (v42);
                        if (v43)
                        {
                          v51 = (__int128 *)((char *)&v84 + v43);
                          do
                          {
                            v53 = *((_BYTE *)v51 - 1);
                            v51 = (__int128 *)((char *)v51 - 1);
                            v52 = v53;
                            v54 = (__int128 *)((char *)v51 + v40);
                            v55 = v51;
                            do
                            {
                              v56 = v55;
                              v55 = v54;
                              *(_BYTE *)v56 = *(_BYTE *)v54;
                              v57 = v40 < (char *)v88 - (char *)v54;
                              v58 = (char *)&v84 + v40 - ((char *)v88 - (char *)v54);
                              v54 = (__int128 *)((char *)v54 + v40);
                              if (!v57)
                                v54 = (__int128 *)v58;
                            }
                            while (v54 != v51);
                            *(_BYTE *)v55 = v52;
                          }
                          while (v51 != &v84);
                        }
                        goto LABEL_12;
                      }
                      v44 = v39 | 7;
                      if (55 - v39 < (v39 | 7uLL))
                        v44 = 55 - v39;
                      v45 = (char *)&v84;
                      if (&v84 < (__int128 *)((char *)&v84 + v39 + v44 + 9))
                      {
                        v46 = v40;
                        if (v41 < (char *)&v84 + v44 + 1)
                          goto LABEL_34;
                      }
                      if (v44 >= 0x1F)
                      {
                        v60 = v44 + 1;
                        v59 = (v44 + 1) & 0x60;
                        v61 = (__int128 *)((char *)&v84 + v40);
                        v62 = v84;
                        v63 = v85;
                        v64 = *(__int128 *)((char *)&v84 + v40 + 16);
                        v84 = *(__int128 *)((char *)&v84 + v40);
                        v85 = v64;
                        *v61 = v62;
                        v61[1] = v63;
                        if (v59 != 32)
                        {
                          v65 = (__int128 *)((char *)&v86 + v40);
                          v66 = v86;
                          v67 = v87;
                          v68 = *(__int128 *)((char *)&v86 + v40 + 16);
                          v86 = *(__int128 *)((char *)&v86 + v40);
                          v87 = v68;
                          *v65 = v66;
                          v65[1] = v67;
                        }
                        if (v60 == v59)
                          goto LABEL_12;
                        if ((v60 & 0x18) == 0)
                        {
                          v45 = (char *)&v84 + v59;
                          v46 = v40 + v59;
LABEL_34:
                          v47 = v45 + 1;
                          do
                          {
                            v48 = *(v47 - 1);
                            *(v47 - 1) = *((_BYTE *)&v84 + v46);
                            *((_BYTE *)&v84 + v46) = v48;
                            if (v47 == v41)
                              break;
                            ++v47;
                          }
                          while (v46++ != 63);
                          goto LABEL_12;
                        }
                      }
                      else
                      {
                        v59 = 0;
                      }
                      v69 = (uint64_t *)((char *)&v84 + v59);
                      v70 = v44 - v59 + 1;
                      do
                      {
                        v71 = *v69;
                        *v69 = v69[(unint64_t)v40 / 8];
                        v69[(unint64_t)v40 / 8] = v71;
                        ++v69;
                        v70 -= 8;
                      }
                      while (v70);
LABEL_12:
                      v30 = v22 + v26 + v17 + *((_QWORD *)&v84 + 1);
                      v22 = *((_QWORD *)&v86 + 1) + v26 - 0x4B6D499041670D8DLL * __ROR8__(v22 + v28 + v87, 42);
                      v31 = v84 - 0x4B6D499041670D8DLL * v28;
                      v32 = v31 + *((_QWORD *)&v84 + 1) + v85;
                      v33 = __ROR8__(v27 + v19, 33);
                      v34 = (0xB492B66FBE98F273 * __ROR8__(v30, 37)) ^ v23;
                      v28 = __ROR8__(v32, 44) + v31 + __ROR8__(v34 + v19 + v31 + *((_QWORD *)&v85 + 1), 21);
                      v17 = 0xB492B66FBE98F273 * v33;
                      v35 = 0xB492B66FBE98F273 * v33 + v23 + v86;
                      v36 = *((_QWORD *)&v86 + 1) + v87 + v35;
                      v26 = v32 + *((_QWORD *)&v85 + 1);
                      v23 = __ROR8__(v22 + v85 + v35 + *((_QWORD *)&v87 + 1), 21) + v35 + __ROR8__(v36, 44);
                      v19 = v36 + *((_QWORD *)&v87 + 1);
                      v29 += v40;
                      v27 = v34;
                      if (v37)
                      {
                        v73 = 0x9DDFEA08EB382D69
                            * (v19 ^ ((0x9DDFEA08EB382D69 * (v26 ^ v19)) >> 47) ^ (0x9DDFEA08EB382D69 * (v26 ^ v19)));
                        v74 = 0x9DDFEA08EB382D69
                            * (v23 ^ ((0x9DDFEA08EB382D69 * (v28 ^ v23)) >> 47) ^ (0x9DDFEA08EB382D69 * (v28 ^ v23)));
                        v75 = 0x9DDFEA08EB382D69 * (v74 ^ (v74 >> 47))
                            - 0x4B6D499041670D8DLL * ((v29 ^ (v29 >> 47)) + v33);
                        v76 = 0x9DDFEA08EB382D69
                            * (v75 ^ (v34
                                    - 0x4B6D499041670D8DLL * (v22 ^ (v22 >> 47))
                                    - 0x622015F714C7D297 * (v73 ^ (v73 >> 47))));
                        return 0x9DDFEA08EB382D69
                             * ((0x9DDFEA08EB382D69 * (v75 ^ (v76 >> 47) ^ v76)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (v75 ^ (v76 >> 47) ^ v76)) >> 47));
                      }
                    }
                  }
                  v72 = 64;
                }
              }
            }
          }
        }
      }
    }
  }
  return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v84, v72, llvm::hashing::detail::get_execution_seed(void)::seed);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::ArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(llvm::function_ref<void ()(mlir::detail::ArrayAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Attribute> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t ***a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  BOOL v10;

  v2 = *(uint64_t **)(a2 + 16);
  if (v2 != (*a1)[1])
    return 0;
  if (!v2)
    return 1;
  v3 = *(uint64_t **)(a2 + 8);
  v4 = **a1;
  v5 = 8 * (_QWORD)v2 - 8;
  do
  {
    v7 = *v4++;
    v6 = v7;
    v8 = *v3++;
    result = v8 == v6;
    v10 = v8 != v6 || v5 == 0;
    v5 -= 8;
  }
  while (!v10);
  return result;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::ArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(llvm::function_ref<void ()(mlir::detail::ArrayAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Attribute> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::ArrayAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::detail::ArrayAttrStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  char *buffer;
  uint64_t v21;
  _QWORD *result;

  v3 = a2[1];
  if (v3)
  {
    v4 = *a2;
    v5 = 8 * v3;
    v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v3, 3);
    v7 = v6;
    if ((unint64_t)(8 * v3 - 8) < 0x18)
    {
      v8 = (_QWORD *)v6;
      v9 = (uint64_t *)v4;
    }
    else
    {
      v8 = (_QWORD *)v6;
      v9 = (uint64_t *)v4;
      if ((unint64_t)(v6 - v4) >= 0x20)
      {
        v10 = ((unint64_t)(v5 - 8) >> 3) + 1;
        v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
        v8 = (_QWORD *)(v6 + v11);
        v9 = (uint64_t *)(v4 + v11);
        v12 = (__int128 *)(v4 + 16);
        v13 = (_OWORD *)(v6 + 16);
        v14 = v10 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v15 = *v12;
          *(v13 - 1) = *(v12 - 1);
          *v13 = v15;
          v12 += 2;
          v13 += 2;
          v14 -= 4;
        }
        while (v14);
        if (v10 == (v10 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_11;
      }
    }
    do
    {
      v16 = *v9++;
      *v8++ = v16;
    }
    while (v9 != (uint64_t *)(v4 + v5));
  }
  else
  {
    v7 = 0;
  }
LABEL_11:
  *(_QWORD *)(__sz + 80) += 24;
  if (*(_QWORD *)__sz)
    v17 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 24 > *(_QWORD *)(__sz + 8)
                                                                                  - *(_QWORD *)__sz;
  else
    v17 = 1;
  if (v17)
  {
    v18 = *(_DWORD *)(__sz + 24) >> 7;
    if (v18 >= 0x1E)
      LOBYTE(v18) = 30;
    v19 = 4096 << v18;
    buffer = (char *)llvm::allocate_buffer(4096 << v18, (std::align_val_t)8uLL);
    v21 = *(unsigned int *)(__sz + 24);
    if (v21 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v21 + 1, 8);
      LODWORD(v21) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v21) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v19];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)__sz = result + 3;
  *result = 0;
  result[1] = v7;
  result[2] = v3;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v10;
  int v11;
  int v12;
  unint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD v17[4];
  _OWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  if ((v4 & 1) == 0)
  {
    v14 = a1;
    v10 = a2;
    a2 = v10;
    v12 = v11;
    a1 = v14;
    if (v12)
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      a1 = v14;
      a2 = v10;
    }
  }
  v5 = (*a1 >> 4) ^ (*a1 >> 9);
  v20 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v17[0] = v5;
  v15 = 0;
  v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v17, (uint64_t *)&v15, (_QWORD *)v17 + 1, (unint64_t)v18, *a2);
  v16 = v15;
  v7 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a3, *(_QWORD *)a3 + *(_QWORD *)(a3 + 8));
  v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v17, (uint64_t *)&v16, v6, (unint64_t)v18, v7);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v17, v16, v8, (char *)v18);
}

_QWORD *mlir::detail::DenseArrayAttrStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  char *buffer;
  uint64_t v20;
  _QWORD *result;

  v3 = *a2;
  v4 = a2[1];
  v6 = (char *)a2[2];
  v5 = a2[3];
  if (!v5)
    goto LABEL_18;
  v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, a2[3], 3);
  if (v5 < 8 || (unint64_t)(v7 - (_QWORD)v6) < 0x20)
  {
    v9 = (_BYTE *)v7;
    v10 = v6;
  }
  else
  {
    if (v5 < 0x20)
    {
      v8 = 0;
      goto LABEL_11;
    }
    v11 = 0;
    v8 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v12 = (_OWORD *)(v7 + v11);
      v13 = *(_OWORD *)&v6[v11 + 16];
      *v12 = *(_OWORD *)&v6[v11];
      v12[1] = v13;
      v11 += 32;
    }
    while (v8 != v11);
    if (v5 == v8)
      goto LABEL_17;
    if ((v5 & 0x18) != 0)
    {
LABEL_11:
      v14 = v5 & 0xFFFFFFFFFFFFFFF8;
      v9 = (_BYTE *)(v7 + (v5 & 0xFFFFFFFFFFFFFFF8));
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        *(_QWORD *)(v7 + v8) = *(_QWORD *)&v6[v8];
        v8 += 8;
      }
      while (v14 != v8);
      if (v5 == v14)
        goto LABEL_17;
      goto LABEL_16;
    }
    v10 = &v6[v8];
    v9 = (_BYTE *)(v7 + v8);
  }
  do
  {
LABEL_16:
    v15 = *v10++;
    *v9++ = v15;
  }
  while (v10 != &v6[v5]);
LABEL_17:
  v6 = (char *)v7;
LABEL_18:
  *(_QWORD *)(__sz + 80) += 40;
  if (*(_QWORD *)__sz)
    v16 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 40 > *(_QWORD *)(__sz + 8)
                                                                                  - *(_QWORD *)__sz;
  else
    v16 = 1;
  if (v16)
  {
    v17 = *(_DWORD *)(__sz + 24) >> 7;
    if (v17 >= 0x1E)
      LOBYTE(v17) = 30;
    v18 = 4096 << v17;
    buffer = (char *)llvm::allocate_buffer(4096 << v17, (std::align_val_t)8uLL);
    v20 = *(unsigned int *)(__sz + 24);
    if (v20 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v20 + 1, 8);
      LODWORD(v20) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v20) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v18];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)__sz = result + 5;
  *result = 0;
  result[1] = v3;
  result[2] = v4;
  result[3] = v6;
  result[4] = v5;
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  size_t v3;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)*a1
    && *(_QWORD *)(a2 + 16) == v2[1]
    && (v3 = *(_QWORD *)(a2 + 32), v3 == v2[3]))
  {
    return memcmp(*(const void **)(a2 + 24), (const void *)v2[2], v3) == 0;
  }
  else
  {
    return 0;
  }
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::DenseArrayAttrStorage::construct(__sz, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeERjRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  uint64_t *v9;
  unsigned __int8 v10;
  unsigned int v11;
  int v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD v16[8];
  uint64_t v17;
  _QWORD v18[2];
  __int128 v19;
  _OWORD v20[3];
  char v21[48];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v18[0] = a2;
  v18[1] = a3;
  mlir::detail::DenseStringElementsAttrStorage::getKey(*(_QWORD *)a5, *(_QWORD *)(a5 + 8), *(const void ***)a6, *(_QWORD *)(a6 + 8), *a7, (uint64_t)v16);
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v19 = 0u;
  memset(v20, 0, sizeof(v20));
  v9 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v9 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v13)
    {
      v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v14 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      v9 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v23 = v9[19];
  *(_QWORD *)&v19 = (v16[0] >> 4) ^ (v16[0] >> 9);
  *((_QWORD *)&v19 + 1) = v17;
  v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v19, 0, (char *)v20, v21);
  v15 = v16;
  *(_QWORD *)&v19 = v16;
  *((_QWORD *)&v19 + 1) = v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseStringElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(llvm::function_ref<void ()(mlir::detail::DenseStringElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseStringElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(llvm::function_ref<void ()(mlir::detail::DenseStringElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v19);
}

unint64_t mlir::detail::DenseStringElementsAttrStorage::getKey@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v8;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  uint64_t v16[2];
  unint64_t v17;

  v8 = result;
  if (a4)
  {
    if (a5)
    {
      result = llvm::hash_value(*a3, (uint64_t)a3[1]);
      *(_QWORD *)a6 = v8;
      *(_QWORD *)(a6 + 8) = a2;
      *(_QWORD *)(a6 + 16) = a3;
      *(_QWORD *)(a6 + 24) = a4;
      *(_QWORD *)(a6 + 32) = result;
      *(_BYTE *)(a6 + 40) = 1;
      return result;
    }
    result = llvm::hash_value(*a3, (uint64_t)a3[1]);
    v11 = result;
    v17 = result;
    if (a4 == 1)
    {
LABEL_6:
      *(_QWORD *)a6 = v8;
      *(_QWORD *)(a6 + 8) = a2;
      *(_QWORD *)(a6 + 16) = a3;
      *(_QWORD *)(a6 + 24) = 1;
      *(_QWORD *)(a6 + 32) = v11;
      *(_BYTE *)(a6 + 40) = 1;
      return result;
    }
    v12 = (size_t)a3[1];
    v13 = 1;
    v14 = 3;
    while (1)
    {
      v15 = &a3[v14];
      if ((const void *)v12 != a3[v14])
        break;
      if (v12)
      {
        result = memcmp(*a3, *(v15 - 1), v12);
        if ((_DWORD)result)
          break;
      }
      ++v13;
      v14 += 2;
      if (a4 == v13)
        goto LABEL_6;
    }
    v16[0] = (uint64_t)(v15 - 1);
    v16[1] = a4 - v13;
    result = llvm::hash_combine<llvm::hash_code,llvm::ArrayRef<llvm::StringRef>>(&v17, v16);
    *(_QWORD *)a6 = v8;
    *(_QWORD *)(a6 + 8) = a2;
    *(_QWORD *)(a6 + 16) = a3;
    *(_QWORD *)(a6 + 24) = a4;
    *(_QWORD *)(a6 + 32) = result;
  }
  else
  {
    *(_QWORD *)a6 = result;
    *(_QWORD *)(a6 + 8) = a2;
    *(_QWORD *)(a6 + 24) = 0;
    *(_QWORD *)(a6 + 32) = 0;
    *(_QWORD *)(a6 + 16) = a3;
  }
  *(_BYTE *)(a6 + 40) = 0;
  return result;
}

unint64_t llvm::hash_combine<llvm::hash_code,llvm::ArrayRef<llvm::StringRef>>(_QWORD *a1, uint64_t *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t *v7;
  int v8;
  int v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _OWORD v13[4];
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  if ((v2 & 1) == 0)
  {
    v11 = a1;
    v7 = a2;
    a2 = v7;
    v9 = v8;
    a1 = v11;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a1 = v11;
      a2 = v7;
    }
  }
  v3 = *a1;
  v16 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v12 = 0;
  *(_QWORD *)&v13[0] = v3;
  v4 = llvm::hashing::detail::hash_combine_range_impl<llvm::StringRef const*>(*a2, *a2 + 16 * a2[1]);
  v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v13, (uint64_t *)&v12, (_QWORD *)v13 + 1, (unint64_t)v14, v4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v13, v12, v5, (char *)v14);
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<llvm::StringRef const*>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  char v66;
  uint64_t v68;
  unint64_t *v69;
  char v70;
  char v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t *v74;
  char *v75;
  BOOL v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  {
    v90 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v90 = 0xFF51AFD7ED558CCDLL;
    llvm::hashing::detail::get_execution_seed(void)::seed = v90;
  }
  v5 = llvm::hashing::detail::get_execution_seed(void)::seed;
  if (a1 == a2)
  {
    v84 = 0;
  }
  else
  {
    v6 = llvm::hash_value(*(_QWORD **)a1, *(_QWORD *)(a1 + 8));
    v96 = v6;
    if (a1 + 16 == a2)
    {
      v84 = 8;
    }
    else
    {
      v7 = v6;
      v8 = llvm::hash_value(*(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 24));
      v97 = v8;
      if (a1 + 32 == a2)
      {
        v84 = 16;
      }
      else
      {
        v9 = v8;
        v10 = llvm::hash_value(*(_QWORD **)(a1 + 32), *(_QWORD *)(a1 + 40));
        v98 = v10;
        if (a1 + 48 == a2)
        {
          v84 = 24;
        }
        else
        {
          v11 = v10;
          v12 = llvm::hash_value(*(_QWORD **)(a1 + 48), *(_QWORD *)(a1 + 56));
          v99 = v12;
          if (a1 + 64 == a2)
          {
            v84 = 32;
          }
          else
          {
            v13 = v12;
            v14 = llvm::hash_value(*(_QWORD **)(a1 + 64), *(_QWORD *)(a1 + 72));
            v100 = v14;
            if (a1 + 80 == a2)
            {
              v84 = 40;
            }
            else
            {
              v15 = v14;
              v16 = llvm::hash_value(*(_QWORD **)(a1 + 80), *(_QWORD *)(a1 + 88));
              v101 = v16;
              if (a1 + 96 == a2)
              {
                v84 = 48;
              }
              else
              {
                v17 = v16;
                v18 = llvm::hash_value(*(_QWORD **)(a1 + 96), *(_QWORD *)(a1 + 104));
                v102 = v18;
                if (a1 + 112 == a2)
                {
                  v84 = 56;
                }
                else
                {
                  v94 = v18;
                  v19 = llvm::hash_value(*(_QWORD **)(a1 + 112), *(_QWORD *)(a1 + 120));
                  v103 = v19;
                  v20 = a1 + 128;
                  if (a1 + 128 != a2)
                  {
                    v92 = v19;
                    llvm::hash_value(*(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136));
                    v21 = v5 ^ (v5 >> 47);
                    v22 = 0x9DDFEA08EB382D69
                        * (v5 ^ (((0x9DDFEA08EB382D69 * (v21 ^ (0xB492B66FBE98F273 * v5))) ^ v5) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ (0xB492B66FBE98F273 * v5))));
                    v23 = 0x9DDFEA08EB382D69
                        * ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                                  * (v5 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
                    v24 = __ROR8__(v21 - 0x622015F714C7D297 * (v23 ^ (v23 >> 47)), 33);
                    v25 = 0x9DDFEA08EB382D69 * (v22 ^ (v22 >> 47));
                    v26 = v13;
                    v27 = 0xB492B66FBE98F273 * v24;
                    v28 = v25 + v15 - 0x4B6D499041670D8DLL * v24;
                    v29 = v17 + v94 + v28 + v92;
                    v30 = __ROR8__(v5 ^ 0xB492B66FBE98F273, 49);
                    v31 = v17 + v30 - 0x4B6D499041670D8DLL * __ROR8__(v94 + v5 - 0x4B6D499041670D8DLL * v5, 42);
                    v32 = __ROR8__(v17 + v94 + v28, 44) + v28 + __ROR8__(v31 + v11 + v92 + v28, 21);
                    v33 = v7 - 0x6D8ED9027DD26057 * v5;
                    v34 = v33 + v9 + v11 + v26;
                    v35 = (0xB492B66FBE98F273 * __ROR8__(v30 + v5 + v9, 37)) ^ v25;
                    v36 = __ROR8__(v33 + v9 + v11, 44) + v33 + __ROR8__(v35 + v21 + v33 + v26, 21);
                    v91 = ~(unint64_t)&v96;
                    v37 = 64;
                    while (1)
                    {
                      v93 = v35;
                      v95 = v32;
                      v96 = llvm::hash_value(*(_QWORD **)v20, *(_QWORD *)(v20 + 8));
                      if (v20 + 16 == a2)
                      {
                        v40 = 8;
                        v41 = &v97;
                      }
                      else
                      {
                        v97 = llvm::hash_value(*(_QWORD **)(v20 + 16), *(_QWORD *)(v20 + 24));
                        if (v20 + 32 == a2)
                        {
                          v40 = 16;
                          v41 = &v98;
                        }
                        else
                        {
                          v98 = llvm::hash_value(*(_QWORD **)(v20 + 32), *(_QWORD *)(v20 + 40));
                          if (v20 + 48 == a2)
                          {
                            v40 = 24;
                            v41 = &v99;
                          }
                          else
                          {
                            v99 = llvm::hash_value(*(_QWORD **)(v20 + 48), *(_QWORD *)(v20 + 56));
                            if (v20 + 64 == a2)
                            {
                              v40 = 32;
                              v41 = &v100;
                            }
                            else
                            {
                              v100 = llvm::hash_value(*(_QWORD **)(v20 + 64), *(_QWORD *)(v20 + 72));
                              if (v20 + 80 == a2)
                              {
                                v40 = 40;
                                v41 = &v101;
                              }
                              else
                              {
                                v101 = llvm::hash_value(*(_QWORD **)(v20 + 80), *(_QWORD *)(v20 + 88));
                                if (v20 + 96 == a2)
                                {
                                  v40 = 48;
                                  v41 = &v102;
                                }
                                else
                                {
                                  v102 = llvm::hash_value(*(_QWORD **)(v20 + 96), *(_QWORD *)(v20 + 104));
                                  if (v20 + 112 != a2)
                                  {
                                    v103 = llvm::hash_value(*(_QWORD **)(v20 + 112), *(_QWORD *)(v20 + 120));
                                    if (v20 + 128 == a2)
                                    {
                                      v20 = a2;
                                    }
                                    else
                                    {
                                      v38 = *(_QWORD **)(v20 + 128);
                                      v39 = *(_QWORD *)(v20 + 136);
                                      v20 += 128;
                                      llvm::hash_value(v38, v39);
                                    }
                                    v40 = 64;
                                    goto LABEL_55;
                                  }
                                  v40 = 56;
                                  v41 = &v103;
                                }
                              }
                            }
                          }
                        }
                      }
                      v42 = 64 - v40;
                      v43 = v40;
                      if (v40 != 64 - v40)
                      {
                        do
                        {
                          v68 = v43;
                          v43 = v42;
                          v42 = v68 % v42;
                        }
                        while (v42);
                        v69 = (unint64_t *)((char *)&v96 + v43);
                        do
                        {
                          v71 = *((_BYTE *)v69 - 1);
                          v69 = (unint64_t *)((char *)v69 - 1);
                          v70 = v71;
                          v72 = &v69[(unint64_t)v40 / 8];
                          v73 = v69;
                          do
                          {
                            v74 = v73;
                            v73 = v72;
                            *(_BYTE *)v74 = *(_BYTE *)v72;
                            v75 = (char *)((char *)&v104 - (char *)v72);
                            v76 = __OFSUB__(v40, v75);
                            v78 = v40 - (_QWORD)v75;
                            v77 = (v78 < 0) ^ v76;
                            v72 = (unint64_t *)((char *)&v96 + v78);
                            if (v77)
                              v72 = &v73[(unint64_t)v40 / 8];
                          }
                          while (v72 != v69);
                          *(_BYTE *)v73 = v70;
                        }
                        while (v69 != &v96);
                        goto LABEL_54;
                      }
                      if ((unint64_t)v41 + v91 >= (v40 ^ 0x3FuLL))
                        v44 = v40 ^ 0x3F;
                      else
                        v44 = (unint64_t)v41 + v91;
                      v45 = &v96;
                      v46 = v40;
                      if (v44 >= 0xF)
                      {
                        if (&v96 >= (unint64_t *)((char *)&v96 + v40 + v44 + 1)
                          || (v46 = v40, (char *)&v96 + v40 >= (char *)&v96 + v44 + 1))
                        {
                          v47 = v44 + 1;
                          v48 = (v44 + 1) & 0x70;
                          v49 = (unint64_t *)((char *)&v96 + v40);
                          v50 = v96;
                          v51 = v97;
                          v52 = *(unint64_t *)((char *)&v96 + v40 + 8);
                          v96 = *(unint64_t *)((char *)&v96 + v40);
                          v97 = v52;
                          *v49 = v50;
                          v49[1] = v51;
                          if (v48 != 16)
                          {
                            v53 = (unint64_t *)((char *)&v98 + v40);
                            v54 = v98;
                            v55 = v99;
                            v56 = *(unint64_t *)((char *)&v98 + v40 + 8);
                            v98 = *(unint64_t *)((char *)&v98 + v40);
                            v99 = v56;
                            *v53 = v54;
                            v53[1] = v55;
                            if (v48 != 32)
                            {
                              v57 = (unint64_t *)((char *)&v100 + v40);
                              v58 = v100;
                              v59 = v101;
                              v60 = *(unint64_t *)((char *)&v100 + v40 + 8);
                              v100 = *(unint64_t *)((char *)&v100 + v40);
                              v101 = v60;
                              *v57 = v58;
                              v57[1] = v59;
                              if (v48 != 48)
                              {
                                v61 = (unint64_t *)((char *)&v102 + v40);
                                v62 = v102;
                                v63 = v103;
                                v64 = *(unint64_t *)((char *)&v102 + v40 + 8);
                                v102 = *(unint64_t *)((char *)&v102 + v40);
                                v103 = v64;
                                *v61 = v62;
                                v61[1] = v63;
                              }
                            }
                          }
                          if (v47 == v48)
                            goto LABEL_54;
                          v46 = v40 + v48;
                          v45 = (unint64_t *)((char *)&v96 + v48);
                        }
                      }
                      v65 = (unint64_t *)((char *)v45 + 1);
                      do
                      {
                        v66 = *((_BYTE *)v65 - 1);
                        *((_BYTE *)v65 - 1) = *((_BYTE *)&v96 + v46);
                        *((_BYTE *)&v96 + v46) = v66;
                        if (v65 == v41)
                          break;
                        v65 = (unint64_t *)((char *)v65 + 1);
                      }
                      while (v46++ != 63);
LABEL_54:
                      v20 = a2;
LABEL_55:
                      v79 = v31 + v34 + v27 + v97;
                      v31 = v101 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v31 + v36 + v102, 42);
                      v80 = v96 - 0x4B6D499041670D8DLL * v36;
                      v81 = (0xB492B66FBE98F273 * __ROR8__(v79, 37)) ^ v95;
                      v82 = __ROR8__(v93 + v29, 33);
                      v36 = __ROR8__(v80 + v97 + v98, 44) + v80 + __ROR8__(v81 + v29 + v80 + v99, 21);
                      v27 = 0xB492B66FBE98F273 * v82;
                      v34 = v80 + v97 + v98 + v99;
                      v83 = 0xB492B66FBE98F273 * v82 + v95 + v100;
                      v32 = __ROR8__(v31 + v98 + v83 + v103, 21) + v83 + __ROR8__(v101 + v102 + v83, 44);
                      v29 = v101 + v102 + v83 + v103;
                      v37 += v40;
                      v35 = v81;
                      if (v20 == a2)
                      {
                        v85 = 0x9DDFEA08EB382D69
                            * (v29 ^ ((0x9DDFEA08EB382D69 * (v34 ^ v29)) >> 47) ^ (0x9DDFEA08EB382D69 * (v34 ^ v29)));
                        v86 = v81
                            - 0x4B6D499041670D8DLL * (v31 ^ (v31 >> 47))
                            - 0x622015F714C7D297 * (v85 ^ (v85 >> 47));
                        v87 = 0x9DDFEA08EB382D69
                            * (v32 ^ ((0x9DDFEA08EB382D69 * (v36 ^ v32)) >> 47) ^ (0x9DDFEA08EB382D69 * (v36 ^ v32)));
                        v88 = 0x9DDFEA08EB382D69 * (v87 ^ (v87 >> 47))
                            - 0x4B6D499041670D8DLL * ((v37 ^ (v37 >> 47)) + v82);
                        return 0x9DDFEA08EB382D69
                             * ((0x9DDFEA08EB382D69
                               * (v88 ^ ((0x9DDFEA08EB382D69 * (v88 ^ v86)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                      * (v88 ^ v86)))) ^ ((0x9DDFEA08EB382D69 * (v88 ^ ((0x9DDFEA08EB382D69 * (v88 ^ v86)) >> 47) ^ (0x9DDFEA08EB382D69 * (v88 ^ v86)))) >> 47));
                      }
                    }
                  }
                  v84 = 64;
                }
              }
            }
          }
        }
      }
    }
  }
  return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v96, v84, v5);
}

uint64_t llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseStringElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(llvm::function_ref<void ()(mlir::detail::DenseStringElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)*a1 != a2[1])
    return 0;
  v3 = v2[3];
  if (v3 != a2[5])
    return 0;
  if (v3)
  {
    v4 = v2[2];
    v5 = a2[4];
    v6 = v4 + 16 * v3;
    while (1)
    {
      v7 = *(_QWORD *)(v4 + 8);
      if (v7 != *(_QWORD *)(v5 + 8) || v7 && memcmp(*(const void **)v4, *(const void **)v5, v7))
        break;
      v4 += 16;
      v5 += 16;
      if (v4 == v6)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseStringElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(llvm::function_ref<void ()(mlir::detail::DenseStringElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(__n128 **a1, size_t a2)
{
  __n128 v3;
  __n128 v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 *v8;
  __n128 v10[3];

  v3 = **a1;
  v4 = (*a1)[2];
  v10[1] = (*a1)[1];
  v10[2] = v4;
  v10[0] = v3;
  v6 = mlir::detail::DenseStringElementsAttrStorage::construct(a2, v10);
  v7 = v5;
  v8 = a1[1];
  if (v8->n128_u64[0])
    ((void (*)(unint64_t, uint64_t, __n128))v8->n128_u64[0])(v8->n128_u64[1], v5, v6);
  return v7;
}

__n128 mlir::detail::DenseStringElementsAttrStorage::construct(size_t __sz, __n128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  int64x2_t v19;
  const double *v20;
  uint64_t v21;
  const double *v22;
  unsigned __int128 v23;
  unsigned __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  char *buffer;
  uint64_t v38;
  unsigned __int8 v39;
  __n128 result;
  unint64_t v41;
  unsigned __int8 v42;

  v4 = a2[1].n128_u64[1];
  if (v4)
  {
    if (a2[2].n128_u8[8])
      LODWORD(v4) = 1;
    v5 = (int)v4;
    v6 = 16 * (int)v4;
    if ((int)v4 <= 0)
    {
      v16 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 16 * (int)v4, 3);
    }
    else
    {
      v7 = a2[1].n128_u64[0];
      v8 = v4;
      if (v4 >= 5)
      {
        v17 = v4 & 3;
        if ((v5 & 3) == 0)
          v17 = 4;
        v9 = v8 - v17;
        v18 = 0uLL;
        v19 = (int64x2_t)(unint64_t)v6;
        v20 = (const double *)(v7 + 40);
        v21 = v9;
        do
        {
          v22 = v20 - 4;
          v23 = (unsigned __int128)vld2q_f64(v22);
          v24 = (unsigned __int128)vld2q_f64(v20);
          v19 = vaddq_s64((int64x2_t)v23, v19);
          v18 = vaddq_s64((int64x2_t)v24, v18);
          v20 += 8;
          v21 -= 4;
        }
        while (v21);
        v10 = vaddvq_s64(vaddq_s64(v18, v19));
      }
      else
      {
        v9 = 0;
        v10 = v6;
      }
      v25 = (uint64_t *)(v7 + 16 * v9 + 8);
      v26 = v8 - v9;
      do
      {
        v27 = *v25;
        v25 += 2;
        v10 += v27;
        --v26;
      }
      while (v26);
      v16 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, v10, 3);
      v28 = 0;
      v29 = (char *)(v16 + v6);
      v30 = 16 * v8;
      do
      {
        memcpy(v29, *(const void **)(v7 + v28), *(_QWORD *)(v7 + v28 + 8));
        v31 = *(_QWORD *)(v7 + v28 + 8);
        v32 = (_QWORD *)(v16 + v28);
        *v32 = v29;
        v32[1] = v31;
        v29 += *(_QWORD *)(v7 + v28 + 8);
        v28 += 16;
      }
      while (v30 != v28);
    }
    *(_QWORD *)(__sz + 80) += 48;
    v33 = *(_QWORD *)__sz;
    if (*(_QWORD *)__sz && ((v33 + 7) & 0xFFFFFFFFFFFFFFF8) - v33 + 48 <= *(_QWORD *)(__sz + 8) - v33)
    {
      v34 = (v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v35 = *(_DWORD *)(__sz + 24) >> 7;
      if (v35 >= 0x1E)
        LOBYTE(v35) = 30;
      v36 = 4096 << v35;
      buffer = (char *)llvm::allocate_buffer(4096 << v35, (std::align_val_t)8uLL);
      v38 = *(unsigned int *)(__sz + 24);
      if (v38 >= *(_DWORD *)(__sz + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v38 + 1, 8);
        LODWORD(v38) = *(_DWORD *)(__sz + 24);
      }
      *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v38) = buffer;
      ++*(_DWORD *)(__sz + 24);
      *(_QWORD *)(__sz + 8) = &buffer[v36];
      v34 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)__sz = v34 + 48;
    v39 = a2[2].n128_u8[8];
    result = *a2;
    *(_QWORD *)v34 = 0;
    *(__n128 *)(v34 + 8) = result;
    *(_BYTE *)(v34 + 24) = v39;
    *(_QWORD *)(v34 + 32) = v16;
    *(_QWORD *)(v34 + 40) = v5;
  }
  else
  {
    *(_QWORD *)(__sz + 80) += 48;
    if (*(_QWORD *)__sz)
      v11 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 48 > *(_QWORD *)(__sz + 8)
                                                                                    - *(_QWORD *)__sz;
    else
      v11 = 1;
    if (v11)
    {
      v12 = *(_DWORD *)(__sz + 24) >> 7;
      if (v12 >= 0x1E)
        LOBYTE(v12) = 30;
      v13 = 4096 << v12;
      v14 = (char *)llvm::allocate_buffer(4096 << v12, (std::align_val_t)8uLL);
      v15 = *(unsigned int *)(__sz + 24);
      if (v15 >= *(_DWORD *)(__sz + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v15 + 1, 8);
        LODWORD(v15) = *(_DWORD *)(__sz + 24);
      }
      *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v15) = v14;
      ++*(_DWORD *)(__sz + 24);
      *(_QWORD *)(__sz + 8) = &v14[v13];
      v41 = (unint64_t)(v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v41 = (*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)__sz = v41 + 48;
    v42 = a2[2].n128_u8[8];
    result = *a2;
    *(_QWORD *)v41 = 0;
    *(__n128 *)(v41 + 8) = result;
    *(_BYTE *)(v41 + 24) = v42;
    *(_QWORD *)(v41 + 32) = 0;
    *(_QWORD *)(v41 + 40) = 0;
  }
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail30DenseStringElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_23DenseStringElementsAttrEJRNS1_10ShapedTypeERNS_8ArrayRefINS_9StringRefEEEbEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  const llvm::detail::DoubleAPFloat *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  uint64_t ParametricStorageTypeImpl;
  _QWORD v14[2];
  uint64_t *v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v16[0] = a2;
  v16[1] = a3;
  v17 = *a5;
  v8 = (const llvm::detail::DoubleAPFloat *)(a6 + 8);
  v9 = *(void **)(a6 + 8);
  v10 = llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v10 == v9)
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19, v8);
  else
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v19, v8);
  v11 = llvm::hash_combine<mlir::Type,llvm::APFloat>(&v17, (llvm *)&v18);
  v14[0] = &v17;
  v14[1] = v16;
  v15 = &v17;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl((unsigned __int8 **)a1, a4, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat const&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat const&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v14);
  if (v10 == (void *)v19[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
  return ParametricStorageTypeImpl;
}

unint64_t llvm::hash_combine<mlir::Type,llvm::APFloat>(_DWORD *a1, llvm *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  llvm *v7;
  int v8;
  int v9;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  _OWORD v13[4];
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  if ((v2 & 1) == 0)
  {
    v11 = a1;
    v7 = this;
    this = v7;
    v9 = v8;
    a1 = v11;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a1 = v11;
      this = v7;
    }
  }
  v3 = (*a1 >> 4) ^ (*a1 >> 9);
  v16 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v12 = 0;
  *(_QWORD *)&v13[0] = v3;
  v4 = llvm::hash_value(this, this);
  v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v13, (uint64_t *)&v12, (_QWORD *)v13 + 1, (unint64_t)v14, v4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v13, v12, v5, (char *)v14);
}

uint64_t llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat const&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(llvm::APFloatBase *a1, uint64_t a2)
{
  _QWORD *v2;
  llvm::detail::DoubleAPFloat *v3;
  void *v4;
  const llvm::detail::DoubleAPFloat *v5;
  void *v6;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)(a2 + 8) != **(_QWORD **)a1)
    return 0;
  v3 = (llvm::detail::DoubleAPFloat *)(a2 + 24);
  v4 = *(void **)(a2 + 24);
  v6 = (void *)v2[2];
  v5 = (const llvm::detail::DoubleAPFloat *)(v2 + 2);
  if (v4 != v6)
    return 0;
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v4)
    return llvm::detail::DoubleAPFloat::bitwiseIsEqual(v3, v5);
  return llvm::detail::IEEEFloat::bitwiseIsEqual(v3, v5);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat const&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::FloatAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::detail::FloatAttrStorage::construct(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  char *buffer;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v15[3];
  _QWORD v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = a2 + 2;
  v5 = (void *)a2[2];
  v6 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v6 == v5)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v16, v4);
    a1[10] += 48;
    v7 = *a1;
    if (!*a1)
      goto LABEL_7;
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v16, (uint64_t)v4);
    a1[10] += 48;
    v7 = *a1;
    if (!*a1)
      goto LABEL_7;
  }
  if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 48 <= a1[1] - v7)
  {
    v8 = (_QWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_12;
  }
LABEL_7:
  v9 = *((_DWORD *)a1 + 6) >> 7;
  if (v9 >= 0x1E)
    LOBYTE(v9) = 30;
  v10 = 4096 << v9;
  buffer = (char *)llvm::allocate_buffer(4096 << v9, (std::align_val_t)8uLL);
  v12 = *((unsigned int *)a1 + 6);
  if (v12 >= *((_DWORD *)a1 + 7))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 2), a1 + 4, v12 + 1, 8);
    LODWORD(v12) = *((_DWORD *)a1 + 6);
  }
  *(_QWORD *)(a1[2] + 8 * v12) = buffer;
  ++*((_DWORD *)a1 + 6);
  a1[1] = (uint64_t)&buffer[v10];
  v8 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
LABEL_12:
  *a1 = (uint64_t)(v8 + 6);
  if (v6 == (void *)v16[0])
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v15, v16);
    *v8 = 0;
    v8[1] = v3;
    v13 = v8 + 3;
    if (v6 != (void *)v15[0])
    {
LABEL_14:
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v13, (uint64_t)v15);
      if (v6 != (void *)v15[0])
        goto LABEL_15;
LABEL_20:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v15);
      if (v6 != (void *)v16[0])
        goto LABEL_16;
LABEL_21:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v16);
      return v8;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v15, (uint64_t)v16);
    *v8 = 0;
    v8[1] = v3;
    v13 = v8 + 3;
    if (v6 != (void *)v15[0])
      goto LABEL_14;
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v13, v15);
  if (v6 == (void *)v15[0])
    goto LABEL_20;
LABEL_15:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v15);
  if (v6 == (void *)v16[0])
    goto LABEL_21;
LABEL_16:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v16);
  return v8;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  const llvm::detail::DoubleAPFloat *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  uint64_t ParametricStorageTypeImpl;
  _QWORD v14[2];
  uint64_t *v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v16[0] = a2;
  v16[1] = a3;
  v17 = *a5;
  v8 = (const llvm::detail::DoubleAPFloat *)(a6 + 8);
  v9 = *(void **)(a6 + 8);
  v10 = llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v10 == v9)
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19, v8);
  else
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v19, v8);
  v11 = llvm::hash_combine<mlir::Type,llvm::APFloat>(&v17, (llvm *)&v18);
  v14[0] = &v17;
  v14[1] = v16;
  v15 = &v17;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl((unsigned __int8 **)a1, a4, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v14);
  if (v10 == (void *)v19[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
  return ParametricStorageTypeImpl;
}

uint64_t llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(llvm::APFloatBase *a1, uint64_t a2)
{
  _QWORD *v2;
  llvm::detail::DoubleAPFloat *v3;
  void *v4;
  const llvm::detail::DoubleAPFloat *v5;
  void *v6;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)(a2 + 8) != **(_QWORD **)a1)
    return 0;
  v3 = (llvm::detail::DoubleAPFloat *)(a2 + 24);
  v4 = *(void **)(a2 + 24);
  v6 = (void *)v2[2];
  v5 = (const llvm::detail::DoubleAPFloat *)(v2 + 2);
  if (v4 != v6)
    return 0;
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v4)
    return llvm::detail::DoubleAPFloat::bitwiseIsEqual(v3, v5);
  return llvm::detail::IEEEFloat::bitwiseIsEqual(v3, v5);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::FloatAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  _QWORD *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  uint64_t ParametricStorageTypeImpl;
  _QWORD v14[2];
  uint64_t *v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v16[0] = a2;
  v16[1] = a3;
  v17 = *a5;
  v8 = (_QWORD *)(a6 + 8);
  v9 = *(void **)(a6 + 8);
  v10 = llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v10 == v9)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v19, v8);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v19, (uint64_t)v8);
  v11 = llvm::hash_combine<mlir::Type,llvm::APFloat>(&v17, (llvm *)&v18);
  v14[0] = &v17;
  v14[1] = v16;
  v15 = &v17;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl((unsigned __int8 **)a1, a4, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v14);
  if (v10 == (void *)v19[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
  return ParametricStorageTypeImpl;
}

uint64_t llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(llvm::APFloatBase *a1, uint64_t a2)
{
  _QWORD *v2;
  llvm::detail::DoubleAPFloat *v3;
  void *v4;
  const llvm::detail::DoubleAPFloat *v5;
  void *v6;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)(a2 + 8) != **(_QWORD **)a1)
    return 0;
  v3 = (llvm::detail::DoubleAPFloat *)(a2 + 24);
  v4 = *(void **)(a2 + 24);
  v6 = (void *)v2[2];
  v5 = (const llvm::detail::DoubleAPFloat *)(v2 + 2);
  if (v4 != v6)
    return 0;
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v4)
    return llvm::detail::DoubleAPFloat::bitwiseIsEqual(v3, v5);
  return llvm::detail::IEEEFloat::bitwiseIsEqual(v3, v5);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::FloatAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeENS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(mlir::MLIRContext *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned __int8 **AttributeUniquer;
  unsigned int v9;
  uint64_t ParametricStorageTypeImpl;
  _QWORD v12[2];
  _QWORD v13[2];
  uint64_t *v14;
  uint64_t v15;
  void *__p;
  unsigned int v17;
  _QWORD v18[2];

  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v12[0] = a2;
  v12[1] = a1;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_4TypeERKNS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v18[1] = v12;
  v15 = *a3;
  v17 = *(_DWORD *)(a4 + 8);
  if (v17 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)a4);
  else
    __p = *(void **)a4;
  v9 = llvm::hash_combine<mlir::Type,llvm::APInt>(&v15, (llvm *)&__p);
  v13[0] = &v15;
  v13[1] = v18;
  v14 = &v15;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, a2, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt const&>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt const&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt const&>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt const&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v13);
  if (v17 >= 0x41 && __p)
    operator delete[](__p);
  return ParametricStorageTypeImpl;
}

unint64_t llvm::hash_combine<mlir::Type,llvm::APInt>(_DWORD *a1, llvm *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  llvm *v7;
  int v8;
  int v9;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  _OWORD v13[4];
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  if ((v2 & 1) == 0)
  {
    v11 = a1;
    v7 = this;
    this = v7;
    v9 = v8;
    a1 = v11;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a1 = v11;
      this = v7;
    }
  }
  v3 = (*a1 >> 4) ^ (*a1 >> 9);
  v16 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v12 = 0;
  *(_QWORD *)&v13[0] = v3;
  v4 = llvm::hash_value(this, this);
  v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v13, (uint64_t *)&v12, (_QWORD *)v13 + 1, (unint64_t)v14, v4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v13, v12, v5, (char *)v14);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt const&>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt const&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  const void **v4;
  const void **v5;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)*a1)
    return 0;
  v4 = (const void **)(a2 + 16);
  v5 = (const void **)(v2 + 1);
  if (*(_DWORD *)(a2 + 24) > 0x40u)
    return llvm::APInt::equalSlowCase(v4, v5);
  else
    return *v4 == *v5;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt const&>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt const&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = mlir::detail::IntegerAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, unint64_t))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

unint64_t mlir::detail::IntegerAttrStorage::construct(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  char *buffer;
  uint64_t v10;
  unint64_t result;

  v3 = *((_DWORD *)a2 + 4);
  v5 = *a2;
  v4 = a2[1];
  *((_DWORD *)a2 + 4) = 0;
  *(_QWORD *)(a1 + 80) += 32;
  if (*(_QWORD *)a1)
    v6 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 32 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v6 = 1;
  if (v6)
  {
    v7 = *(_DWORD *)(a1 + 24) >> 7;
    if (v7 >= 0x1E)
      LOBYTE(v7) = 30;
    v8 = 4096 << v7;
    buffer = (char *)llvm::allocate_buffer(4096 << v7, (std::align_val_t)8uLL);
    v10 = *(unsigned int *)(a1 + 24);
    if (v10 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v8];
    result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    result = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = result + 32;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = v5;
  *(_DWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 16) = v4;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_4TypeERKNS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt &>(mlir::MLIRContext *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned __int8 **AttributeUniquer;
  unsigned int v9;
  uint64_t ParametricStorageTypeImpl;
  _QWORD v12[2];
  _QWORD v13[2];
  uint64_t *v14;
  uint64_t v15;
  void *__p;
  unsigned int v17;
  _QWORD v18[2];

  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v12[0] = a2;
  v12[1] = a1;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_4TypeERNS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v18[1] = v12;
  v15 = *a3;
  v17 = *(_DWORD *)(a4 + 8);
  if (v17 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)a4);
  else
    __p = *(void **)a4;
  v9 = llvm::hash_combine<mlir::Type,llvm::APInt>(&v15, (llvm *)&__p);
  v13[0] = &v15;
  v13[1] = v18;
  v14 = &v15;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, a2, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt &>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt &>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v13);
  if (v17 >= 0x41 && __p)
    operator delete[](__p);
  return ParametricStorageTypeImpl;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt &>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  const void **v4;
  const void **v5;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)*a1)
    return 0;
  v4 = (const void **)(a2 + 16);
  v5 = (const void **)(v2 + 1);
  if (*(_DWORD *)(a2 + 24) > 0x40u)
    return llvm::APInt::equalSlowCase(v4, v5);
  else
    return *v4 == *v5;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt &>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = mlir::detail::IntegerAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, unint64_t))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_4TypeERNS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  unsigned __int8 v7;
  uint64_t *v8;
  unsigned int v9;
  int v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  _OWORD v16[4];
  _OWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15[0] = a2;
  v15[1] = a3;
  v14 = *a5;
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v11)
    {
      v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v12 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v19 = v8[19];
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::AffineMap>((llvm::hashing::detail::hash_combine_recursive_helper *)v16, 0, v16, (char *)v17, &v14);
  v13 = &v14;
  *(_QWORD *)&v16[0] = &v14;
  *((_QWORD *)&v16[0] + 1) = v15;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerSetAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(llvm::function_ref<void ()(mlir::detail::IntegerSetAttrStorage *)>,mlir::TypeID,mlir::IntegerSet &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerSetAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(llvm::function_ref<void ()(mlir::detail::IntegerSetAttrStorage *)>,mlir::TypeID,mlir::IntegerSet &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerSetAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(llvm::function_ref<void ()(mlir::detail::IntegerSetAttrStorage *)>,mlir::TypeID,mlir::IntegerSet &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **a1;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerSetAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(llvm::function_ref<void ()(mlir::detail::IntegerSetAttrStorage *)>,mlir::TypeID,mlir::IntegerSet &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  char *buffer;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  void (*v14)(uint64_t, _QWORD *);

  v4 = **a1;
  a2[10] += 16;
  v5 = *a2;
  v6 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (*a2)
    v7 = v6 + 16 > a2[1] - *a2;
  else
    v7 = 1;
  if (v7)
  {
    v8 = *((_DWORD *)a2 + 6) >> 7;
    if (v8 >= 0x1E)
      LOBYTE(v8) = 30;
    v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    v11 = *((unsigned int *)a2 + 6);
    if (v11 >= *((_DWORD *)a2 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), a2 + 4, v11 + 1, 8);
      LODWORD(v11) = *((_DWORD *)a2 + 6);
    }
    *(_QWORD *)(a2[2] + 8 * v11) = buffer;
    ++*((_DWORD *)a2 + 6);
    a2[1] = (uint64_t)&buffer[v9];
    v12 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *a2 = (uint64_t)(v12 + 2);
    *v12 = 0;
    v12[1] = v4;
    v13 = a1[1];
    v14 = (void (*)(uint64_t, _QWORD *))*v13;
    if (*v13)
      goto LABEL_13;
  }
  else
  {
    v12 = (_QWORD *)(v5 + v6);
    *a2 = v5 + v6 + 16;
    *v12 = 0;
    v12[1] = v4;
    v13 = a1[1];
    v14 = (void (*)(uint64_t, _QWORD *))*v13;
    if (*v13)
LABEL_13:
      v14(v13[1], v12);
  }
  return v12;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail21IntegerSetAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14IntegerSetAttrEJRNS1_10IntegerSetEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<mlir::StringAttr,llvm::StringRef,mlir::Type>(_DWORD *a1, uint64_t a2, _DWORD *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD v17[4];
  _OWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  if ((v4 & 1) == 0)
  {
    v14 = a1;
    v10 = a2;
    a2 = v10;
    v12 = v11;
    a1 = v14;
    if (v12)
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      a1 = v14;
      a2 = v10;
    }
  }
  v5 = (*a1 >> 4) ^ (*a1 >> 9);
  v20 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v17[0] = v5;
  v15 = 0;
  v6 = llvm::hash_value(*(_QWORD **)a2, *(_QWORD *)(a2 + 8));
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v17, (uint64_t *)&v15, (_QWORD *)v17 + 1, (unint64_t)v18, v6);
  v16 = v15;
  v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v17, (uint64_t *)&v16, v7, (unint64_t)v18, (*a3 >> 4) ^ (*a3 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v17, v16, v8, (char *)v18);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  size_t v4;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)*a1
    && (v4 = *(_QWORD *)(a2 + 24), v4 == v2[2])
    && (!v4 || !memcmp(*(const void **)(a2 + 16), (const void *)v2[1], v4)))
  {
    return *(_QWORD *)(a2 + 32) == v2[3];
  }
  else
  {
    return 0;
  }
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::OpaqueAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::detail::OpaqueAttrStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  char *buffer;
  uint64_t v25;
  _QWORD *result;

  v3 = *a2;
  v4 = a2[2];
  v5 = a2[3];
  if (!v4)
  {
    v8 = 0;
    goto LABEL_19;
  }
  v6 = a2[1];
  v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, v4 + 1, 0);
  v8 = v7;
  if (v4 < 8)
  {
    v9 = (_BYTE *)v7;
    v10 = (char *)v6;
  }
  else
  {
    v9 = (_BYTE *)v7;
    v10 = (char *)v6;
    if ((unint64_t)(v7 - v6) >= 0x20)
    {
      if (v4 < 0x20)
      {
        v11 = 0;
        goto LABEL_12;
      }
      v11 = v4 & 0xFFFFFFFFFFFFFFE0;
      v12 = (__int128 *)(v6 + 16);
      v13 = (_OWORD *)(v7 + 16);
      v14 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 32;
      }
      while (v14);
      if (v4 == v11)
        goto LABEL_18;
      if ((v4 & 0x18) != 0)
      {
LABEL_12:
        v9 = (_BYTE *)(v7 + (v4 & 0xFFFFFFFFFFFFFFF8));
        v10 = (char *)(v6 + (v4 & 0xFFFFFFFFFFFFFFF8));
        v16 = (uint64_t *)(v6 + v11);
        v17 = (_QWORD *)(v7 + v11);
        v18 = v11 - (v4 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v19 = *v16++;
          *v17++ = v19;
          v18 += 8;
        }
        while (v18);
        if (v4 == (v4 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_18;
        goto LABEL_17;
      }
      v10 = (char *)(v6 + v11);
      v9 = (_BYTE *)(v7 + v11);
    }
  }
  do
  {
LABEL_17:
    v20 = *v10++;
    *v9++ = v20;
  }
  while (v10 != (char *)(v6 + v4));
LABEL_18:
  *(_BYTE *)(v7 + v4) = 0;
LABEL_19:
  *(_QWORD *)(__sz + 80) += 40;
  if (*(_QWORD *)__sz)
    v21 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 40 > *(_QWORD *)(__sz + 8)
                                                                                  - *(_QWORD *)__sz;
  else
    v21 = 1;
  if (v21)
  {
    v22 = *(_DWORD *)(__sz + 24) >> 7;
    if (v22 >= 0x1E)
      LOBYTE(v22) = 30;
    v23 = 4096 << v22;
    buffer = (char *)llvm::allocate_buffer(4096 << v22, (std::align_val_t)8uLL);
    v25 = *(unsigned int *)(__sz + 24);
    if (v25 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v25 + 1, 8);
      LODWORD(v25) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v25) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v23];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)__sz = result + 5;
  *result = 0;
  result[1] = v3;
  result[2] = v8;
  result[3] = v4;
  result[4] = v5;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail17OpaqueAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10OpaqueAttrEJRNS1_10StringAttrERNS_9StringRefERNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD v15[4];
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  if ((v4 & 1) == 0)
  {
    v11 = a2;
    v12 = a1;
    a2 = v11;
    a1 = v12;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a2 = v11;
      a1 = v12;
    }
  }
  v5 = (*a1 >> 4) ^ (*a1 >> 9);
  v18 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v15[0] = v5;
  v13 = 0;
  v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v15, (uint64_t *)&v13, (_QWORD *)v15 + 1, (unint64_t)v16, (*a2 >> 4) ^ (*a2 >> 9));
  v14 = v13;
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v15, (uint64_t *)&v14, v6, (unint64_t)v16, (*a3 >> 4) ^ (*a3 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v15, v14, v7, (char *)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)*a1;
  if (a2[1] != *(_QWORD *)*a1)
    return 0;
  if (a2[3] == v2[2])
    return a2[4] == v2[3];
  return 0;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = mlir::detail::SparseElementsAttrStorage::construct(a2, *(__int128 **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, unint64_t))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

unint64_t mlir::detail::SparseElementsAttrStorage::construct(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t result;
  __int128 v11;
  __int128 v12;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 80) += 40;
  if (*(_QWORD *)a1)
    v5 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 40 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v5 = 1;
  if (v5)
  {
    v11 = v4;
    v12 = v3;
    v6 = *(_DWORD *)(a1 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a1 + 24);
    if (v9 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v7];
    result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    v4 = v11;
    v3 = v12;
  }
  else
  {
    result = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = result + 40;
  *(_QWORD *)result = 0;
  *(_OWORD *)(result + 8) = v3;
  *(_OWORD *)(result + 24) = v4;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail25SparseElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_18SparseElementsAttrEJRNS1_10ShapedTypeENS1_20DenseIntElementsAttrERNS1_17DenseElementsAttrEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)*a1;
  if (a2[1] != *(_QWORD *)*a1)
    return 0;
  if (a2[3] == v2[2])
    return a2[4] == v2[3];
  return 0;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = mlir::detail::SparseElementsAttrStorage::construct(a2, *(__int128 **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, unint64_t))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail25SparseElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_18SparseElementsAttrEJRNS1_10ShapedTypeERNS1_20DenseIntElementsAttrERNS1_17DenseElementsAttrEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<long long,llvm::ArrayRef<long long>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _OWORD v13[4];
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  if ((v2 & 1) == 0)
  {
    v11 = a1;
    v7 = a2;
    a2 = v7;
    v9 = v8;
    a1 = v11;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a1 = v11;
      a2 = v7;
    }
  }
  v3 = *a1;
  v16 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v12 = 0;
  *(_QWORD *)&v13[0] = v3;
  v4 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a2, *(_QWORD *)a2 + 8 * *(_QWORD *)(a2 + 8));
  v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v13, (uint64_t *)&v12, (_QWORD *)v13 + 1, (unint64_t)v14, v4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v13, v12, v5, (char *)v14);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)*a1 && (v3 = *(_QWORD *)(a2 + 24), v3 == v2[2]))
    return memcmp(*(const void **)(a2 + 16), (const void *)v2[1], 8 * v3) == 0;
  else
    return 0;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::StridedLayoutAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::detail::StridedLayoutAttrStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  char *buffer;
  uint64_t v22;
  _QWORD *result;

  v3 = *a2;
  v4 = a2[2];
  if (v4)
  {
    v5 = a2[1];
    v6 = 8 * v4;
    v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v4, 3);
    v8 = v7;
    if ((unint64_t)(8 * v4 - 8) < 0x18)
    {
      v9 = (_QWORD *)v7;
      v10 = (uint64_t *)v5;
    }
    else
    {
      v9 = (_QWORD *)v7;
      v10 = (uint64_t *)v5;
      if ((unint64_t)(v7 - v5) >= 0x20)
      {
        v11 = ((unint64_t)(v6 - 8) >> 3) + 1;
        v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
        v9 = (_QWORD *)(v7 + v12);
        v10 = (uint64_t *)(v5 + v12);
        v13 = (__int128 *)(v5 + 16);
        v14 = (_OWORD *)(v7 + 16);
        v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v16 = *v13;
          *(v14 - 1) = *(v13 - 1);
          *v14 = v16;
          v13 += 2;
          v14 += 2;
          v15 -= 4;
        }
        while (v15);
        if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_11;
      }
    }
    do
    {
      v17 = *v10++;
      *v9++ = v17;
    }
    while (v10 != (uint64_t *)(v5 + v6));
  }
  else
  {
    v8 = 0;
  }
LABEL_11:
  *(_QWORD *)(__sz + 80) += 32;
  if (*(_QWORD *)__sz)
    v18 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 32 > *(_QWORD *)(__sz + 8)
                                                                                  - *(_QWORD *)__sz;
  else
    v18 = 1;
  if (v18)
  {
    v19 = *(_DWORD *)(__sz + 24) >> 7;
    if (v19 >= 0x1E)
      LOBYTE(v19) = 30;
    v20 = 4096 << v19;
    buffer = (char *)llvm::allocate_buffer(4096 << v19, (std::align_val_t)8uLL);
    v22 = *(unsigned int *)(__sz + 24);
    if (v22 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v22 + 1, 8);
      LODWORD(v22) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v22) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v20];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)__sz = result + 4;
  *result = 0;
  result[1] = v3;
  result[2] = v8;
  result[3] = v4;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail24StridedLayoutAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_17StridedLayoutAttrEJxNS_8ArrayRefIxEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(_DWORD *a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  _OWORD v13[4];
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  if ((v2 & 1) == 0)
  {
    v11 = a1;
    v7 = a2;
    a2 = v7;
    v9 = v8;
    a1 = v11;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a1 = v11;
      a2 = v7;
    }
  }
  v3 = (*a1 >> 4) ^ (*a1 >> 9);
  v16 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v12 = 0;
  *(_QWORD *)&v13[0] = v3;
  v4 = llvm::hashing::detail::hash_combine_range_impl<mlir::Attribute const*>(*(_DWORD **)a2, (_DWORD *)(*(_QWORD *)a2 + 8 * *(_QWORD *)(a2 + 8)));
  v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v13, (uint64_t *)&v12, (_QWORD *)v13 + 1, (unint64_t)v14, v4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v13, v12, v5, (char *)v14);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  BOOL v11;

  v2 = (_QWORD *)*a1;
  if (a2[1] != *(_QWORD *)*a1)
    return 0;
  v3 = a2[3];
  if (v3 != v2[2])
    return 0;
  if (!v3)
    return 1;
  v4 = (uint64_t *)a2[2];
  v5 = (uint64_t *)v2[1];
  v6 = 8 * v3 - 8;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v9 = *v4++;
    result = v9 == v7;
    v11 = v9 != v7 || v6 == 0;
    v6 -= 8;
  }
  while (!v11);
  return result;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::StridedLayoutAttrStorage::construct(__sz, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v11;
  int v12;
  unint64_t v13;
  unsigned __int8 **v15;
  _QWORD v16[2];
  uint64_t *v17;
  uint64_t v18;
  _QWORD v19[2];

  v5 = a4;
  v19[0] = a2;
  v19[1] = a3;
  v18 = *a5;
  v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v6 & 1) == 0)
  {
    v15 = a1;
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v11;
    v5 = a4;
    a1 = v15;
    if (v12)
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v5 = a4;
      a1 = v15;
    }
  }
  v8 = v7[19];
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (8 * ((v18 >> 4) ^ (v18 >> 9)) + 8));
  v16[0] = &v18;
  v16[1] = v19;
  v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895* ((((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 32) >> 15) ^ (-348639895* (v8 ^ (v9 >> 47) ^ v9))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::TypeAttrStorage * mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::TypeAttrStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::TypeAttrStorage * mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::TypeAttrStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::TypeAttrStorage * mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::TypeAttrStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **a1;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::TypeAttrStorage * mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::TypeAttrStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  char *buffer;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  void (*v14)(uint64_t, _QWORD *);

  v4 = **a1;
  a2[10] += 16;
  v5 = *a2;
  v6 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (*a2)
    v7 = v6 + 16 > a2[1] - *a2;
  else
    v7 = 1;
  if (v7)
  {
    v8 = *((_DWORD *)a2 + 6) >> 7;
    if (v8 >= 0x1E)
      LOBYTE(v8) = 30;
    v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    v11 = *((unsigned int *)a2 + 6);
    if (v11 >= *((_DWORD *)a2 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), a2 + 4, v11 + 1, 8);
      LODWORD(v11) = *((_DWORD *)a2 + 6);
    }
    *(_QWORD *)(a2[2] + 8 * v11) = buffer;
    ++*((_DWORD *)a2 + 6);
    a2[1] = (uint64_t)&buffer[v9];
    v12 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *a2 = (uint64_t)(v12 + 2);
    *v12 = 0;
    v12[1] = v4;
    v13 = a1[1];
    v14 = (void (*)(uint64_t, _QWORD *))*v13;
    if (*v13)
      goto LABEL_13;
  }
  else
  {
    v12 = (_QWORD *)(v5 + v6);
    *a2 = v5 + v6 + 16;
    *v12 = 0;
    v12[1] = v4;
    v13 = a1[1];
    v14 = (void (*)(uint64_t, _QWORD *))*v13;
    if (*v13)
LABEL_13:
      v14(v13[1], v12);
  }
  return v12;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail15TypeAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8TypeAttrEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t *mlir::Dialect::addAttribute<mlir::AffineMapAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  mlir::AbstractAttribute::get<mlir::AffineMapAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::ArrayAttr>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, unint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::ArrayAttr,mlir::Attribute,mlir::detail::ArrayAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9ArrayAttrES2_NSB_16ArrayAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9ArrayAttrES2_NSA_16ArrayAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DenseArrayAttr>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::DenseArrayAttr,mlir::Attribute,mlir::detail::DenseArrayAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DenseArrayAttrES2_NSB_21DenseArrayAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DenseArrayAttrES2_NSA_21DenseArrayAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DenseIntOrFPElementsAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  mlir::AbstractAttribute::get<mlir::DenseIntOrFPElementsAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DenseStringElementsAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  mlir::AbstractAttribute::get<mlir::DenseStringElementsAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DenseResourceElementsAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  mlir::AbstractAttribute::get<mlir::DenseResourceElementsAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DictionaryAttr>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::DictionaryAttr,mlir::Attribute,mlir::detail::DictionaryAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DictionaryAttrES2_NSB_21DictionaryAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DictionaryAttrES2_NSA_21DictionaryAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::FloatAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  _BYTE v10[8];
  void *v11;
  unsigned int v12;
  uint64_t v13;
  llvm *v14[2];
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::AbstractAttribute::get<mlir::FloatAttr>(a1, (uint64_t)v10);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, (uint64_t)v10);
  v2 = v15;
  if (v15 >= 8)
  {
    if ((v15 & 4) != 0)
    {
      if ((v15 & 2) != 0)
        v3 = v14;
      else
        v3 = (llvm **)v14[0];
      (*(void (**)(llvm **))((v15 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v14[0], v14[1]);
  }
  v4 = (uint64_t *)v11;
  if (v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v11;
  }
  if (v4 != &v13)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::detail::FloatAttrStorage>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::IntegerAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  _BYTE v10[8];
  void *v11;
  unsigned int v12;
  uint64_t v13;
  llvm *v14[2];
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::AbstractAttribute::get<mlir::IntegerAttr>(a1, (uint64_t)v10);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, (uint64_t)v10);
  v2 = v15;
  if (v15 >= 8)
  {
    if ((v15 & 4) != 0)
    {
      if ((v15 & 2) != 0)
        v3 = v14;
      else
        v3 = (llvm **)v14[0];
      (*(void (**)(llvm **))((v15 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v14[0], v14[1]);
  }
  v4 = (uint64_t *)v11;
  if (v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v11;
  }
  if (v4 != &v13)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::detail::IntegerAttrStorage>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::IntegerSetAttr>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)();
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::IntegerSetAttr,mlir::Attribute,mlir::detail::IntegerSetAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14IntegerSetAttrES2_NSB_21IntegerSetAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14IntegerSetAttrES2_NSA_21IntegerSetAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::OpaqueAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  mlir::AbstractAttribute::get<mlir::OpaqueAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::SparseElementsAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  mlir::AbstractAttribute::get<mlir::SparseElementsAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::StridedLayoutAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  mlir::AbstractAttribute::get<mlir::StridedLayoutAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::StringAttr>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *AttributeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  mlir::AbstractAttribute::get<mlir::StringAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::SymbolRefAttr>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::SymbolRefAttr,mlir::Attribute,mlir::detail::SymbolRefAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13SymbolRefAttrES2_NSB_20SymbolRefAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13SymbolRefAttrES2_NSA_20SymbolRefAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::TypeAttr>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::TypeAttr,mlir::Attribute,mlir::detail::TypeAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8TypeAttrES2_NSB_15TypeAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8TypeAttrES2_NSA_15TypeAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id, 0, v10);
}

_QWORD *mlir::Dialect::addAttribute<mlir::UnitAttr>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  mlir::MLIRContext *v9;
  uint64_t *AttributeUniquer;
  char v12;
  _QWORD *(**v13)(uint64_t *, _QWORD *);
  _QWORD *(*v14)(uint64_t *, _QWORD *);
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)();
  _QWORD *v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  char *v23;
  void *v24;
  mlir::MLIRContext *v25;
  void *v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = (mlir::MLIRContext *)v27;
  LODWORD(v26) = 0;
  v14 = (_QWORD *(*)(uint64_t *, _QWORD *))a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::UnitAttr,mlir::Attribute,mlir::AttributeStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8UnitAttrES2_NS1_16AttributeStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8UnitAttrES2_NS1_16AttributeStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  v9 = *(mlir::MLIRContext **)(a1 + 32);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(v9);
  v25 = v9;
  v26 = &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id;
  v14 = _ZN4llvm12function_refIFvPN4mlir16AttributeStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer17registerAttributeINS1_8UnitAttrEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  v15 = &v25;
  v13 = &v14;
  return mlir::StorageUniquer::registerSingletonImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::AttributeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::AttributeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v13);
}

void mlir::AbstractAttribute::get<mlir::AffineMapAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::AffineMapAttr,mlir::Attribute,mlir::detail::AffineMapAttrStorage,mlir::detail::AttributeUniquer,mlir::MemRefLayoutAttrInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13AffineMapAttrES2_NSB_20AffineMapAttrStorageENSB_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13AffineMapAttrES2_NSA_20AffineMapAttrStorageENSA_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x18uLL);
  *v2 = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::getAffineMap;
  v2[1] = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::isIdentity;
  v2[2] = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::verifyLayout;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemRefLayoutAttrInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[166], v2);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::getAffineMap(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::isIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  return mlir::AffineMap::isIdentity((mlir::AffineMap *)&v3);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::verifyLayout(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::detail::verifyAffineMapAsLayout(*(_QWORD *)(a2 + 8), a3, a4, a5, a6);
}

BOOL mlir::detail::StorageUserBase<mlir::AffineMapAttr,mlir::Attribute,mlir::detail::AffineMapAttrStorage,mlir::detail::AttributeUniquer,mlir::MemRefLayoutAttrInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface::Trait<Empty>]";
      v15 = 95;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemRefLayoutAttrInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemRefLayoutAttrInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      a1 = v13;
    }
  }
  return v2[471] == a1;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13AffineMapAttrES2_NSA_20AffineMapAttrStorageENSA_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  mlir::MLIRContext *LHS;
  unsigned __int8 **AttributeUniquer;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  v6 = a2;
  v2 = *(_QWORD *)(a2 + 8);
  mlir::Attribute::getContext((mlir::Attribute *)&v6);
  v7 = v2;
  LHS = (mlir::MLIRContext *)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v7);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(LHS);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id;
  v8[1] = LHS;
  return mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail20AffineMapAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13AffineMapAttrEJRNS1_9AffineMapEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id, &v7);
}

uint64_t mlir::detail::StorageUserBase<mlir::ArrayAttr,mlir::Attribute,mlir::detail::ArrayAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9ArrayAttrES2_NSB_16ArrayAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];

  v7 = *(uint64_t **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  if (v6)
  {
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      result = mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v11, v9);
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9ArrayAttrES2_NSA_16ArrayAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];

  v9 = a2;
  if (a4 >= *(unsigned int *)(a2 + 16))
    v5 = *(unsigned int *)(a2 + 16);
  else
    v5 = a4;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  *(_QWORD *)&v10 = a3;
  *((_QWORD *)&v10 + 1) = v5;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
  v11[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)v11, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, &v10);
}

uint64_t mlir::detail::StorageUserBase<mlir::DenseArrayAttr,mlir::Attribute,mlir::detail::DenseArrayAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DenseArrayAttrES2_NSB_21DenseArrayAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[4];

  v6 = *(_QWORD *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DenseArrayAttrES2_NSA_21DenseArrayAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v7;
  __int128 v8;

  *(_QWORD *)&v8 = a3;
  *((_QWORD *)&v8 + 1) = a4;
  *(_QWORD *)&v7 = a5;
  *((_QWORD *)&v7 + 1) = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::DenseArrayAttr>(a2, &v8, &v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::DenseArrayAttr>(uint64_t a1, __int128 *a2, _OWORD *a3)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v14;
  uint64_t ParametricStorageTypeImpl;
  _OWORD v17[2];
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  _QWORD v27[2];
  uint64_t v28;
  unsigned int *v29;
  void *v30;
  __int128 v31;
  _BYTE v32[40];
  uint64_t v33;
  unsigned int *v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD v37[6];

  v37[5] = *MEMORY[0x1E0C80C00];
  v19 = a1;
  v3 = *(_OWORD *)(a1 + 24);
  v18[0] = *(_OWORD *)(a1 + 8);
  v18[1] = v3;
  v4 = *a2;
  v17[0] = *a3;
  v17[1] = v4;
  mlir::AttrTypeSubElementHandler<std::tuple<mlir::Type,long long,llvm::ArrayRef<char>>,void>::replace((uint64_t)v18, (uint64_t)v17, (uint64_t)&v33);
  mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v5 = v33;
  v6 = v34;
  v28 = v33;
  v29 = v34;
  v30 = v32;
  v31 = xmmword_181233150;
  v7 = v36;
  if (!v36)
  {
    v10 = v32;
    goto LABEL_9;
  }
  if (v36 < 0x29)
  {
    v9 = v32;
    v8 = v36;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v30, v32, v36, 1);
  v8 = v36;
  if (v36)
  {
    v9 = v30;
LABEL_7:
    memcpy(v9, v35, v8);
  }
  *(_QWORD *)&v31 = v7;
  v5 = v28;
  v6 = v29;
  v10 = v30;
LABEL_9:
  v11 = *v6;
  v20 = v5;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v21[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v21[1] = Context;
  v27[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeERjRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v27[1] = v21;
  v24 = v20;
  v25 = v11;
  v26[0] = v10;
  v26[1] = v7;
  v14 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v24, &v25, (uint64_t)v26);
  v22[0] = &v24;
  v22[1] = v27;
  v23 = &v24;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v14, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v23, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v22);
  if (v30 != v32)
    free(v30);
  if (v35 != v37)
    free(v35);
  return ParametricStorageTypeImpl;
}

void mlir::AttrTypeSubElementHandler<std::tuple<mlir::Type,long long,llvm::ArrayRef<char>>,void>::replace(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  size_t v10;
  size_t v11;
  void *__src;
  size_t __n;
  uint64_t v14;
  _QWORD v15[6];

  v15[5] = *MEMORY[0x1E0C80C00];
  v4 = a1 + 8;
  if (*(_QWORD *)a1)
  {
    v5 = *(uint64_t **)a2;
    v6 = *(_QWORD *)(a2 + 8) - 1;
    *(_QWORD *)a2 += 8;
    *(_QWORD *)(a2 + 8) = v6;
    v7 = *v5;
  }
  else
  {
    v7 = 0;
  }
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<char>,void>::replace(*(_BYTE **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)&__src);
  v8 = (void *)(a3 + 40);
  *(_QWORD *)(a3 + 16) = a3 + 40;
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v4;
  *(_OWORD *)(a3 + 24) = xmmword_181233150;
  v9 = __src;
  if ((void **)(a3 + 16) == &__src)
    goto LABEL_14;
  v10 = __n;
  if (!__n)
    goto LABEL_14;
  if (__src != v15)
  {
    *(_QWORD *)(a3 + 16) = __src;
    *(_QWORD *)(a3 + 24) = v10;
    *(_QWORD *)(a3 + 32) = v14;
    return;
  }
  if (__n < 0x29)
  {
    v11 = __n;
    goto LABEL_12;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod(a3 + 16, (void *)(a3 + 40), __n, 1);
  v9 = __src;
  v11 = __n;
  if (__n)
  {
    v8 = *(void **)(a3 + 16);
LABEL_12:
    memcpy(v8, v9, v11);
    v9 = __src;
  }
  *(_QWORD *)(a3 + 24) = v10;
  __n = 0;
LABEL_14:
  if (v9 != v15)
    free(v9);
}

void mlir::AttrTypeSubElementHandler<llvm::ArrayRef<char>,void>::replace(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  __int128 v18;
  _QWORD v19[6];

  v19[5] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v4 = xmmword_181233150;
  v18 = xmmword_181233150;
  if (a2)
  {
    v5 = a2;
    v6 = 0;
    v7 = v19;
    do
    {
      if (v6 >= *((_QWORD *)&v18 + 1))
      {
        v8 = *a1;
        v9 = v6 + 1;
        if (v6 + 1 > *((_QWORD *)&v18 + 1))
        {
          v15 = v5;
          v16 = a1;
          v10 = v7;
          v14 = *a1;
          v13 = v4;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v17, v7, v9, 1);
          v4 = v13;
          v8 = v14;
          v5 = v15;
          a1 = v16;
          v7 = v10;
          v6 = v18;
        }
        *((_BYTE *)v17 + v6) = v8;
      }
      else
      {
        *((_BYTE *)v17 + v6) = *a1;
      }
      v6 = v18 + 1;
      *(_QWORD *)&v18 = v18 + 1;
      ++a1;
      --v5;
    }
    while (v5);
    v11 = v17;
    *(_QWORD *)a3 = a3 + 24;
    *(_OWORD *)(a3 + 8) = v4;
    if (v6 && &v17 != (_QWORD **)a3)
    {
      if (v11 != v19)
      {
        *(_QWORD *)a3 = v11;
        *(_QWORD *)(a3 + 8) = v6;
        *(_QWORD *)(a3 + 16) = *((_QWORD *)&v18 + 1);
        return;
      }
      v12 = v6;
      if (v6 < 0x29
        || (llvm::SmallVectorBase<unsigned long long>::grow_pod(a3, (void *)(a3 + 24), v6, 1),
            v7 = v17,
            (v12 = v18) != 0))
      {
        memcpy(*(void **)a3, v7, v12);
        v7 = v17;
      }
      *(_QWORD *)(a3 + 8) = v6;
      *(_QWORD *)&v18 = 0;
      v11 = v7;
    }
    if (v11 != v19)
      free(v11);
  }
  else
  {
    *(_QWORD *)a3 = a3 + 24;
    *(_OWORD *)(a3 + 8) = xmmword_181233150;
  }
}

void mlir::AbstractAttribute::get<mlir::DenseIntOrFPElementsAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>>((uint64_t)&v11);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::DenseIntOrFPElementsAttr,mlir::DenseElementsAttr,mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_24DenseIntOrFPElementsAttrENS1_17DenseElementsAttrENSB_31DenseIntOrFPElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_24DenseIntOrFPElementsAttrENS1_17DenseElementsAttrENSA_31DenseIntOrFPElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getType;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      v15 = 65;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[212], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getValuesImpl;
  v2[1] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::isSplat;
  v2[2] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getShapedType;
  v2[3] = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(a1);
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v5)
    {
      v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr]";
      v14 = 68;
      v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v6)
        v7 = v6;
      else
        v7 = v14;
      v8 = &v13[v7];
      v9 = v14 - v7;
      if (v14 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v14 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ElementsAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[134], v2);
}

void mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getValuesImpl(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  char v12;

  v9 = a1;
  mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(&v9, a2, (uint64_t)v10);
  if (v12)
  {
    v5 = v10[0];
    *(_BYTE *)a3 = v10[0];
    *(_BYTE *)(a3 + 1) = v10[1];
    v6 = v11;
    if (!v5)
      v11 = 0;
    *(_QWORD *)(a3 + 8) = v6;
    *(_BYTE *)(a3 + 16) = 1;
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<mlir::Attribute,llvm::APInt,BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>((mlir::DenseElementsAttr *)&v9, (uint64_t)a2, a3);
    if (v12)
      v7 = v10[0] == 0;
    else
      v7 = 0;
    if (v7)
    {
LABEL_11:
      v8 = v11;
      v11 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::isSplat(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 24);
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getShapedType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned char]";
      *((_QWORD *)&v21 + 1) = 63;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<unsigned char,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[9] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned char,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned short]";
      *((_QWORD *)&v21 + 1) = 64;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<unsigned short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[15] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned short,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 2 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<unsigned char,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *ArgAttrsAttr;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *(_OWORD *)(*a1 + 8);
  *(_QWORD *)&v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 8)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v14);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), (_DWORD)result != 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v14 = *(_QWORD *)(v5 + 8);
    v8 = v14;
    *((_QWORD *)&v14 + 1) = v9;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned int]";
      *((_QWORD *)&v21 + 1) = 62;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<unsigned int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[11] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned int,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 4 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<unsigned short,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *ArgAttrsAttr;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *(_OWORD *)(*a1 + 8);
  *(_QWORD *)&v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 16)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v14);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), (_DWORD)result != 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v14 = *(_QWORD *)(v5 + 8);
    v8 = v14;
    *((_QWORD *)&v14 + 1) = v9;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned long long]";
      *((_QWORD *)&v21 + 1) = 68;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<unsigned long long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[17] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 8 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<unsigned int,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *ArgAttrsAttr;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *(_OWORD *)(*a1 + 8);
  *(_QWORD *)&v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 32)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v14);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), (_DWORD)result != 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v14 = *(_QWORD *)(v5 + 8);
    v8 = v14;
    *((_QWORD *)&v14 + 1) = v9;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = signed char]";
      *((_QWORD *)&v21 + 1) = 61;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<signed char,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[6] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<signed char,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = short]";
      *((_QWORD *)&v21 + 1) = 55;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[14] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<short,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 2 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<signed char,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *ArgAttrsAttr;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *(_OWORD *)(*a1 + 8);
  *(_QWORD *)&v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 8)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v14);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), (_DWORD)result == 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v14 = *(_QWORD *)(v5 + 8);
    v8 = v14;
    *((_QWORD *)&v14 + 1) = v9;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = int]";
      *((_QWORD *)&v21 + 1) = 53;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[10] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<int,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 4 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<short,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *ArgAttrsAttr;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *(_OWORD *)(*a1 + 8);
  *(_QWORD *)&v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 16)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v14);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), (_DWORD)result == 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v14 = *(_QWORD *)(v5 + 8);
    v8 = v14;
    *((_QWORD *)&v14 + 1) = v9;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = long long]";
      *((_QWORD *)&v21 + 1) = 59;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<long long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[16] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<long long,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 8 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<int,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *ArgAttrsAttr;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *(_OWORD *)(*a1 + 8);
  *(_QWORD *)&v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 32)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v14);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), (_DWORD)result == 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v14 = *(_QWORD *)(v5 + 8);
    v8 = v14;
    *((_QWORD *)&v14 + 1) = v9;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = short]";
      *((_QWORD *)&v21 + 1) = 55;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[14] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<short,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 2 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<long long,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *ArgAttrsAttr;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *(_OWORD *)(*a1 + 8);
  *(_QWORD *)&v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 64)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v14);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), (_DWORD)result == 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v14 = *(_QWORD *)(v5 + 8);
    v8 = v14;
    *((_QWORD *)&v14 + 1) = v9;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned short]";
      *((_QWORD *)&v21 + 1) = 64;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<unsigned short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[15] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned short,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 2 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = int]";
      *((_QWORD *)&v21 + 1) = 53;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[10] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<int,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 4 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned int]";
      *((_QWORD *)&v21 + 1) = 62;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<unsigned int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[11] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned int,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 4 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = long]";
      *((_QWORD *)&v21 + 1) = 54;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[12] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<long long,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 8 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned long]";
      *((_QWORD *)&v21 + 1) = 63;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<unsigned long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[13] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 8 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  void **p_vtable;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned char>]";
      *((_QWORD *)&v21 + 1) = 77;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<unsigned char>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a2 = v20;
    }
  }
  if (p_vtable[511] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned char>,unsigned char,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 2 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned short>]";
      *((_QWORD *)&v21 + 1) = 78;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<unsigned short>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[3] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned short>,unsigned short,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 4 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned char>,unsigned char,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *ArgAttrsAttr;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t OperandRange;
  __int128 v15;
  uint64_t v16;

  v15 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(_QWORD *)&v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 8)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v15);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v15;
  if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), (_DWORD)result != 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v15 = *(_QWORD *)(v5 + 8);
    v8 = v15;
    *((_QWORD *)&v15 + 1) = v9;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v15);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned int>]";
      *((_QWORD *)&v21 + 1) = 76;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<unsigned int>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[1] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned int>,unsigned int,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 8 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned short>,unsigned short,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *ArgAttrsAttr;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t OperandRange;
  __int128 v15;
  uint64_t v16;

  v15 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(_QWORD *)&v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 16)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v15);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v15;
  if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), (_DWORD)result != 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v15 = *(_QWORD *)(v5 + 8);
    v8 = v15;
    *((_QWORD *)&v15 + 1) = v9;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v15);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned long long>]";
      *((_QWORD *)&v21 + 1) = 82;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<unsigned long long>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[5] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned long long>,unsigned long long,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 16 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned int>,unsigned int,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *ArgAttrsAttr;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t OperandRange;
  __int128 v15;
  uint64_t v16;

  v15 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(_QWORD *)&v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 32)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v15);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v15;
  if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), (_DWORD)result != 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v15 = *(_QWORD *)(v5 + 8);
    v8 = v15;
    *((_QWORD *)&v15 + 1) = v9;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v15);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  void **p_vtable;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<signed char>]";
      *((_QWORD *)&v21 + 1) = 75;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<signed char>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a2 = v20;
    }
  }
  if (p_vtable[508] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<signed char>,signed char,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 2 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned long long>,unsigned long long,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *ArgAttrsAttr;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t OperandRange;
  __int128 v15;
  uint64_t v16;

  v15 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(_QWORD *)&v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 64)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v15);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v15;
  if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), (_DWORD)result != 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v15 = *(_QWORD *)(v5 + 8);
    v8 = v15;
    *((_QWORD *)&v15 + 1) = v9;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v15);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<short>]";
      *((_QWORD *)&v21 + 1) = 69;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<short>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[2] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<short>,short,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 4 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<signed char>,signed char,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *ArgAttrsAttr;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t OperandRange;
  __int128 v15;
  uint64_t v16;

  v15 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(_QWORD *)&v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 8)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v15);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v15;
  if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), (_DWORD)result == 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v15 = *(_QWORD *)(v5 + 8);
    v8 = v15;
    *((_QWORD *)&v15 + 1) = v9;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v15);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<int>]";
      *((_QWORD *)&v21 + 1) = 67;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)*v6 == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<int>,int,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 8 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<short>,short,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *ArgAttrsAttr;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t OperandRange;
  __int128 v15;
  uint64_t v16;

  v15 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(_QWORD *)&v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 16)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v15);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v15;
  if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), (_DWORD)result == 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v15 = *(_QWORD *)(v5 + 8);
    v8 = v15;
    *((_QWORD *)&v15 + 1) = v9;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v15);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<long long>]";
      *((_QWORD *)&v21 + 1) = 73;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<long long>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[4] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<long long>,long long,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 16 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<int>,int,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *ArgAttrsAttr;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t OperandRange;
  __int128 v15;
  uint64_t v16;

  v15 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(_QWORD *)&v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 32)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v15);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v15;
  if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), (_DWORD)result == 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v15 = *(_QWORD *)(v5 + 8);
    v8 = v15;
    *((_QWORD *)&v15 + 1) = v9;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v15);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = float]";
      *((_QWORD *)&v21 + 1) = 55;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<float,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[8] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<float,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 4 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<long long>,long long,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *ArgAttrsAttr;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t OperandRange;
  __int128 v15;
  uint64_t v16;

  v15 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(_QWORD *)&v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 64)
    goto LABEL_9;
  result = mlir::Type::isIndex((mlir::Type *)&v15);
  if ((_DWORD)result)
    goto LABEL_3;
  v13 = v15;
  if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v13 = 0;
  v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), (_DWORD)result == 1)))
  {
LABEL_3:
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 32);
    v7 = *(unsigned __int8 *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)&v15 = *(_QWORD *)(v5 + 8);
    v8 = v15;
    *((_QWORD *)&v15 + 1) = v9;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v15);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = result;
    v12 = 1;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    v12 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = double]";
      *((_QWORD *)&v21 + 1) = 56;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<double,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v20;
    }
  }
  if ((void *)v6[7] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<double,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 8 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

unint64_t mlir::DenseElementsAttr::tryGetValues<float,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t OperandRange;
  unint64_t result;
  void *v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *ArgAttrsAttr;
  uint64_t v24;
  char v25;
  __int128 v26;

  v26 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
  result = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (result != 32)
    goto LABEL_38;
  v6 = *(void **)(*(_QWORD *)OperandRange + 136);
  v7 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  v8 = v7 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  v9 = v8 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  v10 = v9 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  v11 = v10 || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  v12 = v11 || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  v13 = v12 || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  v14 = v13 || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  v15 = v14 || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  v16 = v15 || v6 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
  if (v16 || v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v18 = *a1;
    v19 = *(_QWORD *)(*a1 + 32);
    v20 = *(unsigned __int8 *)(v18 + 24);
    v22 = *(_QWORD *)(v18 + 16);
    *(_QWORD *)&v26 = *(_QWORD *)(v18 + 8);
    v21 = v26;
    *((_QWORD *)&v26 + 1) = v22;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v26);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v24);
    *(_QWORD *)a2 = v19;
    *(_QWORD *)(a2 + 8) = v20;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v19;
    *(_QWORD *)(a2 + 32) = v20;
    *(_QWORD *)(a2 + 40) = result;
    v25 = 1;
    *(_QWORD *)(a2 + 48) = v21;
    *(_QWORD *)(a2 + 56) = v22;
  }
  else
  {
LABEL_38:
    v25 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v25;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  void **p_vtable;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<float>]";
      *((_QWORD *)&v21 + 1) = 69;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<float>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a2 = v20;
    }
  }
  if (p_vtable[510] == a2)
  {
    v21 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<float>,float,void>(a1, (uint64_t)&v21);
      if (v23)
      {
        v9 = *(_BYTE *)(*a1 + 24);
        if (BYTE8(v21))
          v10 = 0;
        else
          v10 = v22;
        v11 = v21 + 8 * v10;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 1) = v9;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  else
  {
    _ZNK4mlir6detail17ElementsAttrTraitINS_24DenseIntOrFPElementsAttrEE12getValueImplINSt3__17complexIdEEJENS5_17integral_constantIbLb1EEEEEDaNS_6TypeIDET1_(a1, a2, a3);
  }
}

unint64_t mlir::DenseElementsAttr::tryGetValues<double,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t OperandRange;
  unint64_t result;
  void *v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *ArgAttrsAttr;
  uint64_t v24;
  char v25;
  __int128 v26;

  v26 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
  result = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (result != 64)
    goto LABEL_38;
  v6 = *(void **)(*(_QWORD *)OperandRange + 136);
  v7 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  v8 = v7 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  v9 = v8 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  v10 = v9 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  v11 = v10 || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  v12 = v11 || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  v13 = v12 || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  v14 = v13 || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  v15 = v14 || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  v16 = v15 || v6 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
  if (v16 || v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v18 = *a1;
    v19 = *(_QWORD *)(*a1 + 32);
    v20 = *(unsigned __int8 *)(v18 + 24);
    v22 = *(_QWORD *)(v18 + 16);
    *(_QWORD *)&v26 = *(_QWORD *)(v18 + 8);
    v21 = v26;
    *((_QWORD *)&v26 + 1) = v22;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v26);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v24);
    *(_QWORD *)a2 = v19;
    *(_QWORD *)(a2 + 8) = v20;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v19;
    *(_QWORD *)(a2 + 32) = v20;
    *(_QWORD *)(a2 + 40) = result;
    v25 = 1;
    *(_QWORD *)(a2 + 48) = v21;
    *(_QWORD *)(a2 + 56) = v22;
  }
  else
  {
LABEL_38:
    v25 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v25;
  return result;
}

void _ZNK4mlir6detail17ElementsAttrTraitINS_24DenseIntOrFPElementsAttrEE12getValueImplINSt3__17complexIdEEJENS5_17integral_constantIbLb1EEEEEDaNS_6TypeIDET1_(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  void **p_vtable;
  char v7;
  uint64_t *ArgAttrsAttr;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  uint64_t v23;
  char v24;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v5 & 1) == 0)
  {
    v21 = a2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    a2 = v21;
    if (v13)
    {
      *(_QWORD *)&v22 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<double>]";
      *((_QWORD *)&v22 + 1) = 70;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v22 + 1) >= v14)
        v15 = v14;
      else
        v15 = *((_QWORD *)&v22 + 1);
      v16 = v22 + v15;
      v17 = *((_QWORD *)&v22 + 1) - v15;
      if (*((_QWORD *)&v22 + 1) - v15 >= 0x12)
        v18 = 18;
      else
        v18 = *((_QWORD *)&v22 + 1) - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<std::complex<double>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v16 + v18, v20);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a2 = v21;
    }
  }
  if (p_vtable[509] != a2)
  {
    v7 = 0;
LABEL_4:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = v7;
    return;
  }
  v22 = *(_OWORD *)(*a1 + 8);
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v22);
  if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v9))
  {
    mlir::DenseElementsAttr::tryGetValues<std::complex<double>,double,void>(a1, (uint64_t)&v22);
    v7 = v24;
    if (!v24)
      goto LABEL_4;
    v10 = *(_BYTE *)(*a1 + 24);
    if (BYTE8(v22))
      v11 = 0;
    else
      v11 = v23;
    v12 = v22 + 16 * v11;
    *(_BYTE *)a3 = 1;
    *(_BYTE *)(a3 + 1) = v10;
    *(_QWORD *)(a3 + 8) = v12;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_WORD *)a3 = 1;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
}

unint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<float>,float,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t Value;
  unint64_t result;
  void *v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *ArgAttrsAttr;
  uint64_t v22;
  char v23;
  BOOL v24;
  uint64_t OperandRange;
  __int128 v26;

  v26 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(Value);
  if (result != 32)
    goto LABEL_36;
  v6 = *(void **)(*(_QWORD *)Value + 136);
  v7 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  v8 = v7 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  v9 = v8 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  v10 = v9 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  v11 = v10 || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  v12 = v11 || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  v13 = v12 || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  v14 = v13 || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  v15 = v14 || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  if (v15
    || (v6 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      ? (v24 = v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      : (v24 = 1),
        v24))
  {
    v16 = *a1;
    v17 = *(_QWORD *)(*a1 + 32);
    v18 = *(unsigned __int8 *)(v16 + 24);
    v20 = *(_QWORD *)(v16 + 16);
    *(_QWORD *)&v26 = *(_QWORD *)(v16 + 8);
    v19 = v26;
    *((_QWORD *)&v26 + 1) = v20;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v26);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v22);
    *(_QWORD *)a2 = v17;
    *(_QWORD *)(a2 + 8) = v18;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v18;
    *(_QWORD *)(a2 + 40) = result;
    v23 = 1;
    *(_QWORD *)(a2 + 48) = v19;
    *(_QWORD *)(a2 + 56) = v20;
  }
  else
  {
LABEL_36:
    v23 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v23;
  return result;
}

unint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<double>,double,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t Value;
  unint64_t result;
  void *v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *ArgAttrsAttr;
  uint64_t v22;
  char v23;
  BOOL v24;
  uint64_t OperandRange;
  __int128 v26;

  v26 = *(_OWORD *)(*a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  result = mlir::detail::getDenseElementBitWidth(Value);
  if (result != 64)
    goto LABEL_36;
  v6 = *(void **)(*(_QWORD *)Value + 136);
  v7 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  v8 = v7 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  v9 = v8 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  v10 = v9 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  v11 = v10 || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  v12 = v11 || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  v13 = v12 || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  v14 = v13 || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  v15 = v14 || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  if (v15
    || (v6 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      ? (v24 = v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      : (v24 = 1),
        v24))
  {
    v16 = *a1;
    v17 = *(_QWORD *)(*a1 + 32);
    v18 = *(unsigned __int8 *)(v16 + 24);
    v20 = *(_QWORD *)(v16 + 16);
    *(_QWORD *)&v26 = *(_QWORD *)(v16 + 8);
    v19 = v26;
    *((_QWORD *)&v26 + 1) = v20;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v26);
    result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v22);
    *(_QWORD *)a2 = v17;
    *(_QWORD *)(a2 + 8) = v18;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v18;
    *(_QWORD *)(a2 + 40) = result;
    v23 = 1;
    *(_QWORD *)(a2 + 48) = v19;
    *(_QWORD *)(a2 + 56) = v20;
  }
  else
  {
LABEL_36:
    v23 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 64) = v23;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<mlir::Attribute,llvm::APInt,BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(mlir::DenseElementsAttr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  void **p_vtable;
  uint64_t v7;
  uint64_t *ArgAttrsAttr;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)&v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::Attribute]";
      *((_QWORD *)&v21 + 1) = 65;
      v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v21 + 1) >= v13)
        v14 = v13;
      else
        v14 = *((_QWORD *)&v21 + 1);
      v15 = v21 + v14;
      v16 = *((_QWORD *)&v21 + 1) - v14;
      if (*((_QWORD *)&v21 + 1) - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *((_QWORD *)&v21 + 1) - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<mlir::Attribute,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a2 = v20;
    }
  }
  if (p_vtable[507] == (void *)a2)
  {
    v7 = *(_QWORD *)a1;
    v21 = *(_OWORD *)(*(_QWORD *)a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    mlir::ShapedType::getNumElements(ArgAttrsAttr, v9);
    v10 = *(_BYTE *)(*(_QWORD *)a1 + 24);
    v11 = operator new(0x18uLL);
    *v11 = &unk_1E0E4E9C8;
    v11[1] = v7;
    v11[2] = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 1) = v10;
    *(_QWORD *)(a3 + 8) = v11;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<llvm::APInt,BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<llvm::APInt,BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(mlir::DenseElementsAttr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  void **p_vtable;
  char v7;
  char v8;
  char v9;
  char *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[64];
  char v21;
  _OWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v5 & 1) == 0)
  {
    v19 = a2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    a2 = v19;
    if (v11)
    {
      *(_QWORD *)v20 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APInt]";
      *(_QWORD *)&v20[8] = 61;
      v12 = llvm::StringRef::find((uint64_t *)v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*(_QWORD *)&v20[8] >= v12)
        v13 = v12;
      else
        v13 = *(_QWORD *)&v20[8];
      v14 = *(_QWORD *)v20 + v13;
      v15 = *(_QWORD *)&v20[8] - v13;
      if (*(_QWORD *)&v20[8] - v13 >= 0x12)
        v16 = 18;
      else
        v16 = *(_QWORD *)&v20[8] - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<llvm::APInt,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a2 = v19;
    }
  }
  if (p_vtable[479] == (void *)a2)
  {
    mlir::DenseElementsAttr::tryGetValues<llvm::APInt,void>(a1, (uint64_t)v20);
    v7 = v21;
    if (v21)
    {
      v8 = v20[0];
      v22[0] = *(_OWORD *)&v20[1];
      *(_OWORD *)((char *)v22 + 15) = *(_OWORD *)&v20[16];
      v9 = *(_BYTE *)(*(_QWORD *)a1 + 24);
      v10 = (char *)operator new(0x28uLL);
      *(_QWORD *)v10 = &unk_1E0E4E938;
      v10[8] = v8;
      *(_OWORD *)(v10 + 9) = v22[0];
      *(_OWORD *)(v10 + 24) = *(_OWORD *)((char *)v22 + 15);
      *(_BYTE *)(a3 + 1) = v9;
      *(_QWORD *)(a3 + 8) = v10;
      v7 = 1;
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = v7;
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::AttributeElementIterator,mlir::Attribute>::clone@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  __n128 result;

  v4 = (char *)operator new(0x18uLL);
  *(_QWORD *)v4 = &unk_1E0E4E9C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *a2 = v4;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::AttributeElementIterator,mlir::Attribute>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];

  v2 = *(_QWORD *)(a1 + 16) + a2;
  v4[0] = *(_QWORD *)(a1 + 8);
  v4[1] = v2;
  return mlir::DenseElementsAttr::AttributeElementIterator::operator*(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(mlir::DenseElementsAttr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  mlir::DenseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = BOOL]";
      v18 = 54;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<BOOL,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[473] == a2)
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::buildValueResult<BOOL>((uint64_t)a1, a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::IntElementIterator,llvm::APInt>::clone@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  __n128 result;

  v4 = (char *)operator new(0x28uLL);
  *(_QWORD *)v4 = &unk_1E0E4E938;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v4 + 24) = result;
  *a2 = v4;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::IntElementIterator,llvm::APInt>::at(uint64_t a1@<X0>, uint64_t a2@<X1>, llvm::APInt *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
    v6 = 0;
  else
    v6 = *(_QWORD *)(a1 + 24) + a2;
  v7 = v5 + 7;
  v8 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v5 == 1)
    v8 = 1;
  v9 = v8 * v6;
  if (v5 == 1)
  {
    v10 = (*(unsigned __int8 *)(v4 + (v9 >> 3)) >> (v9 & 7)) & 1;
    *((_DWORD *)a3 + 2) = 1;
    *(_QWORD *)a3 = v10;
    return;
  }
  *((_DWORD *)a3 + 2) = v5;
  if (v5 <= 0x40)
  {
    *(_QWORD *)a3 = 0;
    if (v7 < 8)
      return;
    goto LABEL_10;
  }
  llvm::APInt::initSlowCase(a3, 0, 0);
  if (*((_DWORD *)a3 + 2) >= 0x41u)
    a3 = *(llvm::APInt **)a3;
  if (v7 >= 8)
LABEL_10:
    memmove(a3, (const void *)(v4 + (v9 >> 3)), v7 >> 3);
}

_QWORD *mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::buildValueResult<BOOL>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  char v9;
  char v10;
  __int128 v11;

  v11 = *(_OWORD *)(*(_QWORD *)a1 + 8);
  *(_QWORD *)&v11 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v11);
  result = (_QWORD *)mlir::Type::isInteger((mlir::Type *)&v11, 1);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v6 = *(unsigned __int8 *)(*(_QWORD *)a1 + 24);
    v11 = *(_OWORD *)(*(_QWORD *)a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v11);
    mlir::ShapedType::getNumElements(ArgAttrsAttr, v8);
    v9 = *(_BYTE *)(*(_QWORD *)a1 + 24);
    result = operator new(0x20uLL);
    *result = &unk_1E0E4E968;
    result[1] = v5;
    result[2] = v6;
    result[3] = 0;
    *(_BYTE *)(a2 + 1) = v9;
    *(_QWORD *)(a2 + 8) = result;
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = v10;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  __guard *v6;
  char v7;
  char v8;
  char v9;
  char *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[64];
  char v21;
  _OWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if ((v5 & 1) == 0)
  {
    v19 = a2;
    a2 = v19;
    if (v11)
    {
      *(_QWORD *)v20 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<llvm::APInt>]";
      *(_QWORD *)&v20[8] = 75;
      v12 = llvm::StringRef::find((uint64_t *)v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*(_QWORD *)&v20[8] >= v12)
        v13 = v12;
      else
        v13 = *(_QWORD *)&v20[8];
      v14 = *(_QWORD *)v20 + v13;
      v15 = *(_QWORD *)&v20[8] - v13;
      if (*(_QWORD *)&v20[8] - v13 >= 0x12)
        v16 = 18;
      else
        v16 = *(_QWORD *)&v20[8] - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<std::complex<llvm::APInt>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      a2 = v19;
    }
  }
  if (v6[475] == a2)
  {
    mlir::DenseElementsAttr::tryGetComplexIntValues(this, (uint64_t)v20);
    v7 = v21;
    if (v21)
    {
      v8 = v20[0];
      v22[0] = *(_OWORD *)&v20[1];
      *(_OWORD *)((char *)v22 + 15) = *(_OWORD *)&v20[16];
      v9 = *(_BYTE *)(*(_QWORD *)this + 24);
      v10 = (char *)operator new(0x28uLL);
      *(_QWORD *)v10 = &unk_1E0E4E9F8;
      v10[8] = v8;
      *(_OWORD *)(v10 + 9) = v22[0];
      *(_OWORD *)(v10 + 24) = *(_OWORD *)((char *)v22 + 15);
      *(_BYTE *)(a3 + 1) = v9;
      *(_QWORD *)(a3 + 8) = v10;
      v7 = 1;
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = v7;
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(this, a2, a3);
  }
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::BoolElementIterator,BOOL>::clone@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  __n128 result;

  v4 = (char *)operator new(0x20uLL);
  *(_QWORD *)v4 = &unk_1E0E4E968;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *((_QWORD *)v4 + 3) = *(_QWORD *)(a1 + 24);
  *a2 = v4;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::BoolElementIterator,BOOL>::at(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  if (*(_BYTE *)(a1 + 16))
    v2 = 0;
  else
    v2 = *(_QWORD *)(a1 + 24) + a2;
  return (*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + (v2 >> 3)) >> (v2 & 7)) & 1;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  __guard *v6;
  char v7;
  char v8;
  char v9;
  char *v10;
  __int128 v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[17];
  _OWORD v22[4];
  char v23;
  __int128 v24;
  _BYTE v25[23];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)v21 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APFloat]";
      *(_QWORD *)&v21[8] = 63;
      v13 = llvm::StringRef::find((uint64_t *)v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*(_QWORD *)&v21[8] >= v13)
        v14 = v13;
      else
        v14 = *(_QWORD *)&v21[8];
      v15 = *(_QWORD *)v21 + v14;
      v16 = *(_QWORD *)&v21[8] - v14;
      if (*(_QWORD *)&v21[8] - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *(_QWORD *)&v21[8] - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<llvm::APFloat,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      a2 = v20;
    }
  }
  if (v6[188] == a2)
  {
    mlir::DenseElementsAttr::tryGetFloatValues(this, (uint64_t)v21);
    v7 = v23;
    if (v23)
    {
      v8 = v21[0];
      v24 = *(_OWORD *)&v21[1];
      *(_OWORD *)v25 = v22[0];
      *(_QWORD *)&v25[15] = *(_QWORD *)((char *)v22 + 15);
      v9 = *(_BYTE *)(*(_QWORD *)this + 24);
      v10 = (char *)operator new(0x30uLL);
      *(_QWORD *)v10 = &unk_1E0E4E998;
      v10[8] = v8;
      v11 = *(_OWORD *)v25;
      *(_OWORD *)(v10 + 9) = v24;
      *(_OWORD *)(v10 + 25) = v11;
      *((_QWORD *)v10 + 5) = *(_QWORD *)&v25[15];
      *(_BYTE *)(a3 + 1) = v9;
      *(_QWORD *)(a3 + 8) = v10;
      v7 = 1;
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = v7;
  }
  else
  {
    _ZNK4mlir6detail17ElementsAttrTraitINS_24DenseIntOrFPElementsAttrEE12getValueImplINSt3__17complexIN4llvm7APFloatEEEJENS5_17integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(this, a2, a3);
  }
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::ComplexIntElementIterator,std::complex<llvm::APInt>>::clone@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  __n128 result;

  v4 = (char *)operator new(0x28uLL);
  *(_QWORD *)v4 = &unk_1E0E4E9F8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v4 + 24) = result;
  *a2 = v4;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::ComplexIntElementIterator,std::complex<llvm::APInt>>::at(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 24) + a2;
  v6 = v3;
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v4, a3);
}

void _ZNK4mlir6detail17ElementsAttrTraitINS_24DenseIntOrFPElementsAttrEE12getValueImplINSt3__17complexIN4llvm7APFloatEEEJENS5_17integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  __guard *v6;
  char v7;
  char v8;
  char v9;
  char *v10;
  __int128 v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[17];
  _OWORD v22[4];
  char v23;
  __int128 v24;
  _BYTE v25[23];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((v5 & 1) == 0)
  {
    v20 = a2;
    a2 = v20;
    if (v12)
    {
      *(_QWORD *)v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<llvm::APFloat>]";
      *(_QWORD *)&v21[8] = 77;
      v13 = llvm::StringRef::find((uint64_t *)v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*(_QWORD *)&v21[8] >= v13)
        v14 = v13;
      else
        v14 = *(_QWORD *)&v21[8];
      v15 = *(_QWORD *)v21 + v14;
      v16 = *(_QWORD *)&v21[8] - v14;
      if (*(_QWORD *)&v21[8] - v14 >= 0x12)
        v17 = 18;
      else
        v17 = *(_QWORD *)&v21[8] - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<std::complex<llvm::APFloat>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      a2 = v20;
    }
  }
  if (v6[477] == a2)
  {
    mlir::DenseElementsAttr::tryGetComplexFloatValues(this, (uint64_t)v21);
    v7 = v23;
    if (v23)
    {
      v8 = v21[0];
      v24 = *(_OWORD *)&v21[1];
      *(_OWORD *)v25 = v22[0];
      *(_QWORD *)&v25[15] = *(_QWORD *)((char *)v22 + 15);
      v9 = *(_BYTE *)(*(_QWORD *)this + 24);
      v10 = (char *)operator new(0x30uLL);
      *(_QWORD *)v10 = &unk_1E0E4EA28;
      v10[8] = v8;
      v11 = *(_OWORD *)v25;
      *(_OWORD *)(v10 + 9) = v24;
      *(_OWORD *)(v10 + 25) = v11;
      *((_QWORD *)v10 + 5) = *(_QWORD *)&v25[15];
      *(_BYTE *)(a3 + 1) = v9;
      *(_QWORD *)(a3 + 8) = v10;
      v7 = 1;
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = v7;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::FloatElementIterator,llvm::APFloat>::clone@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  __n128 result;

  v4 = (char *)operator new(0x30uLL);
  *(_QWORD *)v4 = &unk_1E0E4E998;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v4 + 24) = result;
  *((_QWORD *)v4 + 5) = *(_QWORD *)(a1 + 40);
  *a2 = v4;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::FloatElementIterator,llvm::APFloat>::at(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v6 = *(_OWORD *)(a1 + 32);
  v5 = v3 + a2;
  llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*(&v4, a3);
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::ComplexFloatElementIterator,std::complex<llvm::APFloat>>::clone@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  __n128 result;

  v4 = (char *)operator new(0x30uLL);
  *(_QWORD *)v4 = &unk_1E0E4EA28;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v4 + 24) = result;
  *((_QWORD *)v4 + 5) = *(_QWORD *)(a1 + 40);
  *a2 = v4;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::ComplexFloatElementIterator,std::complex<llvm::APFloat>>::at(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  unsigned int v9;
  void *__p;
  unsigned int v11;

  v5 = *(_OWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  v7 = *(_OWORD *)(a1 + 32);
  v6 = v4 + a2;
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v5, &v8);
  mlir::DenseElementsAttr::ComplexFloatElementIterator::mapElement((llvm::APInt *)&v8, (llvm::APFloatBase *)&v5, a3);
  if (v11 >= 0x41 && __p)
    operator delete[](__p);
  if (v9 >= 0x41)
  {
    if (v8)
      operator delete[](v8);
  }
}

BOOL mlir::detail::storage_user_base_impl::hasTrait<mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  __guard *v2;
  __guard v3;
  unsigned __int8 v4;
  __guard *v5;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __guard v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  unint64_t v30;

  if ((v1 & 1) == 0)
  {
    v27 = a1;
    v9 = v8;
    a1 = v27;
    if (v9)
    {
      v29 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr::Trait<Empty>]";
      v30 = 79;
      v10 = llvm::StringRef::find((uint64_t *)&v29, "DesiredTypeName = ", 0x12uLL, 0);
      if (v30 >= v10)
        v11 = v10;
      else
        v11 = v30;
      v12 = &v29[v11];
      v13 = v30 - v11;
      if (v30 - v11 >= 0x12)
        v14 = 18;
      else
        v14 = v30 - v11;
      v15 = v13 - v14;
      if (v15 >= v15 - 1)
        v16 = v15 - 1;
      else
        v16 = v15;
      mlir::detail::TypeIDResolver<mlir::TypedAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::TypedAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
      a1 = v27;
    }
  }
  v3 = v2[413];
  if ((v4 & 1) == 0)
  {
    v26 = v3;
    v28 = a1;
    v18 = v17;
    v3 = v26;
    a1 = v28;
    if (v18)
    {
      v29 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr::Trait<Empty>]";
      v30 = 82;
      v19 = llvm::StringRef::find((uint64_t *)&v29, "DesiredTypeName = ", 0x12uLL, 0);
      if (v30 >= v19)
        v20 = v19;
      else
        v20 = v30;
      v21 = &v29[v20];
      v22 = v30 - v20;
      if (v30 - v20 >= 0x12)
        v23 = 18;
      else
        v23 = v30 - v20;
      v24 = v22 - v23;
      if (v24 >= v24 - 1)
        v25 = v24 - 1;
      else
        v25 = v24;
      mlir::detail::TypeIDResolver<mlir::ElementsAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::ElementsAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v21[v23], v25);
      v3 = v26;
      a1 = v28;
    }
  }
  return v3 == a1 || v5[479] == a1;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_24DenseIntOrFPElementsAttrENS1_17DenseElementsAttrENSA_31DenseIntOrFPElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

void mlir::AbstractAttribute::get<mlir::DenseStringElementsAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>>((uint64_t)&v11);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::DenseStringElementsAttr,mlir::DenseElementsAttr,mlir::detail::DenseStringElementsAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_23DenseStringElementsAttrENS1_17DenseElementsAttrENSB_30DenseStringElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_23DenseStringElementsAttrENS1_17DenseElementsAttrENSA_30DenseStringElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getType;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      v15 = 65;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[212], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getValuesImpl;
  v2[1] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::isSplat;
  v2[2] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getShapedType;
  v2[3] = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(a1);
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v5)
    {
      v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr]";
      v14 = 68;
      v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v6)
        v7 = v6;
      else
        v7 = v14;
      v8 = &v13[v7];
      v9 = v14 - v7;
      if (v14 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v14 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ElementsAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[134], v2);
}

void mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getValuesImpl(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  char v12;

  v9 = a1;
  _ZNK4mlir6detail17ElementsAttrTraitINS_23DenseStringElementsAttrEE12getValueImplIN4llvm9StringRefEJENSt3__117integral_constantIbLb1EEEEEDaNS_6TypeIDET1_((uint64_t)&v9, (uint64_t)a2, (uint64_t)v10);
  if (v12)
  {
    v5 = v10[0];
    *(_BYTE *)a3 = v10[0];
    *(_BYTE *)(a3 + 1) = v10[1];
    v6 = v11;
    if (!v5)
      v11 = 0;
    *(_QWORD *)(a3 + 8) = v6;
    *(_BYTE *)(a3 + 16) = 1;
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    _ZNK4mlir6detail17ElementsAttrTraitINS_23DenseStringElementsAttrEE12getValueImplINS_9AttributeEJENSt3__117integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(&v9, a2, a3);
    if (v12)
      v7 = v10[0] == 0;
    else
      v7 = 0;
    if (v7)
    {
LABEL_11:
      v8 = v11;
      v11 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::isSplat(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 24);
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getShapedType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

void _ZNK4mlir6detail17ElementsAttrTraitINS_23DenseStringElementsAttrEE12getValueImplIN4llvm9StringRefEJENSt3__117integral_constantIbLb1EEEEEDaNS_6TypeIDET1_(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  __guard *v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  if ((v5 & 1) == 0)
  {
    v21 = a2;
    a2 = v21;
    if (v13)
    {
      *(_QWORD *)&v22 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::StringRef]";
      *((_QWORD *)&v22 + 1) = 65;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v22 + 1) >= v14)
        v15 = v14;
      else
        v15 = *((_QWORD *)&v22 + 1);
      v16 = v22 + v15;
      v17 = *((_QWORD *)&v22 + 1) - v15;
      if (*((_QWORD *)&v22 + 1) - v15 >= 0x12)
        v18 = 18;
      else
        v18 = *((_QWORD *)&v22 + 1) - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<llvm::StringRef,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v16 + v18, v20);
      a2 = v21;
    }
  }
  if (v6[481] == a2)
  {
    v22 = *(_OWORD *)(*(_QWORD *)a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v22);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
    {
      v9 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v22 = *(_OWORD *)(*(_QWORD *)a1 + 8);
      v10 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v22);
      mlir::ShapedType::getNumElements(v10, v11);
      v12 = *(_BYTE *)(*(_QWORD *)a1 + 24);
    }
    else
    {
      v12 = 0;
      v9 = 0;
    }
    *(_BYTE *)a3 = 1;
    *(_BYTE *)(a3 + 1) = v12;
    *(_QWORD *)(a3 + 8) = v9;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
}

void _ZNK4mlir6detail17ElementsAttrTraitINS_23DenseStringElementsAttrEE12getValueImplINS_9AttributeEJENSt3__117integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  void **p_vtable;
  char v7;
  uint64_t v8;
  uint64_t *ArgAttrsAttr;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  __int128 v22;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v5 & 1) == 0)
  {
    v21 = a2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    a2 = v21;
    if (v13)
    {
      *(_QWORD *)&v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::Attribute]";
      *((_QWORD *)&v22 + 1) = 65;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v22 + 1) >= v14)
        v15 = v14;
      else
        v15 = *((_QWORD *)&v22 + 1);
      v16 = v22 + v15;
      v17 = *((_QWORD *)&v22 + 1) - v15;
      if (*((_QWORD *)&v22 + 1) - v15 >= 0x12)
        v18 = 18;
      else
        v18 = *((_QWORD *)&v22 + 1) - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::Attribute,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v16 + v18, v20);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a2 = v21;
    }
  }
  if (p_vtable[507] == a2)
  {
    v8 = *a1;
    v22 = *(_OWORD *)(*a1 + 8);
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v22);
    mlir::ShapedType::getNumElements(ArgAttrsAttr, v10);
    v11 = *(_BYTE *)(*a1 + 24);
    v12 = operator new(0x18uLL);
    *v12 = &unk_1E0E4E9C8;
    v12[1] = v8;
    v12[2] = 0;
    *(_BYTE *)(a3 + 1) = v11;
    *(_QWORD *)(a3 + 8) = v12;
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = v7;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_23DenseStringElementsAttrENS1_17DenseElementsAttrENSA_30DenseStringElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

void mlir::AbstractAttribute::get<mlir::DenseResourceElementsAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>>((uint64_t)&v11);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::DenseResourceElementsAttr,mlir::Attribute,mlir::detail::DenseResourceElementsAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_25DenseResourceElementsAttrES2_NSB_32DenseResourceElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_25DenseResourceElementsAttrES2_NSA_32DenseResourceElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getType;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      v15 = 65;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[212], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getValuesImpl;
  v2[1] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::isSplat;
  v2[2] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getShapedType;
  v2[3] = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(a1);
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v5)
    {
      v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr]";
      v14 = 68;
      v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v6)
        v7 = v6;
      else
        v7 = v14;
      v8 = &v13[v7];
      v9 = v14 - v7;
      if (v14 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v14 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ElementsAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[134], v2);
}

void mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getValuesImpl(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

BOOL mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::isSplat(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = (uint64_t)a2;
  if (a2)
    a2 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*a2 + 8);
  return mlir::ElementsAttr::getNumElements(v2, (uint64_t)a2) == 1;
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getShapedType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_25DenseResourceElementsAttrES2_NSB_32DenseResourceElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[4];

  v6 = *(_QWORD *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_25DenseResourceElementsAttrES2_NSA_32DenseResourceElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  _QWORD *v7[2];
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::DenseResourceElementsAttr>(a2, (uint64_t)v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::DenseResourceElementsAttr>(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v3 = *(_QWORD *)(a1 + 8);
  v14 = *(_OWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = (_QWORD *)**a3;
    if (v4)
      v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  mlir::Attribute::getContext((mlir::Attribute *)&v9);
  v10 = v14;
  v11 = v15;
  *(_QWORD *)&v12 = v4;
  *((_QWORD *)&v12 + 1) = v5;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v13[0] = &mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id;
  v13[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail32DenseResourceElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_25DenseResourceElementsAttrEJRNS1_10ShapedTypeERNS1_25DialectResourceBlobHandleINS1_14BuiltinDialectEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_, (uint64_t)v13, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id, &v12, &v10);
}

uint64_t mlir::detail::StorageUserBase<mlir::DictionaryAttr,mlir::Attribute,mlir::detail::DictionaryAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

void _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DictionaryAttrES2_NSB_21DictionaryAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t CallableRegion;
  _QWORD v11[4];
  __int128 v12;

  v7 = *(__int128 **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  if (v6)
  {
    v8 = 16 * v6;
    do
    {
      v9 = *v7++;
      v12 = v9;
      CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v12);
      mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v11, CallableRegion);
      mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v11, *((uint64_t *)&v12 + 1));
      v8 -= 16;
    }
    while (v8);
  }
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DictionaryAttrES2_NSA_21DictionaryAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v5;

  *(_QWORD *)&v5 = a3;
  *((_QWORD *)&v5 + 1) = a4;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::DictionaryAttr>(a2, &v5);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::DictionaryAttr>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  mlir::DictionaryAttr *Context;
  uint64_t v4;
  unsigned int v5;
  _BYTE *v6;
  mlir::MLIRContext *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _BYTE v15[48];
  _QWORD *v16;
  unsigned int v17;
  _QWORD v18[7];

  v18[6] = *MEMORY[0x1E0C80C00];
  v12 = a1;
  v2 = *(_OWORD *)(a1 + 8);
  v10 = *a2;
  v11 = v2;
  mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<mlir::NamedAttribute>>,void>::replace((uint64_t)&v11, (uint64_t)&v10, (uint64_t)&v16);
  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v13 = v15;
  v14 = 0x300000000;
  v4 = v17;
  if (!v17)
  {
    v4 = 0;
    v7 = (mlir::MLIRContext *)v15;
    goto LABEL_9;
  }
  if (v17 < 4)
  {
    v6 = v15;
    v5 = v17;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v17, 16);
  v5 = v17;
  if (v17)
  {
    v6 = v13;
LABEL_7:
    memcpy(v6, v16, 16 * v5);
  }
  LODWORD(v14) = v4;
  v7 = (mlir::MLIRContext *)v13;
LABEL_9:
  v8 = mlir::DictionaryAttr::get(Context, v7, v4);
  if (v13 != v15)
    free(v13);
  if (v16 != v18)
    free(v16);
  return v8;
}

void mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<mlir::NamedAttribute>>,void>::replace(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  unsigned int v5;
  _QWORD *v6;
  BOOL v7;
  int v8;
  unsigned int v9;
  void *__src;
  unsigned int v11;
  int v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<mlir::NamedAttribute>,void>::replace(*(_QWORD *)(a1 + 8), a2, (uint64_t)&__src);
  v4 = (void *)(a3 + 16);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x300000000;
  v5 = v11;
  v6 = __src;
  if (v11)
    v7 = &__src == (void **)a3;
  else
    v7 = 1;
  if (v7)
    goto LABEL_14;
  if (__src == v13)
  {
    if (v11 < 4)
    {
      v9 = v11;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v11, 16);
      v9 = v11;
      v6 = __src;
      if (!v11)
      {
LABEL_12:
        *(_DWORD *)(a3 + 8) = v5;
        goto LABEL_13;
      }
      v4 = *(void **)a3;
    }
    memcpy(v4, v6, 16 * v9);
    v6 = __src;
    goto LABEL_12;
  }
  *(_QWORD *)a3 = __src;
  v8 = v12;
  *(_DWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 12) = v8;
  __src = v13;
  v12 = 0;
  v6 = v13;
LABEL_13:
  v11 = 0;
LABEL_14:
  if (v6 != v13)
    free(v6);
}

void mlir::AttrTypeSubElementHandler<llvm::ArrayRef<mlir::NamedAttribute>,void>::replace(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  unsigned int v17;
  _QWORD v18[2];
  _QWORD *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x300000000;
  if (a1)
  {
    v5 = v21;
    v6 = 16 * a1;
    do
    {
      while (1)
      {
        v7 = *(uint64_t **)a2;
        v8 = *(_QWORD *)(a2 + 8) - 2;
        *(_QWORD *)a2 += 16;
        *(_QWORD *)(a2 + 8) = v8;
        mlir::NamedAttribute::NamedAttribute(v18, *v7, v7[1]);
        v10 = v18[0];
        v9 = v18[1];
        v11 = v20;
        if (v20 >= HIDWORD(v20))
          break;
        v12 = &v19[2 * v20];
        *v12 = v18[0];
        v12[1] = v9;
        v13 = (v11 + 1);
        LODWORD(v20) = v11 + 1;
        v6 -= 16;
        if (!v6)
          goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      v14 = &v19[2 * v20];
      *v14 = v10;
      v14[1] = v9;
      v13 = (v20 + 1);
      LODWORD(v20) = v20 + 1;
      v6 -= 16;
    }
    while (v6);
LABEL_7:
    v15 = v19;
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0x300000000;
    if ((_DWORD)v13 && &v19 != (_QWORD **)a3)
    {
      if (v15 == v21)
      {
        v17 = v13;
        if (v13 < 4
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v13, 16),
              v17 = v20,
              v5 = v19,
              (_DWORD)v20))
        {
          memcpy(*(void **)a3, v5, 16 * v17);
          v5 = v19;
        }
        *(_DWORD *)(a3 + 8) = v13;
      }
      else
      {
        *(_QWORD *)a3 = v15;
        v16 = HIDWORD(v20);
        *(_DWORD *)(a3 + 8) = v13;
        *(_DWORD *)(a3 + 12) = v16;
        v19 = v21;
        HIDWORD(v20) = 0;
      }
      LODWORD(v20) = 0;
      v15 = v5;
    }
    if (v15 != v21)
      free(v15);
  }
  else
  {
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0x300000000;
  }
}

void mlir::AbstractAttribute::get<mlir::FloatAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::FloatAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::FloatAttr,mlir::Attribute,mlir::detail::FloatAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9FloatAttrES2_NSB_16FloatAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9FloatAttrES2_NSA_16FloatAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::FloatAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::FloatAttr>::getType;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      v15 = 65;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[212], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::FloatAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL mlir::detail::StorageUserBase<mlir::FloatAttr,mlir::Attribute,mlir::detail::FloatAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr::Trait<Empty>]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::TypedAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      a1 = v13;
    }
  }
  return v2[413] == a1;
}

void _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9FloatAttrES2_NSB_16FloatAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::detail::walkImmediateSubElementsImpl<mlir::FloatAttr>(a2, a3, a4, a5, a6);
}

void mlir::detail::walkImmediateSubElementsImpl<mlir::FloatAttr>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const llvm::detail::DoubleAPFloat *v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  uint64_t v13;
  _QWORD v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  v9 = (const llvm::detail::DoubleAPFloat *)(a1 + 3);
  v10 = (void *)a1[3];
  v13 = a1[1];
  v11 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v11 == v10)
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v14, v9);
  else
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v14, v9);
  v12[0] = a2;
  v12[1] = a3;
  v12[2] = a4;
  v12[3] = a5;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v12, v13);
  if (v11 == (void *)v14[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v14);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v14);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9FloatAttrES2_NSA_16FloatAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *v7[2];
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::FloatAttr>(a2, (uint64_t)v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::FloatAttr>(_QWORD *a1, uint64_t a2, uint64_t **a3)
{
  const llvm::detail::DoubleAPFloat *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  mlir::MLIRContext *Context;
  llvm::APFloatBase *AttributeUniquer;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];

  v17[3] = *MEMORY[0x1E0C80C00];
  v12 = a1;
  v4 = (const llvm::detail::DoubleAPFloat *)(a1 + 3);
  v5 = (void *)a1[3];
  v15 = a1[1];
  v6 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v6 == v5)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v17, v4);
    if (v15)
      goto LABEL_3;
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v17, v4);
    if (v15)
    {
LABEL_3:
      v7 = **a3;
      goto LABEL_6;
    }
  }
  v7 = 0;
LABEL_6:
  mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v13 = v7;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v13);
  AttributeUniquer = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(Context);
  v14[0] = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  v14[1] = Context;
  v10 = mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_, (uint64_t)v14, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, &v13, (uint64_t)&v16);
  if (v6 == (void *)v17[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v17);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v17);
  return v10;
}

void llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::detail::FloatAttrStorage>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(llvm::APFloatBase *a1, uint64_t a2)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;

  v2 = (llvm::detail::DoubleAPFloat *)(a2 + 24);
  v3 = *(void **)(a2 + 24);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v3)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
  else
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
}

void mlir::AbstractAttribute::get<mlir::IntegerAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::IntegerAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::IntegerAttr,mlir::Attribute,mlir::detail::IntegerAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerAttrES2_NSB_18IntegerAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerAttrES2_NSA_18IntegerAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::IntegerAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::IntegerAttr>::getType;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      v15 = 65;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[212], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::IntegerAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL mlir::detail::StorageUserBase<mlir::IntegerAttr,mlir::Attribute,mlir::detail::IntegerAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr::Trait<Empty>]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::TypedAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      a1 = v13;
    }
  }
  return v2[413] == a1;
}

void _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerAttrES2_NSB_18IntegerAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void **v11;
  uint64_t v12;
  _QWORD v13[4];
  uint64_t v14;
  void *__p;
  unsigned int v16;

  v11 = (const void **)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 8);
  v14 = v12;
  v16 = *(_DWORD *)(a2 + 24);
  if (v16 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, v11);
    v12 = v14;
  }
  else
  {
    __p = (void *)*v11;
  }
  v13[0] = a3;
  v13[1] = a4;
  v13[2] = a5;
  v13[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v13, v12);
  if (v16 >= 0x41)
  {
    if (__p)
      operator delete[](__p);
  }
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerAttrES2_NSA_18IntegerAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *v7[2];
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::IntegerAttr>(a2, (uint64_t)v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::IntegerAttr>(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  const void **v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 isSignlessInteger;
  mlir::MLIRContext *Context;
  mlir::BoolAttr *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  void *__p;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a1;
  v4 = (const void **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  v15 = v5;
  v17 = *(_DWORD *)(a1 + 24);
  if (v17 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, v4);
    if (v15)
      goto LABEL_3;
  }
  else
  {
    __p = (void *)*v4;
    if (v5)
    {
LABEL_3:
      v6 = **a3;
      goto LABEL_6;
    }
  }
  v6 = 0;
LABEL_6:
  mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v19 = v6;
  isSignlessInteger = mlir::Type::isSignlessInteger((mlir::Type *)&v19, 1);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v9 = Context;
  if (isSignlessInteger)
  {
    v10 = v17;
    if (v17 > 0x40)
      v11 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) == v10;
    else
      v11 = __p == 0;
    v14 = v11;
    v12 = mlir::BoolAttr::get(v9, (mlir::MLIRContext *)(v14 ^ 1u));
    if (v17 < 0x41)
      return v12;
  }
  else
  {
    v12 = mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(Context, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, &v19, (uint64_t)&__p);
    if (v17 < 0x41)
      return v12;
  }
  if (!__p)
    return v12;
  operator delete[](__p);
  return v12;
}

void llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::detail::IntegerAttrStorage>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (*(_DWORD *)(a2 + 24) >= 0x41u)
  {
    v2 = *(void **)(a2 + 16);
    if (v2)
      operator delete[](v2);
  }
}

uint64_t mlir::detail::StorageUserBase<mlir::IntegerSetAttr,mlir::Attribute,mlir::detail::IntegerSetAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14IntegerSetAttrES2_NSA_21IntegerSetAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  v6 = a2;
  v2 = *(_QWORD *)(a2 + 8);
  mlir::Attribute::getContext((mlir::Attribute *)&v6);
  v7 = v2;
  Context = (mlir::MLIRContext *)mlir::IntegerSet::getContext((mlir::IntegerSet *)&v7);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id;
  v8[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail21IntegerSetAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14IntegerSetAttrEJRNS1_10IntegerSetEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id, &v7);
}

void mlir::AbstractAttribute::get<mlir::OpaqueAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::OpaqueAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::OpaqueAttr,mlir::Attribute,mlir::detail::OpaqueAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueAttrES2_NSB_17OpaqueAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueAttrES2_NSA_17OpaqueAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::OpaqueAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::OpaqueAttr>::getType;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      v15 = 65;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[212], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::OpaqueAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

BOOL mlir::detail::StorageUserBase<mlir::OpaqueAttr,mlir::Attribute,mlir::detail::OpaqueAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr::Trait<Empty>]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::TypedAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      a1 = v13;
    }
  }
  return v2[413] == a1;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueAttrES2_NSB_17OpaqueAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 32);
  v9[0] = a3;
  v9[1] = a4;
  v9[2] = a5;
  v9[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v6);
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v7);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueAttrES2_NSA_17OpaqueAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *v7[2];
  uint64_t *v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::OpaqueAttr>(a2, v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::OpaqueAttr>(_QWORD *a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v10;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];
  uint64_t *v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD v20[2];

  v12 = a1;
  v3 = a1[4];
  if (!a1[1])
  {
    v4 = 0;
    v6 = a1[2];
    v5 = a1[3];
    if (v3)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v4 = **a2;
  v6 = a1[2];
  v5 = a1[3];
  if (!v3)
    goto LABEL_5;
LABEL_3:
  v7 = **a3;
LABEL_6:
  mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v13 = v4;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v13);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v14[0] = &mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id;
  v14[1] = Context;
  v20[0] = _ZN4llvm12function_refIFvPN4mlir6detail17OpaqueAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10OpaqueAttrEJRNS1_10StringAttrERNS_9StringRefERNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v20[1] = v14;
  v17 = v13;
  v18[0] = v6;
  v18[1] = v5;
  v19 = v7;
  v10 = llvm::hash_combine<mlir::StringAttr,llvm::StringRef,mlir::Type>(&v17, (uint64_t)v18, &v19);
  v15[0] = &v17;
  v15[1] = v20;
  v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id, v10, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

void mlir::AbstractAttribute::get<mlir::SparseElementsAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::SparseElementsAttr>>((uint64_t)&v11);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::SparseElementsAttr,mlir::Attribute,mlir::detail::SparseElementsAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18SparseElementsAttrES2_NSB_25SparseElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18SparseElementsAttrES2_NSA_25SparseElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::SparseElementsAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getType;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      v15 = 65;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[212], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getValuesImpl;
  v2[1] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::isSplat;
  v2[2] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getShapedType;
  v2[3] = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(a1);
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v5)
    {
      v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr]";
      v14 = 68;
      v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v6)
        v7 = v6;
      else
        v7 = v14;
      v8 = &v13[v7];
      v9 = v14 - v7;
      if (v14 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v14 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ElementsAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[134], v2);
}

void mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getValuesImpl(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t v3;

  v3 = a1;
  mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<mlir::Attribute,llvm::APInt,BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>((mlir::SparseElementsAttr *)&v3, a2, a3);
}

BOOL mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::isSplat(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = (uint64_t)a2;
  if (a2)
    a2 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*a2 + 8);
  return mlir::ElementsAttr::getNumElements(v2, (uint64_t)a2) == 1;
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getShapedType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<mlir::Attribute,llvm::APInt,BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::Attribute]";
      v18 = 65;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<mlir::Attribute,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (p_vtable[507] == (void *)a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<mlir::Attribute>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<llvm::APInt,BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<mlir::Attribute>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<mlir::Attribute>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<llvm::APInt,BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APInt]";
      v18 = 61;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<llvm::APInt,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (p_vtable[479] == (void *)a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APInt>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<mlir::Attribute>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  llvm::APFloatBase *ZeroAttr;
  uint64_t v5;
  uint64_t *ArgAttrsAttr;
  uint64_t v7;
  uint64_t *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _OWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD v28[3];
  _QWORD *v29;
  _OWORD v30[2];
  _OWORD *v31;
  unsigned __int8 v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  ZeroAttr = mlir::SparseElementsAttr::getZeroAttr(a1);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v30[0] = *(_OWORD *)(v5 + 8);
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
  mlir::ShapedType::getNumElements(ArgAttrsAttr, v7);
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v26);
  v8 = v26;
  v9 = (char *)v27 - (char *)v26;
  if (v27 == v26)
  {
    v11 = 0;
    v10 = 0;
  }
  else
  {
    if (v9 < 0)
      abort();
    v10 = (char *)operator new((char *)v27 - (char *)v26);
    v11 = &v10[8 * (v9 >> 3)];
    memcpy(v10, v8, v9);
  }
  v12 = operator new(0x38uLL);
  *v12 = &unk_1E0E05730;
  v12[1] = v10;
  v12[2] = v11;
  v12[3] = v11;
  v12[4] = v5;
  v12[5] = 0;
  v12[6] = ZeroAttr;
  v34 = v12;
  v13 = *(_QWORD **)a1;
  if (v13)
    v14 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v13 + 8);
  else
    v14 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v13, v14);
  v15 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
  v29 = v15;
  *(_QWORD *)&v30[0] = 0;
  v17 = (_QWORD *)v30 + 1;
  if (!v15)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)&v30[0];
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_16:
    v19 = (_QWORD *)(a2 + 32);
    goto LABEL_17;
  }
  if (v15 == v28)
  {
    v31 = (_OWORD *)((char *)v30 + 8);
    (*(void (**)(_QWORD *, char *))(v28[0] + 24))(v28, (char *)v30 + 8);
    v18 = v31;
  }
  else
  {
    v18 = (_OWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
    v31 = v18;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)&v30[0];
  *(_BYTE *)(a2 + 8) = 0;
  v16 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v18)
    goto LABEL_16;
  if (v18 == (_OWORD *)((char *)v30 + 8))
  {
    *(_QWORD *)(a2 + 32) = v16;
    (*(void (**)(char *))(*((_QWORD *)&v30[0] + 1) + 24))((char *)v30 + 8);
    v25 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v25)
      goto LABEL_23;
    goto LABEL_18;
  }
  v19 = &v31;
  *(_QWORD *)(a2 + 32) = v18;
LABEL_17:
  *v19 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_18:
  if (v31 == (_OWORD *)((char *)v30 + 8))
  {
    v20 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_23;
    v20 = 5;
    v17 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v20))(v17, v16);
LABEL_23:
  v21 = v29;
  if (v29 == v28)
  {
    v22 = 4;
    v21 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_28;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_28:
  v23 = v34;
  if (v34 == v33)
  {
    v24 = 4;
    v23 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_33;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_33:
  if (v8)
    operator delete(v8);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E698;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05730;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05730;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x38uLL);
  *v2 = &unk_1E0E05730;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  v2[6] = *(_QWORD *)(a1 + 48);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE7__cloneEPNS0_6__baseIST_EE(__n128 *a1, __n128 *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  a2->n128_u64[0] = (unint64_t)&unk_1E0E05730;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  v5 = (_BYTE *)a1->n128_u64[1];
  v4 = (_BYTE *)a1[1].n128_u64[0];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    a2->n128_u64[1] = (unint64_t)v7;
    a2[1].n128_u64[0] = (unint64_t)v7;
    v8 = &v7[8 * (v6 >> 3)];
    a2[1].n128_u64[1] = (unint64_t)v8;
    memcpy(v7, v5, v6);
    a2[1].n128_u64[0] = (unint64_t)v8;
  }
  result = a1[2];
  a2[3].n128_u64[0] = a1[3].n128_u64[0];
  a2[2] = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEEclEOl(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[2];

  v2 = a1[1];
  v3 = a1[2] - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return a1[6];
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return a1[6];
  }
  v7 = a1[5] + v4;
  v8[0] = a1[4];
  v8[1] = v7;
  return mlir::DenseElementsAttr::AttributeElementIterator::operator*(v8);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001812376BFLL)
    return a1 + 8;
  if (((v3 & 0x80000001812376BFLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001812376BFLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001812376BFLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_9AttributeEEENS_9FailureOrIN4llvm15mapped_iteratorINS4_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISD_EEdeclL_ZNS9_7declvalB8nn180100IS8_EEDTclsr3stdE9__declvalISB_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISB_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute>,mlir::Attribute>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E698;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute>,mlir::Attribute>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E698;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute>,mlir::Attribute>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E698;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute>,mlir::Attribute>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APInt>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APInt>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<llvm::APInt>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = BOOL]";
      v18 = 54;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<BOOL,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[473] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<BOOL>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<llvm::APInt>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  int64_t v8;
  char *v9;
  char *v10;
  unsigned int v11;
  void *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  uint64_t *v27;
  uint64_t *v28;
  void *__p;
  unsigned int Width;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _OWORD v35[2];
  _BYTE v36[32];
  _BYTE *v37;
  unsigned __int8 v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  *(_QWORD *)v36 = mlir::ElementsAttr::getElementType((uint64_t)v4, v5);
  Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v36);
  if (Width > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
  else
    __p = 0;
  v33[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<llvm::APInt,void>((mlir::DenseElementsAttr *)v33, (uint64_t)v36);
  if (!v39)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    goto LABEL_40;
  }
  v6 = v36[0];
  v35[0] = *(_OWORD *)&v36[1];
  *(_OWORD *)((char *)v35 + 15) = *(_OWORD *)&v36[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v27);
  v7 = v27;
  v8 = (char *)v28 - (char *)v27;
  if (v28 == v27)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      abort();
    v9 = (char *)operator new((char *)v28 - (char *)v27);
    v10 = &v9[8 * (v8 >> 3)];
    memcpy(v9, v7, v8);
  }
  v11 = Width;
  v12 = __p;
  Width = 0;
  v13 = (char *)operator new(0x50uLL);
  *(_QWORD *)v13 = &unk_1E0E05628;
  *((_QWORD *)v13 + 1) = v9;
  *((_QWORD *)v13 + 2) = v10;
  *((_QWORD *)v13 + 3) = v10;
  v13[32] = v6;
  *(_OWORD *)(v13 + 33) = v35[0];
  *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v35 + 15);
  *((_DWORD *)v13 + 18) = v11;
  *((_QWORD *)v13 + 8) = v12;
  v34 = v13;
  v14 = *(_QWORD **)a1;
  if (v14)
  {
    v15 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v14 + 8);
    v16 = v34;
    mlir::ElementsAttr::getNumElements((uint64_t)v14, v15);
    if (v16)
      goto LABEL_15;
LABEL_19:
    v32 = 0;
    *(_QWORD *)v36 = 0;
    v18 = &v36[8];
    goto LABEL_20;
  }
  v16 = v13;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v16)
    goto LABEL_19;
LABEL_15:
  if (v16 == v33)
  {
    v32 = v31;
    (*(void (**)(_QWORD *, _QWORD *))(v33[0] + 24))(v33, v31);
    v17 = v32;
    *(_QWORD *)v36 = 0;
    v18 = &v36[8];
    if (v32)
      goto LABEL_45;
LABEL_20:
    v37 = 0;
    v38 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v36;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_21:
    v19 = (_QWORD *)(a2 + 32);
    goto LABEL_22;
  }
  v17 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
  v32 = v17;
  *(_QWORD *)v36 = 0;
  v18 = &v36[8];
  if (!v17)
    goto LABEL_20;
LABEL_45:
  if (v17 == v31)
  {
    v37 = &v36[8];
    (*(void (**)(_QWORD *, _BYTE *))(v31[0] + 24))(v31, &v36[8]);
    v25 = v37;
  }
  else
  {
    v25 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
    v37 = v25;
  }
  v38 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v36;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v25)
    goto LABEL_21;
  if (v25 == &v36[8])
  {
    *(_QWORD *)(a2 + 32) = a2 + 8;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v36[8] + 24))(&v36[8]);
    v26 = v38;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v26)
      goto LABEL_28;
    goto LABEL_23;
  }
  v19 = &v37;
  *(_QWORD *)(a2 + 32) = v25;
LABEL_22:
  *v19 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_23:
  if (v37 == &v36[8])
  {
    v20 = 4;
  }
  else
  {
    if (!v37)
      goto LABEL_28;
    v20 = 5;
    v18 = v37;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v20))(v18);
LABEL_28:
  v21 = v32;
  if (v32 == v31)
  {
    v22 = 4;
    v21 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_33;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_33:
  v23 = v34;
  if (v34 == v33)
  {
    v24 = 4;
    v23 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_38;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_38:
  if (v7)
    operator delete(v7);
LABEL_40:
  if (Width >= 0x41)
  {
    if (__p)
      operator delete[](__p);
  }
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E3C8;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED1Ev(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &unk_1E0E05628;
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v2 = *(void **)(a1 + 64);
    if (v2)
      operator delete[](v2);
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED0Ev(_QWORD *__p)
{
  void *v2;
  void *v3;

  *__p = &unk_1E0E05628;
  if (*((_DWORD *)__p + 18) >= 0x41u)
  {
    v2 = (void *)__p[8];
    if (v2)
      operator delete[](v2);
  }
  v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;
  llvm::APInt *v9;
  const void **v10;
  unsigned int v11;

  v2 = operator new(0x50uLL);
  *v2 = &unk_1E0E05628;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  v9 = (llvm::APInt *)(v2 + 8);
  v10 = (const void **)(a1 + 64);
  v11 = *(_DWORD *)(a1 + 72);
  *((_DWORD *)v2 + 18) = v11;
  if (v11 > 0x40)
    llvm::APInt::initSlowCase(v9, v10);
  else
    *(_QWORD *)v9 = *v10;
  return v2;
}

llvm::APInt *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEPNS0_6__baseIST_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  llvm::APInt *result;
  const void **v11;
  unsigned int v12;

  *(_QWORD *)a2 = &unk_1E0E05628;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  v9 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v9;
  result = (llvm::APInt *)(a2 + 64);
  v11 = (const void **)(a1 + 64);
  v12 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a2 + 72) = v12;
  if (v12 > 0x40)
    return (llvm::APInt *)llvm::APInt::initSlowCase(result, v11);
  *(_QWORD *)result = *v11;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v2 = *(void **)(a1 + 64);
    if (v2)
      operator delete[](v2);
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;
  void *v3;

  if (*((_DWORD *)__p + 18) >= 0x41u)
  {
    v2 = (void *)__p[8];
    if (v2)
      operator delete[](v2);
  }
  v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEEclEOl(uint64_t a1@<X0>, _QWORD *a2@<X1>, llvm::APInt *a3@<X8>)
{
  _ZNSt3__128__invoke_void_return_wrapperIN4llvm5APIntELb0EE6__callB8nn180100IJRZNK4mlir18SparseElementsAttr20try_value_begin_implIS2_EENS5_9FailureOrINS1_15mapped_iteratorINS1_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS5_6detail17ElementsAttrTraitIS6_E13OverloadTokenISE_EEEUllE_lEEES2_DpOT_(a1 + 8, a2, a3);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000181237A63)
    return a1 + 8;
  if (((v3 & 0x8000000181237A63 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181237A63))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181237A63 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS_9FailureOrINS2_15mapped_iteratorINS2_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISD_EEdeclL_ZNS9_7declvalB8nn180100IS8_EEDTclsr3stdE9__declvalISB_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISB_EEEUllE_;
}

void _ZNSt3__128__invoke_void_return_wrapperIN4llvm5APIntELb0EE6__callB8nn180100IJRZNK4mlir18SparseElementsAttr20try_value_begin_implIS2_EENS5_9FailureOrINS1_15mapped_iteratorINS1_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS5_6detail17ElementsAttrTraitIS6_E13OverloadTokenISE_EEEUllE_lEEES2_DpOT_(uint64_t a1@<X0>, _QWORD *a2@<X1>, llvm::APInt *a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void **v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if ((v4 & 0x7FFFFFFF8) == 0)
  {
LABEL_5:
    v7 = (const void **)(a1 + 56);
    v8 = *(_DWORD *)(a1 + 64);
    *((_DWORD *)a3 + 2) = v8;
    if (v8 > 0x40)
    {
      llvm::APInt::initSlowCase(a3, v7);
      return;
    }
    v9 = (uint64_t)*v7;
    goto LABEL_14;
  }
  v5 = 0;
  v6 = (v4 >> 3);
  while (*(_QWORD *)(*(_QWORD *)a1 + 8 * v5) != *a2)
  {
    if (v6 == ++v5)
      goto LABEL_5;
  }
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 40) + v5;
  if (*(_BYTE *)(a1 + 32))
    v12 = 0;
  v13 = v11 + 7;
  v14 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v11 == 1)
    v14 = 1;
  v15 = v14 * v12;
  if (v11 == 1)
  {
    v9 = (*(unsigned __int8 *)(v10 + (v15 >> 3)) >> (v15 & 7)) & 1;
    *((_DWORD *)a3 + 2) = 1;
LABEL_14:
    *(_QWORD *)a3 = v9;
    return;
  }
  *((_DWORD *)a3 + 2) = v11;
  if (v11 > 0x40)
  {
    llvm::APInt::initSlowCase(a3, 0, 0);
    if (*((_DWORD *)a3 + 2) >= 0x41u)
      a3 = *(llvm::APInt **)a3;
    if (v13 >= 8)
      goto LABEL_22;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    if (v13 >= 8)
LABEL_22:
      memmove(a3, (const void *)(v10 + (v15 >> 3)), v13 >> 3);
  }
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt>,llvm::APInt>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E3C8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt>,llvm::APInt>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E3C8;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt>,llvm::APInt>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E3C8;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt>,llvm::APInt>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<BOOL>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<BOOL>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<BOOL>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned char]";
      v18 = 63;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<unsigned char,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[9] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned char>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<BOOL>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  uint64_t *v9;
  int64_t v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD v29[3];
  _QWORD *v30;
  _OWORD v31[2];
  _OWORD *v32;
  unsigned __int8 v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v31[0] = *(_OWORD *)(v4 + 8);
  *(_QWORD *)&v31[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v31);
  if (!mlir::Type::isInteger((mlir::Type *)v31, 1))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(unsigned __int8 *)(v4 + 24);
  v31[0] = *(_OWORD *)(v4 + 8);
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v31);
  mlir::ShapedType::getNumElements(ArgAttrsAttr, v8);
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v27);
  v9 = v27;
  v10 = (char *)v28 - (char *)v27;
  if (v28 == v27)
  {
    v11 = 0;
    v12 = 0;
  }
  else
  {
    if (v10 < 0)
      abort();
    v11 = (char *)operator new((char *)v28 - (char *)v27);
    v12 = &v11[8 * (v10 >> 3)];
    memcpy(v11, v9, v10);
  }
  v13 = operator new(0x40uLL);
  *v13 = &unk_1E0E05C00;
  v13[1] = v11;
  v13[2] = v12;
  v13[3] = v12;
  v13[4] = v5;
  v13[5] = v6;
  v13[6] = 0;
  *((_BYTE *)v13 + 56) = 0;
  v35 = v13;
  v14 = *(_QWORD **)a1;
  if (v14)
    v15 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v14 + 8);
  else
    v15 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v14, v15);
  v16 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
  v30 = v16;
  *(_QWORD *)&v31[0] = 0;
  v18 = (_QWORD *)v31 + 1;
  if (!v16)
  {
    v32 = 0;
    v33 = 1;
    *(_QWORD *)a2 = *(_QWORD *)&v31[0];
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v20 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v16 == v29)
  {
    v32 = (_OWORD *)((char *)v31 + 8);
    (*(void (**)(_QWORD *, char *))(v29[0] + 24))(v29, (char *)v31 + 8);
    v19 = v32;
  }
  else
  {
    v19 = (_OWORD *)(*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
    v32 = v19;
  }
  v33 = 1;
  *(_QWORD *)a2 = *(_QWORD *)&v31[0];
  *(_BYTE *)(a2 + 8) = 0;
  v17 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v19)
    goto LABEL_18;
  if (v19 == (_OWORD *)((char *)v31 + 8))
  {
    *(_QWORD *)(a2 + 32) = v17;
    (*(void (**)(char *))(*((_QWORD *)&v31[0] + 1) + 24))((char *)v31 + 8);
    v26 = v33;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v26)
      goto LABEL_25;
    goto LABEL_20;
  }
  v20 = &v32;
  *(_QWORD *)(a2 + 32) = v19;
LABEL_19:
  *v20 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v32 == (_OWORD *)((char *)v31 + 8))
  {
    v21 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_25;
    v21 = 5;
    v18 = v32;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v18 + 8 * v21))(v18, v17);
LABEL_25:
  v22 = v30;
  if (v30 == v29)
  {
    v23 = 4;
    v22 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_30;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_30:
  v24 = v35;
  if (v35 == v34)
  {
    v25 = 4;
    v24 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_35;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_35:
  if (v9)
    operator delete(v9);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E6F8;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05C00;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05C00;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E0E05C00;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 41) = *(_OWORD *)(a1 + 41);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_1E0E05C00;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 41) = *(_OWORD *)(a1 + 41);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

BOOL _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_BYTE *)(a1 + 56) != 0;
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_BYTE *)(a1 + 56) != 0;
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return (*(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + (v7 >> 3)) >> (v7 & 7)) & 1;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000181237DE9)
    return a1 + 8;
  if (((v3 & 0x8000000181237DE9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181237DE9))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181237DE9 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL>,BOOL>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E6F8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL>,BOOL>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E6F8;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL>,BOOL>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E6F8;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL>,BOOL>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned char>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned char>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<unsigned char>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned short]";
      v18 = 64;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<unsigned short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[15] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned short>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<unsigned char>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<unsigned char,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E05D08;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  v9[56] = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E788;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05D08;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05D08;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E0E05D08;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 41) = *(_OWORD *)(a1 + 41);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_1E0E05D08;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 41) = *(_OWORD *)(a1 + 41);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(unsigned __int8 *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(unsigned __int8 *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000181238157)
    return a1 + 8;
  if (((v3 & 0x8000000181238157 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181238157))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181238157 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char>,unsigned char>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E788;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char>,unsigned char>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E788;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char>,unsigned char>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E788;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char>,unsigned char>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned short>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned short>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<unsigned short>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned int]";
      v18 = 62;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<unsigned int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[11] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned int>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<unsigned short>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<unsigned short,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E05F18;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_WORD *)v9 + 28) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E8A8;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05F18;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05F18;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E0E05F18;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 42) = *(_OWORD *)(a1 + 42);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_1E0E05F18;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 42) = *(_OWORD *)(a1 + 42);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(unsigned __int16 *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(unsigned __int16 *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 2 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000181238519)
    return a1 + 8;
  if (((v3 & 0x8000000181238519 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181238519))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181238519 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short>,unsigned short>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E8A8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short>,unsigned short>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E8A8;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short>,unsigned short>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E8A8;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short>,unsigned short>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned int>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned int>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<unsigned int>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned long long]";
      v18 = 68;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<unsigned long long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[17] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long long>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<unsigned int>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<unsigned int,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E05DB8;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_DWORD *)v9 + 14) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E7E8;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05DB8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05DB8;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E0E05DB8;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 44) = *(_OWORD *)(a1 + 44);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_1E0E05DB8;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(unsigned int *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(unsigned int *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001812388DBLL)
    return a1 + 8;
  if (((v3 & 0x80000001812388DBLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001812388DBLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001812388DBLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int>,unsigned int>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E7E8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int>,unsigned int>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E7E8;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int>,unsigned int>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E7E8;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int>,unsigned int>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long long>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<unsigned long long>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = signed char]";
      v18 = 61;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<signed char,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[6] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<signed char>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<unsigned long long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E05FC8;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_QWORD *)v9 + 7) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E908;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05FC8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05FC8;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x40uLL);
  *v2 = &unk_1E0E05FC8;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_1E0E05FC8;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000181238C9DLL)
    return a1 + 8;
  if (((v3 & 0x8000000181238C9DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181238C9DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181238C9DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long>,unsigned long long>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E908;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long>,unsigned long long>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E908;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long>,unsigned long long>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E908;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long>,unsigned long long>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<signed char>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<signed char>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<signed char>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = short]";
      v18 = 55;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[14] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<short>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<signed char>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<signed char,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E05BA8;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  v9[56] = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E6C8;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05BA8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05BA8;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E0E05BA8;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 41) = *(_OWORD *)(a1 + 41);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_1E0E05BA8;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 41) = *(_OWORD *)(a1 + 41);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(char *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(char *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(char *)(*(_QWORD *)(a1 + 32) + v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123905FLL)
    return a1 + 8;
  if (((v3 & 0x800000018123905FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123905FLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123905FLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char>,signed char>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E6C8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char>,signed char>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E6C8;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char>,signed char>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E6C8;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char>,signed char>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<short>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<short>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<short>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = int]";
      v18 = 53;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[10] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<int>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<short>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<short,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E05EC0;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_WORD *)v9 + 28) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E878;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05EC0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05EC0;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E0E05EC0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 42) = *(_OWORD *)(a1 + 42);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_1E0E05EC0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 42) = *(_OWORD *)(a1 + 42);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(__int16 *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(__int16 *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(__int16 *)(*(_QWORD *)(a1 + 32) + 2 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000181239421)
    return a1 + 8;
  if (((v3 & 0x8000000181239421 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181239421))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181239421 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short>,short>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E878;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short>,short>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E878;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short>,short>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E878;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short>,short>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<int>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<int>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<int>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = long long]";
      v18 = 59;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<long long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[16] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<long long>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<int>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<int,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E05D60;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_DWORD *)v9 + 14) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E7B8;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05D60;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05D60;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E0E05D60;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 44) = *(_OWORD *)(a1 + 44);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_1E0E05D60;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(unsigned int *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(unsigned int *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001812397E3)
    return a1 + 8;
  if (((v3 & 0x80000001812397E3 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001812397E3))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001812397E3 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int>,int>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E7B8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int>,int>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E7B8;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int>,int>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E7B8;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int>,int>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<long long>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<long long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<long long>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = short]";
      v18 = 55;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[14] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<short>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<long long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<long long,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E05F70;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_QWORD *)v9 + 7) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E8D8;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05F70;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05F70;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x40uLL);
  *v2 = &unk_1E0E05F70;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_1E0E05F70;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000181239BA5)
    return a1 + 8;
  if (((v3 & 0x8000000181239BA5 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181239BA5))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181239BA5 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long>,long long>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E8D8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long>,long long>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E8D8;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long>,long long>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E8D8;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long>,long long>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned short]";
      v18 = 64;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<unsigned short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[15] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned short>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = int]";
      v18 = 53;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[10] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<int>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned int]";
      v18 = 62;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<unsigned int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[11] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned int>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = long]";
      v18 = 54;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[12] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<long>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<long>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned long]";
      v18 = 63;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<unsigned long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[13] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<long long,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E05E10;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_QWORD *)v9 + 7) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E818;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05E10;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05E10;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x40uLL);
  *v2 = &unk_1E0E05E10;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_1E0E05E10;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000181239F67)
    return a1 + 8;
  if (((v3 & 0x8000000181239F67 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181239F67))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181239F67 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long>,long>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E818;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long>,long>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E818;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long>,long>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E818;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long>,long>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<unsigned long>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<llvm::APInt>]";
      v18 = 75;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<llvm::APInt>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[475] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APInt>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<unsigned long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E05E68;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_QWORD *)v9 + 7) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E848;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05E68;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05E68;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x40uLL);
  *v2 = &unk_1E0E05E68;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_1E0E05E68;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123A329)
    return a1 + 8;
  if (((v3 & 0x800000018123A329 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123A329))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123A329 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long>,unsigned long>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E848;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long>,unsigned long>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E848;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long>,unsigned long>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E848;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long>,unsigned long>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APInt>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APInt>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<llvm::APInt>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned char>]";
      v18 = 77;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<unsigned char>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (p_vtable[511] == (void *)a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned char>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<llvm::APInt>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  void *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE *v26;
  int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  void *v31;
  unsigned int v32;
  void *__p;
  unsigned int v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _OWORD v39[2];
  _BYTE v40[32];
  _BYTE *v41;
  unsigned __int8 v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::getZeroValue<std::complex<llvm::APInt>>((_QWORD **)a1, &v31);
  v37[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetComplexIntValues((mlir::DenseElementsAttr *)v37, (uint64_t)v40);
  if (!v43)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    goto LABEL_34;
  }
  v4 = v40[0];
  v39[0] = *(_OWORD *)&v40[1];
  *(_OWORD *)((char *)v39 + 15) = *(_OWORD *)&v40[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v29);
  v5 = v29;
  v6 = (char *)v30 - (char *)v29;
  v28 = v29;
  if (v30 == v29)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v30 - (char *)v29);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = v32;
  v10 = v31;
  v11 = v34;
  v12 = __p;
  v32 = 0;
  v34 = 0;
  v13 = (char *)operator new(0x60uLL);
  *(_QWORD *)v13 = &unk_1E0E05788;
  *((_QWORD *)v13 + 1) = v7;
  *((_QWORD *)v13 + 2) = v8;
  *((_QWORD *)v13 + 3) = v8;
  v13[32] = v4;
  *(_OWORD *)(v13 + 33) = v39[0];
  *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v39 + 15);
  *((_DWORD *)v13 + 18) = v9;
  *((_QWORD *)v13 + 8) = v10;
  *((_DWORD *)v13 + 22) = v11;
  *((_QWORD *)v13 + 10) = v12;
  v38 = v13;
  v14 = *(_QWORD **)a1;
  if (v14)
  {
    v15 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v14 + 8);
    mlir::ElementsAttr::getNumElements((uint64_t)v14, v15);
    v16 = v38;
    v17 = v28;
    if (v38)
      goto LABEL_9;
LABEL_13:
    v36 = 0;
    *(_QWORD *)v40 = 0;
    v19 = &v40[8];
    goto LABEL_14;
  }
  mlir::ElementsAttr::getNumElements(0, 0);
  v16 = v38;
  v17 = v28;
  if (!v38)
    goto LABEL_13;
LABEL_9:
  if (v16 == v37)
  {
    v36 = v35;
    (*(void (**)(_QWORD *, _QWORD *))(v37[0] + 24))(v37, v35);
    v18 = v36;
    *(_QWORD *)v40 = 0;
    v19 = &v40[8];
    if (v36)
      goto LABEL_42;
LABEL_14:
    v41 = 0;
    v42 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v40;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_15:
    v20 = (_QWORD *)(a2 + 32);
    goto LABEL_16;
  }
  v18 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
  v36 = v18;
  *(_QWORD *)v40 = 0;
  v19 = &v40[8];
  if (!v18)
    goto LABEL_14;
LABEL_42:
  if (v18 == v35)
  {
    v41 = &v40[8];
    (*(void (**)(_QWORD *, _BYTE *))(v35[0] + 24))(v35, &v40[8]);
    v26 = v41;
  }
  else
  {
    v26 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v18 + 16))(v18);
    v41 = v26;
  }
  v42 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v40;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v26)
    goto LABEL_15;
  if (v26 == &v40[8])
  {
    *(_QWORD *)(a2 + 32) = a2 + 8;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v40[8] + 24))(&v40[8]);
    v27 = v42;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v27)
      goto LABEL_22;
    goto LABEL_17;
  }
  v20 = &v41;
  *(_QWORD *)(a2 + 32) = v26;
LABEL_16:
  *v20 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_17:
  if (v41 == &v40[8])
  {
    v21 = 4;
  }
  else
  {
    if (!v41)
      goto LABEL_22;
    v21 = 5;
    v19 = v41;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v21))(v19);
LABEL_22:
  v22 = v36;
  if (v36 == v35)
  {
    v23 = 4;
    v22 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_27;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_27:
  v24 = v38;
  if (v38 == v37)
  {
    v25 = 4;
    v24 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_32;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_32:
  if (v17)
    operator delete(v17);
LABEL_34:
  if (v34 >= 0x41 && __p)
    operator delete[](__p);
  if (v32 >= 0x41)
  {
    if (v31)
      operator delete[](v31);
  }
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E458;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

void mlir::SparseElementsAttr::getZeroValue<std::complex<llvm::APInt>>(_QWORD **a1@<X0>, void **a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int Width;
  void *v6;
  void **v7;
  unsigned int v8;
  void *__p;
  unsigned int v10;
  uint64_t ElementType;

  v3 = *a1;
  if (*a1)
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v3 + 8);
  else
    v4 = 0;
  ElementType = mlir::ElementsAttr::getElementType((uint64_t)v3, v4);
  Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&ElementType);
  v10 = Width;
  if (Width <= 0x40)
  {
    v6 = 0;
    __p = 0;
    *((_DWORD *)a2 + 2) = Width;
LABEL_8:
    *a2 = v6;
    v7 = a2 + 2;
    *((_DWORD *)a2 + 6) = Width;
LABEL_9:
    *v7 = __p;
    return;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
  Width = v10;
  *((_DWORD *)a2 + 2) = v10;
  if (Width <= 0x40)
  {
    v6 = __p;
    goto LABEL_8;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)a2, (const void **)&__p);
  v8 = v10;
  v7 = a2 + 2;
  *((_DWORD *)a2 + 6) = v10;
  if (v8 <= 0x40)
    goto LABEL_9;
  llvm::APInt::initSlowCase((llvm::APInt *)(a2 + 2), (const void **)&__p);
  if (v10 >= 0x41)
  {
    if (__p)
      operator delete[](__p);
  }
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEED1Ev(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &unk_1E0E05788;
  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    v2 = *(void **)(a1 + 80);
    if (v2)
      operator delete[](v2);
  }
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v3 = *(void **)(a1 + 64);
    if (v3)
      operator delete[](v3);
  }
  v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = v4;
    operator delete(v4);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEED0Ev(_QWORD *__p)
{
  void *v2;
  void *v3;
  void *v4;

  *__p = &unk_1E0E05788;
  if (*((_DWORD *)__p + 22) >= 0x41u)
  {
    v2 = (void *)__p[10];
    if (v2)
      operator delete[](v2);
  }
  if (*((_DWORD *)__p + 18) >= 0x41u)
  {
    v3 = (void *)__p[8];
    if (v3)
      operator delete[](v3);
  }
  v4 = (void *)__p[1];
  if (v4)
  {
    __p[2] = v4;
    operator delete(v4);
  }
  operator delete(__p);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;
  llvm::APInt *v9;
  const void **v10;
  unsigned int v11;
  llvm::APInt *v12;
  const void **v13;
  unsigned int v14;
  unsigned int v16;

  v2 = operator new(0x60uLL);
  *v2 = &unk_1E0E05788;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  v9 = (llvm::APInt *)(v2 + 8);
  v10 = (const void **)(a1 + 64);
  v11 = *(_DWORD *)(a1 + 72);
  *((_DWORD *)v2 + 18) = v11;
  if (v11 > 0x40)
  {
    llvm::APInt::initSlowCase(v9, v10);
    v12 = (llvm::APInt *)(v2 + 10);
    v13 = (const void **)(a1 + 80);
    v16 = *(_DWORD *)(a1 + 88);
    *((_DWORD *)v2 + 22) = v16;
    if (v16 > 0x40)
      goto LABEL_6;
  }
  else
  {
    *(_QWORD *)v9 = *v10;
    v12 = (llvm::APInt *)(v2 + 10);
    v13 = (const void **)(a1 + 80);
    v14 = *(_DWORD *)(a1 + 88);
    *((_DWORD *)v2 + 22) = v14;
    if (v14 > 0x40)
    {
LABEL_6:
      llvm::APInt::initSlowCase(v12, v13);
      return v2;
    }
  }
  *(_QWORD *)v12 = *v13;
  return v2;
}

llvm::APInt *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7__cloneEPNS0_6__baseISV_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  llvm::APInt *v10;
  const void **v11;
  unsigned int v12;
  llvm::APInt *result;
  const void **v14;
  unsigned int v15;
  unsigned int v16;

  *(_QWORD *)a2 = &unk_1E0E05788;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  v9 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v9;
  v10 = (llvm::APInt *)(a2 + 64);
  v11 = (const void **)(a1 + 64);
  v12 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a2 + 72) = v12;
  if (v12 > 0x40)
  {
    llvm::APInt::initSlowCase(v10, v11);
    result = (llvm::APInt *)(a2 + 80);
    v14 = (const void **)(a1 + 80);
    v16 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 88) = v16;
    if (v16 > 0x40)
      return (llvm::APInt *)llvm::APInt::initSlowCase(result, v14);
  }
  else
  {
    *(_QWORD *)v10 = *v11;
    result = (llvm::APInt *)(a2 + 80);
    v14 = (const void **)(a1 + 80);
    v15 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 88) = v15;
    if (v15 > 0x40)
      return (llvm::APInt *)llvm::APInt::initSlowCase(result, v14);
  }
  *(_QWORD *)result = *v14;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7destroyEv(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    v2 = *(void **)(a1 + 80);
    if (v2)
      operator delete[](v2);
  }
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v3 = *(void **)(a1 + 64);
    if (v3)
      operator delete[](v3);
  }
  v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = v4;
    operator delete(v4);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;
  void *v3;
  void *v4;

  if (*((_DWORD *)__p + 22) >= 0x41u)
  {
    v2 = (void *)__p[10];
    if (v2)
      operator delete[](v2);
  }
  if (*((_DWORD *)__p + 18) >= 0x41u)
  {
    v3 = (void *)__p[8];
    if (v3)
      operator delete[](v3);
  }
  v4 = (void *)__p[1];
  if (v4)
  {
    __p[2] = v4;
    operator delete(v4);
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEEclEOl(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  unsigned int v10;
  llvm::APInt *v11;
  const void **v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16) - v5;
  if ((v6 & 0x7FFFFFFF8) == 0)
  {
LABEL_5:
    v9 = (const void **)(a1 + 64);
    v10 = *(_DWORD *)(a1 + 72);
    a3[2] = v10;
    if (v10 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a3, v9);
      v11 = (llvm::APInt *)(a3 + 4);
      v12 = (const void **)(a1 + 80);
      v15 = *(_DWORD *)(a1 + 88);
      a3[6] = v15;
      if (v15 > 0x40)
        goto LABEL_7;
    }
    else
    {
      *(_QWORD *)a3 = *v9;
      v11 = (llvm::APInt *)(a3 + 4);
      v12 = (const void **)(a1 + 80);
      v13 = *(_DWORD *)(a1 + 88);
      a3[6] = v13;
      if (v13 > 0x40)
      {
LABEL_7:
        llvm::APInt::initSlowCase(v11, v12);
        return;
      }
    }
    *(_QWORD *)v11 = *v12;
    return;
  }
  v7 = 0;
  v8 = (v6 >> 3);
  while (*(_QWORD *)(v5 + 8 * v7) != *a2)
  {
    if (v8 == ++v7)
      goto LABEL_5;
  }
  v16 = *(_OWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 48) + v7;
  v18 = v14;
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v16, a3);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123A71FLL)
    return a1 + 8;
  if (((v3 & 0x800000018123A71FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123A71FLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123A71FLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIN4llvm5APIntEEEEENS_9FailureOrINS4_15mapped_iteratorINS4_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS2_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISD_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>>,std::complex<llvm::APInt>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E458;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>>,std::complex<llvm::APInt>>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E458;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>>,std::complex<llvm::APInt>>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E458;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>>,std::complex<llvm::APInt>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned char>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned char>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned char>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned short>]";
      v18 = 78;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<unsigned short>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[3] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned short>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned char>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned char>,unsigned char,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E05940;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_WORD *)v9 + 28) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E548;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05940;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05940;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E0E05940;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 42) = *(_OWORD *)(a1 + 42);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_1E0E05940;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 42) = *(_OWORD *)(a1 + 42);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(unsigned __int16 *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(unsigned __int16 *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 2 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123AAE1)
    return a1 + 8;
  if (((v3 & 0x800000018123AAE1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123AAE1))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123AAE1 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIhEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>>,std::complex<unsigned char>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E548;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>>,std::complex<unsigned char>>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E548;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>>,std::complex<unsigned char>>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E548;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>>,std::complex<unsigned char>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned short>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned short>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned short>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned int>]";
      v18 = 76;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<unsigned int>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[1] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned int>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned short>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned short>,unsigned short,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E05AA0;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_DWORD *)v9 + 14) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E608;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05AA0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05AA0;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E0E05AA0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 44) = *(_OWORD *)(a1 + 44);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_1E0E05AA0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(unsigned int *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(unsigned int *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123AEF5)
    return a1 + 8;
  if (((v3 & 0x800000018123AEF5 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123AEF5))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123AEF5 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexItEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>>,std::complex<unsigned short>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E608;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>>,std::complex<unsigned short>>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E608;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>>,std::complex<unsigned short>>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E608;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>>,std::complex<unsigned short>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned int>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned int>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned int>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned long long>]";
      v18 = 82;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<unsigned long long>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[5] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned long long>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned int>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned int>,unsigned int,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E059F0;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_QWORD *)v9 + 7) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E5A8;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E059F0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E059F0;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x40uLL);
  *v2 = &unk_1E0E059F0;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_1E0E059F0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123B309)
    return a1 + 8;
  if (((v3 & 0x800000018123B309 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123B309))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123B309 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIjEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>>,std::complex<unsigned int>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E5A8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>>,std::complex<unsigned int>>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E5A8;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>>,std::complex<unsigned int>>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E5A8;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>>,std::complex<unsigned int>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned long long>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned long long>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned long long>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<signed char>]";
      v18 = 75;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<signed char>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (p_vtable[508] == (void *)a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<signed char>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned long long>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28[3];
  uint64_t *v29;
  _OWORD v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v28[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned long long>,unsigned long long,void>(v28, (uint64_t)v31);
  if (!v34)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v31[0];
  v30[0] = *(_OWORD *)&v31[1];
  *(_QWORD *)((char *)v30 + 15) = *(_QWORD *)&v31[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v24);
  v5 = v24;
  v6 = (char *)v25 - (char *)v24;
  if (v25 == v24)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v25 - (char *)v24);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x48uLL);
  *(_QWORD *)v9 = &unk_1E0E05B50;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v30[0];
  v10 = *(_QWORD *)((char *)v30 + 15);
  *((_QWORD *)v9 + 7) = 0;
  *((_QWORD *)v9 + 8) = 0;
  *((_QWORD *)v9 + 6) = v10;
  v29 = (uint64_t *)v9;
  v11 = *(_QWORD **)a1;
  if (v11)
    v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v11 + 8);
  else
    v12 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v11, v12);
  v13 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v27 = v13;
  *(_QWORD *)v31 = 0;
  v15 = &v31[8];
  if (!v13)
  {
    v32 = 0;
    v33 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v31;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v17 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v13 == v26)
  {
    v32 = &v31[8];
    (*(void (**)(_QWORD *, _BYTE *))(v26[0] + 24))(v26, &v31[8]);
    v16 = v32;
  }
  else
  {
    v16 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
    v32 = v16;
  }
  v33 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v31;
  *(_BYTE *)(a2 + 8) = 0;
  v14 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v16)
    goto LABEL_18;
  if (v16 == &v31[8])
  {
    *(_QWORD *)(a2 + 32) = v14;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v31[8] + 24))(&v31[8]);
    v23 = v33;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v23)
      goto LABEL_25;
    goto LABEL_20;
  }
  v17 = &v32;
  *(_QWORD *)(a2 + 32) = v16;
LABEL_19:
  *v17 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v32 == &v31[8])
  {
    v18 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_25;
    v18 = 5;
    v15 = v32;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v18))(v15, v14);
LABEL_25:
  v19 = v27;
  if (v27 == v26)
  {
    v20 = 4;
    v19 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_30;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_30:
  v21 = v29;
  if (v29 == v28)
  {
    v22 = 4;
    v21 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_35;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E668;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05B50;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05B50;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x48uLL);
  *v2 = &unk_1E0E05B50;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  v2[8] = *(_QWORD *)(a1 + 64);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_1E0E05B50;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123B71DLL)
    return a1 + 8;
  if (((v3 & 0x800000018123B71DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123B71DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123B71DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIyEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>>,std::complex<unsigned long long>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E668;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>>,std::complex<unsigned long long>>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E668;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>>,std::complex<unsigned long long>>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E668;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>>,std::complex<unsigned long long>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<signed char>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<signed char>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<signed char>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<short>]";
      v18 = 69;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<short>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[2] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<short>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<signed char>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<signed char>,signed char,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E05838;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_WORD *)v9 + 28) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E4B8;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05838;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05838;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E0E05838;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 42) = *(_OWORD *)(a1 + 42);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_1E0E05838;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 42) = *(_OWORD *)(a1 + 42);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(unsigned __int16 *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(unsigned __int16 *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 2 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123BB31)
    return a1 + 8;
  if (((v3 & 0x800000018123BB31 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123BB31))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123BB31 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIaEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>>,std::complex<signed char>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E4B8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>>,std::complex<signed char>>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E4B8;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>>,std::complex<signed char>>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E4B8;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>>,std::complex<signed char>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<short>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<short>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<short>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<int>]";
      v18 = 67;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (*v4 == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<int>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<short>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<short>,short,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E05A48;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_DWORD *)v9 + 14) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E5D8;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05A48;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05A48;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E0E05A48;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 44) = *(_OWORD *)(a1 + 44);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_1E0E05A48;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(unsigned int *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(unsigned int *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123BF45)
    return a1 + 8;
  if (((v3 & 0x800000018123BF45 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123BF45))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123BF45 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIsEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>>,std::complex<short>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E5D8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>>,std::complex<short>>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E5D8;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>>,std::complex<short>>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E5D8;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>>,std::complex<short>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<int>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<int>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<int>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<long long>]";
      v18 = 73;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<long long>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[4] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<long long>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<int>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<int>,int,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E05998;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_QWORD *)v9 + 7) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E578;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05998;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05998;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x40uLL);
  *v2 = &unk_1E0E05998;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_1E0E05998;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123C359)
    return a1 + 8;
  if (((v3 & 0x800000018123C359 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123C359))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123C359 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIiEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>>,std::complex<int>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E578;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>>,std::complex<int>>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E578;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>>,std::complex<int>>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E578;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>>,std::complex<int>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<long long>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<long long>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<long long>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APFloat]";
      v18 = 63;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<llvm::APFloat,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[188] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APFloat>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<long long>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28[3];
  uint64_t *v29;
  _OWORD v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v28[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<long long>,long long,void>(v28, (uint64_t)v31);
  if (!v34)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v31[0];
  v30[0] = *(_OWORD *)&v31[1];
  *(_QWORD *)((char *)v30 + 15) = *(_QWORD *)&v31[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v24);
  v5 = v24;
  v6 = (char *)v25 - (char *)v24;
  if (v25 == v24)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v25 - (char *)v24);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x48uLL);
  *(_QWORD *)v9 = &unk_1E0E05AF8;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v30[0];
  v10 = *(_QWORD *)((char *)v30 + 15);
  *((_QWORD *)v9 + 7) = 0;
  *((_QWORD *)v9 + 8) = 0;
  *((_QWORD *)v9 + 6) = v10;
  v29 = (uint64_t *)v9;
  v11 = *(_QWORD **)a1;
  if (v11)
    v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v11 + 8);
  else
    v12 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v11, v12);
  v13 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v27 = v13;
  *(_QWORD *)v31 = 0;
  v15 = &v31[8];
  if (!v13)
  {
    v32 = 0;
    v33 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v31;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v17 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v13 == v26)
  {
    v32 = &v31[8];
    (*(void (**)(_QWORD *, _BYTE *))(v26[0] + 24))(v26, &v31[8]);
    v16 = v32;
  }
  else
  {
    v16 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
    v32 = v16;
  }
  v33 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v31;
  *(_BYTE *)(a2 + 8) = 0;
  v14 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v16)
    goto LABEL_18;
  if (v16 == &v31[8])
  {
    *(_QWORD *)(a2 + 32) = v14;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v31[8] + 24))(&v31[8]);
    v23 = v33;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v23)
      goto LABEL_25;
    goto LABEL_20;
  }
  v17 = &v32;
  *(_QWORD *)(a2 + 32) = v16;
LABEL_19:
  *v17 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v32 == &v31[8])
  {
    v18 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_25;
    v18 = 5;
    v15 = v32;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v18))(v15, v14);
LABEL_25:
  v19 = v27;
  if (v27 == v26)
  {
    v20 = 4;
    v19 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_30;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_30:
  v21 = v29;
  if (v29 == v28)
  {
    v22 = 4;
    v21 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_35;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E638;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05AF8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05AF8;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x48uLL);
  *v2 = &unk_1E0E05AF8;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  v2[8] = *(_QWORD *)(a1 + 64);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_1E0E05AF8;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123C76DLL)
    return a1 + 8;
  if (((v3 & 0x800000018123C76DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123C76DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123C76DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIxEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>>,std::complex<long long>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E638;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>>,std::complex<long long>>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E638;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>>,std::complex<long long>>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E638;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>>,std::complex<long long>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APFloat>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APFloat>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<llvm::APFloat>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = float]";
      v18 = 55;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<float,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[8] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<float>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<llvm::APFloat>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  llvm::APFloatBase *FloatSemantics;
  llvm::APFloatBase *v7;
  char v8;
  uint64_t *v9;
  int64_t v10;
  char *v11;
  char *v12;
  llvm::APFloatBase *v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD v33[3];
  _QWORD *v34;
  void *__p[2];
  char *v36;
  _BYTE v37[40];
  _QWORD v38[3];
  _QWORD v39[3];
  _QWORD *v40;
  __int128 v41;
  _OWORD v42[2];
  _QWORD v43[3];
  _BYTE v44[17];
  _BYTE v45[23];
  unsigned __int8 v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  *(_QWORD *)v44 = mlir::ElementsAttr::getElementType((uint64_t)v4, v5);
  FloatSemantics = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)v44);
  v7 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(FloatSemantics);
  if (v7 == FloatSemantics)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v43, (uint64_t)FloatSemantics);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v43, (uint64_t)FloatSemantics);
  v39[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetFloatValues((mlir::DenseElementsAttr *)v39, (uint64_t)v44);
  if (!v47)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    goto LABEL_49;
  }
  v8 = v44[0];
  v41 = *(_OWORD *)&v44[1];
  v42[0] = *(_OWORD *)v45;
  *(_QWORD *)((char *)v42 + 15) = *(_QWORD *)&v45[15];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v31);
  __p[1] = 0;
  v36 = 0;
  __p[0] = 0;
  v9 = v31;
  v10 = (char *)v32 - (char *)v31;
  if (v32 != v31)
  {
    if (v10 < 0)
      abort();
    __p[0] = operator new((char *)v32 - (char *)v31);
    __p[1] = __p[0];
    v11 = (char *)__p[0] + 8 * (v10 >> 3);
    v36 = v11;
    memcpy(__p[0], v9, v10);
    __p[1] = v11;
  }
  v37[0] = v8;
  *(_OWORD *)&v37[1] = v41;
  *(_OWORD *)&v37[17] = v42[0];
  *(_QWORD *)&v37[32] = *(_QWORD *)((char *)v42 + 15);
  if (v7 == (llvm::APFloatBase *)v43[0])
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v38, v43);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v38, (uint64_t)v43);
  v40 = 0;
  v12 = (char *)operator new(0x68uLL);
  *(_QWORD *)v12 = &unk_1E0E05680;
  v13 = (llvm::APFloatBase *)v38[0];
  *((_QWORD *)v12 + 3) = v36;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v36 = 0;
  v14 = *(_OWORD *)v37;
  v15 = *(_OWORD *)&v37[16];
  *((_QWORD *)v12 + 8) = *(_QWORD *)&v37[32];
  v16 = v12 + 80;
  *((_OWORD *)v12 + 2) = v14;
  *((_OWORD *)v12 + 3) = v15;
  if (v7 == v13)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v16, v38);
    v40 = v12;
    if (v7 != (llvm::APFloatBase *)v38[0])
    {
LABEL_17:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v38);
      v17 = __p[0];
      if (!__p[0])
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v16, (uint64_t)v38);
    v40 = v12;
    if (v7 != (llvm::APFloatBase *)v38[0])
      goto LABEL_17;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v38);
  v17 = __p[0];
  if (__p[0])
  {
LABEL_18:
    __p[1] = v17;
    operator delete(v17);
  }
LABEL_19:
  v18 = *(_QWORD **)a1;
  if (v18)
  {
    v19 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v18 + 8);
    mlir::ElementsAttr::getNumElements((uint64_t)v18, v19);
    v20 = v40;
    if (v40)
      goto LABEL_21;
LABEL_28:
    v34 = 0;
    *(_QWORD *)v44 = 0;
    v22 = &v44[8];
    goto LABEL_29;
  }
  mlir::ElementsAttr::getNumElements(0, 0);
  v20 = v40;
  if (!v40)
    goto LABEL_28;
LABEL_21:
  if (v20 == v39)
  {
    v34 = v33;
    (*(void (**)(_QWORD *, _QWORD *))(v39[0] + 24))(v39, v33);
    v21 = v34;
    *(_QWORD *)v44 = 0;
    v22 = &v44[8];
    if (v34)
      goto LABEL_53;
LABEL_29:
    *(_QWORD *)&v45[15] = 0;
    v46 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v44;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_30:
    v23 = (_QWORD *)(a2 + 32);
    goto LABEL_31;
  }
  v21 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v20 + 16))(v20);
  v34 = v21;
  *(_QWORD *)v44 = 0;
  v22 = &v44[8];
  if (!v21)
    goto LABEL_29;
LABEL_53:
  if (v21 == v33)
  {
    *(_QWORD *)&v45[15] = &v44[8];
    (*(void (**)(_QWORD *, _BYTE *))(v33[0] + 24))(v33, &v44[8]);
    v29 = *(_BYTE **)&v45[15];
  }
  else
  {
    v29 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v21 + 16))(v21);
    *(_QWORD *)&v45[15] = v29;
  }
  v46 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v44;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v29)
    goto LABEL_30;
  if (v29 == &v44[8])
  {
    *(_QWORD *)(a2 + 32) = a2 + 8;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v44[8] + 24))(&v44[8]);
    v30 = v46;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v30)
      goto LABEL_37;
    goto LABEL_32;
  }
  v23 = &v45[15];
  *(_QWORD *)(a2 + 32) = v29;
LABEL_31:
  *v23 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_32:
  if (*(_BYTE **)&v45[15] == &v44[8])
  {
    v24 = 4;
  }
  else
  {
    if (!*(_QWORD *)&v45[15])
      goto LABEL_37;
    v24 = 5;
    v22 = *(_QWORD **)&v45[15];
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v24))(v22);
LABEL_37:
  v25 = v34;
  if (v34 == v33)
  {
    v26 = 4;
    v25 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_42;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_42:
  v27 = v40;
  if (v40 == v39)
  {
    v28 = 4;
    v27 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_47;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
  if (v9)
    operator delete(v9);
LABEL_49:
  if (v7 == (llvm::APFloatBase *)v43[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v43);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v43);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E3F8;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED1Ev(_QWORD *a1)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  void *v4;

  *a1 = &unk_1E0E05680;
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
  v3 = (void *)a1[10];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v3)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
    v4 = (void *)a1[1];
    if (!v4)
      return a1;
    goto LABEL_3;
  }
  llvm::detail::IEEEFloat::~IEEEFloat(v2);
  v4 = (void *)a1[1];
  if (v4)
  {
LABEL_3:
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED0Ev(_QWORD *a1)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  void *v4;

  *a1 = &unk_1E0E05680;
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
  v3 = (void *)a1[10];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v3)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
    v4 = (void *)a1[1];
    if (!v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::detail::IEEEFloat::~IEEEFloat(v2);
  v4 = (void *)a1[1];
  if (v4)
  {
LABEL_3:
    a1[2] = v4;
    operator delete(v4);
  }
LABEL_4:
  operator delete(a1);
}

llvm::APFloatBase *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEv(_QWORD *a1)
{
  llvm::APFloatBase *v2;
  llvm::APFloatBase *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  const llvm::detail::DoubleAPFloat *v9;
  void *v10;
  __int128 v11;

  v2 = (llvm::APFloatBase *)operator new(0x68uLL);
  v3 = v2;
  *(_QWORD *)v2 = &unk_1E0E05680;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v5 = (_BYTE *)a1[1];
  v4 = (_BYTE *)a1[2];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *((_QWORD *)v3 + 1) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *((_QWORD *)v3 + 3) = v8;
    v2 = (llvm::APFloatBase *)memcpy(v7, v5, v6);
    *((_QWORD *)v3 + 2) = v8;
  }
  v10 = (void *)a1[10];
  v9 = (const llvm::detail::DoubleAPFloat *)(a1 + 10);
  v11 = *((_OWORD *)v9 - 2);
  *((_OWORD *)v3 + 2) = *((_OWORD *)v9 - 3);
  *((_OWORD *)v3 + 3) = v11;
  *((_QWORD *)v3 + 8) = *((_QWORD *)v9 - 2);
  if (llvm::APFloatBase::PPCDoubleDouble(v2) == v10)
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::APFloatBase *)((char *)v3 + 80), v9);
  else
    llvm::detail::IEEEFloat::IEEEFloat((llvm::APFloatBase *)((char *)v3 + 80), v9);
  return v3;
}

llvm::detail::DoubleAPFloat *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEPNS0_6__baseIST_EE(llvm::APFloatBase *a1, uint64_t a2)
{
  llvm::APFloatBase *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  llvm::detail::DoubleAPFloat *v11;
  const llvm::detail::DoubleAPFloat *v12;
  void *v13;

  v3 = a1;
  *(_QWORD *)a2 = &unk_1E0E05680;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = (_BYTE *)*((_QWORD *)a1 + 1);
  v4 = (_BYTE *)*((_QWORD *)a1 + 2);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    a1 = (llvm::APFloatBase *)memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  v9 = *((_OWORD *)v3 + 2);
  v10 = *((_OWORD *)v3 + 3);
  *(_QWORD *)(a2 + 64) = *((_QWORD *)v3 + 8);
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 48) = v10;
  v11 = (llvm::detail::DoubleAPFloat *)(a2 + 80);
  v13 = (void *)*((_QWORD *)v3 + 10);
  v12 = (llvm::APFloatBase *)((char *)v3 + 80);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v13)
    return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
  else
    return (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7destroyEv(_QWORD *a1)
{
  llvm::detail::IEEEFloat *v2;
  void *v3;
  void *v4;

  v2 = (llvm::detail::IEEEFloat *)(a1 + 10);
  v3 = (void *)a1[10];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v3)
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    v4 = (void *)a1[1];
    if (!v4)
      return;
    goto LABEL_3;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
  v4 = (void *)a1[1];
  if (v4)
  {
LABEL_3:
    a1[2] = v4;
    operator delete(v4);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE18destroy_deallocateEv(_QWORD *a1)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  void *v4;

  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
  v3 = (void *)a1[10];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v3)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
    v4 = (void *)a1[1];
    if (!v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::detail::IEEEFloat::~IEEEFloat(v2);
  v4 = (void *)a1[1];
  if (v4)
  {
LABEL_3:
    a1[2] = v4;
    operator delete(v4);
  }
LABEL_4:
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEEclEOl(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::detail::DoubleAPFloat *v7;
  const llvm::detail::DoubleAPFloat *v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16) - v3;
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    v5 = 0;
    v6 = (v4 >> 3);
    while (*(_QWORD *)(v3 + 8 * v5) != *a2)
    {
      if (v6 == ++v5)
        goto LABEL_5;
    }
    v11 = *(_OWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 48);
    v13 = *(_OWORD *)(a1 + 56);
    v12 = v10 + v5;
    llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*(&v11, a3);
  }
  else
  {
LABEL_5:
    v7 = (llvm::detail::DoubleAPFloat *)(a3 + 8);
    v8 = (const llvm::detail::DoubleAPFloat *)(a1 + 80);
    v9 = *(void **)(a1 + 80);
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v9)
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, v8);
    else
      llvm::detail::IEEEFloat::IEEEFloat(v7, v8);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123CB7FLL)
    return a1 + 8;
  if (((v3 & 0x800000018123CB7FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123CB7FLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123CB7FLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS_9FailureOrINS2_15mapped_iteratorINS2_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISD_EEdeclL_ZNS9_7declvalB8nn180100IS8_EEDTclsr3stdE9__declvalISB_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISB_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat>,llvm::APFloat>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E3F8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat>,llvm::APFloat>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E3F8;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat>,llvm::APFloat>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E3F8;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat>,llvm::APFloat>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<float>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<float>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<float>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = double]";
      v18 = 56;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<double,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[7] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<double>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<float>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<float,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E05CB0;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_DWORD *)v9 + 14) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E758;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05CB0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05CB0;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE7__cloneEv(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E0E05CB0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 1) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 44) = *(_OWORD *)(a1 + 44);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  *(_QWORD *)a2 = &unk_1E0E05CB0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

float _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(float *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(float *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(float *)(*(_QWORD *)(a1 + 32) + 4 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123CF09)
    return a1 + 8;
  if (((v3 & 0x800000018123CF09 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123CF09))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123CF09 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float>,float>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E758;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float>,float>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E758;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float>,float>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E758;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float>,float>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<double>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<double>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<double>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<llvm::APFloat>]";
      v18 = 77;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<llvm::APFloat>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (v4[477] == a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APFloat>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<double>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<double,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E05C58;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_QWORD *)v9 + 7) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E728;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05C58;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05C58;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x40uLL);
  *v2 = &unk_1E0E05C58;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_1E0E05C58;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

double _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(double *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(double *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(double *)(*(_QWORD *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123D2CBLL)
    return a1 + 8;
  if (((v3 & 0x800000018123D2CBLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123D2CBLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123D2CBLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double>,double>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E728;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double>,double>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E728;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double>,double>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E728;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double>,double>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APFloat>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APFloat>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<llvm::APFloat>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<float>]";
      v18 = 69;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<float>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (p_vtable[510] == (void *)a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<float>>(a1, (uint64_t)a3);
  else
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<llvm::APFloat>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  llvm::APFloatBase *ComplexFloatValues;
  char v5;
  llvm::APFloatBase *v6;
  uint64_t *v7;
  int64_t v8;
  char *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD v28[3];
  _QWORD *v29;
  void *__p;
  void *v31;
  char *v32;
  char v33;
  __int128 v34;
  _BYTE v35[23];
  _QWORD v36[4];
  _QWORD v37[3];
  _QWORD v38[3];
  _QWORD *v39;
  __int128 v40;
  _OWORD v41[2];
  _BYTE v42[8];
  _QWORD v43[4];
  _QWORD v44[3];
  _BYTE v45[17];
  _BYTE v46[23];
  unsigned __int8 v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::getZeroValue<std::complex<llvm::APFloat>>((_QWORD **)a1, (uint64_t)v42);
  v38[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  ComplexFloatValues = (llvm::APFloatBase *)mlir::DenseElementsAttr::tryGetComplexFloatValues((mlir::DenseElementsAttr *)v38, (uint64_t)v45);
  if (!v48)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    v11 = llvm::APFloatBase::PPCDoubleDouble(ComplexFloatValues);
    goto LABEL_46;
  }
  v5 = v45[0];
  v40 = *(_OWORD *)&v45[1];
  v41[0] = *(_OWORD *)v46;
  *(_QWORD *)((char *)v41 + 15) = *(_QWORD *)&v46[15];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v26);
  v31 = 0;
  v32 = 0;
  __p = 0;
  v7 = v26;
  v8 = (char *)v27 - (char *)v26;
  if (v27 != v26)
  {
    if (v8 < 0)
      abort();
    __p = operator new((char *)v27 - (char *)v26);
    v31 = __p;
    v9 = (char *)__p + 8 * (v8 >> 3);
    v32 = v9;
    v6 = (llvm::APFloatBase *)memcpy(__p, v7, v8);
    v31 = v9;
  }
  v33 = v5;
  v34 = v40;
  *(_OWORD *)v35 = v41[0];
  *(_QWORD *)&v35[15] = *(_QWORD *)((char *)v41 + 15);
  v10 = (void *)v43[0];
  v11 = llvm::APFloatBase::PPCDoubleDouble(v6);
  if (v11 == v10)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v36, v43);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v36, (uint64_t)v43);
  if (v11 == (void *)v44[0])
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v37, v44);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v37, (uint64_t)v44);
  _ZNSt3__110__function12__value_funcIFNS_7complexIN4llvm7APFloatEEElEEC2B8nn180100IZNK4mlir18SparseElementsAttr20try_value_begin_implIS5_EENS9_9FailureOrINS3_15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISK_EEdeclL_ZNS_7declvalB8nn180100ISG_EEDTclsr3stdE9__declvalISI_ELi0EEEvEEEEEEEENS9_6detail17ElementsAttrTraitISA_E13OverloadTokenISI_EEEUllE_NS_9allocatorISV_EEEEOSI_RKT0_((uint64_t)v38, (uint64_t)&__p);
  if (v11 == (void *)v37[0])
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v37);
    if (v11 != (void *)v36[0])
    {
LABEL_14:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v36);
      v12 = __p;
      if (!__p)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v37);
    if (v11 != (void *)v36[0])
      goto LABEL_14;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v36);
  v12 = __p;
  if (__p)
  {
LABEL_15:
    v31 = v12;
    operator delete(v12);
  }
LABEL_16:
  v13 = *(_QWORD **)a1;
  if (v13)
  {
    v14 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v13 + 8);
    mlir::ElementsAttr::getNumElements((uint64_t)v13, v14);
    v15 = v39;
    if (v39)
      goto LABEL_18;
LABEL_25:
    v29 = 0;
    *(_QWORD *)v45 = 0;
    v17 = &v45[8];
    goto LABEL_26;
  }
  mlir::ElementsAttr::getNumElements(0, 0);
  v15 = v39;
  if (!v39)
    goto LABEL_25;
LABEL_18:
  if (v15 == v38)
  {
    v29 = v28;
    (*(void (**)(_QWORD *, _QWORD *))(v38[0] + 24))(v38, v28);
    v16 = v29;
    *(_QWORD *)v45 = 0;
    v17 = &v45[8];
    if (v29)
      goto LABEL_52;
LABEL_26:
    *(_QWORD *)&v46[15] = 0;
    v47 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v45;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_27:
    v18 = (_QWORD *)(a2 + 32);
    goto LABEL_28;
  }
  v16 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
  v29 = v16;
  *(_QWORD *)v45 = 0;
  v17 = &v45[8];
  if (!v16)
    goto LABEL_26;
LABEL_52:
  if (v16 == v28)
  {
    *(_QWORD *)&v46[15] = &v45[8];
    (*(void (**)(_QWORD *, _BYTE *))(v28[0] + 24))(v28, &v45[8]);
    v24 = *(_BYTE **)&v46[15];
  }
  else
  {
    v24 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
    *(_QWORD *)&v46[15] = v24;
  }
  v47 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v45;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v24)
    goto LABEL_27;
  if (v24 == &v45[8])
  {
    *(_QWORD *)(a2 + 32) = a2 + 8;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v45[8] + 24))(&v45[8]);
    v25 = v47;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v25)
      goto LABEL_34;
    goto LABEL_29;
  }
  v18 = &v46[15];
  *(_QWORD *)(a2 + 32) = v24;
LABEL_28:
  *v18 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_29:
  if (*(_BYTE **)&v46[15] == &v45[8])
  {
    v19 = 4;
  }
  else
  {
    if (!*(_QWORD *)&v46[15])
      goto LABEL_34;
    v19 = 5;
    v17 = *(_QWORD **)&v46[15];
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_34:
  v20 = v29;
  if (v29 == v28)
  {
    v21 = 4;
    v20 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_39;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_39:
  v22 = v39;
  if (v39 == v38)
  {
    v23 = 4;
    v22 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_44;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_44:
  if (v7)
    operator delete(v7);
LABEL_46:
  if (v11 == (void *)v44[0])
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v44);
    if (v11 != (void *)v43[0])
      goto LABEL_48;
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v44);
    if (v11 != (void *)v43[0])
    {
LABEL_48:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v43);
      return;
    }
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v43);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E488;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

void mlir::SparseElementsAttr::getZeroValue<std::complex<llvm::APFloat>>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  llvm::APFloatBase *FloatSemantics;
  llvm::APFloatBase *v6;
  llvm::detail::IEEEFloat *v7;
  llvm::detail::DoubleAPFloat *v8;
  uint64_t ElementType;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if (*a1)
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v3 + 8);
  else
    v4 = 0;
  ElementType = mlir::ElementsAttr::getElementType((uint64_t)v3, v4);
  FloatSemantics = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&ElementType);
  v6 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(FloatSemantics);
  if (v6 == FloatSemantics)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, (uint64_t)FloatSemantics);
    v7 = (llvm::detail::IEEEFloat *)(a2 + 8);
    if (v6 != (llvm::APFloatBase *)v10[0])
    {
LABEL_6:
      llvm::detail::IEEEFloat::IEEEFloat(v7, (const llvm::detail::IEEEFloat *)v10);
      v8 = (llvm::detail::DoubleAPFloat *)(a2 + 40);
      if (v6 != (llvm::APFloatBase *)v10[0])
        goto LABEL_7;
LABEL_12:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v8, (const llvm::detail::DoubleAPFloat *)v10);
      if (v6 != (llvm::APFloatBase *)v10[0])
        goto LABEL_8;
LABEL_13:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v10);
      return;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)FloatSemantics);
    v7 = (llvm::detail::IEEEFloat *)(a2 + 8);
    if (v6 != (llvm::APFloatBase *)v10[0])
      goto LABEL_6;
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, (const llvm::detail::DoubleAPFloat *)v10);
  v8 = (llvm::detail::DoubleAPFloat *)(a2 + 40);
  if (v6 == (llvm::APFloatBase *)v10[0])
    goto LABEL_12;
LABEL_7:
  llvm::detail::IEEEFloat::IEEEFloat(v8, (const llvm::detail::IEEEFloat *)v10);
  if (v6 == (llvm::APFloatBase *)v10[0])
    goto LABEL_13;
LABEL_8:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v10);
}

uint64_t _ZNSt3__110__function12__value_funcIFNS_7complexIN4llvm7APFloatEEElEEC2B8nn180100IZNK4mlir18SparseElementsAttr20try_value_begin_implIS5_EENS9_9FailureOrINS3_15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISK_EEdeclL_ZNS_7declvalB8nn180100ISG_EEDTclsr3stdE9__declvalISI_ELi0EEEvEEEEEEEENS9_6detail17ElementsAttrTraitISA_E13OverloadTokenISI_EEEUllE_NS_9allocatorISV_EEEEOSI_RKT0_(uint64_t a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = (char *)operator new(0x88uLL);
  *(_QWORD *)v4 = &unk_1E0E057E0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *((_QWORD *)v4 + 3) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(_OWORD *)(a2 + 40);
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 24);
  *((_OWORD *)v4 + 3) = v5;
  *((_QWORD *)v4 + 8) = *(_QWORD *)(a2 + 56);
  v6 = v4 + 80;
  v7 = *(void **)(a2 + 72);
  v8 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v4);
  if (v8 == v7)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v6, (_QWORD *)(a2 + 72));
    v9 = v4 + 112;
    v10 = (_QWORD *)(a2 + 104);
    if (v8 != *(void **)(a2 + 104))
      goto LABEL_3;
LABEL_5:
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v9, v10);
    goto LABEL_6;
  }
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v6, a2 + 72);
  v9 = v4 + 112;
  v10 = (_QWORD *)(a2 + 104);
  if (v8 == *(void **)(a2 + 104))
    goto LABEL_5;
LABEL_3:
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v9, (uint64_t)v10);
LABEL_6:
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEED1Ev(_QWORD *a1)
{
  llvm::detail::IEEEFloat *v2;
  void *v3;
  void *v4;
  llvm::detail::DoubleAPFloat *v5;
  void *v6;

  *a1 = &unk_1E0E057E0;
  v2 = (llvm::detail::IEEEFloat *)(a1 + 14);
  v3 = (void *)a1[14];
  v4 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v4 != v3)
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    v5 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
    if (v4 != (void *)a1[10])
      goto LABEL_3;
LABEL_7:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v5);
    v6 = (void *)a1[1];
    if (!v6)
      return a1;
    goto LABEL_4;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
  v5 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
  if (v4 == (void *)a1[10])
    goto LABEL_7;
LABEL_3:
  llvm::detail::IEEEFloat::~IEEEFloat(v5);
  v6 = (void *)a1[1];
  if (v6)
  {
LABEL_4:
    a1[2] = v6;
    operator delete(v6);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEED0Ev(_QWORD *a1)
{
  llvm::detail::IEEEFloat *v2;
  void *v3;
  void *v4;
  llvm::detail::DoubleAPFloat *v5;
  void *v6;

  *a1 = &unk_1E0E057E0;
  v2 = (llvm::detail::IEEEFloat *)(a1 + 14);
  v3 = (void *)a1[14];
  v4 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v4 != v3)
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    v5 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
    if (v4 != (void *)a1[10])
      goto LABEL_3;
LABEL_7:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v5);
    v6 = (void *)a1[1];
    if (!v6)
      goto LABEL_5;
    goto LABEL_4;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
  v5 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
  if (v4 == (void *)a1[10])
    goto LABEL_7;
LABEL_3:
  llvm::detail::IEEEFloat::~IEEEFloat(v5);
  v6 = (void *)a1[1];
  if (v6)
  {
LABEL_4:
    a1[2] = v6;
    operator delete(v6);
  }
LABEL_5:
  operator delete(a1);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x88uLL);
  *v2 = &unk_1E0E057E0;
  _ZNSt3__122__compressed_pair_elemIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS1_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS1_6detail17ElementsAttrTraitIS2_E13OverloadTokenISE_EEEUllE_Li0ELb0EEC2B8nn180100IJRKSR_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((llvm::APFloatBase *)(v2 + 1), v1);
  return v2;
}

llvm::APFloatBase *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7__cloneEPNS0_6__baseISV_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E0E057E0;
  return _ZNSt3__122__compressed_pair_elemIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS1_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS1_6detail17ElementsAttrTraitIS2_E13OverloadTokenISE_EEEUllE_Li0ELb0EEC2B8nn180100IJRKSR_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((llvm::APFloatBase *)(a2 + 1), a1 + 8);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7destroyEv(_QWORD *a1)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  void *v4;
  llvm::detail::IEEEFloat *v5;
  void *v6;

  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 14);
  v3 = (void *)a1[14];
  v4 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v4 == v3)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
    v5 = (llvm::detail::IEEEFloat *)(a1 + 10);
    if (v4 != (void *)a1[10])
    {
LABEL_3:
      llvm::detail::IEEEFloat::~IEEEFloat(v5);
      v6 = (void *)a1[1];
      if (!v6)
        return;
      goto LABEL_4;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    v5 = (llvm::detail::IEEEFloat *)(a1 + 10);
    if (v4 != (void *)a1[10])
      goto LABEL_3;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v5);
  v6 = (void *)a1[1];
  if (v6)
  {
LABEL_4:
    a1[2] = v6;
    operator delete(v6);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE18destroy_deallocateEv(_QWORD *a1)
{
  llvm::detail::IEEEFloat *v2;
  void *v3;
  void *v4;
  llvm::detail::DoubleAPFloat *v5;
  void *v6;

  v2 = (llvm::detail::IEEEFloat *)(a1 + 14);
  v3 = (void *)a1[14];
  v4 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v4 != v3)
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    v5 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
    if (v4 != (void *)a1[10])
      goto LABEL_3;
LABEL_7:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v5);
    v6 = (void *)a1[1];
    if (!v6)
      goto LABEL_5;
    goto LABEL_4;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
  v5 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
  if (v4 == (void *)a1[10])
    goto LABEL_7;
LABEL_3:
  llvm::detail::IEEEFloat::~IEEEFloat(v5);
  v6 = (void *)a1[1];
  if (v6)
  {
LABEL_4:
    a1[2] = v6;
    operator delete(v6);
  }
LABEL_5:
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEEclEOl(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _ZZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIN4llvm7APFloatEEEEENS_9FailureOrINS4_15mapped_iteratorINS4_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS2_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISD_EEENKUllE_clEl(a1 + 8, *a2, a3);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123D6C5)
    return a1 + 8;
  if (((v3 & 0x800000018123D6C5 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123D6C5))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123D6C5 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIN4llvm7APFloatEEEEENS_9FailureOrINS4_15mapped_iteratorINS4_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS2_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISD_EEEUllE_;
}

llvm::APFloatBase *_ZNSt3__122__compressed_pair_elemIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS1_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS1_6detail17ElementsAttrTraitIS2_E13OverloadTokenISE_EEEUllE_Li0ELb0EEC2B8nn180100IJRKSR_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE(llvm::APFloatBase *a1, uint64_t a2)
{
  llvm::APFloatBase *v3;
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  void *v12;
  llvm::detail::IEEEFloat *v13;
  const llvm::detail::IEEEFloat *v14;

  v3 = a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)v3 = v7;
    *((_QWORD *)v3 + 1) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *((_QWORD *)v3 + 2) = v8;
    a1 = (llvm::APFloatBase *)memcpy(v7, v5, v6);
    *((_QWORD *)v3 + 1) = v8;
  }
  v9 = *(_OWORD *)(a2 + 24);
  v10 = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v3 + 7) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)((char *)v3 + 40) = v10;
  *(_OWORD *)((char *)v3 + 24) = v9;
  v11 = *(void **)(a2 + 72);
  v12 = llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v12 == v11)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::APFloatBase *)((char *)v3 + 72), (const llvm::detail::DoubleAPFloat *)(a2 + 72));
    v13 = (llvm::APFloatBase *)((char *)v3 + 104);
    v14 = (const llvm::detail::IEEEFloat *)(a2 + 104);
    if (v12 != *(void **)(a2 + 104))
      goto LABEL_6;
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::APFloatBase *)((char *)v3 + 72), (const llvm::detail::IEEEFloat *)(a2 + 72));
    v13 = (llvm::APFloatBase *)((char *)v3 + 104);
    v14 = (const llvm::detail::IEEEFloat *)(a2 + 104);
    if (v12 != *(void **)(a2 + 104))
    {
LABEL_6:
      llvm::detail::IEEEFloat::IEEEFloat(v13, v14);
      return v3;
    }
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v13, v14);
  return v3;
}

void _ZZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIN4llvm7APFloatEEEEENS_9FailureOrINS4_15mapped_iteratorINS4_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS2_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISD_EEENKUllE_clEl(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  llvm::detail::IEEEFloat *v9;
  const llvm::detail::IEEEFloat *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  void *v15;
  unsigned int v16;
  void *__p;
  unsigned int v18;

  v5 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (!(_DWORD)v5)
  {
LABEL_5:
    v7 = *(void **)(a1 + 72);
    v8 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
    if (v8 == v7)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)(a3 + 8), (const llvm::detail::DoubleAPFloat *)(a1 + 72));
      v9 = (llvm::detail::IEEEFloat *)(a3 + 40);
      v10 = (const llvm::detail::IEEEFloat *)(a1 + 104);
      if (v8 != *(void **)(a1 + 104))
        goto LABEL_7;
    }
    else
    {
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)(a3 + 8), (const llvm::detail::IEEEFloat *)(a1 + 72));
      v9 = (llvm::detail::IEEEFloat *)(a3 + 40);
      v10 = (const llvm::detail::IEEEFloat *)(a1 + 104);
      if (v8 != *(void **)(a1 + 104))
      {
LABEL_7:
        llvm::detail::IEEEFloat::IEEEFloat(v9, v10);
        return;
      }
    }
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v9, v10);
    return;
  }
  v6 = 0;
  while (*(_QWORD *)(*(_QWORD *)a1 + 8 * v6) != a2)
  {
    if ((_DWORD)v5 == (_DWORD)++v6)
      goto LABEL_5;
  }
  v12 = *(_OWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 40);
  v14 = *(_OWORD *)(a1 + 48);
  v13 = v11 + v6;
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v12, &v15);
  mlir::DenseElementsAttr::ComplexFloatElementIterator::mapElement((llvm::APInt *)&v15, (llvm::APFloatBase *)&v12, a3);
  if (v18 >= 0x41 && __p)
    operator delete[](__p);
  if (v16 >= 0x41)
  {
    if (v15)
      operator delete[](v15);
  }
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>>,std::complex<llvm::APFloat>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E488;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>>,std::complex<llvm::APFloat>>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E488;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>>,std::complex<llvm::APFloat>>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E488;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>>,std::complex<llvm::APFloat>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<float>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<float>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<float>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v15 = a2;
    v16 = a1;
    v14 = a3;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    a3 = v14;
    a2 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<double>]";
      v18 = 70;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<std::complex<double>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a3 = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  if (p_vtable[509] == (void *)a2)
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<double>>(a1, (uint64_t)a3);
  else
    _ZNK4mlir6detail17ElementsAttrTraitINS_18SparseElementsAttrEE12getValueImplIN4llvm9StringRefEJENSt3__117integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(a1, a2, a3);
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<float>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27[3];
  uint64_t *v28;
  _OWORD v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<float>,float,void>(v27, (uint64_t)v30);
  if (!v33)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v30[0];
  v29[0] = *(_OWORD *)&v30[1];
  *(_QWORD *)((char *)v29 + 15) = *(_QWORD *)&v30[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v23);
  v5 = v23;
  v6 = (char *)v24 - (char *)v23;
  if (v24 == v23)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v24 - (char *)v23);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &unk_1E0E058E8;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v29[0];
  *((_QWORD *)v9 + 6) = *(_QWORD *)((char *)v29 + 15);
  *((_QWORD *)v9 + 7) = 0;
  v28 = (uint64_t *)v9;
  v10 = *(_QWORD **)a1;
  if (v10)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
  else
    v11 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v26 = v12;
  *(_QWORD *)v30 = 0;
  v14 = &v30[8];
  if (!v12)
  {
    v31 = 0;
    v32 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v30;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v16 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v12 == v25)
  {
    v31 = &v30[8];
    (*(void (**)(_QWORD *, _BYTE *))(v25[0] + 24))(v25, &v30[8]);
    v15 = v31;
  }
  else
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v31 = v15;
  }
  v32 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v30;
  *(_BYTE *)(a2 + 8) = 0;
  v13 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v15)
    goto LABEL_18;
  if (v15 == &v30[8])
  {
    *(_QWORD *)(a2 + 32) = v13;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v30[8] + 24))(&v30[8]);
    v22 = v32;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v22)
      goto LABEL_25;
    goto LABEL_20;
  }
  v16 = &v31;
  *(_QWORD *)(a2 + 32) = v15;
LABEL_19:
  *v16 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v31 == &v30[8])
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_25;
    v17 = 5;
    v14 = v31;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v17))(v14, v13);
LABEL_25:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_35;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E518;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E058E8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E058E8;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x40uLL);
  *v2 = &unk_1E0E058E8;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_1E0E058E8;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

float _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(float *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(float *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(float *)(*(_QWORD *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123DA8BLL)
    return a1 + 8;
  if (((v3 & 0x800000018123DA8BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123DA8BLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123DA8BLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIfEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>>,std::complex<float>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E518;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>>,std::complex<float>>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E518;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>>,std::complex<float>>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E518;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>>,std::complex<float>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<double>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<double>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<double>>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void _ZNK4mlir6detail17ElementsAttrTraitINS_18SparseElementsAttrEE12getValueImplIN4llvm9StringRefEJENSt3__117integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  mlir::SparseElementsAttr *v16;
  const char *v17;
  unint64_t v18;

  if ((v3 & 1) == 0)
  {
    v15 = a3;
    v16 = a1;
    v14 = a2;
    a2 = v14;
    a3 = v15;
    v6 = v5;
    a1 = v16;
    if (v6)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::StringRef]";
      v18 = 65;
      v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7)
        v8 = v7;
      else
        v8 = v18;
      v9 = &v17[v8];
      v10 = v18 - v8;
      if (v18 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v18 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<llvm::StringRef,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      a2 = v14;
      a3 = v15;
      a1 = v16;
    }
  }
  if (v4[481] == a2)
  {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::StringRef>(a1, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[16] = 0;
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<double>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28[3];
  uint64_t *v29;
  _OWORD v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v28[0] = *(_QWORD *)(*(_QWORD *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<double>,double,void>(v28, (uint64_t)v31);
  if (!v34)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  v4 = v31[0];
  v30[0] = *(_OWORD *)&v31[1];
  *(_QWORD *)((char *)v30 + 15) = *(_QWORD *)&v31[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v24);
  v5 = v24;
  v6 = (char *)v25 - (char *)v24;
  if (v25 == v24)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)v25 - (char *)v24);
    v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  v9 = (char *)operator new(0x48uLL);
  *(_QWORD *)v9 = &unk_1E0E05890;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v8;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v30[0];
  v10 = *(_QWORD *)((char *)v30 + 15);
  *((_QWORD *)v9 + 7) = 0;
  *((_QWORD *)v9 + 8) = 0;
  *((_QWORD *)v9 + 6) = v10;
  v29 = (uint64_t *)v9;
  v11 = *(_QWORD **)a1;
  if (v11)
    v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v11 + 8);
  else
    v12 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v11, v12);
  v13 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 16))(v9);
  v27 = v13;
  *(_QWORD *)v31 = 0;
  v15 = &v31[8];
  if (!v13)
  {
    v32 = 0;
    v33 = 1;
    *(_QWORD *)a2 = *(_QWORD *)v31;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_18:
    v17 = (_QWORD *)(a2 + 32);
    goto LABEL_19;
  }
  if (v13 == v26)
  {
    v32 = &v31[8];
    (*(void (**)(_QWORD *, _BYTE *))(v26[0] + 24))(v26, &v31[8]);
    v16 = v32;
  }
  else
  {
    v16 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
    v32 = v16;
  }
  v33 = 1;
  *(_QWORD *)a2 = *(_QWORD *)v31;
  *(_BYTE *)(a2 + 8) = 0;
  v14 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v16)
    goto LABEL_18;
  if (v16 == &v31[8])
  {
    *(_QWORD *)(a2 + 32) = v14;
    (*(void (**)(_BYTE *))(*(_QWORD *)&v31[8] + 24))(&v31[8]);
    v23 = v33;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v23)
      goto LABEL_25;
    goto LABEL_20;
  }
  v17 = &v32;
  *(_QWORD *)(a2 + 32) = v16;
LABEL_19:
  *v17 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_20:
  if (v32 == &v31[8])
  {
    v18 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_25;
    v18 = 5;
    v15 = v32;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v18))(v15, v14);
LABEL_25:
  v19 = v27;
  if (v27 == v26)
  {
    v20 = 4;
    v19 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_30;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_30:
  v21 = v29;
  if (v29 == v28)
  {
    v22 = 4;
    v21 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_35;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_35:
  if (v5)
    operator delete(v5);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E4E8;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E05890;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E05890;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x48uLL);
  *v2 = &unk_1E0E05890;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  v2[8] = *(_QWORD *)(a1 + 64);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_1E0E05890;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

double _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(double *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(double *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(double *)(*(_QWORD *)(a1 + 32) + 16 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123DE9FLL)
    return a1 + 8;
  if (((v3 & 0x800000018123DE9FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123DE9FLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123DE9FLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIdEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>>,std::complex<double>>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E4E8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>>,std::complex<double>>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E4E8;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>>,std::complex<double>>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E4E8;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>>,std::complex<double>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::StringRef>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::StringRef>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::SparseElementsAttr::try_value_begin_impl<llvm::StringRef>(a1, (uint64_t)&v11);
  if (!v15)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD **)a1;
  if (v4)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  else
    v5 = 0;
  v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
  mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef> &>(v6, &v11, (uint64_t)&v9);
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  if (v15 && v14)
  {
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
    }
    else
    {
      if (!v13)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<llvm::StringRef>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  uint64_t *v9;
  int64_t v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD v29[3];
  _QWORD *v30;
  _OWORD v31[2];
  _OWORD *v32;
  unsigned __int8 v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(unsigned __int8 *)(v4 + 24);
  v31[0] = *(_OWORD *)(v4 + 8);
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v31);
  mlir::ShapedType::getNumElements(ArgAttrsAttr, v8);
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v27);
  v9 = v27;
  v10 = (char *)v28 - (char *)v27;
  if (v28 == v27)
  {
    v12 = 0;
    v11 = 0;
  }
  else
  {
    if (v10 < 0)
      abort();
    v11 = (char *)operator new((char *)v28 - (char *)v27);
    v12 = &v11[8 * (v10 >> 3)];
    memcpy(v11, v9, v10);
  }
  v13 = operator new(0x48uLL);
  *v13 = &unk_1E0E056D8;
  v13[1] = v11;
  v13[2] = v12;
  v13[3] = v12;
  v13[4] = v5;
  v13[5] = v6;
  v13[7] = 0;
  v13[8] = 0;
  v13[6] = 0;
  v35 = v13;
  v14 = *(_QWORD **)a1;
  if (v14)
    v15 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v14 + 8);
  else
    v15 = 0;
  mlir::ElementsAttr::getNumElements((uint64_t)v14, v15);
  v16 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
  v30 = v16;
  *(_QWORD *)&v31[0] = 0;
  v18 = (_QWORD *)v31 + 1;
  if (!v16)
  {
    v32 = 0;
    v33 = 1;
    *(_QWORD *)a2 = *(_QWORD *)&v31[0];
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
LABEL_16:
    v20 = (_QWORD *)(a2 + 32);
    goto LABEL_17;
  }
  if (v16 == v29)
  {
    v32 = (_OWORD *)((char *)v31 + 8);
    (*(void (**)(_QWORD *, char *))(v29[0] + 24))(v29, (char *)v31 + 8);
    v19 = v32;
  }
  else
  {
    v19 = (_OWORD *)(*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
    v32 = v19;
  }
  v33 = 1;
  *(_QWORD *)a2 = *(_QWORD *)&v31[0];
  *(_BYTE *)(a2 + 8) = 0;
  v17 = a2 + 8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v19)
    goto LABEL_16;
  if (v19 == (_OWORD *)((char *)v31 + 8))
  {
    *(_QWORD *)(a2 + 32) = v17;
    (*(void (**)(char *))(*((_QWORD *)&v31[0] + 1) + 24))((char *)v31 + 8);
    v26 = v33;
    *(_BYTE *)(a2 + 40) = 1;
    *(_BYTE *)(a2 + 48) = 1;
    if (!v26)
      goto LABEL_23;
    goto LABEL_18;
  }
  v20 = &v32;
  *(_QWORD *)(a2 + 32) = v19;
LABEL_17:
  *v20 = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_18:
  if (v32 == (_OWORD *)((char *)v31 + 8))
  {
    v21 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_23;
    v21 = 5;
    v18 = v32;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v18 + 8 * v21))(v18, v17);
LABEL_23:
  v22 = v30;
  if (v30 == v29)
  {
    v23 = 4;
    v22 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_28;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_28:
  v24 = v35;
  if (v35 == v34)
  {
    v25 = 4;
    v24 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_33;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_33:
  if (v9)
    operator delete(v9);
}

_QWORD *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 1) = a1;
  v4 = *a2;
  v15 = *a2;
  v5 = v16;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  v6 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    v7 = (uint64_t *)a2[4];
    if (v7)
    {
      if (v7 == a2 + 1)
      {
        v17 = v16;
        (*(void (**)(uint64_t *, _QWORD *))(a2[1] + 24))(a2 + 1, v16);
        v4 = v15;
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
  }
  result = operator new(0x38uLL);
  v9 = result;
  *result = &unk_1E0E4E428;
  result[1] = v4;
  *((_BYTE *)result + 16) = 0;
  v10 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (!v6)
  {
    *(_QWORD *)(a3 + 8) = result;
    return result;
  }
  result = v17;
  if (v17)
  {
    if (v17 == v16)
    {
      v9[5] = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
      *((_BYTE *)v9 + 48) = 1;
      v13 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v13)
        return result;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
      v9[5] = result;
      *((_BYTE *)v9 + 48) = 1;
      v11 = v18;
      *(_QWORD *)(a3 + 8) = v9;
      if (!v11)
        return result;
    }
  }
  else
  {
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v12 = v18;
    *(_QWORD *)(a3 + 8) = v9;
    if (!v12)
      return result;
  }
  if (v17 == v16)
  {
    v14 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v14))(v5);
}

_QWORD *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED1Ev(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E0E056D8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED0Ev(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E0E056D8;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  __int128 v8;

  v2 = operator new(0x48uLL);
  *v2 = &unk_1E0E056D8;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  v2[8] = *(_QWORD *)(a1 + 64);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEPNS0_6__baseIST_EE(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &unk_1E0E056D8;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7destroyEv(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE18destroy_deallocateEv(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEEclEOl(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
    return *(_QWORD *)(a1 + 56);
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_QWORD *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4)
      return *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(a1 + 48) + v4;
  if (*(_BYTE *)(a1 + 40))
    v7 = 0;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018123E2B5)
    return a1 + 8;
  if (((v3 & 0x800000018123E2B5 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018123E2B5))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018123E2B5 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS_9FailureOrINS2_15mapped_iteratorINS2_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISD_EEdeclL_ZNS9_7declvalB8nn180100IS8_EEDTclsr3stdE9__declvalISB_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISB_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef>,llvm::StringRef>::~OpaqueIterator(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E0E4E428;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef>,llvm::StringRef>::~OpaqueIterator(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  *__p = &unk_1E0E4E428;
  if (*((_BYTE *)__p + 48))
  {
    v2 = (_QWORD *)__p[5];
    if (v2 == __p + 2)
    {
      v3 = 4;
      v2 = __p + 2;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

_QWORD *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef>,llvm::StringRef>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  char *v7;

  result = operator new(0x38uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4E428;
  result[1] = v6;
  *((_BYTE *)result + 16) = 0;
  v7 = (char *)(result + 2);
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
      if (result == (_QWORD *)(a1 + 16))
      {
        v5[5] = v7;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((_BYTE *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef>,llvm::StringRef>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8) + a2;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::StorageUserBase<mlir::SparseElementsAttr,mlir::Attribute,mlir::detail::SparseElementsAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(v4);
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18SparseElementsAttrES2_NSB_25SparseElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  v6 = a2[1];
  v7 = a2[3];
  v8 = a2[4];
  v10[0] = a3;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v10, v6);
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v10, v7);
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v10, v8);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18SparseElementsAttrES2_NSA_25SparseElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6)
{
  _QWORD *v7[2];
  uint64_t *v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::SparseElementsAttr>(a2, v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::SparseElementsAttr>(_QWORD *a1, uint64_t **a2, _QWORD **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v11;
  _QWORD *v13;
  __int128 v14;
  _QWORD v15[2];
  _QWORD v16[2];
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v13 = a1;
  v4 = a1[3];
  v3 = a1[4];
  v5 = *a2;
  if (!a1[1])
  {
    v7 = 0;
    v6 = 0;
    if (!v4)
      goto LABEL_7;
    goto LABEL_6;
  }
  v6 = (_QWORD *)**a3;
  if (v6)
  {
    v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
    if (!v4)
      goto LABEL_7;
LABEL_6:
    v8 = *v5++;
    v4 = v8;
    goto LABEL_7;
  }
  v7 = 0;
  if (v4)
    goto LABEL_6;
LABEL_7:
  if (v3)
    v3 = *v5;
  mlir::Attribute::getContext((mlir::Attribute *)&v13);
  *(_QWORD *)&v14 = v6;
  *((_QWORD *)&v14 + 1) = v7;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v15[0] = &mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id;
  v15[1] = Context;
  v21[0] = _ZN4llvm12function_refIFvPN4mlir6detail25SparseElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_18SparseElementsAttrEJRNS1_10ShapedTypeENS1_20DenseIntElementsAttrERNS1_17DenseElementsAttrEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v21[1] = v15;
  v18 = v14;
  v19 = v4;
  v20 = v3;
  v11 = llvm::hash_combine<mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr>(&v18, &v19, &v20);
  v16[0] = &v18;
  v16[1] = v21;
  v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

void mlir::AbstractAttribute::get<mlir::StridedLayoutAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::StridedLayoutAttr,mlir::Attribute,mlir::detail::StridedLayoutAttrStorage,mlir::detail::AttributeUniquer,mlir::MemRefLayoutAttrInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_17StridedLayoutAttrES2_NSB_24StridedLayoutAttrStorageENSB_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_17StridedLayoutAttrES2_NSA_24StridedLayoutAttrStorageENSA_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x18uLL);
  *v2 = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::getAffineMap;
  v2[1] = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::isIdentity;
  v2[2] = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::verifyLayout;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemRefLayoutAttrInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[166], v2);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::getAffineMap(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  mlir *v4;
  mlir::MLIRContext *Context;
  _QWORD *v7;

  v7 = a2;
  v3 = a2[2];
  v2 = a2[3];
  v4 = (mlir *)a2[1];
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v7);
  return mlir::makeStridedLinearLayoutMap(v3, v2, v4, Context);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::isIdentity(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  mlir *v4;
  mlir::MLIRContext *Context;
  _QWORD *v7;
  uint64_t StridedLinearLayoutMap;

  v7 = a2;
  v3 = a2[2];
  v2 = a2[3];
  v4 = (mlir *)a2[1];
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v7);
  StridedLinearLayoutMap = mlir::makeStridedLinearLayoutMap(v3, v2, v4, Context);
  return mlir::AffineMap::isIdentity((mlir::AffineMap *)&StridedLinearLayoutMap);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::verifyLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::StridedLayoutAttr::verifyLayout((uint64_t)&v7, a3, a4, a5, a6);
}

BOOL mlir::detail::StorageUserBase<mlir::StridedLayoutAttr,mlir::Attribute,mlir::detail::StridedLayoutAttrStorage,mlir::detail::AttributeUniquer,mlir::MemRefLayoutAttrInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface::Trait<Empty>]";
      v15 = 95;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemRefLayoutAttrInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemRefLayoutAttrInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      a1 = v13;
    }
  }
  return v2[471] == a1;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_17StridedLayoutAttrES2_NSA_24StridedLayoutAttrStorageENSA_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::StridedLayoutAttr>(a2);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::StridedLayoutAttr>(uint64_t a1)
{
  mlir::MLIRContext *Context;
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned __int8 **AttributeUniquer;
  unsigned int v9;
  uint64_t ParametricStorageTypeImpl;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];
  uint64_t *v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  _BYTE v24[48];
  uint64_t *v25;
  _QWORD *v26;
  unsigned int v27;
  _QWORD v28[7];

  v28[6] = *MEMORY[0x1E0C80C00];
  v14 = a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_OWORD *)(a1 + 16);
  mlir::AttrTypeSubElementHandler<std::tuple<long long,llvm::ArrayRef<long long>>,void>::replace((uint64_t)&v12, (uint64_t)&v25);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v2 = v25;
  v21 = v25;
  v22 = v24;
  v23 = 0x600000000;
  v3 = v27;
  if (!v27)
  {
    v3 = 0;
    v6 = v24;
    goto LABEL_9;
  }
  if (v27 < 7)
  {
    v5 = v24;
    v4 = v27;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v24, v27, 8);
  v4 = v27;
  if (v27)
  {
    v5 = v22;
LABEL_7:
    memcpy(v5, v26, 8 * v4);
  }
  LODWORD(v23) = v3;
  v2 = v21;
  v6 = v22;
LABEL_9:
  v7 = *v2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v15[0] = &mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id;
  v15[1] = Context;
  v20[0] = _ZN4llvm12function_refIFvPN4mlir6detail24StridedLayoutAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_17StridedLayoutAttrEJxNS_8ArrayRefIxEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v20[1] = v15;
  v18 = v7;
  v19[0] = v6;
  v19[1] = v3;
  v9 = llvm::hash_combine<long long,llvm::ArrayRef<long long>>(&v18, (uint64_t)v19);
  v16[0] = &v18;
  v16[1] = v20;
  v17 = &v18;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
  if (v22 != v24)
    free(v22);
  if (v26 != v28)
    free(v26);
  return ParametricStorageTypeImpl;
}

void mlir::AttrTypeSubElementHandler<std::tuple<long long,llvm::ArrayRef<long long>>,void>::replace(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  _QWORD *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *__src;
  unsigned int v10;
  int v11;
  _QWORD v12[7];

  v12[6] = *MEMORY[0x1E0C80C00];
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<long long>,void>::replace(*(uint64_t **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)&__src);
  v4 = (void *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 16) = 0x600000000;
  v5 = __src;
  if ((void **)(a2 + 8) == &__src)
    goto LABEL_12;
  v6 = v10;
  if (!v10)
    goto LABEL_12;
  if (__src == v12)
  {
    if (v10 < 7)
    {
      v8 = v10;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 8, (void *)(a2 + 24), v10, 8);
      v8 = v10;
      v5 = __src;
      if (!v10)
      {
LABEL_10:
        *(_DWORD *)(a2 + 16) = v6;
        goto LABEL_11;
      }
      v4 = *(void **)(a2 + 8);
    }
    memcpy(v4, v5, 8 * v8);
    v5 = __src;
    goto LABEL_10;
  }
  *(_QWORD *)(a2 + 8) = __src;
  v7 = v11;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = v7;
  __src = v12;
  v11 = 0;
  v5 = v12;
LABEL_11:
  v10 = 0;
LABEL_12:
  if (v5 != v12)
    free(v5);
}

void mlir::AttrTypeSubElementHandler<llvm::ArrayRef<long long>,void>::replace(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x600000000;
  if (a2)
  {
    LODWORD(v5) = 0;
    v6 = v15;
    v7 = 8 * a2;
    do
    {
      while (v5 < HIDWORD(v14))
      {
        v8 = *a1++;
        v13[v5] = v8;
        v5 = (v5 + 1);
        LODWORD(v14) = v5;
        v7 -= 8;
        if (!v7)
          goto LABEL_7;
      }
      v9 = *a1++;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v5 + 1, 8);
      v13[v14] = v9;
      v5 = (v14 + 1);
      LODWORD(v14) = v14 + 1;
      v7 -= 8;
    }
    while (v7);
LABEL_7:
    v10 = v13;
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0x600000000;
    if ((_DWORD)v5 && &v13 != (_QWORD **)a3)
    {
      if (v10 == v15)
      {
        v12 = v5;
        if (v5 < 7
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v5, 8),
              v12 = v14,
              v6 = v13,
              (_DWORD)v14))
        {
          memcpy(*(void **)a3, v6, 8 * v12);
          v6 = v13;
        }
        *(_DWORD *)(a3 + 8) = v5;
      }
      else
      {
        *(_QWORD *)a3 = v10;
        v11 = HIDWORD(v14);
        *(_DWORD *)(a3 + 8) = v5;
        *(_DWORD *)(a3 + 12) = v11;
        v13 = v15;
        HIDWORD(v14) = 0;
      }
      LODWORD(v14) = 0;
      v10 = v6;
    }
    if (v10 != v15)
      free(v10);
  }
  else
  {
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0x600000000;
  }
}

void mlir::AbstractAttribute::get<mlir::StringAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::StringAttr>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::StringAttr,mlir::Attribute,mlir::detail::StringAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10StringAttrES2_NSB_17StringAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10StringAttrES2_NSA_17StringAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::StringAttr>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::StringAttr>::getType;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      v15 = 65;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[212], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::StringAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL mlir::detail::StorageUserBase<mlir::StringAttr,mlir::Attribute,mlir::detail::StringAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr::Trait<Empty>]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::TypedAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::TypedAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      a1 = v13;
    }
  }
  return v2[413] == a1;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10StringAttrES2_NSA_17StringAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t mlir::detail::StorageUserBase<mlir::SymbolRefAttr,mlir::Attribute,mlir::detail::SymbolRefAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13SymbolRefAttrES2_NSB_20SymbolRefAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  v6 = a2[1];
  v7 = (uint64_t *)a2[2];
  v8 = a2[3];
  v12[0] = a3;
  v12[1] = a4;
  v12[2] = a5;
  v12[3] = a6;
  result = mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v12, v6);
  if (v8)
  {
    v10 = 8 * v8;
    do
    {
      v11 = *v7++;
      result = mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v12, v11);
      v10 -= 8;
    }
    while (v10);
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13SymbolRefAttrES2_NSA_20SymbolRefAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[2];

  v5[0] = a3;
  v5[1] = a4;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::SymbolRefAttr>(a2, (uint64_t)v5);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::SymbolRefAttr>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];
  uint64_t *v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];

  v11 = a1;
  v3 = *(uint64_t **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    --v2;
    v5 = *v3++;
    v4 = v5;
  }
  else
  {
    v4 = 0;
  }
  if (v2 >= *(unsigned int *)(a1 + 24))
    v6 = *(unsigned int *)(a1 + 24);
  else
    v6 = v2;
  mlir::Attribute::getContext((mlir::Attribute *)&v11);
  v12 = v4;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v13[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v13[1] = Context;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v18[1] = v13;
  v16 = v12;
  v17[0] = v3;
  v17[1] = v6;
  v9 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v16, (uint64_t)v17);
  v14[0] = &v16;
  v14[1] = v18;
  v15 = &v16;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v14);
}

uint64_t mlir::detail::StorageUserBase<mlir::TypeAttr,mlir::Attribute,mlir::detail::TypeAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8TypeAttrES2_NSB_15TypeAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[4];

  v6 = *(_QWORD *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8TypeAttrES2_NSA_15TypeAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v9 = a2;
  if (*(_QWORD *)(a2 + 8))
    v5 = *a5;
  else
    v5 = 0;
  mlir::Attribute::getContext((mlir::Attribute *)&v9);
  v10 = v5;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id;
  v11[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail15TypeAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8TypeAttrEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v11, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id, &v10);
}

uint64_t mlir::detail::StorageUserBase<mlir::UnitAttr,mlir::Attribute,mlir::AttributeStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8UnitAttrES2_NS1_16AttributeStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir16AttributeStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer17registerAttributeINS1_8UnitAttrEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, *a1, a1[1]);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DistinctAttr>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  char v4;
  llvm **v5;
  uint64_t *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  unsigned int v20;
  uint64_t v21;
  llvm *v22[2];
  unint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    v18 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
    v19 = (void *)68;
    v11 = llvm::StringRef::find((uint64_t *)&v18, "DesiredTypeName = ", 0x12uLL, 0);
    if ((unint64_t)v19 >= v11)
      v12 = (_BYTE *)v11;
    else
      v12 = v19;
    v13 = &v12[(_QWORD)v18];
    v14 = (char *)((_BYTE *)v19 - v12);
    if ((unint64_t)((_BYTE *)v19 - v12) >= 0x12)
      v15 = 18;
    else
      v15 = (_BYTE *)v19 - v12;
    v16 = (unint64_t)&v14[-v15];
    if (v16 >= v16 - 1)
      v17 = v16 - 1;
    else
      v17 = v16;
    mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
  }
  v3 = mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id;
  mlir::AbstractAttribute::get<mlir::DistinctAttr>(a1, &v18);
  mlir::Dialect::addAttribute(a1, v3, (uint64_t)&v18);
  v4 = v23;
  if (v23 >= 8)
  {
    if ((v23 & 4) != 0)
    {
      if ((v23 & 2) != 0)
        v5 = v22;
      else
        v5 = (llvm **)v22[0];
      (*(void (**)(llvm **))((v23 & 0xFFFFFFFFFFFFFFF8) + 16))(v5);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v22[0], v22[1]);
  }
  v6 = (uint64_t *)v19;
  if (v20)
  {
    v7 = 16 * v20;
    v8 = (void **)((char *)v19 + 8);
    do
    {
      v9 = *v8;
      v8 += 2;
      free(v9);
      v7 -= 16;
    }
    while (v7);
    v6 = (uint64_t *)v19;
  }
  if (v6 != &v21)
    free(v6);
  return mlir::detail::AttributeUniquer::registerAttribute<mlir::DistinctAttr>(*(mlir::MLIRContext **)(a1 + 32));
}

void mlir::AbstractAttribute::get<mlir::DistinctAttr>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  const char *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  _OWORD v28[3];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  memset(v28, 0, sizeof(v28));
  v26 = v28;
  v27 = 0x300000000;
  *(_QWORD *)&v23 = mlir::detail::StorageUserBase<mlir::DistinctAttr,mlir::Attribute,mlir::detail::DistinctAttrStorage,mlir::detail::DistinctAttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v25 = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((v3 & 1) == 0)
  {
    v19 = a1;
    a1 = v19;
    if (v11)
    {
      v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
      v22 = 68;
      v12 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v12)
        v13 = v12;
      else
        v13 = v22;
      v14 = &v21[v13];
      v15 = v22 - v13;
      if (v22 - v13 >= 0x12)
        v16 = 18;
      else
        v16 = v22 - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      a1 = v19;
    }
  }
  v4 = mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id;
  *a2 = a1;
  a2[1] = a2 + 3;
  a2[2] = 0x300000000;
  if ((_DWORD)v27)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=((uint64_t)(a2 + 1), (uint64_t)&v26);
  v5 = (unint64_t)v25;
  a2[12] = v25;
  if (v5 >= 8)
  {
    v6 = a2 + 9;
    if ((v5 & 2) != 0 && (v5 & 4) != 0)
    {
      (*(void (**)(uint64_t, void *))((v5 & 0xFFFFFFFFFFFFFFF8) + 8))((uint64_t)v6, &v23);
    }
    else
    {
      *v6 = v23;
      a2[11] = v24;
    }
  }
  a2[13] = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12DistinctAttrES2_NSB_19DistinctAttrStorageENSB_24DistinctAttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  a2[14] = &v21;
  a2[15] = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12DistinctAttrES2_NSA_19DistinctAttrStorageENSA_24DistinctAttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  a2[16] = &v20;
  a2[17] = v4;
  v7 = v26;
  if ((_DWORD)v27)
  {
    v8 = 16 * v27;
    v9 = (void **)((char *)v26 + 8);
    do
    {
      v10 = *v9;
      v9 += 2;
      free(v10);
      v8 -= 16;
    }
    while (v8);
    v7 = v26;
  }
  if (v7 != v28)
    free(v7);
}

uint64_t *mlir::detail::AttributeUniquer::registerAttribute<mlir::DistinctAttr>(mlir::MLIRContext *a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t *AttributeUniquer;
  uint64_t v4;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  const char *v15;
  unint64_t v16;

  if ((v1 & 1) == 0)
  {
    v14 = a1;
    a1 = v14;
    if (v6)
    {
      v15 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
      v16 = 68;
      v7 = llvm::StringRef::find((uint64_t *)&v15, "DesiredTypeName = ", 0x12uLL, 0);
      if (v16 >= v7)
        v8 = v7;
      else
        v8 = v16;
      v9 = &v15[v8];
      v10 = v16 - v8;
      if (v16 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v16 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      a1 = v14;
    }
  }
  v2 = mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id;
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(a1);
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, v2, 0, v4);
}

uint64_t mlir::detail::StorageUserBase<mlir::DistinctAttr,mlir::Attribute,mlir::detail::DistinctAttrStorage,mlir::detail::DistinctAttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12DistinctAttrES2_NSB_19DistinctAttrStorageENSB_24DistinctAttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[4];

  v6 = *(_QWORD *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

_QWORD *_ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12DistinctAttrES2_NSA_19DistinctAttrStorageENSA_24DistinctAttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t Context;
  uint64_t v6;
  uint64_t v7;

  v6 = a2;
  if (*(_QWORD *)(a2 + 8))
    v3 = *a3;
  else
    v3 = 0;
  Context = mlir::Attribute::getContext((mlir::Attribute *)&v6);
  v7 = v3;
  return mlir::detail::DistinctAttributeUniquer::get<mlir::DistinctAttr,mlir::Attribute &>(Context, &v7);
}

uint64_t llvm::array_pod_sort_comparator<mlir::NamedAttribute>(uint64_t *a1, uint64_t *a2)
{
  if ((mlir::NamedAttribute::operator<(a1, a2) & 1) != 0)
    return 0xFFFFFFFFLL;
  else
    return mlir::NamedAttribute::operator<(a2, a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  unint64_t v15;
  _QWORD v16[2];
  __int128 *v17;
  __int128 v18;
  _QWORD v19[2];

  v19[0] = a2;
  v19[1] = a3;
  v18 = *a5;
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v14)
    {
      v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v15 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v15;
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v9 = v8[19];
  v10 = llvm::hashing::detail::hash_combine_range_impl<mlir::NamedAttribute const*>((_DWORD *)v18, (_DWORD *)(v18 + 16 * *((_QWORD *)&v18 + 1)));
  v11 = v9 ^ HIDWORD(v10);
  v12 = 0x9DDFEA08EB382D69 * ((8 * v10 + 8) ^ v11);
  v16[0] = &v18;
  v16[1] = v19;
  v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, -348639895* ((((0x9DDFEA08EB382D69 * (v11 ^ (v12 >> 47) ^ v12)) >> 32) >> 15) ^ (-348639895* (v11 ^ (v12 >> 47) ^ v12))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<mlir::NamedAttribute const*>(_DWORD *a1, _DWORD *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _BOOL4 v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char v99;
  uint64_t v101;
  __int128 *v102;
  char v103;
  char v104;
  __int128 *v105;
  __int128 *v106;
  __int128 *v107;
  BOOL v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  _OWORD *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _OWORD *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  _DWORD *v129;
  _DWORD *v130;
  int v131;
  int v132;
  unint64_t v133;
  char *v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _QWORD v139[2];

  v139[1] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0)
  {
    v129 = a1;
    v130 = a2;
    a2 = v130;
    v132 = v131;
    a1 = v129;
    if (v132)
    {
      v133 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v133 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v133;
      a1 = v129;
      a2 = v130;
    }
  }
  if (a1 == a2)
  {
    v123 = 0;
  }
  else
  {
    v3 = (a1[2] >> 4) ^ (a1[2] >> 9);
    v4 = (v3 | ((unint64_t)((*a1 >> 4) ^ (*a1 >> 9)) << 32)) + ~(v3 << 32);
    v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
    v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
    v7 = ((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27));
    *(_QWORD *)&v135 = v7;
    if (a1 + 4 == a2)
    {
      v123 = 8;
    }
    else
    {
      v8 = ((a1[6] >> 4) ^ (a1[6] >> 9) | ((unint64_t)((a1[4] >> 4) ^ (a1[4] >> 9)) << 32))
         + ~((unint64_t)((a1[6] >> 4) ^ (a1[6] >> 9)) << 32);
      v9 = 9
         * (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) ^ (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = (v10 >> 31) ^ v10;
      *((_QWORD *)&v135 + 1) = v11;
      if (a1 + 8 == a2)
      {
        v123 = 16;
      }
      else
      {
        v12 = (a1[10] >> 4) ^ (a1[10] >> 9);
        v13 = (v12 | ((unint64_t)((a1[8] >> 4) ^ (a1[8] >> 9)) << 32)) + ~(v12 << 32);
        v14 = (v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13);
        v15 = (9 * (v14 ^ (v14 >> 8))) ^ ((9 * (v14 ^ (v14 >> 8))) >> 15);
        v16 = ((v15 + ~(v15 << 27)) >> 31) ^ ((_DWORD)v15 + ~((_DWORD)v15 << 27));
        *(_QWORD *)&v136 = v16;
        if (a1 + 12 == a2)
        {
          v123 = 24;
        }
        else
        {
          v17 = ((a1[14] >> 4) ^ (a1[14] >> 9) | ((unint64_t)((a1[12] >> 4) ^ (a1[12] >> 9)) << 32))
              + ~((unint64_t)((a1[14] >> 4) ^ (a1[14] >> 9)) << 32);
          v18 = 9
              * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22))
                                                                        + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = (v19 >> 31) ^ v19;
          *((_QWORD *)&v136 + 1) = v20;
          if (a1 + 16 == a2)
          {
            v123 = 32;
          }
          else
          {
            v21 = (a1[18] >> 4) ^ (a1[18] >> 9);
            v22 = (v21 | ((unint64_t)((a1[16] >> 4) ^ (a1[16] >> 9)) << 32)) + ~(v21 << 32);
            v23 = (v22 ^ (v22 >> 22)) + ~((v22 ^ (v22 >> 22)) << 13);
            v24 = (9 * (v23 ^ (v23 >> 8))) ^ ((9 * (v23 ^ (v23 >> 8))) >> 15);
            v25 = ((v24 + ~(v24 << 27)) >> 31) ^ ((_DWORD)v24 + ~((_DWORD)v24 << 27));
            *(_QWORD *)&v137 = v25;
            if (a1 + 20 == a2)
            {
              v123 = 40;
            }
            else
            {
              v26 = ((a1[22] >> 4) ^ (a1[22] >> 9) | ((unint64_t)((a1[20] >> 4) ^ (a1[20] >> 9)) << 32))
                  + ~((unint64_t)((a1[22] >> 4) ^ (a1[22] >> 9)) << 32);
              v27 = 9
                  * (((v26 ^ (v26 >> 22)) + ~((v26 ^ (v26 >> 22)) << 13)) ^ (((v26 ^ (v26 >> 22))
                                                                            + ~((v26 ^ (v26 >> 22)) << 13)) >> 8));
              v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
              v29 = (v28 >> 31) ^ v28;
              *((_QWORD *)&v137 + 1) = v29;
              if (a1 + 24 == a2)
              {
                v123 = 48;
              }
              else
              {
                v30 = (a1[26] >> 4) ^ (a1[26] >> 9);
                v31 = (v30 | ((unint64_t)((a1[24] >> 4) ^ (a1[24] >> 9)) << 32)) + ~(v30 << 32);
                v32 = (v31 ^ (v31 >> 22)) + ~((v31 ^ (v31 >> 22)) << 13);
                v33 = (9 * (v32 ^ (v32 >> 8))) ^ ((9 * (v32 ^ (v32 >> 8))) >> 15);
                v34 = ((v33 + ~(v33 << 27)) >> 31) ^ ((_DWORD)v33 + ~((_DWORD)v33 << 27));
                *(_QWORD *)&v138 = v34;
                if (a1 + 28 == a2)
                {
                  v123 = 56;
                }
                else
                {
                  v35 = ((a1[30] >> 4) ^ (a1[30] >> 9) | ((unint64_t)((a1[28] >> 4) ^ (a1[28] >> 9)) << 32))
                      + ~((unint64_t)((a1[30] >> 4) ^ (a1[30] >> 9)) << 32);
                  v36 = 9
                      * (((v35 ^ (v35 >> 22)) + ~((v35 ^ (v35 >> 22)) << 13)) ^ (((v35 ^ (v35 >> 22))
                                                                                + ~((v35 ^ (v35 >> 22)) << 13)) >> 8));
                  v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
                  v38 = (v37 >> 31) ^ v37;
                  *((_QWORD *)&v138 + 1) = v38;
                  v39 = a1 + 32;
                  if (a1 + 32 != a2)
                  {
                    v40 = llvm::hashing::detail::get_execution_seed(void)::seed ^ ((unint64_t)llvm::hashing::detail::get_execution_seed(void)::seed >> 47);
                    v41 = 0x9DDFEA08EB382D69
                        * (llvm::hashing::detail::get_execution_seed(void)::seed ^ (((0x9DDFEA08EB382D69
                                                                                    * (v40 ^ (0xB492B66FBE98F273
                                                                                            * llvm::hashing::detail::get_execution_seed(void)::seed))) ^ llvm::hashing::detail::get_execution_seed(void)::seed) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ (0xB492B66FBE98F273 * llvm::hashing::detail::get_execution_seed(void)::seed))));
                    v42 = 0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47));
                    v43 = 0x9DDFEA08EB382D69
                        * ((0x9DDFEA08EB382D69
                          * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
                    v44 = __ROR8__(v40 - 0x622015F714C7D297 * (v43 ^ (v43 >> 47)), 33);
                    v45 = 0xB492B66FBE98F273 * v44;
                    v46 = v42 + v25 - 0x4B6D499041670D8DLL * v44;
                    v47 = __ROR8__(v29 + v34 + v46, 44);
                    v48 = __ROR8__(llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273, 49);
                    v49 = v29 + v34 + v46 + v38;
                    v50 = v29
                        + v48
                        - 0x4B6D499041670D8DLL
                        * __ROR8__(v34 - 0x4B6D499041670D8CLL * llvm::hashing::detail::get_execution_seed(void)::seed, 42);
                    v51 = v47 + v46 + __ROR8__(v50 + v16 + v46 + v38, 21);
                    v52 = v7 - 0x6D8ED9027DD26057 * llvm::hashing::detail::get_execution_seed(void)::seed;
                    v53 = v52 + v11 + v16;
                    v54 = v53 + v20;
                    v55 = (0xB492B66FBE98F273
                         * __ROR8__(v48 + llvm::hashing::detail::get_execution_seed(void)::seed + v11, 37)) ^ v42;
                    v56 = __ROR8__(v53, 44) + v52 + __ROR8__(v55 + v40 + v52 + v20, 21);
                    v134 = (char *)&v136 + 8;
                    v57 = 64;
                    while (1)
                    {
                      v65 = ((v39[2] >> 4) ^ (v39[2] >> 9) | ((unint64_t)((*v39 >> 4) ^ (*v39 >> 9)) << 32))
                          + ~((unint64_t)((v39[2] >> 4) ^ (v39[2] >> 9)) << 32);
                      v66 = (v65 ^ (v65 >> 22)) + ~((v65 ^ (v65 >> 22)) << 13);
                      v67 = (9 * (v66 ^ (v66 >> 8))) ^ ((9 * (v66 ^ (v66 >> 8))) >> 15);
                      *(_QWORD *)&v135 = ((v67 + ~(v67 << 27)) >> 31) ^ ((_DWORD)v67 + ~((_DWORD)v67 << 27));
                      v68 = v39 + 4 == a2;
                      if (v39 + 4 == a2)
                      {
                        v90 = 0;
                        v91 = 8;
                        v39 += 4;
                        v92 = (char *)&v135 + 8;
                      }
                      else
                      {
                        v69 = ((v39[6] >> 4) ^ (v39[6] >> 9) | ((unint64_t)((v39[4] >> 4) ^ (v39[4] >> 9)) << 32))
                            + ~((unint64_t)((v39[6] >> 4) ^ (v39[6] >> 9)) << 32);
                        v70 = (v69 ^ (v69 >> 22)) + ~((v69 ^ (v69 >> 22)) << 13);
                        v71 = (9 * (v70 ^ (v70 >> 8))) ^ ((9 * (v70 ^ (v70 >> 8))) >> 15);
                        *((_QWORD *)&v135 + 1) = ((v71 + ~(v71 << 27)) >> 31) ^ ((_DWORD)v71
                                                                                             + ~((_DWORD)v71 << 27));
                        v68 = v39 + 8 == a2;
                        if (v39 + 8 == a2)
                        {
                          v90 = 8;
                          v91 = 16;
                          v39 += 8;
                          v92 = (char *)&v136;
                        }
                        else
                        {
                          v72 = ((v39[10] >> 4) ^ (v39[10] >> 9) | ((unint64_t)((v39[8] >> 4) ^ (v39[8] >> 9)) << 32))
                              + ~((unint64_t)((v39[10] >> 4) ^ (v39[10] >> 9)) << 32);
                          v73 = (v72 ^ (v72 >> 22)) + ~((v72 ^ (v72 >> 22)) << 13);
                          v74 = (9 * (v73 ^ (v73 >> 8))) ^ ((9 * (v73 ^ (v73 >> 8))) >> 15);
                          *(_QWORD *)&v136 = ((v74 + ~(v74 << 27)) >> 31) ^ ((_DWORD)v74
                                                                                         + ~((_DWORD)v74 << 27));
                          v68 = v39 + 12 == a2;
                          if (v39 + 12 == a2)
                          {
                            v90 = 16;
                            v91 = 24;
                            v39 += 12;
                            v92 = v134;
                          }
                          else
                          {
                            v75 = ((v39[14] >> 4) ^ (v39[14] >> 9) | ((unint64_t)((v39[12] >> 4) ^ (v39[12] >> 9)) << 32))
                                + ~((unint64_t)((v39[14] >> 4) ^ (v39[14] >> 9)) << 32);
                            v76 = (v75 ^ (v75 >> 22)) + ~((v75 ^ (v75 >> 22)) << 13);
                            v77 = (9 * (v76 ^ (v76 >> 8))) ^ ((9 * (v76 ^ (v76 >> 8))) >> 15);
                            *((_QWORD *)&v136 + 1) = ((v77 + ~(v77 << 27)) >> 31) ^ ((_DWORD)v77
                                                                                                 + ~((_DWORD)v77 << 27));
                            v68 = v39 + 16 == a2;
                            if (v39 + 16 == a2)
                            {
                              v90 = 24;
                              v91 = 32;
                              v39 += 16;
                              v92 = (char *)&v137;
                            }
                            else
                            {
                              v78 = ((v39[18] >> 4) ^ (v39[18] >> 9) | ((unint64_t)((v39[16] >> 4) ^ (v39[16] >> 9)) << 32))
                                  + ~((unint64_t)((v39[18] >> 4) ^ (v39[18] >> 9)) << 32);
                              v79 = (v78 ^ (v78 >> 22)) + ~((v78 ^ (v78 >> 22)) << 13);
                              v80 = (9 * (v79 ^ (v79 >> 8))) ^ ((9 * (v79 ^ (v79 >> 8))) >> 15);
                              *(_QWORD *)&v137 = ((v80 + ~(v80 << 27)) >> 31) ^ ((_DWORD)v80
                                                                                             + ~((_DWORD)v80 << 27));
                              v68 = v39 + 20 == a2;
                              if (v39 + 20 == a2)
                              {
                                v90 = 32;
                                v91 = 40;
                                v39 += 20;
                                v92 = (char *)&v137 + 8;
                              }
                              else
                              {
                                v81 = ((v39[22] >> 4) ^ (v39[22] >> 9) | ((unint64_t)((v39[20] >> 4) ^ (v39[20] >> 9)) << 32))
                                    + ~((unint64_t)((v39[22] >> 4) ^ (v39[22] >> 9)) << 32);
                                v82 = (v81 ^ (v81 >> 22)) + ~((v81 ^ (v81 >> 22)) << 13);
                                v83 = (9 * (v82 ^ (v82 >> 8))) ^ ((9 * (v82 ^ (v82 >> 8))) >> 15);
                                *((_QWORD *)&v137 + 1) = ((v83 + ~(v83 << 27)) >> 31) ^ ((_DWORD)v83 + ~((_DWORD)v83 << 27));
                                v68 = v39 + 24 == a2;
                                if (v39 + 24 == a2)
                                {
                                  v90 = 40;
                                  v91 = 48;
                                  v39 += 24;
                                  v92 = (char *)&v138;
                                }
                                else
                                {
                                  v84 = ((v39[26] >> 4) ^ (v39[26] >> 9) | ((unint64_t)((v39[24] >> 4) ^ (v39[24] >> 9)) << 32))
                                      + ~((unint64_t)((v39[26] >> 4) ^ (v39[26] >> 9)) << 32);
                                  v85 = (v84 ^ (v84 >> 22)) + ~((v84 ^ (v84 >> 22)) << 13);
                                  v86 = (9 * (v85 ^ (v85 >> 8))) ^ ((9 * (v85 ^ (v85 >> 8))) >> 15);
                                  *(_QWORD *)&v138 = ((v86 + ~(v86 << 27)) >> 31) ^ ((_DWORD)v86
                                                                                                 + ~((_DWORD)v86 << 27));
                                  v68 = v39 + 28 == a2;
                                  if (v39 + 28 == a2)
                                  {
                                    v90 = 48;
                                    v91 = 56;
                                    v39 += 28;
                                    v92 = (char *)&v138 + 8;
                                  }
                                  else
                                  {
                                    v87 = ((v39[30] >> 4) ^ (v39[30] >> 9) | ((unint64_t)((v39[28] >> 4) ^ (v39[28] >> 9)) << 32))
                                        + ~((unint64_t)((v39[30] >> 4) ^ (v39[30] >> 9)) << 32);
                                    v88 = (v87 ^ (v87 >> 22)) + ~((v87 ^ (v87 >> 22)) << 13);
                                    v89 = (9 * (v88 ^ (v88 >> 8))) ^ ((9 * (v88 ^ (v88 >> 8))) >> 15);
                                    v39 += 32;
                                    *((_QWORD *)&v138 + 1) = ((v89 + ~(v89 << 27)) >> 31) ^ ((_DWORD)v89 + ~((_DWORD)v89 << 27));
                                    v68 = v39 == a2;
                                    v90 = 56;
                                    v91 = 64;
                                    v92 = (char *)v139;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      if ((v91 & 0x38) == 0)
                        goto LABEL_12;
                      v93 = 56 - v90;
                      v94 = v91;
                      if (v91 != 56 - v90)
                      {
                        do
                        {
                          v101 = v94;
                          v94 = v93;
                          v93 = v101 % v93;
                        }
                        while (v93);
                        if (v94)
                        {
                          v102 = (__int128 *)((char *)&v135 + v94);
                          do
                          {
                            v104 = *((_BYTE *)v102 - 1);
                            v102 = (__int128 *)((char *)v102 - 1);
                            v103 = v104;
                            v105 = (__int128 *)((char *)v102 + v91);
                            v106 = v102;
                            do
                            {
                              v107 = v106;
                              v106 = v105;
                              *(_BYTE *)v107 = *(_BYTE *)v105;
                              v108 = v91 < (char *)v139 - (char *)v105;
                              v109 = (char *)&v135 + v91 - ((char *)v139 - (char *)v105);
                              v105 = (__int128 *)((char *)v105 + v91);
                              if (!v108)
                                v105 = (__int128 *)v109;
                            }
                            while (v105 != v102);
                            *(_BYTE *)v106 = v103;
                          }
                          while (v102 != &v135);
                        }
                        goto LABEL_12;
                      }
                      v95 = 55 - v90;
                      if (55 - v90 >= (v90 | 7uLL))
                        v95 = v90 | 7;
                      v96 = (char *)&v135;
                      if (&v135 < (__int128 *)((char *)&v135 + v90 + v95 + 9))
                      {
                        v97 = v91;
                        if (v92 < (char *)&v135 + v95 + 1)
                          goto LABEL_34;
                      }
                      if (v95 >= 0x1F)
                      {
                        v111 = v95 + 1;
                        v110 = (v95 + 1) & 0x60;
                        v112 = (__int128 *)((char *)&v135 + v91);
                        v113 = v135;
                        v114 = v136;
                        v115 = *(__int128 *)((char *)&v135 + v91 + 16);
                        v135 = *(__int128 *)((char *)&v135 + v91);
                        v136 = v115;
                        *v112 = v113;
                        v112[1] = v114;
                        if (v110 != 32)
                        {
                          v116 = (__int128 *)((char *)&v137 + v91);
                          v117 = v137;
                          v118 = v138;
                          v119 = *(__int128 *)((char *)&v137 + v91 + 16);
                          v137 = *(__int128 *)((char *)&v137 + v91);
                          v138 = v119;
                          *v116 = v117;
                          v116[1] = v118;
                        }
                        if (v111 == v110)
                          goto LABEL_12;
                        if ((v111 & 0x18) == 0)
                        {
                          v96 = (char *)&v135 + v110;
                          v97 = v91 + v110;
LABEL_34:
                          v98 = v96 + 1;
                          do
                          {
                            v99 = *(v98 - 1);
                            *(v98 - 1) = *((_BYTE *)&v135 + v97);
                            *((_BYTE *)&v135 + v97) = v99;
                            if (v98 == v92)
                              break;
                            ++v98;
                          }
                          while (v97++ != 63);
                          goto LABEL_12;
                        }
                      }
                      else
                      {
                        v110 = 0;
                      }
                      v120 = (uint64_t *)((char *)&v135 + v110);
                      v121 = v95 - v110 + 1;
                      do
                      {
                        v122 = *v120;
                        *v120 = v120[(unint64_t)v91 / 8];
                        v120[(unint64_t)v91 / 8] = v122;
                        ++v120;
                        v121 -= 8;
                      }
                      while (v121);
LABEL_12:
                      v58 = v50 + v54 + v45 + *((_QWORD *)&v135 + 1);
                      v50 = *((_QWORD *)&v137 + 1) + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v56 + v138, 42);
                      v59 = v135 - 0x4B6D499041670D8DLL * v56;
                      v60 = v59 + *((_QWORD *)&v135 + 1) + v136;
                      v61 = __ROR8__(v55 + v49, 33);
                      v62 = (0xB492B66FBE98F273 * __ROR8__(v58, 37)) ^ v51;
                      v56 = __ROR8__(v60, 44) + v59 + __ROR8__(v62 + v49 + v59 + *((_QWORD *)&v136 + 1), 21);
                      v45 = 0xB492B66FBE98F273 * v61;
                      v63 = 0xB492B66FBE98F273 * v61 + v51 + v137;
                      v64 = *((_QWORD *)&v137 + 1) + v138 + v63;
                      v54 = v60 + *((_QWORD *)&v136 + 1);
                      v51 = __ROR8__(v50 + v136 + v63 + *((_QWORD *)&v138 + 1), 21) + v63 + __ROR8__(v64, 44);
                      v49 = v64 + *((_QWORD *)&v138 + 1);
                      v57 += v91;
                      v55 = v62;
                      if (v68)
                      {
                        v124 = 0x9DDFEA08EB382D69
                             * (v49 ^ ((0x9DDFEA08EB382D69 * (v54 ^ v49)) >> 47) ^ (0x9DDFEA08EB382D69 * (v54 ^ v49)));
                        v125 = 0x9DDFEA08EB382D69
                             * (v51 ^ ((0x9DDFEA08EB382D69 * (v56 ^ v51)) >> 47) ^ (0x9DDFEA08EB382D69 * (v56 ^ v51)));
                        v126 = 0x9DDFEA08EB382D69 * (v125 ^ (v125 >> 47))
                             - 0x4B6D499041670D8DLL * ((v57 ^ (v57 >> 47)) + v61);
                        v127 = 0x9DDFEA08EB382D69
                             * (v126 ^ (v62
                                      - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47))
                                      - 0x622015F714C7D297 * (v124 ^ (v124 >> 47))));
                        return 0x9DDFEA08EB382D69
                             * ((0x9DDFEA08EB382D69 * (v126 ^ (v127 >> 47) ^ v127)) ^ ((0x9DDFEA08EB382D69
                                                                                        * (v126 ^ (v127 >> 47) ^ v127)) >> 47));
                      }
                    }
                  }
                  v123 = 64;
                }
              }
            }
          }
        }
      }
    }
  }
  return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v135, v123, llvm::hashing::detail::get_execution_seed(void)::seed);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t ***a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;

  v2 = *(uint64_t **)(a2 + 16);
  if (v2 != (*a1)[1])
    return 0;
  if (!v2)
    return 1;
  v3 = *(uint64_t **)(a2 + 8);
  v4 = **a1;
  v5 = &v3[2 * (_QWORD)v2];
  do
  {
    v6 = *v4;
    v7 = v4[1];
    v4 += 2;
    v8 = *v3;
    v9 = v3[1];
    v3 += 2;
    result = v8 == v6 && v9 == v7;
  }
  while (result && v3 != v5);
  return result;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::DictionaryAttrStorage::construct(a2, *(__int128 ***)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::detail::DictionaryAttrStorage::construct(size_t __sz, __int128 **a2)
{
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  char *buffer;
  uint64_t v13;
  _QWORD *result;

  v3 = a2[1];
  if (v3)
  {
    v4 = *a2;
    v5 = 16 * (_QWORD)v3;
    v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 16 * (_QWORD)v3, 3);
    v7 = (_OWORD *)v6;
    do
    {
      v8 = *v4++;
      *v7++ = v8;
      v5 -= 16;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(__sz + 80) += 24;
  if (*(_QWORD *)__sz)
    v9 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 24 > *(_QWORD *)(__sz + 8)
                                                                                 - *(_QWORD *)__sz;
  else
    v9 = 1;
  if (v9)
  {
    v10 = *(_DWORD *)(__sz + 24) >> 7;
    if (v10 >= 0x1E)
      LOBYTE(v10) = 30;
    v11 = 4096 << v10;
    buffer = (char *)llvm::allocate_buffer(4096 << v10, (std::align_val_t)8uLL);
    v13 = *(unsigned int *)(__sz + 24);
    if (v13 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v13 + 1, 8);
      LODWORD(v13) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v13) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v11];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)__sz = result + 3;
  *result = 0;
  result[1] = v6;
  result[2] = v3;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail21DictionaryAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DictionaryAttrEJRNS_8ArrayRefINS1_14NamedAttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  unint64_t v15;
  _QWORD v16[2];
  __int128 *v17;
  __int128 v18;
  _QWORD v19[2];

  v19[0] = a2;
  v19[1] = a3;
  v18 = *a5;
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v14)
    {
      v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v15 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v15;
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v9 = v8[19];
  v10 = llvm::hashing::detail::hash_combine_range_impl<mlir::NamedAttribute const*>((_DWORD *)v18, (_DWORD *)(v18 + 16 * *((_QWORD *)&v18 + 1)));
  v11 = v9 ^ HIDWORD(v10);
  v12 = 0x9DDFEA08EB382D69 * ((8 * v10 + 8) ^ v11);
  v16[0] = &v18;
  v16[1] = v19;
  v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, -348639895* ((((0x9DDFEA08EB382D69 * (v11 ^ (v12 >> 47) ^ v12)) >> 32) >> 15) ^ (-348639895* (v11 ^ (v12 >> 47) ^ v12))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t ***a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;

  v2 = *(uint64_t **)(a2 + 16);
  if (v2 != (*a1)[1])
    return 0;
  if (!v2)
    return 1;
  v3 = *(uint64_t **)(a2 + 8);
  v4 = **a1;
  v5 = &v3[2 * (_QWORD)v2];
  do
  {
    v6 = *v4;
    v7 = v4[1];
    v4 += 2;
    v8 = *v3;
    v9 = v3[1];
    v3 += 2;
    result = v8 == v6 && v9 == v7;
  }
  while (result && v3 != v5);
  return result;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::DictionaryAttrStorage::construct(__sz, *(__int128 ***)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail21DictionaryAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DictionaryAttrEJNS_8ArrayRefINS1_14NamedAttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,char const(&)[1],mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,char const(&)[1],mlir::NoneType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  size_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 24);
  return v3 == *(_QWORD *)(*a1 + 8)
      && (!v3 || !memcmp(*(const void **)(a2 + 16), *(const void **)v2, v3))
      && *(_QWORD *)(a2 + 8) == *(_QWORD *)(v2 + 16);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,char const(&)[1],mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,char const(&)[1],mlir::NoneType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::StringAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::detail::StringAttrStorage::construct(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  char *buffer;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  unint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  *(_QWORD *)(a1 + 80) += 40;
  v4 = *(_QWORD *)a1;
  v5 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v6 = v5 + 40 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v6 = 1;
  if (v6)
  {
    v7 = *(_DWORD *)(a1 + 24) >> 7;
    if (v7 >= 0x1E)
      LOBYTE(v7) = 30;
    v8 = 4096 << v7;
    buffer = (char *)llvm::allocate_buffer(4096 << v7, (std::align_val_t)8uLL);
    v10 = *(unsigned int *)(a1 + 24);
    if (v10 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v8];
    v11 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)a1 = v11 + 5;
    v12 = a2[1];
    if (!v12)
      goto LABEL_16;
LABEL_11:
    v13 = *a2;
    v14 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)a1, v12 + 1, 0);
    if (v12 < 8)
    {
      v15 = (_BYTE *)v14;
      v16 = (char *)v13;
    }
    else
    {
      v15 = (_BYTE *)v14;
      v16 = (char *)v13;
      if ((unint64_t)(v14 - v13) >= 0x20)
      {
        if (v12 < 0x20)
        {
          v17 = 0;
          goto LABEL_22;
        }
        v17 = v12 & 0xFFFFFFFFFFFFFFE0;
        v18 = (__int128 *)(v13 + 16);
        v19 = (_OWORD *)(v14 + 16);
        v20 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v21 = *v18;
          *(v19 - 1) = *(v18 - 1);
          *v19 = v21;
          v18 += 2;
          v19 += 2;
          v20 -= 32;
        }
        while (v20);
        if (v12 == v17)
          goto LABEL_28;
        if ((v12 & 0x18) != 0)
        {
LABEL_22:
          v15 = (_BYTE *)(v14 + (v12 & 0xFFFFFFFFFFFFFFF8));
          v16 = (char *)(v13 + (v12 & 0xFFFFFFFFFFFFFFF8));
          v22 = (uint64_t *)(v13 + v17);
          v23 = (_QWORD *)(v14 + v17);
          v24 = v17 - (v12 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v25 = *v22++;
            *v23++ = v25;
            v24 += 8;
          }
          while (v24);
          if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_28;
          goto LABEL_27;
        }
        v16 = (char *)(v13 + v17);
        v15 = (_BYTE *)(v14 + v17);
      }
    }
    do
    {
LABEL_27:
      v26 = *v16++;
      *v15++ = v26;
    }
    while (v16 != (char *)(v13 + v12));
LABEL_28:
    *(_BYTE *)(v14 + v12) = 0;
    goto LABEL_29;
  }
  v11 = (_QWORD *)(v4 + v5);
  *(_QWORD *)a1 = v4 + v5 + 40;
  v12 = a2[1];
  if (v12)
    goto LABEL_11;
LABEL_16:
  v14 = 0;
LABEL_29:
  v27 = a2[2];
  *v11 = 0;
  v11[1] = v27;
  v11[2] = v14;
  v11[3] = v12;
  v11[4] = 0;
  return v11;
}

void _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJRA1_KcNS1_8NoneTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t *a1, mlir::detail::StringAttrStorage *a2)
{
  mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
  mlir::detail::StringAttrStorage::initialize(a2, (mlir::MLIRContext *)a1[1]);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::NoneType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  size_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 24);
  return v3 == *(_QWORD *)(*a1 + 8)
      && (!v3 || !memcmp(*(const void **)(a2 + 16), *(const void **)v2, v3))
      && *(_QWORD *)(a2 + 8) == *(_QWORD *)(v2 + 16);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::NoneType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::StringAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

void _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJNS_9StringRefENS1_8NoneTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, mlir::detail::StringAttrStorage *a2)
{
  mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
  mlir::detail::StringAttrStorage::initialize(a2, (mlir::MLIRContext *)a1[1]);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  size_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 24);
  return v3 == *(_QWORD *)(*a1 + 8)
      && (!v3 || !memcmp(*(const void **)(a2 + 16), *(const void **)v2, v3))
      && *(_QWORD *)(a2 + 8) == *(_QWORD *)(v2 + 16);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::StringAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

void _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJNS_9StringRefERNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, mlir::detail::StringAttrStorage *a2)
{
  mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
  mlir::detail::StringAttrStorage::initialize(a2, (mlir::MLIRContext *)a1[1]);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::IntegerType &,llvm::APInt>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::IntegerType &,llvm::APInt &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  const void **v4;
  const void **v5;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)*a1)
    return 0;
  v4 = (const void **)(a2 + 16);
  v5 = (const void **)(v2 + 1);
  if (*(_DWORD *)(a2 + 24) > 0x40u)
    return llvm::APInt::equalSlowCase(v4, v5);
  else
    return *v4 == *v5;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::IntegerType &,llvm::APInt>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::IntegerType &,llvm::APInt &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = mlir::detail::IntegerAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, unint64_t))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_11IntegerTypeENS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  size_t v3;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)*a1
    && *(_QWORD *)(a2 + 16) == v2[1]
    && (v3 = *(_QWORD *)(a2 + 32), v3 == v2[3]))
  {
    return memcmp(*(const void **)(a2 + 24), (const void *)v2[2], v3) == 0;
  }
  else
  {
    return 0;
  }
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::DenseArrayAttrStorage::construct(__sz, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::DenseArrayAttrImpl<long long>::parseWithoutBraces(mlir::AsmParser &,mlir::Type)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  if (!mlir::AsmParser::parseInteger<long long>(*a1, &v6))
    return 0;
  v2 = a1[1];
  v3 = v6;
  v4 = *(unsigned int *)(v2 + 8);
  if (v4 >= *(_DWORD *)(v2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v2, (void *)(v2 + 16), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v2 + 8 * v4) = v3;
  ++*(_DWORD *)(v2 + 8);
  return 1;
}

void llvm::SmallVectorTemplateBase<std::complex<llvm::APInt>,false>::grow(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  char *v4;
  char *v5;
  _DWORD *v6;
  uint64_t v7;
  char *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  int v16;
  unint64_t v17;

  v17 = 0;
  v3 = (_DWORD *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 32, &v17);
  v5 = v4;
  v6 = *(_DWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = v4 + 16;
    v9 = v6 + 6;
    v10 = 32 * v7;
    do
    {
      *((_DWORD *)v8 - 2) = *(v9 - 4);
      *((_QWORD *)v8 - 2) = *((_QWORD *)v9 - 3);
      *(v9 - 4) = 0;
      *((_DWORD *)v8 + 2) = *v9;
      *(_QWORD *)v8 = *((_QWORD *)v9 - 1);
      v8 += 32;
      *v9 = 0;
      v9 += 8;
      v10 -= 32;
    }
    while (v10);
    v6 = *(_DWORD **)a1;
    v11 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v11)
    {
      v12 = 8 * v11;
      do
      {
        v13 = (char *)&v6[v12];
        if (v6[v12 - 2] >= 0x41u)
        {
          v14 = (void *)*((_QWORD *)v13 - 2);
          if (v14)
            operator delete[](v14);
        }
        if (*((_DWORD *)v13 - 6) >= 0x41u)
        {
          v15 = (void *)*((_QWORD *)v13 - 4);
          if (v15)
            operator delete[](v15);
        }
        v12 -= 8;
      }
      while (v12 * 4);
      v6 = *(_DWORD **)a1;
    }
  }
  v16 = v17;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v16;
}

void llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::moveElementsForGrow(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::detail::DoubleAPFloat *v17;
  llvm::detail::DoubleAPFloat *v18;

  v2 = a1[2];
  if (!(_DWORD)v2)
    return;
  v5 = *(_QWORD *)a1;
  v6 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  v7 = (_QWORD *)(a2 + 40);
  v8 = v2 << 6;
  v9 = (_QWORD *)(v5 + 40);
  do
  {
    while (1)
    {
      v10 = v7 - 4;
      v11 = v9 - 4;
      if (v6 != (void *)*(v9 - 4))
        break;
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
      v12 = v7;
      v13 = v9;
      if (v6 != (void *)*v9)
        goto LABEL_8;
LABEL_3:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v12, v13);
      v7 += 8;
      v9 += 8;
      v8 -= 64;
      if (!v8)
        goto LABEL_9;
    }
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
    v12 = v7;
    v13 = v9;
    if (v6 == (void *)*v9)
      goto LABEL_3;
LABEL_8:
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v12, (uint64_t)v13);
    v7 += 8;
    v9 += 8;
    v8 -= 64;
  }
  while (v8);
LABEL_9:
  v14 = a1[2];
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)a1;
    v16 = v14 << 6;
    while (1)
    {
      v17 = (llvm::detail::DoubleAPFloat *)(v15 + v16 - 24);
      if (v6 == *(void **)v17)
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v17);
        v18 = (llvm::detail::DoubleAPFloat *)(v15 + v16 - 56);
        if (v6 != *(void **)v18)
          goto LABEL_16;
LABEL_11:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v18);
        v16 -= 64;
        if (!v16)
          return;
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat(v17);
        v18 = (llvm::detail::DoubleAPFloat *)(v15 + v16 - 56);
        if (v6 == *(void **)v18)
          goto LABEL_11;
LABEL_16:
        llvm::detail::IEEEFloat::~IEEEFloat(v18);
        v16 -= 64;
        if (!v16)
          return;
      }
    }
  }
}

char *llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::reserveForParamAndGetAddress(unsigned int *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  unsigned int *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  char *v15;
  unsigned int v16;
  unint64_t v17;

  v3 = a2;
  v4 = a1[2];
  v5 = v4 + a3;
  if (v5 > a1[3])
  {
    v8 = *(_QWORD *)a1 + (v4 << 6);
    if (*(_QWORD *)a1 <= a2 && v8 > a2)
    {
      v13 = (uint64_t)(a2 - *(_QWORD *)a1) >> 6;
      v17 = 0;
      v14 = a1 + 4;
      v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a1 + 4, v5, 64, &v17);
      llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::moveElementsForGrow(a1, (uint64_t)v15);
      v16 = v17;
      if (*(unsigned int **)a1 != v14)
        free(*(void **)a1);
      *(_QWORD *)a1 = v15;
      a1[3] = v16;
      return &v15[64 * v13];
    }
    else
    {
      v17 = 0;
      v10 = a1 + 4;
      v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a1 + 4, v5, 64, &v17);
      llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::moveElementsForGrow(a1, (uint64_t)v11);
      v12 = v17;
      if (*(unsigned int **)a1 != v10)
        free(*(void **)a1);
      *(_QWORD *)a1 = v11;
      a1[3] = v12;
    }
  }
  return (char *)v3;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, unsigned __int8 *a7)
{
  uint64_t *v9;
  unsigned __int8 v10;
  unsigned int v11;
  int v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD v16[8];
  uint64_t v17;
  _QWORD v18[2];
  __int128 v19;
  _OWORD v20[3];
  char v21[48];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v18[0] = a2;
  v18[1] = a3;
  mlir::detail::DenseIntOrFPElementsAttrStorage::getKey(*a5, a5[1], *(unsigned __int8 **)a6, *(_QWORD *)(a6 + 8), *a7, (uint64_t)v16);
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v19 = 0u;
  memset(v20, 0, sizeof(v20));
  v9 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v9 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v13)
    {
      v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v14 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      v9 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v23 = v9[19];
  *(_QWORD *)&v19 = (v16[0] >> 4) ^ (v16[0] >> 9);
  *((_QWORD *)&v19 + 1) = v17;
  v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v19, 0, (char *)v20, v21);
  v15 = v16;
  *(_QWORD *)&v19 = v16;
  *((_QWORD *)&v19 + 1) = v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseIntOrFPElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(llvm::function_ref<void ()(mlir::detail::DenseIntOrFPElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseIntOrFPElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(llvm::function_ref<void ()(mlir::detail::DenseIntOrFPElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v19);
}

void mlir::detail::DenseIntOrFPElementsAttrStorage::getKey(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  _BOOL4 isInteger;
  _BOOL4 v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *ArgAttrsAttr;
  uint64_t v19;
  char NumElements;
  unint64_t v21;
  uint64_t OperandRange;
  unint64_t DenseElementBitWidth;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD v31[2];
  unint64_t v32;
  __int128 v33;

  *(_QWORD *)&v33 = a1;
  *((_QWORD *)&v33 + 1) = a2;
  if (!a4)
  {
    *(_QWORD *)a6 = a1;
    *(_QWORD *)(a6 + 8) = a2;
    *(_QWORD *)(a6 + 24) = 0;
    *(_QWORD *)(a6 + 32) = 0;
    *(_QWORD *)(a6 + 16) = a3;
    *(_BYTE *)(a6 + 40) = 0;
    return;
  }
  v31[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
  isInteger = mlir::Type::isInteger((mlir::Type *)v31, 1);
  v11 = isInteger;
  if (a5)
  {
    v12 = v33;
    if (isInteger)
    {
      if (*a3)
        v13 = (char *)&mlir::detail::DenseIntOrFPElementsAttrStorage::kSplatTrue;
      else
        v13 = (char *)&mlir::detail::DenseIntOrFPElementsAttrStorage::kSplatFalse;
      v14 = *v13;
      if ((v15 & 1) == 0
      {
        v30 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v30 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v30;
      }
      v16 = 0x9DDFEA08EB382D69
          * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v14) ^ HIDWORD(v14));
      v17 = 0x9DDFEA08EB382D69 * (HIDWORD(v14) ^ (v16 >> 47) ^ v16);
      *(_OWORD *)a6 = v12;
      *(_QWORD *)(a6 + 16) = v13;
      *(_QWORD *)(a6 + 24) = 1;
      *(_QWORD *)(a6 + 32) = 0x9DDFEA08EB382D69 * (v17 ^ (v17 >> 47));
      *(_BYTE *)(a6 + 40) = 1;
      return;
    }
    v21 = llvm::hashing::detail::hash_combine_range_impl<char const>(a3, (uint64_t)&a3[a4]);
    *(_OWORD *)a6 = v12;
    *(_QWORD *)(a6 + 16) = a3;
    *(_QWORD *)(a6 + 24) = a4;
    *(_QWORD *)(a6 + 32) = v21;
LABEL_21:
    *(_BYTE *)(a6 + 40) = 1;
    return;
  }
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v33);
  NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v19);
  if (v11)
  {
    mlir::detail::DenseIntOrFPElementsAttrStorage::getKeyForBoolData(v33, *((uint64_t *)&v33 + 1), a3, a4, NumElements, a6);
    return;
  }
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
  DenseElementBitWidth = mlir::detail::getDenseElementBitWidth(OperandRange);
  v24 = (DenseElementBitWidth + 7) >> 3;
  if (a4 >= v24)
    v25 = (DenseElementBitWidth + 7) >> 3;
  else
    v25 = a4;
  v26 = llvm::hashing::detail::hash_combine_range_impl<char const>(a3, (uint64_t)&a3[v25]);
  v32 = v26;
  if (v24 == a4)
  {
LABEL_20:
    *(_OWORD *)a6 = v33;
    *(_QWORD *)(a6 + 16) = a3;
    *(_QWORD *)(a6 + 24) = v25;
    *(_QWORD *)(a6 + 32) = v26;
    goto LABEL_21;
  }
  v27 = v24;
  while (!memcmp(a3, &a3[v27], v24))
  {
    v27 += v24;
    if (a4 == v27)
      goto LABEL_20;
  }
  v28 = v33;
  v31[0] = &a3[v27];
  v31[1] = a4 - v27;
  v29 = llvm::hash_combine<llvm::hash_code,llvm::ArrayRef<char>>(&v32, (uint64_t)v31);
  *(_OWORD *)a6 = v28;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_QWORD *)(a6 + 32) = v29;
  *(_BYTE *)(a6 + 40) = 0;
}

unint64_t mlir::detail::DenseIntOrFPElementsAttrStorage::getKeyForBoolData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  unint64_t result;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unint64_t v25;
  char v26;
  int v27;
  unint64_t v28;
  unsigned __int8 *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;

  v6 = a4;
  v7 = a3;
  v11 = (unsigned __int8 *)&mlir::detail::DenseIntOrFPElementsAttrStorage::kSplatFalse;
  v12 = *a3;
  if ((v12 & 1) != 0)
    v11 = (unsigned __int8 *)&mlir::detail::DenseIntOrFPElementsAttrStorage::kSplatTrue;
  v13 = a4 - 1;
  if (a4 != 1 || (v14 = *v11, v12 != v14))
  {
    if ((a5 & 7) != 0 && (v12 & 1) != 0)
    {
      if (0xFFu >> (8 - (a5 & 7)) != (char)a3[v13])
      {
LABEL_23:
        result = llvm::hashing::detail::hash_combine_range_impl<char const>(a3, (uint64_t)&a3[a4]);
        v26 = 0;
        goto LABEL_24;
      }
      if (a4 == 1)
      {
        if ((v19 & 1) == 0
        {
          v32 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v32 = 0xFF51AFD7ED558CCDLL;
          llvm::hashing::detail::get_execution_seed(void)::seed = v32;
        }
        v20 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * ((llvm::hashing::detail::get_execution_seed(void)::seed + 0x7FFFFFFF8) ^ 0xFFFFFFFFLL)) ^ ((0x9DDFEA08EB382D69 * ((llvm::hashing::detail::get_execution_seed(void)::seed + 0x7FFFFFFF8) ^ 0xFFFFFFFFLL)) >> 47) ^ 0xFFFFFFFF);
        result = 0x9DDFEA08EB382D69 * (v20 ^ (v20 >> 47));
        v6 = 1;
        v7 = (unsigned __int8 *)&mlir::detail::DenseIntOrFPElementsAttrStorage::kSplatTrue;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = a4;
      if (!a4)
      {
LABEL_19:
        v15 = (char)*v11;
        if ((v24 & 1) == 0)
        {
          v33 = v11;
          v11 = v33;
          if (v27)
          {
            v28 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v28 = 0xFF51AFD7ED558CCDLL;
            llvm::hashing::detail::get_execution_seed(void)::seed = v28;
            v11 = v33;
          }
        }
        v17 = HIDWORD(v15);
        v18 = llvm::hashing::detail::get_execution_seed(void)::seed;
        goto LABEL_21;
      }
    }
    v22 = 0;
    if ((v12 & 1) != 0)
      v23 = -1;
    else
      v23 = 0;
    while (a3[v22] == v23)
    {
      if (v13 == ++v22)
        goto LABEL_19;
    }
    goto LABEL_23;
  }
  v15 = (char)v14;
  if ((v16 & 1) == 0)
  {
    v29 = v11;
    v11 = v29;
    if (v30)
    {
      v31 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v31 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v31;
      v11 = v29;
    }
  }
  v17 = HIDWORD(v15);
  v18 = llvm::hashing::detail::get_execution_seed(void)::seed;
LABEL_21:
  v25 = 0x9DDFEA08EB382D69 * ((v18 + 8 * v15) ^ v17);
  result = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v17 ^ (v25 >> 47) ^ v25)) ^ ((0x9DDFEA08EB382D69 * (v17 ^ (v25 >> 47) ^ v25)) >> 47));
  v6 = 1;
  v7 = v11;
LABEL_22:
  v26 = 1;
LABEL_24:
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v7;
  *(_QWORD *)(a6 + 24) = v6;
  *(_QWORD *)(a6 + 32) = result;
  *(_BYTE *)(a6 + 40) = v26;
  return result;
}

unint64_t llvm::hash_combine<llvm::hash_code,llvm::ArrayRef<char>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _OWORD v13[4];
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  if ((v2 & 1) == 0)
  {
    v11 = a1;
    v7 = a2;
    a2 = v7;
    v9 = v8;
    a1 = v11;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a1 = v11;
      a2 = v7;
    }
  }
  v3 = *a1;
  v16 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v12 = 0;
  *(_QWORD *)&v13[0] = v3;
  v4 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a2, *(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
  v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v13, (uint64_t *)&v12, (_QWORD *)v13 + 1, (unint64_t)v14, v4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v13, v12, v5, (char *)v14);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseIntOrFPElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(llvm::function_ref<void ()(mlir::detail::DenseIntOrFPElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  size_t v3;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)*a1 == *(_QWORD *)(a2 + 8) && (v3 = v2[3], v3 == *(_QWORD *)(a2 + 40)))
    return memcmp((const void *)v2[2], *(const void **)(a2 + 32), v3) == 0;
  else
    return 0;
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseIntOrFPElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(llvm::function_ref<void ()(mlir::detail::DenseIntOrFPElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(__n128 **a1, size_t a2)
{
  __n128 v3;
  __n128 v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 *v8;
  __n128 v10[3];

  v3 = **a1;
  v4 = (*a1)[2];
  v10[1] = (*a1)[1];
  v10[2] = v4;
  v10[0] = v3;
  v6 = mlir::detail::DenseIntOrFPElementsAttrStorage::construct(a2, v10);
  v7 = v5;
  v8 = a1[1];
  if (v8->n128_u64[0])
    ((void (*)(unint64_t, uint64_t, __n128))v8->n128_u64[0])(v8->n128_u64[1], v5, v6);
  return v7;
}

__n128 mlir::detail::DenseIntOrFPElementsAttrStorage::construct(size_t __sz, __n128 *a2)
{
  size_t v4;
  const void *v5;
  void *v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  char *buffer;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  __n128 result;

  v4 = a2[1].n128_u64[1];
  if (v4)
  {
    v5 = (const void *)a2[1].n128_u64[0];
    v6 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, a2[1].n128_i64[1], 3);
    memcpy(v6, v5, v4);
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(__sz + 80) += 48;
  if (*(_QWORD *)__sz)
    v7 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 48 > *(_QWORD *)(__sz + 8)
                                                                                 - *(_QWORD *)__sz;
  else
    v7 = 1;
  if (v7)
  {
    v8 = *(_DWORD *)(__sz + 24) >> 7;
    if (v8 >= 0x1E)
      LOBYTE(v8) = 30;
    v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    v11 = *(unsigned int *)(__sz + 24);
    if (v11 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v11 + 1, 8);
      LODWORD(v11) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v11) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v9];
    v12 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v12 = (*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)__sz = v12 + 48;
  v13 = a2[2].n128_u8[8];
  result = *a2;
  *(_QWORD *)v12 = 0;
  *(__n128 *)(v12 + 8) = result;
  *(_BYTE *)(v12 + 24) = v13;
  *(_QWORD *)(v12 + 32) = v6;
  *(_QWORD *)(v12 + 40) = v4;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail31DenseIntOrFPElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_24DenseIntOrFPElementsAttrEJRNS1_10ShapedTypeERNS_8ArrayRefIcEERbEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, __int128 *a6)
{
  __int128 v8;
  unsigned __int8 v9;
  uint64_t *v10;
  unsigned int v11;
  int v13;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[2];
  _OWORD v20[4];
  char v21[48];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v19[0] = a2;
  v19[1] = a3;
  v8 = *a6;
  v16 = *a5;
  v17 = v8;
  v18 = *((_QWORD *)a6 + 2);
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, sizeof(v20));
  v10 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v9 & 1) == 0)
  {
    v10 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v13)
    {
      v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v14 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      v10 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v23 = v10[19];
  *(_QWORD *)&v20[0] = (v16 >> 4) ^ (v16 >> 9);
  v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::AffineMap>((llvm::hashing::detail::hash_combine_recursive_helper *)v20, 0, (_QWORD *)v20 + 1, v21, (unint64_t *)&v17);
  v15 = &v16;
  *(_QWORD *)&v20[0] = &v16;
  *((_QWORD *)&v20[0] + 1) = v19;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseResourceElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(llvm::function_ref<void ()(mlir::detail::DenseResourceElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseResourceElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(llvm::function_ref<void ()(mlir::detail::DenseResourceElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseResourceElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(llvm::function_ref<void ()(mlir::detail::DenseResourceElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **(_QWORD **)a1 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(*(_QWORD *)a1 + 16);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseResourceElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(llvm::function_ref<void ()(mlir::detail::DenseResourceElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::detail::DenseResourceElementsAttrStorage::construct(a2, (__int128 *)*(_QWORD *)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, __n128))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

__n128 mlir::detail::DenseResourceElementsAttrStorage::construct(uint64_t *a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __n128 v12;
  uint64_t v13;

  v3 = *a2;
  v12 = (__n128)a2[1];
  v13 = *((_QWORD *)a2 + 4);
  a1[10] += 48;
  v4 = *a1;
  if (*a1 && ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) - v4 + 48 <= a1[1] - v4)
  {
    v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v11 = v3;
    v6 = *((_DWORD *)a1 + 6) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *((unsigned int *)a1 + 6);
    if (v9 >= *((_DWORD *)a1 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 2), a1 + 4, v9 + 1, 8);
      LODWORD(v9) = *((_DWORD *)a1 + 6);
    }
    *(_QWORD *)(a1[2] + 8 * v9) = buffer;
    ++*((_DWORD *)a1 + 6);
    a1[1] = (uint64_t)&buffer[v7];
    v5 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    v3 = v11;
  }
  *a1 = v5 + 48;
  *(_QWORD *)v5 = 0;
  *(_OWORD *)(v5 + 8) = v3;
  result = v12;
  *(__n128 *)(v5 + 24) = v12;
  *(_QWORD *)(v5 + 40) = v13;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail32DenseResourceElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_25DenseResourceElementsAttrEJRNS1_10ShapedTypeERNS1_25DialectResourceBlobHandleINS1_14BuiltinDialectEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

mlir::BuiltinDialect *llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::BuiltinDialect * mlir::MLIRContext::getOrLoadDialect<mlir::BuiltinDialect>(void)::{lambda(void)#1}>@<X0>(mlir::MLIRContext **a1@<X0>, mlir::BuiltinDialect **a2@<X8>)
{
  mlir::MLIRContext *v3;
  mlir::BuiltinDialect *v4;
  mlir::BuiltinDialect *result;

  v3 = *a1;
  v4 = (mlir::BuiltinDialect *)operator new(0x60uLL);
  result = mlir::BuiltinDialect::BuiltinDialect(v4, v3);
  *a2 = result;
  return result;
}

void mlir::DialectResourceBlobManager::insert<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>(pthread_rwlock_t **a1@<X0>, uint64_t a2@<X1>, int8x16_t *a3@<X2>, const unsigned __int8 *a4@<X3>, __int128 *a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  char v16;
  __int128 *v17;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  const char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  const char *v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  LOBYTE(v29) = 0;
  v35 = 0;
  if (*((_BYTE *)a5 + 64))
  {
    v29 = *a5;
    v12 = *((_QWORD *)a5 + 6);
    v30 = *((_QWORD *)a5 + 2);
    v33 = v12;
    if (v12 >= 8)
    {
      v13 = (__int128 *)((char *)a5 + 24);
      if ((v12 & 2) != 0 && (v12 & 4) != 0)
      {
        (*(void (**)(__int128 *, __int128 *))((v12 & 0xFFFFFFFFFFFFFFF8) + 8))(&v31, v13);
      }
      else
      {
        v31 = *v13;
        v32 = *((_QWORD *)a5 + 5);
      }
      *((_QWORD *)a5 + 6) = 0;
    }
    v34 = *((_BYTE *)a5 + 56);
    v35 = 1;
  }
  v14 = mlir::DialectResourceBlobManager::insert(a1, a3, a4, (uint64_t)&v29);
  if (v35 && v33 >= 8)
  {
    v15 = (v33 & 2) != 0 ? &v31 : (__int128 *)v31;
    (*(void (**)(__int128 *, _QWORD, _QWORD, uint64_t))(v33 & 0xFFFFFFFFFFFFFFF8))(v15, v29, *((_QWORD *)&v29 + 1), v30);
    v16 = v33;
    if (v33 >= 8)
    {
      if ((v33 & 4) != 0)
      {
        if ((v33 & 2) != 0)
          v17 = &v31;
        else
          v17 = (__int128 *)v31;
        (*(void (**)(__int128 *))((v33 & 0xFFFFFFFFFFFFFFF8) + 16))(v17);
      }
      if ((v16 & 2) == 0)
        llvm::deallocate_buffer((llvm *)v31, *((void **)&v31 + 1));
    }
  }
  if ((v18 & 1) == 0
  {
    v27 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>]";
    v28 = 103;
    v20 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
    if (v28 >= v20)
      v21 = v20;
    else
      v21 = v28;
    v22 = &v27[v21];
    v23 = v28 - v21;
    if (v28 - v21 >= 0x12)
      v24 = 18;
    else
      v24 = v28 - v21;
    v25 = v23 - v24;
    if (v25 >= v25 - 1)
      v26 = v25 - 1;
    else
      v26 = v25;
    mlir::detail::TypeIDResolver<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v22[v24], v26);
  }
  v19 = mlir::detail::TypeIDResolver<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>,void>::resolveTypeID(void)::id;
  *a6 = v14;
  a6[1] = v19;
  a6[2] = a2;
}

_QWORD *mlir::detail::DistinctAttributeUniquer::get<mlir::DistinctAttr,mlir::Attribute &>(uint64_t a1, uint64_t *a2)
{
  _QWORD *Storage;
  unsigned __int8 v4;
  __guard *v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;

  Storage = mlir::detail::DistinctAttributeUniquer::allocateStorage(a1, *a2);
  if ((v4 & 1) == 0)
  {
    if (v7)
    {
      v15 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
      v16 = 68;
      v8 = llvm::StringRef::find((uint64_t *)&v15, "DesiredTypeName = ", 0x12uLL, 0);
      if (v16 >= v8)
        v9 = v8;
      else
        v9 = v16;
      v10 = &v15[v9];
      v11 = v16 - v9;
      if (v16 - v9 >= 0x12)
        v12 = 18;
      else
        v12 = v16 - v9;
      v13 = v11 - v12;
      if (v13 >= v13 - 1)
        v14 = v13 - 1;
      else
        v14 = v13;
      mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
    }
  }
  *Storage = mlir::AbstractAttribute::lookup(v5[469], a1);
  return Storage;
}

const char *mlir::BuiltinDialect::initialize(mlir::BuiltinDialect *this)
{
  _QWORD *v2;
  const char *v3;
  mlir::ResourceBlobManagerDialectInterface *v4;
  mlir::ResourceBlobManagerDialectInterface *v5;
  const char *v6;
  char *v7;
  unsigned __int8 v8;
  uint64_t *v9;
  uint64_t v10;
  mlir::BuiltinDialect *v11;
  const char *v12;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  const char *v24;
  unint64_t v25;

  mlir::BuiltinDialect::registerTypes(this);
  mlir::BuiltinDialect::registerAttributes(this);
  mlir::BuiltinDialect::registerLocationAttributes(this);
  v2 = operator new(0x70uLL);
  v24 = (const char *)mlir::RegisteredOperationName::Model<mlir::ModuleOp>::Model(v2, (uint64_t)this);
  mlir::RegisteredOperationName::insert((uint64_t *)&v24, (uint64_t)&mlir::ModuleOp::getAttributeNames(void)::attrNames, 2);
  v3 = v24;
  v24 = 0;
  if (v3)
    (*(void (**)(const char *))(*(_QWORD *)v3 + 8))(v3);
  mlir::RegisteredOperationName::insert<mlir::UnrealizedConversionCastOp>((uint64_t)this);
  v4 = (mlir::ResourceBlobManagerDialectInterface *)operator new(0x28uLL);
  v5 = mlir::ResourceBlobManagerDialectInterface::ResourceBlobManagerDialectInterface(v4, this);
  *(_QWORD *)v5 = &unk_1E0E48030;
  v24 = (const char *)v5;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v24);
  v6 = v24;
  v24 = 0;
  if (v6)
    (*(void (**)(const char *))(*(_QWORD *)v6 + 8))(v6);
  v7 = (char *)operator new(0x20uLL);
  v9 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v8 & 1) == 0)
  {
    v23 = v7;
    v9 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v14;
    v7 = v23;
    if (v15)
    {
      v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmDialectInterface]";
      v25 = 77;
      v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
      if (v25 >= v16)
        v17 = v16;
      else
        v17 = v25;
      v18 = &v24[v17];
      v19 = v25 - v17;
      if (v25 - v17 >= 0x12)
        v20 = 18;
      else
        v20 = v25 - v17;
      v21 = v19 - v20;
      if (v21 >= v21 - 1)
        v22 = v21 - 1;
      else
        v22 = v21;
      mlir::detail::TypeIDResolver<mlir::OpAsmDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v18[v20], v22);
      v9 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v7 = v23;
    }
  }
  v10 = v9[154];
  *(_QWORD *)v7 = off_1E0E19DE0;
  *((_QWORD *)v7 + 1) = this;
  *((_QWORD *)v7 + 2) = v10;
  *((_QWORD *)v7 + 3) = v4;
  v24 = v7;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v24);
  v12 = v24;
  v24 = 0;
  if (v12)
    (*(void (**)(const char *))(*(_QWORD *)v12 + 8))(v12);
  return mlir::builtin_dialect_detail::addBytecodeInterface(this, v11);
}

mlir::BuiltinDialect *mlir::BuiltinDialect::BuiltinDialect(mlir::BuiltinDialect *this, mlir::MLIRContext *a2)
{
  mlir::BuiltinDialect *v3;

  v3 = (mlir::BuiltinDialect *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"builtin", 7, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id);
  *(_QWORD *)v3 = off_1E0E2B650;
  mlir::BuiltinDialect::initialize(v3);
  return this;
}

void mlir::BuiltinDialect::~BuiltinDialect(llvm **this)
{
  mlir::Dialect::~Dialect(this);
}

void sub_1803F99C8(void *__p)
{
  operator delete(__p);
}

void mlir::ModuleOp::build(mlir::StringAttr **a1, mlir::OperationState *a2, uint64_t a3)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t StringAttr;
  uint64_t NamedAttr;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;

  v6 = (uint64_t *)mlir::OperationState::addRegion(a2);
  v7 = operator new(0x48uLL);
  *v7 = 0u;
  v7[1] = 0u;
  *((_QWORD *)v7 + 4) = v7 + 2;
  *((_QWORD *)v7 + 5) = v7 + 2;
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 8) = 0;
  *((_QWORD *)v7 + 6) = 0;
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v6, (uint64_t)v7);
  v8 = *v6;
  *((_QWORD *)v7 + 2) = v6;
  *((_QWORD *)v7 + 1) = v8;
  v7 = (_OWORD *)((char *)v7 + 8);
  *(_QWORD *)(v8 + 8) = v7;
  *v6 = (uint64_t)v7;
  if (*(_BYTE *)(a3 + 16))
  {
    v14 = 261;
    v9 = *(_QWORD *)(a3 + 8);
    v13[0] = *(_QWORD *)a3;
    v13[1] = v9;
    StringAttr = mlir::Builder::getStringAttr(a1, (mlir::MLIRContext *)v13);
    NamedAttr = mlir::Builder::getNamedAttr(a1, (uint64_t)"sym_name", 8, StringAttr);
    mlir::NamedAttrList::push_back((uint64_t)a2 + 112, NamedAttr, v12);
  }
}

mlir::GenericProgramPoint *mlir::ModuleOp::create(uint64_t a1, __int128 *a2)
{
  mlir::StringAttr *v4[4];
  uint64_t v5;

  v5 = a1;
  v4[0] = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v5);
  memset(&v4[1], 0, 24);
  return mlir::OpBuilder::create<mlir::ModuleOp,std::optional<llvm::StringRef> &>(v4, v5, a2);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::ModuleOp,std::optional<llvm::StringRef> &>(mlir::StringAttr **a1, uint64_t a2, __int128 *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"builtin.module", (const unsigned __int8 *)0xE, Context);
  if (!v8)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"builtin.module";
    v17[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v7);
  v12 = *a3;
  v13 = *((_QWORD *)a3 + 2);
  mlir::ModuleOp::build(a1, (mlir::OperationState *)v19, (uint64_t)&v12);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v10;
}

uint64_t mlir::ModuleOp::verify(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v2;
  __int128 *Value;
  uint64_t v4;
  void **p_s1;
  _BYTE *v6;
  size_t v7;
  _BYTE *v8;
  char *v9;
  const void *v10;
  size_t v11;
  const void *v12;
  void *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  mlir::CallGraphNode *v17;
  uint64_t v18;
  const void **AttrData;
  const char *v20;
  _QWORD *v21;
  mlir::CallGraphNode *v22;
  const char *v23;
  _QWORD *v24;
  const void **v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  const void ***v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  const void ***v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  const void ***v60;
  uint64_t v61;
  __int128 v62;
  const void **v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  const void ***v69;
  uint64_t v70;
  __int128 v71;
  _QWORD **v72;
  _QWORD **v73;
  void *v74;
  _QWORD *v75;
  _QWORD *v76;
  void *v77;
  void *v78;
  void *v79;
  unint64_t v80;
  BOOL v81;
  unint64_t v82;
  BOOL v83;
  unint64_t v84;
  BOOL v85;
  unint64_t v86;
  BOOL v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  int64_t v93;
  const void ***p_CallableRegion;
  char *v96;
  char *v97;
  __int128 v98;
  const void **v99;
  const char *v100;
  const void ***v101;
  char *v102;
  char *v103;
  __int128 v104;
  _QWORD **v105;
  _QWORD **v106;
  void *v107;
  _QWORD *v108;
  _QWORD *v109;
  void *v110;
  void *v111;
  void *v112;
  unint64_t v113;
  unint64_t v114;
  int64_t v115;
  int64_t v116;
  uint64_t v118;
  const void **v119;
  const char *v120;
  uint64_t v121;
  __int16 v122;
  __int128 v123;
  uint64_t v124;
  const void **CallableRegion;
  const char *v126;
  uint64_t v127;
  void *__src;
  uint64_t v129;
  _BYTE v130[96];
  __int128 v131;
  uint64_t v132;
  __int128 __p;
  uint64_t v134;
  unsigned __int8 v135;
  void *__s1;
  uint64_t v137;
  void *v138;
  void *__dst;
  uint64_t v140;
  _BYTE v141[96];
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  char v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v1 = *this;
  if (*((_BYTE *)v1 + 47))
  {
    __s1 = (void *)mlir::Operation::getAttrDictionary((mlir::Operation *)v1);
    Value = (__int128 *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&__s1);
    if (!v2)
    {
LABEL_23:
      v15 = *this;
      if (*((_BYTE *)*this + 47))
      {
        __s1 = (void *)mlir::Operation::getAttrDictionary((mlir::Operation *)v15);
        v17 = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&__s1);
        v18 = 1;
        if (!v16)
          return v18;
      }
      else
      {
        v17 = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)(v15 + 7));
        v18 = 1;
        if (!v16)
          return v18;
      }
      AttrData = 0;
      v20 = 0;
      v21 = 0;
      v22 = (mlir::CallGraphNode *)((char *)v17 + 16 * v16);
      while (1)
      {
        v24 = (_QWORD *)*((_QWORD *)v17 + 1);
        if (!mlir::detail::InterfaceMap::lookup<mlir::DataLayoutSpecInterface>(*v24 + 8))
          goto LABEL_29;
        mlir::detail::InterfaceMap::lookup<mlir::DataLayoutSpecInterface>(*v24 + 8);
        if (v21)
          break;
LABEL_28:
        __s1 = (void *)mlir::CallGraphNode::getCallableRegion(v17);
        AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&__s1);
        v20 = v23;
        v21 = v24;
LABEL_29:
        v17 = (mlir::CallGraphNode *)((char *)v17 + 16);
        if (v17 == v22)
          return 1;
      }
      v122 = 257;
      mlir::OpState::emitOpError(this, &v119, (uint64_t)&CallableRegion);
      v25 = CallableRegion;
      if (CallableRegion)
      {
        LODWORD(v123) = 3;
        *((_QWORD *)&v123 + 1) = "expects at most one data layout attribute";
        v124 = 41;
        v26 = (char *)__src;
        if (v129 >= HIDWORD(v129))
        {
          v88 = v129 + 1;
          if (__src <= &v123 && (char *)__src + 24 * v129 > (char *)&v123)
          {
            v93 = (char *)&v123 - (_BYTE *)__src;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v130, v88, 24);
            v26 = (char *)__src;
            v27 = (char *)__src + v93;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v130, v88, 24);
            v27 = (char *)&v123;
            v26 = (char *)__src;
          }
        }
        else
        {
          v27 = (char *)&v123;
        }
        v28 = &v26[24 * v129];
        v29 = *(_OWORD *)v27;
        *((_QWORD *)v28 + 2) = *((_QWORD *)v27 + 2);
        *(_OWORD *)v28 = v29;
        LODWORD(v129) = v129 + 1;
        v25 = CallableRegion;
      }
      __s1 = v25;
      LOBYTE(v137) = 0;
      v146 = 0;
      if (!v135)
      {
LABEL_52:
        mlir::InFlightDiagnostic::abandon(&CallableRegion);
        if (CallableRegion)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&CallableRegion);
        if (v135)
        {
          v34 = (_QWORD **)__p;
          if ((_QWORD)__p)
          {
            v35 = (_QWORD **)*((_QWORD *)&__p + 1);
            v36 = (void *)__p;
            if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
            {
              do
                v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
              while (v35 != v34);
              v36 = (void *)__p;
            }
            *((_QWORD *)&__p + 1) = v34;
            operator delete(v36);
          }
          v37 = (_QWORD *)v131;
          if ((_QWORD)v131)
          {
            v38 = (_QWORD *)*((_QWORD *)&v131 + 1);
            v39 = (void *)v131;
            if (*((_QWORD *)&v131 + 1) != (_QWORD)v131)
            {
              do
              {
                v41 = (void *)*--v38;
                v40 = v41;
                *v38 = 0;
                if (v41)
                  operator delete[](v40);
              }
              while (v38 != v37);
              v39 = (void *)v131;
            }
            *((_QWORD *)&v131 + 1) = v37;
            operator delete(v39);
          }
          if (__src != v130)
            free(__src);
        }
        v42 = mlir::Diagnostic::attachNote(&v137, 0, 0);
        v43 = v42 + 16;
        v44 = *(_QWORD *)(v42 + 16);
        LODWORD(CallableRegion) = 3;
        v126 = "'";
        v127 = 1;
        v45 = *(unsigned int *)(v42 + 24);
        if (v45 >= *(_DWORD *)(v42 + 28))
        {
          v80 = v45 + 1;
          v81 = v44 + 24 * v45 > (unint64_t)&CallableRegion;
          if (v44 <= (unint64_t)&CallableRegion && v81)
          {
            v89 = (char *)&CallableRegion - v44;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v43, (void *)(v42 + 32), v80, 24);
            v44 = *(_QWORD *)(v42 + 16);
            v46 = (const void ***)&v89[v44];
LABEL_72:
            v47 = v44 + 24 * *(unsigned int *)(v42 + 24);
            v48 = *(_OWORD *)v46;
            *(_QWORD *)(v47 + 16) = v46[2];
            *(_OWORD *)v47 = v48;
            ++*(_DWORD *)(v42 + 24);
            LOWORD(v129) = 261;
            CallableRegion = AttrData;
            v126 = v20;
            v49 = mlir::Diagnostic::operator<<(v42, &CallableRegion);
            v50 = v49 + 16;
            v51 = *(_QWORD *)(v49 + 16);
            LODWORD(v119) = 3;
            v120 = "' is a data layout attribute";
            v121 = 28;
            v52 = *(unsigned int *)(v49 + 24);
            if (v52 >= *(_DWORD *)(v49 + 28))
            {
              v82 = v52 + 1;
              v83 = v51 + 24 * v52 > (unint64_t)&v119;
              if (v51 <= (unint64_t)&v119 && v83)
              {
                v90 = (char *)&v119 - v51;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v50, (void *)(v49 + 32), v82, 24);
                v51 = *(_QWORD *)(v49 + 16);
                v53 = (const void ***)&v90[v51];
LABEL_74:
                v54 = v51 + 24 * *(unsigned int *)(v49 + 24);
                v55 = *(_OWORD *)v53;
                *(_QWORD *)(v54 + 16) = v53[2];
                *(_OWORD *)v54 = v55;
                ++*(_DWORD *)(v49 + 24);
                v56 = mlir::Diagnostic::attachNote(&v137, 0, 0);
                v57 = v56 + 16;
                v58 = *(_QWORD *)(v56 + 16);
                LODWORD(CallableRegion) = 3;
                v126 = "'";
                v127 = 1;
                v59 = *(unsigned int *)(v56 + 24);
                if (v59 >= *(_DWORD *)(v56 + 28))
                {
                  v84 = v59 + 1;
                  v85 = v58 + 24 * v59 > (unint64_t)&CallableRegion;
                  if (v58 <= (unint64_t)&CallableRegion && v85)
                  {
                    v91 = (char *)&CallableRegion - v58;
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v57, (void *)(v56 + 32), v84, 24);
                    v58 = *(_QWORD *)(v56 + 16);
                    v60 = (const void ***)&v91[v58];
LABEL_76:
                    v61 = v58 + 24 * *(unsigned int *)(v56 + 24);
                    v62 = *(_OWORD *)v60;
                    *(_QWORD *)(v61 + 16) = v60[2];
                    *(_OWORD *)v61 = v62;
                    ++*(_DWORD *)(v56 + 24);
                    *(_QWORD *)&v123 = mlir::CallGraphNode::getCallableRegion(v17);
                    v63 = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v123);
                    LOWORD(v129) = 261;
                    CallableRegion = v63;
                    v126 = v64;
                    v65 = mlir::Diagnostic::operator<<(v56, &CallableRegion);
                    v66 = v65 + 16;
                    v67 = *(_QWORD *)(v65 + 16);
                    LODWORD(v119) = 3;
                    v120 = "' is a data layout attribute";
                    v121 = 28;
                    v68 = *(unsigned int *)(v65 + 24);
                    if (v68 >= *(_DWORD *)(v65 + 28))
                    {
                      v86 = v68 + 1;
                      v87 = v67 + 24 * v68 > (unint64_t)&v119;
                      if (v67 <= (unint64_t)&v119 && v87)
                      {
                        v92 = (char *)&v119 - v67;
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v66, (void *)(v65 + 32), v86, 24);
                        v67 = *(_QWORD *)(v65 + 16);
                        v69 = (const void ***)&v92[v67];
                        goto LABEL_78;
                      }
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v66, (void *)(v65 + 32), v86, 24);
                      v67 = *(_QWORD *)(v65 + 16);
                    }
                    v69 = &v119;
LABEL_78:
                    v70 = v67 + 24 * *(unsigned int *)(v65 + 24);
                    v71 = *(_OWORD *)v69;
                    *(_QWORD *)(v70 + 16) = v69[2];
                    *(_OWORD *)v70 = v71;
                    ++*(_DWORD *)(v65 + 24);
                    if (__s1)
                      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__s1);
                    if (v146)
                    {
                      v72 = (_QWORD **)v144;
                      if ((_QWORD)v144)
                      {
                        v73 = (_QWORD **)*((_QWORD *)&v144 + 1);
                        v74 = (void *)v144;
                        if (*((_QWORD *)&v144 + 1) != (_QWORD)v144)
                        {
                          do
                            v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
                          while (v73 != v72);
                          v74 = (void *)v144;
                        }
                        *((_QWORD *)&v144 + 1) = v72;
                        operator delete(v74);
                      }
                      v75 = (_QWORD *)v142;
                      if ((_QWORD)v142)
                      {
                        v76 = (_QWORD *)*((_QWORD *)&v142 + 1);
                        v77 = (void *)v142;
                        if (*((_QWORD *)&v142 + 1) != (_QWORD)v142)
                        {
                          do
                          {
                            v79 = (void *)*--v76;
                            v78 = v79;
                            *v76 = 0;
                            if (v79)
                              operator delete[](v78);
                          }
                          while (v76 != v75);
                          v77 = (void *)v142;
                        }
                        *((_QWORD *)&v142 + 1) = v75;
                        operator delete(v77);
                      }
                      if (__dst != v141)
                        free(__dst);
                    }
                    goto LABEL_28;
                  }
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v57, (void *)(v56 + 32), v84, 24);
                  v58 = *(_QWORD *)(v56 + 16);
                }
                v60 = &CallableRegion;
                goto LABEL_76;
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod(v50, (void *)(v49 + 32), v82, 24);
              v51 = *(_QWORD *)(v49 + 16);
            }
            v53 = &v119;
            goto LABEL_74;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod(v43, (void *)(v42 + 32), v80, 24);
          v44 = *(_QWORD *)(v42 + 16);
        }
        v46 = &CallableRegion;
        goto LABEL_72;
      }
      v137 = (uint64_t)v126;
      LODWORD(v138) = v127;
      __dst = v141;
      v140 = 0x400000000;
      v30 = v129;
      if (!(_DWORD)v129)
      {
        v31 = 1;
        goto LABEL_48;
      }
      if (__src != v130)
      {
        __dst = __src;
        v140 = v129;
        __src = v130;
        HIDWORD(v129) = 0;
        v31 = 1;
LABEL_47:
        LODWORD(v129) = 0;
LABEL_48:
        v142 = v131;
        v33 = v132;
        v132 = 0;
        v131 = 0uLL;
        v144 = __p;
        v143 = v33;
        v145 = v134;
        v134 = 0;
        __p = 0uLL;
        v146 = 1;
        if (v31)
        {
          if (__src != v130)
            free(__src);
          v135 = 0;
        }
        goto LABEL_52;
      }
      if (v129 < 5)
      {
        v32 = v129;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v141, v129, 24);
        v32 = v129;
        if (!(_DWORD)v129)
          goto LABEL_46;
      }
      memcpy(__dst, __src, 24 * v32);
LABEL_46:
      LODWORD(v140) = v30;
      v31 = v135;
      goto LABEL_47;
    }
  }
  else
  {
    Value = (__int128 *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)(v1 + 7));
    if (!v2)
      goto LABEL_23;
  }
  v4 = 16 * v2;
  while (1)
  {
    v123 = *Value;
    CallableRegion = (const void **)mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v123);
    v6 = (_BYTE *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
    if (v7)
    {
      v8 = v6;
      v9 = (char *)memchr(v6, 46, v7);
      if (v9)
      {
        if (v9 - v8 != -1)
          goto LABEL_8;
      }
    }
    __s1 = "sym_name";
    v137 = 8;
    v138 = "sym_visibility";
    __dst = (void *)14;
    v119 = (const void **)mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v123);
    v10 = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v119);
    if (v11)
    {
      v12 = v10;
      v13 = (void *)v11;
      if (v137 == v11 && !memcmp(__s1, v10, v11))
      {
LABEL_22:
        p_s1 = &__s1;
        goto LABEL_7;
      }
      if (__dst != v13 || (v14 = memcmp(v138, v12, (size_t)v13), p_s1 = &v138, v14))
        p_s1 = (void **)&v140;
    }
    else
    {
      if (!v137)
        goto LABEL_22;
      p_s1 = __dst ? (void **)&v140 : &v138;
    }
LABEL_7:
    if ((char *)p_s1 - (char *)&__s1 == 32)
      break;
LABEL_8:
    ++Value;
    v4 -= 16;
    if (!v4)
      goto LABEL_23;
  }
  v122 = 257;
  mlir::OpState::emitOpError(this, &v119, (uint64_t)&__s1);
  if (__s1)
  {
    LODWORD(CallableRegion) = 3;
    v126 = "can only contain attributes with dialect-prefixed names, found: '";
    v127 = 65;
    p_CallableRegion = &CallableRegion;
    v96 = (char *)__dst;
    if (v140 >= HIDWORD(v140))
    {
      v113 = v140 + 1;
      if (__dst <= &CallableRegion && (char *)__dst + 24 * v140 > (char *)&CallableRegion)
      {
        v115 = (char *)&CallableRegion - (_BYTE *)__dst;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v141, v113, 24);
        v96 = (char *)__dst;
        p_CallableRegion = (const void ***)((char *)__dst + v115);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v141, v113, 24);
        p_CallableRegion = &CallableRegion;
        v96 = (char *)__dst;
      }
    }
    v97 = &v96[24 * v140];
    v98 = *(_OWORD *)p_CallableRegion;
    *((_QWORD *)v97 + 2) = p_CallableRegion[2];
    *(_OWORD *)v97 = v98;
    LODWORD(v140) = v140 + 1;
  }
  v118 = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v123);
  v99 = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v118);
  if (__s1)
  {
    LOWORD(v129) = 261;
    CallableRegion = v99;
    v126 = v100;
    mlir::Diagnostic::operator<<((uint64_t)&v137, &CallableRegion);
    if (__s1)
    {
      LODWORD(CallableRegion) = 3;
      v126 = "'";
      v127 = 1;
      v101 = &CallableRegion;
      v102 = (char *)__dst;
      if (v140 >= HIDWORD(v140))
      {
        v114 = v140 + 1;
        if (__dst <= &CallableRegion && (char *)__dst + 24 * v140 > (char *)&CallableRegion)
        {
          v116 = (char *)&CallableRegion - (_BYTE *)__dst;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v141, v114, 24);
          v102 = (char *)__dst;
          v101 = (const void ***)((char *)__dst + v116);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v141, v114, 24);
          v101 = &CallableRegion;
          v102 = (char *)__dst;
        }
      }
      v103 = &v102[24 * v140];
      v104 = *(_OWORD *)v101;
      *((_QWORD *)v103 + 2) = v101[2];
      *(_OWORD *)v103 = v104;
      LODWORD(v140) = v140 + 1;
    }
  }
  v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__s1);
  if (__s1)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__s1);
  if (v146)
  {
    v105 = (_QWORD **)v144;
    if ((_QWORD)v144)
    {
      v106 = (_QWORD **)*((_QWORD *)&v144 + 1);
      v107 = (void *)v144;
      if (*((_QWORD *)&v144 + 1) != (_QWORD)v144)
      {
        do
          v106 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v106 - 1);
        while (v106 != v105);
        v107 = (void *)v144;
      }
      *((_QWORD *)&v144 + 1) = v105;
      operator delete(v107);
    }
    v108 = (_QWORD *)v142;
    if ((_QWORD)v142)
    {
      v109 = (_QWORD *)*((_QWORD *)&v142 + 1);
      v110 = (void *)v142;
      if (*((_QWORD *)&v142 + 1) != (_QWORD)v142)
      {
        do
        {
          v112 = (void *)*--v109;
          v111 = v112;
          *v109 = 0;
          if (v112)
            operator delete[](v111);
        }
        while (v109 != v108);
        v110 = (void *)v142;
      }
      *((_QWORD *)&v142 + 1) = v108;
      operator delete(v110);
    }
    if (__dst != v141)
      free(__dst);
  }
  return v18;
}

uint64_t mlir::UnrealizedConversionCastOp::fold(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t DefiningOp;
  uint64_t v17;
  uint64_t v18;
  mlir::detail::OpResultImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  const double *v30;
  int8x16_t *v31;
  unint64_t v32;
  const double *v33;
  unsigned __int128 v34;
  unsigned __int128 v35;
  int8x16_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  const double *v41;
  int8x16_t *v42;
  unint64_t v43;
  const double *v44;
  unsigned __int128 v45;
  unsigned __int128 v46;
  int8x16_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[4];
  uint64_t v53[4];
  uint64_t v54[2];
  uint64_t v55;
  unint64_t v56;
  uint64_t v57[2];

  v4 = *a1;
  if ((*(_BYTE *)(*a1 + 46) & 0x80) != 0)
  {
    v5 = *(unsigned int *)(v4 + 68);
    v6 = *(_QWORD *)(v4 + 72);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v55 = v6;
  v56 = v5;
  v7 = *(unsigned int *)(v4 + 36);
  v8 = v4 - 16;
  if (!(_DWORD)v7)
    v8 = 0;
  v54[0] = v8;
  v54[1] = v7;
  mlir::OperandRange::getTypes(&v55, v53);
  mlir::OperandRange::getTypes(v54, v52);
  if (mlir::ValueTypeRange<mlir::OperandRange>::operator==<mlir::ValueTypeRange<mlir::ResultRange>>(v53, v52))
  {
    v10 = v55;
    v9 = v56;
    v11 = *(unsigned int *)(a3 + 8);
    if (v56 + v11 > *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v56 + v11, 8);
      LODWORD(v11) = *(_DWORD *)(a3 + 8);
    }
    if (!v9)
      goto LABEL_40;
    v12 = *(_QWORD *)a3;
    v13 = (uint64_t *)(*(_QWORD *)a3 + 8 * v11);
    if (v9 >= 0xB
      && ((v14 = v11, (unint64_t)v13 >= v10 + 32 * v9)
       || v10 + 24 >= v12 + 8 * (v9 + v11)))
    {
      v29 = v9 & 3;
      if ((v9 & 3) == 0)
        v29 = 4;
      v15 = v9 - v29;
      v13 += v15;
      v30 = (const double *)(v10 + 88);
      v31 = (int8x16_t *)(v12 + 8 * v14 + 16);
      v32 = v15;
      do
      {
        v33 = v30 - 8;
        v34 = (unsigned __int128)vld4q_f64(v33);
        v35 = (unsigned __int128)vld4q_f64(v30);
        v36 = (int8x16_t)vdupq_n_s64(4uLL);
        v31[-1] = vorrq_s8((int8x16_t)v34, v36);
        *v31 = vorrq_s8((int8x16_t)v35, v36);
        v30 += 16;
        v31 += 2;
        v32 -= 4;
      }
      while (v32);
    }
    else
    {
      v15 = 0;
    }
    v37 = v9 - v15;
    v38 = (uint64_t *)(v10 + 32 * v15 + 24);
    do
    {
      v39 = *v38;
      v38 += 4;
      *v13++ = v39 | 4;
      --v37;
    }
    while (v37);
    goto LABEL_39;
  }
  if (!v56)
    return 0;
  v51 = *(_QWORD *)(v55 + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v51);
  if (!DefiningOp)
    return 0;
  v17 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::UnrealizedConversionCastOp,void>::id)
    return 0;
  v18 = *(unsigned int *)(DefiningOp + 36);
  if (v56 != v18)
    return 0;
  v19 = (_DWORD)v18 ? (mlir::detail::OpResultImpl *)(DefiningOp - 16) : 0;
  if (!_ZNSt3__112__equal_implB8nn180100IN4llvm6detail27indexed_accessor_range_baseIN4mlir11ResultRangeEPNS4_6detail12OpResultImplENS4_8OpResultES9_S9_E8iteratorESB_NS3_INS4_12OperandRangeEPNS4_9OpOperandENS4_5ValueESF_SF_E8iteratorESH_NS_10__equal_toENS_10__identityESJ_EEbT_T0_T1_T2_RT3_RT4_RT5_(v19, 0, v19, v18, v55, 0, v55, v18))return 0;
  if ((*(_BYTE *)(v17 + 46) & 0x80) != 0)
  {
    v20 = *(_QWORD *)(v17 + 72);
    v21 = *(unsigned int *)(v17 + 68);
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v57[0] = v20;
  v57[1] = v21;
  mlir::OperandRange::getTypes(v57, v53);
  mlir::OperandRange::getTypes(v54, v52);
  if (!mlir::ValueTypeRange<mlir::OperandRange>::operator==<mlir::ValueTypeRange<mlir::ResultRange>>(v53, v52))
    return 0;
  if ((*(_BYTE *)(v17 + 46) & 0x80) != 0)
  {
    v22 = *(_QWORD *)(v17 + 72);
    v9 = *(unsigned int *)(v17 + 68);
    v11 = *(unsigned int *)(a3 + 8);
    v23 = v9 + v11;
    if (v9 + v11 <= *(unsigned int *)(a3 + 12))
      goto LABEL_27;
    goto LABEL_26;
  }
  v22 = 0;
  v9 = 0;
  v11 = *(unsigned int *)(a3 + 8);
  v23 = v11;
  if (v11 > *(unsigned int *)(a3 + 12))
  {
LABEL_26:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v23, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
LABEL_27:
  if (v9)
  {
    v24 = *(_QWORD *)a3;
    v25 = (uint64_t *)(*(_QWORD *)a3 + 8 * v11);
    if (v9 >= 0xB
      && ((v26 = v11, (unint64_t)v25 >= v22 + 32 * v9)
       || v22 + 24 >= v24 + 8 * (v9 + v11)))
    {
      v40 = v9 & 3;
      if ((v9 & 3) == 0)
        v40 = 4;
      v27 = v9 - v40;
      v25 += v27;
      v41 = (const double *)(v22 + 88);
      v42 = (int8x16_t *)(v24 + 8 * v26 + 16);
      v43 = v27;
      do
      {
        v44 = v41 - 8;
        v45 = (unsigned __int128)vld4q_f64(v44);
        v46 = (unsigned __int128)vld4q_f64(v41);
        v47 = (int8x16_t)vdupq_n_s64(4uLL);
        v42[-1] = vorrq_s8((int8x16_t)v45, v47);
        *v42 = vorrq_s8((int8x16_t)v46, v47);
        v41 += 16;
        v42 += 2;
        v43 -= 4;
      }
      while (v43);
    }
    else
    {
      v27 = 0;
    }
    v48 = v9 - v27;
    v49 = (uint64_t *)(v22 + 32 * v27 + 24);
    do
    {
      v50 = *v49;
      v49 += 4;
      *v25++ = v50 | 4;
      --v48;
    }
    while (v48);
LABEL_39:
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
LABEL_40:
  *(_DWORD *)(a3 + 8) = v11 + v9;
  return 1;
}

uint64_t mlir::UnrealizedConversionCastOp::verify(uint64_t **this)
{
  uint64_t v1;
  int *v3;
  char *v4;
  char *v5;
  __int128 v6;
  _QWORD **v7;
  _QWORD **v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  int64_t v16;
  const void **v17;
  __int16 v18;
  int v19;
  const char *v20;
  uint64_t v21;
  _QWORD v22[3];
  void *v23;
  unsigned int v24;
  unsigned int v25;
  _BYTE v26[96];
  void *v27;
  _QWORD *v28;
  void *__p;
  _QWORD **v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)*this + 9))
    return 1;
  v18 = 257;
  mlir::OpState::emitOpError(this, &v17, (uint64_t)v22);
  if (v22[0])
  {
    v19 = 3;
    v20 = "expected at least one result for cast operation";
    v21 = 47;
    v3 = &v19;
    v4 = (char *)v23;
    if (v24 >= v25)
    {
      v15 = v24 + 1;
      if (v23 <= &v19 && (char *)v23 + 24 * v24 > (char *)&v19)
      {
        v16 = (char *)&v19 - (_BYTE *)v23;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v26, v15, 24);
        v4 = (char *)v23;
        v3 = (int *)((char *)v23 + v16);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v26, v15, 24);
        v3 = &v19;
        v4 = (char *)v23;
      }
    }
    v5 = &v4[24 * v24];
    v6 = *(_OWORD *)v3;
    *((_QWORD *)v5 + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)v5 = v6;
    ++v24;
  }
  v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
  if (v22[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
  if (v31)
  {
    v7 = (_QWORD **)__p;
    if (__p)
    {
      v8 = v30;
      v9 = __p;
      if (v30 != __p)
      {
        do
          v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        v9 = __p;
      }
      v30 = v7;
      operator delete(v9);
    }
    v10 = v27;
    if (v27)
    {
      v11 = v28;
      v12 = v27;
      if (v28 != v27)
      {
        do
        {
          v14 = (void *)*--v11;
          v13 = v14;
          *v11 = 0;
          if (v14)
            operator delete[](v13);
        }
        while (v11 != v10);
        v12 = v27;
      }
      v28 = v10;
      operator delete(v12);
    }
    if (v23 != v26)
      free(v23);
  }
  return v1;
}

uint64_t mlir::ModuleOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  int *v42;
  char *v43;
  char *v44;
  __int128 v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64_t v58;
  int64_t v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  int v64;
  const char *v65;
  uint64_t v66;
  _QWORD v67[3];
  void *v68;
  unsigned int v69;
  unsigned int v70;
  _BYTE v71[96];
  void *v72;
  _QWORD *v73;
  void *__p;
  _QWORD **v75;
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v63 = v6;
  if (!v6)
  {
    a3(v67, a4);
    if (v67[0])
    {
      v64 = 3;
      v65 = "expected DictionaryAttr to set properties";
      v66 = 41;
      v26 = &v64;
      v27 = (char *)v68;
      if (v69 >= v70)
      {
        v53 = v69 + 1;
        if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
        {
          v58 = (char *)&v64 - (_BYTE *)v68;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v53, 24);
          v27 = (char *)v68;
          v26 = (int *)((char *)v68 + v58);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v53, 24);
          v26 = &v64;
          v27 = (char *)v68;
        }
      }
      v28 = &v27[24 * v69];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v69;
      if (v67[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v67);
    }
    if (!v76)
      return 0;
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v75;
      v32 = __p;
      if (v75 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v75 = v30;
      operator delete(v32);
    }
    v21 = v72;
    if (!v72)
      goto LABEL_64;
    v33 = v73;
    v23 = v72;
    if (v73 == v72)
      goto LABEL_63;
    do
    {
      v35 = (void *)*--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        operator delete[](v34);
    }
    while (v33 != v21);
    goto LABEL_62;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v63, "sym_name", 8uLL);
  if (v8)
  {
    v9 = v8;
    if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    {
      a3(v67, a4);
      if (v67[0])
      {
        v64 = 3;
        v66 = 53;
        v10 = &v64;
        v11 = (char *)v68;
        if (v69 >= v70)
        {
          v54 = v69 + 1;
          if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
          {
            v59 = (char *)&v64 - (_BYTE *)v68;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v54, 24);
            v11 = (char *)v68;
            v10 = (int *)((char *)v68 + v59);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v54, 24);
            v10 = &v64;
            v11 = (char *)v68;
          }
        }
        v12 = &v11[24 * v69];
        v13 = *(_OWORD *)v10;
        *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v12 = v13;
        ++v69;
        if (v67[0])
        {
          v14 = &v64;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v64, v9);
          v15 = (char *)v68;
          if (v69 >= v70)
          {
            v55 = v69 + 1;
            if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
            {
              v60 = (char *)&v64 - (_BYTE *)v68;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v55, 24);
              v15 = (char *)v68;
              v14 = (int *)((char *)v68 + v60);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v55, 24);
              v14 = &v64;
              v15 = (char *)v68;
            }
          }
          v16 = &v15[24 * v69];
          v17 = *(_OWORD *)v14;
          *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
          *(_OWORD *)v16 = v17;
          ++v69;
          if (v67[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v67);
        }
      }
      if (!v76)
        return 0;
      v18 = (_QWORD **)__p;
      if (__p)
      {
        v19 = v75;
        v20 = __p;
        if (v75 != __p)
        {
          do
            v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          v20 = __p;
        }
        v75 = v18;
        operator delete(v20);
      }
      v21 = v72;
      if (!v72)
        goto LABEL_64;
      v22 = v73;
      v23 = v72;
      if (v73 == v72)
        goto LABEL_63;
      do
      {
        v25 = (void *)*--v22;
        v24 = v25;
        *v22 = 0;
        if (v25)
          operator delete[](v24);
      }
      while (v22 != v21);
      goto LABEL_62;
    }
    *a1 = v8;
  }
  v36 = mlir::DictionaryAttr::get((uint64_t)&v63, "sym_visibility", 0xEuLL);
  if (!v36)
    return 1;
  v37 = v36;
  if (*(_UNKNOWN **)(*(_QWORD *)v36 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    a1[1] = v36;
    return 1;
  }
  a3(v67, a4);
  if (v67[0])
  {
    v64 = 3;
    v66 = 59;
    v38 = &v64;
    v39 = (char *)v68;
    if (v69 >= v70)
    {
      v56 = v69 + 1;
      if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
      {
        v61 = (char *)&v64 - (_BYTE *)v68;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v56, 24);
        v39 = (char *)v68;
        v38 = (int *)((char *)v68 + v61);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v56, 24);
        v38 = &v64;
        v39 = (char *)v68;
      }
    }
    v40 = &v39[24 * v69];
    v41 = *(_OWORD *)v38;
    *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
    *(_OWORD *)v40 = v41;
    ++v69;
    if (v67[0])
    {
      v42 = &v64;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v64, v37);
      v43 = (char *)v68;
      if (v69 >= v70)
      {
        v57 = v69 + 1;
        if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
        {
          v62 = (char *)&v64 - (_BYTE *)v68;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v57, 24);
          v43 = (char *)v68;
          v42 = (int *)((char *)v68 + v62);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v57, 24);
          v42 = &v64;
          v43 = (char *)v68;
        }
      }
      v44 = &v43[24 * v69];
      v45 = *(_OWORD *)v42;
      *((_QWORD *)v44 + 2) = *((_QWORD *)v42 + 2);
      *(_OWORD *)v44 = v45;
      ++v69;
      if (v67[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v67);
    }
  }
  if (v76)
  {
    v46 = (_QWORD **)__p;
    if (__p)
    {
      v47 = v75;
      v48 = __p;
      if (v75 != __p)
      {
        do
          v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        v48 = __p;
      }
      v75 = v46;
      operator delete(v48);
    }
    v21 = v72;
    if (!v72)
      goto LABEL_64;
    v49 = v73;
    v23 = v72;
    if (v73 == v72)
    {
LABEL_63:
      v73 = v21;
      operator delete(v23);
LABEL_64:
      if (v68 != v71)
        free(v68);
      return 0;
    }
    do
    {
      v51 = (void *)*--v49;
      v50 = v51;
      *v49 = 0;
      if (v51)
        operator delete[](v50);
    }
    while (v49 != v21);
LABEL_62:
    v23 = v72;
    goto LABEL_63;
  }
  return 0;
}

uint64_t mlir::ModuleOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  mlir::MLIRContext *v10;
  uint64_t DictionaryAttr;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  mlir::DictionaryAttr *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  v18 = a1;
  v19 = v21;
  v20 = 0x300000000;
  if (*a2)
  {
    NamedAttr = mlir::Builder::getNamedAttr(&v18, (uint64_t)"sym_name", 8, *a2);
    v5 = v4;
    v6 = v20;
    if (v20 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      v6 = v20;
    }
    v7 = (uint64_t *)((char *)v19 + 16 * v6);
    *v7 = NamedAttr;
    v7[1] = v5;
    v8 = v20 + 1;
    LODWORD(v20) = v20 + 1;
    v9 = a2[1];
    if (!v9)
    {
LABEL_5:
      v10 = (mlir::MLIRContext *)v19;
      if (v8)
        goto LABEL_6;
LABEL_13:
      DictionaryAttr = 0;
      if (v10 == (mlir::MLIRContext *)v21)
        return DictionaryAttr;
      goto LABEL_7;
    }
  }
  else
  {
    v8 = 0;
    v9 = a2[1];
    if (!v9)
      goto LABEL_5;
  }
  v13 = mlir::Builder::getNamedAttr(&v18, (uint64_t)"sym_visibility", 14, v9);
  v15 = v14;
  v16 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
    v16 = v20;
  }
  v17 = (uint64_t *)((char *)v19 + 16 * v16);
  *v17 = v13;
  v17[1] = v15;
  v8 = v20 + 1;
  LODWORD(v20) = v8;
  v10 = (mlir::MLIRContext *)v19;
  if (!v8)
    goto LABEL_13;
LABEL_6:
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v18, v10, v8);
  v10 = (mlir::MLIRContext *)v19;
  if (v19 != v21)
LABEL_7:
    free(v10);
  return DictionaryAttr;
}

unint64_t mlir::ModuleOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1;
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  _OWORD v31[3];
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v2 & 1) == 0)
  {
    v24 = a1;
    v27 = *a1;
    v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v14;
    a1 = v24;
    v1 = v27;
    if (v15)
    {
      v16 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v16 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v16;
      a1 = v24;
      v1 = v27;
      v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v4 = v3[19];
  v5 = a1[1];
  if ((v6 & 1) == 0)
  {
    v25 = a1[1];
    v28 = v1;
    v22 = v3[19];
    v4 = v22;
    v5 = v25;
    v1 = v28;
    v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v17)
    {
      v18 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v18 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v18;
      v4 = v22;
      v5 = v25;
      v1 = v28;
      v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v7 = v3[19];
  v33 = 0;
  memset(v32, 0, sizeof(v32));
  memset(v31, 0, sizeof(v31));
  v30 = 0u;
  if ((v8 & 1) == 0)
  {
    v26 = v5;
    v29 = v1;
    v21 = v7;
    v23 = v4;
    v7 = v21;
    v4 = v23;
    v5 = v26;
    v1 = v29;
    v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v19)
    {
      v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v20 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v20;
      v7 = v21;
      v4 = v23;
      v5 = v26;
      v1 = v29;
      v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v9 = HIDWORD(v5);
  v10 = (v7 + 8 * v5) ^ HIDWORD(v5);
  v11 = 0x9DDFEA08EB382D69 * (v9 ^ ((0x9DDFEA08EB382D69 * v10) >> 47) ^ (0x9DDFEA08EB382D69 * v10));
  v12 = 0x9DDFEA08EB382D69 * ((v4 + 8 * v1) ^ HIDWORD(v1));
  v34 = v3[19];
  *(_QWORD *)&v30 = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * (HIDWORD(v1) ^ (v12 >> 47) ^ v12)) ^ ((0x9DDFEA08EB382D69
                                                                                  * (HIDWORD(v1) ^ (v12 >> 47) ^ v12)) >> 47));
  *((_QWORD *)&v30 + 1) = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v30, 0, (char *)v31, (char *)v32);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x10uLL);
    *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::ModuleOpGenericAdaptorBase::Properties]";
        v15 = 102;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::detail::ModuleOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[487];
    return a1[32];
  }
  return result;
}

BOOL mlir::ModuleOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  const void ***v9;
  char *v10;
  char *v11;
  __int128 v12;
  BOOL v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  _QWORD v32[4];
  __int16 v33;
  const void **v34[4];
  __int16 v35;
  const void **v36;
  __int16 v37;
  int v38;
  const char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  unsigned int v44;
  unsigned int v45;
  _BYTE v46[96];
  void *v47;
  _QWORD *v48;
  void *__p;
  _QWORD **v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *v3;
  v5 = v3[1];
  v41 = v2;
  if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v4, (const void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::__mlir_ods_local_attr_constraint_BuiltinOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v41))return 0;
  v41 = *this;
  if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v5, (const void **)"sym_visibility", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::__mlir_ods_local_attr_constraint_BuiltinOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v41))return 0;
  v6 = *this;
  v7 = (((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
       + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 32 * *((unsigned int *)*this + 10);
  v8 = *(_QWORD *)(v7 + 8);
  if (v8 != v7 && *(_QWORD *)(v8 + 8) == v7)
    return 1;
  v36 = (const void **)"region #";
  v37 = 259;
  mlir::Operation::emitOpError(v6, &v36, (uint64_t)&v41);
  if (v41)
  {
    LODWORD(v34[0]) = 5;
    v34[1] = 0;
    v9 = v34;
    v10 = (char *)v43;
    if (v44 >= v45)
    {
      v28 = v44 + 1;
      if (v43 <= v34 && (char *)v43 + 24 * v44 > (char *)v34)
      {
        v30 = (char *)v34 - (_BYTE *)v43;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v28, 24);
        v10 = (char *)v43;
        v9 = (const void ***)((char *)v43 + v30);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v28, 24);
        v9 = v34;
        v10 = (char *)v43;
      }
    }
    v11 = &v10[24 * v44];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = v9[2];
    *(_OWORD *)v11 = v12;
    ++v44;
    v13 = v41 == 0;
  }
  else
  {
    v13 = 1;
  }
  v33 = 1283;
  v32[0] = " ('";
  v32[2] = "bodyRegion";
  v32[3] = 10;
  v34[0] = (const void **)v32;
  v34[2] = (const void **)"') ";
  v35 = 770;
  if (!v13)
  {
    mlir::Diagnostic::operator<<((uint64_t)&v42, v34);
    if (v41)
    {
      v38 = 3;
      v39 = "failed to verify constraint: region with 1 blocks";
      v40 = 49;
      v14 = &v38;
      v15 = (char *)v43;
      if (v44 >= v45)
      {
        v29 = v44 + 1;
        if (v43 <= &v38 && (char *)v43 + 24 * v44 > (char *)&v38)
        {
          v31 = (char *)&v38 - (_BYTE *)v43;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
          v15 = (char *)v43;
          v14 = (int *)((char *)v43 + v31);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
          v14 = &v38;
          v15 = (char *)v43;
        }
      }
      v16 = &v15[24 * v44];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v44;
    }
  }
  v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v51)
  {
    v19 = (_QWORD **)__p;
    if (__p)
    {
      v20 = v50;
      v21 = __p;
      if (v50 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v50 = v19;
      operator delete(v21);
    }
    v22 = v47;
    if (v47)
    {
      v23 = v48;
      v24 = v47;
      if (v48 != v47)
      {
        do
        {
          v26 = (void *)*--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            operator delete[](v25);
        }
        while (v23 != v22);
        v24 = v47;
      }
      v48 = v22;
      operator delete(v24);
    }
    if (v43 != v46)
      free(v43);
  }
  return v18 != 0;
}

BOOL mlir::ModuleOp::verifyInvariants(uint64_t **this)
{
  return mlir::ModuleOp::verifyInvariantsImpl(this) && mlir::ModuleOp::verify(this);
}

uint64_t mlir::ModuleOp::parse(uint64_t a1, _QWORD *a2)
{
  mlir::Region *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[3];
  uint64_t v15;
  mlir::Region *v16;
  uint64_t v17;

  v17 = 0;
  v4 = (mlir::Region *)operator new(0x18uLL);
  *(_QWORD *)v4 = v4;
  *((_QWORD *)v4 + 1) = v4;
  *((_QWORD *)v4 + 2) = 0;
  v16 = v4;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 496))(a1, &v17);
  if (v17)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(a2);
    *v5 = v17;
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 464))(a1, a2 + 14)
    || (v6 = a2[1],
        v14[0] = a1,
        v14[1] = &v15,
        v14[2] = a2,
        (v7 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v6 + 96))) != 0)
    && !mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v7, (const void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::ModuleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v14)|| (v8 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8))) != 0&& !mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v8, (const void **)"sym_visibility", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::ModuleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v14)|| !(*(unsigned __int8 (**)(uint64_t, mlir::Region *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v4, 0, 0, 0))
  {
    v11 = 0;
    v16 = 0;
LABEL_14:
    mlir::Region::~Region(v4);
    operator delete(v12);
    return v11;
  }
  if (*(mlir::Region **)v4 == v4)
  {
    v9 = operator new(0x48uLL);
    *v9 = 0u;
    v9[1] = 0u;
    *((_QWORD *)v9 + 4) = v9 + 2;
    *((_QWORD *)v9 + 5) = v9 + 2;
    *((_QWORD *)v9 + 7) = 0;
    *((_QWORD *)v9 + 8) = 0;
    *((_QWORD *)v9 + 6) = 0;
    llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v4, (uint64_t)v9);
    v10 = *(_QWORD *)v4;
    *((_QWORD *)v9 + 2) = v4;
    *((_QWORD *)v9 + 1) = v10;
    v9 = (_OWORD *)((char *)v9 + 8);
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)v4 = v9;
  }
  mlir::OperationState::addRegion((uint64_t)a2, (unint64_t)&v16);
  v4 = v16;
  v16 = 0;
  v11 = 1;
  if (v4)
    goto LABEL_14;
  return v11;
}

void mlir::ModuleOp::print(unsigned int **this, mlir::OpAsmPrinter *a2)
{
  unsigned int *v4;
  unint64_t v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  uint64_t AttrData;
  uint64_t v9;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  unint64_t AttrDictionary;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  v4 = *this;
  v5 = v4[11];
  if (*(_QWORD *)&v4[4 * ((v5 >> 23) & 1) + 16])
  {
    v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v7 = (_BYTE *)*((_QWORD *)v6 + 4);
    if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
    {
      llvm::raw_ostream::write(v6, 32);
    }
    else
    {
      *((_QWORD *)v6 + 4) = v7 + 1;
      *v7 = 32;
    }
    v16 = *(void **)&(*this)[4 * (((unint64_t)(*this)[11] >> 23) & 1) + 16];
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v16);
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, AttrData, v9);
    v4 = *this;
    LODWORD(v5) = (*this)[11];
  }
  v16 = v18;
  v18[0] = "sym_name";
  v18[1] = 8;
  v17 = 0x200000001;
  if (BYTE3(v5))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v4 + 14);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 200))(a2, Value, v12, v16, v17);
  v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 224))(a2, (((unint64_t)&(*this)[4 * (((unint64_t)(*this)[11] >> 23) & 1) + 17]+ (((unint64_t)(*this)[11] >> 21) & 0x7F8)+ 3) & 0xFFFFFFFFFFFFFFF8)+ 32 * (*this)[10], 1, 1, 0);
  if (v16 != v18)
    free(v16);
}

uint64_t mlir::detail::UnrealizedConversionCastOpGenericAdaptorBase::UnrealizedConversionCastOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "builtin.unrealized_conversion_cast", 34, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::UnrealizedConversionCastOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BOOL8 v9;
  void *v10;
  _WORD v12[20];
  void *__src;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = 0x400000000;
  v16[0] = &v17;
  v16[1] = (void *)0x100000000;
  __src = &v15;
  v14 = 0x100000000;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v18, 0, 1, 0xFFFFFFFFLL)|| (_DWORD)v19&& (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v16))|| (v12[16] = 257, !(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _WORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, v12))|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)&__src)|| ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1), !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112)))
  {
    v9 = 0;
    v10 = __src;
    if (__src == &v15)
      goto LABEL_16;
    goto LABEL_15;
  }
  v5 = __src;
  v6 = v14;
  v7 = *(unsigned int *)(a2 + 72);
  v8 = v7 + v14;
  if (v8 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8, 8);
    LODWORD(v7) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v6)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v7), v5, 8 * v6);
    LODWORD(v7) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v7 + v6;
  v9 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v18, (uint64_t)v16, v4, a2 + 16) != 0;
  v10 = __src;
  if (__src != &v15)
LABEL_15:
    free(v10);
LABEL_16:
  if (v16[0] != &v17)
    free(v16[0]);
  if (v18 != v20)
    free(v18);
  return v9;
}

void mlir::UnrealizedConversionCastOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  mlir::Operation *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  mlir::Operation *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  llvm::raw_ostream *v21;
  _WORD *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  mlir::Operation *v27;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *AttrDictionary;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)*this + 46) & 0x80) != 0 && *((_DWORD *)*this + 17))
  {
    v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v5 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
    {
      llvm::raw_ostream::write(v4, 32);
    }
    else
    {
      *((_QWORD *)v4 + 4) = v5 + 1;
      *v5 = 32;
    }
    v6 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
      v7 = *((unsigned int *)v6 + 17);
      v8 = *((_QWORD *)v6 + 9);
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v35 = ", ";
    v36 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v8, 0, v8, v7, (uint64_t)a2, v9, (uint64_t)&v35);
    v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((_QWORD *)v10 + 4) = v11 + 1;
      *v11 = 32;
    }
    v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v13 = (_BYTE *)*((_QWORD *)v12 + 4);
    if (*((_BYTE **)v12 + 3) == v13)
    {
      llvm::raw_ostream::write(v12, ":", 1uLL);
    }
    else
    {
      *v13 = 58;
      ++*((_QWORD *)v12 + 4);
    }
    v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v15 = (_BYTE *)*((_QWORD *)v14 + 4);
    if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
    {
      llvm::raw_ostream::write(v14, 32);
    }
    else
    {
      *((_QWORD *)v14 + 4) = v15 + 1;
      *v15 = 32;
    }
    v16 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
      v17 = *((unsigned int *)v16 + 17);
      v18 = *((_QWORD *)v16 + 9);
    }
    else
    {
      v18 = 0;
      v17 = 0;
    }
    v31 = v18;
    v32 = v17;
    mlir::OperandRange::getTypes(&v31, (uint64_t *)&v35);
    AttrDictionary = ", ";
    v34 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v35, v36, v37, v38, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  }
  v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v20 = (_BYTE *)*((_QWORD *)v19 + 4);
  if ((unint64_t)v20 >= *((_QWORD *)v19 + 3))
  {
    llvm::raw_ostream::write(v19, 32);
  }
  else
  {
    *((_QWORD *)v19 + 4) = v20 + 1;
    *v20 = 32;
  }
  v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v22 = (_WORD *)*((_QWORD *)v21 + 4);
  if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 1uLL)
  {
    *v22 = 28532;
    *((_QWORD *)v21 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v21, "to", 2uLL);
  }
  v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v24 = (_BYTE *)*((_QWORD *)v23 + 4);
  if ((unint64_t)v24 >= *((_QWORD *)v23 + 3))
  {
    llvm::raw_ostream::write(v23, 32);
  }
  else
  {
    *((_QWORD *)v23 + 4) = v24 + 1;
    *v24 = 32;
  }
  v25 = *((unsigned int *)*this + 9);
  v26 = (uint64_t)*this - 16;
  if (!(_DWORD)v25)
    v26 = 0;
  v31 = v26;
  v32 = v25;
  mlir::OperandRange::getTypes(&v31, (uint64_t *)&v35);
  AttrDictionary = ", ";
  v34 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v35, v36, v37, v38, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  v35 = &v37;
  v36 = 0x200000000;
  v27 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v27);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v27 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v30, v35, v36);
  if (v35 != &v37)
    free(v35);
}

void *mlir::detail::InterfaceMap::lookup<mlir::DataLayoutSpecInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  void **p_vtable;
  unint64_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  void **v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DataLayoutSpecInterface]";
      v23 = 79;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::DataLayoutSpecInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = p_vtable[484];
  v5 = *(void ***)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = (unint64_t *)&v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = (void **)(v8 + 2);
    v3 += ~(v3 >> 1);
    if (v10 < (unint64_t)v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (void **)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::__mlir_ods_local_attr_constraint_BuiltinOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t mlir::RegisteredOperationName::insert<mlir::UnrealizedConversionCastOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::UnrealizedConversionCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::UnrealizedConversionCastOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"builtin.unrealized_conversion_cast", 34, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrealizedConversionCastOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E2DCE0;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::ModuleOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::ModuleOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"builtin.module", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E473E8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::ModuleOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::ModuleOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::ModuleOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::ModuleOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::ModuleOp>::printAssembly(uint64_t a1, unsigned int *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, unsigned int *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                           + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v7 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(a2 + 44)))
    v7 = 0;
  if (a4 == 14)
  {
    if (*a3 == 0x697369765F6D7973 && *(_QWORD *)((char *)a3 + 6) == 0x7974696C69626973)
      return v7[1];
    return 0;
  }
  if (a4 != 8 || *a3 != 0x656D616E5F6D7973)
    return 0;
  return *v7;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::ModuleOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v11);
  if (v7 == 14)
  {
    if (*result == 0x697369765F6D7973 && *(_QWORD *)((char *)result + 6) == 0x7974696C69626973)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
          v9 = a4;
        else
          v9 = 0;
        v5[1] = v9;
      }
      else
      {
        v5[1] = 0;
      }
    }
  }
  else if (v7 == 8 && *result == 0x656D616E5F6D7973)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
        v10 = a4;
      else
        v10 = 0;
      *v5 = v10;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::ModuleOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  if (*v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"sym_name", 8, *v5);
  v6 = v5[1];
  if (v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"sym_visibility", 14, v6);
}

BOOL mlir::RegisteredOperationName::Model<mlir::ModuleOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;

  v9 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  result = 0;
  if (!v9
    || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v9, (const void **)"sym_name", (const char *)8, a4, a5))
  {
    v10 = mlir::NamedAttrList::get(a3, *(_QWORD *)(*(_QWORD *)(a2 + 96) + 8));
    if (!v10
      || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v10, (const void **)"sym_visibility", (const char *)0xE, a4, a5))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::ModuleOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::ModuleOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::ModuleOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::ModuleOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::ModuleOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::ModuleOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3 + 1) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, *v4);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, v4[1]);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x80uLL);
  *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isDeclaration;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface]";
      v15 = 73;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::SymbolOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[143], v2);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::StringAttr *Context;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
  mlir::SymbolTable::setSymbolVisibility(a2, a3);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setNested(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 2);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setPrivate(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 1);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setPublic(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 0);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getSymbolUses(mlir::SymbolTable *a1@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
  mlir::SymbolTable::getSymbolUses(a1, a2, a3);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::symbolKnownUseEmpty(uint64_t a1, mlir::SymbolTable *a2, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(a2, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isOptionalSymbol()
{
  return 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isDeclaration()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getDefaultDialect()
{
  return "builtin";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::ModuleOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getRegionKind;
  v2[1] = mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::ModuleOp>::hasSSADominance;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionKindInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionKindInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[150], v2);
}

uint64_t mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getRegionKind()
{
  return 1;
}

uint64_t mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::ModuleOp>::hasSSADominance()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  void **p_vtable;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t *v47;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  const char *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  const char *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  const char *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  const char *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  const char *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  unint64_t v138;
  unint64_t v139;
  const char *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  const char *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  const char *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  unint64_t v165;
  unint64_t v166;
  const char *v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  const char *v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  unint64_t v183;
  unint64_t v184;
  const char *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  const char *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  unint64_t v201;
  unint64_t v202;
  const char *v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  void *v328;
  void *v329;
  void *v330;
  void *v331;
  void *v332;
  void *v333;
  void *v334;
  void *v335;
  void *v336;
  void *v337;
  void *v338;
  void *v339;
  void *v340;
  void *v341;
  void *v342;
  void *v343;
  const char *v344;
  unint64_t v345;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v328 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v65 = v64;
    a1 = v328;
    if (v65)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v345 = 81;
      v66 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v66)
        v67 = v66;
      else
        v67 = v345;
      v68 = &v344[v67];
      v69 = v345 - v67;
      if (v345 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v345 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v328;
    }
  }
  v3 = v2[210];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v313 = v3;
    v329 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v74 = v73;
    v3 = v313;
    a1 = v329;
    if (v74)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v345 = 83;
      v75 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v75)
        v76 = v75;
      else
        v76 = v345;
      v77 = &v344[v76];
      v78 = v345 - v76;
      if (v345 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v345 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v313;
      a1 = v329;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v314 = v3;
    v330 = a1;
    v299 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v299;
    v3 = v314;
    v83 = v82;
    a1 = v330;
    if (v83)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v345 = 86;
      v84 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v84)
        v85 = v84;
      else
        v85 = v345;
      v86 = &v344[v85];
      v87 = v345 - v85;
      if (v345 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v345 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v299;
      v3 = v314;
      a1 = v330;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v315 = v3;
    v331 = a1;
    v286 = v9;
    v300 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v286;
    v6 = v300;
    v92 = v91;
    v3 = v315;
    a1 = v331;
    if (v92)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v345 = 84;
      v93 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v93)
        v94 = v93;
      else
        v94 = v345;
      v95 = &v344[v94];
      v96 = v345 - v94;
      if (v345 - v94 >= 0x12)
        v97 = 18;
      else
        v97 = v345 - v94;
      v98 = v96 - v97;
      if (v98 >= v98 - 1)
        v99 = v98 - 1;
      else
        v99 = v98;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v95[v97], v99);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v286;
      v6 = v300;
      v3 = v315;
      a1 = v331;
    }
  }
  v12 = v11[193];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v316 = v3;
    v332 = a1;
    v287 = v9;
    v301 = v6;
    v274 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v274;
    v9 = v287;
    v6 = v301;
    v3 = v316;
    v101 = v100;
    a1 = v332;
    if (v101)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoRegionArguments<Empty>]";
      v345 = 89;
      v102 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v102)
        v103 = v102;
      else
        v103 = v345;
      v104 = &v344[v103];
      v105 = v345 - v103;
      if (v345 - v103 >= 0x12)
        v106 = 18;
      else
        v106 = v345 - v103;
      v107 = v105 - v106;
      if (v107 >= v107 - 1)
        v108 = v107 - 1;
      else
        v108 = v107;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoRegionArguments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoRegionArguments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v104[v106], v108);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v274;
      v9 = v287;
      v6 = v301;
      v3 = v316;
      a1 = v332;
    }
  }
  v15 = v14[199];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v317 = v3;
    v333 = a1;
    v288 = v9;
    v302 = v6;
    v275 = v12;
    v263 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v263;
    v12 = v275;
    v9 = v288;
    v6 = v302;
    v3 = v317;
    v110 = v109;
    a1 = v333;
    if (v110)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoTerminator<Empty>]";
      v345 = 84;
      v111 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v111)
        v112 = v111;
      else
        v112 = v345;
      v113 = &v344[v112];
      v114 = v345 - v112;
      if (v345 - v112 >= 0x12)
        v115 = 18;
      else
        v115 = v345 - v112;
      v116 = v114 - v115;
      if (v116 >= v116 - 1)
        v117 = v116 - 1;
      else
        v117 = v116;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v113[v115], v117);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v263;
      v12 = v275;
      v9 = v288;
      v6 = v302;
      v3 = v317;
      a1 = v333;
    }
  }
  v18 = v17[191];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v318 = v3;
    v334 = a1;
    v289 = v9;
    v303 = v6;
    v276 = v12;
    v253 = v18;
    v264 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v253;
    v15 = v264;
    v12 = v276;
    v9 = v289;
    v6 = v303;
    v3 = v318;
    v119 = v118;
    a1 = v334;
    if (v119)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v345 = 83;
      v120 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v120)
        v121 = v120;
      else
        v121 = v345;
      v122 = &v344[v121];
      v123 = v345 - v121;
      if (v345 - v121 >= 0x12)
        v124 = 18;
      else
        v124 = v345 - v121;
      v125 = v123 - v124;
      if (v125 >= v125 - 1)
        v126 = v125 - 1;
      else
        v126 = v125;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v122[v124], v126);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v253;
      v15 = v264;
      v12 = v276;
      v9 = v289;
      v6 = v303;
      v3 = v318;
      a1 = v334;
    }
  }
  v21 = v20[184];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v319 = v3;
    v335 = a1;
    v290 = v9;
    v304 = v6;
    v277 = v12;
    v254 = v18;
    v265 = v15;
    v244 = v21;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v244;
    v18 = v254;
    v15 = v265;
    v12 = v277;
    v9 = v290;
    v6 = v304;
    v3 = v319;
    v128 = v127;
    a1 = v335;
    if (v128)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v345 = 84;
      v129 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v129)
        v130 = v129;
      else
        v130 = v345;
      v131 = &v344[v130];
      v132 = v345 - v130;
      if (v345 - v130 >= 0x12)
        v133 = 18;
      else
        v133 = v345 - v130;
      v134 = v132 - v133;
      if (v134 >= v134 - 1)
        v135 = v134 - 1;
      else
        v135 = v134;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v131[v133], v135);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v244;
      v18 = v254;
      v15 = v265;
      v12 = v277;
      v9 = v290;
      v6 = v304;
      v3 = v319;
      a1 = v335;
    }
  }
  v24 = v23[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v320 = v3;
    v336 = a1;
    v291 = v9;
    v305 = v6;
    v278 = v12;
    v255 = v18;
    v266 = v15;
    v236 = v24;
    v245 = v21;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v236;
    v21 = v245;
    v18 = v255;
    v15 = v266;
    v12 = v278;
    v9 = v291;
    v6 = v305;
    v3 = v320;
    v137 = v136;
    a1 = v336;
    if (v137)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v345 = 89;
      v138 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v138)
        v139 = v138;
      else
        v139 = v345;
      v140 = &v344[v139];
      v141 = v345 - v139;
      if (v345 - v139 >= 0x12)
        v142 = 18;
      else
        v142 = v345 - v139;
      v143 = v141 - v142;
      if (v143 >= v143 - 1)
        v144 = v143 - 1;
      else
        v144 = v143;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v140[v142], v144);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v236;
      v21 = v245;
      v18 = v255;
      v15 = v266;
      v12 = v278;
      v9 = v291;
      v6 = v305;
      v3 = v320;
      a1 = v336;
    }
  }
  v27 = p_vtable[481];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v321 = v3;
    v337 = a1;
    v292 = v9;
    v306 = v6;
    v279 = v12;
    v256 = v18;
    v267 = v15;
    v237 = v24;
    v246 = v21;
    v229 = v27;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v229;
    v24 = v237;
    v21 = v246;
    v18 = v256;
    v15 = v267;
    v12 = v279;
    v9 = v292;
    v6 = v306;
    v3 = v321;
    v146 = v145;
    a1 = v337;
    if (v146)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AffineScope<Empty>]";
      v345 = 83;
      v147 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v147)
        v148 = v147;
      else
        v148 = v345;
      v149 = &v344[v148];
      v150 = v345 - v148;
      if (v345 - v148 >= 0x12)
        v151 = 18;
      else
        v151 = v345 - v148;
      v152 = v150 - v151;
      if (v152 >= v152 - 1)
        v153 = v152 - 1;
      else
        v153 = v152;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v149[v151], v153);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v229;
      v24 = v237;
      v21 = v246;
      v18 = v256;
      v15 = v267;
      v12 = v279;
      v9 = v292;
      v6 = v306;
      v3 = v321;
      a1 = v337;
    }
  }
  v30 = v29[183];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v322 = v3;
    v338 = a1;
    v293 = v9;
    v307 = v6;
    v280 = v12;
    v257 = v18;
    v268 = v15;
    v238 = v24;
    v247 = v21;
    v223 = v30;
    v230 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v223;
    v27 = v230;
    v24 = v238;
    v21 = v247;
    v18 = v257;
    v15 = v268;
    v12 = v280;
    v9 = v293;
    v6 = v307;
    v3 = v322;
    v155 = v154;
    a1 = v338;
    if (v155)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
      v345 = 91;
      v156 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v156)
        v157 = v156;
      else
        v157 = v345;
      v158 = &v344[v157];
      v159 = v345 - v157;
      if (v345 - v157 >= 0x12)
        v160 = 18;
      else
        v160 = v345 - v157;
      v161 = v159 - v160;
      if (v161 >= v161 - 1)
        v162 = v161 - 1;
      else
        v162 = v161;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v158[v160], v162);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v223;
      v27 = v230;
      v24 = v238;
      v21 = v247;
      v18 = v257;
      v15 = v268;
      v12 = v280;
      v9 = v293;
      v6 = v307;
      v3 = v322;
      a1 = v338;
    }
  }
  v33 = v32[201];
  v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v34 & 1) == 0)
  {
    v323 = v3;
    v339 = a1;
    v294 = v9;
    v308 = v6;
    v281 = v12;
    v258 = v18;
    v269 = v15;
    v239 = v24;
    v248 = v21;
    v224 = v30;
    v231 = v27;
    v218 = v33;
    v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v218;
    v30 = v224;
    v27 = v231;
    v24 = v239;
    v21 = v248;
    v18 = v258;
    v15 = v269;
    v12 = v281;
    v9 = v294;
    v6 = v308;
    v3 = v323;
    v164 = v163;
    a1 = v339;
    if (v164)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SymbolTable<Empty>]";
      v345 = 83;
      v165 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v165)
        v166 = v165;
      else
        v166 = v345;
      v167 = &v344[v166];
      v168 = v345 - v166;
      if (v345 - v166 >= 0x12)
        v169 = 18;
      else
        v169 = v345 - v166;
      v170 = v168 - v169;
      if (v170 >= v170 - 1)
        v171 = v170 - 1;
      else
        v171 = v170;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SymbolTable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SymbolTable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v167[v169], v171);
      v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v33 = v218;
      v30 = v224;
      v27 = v231;
      v24 = v239;
      v21 = v248;
      v18 = v258;
      v15 = v269;
      v12 = v281;
      v9 = v294;
      v6 = v308;
      v3 = v323;
      a1 = v339;
    }
  }
  v36 = v35[185];
  v38 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v37 & 1) == 0)
  {
    v324 = v3;
    v340 = a1;
    v295 = v9;
    v309 = v6;
    v282 = v12;
    v259 = v18;
    v270 = v15;
    v240 = v24;
    v249 = v21;
    v225 = v30;
    v232 = v27;
    v214 = v36;
    v219 = v33;
    v38 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v36 = v214;
    v33 = v219;
    v30 = v225;
    v27 = v232;
    v24 = v240;
    v21 = v249;
    v18 = v259;
    v15 = v270;
    v12 = v282;
    v9 = v295;
    v6 = v309;
    v3 = v324;
    v173 = v172;
    a1 = v340;
    if (v173)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface::Trait<Empty>]";
      v345 = 87;
      v174 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v174)
        v175 = v174;
      else
        v175 = v345;
      v176 = &v344[v175];
      v177 = v345 - v175;
      if (v345 - v175 >= 0x12)
        v178 = 18;
      else
        v178 = v345 - v175;
      v179 = v177 - v178;
      if (v179 >= v179 - 1)
        v180 = v179 - 1;
      else
        v180 = v179;
      mlir::detail::TypeIDResolver<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v176[v178], v180);
      v38 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v36 = v214;
      v33 = v219;
      v30 = v225;
      v27 = v232;
      v24 = v240;
      v21 = v249;
      v18 = v259;
      v15 = v270;
      v12 = v282;
      v9 = v295;
      v6 = v309;
      v3 = v324;
      a1 = v340;
    }
  }
  v39 = v38[142];
  v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v40 & 1) == 0)
  {
    v325 = v3;
    v341 = a1;
    v296 = v9;
    v310 = v6;
    v283 = v12;
    v260 = v18;
    v271 = v15;
    v241 = v24;
    v250 = v21;
    v226 = v30;
    v233 = v27;
    v215 = v36;
    v220 = v33;
    v211 = v39;
    v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v39 = v211;
    v36 = v215;
    v33 = v220;
    v30 = v226;
    v27 = v233;
    v24 = v241;
    v21 = v250;
    v18 = v260;
    v15 = v271;
    v12 = v283;
    v9 = v296;
    v6 = v310;
    v3 = v325;
    v182 = v181;
    a1 = v341;
    if (v182)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v345 = 86;
      v183 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v183)
        v184 = v183;
      else
        v184 = v345;
      v185 = &v344[v184];
      v186 = v345 - v184;
      if (v345 - v184 >= 0x12)
        v187 = 18;
      else
        v187 = v345 - v184;
      v188 = v186 - v187;
      if (v188 >= v188 - 1)
        v189 = v188 - 1;
      else
        v189 = v188;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v185[v187], v189);
      v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v39 = v211;
      v36 = v215;
      v33 = v220;
      v30 = v226;
      v27 = v233;
      v24 = v241;
      v21 = v250;
      v18 = v260;
      v15 = v271;
      v12 = v283;
      v9 = v296;
      v6 = v310;
      v3 = v325;
      a1 = v341;
    }
  }
  v42 = v41[138];
  v44 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v43 & 1) == 0)
  {
    v326 = v3;
    v342 = a1;
    v297 = v9;
    v311 = v6;
    v284 = v12;
    v261 = v18;
    v272 = v15;
    v242 = v24;
    v251 = v21;
    v227 = v30;
    v234 = v27;
    v216 = v36;
    v221 = v33;
    v209 = v42;
    v212 = v39;
    v44 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v42 = v209;
    v39 = v212;
    v36 = v216;
    v33 = v221;
    v30 = v227;
    v27 = v234;
    v24 = v242;
    v21 = v251;
    v18 = v261;
    v15 = v272;
    v12 = v284;
    v9 = v297;
    v6 = v311;
    v3 = v326;
    v191 = v190;
    a1 = v342;
    if (v191)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionKindInterface::Trait<Empty>]";
      v345 = 89;
      v192 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v192)
        v193 = v192;
      else
        v193 = v345;
      v194 = &v344[v193];
      v195 = v345 - v193;
      if (v345 - v193 >= 0x12)
        v196 = 18;
      else
        v196 = v345 - v193;
      v197 = v195 - v196;
      if (v197 >= v197 - 1)
        v198 = v197 - 1;
      else
        v198 = v197;
      mlir::detail::TypeIDResolver<mlir::RegionKindInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionKindInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v194[v196], v198);
      v44 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v42 = v209;
      v39 = v212;
      v36 = v216;
      v33 = v221;
      v30 = v227;
      v27 = v234;
      v24 = v242;
      v21 = v251;
      v18 = v261;
      v15 = v272;
      v12 = v284;
      v9 = v297;
      v6 = v311;
      v3 = v326;
      a1 = v342;
    }
  }
  v45 = v44[149];
  v47 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v46 & 1) == 0)
  {
    v327 = v3;
    v343 = a1;
    v298 = v9;
    v312 = v6;
    v285 = v12;
    v262 = v18;
    v273 = v15;
    v243 = v24;
    v252 = v21;
    v228 = v30;
    v235 = v27;
    v217 = v36;
    v222 = v33;
    v210 = v42;
    v213 = v39;
    v208 = v45;
    v47 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v45 = v208;
    v42 = v210;
    v39 = v213;
    v36 = v217;
    v33 = v222;
    v30 = v228;
    v27 = v235;
    v24 = v243;
    v21 = v252;
    v18 = v262;
    v15 = v273;
    v12 = v285;
    v9 = v298;
    v6 = v312;
    v3 = v327;
    v200 = v199;
    a1 = v343;
    if (v200)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasOnlyGraphRegion<Empty>]";
      v345 = 90;
      v201 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v201)
        v202 = v201;
      else
        v202 = v345;
      v203 = &v344[v202];
      v204 = v345 - v202;
      if (v345 - v202 >= 0x12)
        v205 = 18;
      else
        v205 = v345 - v202;
      v206 = v204 - v205;
      if (v206 >= v206 - 1)
        v207 = v206 - 1;
      else
        v207 = v206;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasOnlyGraphRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasOnlyGraphRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v203[v205], v207);
      v47 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v45 = v208;
      v42 = v210;
      v39 = v213;
      v36 = v217;
      v33 = v222;
      v30 = v228;
      v27 = v235;
      v24 = v243;
      v21 = v252;
      v18 = v262;
      v15 = v273;
      v12 = v285;
      v9 = v298;
      v6 = v312;
      v3 = v327;
      a1 = v343;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == (_QWORD)a1
      || v27 == a1
      || v30 == (_QWORD)a1
      || v33 == (_QWORD)a1
      || v36 == (_QWORD)a1
      || v39 == (_QWORD)a1
      || v42 == (_QWORD)a1
      || v45 == (_QWORD)a1
      || v47[200] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, unsigned int *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::ModuleOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::verifyInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  mlir::detail *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::ModuleOp>,mlir::OpTrait::ZeroResults<mlir::ModuleOp>,mlir::OpTrait::ZeroSuccessors<mlir::ModuleOp>,mlir::OpTrait::ZeroOperands<mlir::ModuleOp>,mlir::OpTrait::NoRegionArguments<mlir::ModuleOp>,mlir::OpTrait::NoTerminator<mlir::ModuleOp>,mlir::OpTrait::SingleBlock<mlir::ModuleOp>,mlir::OpTrait::OpInvariants<mlir::ModuleOp>,mlir::BytecodeOpInterface::Trait<mlir::ModuleOp>,mlir::OpTrait::AffineScope<mlir::ModuleOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::ModuleOp>,mlir::OpTrait::SymbolTable<mlir::ModuleOp>,mlir::SymbolOpInterface::Trait<mlir::ModuleOp>,mlir::OpAsmOpInterface::Trait<mlir::ModuleOp>,mlir::RegionKindInterface::Trait<mlir::ModuleOp>,mlir::OpTrait::HasOnlyGraphRegion<mlir::ModuleOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::ModuleOp::verify((uint64_t **)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::ModuleOp>,mlir::OpTrait::ZeroResults<mlir::ModuleOp>,mlir::OpTrait::ZeroSuccessors<mlir::ModuleOp>,mlir::OpTrait::ZeroOperands<mlir::ModuleOp>,mlir::OpTrait::NoRegionArguments<mlir::ModuleOp>,mlir::OpTrait::NoTerminator<mlir::ModuleOp>,mlir::OpTrait::SingleBlock<mlir::ModuleOp>,mlir::OpTrait::OpInvariants<mlir::ModuleOp>,mlir::BytecodeOpInterface::Trait<mlir::ModuleOp>,mlir::OpTrait::AffineScope<mlir::ModuleOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::ModuleOp>,mlir::OpTrait::SymbolTable<mlir::ModuleOp>,mlir::SymbolOpInterface::Trait<mlir::ModuleOp>,mlir::OpAsmOpInterface::Trait<mlir::ModuleOp>,mlir::RegionKindInterface::Trait<mlir::ModuleOp>,mlir::OpTrait::HasOnlyGraphRegion<mlir::ModuleOp>>(mlir::detail *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::detail *v8;

  if (mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyZeroOperands(a1, v5)
    && mlir::OpTrait::impl::verifyNoRegionArguments(a1, v6)
    && mlir::OpTrait::SingleBlock<mlir::ModuleOp>::verifyTrait((uint64_t)a1)
    && (v8 = a1, mlir::ModuleOp::verifyInvariantsImpl((uint64_t **)&v8)))
  {
    return mlir::op_definition_impl::verifyTrait<mlir::SymbolOpInterface::Trait<mlir::ModuleOp>>(a1);
  }
  else
  {
    return 0;
  }
}

BOOL mlir::op_definition_impl::verifyTrait<mlir::SymbolOpInterface::Trait<mlir::ModuleOp>>(mlir::detail *a1)
{
  uint64_t InherentAttr;
  mlir::Operation *v3;
  BOOL v4;

  InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a1, (uint64_t)"sym_name", 8);
  if ((_BYTE)v3)
    v4 = InherentAttr == 0;
  else
    v4 = 1;
  return v4 || mlir::detail::verifySymbol(a1, v3) != 0;
}

uint64_t mlir::OpTrait::SingleBlock<mlir::ModuleOp>::verifyTrait(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  const char *v3;
  _QWORD *i;
  uint64_t v5;
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  int *v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  int64_t v28;
  int64_t v29;
  const void **v30;
  __int16 v31;
  int v32;
  const char *v33;
  uint64_t v34;
  _QWORD v35[3];
  void *v36;
  unsigned int v37;
  unsigned int v38;
  _BYTE v39[96];
  void *v40;
  _QWORD *v41;
  void *__p;
  _QWORD **v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned int *)(a1 + 44);
  v2 = v1 & 0x7FFFFF;
  if ((v1 & 0x7FFFFF) == 0)
    return 1;
  v3 = 0;
  for (i = (_QWORD *)(((a1 + 16 * ((v1 >> 23) & 1) + ((v1 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * *(unsigned int *)(a1 + 40)); ; i += 3)
  {
    if (i != (_QWORD *)*i)
    {
      v5 = i[1];
      if (i == (_QWORD *)v5 || i != *(_QWORD **)(v5 + 8))
        break;
    }
    if ((const char *)v2 == ++v3)
      return 1;
  }
  v30 = (const void **)"expects region #";
  v31 = 259;
  mlir::Operation::emitOpError((uint64_t *)a1, &v30, (uint64_t)v35);
  if (v35[0])
  {
    v32 = 5;
    v33 = v3;
    v6 = &v32;
    v7 = (char *)v36;
    if (v37 >= v38)
    {
      v25 = v37 + 1;
      if (v36 <= &v32 && (char *)v36 + 24 * v37 > (char *)&v32)
      {
        v28 = (char *)&v32 - (_BYTE *)v36;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v25, 24);
        v7 = (char *)v36;
        v6 = (int *)((char *)v36 + v28);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v25, 24);
        v6 = &v32;
        v7 = (char *)v36;
      }
    }
    v8 = &v7[24 * v37];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    v10 = ++v37;
    if (v35[0])
    {
      v32 = 3;
      v33 = " to have 0 or 1 blocks";
      v34 = 22;
      v11 = &v32;
      v12 = (char *)v36;
      if (v10 >= v38)
      {
        v26 = v10 + 1;
        v27 = (char *)v36 + 24 * v10 > (char *)&v32;
        if (v36 <= &v32 && v27)
        {
          v29 = (char *)&v32 - (_BYTE *)v36;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v26, 24);
          v12 = (char *)v36;
          v11 = (int *)((char *)v36 + v29);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v26, 24);
          v11 = &v32;
          v12 = (char *)v36;
        }
      }
      v13 = &v12[24 * v37];
      v14 = *(_OWORD *)v11;
      *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v13 = v14;
      ++v37;
    }
  }
  v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v35);
  if (v35[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v35);
  if (v44)
  {
    v16 = (_QWORD **)__p;
    if (__p)
    {
      v17 = v43;
      v18 = __p;
      if (v43 != __p)
      {
        do
          v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        v18 = __p;
      }
      v43 = v16;
      operator delete(v18);
    }
    v19 = v40;
    if (v40)
    {
      v20 = v41;
      v21 = v40;
      if (v41 != v40)
      {
        do
        {
          v23 = (void *)*--v20;
          v22 = v23;
          *v20 = 0;
          if (v23)
            operator delete[](v22);
        }
        while (v20 != v19);
        v21 = v40;
      }
      v41 = v19;
      operator delete(v21);
    }
    if (v36 != v39)
      free(v36);
  }
  return v15;
}

BOOL mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  return mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2)
      && mlir::detail::verifySymbolTable(a1, v3) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v6;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v5 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::UnrealizedConversionCastOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::UnrealizedConversionCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::UnrealizedConversionCastOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::UnrealizedConversionCastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::UnrealizedConversionCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::UnrealizedConversionCastOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int *v10;
  _BYTE v11[40];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  mlir::detail::UnrealizedConversionCastOpGenericAdaptorBase::UnrealizedConversionCastOpGenericAdaptorBase((uint64_t)v11, a2);
  v12 = a3;
  v13 = a4;
  return mlir::UnrealizedConversionCastOp::fold((uint64_t *)&v10, v8, a5);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  __guard *v5;
  __guard v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  void **p_vtable;
  void *v18;
  unsigned __int8 v19;
  void **v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t *v23;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  const char *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  const char *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  const char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  const char *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  const char *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __guard v119;
  __guard v120;
  __guard v121;
  __guard v122;
  __guard v123;
  __guard v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  const char *v140;
  unint64_t v141;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v132 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v32;
    a1 = v132;
    if (v33)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v141 = 83;
      v34 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v34)
        v35 = v34;
      else
        v35 = v141;
      v36 = &v140[v35];
      v37 = v141 - v35;
      if (v141 - v35 >= 0x12)
        v38 = 18;
      else
        v38 = v141 - v35;
      v39 = v37 - v38;
      if (v39 >= v39 - 1)
        v40 = v39 - 1;
      else
        v40 = v39;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v36[v38], v40);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v132;
    }
  }
  v3 = v2[187];
  if ((v4 & 1) == 0)
  {
    v133 = a1;
    v125 = v3;
    v3 = v125;
    v42 = v41;
    a1 = v133;
    if (v42)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v141 = 87;
      v43 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v43)
        v44 = v43;
      else
        v44 = v141;
      v45 = &v140[v44];
      v46 = v141 - v44;
      if (v141 - v44 >= 0x12)
        v47 = 18;
      else
        v47 = v141 - v44;
      v48 = v46 - v47;
      if (v48 >= v48 - 1)
        v49 = v48 - 1;
      else
        v49 = v48;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v45[v47], v49);
      v3 = v125;
      a1 = v133;
    }
  }
  v6 = v5[299];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v134 = a1;
    v119 = v6;
    v126 = v3;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v119;
    v3 = v126;
    v51 = v50;
    a1 = v134;
    if (v51)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v141 = 86;
      v52 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v52)
        v53 = v52;
      else
        v53 = v141;
      v54 = &v140[v53];
      v55 = v141 - v53;
      if (v141 - v53 >= 0x12)
        v56 = 18;
      else
        v56 = v141 - v53;
      v57 = v55 - v56;
      if (v57 >= v57 - 1)
        v58 = v57 - 1;
      else
        v58 = v57;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v54[v56], v58);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v119;
      v3 = v126;
      a1 = v134;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v135 = a1;
    v120 = v6;
    v127 = v3;
    v114 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v114;
    v6 = v120;
    v3 = v127;
    v60 = v59;
    a1 = v135;
    if (v60)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v141 = 88;
      v61 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v61)
        v62 = v61;
      else
        v62 = v141;
      v63 = &v140[v62];
      v64 = v141 - v62;
      if (v141 - v62 >= 0x12)
        v65 = 18;
      else
        v65 = v141 - v62;
      v66 = v64 - v65;
      if (v66 >= v66 - 1)
        v67 = v66 - 1;
      else
        v67 = v66;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v63[v65], v67);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v114;
      v6 = v120;
      v3 = v127;
      a1 = v135;
    }
  }
  v12 = v11[198];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v136 = a1;
    v121 = v6;
    v128 = v3;
    v110 = v12;
    v115 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v110;
    v9 = v115;
    v6 = v121;
    v3 = v128;
    v69 = v68;
    a1 = v136;
    if (v69)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v141 = 84;
      v70 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v70)
        v71 = v70;
      else
        v71 = v141;
      v72 = &v140[v71];
      v73 = v141 - v71;
      if (v141 - v71 >= 0x12)
        v74 = 18;
      else
        v74 = v141 - v71;
      v75 = v73 - v74;
      if (v75 >= v75 - 1)
        v76 = v75 - 1;
      else
        v76 = v75;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v72[v74], v76);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v110;
      v9 = v115;
      v6 = v121;
      v3 = v128;
      a1 = v136;
    }
  }
  v15 = v14[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v16 & 1) == 0)
  {
    v137 = a1;
    v122 = v6;
    v129 = v3;
    v111 = v12;
    v116 = v9;
    v107 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v15 = v107;
    v12 = v111;
    v9 = v116;
    v6 = v122;
    v3 = v129;
    v78 = v77;
    a1 = v137;
    if (v78)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v141 = 95;
      v79 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v79)
        v80 = v79;
      else
        v80 = v141;
      v81 = &v140[v80];
      v82 = v141 - v80;
      if (v141 - v80 >= 0x12)
        v83 = 18;
      else
        v83 = v141 - v80;
      v84 = v82 - v83;
      if (v84 >= v84 - 1)
        v85 = v84 - 1;
      else
        v85 = v84;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v81[v83], v85);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v15 = v107;
      v12 = v111;
      v9 = v116;
      v6 = v122;
      v3 = v129;
      a1 = v137;
    }
  }
  v18 = p_vtable[486];
  v20 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v138 = a1;
    v123 = v6;
    v130 = v3;
    v112 = v12;
    v117 = v9;
    v105 = v18;
    v108 = v15;
    v20 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v105;
    v15 = v108;
    v12 = v112;
    v9 = v117;
    v6 = v123;
    v3 = v130;
    v87 = v86;
    a1 = v138;
    if (v87)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v141 = 99;
      v88 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v88)
        v89 = v88;
      else
        v89 = v141;
      v90 = &v140[v89];
      v91 = v141 - v89;
      if (v141 - v89 >= 0x12)
        v92 = 18;
      else
        v92 = v141 - v89;
      v93 = v91 - v92;
      if (v93 >= v93 - 1)
        v94 = v93 - 1;
      else
        v94 = v93;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v90[v92], v94);
      v20 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v105;
      v15 = v108;
      v12 = v112;
      v9 = v117;
      v6 = v123;
      v3 = v130;
      a1 = v138;
    }
  }
  v21 = v20[504];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v139 = a1;
    v124 = v6;
    v131 = v3;
    v113 = v12;
    v118 = v9;
    v106 = v18;
    v109 = v15;
    v104 = v21;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v104;
    v18 = v106;
    v15 = v109;
    v12 = v113;
    v9 = v118;
    v6 = v124;
    v3 = v131;
    v96 = v95;
    a1 = v139;
    if (v96)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v141 = 93;
      v97 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v97)
        v98 = v97;
      else
        v98 = v141;
      v99 = &v140[v98];
      v100 = v141 - v98;
      if (v141 - v98 >= 0x12)
        v101 = 18;
      else
        v101 = v141 - v98;
      v102 = v100 - v101;
      if (v102 >= v102 - 1)
        v103 = v102 - 1;
      else
        v103 = v102;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v99[v101], v103);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v104;
      v18 = v106;
      v15 = v109;
      v12 = v113;
      v9 = v118;
      v6 = v124;
      v3 = v131;
      a1 = v139;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == a1
      || v21 == a1
      || v23[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::UnrealizedConversionCastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(unsigned int *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unsigned int *v8;

  if (!mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v3))
  {
    return 0;
  }
  v4 = a1[9];
  if (a1[9])
    v5 = (uint64_t)(a1 - 4);
  else
    v5 = 0;
  if ((_DWORD)v4)
  {
    for (i = 0; i != v4; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v5, i);
  }
  v8 = a1;
  return mlir::UnrealizedConversionCastOp::verify((uint64_t **)&v8) != 0;
}

uint64_t mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

mlir::ResourceBlobManagerDialectInterface *mlir::ResourceBlobManagerDialectInterface::ResourceBlobManagerDialectInterface(mlir::ResourceBlobManagerDialectInterface *this, mlir::Dialect *a2)
{
  unsigned __int8 v3;
  char *v4;
  llvm::sys::RWMutexImpl *v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  mlir::Dialect *v15;
  const char *v16;
  unint64_t v17;

  if ((v3 & 1) == 0)
  {
    v15 = a2;
    a2 = v15;
    if (v7)
    {
      v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ResourceBlobManagerDialectInterface]";
      v17 = 91;
      v8 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v8)
        v9 = v8;
      else
        v9 = v17;
      v10 = &v16[v9];
      v11 = v17 - v9;
      if (v17 - v9 >= 0x12)
        v12 = 18;
      else
        v12 = v17 - v9;
      v13 = v11 - v12;
      if (v13 >= v13 - 1)
        v14 = v13 - 1;
      else
        v14 = v13;
      mlir::detail::TypeIDResolver<mlir::ResourceBlobManagerDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      a2 = v15;
    }
  }
  *((_QWORD *)this + 2) = mlir::detail::TypeIDResolver<mlir::ResourceBlobManagerDialectInterface,void>::resolveTypeID(void)::id;
  *(_QWORD *)this = &unk_1E0E48010;
  *((_QWORD *)this + 1) = a2;
  v4 = (char *)operator new(0x40uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E0E51F60;
  *((_QWORD *)v4 + 1) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *((_QWORD *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  v5 = llvm::sys::RWMutexImpl::RWMutexImpl((llvm::sys::RWMutexImpl *)(v4 + 24));
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = 0x6000000000;
  *((_QWORD *)this + 3) = v5;
  *((_QWORD *)this + 4) = v4;
  return this;
}

void mlir::ResourceBlobManagerDialectInterfaceBase<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>::~ResourceBlobManagerDialectInterfaceBase(mlir::GenericProgramPoint *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &unk_1E0E48010;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    mlir::GenericProgramPoint::~GenericProgramPoint(this);
  }
  else
  {
LABEL_5:
    mlir::GenericProgramPoint::~GenericProgramPoint(this);
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = &unk_1E0E48010;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    mlir::GenericProgramPoint::~GenericProgramPoint(this);
  }
  else
  {
LABEL_5:
    mlir::GenericProgramPoint::~GenericProgramPoint(this);
  }
  operator delete(v5);
}

void mlir::ResourceBlobManagerDialectInterface::~ResourceBlobManagerDialectInterface(mlir::ResourceBlobManagerDialectInterface *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &unk_1E0E48010;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    mlir::GenericProgramPoint::~GenericProgramPoint(this);
  }
  else
  {
LABEL_5:
    mlir::GenericProgramPoint::~GenericProgramPoint(this);
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = &unk_1E0E48010;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    mlir::GenericProgramPoint::~GenericProgramPoint(this);
  }
  else
  {
LABEL_5:
    mlir::GenericProgramPoint::~GenericProgramPoint(this);
  }
  operator delete(v5);
}

void std::__shared_ptr_emplace<mlir::DialectResourceBlobManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51F60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::DialectResourceBlobManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51F60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<mlir::DialectResourceBlobManager>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 52))
  {
    v2 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = (_QWORD *)(a1 + 40);
      do
      {
        v5 = *(llvm **)(*v4 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::StringMapEntry<mlir::DialectResourceBlobManager::BlobEntry>::Destroy<llvm::MallocAllocator>(v5);
        v3 += 8;
      }
      while (8 * v2 != v3);
    }
  }
  free(*(void **)(a1 + 40));
  llvm::sys::RWMutexImpl::~RWMutexImpl((pthread_rwlock_t **)(a1 + 24));
}

void llvm::StringMapEntry<mlir::DialectResourceBlobManager::BlobEntry>::Destroy<llvm::MallocAllocator>(llvm *this)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;

  v2 = *(_QWORD *)this;
  if (*((_BYTE *)this + 88))
  {
    v3 = *((_QWORD *)this + 9);
    if (v3 >= 8)
    {
      v4 = (char *)this + 48;
      v5 = *((_QWORD *)this + 3);
      v6 = *((_QWORD *)this + 4);
      v7 = *((_QWORD *)this + 5);
      v8 = (char *)this + 48;
      if ((v3 & 2) == 0)
        v8 = *(char **)v4;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFF8))(v8, v5, v6, v7);
      v9 = *((_QWORD *)this + 9);
      if (v9 >= 8)
      {
        if ((v9 & 4) != 0)
        {
          if ((v9 & 2) == 0)
            v4 = *(char **)v4;
          (*(void (**)(char *))((v9 & 0xFFFFFFFFFFFFFFF8) + 16))(v4);
        }
        if ((v9 & 2) == 0)
          llvm::deallocate_buffer(*((llvm **)this + 6), *((void **)this + 7));
      }
    }
  }
  llvm::deallocate_buffer(this, (void *)(v2 + 97));
}

void `anonymous namespace'::BuiltinOpAsmDialectInterface::~BuiltinOpAsmDialectInterface(_anonymous_namespace_::BuiltinOpAsmDialectInterface *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t `anonymous namespace'::BuiltinOpAsmDialectInterface::getAlias(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  void *v4;
  uint64_t v6;
  const char *v7;
  llvm::raw_ostream *v8;
  size_t v9;
  uint64_t v11;
  unsigned __int8 v12;
  __guard *v13;
  uint64_t v14;
  _QWORD *v15;
  __int16 v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;

  v4 = *(void **)(*(_QWORD *)a2 + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    v6 = *((_QWORD *)a3 + 4);
    if ((unint64_t)(*((_QWORD *)a3 + 3) - v6) <= 2)
    {
      v7 = "map";
      goto LABEL_10;
    }
    *(_BYTE *)(v6 + 2) = 112;
    v16 = 24941;
    goto LABEL_24;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id)
  {
    v6 = *((_QWORD *)a3 + 4);
    if ((unint64_t)(*((_QWORD *)a3 + 3) - v6) <= 2)
    {
      v7 = "set";
      goto LABEL_10;
    }
    *(_BYTE *)(v6 + 2) = 116;
    v16 = 25971;
LABEL_24:
    *(_WORD *)v6 = v16;
    v17 = *((_QWORD *)a3 + 4) + 3;
    goto LABEL_25;
  }
  if (mlir::LocationAttr::classof(a2))
  {
    v6 = *((_QWORD *)a3 + 4);
    if ((unint64_t)(*((_QWORD *)a3 + 3) - v6) <= 2)
    {
      v7 = "loc";
LABEL_10:
      v8 = a3;
      v9 = 3;
LABEL_11:
      llvm::raw_ostream::write(v8, v7, v9);
      return 1;
    }
    *(_BYTE *)(v6 + 2) = 99;
    v16 = 28524;
    goto LABEL_24;
  }
  v11 = *(_QWORD *)(*(_QWORD *)a2 + 136);
  if ((v12 & 1) == 0)
  {
    v26 = *(_QWORD *)(*(_QWORD *)a2 + 136);
    v11 = v26;
    if (v18)
    {
      v28 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
      v29 = 68;
      v19 = llvm::StringRef::find((uint64_t *)&v28, "DesiredTypeName = ", 0x12uLL, 0);
      if (v29 >= v19)
        v20 = v19;
      else
        v20 = v29;
      v21 = &v28[v20];
      v22 = v29 - v20;
      if (v29 - v20 >= 0x12)
        v23 = 18;
      else
        v23 = v29 - v20;
      v24 = v22 - v23;
      if (v24 >= v24 - 1)
        v25 = v24 - 1;
      else
        v25 = v24;
      mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v21[v23], v25);
      v11 = v26;
    }
  }
  if (v11 == v13[469])
    v14 = a2;
  else
    v14 = 0;
  v27 = v14;
  if (!v14
    || *(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v27) + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    return 0;
  }
  v15 = (_QWORD *)*((_QWORD *)a3 + 4);
  if (*((_QWORD *)a3 + 3) - (_QWORD)v15 <= 7uLL)
  {
    v7 = "distinct";
    v8 = a3;
    v9 = 8;
    goto LABEL_11;
  }
  *v15 = 0x74636E6974736964;
  v17 = *((_QWORD *)a3 + 4) + 8;
LABEL_25:
  *((_QWORD *)a3 + 4) = v17;
  return 1;
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::TupleType,void>::id)
    v3 = a2;
  else
    v3 = 0;
  v7 = v3;
  if (!v3 || (unint64_t)mlir::AffineExpr::getKind((mlir::AffineExpr *)&v7) < 0x11)
    return 0;
  v5 = *((_QWORD *)a3 + 4);
  if ((unint64_t)(*((_QWORD *)a3 + 3) - v5) > 4)
  {
    *(_BYTE *)(v5 + 4) = 101;
    *(_DWORD *)v5 = 1819309428;
    *((_QWORD *)a3 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(a3, "tuple", 5uLL);
  }
  return 1;
}

void `anonymous namespace'::BuiltinOpAsmDialectInterface::declareResource(uint64_t a1@<X0>, int8x16_t *a2@<X1>, const unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  llvm **v6;
  char v7;
  llvm **v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[3];
  llvm *v12[2];
  unint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 24);
  LOBYTE(v11[0]) = 0;
  v14 = 0;
  mlir::ResourceBlobManagerDialectInterfaceBase<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>::insert(v5, a2, a3, (uint64_t)v11, (uint64_t *)&v9);
  *(_OWORD *)a4 = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_BYTE *)(a4 + 24) = 1;
  if (v14 && v13 >= 8)
  {
    v6 = (v13 & 2) != 0 ? v12 : (llvm **)v12[0];
    (*(void (**)(llvm **, _QWORD, _QWORD, _QWORD))(v13 & 0xFFFFFFFFFFFFFFF8))(v6, v11[0], v11[1], v11[2]);
    v7 = v13;
    if (v13 >= 8)
    {
      if ((v13 & 4) != 0)
      {
        if ((v13 & 2) != 0)
          v8 = v12;
        else
          v8 = (llvm **)v12[0];
        (*(void (**)(llvm **))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))(v8);
      }
      if ((v7 & 2) == 0)
        llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
}

void `anonymous namespace'::BuiltinOpAsmDialectInterface::getResourceKey(const void ***a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = (_QWORD *)a2;
  v3 = **a1;
  if (!v3)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return;
  }
  v4 = (size_t)(*a1)[1];
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 >= 0x17)
  {
    v5 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v5 = v4 | 7;
    v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    v2[1] = v4;
    v2[2] = v6 | 0x8000000000000000;
    *v2 = v7;
    v2 = v7;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = v4;
    if (!v4)
      goto LABEL_11;
  }
  memmove(v2, v3, v4);
LABEL_11:
  *((_BYTE *)v2 + v4) = 0;
}

uint64_t `anonymous namespace'::BuiltinOpAsmDialectInterface::parseResource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int8x16_t *v5;
  const unsigned __int8 *v6;
  llvm **v7;
  char v8;
  llvm **v9;
  char v11;
  _QWORD v12[3];
  llvm *v13[2];
  unint64_t v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr, uint64_t, void *(*)@<X0>(size_t@<X1>, std::align_val_t@<X2>, uint64_t@<X8>), char *))(*(_QWORD *)a2 + 56))(v12, a2, llvm::function_ref<mlir::AsmResourceBlob ()(unsigned long,unsigned long)>::callback_fn<mlir::AsmParsedResourceEntry::parseAsBlob(void)::{lambda(unsigned long,unsigned long)#1}>, &v11);
  if (!v15)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = (int8x16_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  mlir::DialectResourceBlobManager::update(*(_QWORD *)(v4 + 24), v5, v6, (uint64_t)v12);
  if (v15 && v14 >= 8)
  {
    v7 = (v14 & 2) != 0 ? v13 : (llvm **)v13[0];
    (*(void (**)(llvm **, _QWORD, _QWORD, _QWORD))(v14 & 0xFFFFFFFFFFFFFFF8))(v7, v12[0], v12[1], v12[2]);
    v8 = v14;
    if (v14 >= 8)
    {
      if ((v14 & 4) != 0)
      {
        if ((v14 & 2) != 0)
          v9 = v13;
        else
          v9 = (llvm **)v13[0];
        (*(void (**)(llvm **))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))(v9);
      }
      if ((v8 & 2) == 0)
        llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return 1;
}

void `anonymous namespace'::BuiltinOpAsmDialectInterface::buildResources(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::ResourceBlobManagerDialectInterfaceBase<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>::buildResources(*(_QWORD *)(a1 + 24), a4, *(_QWORD *)(a3 + 24), *(unsigned int *)(a3 + 32));
}

void mlir::ResourceBlobManagerDialectInterfaceBase<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>::buildResources(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  unint64_t v20;

  if (a4)
  {
    v5 = 24 * a4;
    v6 = (uint64_t *)(a3 + 8);
    do
    {
      v7 = *v6;
      if ((v8 & 1) == 0)
      {
        v18 = *v6;
        v7 = v18;
        if (v10)
        {
          v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>]";
          v20 = 103;
          v11 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
          if (v20 >= v11)
            v12 = v11;
          else
            v12 = v20;
          v13 = &v19[v12];
          v14 = v20 - v12;
          if (v20 - v12 >= 0x12)
            v15 = 18;
          else
            v15 = v20 - v12;
          v16 = v14 - v15;
          if (v16 >= v16 - 1)
            v17 = v16 - 1;
          else
            v17 = v16;
          mlir::detail::TypeIDResolver<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
          v7 = v18;
        }
      }
      if (v7 == mlir::detail::TypeIDResolver<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>,void>::resolveTypeID(void)::id)
      {
        v9 = *(v6 - 1);
        if (*(_BYTE *)(v9 + 80))
          (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), *(unsigned int *)(v9 + 32));
      }
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
  }
}

BOOL _ZNSt3__112__equal_implB8nn180100IN4llvm6detail27indexed_accessor_range_baseIN4mlir11ResultRangeEPNS4_6detail12OpResultImplENS4_8OpResultES9_S9_E8iteratorESB_NS3_INS4_12OperandRangeEPNS4_9OpOperandENS4_5ValueESF_SF_E8iteratorESH_NS_10__equal_toENS_10__identityESJ_EEbT_T0_T1_T2_RT3_RT4_RT5_(mlir::detail::OpResultImpl *this, uint64_t a2, mlir::detail::OpResultImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  BOOL v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t NextResultAtOffset;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v13 = a2;
  v15 = this == a3;
  if (this == a3 && (v16 = a6, a2 == a4))
  {
LABEL_3:
    if (a5 != a7)
      return 0;
  }
  else
  {
    if (a5 != a7)
    {
      if (this == a3)
      {
        v16 = a6 + a4 - a2;
        v18 = (_QWORD *)(a5 + 32 * a6 + 24);
        while (mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v13) == *v18)
        {
          ++v13;
          v18 += 4;
          if (a4 == v13)
            goto LABEL_3;
        }
      }
      else
      {
        NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, a2);
        v22 = a5 + 32 * a6;
        if (NextResultAtOffset == *(_QWORD *)(v22 + 24))
        {
          v23 = (uint64_t *)(v22 + 56);
          v24 = v13 + 1;
          do
          {
            v25 = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v24);
            v26 = *v23;
            v23 += 4;
            ++v24;
          }
          while (v25 == v26);
        }
      }
      return 0;
    }
    if (this != a3)
    {
      v27 = a8 - a6;
      if (a8 != a6)
      {
        v28 = (_QWORD *)(a5 + 32 * a6 + 24);
        while (mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v13) == *v28)
        {
          ++v13;
          v28 += 4;
          if (!--v27)
            goto LABEL_25;
        }
      }
      return 0;
    }
    v16 = a6 + a4 - a2;
    v19 = (_QWORD *)(a5 + 32 * a6 + 24);
    v20 = a8 - a6;
    while (v20)
    {
      if (mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v13) != *v19)
        return 0;
      ++v13;
      v19 += 4;
      --v20;
      if (a4 == v13)
        goto LABEL_3;
    }
LABEL_25:
    v16 = a8;
    if (!v15 || v13 != a4)
      return 0;
  }
  return v16 == a8;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::ModuleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

const char *mlir::builtin_dialect_detail::addBytecodeInterface(mlir::builtin_dialect_detail *this, mlir::BuiltinDialect *a2)
{
  char *v3;
  unsigned __int8 v4;
  void **p_vtable;
  void *v6;
  const char *result;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  const char *v18;
  unint64_t v19;

  v3 = (char *)operator new(0x18uLL);
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v4 & 1) == 0)
  {
    v17 = v3;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v9 = v8;
    v3 = v17;
    if (v9)
    {
      v18 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeDialectInterface]";
      v19 = 80;
      v10 = llvm::StringRef::find((uint64_t *)&v18, "DesiredTypeName = ", 0x12uLL, 0);
      if (v19 >= v10)
        v11 = v10;
      else
        v11 = v19;
      v12 = &v18[v11];
      v13 = v19 - v11;
      if (v19 - v11 >= 0x12)
        v14 = 18;
      else
        v14 = v19 - v11;
      v15 = v13 - v14;
      if (v15 >= v15 - 1)
        v16 = v15 - 1;
      else
        v16 = v15;
      mlir::detail::TypeIDResolver<mlir::BytecodeDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v3 = v17;
    }
  }
  v6 = p_vtable[485];
  *((_QWORD *)v3 + 1) = this;
  *((_QWORD *)v3 + 2) = v6;
  *(_QWORD *)v3 = off_1E0E1A048;
  v18 = v3;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v18);
  result = v18;
  v18 = 0;
  if (result)
    return (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
  return result;
}

void `anonymous namespace'::BuiltinDialectBytecodeInterface::~BuiltinDialectBytecodeInterface(_anonymous_namespace_::BuiltinDialectBytecodeInterface *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

_QWORD *`anonymous namespace'::BuiltinDialectBytecodeInterface::readAttribute(mlir::DialectInterface *a1, uint64_t a2)
{
  mlir::MLIRContext *Context;
  mlir::MLIRContext *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  void *FloatSemantics;
  llvm::APFloatBase *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  uint64_t Width;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  _QWORD **v55;
  _QWORD **v56;
  void *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  void *v62;
  unint64_t NumElements;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  _QWORD **v72;
  _QWORD **v73;
  void *v74;
  _QWORD *v75;
  _QWORD *v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t *ArgAttrsAttr;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  llvm::APFloatBase *v86;
  void *v87;
  int v88;
  unint64_t v90;
  unint64_t v91;
  BOOL v92;
  unint64_t v93;
  unint64_t v94;
  int64_t v95;
  int64_t v96;
  int64_t v97;
  int64_t v98;
  uint64_t v99;
  void *v100;
  unsigned int v101;
  unsigned __int8 v102;
  unint64_t v103;
  __int128 v104;
  uint64_t v105;
  _BYTE v106[24];
  void *v107;
  unsigned int v108;
  unsigned int v109;
  _BYTE v110[96];
  void *v111;
  _QWORD *v112;
  void *__p;
  _QWORD **v114;
  char v115;
  _BYTE v116[24];
  __int16 v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  Context = (mlir::MLIRContext *)mlir::DialectInterface::getContext(a1);
  v99 = 0;
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 72))(a2, &v99))
  {
    switch(v99)
    {
      case 0:
        *(_QWORD *)v106 = &v106[16];
        *(_QWORD *)&v106[8] = 0x600000000;
        *(_QWORD *)v116 = a2;
        if (!mlir::DialectBytecodeReader::readList<mlir::Attribute,mlir::LogicalResult mlir::DialectBytecodeReader::readAttributes<mlir::Attribute>(llvm::SmallVectorImpl<mlir::Attribute> &)::{lambda(mlir::Attribute&)#1}>(a2, (uint64_t)v106, v116))goto LABEL_149;
        v5 = mlir::ArrayAttr::get(Context, *(uint64_t *)v106, *(unsigned int *)&v106[8]);
        goto LABEL_150;
      case 1:
        *(_QWORD *)v106 = &v106[16];
        *(_QWORD *)&v106[8] = 0x300000000;
        v103 = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(_QWORD *)a2 + 72))(a2, &v103))
          goto LABEL_149;
        v6 = v103;
        if (v103 > *(unsigned int *)&v106[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v106, &v106[16], v103, 16);
          v6 = v103;
        }
        if (!v6)
        {
          v11 = *(_DWORD *)&v106[8];
LABEL_157:
          v5 = mlir::DictionaryAttr::get(Context, *(mlir::MLIRContext **)v106, v11);
          goto LABEL_150;
        }
        v7 = 0;
        while (1)
        {
          *(_QWORD *)&v104 = 0;
          v100 = 0;
          if (!mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a2, (uint64_t *)&v104)
            || !(*(unsigned __int8 (**)(uint64_t, void **))(*(_QWORD *)a2 + 48))(a2, &v100))
          {
            goto LABEL_149;
          }
          mlir::NamedAttribute::NamedAttribute(v116, v104, (uint64_t)v100);
          v8 = *(_QWORD *)&v116[8];
          v9 = *(_DWORD *)&v106[8];
          if (*(_DWORD *)&v106[8] >= *(_DWORD *)&v106[12])
          {
            v12 = *(_QWORD *)&v116[8];
            v13 = *(_QWORD *)v116;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v106, &v106[16], *(unsigned int *)&v106[8] + 1, 16);
            v14 = (_QWORD *)(*(_QWORD *)v106 + 16 * *(unsigned int *)&v106[8]);
            *v14 = v13;
            v14[1] = v12;
            v11 = ++*(_DWORD *)&v106[8];
            if (++v7 >= v103)
              goto LABEL_157;
          }
          else
          {
            v10 = (_QWORD *)(*(_QWORD *)v106 + 16 * *(unsigned int *)&v106[8]);
            *v10 = *(_QWORD *)v116;
            v10[1] = v8;
            v11 = v9 + 1;
            *(_DWORD *)&v106[8] = v11;
            if (++v7 >= v103)
              goto LABEL_157;
          }
        }
      case 2:
        *(_QWORD *)v116 = 0;
        *(_QWORD *)&v116[8] = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 104))(a2, v116))
          return 0;
        LOWORD(v108) = 261;
        *(_QWORD *)v106 = *(_QWORD *)v116;
        *(_QWORD *)&v106[8] = *(_QWORD *)&v116[8];
        return (_QWORD *)mlir::StringAttr::get(Context, (mlir::MLIRContext *)v106);
      case 3:
        *(_QWORD *)v116 = 0;
        *(_QWORD *)&v116[8] = 0;
        *(_QWORD *)&v104 = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 104))(a2, v116)
          || !(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 64))(a2, &v104))
        {
          return 0;
        }
        LOWORD(v108) = 261;
        *(_QWORD *)v106 = *(_QWORD *)v116;
        *(_QWORD *)&v106[8] = *(_QWORD *)&v116[8];
        return (_QWORD *)mlir::StringAttr::get((char **)v106, v104);
      case 4:
        *(_QWORD *)v106 = 0;
        if (!mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a2, (uint64_t *)v106))
          return 0;
        return (_QWORD *)mlir::SymbolRefAttr::get(*(uint64_t *)v106);
      case 5:
        *(_QWORD *)&v104 = 0;
        *(_QWORD *)v106 = &v106[16];
        *(_QWORD *)&v106[8] = 0x600000000;
        if (!mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a2, (uint64_t *)&v104))
          goto LABEL_192;
        *(_QWORD *)v116 = a2;
        if (!mlir::DialectBytecodeReader::readList<mlir::FlatSymbolRefAttr,mlir::LogicalResult mlir::DialectBytecodeReader::readAttributes<mlir::FlatSymbolRefAttr>(llvm::SmallVectorImpl<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::FlatSymbolRefAttr&)#1}>(a2, (uint64_t)v106, (uint64_t *)v116))goto LABEL_192;
        v5 = mlir::SymbolRefAttr::get(v104, *(uint64_t *)v106, *(unsigned int *)&v106[8]);
        v34 = *(void **)v106;
        if (*(_BYTE **)v106 == &v106[16])
          return (_QWORD *)v5;
        goto LABEL_193;
      case 6:
        *(_QWORD *)v106 = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 64))(a2, v106))
          return 0;
        return (_QWORD *)mlir::TypeAttr::get(*(uint64_t *)v106);
      case 7:
        return (_QWORD *)mlir::UnitAttr::get(Context, v4);
      case 8:
        v103 = 0;
        LOBYTE(v100) = 0;
        v102 = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(_QWORD *)a2 + 64))(a2, &v103))
          return 0;
        v35 = v103;
        v36 = *(void **)(*(_QWORD *)v103 + 136);
        if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
          v37 = v103;
        else
          v37 = 0;
        *(_QWORD *)v106 = v37;
        if (v37)
        {
          Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v106);
          v39 = 0;
        }
        else if (v36 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
        {
          v39 = 0;
          Width = 64;
        }
        else
        {
          v117 = 257;
          (*(void (**)(_BYTE *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)a2 + 16))(v106, a2, v116);
          if (*(_QWORD *)v106)
          {
            LODWORD(v104) = 3;
            *((_QWORD *)&v104 + 1) = "expected integer or index type for IntegerAttr, but got: ";
            v105 = 57;
            v64 = (char *)&v104;
            v65 = (char *)v107;
            if (v108 >= v109)
            {
              v93 = v108 + 1;
              if (v107 <= &v104 && (char *)v107 + 24 * v108 > (char *)&v104)
              {
                v97 = (char *)&v104 - (_BYTE *)v107;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v93, 24);
                v65 = (char *)v107;
                v64 = (char *)v107 + v97;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v93, 24);
                v64 = (char *)&v104;
                v65 = (char *)v107;
              }
            }
            v66 = &v65[24 * v108];
            v67 = *(_OWORD *)v64;
            *((_QWORD *)v66 + 2) = *((_QWORD *)v64 + 2);
            *(_OWORD *)v66 = v67;
            ++v108;
            if (*(_QWORD *)v106)
            {
              v68 = (char *)&v104;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v104, v35);
              v69 = (char *)v107;
              if (v108 >= v109)
              {
                v94 = v108 + 1;
                if (v107 <= &v104 && (char *)v107 + 24 * v108 > (char *)&v104)
                {
                  v98 = (char *)&v104 - (_BYTE *)v107;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v94, 24);
                  v69 = (char *)v107;
                  v68 = (char *)v107 + v98;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v94, 24);
                  v68 = (char *)&v104;
                  v69 = (char *)v107;
                }
              }
              v70 = &v69[24 * v108];
              v71 = *(_OWORD *)v68;
              *((_QWORD *)v70 + 2) = *((_QWORD *)v68 + 2);
              *(_OWORD *)v70 = v71;
              ++v108;
              if (*(_QWORD *)v106)
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v106);
            }
          }
          if (v115)
          {
            v72 = (_QWORD **)__p;
            if (__p)
            {
              v73 = v114;
              v74 = __p;
              if (v114 != __p)
              {
                do
                  v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
                while (v73 != v72);
                v74 = __p;
              }
              v114 = v72;
              operator delete(v74);
            }
            v75 = v111;
            if (v111)
            {
              v76 = v112;
              v77 = v111;
              if (v112 != v111)
              {
                do
                {
                  v79 = (void *)*--v76;
                  v78 = v79;
                  *v76 = 0;
                  if (v79)
                    operator delete[](v78);
                }
                while (v76 != v75);
                v77 = v111;
              }
              v112 = v75;
              operator delete(v77);
            }
            if (v107 != v110)
              free(v107);
          }
          Width = 0;
          v39 = v102;
        }
        (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(v106, a2, Width);
        v88 = v106[16];
        if (v39 == v106[16])
        {
          if (!v39)
            return 0;
          if (v101 >= 0x41 && v100)
            operator delete[](v100);
          v100 = *(void **)v106;
          v101 = *(_DWORD *)&v106[8];
          goto LABEL_225;
        }
        if (!v39)
        {
          v101 = *(_DWORD *)&v106[8];
          v100 = *(void **)v106;
          v102 = 1;
LABEL_225:
          v5 = mlir::IntegerAttr::get(v103, (llvm::APInt *)&v100);
          if (v102 && v101 >= 0x41 && v100)
            operator delete[](v100);
          return (_QWORD *)v5;
        }
        if (v101 >= 0x41 && v100)
        {
          operator delete[](v100);
          v88 = v106[16];
        }
        if (v88 && *(_DWORD *)&v106[8] >= 0x41u && *(_QWORD *)v106)
          operator delete[](*(void **)v106);
        break;
      case 9:
        v100 = 0;
        v116[0] = 0;
        LOBYTE(v117) = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(_QWORD *)a2 + 64))(a2, &v100))
          return 0;
        v15 = *(void **)(*(_QWORD *)v100 + 136);
        v16 = v15 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
           || v15 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
        v17 = v16 || v15 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
        v18 = v17 || v15 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
        v19 = v18 || v15 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
        v20 = v19 || v15 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
        v21 = v20 || v15 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
        v22 = v21 || v15 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
        v23 = v22 || v15 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
        v24 = v23 || v15 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
        v25 = v24 || v15 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
        if (!v25 && v15 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
          return 0;
        *(_QWORD *)&v104 = v100;
        FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v104);
        (*(void (**)(_BYTE *__return_ptr, uint64_t, void *))(*(_QWORD *)a2 + 96))(v106, a2, FloatSemantics);
        std::__optional_storage_base<llvm::APFloat,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<llvm::APFloat,false>>(v116, (uint64_t)v106);
        if ((_BYTE)v108)
        {
          v29 = *(void **)&v106[8];
          if (llvm::APFloatBase::PPCDoubleDouble(v28) == v29)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v106[8]);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v106[8]);
        }
        v86 = (llvm::APFloatBase *)mlir::FloatAttr::get((uint64_t)v100, (uint64_t)v116);
        v5 = (uint64_t)v86;
        if ((_BYTE)v117)
        {
          v87 = *(void **)&v116[8];
          if (llvm::APFloatBase::PPCDoubleDouble(v86) == v87)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v116[8]);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v116[8]);
        }
        return (_QWORD *)v5;
      case 10:
        *(_QWORD *)v106 = 0;
        *(_QWORD *)v116 = 0;
        if (!mlir::DialectBytecodeReader::readAttribute<mlir::LocationAttr>(a2, (uint64_t *)v106)
          || !mlir::DialectBytecodeReader::readAttribute<mlir::LocationAttr>(a2, (uint64_t *)v116))
        {
          return 0;
        }
        return (_QWORD *)mlir::CallSiteLoc::get(*(uint64_t *)v106, *(uint64_t *)v116);
      case 11:
        *(_QWORD *)v106 = 0;
        *(_QWORD *)v116 = 0;
        *(_QWORD *)&v104 = 0;
        if (!mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a2, (uint64_t *)v106)
          || !(*(unsigned __int8 (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 72))(a2, v116)
          || !(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v104))
        {
          return 0;
        }
        return (_QWORD *)mlir::FileLineColLoc::get(*(uint64_t *)v106, *(unsigned int *)v116, v104);
      case 12:
        *(_QWORD *)v106 = &v106[16];
        *(_QWORD *)&v106[8] = 0x600000000;
        *(_QWORD *)&v104 = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v104))
          goto LABEL_149;
        v30 = v104;
        if ((unint64_t)v104 > *(unsigned int *)&v106[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v106, &v106[16], v104, 8);
          v30 = v104;
        }
        if (!v30)
        {
          v32 = *(_DWORD *)&v106[8];
LABEL_159:
          mlir::FusedLoc::get(*(uint64_t ***)v106, (mlir::MLIRContext *)v32, 0, Context);
        }
        v31 = 0;
        while (1)
        {
          *(_QWORD *)v116 = 0;
          if (!mlir::DialectBytecodeReader::readAttribute<mlir::LocationAttr>(a2, (uint64_t *)v116))
            goto LABEL_149;
          if (*(_DWORD *)&v106[8] >= *(_DWORD *)&v106[12])
          {
            v33 = *(_QWORD *)v116;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v106, &v106[16], *(unsigned int *)&v106[8] + 1, 8);
            *(_QWORD *)(*(_QWORD *)v106 + 8 * *(unsigned int *)&v106[8]) = v33;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v106 + 8 * *(unsigned int *)&v106[8]) = *(_QWORD *)v116;
          }
          v32 = ++*(_DWORD *)&v106[8];
          if (++v31 >= (unint64_t)v104)
            goto LABEL_159;
        }
      case 13:
        *(_QWORD *)v106 = &v106[16];
        *(_QWORD *)&v106[8] = 0x600000000;
        v100 = 0;
        *(_QWORD *)&v104 = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v104))
          goto LABEL_149;
        v40 = v104;
        if ((unint64_t)v104 > *(unsigned int *)&v106[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v106, &v106[16], v104, 8);
          v40 = v104;
        }
        if (!v40)
          goto LABEL_147;
        v41 = 0;
        while (1)
        {
          *(_QWORD *)v116 = 0;
          if (!mlir::DialectBytecodeReader::readAttribute<mlir::LocationAttr>(a2, (uint64_t *)v116))
            break;
          if (*(_DWORD *)&v106[8] >= *(_DWORD *)&v106[12])
          {
            v42 = *(_QWORD *)v116;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v106, &v106[16], *(unsigned int *)&v106[8] + 1, 8);
            *(_QWORD *)(*(_QWORD *)v106 + 8 * *(unsigned int *)&v106[8]) = v42;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v106 + 8 * *(unsigned int *)&v106[8]) = *(_QWORD *)v116;
          }
          ++*(_DWORD *)&v106[8];
          if (++v41 >= (unint64_t)v104)
          {
LABEL_147:
            if ((*(unsigned __int8 (**)(uint64_t, void **))(*(_QWORD *)a2 + 48))(a2, &v100))
            {
              v5 = mlir::FusedLoc::get(Context, *(uint64_t *)v106, *(unsigned int *)&v106[8], (uint64_t)v100);
              goto LABEL_150;
            }
            break;
          }
        }
LABEL_149:
        v5 = 0;
LABEL_150:
        v34 = *(void **)v106;
        if (*(_BYTE **)v106 != &v106[16])
LABEL_193:
          free(v34);
        return (_QWORD *)v5;
      case 14:
        *(_QWORD *)v106 = 0;
        *(_QWORD *)v116 = 0;
        if (!mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a2, (uint64_t *)v106)
          || !mlir::DialectBytecodeReader::readAttribute<mlir::LocationAttr>(a2, (uint64_t *)v116))
        {
          return 0;
        }
        return (_QWORD *)mlir::NameLoc::get(*(uint64_t *)v106, *(uint64_t *)v116);
      case 15:
        return (_QWORD *)mlir::UnknownLoc::get(Context, v4);
      case 16:
        v104 = 0uLL;
        if (!mlir::DialectBytecodeReader::readType<mlir::ShapedType>(a2, &v104))
          return 0;
        mlir::DialectBytecodeReader::readResourceHandle<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>(a2, (uint64_t)v106);
        if (!(_BYTE)v107)
          return 0;
        *(_OWORD *)&v116[1] = *(_OWORD *)&v106[1];
        *(_QWORD *)&v116[16] = *(_QWORD *)&v106[16];
        v116[0] = v106[0];
        return (_QWORD *)mlir::DenseResourceElementsAttr::get(v104, *((uint64_t *)&v104 + 1), (__int128 *)v116);
      case 17:
        *(_QWORD *)v116 = 0;
        *(_QWORD *)&v104 = 0;
        *(_QWORD *)v106 = 0;
        *(_QWORD *)&v106[8] = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 64))(a2, v116)
          || !(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v104)
          || !(*(unsigned __int8 (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 112))(a2, v106))
        {
          return 0;
        }
        return (_QWORD *)mlir::DenseArrayAttr::get(*(uint64_t *)v116, v104, *(uint64_t *)v106, *(uint64_t *)&v106[8]);
      case 18:
        *(_QWORD *)v106 = 0;
        *(_QWORD *)&v106[8] = 0;
        *(_QWORD *)v116 = 0;
        *(_QWORD *)&v116[8] = 0;
        if (!mlir::DialectBytecodeReader::readType<mlir::ShapedType>(a2, v106)
          || !(*(unsigned __int8 (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 112))(a2, v116))
        {
          return 0;
        }
        return (_QWORD *)mlir::DenseElementsAttr::getFromRawBuffer(*(_QWORD *)v106, *(_QWORD *)&v106[8], *(_QWORD *)v116, *(_QWORD *)&v116[8], v43, v44, v45);
      case 19:
        v104 = 0uLL;
        v100 = 0;
        *(_QWORD *)v106 = &v106[16];
        *(_QWORD *)&v106[8] = 0x300000000;
        if (!mlir::DialectBytecodeReader::readType<mlir::ShapedType>(a2, &v104)
          || !(*(unsigned __int8 (**)(uint64_t, void **))(*(_QWORD *)a2 + 72))(a2, &v100))
        {
          goto LABEL_192;
        }
        *(_OWORD *)v116 = v104;
        if (v100)
        {
          NumElements = 1;
        }
        else
        {
          ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v116);
          NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v81);
        }
        v82 = *(unsigned int *)&v106[8];
        if (NumElements != *(unsigned int *)&v106[8])
        {
          if (NumElements >= *(unsigned int *)&v106[8])
          {
            if (NumElements > *(unsigned int *)&v106[12])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v106, &v106[16], NumElements, 16);
              v82 = *(unsigned int *)&v106[8];
            }
            if (NumElements != v82)
              bzero((void *)(*(_QWORD *)v106 + 16 * v82), 16 * (NumElements - v82));
          }
          LODWORD(v82) = NumElements;
          *(_DWORD *)&v106[8] = NumElements;
          NumElements = NumElements;
        }
        v83 = *(_QWORD *)v106;
        if ((_DWORD)v82)
        {
          v84 = 16 * NumElements;
          do
          {
            if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, v83))
            {
LABEL_192:
              v5 = 0;
              v34 = *(void **)v106;
              if (*(_BYTE **)v106 == &v106[16])
                return (_QWORD *)v5;
              goto LABEL_193;
            }
            v83 += 16;
            v84 -= 16;
          }
          while (v84);
          v83 = *(_QWORD *)v106;
          v85 = *(unsigned int *)&v106[8];
        }
        else
        {
          v85 = 0;
        }
        v5 = mlir::DenseStringElementsAttr::get(v104, *((uint64_t *)&v104 + 1), v83, v85);
        v34 = *(void **)v106;
        if (*(_BYTE **)v106 != &v106[16])
          goto LABEL_193;
        return (_QWORD *)v5;
      case 20:
        *(_QWORD *)v106 = 0;
        *(_QWORD *)&v106[8] = 0;
        *(_QWORD *)v116 = 0;
        *(_QWORD *)&v104 = 0;
        if (!mlir::DialectBytecodeReader::readType<mlir::ShapedType>(a2, v106)
          || !mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(a2, (uint64_t *)v116)|| !mlir::DialectBytecodeReader::readAttribute<mlir::DenseElementsAttr>(a2, (uint64_t *)&v104))
        {
          return 0;
        }
        return (_QWORD *)mlir::SparseElementsAttr::get(*(uint64_t *)v106, *(uint64_t *)&v106[8], *(uint64_t *)v116, v104);
      case 21:
        *(_QWORD *)v106 = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 48))(a2, v106))
          return 0;
        return mlir::detail::DistinctAttributeUniquer::get<mlir::DistinctAttr,mlir::Attribute &>((uint64_t)Context, (uint64_t *)v106);
      default:
        v117 = 257;
        (*(void (**)(_BYTE *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)a2 + 16))(v106, a2, v116);
        if (*(_QWORD *)v106)
        {
          LODWORD(v104) = 3;
          *((_QWORD *)&v104 + 1) = "unknown attribute code: ";
          v105 = 24;
          v46 = (char *)&v104;
          v47 = (char *)v107;
          if (v108 >= v109)
          {
            v90 = v108 + 1;
            if (v107 <= &v104 && (char *)v107 + 24 * v108 > (char *)&v104)
            {
              v95 = (char *)&v104 - (_BYTE *)v107;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v90, 24);
              v47 = (char *)v107;
              v46 = (char *)v107 + v95;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v90, 24);
              v46 = (char *)&v104;
              v47 = (char *)v107;
            }
          }
          v48 = &v47[24 * v108];
          v49 = *(_OWORD *)v46;
          *((_QWORD *)v48 + 2) = *((_QWORD *)v46 + 2);
          *(_OWORD *)v48 = v49;
          v50 = ++v108;
          if (*(_QWORD *)v106)
          {
            LODWORD(v104) = 5;
            *((_QWORD *)&v104 + 1) = v99;
            v51 = (char *)&v104;
            v52 = (char *)v107;
            if (v50 >= v109)
            {
              v91 = v50 + 1;
              v92 = (char *)v107 + 24 * v50 > (char *)&v104;
              if (v107 <= &v104 && v92)
              {
                v96 = (char *)&v104 - (_BYTE *)v107;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v91, 24);
                v52 = (char *)v107;
                v51 = (char *)v107 + v96;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v91, 24);
                v51 = (char *)&v104;
                v52 = (char *)v107;
              }
            }
            v53 = &v52[24 * v108];
            v54 = *(_OWORD *)v51;
            *((_QWORD *)v53 + 2) = *((_QWORD *)v51 + 2);
            *(_OWORD *)v53 = v54;
            ++v108;
            if (*(_QWORD *)v106)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v106);
          }
        }
        if (v115)
        {
          v55 = (_QWORD **)__p;
          if (__p)
          {
            v56 = v114;
            v57 = __p;
            if (v114 != __p)
            {
              do
                v56 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v56 - 1);
              while (v56 != v55);
              v57 = __p;
            }
            v114 = v55;
            operator delete(v57);
          }
          v58 = v111;
          if (v111)
          {
            v59 = v112;
            v60 = v111;
            if (v112 != v111)
            {
              do
              {
                v62 = (void *)*--v59;
                v61 = v62;
                *v59 = 0;
                if (v62)
                  operator delete[](v61);
              }
              while (v59 != v58);
              v60 = v111;
            }
            v112 = v58;
            operator delete(v60);
          }
          if (v107 != v110)
            free(v107);
        }
        return 0;
    }
  }
  return 0;
}

uint64_t `anonymous namespace'::BuiltinDialectBytecodeInterface::readType(mlir::DialectInterface *a1, _QWORD *a2)
{
  mlir::IndexType *Context;
  mlir::MLIRContext *v4;
  uint64_t v5;
  size_t *v6;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  size_t *v11;
  char *v12;
  char *v13;
  __int128 v14;
  _QWORD **v15;
  _QWORD **v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  void **v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  size_t v30;
  int v31;
  size_t v32;
  uint64_t v33;
  void *v34;
  int v35;
  size_t v36;
  uint64_t v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  size_t v42;
  uint64_t v43;
  char v44;
  size_t v45;
  size_t v46;
  uint64_t v47;
  void *v48;
  int v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  size_t v54;
  void *v55;
  unint64_t v57;
  unint64_t v58;
  BOOL v59;
  int64_t v60;
  int64_t v61;
  char v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  size_t v67[2];
  void *v68;
  unsigned int v69;
  unsigned int v70;
  _BYTE v71[96];
  void *v72;
  _QWORD *v73;
  void *__p;
  _QWORD **v75;
  char v76;
  unint64_t v77[2];
  _QWORD *v78;
  uint64_t v79;
  _WORD v80[24];
  size_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  Context = (mlir::IndexType *)mlir::DialectInterface::getContext(a1);
  v63 = 0;
  if (!(*(unsigned __int8 (**)(_QWORD *, const char **))(*a2 + 72))(a2, &v63))
    return 0;
  switch((unint64_t)v63)
  {
    case 0uLL:
      v66 = 0;
      if (!(*(unsigned __int8 (**)(_QWORD *, void **))(*a2 + 72))(a2, &v66))
        return 0;
      return mlir::IntegerType::get((uint64_t)Context, (unint64_t)v66 >> 2, v66 & 3);
    case 1uLL:
      return mlir::IndexType::get(Context, v4);
    case 2uLL:
      v66 = &v67[1];
      v67[0] = 0x600000000;
      v78 = v80;
      v79 = 0x600000000;
      v81 = (size_t)a2;
      if (mlir::DialectBytecodeReader::readList<mlir::Type,mlir::LogicalResult mlir::DialectBytecodeReader::readTypes<mlir::Type>(llvm::SmallVectorImpl<mlir::Type> &)::{lambda(mlir::Type&)#1}>((uint64_t)a2, (uint64_t)&v66, &v81)&& (v81 = (size_t)a2, mlir::DialectBytecodeReader::readList<mlir::Type,mlir::LogicalResult mlir::DialectBytecodeReader::readTypes<mlir::Type>(llvm::SmallVectorImpl<mlir::Type> &)::{lambda(mlir::Type&)#1}>((uint64_t)a2, (uint64_t)&v78, &v81)))
      {
        mlir::ValueRange::ValueRange(&v81, (uint64_t)v66, LODWORD(v67[0]));
        mlir::ValueRange::ValueRange(v77, (uint64_t)v78, v79);
        v5 = mlir::FunctionType::get(Context, v81, (uint64_t)v82, v77[0], v77[1]);
      }
      else
      {
        v5 = 0;
      }
      if (v78 != (_QWORD *)v80)
        free(v78);
      goto LABEL_145;
    case 3uLL:
      return mlir::BFloat16Type::get(Context, v4);
    case 4uLL:
      return mlir::Float16Type::get(Context, v4);
    case 5uLL:
      return mlir::Float32Type::get(Context, v4);
    case 6uLL:
      return mlir::Float64Type::get(Context, v4);
    case 7uLL:
      return mlir::Float80Type::get(Context, v4);
    case 8uLL:
      return mlir::Float128Type::get(Context, v4);
    case 9uLL:
      v66 = 0;
      if (!(*(unsigned __int8 (**)(_QWORD *, void **))(*a2 + 64))(a2, &v66))
        return 0;
      return mlir::ComplexType::get((uint64_t)v66);
    case 0xAuLL:
      v23 = (void **)&v67[1];
      v65 = 0;
      v66 = &v67[1];
      v67[0] = 0x600000000;
      v78 = 0;
      v79 = 0;
      v77[0] = 0;
      if (!(*(unsigned __int8 (**)(_QWORD *, unint64_t *))(*a2 + 72))(a2, v77))
        goto LABEL_123;
      v24 = v77[0];
      if (v77[0] > HIDWORD(v67[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], v77[0], 8);
        v24 = v77[0];
      }
      if (!v24)
        goto LABEL_45;
      v25 = 0;
      while (1)
      {
        v81 = 0;
        if (!(*(unsigned __int8 (**)(_QWORD *, size_t *))(*a2 + 80))(a2, &v81))
          goto LABEL_123;
        v26 = v81;
        v27 = v67[0];
        if (LODWORD(v67[0]) >= HIDWORD(v67[0]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], LODWORD(v67[0]) + 1, 8);
          *((_QWORD *)v66 + LODWORD(v67[0])) = v26;
          ++LODWORD(v67[0]);
          if (++v25 >= v77[0])
          {
LABEL_45:
            if ((*(unsigned __int8 (**)(_QWORD *, uint64_t *))(*a2 + 64))(a2, &v65)
              && mlir::DialectBytecodeReader::readAttribute<mlir::MemRefLayoutAttrInterface>((uint64_t)a2, &v78))
            {
              v5 = mlir::MemRefType::get(v66, (mlir::AffineMap *)LODWORD(v67[0]), v65, v78, v79, 0);
              goto LABEL_124;
            }
            goto LABEL_123;
          }
        }
        else
        {
          *((_QWORD *)v66 + LODWORD(v67[0])) = v81;
          LODWORD(v67[0]) = v27 + 1;
          if (++v25 >= v77[0])
            goto LABEL_45;
        }
      }
    case 0xBuLL:
      v23 = (void **)&v67[1];
      v65 = 0;
      v66 = &v67[1];
      v67[0] = 0x600000000;
      v64 = 0;
      v78 = 0;
      v79 = 0;
      if (!(*(unsigned __int8 (**)(_QWORD *, uint64_t *))(*a2 + 48))(a2, &v65))
        goto LABEL_123;
      v77[0] = 0;
      if (!(*(unsigned __int8 (**)(_QWORD *, unint64_t *))(*a2 + 72))(a2, v77))
        goto LABEL_123;
      v28 = v77[0];
      if (v77[0] > HIDWORD(v67[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], v77[0], 8);
        v28 = v77[0];
      }
      if (!v28)
        goto LABEL_59;
      v29 = 0;
      while (1)
      {
        v81 = 0;
        if (!(*(unsigned __int8 (**)(_QWORD *, size_t *))(*a2 + 80))(a2, &v81))
          goto LABEL_123;
        v30 = v81;
        v31 = v67[0];
        if (LODWORD(v67[0]) >= HIDWORD(v67[0]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], LODWORD(v67[0]) + 1, 8);
          *((_QWORD *)v66 + LODWORD(v67[0])) = v30;
          ++LODWORD(v67[0]);
          if (++v29 >= v77[0])
          {
LABEL_59:
            if ((*(unsigned __int8 (**)(_QWORD *, uint64_t *))(*a2 + 64))(a2, &v64)
              && mlir::DialectBytecodeReader::readAttribute<mlir::MemRefLayoutAttrInterface>((uint64_t)a2, &v78))
            {
              v5 = mlir::MemRefType::get(v66, (mlir::AffineMap *)LODWORD(v67[0]), v64, v78, v79, v65);
              goto LABEL_124;
            }
            goto LABEL_123;
          }
        }
        else
        {
          *((_QWORD *)v66 + LODWORD(v67[0])) = v81;
          LODWORD(v67[0]) = v31 + 1;
          if (++v29 >= v77[0])
            goto LABEL_59;
        }
      }
    case 0xCuLL:
      return mlir::NoneType::get(Context, v4);
    case 0xDuLL:
      v23 = (void **)&v67[1];
      v66 = &v67[1];
      v67[0] = 0x600000000;
      v77[0] = 0;
      v81 = 0;
      if (!(*(unsigned __int8 (**)(_QWORD *, size_t *))(*a2 + 72))(a2, &v81))
        goto LABEL_123;
      v32 = v81;
      if (v81 > HIDWORD(v67[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], v81, 8);
        v32 = v81;
      }
      if (!v32)
        goto LABEL_73;
      v33 = 0;
      while (1)
      {
        v78 = 0;
        if (!(*(unsigned __int8 (**)(_QWORD *, _QWORD **))(*a2 + 80))(a2, &v78))
          goto LABEL_123;
        v34 = v78;
        v35 = v67[0];
        if (LODWORD(v67[0]) >= HIDWORD(v67[0]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], LODWORD(v67[0]) + 1, 8);
          *((_QWORD *)v66 + LODWORD(v67[0])) = v34;
          ++LODWORD(v67[0]);
          if (++v33 >= v81)
          {
LABEL_73:
            if (!(*(unsigned __int8 (**)(_QWORD *, unint64_t *))(*a2 + 64))(a2, v77))
              goto LABEL_123;
            v5 = mlir::RankedTensorType::get((uint64_t)v66, LODWORD(v67[0]), v77[0], 0);
            goto LABEL_124;
          }
        }
        else
        {
          *((_QWORD *)v66 + LODWORD(v67[0])) = v78;
          LODWORD(v67[0]) = v35 + 1;
          if (++v33 >= v81)
            goto LABEL_73;
        }
      }
    case 0xEuLL:
      v77[0] = 0;
      v23 = (void **)&v67[1];
      v65 = 0;
      v66 = &v67[1];
      v67[0] = 0x600000000;
      if (!(*(unsigned __int8 (**)(_QWORD *, unint64_t *))(*a2 + 48))(a2, v77))
        goto LABEL_123;
      v81 = 0;
      if (!(*(unsigned __int8 (**)(_QWORD *, size_t *))(*a2 + 72))(a2, &v81))
        goto LABEL_123;
      v36 = v81;
      if (v81 > HIDWORD(v67[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], v81, 8);
        v36 = v81;
      }
      if (!v36)
        goto LABEL_86;
      v37 = 0;
      while (1)
      {
        v78 = 0;
        if (!(*(unsigned __int8 (**)(_QWORD *, _QWORD **))(*a2 + 80))(a2, &v78))
          goto LABEL_123;
        v38 = v78;
        v39 = v67[0];
        if (LODWORD(v67[0]) >= HIDWORD(v67[0]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], LODWORD(v67[0]) + 1, 8);
          *((_QWORD *)v66 + LODWORD(v67[0])) = v38;
          ++LODWORD(v67[0]);
          if (++v37 >= v81)
          {
LABEL_86:
            if (!(*(unsigned __int8 (**)(_QWORD *, uint64_t *))(*a2 + 64))(a2, &v65))
              goto LABEL_123;
            v5 = mlir::RankedTensorType::get((uint64_t)v66, LODWORD(v67[0]), v65, v77[0]);
            goto LABEL_124;
          }
        }
        else
        {
          *((_QWORD *)v66 + LODWORD(v67[0])) = v78;
          LODWORD(v67[0]) = v39 + 1;
          if (++v37 >= v81)
            goto LABEL_86;
        }
      }
    case 0xFuLL:
      v66 = &v67[1];
      v67[0] = 0x600000000;
      v78 = a2;
      if (mlir::DialectBytecodeReader::readList<mlir::Type,mlir::LogicalResult mlir::DialectBytecodeReader::readTypes<mlir::Type>(llvm::SmallVectorImpl<mlir::Type> &)::{lambda(mlir::Type&)#1}>((uint64_t)a2, (uint64_t)&v66, &v78))
      {
        mlir::ValueRange::ValueRange((unint64_t *)&v78, (uint64_t)v66, LODWORD(v67[0]));
        v5 = mlir::TupleType::get(Context, (uint64_t)v78, v79);
      }
      else
      {
        v5 = 0;
      }
LABEL_145:
      v50 = v66;
      if (v66 != &v67[1])
        goto LABEL_146;
      return v5;
    case 0x10uLL:
      v66 = 0;
      if (!(*(unsigned __int8 (**)(_QWORD *, void **))(*a2 + 64))(a2, &v66))
        return 0;
      v40 = v66;
      v41 = 0;
      return mlir::UnrankedMemRefType::get((uint64_t)v40, (uint64_t)v41);
    case 0x11uLL:
      v66 = 0;
      v78 = 0;
      if (!(*(unsigned __int8 (**)(_QWORD *, void **))(*a2 + 48))(a2, &v66)
        || !(*(unsigned __int8 (**)(_QWORD *, _QWORD **))(*a2 + 64))(a2, &v78))
      {
        return 0;
      }
      v40 = v78;
      v41 = v66;
      return mlir::UnrankedMemRefType::get((uint64_t)v40, (uint64_t)v41);
    case 0x12uLL:
      v66 = 0;
      if (!(*(unsigned __int8 (**)(_QWORD *, void **))(*a2 + 64))(a2, &v66))
        return 0;
      return mlir::UnrankedTensorType::get((uint64_t)v66);
    case 0x13uLL:
      v23 = (void **)&v67[1];
      v66 = &v67[1];
      v67[0] = 0x600000000;
      v77[0] = 0;
      v81 = 0;
      if (!(*(unsigned __int8 (**)(_QWORD *, size_t *))(*a2 + 72))(a2, &v81))
        goto LABEL_123;
      v46 = v81;
      if (v81 > HIDWORD(v67[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], v81, 8);
        v46 = v81;
      }
      if (!v46)
        goto LABEL_121;
      v47 = 0;
      while (1)
      {
        v78 = 0;
        if (!(*(unsigned __int8 (**)(_QWORD *, _QWORD **))(*a2 + 80))(a2, &v78))
          break;
        v48 = v78;
        v49 = v67[0];
        if (LODWORD(v67[0]) >= HIDWORD(v67[0]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], LODWORD(v67[0]) + 1, 8);
          *((_QWORD *)v66 + LODWORD(v67[0])) = v48;
          ++LODWORD(v67[0]);
          if (++v47 >= v81)
          {
LABEL_121:
            if ((*(unsigned __int8 (**)(_QWORD *, unint64_t *))(*a2 + 64))(a2, v77))
            {
              v5 = mlir::VectorType::get((uint64_t)v66, LODWORD(v67[0]), v77[0], 0, 0);
              goto LABEL_124;
            }
            break;
          }
        }
        else
        {
          *((_QWORD *)v66 + LODWORD(v67[0])) = v78;
          LODWORD(v67[0]) = v49 + 1;
          if (++v47 >= v81)
            goto LABEL_121;
        }
      }
LABEL_123:
      v5 = 0;
      goto LABEL_124;
    case 0x14uLL:
      v23 = &v68;
      v65 = 0;
      v66 = &v68;
      *(_OWORD *)v67 = xmmword_181233150;
      v78 = v80;
      v79 = 0x600000000;
      v81 = 0;
      if (!(*(unsigned __int8 (**)(_QWORD *, size_t *))(*a2 + 72))(a2, &v81))
        goto LABEL_142;
      v42 = v81;
      if (v67[1] < v81)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v66, &v68, v81, 1);
        v42 = v81;
      }
      if (!v42)
        goto LABEL_129;
      v43 = 0;
      break;
    default:
      v80[8] = 257;
      (*(void (**)(void **__return_ptr, _QWORD *, _QWORD **))(*a2 + 16))(&v66, a2, &v78);
      if (v66)
      {
        LODWORD(v81) = 3;
        v82 = "unknown attribute code: ";
        v83 = 24;
        v6 = &v81;
        v7 = (char *)v68;
        if (v69 >= v70)
        {
          v57 = v69 + 1;
          if (v68 <= &v81 && (char *)v68 + 24 * v69 > (char *)&v81)
          {
            v60 = (char *)&v81 - (_BYTE *)v68;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v57, 24);
            v7 = (char *)v68;
            v6 = (size_t *)((char *)v68 + v60);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v57, 24);
            v6 = &v81;
            v7 = (char *)v68;
          }
        }
        v8 = &v7[24 * v69];
        v9 = *(_OWORD *)v6;
        *((_QWORD *)v8 + 2) = v6[2];
        *(_OWORD *)v8 = v9;
        v10 = ++v69;
        if (v66)
        {
          LODWORD(v81) = 5;
          v82 = v63;
          v11 = &v81;
          v12 = (char *)v68;
          if (v10 >= v70)
          {
            v58 = v10 + 1;
            v59 = (char *)v68 + 24 * v10 > (char *)&v81;
            if (v68 <= &v81 && v59)
            {
              v61 = (char *)&v81 - (_BYTE *)v68;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v58, 24);
              v12 = (char *)v68;
              v11 = (size_t *)((char *)v68 + v61);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v58, 24);
              v11 = &v81;
              v12 = (char *)v68;
            }
          }
          v13 = &v12[24 * v69];
          v14 = *(_OWORD *)v11;
          *((_QWORD *)v13 + 2) = v11[2];
          *(_OWORD *)v13 = v14;
          ++v69;
          if (v66)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v66);
        }
      }
      if (v76)
      {
        v15 = (_QWORD **)__p;
        if (__p)
        {
          v16 = v75;
          v17 = __p;
          if (v75 != __p)
          {
            do
              v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
            while (v16 != v15);
            v17 = __p;
          }
          v75 = v15;
          operator delete(v17);
        }
        v18 = v72;
        if (v72)
        {
          v19 = v73;
          v20 = v72;
          if (v73 != v72)
          {
            do
            {
              v22 = (void *)*--v19;
              v21 = v22;
              *v19 = 0;
              if (v22)
                operator delete[](v21);
            }
            while (v19 != v18);
            v20 = v72;
          }
          v73 = v18;
          operator delete(v20);
        }
        if (v68 != v71)
          free(v68);
      }
      return 0;
  }
  while (1)
  {
    LOBYTE(v77[0]) = 0;
    if (!(*(unsigned __int8 (**)(_QWORD *, unint64_t *))(*a2 + 120))(a2, v77))
      break;
    v44 = v77[0];
    v45 = v67[0];
    if (v67[0] >= v67[1])
    {
      if (v67[0] + 1 > v67[1])
      {
        v62 = v77[0];
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v66, &v68, v67[0] + 1, 1);
        v44 = v62;
        v45 = v67[0];
      }
      *((_BYTE *)v66 + v45) = v44;
      ++v67[0];
      if (++v43 >= v81)
      {
LABEL_129:
        v77[0] = 0;
        if ((*(unsigned __int8 (**)(_QWORD *, unint64_t *))(*a2 + 72))(a2, v77))
        {
          v51 = v77[0];
          if (v77[0] > HIDWORD(v79))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v80, v77[0], 8);
            v51 = v77[0];
          }
          if (v51)
          {
            v52 = 0;
            while (1)
            {
              v81 = 0;
              if (!(*(unsigned __int8 (**)(_QWORD *, size_t *))(*a2 + 80))(a2, &v81))
                break;
              v53 = v79;
              if (v79 >= HIDWORD(v79))
              {
                v54 = v81;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v80, v79 + 1, 8);
                v78[v79] = v54;
                LODWORD(v79) = v79 + 1;
                if (++v52 >= v77[0])
                  goto LABEL_139;
              }
              else
              {
                v78[v79] = v81;
                LODWORD(v79) = v53 + 1;
                if (++v52 >= v77[0])
                  goto LABEL_139;
              }
            }
          }
          else
          {
LABEL_139:
            if ((*(unsigned __int8 (**)(_QWORD *, uint64_t *))(*a2 + 64))(a2, &v65))
            {
              v5 = mlir::VectorType::get((uint64_t)v78, v79, v65, v66, v67[0]);
              v55 = v78;
              if (v78 == (_QWORD *)v80)
                goto LABEL_124;
              goto LABEL_143;
            }
          }
        }
        break;
      }
    }
    else
    {
      *((_BYTE *)v66 + v67[0]) = v77[0];
      v67[0] = v45 + 1;
      if (++v43 >= v81)
        goto LABEL_129;
    }
  }
LABEL_142:
  v5 = 0;
  v55 = v78;
  if (v78 == (_QWORD *)v80)
    goto LABEL_124;
LABEL_143:
  free(v55);
LABEL_124:
  v50 = v66;
  if (v66 != v23)
LABEL_146:
    free(v50);
  return v5;
}

uint64_t `anonymous namespace'::BuiltinDialectBytecodeInterface::writeAttribute(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  unsigned __int8 v6;
  __guard *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t *Value;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t LHS;
  unint64_t Column;
  void (*v20)(uint64_t, unint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t RawData;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int isSplat;
  int v29;
  uint64_t *RawStringData;
  uint64_t v31;
  uint64_t *v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t CallableRegion;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int Position;
  uint64_t v44;
  llvm::APFloatBase *v45;
  void *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t RHS;
  uint64_t AttrData;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  void *v72;
  void *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  void *__p[2];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v5 = *(void **)(*(_QWORD *)a2 + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 48))(a3, 0);
    Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
    v14 = v13;
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
    if (v14)
    {
      v15 = 8 * v14;
      do
      {
        v16 = *Value++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v16);
        v15 -= 8;
      }
      while (v15);
    }
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 10);
    v17 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v17);
    LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)__p);
    goto LABEL_33;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 17);
    v21 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, v21);
    v22 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, v22);
    RawData = mlir::DenseArrayAttr::getRawData((mlir::DenseArrayAttr *)__p);
LABEL_37:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 88))(a3, RawData, v24);
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 18);
    v25 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, v25);
    RawData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)__p);
    goto LABEL_37;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id)
  {
    v79 = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 16);
    v26 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v79);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, v26);
    mlir::DenseResourceElementsAttr::getRawHandle((mlir::DenseResourceElementsAttr *)&v79, (__n128 *)__p);
    v20 = *(void (**)(uint64_t, unint64_t))(*(_QWORD *)a3 + 40);
    Column = (unint64_t)__p;
    goto LABEL_34;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id)
  {
    v79 = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 19);
    v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v79);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, v27);
    isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v79);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 48))(a3, isSplat);
    __p[0] = v79;
    v29 = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)__p);
    RawStringData = (uint64_t *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)__p);
    v32 = RawStringData;
    if (v29)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, *RawStringData, RawStringData[1]);
    }
    else if (v31)
    {
      v39 = &RawStringData[2 * v31];
      do
      {
        v40 = *v32;
        v41 = v32[1];
        v32 += 2;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, v40, v41);
      }
      while (v32 != v39);
    }
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
  {
    v79 = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 1);
    v33 = (__int128 *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v79);
    v35 = v34;
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
    if (v35)
    {
      v36 = 16 * v35;
      do
      {
        v37 = *v33++;
        *(_OWORD *)__p = v37;
        CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, CallableRegion);
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a3 + 16))(a3, __p[1]);
        v36 -= 16;
      }
      while (v36);
    }
    return 1;
  }
  if ((v6 & 1) == 0)
  {
    if (v71)
    {
      __p[0] = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
      __p[1] = (void *)68;
      v72 = (void *)llvm::StringRef::find((uint64_t *)__p, "DesiredTypeName = ", 0x12uLL, 0);
      if (__p[1] >= v72)
        v73 = v72;
      else
        v73 = __p[1];
      v74 = (char *)__p[0] + (unint64_t)v73;
      v75 = (char *)((char *)__p[1] - (char *)v73);
      if ((void *)((char *)__p[1] - (char *)v73) >= (void *)0x12)
        v76 = 18;
      else
        v76 = (char *)__p[1] - (char *)v73;
      v77 = (unint64_t)&v75[-v76];
      if (v77 >= v77 - 1)
        v78 = v77 - 1;
      else
        v78 = v77;
      mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v74[v76], v78);
    }
  }
  if (v5 == (void *)v7[469])
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 21);
    LHS = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
    goto LABEL_33;
  }
  v8 = *(void **)(*(_QWORD *)a2 + 136);
  if (v8 == &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 11);
    v42 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v42);
    Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)__p);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 48))(a3, Position);
    Column = mlir::FileLineColLoc::getColumn((mlir::FileLineColLoc *)__p);
    v20 = *(void (**)(uint64_t, unint64_t))(*(_QWORD *)a3 + 48);
    goto LABEL_34;
  }
  if (v8 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
    v9 = a2;
  else
    v9 = 0;
  __p[0] = v9;
  if (v9)
  {
    mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)__p);
    if (v10)
    {
      v8 = *(void **)(*(_QWORD *)a2 + 136);
      goto LABEL_17;
    }
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 4);
    LHS = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
LABEL_33:
    Column = LHS;
    v20 = *(void (**)(uint64_t, unint64_t))(*(_QWORD *)a3 + 16);
LABEL_34:
    v20(a3, Column);
    return 1;
  }
LABEL_17:
  if (v8 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    v79 = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 9);
    v44 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v79);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, v44);
    mlir::FloatAttr::getValue((mlir::FloatAttr *)&v79, (uint64_t)__p);
    v45 = (llvm::APFloatBase *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a3 + 72))(a3, __p);
    v46 = __p[1];
    if (llvm::APFloatBase::PPCDoubleDouble(v45) == v46)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&__p[1]);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&__p[1]);
    return 1;
  }
  if (v8 == &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id)
  {
    __p[0] = a2;
    if (!mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)__p))
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 12);
      v47 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
      v49 = v48;
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
      if (v49)
      {
        v50 = 8 * v49;
        do
        {
          v51 = *v47++;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v51);
          v50 -= 8;
        }
        while (v50);
      }
    }
    if (!mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)__p))
      return 1;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 13);
    v52 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
    v54 = v53;
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
    if (v54)
    {
      v55 = 8 * v54;
      do
      {
        v56 = *v52++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v56);
        v55 -= 8;
      }
      while (v55);
    }
    LHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)__p);
    goto LABEL_33;
  }
  if (v8 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v79 = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 8);
    v57 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v79);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, v57);
    mlir::IntegerAttr::getValue(&v79, (llvm::APInt *)__p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 64))(a3, __p);
    if (LODWORD(__p[1]) >= 0x41 && __p[0])
      operator delete[](__p[0]);
    return 1;
  }
  if (v8 == &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 14);
    v58 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v58);
    LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)__p);
    goto LABEL_33;
  }
  if (v8 == &mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 20);
    v59 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, v59);
    RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, RHS);
    LHS = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)__p);
    goto LABEL_33;
  }
  if (v8 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    __p[0] = a2;
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p) + 136) == &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 2);
      AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)__p);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, AttrData, v62);
    }
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p) + 136) == &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id)
      return 1;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 3);
    v63 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)__p);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, v63, v64);
    Column = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
    v20 = *(void (**)(uint64_t, unint64_t))(*(_QWORD *)a3 + 32);
    goto LABEL_34;
  }
  if (v8 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 5);
    v65 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v65);
    v66 = (uint64_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)__p);
    v68 = v67;
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
    if (v68)
    {
      v69 = 8 * v68;
      do
      {
        v70 = *v66++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v70);
        v69 -= 8;
      }
      while (v69);
    }
    return 1;
  }
  if (v8 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 6);
    Column = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
    v20 = *(void (**)(uint64_t, unint64_t))(*(_QWORD *)a3 + 32);
    goto LABEL_34;
  }
  if (v8 == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 7);
  }
  else
  {
    if (v8 != &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
      return 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 15);
  }
  return 1;
}

uint64_t `anonymous namespace'::BuiltinDialectBytecodeInterface::writeType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t Value;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t *Inputs;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *Results;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int Width;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t RHS;
  uint64_t RawStringData;
  uint64_t MemorySpace;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t Values;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *Types;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t LHS;
  char *v54;
  size_t v55;
  size_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  size_t v67;
  size_t v68;
  char *v69;
  char *v70;
  char *v71;
  unsigned __int8 *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v4 = *(void **)(*(_QWORD *)a2 + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 3);
    return 1;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v81 = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 9);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v81);
    goto LABEL_21;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 8);
    return 1;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 4);
    return 1;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 5);
    return 1;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 6);
    return 1;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id)
  {
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48);
    v9 = a3;
    v7 = 7;
    goto LABEL_28;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
  {
    v81 = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 2);
    Inputs = (uint64_t *)mlir::FunctionType::getInputs((mlir::FunctionType *)&v81);
    v12 = v11;
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
    if (v12)
    {
      v13 = 8 * v12;
      do
      {
        v14 = *Inputs++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, v14);
        v13 -= 8;
      }
      while (v13);
    }
    Results = (uint64_t *)mlir::FunctionType::getResults((mlir::FunctionType *)&v81);
    v17 = v16;
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
    if (v17)
    {
      v18 = 8 * v17;
      do
      {
        v19 = *Results++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, v19);
        v18 -= 8;
      }
      while (v18);
    }
    return 1;
  }
  if (v4 != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    if (v4 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      v81 = a2;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 48))(a3, 0);
      Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v81);
      v7 = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v81) | (4 * Width);
      v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48);
      goto LABEL_22;
    }
    if (v4 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    {
      v81 = a2;
      if (!mlir::MemRefType::getMemorySpace((mlir::MemRefType *)&v81))
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 10);
        v21 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v81);
        v23 = v22;
        (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
        if (v23)
        {
          v24 = 8 * v23;
          do
          {
            v25 = *v21++;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v25);
            v24 -= 8;
          }
          while (v24);
        }
        RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v81);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, RHS);
        RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v81);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, RawStringData);
      }
      if (!mlir::MemRefType::getMemorySpace((mlir::MemRefType *)&v81))
        return 1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 11);
      MemorySpace = mlir::MemRefType::getMemorySpace((mlir::MemRefType *)&v81);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, MemorySpace);
      v29 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v81);
      v31 = v30;
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
      if (v31)
      {
        v32 = 8 * v31;
        do
        {
          v33 = *v29++;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v33);
          v32 -= 8;
        }
        while (v32);
      }
      v34 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v81);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, v34);
      v7 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v81);
      v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16);
      goto LABEL_22;
    }
    if (v4 == &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 12);
      return 1;
    }
    if (v4 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v81 = a2;
      if (!mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v81))
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 13);
        v35 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v81);
        v37 = v36;
        (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
        if (v37)
        {
          v38 = 8 * v37;
          do
          {
            v39 = *v35++;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v39);
            v38 -= 8;
          }
          while (v38);
        }
        v40 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v81);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, v40);
      }
      if (!mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v81))
        return 1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 14);
      Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v81);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, Values);
      v42 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v81);
      v44 = v43;
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
      if (v44)
      {
        v45 = 8 * v44;
        do
        {
          v46 = *v42++;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v46);
          v45 -= 8;
        }
        while (v45);
      }
    }
    else
    {
      if (v4 == &mlir::detail::TypeIDResolver<mlir::TupleType,void>::id)
      {
        v81 = a2;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 15);
        Types = (uint64_t *)mlir::TupleType::getTypes((mlir::TupleType *)&v81);
        v49 = v48;
        (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
        if (v49)
        {
          v50 = 8 * v49;
          do
          {
            v51 = *Types++;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, v51);
            v50 -= 8;
          }
          while (v50);
        }
        return 1;
      }
      if (v4 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
      {
        v81 = a2;
        if (!mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v81))
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 16);
          v52 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v81);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, v52);
        }
        if (!mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v81))
          return 1;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 17);
        LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v81);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, LHS);
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v81);
        goto LABEL_21;
      }
      if (v4 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        v81 = a2;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 18);
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v81);
        goto LABEL_21;
      }
      if (v4 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        return 0;
      v81 = a2;
      v54 = (char *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v81);
      v56 = v55;
      v57 = &v54[v55];
      v58 = (char *)memchr(v54, 1, v55);
      if (v58)
        v59 = v58;
      else
        v59 = v57;
      if (v59 - v54 == v56)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 19);
        v60 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v81);
        v62 = v61;
        (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
        if (v62)
        {
          v63 = 8 * v62;
          do
          {
            v64 = *v60++;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v64);
            v63 -= 8;
          }
          while (v63);
        }
        v65 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v81);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, v65);
      }
      v66 = (char *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v81);
      v68 = v67;
      v69 = &v66[v67];
      v70 = (char *)memchr(v66, 1, v67);
      if (v70)
        v71 = v70;
      else
        v71 = v69;
      if (v71 - v66 == v68)
        return 1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 20);
      v72 = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v81);
      v74 = v73;
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
      for (; v74; --v74)
      {
        v75 = *v72++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 96))(a3, v75);
      }
      v76 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v81);
      v78 = v77;
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
      if (v78)
      {
        v79 = 8 * v78;
        do
        {
          v80 = *v76++;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v80);
          v79 -= 8;
        }
        while (v79);
      }
    }
    Value = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v81);
LABEL_21:
    v7 = Value;
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32);
LABEL_22:
    v9 = a3;
LABEL_28:
    v8(v9, v7);
    return 1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 1);
  return 1;
}

void mlir::BytecodeDialectInterface::readVersion(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD **v3;
  _QWORD **v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  const char *v11;
  __int16 v12;
  _QWORD v13[3];
  void *v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  void *__p;
  _QWORD **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v11 = "Dialect does not support versioning";
  v12 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, const char **))(*(_QWORD *)a1 + 16))(v13, a1, &v11);
  if (v13[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v13);
  if (v20)
  {
    v3 = (_QWORD **)__p;
    if (__p)
    {
      v4 = v19;
      v5 = __p;
      if (v19 != __p)
      {
        do
          v4 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v4 - 1);
        while (v4 != v3);
        v5 = __p;
      }
      v19 = v3;
      operator delete(v5);
    }
    v6 = v16;
    if (v16)
    {
      v7 = v17;
      v8 = v16;
      if (v17 != v16)
      {
        do
        {
          v10 = (void *)*--v7;
          v9 = v10;
          *v7 = 0;
          if (v10)
            operator delete[](v9);
        }
        while (v7 != v6);
        v8 = v16;
      }
      v17 = v6;
      operator delete(v8);
    }
    if (v14 != &v15)
      free(v14);
  }
  *a2 = 0;
}

uint64_t mlir::BytecodeDialectInterface::upgradeFromVersion()
{
  return 1;
}

uint64_t mlir::DialectBytecodeReader::readList<mlir::Attribute,mlir::LogicalResult mlir::DialectBytecodeReader::readAttributes<mlir::Attribute>(llvm::SmallVectorImpl<mlir::Attribute> &)::{lambda(mlir::Attribute&)#1}>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;

  v11 = 0;
  if ((*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 72))(a1, &v11))
  {
    v5 = v11;
    if (v11 > *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v11, 8);
      v5 = v11;
    }
    if (!v5)
      return 1;
    v6 = 0;
    while (1)
    {
      v10 = 0;
      if (!(*(unsigned __int8 (**)(_QWORD, uint64_t *))(*(_QWORD *)*a3 + 48))(*a3, &v10))
        break;
      v7 = *(unsigned int *)(a2 + 8);
      if (v7 >= *(_DWORD *)(a2 + 12))
      {
        v8 = v10;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v7 + 1, 8);
        *(_QWORD *)(*(_QWORD *)a2 + 8 * (*(_DWORD *)(a2 + 8))++) = v8;
        if (++v6 >= v11)
          return 1;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v10;
        *(_DWORD *)(a2 + 8) = v7 + 1;
        if (++v6 >= v11)
          return 1;
      }
    }
  }
  return 0;
}

uint64_t mlir::DialectBytecodeReader::readList<mlir::FlatSymbolRefAttr,mlir::LogicalResult mlir::DialectBytecodeReader::readAttributes<mlir::FlatSymbolRefAttr>(llvm::SmallVectorImpl<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::FlatSymbolRefAttr&)#1}>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;

  v11 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 72))(a1, &v11))
    return 0;
  v5 = v11;
  if (v11 > *(unsigned int *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v11, 8);
    v5 = v11;
  }
  if (v5)
  {
    v6 = 0;
    while (1)
    {
      v10 = 0;
      if (!mlir::DialectBytecodeReader::readAttribute<mlir::FlatSymbolRefAttr>(*a3, &v10))
        break;
      v7 = *(unsigned int *)(a2 + 8);
      if (v7 >= *(_DWORD *)(a2 + 12))
      {
        v8 = v10;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v7 + 1, 8);
        *(_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8)) = v8;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v10;
      }
      ++*(_DWORD *)(a2 + 8);
      if (++v6 >= v11)
        return 1;
    }
    return 0;
  }
  return 1;
}

void std::__optional_storage_base<llvm::APFloat,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<llvm::APFloat,false>>(_BYTE *a1, uint64_t a2)
{
  void *v3;
  _QWORD *v4;
  void *v5;

  if (a1[32] == *(_BYTE *)(a2 + 32))
  {
    if (a1[32])
      llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(a1 + 8), (llvm::APFloatBase *)(a2 + 8));
  }
  else if (a1[32])
  {
    v3 = (void *)*((_QWORD *)a1 + 1);
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v3)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)(a1 + 8));
      a1[32] = 0;
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)(a1 + 8));
      a1[32] = 0;
    }
  }
  else
  {
    v4 = (_QWORD *)(a2 + 8);
    v5 = *(void **)(a2 + 8);
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v5)
      llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)a1 + 1, v4);
    else
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)(a1 + 8), (uint64_t)v4);
    a1[32] = 1;
  }
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::LocationAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  uint64_t v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD **v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v39))
    return 0;
  v4 = v39;
  if (mlir::LocationAttr::classof(v39))
    v5 = v4;
  else
    v5 = 0;
  *a2 = v5;
  if (v5)
    return 1;
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v8 = &v40;
    v9 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v9 = (char *)v46;
        v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v8 = &v40;
        v9 = (char *)v46;
      }
    }
    v10 = &v9[24 * v47];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::LocationAttr]";
  v41 = 68;
  v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12)
      v13 = v12;
    else
      v13 = v41;
    v14 = 18;
    if (v41 - v13 < 0x12)
      v14 = v41 - v13;
    v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1)
      --v15;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v13 + v14);
    v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v16 = &v40;
      v17 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v17 = (char *)v46;
          v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v16 = &v40;
          v17 = (char *)v46;
        }
      }
      v18 = &v17[24 * v47];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      ++v47;
      if (v44)
      {
        v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        v21 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v21 = (char *)v46;
            v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v20 = &v40;
            v21 = (char *)v46;
          }
        }
        v22 = &v21[24 * v47];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = v20[2];
        *(_OWORD *)v22 = v23;
        ++v47;
      }
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v24 = (_QWORD **)__p;
    if (__p)
    {
      v25 = v53;
      v26 = __p;
      if (v53 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v53 = v24;
      operator delete(v26);
    }
    v27 = v50;
    if (v50)
    {
      v28 = v51;
      v29 = v50;
      if (v51 != v50)
      {
        do
        {
          v31 = (void *)*--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            operator delete[](v30);
        }
        while (v28 != v27);
        v29 = v50;
      }
      v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49)
      free(v46);
  }
  return v6;
}

uint64_t mlir::DialectBytecodeReader::readType<mlir::ShapedType>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  _QWORD *v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD **v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD **))(*(_QWORD *)a1 + 64))(a1, &v39))
    return 0;
  v4 = v39;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v39 + 8))
  {
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
    *a2 = v4;
    a2[1] = v5;
    if (v4)
      return 1;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v8 = &v40;
    v9 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v9 = (char *)v46;
        v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v8 = &v40;
        v9 = (char *)v46;
      }
    }
    v10 = &v9[24 * v47];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
  v41 = 66;
  v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12)
      v13 = v12;
    else
      v13 = v41;
    v14 = 18;
    if (v41 - v13 < 0x12)
      v14 = v41 - v13;
    v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1)
      --v15;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v13 + v14);
    v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v16 = &v40;
      v17 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v17 = (char *)v46;
          v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v16 = &v40;
          v17 = (char *)v46;
        }
      }
      v18 = &v17[24 * v47];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      ++v47;
      if (v44)
      {
        v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, (uint64_t)v39);
        v21 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v21 = (char *)v46;
            v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v20 = &v40;
            v21 = (char *)v46;
          }
        }
        v22 = &v21[24 * v47];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = v20[2];
        *(_OWORD *)v22 = v23;
        ++v47;
      }
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v24 = (_QWORD **)__p;
    if (__p)
    {
      v25 = v53;
      v26 = __p;
      if (v53 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v53 = v24;
      operator delete(v26);
    }
    v27 = v50;
    if (v50)
    {
      v28 = v51;
      v29 = v50;
      if (v51 != v50)
      {
        do
        {
          v31 = (void *)*--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            operator delete[](v30);
        }
        while (v28 != v27);
        v29 = v50;
      }
      v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49)
      free(v46);
  }
  return v6;
}

void mlir::DialectBytecodeReader::readResourceHandle<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  __guard *v6;
  int *v7;
  char *v8;
  char *v9;
  __int128 v10;
  const char *v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  char v31[32];
  __int16 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  int v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  unint64_t v40;
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 128))(&v33);
  if (!v35)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
  v4 = *((_QWORD *)&v33 + 1);
  if ((v5 & 1) == 0)
  {
    v30 = *((_QWORD *)&v33 + 1);
    v4 = v30;
    if (v21)
    {
      v39 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>]";
      v40 = 103;
      v22 = llvm::StringRef::find((uint64_t *)&v39, "DesiredTypeName = ", 0x12uLL, 0);
      if (v40 >= v22)
        v23 = v22;
      else
        v23 = v40;
      v24 = &v39[v23];
      v25 = v40 - v23;
      if (v40 - v23 >= 0x12)
        v26 = 18;
      else
        v26 = v40 - v23;
      v27 = v25 - v26;
      if (v27 >= v27 - 1)
        v28 = v27 - 1;
      else
        v28 = v27;
      mlir::detail::TypeIDResolver<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
      v4 = v30;
    }
  }
  if (v4 == v6[264])
  {
    *(_OWORD *)a2 = v33;
    *(_QWORD *)(a2 + 16) = v34;
    *(_BYTE *)(a2 + 24) = 1;
    return;
  }
  v32 = 257;
  (*(void (**)(const char **__return_ptr, uint64_t, char *))(*(_QWORD *)a1 + 16))(&v39, a1, v31);
  if (!v39)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    if (!v49)
      return;
    goto LABEL_13;
  }
  v36 = 3;
  v37 = "provided resource handle differs from the expected resource type";
  v38 = 64;
  v7 = &v36;
  v8 = (char *)v41;
  if (v42 >= v43)
  {
    v20 = v42 + 1;
    if (v41 <= &v36 && (char *)v41 + 24 * v42 > (char *)&v36)
    {
      v29 = (char *)&v36 - (_BYTE *)v41;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v20, 24);
      v8 = (char *)v41;
      v7 = (int *)((char *)v41 + v29);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v20, 24);
      v7 = &v36;
      v8 = (char *)v41;
    }
  }
  v9 = &v8[24 * v42];
  v10 = *(_OWORD *)v7;
  *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
  *(_OWORD *)v9 = v10;
  ++v42;
  v11 = v39;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v11)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
  if (v49)
  {
LABEL_13:
    v12 = (_QWORD **)__p;
    if (__p)
    {
      v13 = v48;
      v14 = __p;
      if (v48 != __p)
      {
        do
          v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        v14 = __p;
      }
      v48 = v12;
      operator delete(v14);
    }
    v15 = v45;
    if (v45)
    {
      v16 = v46;
      v17 = v45;
      if (v46 != v45)
      {
        do
        {
          v19 = (void *)*--v16;
          v18 = v19;
          *v16 = 0;
          if (v19)
            operator delete[](v18);
        }
        while (v16 != v15);
        v17 = v45;
      }
      v46 = v15;
      operator delete(v17);
    }
    if (v41 != v44)
      free(v41);
  }
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  uint64_t v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD **v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v39))
    return 0;
  v4 = v39;
  if (mlir::DenseIntElementsAttr::classof(v39))
    v5 = v4;
  else
    v5 = 0;
  *a2 = v5;
  if (v5)
    return 1;
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v8 = &v40;
    v9 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v9 = (char *)v46;
        v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v8 = &v40;
        v9 = (char *)v46;
      }
    }
    v10 = &v9[24 * v47];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::DenseIntElementsAttr]";
  v41 = 76;
  v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12)
      v13 = v12;
    else
      v13 = v41;
    v14 = 18;
    if (v41 - v13 < 0x12)
      v14 = v41 - v13;
    v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1)
      --v15;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v13 + v14);
    v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v16 = &v40;
      v17 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v17 = (char *)v46;
          v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v16 = &v40;
          v17 = (char *)v46;
        }
      }
      v18 = &v17[24 * v47];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      ++v47;
      if (v44)
      {
        v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        v21 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v21 = (char *)v46;
            v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v20 = &v40;
            v21 = (char *)v46;
          }
        }
        v22 = &v21[24 * v47];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = v20[2];
        *(_OWORD *)v22 = v23;
        ++v47;
      }
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v24 = (_QWORD **)__p;
    if (__p)
    {
      v25 = v53;
      v26 = __p;
      if (v53 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v53 = v24;
      operator delete(v26);
    }
    v27 = v50;
    if (v50)
    {
      v28 = v51;
      v29 = v50;
      if (v51 != v50)
      {
        do
        {
          v31 = (void *)*--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            operator delete[](v30);
        }
        while (v28 != v27);
        v29 = v50;
      }
      v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49)
      free(v46);
  }
  return v6;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::DenseElementsAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  uint64_t v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD **v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v39))
    return 0;
  v4 = v39;
  if (mlir::DenseElementsAttr::classof(v39))
    v5 = v4;
  else
    v5 = 0;
  *a2 = v5;
  if (v5)
    return 1;
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v8 = &v40;
    v9 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v9 = (char *)v46;
        v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v8 = &v40;
        v9 = (char *)v46;
      }
    }
    v10 = &v9[24 * v47];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::DenseElementsAttr]";
  v41 = 73;
  v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12)
      v13 = v12;
    else
      v13 = v41;
    v14 = 18;
    if (v41 - v13 < 0x12)
      v14 = v41 - v13;
    v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1)
      --v15;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v13 + v14);
    v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v16 = &v40;
      v17 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v17 = (char *)v46;
          v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v16 = &v40;
          v17 = (char *)v46;
        }
      }
      v18 = &v17[24 * v47];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      ++v47;
      if (v44)
      {
        v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        v21 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v21 = (char *)v46;
            v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v20 = &v40;
            v21 = (char *)v46;
          }
        }
        v22 = &v21[24 * v47];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = v20[2];
        *(_OWORD *)v22 = v23;
        ++v47;
      }
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v24 = (_QWORD **)__p;
    if (__p)
    {
      v25 = v53;
      v26 = __p;
      if (v53 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v53 = v24;
      operator delete(v26);
    }
    v27 = v50;
    if (v50)
    {
      v28 = v51;
      v29 = v50;
      if (v51 != v50)
      {
        do
        {
          v31 = (void *)*--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            operator delete[](v30);
        }
        while (v28 != v27);
        v29 = v50;
      }
      v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49)
      free(v46);
  }
  return v6;
}

uint64_t mlir::DialectBytecodeReader::readList<mlir::Type,mlir::LogicalResult mlir::DialectBytecodeReader::readTypes<mlir::Type>(llvm::SmallVectorImpl<mlir::Type> &)::{lambda(mlir::Type&)#1}>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;

  v11 = 0;
  if ((*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 72))(a1, &v11))
  {
    v5 = v11;
    if (v11 > *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v11, 8);
      v5 = v11;
    }
    if (!v5)
      return 1;
    v6 = 0;
    while (1)
    {
      v10 = 0;
      if (!(*(unsigned __int8 (**)(_QWORD, uint64_t *))(*(_QWORD *)*a3 + 64))(*a3, &v10))
        break;
      v7 = *(unsigned int *)(a2 + 8);
      if (v7 >= *(_DWORD *)(a2 + 12))
      {
        v8 = v10;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v7 + 1, 8);
        *(_QWORD *)(*(_QWORD *)a2 + 8 * (*(_DWORD *)(a2 + 8))++) = v8;
        if (++v6 >= v11)
          return 1;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v10;
        *(_DWORD *)(a2 + 8) = v7 + 1;
        if (++v6 >= v11)
          return 1;
      }
    }
  }
  return 0;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::MemRefLayoutAttrInterface>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  _QWORD *v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD **v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD **))(*(_QWORD *)a1 + 48))(a1, &v39))
    return 0;
  v4 = v39;
  if (mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v39 + 8))
  {
    v5 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v4 + 8);
    *a2 = v4;
    a2[1] = v5;
    if (v4)
      return 1;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v8 = &v40;
    v9 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v9 = (char *)v46;
        v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v8 = &v40;
        v9 = (char *)v46;
      }
    }
    v10 = &v9[24 * v47];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface]";
  v41 = 81;
  v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12)
      v13 = v12;
    else
      v13 = v41;
    v14 = 18;
    if (v41 - v13 < 0x12)
      v14 = v41 - v13;
    v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1)
      --v15;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v13 + v14);
    v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v16 = &v40;
      v17 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v17 = (char *)v46;
          v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v16 = &v40;
          v17 = (char *)v46;
        }
      }
      v18 = &v17[24 * v47];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      ++v47;
      if (v44)
      {
        v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, (uint64_t)v39);
        v21 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v21 = (char *)v46;
            v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v20 = &v40;
            v21 = (char *)v46;
          }
        }
        v22 = &v21[24 * v47];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = v20[2];
        *(_OWORD *)v22 = v23;
        ++v47;
      }
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v24 = (_QWORD **)__p;
    if (__p)
    {
      v25 = v53;
      v26 = __p;
      if (v53 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v53 = v24;
      operator delete(v26);
    }
    v27 = v50;
    if (v50)
    {
      v28 = v51;
      v29 = v50;
      if (v51 != v50)
      {
        do
        {
          v31 = (void *)*--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            operator delete[](v30);
        }
        while (v28 != v27);
        v29 = v50;
      }
      v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49)
      free(v46);
  }
  return v6;
}

uint64_t mlir::ComplexType::get(uint64_t a1)
{
  unsigned __int8 **TypeUniquer;
  uint64_t v3;
  _QWORD v4[2];
  mlir::MLIRContext *Context;

  v3 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v3);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v4[0] = &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
  v4[1] = &Context;
  return mlir::StorageUniquer::get<mlir::detail::ComplexTypeStorage,mlir::Type &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18ComplexTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11ComplexTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v4, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id, &v3);
}

uint64_t mlir::FunctionType::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 **TypeUniquer;
  _QWORD v7[2];
  mlir::MLIRContext *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a3;
  *(_QWORD *)&v9 = a4;
  *((_QWORD *)&v9 + 1) = a5;
  v8 = a1;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(a1);
  v7[0] = &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id;
  v7[1] = &v8;
  return mlir::StorageUniquer::get<mlir::detail::FunctionTypeStorage,mlir::TypeRange &,mlir::TypeRange &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail19FunctionTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_12FunctionTypeEJRNS1_9TypeRangeESC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id, &v10, &v9);
}

uint64_t mlir::MemRefType::getMemorySpace(mlir::MemRefType *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 48);
}

uint64_t mlir::OpaqueType::get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **TypeUniquer;
  unsigned int v6;
  uint64_t v8;
  _QWORD v9[2];
  mlir::MLIRContext *Context;
  _QWORD v11[2];
  uint64_t *v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];

  v8 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v8);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v9[0] = &mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id;
  v9[1] = &Context;
  v15[0] = _ZN4llvm12function_refIFvPN4mlir6detail17OpaqueTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10OpaqueTypeEJRNS1_10StringAttrERNS_9StringRefEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v15[1] = v9;
  v13 = v8;
  v14[0] = a2;
  v14[1] = a3;
  v6 = llvm::hash_combine<mlir::StringAttr,llvm::StringRef>(&v13, (uint64_t)v14);
  v11[0] = &v13;
  v11[1] = v15;
  v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id, v6, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueTypeStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueTypeStorage,mlir::StringAttr &,llvm::StringRef &>(llvm::function_ref<void ()(mlir::detail::OpaqueTypeStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueTypeStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueTypeStorage,mlir::StringAttr &,llvm::StringRef &>(llvm::function_ref<void ()(mlir::detail::OpaqueTypeStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

uint64_t mlir::OpaqueType::getChecked(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, const void **a4, const char *a5)
{
  mlir::MLIRContext *Context;
  uint64_t v10;
  unsigned __int8 **TypeUniquer;
  unsigned int v12;
  uint64_t v14;
  _QWORD v15[2];
  mlir::MLIRContext *v16;
  _QWORD v17[2];
  uint64_t *v18;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD v21[2];

  v14 = a3;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v10 = v14;
  if (!mlir::OpaqueType::verify(a1, a2, v14, a4, a5))
    return 0;
  v16 = Context;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v15[0] = &mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id;
  v15[1] = &v16;
  v21[0] = _ZN4llvm12function_refIFvPN4mlir6detail17OpaqueTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10OpaqueTypeEJRNS1_10StringAttrERNS_9StringRefEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v21[1] = v15;
  v19 = v10;
  v20[0] = a4;
  v20[1] = a5;
  v12 = llvm::hash_combine<mlir::StringAttr,llvm::StringRef>(&v19, (uint64_t)v20);
  v17[0] = &v19;
  v17[1] = v21;
  v18 = &v19;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id, v12, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueTypeStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueTypeStorage,mlir::StringAttr &,llvm::StringRef &>(llvm::function_ref<void ()(mlir::detail::OpaqueTypeStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v18, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueTypeStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueTypeStorage,mlir::StringAttr &,llvm::StringRef &>(llvm::function_ref<void ()(mlir::detail::OpaqueTypeStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v17);
}

uint64_t mlir::RankedTensorType::get(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 **TypeUniquer;
  unsigned int v8;
  uint64_t v10;
  _QWORD v11[2];
  mlir::MLIRContext *Context;
  _QWORD v13[2];
  _QWORD *v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v10 = a3;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
  v11[1] = &Context;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail23RankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_16RankedTensorTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS4_;
  v18[1] = v11;
  v15[0] = a1;
  v15[1] = a2;
  v16 = v10;
  v17 = a4;
  v8 = llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,mlir::Attribute>((uint64_t)v15, &v16, &v17);
  v13[0] = v15;
  v13[1] = v18;
  v14 = v15;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::RankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::RankedTensorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::RankedTensorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::RankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::RankedTensorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::RankedTensorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v13);
}

uint64_t mlir::TupleType::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **TypeUniquer;
  unsigned int v6;
  _QWORD v8[2];
  mlir::MLIRContext *v9;
  _QWORD v10[2];
  _QWORD *v11;
  _QWORD v12[2];
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(a1);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::TupleType,void>::id;
  v8[1] = &v9;
  v12[0] = _ZN4llvm12function_refIFvPN4mlir6detail16TupleTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_9TupleTypeEJRNS1_9TypeRangeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v12[1] = v8;
  v13[0] = a2;
  v13[1] = a3;
  v6 = llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator>(a2, 0, a2, a3);
  v10[0] = v13;
  v10[1] = v12;
  v11 = v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TupleType,void>::id, v6, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v11, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v10);
}

uint64_t mlir::TupleType::get(mlir::TupleType *this, mlir::MLIRContext *a2)
{
  unsigned __int8 **TypeUniquer;
  unsigned int v4;
  _QWORD v6[2];
  mlir::TupleType *v7;
  _QWORD v8[2];
  _QWORD *v9;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange((unint64_t *)&v11, 0, 0);
  v7 = this;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(this);
  v6[0] = &mlir::detail::TypeIDResolver<mlir::TupleType,void>::id;
  v6[1] = &v7;
  v10[0] = _ZN4llvm12function_refIFvPN4mlir6detail16TupleTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_9TupleTypeEJNS1_9TypeRangeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_;
  v10[1] = v6;
  v13[0] = v11;
  v13[1] = v12;
  v4 = llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator>(v11, 0, v11, v12);
  v8[0] = v13;
  v8[1] = v10;
  v9 = v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TupleType,void>::id, v4, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v9, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v8);
}

uint64_t mlir::UnrankedMemRefType::get(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  uint64_t v5;
  unsigned __int8 **TypeUniquer;
  unsigned int v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  mlir::MLIRContext *Context;
  _QWORD v14[2];
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t *);
  _QWORD *v19;

  v2 = a2;
  v11 = a1;
  if (a2)
  {
    v3 = *(void **)(*(_QWORD *)a2 + 136);
    v4 = v3 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
    v5 = v3 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id ? a2 : 0;
    v16 = v5;
    if (v4)
    {
      mlir::IntegerAttr::getValue(&v16, (llvm::APInt *)&v18);
      v9 = (int)v19;
      if (v19 >= 0x41)
      {
        if (v9 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v18) >= 0x41)
        {
          if (v18)
            operator delete[](v18);
          goto LABEL_6;
        }
        v10 = *(_QWORD *)v18;
        operator delete[](v18);
        if (v10)
          goto LABEL_6;
      }
      else if (v18)
      {
        goto LABEL_6;
      }
      v2 = 0;
    }
  }
LABEL_6:
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v12[0] = &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
  v12[1] = &Context;
  v18 = _ZN4llvm12function_refIFvPN4mlir6detail25UnrankedMemRefTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_18UnrankedMemRefTypeEJRNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v19 = v12;
  v16 = v11;
  v17 = v2;
  v7 = llvm::hash_combine<mlir::Type,mlir::Attribute>(&v16, &v17);
  v14[0] = &v16;
  v14[1] = &v18;
  v15 = &v16;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id, v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::UnrankedMemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedMemRefTypeStorage,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::UnrankedMemRefTypeStorage *)>,mlir::TypeID,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::UnrankedMemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedMemRefTypeStorage,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::UnrankedMemRefTypeStorage *)>,mlir::TypeID,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v14);
}

uint64_t mlir::UnrankedMemRefType::getChecked(void (*a1)(_QWORD *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v7;
  BOOL v8;
  uint64_t v9;
  mlir::MLIRContext *Context;
  uint64_t v11;
  unsigned __int8 **TypeUniquer;
  unsigned int v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  mlir::MLIRContext *v19;
  _QWORD v20[2];
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t *);
  _QWORD *v25;

  v4 = a4;
  v17 = a3;
  if (!a4)
    goto LABEL_6;
  v7 = *(void **)(*(_QWORD *)a4 + 136);
  v8 = v7 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  v9 = v7 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id ? a4 : 0;
  v22 = v9;
  if (!v8)
    goto LABEL_6;
  mlir::IntegerAttr::getValue(&v22, (llvm::APInt *)&v24);
  v15 = (int)v25;
  if (v25 < 0x41)
  {
    if (v24)
      goto LABEL_6;
LABEL_14:
    v4 = 0;
    goto LABEL_6;
  }
  if (v15 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v24) < 0x41)
  {
    v16 = *(_QWORD *)v24;
    operator delete[](v24);
    if (v16)
      goto LABEL_6;
    goto LABEL_14;
  }
  if (v24)
    operator delete[](v24);
LABEL_6:
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  v11 = v17;
  if (!mlir::UnrankedMemRefType::verify(a1, a2, v17, v4))
    return 0;
  v19 = Context;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v18[0] = &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
  v18[1] = &v19;
  v24 = _ZN4llvm12function_refIFvPN4mlir6detail25UnrankedMemRefTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_18UnrankedMemRefTypeEJRNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v25 = v18;
  v22 = v11;
  v23 = v4;
  v13 = llvm::hash_combine<mlir::Type,mlir::Attribute>(&v22, &v23);
  v20[0] = &v22;
  v20[1] = &v24;
  v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id, v13, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::UnrankedMemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedMemRefTypeStorage,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::UnrankedMemRefTypeStorage *)>,mlir::TypeID,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::UnrankedMemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedMemRefTypeStorage,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::UnrankedMemRefTypeStorage *)>,mlir::TypeID,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

uint64_t mlir::UnrankedMemRefType::get(uint64_t a1, unsigned int a2)
{
  uint64_t Context;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a1;
  Context = mlir::Attribute::getContext((mlir::Attribute *)&v7);
  if (!a2)
    return mlir::UnrankedMemRefType::get(v7, 0);
  v4 = mlir::IntegerType::get(Context, 0x40u, 0);
  v5 = mlir::IntegerAttr::get(v4, a2);
  return mlir::UnrankedMemRefType::get(v7, v5);
}

uint64_t mlir::UnrankedTensorType::get(uint64_t a1)
{
  unsigned __int8 **TypeUniquer;
  uint64_t v3;
  _QWORD v4[2];
  mlir::MLIRContext *Context;

  v3 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v3);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v4[0] = &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  v4[1] = &Context;
  return mlir::StorageUniquer::get<mlir::detail::UnrankedTensorTypeStorage,mlir::Type &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail25UnrankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_18UnrankedTensorTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v4, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id, &v3);
}

uint64_t mlir::VectorType::get(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v9;
  unsigned __int8 **TypeUniquer;
  unsigned int v11;
  uint64_t ParametricStorageTypeImpl;
  uint64_t v14;
  _QWORD v15[2];
  mlir::MLIRContext *Context;
  _QWORD v17[2];
  _QWORD *v18;
  _QWORD v19[2];
  uint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void *v23;
  __int128 v24;
  _QWORD v25[6];

  v25[5] = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v23 = v25;
  v24 = xmmword_181233150;
  if (a5)
  {
    v7 = a5;
  }
  else if (a2)
  {
    if (a2 >= 0x29)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v23, v25, a2, 1);
      a4 = v23;
      v9 = v24;
    }
    else
    {
      v9 = 0;
      a4 = v25;
    }
    bzero((char *)a4 + v9, a2);
    v7 = v9 + a2;
    *(_QWORD *)&v24 = v7;
  }
  else
  {
    v7 = 0;
    a4 = v25;
  }
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v15[0] = &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id;
  v15[1] = &Context;
  v22[0] = _ZN4llvm12function_refIFvPN4mlir6detail17VectorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10VectorTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNSB_IbEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS4_;
  v22[1] = v15;
  v19[0] = a1;
  v19[1] = a2;
  v20 = v14;
  v21[0] = a4;
  v21[1] = v7;
  v11 = llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,llvm::ArrayRef<BOOL>>((uint64_t)v19, &v20, (uint64_t)v21);
  v17[0] = v19;
  v17[1] = v22;
  v18 = v19;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::VectorType,void>::id, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::VectorTypeStorage * mlir::StorageUniquer::get<mlir::detail::VectorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,llvm::ArrayRef<BOOL> &>(llvm::function_ref<void ()(mlir::detail::VectorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,llvm::ArrayRef<BOOL> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v18, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::VectorTypeStorage * mlir::StorageUniquer::get<mlir::detail::VectorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,llvm::ArrayRef<BOOL> &>(llvm::function_ref<void ()(mlir::detail::VectorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,llvm::ArrayRef<BOOL> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v17);
  if (v23 != v25)
    free(v23);
  return ParametricStorageTypeImpl;
}

uint64_t *mlir::Dialect::addTypes<mlir::ComplexType,mlir::Float8E5M2Type,mlir::Float8E4M3FNType,mlir::Float8E5M2FNUZType,mlir::Float8E4M3FNUZType,mlir::Float8E4M3B11FNUZType,mlir::BFloat16Type,mlir::Float16Type,mlir::FloatTF32Type,mlir::Float32Type,mlir::Float64Type,mlir::Float80Type,mlir::Float128Type,mlir::FunctionType,mlir::IndexType,mlir::IntegerType,mlir::MemRefType,mlir::NoneType,mlir::OpaqueType,mlir::RankedTensorType,mlir::TupleType,mlir::UnrankedMemRefType,mlir::UnrankedTensorType,mlir::VectorType>(uint64_t a1)
{
  mlir::Dialect::addType<mlir::ComplexType>(a1);
  mlir::Dialect::addType<mlir::Float8E5M2Type>(a1);
  mlir::Dialect::addType<mlir::Float8E4M3FNType>(a1);
  mlir::Dialect::addType<mlir::Float8E5M2FNUZType>(a1);
  mlir::Dialect::addType<mlir::Float8E4M3FNUZType>(a1);
  mlir::Dialect::addType<mlir::Float8E4M3B11FNUZType>(a1);
  mlir::Dialect::addType<mlir::BFloat16Type>(a1);
  mlir::Dialect::addType<mlir::Float16Type>(a1);
  mlir::Dialect::addType<mlir::FloatTF32Type>(a1);
  mlir::Dialect::addType<mlir::Float32Type>(a1);
  mlir::Dialect::addType<mlir::Float64Type>(a1);
  mlir::Dialect::addType<mlir::Float80Type>(a1);
  mlir::Dialect::addType<mlir::Float128Type>(a1);
  mlir::Dialect::addType<mlir::FunctionType>(a1);
  mlir::Dialect::addType<mlir::IndexType>(a1);
  mlir::Dialect::addType<mlir::IntegerType>(a1);
  mlir::Dialect::addType<mlir::MemRefType>(a1);
  mlir::Dialect::addType<mlir::NoneType>(a1);
  mlir::Dialect::addType<mlir::OpaqueType>(a1);
  mlir::Dialect::addType<mlir::RankedTensorType>(a1);
  mlir::Dialect::addType<mlir::TupleType>(a1);
  mlir::Dialect::addType<mlir::UnrankedMemRefType>(a1);
  mlir::Dialect::addType<mlir::UnrankedTensorType>(a1);
  return mlir::Dialect::addType<mlir::VectorType>(a1);
}

uint64_t mlir::IntegerType::getWidth(mlir::IntegerType *this)
{
  return *(_DWORD *)(*(_QWORD *)this + 8) & 0x3FFFFFFF;
}

uint64_t mlir::IntegerType::getSignedness(mlir::IntegerType *this)
{
  return *(_DWORD *)(*(_QWORD *)this + 8) >> 30;
}

uint64_t mlir::FloatType::getWidth(mlir::FloatType *this)
{
  void *v1;

  v1 = *(void **)(**(_QWORD **)this + 136);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
    return 8;
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id)
  {
    return 8;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id)
  {
    return 8;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 16;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return 32;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
    return 64;
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id)
    return 80;
  return 128;
}

void *mlir::FloatType::getFloatSemantics(llvm::APFloatBase *this)
{
  void *v1;

  v1 = *(void **)(**(_QWORD **)this + 136);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
    return llvm::APFloatBase::Float8E5M2(this);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
    return llvm::APFloatBase::Float8E4M3FN(this);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id)
    return llvm::APFloatBase::Float8E5M2FNUZ(this);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
    return llvm::APFloatBase::Float8E4M3FNUZ(this);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id)
    return llvm::APFloatBase::Float8E4M3B11FNUZ(this);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
    return llvm::APFloatBase::BFloat(this);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id)
    return llvm::APFloatBase::IEEEhalf(this);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
    return llvm::APFloatBase::FloatTF32(this);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
    return llvm::APFloatBase::IEEEsingle(this);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
    return llvm::APFloatBase::IEEEdouble(this);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id)
    return llvm::APFloatBase::x87DoubleExtended(this);
  return llvm::APFloatBase::IEEEquad(this);
}

uint64_t mlir::FloatType::getFPMantissaWidth(mlir::FloatType *this)
{
  void *FloatSemantics;

  FloatSemantics = mlir::FloatType::getFloatSemantics(this);
  return llvm::APFloatBase::semanticsPrecision((uint64_t)FloatSemantics);
}

uint64_t mlir::FunctionType::getInputs(mlir::FunctionType *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 16);
}

uint64_t mlir::FunctionType::getNumResults(mlir::FunctionType *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 12);
}

uint64_t mlir::FunctionType::getResults(mlir::FunctionType *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 16) + 8 * *(unsigned int *)(*(_QWORD *)this + 8);
}

uint64_t mlir::FunctionType::clone(mlir::Attribute *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 **TypeUniquer;
  _QWORD v7[2];
  mlir::MLIRContext *Context;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a3;
  *(_QWORD *)&v9 = a4;
  *((_QWORD *)&v9 + 1) = a5;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext(a1);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v7[0] = &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id;
  v7[1] = &Context;
  return mlir::StorageUniquer::get<mlir::detail::FunctionTypeStorage,mlir::TypeRange &,mlir::TypeRange &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail19FunctionTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_12FunctionTypeEJRNS1_9TypeRangeESC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id, &v10, &v9);
}

uint64_t mlir::OpaqueType::verify(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, const void **a4, const char *a5)
{
  char *AttrData;
  uint64_t v10;
  mlir::MLIRContext *Context;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void ***v15;
  char *v16;
  char *v17;
  __int128 v18;
  const void ***v19;
  char *v20;
  char *v21;
  __int128 v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  const void ***v31;
  char *v32;
  char *v33;
  __int128 v34;
  const void ***v35;
  char *v36;
  char *v37;
  __int128 v38;
  const void ***v39;
  char *v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  const void ***v44;
  char *v45;
  char *v46;
  __int128 v47;
  _QWORD **v48;
  _QWORD **v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  const void **v69;
  const char *v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  _BYTE v74[16];
  void *v75;
  unsigned int v76;
  unsigned int v77;
  _BYTE v78[96];
  void *v79;
  _QWORD *v80;
  void *__p;
  _QWORD **v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v68 = a3;
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v68);
  if ((mlir::Dialect::isValidNamespace(AttrData, v10) & 1) != 0)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v68);
    if ((mlir::MLIRContext::allowsUnregisteredDialects(Context) & 1) != 0)
      return 1;
    v12 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v68);
    if (mlir::MLIRContext::getLoadedDialect((uint64_t *)Context, v12, v13))
      return 1;
    a1(&v73, a2);
    if (v73)
    {
      LODWORD(v69) = 3;
      v71 = 2;
      v31 = &v69;
      v32 = (char *)v75;
      if (v76 >= v77)
      {
        v57 = v76 + 1;
        if (v75 <= &v69 && (char *)v75 + 24 * v76 > (char *)&v69)
        {
          v64 = (char *)&v69 - (_BYTE *)v75;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v57, 24);
          v32 = (char *)v75;
          v31 = (const void ***)((char *)v75 + v64);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v57, 24);
          v31 = &v69;
          v32 = (char *)v75;
        }
      }
      v33 = &v32[24 * v76];
      v34 = *(_OWORD *)v31;
      *((_QWORD *)v33 + 2) = v31[2];
      *(_OWORD *)v33 = v34;
      ++v76;
      if (v73)
      {
        mlir::Diagnostic::operator<<((uint64_t)v74, v68);
        if (v73)
        {
          LODWORD(v69) = 3;
          v70 = "<\"";
          v71 = 2;
          v35 = &v69;
          v36 = (char *)v75;
          if (v76 >= v77)
          {
            v58 = v76 + 1;
            if (v75 <= &v69 && (char *)v75 + 24 * v76 > (char *)&v69)
            {
              v65 = (char *)&v69 - (_BYTE *)v75;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v58, 24);
              v36 = (char *)v75;
              v35 = (const void ***)((char *)v75 + v65);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v58, 24);
              v35 = &v69;
              v36 = (char *)v75;
            }
          }
          v37 = &v36[24 * v76];
          v38 = *(_OWORD *)v35;
          *((_QWORD *)v37 + 2) = v35[2];
          *(_OWORD *)v37 = v38;
          ++v76;
          if (v73)
          {
            v72 = 261;
            v69 = a4;
            v70 = a5;
            mlir::Diagnostic::operator<<((uint64_t)v74, &v69);
            if (v73)
            {
              LODWORD(v69) = 3;
              v70 = "\">";
              v71 = 2;
              v39 = &v69;
              v40 = (char *)v75;
              if (v76 >= v77)
              {
                v59 = v76 + 1;
                if (v75 <= &v69 && (char *)v75 + 24 * v76 > (char *)&v69)
                {
                  v66 = (char *)&v69 - (_BYTE *)v75;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v59, 24);
                  v40 = (char *)v75;
                  v39 = (const void ***)((char *)v75 + v66);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v59, 24);
                  v39 = &v69;
                  v40 = (char *)v75;
                }
              }
              v41 = &v40[24 * v76];
              v42 = *(_OWORD *)v39;
              *((_QWORD *)v41 + 2) = v39[2];
              *(_OWORD *)v41 = v42;
              v43 = ++v76;
              if (v73)
              {
                LODWORD(v69) = 3;
                      "ts() on the MLIRContext, or use -allow-unregistered-dialect with the MLIR opt tool used";
                v71 = 185;
                v44 = &v69;
                v45 = (char *)v75;
                if (v43 >= v77)
                {
                  v60 = v43 + 1;
                  v61 = (char *)v75 + 24 * v43 > (char *)&v69;
                  if (v75 <= &v69 && v61)
                  {
                    v67 = (char *)&v69 - (_BYTE *)v75;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v60, 24);
                    v45 = (char *)v75;
                    v44 = (const void ***)((char *)v75 + v67);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v60, 24);
                    v44 = &v69;
                    v45 = (char *)v75;
                  }
                }
                v46 = &v45[24 * v76];
                v47 = *(_OWORD *)v44;
                *((_QWORD *)v46 + 2) = v44[2];
                *(_OWORD *)v46 = v47;
                ++v76;
              }
            }
          }
        }
      }
    }
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
    if (v73)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
    if (v83)
    {
      v48 = (_QWORD **)__p;
      if (__p)
      {
        v49 = v82;
        v50 = __p;
        if (v82 != __p)
        {
          do
            v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
          while (v49 != v48);
          v50 = __p;
        }
        v82 = v48;
        operator delete(v50);
      }
      v26 = v79;
      if (!v79)
        goto LABEL_52;
      v51 = v80;
      v28 = v79;
      if (v80 == v79)
      {
LABEL_51:
        v80 = v26;
        operator delete(v28);
LABEL_52:
        if (v75 != v78)
          free(v75);
        return v14;
      }
      do
      {
        v53 = (void *)*--v51;
        v52 = v53;
        *v51 = 0;
        if (v53)
          operator delete[](v52);
      }
      while (v51 != v26);
LABEL_50:
      v28 = v79;
      goto LABEL_51;
    }
  }
  else
  {
    a1(&v73, a2);
    if (v73)
    {
      LODWORD(v69) = 3;
      v70 = "invalid dialect namespace '";
      v71 = 27;
      v15 = &v69;
      v16 = (char *)v75;
      if (v76 >= v77)
      {
        v55 = v76 + 1;
        if (v75 <= &v69 && (char *)v75 + 24 * v76 > (char *)&v69)
        {
          v62 = (char *)&v69 - (_BYTE *)v75;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v55, 24);
          v16 = (char *)v75;
          v15 = (const void ***)((char *)v75 + v62);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v55, 24);
          v15 = &v69;
          v16 = (char *)v75;
        }
      }
      v17 = &v16[24 * v76];
      v18 = *(_OWORD *)v15;
      *((_QWORD *)v17 + 2) = v15[2];
      *(_OWORD *)v17 = v18;
      ++v76;
      if (v73)
      {
        mlir::Diagnostic::operator<<((uint64_t)v74, v68);
        if (v73)
        {
          LODWORD(v69) = 3;
          v70 = "'";
          v71 = 1;
          v19 = &v69;
          v20 = (char *)v75;
          if (v76 >= v77)
          {
            v56 = v76 + 1;
            if (v75 <= &v69 && (char *)v75 + 24 * v76 > (char *)&v69)
            {
              v63 = (char *)&v69 - (_BYTE *)v75;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v56, 24);
              v20 = (char *)v75;
              v19 = (const void ***)((char *)v75 + v63);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v56, 24);
              v19 = &v69;
              v20 = (char *)v75;
            }
          }
          v21 = &v20[24 * v76];
          v22 = *(_OWORD *)v19;
          *((_QWORD *)v21 + 2) = v19[2];
          *(_OWORD *)v21 = v22;
          ++v76;
        }
      }
    }
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
    if (v73)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
    if (v83)
    {
      v23 = (_QWORD **)__p;
      if (__p)
      {
        v24 = v82;
        v25 = __p;
        if (v82 != __p)
        {
          do
            v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
          while (v24 != v23);
          v25 = __p;
        }
        v82 = v23;
        operator delete(v25);
      }
      v26 = v79;
      if (!v79)
        goto LABEL_52;
      v27 = v80;
      v28 = v79;
      if (v80 == v79)
        goto LABEL_51;
      do
      {
        v30 = (void *)*--v27;
        v29 = v30;
        *v27 = 0;
        if (v30)
          operator delete[](v29);
      }
      while (v27 != v26);
      goto LABEL_50;
    }
  }
  return v14;
}

uint64_t mlir::TensorType::getElementType(mlir::TensorType *this)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)this;
  v2 = *(void **)(**(_QWORD **)this + 136);
  if (v2 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    return *(_QWORD *)(v1 + 24);
  if (v2 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    return *(_QWORD *)(v1 + 8);
  return 0;
}

BOOL mlir::TensorType::hasRank(mlir::TensorType *this)
{
  return *(_QWORD *)(**(_QWORD **)this + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
}

uint64_t mlir::TensorType::cloneWith(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  mlir::MLIRContext **v4;
  void *v5;
  uint64_t v6;
  unsigned __int8 **TypeUniquer;
  void *v8;
  mlir::MLIRContext **v9;
  void *v10;
  mlir::MLIRContext **v11;
  unsigned int v12;
  unsigned __int8 **v14;
  uint64_t v15;
  void *v16;
  mlir::MLIRContext **p_Context;
  mlir::MLIRContext *Context;
  uint64_t v19[2];
  void **v20;
  void *v21;
  mlir::MLIRContext **v22;
  uint64_t v23;
  uint64_t v24;
  mlir::MLIRContext *v25;
  void **v26;

  v3 = *(_QWORD **)a1;
  if (*(_UNKNOWN **)(**(_QWORD **)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    if (*(_BYTE *)(a2 + 16))
    {
      v5 = *(void **)a2;
      v4 = *(mlir::MLIRContext ***)(a2 + 8);
      v6 = v3[4];
      v15 = a3;
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
      TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
      v16 = &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
      p_Context = &Context;
      v25 = (mlir::MLIRContext *)_ZN4llvm12function_refIFvPN4mlir6detail23RankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_16RankedTensorTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS4_;
      v26 = &v16;
      v21 = v5;
      v22 = v4;
    }
    else
    {
      v10 = (void *)v3[1];
      v11 = (mlir::MLIRContext **)v3[2];
      v6 = v3[4];
      v15 = a3;
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
      TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
      v16 = &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
      p_Context = &Context;
      v25 = (mlir::MLIRContext *)_ZN4llvm12function_refIFvPN4mlir6detail23RankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_16RankedTensorTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS4_;
      v26 = &v16;
      v21 = v10;
      v22 = v11;
    }
    v23 = v15;
    v24 = v6;
    goto LABEL_8;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v8 = *(void **)a2;
    v9 = *(mlir::MLIRContext ***)(a2 + 8);
    v15 = a3;
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
    TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
    v16 = &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
    p_Context = &Context;
    v25 = (mlir::MLIRContext *)_ZN4llvm12function_refIFvPN4mlir6detail23RankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_16RankedTensorTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS4_;
    v26 = &v16;
    v21 = v8;
    v22 = v9;
    v23 = v15;
    v24 = 0;
LABEL_8:
    v12 = llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,mlir::Attribute>((uint64_t)&v21, &v23, &v24);
    v19[0] = (uint64_t)&v21;
    v19[1] = (uint64_t)&v25;
    v20 = &v21;
    return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id, v12, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::RankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::RankedTensorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::RankedTensorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v20, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::RankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::RankedTensorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::RankedTensorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v19);
  }
  v19[0] = a3;
  v25 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v19);
  v14 = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(v25);
  v21 = &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  v22 = &v25;
  return mlir::StorageUniquer::get<mlir::detail::UnrankedTensorTypeStorage,mlir::Type &>(v14, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail25UnrankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_18UnrankedTensorTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)&v21, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id, v19);
}

uint64_t mlir::TensorType::clone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  _QWORD v6[2];
  char v7;

  v6[0] = a2;
  v6[1] = a3;
  v7 = 1;
  v3 = *(_QWORD *)a1;
  v4 = *(void **)(**(_QWORD **)a1 + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    return mlir::TensorType::cloneWith(a1, (uint64_t)v6, *(_QWORD *)(v3 + 24));
  if (v4 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    return mlir::TensorType::cloneWith(a1, (uint64_t)v6, *(_QWORD *)(v3 + 8));
  return mlir::TensorType::cloneWith(a1, (uint64_t)v6, 0);
}

BOOL mlir::TensorType::isValidElementType(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  _BOOL8 result;

  v1 = *a1;
  v2 = *(void **)(*a1 + 136);
  if (v2 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    return 1;
  if (v2 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v2 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v2 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v2 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v2 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v2 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  result = 1;
  if (v2 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    return *(_QWORD *)(*(_QWORD *)v1 + 24) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id;
  }
  return result;
}

uint64_t mlir::BaseMemRefType::getElementType(mlir::BaseMemRefType *this)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)this;
  v2 = *(void **)(**(_QWORD **)this + 136);
  if (v2 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    return *(_QWORD *)(v1 + 24);
  if (v2 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
    return *(_QWORD *)(v1 + 8);
  return 0;
}

BOOL mlir::BaseMemRefType::hasRank(mlir::BaseMemRefType *this)
{
  return *(_QWORD *)(**(_QWORD **)this + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
}

uint64_t mlir::BaseMemRefType::cloneWith(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  void **v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  mlir::AffineMap **v8;
  void *v9;
  mlir::AffineMap *v10;

  v3 = *a1;
  if (*(_UNKNOWN **)(**a1 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
  {
    v4 = (void **)(v3 + 1);
    v5 = (_QWORD *)v3[4];
    v6 = v3[5];
    v7 = v3[6];
    if (*(_BYTE *)(a2 + 16))
      v8 = (mlir::AffineMap **)(a2 + 8);
    else
      v8 = (mlir::AffineMap **)(v3 + 2);
    if (*(_BYTE *)(a2 + 16))
      v4 = (void **)a2;
    v9 = *v4;
    v10 = *v8;
    return mlir::MemRefType::get(v9, v10, a3, v5, v6, v7);
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v9 = *(void **)a2;
    v10 = *(mlir::AffineMap **)(a2 + 8);
    v7 = v3[2];
    v5 = 0;
    v6 = 0;
    return mlir::MemRefType::get(v9, v10, a3, v5, v6, v7);
  }
  return mlir::UnrankedMemRefType::get(a3, v3[2]);
}

uint64_t mlir::BaseMemRefType::getMemorySpace(mlir::BaseMemRefType *this)
{
  uint64_t v1;

  v1 = 16;
  if (*(_UNKNOWN **)(**(_QWORD **)this + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v1 = 48;
  return *(_QWORD *)(*(_QWORD *)this + v1);
}

char *mlir::computeRankReductionMask@<X0>(char *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  llvm **v14;
  int v15;
  unsigned int v16;
  char *v17;
  int v18;
  char *v19;
  char *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t __b;
  llvm *v30[3];

  v30[2] = *(llvm **)MEMORY[0x1E0C80C00];
  __b = 1;
  v30[0] = (llvm *)-1;
  v30[1] = (llvm *)-1;
  v28 = 0;
  if (a2)
  {
    v9 = result;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      if (a4 > v11 && *(_QWORD *)&v9[8 * v10] == *(_QWORD *)(a3 + 8 * v11))
      {
        ++v11;
        goto LABEL_4;
      }
      if ((__b & 1) != 0)
      {
        v13 = 4;
        v14 = v30;
      }
      else
      {
        v13 = (int)v30[1];
        if (!LODWORD(v30[1]))
        {
          v19 = 0;
          goto LABEL_15;
        }
        v14 = (llvm **)v30[0];
      }
      v15 = v13 - 1;
      v16 = v15 & (37 * v12);
      v17 = (char *)v14 + 4 * v16;
      v18 = *(_DWORD *)v17;
      if (v12 == *(_DWORD *)v17)
        goto LABEL_12;
      v20 = 0;
      v21 = 1;
      while (v18 != -1)
      {
        if (v20)
          v22 = 0;
        else
          v22 = v18 == -2;
        if (v22)
          v20 = v17;
        v23 = v16 + v21++;
        v16 = v23 & v15;
        v17 = (char *)v14 + 4 * v16;
        v18 = *(_DWORD *)v17;
        if (v12 == *(_DWORD *)v17)
          goto LABEL_12;
      }
      if (v20)
        v19 = v20;
      else
        v19 = v17;
LABEL_15:
      result = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::InsertIntoBucket<unsigned int const&,llvm::detail::DenseSetEmpty&>(&__b, v19, &v28);
      v12 = v28;
LABEL_12:
      if (*(_QWORD *)&v9[8 * v12] != 1)
        goto LABEL_32;
LABEL_4:
      v28 = ++v12;
      v10 = v12;
      if (a2 <= v12)
        goto LABEL_29;
    }
  }
  v11 = 0;
LABEL_29:
  if (a4 != v11)
  {
LABEL_32:
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 24) = 0;
    if ((__b & 1) != 0)
      return result;
LABEL_33:
    llvm::deallocate_buffer(v30[0], (void *)(4 * LODWORD(v30[1])));
  }
  *(_QWORD *)(a5 + 16) = -1;
  v24 = __b;
  v25 = HIDWORD(__b);
  v26 = __b & 1;
  *(_DWORD *)a5 = __b | 1;
  *(_DWORD *)(a5 + 4) = v25;
  __b = v26;
  if ((v24 & 1) != 0)
  {
    *(llvm **)(a5 + 8) = v30[0];
    v30[0] = (llvm *)-1;
    v27 = HIDWORD(v30[1]);
    *(_DWORD *)(a5 + 16) = v30[1];
    LODWORD(v30[1]) = -1;
    if (v27 != -1)
      *(_DWORD *)(a5 + 20) = v27;
    HIDWORD(v30[1]) = -1;
  }
  else
  {
    *(_OWORD *)(a5 + 8) = *(_OWORD *)v30;
    LODWORD(__b) = 1;
    v30[0] = (llvm *)-1;
    v30[1] = (llvm *)-1;
    *(_DWORD *)a5 = v24 & 0xFFFFFFFE;
  }
  *(_BYTE *)(a5 + 24) = 1;
  if ((__b & 1) == 0)
    goto LABEL_33;
  return result;
}

uint64_t mlir::isRankReducedType(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *ArgAttrsAttr;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t OperandRange;
  _QWORD v15[2];
  _QWORD *v16;
  uint64_t v17;
  _BYTE v18[8];
  llvm *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1 == a3)
    return 0;
  if (a1)
  {
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8);
    v16 = a1;
    v17 = v5;
    if (a3)
    {
LABEL_4:
      v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a3 + 8);
      goto LABEL_8;
    }
  }
  else
  {
    v16 = 0;
    v17 = 0;
    if (a3)
      goto LABEL_4;
  }
  v6 = 0;
LABEL_8:
  v15[0] = a3;
  v15[1] = v6;
  ArgAttrsAttr = (char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v16);
  v10 = v9;
  v11 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v15);
  if (v12 > v10)
    return 1;
  mlir::computeRankReductionMask(ArgAttrsAttr, v10, v11, v12, (uint64_t)v18);
  if (!v21)
    return 2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v16);
  if (OperandRange == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v15))
    v7 = 0;
  else
    v7 = 3;
  if ((v18[0] & 1) == 0)
    llvm::deallocate_buffer(v19, (void *)(4 * v20));
  return v7;
}

uint64_t mlir::MemRefType::get(void *a1, mlir::AffineMap *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v10;
  mlir::MLIRContext *Context;
  mlir::MLIRContext *v12;
  unint64_t MultiDimIdentityMap;
  _QWORD *v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 **TypeUniquer;
  unsigned int v19;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  mlir::MLIRContext *v25;
  _QWORD v26[2];
  void **p_p;
  void *__p;
  mlir::AffineMap *v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  _QWORD v33[2];

  v6 = a6;
  v23 = a3;
  if (a4)
  {
    v10 = a4;
    if (!a6)
      goto LABEL_12;
  }
  else
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v23);
    MultiDimIdentityMap = mlir::AffineMap::getMultiDimIdentityMap(a2, Context, v12);
    v14 = (_QWORD *)mlir::AffineMapAttr::get(MultiDimIdentityMap);
    v10 = v14;
    if (v14)
    {
      a5 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v14 + 8);
      if (!v6)
        goto LABEL_12;
    }
    else
    {
      a5 = 0;
      if (!v6)
        goto LABEL_12;
    }
  }
  v15 = *(void **)(*(_QWORD *)v6 + 136);
  v16 = v15 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (v15 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    v17 = v6;
  else
    v17 = 0;
  v33[0] = v17;
  if (v16)
  {
    mlir::IntegerAttr::getValue(v33, (llvm::APInt *)&__p);
    v21 = (int)v29;
    if (v29 >= 0x41)
    {
      if (v21 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) >= 0x41)
      {
        if (__p)
          operator delete[](__p);
        goto LABEL_12;
      }
      v22 = *(_QWORD *)__p;
      operator delete[](__p);
      if (v22)
        goto LABEL_12;
    }
    else if (__p)
    {
      goto LABEL_12;
    }
    v6 = 0;
  }
LABEL_12:
  v25 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v23);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(v25);
  v24[0] = &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id;
  v24[1] = &v25;
  v33[0] = _ZN4llvm12function_refIFvPN4mlir6detail17MemRefTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10MemRefTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_25MemRefLayoutAttrInterfaceERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESM_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSO_E_EEvlS4_;
  v33[1] = v24;
  __p = a1;
  v29 = a2;
  v30 = v23;
  v31[0] = v10;
  v31[1] = a5;
  v32 = v6;
  v19 = llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute>((uint64_t)&__p, &v30, v31, &v32);
  v26[0] = &__p;
  v26[1] = v33;
  p_p = &__p;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id, v19, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&p_p, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v26);
}

uint64_t mlir::MemRefType::getChecked(void (*a1)(_QWORD *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, mlir::AffineMap *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;
  mlir::MLIRContext *Context;
  mlir::MLIRContext *v16;
  unint64_t MultiDimIdentityMap;
  _QWORD *v18;
  void *v19;
  BOOL v20;
  uint64_t v21;
  mlir::MLIRContext *v22;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  void *__p;
  unsigned int v28;
  uint64_t v29;

  v8 = a8;
  v26 = a5;
  if (a6)
  {
    v14 = a6;
    if (!a8)
      goto LABEL_12;
  }
  else
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
    MultiDimIdentityMap = mlir::AffineMap::getMultiDimIdentityMap(a4, Context, v16);
    v18 = (_QWORD *)mlir::AffineMapAttr::get(MultiDimIdentityMap);
    v14 = (uint64_t)v18;
    if (v18)
    {
      a7 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v18 + 8);
      if (!v8)
        goto LABEL_12;
    }
    else
    {
      a7 = 0;
      if (!v8)
        goto LABEL_12;
    }
  }
  v19 = *(void **)(*(_QWORD *)v8 + 136);
  v20 = v19 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (v19 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    v21 = v8;
  else
    v21 = 0;
  v29 = v21;
  if (v20)
  {
    mlir::IntegerAttr::getValue(&v29, (llvm::APInt *)&__p);
    v24 = v28;
    if (v28 >= 0x41)
    {
      if (v24 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) >= 0x41)
      {
        if (__p)
          operator delete[](__p);
        goto LABEL_12;
      }
      v25 = *(_QWORD *)__p;
      operator delete[](__p);
      if (v25)
        goto LABEL_12;
    }
    else if (__p)
    {
      goto LABEL_12;
    }
    v8 = 0;
  }
LABEL_12:
  v22 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  return mlir::detail::StorageUserBase<mlir::MemRefType,mlir::BaseMemRefType,mlir::detail::MemRefTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getChecked<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute>(a1, a2, v22, a3, (uint64_t)a4, v26, v14, a7, v8);
}

uint64_t mlir::detail::StorageUserBase<mlir::MemRefType,mlir::BaseMemRefType,mlir::detail::MemRefTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getChecked<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute>(void (*a1)(_QWORD *__return_ptr, uint64_t), uint64_t a2, mlir::MLIRContext *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned __int8 **TypeUniquer;
  unsigned int v16;
  _QWORD v18[2];
  mlir::MLIRContext *v19;
  _QWORD v20[2];
  _QWORD *v21;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  _QWORD v26[2];

  if (!mlir::MemRefType::verify(a1, a2, a4, a5, a6, a7, a8, a9))
    return 0;
  v19 = a3;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(a3);
  v18[0] = &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id;
  v18[1] = &v19;
  v26[0] = _ZN4llvm12function_refIFvPN4mlir6detail17MemRefTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10MemRefTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_25MemRefLayoutAttrInterfaceERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESM_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSO_E_EEvlS4_;
  v26[1] = v18;
  v22[0] = a4;
  v22[1] = a5;
  v23 = a6;
  v24[0] = a7;
  v24[1] = a8;
  v25 = a9;
  v16 = llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute>((uint64_t)v22, &v23, v24, &v25);
  v20[0] = v22;
  v20[1] = v26;
  v21 = v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id, v16, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

uint64_t mlir::MemRefType::get(void *a1, mlir::AffineMap *a2, uint64_t a3, unint64_t MultiDimIdentityMap, uint64_t a5)
{
  mlir::MLIRContext *Context;
  mlir::MLIRContext *v9;
  _QWORD *v10;
  void *v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 **TypeUniquer;
  uint64_t v15;
  unsigned int v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  mlir::MLIRContext *v22;
  _QWORD v23[2];
  void **p_p;
  void *__p;
  mlir::AffineMap *v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  _QWORD v30[2];

  v20 = a3;
  if (!MultiDimIdentityMap)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
    MultiDimIdentityMap = mlir::AffineMap::getMultiDimIdentityMap(a2, Context, v9);
  }
  v10 = (_QWORD *)mlir::AffineMapAttr::get(MultiDimIdentityMap);
  if (a5)
  {
    v11 = *(void **)(*(_QWORD *)a5 + 136);
    v12 = v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
    v13 = v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id ? a5 : 0;
    v30[0] = v13;
    if (v12)
    {
      mlir::IntegerAttr::getValue(v30, (llvm::APInt *)&__p);
      v18 = (int)v26;
      if (v26 >= 0x41)
      {
        if (v18 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) >= 0x41)
        {
          if (__p)
            operator delete[](__p);
          goto LABEL_8;
        }
        v19 = *(_QWORD *)__p;
        operator delete[](__p);
        if (v19)
          goto LABEL_8;
      }
      else if (__p)
      {
        goto LABEL_8;
      }
      a5 = 0;
    }
  }
LABEL_8:
  v22 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(v22);
  v21[0] = &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id;
  v21[1] = &v22;
  v30[0] = _ZN4llvm12function_refIFvPN4mlir6detail17MemRefTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10MemRefTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_13AffineMapAttrERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESM_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSO_E_EEvlS4_;
  v30[1] = v21;
  __p = a1;
  v26 = a2;
  v27 = v20;
  v28[0] = v10;
  if (v10)
    v15 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v10 + 8);
  else
    v15 = 0;
  v28[1] = v15;
  v29 = a5;
  v16 = llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute>((uint64_t)&__p, &v27, v28, &v29);
  v23[0] = &__p;
  v23[1] = v30;
  p_p = &__p;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id, v16, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::AffineMapAttr &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::AffineMapAttr &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&p_p, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::AffineMapAttr &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::AffineMapAttr &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v23);
}

uint64_t mlir::MemRefType::verify(void (*a1)(_QWORD *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  BOOL v20;
  uint64_t v21;
  int *v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  int *v34;
  char *v35;
  char *v36;
  __int128 v37;
  _QWORD **v38;
  _QWORD **v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  int *v44;
  char *v45;
  char *v46;
  __int128 v47;
  _QWORD **v48;
  _QWORD **v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64_t v58;
  int64_t v59;
  int64_t v60;
  _QWORD v61[2];
  int v62;
  const char *v63;
  uint64_t v64;
  _QWORD v65[3];
  void *v66;
  unsigned int v67;
  unsigned int v68;
  _BYTE v69[96];
  void *v70;
  _QWORD *v71;
  void *__p;
  _QWORD **v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v61[0] = a6;
  v61[1] = a7;
  v65[0] = a5;
  if (mlir::Type::isIntOrIndexOrFloat((mlir::Type *)v65)
    || ((v13 = *(void **)(*(_QWORD *)v65[0] + 136), v13 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      ? (v14 = v13 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      : (v14 = 1),
        !v14 ? (v15 = v13 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (v15 = 1),
        !v15 ? (v16 = v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) : (v16 = 1),
        v16 || mlir::detail::InterfaceMap::lookup<mlir::MemRefElementTypeInterface>(*(_QWORD *)v65[0] + 8)))
  {
    if (a4)
    {
      v17 = 8 * a4;
      v18 = (_QWORD *)a3;
      while (*v18 < 0x8000000000000001)
      {
        ++v18;
        v17 -= 8;
        if (!v17)
          goto LABEL_17;
      }
      a1(v65, a2);
      if (v65[0])
      {
        v62 = 3;
        v63 = "invalid memref size";
        v64 = 19;
        v22 = &v62;
        v23 = (char *)v66;
        if (v67 >= v68)
        {
          v55 = v67 + 1;
          if (v66 <= &v62 && (char *)v66 + 24 * v67 > (char *)&v62)
          {
            v58 = (char *)&v62 - (_BYTE *)v66;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v55, 24);
            v23 = (char *)v66;
            v22 = (int *)((char *)v66 + v58);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v55, 24);
            v22 = &v62;
            v23 = (char *)v66;
          }
        }
        v24 = &v23[24 * v67];
        v25 = *(_OWORD *)v22;
        *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
        *(_OWORD *)v24 = v25;
        ++v67;
      }
      v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v65);
      if (v65[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v65);
      if (v74)
      {
        v26 = (_QWORD **)__p;
        if (__p)
        {
          v27 = v73;
          v28 = __p;
          if (v73 != __p)
          {
            do
              v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
            while (v27 != v26);
            v28 = __p;
          }
          v73 = v26;
          operator delete(v28);
        }
        v29 = v70;
        if (!v70)
          goto LABEL_81;
        v30 = v71;
        v31 = v70;
        if (v71 == v70)
          goto LABEL_80;
        do
        {
          v33 = (void *)*--v30;
          v32 = v33;
          *v30 = 0;
          if (v33)
            operator delete[](v32);
        }
        while (v30 != v29);
        goto LABEL_79;
      }
    }
    else
    {
LABEL_17:
      if (!mlir::MemRefLayoutAttrInterface::verifyLayout(v61, a3, a4, (uint64_t)a1, a2))
        return 0;
      if (!a8)
        return 1;
      v19 = *(void **)(*(_QWORD *)a8 + 136);
      if (v19 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        return 1;
      v20 = v19 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id
         || v19 == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id;
      if (v20 || *(_UNKNOWN **)(**(_QWORD **)a8 + 24) != &mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id)
        return 1;
      a1(v65, a2);
      if (v65[0])
      {
        v62 = 3;
        v63 = "unsupported memory space Attribute";
        v64 = 34;
        v44 = &v62;
        v45 = (char *)v66;
        if (v67 >= v68)
        {
          v57 = v67 + 1;
          if (v66 <= &v62 && (char *)v66 + 24 * v67 > (char *)&v62)
          {
            v60 = (char *)&v62 - (_BYTE *)v66;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v57, 24);
            v45 = (char *)v66;
            v44 = (int *)((char *)v66 + v60);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v57, 24);
            v44 = &v62;
            v45 = (char *)v66;
          }
        }
        v46 = &v45[24 * v67];
        v47 = *(_OWORD *)v44;
        *((_QWORD *)v46 + 2) = *((_QWORD *)v44 + 2);
        *(_OWORD *)v46 = v47;
        ++v67;
      }
      v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v65);
      if (v65[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v65);
      if (v74)
      {
        v48 = (_QWORD **)__p;
        if (__p)
        {
          v49 = v73;
          v50 = __p;
          if (v73 != __p)
          {
            do
              v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
            while (v49 != v48);
            v50 = __p;
          }
          v73 = v48;
          operator delete(v50);
        }
        v29 = v70;
        if (!v70)
          goto LABEL_81;
        v51 = v71;
        v31 = v70;
        if (v71 == v70)
          goto LABEL_80;
        do
        {
          v53 = (void *)*--v51;
          v52 = v53;
          *v51 = 0;
          if (v53)
            operator delete[](v52);
        }
        while (v51 != v29);
        goto LABEL_79;
      }
    }
  }
  else
  {
    a1(v65, a2);
    if (v65[0])
    {
      v62 = 3;
      v63 = "invalid memref element type";
      v64 = 27;
      v34 = &v62;
      v35 = (char *)v66;
      if (v67 >= v68)
      {
        v56 = v67 + 1;
        if (v66 <= &v62 && (char *)v66 + 24 * v67 > (char *)&v62)
        {
          v59 = (char *)&v62 - (_BYTE *)v66;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v56, 24);
          v35 = (char *)v66;
          v34 = (int *)((char *)v66 + v59);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v56, 24);
          v34 = &v62;
          v35 = (char *)v66;
        }
      }
      v36 = &v35[24 * v67];
      v37 = *(_OWORD *)v34;
      *((_QWORD *)v36 + 2) = *((_QWORD *)v34 + 2);
      *(_OWORD *)v36 = v37;
      ++v67;
    }
    v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v65);
    if (v65[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v65);
    if (v74)
    {
      v38 = (_QWORD **)__p;
      if (__p)
      {
        v39 = v73;
        v40 = __p;
        if (v73 != __p)
        {
          do
            v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
          while (v39 != v38);
          v40 = __p;
        }
        v73 = v38;
        operator delete(v40);
      }
      v29 = v70;
      if (!v70)
        goto LABEL_81;
      v41 = v71;
      v31 = v70;
      if (v71 == v70)
      {
LABEL_80:
        v71 = v29;
        operator delete(v31);
LABEL_81:
        if (v66 != v69)
          free(v66);
        return v21;
      }
      do
      {
        v43 = (void *)*--v41;
        v42 = v43;
        *v41 = 0;
        if (v43)
          operator delete[](v42);
      }
      while (v41 != v29);
LABEL_79:
      v31 = v70;
      goto LABEL_80;
    }
  }
  return v21;
}

uint64_t mlir::UnrankedMemRefType::verify(void (*a1)(_QWORD *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  void *v11;
  BOOL v12;
  uint64_t v13;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  int *v27;
  char *v28;
  char *v29;
  __int128 v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  int64_t v40;
  int v41;
  const char *v42;
  uint64_t v43;
  _QWORD v44[3];
  void *v45;
  unsigned int v46;
  unsigned int v47;
  _BYTE v48[96];
  void *v49;
  _QWORD *v50;
  void *__p;
  _QWORD **v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v44[0] = a3;
  if (mlir::Type::isIntOrIndexOrFloat((mlir::Type *)v44)
    || ((v7 = *(void **)(*(_QWORD *)v44[0] + 136), v7 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      ? (v8 = v7 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      : (v8 = 1),
        !v8 ? (v9 = v7 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (v9 = 1),
        !v9 ? (v10 = v7 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) : (v10 = 1),
        v10 || mlir::detail::InterfaceMap::lookup<mlir::MemRefElementTypeInterface>(*(_QWORD *)v44[0] + 8)))
  {
    if (!a4)
      return 1;
    v11 = *(void **)(*(_QWORD *)a4 + 136);
    if (v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      return 1;
    v12 = v11 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id
       || v11 == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id;
    if (v12 || *(_UNKNOWN **)(**(_QWORD **)a4 + 24) != &mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id)
      return 1;
    a1(v44, a2);
    if (v44[0])
    {
      v41 = 3;
      v42 = "unsupported memory space Attribute";
      v43 = 34;
      v27 = &v41;
      v28 = (char *)v45;
      if (v46 >= v47)
      {
        v37 = v46 + 1;
        if (v45 <= &v41 && (char *)v45 + 24 * v46 > (char *)&v41)
        {
          v39 = (char *)&v41 - (_BYTE *)v45;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v37, 24);
          v28 = (char *)v45;
          v27 = (int *)((char *)v45 + v39);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v37, 24);
          v27 = &v41;
          v28 = (char *)v45;
        }
      }
      v29 = &v28[24 * v46];
      v30 = *(_OWORD *)v27;
      *((_QWORD *)v29 + 2) = *((_QWORD *)v27 + 2);
      *(_OWORD *)v29 = v30;
      ++v46;
    }
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v44);
    if (v44[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v44);
    if (v53)
    {
      v31 = (_QWORD **)__p;
      if (__p)
      {
        v32 = v52;
        v33 = __p;
        if (v52 != __p)
        {
          do
            v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          v33 = __p;
        }
        v52 = v31;
        operator delete(v33);
      }
      v22 = v49;
      if (!v49)
        goto LABEL_59;
      v34 = v50;
      v24 = v49;
      if (v50 == v49)
        goto LABEL_58;
      do
      {
        v36 = (void *)*--v34;
        v35 = v36;
        *v34 = 0;
        if (v36)
          operator delete[](v35);
      }
      while (v34 != v22);
      goto LABEL_57;
    }
  }
  else
  {
    a1(v44, a2);
    if (v44[0])
    {
      v41 = 3;
      v42 = "invalid memref element type";
      v43 = 27;
      v15 = &v41;
      v16 = (char *)v45;
      if (v46 >= v47)
      {
        v38 = v46 + 1;
        if (v45 <= &v41 && (char *)v45 + 24 * v46 > (char *)&v41)
        {
          v40 = (char *)&v41 - (_BYTE *)v45;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v38, 24);
          v16 = (char *)v45;
          v15 = (int *)((char *)v45 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v38, 24);
          v15 = &v41;
          v16 = (char *)v45;
        }
      }
      v17 = &v16[24 * v46];
      v18 = *(_OWORD *)v15;
      *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
      *(_OWORD *)v17 = v18;
      ++v46;
    }
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v44);
    if (v44[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v44);
    if (v53)
    {
      v19 = (_QWORD **)__p;
      if (__p)
      {
        v20 = v52;
        v21 = __p;
        if (v52 != __p)
        {
          do
            v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          v21 = __p;
        }
        v52 = v19;
        operator delete(v21);
      }
      v22 = v49;
      if (!v49)
        goto LABEL_59;
      v23 = v50;
      v24 = v49;
      if (v50 == v49)
      {
LABEL_58:
        v50 = v22;
        operator delete(v24);
LABEL_59:
        if (v45 != v48)
          free(v45);
        return v13;
      }
      do
      {
        v26 = (void *)*--v23;
        v25 = v26;
        *v23 = 0;
        if (v26)
          operator delete[](v25);
      }
      while (v23 != v22);
LABEL_57:
      v24 = v49;
      goto LABEL_58;
    }
  }
  return v13;
}

uint64_t mlir::getStridesAndOffset(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  void *v6;
  char *AttrData;
  uint64_t v8;
  uint64_t v9;
  mlir::MLIRContext *Context;
  mlir::MLIRContext *v11;
  mlir::MLIRContext **AffineConstantExpr;
  mlir::MLIRContext *v13;
  mlir::MLIRContext *v14;
  uint64_t v15;
  unint64_t v16;
  mlir::MLIRContext ***v17;
  unint64_t v18;
  int64x2_t v19;
  int64x2_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  mlir::MLIRContext ***v24;
  unint64_t v25;
  int64x2_t v26;
  int64x2_t *v27;
  uint64_t v28;
  unint64_t v29;
  int64x2_t *v30;
  mlir::MLIRContext ***v31;
  unint64_t v32;
  int64x2_t v33;
  int64x2_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  mlir::MLIRContext *v38;
  mlir::MLIRContext **CanonicalStridedLayoutExpr;
  mlir::MLIRContext **v40;
  uint64_t NumDims;
  uint64_t NumSymbols;
  mlir::MLIRContext **v43;
  uint64_t v44;
  uint64_t v45;
  mlir::MLIRContext ***v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  mlir::MLIRContext *DesiredBytecodeVersion;
  mlir::MLIRContext *v51;
  uint64_t v52;
  mlir::MLIRContext **v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t LHS;
  unint64_t v59;
  void *v60;
  mlir::MLIRContext **v62;
  _QWORD v63[2];
  uint64_t canMapOperands;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _QWORD v68[5];

  v68[4] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_UNKNOWN **)(*(_QWORD *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id)
    v6 = *(void **)(a1 + 32);
  else
    v6 = 0;
  v66 = v6;
  if (!v6)
  {
    v62 = 0;
    v63[0] = v5;
    v65 = a1;
    v66 = v68;
    v67 = 0x400000000;
    v63[1] = *(_QWORD *)(a1 + 40);
    canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v63);
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&canMapOperands) != 1
      && !mlir::AffineMap::isIdentity((mlir::AffineMap *)&canMapOperands))
    {
LABEL_62:
      v9 = 0;
      v60 = v66;
      if (v66 == v68)
        return v9;
      goto LABEL_59;
    }
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v65);
    AffineConstantExpr = (mlir::MLIRContext **)mlir::getAffineConstantExpr(0, Context, v11);
    v13 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v65);
    v15 = mlir::getAffineConstantExpr((mlir *)1, v13, v14);
    v62 = AffineConstantExpr;
    v16 = *(_QWORD *)(v65 + 16);
    if (v16 > HIDWORD(v67))
    {
      LODWORD(v67) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v16, 8);
      v17 = (mlir::MLIRContext ***)v66;
      v18 = v16;
      if (v16 < 4)
        goto LABEL_66;
      v17 = (mlir::MLIRContext ***)((char *)v66 + 8 * (v16 & 0xFFFFFFFFFFFFFFFCLL));
      v18 = v16 & 3;
      v19 = vdupq_n_s64((unint64_t)AffineConstantExpr);
      v20 = (int64x2_t *)((char *)v66 + 16);
      v21 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v20[-1] = v19;
        *v20 = v19;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      if (v16 != (v16 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_66:
        do
        {
          *v17++ = AffineConstantExpr;
          --v18;
        }
        while (v18);
      }
LABEL_32:
      LODWORD(v67) = v16;
      if (!mlir::AffineMap::isIdentity((mlir::AffineMap *)&canMapOperands)
        || (v36 = *(_QWORD *)(v65 + 16)) != 0
        && (v37 = *(_QWORD *)(v65 + 8),
            v38 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v65),
            CanonicalStridedLayoutExpr = mlir::makeCanonicalStridedLayoutExpr(v37, v36, v38),
            !extractStrides((uint64_t)CanonicalStridedLayoutExpr, v15, (uint64_t)v66, v67, (unint64_t *)&v62)))
      {
        v40 = (mlir::MLIRContext **)mlir::AffineMap::getResult((mlir::AffineMap *)&canMapOperands, 0);
        NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&canMapOperands);
        NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&canMapOperands);
        v43 = mlir::simplifyAffineExpr(v40, NumDims, NumSymbols);
        if (!extractStrides((uint64_t)v43, v15, (uint64_t)v66, v67, (unint64_t *)&v62))
        {
LABEL_61:
          v62 = 0;
          LODWORD(v67) = 0;
          goto LABEL_62;
        }
        v44 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&canMapOperands);
        v45 = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&canMapOperands);
        v62 = mlir::simplifyAffineExpr(v62, v44, v45);
        if ((_DWORD)v67)
        {
          v46 = (mlir::MLIRContext ***)v66;
          v47 = 8 * v67;
          do
          {
            *v46 = mlir::simplifyAffineExpr(*v46, v44, v45);
            ++v46;
            v47 -= 8;
          }
          while (v47);
          if ((_DWORD)v67)
          {
            v48 = v66;
            v49 = 8 * v67;
            do
            {
              v63[0] = *v48;
              DesiredBytecodeVersion = (mlir::MLIRContext *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v63);
              v52 = mlir::getAffineConstantExpr(0, DesiredBytecodeVersion, v51);
              if (v63[0] == v52)
                goto LABEL_61;
              ++v48;
              v49 -= 8;
            }
            while (v49);
          }
        }
      }
      v53 = v62;
      v63[0] = v62;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)v63) == 5)
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(v63, (uint64_t)v53);
        if (v63[0])
          goto LABEL_45;
      }
      else
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(v63, 0);
        if (v63[0])
        {
LABEL_45:
          *a3 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)v63);
          v54 = v67;
          if (!(_DWORD)v67)
          {
LABEL_58:
            v9 = 1;
            v60 = v66;
            if (v66 == v68)
              return v9;
LABEL_59:
            free(v60);
            return v9;
          }
          goto LABEL_49;
        }
      }
      *a3 = 0x8000000000000000;
      v54 = v67;
      if (!(_DWORD)v67)
        goto LABEL_58;
LABEL_49:
      v55 = (uint64_t *)v66;
      v56 = 8 * v54;
      while (1)
      {
        v57 = *v55;
        v63[0] = *v55;
        if (mlir::AffineExpr::getKind((mlir::AffineExpr *)v63) == 5)
        {
          mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(v63, v57);
          if (v63[0])
            goto LABEL_52;
        }
        else
        {
          mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(v63, 0);
          if (v63[0])
          {
LABEL_52:
            LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)v63);
            v59 = *(unsigned int *)(a2 + 8);
            if (v59 >= *(unsigned int *)(a2 + 12))
              goto LABEL_57;
            goto LABEL_53;
          }
        }
        v59 = *(unsigned int *)(a2 + 8);
        LHS = 0x8000000000000000;
        if (v59 >= *(unsigned int *)(a2 + 12))
        {
LABEL_57:
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v59 + 1, 8);
          v59 = *(unsigned int *)(a2 + 8);
        }
LABEL_53:
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v59) = LHS;
        ++*(_DWORD *)(a2 + 8);
        ++v55;
        v56 -= 8;
        if (!v56)
          goto LABEL_58;
      }
    }
    v22 = v67;
    if (v67 >= v16)
      v23 = *(_QWORD *)(v65 + 16);
    else
      v23 = v67;
    if (v23)
    {
      if (v23 < 4)
      {
        v24 = (mlir::MLIRContext ***)v66;
        v25 = v23;
        do
        {
LABEL_24:
          *v24++ = AffineConstantExpr;
          --v25;
        }
        while (v25);
        goto LABEL_25;
      }
      v24 = (mlir::MLIRContext ***)((char *)v66 + 8 * (v23 & 0xFFFFFFFC));
      v25 = v23 & 3;
      v26 = vdupq_n_s64((unint64_t)AffineConstantExpr);
      v27 = (int64x2_t *)((char *)v66 + 16);
      v28 = v23 & 0xFFFFFFFC;
      do
      {
        v27[-1] = v26;
        *v27 = v26;
        v27 += 2;
        v28 -= 4;
      }
      while (v28);
      if (v23 != (v23 & 0xFFFFFFFC))
        goto LABEL_24;
    }
LABEL_25:
    v29 = v16 - v22;
    if (v16 <= v22)
      goto LABEL_32;
    v30 = (int64x2_t *)((char *)v66 + 8 * v22);
    if (v29 >= 4)
    {
      v31 = (mlir::MLIRContext ***)v30 + (v29 & 0xFFFFFFFFFFFFFFFCLL);
      v32 = v29 & 3;
      v33 = vdupq_n_s64((unint64_t)AffineConstantExpr);
      v34 = v30 + 1;
      v35 = v29 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v34[-1] = v33;
        *v34 = v33;
        v34 += 2;
        v35 -= 4;
      }
      while (v35);
      if (v29 == (v29 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_32;
    }
    else
    {
      v31 = (mlir::MLIRContext ***)((char *)v66 + 8 * v22);
      v32 = v29;
    }
    do
    {
      *v31++ = AffineConstantExpr;
      --v32;
    }
    while (v32);
    goto LABEL_32;
  }
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v66);
  llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>(a2, *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8), AttrData, &AttrData[8 * v8]);
  *a3 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v66);
  return 1;
}

void mlir::getStridesAndOffset(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  void *__src;
  uint64_t v9;
  _QWORD v10[7];

  v10[6] = *MEMORY[0x1E0C80C00];
  v7 = 0;
  __src = v10;
  v9 = 0x600000000;
  mlir::getStridesAndOffset(a1, (uint64_t)&__src, &v7);
  v3 = (void *)(a2 + 16);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x600000000;
  if (&__src == (void **)a2)
    goto LABEL_9;
  v4 = v9;
  if (!(_DWORD)v9)
    goto LABEL_9;
  if (v9 < 7)
  {
    v5 = v9;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v9, 8);
  v5 = v9;
  if ((_DWORD)v9)
  {
    v3 = *(void **)a2;
LABEL_7:
    memcpy(v3, __src, 8 * v5);
  }
  *(_DWORD *)(a2 + 8) = v4;
LABEL_9:
  v6 = __src;
  *(_QWORD *)(a2 + 64) = v7;
  if (v6 != v10)
    free(v6);
}

uint64_t mlir::TupleType::getTypes(mlir::TupleType *this)
{
  return *(_QWORD *)this + 16;
}

mlir::MLIRContext **mlir::makeCanonicalStridedLayoutExpr(uint64_t a1, unint64_t a2, mlir::MLIRContext *a3)
{
  mlir *v6;
  uint64_t AffineDimExpr;
  uint64_t v8;
  unsigned int v9;
  mlir::MLIRContext **CanonicalStridedLayoutExpr;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  v12 = v14;
  v13 = 0x400000000;
  if (a2 >= 5)
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v12, v14, a2, 8);
  if ((_DWORD)a2)
  {
    v6 = 0;
    do
    {
      AffineDimExpr = mlir::getAffineDimExpr(v6, a3, a3);
      v8 = v13;
      if (v13 >= (unint64_t)HIDWORD(v13))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v12, v14, v13 + 1, 8);
        v8 = v13;
      }
      *((_QWORD *)v12 + v8) = AffineDimExpr;
      v9 = v13 + 1;
      LODWORD(v13) = v13 + 1;
      v6 = (mlir *)((char *)v6 + 1);
    }
    while ((mlir *)a2 != v6);
  }
  else
  {
    v9 = v13;
  }
  CanonicalStridedLayoutExpr = mlir::makeCanonicalStridedLayoutExpr(a1, a2, (mlir::BytecodeWriterConfig *)v12, v9, a3);
  if (v12 != v14)
    free(v12);
  return CanonicalStridedLayoutExpr;
}

mlir::MLIRContext **mlir::makeCanonicalStridedLayoutExpr(uint64_t a1, uint64_t a2, mlir::BytecodeWriterConfig *a3, uint64_t a4, mlir::MLIRContext *a5)
{
  mlir::MLIRContext *v8;
  uint64_t NumSymbols;
  char v10;
  mlir::BytecodeWriterConfig *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AffineSymbolExpr;
  unint64_t v17;
  mlir::MLIRContext **v18;
  uint64_t AffineConstantExpr;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  mlir::MLIRContext **v24;
  unsigned int NumDims;
  unint64_t v26;
  mlir::MLIRContext **v27;
  mlir::BytecodeWriterConfig *v28;
  uint64_t v29;
  mlir::AffineMap *v30;
  _QWORD v31[5];

  v31[4] = *MEMORY[0x1E0C80C00];
  v28 = a3;
  v29 = a4;
  if (!a2)
    return (mlir::MLIRContext **)mlir::getAffineConstantExpr(0, a5, a3);
  mlir::AffineMap::inferFromExprList(&v28, 1uLL, (uint64_t)&v30);
  NumDims = mlir::AffineMap::getNumDims(v30);
  NumSymbols = mlir::AffineMap::getNumSymbols(v30);
  v27 = 0;
  if (v29)
  {
    v10 = 0;
    v11 = v28;
    v12 = 8 * a2 - 8;
    v13 = 8 * v29 - 8;
    v14 = 1;
    while (1)
    {
      v15 = *(_QWORD *)(a1 + v12);
      v26 = *(_QWORD *)((char *)v11 + v13);
      if ((v10 & 1) != 0)
        break;
      AffineConstantExpr = mlir::getAffineConstantExpr((mlir *)v14, a5, v8);
      v20 = (unint64_t)v27;
      v18 = (mlir::MLIRContext **)mlir::AffineExpr::operator*(&v26, AffineConstantExpr);
      if (v20)
        goto LABEL_8;
LABEL_9:
      v27 = v18;
      if (v15 <= 1)
        v21 = 1;
      else
        v21 = v15;
      if (v13)
      {
        v14 *= v21;
        v10 |= v15 < 1;
        v22 = v12;
        v12 -= 8;
        v13 -= 8;
        if (v22)
          continue;
      }
      goto LABEL_17;
    }
    AffineSymbolExpr = mlir::getAffineSymbolExpr((mlir *)NumSymbols, a5, v8);
    NumSymbols = (NumSymbols + 1);
    v17 = (unint64_t)v27;
    v18 = (mlir::MLIRContext **)mlir::AffineExpr::operator*(&v26, AffineSymbolExpr);
    if (!v17)
      goto LABEL_9;
LABEL_8:
    v18 = (mlir::MLIRContext **)mlir::AffineExpr::operator+((unint64_t *)&v27, (uint64_t)v18);
    goto LABEL_9;
  }
  v18 = 0;
LABEL_17:
  v24 = mlir::simplifyAffineExpr(v18, NumDims, NumSymbols);
  if (v30 != (mlir::AffineMap *)v31)
    free(v30);
  return v24;
}

BOOL mlir::isStrided(uint64_t a1)
{
  char StridesAndOffset;
  uint64_t v3;
  void *v4[2];
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v4[0] = v5;
  v4[1] = (void *)0x400000000;
  StridesAndOffset = mlir::getStridesAndOffset(a1, (uint64_t)v4, &v3);
  if (v4[0] != v5)
    free(v4[0]);
  return StridesAndOffset != 0;
}

uint64_t extractStrides(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  unsigned int Position;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t LHS;
  uint64_t v16;
  uint64_t v17;
  char Strides;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t RHS;

  v27 = a2;
  RHS = a1;
  if ((int)mlir::AffineExpr::getKind((mlir::AffineExpr *)&RHS) >= 5)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&RHS, 0);
    v26 = RHS;
    if (RHS)
      goto LABEL_3;
LABEL_8:
    v28 = a1;
    RHS = a1;
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&RHS) == 6)
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&RHS, a1);
      if (RHS)
      {
LABEL_10:
        Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&RHS);
        v12 = mlir::AffineExpr::operator+((unint64_t *)(a3 + 8 * Position), a2);
        v13 = &RHS;
LABEL_11:
        *(_QWORD *)(a3 + 8 * mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)v13)) = v12;
        return 1;
      }
    }
    else
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&RHS, 0);
      if (RHS)
        goto LABEL_10;
    }
    v14 = mlir::AffineExpr::operator*((unint64_t *)&v28, a2);
    *a5 = mlir::AffineExpr::operator+(a5, v14);
    return 1;
  }
  mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&RHS, a1);
  v26 = RHS;
  if (!RHS)
    goto LABEL_8;
LABEL_3:
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v26) == 4
    || mlir::AffineExpr::getKind((mlir::AffineExpr *)&v26) == 3
    || mlir::AffineExpr::getKind((mlir::AffineExpr *)&v26) == 2)
  {
    return 0;
  }
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v26) == 1)
  {
    LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v26);
    RHS = LHS;
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&RHS) == 6)
      v16 = LHS;
    else
      v16 = 0;
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&RHS, v16);
    v28 = RHS;
    if (RHS)
    {
      v20 = (unint64_t *)(a3 + 8 * mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v28));
      RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v26);
      v21 = mlir::AffineExpr::operator*((unint64_t *)&RHS, a2);
      v12 = mlir::AffineExpr::operator+(v20, v21);
      v13 = &v28;
      goto LABEL_11;
    }
    RHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v26);
    mlir::AffineExpr::isSymbolicOrConstant((mlir::AffineExpr *)&RHS);
    if (v22)
    {
      v23 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v26);
      v24 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v26);
    }
    else
    {
      v23 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v26);
      v24 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v26);
    }
    v25 = mlir::AffineExpr::operator*((unint64_t *)&v27, v24);
    return extractStrides(v23, v25, a3, a4, a5);
  }
  else
  {
    mlir::AffineExpr::getKind((mlir::AffineExpr *)&v26);
    v17 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v26);
    Strides = extractStrides(v17, a2, a3, a4, a5);
    v19 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v26);
    return extractStrides(v19, a2, a3, a4, a5) && Strides != 0;
  }
}

uint64_t mlir::StorageUniquer::get<mlir::detail::ComplexTypeStorage,mlir::Type &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v11;
  int v12;
  unint64_t v13;
  unsigned __int8 **v15;
  _QWORD v16[2];
  uint64_t *v17;
  uint64_t v18;
  _QWORD v19[2];

  v5 = a4;
  v19[0] = a2;
  v19[1] = a3;
  v18 = *a5;
  v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v6 & 1) == 0)
  {
    v15 = a1;
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v11;
    v5 = a4;
    a1 = v15;
    if (v12)
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v5 = a4;
      a1 = v15;
    }
  }
  v8 = v7[19];
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (8 * ((v18 >> 4) ^ (v18 >> 9)) + 8));
  v16[0] = &v18;
  v16[1] = v19;
  v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895* ((((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 32) >> 15) ^ (-348639895* (v8 ^ (v9 >> 47) ^ v9))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::ComplexTypeStorage * mlir::StorageUniquer::get<mlir::detail::ComplexTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::ComplexTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::ComplexTypeStorage * mlir::StorageUniquer::get<mlir::detail::ComplexTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::ComplexTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::ComplexTypeStorage * mlir::StorageUniquer::get<mlir::detail::ComplexTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::ComplexTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **a1;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::ComplexTypeStorage * mlir::StorageUniquer::get<mlir::detail::ComplexTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::ComplexTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  char *buffer;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  void (*v14)(uint64_t, _QWORD *);

  v4 = **a1;
  a2[10] += 16;
  v5 = *a2;
  v6 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (*a2)
    v7 = v6 + 16 > a2[1] - *a2;
  else
    v7 = 1;
  if (v7)
  {
    v8 = *((_DWORD *)a2 + 6) >> 7;
    if (v8 >= 0x1E)
      LOBYTE(v8) = 30;
    v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    v11 = *((unsigned int *)a2 + 6);
    if (v11 >= *((_DWORD *)a2 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), a2 + 4, v11 + 1, 8);
      LODWORD(v11) = *((_DWORD *)a2 + 6);
    }
    *(_QWORD *)(a2[2] + 8 * v11) = buffer;
    ++*((_DWORD *)a2 + 6);
    a2[1] = (uint64_t)&buffer[v9];
    v12 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *a2 = (uint64_t)(v12 + 2);
    *v12 = 0;
    v12[1] = v4;
    v13 = a1[1];
    v14 = (void (*)(uint64_t, _QWORD *))*v13;
    if (*v13)
      goto LABEL_13;
  }
  else
  {
    v12 = (_QWORD *)(v5 + v6);
    *a2 = v5 + v6 + 16;
    *v12 = 0;
    v12[1] = v4;
    v13 = a1[1];
    v14 = (void (*)(uint64_t, _QWORD *))*v13;
    if (*v13)
LABEL_13:
      v14(v13[1], v12);
  }
  return v12;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail18ComplexTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11ComplexTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::FunctionTypeStorage,mlir::TypeRange &,mlir::TypeRange &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, __int128 *a6)
{
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v18[2];
  __int128 *v19;
  _QWORD v20[2];
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v20[0] = a2;
  v20[1] = a3;
  v8 = *a6;
  v21 = *a5;
  v22 = v8;
  v9 = llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator>(v21, 0, v21, *((uint64_t *)&v21 + 1));
  v10 = llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator>(v22, 0, v22, *((uint64_t *)&v22 + 1));
  v11 = ((v10 << 32) - 1) ^ (((v10 << 32) - 1) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = ((v13 >> 31) ^ v13 | (v9 << 32))
      + ~((unint64_t)((v13 >> 31) ^ v13) << 32);
  v15 = 9
      * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v18[0] = &v21;
  v18[1] = v20;
  v19 = &v21;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, (v16 >> 31) ^ v16, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FunctionTypeStorage * mlir::StorageUniquer::get<mlir::detail::FunctionTypeStorage,mlir::TypeRange &,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::FunctionTypeStorage *)>,mlir::TypeID,mlir::TypeRange &,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v19, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FunctionTypeStorage * mlir::StorageUniquer::get<mlir::detail::FunctionTypeStorage,mlir::TypeRange &,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::FunctionTypeStorage *)>,mlir::TypeID,mlir::TypeRange &,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v18);
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  char *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char v91;
  unint64_t v93;
  uint64_t *v94;
  char v95;
  char v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  char *v100;
  BOOL v101;
  char v102;
  uint64_t v103;
  unsigned int v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  v124 = a4;
  if ((v6 & 1) == 0)
  {
    v118 = a3;
    a4 = v124;
    a3 = v118;
    if (v119)
    {
      v120 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v120 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v120;
      a4 = v124;
      a3 = v118;
    }
  }
  v7 = llvm::hashing::detail::get_execution_seed(void)::seed;
  if (a1 != a3 || a2 != a4)
  {
    v129 = a1 == a3;
    v10 = mlir::TypeRange::dereference_iterator(a1, a2);
    v11 = (v10 >> 4) ^ (v10 >> 9);
    v130 = v11;
    v12 = a2 + 1;
    if (v129)
    {
      if (v12 == v124)
      {
        v8 = 8;
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v130, v8, v7);
      }
      v109 = mlir::TypeRange::dereference_iterator(a1, v12);
      v14 = (v109 >> 4) ^ (v109 >> 9);
      v131 = v14;
      if (a2 + 2 == v124)
      {
        v8 = 16;
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v130, v8, v7);
      }
      v110 = mlir::TypeRange::dereference_iterator(a1, a2 + 2);
      v111 = (v110 >> 4) ^ (v110 >> 9);
      v132 = v111;
      if (a2 + 3 == v124)
      {
        v8 = 24;
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v130, v8, v7);
      }
      v112 = mlir::TypeRange::dereference_iterator(a1, a2 + 3);
      v113 = (v112 >> 4) ^ (v112 >> 9);
      v133 = v113;
      if (a2 + 4 == v124)
      {
        v8 = 32;
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v130, v8, v7);
      }
      v114 = mlir::TypeRange::dereference_iterator(a1, a2 + 4);
      v18 = (v114 >> 4) ^ (v114 >> 9);
      v134 = v18;
      if (a2 + 5 == v124)
      {
        v8 = 40;
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v130, v8, v7);
      }
      v115 = mlir::TypeRange::dereference_iterator(a1, a2 + 5);
      v20 = (v115 >> 4) ^ (v115 >> 9);
      v135 = v20;
      if (a2 + 6 == v124)
      {
        v8 = 48;
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v130, v8, v7);
      }
      v116 = mlir::TypeRange::dereference_iterator(a1, a2 + 6);
      v22 = (v116 >> 4) ^ (v116 >> 9);
      v136 = v22;
      if (a2 + 7 == v124)
      {
        v8 = 56;
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v130, v8, v7);
      }
      v127 = v111;
      v117 = mlir::TypeRange::dereference_iterator(a1, a2 + 7);
      v125 = v113;
      v24 = (v117 >> 4) ^ (v117 >> 9);
      v137 = v24;
      v25 = a2 + 8;
      if (v25 == v124)
      {
        v8 = 64;
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v130, v8, v7);
      }
    }
    else
    {
      v13 = mlir::TypeRange::dereference_iterator(a1, v12);
      v14 = (v13 >> 4) ^ (v13 >> 9);
      v131 = v14;
      v15 = mlir::TypeRange::dereference_iterator(a1, a2 + 2);
      v127 = (v15 >> 4) ^ (v15 >> 9);
      v132 = v127;
      v16 = mlir::TypeRange::dereference_iterator(a1, a2 + 3);
      v125 = (v16 >> 4) ^ (v16 >> 9);
      v133 = v125;
      v17 = mlir::TypeRange::dereference_iterator(a1, a2 + 4);
      v18 = (v17 >> 4) ^ (v17 >> 9);
      v134 = v18;
      v19 = mlir::TypeRange::dereference_iterator(a1, a2 + 5);
      v20 = (v19 >> 4) ^ (v19 >> 9);
      v135 = v20;
      v21 = mlir::TypeRange::dereference_iterator(a1, a2 + 6);
      v22 = (v21 >> 4) ^ (v21 >> 9);
      v136 = v22;
      v23 = mlir::TypeRange::dereference_iterator(a1, a2 + 7);
      v24 = (v23 >> 4) ^ (v23 >> 9);
      v137 = v24;
      v25 = a2 + 8;
    }
    v121 = v11;
    v26 = v7;
    v123 = a1;
    mlir::TypeRange::dereference_iterator(a1, v25);
    v27 = v26 ^ (v26 >> 47);
    v28 = 0x9DDFEA08EB382D69
        * (v26 ^ (((0x9DDFEA08EB382D69 * (v27 ^ (0xB492B66FBE98F273 * v26))) ^ v26) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                * (v27 ^ (0xB492B66FBE98F273 * v26))));
    v29 = 0x9DDFEA08EB382D69 * (v28 ^ (v28 >> 47));
    v30 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v26 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v26 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    v31 = __ROR8__(v27 - 0x622015F714C7D297 * (v30 ^ (v30 >> 47)), 33);
    v32 = 0xB492B66FBE98F273 * v31;
    v33 = v29 + v18 - 0x4B6D499041670D8DLL * v31;
    v34 = v20 + v22 + v33 + v24;
    v35 = __ROR8__(v7 ^ 0xB492B66FBE98F273, 49);
    v36 = v20 + v35 - 0x4B6D499041670D8DLL * __ROR8__(v22 + v26 - 0x4B6D499041670D8DLL * v26, 42);
    v37 = __ROR8__(v20 + v22 + v33, 44) + v33 + __ROR8__(v36 + v127 + v24 + v33, 21);
    v38 = v121 - 0x6D8ED9027DD26057 * v7;
    v39 = v124;
    v40 = v38 + v14 + v127 + v125;
    v41 = (0xB492B66FBE98F273 * __ROR8__(v35 + v7 + v14, 37)) ^ v29;
    v42 = __ROR8__(v38 + v14 + v127, 44) + v38 + __ROR8__(v41 + v27 + v38 + v125, 21);
    v122 = ~(unint64_t)&v130;
    v43 = 64;
    v44 = v129;
    while (1)
    {
      if (v44 && v25 == v39)
      {
        v45 = 0;
      }
      else
      {
        v126 = v41;
        v128 = v37;
        v50 = v123;
        v51 = mlir::TypeRange::dereference_iterator(v123, v25);
        v44 = v129;
        v130 = (v51 >> 4) ^ (v51 >> 9);
        v52 = v25 + 1;
        if (!v129)
        {
          v54 = mlir::TypeRange::dereference_iterator(v123, v52);
          v131 = (v54 >> 4) ^ (v54 >> 9);
          v55 = mlir::TypeRange::dereference_iterator(v123, v25 + 2);
          v132 = (v55 >> 4) ^ (v55 >> 9);
          v56 = mlir::TypeRange::dereference_iterator(v123, v25 + 3);
          v133 = (v56 >> 4) ^ (v56 >> 9);
          v57 = mlir::TypeRange::dereference_iterator(v123, v25 + 4);
          v134 = (v57 >> 4) ^ (v57 >> 9);
          v58 = mlir::TypeRange::dereference_iterator(v123, v25 + 5);
          v135 = (v58 >> 4) ^ (v58 >> 9);
          v59 = mlir::TypeRange::dereference_iterator(v123, v25 + 6);
          v136 = (v59 >> 4) ^ (v59 >> 9);
          v60 = mlir::TypeRange::dereference_iterator(v123, v25 + 7);
          v137 = (v60 >> 4) ^ (v60 >> 9);
          v25 += 8;
          goto LABEL_20;
        }
        v39 = v124;
        if (v52 == v124)
        {
          v45 = 8;
          v53 = (char *)&v131;
        }
        else
        {
          v50 = v123;
          v61 = mlir::TypeRange::dereference_iterator(v123, v52);
          v39 = v124;
          v131 = (v61 >> 4) ^ (v61 >> 9);
          if (v25 + 2 == v124)
          {
            v45 = 16;
            v53 = (char *)&v132;
          }
          else
          {
            v62 = mlir::TypeRange::dereference_iterator(v123, v25 + 2);
            v39 = v124;
            v132 = (v62 >> 4) ^ (v62 >> 9);
            if (v25 + 3 == v124)
            {
              v45 = 24;
              v53 = (char *)&v133;
            }
            else
            {
              v63 = mlir::TypeRange::dereference_iterator(v123, v25 + 3);
              v39 = v124;
              v133 = (v63 >> 4) ^ (v63 >> 9);
              if (v25 + 4 == v124)
              {
                v45 = 32;
                v53 = (char *)&v134;
              }
              else
              {
                v64 = mlir::TypeRange::dereference_iterator(v123, v25 + 4);
                v39 = v124;
                v134 = (v64 >> 4) ^ (v64 >> 9);
                if (v25 + 5 == v124)
                {
                  v45 = 40;
                  v53 = (char *)&v135;
                }
                else
                {
                  v65 = mlir::TypeRange::dereference_iterator(v123, v25 + 5);
                  v39 = v124;
                  v135 = (v65 >> 4) ^ (v65 >> 9);
                  if (v25 + 6 == v124)
                  {
                    v45 = 48;
                    v53 = (char *)&v136;
                  }
                  else
                  {
                    v66 = mlir::TypeRange::dereference_iterator(v123, v25 + 6);
                    v39 = v124;
                    v136 = (v66 >> 4) ^ (v66 >> 9);
                    if (v25 + 7 != v124)
                    {
                      v104 = mlir::TypeRange::dereference_iterator(v123, v25 + 7);
                      v137 = (v104 >> 4) ^ (v104 >> 9);
                      v25 += 8;
                      if (v25 == v124)
                      {
                        v39 = v124;
                        v25 = v124;
                        v45 = 64;
                        goto LABEL_21;
                      }
LABEL_20:
                      mlir::TypeRange::dereference_iterator(v50, v25);
                      v45 = 64;
                      v39 = v124;
LABEL_21:
                      v44 = v129;
                      v41 = v126;
                      v37 = v128;
                      goto LABEL_14;
                    }
                    v45 = 56;
                    v53 = (char *)&v137;
                  }
                }
              }
            }
          }
          v44 = v129;
        }
        v67 = 64 - v45;
        v68 = v45;
        v41 = v126;
        v37 = v128;
        if (v45 != 64 - v45)
        {
          do
          {
            v93 = v68;
            v68 = v67;
            v67 = v93 % v67;
          }
          while (v67);
          v94 = (uint64_t *)((char *)&v130 + v68);
          do
          {
            v96 = *((_BYTE *)v94 - 1);
            v94 = (uint64_t *)((char *)v94 - 1);
            v95 = v96;
            v97 = &v94[(unint64_t)v45 / 8];
            v98 = v94;
            do
            {
              v99 = v98;
              v98 = v97;
              *(_BYTE *)v99 = *(_BYTE *)v97;
              v100 = (char *)((char *)&v138 - (char *)v97);
              v101 = __OFSUB__(v45, v100);
              v103 = v45 - (_QWORD)v100;
              v102 = (v103 < 0) ^ v101;
              v97 = (uint64_t *)((char *)&v130 + v103);
              if (v102)
                v97 = &v98[(unint64_t)v45 / 8];
            }
            while (v97 != v94);
            *(_BYTE *)v98 = v95;
          }
          while (v94 != &v130);
          goto LABEL_13;
        }
        if ((unint64_t)&v53[v122] >= (v45 ^ 0x3FuLL))
          v69 = v45 ^ 0x3F;
        else
          v69 = (unint64_t)&v53[v122];
        v70 = (char *)&v130;
        v71 = v45;
        if (v69 >= 0xF)
        {
          if (&v130 >= (uint64_t *)((char *)&v130 + v45 + v69 + 1)
            || (v71 = v45, (char *)&v130 + v45 >= (char *)&v130 + v69 + 1))
          {
            v72 = v69 + 1;
            v73 = (v69 + 1) & 0x70;
            v74 = (uint64_t *)((char *)&v130 + v45);
            v75 = v130;
            v76 = v131;
            v77 = *(uint64_t *)((char *)&v130 + v45 + 8);
            v130 = *(uint64_t *)((char *)&v130 + v45);
            v131 = v77;
            *v74 = v75;
            v74[1] = v76;
            if (v73 != 16)
            {
              v78 = (uint64_t *)((char *)&v132 + v45);
              v79 = v132;
              v80 = v133;
              v81 = *(uint64_t *)((char *)&v132 + v45 + 8);
              v132 = *(uint64_t *)((char *)&v132 + v45);
              v133 = v81;
              *v78 = v79;
              v78[1] = v80;
              if (v73 != 32)
              {
                v82 = (uint64_t *)((char *)&v134 + v45);
                v83 = v134;
                v84 = v135;
                v85 = *(uint64_t *)((char *)&v134 + v45 + 8);
                v134 = *(uint64_t *)((char *)&v134 + v45);
                v135 = v85;
                *v82 = v83;
                v82[1] = v84;
                if (v73 != 48)
                {
                  v86 = (uint64_t *)((char *)&v136 + v45);
                  v87 = v136;
                  v88 = v137;
                  v89 = *(uint64_t *)((char *)&v136 + v45 + 8);
                  v136 = *(uint64_t *)((char *)&v136 + v45);
                  v137 = v89;
                  *v86 = v87;
                  v86[1] = v88;
                }
              }
            }
            if (v72 == v73)
              goto LABEL_13;
            v71 = v45 + v73;
            v70 = (char *)&v130 + v73;
          }
        }
        v90 = v70 + 1;
        do
        {
          v91 = *(v90 - 1);
          *(v90 - 1) = *((_BYTE *)&v130 + v71);
          *((_BYTE *)&v130 + v71) = v91;
          if (v90 == v53)
            break;
          ++v90;
        }
        while (v71++ != 63);
      }
LABEL_13:
      v25 = v39;
LABEL_14:
      v46 = (0xB492B66FBE98F273 * __ROR8__(v36 + v40 + v32 + v131, 37)) ^ v37;
      v36 = v135 + v40 - 0x4B6D499041670D8DLL * __ROR8__(v36 + v42 + v136, 42);
      v47 = __ROR8__(v41 + v34, 33);
      v48 = v130 - 0x4B6D499041670D8DLL * v42;
      v42 = __ROR8__(v48 + v131 + v132, 44) + v48 + __ROR8__(v46 + v34 + v48 + v133, 21);
      v32 = 0xB492B66FBE98F273 * v47;
      v40 = v48 + v131 + v132 + v133;
      v49 = 0xB492B66FBE98F273 * v47 + v37 + v134;
      v37 = __ROR8__(v36 + v132 + v49 + v137, 21) + v49 + __ROR8__(v135 + v136 + v49, 44);
      v34 = v135 + v136 + v49 + v137;
      v43 += v45;
      v41 = v46;
      if (v44 && v25 == v39)
      {
        v105 = 0x9DDFEA08EB382D69
             * (v34 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v34)));
        v106 = v46 - 0x4B6D499041670D8DLL * (v36 ^ (v36 >> 47)) - 0x622015F714C7D297 * (v105 ^ (v105 >> 47));
        v107 = 0x9DDFEA08EB382D69
             * (v37 ^ ((0x9DDFEA08EB382D69 * (v42 ^ v37)) >> 47) ^ (0x9DDFEA08EB382D69 * (v42 ^ v37)));
        v108 = 0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69 * (v107 ^ (v107 >> 47)) - 0x4B6D499041670D8DLL * ((v43 ^ (v43 >> 47)) + v47)) ^ ((0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v107 ^ (v107 >> 47)) - 0x4B6D499041670D8DLL * ((v43 ^ (v43 >> 47)) + v47)) ^ v106)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v107 ^ (v107 >> 47)) - 0x4B6D499041670D8DLL * ((v43 ^ (v43 >> 47)) + v47)) ^ v106)));
        return 0x9DDFEA08EB382D69 * (v108 ^ (v108 >> 47));
      }
    }
  }
  v8 = 0;
  return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v130, v8, v7);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FunctionTypeStorage * mlir::StorageUniquer::get<mlir::detail::FunctionTypeStorage,mlir::TypeRange &,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::FunctionTypeStorage *)>,mlir::TypeID,mlir::TypeRange &,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v2 = *a1;
  v3 = *(unsigned int *)(a2 + 8);
  if ((*a1)[1] != v3)
    return 0;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = *v2;
    v8 = 8 * v3 - 8;
    v9 = *(_QWORD **)(a2 + 16);
    while (*v9 == mlir::TypeRange::dereference_iterator(v7, v6))
    {
      ++v6;
      ++v9;
      if (!v8)
        goto LABEL_10;
      v8 -= 8;
    }
    return 0;
  }
  v9 = *(_QWORD **)(a2 + 16);
LABEL_10:
  result = 0;
  if (v6 == v3 && v9 == (_QWORD *)(v5 + 8 * v3))
  {
    v11 = *(unsigned int *)(a2 + 12);
    if (v2[3] != v11)
      return 0;
    v12 = *(_QWORD *)(a2 + 16);
    v13 = *(unsigned int *)(a2 + 8);
    v14 = v12 + 8 * v13;
    v15 = 0;
    if ((_DWORD)v11)
    {
      v16 = v2[2];
      v17 = 8 * v11 - 8;
      v18 = (_QWORD *)(v12 + 8 * v13);
      while (*v18 == mlir::TypeRange::dereference_iterator(v16, v15))
      {
        ++v15;
        ++v18;
        if (!v17)
          return v15 == v11 && v18 == (_QWORD *)(v14 + 8 * v11);
        v17 -= 8;
      }
      return 0;
    }
    v18 = (_QWORD *)(v12 + 8 * v13);
    return v15 == v11 && v18 == (_QWORD *)(v14 + 8 * v11);
  }
  return result;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FunctionTypeStorage * mlir::StorageUniquer::get<mlir::detail::FunctionTypeStorage,mlir::TypeRange &,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::FunctionTypeStorage *)>,mlir::TypeID,mlir::TypeRange &,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = mlir::detail::FunctionTypeStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, unint64_t))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

unint64_t mlir::detail::FunctionTypeStorage::construct(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  char *buffer;
  uint64_t v32;
  unint64_t v33;
  void *v35;
  uint64_t v36;
  _QWORD v37[17];

  v37[16] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v35 = v37;
  v36 = 0x1000000000;
  if (v6 + v4 < 0x11)
  {
    v7 = 0;
    v8 = v4;
    if (v4 <= 0x10)
      goto LABEL_6;
    goto LABEL_5;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v6 + v4, 8);
  v7 = v36;
  v8 = v4 + v36;
  if (v8 > HIDWORD(v36))
  {
LABEL_5:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v8, 8);
    v7 = v36;
  }
LABEL_6:
  if (v4)
  {
    v9 = 0;
    v10 = (char *)v35 + 8 * v7;
    do
    {
      *(_QWORD *)&v10[8 * v9] = mlir::TypeRange::dereference_iterator(v3, v9);
      ++v9;
    }
    while (v4 != v9);
    v7 = v36;
  }
  v11 = v7 + v4;
  LODWORD(v36) = v11;
  if (v6 + v11 > (unint64_t)HIDWORD(v36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v6 + v11, 8);
    LODWORD(v11) = v36;
  }
  if (v6)
  {
    v12 = 0;
    v13 = (char *)v35 + 8 * v11;
    do
    {
      *(_QWORD *)&v13[8 * v12] = mlir::TypeRange::dereference_iterator(v5, v12);
      ++v12;
    }
    while (v6 != v12);
    LODWORD(v11) = v36;
  }
  v14 = (v11 + v6);
  LODWORD(v36) = v11 + v6;
  if ((_DWORD)v11 + (_DWORD)v6)
  {
    v15 = (uint64_t *)v35;
    v16 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)a1, 8 * (v11 + v6), 3);
    v17 = v16;
    v18 = (v14 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v18 < 3)
    {
      v19 = (_QWORD *)v16;
      v20 = v15;
    }
    else
    {
      v19 = (_QWORD *)v16;
      v20 = v15;
      if ((unint64_t)(v16 - (_QWORD)v15) >= 0x20)
      {
        v21 = 0;
        v22 = v18 + 1;
        v23 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        v19 = (_QWORD *)(v16 + v23 * 8);
        v20 = &v15[v23];
        v24 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = (_OWORD *)(v16 + v21 * 8);
          v26 = *(_OWORD *)&v15[v21 + 2];
          *v25 = *(_OWORD *)&v15[v21];
          v25[1] = v26;
          v21 += 4;
          v24 -= 4;
        }
        while (v24);
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_26;
      }
    }
    do
    {
      v27 = *v20++;
      *v19++ = v27;
    }
    while (v20 != &v15[v14]);
  }
  else
  {
    v17 = 0;
  }
LABEL_26:
  *(_QWORD *)(a1 + 80) += 24;
  if (*(_QWORD *)a1)
    v28 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 24 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v28 = 1;
  if (v28)
  {
    v29 = *(_DWORD *)(a1 + 24) >> 7;
    if (v29 >= 0x1E)
      LOBYTE(v29) = 30;
    v30 = 4096 << v29;
    buffer = (char *)llvm::allocate_buffer(4096 << v29, (std::align_val_t)8uLL);
    v32 = *(unsigned int *)(a1 + 24);
    if (v32 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v32 + 1, 8);
      LODWORD(v32) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v32) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v30];
    v33 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v33 = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = v33 + 24;
  *(_QWORD *)v33 = 0;
  *(_DWORD *)(v33 + 8) = v4;
  *(_DWORD *)(v33 + 12) = v6;
  *(_QWORD *)(v33 + 16) = v17;
  if (v35 != v37)
    free(v35);
  return v33;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail19FunctionTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_12FunctionTypeEJRNS1_9TypeRangeESC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t llvm::hash_combine<mlir::StringAttr,llvm::StringRef>(_DWORD *a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  _OWORD v13[4];
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  if ((v2 & 1) == 0)
  {
    v11 = a1;
    v7 = a2;
    a2 = v7;
    v9 = v8;
    a1 = v11;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a1 = v11;
      a2 = v7;
    }
  }
  v3 = (*a1 >> 4) ^ (*a1 >> 9);
  v16 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v12 = 0;
  *(_QWORD *)&v13[0] = v3;
  v4 = llvm::hash_value(*(_QWORD **)a2, *(_QWORD *)(a2 + 8));
  v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v13, (uint64_t *)&v12, (_QWORD *)v13 + 1, (unint64_t)v14, v4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v13, v12, v5, (char *)v14);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueTypeStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueTypeStorage,mlir::StringAttr &,llvm::StringRef &>(llvm::function_ref<void ()(mlir::detail::OpaqueTypeStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  size_t v3;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)*a1)
    return 0;
  v3 = *(_QWORD *)(a2 + 24);
  if (v3 != v2[2])
    return 0;
  if (v3)
    return memcmp(*(const void **)(a2 + 16), (const void *)v2[1], v3) == 0;
  return 1;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueTypeStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueTypeStorage,mlir::StringAttr &,llvm::StringRef &>(llvm::function_ref<void ()(mlir::detail::OpaqueTypeStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::OpaqueTypeStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::detail::OpaqueTypeStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  char *buffer;
  uint64_t v24;
  _QWORD *result;

  v3 = *a2;
  v4 = a2[2];
  if (!v4)
  {
    v7 = 0;
    goto LABEL_19;
  }
  v5 = a2[1];
  v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, v4 + 1, 0);
  v7 = v6;
  if (v4 < 8)
  {
    v8 = (_BYTE *)v6;
    v9 = (char *)v5;
  }
  else
  {
    v8 = (_BYTE *)v6;
    v9 = (char *)v5;
    if ((unint64_t)(v6 - v5) >= 0x20)
    {
      if (v4 < 0x20)
      {
        v10 = 0;
        goto LABEL_12;
      }
      v10 = v4 & 0xFFFFFFFFFFFFFFE0;
      v11 = (__int128 *)(v5 + 16);
      v12 = (_OWORD *)(v6 + 16);
      v13 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 32;
      }
      while (v13);
      if (v4 == v10)
        goto LABEL_18;
      if ((v4 & 0x18) != 0)
      {
LABEL_12:
        v8 = (_BYTE *)(v6 + (v4 & 0xFFFFFFFFFFFFFFF8));
        v9 = (char *)(v5 + (v4 & 0xFFFFFFFFFFFFFFF8));
        v15 = (uint64_t *)(v5 + v10);
        v16 = (_QWORD *)(v6 + v10);
        v17 = v10 - (v4 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v18 = *v15++;
          *v16++ = v18;
          v17 += 8;
        }
        while (v17);
        if (v4 == (v4 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_18;
        goto LABEL_17;
      }
      v9 = (char *)(v5 + v10);
      v8 = (_BYTE *)(v6 + v10);
    }
  }
  do
  {
LABEL_17:
    v19 = *v9++;
    *v8++ = v19;
  }
  while (v9 != (char *)(v5 + v4));
LABEL_18:
  *(_BYTE *)(v6 + v4) = 0;
LABEL_19:
  *(_QWORD *)(__sz + 80) += 32;
  if (*(_QWORD *)__sz)
    v20 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 32 > *(_QWORD *)(__sz + 8)
                                                                                  - *(_QWORD *)__sz;
  else
    v20 = 1;
  if (v20)
  {
    v21 = *(_DWORD *)(__sz + 24) >> 7;
    if (v21 >= 0x1E)
      LOBYTE(v21) = 30;
    v22 = 4096 << v21;
    buffer = (char *)llvm::allocate_buffer(4096 << v21, (std::align_val_t)8uLL);
    v24 = *(unsigned int *)(__sz + 24);
    if (v24 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v24 + 1, 8);
      LODWORD(v24) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v24) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v22];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)__sz = result + 4;
  *result = 0;
  result[1] = v3;
  result[2] = v7;
  result[3] = v4;
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail17OpaqueTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10OpaqueTypeEJRNS1_10StringAttrERNS_9StringRefEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,mlir::Attribute>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned __int8 v5;
  char *v6;
  char *v7;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _OWORD v14[4];
  _OWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  if ((v5 & 1) == 0)
  {
    v11 = a1;
    a1 = v11;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a1 = v11;
    }
  }
  v17 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v14[0] = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a1, *(_QWORD *)a1 + 8 * *(_QWORD *)(a1 + 8));
  v12 = 0;
  v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v12, (_QWORD *)v14 + 1, (unint64_t)v15, (*a2 >> 4) ^ (*a2 >> 9));
  v13 = v12;
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v13, v6, (unint64_t)v15, (*a3 >> 4) ^ (*a3 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v14, v13, v7, (char *)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::RankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::RankedTensorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::RankedTensorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 16);
  return v3 == *(_QWORD *)(*a1 + 8)
      && !memcmp(*(const void **)(a2 + 8), *(const void **)v2, 8 * v3)
      && *(_QWORD *)(a2 + 24) == *(_QWORD *)(v2 + 16)
      && *(_QWORD *)(a2 + 32) == *(_QWORD *)(v2 + 24);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::RankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::RankedTensorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::RankedTensorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::detail::RankedTensorTypeStorage::construct(a2, (__n128 *)*(_QWORD *)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, __n128))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

__n128 mlir::detail::RankedTensorTypeStorage::construct(size_t __sz, __n128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  char *buffer;
  uint64_t v21;
  unint64_t v22;
  __n128 result;
  __n128 v24;

  v3 = a2->n128_u64[1];
  v24 = a2[1];
  if (v3)
  {
    v4 = a2->n128_u64[0];
    v5 = 8 * v3;
    v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v3, 3);
    v7 = v6;
    if (8 * v3 - 8 < 0x18)
    {
      v8 = (_QWORD *)v6;
      v9 = (uint64_t *)v4;
    }
    else
    {
      v8 = (_QWORD *)v6;
      v9 = (uint64_t *)v4;
      if (v6 - v4 >= 0x20)
      {
        v10 = ((unint64_t)(v5 - 8) >> 3) + 1;
        v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
        v8 = (_QWORD *)(v6 + v11);
        v9 = (uint64_t *)(v4 + v11);
        v12 = (__int128 *)(v4 + 16);
        v13 = (_OWORD *)(v6 + 16);
        v14 = v10 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v15 = *v12;
          *(v13 - 1) = *(v12 - 1);
          *v13 = v15;
          v12 += 2;
          v13 += 2;
          v14 -= 4;
        }
        while (v14);
        if (v10 == (v10 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_11;
      }
    }
    do
    {
      v16 = *v9++;
      *v8++ = v16;
    }
    while (v9 != (uint64_t *)(v4 + v5));
  }
  else
  {
    v7 = 0;
  }
LABEL_11:
  *(_QWORD *)(__sz + 80) += 40;
  if (*(_QWORD *)__sz)
    v17 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 40 > *(_QWORD *)(__sz + 8)
                                                                                  - *(_QWORD *)__sz;
  else
    v17 = 1;
  if (v17)
  {
    v18 = *(_DWORD *)(__sz + 24) >> 7;
    if (v18 >= 0x1E)
      LOBYTE(v18) = 30;
    v19 = 4096 << v18;
    buffer = (char *)llvm::allocate_buffer(4096 << v18, (std::align_val_t)8uLL);
    v21 = *(unsigned int *)(__sz + 24);
    if (v21 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v21 + 1, 8);
      LODWORD(v21) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v21) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v19];
    v22 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v22 = (*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)__sz = v22 + 40;
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = v7;
  *(_QWORD *)(v22 + 16) = v3;
  result = v24;
  *(__n128 *)(v22 + 24) = v24;
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail23RankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_16RankedTensorTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
  *a2 = result;
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(unsigned int *)(a2 + 8);
  if ((*a1)[1] != v2)
    return 0;
  v3 = a2 + 16;
  v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = **a1;
    v6 = 8 * v2 - 8;
    v7 = (_QWORD *)(a2 + 16);
    while (*v7 == mlir::TypeRange::dereference_iterator(v5, v4))
    {
      ++v4;
      ++v7;
      if (!v6)
        return v4 == v2 && v7 == (_QWORD *)(v3 + 8 * v2);
      v6 -= 8;
    }
    return 0;
  }
  v7 = (_QWORD *)(a2 + 16);
  return v4 == v2 && v7 == (_QWORD *)(v3 + 8 * v2);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t *__sz)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;

  v3 = **(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v5 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, 8 * v4 + 16, 3);
  *(_QWORD *)v5 = 0;
  *(_DWORD *)(v5 + 8) = v4;
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      *(_QWORD *)(v5 + 16 + 8 * i) = mlir::TypeRange::dereference_iterator(v3, i);
  }
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v7)
    (*(void (**)(_QWORD, uint64_t))v7)(*(_QWORD *)(v7 + 8), v5);
  return v5;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail16TupleTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_9TupleTypeEJRNS1_9TypeRangeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
  *a2 = result;
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(unsigned int *)(a2 + 8);
  if ((*a1)[1] != v2)
    return 0;
  v3 = a2 + 16;
  v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = **a1;
    v6 = 8 * v2 - 8;
    v7 = (_QWORD *)(a2 + 16);
    while (*v7 == mlir::TypeRange::dereference_iterator(v5, v4))
    {
      ++v4;
      ++v7;
      if (!v6)
        return v4 == v2 && v7 == (_QWORD *)(v3 + 8 * v2);
      v6 -= 8;
    }
    return 0;
  }
  v7 = (_QWORD *)(a2 + 16);
  return v4 == v2 && v7 == (_QWORD *)(v3 + 8 * v2);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t *__sz)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;

  v3 = **(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v5 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, 8 * v4 + 16, 3);
  *(_QWORD *)v5 = 0;
  *(_DWORD *)(v5 + 8) = v4;
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      *(_QWORD *)(v5 + 16 + 8 * i) = mlir::TypeRange::dereference_iterator(v3, i);
  }
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v7)
    (*(void (**)(_QWORD, uint64_t))v7)(*(_QWORD *)(v7 + 8), v5);
  return v5;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail16TupleTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_9TupleTypeEJNS1_9TypeRangeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t llvm::hash_combine<mlir::Type,mlir::Attribute>(_DWORD *a1, _DWORD *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  char *v4;
  int v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  _OWORD v11[4];
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  if ((v2 & 1) == 0)
  {
    v8 = a2;
    v9 = a1;
    a2 = v8;
    a1 = v9;
    if (v6)
    {
      v7 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v7 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v7;
      a2 = v8;
      a1 = v9;
    }
  }
  v3 = (*a1 >> 4) ^ (*a1 >> 9);
  v14 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v10 = 0;
  *(_QWORD *)&v11[0] = v3;
  v4 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v11, (uint64_t *)&v10, (_QWORD *)v11 + 1, (unint64_t)v12, (*a2 >> 4) ^ (*a2 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v11, v10, v4, (char *)v12);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::UnrankedMemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedMemRefTypeStorage,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::UnrankedMemRefTypeStorage *)>,mlir::TypeID,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **(_QWORD **)a1 && *(_QWORD *)(a2 + 16) == *(_QWORD *)(*(_QWORD *)a1 + 8);
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::UnrankedMemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedMemRefTypeStorage,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::UnrankedMemRefTypeStorage *)>,mlir::TypeID,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(__int128 **a1, uint64_t a2)
{
  __int128 v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  __int128 v13;

  v4 = **a1;
  *(_QWORD *)(a2 + 80) += 24;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 24 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v13 = v4;
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    v4 = v13;
  }
  else
  {
    v10 = (*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a2 = v10 + 24;
  *(_QWORD *)v10 = 0;
  *(_OWORD *)(v10 + 8) = v4;
  v11 = a1[1];
  if (*(_QWORD *)v11)
    (*(void (**)(_QWORD, unint64_t))v11)(*((_QWORD *)v11 + 1), v10);
  return v10;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail25UnrankedMemRefTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_18UnrankedMemRefTypeEJRNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::UnrankedTensorTypeStorage,mlir::Type &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v11;
  int v12;
  unint64_t v13;
  unsigned __int8 **v15;
  _QWORD v16[2];
  uint64_t *v17;
  uint64_t v18;
  _QWORD v19[2];

  v5 = a4;
  v19[0] = a2;
  v19[1] = a3;
  v18 = *a5;
  v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v6 & 1) == 0)
  {
    v15 = a1;
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v11;
    v5 = a4;
    a1 = v15;
    if (v12)
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v5 = a4;
      a1 = v15;
    }
  }
  v8 = v7[19];
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (8 * ((v18 >> 4) ^ (v18 >> 9)) + 8));
  v16[0] = &v18;
  v16[1] = v19;
  v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895* ((((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 32) >> 15) ^ (-348639895* (v8 ^ (v9 >> 47) ^ v9))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::UnrankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedTensorTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::UnrankedTensorTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::UnrankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedTensorTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::UnrankedTensorTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::UnrankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedTensorTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::UnrankedTensorTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **a1;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::UnrankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedTensorTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::UnrankedTensorTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  char *buffer;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  void (*v14)(uint64_t, _QWORD *);

  v4 = **a1;
  a2[10] += 16;
  v5 = *a2;
  v6 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (*a2)
    v7 = v6 + 16 > a2[1] - *a2;
  else
    v7 = 1;
  if (v7)
  {
    v8 = *((_DWORD *)a2 + 6) >> 7;
    if (v8 >= 0x1E)
      LOBYTE(v8) = 30;
    v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    v11 = *((unsigned int *)a2 + 6);
    if (v11 >= *((_DWORD *)a2 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), a2 + 4, v11 + 1, 8);
      LODWORD(v11) = *((_DWORD *)a2 + 6);
    }
    *(_QWORD *)(a2[2] + 8 * v11) = buffer;
    ++*((_DWORD *)a2 + 6);
    a2[1] = (uint64_t)&buffer[v9];
    v12 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *a2 = (uint64_t)(v12 + 2);
    *v12 = 0;
    v12[1] = v4;
    v13 = a1[1];
    v14 = (void (*)(uint64_t, _QWORD *))*v13;
    if (*v13)
      goto LABEL_13;
  }
  else
  {
    v12 = (_QWORD *)(v5 + v6);
    *a2 = v5 + v6 + 16;
    *v12 = 0;
    v12[1] = v4;
    v13 = a1[1];
    v14 = (void (*)(uint64_t, _QWORD *))*v13;
    if (*v13)
LABEL_13:
      v14(v13[1], v12);
  }
  return v12;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail25UnrankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_18UnrankedTensorTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,llvm::ArrayRef<BOOL>>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned __int8 v5;
  char *v6;
  unint64_t v7;
  char *v8;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD v15[4];
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  if ((v5 & 1) == 0)
  {
    v12 = a1;
    a1 = v12;
    if (v10)
    {
      v11 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v11 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v11;
      a1 = v12;
    }
  }
  v18 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v15[0] = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a1, *(_QWORD *)a1 + 8 * *(_QWORD *)(a1 + 8));
  v13 = 0;
  v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v15, (uint64_t *)&v13, (_QWORD *)v15 + 1, (unint64_t)v16, (*a2 >> 4) ^ (*a2 >> 9));
  v14 = v13;
  v7 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a3, *(_QWORD *)a3 + *(_QWORD *)(a3 + 8));
  v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v15, (uint64_t *)&v14, v6, (unint64_t)v16, v7);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v15, v14, v8, (char *)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::VectorTypeStorage * mlir::StorageUniquer::get<mlir::detail::VectorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,llvm::ArrayRef<BOOL> &>(llvm::function_ref<void ()(mlir::detail::VectorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,llvm::ArrayRef<BOOL> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  size_t v5;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 16);
  if (v3 == *(_QWORD *)(*a1 + 8)
    && !memcmp(*(const void **)(a2 + 8), *(const void **)v2, 8 * v3)
    && *(_QWORD *)(a2 + 24) == *(_QWORD *)(v2 + 16)
    && (v5 = *(_QWORD *)(a2 + 40), v5 == *(_QWORD *)(v2 + 32)))
  {
    return memcmp(*(const void **)(a2 + 32), *(const void **)(v2 + 24), v5) == 0;
  }
  else
  {
    return 0;
  }
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::VectorTypeStorage * mlir::StorageUniquer::get<mlir::detail::VectorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,llvm::ArrayRef<BOOL> &>(llvm::function_ref<void ()(mlir::detail::VectorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,llvm::ArrayRef<BOOL> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::VectorTypeStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::detail::VectorTypeStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  __int128 *v25;
  _OWORD *v26;
  unint64_t v27;
  __int128 v28;
  uint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  char *buffer;
  uint64_t v38;
  _QWORD *result;

  v3 = a2[1];
  v4 = a2[2];
  v6 = a2[3];
  v5 = a2[4];
  if (!v3)
  {
    v10 = 0;
    goto LABEL_11;
  }
  v7 = *a2;
  v8 = 8 * v3;
  v9 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v3, 3);
  v10 = v9;
  if ((unint64_t)(8 * v3 - 8) < 0x18)
  {
    v11 = (_QWORD *)v9;
    v12 = (uint64_t *)v7;
    do
    {
LABEL_10:
      v19 = *v12++;
      *v11++ = v19;
    }
    while (v12 != (uint64_t *)(v7 + v8));
    goto LABEL_11;
  }
  v11 = (_QWORD *)v9;
  v12 = (uint64_t *)v7;
  if ((unint64_t)(v9 - v7) < 0x20)
    goto LABEL_10;
  v13 = ((unint64_t)(v8 - 8) >> 3) + 1;
  v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
  v11 = (_QWORD *)(v9 + v14);
  v12 = (uint64_t *)(v7 + v14);
  v15 = (__int128 *)(v7 + 16);
  v16 = (_OWORD *)(v9 + 16);
  v17 = v13 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v18 = *v15;
    *(v16 - 1) = *(v15 - 1);
    *v16 = v18;
    v15 += 2;
    v16 += 2;
    v17 -= 4;
  }
  while (v17);
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_10;
LABEL_11:
  if (v5)
  {
    v20 = (char *)v6;
    v21 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, v5, 0);
    v22 = v21;
    if (v5 < 8)
    {
      v23 = (_BYTE *)v21;
    }
    else
    {
      v23 = (_BYTE *)v21;
      if ((unint64_t)(v21 - v6) >= 0x20)
      {
        if (v5 < 0x20)
        {
          v24 = 0;
          goto LABEL_22;
        }
        v24 = v5 & 0xFFFFFFFFFFFFFFE0;
        v25 = (__int128 *)(v6 + 16);
        v26 = (_OWORD *)(v21 + 16);
        v27 = v5 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v28 = *v25;
          *(v26 - 1) = *(v25 - 1);
          *v26 = v28;
          v25 += 2;
          v26 += 2;
          v27 -= 32;
        }
        while (v27);
        if (v5 == v24)
          goto LABEL_28;
        if ((v5 & 0x18) != 0)
        {
LABEL_22:
          v23 = (_BYTE *)(v21 + (v5 & 0xFFFFFFFFFFFFFFF8));
          v20 = (char *)(v6 + (v5 & 0xFFFFFFFFFFFFFFF8));
          v29 = (uint64_t *)(v6 + v24);
          v30 = (_QWORD *)(v21 + v24);
          v31 = v24 - (v5 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v32 = *v29++;
            *v30++ = v32;
            v31 += 8;
          }
          while (v31);
          if (v5 == (v5 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_28;
          goto LABEL_27;
        }
        v20 = (char *)(v6 + v24);
        v23 = (_BYTE *)(v21 + v24);
      }
    }
    do
    {
LABEL_27:
      v33 = *v20++;
      *v23++ = v33;
    }
    while (v20 != (char *)(v6 + v5));
    goto LABEL_28;
  }
  v22 = 0;
LABEL_28:
  *(_QWORD *)(__sz + 80) += 48;
  if (*(_QWORD *)__sz)
    v34 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 48 > *(_QWORD *)(__sz + 8)
                                                                                  - *(_QWORD *)__sz;
  else
    v34 = 1;
  if (v34)
  {
    v35 = *(_DWORD *)(__sz + 24) >> 7;
    if (v35 >= 0x1E)
      LOBYTE(v35) = 30;
    v36 = 4096 << v35;
    buffer = (char *)llvm::allocate_buffer(4096 << v35, (std::align_val_t)8uLL);
    v38 = *(unsigned int *)(__sz + 24);
    if (v38 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v38 + 1, 8);
      LODWORD(v38) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v38) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v36];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)__sz = result + 6;
  *result = 0;
  result[1] = v10;
  result[2] = v3;
  result[3] = v4;
  result[4] = v22;
  result[5] = v5;
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail17VectorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10VectorTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNSB_IbEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t *mlir::Dialect::addType<mlir::ComplexType>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::ComplexType,mlir::Type,mlir::detail::ComplexTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11ComplexTypeES2_NSB_18ComplexTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11ComplexTypeES2_NSA_18ComplexTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id, 0, v10);
}

_QWORD *mlir::Dialect::addType<mlir::Float8E5M2Type>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  mlir::MLIRContext *v11;
  uint64_t (**v12)(uint64_t, uint64_t *);
  uint64_t (*v13)(uint64_t, uint64_t *);
  void *v14;
  uint64_t v15;
  _BYTE v16[48];
  llvm *v17[2];
  unint64_t v18;
  uint64_t (*v19)();
  uint64_t (***v20)(uint64_t, uint64_t *);
  uint64_t (*v21)(uint64_t, uint64_t);
  mlir::MLIRContext **v22;
  void *v23;
  mlir::MLIRContext **v24;
  void *v25;
  _OWORD v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  memset(v26, 0, sizeof(v26));
  v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  v14 = v16;
  v15 = 0x300000000;
  v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float8E5M2Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14Float8E5M2TypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v20 = &v12;
  v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14Float8E5M2TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v22 = &v11;
  v23 = &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id, (uint64_t)&v13);
  v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0)
        v4 = v17;
      else
        v4 = (llvm **)v17[0];
      (*(void (**)(uint64_t, void *))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v17[0], v17[1]);
  }
  v5 = v14;
  if ((_DWORD)v15)
  {
    v6 = 16 * v15;
    v7 = (void **)((char *)v14 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v14;
  }
  if (v5 != v16)
    free(v5);
  v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  v24 = &v11;
  v25 = &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id;
  v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_14Float8E5M2TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  v14 = &v24;
  v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

_QWORD *mlir::Dialect::addType<mlir::Float8E4M3FNType>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  mlir::MLIRContext *v11;
  uint64_t (**v12)(uint64_t, uint64_t *);
  uint64_t (*v13)(uint64_t, uint64_t *);
  void *v14;
  uint64_t v15;
  _BYTE v16[48];
  llvm *v17[2];
  unint64_t v18;
  uint64_t (*v19)();
  uint64_t (***v20)(uint64_t, uint64_t *);
  uint64_t (*v21)(uint64_t, uint64_t);
  mlir::MLIRContext **v22;
  void *v23;
  mlir::MLIRContext **v24;
  void *v25;
  _OWORD v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  memset(v26, 0, sizeof(v26));
  v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  v14 = v16;
  v15 = 0x300000000;
  v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float8E4M3FNType,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_16Float8E4M3FNTypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v20 = &v12;
  v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_16Float8E4M3FNTypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v22 = &v11;
  v23 = &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id, (uint64_t)&v13);
  v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0)
        v4 = v17;
      else
        v4 = (llvm **)v17[0];
      (*(void (**)(uint64_t, void *))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v17[0], v17[1]);
  }
  v5 = v14;
  if ((_DWORD)v15)
  {
    v6 = 16 * v15;
    v7 = (void **)((char *)v14 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v14;
  }
  if (v5 != v16)
    free(v5);
  v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  v24 = &v11;
  v25 = &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_16Float8E4M3FNTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  v14 = &v24;
  v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

_QWORD *mlir::Dialect::addType<mlir::Float8E5M2FNUZType>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  mlir::MLIRContext *v11;
  uint64_t (**v12)(uint64_t, uint64_t *);
  uint64_t (*v13)(uint64_t, uint64_t *);
  void *v14;
  uint64_t v15;
  _BYTE v16[48];
  llvm *v17[2];
  unint64_t v18;
  uint64_t (*v19)();
  uint64_t (***v20)(uint64_t, uint64_t *);
  uint64_t (*v21)(uint64_t, uint64_t);
  mlir::MLIRContext **v22;
  void *v23;
  mlir::MLIRContext **v24;
  void *v25;
  _OWORD v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  memset(v26, 0, sizeof(v26));
  v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  v14 = v16;
  v15 = 0x300000000;
  v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float8E5M2FNUZType,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18Float8E5M2FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v20 = &v12;
  v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18Float8E5M2FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v22 = &v11;
  v23 = &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id, (uint64_t)&v13);
  v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0)
        v4 = v17;
      else
        v4 = (llvm **)v17[0];
      (*(void (**)(uint64_t, void *))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v17[0], v17[1]);
  }
  v5 = v14;
  if ((_DWORD)v15)
  {
    v6 = 16 * v15;
    v7 = (void **)((char *)v14 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v14;
  }
  if (v5 != v16)
    free(v5);
  v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  v24 = &v11;
  v25 = &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_18Float8E5M2FNUZTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  v14 = &v24;
  v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

_QWORD *mlir::Dialect::addType<mlir::Float8E4M3FNUZType>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  mlir::MLIRContext *v11;
  uint64_t (**v12)(uint64_t, uint64_t *);
  uint64_t (*v13)(uint64_t, uint64_t *);
  void *v14;
  uint64_t v15;
  _BYTE v16[48];
  llvm *v17[2];
  unint64_t v18;
  uint64_t (*v19)();
  uint64_t (***v20)(uint64_t, uint64_t *);
  uint64_t (*v21)(uint64_t, uint64_t);
  mlir::MLIRContext **v22;
  void *v23;
  mlir::MLIRContext **v24;
  void *v25;
  _OWORD v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  memset(v26, 0, sizeof(v26));
  v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  v14 = v16;
  v15 = 0x300000000;
  v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float8E4M3FNUZType,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18Float8E4M3FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v20 = &v12;
  v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18Float8E4M3FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v22 = &v11;
  v23 = &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id, (uint64_t)&v13);
  v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0)
        v4 = v17;
      else
        v4 = (llvm **)v17[0];
      (*(void (**)(uint64_t, void *))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v17[0], v17[1]);
  }
  v5 = v14;
  if ((_DWORD)v15)
  {
    v6 = 16 * v15;
    v7 = (void **)((char *)v14 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v14;
  }
  if (v5 != v16)
    free(v5);
  v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  v24 = &v11;
  v25 = &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_18Float8E4M3FNUZTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  v14 = &v24;
  v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

